// Note on Operative Statistics:
// Operative Statistics are not a precise predictor of performance or performance comparisons.
// This is due to varying hardware capabilities and compiler optimizations.
// As always, where performance is a concern, there is no substitute for
// real measurements on real work-loads on real hardware.
// Disclaimer aside, enjoy the fun information =)
//
// Total Implementations: 625
//
// Yes SIMD:   add/sub     mul     div
//  Minimum:         0       0       0
//   Median:        16      30       0
//  Average:        30      46       0
//  Maximum:       415     492       1
//
//  No SIMD:   add/sub     mul     div
//  Minimum:         0       0       0
//   Median:        31      60       0
//  Average:        62      90       0
//  Maximum:      1015    1092       1
impl std::ops::Div<GeometricQuotientInfix> for AntiCircleRotor {
    type Output = GeometricQuotientInfixPartial<AntiCircleRotor>;
    fn div(self, _rhs: GeometricQuotientInfix) -> Self::Output {
        GeometricQuotientInfixPartial(self)
    }
}
impl GeometricQuotient<AntiCircleRotor> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44       64        0
    //    simd3        0       11        0
    //    simd4       17       13        0
    // Totals...
    // yes simd       61       88        0
    //  no simd      112      149        0
    fn geometric_quotient(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiCircleRotor::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, scalar
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                + f32::powi(other[scalar], 2)
                - f32::powi(other[e45], 2),
        );
        let geometric_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (geometric_product[e31] * self[e43]) + (geometric_product[e45] * self[e41]) + (geometric_product[scalar] * self[e41]),
                (geometric_product[e12] * self[e41]) + (geometric_product[e45] * self[e42]) + (geometric_product[scalar] * self[e42]),
                (geometric_product[e23] * self[e42]) + (geometric_product[e45] * self[e43]) + (geometric_product[scalar] * self[e43]),
                -(geometric_product[e23] * self[e23])
                    - (geometric_product[e31] * self[e31])
                    - (geometric_product[e12] * self[e12])
                    - (geometric_product[e15] * self[e41])
                    - (geometric_product[e25] * self[e42])
                    - (geometric_product[e35] * self[e43]),
            ]) + (self.group1().zx().with_zw(self[scalar], self[scalar]) * geometric_product.group0().yzz().with_w(geometric_product[scalar]))
                + (self.group2().ww().with_zw(self[e31], self[e45]) * geometric_product.group0().xyx().with_w(geometric_product[e45]))
                - (geometric_product.group0().xxy() * self.group1().wzx()).with_w(geometric_product[e41] * self[e15])
                - (geometric_product.group0().zyz() * self.group1().yww()).with_w(geometric_product[e42] * self[e25])
                - (self.group0().yzx() * geometric_product.group1().zxy()).with_w(geometric_product[e43] * self[e35]),
            // e23, e31, e12, e45
            (Simd32x4::from(geometric_product[scalar]) * self.group1())
                + (geometric_product.group1().yzzw() * self.group1().zx().with_zw(self[scalar], self[scalar]))
                + (geometric_product.group2().yzxy() * self.group0().zxy().with_w(self[e42]))
                + (self.group2().ww().with_zw(self[e31], geometric_product[e35]) * geometric_product.group1().xyx().with_w(self[e43]))
                + (geometric_product.group0().yzx() * self.group2().zxy()).with_w(geometric_product[e15] * self[e41])
                - (self.group2().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e41]))
                - (self.group0().yzx() * geometric_product.group2().zxy()).with_w(geometric_product[e42] * self[e25])
                - (geometric_product.group1().zxy() * self.group1().yzx()).with_w(geometric_product[e43] * self[e35]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (geometric_product[e31] * self[e35])
                    + (geometric_product[e15] * self[e45])
                    + (geometric_product[e15] * self[scalar])
                    + (geometric_product[e25] * self[e12])
                    + (geometric_product[scalar] * self[e15]),
                (geometric_product[e12] * self[e15])
                    + (geometric_product[e25] * self[e45])
                    + (geometric_product[e25] * self[scalar])
                    + (geometric_product[e35] * self[e23])
                    + (geometric_product[scalar] * self[e25]),
                (geometric_product[e23] * self[e25])
                    + (geometric_product[e15] * self[e31])
                    + (geometric_product[e35] * self[e45])
                    + (geometric_product[e35] * self[scalar])
                    + (geometric_product[scalar] * self[e35]),
                -(geometric_product[e23] * self[e41]) - (geometric_product[e31] * self[e42]) - (geometric_product[e12] * self[e43]),
            ]) - (self.group1().yzxz() * geometric_product.group2().zxy().with_w(geometric_product[e43]))
                - (geometric_product.group1().zxy() * self.group2().yzx()).with_w(geometric_product[e41] * self[e23])
                - (geometric_product.group1().www() * self.group2().xyz()).with_w(geometric_product[e42] * self[e31]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (geometric_product[e42] * self[e35]) + (geometric_product[e23] * self[e45]) + (geometric_product[e45] * self[e23]) + (geometric_product[e35] * self[e42]),
                (geometric_product[e43] * self[e15]) + (geometric_product[e31] * self[e45]) + (geometric_product[e45] * self[e31]) + (geometric_product[e15] * self[e43]),
                (geometric_product[e41] * self[e25]) + (geometric_product[e12] * self[e45]) + (geometric_product[e45] * self[e12]) + (geometric_product[e25] * self[e41]),
                -(geometric_product[e12] * self[e35]) - (geometric_product[e15] * self[e23]) - (geometric_product[e25] * self[e31]) - (geometric_product[e35] * self[e12]),
            ]) - (self.group2().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e23]))
                - (self.group0().zxy() * geometric_product.group2().yzx()).with_w(geometric_product[e31] * self[e25]),
        );
    }
}
impl GeometricQuotient<AntiDipoleInversion> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       51       77        0
    //    simd3        0       14        0
    //    simd4       27       20        0
    // Totals...
    // yes simd       78      111        0
    //  no simd      159      199        0
    fn geometric_quotient(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e4
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125])
                - 2.0 * (other[e4] * other[e5]),
        );
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e4
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e1, e2, e3, e5
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e42] * geometric_product[e3])
                    + (self[e43] * geometric_product[e425])
                    + (self[e23] * geometric_product[e4])
                    + (self[e12] * geometric_product[e431])
                    + (self[scalar] * geometric_product[e423]),
                (self[e41] * geometric_product[e435])
                    + (self[e43] * geometric_product[e1])
                    + (self[e23] * geometric_product[e412])
                    + (self[e31] * geometric_product[e4])
                    + (self[scalar] * geometric_product[e431]),
                (self[e41] * geometric_product[e2])
                    + (self[e42] * geometric_product[e415])
                    + (self[e31] * geometric_product[e423])
                    + (self[e12] * geometric_product[e4])
                    + (self[scalar] * geometric_product[e412]),
                -(self[e23] * geometric_product[e415])
                    - (self[e31] * geometric_product[e425])
                    - (self[e12] * geometric_product[e435])
                    - (self[e45] * geometric_product[e321])
                    - (self[e35] * geometric_product[e412]),
            ]) - (Simd32x4::from(self[e41]) * Simd32x4::from([geometric_product[e321], geometric_product[e3], geometric_product[e425], geometric_product[e235]]))
                - (Simd32x4::from(self[e42]) * geometric_product.group1().zw().with_zw(geometric_product[e1], geometric_product[e315]))
                - (Simd32x4::from(self[e43]) * Simd32x4::from([geometric_product[e2], geometric_product[e415], geometric_product[e321], geometric_product[e125]]))
                - (geometric_product.group0().xxy() * self.group1().wzx()).with_w(self[e15] * geometric_product[e423])
                - (geometric_product.group0().zyz() * self.group1().yww()).with_w(self[e25] * geometric_product[e431]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e15] * geometric_product[e4]) + (self[scalar] * geometric_product[e415]),
                (self[e25] * geometric_product[e4]) + (self[scalar] * geometric_product[e425]),
                (self[e35] * geometric_product[e4]) + (self[scalar] * geometric_product[e435]),
                -(self[e31] * geometric_product[e2]) - (self[e12] * geometric_product[e3]),
            ]) + (Simd32x4::from([geometric_product[e315], geometric_product[e5], geometric_product[e5], self[e25]]) * self.group0().zyz().with_w(geometric_product[e431]))
                + (Simd32x4::from([geometric_product[e5], geometric_product[e125], geometric_product[e235], self[e15]]) * self.group0().xxy().with_w(geometric_product[e423]))
                + (self.group2().zxyz() * geometric_product.group0().yzx().with_w(geometric_product[e412]))
                + (geometric_product.group1().yzxw() * self.group1().zxy().with_w(self[scalar]))
                - (self.group1().wwwx() * geometric_product.group3().xyzx())
                - (geometric_product.group2().zxyx() * self.group0().yzx().with_w(self[e41]))
                - (geometric_product.group0().zxy() * self.group2().yzx()).with_w(self[e42] * geometric_product[e315])
                - (self.group1().yzx() * geometric_product.group1().zxy()).with_w(self[e43] * geometric_product[e125]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e45] * geometric_product[e235])
                    + (self[e15] * geometric_product[e321])
                    + (self[e35] * geometric_product[e425])
                    + (self[e35] * geometric_product[e2])
                    + (self[scalar] * geometric_product[e235]),
                (self[e45] * geometric_product[e315])
                    + (self[e15] * geometric_product[e435])
                    + (self[e15] * geometric_product[e3])
                    + (self[e25] * geometric_product[e321])
                    + (self[scalar] * geometric_product[e315]),
                (self[e45] * geometric_product[e125])
                    + (self[e25] * geometric_product[e415])
                    + (self[e25] * geometric_product[e1])
                    + (self[e35] * geometric_product[e321])
                    + (self[scalar] * geometric_product[e125]),
                -(self[e15] * geometric_product[e415])
                    - (self[e15] * geometric_product[e1])
                    - (self[e25] * geometric_product[e425])
                    - (self[e25] * geometric_product[e2])
                    - (self[e35] * geometric_product[e435])
                    - (self[e35] * geometric_product[e3]),
            ]) + (Simd32x4::from([geometric_product[e315], geometric_product[e5], geometric_product[e5], geometric_product[e5]]) * self.group1().zyz().with_w(self[scalar]))
                + (Simd32x4::from([geometric_product[e5], geometric_product[e125], geometric_product[e235], geometric_product[e5]]) * self.group1().xxyw())
                - (self.group1().yzxx() * geometric_product.group2().zxyx())
                - (self.group2().yzx() * geometric_product.group1().zxy()).with_w(self[e31] * geometric_product[e315])
                - (self.group2().yzx() * geometric_product.group3().zxy()).with_w(self[e12] * geometric_product[e125]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e12] * geometric_product[e2]) + (self[scalar] * geometric_product[e1]),
                (self[e31] * geometric_product[e321]) + (self[scalar] * geometric_product[e2]),
                (self[e12] * geometric_product[e321]) + (self[scalar] * geometric_product[e3]),
                -(self[e12] * geometric_product[e412]) - (self[e45] * geometric_product[e4]),
            ]) + (Simd32x4::from([geometric_product[e321], geometric_product[e3], geometric_product[e1], geometric_product[e4]]) * self.group1().xxy().with_w(self[scalar]))
                + (Simd32x4::from([geometric_product[e315], geometric_product[e5], geometric_product[e5], geometric_product[e2]]) * self.group0().zyz().with_w(self[e42]))
                + (Simd32x4::from([geometric_product[e5], geometric_product[e125], geometric_product[e235], geometric_product[e1]]) * self.group0().xxy().with_w(self[e41]))
                + (geometric_product.group0().zxy() * self.group2().yzx()).with_w(self[e43] * geometric_product[e3])
                - (self.group0().yzx() * geometric_product.group2().zxy()).with_w(self[e41] * geometric_product[e415])
                - (geometric_product.group0().yzx() * self.group2().zxy()).with_w(self[e42] * geometric_product[e425])
                - (self.group1().yzx() * geometric_product.group3().zxy()).with_w(self[e43] * geometric_product[e435])
                - (self.group1().www() * geometric_product.group1().xyz()).with_w(self[e23] * geometric_product[e423])
                - (geometric_product.group2().www() * self.group2().xyz()).with_w(self[e31] * geometric_product[e431]),
        );
    }
}
impl GeometricQuotient<AntiDualNum> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        3        0
    //    simd2        0        1        0
    //    simd3        2        4        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        3       11        0
    //  no simd        7       29        0
    fn geometric_quotient(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDualNum::from_groups(/* e3215, scalar */ Simd32x2::from(f32::powi(other[scalar], -2)) * other.group0());
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(geometric_product[scalar]) * self.group0().with_w(self[scalar]),
            // e23, e31, e12, e45
            ((Simd32x3::from(geometric_product[e3215]) * self.group0()) + (Simd32x3::from(geometric_product[scalar]) * self.group1().xyz()))
                .with_w(self[e45] * geometric_product[scalar]),
            // e15, e25, e35, e1234
            ((Simd32x3::from(geometric_product[e3215]) * self.group1().xyz()) + (Simd32x3::from(geometric_product[scalar]) * self.group2().xyz())).with_w(0.0),
            // e4235, e4315, e4125, e3215
            geometric_product
                .group0()
                .xx()
                .with_zw(geometric_product[e3215], (self[e45] * geometric_product[e3215]) + (self[scalar] * geometric_product[e3215]))
                * self.group0().with_w(1.0)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricQuotient<AntiFlatPoint> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       24        0
    //    simd3        0        5        0
    //    simd4        5        4        0
    // Totals...
    // yes simd       19       33        0
    //  no simd       34       55        0
    fn geometric_quotient(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlatPoint::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(f32::powi(other[e321], -2)) * Simd32x4::from([other[e235] * -1.0, other[e315] * -1.0, other[e125] * -1.0, other[e321] * -1.0]),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x3::from(geometric_product[e321]) * self.group0() * Simd32x3::from(-1.0)).with_w(
                -(self[e41] * geometric_product[e235]) - (self[e42] * geometric_product[e315]) - (self[e43] * geometric_product[e125]) - (self[e45] * geometric_product[e321]),
            ),
            // e415, e425, e435, e321
            (geometric_product.group0().yzxw() * self.group0().zxy().with_w(self[scalar]))
                + Simd32x3::from(0.0).with_w(-(self[e42] * geometric_product[e315]) - (self[e43] * geometric_product[e125]))
                - (geometric_product.group0().zxyx() * self.group0().yzx().with_w(self[e41])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * geometric_product[e315]) + (self[e45] * geometric_product[e235]) + (self[e15] * geometric_product[e321]) + (self[scalar] * geometric_product[e235]),
                (self[e23] * geometric_product[e125]) + (self[e45] * geometric_product[e315]) + (self[e25] * geometric_product[e321]) + (self[scalar] * geometric_product[e315]),
                (self[e31] * geometric_product[e235]) + (self[e45] * geometric_product[e125]) + (self[e35] * geometric_product[e321]) + (self[scalar] * geometric_product[e125]),
                -(self[e31] * geometric_product[e315]) - (self[e12] * geometric_product[e125]),
            ]) - (self.group1().yzxx() * geometric_product.group0().zxyx()),
            // e1, e2, e3, e4
            (Simd32x3::from(geometric_product[e321]) * self.group1().xyz()).with_w(0.0) + (self.group0().zxy() * geometric_product.group0().yzx()).with_w(0.0)
                - (self.group0().yzx() * geometric_product.group0().zxy()).with_w(0.0),
        );
    }
}
impl GeometricQuotient<AntiFlector> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       42        0
    //    simd3        0        2        0
    //    simd4       12       13        0
    // Totals...
    // yes simd       40       57        0
    //  no simd       76      100        0
    fn geometric_quotient(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiFlector::from_groups(/* e235, e315, e125, e321 */ other.group0() * Simd32x4::from(-1.0), /* e1, e2, e3, e5 */ other.group1());
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2),
        );
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e1, e2, e3, e5
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e42] * geometric_product[e3],
                self[e43] * geometric_product[e1],
                self[e41] * geometric_product[e2],
                -(self[e43] * geometric_product[e125]) - (self[e45] * geometric_product[e321]),
            ]) - (Simd32x4::from([geometric_product[e321], geometric_product[e3], geometric_product[e1], geometric_product[e235]]) * self.group0().xxy().with_w(self[e41]))
                - (Simd32x4::from([geometric_product[e2], geometric_product[e321], geometric_product[e321], geometric_product[e315]]) * self.group0().zyz().with_w(self[e42])),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e43] * geometric_product[e315],
                self[e42] * geometric_product[e5],
                self[e43] * geometric_product[e5],
                -(self[e43] * geometric_product[e125]) - (self[e23] * geometric_product[e1]) - (self[e31] * geometric_product[e2]) - (self[e12] * geometric_product[e3]),
            ]) + (Simd32x4::from([geometric_product[e5], geometric_product[e125], geometric_product[e235], geometric_product[e321]]) * self.group0().xxy().with_w(self[scalar]))
                - (geometric_product.group0().zxyx() * self.group0().yzx().with_w(self[e41]))
                - (self.group1().www() * geometric_product.group1().xyz()).with_w(self[e42] * geometric_product[e315]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e45] * geometric_product[e235]) + (self[e15] * geometric_product[e321]) + (self[e35] * geometric_product[e2]) + (self[scalar] * geometric_product[e235]),
                (self[e45] * geometric_product[e315]) + (self[e15] * geometric_product[e3]) + (self[e25] * geometric_product[e321]) + (self[scalar] * geometric_product[e315]),
                (self[e45] * geometric_product[e125]) + (self[e25] * geometric_product[e1]) + (self[e35] * geometric_product[e321]) + (self[scalar] * geometric_product[e125]),
                -(self[e12] * geometric_product[e125]) - (self[e15] * geometric_product[e1]) - (self[e25] * geometric_product[e2]) - (self[e35] * geometric_product[e3]),
            ]) + (Simd32x4::from([geometric_product[e315], geometric_product[e5], geometric_product[e5], geometric_product[e5]]) * self.group1().zyz().with_w(self[scalar]))
                + (Simd32x4::from([geometric_product[e5], geometric_product[e125], geometric_product[e235], geometric_product[e5]]) * self.group1().xxyw())
                - (self.group1().yzxx() * geometric_product.group0().zxyx())
                - (self.group2().yzx() * geometric_product.group1().zxy()).with_w(self[e31] * geometric_product[e315]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e12] * geometric_product[e2]) + (self[scalar] * geometric_product[e1]) - (self[e42] * geometric_product[e125]) - (self[e31] * geometric_product[e3]),
                (self[e31] * geometric_product[e321]) + (self[scalar] * geometric_product[e2]) - (self[e43] * geometric_product[e235]) - (self[e12] * geometric_product[e1]),
                (self[e12] * geometric_product[e321]) + (self[scalar] * geometric_product[e3]) - (self[e41] * geometric_product[e315]) - (self[e23] * geometric_product[e2]),
                0.0,
            ]) + (Simd32x4::from([geometric_product[e315], geometric_product[e5], geometric_product[e5], geometric_product[e2]]) * self.group0().zyz().with_w(self[e42]))
                + (Simd32x4::from([geometric_product[e321], geometric_product[e3], geometric_product[e1], geometric_product[e3]]) * self.group1().xxy().with_w(self[e43]))
                + (Simd32x4::from([geometric_product[e5], geometric_product[e125], geometric_product[e235], geometric_product[e1]]) * self.group0().xxy().with_w(self[e41])),
        );
    }
}
impl GeometricQuotient<AntiLine> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       25       44        0
    //    simd3        0        9        0
    //    simd4        7        2        0
    // Totals...
    // yes simd       32       55        0
    //  no simd       53       79        0
    fn geometric_quotient(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiLine::from_groups(
            // e23, e31, e12
            other.group0() * Simd32x3::from(-1.0),
            // e15, e25, e35
            other.group1() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(/* scalar */ f32::powi(other[e23], 2) + f32::powi(other[e31], 2) + f32::powi(other[e12], 2));
        let geometric_product = AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e15, e25, e35
            Simd32x3::from(other_2[scalar]) * reverse.group1(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e43] * geometric_product[e31],
                self[e41] * geometric_product[e12],
                self[e42] * geometric_product[e23],
                -(self[e42] * geometric_product[e25])
                    - (self[e43] * geometric_product[e35])
                    - (self[e23] * geometric_product[e23])
                    - (self[e31] * geometric_product[e31])
                    - (self[e12] * geometric_product[e12]),
            ]) - (self.group0().yzx() * geometric_product.group0().zxy()).with_w(self[e41] * geometric_product[e15]),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(self[e42] * geometric_product[e35]) - (self[e31] * geometric_product[e12]),
                -(self[e43] * geometric_product[e15]) - (self[e12] * geometric_product[e23]),
                -(self[e41] * geometric_product[e25]) - (self[e23] * geometric_product[e31]),
                0.0,
            ]) + (self.group1().zx().with_zw(self[scalar], geometric_product[e35]) * geometric_product.group0().yzz().with_w(self[e43]))
                + (self.group2().ww().with_zw(self[e31], geometric_product[e25]) * geometric_product.group0().xyx().with_w(self[e42]))
                + (self.group0().zxy() * geometric_product.group1().yzx()).with_w(self[e41] * geometric_product[e15]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e12] * geometric_product[e25]) + (self[e45] * geometric_product[e15]) + (self[e35] * geometric_product[e31]) + (self[scalar] * geometric_product[e15]),
                (self[e23] * geometric_product[e35]) + (self[e45] * geometric_product[e25]) + (self[e15] * geometric_product[e12]) + (self[scalar] * geometric_product[e25]),
                (self[e31] * geometric_product[e15]) + (self[e45] * geometric_product[e35]) + (self[e25] * geometric_product[e23]) + (self[scalar] * geometric_product[e35]),
                self[e43] * geometric_product[e12] * -1.0,
            ]) - (geometric_product.group0().zxy() * self.group2().yzx()).with_w(self[e41] * geometric_product[e23])
                - (geometric_product.group1().zxy() * self.group1().yzx()).with_w(self[e42] * geometric_product[e31]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e42] * geometric_product[e35]) + (self[e45] * geometric_product[e23]),
                (self[e43] * geometric_product[e15]) + (self[e45] * geometric_product[e31]),
                (self[e41] * geometric_product[e25]) + (self[e45] * geometric_product[e12]),
                -(self[e23] * geometric_product[e15])
                    - (self[e31] * geometric_product[e25])
                    - (self[e12] * geometric_product[e35])
                    - (self[e25] * geometric_product[e31])
                    - (self[e35] * geometric_product[e12]),
            ]) - (self.group0().zxy() * geometric_product.group1().yzx()).with_w(self[e15] * geometric_product[e23]),
        );
    }
}
impl GeometricQuotient<AntiMotor> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       31       45        0
    //    simd3        0        4        0
    //    simd4       12       12        0
    // Totals...
    // yes simd       43       61        0
    //  no simd       79      105        0
    fn geometric_quotient(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, e3215
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e23], 2) + f32::powi(other[e31], 2) + f32::powi(other[e12], 2) + f32::powi(other[scalar], 2),
        );
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e15, e25, e35, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e43] * geometric_product[e31],
                self[e42] * geometric_product[scalar],
                self[e43] * geometric_product[scalar],
                -(self[e42] * geometric_product[e25])
                    - (self[e43] * geometric_product[e35])
                    - (self[e23] * geometric_product[e23])
                    - (self[e31] * geometric_product[e31])
                    - (self[e12] * geometric_product[e12]),
            ]) + (geometric_product.group0().wzxw() * self.group0().xxy().with_w(self[scalar]))
                - (self.group0().yzx() * geometric_product.group0().zxy()).with_w(self[e41] * geometric_product[e15]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[scalar] * geometric_product[e23]) - (self[e42] * geometric_product[e35]) - (self[e31] * geometric_product[e12]),
                (self[scalar] * geometric_product[e31]) - (self[e43] * geometric_product[e15]) - (self[e12] * geometric_product[e23]),
                (self[scalar] * geometric_product[e12]) - (self[e41] * geometric_product[e25]) - (self[e23] * geometric_product[e31]),
                0.0,
            ]) + (self.group1().zyzw() * geometric_product.group0().ywww())
                + (geometric_product.group1().ywwy() * self.group0().zyz().with_w(self[e42]))
                + (geometric_product.group1().wzxx() * self.group0().xxy().with_w(self[e41]))
                + (self.group1().xxy() * geometric_product.group0().wzx()).with_w(self[e43] * geometric_product[e35]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * geometric_product[e3215])
                    + (self[e12] * geometric_product[e25])
                    + (self[e45] * geometric_product[e15])
                    + (self[e15] * geometric_product[scalar])
                    + (self[e35] * geometric_product[e31])
                    + (self[scalar] * geometric_product[e15]),
                (self[e23] * geometric_product[e35])
                    + (self[e31] * geometric_product[e3215])
                    + (self[e45] * geometric_product[e25])
                    + (self[e15] * geometric_product[e12])
                    + (self[e25] * geometric_product[scalar])
                    + (self[scalar] * geometric_product[e25]),
                (self[e31] * geometric_product[e15])
                    + (self[e12] * geometric_product[e3215])
                    + (self[e45] * geometric_product[e35])
                    + (self[e25] * geometric_product[e23])
                    + (self[e35] * geometric_product[scalar])
                    + (self[scalar] * geometric_product[e35]),
                self[e43] * geometric_product[e12] * -1.0,
            ]) - (geometric_product.group0().zxyy() * self.group2().yzx().with_w(self[e42]))
                - (self.group1().yzx() * geometric_product.group1().zxy()).with_w(self[e41] * geometric_product[e23]),
            // e4235, e4315, e4125, e3215
            (geometric_product.group1().zxyw() * self.group0().yzx().with_w(self[e45]))
                + Simd32x3::from(0.0).with_w(
                    -(self[e12] * geometric_product[e35]) - (self[e15] * geometric_product[e23]) - (self[e25] * geometric_product[e31]) - (self[e35] * geometric_product[e12]),
                )
                + (self.group1().www() * geometric_product.group0().xyz()).with_w(self[scalar] * geometric_product[e3215])
                - (geometric_product.group1().ywwy() * self.group0().zyz().with_w(self[e31]))
                - (geometric_product.group1().wzxx() * self.group0().xxy().with_w(self[e23])),
        );
    }
}
impl GeometricQuotient<AntiPlane> for AntiCircleRotor {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       17        0
    //    simd3        1        2        0
    //    simd4        6        7        0
    // Totals...
    // yes simd       11       26        0
    //  no simd       31       51        0
    fn geometric_quotient(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiPlane::from_groups(
            // e1, e2, e3, e5
            Simd32x4::from(f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)) * other.group0(),
        );
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (self.group0().yzx() * geometric_product.group0().zxy()) - (self.group0().zxy() * geometric_product.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e41] * geometric_product[e5],
                self[e42] * geometric_product[e5],
                self[e43] * geometric_product[e5],
                -(self[e31] * geometric_product[e2]) - (self[e12] * geometric_product[e3]),
            ]) - (self.group1().wwwx() * geometric_product.group0().xyzx()),
            // e235, e315, e125, e4
            Simd32x4::from([
                self[e25] * geometric_product[e3] * -1.0,
                self[e35] * geometric_product[e1] * -1.0,
                self[e15] * geometric_product[e2] * -1.0,
                self[e43] * geometric_product[e3],
            ]) + (geometric_product.group0().yzxy() * self.group2().zxy().with_w(self[e42]))
                + (geometric_product.group0().wwwx() * self.group1().xyz().with_w(self[e41])),
            // e1, e2, e3, e5
            Simd32x4::from([
                self[scalar] * geometric_product[e1],
                self[scalar] * geometric_product[e2],
                self[scalar] * geometric_product[e3],
                -(self[e25] * geometric_product[e2]) - (self[e35] * geometric_product[e3]),
            ]) + (Simd32x4::from(geometric_product[e5]) * self.group0().with_w(self[e45]))
                + (geometric_product.group0().yzxw() * self.group1().zxy().with_w(self[scalar]))
                - (geometric_product.group0().zxyx() * self.group1().yzx().with_w(self[e15])),
        );
    }
}
impl GeometricQuotient<AntiScalar> for AntiCircleRotor {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        1
    //    simd3        0        1        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        0        5        1
    //  no simd        0       16        1
    fn geometric_quotient(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiScalar::from_groups(/* e12345 */ 1.0 / other[e12345] * -1.0);
        return CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(geometric_product[e12345]) * self.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(geometric_product[e12345]) * self.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e235, e315, e125, e12345
            Simd32x4::from(geometric_product[e12345]) * self.group2(),
        );
    }
}
impl GeometricQuotient<Circle> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       64        0
    //    simd3        0       16        0
    //    simd4       15        6        0
    // Totals...
    // yes simd       55       86        0
    //  no simd      100      136        0
    fn geometric_quotient(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let reverse = Circle::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125
            other.group2() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group2(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e43] * geometric_product[e425]) + (self[e12] * geometric_product[e431]) + (self[scalar] * geometric_product[e423]),
                (self[e41] * geometric_product[e435]) + (self[e23] * geometric_product[e412]) + (self[scalar] * geometric_product[e431]),
                (self[e42] * geometric_product[e415]) + (self[e31] * geometric_product[e423]) + (self[scalar] * geometric_product[e412]),
                -(self[e23] * geometric_product[e415])
                    - (self[e31] * geometric_product[e425])
                    - (self[e12] * geometric_product[e435])
                    - (self[e45] * geometric_product[e321])
                    - (self[e25] * geometric_product[e431])
                    - (self[e35] * geometric_product[e412]),
            ]) - (self.group0().xyx() * geometric_product.group1().wwy()).with_w(self[e41] * geometric_product[e235])
                - (self.group0().yzz() * geometric_product.group1().zxw()).with_w(self[e42] * geometric_product[e315])
                - (geometric_product.group0().xxy() * self.group1().wzx()).with_w(self[e43] * geometric_product[e125])
                - (geometric_product.group0().zyz() * self.group1().yww()).with_w(self[e15] * geometric_product[e423]),
            // e415, e425, e435, e321
            (Simd32x4::from(self[scalar]) * geometric_product.group1())
                + (self.group2().zxyy() * geometric_product.group0().yzx().with_w(geometric_product[e431]))
                + (self.group0().zxy() * geometric_product.group2().yzx()).with_w(self[e15] * geometric_product[e423])
                + (self.group1().zxy() * geometric_product.group1().yzx()).with_w(self[e35] * geometric_product[e412])
                - (self.group0().yzx() * geometric_product.group2().zxy()).with_w(self[e41] * geometric_product[e235])
                - (geometric_product.group0().zxy() * self.group2().yzx()).with_w(self[e42] * geometric_product[e315])
                - (self.group1().yzx() * geometric_product.group1().zxy()).with_w(self[e43] * geometric_product[e125]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * geometric_product[e315])
                    + (self[e45] * geometric_product[e235])
                    + (self[e15] * geometric_product[e321])
                    + (self[e35] * geometric_product[e425])
                    + (self[scalar] * geometric_product[e235]),
                (self[e23] * geometric_product[e125])
                    + (self[e45] * geometric_product[e315])
                    + (self[e15] * geometric_product[e435])
                    + (self[e25] * geometric_product[e321])
                    + (self[scalar] * geometric_product[e315]),
                (self[e31] * geometric_product[e235])
                    + (self[e45] * geometric_product[e125])
                    + (self[e25] * geometric_product[e415])
                    + (self[e35] * geometric_product[e321])
                    + (self[scalar] * geometric_product[e125]),
                -(self[e12] * geometric_product[e125]) - (self[e15] * geometric_product[e415]) - (self[e25] * geometric_product[e425]) - (self[e35] * geometric_product[e435]),
            ]) - (self.group1().yzxx() * geometric_product.group2().zxy().with_w(geometric_product[e235]))
                - (self.group2().yzx() * geometric_product.group1().zxy()).with_w(self[e31] * geometric_product[e315]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e43] * geometric_product[e315]) + (self[e23] * geometric_product[e321]) + (self[e25] * geometric_product[e412]),
                (self[e41] * geometric_product[e125]) + (self[e31] * geometric_product[e321]) + (self[e35] * geometric_product[e423]),
                (self[e42] * geometric_product[e235]) + (self[e12] * geometric_product[e321]) + (self[e15] * geometric_product[e431]),
                -(self[e23] * geometric_product[e423]) - (self[e31] * geometric_product[e431]) - (self[e12] * geometric_product[e412]),
            ]) - (geometric_product.group1().xyzz() * self.group1().www().with_w(self[e43]))
                - (self.group0().yzx() * geometric_product.group2().zxy()).with_w(self[e41] * geometric_product[e415])
                - (geometric_product.group0().yzx() * self.group2().zxy()).with_w(self[e42] * geometric_product[e425]),
        );
    }
}
impl GeometricQuotient<CircleRotor> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44       70        0
    //    simd3        0       12        0
    //    simd4       17       11        0
    // Totals...
    // yes simd       61       93        0
    //  no simd      112      150        0
    fn geometric_quotient(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let reverse = CircleRotor::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e12345
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - f32::powi(other[e12345], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e43] * geometric_product[e425]) + (self[e12] * geometric_product[e431]) + (self[scalar] * geometric_product[e423]),
                (self[e42] * geometric_product[e12345]) + (self[e23] * geometric_product[e412]) + (self[scalar] * geometric_product[e431]),
                (self[e43] * geometric_product[e12345]) + (self[e31] * geometric_product[e423]) + (self[scalar] * geometric_product[e412]),
                -(self[e23] * geometric_product[e415])
                    - (self[e31] * geometric_product[e425])
                    - (self[e12] * geometric_product[e435])
                    - (self[e45] * geometric_product[e321])
                    - (self[e25] * geometric_product[e431])
                    - (self[e35] * geometric_product[e412]),
            ]) + (Simd32x4::from([geometric_product[e12345], geometric_product[e435], geometric_product[e415], geometric_product[e12345]])
                * self.group0().xxy().with_w(self[scalar]))
                - (self.group0().xyx() * geometric_product.group1().wwy()).with_w(self[e41] * geometric_product[e235])
                - (self.group0().yzz() * geometric_product.group1().zxw()).with_w(self[e42] * geometric_product[e315])
                - (geometric_product.group0().xxy() * self.group1().wzx()).with_w(self[e43] * geometric_product[e125])
                - (geometric_product.group0().zyz() * self.group1().yww()).with_w(self[e15] * geometric_product[e423]),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[scalar] * geometric_product[e415],
                self[scalar] * geometric_product[e425],
                self[scalar] * geometric_product[e435],
                self[e45] * geometric_product[e12345] * -1.0,
            ]) + (Simd32x4::from([geometric_product[e425], geometric_product[e12345], geometric_product[e12345], geometric_product[e321]])
                * self.group1().zyz().with_w(self[scalar]))
                + (Simd32x4::from([geometric_product[e12345], geometric_product[e435], geometric_product[e415], self[e35]]) * self.group1().xxy().with_w(geometric_product[e412]))
                + (self.group2().zxyy() * geometric_product.group0().yzx().with_w(geometric_product[e431]))
                + (self.group0().zxy() * geometric_product.group2().yzx()).with_w(self[e15] * geometric_product[e423])
                - (geometric_product.group2().zxyx() * self.group0().yzx().with_w(self[e41]))
                - (geometric_product.group0().zxy() * self.group2().yzx()).with_w(self[e42] * geometric_product[e315])
                - (self.group1().yzx() * geometric_product.group1().zxy()).with_w(self[e43] * geometric_product[e125]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * geometric_product[e315])
                    + (self[e45] * geometric_product[e235])
                    + (self[e15] * geometric_product[e321])
                    + (self[e15] * geometric_product[e12345])
                    + (self[e35] * geometric_product[e425])
                    + (self[scalar] * geometric_product[e235]),
                (self[e23] * geometric_product[e125])
                    + (self[e45] * geometric_product[e315])
                    + (self[e15] * geometric_product[e435])
                    + (self[e25] * geometric_product[e321])
                    + (self[e25] * geometric_product[e12345])
                    + (self[scalar] * geometric_product[e315]),
                (self[e31] * geometric_product[e235])
                    + (self[e45] * geometric_product[e125])
                    + (self[e25] * geometric_product[e415])
                    + (self[e35] * geometric_product[e321])
                    + (self[e35] * geometric_product[e12345])
                    + (self[scalar] * geometric_product[e125]),
                -(self[e12] * geometric_product[e125]) - (self[e15] * geometric_product[e415]) - (self[e25] * geometric_product[e425]) - (self[e35] * geometric_product[e435]),
            ]) - (self.group1().yzxx() * geometric_product.group2().zxyx())
                - (self.group2().yzx() * geometric_product.group1().zxy()).with_w(self[e31] * geometric_product[e315]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e43] * geometric_product[e315]) + (self[e23] * geometric_product[e321]) + (self[e25] * geometric_product[e412]),
                (self[e41] * geometric_product[e125]) + (self[e31] * geometric_product[e321]) + (self[e35] * geometric_product[e423]),
                (self[e42] * geometric_product[e235]) + (self[e12] * geometric_product[e321]) + (self[e15] * geometric_product[e431]),
                -(self[e23] * geometric_product[e423]) - (self[e31] * geometric_product[e431]) - (self[e12] * geometric_product[e412]),
            ]) - (geometric_product.group1().xyzz() * self.group1().www().with_w(self[e43]))
                - (self.group0().yzx() * geometric_product.group2().zxy()).with_w(self[e41] * geometric_product[e415])
                - (geometric_product.group0().yzx() * self.group2().zxy()).with_w(self[e42] * geometric_product[e425]),
        );
    }
}
impl GeometricQuotient<Dipole> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       63        0
    //    simd3        0       15        0
    //    simd4       15        7        0
    // Totals...
    // yes simd       55       85        0
    //  no simd      100      136        0
    fn geometric_quotient(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let reverse = Dipole::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35
            other.group2() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2),
        );
        let geometric_product = Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35
            Simd32x3::from(other_2[scalar]) * reverse.group2(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e43] * geometric_product[e31]) + (self[e12] * geometric_product[e42]) + (self[scalar] * geometric_product[e41]),
                (self[e42] * geometric_product[e45]) + (self[e23] * geometric_product[e43]) + (self[scalar] * geometric_product[e42]),
                (self[e43] * geometric_product[e45]) + (self[e31] * geometric_product[e41]) + (self[scalar] * geometric_product[e43]),
                -(self[e23] * geometric_product[e23])
                    - (self[e31] * geometric_product[e31])
                    - (self[e12] * geometric_product[e12])
                    - (self[e15] * geometric_product[e41])
                    - (self[e25] * geometric_product[e42])
                    - (self[e35] * geometric_product[e43]),
            ]) + (geometric_product.group1().wzxw() * self.group0().xxy().with_w(self[e45]))
                - (self.group0().yzx() * geometric_product.group1().zxy()).with_w(self[e41] * geometric_product[e15])
                - (geometric_product.group0().xxy() * self.group1().wzx()).with_w(self[e42] * geometric_product[e25])
                - (geometric_product.group0().zyz() * self.group1().yww()).with_w(self[e43] * geometric_product[e35]),
            // e23, e31, e12, e45
            (Simd32x4::from(self[scalar]) * geometric_product.group1())
                + (self.group0().zxy() * geometric_product.group2().yzx()).with_w(self[e41] * geometric_product[e15])
                + (geometric_product.group0().yzx() * self.group2().zxy()).with_w(self[e42] * geometric_product[e25])
                + (self.group1().zxy() * geometric_product.group1().yzx()).with_w(self[e43] * geometric_product[e35])
                - (self.group2().yzxy() * geometric_product.group0().zxy().with_w(geometric_product[e42]))
                - (self.group0().yzx() * geometric_product.group2().zxy()).with_w(self[e15] * geometric_product[e41])
                - (self.group1().yzx() * geometric_product.group1().zxy()).with_w(self[e35] * geometric_product[e43]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e12] * geometric_product[e25]) + (self[e45] * geometric_product[e15]) + (self[e35] * geometric_product[e31]) + (self[scalar] * geometric_product[e15]),
                (self[e23] * geometric_product[e35]) + (self[e45] * geometric_product[e25]) + (self[e15] * geometric_product[e12]) + (self[scalar] * geometric_product[e25]),
                (self[e31] * geometric_product[e15]) + (self[e45] * geometric_product[e35]) + (self[e25] * geometric_product[e23]) + (self[scalar] * geometric_product[e35]),
                -(self[e23] * geometric_product[e41]) - (self[e31] * geometric_product[e42]) - (self[e12] * geometric_product[e43]),
            ]) - (geometric_product.group1().zxwz() * self.group2().yzz().with_w(self[e43]))
                - (geometric_product.group1().wwyy() * self.group2().xyx().with_w(self[e42]))
                - (geometric_product.group2().zxy() * self.group1().yzx()).with_w(self[e41] * geometric_product[e23]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e42] * geometric_product[e35]) + (self[e23] * geometric_product[e45]) + (self[e45] * geometric_product[e23]) + (self[e35] * geometric_product[e42]),
                (self[e43] * geometric_product[e15]) + (self[e31] * geometric_product[e45]) + (self[e45] * geometric_product[e31]) + (self[e15] * geometric_product[e43]),
                (self[e41] * geometric_product[e25]) + (self[e12] * geometric_product[e45]) + (self[e45] * geometric_product[e12]) + (self[e25] * geometric_product[e41]),
                -(self[e12] * geometric_product[e35]) - (self[e15] * geometric_product[e23]) - (self[e25] * geometric_product[e31]) - (self[e35] * geometric_product[e12]),
            ]) - (self.group0().zxy() * geometric_product.group2().yzx()).with_w(self[e23] * geometric_product[e15])
                - (geometric_product.group0().zxy() * self.group2().yzx()).with_w(self[e31] * geometric_product[e25]),
        );
    }
}
impl GeometricQuotient<DipoleInversion> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       55       82        0
    //    simd3        0       15        0
    //    simd4       26       18        0
    // Totals...
    // yes simd       81      115        0
    //  no simd      159      199        0
    fn geometric_quotient(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let reverse = DipoleInversion::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + 2.0 * (other[e1234] * other[e3215])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2),
        );
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e43] * geometric_product[e31])
                    + (self[e43] * geometric_product[e4315])
                    + (self[e23] * geometric_product[e1234])
                    + (self[e12] * geometric_product[e42])
                    + (self[scalar] * geometric_product[e41]),
                (self[e41] * geometric_product[e4125])
                    + (self[e42] * geometric_product[e45])
                    + (self[e23] * geometric_product[e43])
                    + (self[e31] * geometric_product[e1234])
                    + (self[scalar] * geometric_product[e42]),
                (self[e42] * geometric_product[e4235])
                    + (self[e43] * geometric_product[e45])
                    + (self[e31] * geometric_product[e41])
                    + (self[e12] * geometric_product[e1234])
                    + (self[scalar] * geometric_product[e43]),
                -(self[e23] * geometric_product[e23])
                    - (self[e31] * geometric_product[e31])
                    - (self[e12] * geometric_product[e12])
                    - (self[e25] * geometric_product[e42])
                    - (self[e35] * geometric_product[e43]),
            ]) + (geometric_product.group1().wzxw() * self.group0().xxy().with_w(self[e45]))
                - (self.group0().yzx() * geometric_product.group1().zxy()).with_w(self[e41] * geometric_product[e15])
                - (self.group0().yzx() * geometric_product.group3().zxy()).with_w(self[e42] * geometric_product[e25])
                - (geometric_product.group0().xxy() * self.group1().wzx()).with_w(self[e43] * geometric_product[e35])
                - (geometric_product.group0().zyz() * self.group1().yww()).with_w(self[e15] * geometric_product[e41]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e45] * geometric_product[e4235]) + (self[e15] * geometric_product[e1234]) + (self[scalar] * geometric_product[e23]),
                (self[e45] * geometric_product[e4315]) + (self[e25] * geometric_product[e1234]) + (self[scalar] * geometric_product[e31]),
                (self[e45] * geometric_product[e4125]) + (self[e35] * geometric_product[e1234]) + (self[scalar] * geometric_product[e12]),
                -(self[e23] * geometric_product[e4235]) - (self[e31] * geometric_product[e4315]) - (self[e12] * geometric_product[e4125]),
            ]) + (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], geometric_product[e25]]) * self.group0().zyz().with_w(self[e42]))
                + (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e15]]) * self.group0().xxy().with_w(self[e41]))
                + (geometric_product.group1().yzxw() * self.group1().zxy().with_w(self[scalar]))
                + (geometric_product.group0().yzx() * self.group2().zxy()).with_w(self[e43] * geometric_product[e35])
                - (self.group2().yzxy() * geometric_product.group0().zxy().with_w(geometric_product[e42]))
                - (self.group0().yzx() * geometric_product.group2().zxy()).with_w(self[e15] * geometric_product[e41])
                - (self.group1().yzx() * geometric_product.group1().zxy()).with_w(self[e35] * geometric_product[e43]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e12] * geometric_product[e25])
                    + (self[e45] * geometric_product[e15])
                    + (self[e25] * geometric_product[e4125])
                    + (self[e35] * geometric_product[e31])
                    + (self[scalar] * geometric_product[e15]),
                (self[e31] * geometric_product[e3215])
                    + (self[e45] * geometric_product[e25])
                    + (self[e15] * geometric_product[e12])
                    + (self[e35] * geometric_product[e4235])
                    + (self[scalar] * geometric_product[e25]),
                (self[e12] * geometric_product[e3215])
                    + (self[e45] * geometric_product[e35])
                    + (self[e15] * geometric_product[e4315])
                    + (self[e25] * geometric_product[e23])
                    + (self[scalar] * geometric_product[e35]),
                -(self[e43] * geometric_product[e12])
                    - (self[e43] * geometric_product[e4125])
                    - (self[e23] * geometric_product[e41])
                    - (self[e31] * geometric_product[e42])
                    - (self[e12] * geometric_product[e43])
                    - (self[e45] * geometric_product[e1234]),
            ]) + (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e1234]]) * self.group1().xxy().with_w(self[scalar]))
                - (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e31], geometric_product[e4235]]) * self.group2().xxx().with_w(self[e41]))
                - (Simd32x4::from([geometric_product[e4315], geometric_product[e23], geometric_product[e45], geometric_product[e4315]]) * self.group2().zzz().with_w(self[e42]))
                - (geometric_product.group1().zw().with_zw(geometric_product[e4235], geometric_product[e31]) * self.group2().yyy().with_w(self[e42]))
                - (self.group1().yzx() * geometric_product.group2().zxy()).with_w(self[e41] * geometric_product[e23]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e15] * geometric_product[e1234]) + (self[scalar] * geometric_product[e4235]),
                (self[e25] * geometric_product[e1234]) + (self[scalar] * geometric_product[e4315]),
                (self[e35] * geometric_product[e1234]) + (self[scalar] * geometric_product[e4125]),
                -(self[e25] * geometric_product[e31]) - (self[e35] * geometric_product[e12]),
            ]) + (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], geometric_product[e4315]]) * self.group1().xxy().with_w(self[e25]))
                + (Simd32x4::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45], geometric_product[e4125]]) * self.group1().zyz().with_w(self[e35]))
                + (self.group0().yzx() * geometric_product.group2().zxy()).with_w(self[e45] * geometric_product[e3215])
                + (geometric_product.group0().yzx() * self.group2().zxy()).with_w(self[e15] * geometric_product[e4235])
                + (self.group1().www() * geometric_product.group1().xyz()).with_w(self[scalar] * geometric_product[e3215])
                - (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], geometric_product[e25]]) * self.group0().zyz().with_w(self[e31]))
                - (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e15]]) * self.group0().xxy().with_w(self[e23]))
                - (geometric_product.group0().zxy() * self.group2().yzx()).with_w(self[e12] * geometric_product[e35])
                - (self.group1().yzx() * geometric_product.group3().zxy()).with_w(self[e15] * geometric_product[e23]),
        );
    }
}
impl GeometricQuotient<DualNum> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd2        0        1        0
    //    simd3        1        2        0
    //    simd4        1        6        0
    // Totals...
    // yes simd        2       12        0
    //  no simd        7       35        0
    fn geometric_quotient(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DualNum::from_groups(/* e5, e12345 */ Simd32x2::from(f32::powi(other[e12345], -2) * -1.0) * other.group0());
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(geometric_product[e12345]) * self.group0().with_w(self[scalar]),
            // e415, e425, e435, e321
            ((Simd32x3::from(geometric_product[e5]) * self.group0()) + (Simd32x3::from(geometric_product[e12345]) * self.group1().xyz()))
                .with_w(self[e45] * geometric_product[e12345] * -1.0),
            // e235, e315, e125, e5
            (Simd32x4::from(geometric_product[e5]) * self.group1()) + (self.group2() * geometric_product.group0().yy().with_zw(geometric_product[e12345], geometric_product[e5])),
            // e1, e2, e3, e4
            geometric_product.group0().xx().with_zw(geometric_product[e5], 0.0)
                * Simd32x3::from(1.0).with_w(0.0)
                * self.group0().with_w(0.0)
                * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
        );
    }
}
impl GeometricQuotient<FlatPoint> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       26        0
    //    simd3        0        6        0
    //    simd4        6        3        0
    // Totals...
    // yes simd       15       35        0
    //  no simd       33       56        0
    fn geometric_quotient(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = FlatPoint::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(f32::powi(other[e45], -2) * -1.0) * Simd32x4::from([other[e15] * -1.0, other[e25] * -1.0, other[e35] * -1.0, other[e45] * -1.0]),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x3::from(geometric_product[e45]) * self.group0())
                .with_w((self[e45] * geometric_product[e45]) - (self[e41] * geometric_product[e15]) - (self[e42] * geometric_product[e25]) - (self[e43] * geometric_product[e35])),
            // e23, e31, e12, e45
            Simd32x4::from([
                self[e42] * geometric_product[e35] * -1.0,
                self[e43] * geometric_product[e15] * -1.0,
                self[e41] * geometric_product[e25] * -1.0,
                (self[e42] * geometric_product[e25]) + (self[e43] * geometric_product[e35]) + (self[scalar] * geometric_product[e45]),
            ]) + (geometric_product.group0().yzxx() * self.group0().zxy().with_w(self[e41])),
            // e15, e25, e35, e1234
            (Simd32x3::from(self[e45]) * geometric_product.group0().xyz()).with_w(0.0)
                + (Simd32x3::from(self[scalar]) * geometric_product.group0().xyz()).with_w(0.0)
                + (self.group1().zxy() * geometric_product.group0().yzx()).with_w(0.0)
                - (Simd32x3::from(geometric_product[e45]) * self.group2().xyz()).with_w(0.0)
                - (self.group1().yzx() * geometric_product.group0().zxy()).with_w(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e42] * geometric_product[e35]) + (self[e23] * geometric_product[e45]),
                (self[e43] * geometric_product[e15]) + (self[e31] * geometric_product[e45]),
                (self[e41] * geometric_product[e25]) + (self[e12] * geometric_product[e45]),
                -(self[e31] * geometric_product[e25]) - (self[e12] * geometric_product[e35]),
            ]) - (geometric_product.group0().yzxx() * self.group0().zxy().with_w(self[e23])),
        );
    }
}
impl GeometricQuotient<Flector> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       29        0
    //    simd3        0        5        0
    //    simd4       16       14        0
    // Totals...
    // yes simd       34       48        0
    //  no simd       82      100        0
    fn geometric_quotient(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let reverse = Flector::from_groups(
            // e15, e25, e35, e45
            other.group0() * Simd32x4::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group1(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            -f32::powi(other[e45], 2) - f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2),
        );
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e43] * geometric_product[e4315],
                self[e42] * geometric_product[e45],
                self[e43] * geometric_product[e45],
                -(self[e42] * geometric_product[e25]) - (self[e43] * geometric_product[e35]),
            ]) + (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], geometric_product[e45]]) * self.group0().xxy().with_w(self[e45]))
                - (self.group0().yzx() * geometric_product.group1().zxy()).with_w(self[e41] * geometric_product[e15]),
            // e23, e31, e12, e45
            (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], geometric_product[e25]]) * self.group0().zyz().with_w(self[e42]))
                + (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e15]]) * self.group0().xxy().with_w(self[e41]))
                + Simd32x3::from(0.0).with_w((self[scalar] * geometric_product[e45]) - (self[e31] * geometric_product[e4315]) - (self[e12] * geometric_product[e4125]))
                + (self.group1().www() * geometric_product.group1().xyz()).with_w(self[e43] * geometric_product[e35])
                - (self.group0().yzx() * geometric_product.group0().zxy()).with_w(self[e23] * geometric_product[e4235]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * geometric_product[e3215])
                    + (self[e12] * geometric_product[e25])
                    + (self[e45] * geometric_product[e15])
                    + (self[e25] * geometric_product[e4125])
                    + (self[scalar] * geometric_product[e15]),
                (self[e23] * geometric_product[e35])
                    + (self[e31] * geometric_product[e3215])
                    + (self[e45] * geometric_product[e25])
                    + (self[e35] * geometric_product[e4235])
                    + (self[scalar] * geometric_product[e25]),
                (self[e31] * geometric_product[e15])
                    + (self[e12] * geometric_product[e3215])
                    + (self[e45] * geometric_product[e35])
                    + (self[e15] * geometric_product[e4315])
                    + (self[scalar] * geometric_product[e35]),
                0.0,
            ]) - (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], geometric_product[e4315]]) * self.group2().xxy().with_w(self[e42]))
                - (Simd32x4::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45], geometric_product[e4125]]) * self.group2().zyz().with_w(self[e43]))
                - (self.group1().yzx() * geometric_product.group0().zxy()).with_w(self[e41] * geometric_product[e4235]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], geometric_product[e4235]]) * self.group1().xxy().with_w(self[e15]))
                + (Simd32x4::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45], geometric_product[e4315]]) * self.group1().zyz().with_w(self[e25]))
                + (self.group2().wwwz() * geometric_product.group1().xyzz())
                + Simd32x3::from(0.0).with_w(self[scalar] * geometric_product[e3215])
                + (self.group0().yzx() * geometric_product.group0().zxy()).with_w(self[e45] * geometric_product[e3215])
                - (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], geometric_product[e25]]) * self.group0().zyz().with_w(self[e31]))
                - (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e15]]) * self.group0().xxy().with_w(self[e23]))
                - (self.group1().yzxz() * geometric_product.group1().zxy().with_w(geometric_product[e35])),
        );
    }
}
impl GeometricQuotient<Line> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       46        0
    //    simd3        0       10        0
    //    simd4        7        1        0
    // Totals...
    // yes simd       31       57        0
    //  no simd       52       80        0
    fn geometric_quotient(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let reverse = Line::from_groups(
            // e415, e425, e435
            other.group0() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group1() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(/* scalar */ -f32::powi(other[e415], 2) - f32::powi(other[e425], 2) - f32::powi(other[e435], 2));
        let geometric_product = Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group1(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e43] * geometric_product[e425],
                self[e41] * geometric_product[e435],
                self[e42] * geometric_product[e415],
                -(self[e42] * geometric_product[e315])
                    - (self[e43] * geometric_product[e125])
                    - (self[e23] * geometric_product[e415])
                    - (self[e31] * geometric_product[e425])
                    - (self[e12] * geometric_product[e435]),
            ]) - (self.group0().yzx() * geometric_product.group0().zxy()).with_w(self[e41] * geometric_product[e235]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e43] * geometric_product[e315]) + (self[e12] * geometric_product[e425]) + (self[scalar] * geometric_product[e415]),
                (self[e41] * geometric_product[e125]) + (self[e23] * geometric_product[e435]) + (self[scalar] * geometric_product[e425]),
                (self[e42] * geometric_product[e235]) + (self[e31] * geometric_product[e415]) + (self[scalar] * geometric_product[e435]),
                self[e43] * geometric_product[e125] * -1.0,
            ]) - (self.group0().yzx() * geometric_product.group1().zxy()).with_w(self[e41] * geometric_product[e235])
                - (geometric_product.group0().zxy() * self.group1().yzx()).with_w(self[e42] * geometric_product[e315]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * geometric_product[e315]) + (self[e45] * geometric_product[e235]) + (self[e35] * geometric_product[e425]) + (self[scalar] * geometric_product[e235]),
                (self[e23] * geometric_product[e125]) + (self[e45] * geometric_product[e315]) + (self[e15] * geometric_product[e435]) + (self[scalar] * geometric_product[e315]),
                (self[e31] * geometric_product[e235]) + (self[e45] * geometric_product[e125]) + (self[e25] * geometric_product[e415]) + (self[scalar] * geometric_product[e125]),
                -(self[e23] * geometric_product[e235]) - (self[e31] * geometric_product[e315]) - (self[e12] * geometric_product[e125]) - (self[e35] * geometric_product[e435]),
            ]) - (self.group2().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e415]))
                - (geometric_product.group1().zxy() * self.group1().yzx()).with_w(self[e25] * geometric_product[e425]),
            // e1, e2, e3, e4
            Simd32x4::from([
                self[e43] * geometric_product[e315],
                self[e41] * geometric_product[e125],
                self[e42] * geometric_product[e235],
                self[e43] * geometric_product[e435] * -1.0,
            ]) - (geometric_product.group0() * self.group1().www()).with_w(self[e42] * geometric_product[e425])
                - (self.group0().yzx() * geometric_product.group1().zxy()).with_w(self[e41] * geometric_product[e415]),
        );
    }
}
impl GeometricQuotient<Motor> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       35       53        0
    //    simd3        0        4        0
    //    simd4       10       10        0
    // Totals...
    // yes simd       45       67        0
    //  no simd       75      105        0
    fn geometric_quotient(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let reverse = Motor::from_groups(
            // e415, e425, e435, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            -f32::powi(other[e415], 2) - f32::powi(other[e425], 2) - f32::powi(other[e435], 2) - f32::powi(other[e12345], 2),
        );
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e235, e315, e125, e5
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e43] * geometric_product[e425],
                self[e42] * geometric_product[e12345],
                self[e43] * geometric_product[e12345],
                -(self[e42] * geometric_product[e315])
                    - (self[e43] * geometric_product[e125])
                    - (self[e23] * geometric_product[e415])
                    - (self[e31] * geometric_product[e425])
                    - (self[e12] * geometric_product[e435]),
            ]) + (geometric_product.group0().wzxw() * self.group0().xxy().with_w(self[scalar]))
                - (self.group0().yzx() * geometric_product.group0().zxy()).with_w(self[e41] * geometric_product[e235]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e41] * geometric_product[e5])
                    + (self[e43] * geometric_product[e315])
                    + (self[e23] * geometric_product[e12345])
                    + (self[e12] * geometric_product[e425])
                    + (self[scalar] * geometric_product[e415]),
                (self[e41] * geometric_product[e125])
                    + (self[e42] * geometric_product[e5])
                    + (self[e23] * geometric_product[e435])
                    + (self[e31] * geometric_product[e12345])
                    + (self[scalar] * geometric_product[e425]),
                (self[e42] * geometric_product[e235])
                    + (self[e43] * geometric_product[e5])
                    + (self[e31] * geometric_product[e415])
                    + (self[e12] * geometric_product[e12345])
                    + (self[scalar] * geometric_product[e435]),
                -(self[e43] * geometric_product[e125]) - (self[e45] * geometric_product[e12345]),
            ]) - (geometric_product.group1().zxyx() * self.group0().yzx().with_w(self[e41]))
                - (self.group1().yzx() * geometric_product.group0().zxy()).with_w(self[e42] * geometric_product[e315]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e45] * geometric_product[e235]) + (self[e15] * geometric_product[e12345]) + (self[e35] * geometric_product[e425]) + (self[scalar] * geometric_product[e235]),
                (self[e45] * geometric_product[e315]) + (self[e15] * geometric_product[e435]) + (self[e25] * geometric_product[e12345]) + (self[scalar] * geometric_product[e315]),
                (self[e45] * geometric_product[e125]) + (self[e25] * geometric_product[e415]) + (self[e35] * geometric_product[e12345]) + (self[scalar] * geometric_product[e125]),
                -(self[e12] * geometric_product[e125]) - (self[e15] * geometric_product[e415]) - (self[e25] * geometric_product[e425]) - (self[e35] * geometric_product[e435]),
            ]) + (self.group1().xxyw() * geometric_product.group1().wzxw())
                + (geometric_product.group1().ywww() * self.group1().zyz().with_w(self[scalar]))
                - (self.group1().yzxx() * geometric_product.group1().zxyx())
                - (self.group2().yzx() * geometric_product.group0().zxy()).with_w(self[e31] * geometric_product[e315]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e41] * geometric_product[e5]) + (self[e43] * geometric_product[e315]),
                (self[e41] * geometric_product[e125]) + (self[e42] * geometric_product[e5]),
                (self[e42] * geometric_product[e235]) + (self[e43] * geometric_product[e5]),
                self[e43] * geometric_product[e435] * -1.0,
            ]) - (geometric_product.group0().xyzy() * self.group1().www().with_w(self[e42]))
                - (self.group0().yzx() * geometric_product.group1().zxy()).with_w(self[e41] * geometric_product[e415]),
        );
    }
}
impl GeometricQuotient<MultiVector> for AntiCircleRotor {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       63       95        0
    //    simd2       10       11        0
    //    simd3       40       68        0
    //    simd4       35       25        0
    // Totals...
    // yes simd      148      199        0
    //  no simd      343      421        0
    fn geometric_quotient(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let reverse = MultiVector::from_groups(
            // scalar, e12345
            other.group0(),
            // e1, e2, e3, e4
            other.group1(),
            // e5
            other[e5],
            // e15, e25, e35, e45
            other.group3() * Simd32x4::from(-1.0),
            // e41, e42, e43
            other.group4() * Simd32x3::from(-1.0),
            // e23, e31, e12
            other.group5() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group6() * Simd32x4::from(-1.0),
            // e423, e431, e412
            other.group7() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group8() * Simd32x3::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group9(),
            // e1234
            other[e1234],
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e15] * other[e41])
                + 2.0 * (other[e25] * other[e42])
                + 2.0 * (other[e35] * other[e43])
                + 2.0 * (other[e3215] * other[e1234])
                + f32::powi(other[scalar], 2)
                + f32::powi(other[e1], 2)
                + f32::powi(other[e2], 2)
                + f32::powi(other[e3], 2)
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                + f32::powi(other[e321], 2)
                - f32::powi(other[e12345], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2)
                - 2.0 * (other[e4] * other[e5])
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(other_2[scalar]) * reverse.group0(),
            // e1, e2, e3, e4
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e5
            reverse[e5] * other_2[scalar],
            // e15, e25, e35, e45
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group4(),
            // e23, e31, e12
            Simd32x3::from(other_2[scalar]) * reverse.group5(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group6(),
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group7(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group8(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group9(),
            // e1234
            reverse[e1234] * other_2[scalar],
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([self[e45] * geometric_product[e45], self[e45] * geometric_product[e321] * -1.0]) + (Simd32x2::from(self[scalar]) * geometric_product.group0())
                - (Simd32x2::from(self[e41]) * Simd32x2::from([geometric_product[e15], geometric_product[e235]]))
                - (Simd32x2::from(self[e42]) * Simd32x2::from([geometric_product[e25], geometric_product[e315]]))
                - (Simd32x2::from(self[e43]) * Simd32x2::from([geometric_product[e35], geometric_product[e125]]))
                - (Simd32x2::from(self[e23]) * Simd32x2::from([geometric_product[e23], geometric_product[e415]]))
                - (Simd32x2::from(self[e31]) * Simd32x2::from([geometric_product[e31], geometric_product[e425]]))
                - (Simd32x2::from(self[e12]) * Simd32x2::from([geometric_product[e12], geometric_product[e435]]))
                - (Simd32x2::from(self[e15]) * Simd32x2::from([geometric_product[e41], geometric_product[e423]]))
                - (Simd32x2::from(self[e25]) * Simd32x2::from([geometric_product[e42], geometric_product[e431]]))
                - (Simd32x2::from(self[e35]) * Simd32x2::from([geometric_product[e43], geometric_product[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e12] * geometric_product[e2]) + (self[scalar] * geometric_product[e1]),
                (self[e31] * geometric_product[e321]) + (self[scalar] * geometric_product[e2]),
                (self[e12] * geometric_product[e321]) + (self[scalar] * geometric_product[e3]),
                -(self[e12] * geometric_product[e412]) - (self[e45] * geometric_product[e4]),
            ]) + (Simd32x4::from([geometric_product[e5], geometric_product[e125], geometric_product[e235], geometric_product[e1]]) * self.group0().xxy().with_w(self[e41]))
                + (Simd32x4::from([geometric_product[e321], geometric_product[e3], geometric_product[e1], geometric_product[e4]]) * self.group1().xxy().with_w(self[scalar]))
                + (Simd32x4::from([geometric_product[e315], geometric_product[e5], geometric_product[e5], geometric_product[e2]]) * self.group0().zyz().with_w(self[e42]))
                + (geometric_product.group7().zxy() * self.group2().yzx()).with_w(self[e43] * geometric_product[e3])
                - (self.group0().yzx() * geometric_product.group8().zxy()).with_w(self[e41] * geometric_product[e415])
                - (geometric_product.group7().yzx() * self.group2().zxy()).with_w(self[e42] * geometric_product[e425])
                - (self.group1().yzx() * geometric_product.group1().zxy()).with_w(self[e43] * geometric_product[e435])
                - (self.group1().www() * geometric_product.group6().xyz()).with_w(self[e23] * geometric_product[e423])
                - (geometric_product.group1().www() * self.group2().xyz()).with_w(self[e31] * geometric_product[e431]),
            // e5
            (self[e45] * geometric_product[e5]) + (self[scalar] * geometric_product[e5])
                - (self[e23] * geometric_product[e235])
                - (self[e31] * geometric_product[e315])
                - (self[e12] * geometric_product[e125])
                - (self[e15] * geometric_product[e1])
                - (self[e15] * geometric_product[e415])
                - (self[e25] * geometric_product[e2])
                - (self[e25] * geometric_product[e425])
                - (self[e35] * geometric_product[e3])
                - (self[e35] * geometric_product[e435]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e25] * geometric_product[e4125]) + (self[scalar] * geometric_product[e15]),
                (self[e35] * geometric_product[e4235]) + (self[scalar] * geometric_product[e25]),
                (self[e15] * geometric_product[e4315]) + (self[scalar] * geometric_product[e35]),
                -(self[e31] * geometric_product[e4315]) - (self[e12] * geometric_product[e4125]),
            ]) + (Simd32x4::from(geometric_product[scalar]) * self.group2().xyz().with_w(self[e45]))
                + (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], geometric_product[e35]]) * self.group1().zyz().with_w(self[e43]))
                + (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e25]]) * self.group1().xxy().with_w(self[e42]))
                + (geometric_product.group3() * self.group1().www().with_w(self[scalar]))
                + (geometric_product.group5().yzx() * self.group2().zxy()).with_w(self[e41] * geometric_product[e15])
                - (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], self[e35]]) * self.group2().xxy().with_w(geometric_product[e43]))
                - (Simd32x4::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45], geometric_product[e4235]]) * self.group2().zyz().with_w(self[e23]))
                - (self.group2().yzxx() * geometric_product.group5().zxy().with_w(geometric_product[e41]))
                - (self.group1().yzx() * geometric_product.group3().zxy()).with_w(self[e25] * geometric_product[e42]),
            // e41, e42, e43
            (Simd32x3::from(geometric_product[scalar]) * self.group0())
                + (Simd32x3::from(geometric_product[e1234]) * self.group1().xyz())
                + (Simd32x3::from([self[e12], self[e23], self[scalar]]) * geometric_product.group4().yzz())
                + (Simd32x3::from([self[scalar], self[scalar], self[e31]]) * geometric_product.group4().xyx())
                + (Simd32x3::from([geometric_product[e45], geometric_product[e12], geometric_product[e23]]) * self.group0().xxy())
                + (Simd32x3::from([geometric_product[e31], geometric_product[e4125], geometric_product[e4235]]) * self.group0().zxy())
                + (Simd32x3::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45]]) * self.group0().zyz())
                - (self.group0().yzx() * geometric_product.group5().zxy())
                - (self.group0().yzx() * geometric_product.group9().zxy())
                - (geometric_product.group4().xxy() * self.group1().wzx())
                - (geometric_product.group4().zyz() * self.group1().yww()),
            // e23, e31, e12
            (Simd32x3::from(self[e45]) * geometric_product.group9().xyz())
                + (Simd32x3::from(geometric_product[scalar]) * self.group1().xyz())
                + (Simd32x3::from(geometric_product[e1234]) * self.group2().xyz())
                + (Simd32x3::from([self[e12], self[e23], self[scalar]]) * geometric_product.group5().yzz())
                + (Simd32x3::from([self[scalar], self[scalar], self[e31]]) * geometric_product.group5().xyx())
                + (Simd32x3::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215]]) * self.group0().zyz())
                + (Simd32x3::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15]]) * self.group0().xxy())
                + (geometric_product.group4().yzx() * self.group2().zxy())
                - (self.group0().yzx() * geometric_product.group3().zxy())
                - (geometric_product.group4().zxy() * self.group2().yzx())
                - (geometric_product.group5().zxy() * self.group1().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e12] * geometric_product[e425]) + (self[e15] * geometric_product[e4]) + (self[scalar] * geometric_product[e415]),
                (self[e23] * geometric_product[e435]) + (self[e25] * geometric_product[e4]) + (self[scalar] * geometric_product[e425]),
                (self[e31] * geometric_product[e415]) + (self[e35] * geometric_product[e4]) + (self[scalar] * geometric_product[e435]),
                -(self[e23] * geometric_product[e1]) - (self[e31] * geometric_product[e2]) - (self[e12] * geometric_product[e3]),
            ]) + (Simd32x4::from([geometric_product[e5], geometric_product[e125], geometric_product[e235], self[e25]]) * self.group0().xxy().with_w(geometric_product[e431]))
                + (Simd32x4::from([geometric_product[e315], geometric_product[e5], geometric_product[e5], self[e35]]) * self.group0().zyz().with_w(geometric_product[e412]))
                + (geometric_product.group0().yy().with_zw(geometric_product[e12345], geometric_product[e423]) * self.group1().xyz().with_w(self[e15]))
                + (geometric_product.group7().yzx() * self.group2().zxy()).with_w(self[scalar] * geometric_product[e321])
                - (self.group0().yzx() * geometric_product.group8().zxy()).with_w(self[e45] * geometric_product[e12345])
                - (geometric_product.group7().zxy() * self.group2().yzx()).with_w(self[e41] * geometric_product[e235])
                - (self.group1().yzx() * geometric_product.group6().zxy()).with_w(self[e42] * geometric_product[e315])
                - (self.group1().www() * geometric_product.group1().xyz()).with_w(self[e43] * geometric_product[e125]),
            // e423, e431, e412
            (Simd32x3::from(geometric_product[e12345]) * self.group0())
                + (Simd32x3::from(geometric_product[e4]) * self.group1().xyz())
                + (Simd32x3::from([self[e12], self[e23], self[scalar]]) * geometric_product.group7().yzz())
                + (Simd32x3::from([self[scalar], self[scalar], self[e31]]) * geometric_product.group7().xyx())
                + (Simd32x3::from([geometric_product[e3], geometric_product[e435], geometric_product[e2]]) * self.group0().yxx())
                + (Simd32x3::from([geometric_product[e425], geometric_product[e1], geometric_product[e415]]) * self.group0().zzy())
                - (Simd32x3::from(self[e41]) * Simd32x3::from([geometric_product[e321], geometric_product[e3], geometric_product[e425]]))
                - (Simd32x3::from(self[e42]) * Simd32x3::from([geometric_product[e435], geometric_product[e321], geometric_product[e1]]))
                - (Simd32x3::from(self[e43]) * Simd32x3::from([geometric_product[e2], geometric_product[e415], geometric_product[e321]]))
                - (geometric_product.group7().xxy() * self.group1().wzx())
                - (geometric_product.group7().zyz() * self.group1().yww()),
            // e235, e315, e125
            (Simd32x3::from(geometric_product[e12345]) * self.group2().xyz())
                + (Simd32x3::from(geometric_product[e5]) * self.group1().xyz())
                + (Simd32x3::from([self[e12], self[e23], self[scalar]]) * geometric_product.group8().yzz())
                + (Simd32x3::from([self[scalar], self[scalar], self[e45]]) * geometric_product.group8())
                + (Simd32x3::from([geometric_product[e2], geometric_product[e435], geometric_product[e415]]) * self.group2().zxy())
                + (Simd32x3::from([geometric_product[e321], geometric_product[e3], geometric_product[e1]]) * self.group2().xxy())
                + (geometric_product.group8().xyx() * self.group1().wwy())
                + (self.group2().zyz() * geometric_product.group6().yww())
                - (geometric_product.group8().zxy() * self.group1().yzx())
                - (self.group2().yzx() * geometric_product.group1().zxy())
                - (self.group2().yzx() * geometric_product.group6().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e15] * geometric_product[e1234]) + (self[scalar] * geometric_product[e4235]),
                (self[e25] * geometric_product[e1234]) + (self[scalar] * geometric_product[e4315]),
                (self[e35] * geometric_product[e1234]) + (self[scalar] * geometric_product[e4125]),
                -(self[e31] * geometric_product[e25]) - (self[e12] * geometric_product[e35]),
            ]) + (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], geometric_product[e4125]]) * self.group1().xxy().with_w(self[e35]))
                + (Simd32x4::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45], geometric_product[e3215]]) * self.group1().zyz().with_w(self[scalar]))
                + (geometric_product.group5() * self.group1().www()).with_w(self[e25] * geometric_product[e4315])
                + (self.group0().yzx() * geometric_product.group3().zxy()).with_w(self[e45] * geometric_product[e3215])
                + (geometric_product.group4().yzx() * self.group2().zxy()).with_w(self[e15] * geometric_product[e4235])
                - (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], self[e25]]) * self.group0().zyz().with_w(geometric_product[e31]))
                - (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], self[e15]]) * self.group0().xxy().with_w(geometric_product[e23]))
                - (self.group1().yzxx() * geometric_product.group9().zxy().with_w(geometric_product[e15]))
                - (self.group2().yzxz() * geometric_product.group4().zxy().with_w(geometric_product[e12])),
            // e1234
            (self[scalar] * geometric_product[e1234])
                - (self[e41] * geometric_product[e23])
                - (self[e41] * geometric_product[e4235])
                - (self[e42] * geometric_product[e31])
                - (self[e42] * geometric_product[e4315])
                - (self[e43] * geometric_product[e12])
                - (self[e43] * geometric_product[e4125])
                - (self[e23] * geometric_product[e41])
                - (self[e31] * geometric_product[e42])
                - (self[e12] * geometric_product[e43])
                - (self[e45] * geometric_product[e1234]),
        );
    }
}
impl GeometricQuotient<Plane> for AntiCircleRotor {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       26        0
    //    simd3        1        2        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       20       32        0
    //  no simd       31       48        0
    fn geometric_quotient(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Plane::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(-f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2)) * other.group0(),
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (self.group0().zxy() * geometric_product.group0().yzx()) - (self.group0().yzx() * geometric_product.group0().zxy()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e41] * geometric_product[e3215]) + (self[e45] * geometric_product[e4235]),
                (self[e42] * geometric_product[e3215]) + (self[e45] * geometric_product[e4315]),
                (self[e43] * geometric_product[e3215]) + (self[e45] * geometric_product[e4125]),
                -(self[e23] * geometric_product[e4235]) - (self[e31] * geometric_product[e4315]) - (self[e12] * geometric_product[e4125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * geometric_product[e3215]) + (self[e25] * geometric_product[e4125]),
                (self[e31] * geometric_product[e3215]) + (self[e35] * geometric_product[e4235]),
                (self[e12] * geometric_product[e3215]) + (self[e15] * geometric_product[e4315]),
                -(self[e42] * geometric_product[e4315]) - (self[e43] * geometric_product[e4125]),
            ]) - (geometric_product.group0().yzxx() * self.group2().zxy().with_w(self[e41])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(self[e41] * geometric_product[e3215]) - (self[e31] * geometric_product[e4125]),
                -(self[e42] * geometric_product[e3215]) - (self[e12] * geometric_product[e4235]),
                -(self[e43] * geometric_product[e3215]) - (self[e23] * geometric_product[e4315]),
                (self[e25] * geometric_product[e4315]) + (self[e35] * geometric_product[e4125]) + (self[scalar] * geometric_product[e3215]),
            ]) + (self.group1().zxyw() * geometric_product.group0().yzxw())
                + (self.group2().wwwx() * geometric_product.group0().xyzx()),
        );
    }
}
impl GeometricQuotient<RoundPoint> for AntiCircleRotor {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       20        0
    //    simd3        2        5        0
    //    simd4        8        7        0
    // Totals...
    // yes simd       18       32        0
    //  no simd       46       63        0
    fn geometric_quotient(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2) - 2.0 * (other[e4] * other[e5]),
        );
        let geometric_product = RoundPoint::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from(other_2[scalar]) * other.group0(), /* e5 */ other[e5] * other_2[scalar]);
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(geometric_product[e4]) * self.group1().xyz()) + (self.group0().yzx() * geometric_product.group0().zxy())
                - (self.group0().zxy() * geometric_product.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e41] * geometric_product[e5]) + (self[e15] * geometric_product[e4]),
                (self[e42] * geometric_product[e5]) + (self[e25] * geometric_product[e4]),
                (self[e43] * geometric_product[e5]) + (self[e35] * geometric_product[e4]),
                -(self[e31] * geometric_product[e2]) - (self[e12] * geometric_product[e3]),
            ]) - (self.group1().wwwx() * geometric_product.group0().xyzx()),
            // e235, e315, e125, e4
            (geometric_product.group0().yzxy() * self.group2().zxy().with_w(self[e42]))
                + Simd32x3::from(0.0).with_w((self[e43] * geometric_product[e3]) + (self[scalar] * geometric_product[e4]))
                + (Simd32x3::from(geometric_product[e5]) * self.group1().xyz()).with_w(self[e41] * geometric_product[e1])
                - (geometric_product.group0().zxyw() * self.group2().yzx().with_w(self[e45])),
            // e1, e2, e3, e5
            Simd32x4::from([
                self[scalar] * geometric_product[e1],
                self[scalar] * geometric_product[e2],
                self[scalar] * geometric_product[e3],
                self[e35] * geometric_product[e3] * -1.0,
            ]) + (Simd32x4::from(geometric_product[e5]) * self.group0().with_w(self[e45]))
                + (self.group1().zxy() * geometric_product.group0().yzx()).with_w(self[scalar] * geometric_product[e5])
                - (self.group2().xyzy() * geometric_product.group0().wwwy())
                - (geometric_product.group0().zxyx() * self.group1().yzx().with_w(self[e15])),
        );
    }
}
impl GeometricQuotient<Scalar> for AntiCircleRotor {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        0        1
    //    simd3        0        1        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        3        1
    //  no simd        0       11        1
    fn geometric_quotient(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Scalar::from_groups(/* scalar */ 1.0 / other[scalar]);
        return AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(geometric_product[scalar]) * self.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(geometric_product[scalar]) * self.group1(),
            // e15, e25, e35, scalar
            Simd32x4::from(geometric_product[scalar]) * self.group2(),
        );
    }
}
impl GeometricQuotient<Sphere> for AntiCircleRotor {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       30        0
    //    simd3        2        4        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       24       39        0
    //  no simd       43       62        0
    fn geometric_quotient(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e3215] * other[e1234]) - f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2),
        );
        let geometric_product = Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * other.group0(),
            // e1234
            other_2[scalar] * other[e1234],
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(geometric_product[e1234]) * self.group1().xyz()) + (self.group0().zxy() * geometric_product.group0().yzx())
                - (self.group0().yzx() * geometric_product.group0().zxy()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e41] * geometric_product[e3215]) + (self[e45] * geometric_product[e4235]) + (self[e15] * geometric_product[e1234]),
                (self[e42] * geometric_product[e3215]) + (self[e45] * geometric_product[e4315]) + (self[e25] * geometric_product[e1234]),
                (self[e43] * geometric_product[e3215]) + (self[e45] * geometric_product[e4125]) + (self[e35] * geometric_product[e1234]),
                -(self[e23] * geometric_product[e4235]) - (self[e31] * geometric_product[e4315]) - (self[e12] * geometric_product[e4125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                self[e25] * geometric_product[e4125],
                self[e35] * geometric_product[e4235],
                self[e15] * geometric_product[e4315],
                -(self[e42] * geometric_product[e4315]) - (self[e43] * geometric_product[e4125]) - (self[e45] * geometric_product[e1234]),
            ]) + (geometric_product.group0().www() * self.group1().xyz()).with_w(self[scalar] * geometric_product[e1234])
                - (geometric_product.group0().yzxx() * self.group2().zxy().with_w(self[e41])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(self[e41] * geometric_product[e3215]) - (self[e31] * geometric_product[e4125]),
                -(self[e42] * geometric_product[e3215]) - (self[e12] * geometric_product[e4235]),
                -(self[e43] * geometric_product[e3215]) - (self[e23] * geometric_product[e4315]),
                (self[e35] * geometric_product[e4125]) + (self[scalar] * geometric_product[e3215]),
            ]) + (self.group1().zxyw() * geometric_product.group0().yzxw())
                + (self.group2().xyzx() * Simd32x3::from(geometric_product[e1234]).with_w(geometric_product[e4235]))
                + (self.group2().wwwy() * geometric_product.group0().xyzy()),
        );
    }
}
impl GeometricQuotient<VersorEven> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       59       83        0
    //    simd3        0       11        0
    //    simd4       28       24        0
    // Totals...
    // yes simd       87      118        0
    //  no simd      171      212        0
    fn geometric_quotient(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let reverse = VersorEven::from_groups(
            // e423, e431, e412, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e5
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e4
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)
                - f32::powi(other[e12345], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125])
                - 2.0 * (other[e5] * other[e4]),
        );
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e5
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e1, e2, e3, e4
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e42] * geometric_product[e3])
                    + (self[e43] * geometric_product[e425])
                    + (self[e23] * geometric_product[e4])
                    + (self[e12] * geometric_product[e431])
                    + (self[scalar] * geometric_product[e423]),
                (self[e42] * geometric_product[e12345])
                    + (self[e43] * geometric_product[e1])
                    + (self[e23] * geometric_product[e412])
                    + (self[e31] * geometric_product[e4])
                    + (self[scalar] * geometric_product[e431]),
                (self[e42] * geometric_product[e415])
                    + (self[e43] * geometric_product[e12345])
                    + (self[e31] * geometric_product[e423])
                    + (self[e12] * geometric_product[e4])
                    + (self[scalar] * geometric_product[e412]),
                -(self[e12] * geometric_product[e435])
                    - (self[e45] * geometric_product[e321])
                    - (self[e15] * geometric_product[e423])
                    - (self[e25] * geometric_product[e431])
                    - (self[e35] * geometric_product[e412]),
            ]) + (Simd32x4::from([geometric_product[e12345], geometric_product[e435], geometric_product[e2], geometric_product[e12345]])
                * self.group0().xxx().with_w(self[scalar]))
                - (Simd32x4::from(self[e41]) * Simd32x4::from([geometric_product[e321], geometric_product[e3], geometric_product[e425], geometric_product[e235]]))
                - (Simd32x4::from(self[e42]) * geometric_product.group1().zw().with_zw(geometric_product[e1], geometric_product[e315]))
                - (Simd32x4::from(self[e43]) * Simd32x4::from([geometric_product[e2], geometric_product[e415], geometric_product[e321], geometric_product[e125]]))
                - (self.group1().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e415]))
                - (self.group1().wwwy() * geometric_product.group0().xyz().with_w(geometric_product[e425])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e15] * geometric_product[e4]) + (self[e35] * geometric_product[e431]) + (self[scalar] * geometric_product[e415]),
                (self[e15] * geometric_product[e412]) + (self[e25] * geometric_product[e4]) + (self[scalar] * geometric_product[e425]),
                (self[e25] * geometric_product[e423]) + (self[e35] * geometric_product[e4]) + (self[scalar] * geometric_product[e435]),
                -(self[e31] * geometric_product[e2]) - (self[e12] * geometric_product[e3]) - (self[e45] * geometric_product[e12345]),
            ]) + (Simd32x4::from([geometric_product[e12345], geometric_product[e435], geometric_product[e415], geometric_product[e412]]) * self.group1().xxy().with_w(self[e35]))
                + (Simd32x4::from([geometric_product[e425], geometric_product[e12345], geometric_product[e12345], geometric_product[e321]])
                    * self.group1().zyz().with_w(self[scalar]))
                + (self.group0().xxy() * geometric_product.group2().wzx()).with_w(self[e15] * geometric_product[e423])
                + (self.group0().zyz() * geometric_product.group2().yww()).with_w(self[e25] * geometric_product[e431])
                - (geometric_product.group2().zxyx() * self.group0().yzx().with_w(self[e41]))
                - (self.group1().yzx() * geometric_product.group1().zxy()).with_w(self[e42] * geometric_product[e315])
                - (self.group1().www() * geometric_product.group3().xyz()).with_w(self[e43] * geometric_product[e125])
                - (self.group2().yzx() * geometric_product.group0().zxy()).with_w(self[e23] * geometric_product[e1]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e45] * geometric_product[e235])
                    + (self[e15] * geometric_product[e12345])
                    + (self[e15] * geometric_product[e321])
                    + (self[e35] * geometric_product[e425])
                    + (self[e35] * geometric_product[e2])
                    + (self[scalar] * geometric_product[e235]),
                (self[e45] * geometric_product[e315])
                    + (self[e15] * geometric_product[e435])
                    + (self[e15] * geometric_product[e3])
                    + (self[e25] * geometric_product[e12345])
                    + (self[e25] * geometric_product[e321])
                    + (self[scalar] * geometric_product[e315]),
                (self[e45] * geometric_product[e125])
                    + (self[e25] * geometric_product[e415])
                    + (self[e25] * geometric_product[e1])
                    + (self[e35] * geometric_product[e12345])
                    + (self[e35] * geometric_product[e321])
                    + (self[scalar] * geometric_product[e125]),
                -(self[e15] * geometric_product[e415])
                    - (self[e15] * geometric_product[e1])
                    - (self[e25] * geometric_product[e425])
                    - (self[e25] * geometric_product[e2])
                    - (self[e35] * geometric_product[e435])
                    - (self[e35] * geometric_product[e3]),
            ]) + (self.group1().xxyw() * geometric_product.group2().wzxw())
                + (geometric_product.group2().ywww() * self.group1().zyz().with_w(self[scalar]))
                - (self.group1().yzxx() * geometric_product.group2().zxyx())
                - (self.group2().yzx() * geometric_product.group1().zxy()).with_w(self[e31] * geometric_product[e315])
                - (self.group2().yzx() * geometric_product.group3().zxy()).with_w(self[e12] * geometric_product[e125]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e25] * geometric_product[e412]) + (self[scalar] * geometric_product[e1]),
                (self[e35] * geometric_product[e423]) + (self[scalar] * geometric_product[e2]),
                (self[e15] * geometric_product[e431]) + (self[scalar] * geometric_product[e3]),
                -(self[e12] * geometric_product[e412]) - (self[e45] * geometric_product[e4]),
            ]) + (Simd32x4::from([geometric_product[e321], geometric_product[e3], geometric_product[e1], geometric_product[e3]]) * self.group1().xxy().with_w(self[e43]))
                + (Simd32x4::from([geometric_product[e2], geometric_product[e321], geometric_product[e321], geometric_product[e4]]) * self.group1().zyz().with_w(self[scalar]))
                + (self.group0().xxy() * geometric_product.group2().wzx()).with_w(self[e41] * geometric_product[e1])
                + (self.group0().zyz() * geometric_product.group2().yww()).with_w(self[e42] * geometric_product[e2])
                - (Simd32x4::from([geometric_product[e431], geometric_product[e4], geometric_product[e4], geometric_product[e431]]) * self.group2().zyz().with_w(self[e31]))
                - (Simd32x4::from([geometric_product[e4], geometric_product[e412], geometric_product[e423], geometric_product[e423]]) * self.group2().xxy().with_w(self[e23]))
                - (geometric_product.group1().xyzz() * self.group1().www().with_w(self[e43]))
                - (self.group0().yzx() * geometric_product.group2().zxy()).with_w(self[e41] * geometric_product[e415])
                - (self.group1().yzx() * geometric_product.group3().zxy()).with_w(self[e42] * geometric_product[e425]),
        );
    }
}
impl GeometricQuotient<VersorOdd> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       59       81        0
    //    simd3        0        9        0
    //    simd4       28       26        0
    // Totals...
    // yes simd       87      116        0
    //  no simd      171      212        0
    fn geometric_quotient(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let reverse = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + 2.0 * (other[e1234] * other[e3215])
                + f32::powi(other[scalar], 2)
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2),
        );
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e43] * geometric_product[e31])
                    + (self[e43] * geometric_product[e4315])
                    + (self[e23] * geometric_product[e1234])
                    + (self[e12] * geometric_product[e42])
                    + (self[scalar] * geometric_product[e41]),
                (self[e42] * geometric_product[scalar])
                    + (self[e42] * geometric_product[e45])
                    + (self[e23] * geometric_product[e43])
                    + (self[e31] * geometric_product[e1234])
                    + (self[scalar] * geometric_product[e42]),
                (self[e43] * geometric_product[scalar])
                    + (self[e43] * geometric_product[e45])
                    + (self[e31] * geometric_product[e41])
                    + (self[e12] * geometric_product[e1234])
                    + (self[scalar] * geometric_product[e43]),
                -(self[e31] * geometric_product[e31])
                    - (self[e12] * geometric_product[e12])
                    - (self[e15] * geometric_product[e41])
                    - (self[e25] * geometric_product[e42])
                    - (self[e35] * geometric_product[e43]),
            ]) + (Simd32x4::from([geometric_product[scalar], geometric_product[e12], geometric_product[e23], geometric_product[e45]]) * self.group0().xxy().with_w(self[e45]))
                + (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], geometric_product[scalar]])
                    * self.group0().xxy().with_w(self[scalar]))
                - (self.group1().wwwx() * geometric_product.group0().xyz().with_w(geometric_product[e23]))
                - (self.group0().yzx() * geometric_product.group1().zxy()).with_w(self[e41] * geometric_product[e15])
                - (self.group0().yzx() * geometric_product.group3().zxy()).with_w(self[e42] * geometric_product[e25])
                - (self.group1().yzx() * geometric_product.group0().zxy()).with_w(self[e43] * geometric_product[e35]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e15] * geometric_product[e1234]) + (self[e35] * geometric_product[e42]) + (self[scalar] * geometric_product[e23]),
                (self[e15] * geometric_product[e43]) + (self[e25] * geometric_product[e1234]) + (self[scalar] * geometric_product[e31]),
                (self[e25] * geometric_product[e41]) + (self[e35] * geometric_product[e1234]) + (self[scalar] * geometric_product[e12]),
                -(self[e15] * geometric_product[e41]) - (self[e25] * geometric_product[e42]) - (self[e35] * geometric_product[e43]),
            ]) + (Simd32x4::from([geometric_product[scalar], geometric_product[e12], geometric_product[e23], geometric_product[e35]]) * self.group1().xxy().with_w(self[e43]))
                + (Simd32x4::from([geometric_product[e31], geometric_product[scalar], geometric_product[scalar], geometric_product[scalar]]) * self.group1().zyzw())
                + (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], geometric_product[e25]]) * self.group0().zyz().with_w(self[e42]))
                + (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e15]]) * self.group0().xxy().with_w(self[e41]))
                + (self.group1().www() * geometric_product.group3().xyz()).with_w(self[scalar] * geometric_product[e45])
                - (self.group1().yzxy() * geometric_product.group1().zxy().with_w(geometric_product[e4315]))
                - (self.group0().yzx() * geometric_product.group2().zxy()).with_w(self[e23] * geometric_product[e4235])
                - (self.group2().yzx() * geometric_product.group0().zxy()).with_w(self[e12] * geometric_product[e4125]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e12] * geometric_product[e25])
                    + (self[e45] * geometric_product[e15])
                    + (self[e15] * geometric_product[scalar])
                    + (self[e25] * geometric_product[e4125])
                    + (self[e35] * geometric_product[e31])
                    + (self[scalar] * geometric_product[e15]),
                (self[e31] * geometric_product[e3215])
                    + (self[e45] * geometric_product[e25])
                    + (self[e15] * geometric_product[e12])
                    + (self[e25] * geometric_product[scalar])
                    + (self[e35] * geometric_product[e4235])
                    + (self[scalar] * geometric_product[e25]),
                (self[e12] * geometric_product[e3215])
                    + (self[e45] * geometric_product[e35])
                    + (self[e15] * geometric_product[e4315])
                    + (self[e25] * geometric_product[e23])
                    + (self[e35] * geometric_product[scalar])
                    + (self[scalar] * geometric_product[e35]),
                -(self[e43] * geometric_product[e12])
                    - (self[e43] * geometric_product[e4125])
                    - (self[e23] * geometric_product[e41])
                    - (self[e31] * geometric_product[e42])
                    - (self[e12] * geometric_product[e43])
                    - (self[e45] * geometric_product[e1234]),
            ]) + (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e1234]]) * self.group1().xxy().with_w(self[scalar]))
                - (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e31], geometric_product[e4235]]) * self.group2().xxx().with_w(self[e41]))
                - (Simd32x4::from([geometric_product[e4315], geometric_product[e23], geometric_product[e45], geometric_product[e4315]]) * self.group2().zzz().with_w(self[e42]))
                - (geometric_product.group1().zw().with_zw(geometric_product[e4235], geometric_product[e31]) * self.group2().yyy().with_w(self[e42]))
                - (self.group1().yzx() * geometric_product.group2().zxy()).with_w(self[e41] * geometric_product[e23]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e35] * geometric_product[e42]) + (self[scalar] * geometric_product[e4235]),
                (self[e25] * geometric_product[e1234]) + (self[scalar] * geometric_product[e4315]),
                (self[e35] * geometric_product[e1234]) + (self[scalar] * geometric_product[e4125]),
                -(self[e25] * geometric_product[e31]) - (self[e35] * geometric_product[e12]),
            ]) + (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], geometric_product[e4235]]) * self.group1().xxy().with_w(self[e15]))
                + (Simd32x4::from([geometric_product[e1234], geometric_product[e43], geometric_product[e41], geometric_product[e3215]]) * self.group2().xxyw())
                + (Simd32x4::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45], geometric_product[e4315]]) * self.group1().zyz().with_w(self[e25]))
                + (self.group0().yzx() * geometric_product.group2().zxy()).with_w(self[e45] * geometric_product[e3215])
                + (self.group1().www() * geometric_product.group1().xyz()).with_w(self[e35] * geometric_product[e4125])
                - (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], geometric_product[e25]]) * self.group0().zyz().with_w(self[e31]))
                - (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e15]]) * self.group0().xxy().with_w(self[e23]))
                - (self.group1().yzxz() * geometric_product.group3().zxy().with_w(geometric_product[e35]))
                - (self.group2().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e23])),
        );
    }
}
impl std::ops::Div<GeometricQuotientInfix> for AntiDipoleInversion {
    type Output = GeometricQuotientInfixPartial<AntiDipoleInversion>;
    fn div(self, _rhs: GeometricQuotientInfix) -> Self::Output {
        GeometricQuotientInfixPartial(self)
    }
}
impl GeometricQuotient<AntiCircleRotor> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       71        0
    //    simd3        0       10        0
    //    simd4       27       23        0
    // Totals...
    // yes simd       75      104        0
    //  no simd      156      193        0
    fn geometric_quotient(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiCircleRotor::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, scalar
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                + f32::powi(other[scalar], 2)
                - f32::powi(other[e45], 2),
        );
        let geometric_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (geometric_product[e41] * self[e321])
                    + (geometric_product[e42] * self[e435])
                    + (geometric_product[e42] * self[e3])
                    + (geometric_product[e23] * self[e4])
                    + (geometric_product[e31] * self[e412])
                    + (geometric_product[e45] * self[e423])
                    + (geometric_product[scalar] * self[e423]),
                (geometric_product[e42] * self[e321])
                    + (geometric_product[e43] * self[e415])
                    + (geometric_product[e43] * self[e1])
                    + (geometric_product[e31] * self[e4])
                    + (geometric_product[e12] * self[e423])
                    + (geometric_product[e45] * self[e431])
                    + (geometric_product[scalar] * self[e431]),
                (geometric_product[e41] * self[e425])
                    + (geometric_product[e41] * self[e2])
                    + (geometric_product[e43] * self[e321])
                    + (geometric_product[e23] * self[e431])
                    + (geometric_product[e12] * self[e4])
                    + (geometric_product[e45] * self[e412])
                    + (geometric_product[scalar] * self[e412]),
                -(geometric_product[e23] * self[e415])
                    - (geometric_product[e31] * self[e425])
                    - (geometric_product[e12] * self[e435])
                    - (geometric_product[e45] * self[e321])
                    - (geometric_product[e15] * self[e423])
                    - (geometric_product[e25] * self[e431])
                    - (geometric_product[e35] * self[e412]),
            ]) - (geometric_product.group0().zxy() * self.group1().yzx()).with_w(geometric_product[e41] * self[e235])
                - (geometric_product.group0().zxy() * self.group3().yzx()).with_w(geometric_product[e42] * self[e315])
                - (self.group0().yzx() * geometric_product.group1().zxy()).with_w(geometric_product[e43] * self[e125]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (geometric_product[e15] * self[e4]) + (geometric_product[scalar] * self[e415]),
                (geometric_product[e25] * self[e4]) + (geometric_product[scalar] * self[e425]),
                (geometric_product[e35] * self[e4]) + (geometric_product[scalar] * self[e435]),
                -(geometric_product[e31] * self[e2]) - (geometric_product[e12] * self[e3]),
            ]) + (self.group1().zxyw() * geometric_product.group1().yzx().with_w(geometric_product[scalar]))
                + (self.group2().zx().with_zw(self[e5], self[e315]) * geometric_product.group0().yzz().with_w(geometric_product[e42]))
                + (self.group3().ww().with_zw(self[e315], self[e235]) * geometric_product.group0().xyx().with_w(geometric_product[e41]))
                + (self.group0().zxy() * geometric_product.group2().yzx()).with_w(geometric_product[e43] * self[e125])
                - (geometric_product.group1().wwwx() * self.group3().xyzx())
                - (geometric_product.group2().zxyy() * self.group0().yzx().with_w(self[e431]))
                - (geometric_product.group0().zxy() * self.group2().yzx()).with_w(geometric_product[e15] * self[e423])
                - (geometric_product.group1().zxy() * self.group1().yzx()).with_w(geometric_product[e35] * self[e412]),
            // e235, e315, e125, e5
            Simd32x4::from([
                geometric_product[scalar] * self[e235],
                geometric_product[scalar] * self[e315],
                geometric_product[scalar] * self[e125],
                -(geometric_product[e25] * self[e425]) - (geometric_product[e35] * self[e435]),
            ]) + (Simd32x4::from([self[e435], self[e3], self[e425], self[e3]]) * geometric_product.group2().yxxz())
                + (Simd32x4::from([self[e2], self[e415], self[e1], self[e5]]) * geometric_product.group2().zzyw())
                + (self.group2().zx().with_zw(self[e5], self[e2]) * geometric_product.group1().yzz().with_w(geometric_product[e25]))
                + (self.group3().ww().with_zw(self[e315], self[e1]) * geometric_product.group1().xyx().with_w(geometric_product[e15]))
                - (Simd32x4::from([self[e425], self[e1], self[e321], self[e415]]) * geometric_product.group2().zzzx())
                - (Simd32x4::from([self[e3], self[e321], self[e415], self[e5]]) * geometric_product.group2().yyy().with_w(geometric_product[e45]))
                - (geometric_product.group1().zxyx() * self.group2().yzxx())
                - (geometric_product.group1().wwwy() * self.group2().xyzy())
                - (self.group1().wz().with_zw(self[e2], self[e125]) * geometric_product.group2().xxx().with_w(geometric_product[e12])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (geometric_product[e23] * self[e321]) + (geometric_product[e31] * self[e3]) + (geometric_product[e15] * self[e4]) + (geometric_product[scalar] * self[e1]),
                (geometric_product[e31] * self[e321]) + (geometric_product[e12] * self[e1]) + (geometric_product[e25] * self[e4]) + (geometric_product[scalar] * self[e2]),
                (geometric_product[e23] * self[e2]) + (geometric_product[e12] * self[e321]) + (geometric_product[e35] * self[e4]) + (geometric_product[scalar] * self[e3]),
                -(geometric_product[e43] * self[e3]) - (geometric_product[e23] * self[e423]) - (geometric_product[e31] * self[e431]) - (geometric_product[e12] * self[e412]),
            ]) + (self.group2().yzxw() * geometric_product.group0().zxy().with_w(geometric_product[e45]))
                + (self.group0().zxy() * geometric_product.group2().yzx()).with_w(geometric_product[scalar] * self[e4])
                - (self.group1().xyzz() * geometric_product.group1().www().with_w(geometric_product[e43]))
                - (self.group3().yzxy() * geometric_product.group1().zxy().with_w(geometric_product[e42]))
                - (self.group2().zx().with_zw(self[e5], self[e1]) * geometric_product.group0().yzz().with_w(geometric_product[e41]))
                - (self.group3().ww().with_zw(self[e315], self[e415]) * geometric_product.group0().xyx().with_w(geometric_product[e41]))
                - (self.group0().yzx() * geometric_product.group2().zxy()).with_w(geometric_product[e42] * self[e425]),
        );
    }
}
impl GeometricQuotient<AntiDipoleInversion> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       43       63        0
    //    simd3        0       12        0
    //    simd4       44       40        0
    // Totals...
    // yes simd       87      115        0
    //  no simd      219      259        0
    fn geometric_quotient(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e4
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125])
                - 2.0 * (other[e4] * other[e5]),
        );
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e4
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e1, e2, e3, e5
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(geometric_product[e415] * self[e4])
                    - (geometric_product[e425] * self[e412])
                    - (geometric_product[e4] * self[e415])
                    - (geometric_product[e4] * self[e1])
                    - (geometric_product[e3] * self[e431]),
                -(geometric_product[e425] * self[e4])
                    - (geometric_product[e435] * self[e423])
                    - (geometric_product[e4] * self[e425])
                    - (geometric_product[e4] * self[e2])
                    - (geometric_product[e1] * self[e412]),
                -(geometric_product[e415] * self[e431])
                    - (geometric_product[e435] * self[e4])
                    - (geometric_product[e4] * self[e435])
                    - (geometric_product[e4] * self[e3])
                    - (geometric_product[e2] * self[e423]),
                (geometric_product[e415] * self[e415])
                    + (geometric_product[e425] * self[e425])
                    + (geometric_product[e435] * self[e435])
                    + (geometric_product[e1] * self[e1])
                    + (geometric_product[e2] * self[e2])
                    + (geometric_product[e3] * self[e3]),
            ]) + (Simd32x4::from([geometric_product[e321], geometric_product[e3], geometric_product[e425], self[e125]]) * self.group0().xxx().with_w(geometric_product[e412]))
                + (Simd32x4::from([geometric_product[e2], geometric_product[e415], geometric_product[e321], geometric_product[e315]]) * self.group0().zzz().with_w(self[e431]))
                + (geometric_product.group1().zw().with_zw(geometric_product[e1], geometric_product[e235]) * self.group0().yyy().with_w(self[e423]))
                + (geometric_product.group0().zxy() * self.group1().yzx()).with_w(geometric_product[e423] * self[e235])
                + (geometric_product.group0().zxy() * self.group3().yzx()).with_w(geometric_product[e431] * self[e315])
                + (self.group2().www() * geometric_product.group3().xyz()).with_w(geometric_product[e125] * self[e412])
                - (self.group1().wwyw() * geometric_product.group0().xyx().with_w(geometric_product[e321]))
                - (self.group1().zx().with_zw(self[e2], self[e5]) * geometric_product.group0().yzx().with_w(geometric_product[e4]))
                - (self.group3().zx().with_zw(self[e321], self[e4]) * geometric_product.group0().yzz().with_w(geometric_product[e5])),
            // e23, e31, e12, e45
            (geometric_product.group3().zxyw() * self.group3().yzx().with_w(self[e4]))
                + (self.group2().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e423]))
                + (self.group0().yzx() * geometric_product.group2().zxy()).with_w(geometric_product[e431] * self[e315])
                + (geometric_product.group1().zxy() * self.group1().yzx()).with_w(geometric_product[e412] * self[e125])
                - (Simd32x4::from([geometric_product[e315], geometric_product[e5], geometric_product[e5], self[e1]]) * self.group0().zyz().with_w(geometric_product[e415]))
                - (Simd32x4::from([geometric_product[e5], geometric_product[e125], geometric_product[e235], geometric_product[e125]]) * self.group0().xxy().with_w(self[e412]))
                - (geometric_product.group2() * self.group2().www().with_w(self[e5]))
                - (geometric_product.group1().yzxy() * self.group1().zxy().with_w(self[e2]))
                - (geometric_product.group1().wwwz() * self.group3().xyzz())
                - (geometric_product.group3().xyxy() * self.group1().ww().with_zw(self[e2], self[e425]))
                - (geometric_product.group3().yzzz() * self.group3().zx().with_zw(self[e321], self[e435]))
                - (self.group2().zx().with_zw(self[e5], geometric_product[e315]) * geometric_product.group0().yzz().with_w(self[e431]))
                - (self.group3().ww().with_zw(self[e315], geometric_product[e235]) * geometric_product.group0().xyx().with_w(self[e423]))
                - (geometric_product.group2().www() * self.group2().xyz()).with_w(geometric_product[e1] * self[e415]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(geometric_product[e125] * self[e2]) - (geometric_product[e1] * self[e5]) - (geometric_product[e2] * self[e125]) - (geometric_product[e5] * self[e415]),
                -(geometric_product[e125] * self[e415]) - (geometric_product[e2] * self[e5]) - (geometric_product[e3] * self[e235]) - (geometric_product[e5] * self[e425]),
                -(geometric_product[e315] * self[e1]) - (geometric_product[e1] * self[e315]) - (geometric_product[e3] * self[e5]) - (geometric_product[e5] * self[e435]),
                (geometric_product[e415] * self[e423]) + (geometric_product[e425] * self[e431]) + (geometric_product[e435] * self[e412]) + (geometric_product[e321] * self[e4]),
            ]) + (Simd32x4::from([self[e425], self[e1], self[e321], self[e2]]) * geometric_product.group2().zzz().with_w(geometric_product[e431]))
                + (Simd32x4::from([self[e3], self[e321], self[e415], self[e425]]) * geometric_product.group2().yyy().with_w(geometric_product[e431]))
                + (self.group3().xyzz() * geometric_product.group3().www().with_w(geometric_product[e412]))
                + (self.group1().wz().with_zw(self[e2], self[e1]) * geometric_product.group2().xxx().with_w(geometric_product[e423]))
                + (geometric_product.group1().zxy() * self.group2().yzx()).with_w(geometric_product[e423] * self[e415])
                + (geometric_product.group3().zxy() * self.group2().yzx()).with_w(geometric_product[e412] * self[e435])
                - (Simd32x4::from([self[e435], self[e3], self[e425], self[e321]]) * geometric_product.group2().yxxw())
                - (self.group2().zx().with_zw(self[e5], geometric_product[e2]) * geometric_product.group1().yzz().with_w(self[e431]))
                - (self.group3().ww().with_zw(self[e315], geometric_product[e1]) * geometric_product.group1().xyx().with_w(self[e423]))
                - (geometric_product.group1().www() * self.group2().xyz()).with_w(geometric_product[e3] * self[e412]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(geometric_product[e4] * self[e235]) - (geometric_product[e3] * self[e425]),
                -(geometric_product[e4] * self[e315]) - (geometric_product[e1] * self[e435]),
                -(geometric_product[e4] * self[e125]) - (geometric_product[e2] * self[e415]),
                (geometric_product[e3] * self[e125]) + (geometric_product[e5] * self[e321]),
            ]) + (Simd32x4::from([geometric_product[e315], geometric_product[e5], geometric_product[e5], self[e125]]) * self.group0().zyz().with_w(geometric_product[e435]))
                + (Simd32x4::from([geometric_product[e5], geometric_product[e125], geometric_product[e235], self[e315]]) * self.group0().xxy().with_w(geometric_product[e425]))
                + (geometric_product.group3().yzxy() * self.group1().zxy().with_w(self[e315]))
                + (self.group1().xyzz() * geometric_product.group1().www().with_w(geometric_product[e125]))
                + (self.group2().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e415]))
                + (self.group2().wwwx() * geometric_product.group2().xyz().with_w(geometric_product[e1]))
                + (self.group1().ww().with_zw(self[e2], self[e415]) * geometric_product.group1().xyx().with_w(geometric_product[e235]))
                + (self.group3().zx().with_zw(self[e321], self[e425]) * geometric_product.group1().yzz().with_w(geometric_product[e315]))
                - (self.group3().yzxz() * geometric_product.group1().zxy().with_w(geometric_product[e125]))
                - (self.group2().zx().with_zw(self[e5], self[e1]) * geometric_product.group0().yzz().with_w(geometric_product[e235]))
                - (self.group3().ww().with_zw(self[e315], self[e5]) * geometric_product.group0().xyx().with_w(geometric_product[e321]))
                - (self.group0().yzx() * geometric_product.group2().zxy()).with_w(geometric_product[e315] * self[e2]),
        );
    }
}
impl GeometricQuotient<AntiDualNum> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        4        0
    //    simd2        0        1        0
    //    simd3        1        2        0
    //    simd4        3        5        0
    // Totals...
    // yes simd        4       12        0
    //  no simd       15       32        0
    fn geometric_quotient(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDualNum::from_groups(/* e3215, scalar */ Simd32x2::from(f32::powi(other[scalar], -2)) * other.group0());
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            geometric_product.group0().yy().with_zw(geometric_product[scalar], geometric_product[e3215]) * self.group0().with_w(self[e4]),
            // e415, e425, e435, e321
            (Simd32x4::from(geometric_product[e3215]) * self.group0().with_w(self[e4])) + (Simd32x4::from(geometric_product[scalar]) * self.group1()),
            // e235, e315, e125, e5
            Simd32x4::from([
                self[e235] * geometric_product[scalar],
                self[e315] * geometric_product[scalar],
                self[e125] * geometric_product[scalar],
                0.0,
            ]) + (geometric_product.group0().xx().with_zw(geometric_product[e3215], geometric_product[scalar]) * self.group1().xyz().with_w(self[e5]))
                - (Simd32x4::from(geometric_product[e3215]) * self.group3().xyz().with_w(self[e321])),
            // e1, e2, e3, e4
            ((Simd32x3::from(geometric_product[e3215]) * self.group0()) + (Simd32x3::from(geometric_product[scalar]) * self.group3().xyz()))
                .with_w(self[e4] * geometric_product[scalar]),
        );
    }
}
impl GeometricQuotient<AntiFlatPoint> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       15        0
    //    simd3        5        7        0
    //    simd4        7        8        0
    // Totals...
    // yes simd       17       30        0
    //  no simd       48       68        0
    fn geometric_quotient(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlatPoint::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(f32::powi(other[e321], -2)) * Simd32x4::from([other[e235] * -1.0, other[e315] * -1.0, other[e125] * -1.0, other[e321] * -1.0]),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x3::from(geometric_product[e321]) * self.group0()).with_w(
                (self[e423] * geometric_product[e235]) + (self[e431] * geometric_product[e315]) + (self[e412] * geometric_product[e125]) - (self[e321] * geometric_product[e321]),
            ),
            // e23, e31, e12, e45
            Simd32x4::from([self[e431] * geometric_product[e125], self[e412] * geometric_product[e235], self[e423] * geometric_product[e315], 0.0])
                - (geometric_product.group0().xyzy() * self.group2().www().with_w(self[e431]))
                - (geometric_product.group0().yzxx() * self.group0().zxy().with_w(self[e423]))
                - (geometric_product.group0().wwwz() * self.group3().xyz().with_w(self[e412])),
            // e15, e25, e35, e1234
            ((Simd32x3::from(self[e321]) * geometric_product.group0().xyz())
                + (self.group1().yzx() * geometric_product.group0().zxy())
                + (self.group3().zxy() * geometric_product.group0().yzx())
                - (Simd32x3::from(geometric_product[e321]) * self.group2().xyz())
                - (self.group1().zxy() * geometric_product.group0().yzx())
                - (self.group3().yzx() * geometric_product.group0().zxy()))
            .with_w(self[e4] * geometric_product[e321]),
            // e4235, e4315, e4125, e3215
            (self.group1().xyzy() * geometric_product.group0().wwwy())
                + (geometric_product.group0().xyzz() * self.group2().www().with_w(self[e435]))
                + (geometric_product.group0().yzxx() * self.group0().zxy().with_w(self[e415]))
                + Simd32x3::from(0.0).with_w(-(self[e2] * geometric_product[e315]) - (self[e3] * geometric_product[e125]) - (self[e5] * geometric_product[e321]))
                - (geometric_product.group0().zxyx() * self.group0().yzx().with_w(self[e1])),
        );
    }
}
impl GeometricQuotient<AntiFlector> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       27       38        0
    //    simd3        0        6        0
    //    simd4       22       19        0
    // Totals...
    // yes simd       49       63        0
    //  no simd      115      132        0
    fn geometric_quotient(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiFlector::from_groups(/* e235, e315, e125, e321 */ other.group0() * Simd32x4::from(-1.0), /* e1, e2, e3, e5 */ other.group1());
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2),
        );
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e1, e2, e3, e5
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([geometric_product[e321], geometric_product[e3], geometric_product[e1], geometric_product[e235]]) * self.group0().xxy().with_w(self[e423]))
                + (Simd32x4::from([geometric_product[e2], geometric_product[e321], geometric_product[e321], geometric_product[e315]]) * self.group0().zyz().with_w(self[e431]))
                + Simd32x3::from(0.0)
                    .with_w((self[e1] * geometric_product[e1]) + (self[e2] * geometric_product[e2]) + (self[e3] * geometric_product[e3]) - (self[e4] * geometric_product[e5]))
                + (self.group2().www() * geometric_product.group1().xyz()).with_w(self[e412] * geometric_product[e125])
                - (self.group0().yzx() * geometric_product.group1().zxy()).with_w(self[e321] * geometric_product[e321]),
            // e23, e31, e12, e45
            Simd32x4::from([self[e2] * geometric_product[e3], self[e3] * geometric_product[e1], self[e1] * geometric_product[e2], 0.0])
                + (self.group0().yzx() * geometric_product.group0().zxy()).with_w(self[e4] * geometric_product[e5])
                - (Simd32x4::from([geometric_product[e315], geometric_product[e5], geometric_product[e5], geometric_product[e315]]) * self.group0().zyz().with_w(self[e431]))
                - (Simd32x4::from([geometric_product[e321], geometric_product[e3], geometric_product[e1], geometric_product[e2]]) * self.group3().xxy().with_w(self[e425]))
                - (Simd32x4::from([geometric_product[e2], geometric_product[e321], geometric_product[e321], geometric_product[e3]]) * self.group3().zyz().with_w(self[e435]))
                - (Simd32x4::from([geometric_product[e5], geometric_product[e125], geometric_product[e235], geometric_product[e235]]) * self.group0().xxy().with_w(self[e423]))
                - (self.group1().www() * geometric_product.group1().xyz()).with_w(self[e412] * geometric_product[e125])
                - (self.group2().www() * geometric_product.group0().xyz()).with_w(self[e415] * geometric_product[e1]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e321] * geometric_product[e235]) + (self[e315] * geometric_product[e3]) + (self[e1] * geometric_product[e5]) + (self[e3] * geometric_product[e315])
                    - (self[e125] * geometric_product[e2])
                    - (self[e2] * geometric_product[e125])
                    - (self[e5] * geometric_product[e1]),
                (self[e321] * geometric_product[e315]) + (self[e125] * geometric_product[e1]) + (self[e1] * geometric_product[e125]) + (self[e2] * geometric_product[e5])
                    - (self[e315] * geometric_product[e321])
                    - (self[e3] * geometric_product[e235])
                    - (self[e5] * geometric_product[e2]),
                (self[e321] * geometric_product[e125]) + (self[e235] * geometric_product[e2]) + (self[e2] * geometric_product[e235]) + (self[e3] * geometric_product[e5])
                    - (self[e125] * geometric_product[e321])
                    - (self[e1] * geometric_product[e315])
                    - (self[e5] * geometric_product[e3]),
                0.0,
            ]) + (geometric_product.group0().zxyw() * self.group1().yzx().with_w(self[e4]))
                - (Simd32x4::from([geometric_product[e315], geometric_product[e5], geometric_product[e5], geometric_product[e2]]) * self.group1().zyz().with_w(self[e431]))
                - (Simd32x4::from([geometric_product[e321], geometric_product[e3], geometric_product[e1], geometric_product[e3]]) * self.group2().xxy().with_w(self[e412]))
                - (Simd32x4::from([geometric_product[e5], geometric_product[e125], geometric_product[e235], geometric_product[e1]]) * self.group1().xxy().with_w(self[e423])),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([geometric_product[e315], geometric_product[e5], geometric_product[e5], geometric_product[e315]]) * self.group0().zyz().with_w(self[e425]))
                + (Simd32x4::from([geometric_product[e321], geometric_product[e3], geometric_product[e1], geometric_product[e125]]) * self.group1().xxyz())
                + (Simd32x4::from([geometric_product[e2], geometric_product[e321], geometric_product[e321], geometric_product[e5]]) * self.group1().zyzw())
                + (Simd32x4::from([geometric_product[e5], geometric_product[e125], geometric_product[e235], geometric_product[e235]]) * self.group0().xxy().with_w(self[e415]))
                + (self.group2().wwwx() * geometric_product.group0().xyz().with_w(geometric_product[e1]))
                + Simd32x3::from(0.0).with_w(
                    (self[e315] * geometric_product[e2]) + (self[e125] * geometric_product[e3]) - (self[e3] * geometric_product[e125]) - (self[e5] * geometric_product[e321]),
                )
                - (geometric_product.group0().zxyx() * self.group0().yzx().with_w(self[e1]))
                - (self.group1().yzx() * geometric_product.group1().zxy()).with_w(self[e2] * geometric_product[e315]),
        );
    }
}
impl GeometricQuotient<AntiLine> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       48        0
    //    simd3        0        9        0
    //    simd4       12        7        0
    // Totals...
    // yes simd       40       64        0
    //  no simd       76      103        0
    fn geometric_quotient(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiLine::from_groups(
            // e23, e31, e12
            other.group0() * Simd32x3::from(-1.0),
            // e15, e25, e35
            other.group1() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(/* scalar */ f32::powi(other[e23], 2) + f32::powi(other[e31], 2) + f32::powi(other[e12], 2));
        let geometric_product = AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e15, e25, e35
            Simd32x3::from(other_2[scalar]) * reverse.group1(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e412] * geometric_product[e31]) + (self[e4] * geometric_product[e23]),
                (self[e423] * geometric_product[e12]) + (self[e4] * geometric_product[e31]),
                (self[e431] * geometric_product[e23]) + (self[e4] * geometric_product[e12]),
                -(self[e431] * geometric_product[e25])
                    - (self[e412] * geometric_product[e35])
                    - (self[e415] * geometric_product[e23])
                    - (self[e425] * geometric_product[e31])
                    - (self[e435] * geometric_product[e12]),
            ]) - (self.group0().yzx() * geometric_product.group0().zxy()).with_w(self[e423] * geometric_product[e15]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e412] * geometric_product[e25]) + (self[e435] * geometric_product[e31]) + (self[e4] * geometric_product[e15]),
                (self[e423] * geometric_product[e35]) + (self[e415] * geometric_product[e12]) + (self[e4] * geometric_product[e25]),
                (self[e431] * geometric_product[e15]) + (self[e425] * geometric_product[e23]) + (self[e4] * geometric_product[e35]),
                -(self[e412] * geometric_product[e35]) - (self[e1] * geometric_product[e23]) - (self[e2] * geometric_product[e31]) - (self[e3] * geometric_product[e12]),
            ]) - (self.group0().yzx() * geometric_product.group1().zxy()).with_w(self[e423] * geometric_product[e15])
                - (geometric_product.group0().zxy() * self.group1().yzx()).with_w(self[e431] * geometric_product[e25]),
            // e235, e315, e125, e5
            Simd32x4::from([
                self[e2] * geometric_product[e35],
                self[e415] * geometric_product[e35],
                self[e1] * geometric_product[e25],
                -(self[e425] * geometric_product[e25]) - (self[e435] * geometric_product[e35]),
            ]) + (Simd32x4::from([self[e435], self[e3], self[e425], self[e3]]) * geometric_product.group1().yxx().with_w(geometric_product[e35]))
                + (self.group2().zx().with_zw(self[e5], self[e2]) * geometric_product.group0().yzz().with_w(geometric_product[e25]))
                + (self.group3().ww().with_zw(self[e315], self[e1]) * geometric_product.group0().xyx().with_w(geometric_product[e15]))
                - (Simd32x4::from([self[e425], self[e1], self[e321], self[e415]]) * geometric_product.group1().zzz().with_w(geometric_product[e15]))
                - (Simd32x4::from([self[e3], self[e321], self[e415], self[e125]]) * geometric_product.group1().yyy().with_w(geometric_product[e12]))
                - (self.group2().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e23]))
                - (self.group1().wz().with_zw(self[e2], self[e315]) * geometric_product.group1().xxx().with_w(geometric_product[e31])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e412] * geometric_product[e25]) + (self[e321] * geometric_product[e23]) + (self[e4] * geometric_product[e15]) + (self[e3] * geometric_product[e31]),
                (self[e423] * geometric_product[e35]) + (self[e321] * geometric_product[e31]) + (self[e4] * geometric_product[e25]) + (self[e1] * geometric_product[e12]),
                (self[e431] * geometric_product[e15]) + (self[e321] * geometric_product[e12]) + (self[e4] * geometric_product[e35]) + (self[e2] * geometric_product[e23]),
                self[e412] * geometric_product[e12] * -1.0,
            ]) - (self.group0().yzx() * geometric_product.group1().zxy()).with_w(self[e423] * geometric_product[e23])
                - (geometric_product.group0().zxy() * self.group3().yzx()).with_w(self[e431] * geometric_product[e31]),
        );
    }
}
impl GeometricQuotient<AntiMotor> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       35       58        0
    //    simd3        0        9        0
    //    simd4       18       13        0
    // Totals...
    // yes simd       53       80        0
    //  no simd      107      137        0
    fn geometric_quotient(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, e3215
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e23], 2) + f32::powi(other[e31], 2) + f32::powi(other[e12], 2) + f32::powi(other[scalar], 2),
        );
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e15, e25, e35, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e412] * geometric_product[e31]) + (self[e4] * geometric_product[e23]),
                (self[e431] * geometric_product[scalar]) + (self[e4] * geometric_product[e31]),
                (self[e412] * geometric_product[scalar]) + (self[e4] * geometric_product[e12]),
                -(self[e431] * geometric_product[e25])
                    - (self[e412] * geometric_product[e35])
                    - (self[e415] * geometric_product[e23])
                    - (self[e425] * geometric_product[e31])
                    - (self[e435] * geometric_product[e12]),
            ]) + (self.group0().xxy() * geometric_product.group0().wzx()).with_w(self[e4] * geometric_product[e3215])
                - (self.group0().yzx() * geometric_product.group0().zxy()).with_w(self[e423] * geometric_product[e15]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e415] * geometric_product[scalar]) + (self[e435] * geometric_product[e31]) + (self[e4] * geometric_product[e15]),
                (self[e415] * geometric_product[e12]) + (self[e425] * geometric_product[scalar]) + (self[e4] * geometric_product[e25]),
                (self[e425] * geometric_product[e23]) + (self[e435] * geometric_product[scalar]) + (self[e4] * geometric_product[e35]),
                -(self[e412] * geometric_product[e35]) - (self[e1] * geometric_product[e23]) - (self[e2] * geometric_product[e31]) - (self[e3] * geometric_product[e12]),
            ]) + (geometric_product.group1().ywww() * self.group0().zyz().with_w(self[e4]))
                + (self.group0().xxy() * geometric_product.group1().wzx()).with_w(self[e321] * geometric_product[scalar])
                - (geometric_product.group1().zxyx() * self.group0().yzx().with_w(self[e423]))
                - (self.group1().yzx() * geometric_product.group0().zxy()).with_w(self[e431] * geometric_product[e25]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e2] * geometric_product[e35]) + (self[e5] * geometric_product[e23]),
                (self[e3] * geometric_product[e15]) + (self[e5] * geometric_product[e31]),
                (self[e1] * geometric_product[e25]) + (self[e5] * geometric_product[e12]),
                -(self[e315] * geometric_product[e31]) - (self[e125] * geometric_product[e12]),
            ]) + (geometric_product.group0().ywww() * self.group2().zyz().with_w(self[e5]))
                + (geometric_product.group1().ywwy() * self.group1().zyz().with_w(self[e2]))
                + (geometric_product.group1().wzxx() * self.group1().xxy().with_w(self[e1]))
                + (self.group2().xxy() * geometric_product.group0().wzx()).with_w(self[e3] * geometric_product[e35])
                - (self.group1().yzxx() * geometric_product.group1().zxyx())
                - (self.group1().wwwy() * geometric_product.group1().xyzy())
                - (geometric_product.group1().wzxw() * self.group3().xxy().with_w(self[e321]))
                - (self.group2().yzx() * geometric_product.group0().zxy()).with_w(self[e435] * geometric_product[e35])
                - (self.group3().zyz() * geometric_product.group1().yww()).with_w(self[e235] * geometric_product[e23]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e412] * geometric_product[e25])
                    + (self[e321] * geometric_product[e23])
                    + (self[e4] * geometric_product[e15])
                    + (self[e1] * geometric_product[scalar])
                    + (self[e3] * geometric_product[e31]),
                (self[e431] * geometric_product[e3215])
                    + (self[e321] * geometric_product[e31])
                    + (self[e4] * geometric_product[e25])
                    + (self[e1] * geometric_product[e12])
                    + (self[e2] * geometric_product[scalar]),
                (self[e412] * geometric_product[e3215])
                    + (self[e321] * geometric_product[e12])
                    + (self[e4] * geometric_product[e35])
                    + (self[e2] * geometric_product[e23])
                    + (self[e3] * geometric_product[scalar]),
                self[e412] * geometric_product[e12] * -1.0,
            ]) + (self.group0().xxy() * geometric_product.group1().wzx()).with_w(self[e4] * geometric_product[scalar])
                - (geometric_product.group0().zxyy() * self.group3().yzx().with_w(self[e431]))
                - (self.group0().yzx() * geometric_product.group1().zxy()).with_w(self[e423] * geometric_product[e23]),
        );
    }
}
impl GeometricQuotient<AntiPlane> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       15        0
    //    simd4       11       13        0
    // Totals...
    // yes simd       17       28        0
    //  no simd       50       67        0
    fn geometric_quotient(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiPlane::from_groups(
            // e1, e2, e3, e5
            Simd32x4::from(f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)) * other.group0(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (geometric_product.group0().xyzy() * self.group2().www().with_w(self[e2]))
                + (geometric_product.group0().yzxx() * self.group0().zxy().with_w(self[e1]))
                + Simd32x3::from(0.0).with_w(self[e3] * geometric_product[e3])
                - (geometric_product.group0().zxyw() * self.group0().yzx().with_w(self[e4])),
            // e23, e31, e12, e45
            (geometric_product.group0().zxyw() * self.group3().yzx().with_w(self[e4]))
                - (self.group1().wwwy() * geometric_product.group0().xyzy())
                - (geometric_product.group0().yzxz() * self.group3().zxy().with_w(self[e435]))
                - (geometric_product.group0().wwwx() * self.group0().with_w(self[e415])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e315] * geometric_product[e3]) + (self[e1] * geometric_product[e5]),
                (self[e125] * geometric_product[e1]) + (self[e2] * geometric_product[e5]),
                (self[e235] * geometric_product[e2]) + (self[e3] * geometric_product[e5]),
                0.0,
            ]) - (geometric_product.group0().xyzz() * self.group3().www().with_w(self[e412]))
                - (geometric_product.group0().yzxy() * self.group2().zxy().with_w(self[e431]))
                - (geometric_product.group0().wwwx() * self.group1().xyz().with_w(self[e423])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e425] * geometric_product[e3] * -1.0,
                self[e435] * geometric_product[e1] * -1.0,
                self[e415] * geometric_product[e2] * -1.0,
                (self[e315] * geometric_product[e2]) + (self[e125] * geometric_product[e3]),
            ]) + (Simd32x4::from(geometric_product[e5]) * self.group0().with_w(self[e321]))
                + (geometric_product.group0().yzxx() * self.group1().zxy().with_w(self[e235])),
        );
    }
}
impl GeometricQuotient<AntiScalar> for AntiDipoleInversion {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        1
    //    simd3        0        2        0
    //    simd4        0        6        0
    // Totals...
    // yes simd        0        9        1
    //  no simd        0       31        1
    fn geometric_quotient(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiScalar::from_groups(/* e12345 */ 1.0 / other[e12345] * -1.0);
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(geometric_product[e12345]) * self.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from(geometric_product[e12345]) * self.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, e1234
            Simd32x4::from(geometric_product[e12345]) * self.group2() * Simd32x4::from(-1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(geometric_product[e12345]) * self.group3() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
    }
}
impl GeometricQuotient<Circle> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       57        0
    //    simd3        0       17        0
    //    simd4       26       17        0
    // Totals...
    // yes simd       62       91        0
    //  no simd      140      176        0
    fn geometric_quotient(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let reverse = Circle::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125
            other.group2() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group2(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(self[e435] * geometric_product[e431]) - (self[e321] * geometric_product[e423]) - (self[e4] * geometric_product[e415]) - (self[e3] * geometric_product[e431]),
                -(self[e415] * geometric_product[e412]) - (self[e321] * geometric_product[e431]) - (self[e4] * geometric_product[e425]) - (self[e1] * geometric_product[e412]),
                -(self[e425] * geometric_product[e423]) - (self[e321] * geometric_product[e412]) - (self[e4] * geometric_product[e435]) - (self[e2] * geometric_product[e423]),
                (self[e415] * geometric_product[e415])
                    + (self[e425] * geometric_product[e425])
                    + (self[e435] * geometric_product[e435])
                    + (self[e315] * geometric_product[e431])
                    + (self[e125] * geometric_product[e412]),
            ]) + (self.group0().xyx() * geometric_product.group1().wwy()).with_w(self[e423] * geometric_product[e235])
                + (self.group0().yzz() * geometric_product.group1().zxw()).with_w(self[e431] * geometric_product[e315])
                + (geometric_product.group0().zxy() * self.group1().yzx()).with_w(self[e412] * geometric_product[e125])
                + (geometric_product.group0().zxy() * self.group3().yzx()).with_w(self[e235] * geometric_product[e423])
                - (geometric_product.group1().yzxw() * self.group0().zxy().with_w(self[e321])),
            // e23, e31, e12, e45
            (self.group2().yzxy() * geometric_product.group0().zxy().with_w(geometric_product[e431]))
                + (self.group0().yzx() * geometric_product.group2().zxy()).with_w(self[e235] * geometric_product[e423])
                + (self.group1().yzx() * geometric_product.group1().zxy()).with_w(self[e125] * geometric_product[e412])
                - (self.group3().xyzz() * geometric_product.group1().wwwz())
                - (geometric_product.group1().yzxy() * self.group1().zxy().with_w(self[e2]))
                - (self.group2().zx().with_zw(self[e5], geometric_product[e125]) * geometric_product.group0().yzz().with_w(self[e412]))
                - (self.group3().ww().with_zw(self[e315], geometric_product[e315]) * geometric_product.group0().xyx().with_w(self[e431]))
                - (geometric_product.group2() * self.group2().www()).with_w(self[e1] * geometric_product[e415])
                - (self.group0().zxy() * geometric_product.group2().yzx()).with_w(self[e423] * geometric_product[e235]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(self[e435] * geometric_product[e315])
                    - (self[e235] * geometric_product[e321])
                    - (self[e125] * geometric_product[e425])
                    - (self[e2] * geometric_product[e125])
                    - (self[e5] * geometric_product[e415]),
                -(self[e415] * geometric_product[e125])
                    - (self[e235] * geometric_product[e435])
                    - (self[e315] * geometric_product[e321])
                    - (self[e3] * geometric_product[e235])
                    - (self[e5] * geometric_product[e425]),
                -(self[e425] * geometric_product[e235])
                    - (self[e315] * geometric_product[e415])
                    - (self[e125] * geometric_product[e321])
                    - (self[e1] * geometric_product[e315])
                    - (self[e5] * geometric_product[e435]),
                (self[e425] * geometric_product[e431])
                    + (self[e435] * geometric_product[e412])
                    + (self[e4] * geometric_product[e321])
                    + (self[e1] * geometric_product[e423])
                    + (self[e2] * geometric_product[e431])
                    + (self[e3] * geometric_product[e412]),
            ]) + (Simd32x4::from([self[e425], self[e1], self[e321], geometric_product[e435]]) * geometric_product.group2().zzz().with_w(self[e412]))
                + (Simd32x4::from([self[e3], self[e321], self[e415], geometric_product[e425]]) * geometric_product.group2().yyy().with_w(self[e431]))
                + (self.group1().wz().with_zw(self[e2], geometric_product[e415]) * geometric_product.group2().xxx().with_w(self[e423]))
                + (self.group2().yzx() * geometric_product.group1().zxy()).with_w(self[e415] * geometric_product[e423]),
            // e4235, e4315, e4125, e3215
            (geometric_product.group1().xyzy() * self.group1().www().with_w(self[e315]))
                + (geometric_product.group1().yzxz() * self.group3().zxy().with_w(self[e125]))
                + (geometric_product.group1().wwwx() * self.group1().xyz().with_w(self[e235]))
                + (geometric_product.group2() * self.group2().www()).with_w(self[e435] * geometric_product[e125])
                + (self.group0().zxy() * geometric_product.group2().yzx()).with_w(self[e415] * geometric_product[e235])
                + (geometric_product.group0().zxy() * self.group2().yzx()).with_w(self[e425] * geometric_product[e315])
                - (self.group3().yzxw() * geometric_product.group1().zxyw())
                - (self.group2().zx().with_zw(self[e5], self[e3]) * geometric_product.group0().yzz().with_w(geometric_product[e125]))
                - (self.group3().ww().with_zw(self[e315], self[e2]) * geometric_product.group0().xyx().with_w(geometric_product[e315]))
                - (self.group0().yzx() * geometric_product.group2().zxy()).with_w(self[e1] * geometric_product[e235]),
        );
    }
}
impl GeometricQuotient<CircleRotor> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       70        0
    //    simd3        0       13        0
    //    simd4       29       22        0
    // Totals...
    // yes simd       69      105        0
    //  no simd      156      197        0
    fn geometric_quotient(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let reverse = CircleRotor::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e12345
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - f32::powi(other[e12345], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(self[e412] * geometric_product[e425])
                    - (self[e435] * geometric_product[e431])
                    - (self[e321] * geometric_product[e423])
                    - (self[e4] * geometric_product[e415])
                    - (self[e3] * geometric_product[e431]),
                -(self[e431] * geometric_product[e12345])
                    - (self[e415] * geometric_product[e412])
                    - (self[e321] * geometric_product[e431])
                    - (self[e4] * geometric_product[e425])
                    - (self[e1] * geometric_product[e412]),
                -(self[e412] * geometric_product[e12345])
                    - (self[e425] * geometric_product[e423])
                    - (self[e321] * geometric_product[e412])
                    - (self[e4] * geometric_product[e435])
                    - (self[e2] * geometric_product[e423]),
                (self[e415] * geometric_product[e415])
                    + (self[e425] * geometric_product[e425])
                    + (self[e435] * geometric_product[e435])
                    + (self[e315] * geometric_product[e431])
                    + (self[e125] * geometric_product[e412]),
            ]) + (self.group0().xyx() * geometric_product.group1().wwy()).with_w(self[e423] * geometric_product[e235])
                + (self.group0().yzz() * geometric_product.group1().zxw()).with_w(self[e431] * geometric_product[e315])
                + (geometric_product.group0().zxy() * self.group1().yzx()).with_w(self[e412] * geometric_product[e125])
                + (geometric_product.group0().zxy() * self.group3().yzx()).with_w(self[e235] * geometric_product[e423])
                - (Simd32x4::from([geometric_product[e12345], geometric_product[e435], geometric_product[e415], geometric_product[e321]]) * self.group0().xxy().with_w(self[e321])),
            // e23, e31, e12, e45
            Simd32x4::from([
                self[e1] * geometric_product[e321] * -1.0,
                self[e2] * geometric_product[e321] * -1.0,
                self[e3] * geometric_product[e321] * -1.0,
                self[e321] * geometric_product[e12345],
            ]) + (self.group2().yzxy() * geometric_product.group0().zxy().with_w(geometric_product[e431]))
                + (self.group0().yzx() * geometric_product.group2().zxy()).with_w(self[e235] * geometric_product[e423])
                + (self.group1().yzx() * geometric_product.group1().zxy()).with_w(self[e125] * geometric_product[e412])
                - (Simd32x4::from([geometric_product[e425], geometric_product[e12345], geometric_product[e12345], geometric_product[e425]]) * self.group1().zyz().with_w(self[e2]))
                - (Simd32x4::from([geometric_product[e12345], geometric_product[e435], geometric_product[e415], geometric_product[e415]]) * self.group1().xxy().with_w(self[e1]))
                - (geometric_product.group2().yzxx() * self.group0().zxy().with_w(self[e423]))
                - (self.group2().zx().with_zw(self[e5], geometric_product[e125]) * geometric_product.group0().yzz().with_w(self[e412]))
                - (self.group3().ww().with_zw(self[e315], geometric_product[e315]) * geometric_product.group0().xyx().with_w(self[e431]))
                - (self.group2().www() * geometric_product.group2().xyz()).with_w(self[e3] * geometric_product[e435]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(self[e235] * geometric_product[e321])
                    - (self[e235] * geometric_product[e12345])
                    - (self[e125] * geometric_product[e425])
                    - (self[e2] * geometric_product[e125])
                    - (self[e5] * geometric_product[e415]),
                -(self[e235] * geometric_product[e435])
                    - (self[e315] * geometric_product[e321])
                    - (self[e315] * geometric_product[e12345])
                    - (self[e3] * geometric_product[e235])
                    - (self[e5] * geometric_product[e425]),
                -(self[e315] * geometric_product[e415])
                    - (self[e125] * geometric_product[e321])
                    - (self[e125] * geometric_product[e12345])
                    - (self[e1] * geometric_product[e315])
                    - (self[e5] * geometric_product[e435]),
                (self[e425] * geometric_product[e431])
                    + (self[e435] * geometric_product[e412])
                    + (self[e4] * geometric_product[e321])
                    + (self[e1] * geometric_product[e423])
                    + (self[e2] * geometric_product[e431])
                    + (self[e3] * geometric_product[e412]),
            ]) + (geometric_product.group1().zxyz() * self.group2().yzx().with_w(self[e412]))
                + (self.group1().yzx() * geometric_product.group2().zxy()).with_w(self[e423] * geometric_product[e415])
                + (self.group1().www() * geometric_product.group2().xyz()).with_w(self[e431] * geometric_product[e425])
                + (self.group3().zxy() * geometric_product.group2().yzx()).with_w(self[e415] * geometric_product[e423])
                - (geometric_product.group2().yzxw() * self.group1().zxy().with_w(self[e4])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e3] * geometric_product[e425],
                self[e2] * geometric_product[e12345],
                self[e3] * geometric_product[e12345],
                self[e5] * geometric_product[e12345] * -1.0,
            ]) + (Simd32x4::from([geometric_product[e12345], geometric_product[e435], geometric_product[e415], geometric_product[e435]]) * self.group3().xxy().with_w(self[e125]))
                + (self.group1().xyzz() * geometric_product.group1().www().with_w(geometric_product[e125]))
                + (self.group2().wwwy() * geometric_product.group2().xyz().with_w(geometric_product[e425]))
                + (geometric_product.group1().xyzx() * self.group1().www().with_w(self[e235]))
                + (geometric_product.group2().yzxx() * self.group0().zxy().with_w(self[e415]))
                + (geometric_product.group0().zxy() * self.group2().yzx()).with_w(self[e425] * geometric_product[e315])
                - (self.group3().yzxw() * geometric_product.group1().zxyw())
                - (geometric_product.group2().zxyx() * self.group0().yzx().with_w(self[e1]))
                - (self.group2().zx().with_zw(self[e5], geometric_product[e125]) * geometric_product.group0().yzz().with_w(self[e3]))
                - (self.group3().ww().with_zw(self[e315], geometric_product[e315]) * geometric_product.group0().xyx().with_w(self[e2])),
        );
    }
}
impl GeometricQuotient<Dipole> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44       72        0
    //    simd3        0       16        0
    //    simd4       24       14        0
    // Totals...
    // yes simd       68      102        0
    //  no simd      140      176        0
    fn geometric_quotient(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let reverse = Dipole::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35
            other.group2() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2),
        );
        let geometric_product = Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35
            Simd32x3::from(other_2[scalar]) * reverse.group2(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e423] * geometric_product[e45])
                    + (self[e412] * geometric_product[e31])
                    + (self[e435] * geometric_product[e42])
                    + (self[e321] * geometric_product[e41])
                    + (self[e4] * geometric_product[e23])
                    + (self[e3] * geometric_product[e42]),
                (self[e423] * geometric_product[e12])
                    + (self[e431] * geometric_product[e45])
                    + (self[e415] * geometric_product[e43])
                    + (self[e321] * geometric_product[e42])
                    + (self[e4] * geometric_product[e31])
                    + (self[e1] * geometric_product[e43]),
                (self[e431] * geometric_product[e23])
                    + (self[e412] * geometric_product[e45])
                    + (self[e425] * geometric_product[e41])
                    + (self[e321] * geometric_product[e43])
                    + (self[e4] * geometric_product[e12])
                    + (self[e2] * geometric_product[e41]),
                -(self[e415] * geometric_product[e23])
                    - (self[e425] * geometric_product[e31])
                    - (self[e435] * geometric_product[e12])
                    - (self[e321] * geometric_product[e45])
                    - (self[e235] * geometric_product[e41])
                    - (self[e315] * geometric_product[e42])
                    - (self[e125] * geometric_product[e43]),
            ]) - (self.group0().yzx() * geometric_product.group1().zxy()).with_w(self[e423] * geometric_product[e15])
                - (geometric_product.group0().zxy() * self.group1().yzx()).with_w(self[e431] * geometric_product[e25])
                - (geometric_product.group0().zxy() * self.group3().yzx()).with_w(self[e412] * geometric_product[e35]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e435] * geometric_product[e31]) + (self[e4] * geometric_product[e15]),
                (self[e415] * geometric_product[e12]) + (self[e4] * geometric_product[e25]),
                (self[e425] * geometric_product[e23]) + (self[e4] * geometric_product[e35]),
                -(self[e2] * geometric_product[e31]) - (self[e3] * geometric_product[e12]),
            ]) + (self.group2().zx().with_zw(self[e5], self[e125]) * geometric_product.group0().yzz().with_w(geometric_product[e43]))
                + (self.group3().ww().with_zw(self[e315], self[e315]) * geometric_product.group0().xyx().with_w(geometric_product[e42]))
                + (self.group0().zxy() * geometric_product.group2().yzx()).with_w(self[e235] * geometric_product[e41])
                - (self.group3().xyzx() * geometric_product.group1().wwwx())
                - (self.group0().yzx() * geometric_product.group2().zxy()).with_w(self[e423] * geometric_product[e15])
                - (geometric_product.group0().zxy() * self.group2().yzx()).with_w(self[e431] * geometric_product[e25])
                - (self.group1().yzx() * geometric_product.group1().zxy()).with_w(self[e412] * geometric_product[e35]),
            // e235, e315, e125, e5
            Simd32x4::from([
                self[e5] * geometric_product[e23],
                self[e5] * geometric_product[e31],
                self[e5] * geometric_product[e12],
                -(self[e125] * geometric_product[e12]) - (self[e5] * geometric_product[e45]),
            ]) + (Simd32x4::from([self[e435], self[e3], self[e425], self[e1]]) * geometric_product.group2().yxx().with_w(geometric_product[e15]))
                + (Simd32x4::from([self[e2], self[e415], self[e1], self[e2]]) * geometric_product.group2().zzy().with_w(geometric_product[e25]))
                + (self.group2().zxy() * geometric_product.group1().yzx()).with_w(self[e3] * geometric_product[e35])
                - (Simd32x4::from(geometric_product[e15]) * self.group1().wz().with_zw(self[e2], self[e415]))
                - (Simd32x4::from(geometric_product[e25]) * Simd32x4::from([self[e3], self[e321], self[e415], self[e425]]))
                - (Simd32x4::from(geometric_product[e35]) * Simd32x4::from([self[e425], self[e1], self[e321], self[e435]]))
                - (self.group2().xyxx() * geometric_product.group1().wwyx())
                - (self.group2().yzzy() * geometric_product.group1().zxwy()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e321] * geometric_product[e23]) + (self[e315] * geometric_product[e43]) + (self[e4] * geometric_product[e15]) + (self[e3] * geometric_product[e31]),
                (self[e321] * geometric_product[e31]) + (self[e125] * geometric_product[e41]) + (self[e4] * geometric_product[e25]) + (self[e1] * geometric_product[e12]),
                (self[e321] * geometric_product[e12]) + (self[e235] * geometric_product[e42]) + (self[e4] * geometric_product[e35]) + (self[e2] * geometric_product[e23]),
                -(self[e425] * geometric_product[e42]) - (self[e435] * geometric_product[e43]) - (self[e2] * geometric_product[e42]) - (self[e3] * geometric_product[e43]),
            ]) + (self.group0().zxy() * geometric_product.group2().yzx()).with_w(self[e4] * geometric_product[e45])
                - (self.group2().zx().with_zw(self[e5], geometric_product[e12]) * geometric_product.group0().yzz().with_w(self[e412]))
                - (self.group3().ww().with_zw(self[e315], geometric_product[e31]) * geometric_product.group0().xyx().with_w(self[e431]))
                - (self.group0().yzx() * geometric_product.group2().zxy()).with_w(self[e423] * geometric_product[e23])
                - (self.group3().yzx() * geometric_product.group1().zxy()).with_w(self[e1] * geometric_product[e41])
                - (geometric_product.group1().www() * self.group1().xyz()).with_w(self[e415] * geometric_product[e41]),
        );
    }
}
impl GeometricQuotient<DipoleInversion> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       43       67        0
    //    simd3        0       15        0
    //    simd4       44       37        0
    // Totals...
    // yes simd       87      119        0
    //  no simd      219      260        0
    fn geometric_quotient(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let reverse = DipoleInversion::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + 2.0 * (other[e1234] * other[e3215])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2),
        );
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e415] * geometric_product[e1234])
                    + (self[e4] * geometric_product[e23])
                    + (self[e4] * geometric_product[e4235])
                    + (self[e1] * geometric_product[e1234])
                    + (self[e3] * geometric_product[e42]),
                (self[e425] * geometric_product[e1234])
                    + (self[e4] * geometric_product[e31])
                    + (self[e4] * geometric_product[e4315])
                    + (self[e1] * geometric_product[e43])
                    + (self[e2] * geometric_product[e1234]),
                (self[e435] * geometric_product[e1234])
                    + (self[e321] * geometric_product[e43])
                    + (self[e4] * geometric_product[e12])
                    + (self[e4] * geometric_product[e4125])
                    + (self[e3] * geometric_product[e1234]),
                -(self[e415] * geometric_product[e23])
                    - (self[e425] * geometric_product[e31])
                    - (self[e435] * geometric_product[e12])
                    - (self[e321] * geometric_product[e45])
                    - (self[e315] * geometric_product[e42])
                    - (self[e125] * geometric_product[e43]),
            ]) + (Simd32x4::from([geometric_product[e31], geometric_product[e4125], geometric_product[e4235], geometric_product[e4235]]) * self.group0().zxy().with_w(self[e1]))
                + (Simd32x4::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45], geometric_product[e4315]]) * self.group0().zyz().with_w(self[e2]))
                + (self.group1().zx().with_zw(self[e2], geometric_product[e1234]) * geometric_product.group0().yzx().with_w(self[e5]))
                + (self.group0().xxy() * geometric_product.group1().wzx()).with_w(self[e4] * geometric_product[e3215])
                + (geometric_product.group0().xyx() * self.group1().wwy()).with_w(self[e3] * geometric_product[e4125])
                - (self.group0().yzx() * geometric_product.group1().zxy()).with_w(self[e423] * geometric_product[e15])
                - (self.group0().yzx() * geometric_product.group3().zxy()).with_w(self[e431] * geometric_product[e25])
                - (geometric_product.group0().zxy() * self.group1().yzx()).with_w(self[e412] * geometric_product[e35])
                - (geometric_product.group0().zxy() * self.group3().yzx()).with_w(self[e235] * geometric_product[e41]),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e2] * geometric_product[e4125],
                self[e3] * geometric_product[e4235],
                self[e1] * geometric_product[e4315],
                self[e5] * geometric_product[e1234] * -1.0,
            ]) + (Simd32x4::from(self[e4]) * geometric_product.group2().xyz().with_w(geometric_product[e3215]))
                + (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], self[e315]]) * self.group0().zyz().with_w(geometric_product[e42]))
                + (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], self[e235]]) * self.group0().xxy().with_w(geometric_product[e41]))
                + (self.group1().zxyy() * geometric_product.group1().yzx().with_w(geometric_product[e4315]))
                + (self.group2().zx().with_zw(self[e5], geometric_product[e4235]) * geometric_product.group0().yzz().with_w(self[e415]))
                + (self.group3().ww().with_zw(self[e315], self[e125]) * geometric_product.group0().xyx().with_w(geometric_product[e43]))
                + (geometric_product.group2().www() * self.group2().xyz()).with_w(self[e435] * geometric_product[e4125])
                - (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], geometric_product[e31]]) * self.group3().xxyy())
                - (Simd32x4::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45], geometric_product[e12]]) * self.group3().zyzz())
                - (geometric_product.group2().zxyx() * self.group0().yzx().with_w(self[e423]))
                - (geometric_product.group0().zxy() * self.group2().yzx()).with_w(self[e431] * geometric_product[e25])
                - (self.group1().yzx() * geometric_product.group1().zxy()).with_w(self[e412] * geometric_product[e35])
                - (self.group1().www() * geometric_product.group3().xyz()).with_w(self[e1] * geometric_product[e23]),
            // e235, e315, e125, e5
            (Simd32x4::from([geometric_product[e31], geometric_product[e4235], geometric_product[e23], geometric_product[e15]]) * self.group2().zzy().with_w(self[e1]))
                + (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], geometric_product[e4315]]) * self.group1().zyz().with_w(self[e315]))
                + (Simd32x4::from([geometric_product[e4125], geometric_product[e12], geometric_product[e4315], geometric_product[e4125]]) * self.group2().yxxz())
                + (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e4235]]) * self.group1().xxy().with_w(self[e235]))
                + (self.group3().yzxy() * geometric_product.group2().zxyy())
                + (self.group3().wwwz() * geometric_product.group1().xyz().with_w(geometric_product[e35]))
                - (Simd32x4::from(self[e5]) * geometric_product.group3().xyz().with_w(geometric_product[e45]))
                - (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e31], geometric_product[e35]]) * self.group2().xxx().with_w(self[e435]))
                - (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], geometric_product[e12]]) * self.group3().zyz().with_w(self[e125]))
                - (Simd32x4::from([geometric_product[e4315], geometric_product[e23], geometric_product[e45], geometric_product[e23]]) * self.group2().zzzx())
                - (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e31]]) * self.group3().xxy().with_w(self[e315]))
                - (self.group1().yzxx() * geometric_product.group2().zxyx())
                - (self.group1().wwwy() * geometric_product.group2().xyzy())
                - (geometric_product.group1().zw().with_zw(geometric_product[e4235], geometric_product[e3215]) * self.group2().yyy().with_w(self[e321])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e425] * geometric_product[e4125])
                    + (self[e321] * geometric_product[e23])
                    + (self[e315] * geometric_product[e43])
                    + (self[e4] * geometric_product[e15])
                    + (self[e3] * geometric_product[e31]),
                (self[e435] * geometric_product[e4235])
                    + (self[e321] * geometric_product[e31])
                    + (self[e125] * geometric_product[e41])
                    + (self[e4] * geometric_product[e25])
                    + (self[e1] * geometric_product[e12]),
                (self[e415] * geometric_product[e4315])
                    + (self[e321] * geometric_product[e12])
                    + (self[e235] * geometric_product[e42])
                    + (self[e4] * geometric_product[e35])
                    + (self[e2] * geometric_product[e23]),
                -(self[e425] * geometric_product[e42])
                    - (self[e435] * geometric_product[e43])
                    - (self[e1] * geometric_product[e41])
                    - (self[e2] * geometric_product[e42])
                    - (self[e3] * geometric_product[e43]),
            ]) + (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], geometric_product[e45]]) * self.group0().zyz().with_w(self[e4]))
                + (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e1234]]) * self.group0().xxy().with_w(self[e321]))
                - (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], geometric_product[e4315]]) * self.group1().xxy().with_w(self[e431]))
                - (Simd32x4::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45], geometric_product[e12]]) * self.group1().zyz().with_w(self[e412]))
                - (self.group2().zx().with_zw(self[e5], geometric_product[e31]) * geometric_product.group0().yzz().with_w(self[e431]))
                - (self.group3().ww().with_zw(self[e315], geometric_product[e4235]) * geometric_product.group0().xyx().with_w(self[e423]))
                - (self.group0().yzx() * geometric_product.group2().zxy()).with_w(self[e423] * geometric_product[e23])
                - (self.group3().yzx() * geometric_product.group1().zxy()).with_w(self[e415] * geometric_product[e41])
                - (geometric_product.group2().www() * self.group2().xyz()).with_w(self[e412] * geometric_product[e4125]),
        );
    }
}
impl GeometricQuotient<DualNum> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       16        0
    //    simd2        0        1        0
    //    simd3        2        3        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        7       23        0
    //  no simd       14       39        0
    fn geometric_quotient(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DualNum::from_groups(/* e5, e12345 */ Simd32x2::from(f32::powi(other[e12345], -2) * -1.0) * other.group0());
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            geometric_product.group0().yy().with_zw(geometric_product[e12345], geometric_product[e5]) * self.group0().with_w(self[e4]) * Simd32x4::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(self[e423] * geometric_product[e5]) - (self[e415] * geometric_product[e12345]),
                -(self[e431] * geometric_product[e5]) - (self[e425] * geometric_product[e12345]),
                -(self[e412] * geometric_product[e5]) - (self[e435] * geometric_product[e12345]),
                (self[e321] * geometric_product[e12345]) + (self[e4] * geometric_product[e5]),
            ]),
            // e15, e25, e35, e1234
            ((Simd32x3::from(geometric_product[e5]) * self.group3().xyz())
                - (Simd32x3::from(geometric_product[e5]) * self.group1().xyz())
                - (Simd32x3::from(geometric_product[e12345]) * self.group2().xyz()))
            .with_w(self[e4] * geometric_product[e12345] * -1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e1] * geometric_product[e12345],
                self[e2] * geometric_product[e12345],
                self[e3] * geometric_product[e12345],
                self[e5] * geometric_product[e12345] * -1.0,
            ]) + (Simd32x4::from(geometric_product[e5]) * self.group0().with_w(self[e321])),
        );
    }
}
impl GeometricQuotient<FlatPoint> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       19        0
    //    simd3        3        5        0
    //    simd4        8        9        0
    // Totals...
    // yes simd       17       33        0
    //  no simd       47       70        0
    fn geometric_quotient(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = FlatPoint::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(f32::powi(other[e45], -2) * -1.0) * Simd32x4::from([other[e15] * -1.0, other[e25] * -1.0, other[e35] * -1.0, other[e45] * -1.0]),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x3::from(geometric_product[e45]) * self.group0()).with_w(
                -(self[e423] * geometric_product[e15]) - (self[e431] * geometric_product[e25]) - (self[e412] * geometric_product[e35]) - (self[e321] * geometric_product[e45]),
            ),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e412] * geometric_product[e25]) + (self[e4] * geometric_product[e15]),
                (self[e423] * geometric_product[e35]) + (self[e4] * geometric_product[e25]),
                (self[e431] * geometric_product[e15]) + (self[e4] * geometric_product[e35]),
                self[e412] * geometric_product[e35] * -1.0,
            ]) - (geometric_product.group0().zxyx() * self.group0().yzx().with_w(self[e423]))
                - (geometric_product.group0().wwwy() * self.group3().xyz().with_w(self[e431])),
            // e235, e315, e125, e5
            (self.group3().yzxy() * geometric_product.group0().zxyy())
                + (geometric_product.group0().yzxx() * self.group1().zxy().with_w(self[e1]))
                + Simd32x3::from(0.0).with_w(self[e3] * geometric_product[e35])
                - (self.group1().yzxx() * geometric_product.group0().zxyx())
                - (self.group1().wwwy() * geometric_product.group0().xyzy())
                - (self.group3().zxyw() * geometric_product.group0().yzxw())
                - (geometric_product.group0().wwwz() * self.group2().xyz().with_w(self[e435])),
            // e1, e2, e3, e4
            ((Simd32x3::from(self[e4]) * geometric_product.group0().xyz()) + (self.group0().zxy() * geometric_product.group0().yzx())
                - (Simd32x3::from(geometric_product[e45]) * self.group1().xyz())
                - (self.group0().yzx() * geometric_product.group0().zxy()))
            .with_w(self[e4] * geometric_product[e45]),
        );
    }
}
impl GeometricQuotient<Flector> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       31        0
    //    simd3        0        4        0
    //    simd4       24       23        0
    // Totals...
    // yes simd       40       58        0
    //  no simd      112      135        0
    fn geometric_quotient(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let reverse = Flector::from_groups(
            // e15, e25, e35, e45
            other.group0() * Simd32x4::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group1(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            -f32::powi(other[e45], 2) - f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2),
        );
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], geometric_product[e3215]]) * self.group0().xxy().with_w(self[e4]))
                + (Simd32x4::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45], geometric_product[e4235]]) * self.group0().zyz().with_w(self[e1]))
                + (geometric_product.group1().xyzy() * self.group2().www().with_w(self[e2]))
                + Simd32x3::from(0.0).with_w(
                    (self[e3] * geometric_product[e4125]) - (self[e431] * geometric_product[e25]) - (self[e412] * geometric_product[e35]) - (self[e321] * geometric_product[e45]),
                )
                - (self.group0().yzx() * geometric_product.group1().zxy()).with_w(self[e423] * geometric_product[e15]),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e3] * geometric_product[e4315] * -1.0,
                self[e2] * geometric_product[e45] * -1.0,
                self[e3] * geometric_product[e45] * -1.0,
                0.0,
            ]) + (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], geometric_product[e4315]]) * self.group0().zyz().with_w(self[e425]))
                + (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e4235]]) * self.group0().xxy().with_w(self[e415]))
                + (geometric_product.group1().zxyw() * self.group3().yzx().with_w(self[e4]))
                + (self.group2().www() * geometric_product.group0().xyz()).with_w(self[e435] * geometric_product[e4125])
                - (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], geometric_product[e35]]) * self.group3().xxy().with_w(self[e412]))
                - (geometric_product.group0().zxyx() * self.group0().yzx().with_w(self[e423]))
                - (self.group1().www() * geometric_product.group1().xyz()).with_w(self[e431] * geometric_product[e25]),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e3] * geometric_product[e25]) - (self[e5] * geometric_product[e4235]),
                -(self[e2] * geometric_product[e3215]) - (self[e5] * geometric_product[e4315]),
                -(self[e3] * geometric_product[e3215]) - (self[e5] * geometric_product[e4125]),
                (self[e2] * geometric_product[e25]) + (self[e3] * geometric_product[e35]),
            ]) + (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], geometric_product[e4315]]) * self.group1().zyz().with_w(self[e315]))
                + (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e4235]]) * self.group1().xxy().with_w(self[e235]))
                + (self.group2().yzxz() * geometric_product.group1().zxyz())
                + (self.group3().yzxx() * geometric_product.group0().zxyx())
                - (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], geometric_product[e35]]) * self.group2().xxy().with_w(self[e435]))
                - (Simd32x4::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45], geometric_product[e3215]]) * self.group2().zyz().with_w(self[e321]))
                - (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e45]]) * self.group3().xxyw())
                - (self.group1().yzxx() * geometric_product.group0().zxyx())
                - (self.group1().wwwy() * geometric_product.group0().xyzy()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e412] * geometric_product[e25]) + (self[e425] * geometric_product[e4125]) + (self[e4] * geometric_product[e15]),
                (self[e431] * geometric_product[e3215]) + (self[e435] * geometric_product[e4235]) + (self[e4] * geometric_product[e25]),
                (self[e412] * geometric_product[e3215]) + (self[e415] * geometric_product[e4315]) + (self[e4] * geometric_product[e35]),
                0.0,
            ]) + (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e45]]) * self.group0().xxy().with_w(self[e4]))
                - (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], geometric_product[e4315]]) * self.group1().xxy().with_w(self[e431]))
                - (Simd32x4::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45], geometric_product[e4125]]) * self.group1().zyz().with_w(self[e412]))
                - (self.group0().yzx() * geometric_product.group0().zxy()).with_w(self[e423] * geometric_product[e4235]),
        );
    }
}
impl GeometricQuotient<Line> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       46        0
    //    simd3        0       12        0
    //    simd4       13        5        0
    // Totals...
    // yes simd       41       63        0
    //  no simd       80      102        0
    fn geometric_quotient(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let reverse = Line::from_groups(
            // e415, e425, e435
            other.group0() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group1() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(/* scalar */ -f32::powi(other[e415], 2) - f32::powi(other[e425], 2) - f32::powi(other[e435], 2));
        let geometric_product = Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group1(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(self[e412] * geometric_product[e425]) - (self[e4] * geometric_product[e415]),
                -(self[e423] * geometric_product[e435]) - (self[e4] * geometric_product[e425]),
                -(self[e431] * geometric_product[e415]) - (self[e4] * geometric_product[e435]),
                (self[e431] * geometric_product[e315])
                    + (self[e412] * geometric_product[e125])
                    + (self[e415] * geometric_product[e415])
                    + (self[e425] * geometric_product[e425])
                    + (self[e435] * geometric_product[e435]),
            ]) + (self.group0().yzx() * geometric_product.group0().zxy()).with_w(self[e423] * geometric_product[e235]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e431] * geometric_product[e125]) + (self[e425] * geometric_product[e435]),
                (self[e412] * geometric_product[e235]) + (self[e435] * geometric_product[e415]),
                (self[e423] * geometric_product[e315]) + (self[e415] * geometric_product[e425]),
                -(self[e1] * geometric_product[e415]) - (self[e2] * geometric_product[e425]) - (self[e3] * geometric_product[e435]),
            ]) - (geometric_product.group1() * self.group2().www()).with_w(self[e412] * geometric_product[e125])
                - (self.group0().zxy() * geometric_product.group1().yzx()).with_w(self[e423] * geometric_product[e235])
                - (geometric_product.group0().yzx() * self.group1().zxy()).with_w(self[e431] * geometric_product[e315]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e425] * geometric_product[e125])
                    - (self[e435] * geometric_product[e315])
                    - (self[e125] * geometric_product[e425])
                    - (self[e2] * geometric_product[e125])
                    - (self[e5] * geometric_product[e415]),
                (self[e1] * geometric_product[e125])
                    - (self[e415] * geometric_product[e125])
                    - (self[e235] * geometric_product[e435])
                    - (self[e3] * geometric_product[e235])
                    - (self[e5] * geometric_product[e425]),
                (self[e321] * geometric_product[e125])
                    - (self[e425] * geometric_product[e235])
                    - (self[e315] * geometric_product[e415])
                    - (self[e1] * geometric_product[e315])
                    - (self[e5] * geometric_product[e435]),
                0.0,
            ]) + (Simd32x4::from([self[e3], self[e321], self[e415], geometric_product[e435]]) * geometric_product.group1().yyy().with_w(self[e412]))
                + (self.group1().wz().with_zw(self[e2], geometric_product[e425]) * geometric_product.group1().xxx().with_w(self[e431]))
                + (geometric_product.group0().zxy() * self.group2().yzx()).with_w(self[e423] * geometric_product[e415]),
            // e4235, e4315, e4125, e3215
            (self.group1().ww().with_zw(self[e2], self[e315]) * geometric_product.group0().xyx().with_w(geometric_product[e425]))
                + (self.group3().zx().with_zw(self[e321], self[e125]) * geometric_product.group0().yzz().with_w(geometric_product[e435]))
                + Simd32x3::from(0.0).with_w((self[e425] * geometric_product[e315]) + (self[e435] * geometric_product[e125]) - (self[e3] * geometric_product[e125]))
                + (geometric_product.group1() * self.group2().www()).with_w(self[e415] * geometric_product[e235])
                + (self.group0().zxy() * geometric_product.group1().yzx()).with_w(self[e235] * geometric_product[e415])
                - (self.group3().yzxy() * geometric_product.group0().zxy().with_w(geometric_product[e315]))
                - (self.group0().yzx() * geometric_product.group1().zxy()).with_w(self[e1] * geometric_product[e235]),
        );
    }
}
impl GeometricQuotient<Motor> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       30       46        0
    //    simd3        0        9        0
    //    simd4       21       16        0
    // Totals...
    // yes simd       51       71        0
    //  no simd      114      137        0
    fn geometric_quotient(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let reverse = Motor::from_groups(
            // e415, e425, e435, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            -f32::powi(other[e415], 2) - f32::powi(other[e425], 2) - f32::powi(other[e435], 2) - f32::powi(other[e12345], 2),
        );
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e235, e315, e125, e5
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(self[e412] * geometric_product[e425]) - (self[e4] * geometric_product[e415]),
                -(self[e431] * geometric_product[e12345]) - (self[e4] * geometric_product[e425]),
                -(self[e412] * geometric_product[e12345]) - (self[e4] * geometric_product[e435]),
                (self[e431] * geometric_product[e315])
                    + (self[e412] * geometric_product[e125])
                    + (self[e415] * geometric_product[e415])
                    + (self[e425] * geometric_product[e425])
                    + (self[e435] * geometric_product[e435]),
            ]) + (self.group0().yzx() * geometric_product.group0().zxy()).with_w(self[e423] * geometric_product[e235])
                - (self.group0().xxy() * geometric_product.group0().wzx()).with_w(self[e4] * geometric_product[e5]),
            // e23, e31, e12, e45
            Simd32x3::from(0.0).with_w(self[e3] * geometric_product[e435] * -1.0)
                + (self.group0().yzx() * geometric_product.group1().zxy()).with_w(self[e321] * geometric_product[e12345])
                + (self.group1().yzx() * geometric_product.group0().zxy()).with_w(self[e4] * geometric_product[e5])
                - (geometric_product.group0().ywwx() * self.group1().zyz().with_w(self[e1]))
                - (geometric_product.group1().ywwy() * self.group0().zyz().with_w(self[e431]))
                - (geometric_product.group1().wzxx() * self.group0().xxy().with_w(self[e423]))
                - (self.group1().xxy() * geometric_product.group0().wzx()).with_w(self[e412] * geometric_product[e125])
                - (self.group2().www() * geometric_product.group1().xyz()).with_w(self[e2] * geometric_product[e425]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e1] * geometric_product[e5]) + (self[e3] * geometric_product[e315])
                    - (self[e435] * geometric_product[e315])
                    - (self[e235] * geometric_product[e12345])
                    - (self[e125] * geometric_product[e425])
                    - (self[e2] * geometric_product[e125])
                    - (self[e5] * geometric_product[e415]),
                (self[e1] * geometric_product[e125]) + (self[e2] * geometric_product[e5])
                    - (self[e425] * geometric_product[e5])
                    - (self[e235] * geometric_product[e435])
                    - (self[e315] * geometric_product[e12345])
                    - (self[e3] * geometric_product[e235])
                    - (self[e5] * geometric_product[e425]),
                (self[e2] * geometric_product[e235]) + (self[e3] * geometric_product[e5])
                    - (self[e435] * geometric_product[e5])
                    - (self[e315] * geometric_product[e415])
                    - (self[e125] * geometric_product[e12345])
                    - (self[e1] * geometric_product[e315])
                    - (self[e5] * geometric_product[e435]),
                0.0,
            ]) + (geometric_product.group0().zxyz() * self.group2().yzx().with_w(self[e412]))
                + (self.group1().yzx() * geometric_product.group1().zxy()).with_w(self[e423] * geometric_product[e415])
                + (self.group1().www() * geometric_product.group1().xyz()).with_w(self[e431] * geometric_product[e425])
                - (self.group1().xxy() * geometric_product.group1().wzx()).with_w(self[e4] * geometric_product[e12345]),
            // e4235, e4315, e4125, e3215
            (geometric_product.group1() * self.group2().www().with_w(self[e321]))
                + (self.group1().wwwz() * geometric_product.group0().xyz().with_w(geometric_product[e125]))
                + (geometric_product.group0().ywwy() * self.group3().zyz().with_w(self[e315]))
                + (geometric_product.group0().wzxx() * self.group3().xxy().with_w(self[e235]))
                + (geometric_product.group1().ywwy() * self.group0().zyz().with_w(self[e425]))
                + (geometric_product.group1().wzxx() * self.group0().xxy().with_w(self[e415]))
                + Simd32x3::from(0.0).with_w((self[e125] * geometric_product[e435]) - (self[e3] * geometric_product[e125]) - (self[e5] * geometric_product[e12345]))
                - (self.group3().yzxy() * geometric_product.group0().zxy().with_w(geometric_product[e315]))
                - (geometric_product.group1().zxyx() * self.group0().yzx().with_w(self[e1])),
        );
    }
}
impl GeometricQuotient<MultiVector> for AntiDipoleInversion {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       83      118        0
    //    simd2        6        7        0
    //    simd3       56       83        0
    //    simd4       52       43        0
    // Totals...
    // yes simd      197      251        0
    //  no simd      471      553        0
    fn geometric_quotient(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let reverse = MultiVector::from_groups(
            // scalar, e12345
            other.group0(),
            // e1, e2, e3, e4
            other.group1(),
            // e5
            other[e5],
            // e15, e25, e35, e45
            other.group3() * Simd32x4::from(-1.0),
            // e41, e42, e43
            other.group4() * Simd32x3::from(-1.0),
            // e23, e31, e12
            other.group5() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group6() * Simd32x4::from(-1.0),
            // e423, e431, e412
            other.group7() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group8() * Simd32x3::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group9(),
            // e1234
            other[e1234],
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e15] * other[e41])
                + 2.0 * (other[e25] * other[e42])
                + 2.0 * (other[e35] * other[e43])
                + 2.0 * (other[e3215] * other[e1234])
                + f32::powi(other[scalar], 2)
                + f32::powi(other[e1], 2)
                + f32::powi(other[e2], 2)
                + f32::powi(other[e3], 2)
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                + f32::powi(other[e321], 2)
                - f32::powi(other[e12345], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2)
                - 2.0 * (other[e4] * other[e5])
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(other_2[scalar]) * reverse.group0(),
            // e1, e2, e3, e4
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e5
            reverse[e5] * other_2[scalar],
            // e15, e25, e35, e45
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group4(),
            // e23, e31, e12
            Simd32x3::from(other_2[scalar]) * reverse.group5(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group6(),
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group7(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group8(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group9(),
            // e1234
            reverse[e1234] * other_2[scalar],
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e423] * geometric_product[e235])
                    + (self[e431] * geometric_product[e315])
                    + (self[e412] * geometric_product[e125])
                    + (self[e415] * geometric_product[e415])
                    + (self[e425] * geometric_product[e425])
                    + (self[e435] * geometric_product[e435])
                    + (self[e315] * geometric_product[e431])
                    + (self[e125] * geometric_product[e412])
                    - (self[e5] * geometric_product[e4]),
                (self[e5] * geometric_product[e1234])
                    - (self[e423] * geometric_product[e15])
                    - (self[e431] * geometric_product[e25])
                    - (self[e412] * geometric_product[e35])
                    - (self[e425] * geometric_product[e31])
                    - (self[e435] * geometric_product[e12])
                    - (self[e321] * geometric_product[e45])
                    - (self[e315] * geometric_product[e42])
                    - (self[e125] * geometric_product[e43]),
            ]) + (Simd32x2::from(self[e1]) * Simd32x2::from([geometric_product[e1], geometric_product[e4235]]))
                + (Simd32x2::from(self[e2]) * Simd32x2::from([geometric_product[e2], geometric_product[e4315]]))
                + (Simd32x2::from(self[e3]) * Simd32x2::from([geometric_product[e3], geometric_product[e4125]]))
                + (Simd32x2::from([geometric_product[e423], geometric_product[e3215]]) * self.group2().xw())
                - (Simd32x2::from([geometric_product[e5], geometric_product[e41]]) * self.group2().wx())
                - (Simd32x2::from([geometric_product[e321], geometric_product[e23]]) * self.group1().wx()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e425] * geometric_product[e4125])
                    + (self[e321] * geometric_product[e23])
                    + (self[e315] * geometric_product[e43])
                    + (self[e4] * geometric_product[e15])
                    + (self[e3] * geometric_product[e31]),
                (self[e435] * geometric_product[e4235])
                    + (self[e321] * geometric_product[e31])
                    + (self[e125] * geometric_product[e41])
                    + (self[e4] * geometric_product[e25])
                    + (self[e1] * geometric_product[e12]),
                (self[e415] * geometric_product[e4315])
                    + (self[e321] * geometric_product[e12])
                    + (self[e235] * geometric_product[e42])
                    + (self[e4] * geometric_product[e35])
                    + (self[e2] * geometric_product[e23]),
                -(self[e425] * geometric_product[e42])
                    - (self[e435] * geometric_product[e43])
                    - (self[e1] * geometric_product[e41])
                    - (self[e2] * geometric_product[e42])
                    - (self[e3] * geometric_product[e43]),
            ]) + (Simd32x4::from(geometric_product[scalar]) * self.group3().xyz().with_w(self[e4]))
                + (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], geometric_product[e45]]) * self.group0().zyz().with_w(self[e4]))
                + (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e1234]]) * self.group0().xxy().with_w(self[e321]))
                - (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], geometric_product[e12]]) * self.group1().xxy().with_w(self[e412]))
                - (Simd32x4::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45], geometric_product[e4125]]) * self.group1().zyz().with_w(self[e412]))
                - (self.group2().zx().with_zw(self[e5], geometric_product[e31]) * geometric_product.group4().yzz().with_w(self[e431]))
                - (self.group3().ww().with_zw(self[e315], geometric_product[e4235]) * geometric_product.group4().xyx().with_w(self[e423]))
                - (Simd32x3::from(geometric_product[e1234]) * self.group2().xyz()).with_w(self[e415] * geometric_product[e41])
                - (self.group0().yzx() * geometric_product.group3().zxy()).with_w(self[e423] * geometric_product[e23])
                - (geometric_product.group5().zxy() * self.group3().yzx()).with_w(self[e431] * geometric_product[e4315]),
            // e5
            (self[e235] * geometric_product[e4235])
                + (self[e315] * geometric_product[e4315])
                + (self[e125] * geometric_product[e4125])
                + (self[e1] * geometric_product[e15])
                + (self[e2] * geometric_product[e25])
                + (self[e3] * geometric_product[e35])
                + (self[e5] * geometric_product[scalar])
                - (self[e415] * geometric_product[e15])
                - (self[e425] * geometric_product[e25])
                - (self[e435] * geometric_product[e35])
                - (self[e321] * geometric_product[e3215])
                - (self[e235] * geometric_product[e23])
                - (self[e315] * geometric_product[e31])
                - (self[e125] * geometric_product[e12])
                - (self[e5] * geometric_product[e45]),
            // e15, e25, e35, e45
            Simd32x4::from([
                self[e1] * geometric_product[e5],
                self[e2] * geometric_product[e5],
                self[e3] * geometric_product[e5],
                self[e5] * geometric_product[e4] * -1.0,
            ]) + (Simd32x4::from([self[e425], self[e1], self[e321], self[e315]]) * geometric_product.group8().zzz().with_w(geometric_product[e431]))
                + (Simd32x4::from([self[e3], self[e321], self[e415], self[e235]]) * geometric_product.group8().yyy().with_w(geometric_product[e423]))
                + (self.group2().yzxw() * geometric_product.group6().zxy().with_w(geometric_product[e5]))
                + (self.group1().wz().with_zw(self[e2], self[e321]) * geometric_product.group8().xxx().with_w(geometric_product[e12345]))
                + (self.group2().yzx() * geometric_product.group1().zxy()).with_w(self[e125] * geometric_product[e412])
                - (Simd32x4::from([self[e435], self[e3], self[e425], geometric_product[e315]]) * geometric_product.group8().yxx().with_w(self[e431]))
                - (Simd32x4::from([self[e2], self[e415], self[e1], geometric_product[e125]]) * geometric_product.group8().zzy().with_w(self[e412]))
                - (Simd32x4::from([geometric_product[e2], geometric_product[e435], geometric_product[e415], geometric_product[e3]]) * self.group2().zxy().with_w(self[e435]))
                - (Simd32x4::from([geometric_product[e321], geometric_product[e3], geometric_product[e1], geometric_product[e2]]) * self.group2().xxy().with_w(self[e425]))
                - (self.group1().xyzx() * Simd32x3::from(geometric_product[e5]).with_w(geometric_product[e1]))
                - (self.group3().wwwy() * geometric_product.group1().xyz().with_w(geometric_product[e425]))
                - (self.group3().wwwz() * geometric_product.group6().xyzz())
                - (geometric_product.group6().ywwx() * self.group2().zyz().with_w(self[e1]))
                - (geometric_product.group0().yy().with_zw(geometric_product[e12345], self[e423]) * self.group2().xyz().with_w(geometric_product[e235])),
            // e41, e42, e43
            (Simd32x3::from(self[e423]) * Simd32x3::from([geometric_product[e321], geometric_product[e3], geometric_product[e425]]))
                + (Simd32x3::from(self[e431]) * Simd32x3::from([geometric_product[e435], geometric_product[e321], geometric_product[e1]]))
                + (Simd32x3::from(self[e412]) * Simd32x3::from([geometric_product[e2], geometric_product[e415], geometric_product[e321]]))
                + (Simd32x3::from(self[e4]) * geometric_product.group1().xyz())
                + (geometric_product.group7().zxy() * self.group1().yzx())
                + (geometric_product.group7().zxy() * self.group3().yzx())
                - (Simd32x3::from(self[e4]) * geometric_product.group6().xyz())
                - (Simd32x3::from(geometric_product[e12345]) * self.group0())
                - (Simd32x3::from(geometric_product[e4]) * self.group1().xyz())
                - (Simd32x3::from(geometric_product[e4]) * self.group3().xyz())
                - (Simd32x3::from([self[e435], self[e415], self[e2]]) * geometric_product.group7().yzx())
                - (Simd32x3::from([self[e3], self[e1], self[e321]]) * geometric_product.group7().yzz())
                - (Simd32x3::from([geometric_product[e3], geometric_product[e435], geometric_product[e2]]) * self.group0().yxx())
                - (Simd32x3::from([geometric_product[e425], geometric_product[e1], geometric_product[e415]]) * self.group0().zzy())
                - (geometric_product.group7().xyx() * self.group1().wwy()),
            // e23, e31, e12
            (self.group0().yzx() * geometric_product.group8().zxy())
                + (geometric_product.group7().zxy() * self.group2().yzx())
                + (self.group1().yzx() * geometric_product.group6().zxy())
                + (self.group3().yzx() * geometric_product.group1().zxy())
                - (Simd32x3::from(self[e321]) * geometric_product.group1().xyz())
                - (Simd32x3::from(self[e4]) * geometric_product.group8())
                - (Simd32x3::from(geometric_product[e12345]) * self.group1().xyz())
                - (Simd32x3::from(geometric_product[e4]) * self.group2().xyz())
                - (Simd32x3::from([self[e125], self[e235], self[e5]]) * geometric_product.group7().yzz())
                - (Simd32x3::from([self[e5], self[e5], self[e315]]) * geometric_product.group7().xyx())
                - (Simd32x3::from([geometric_product[e2], geometric_product[e321], geometric_product[e321]]) * self.group3().zyz())
                - (Simd32x3::from([geometric_product[e5], geometric_product[e125], geometric_product[e235]]) * self.group0().xxy())
                - (Simd32x3::from([geometric_product[e321], geometric_product[e3], geometric_product[e1]]) * self.group3().xxy())
                - (Simd32x3::from([geometric_product[e315], geometric_product[e5], geometric_product[e5]]) * self.group0().zyz())
                - (self.group1().zxy() * geometric_product.group6().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e2] * geometric_product[e4125],
                self[e3] * geometric_product[e4235],
                self[e1] * geometric_product[e4315],
                self[e5] * geometric_product[e1234] * -1.0,
            ]) + (Simd32x4::from(self[e4]) * geometric_product.group3().xyz().with_w(geometric_product[e3215]))
                + (Simd32x4::from(geometric_product[scalar]) * self.group1())
                + (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], self[e315]]) * self.group0().zyz().with_w(geometric_product[e42]))
                + (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], self[e235]]) * self.group0().xxy().with_w(geometric_product[e41]))
                + (self.group2().zx().with_zw(self[e5], geometric_product[e4235]) * geometric_product.group4().yzz().with_w(self[e415]))
                + (self.group3().ww().with_zw(self[e315], self[e125]) * geometric_product.group4().xyx().with_w(geometric_product[e43]))
                + (Simd32x3::from(geometric_product[e1234]) * self.group2().xyz()).with_w(self[e435] * geometric_product[e4125])
                + (geometric_product.group5().yzx() * self.group1().zxy()).with_w(self[e425] * geometric_product[e4315])
                - (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], self[e2]]) * self.group3().xxy().with_w(geometric_product[e31]))
                - (Simd32x4::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45], self[e3]]) * self.group3().zyz().with_w(geometric_product[e12]))
                - (geometric_product.group3().zxyx() * self.group0().yzx().with_w(self[e423]))
                - (geometric_product.group4().zxy() * self.group2().yzx()).with_w(self[e431] * geometric_product[e25])
                - (geometric_product.group5().zxy() * self.group1().yzx()).with_w(self[e412] * geometric_product[e35])
                - (self.group1().www() * geometric_product.group9().xyz()).with_w(self[e1] * geometric_product[e23]),
            // e423, e431, e412
            (Simd32x3::from(self[e4]) * geometric_product.group5())
                + (Simd32x3::from(self[e4]) * geometric_product.group9().xyz())
                + (Simd32x3::from(geometric_product[scalar]) * self.group0())
                + (Simd32x3::from(geometric_product[e1234]) * self.group1().xyz())
                + (Simd32x3::from(geometric_product[e1234]) * self.group3().xyz())
                + (Simd32x3::from([self[e435], self[e415], self[e2]]) * geometric_product.group4().yzx())
                + (Simd32x3::from([self[e3], self[e1], self[e321]]) * geometric_product.group4().yzz())
                + (Simd32x3::from([geometric_product[e45], geometric_product[e12], geometric_product[e23]]) * self.group0().xxy())
                + (Simd32x3::from([geometric_product[e31], geometric_product[e4125], geometric_product[e4235]]) * self.group0().zxy())
                + (Simd32x3::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45]]) * self.group0().zyz())
                + (geometric_product.group4().xyx() * self.group1().wwy())
                - (self.group0().yzx() * geometric_product.group5().zxy())
                - (self.group0().yzx() * geometric_product.group9().zxy())
                - (geometric_product.group4().zxy() * self.group1().yzx())
                - (geometric_product.group4().zxy() * self.group3().yzx()),
            // e235, e315, e125
            (Simd32x3::from(geometric_product[scalar]) * self.group2().xyz())
                + (Simd32x3::from([self[e125], self[e235], self[e5]]) * geometric_product.group5().yzz())
                + (Simd32x3::from([self[e5], self[e5], self[e315]]) * geometric_product.group5().xyx())
                + (Simd32x3::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215]]) * self.group1().zyz())
                + (Simd32x3::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15]]) * self.group1().xxy())
                + (self.group2().yzx() * geometric_product.group9().zxy())
                + (self.group3().yzx() * geometric_product.group3().zxy())
                - (Simd32x3::from(self[e321]) * geometric_product.group3().xyz())
                - (Simd32x3::from(self[e5]) * geometric_product.group9().xyz())
                - (Simd32x3::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215]]) * self.group3().zyz())
                - (Simd32x3::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235]]) * self.group2().xxy())
                - (Simd32x3::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45]]) * self.group2().zyz())
                - (Simd32x3::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15]]) * self.group3().xxy())
                - (geometric_product.group5().zxy() * self.group2().yzx())
                - (self.group1().yzx() * geometric_product.group3().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e2] * geometric_product[e435] * -1.0,
                self[e3] * geometric_product[e415] * -1.0,
                self[e1] * geometric_product[e425] * -1.0,
                self[e125] * geometric_product[e435],
            ]) + (Simd32x4::from([geometric_product[e2], geometric_product[e321], geometric_product[e321], geometric_product[e2]]) * self.group1().zyz().with_w(self[e315]))
                + (Simd32x4::from([geometric_product[e5], geometric_product[e125], geometric_product[e235], self[e425]]) * self.group0().xxy().with_w(geometric_product[e315]))
                + (Simd32x4::from([geometric_product[e321], geometric_product[e3], geometric_product[e1], geometric_product[e415]]) * self.group1().xxy().with_w(self[e235]))
                + (Simd32x4::from([geometric_product[e315], geometric_product[e5], geometric_product[e5], self[e435]]) * self.group0().zyz().with_w(geometric_product[e125]))
                + (geometric_product.group6().xyzy() * self.group1().www().with_w(self[e315]))
                + (geometric_product.group0().yy().with_zw(geometric_product[e12345], geometric_product[e235]) * self.group3().xyz().with_w(self[e415]))
                + (geometric_product.group8() * self.group2().www()).with_w(self[e235] * geometric_product[e1])
                + (geometric_product.group7().zxy() * self.group2().yzx()).with_w(self[e321] * geometric_product[e5])
                + (self.group3().zxy() * geometric_product.group6().yzx()).with_w(self[e125] * geometric_product[e3])
                - (self.group2().zx().with_zw(self[e5], self[e2]) * geometric_product.group7().yzz().with_w(geometric_product[e315]))
                - (self.group3().ww().with_zw(self[e315], self[e1]) * geometric_product.group7().xyx().with_w(geometric_product[e235]))
                - (self.group0().yzx() * geometric_product.group8().zxy()).with_w(self[e5] * geometric_product[e12345])
                - (self.group1().yzx() * geometric_product.group1().zxy()).with_w(self[e3] * geometric_product[e125])
                - (geometric_product.group1().www() * self.group2().xyz()).with_w(self[e5] * geometric_product[e321]),
            // e1234
            (self[e423] * geometric_product[e415])
                + (self[e431] * geometric_product[e425])
                + (self[e412] * geometric_product[e435])
                + (self[e415] * geometric_product[e423])
                + (self[e425] * geometric_product[e431])
                + (self[e435] * geometric_product[e412])
                + (self[e4] * geometric_product[e321])
                + (self[e1] * geometric_product[e423])
                + (self[e2] * geometric_product[e431])
                + (self[e3] * geometric_product[e412])
                - (self[e423] * geometric_product[e1])
                - (self[e431] * geometric_product[e2])
                - (self[e412] * geometric_product[e3])
                - (self[e321] * geometric_product[e4])
                - (self[e4] * geometric_product[e12345]),
        );
    }
}
impl GeometricQuotient<Plane> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       31        0
    //    simd4        8        9        0
    // Totals...
    // yes simd       22       40        0
    //  no simd       46       67        0
    fn geometric_quotient(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Plane::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(-f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2)) * other.group0(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e431] * geometric_product[e4125] * -1.0,
                self[e412] * geometric_product[e4235] * -1.0,
                self[e423] * geometric_product[e4315] * -1.0,
                (self[e2] * geometric_product[e4315]) + (self[e3] * geometric_product[e4125]),
            ]) + (geometric_product.group0().xyzx() * self.group2().www().with_w(self[e1]))
                + (geometric_product.group0().yzxw() * self.group0().zxy().with_w(self[e4])),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(self[e321] * geometric_product[e4235]) - (self[e3] * geometric_product[e4315]),
                -(self[e321] * geometric_product[e4315]) - (self[e1] * geometric_product[e4125]),
                -(self[e321] * geometric_product[e4125]) - (self[e2] * geometric_product[e4235]),
                (self[e435] * geometric_product[e4125]) + (self[e4] * geometric_product[e3215]),
            ]) + (geometric_product.group0().zxyy() * self.group3().yzx().with_w(self[e425]))
                + (geometric_product.group0().wwwx() * self.group0().with_w(self[e415])),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e1] * geometric_product[e3215]) - (self[e5] * geometric_product[e4235]),
                -(self[e2] * geometric_product[e3215]) - (self[e5] * geometric_product[e4315]),
                -(self[e3] * geometric_product[e3215]) - (self[e5] * geometric_product[e4125]),
                self[e125] * geometric_product[e4125],
            ]) + (self.group2().yzxy() * geometric_product.group0().zxyy())
                + (geometric_product.group0().wwwx() * self.group1().xyz().with_w(self[e235]))
                - (geometric_product.group0().yzxw() * self.group2().zxy().with_w(self[e321])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e423] * geometric_product[e3215]) + (self[e425] * geometric_product[e4125]),
                (self[e431] * geometric_product[e3215]) + (self[e435] * geometric_product[e4235]),
                (self[e412] * geometric_product[e3215]) + (self[e415] * geometric_product[e4315]),
                -(self[e431] * geometric_product[e4315]) - (self[e412] * geometric_product[e4125]),
            ]) - (geometric_product.group0().yzxx() * self.group1().zxy().with_w(self[e423])),
        );
    }
}
impl GeometricQuotient<RoundPoint> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       30        0
    //    simd3        0        4        0
    //    simd4       13       11        0
    // Totals...
    // yes simd       23       45        0
    //  no simd       62       86        0
    fn geometric_quotient(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2) - 2.0 * (other[e4] * other[e5]),
        );
        let geometric_product = RoundPoint::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from(other_2[scalar]) * other.group0(), /* e5 */ other[e5] * other_2[scalar]);
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e1] * geometric_product[e4] * -1.0,
                self[e2] * geometric_product[e4] * -1.0,
                self[e3] * geometric_product[e4] * -1.0,
                self[e3] * geometric_product[e3],
            ]) + (geometric_product.group0().xyzy() * self.group2().www().with_w(self[e2]))
                + (geometric_product.group0().yzxx() * self.group0().zxy().with_w(self[e1]))
                - (Simd32x4::from(geometric_product[e4]) * self.group1().xyz().with_w(self[e5]))
                - (self.group0().yzx() * geometric_product.group0().zxy()).with_w(self[e4] * geometric_product[e5]),
            // e23, e31, e12, e45
            (self.group3().yzx() * geometric_product.group0().zxy()).with_w(self[e4] * geometric_product[e5])
                - (self.group1().wwwy() * geometric_product.group0().xyzy())
                - (self.group3().zxyw() * geometric_product.group0().yzxw())
                - (geometric_product.group0().wwwz() * self.group2().xyz().with_w(self[e435]))
                - (Simd32x3::from(geometric_product[e5]) * self.group0()).with_w(self[e415] * geometric_product[e1]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e315] * geometric_product[e3]) + (self[e1] * geometric_product[e5]),
                (self[e125] * geometric_product[e1]) + (self[e2] * geometric_product[e5]),
                (self[e235] * geometric_product[e2]) + (self[e3] * geometric_product[e5]),
                self[e321] * geometric_product[e4] * -1.0,
            ]) - (geometric_product.group0().xyzz() * self.group3().www().with_w(self[e412]))
                - (geometric_product.group0().yzxy() * self.group2().zxy().with_w(self[e431]))
                - (Simd32x3::from(geometric_product[e5]) * self.group1().xyz()).with_w(self[e423] * geometric_product[e1]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(self[e425] * geometric_product[e3]) - (self[e235] * geometric_product[e4]),
                -(self[e435] * geometric_product[e1]) - (self[e315] * geometric_product[e4]),
                -(self[e415] * geometric_product[e2]) - (self[e125] * geometric_product[e4]),
                (self[e315] * geometric_product[e2]) + (self[e125] * geometric_product[e3]),
            ]) + (Simd32x4::from(geometric_product[e5]) * self.group0().with_w(self[e321]))
                + (geometric_product.group0().yzxx() * self.group1().zxy().with_w(self[e235])),
        );
    }
}
impl GeometricQuotient<Scalar> for AntiDipoleInversion {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        0        1
    //    simd3        0        1        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        0        4        1
    //  no simd        0       15        1
    fn geometric_quotient(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Scalar::from_groups(/* scalar */ 1.0 / other[scalar]);
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(geometric_product[scalar]) * self.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(geometric_product[scalar]) * self.group1(),
            // e235, e315, e125, e4
            Simd32x4::from(geometric_product[scalar]) * self.group2(),
            // e1, e2, e3, e5
            Simd32x4::from(geometric_product[scalar]) * self.group3(),
        );
    }
}
impl GeometricQuotient<Sphere> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       34        0
    //    simd3        0        5        0
    //    simd4       14       10        0
    // Totals...
    // yes simd       20       49        0
    //  no simd       62       89        0
    fn geometric_quotient(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e3215] * other[e1234]) - f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2),
        );
        let geometric_product = Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * other.group0(),
            // e1234
            other_2[scalar] * other[e1234],
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e431] * geometric_product[e4125] * -1.0,
                self[e412] * geometric_product[e4235] * -1.0,
                self[e423] * geometric_product[e4315] * -1.0,
                self[e5] * geometric_product[e1234],
            ]) + (self.group3().xyzz() * Simd32x3::from(geometric_product[e1234]).with_w(geometric_product[e4125]))
                + (geometric_product.group0().xyzy() * self.group2().www().with_w(self[e2]))
                + (geometric_product.group0().yzxw() * self.group0().zxy().with_w(self[e4]))
                + (Simd32x3::from(geometric_product[e1234]) * self.group1().xyz()).with_w(self[e1] * geometric_product[e4235]),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e3] * geometric_product[e4315] * -1.0,
                self[e1] * geometric_product[e4125] * -1.0,
                self[e2] * geometric_product[e4235] * -1.0,
                self[e4] * geometric_product[e3215],
            ]) + (geometric_product.group0().zxyz() * self.group3().yzx().with_w(self[e435]))
                + (geometric_product.group0().wwwx() * self.group0().with_w(self[e415]))
                + (Simd32x3::from(geometric_product[e1234]) * self.group2().xyz()).with_w(self[e425] * geometric_product[e4315])
                - (self.group1().www() * geometric_product.group0().xyz()).with_w(self[e5] * geometric_product[e1234]),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e1] * geometric_product[e3215]) - (self[e5] * geometric_product[e4235]),
                -(self[e2] * geometric_product[e3215]) - (self[e5] * geometric_product[e4315]),
                -(self[e3] * geometric_product[e3215]) - (self[e5] * geometric_product[e4125]),
                self[e125] * geometric_product[e4125],
            ]) + (self.group2().yzxy() * geometric_product.group0().zxyy())
                + (geometric_product.group0().wwwx() * self.group1().xyz().with_w(self[e235]))
                - (geometric_product.group0().yzxw() * self.group2().zxy().with_w(self[e321])),
            // e1, e2, e3, e4
            Simd32x4::from([
                self[e425] * geometric_product[e4125],
                self[e435] * geometric_product[e4235],
                self[e415] * geometric_product[e4315],
                self[e412] * geometric_product[e4125] * -1.0,
            ]) + (self.group0() * geometric_product.group0().www()).with_w(self[e321] * geometric_product[e1234])
                - (geometric_product.group0().yzxx() * self.group1().zxy().with_w(self[e423]))
                - (Simd32x3::from(geometric_product[e1234]) * self.group2().xyz()).with_w(self[e431] * geometric_product[e4315]),
        );
    }
}
impl GeometricQuotient<VersorEven> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       43       76        0
    //    simd3        0       14        0
    //    simd4       48       41        0
    // Totals...
    // yes simd       91      131        0
    //  no simd      235      282        0
    fn geometric_quotient(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let reverse = VersorEven::from_groups(
            // e423, e431, e412, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e5
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e4
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)
                - f32::powi(other[e12345], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125])
                - 2.0 * (other[e5] * other[e4]),
        );
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e5
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e1, e2, e3, e4
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(self[e415] * geometric_product[e4])
                    - (self[e435] * geometric_product[e431])
                    - (self[e321] * geometric_product[e423])
                    - (self[e4] * geometric_product[e415])
                    - (self[e1] * geometric_product[e4])
                    - (self[e3] * geometric_product[e431]),
                -(self[e415] * geometric_product[e412])
                    - (self[e425] * geometric_product[e4])
                    - (self[e321] * geometric_product[e431])
                    - (self[e4] * geometric_product[e425])
                    - (self[e1] * geometric_product[e412])
                    - (self[e2] * geometric_product[e4]),
                -(self[e425] * geometric_product[e423])
                    - (self[e435] * geometric_product[e4])
                    - (self[e321] * geometric_product[e412])
                    - (self[e4] * geometric_product[e435])
                    - (self[e2] * geometric_product[e423])
                    - (self[e3] * geometric_product[e4]),
                (self[e235] * geometric_product[e423])
                    + (self[e315] * geometric_product[e431])
                    + (self[e125] * geometric_product[e412])
                    + (self[e1] * geometric_product[e1])
                    + (self[e2] * geometric_product[e2])
                    + (self[e3] * geometric_product[e3]),
            ]) + (Simd32x4::from(self[e423]) * Simd32x4::from([geometric_product[e321], geometric_product[e3], geometric_product[e425], geometric_product[e235]]))
                + (Simd32x4::from(self[e431]) * geometric_product.group1().zw().with_zw(geometric_product[e1], geometric_product[e315]))
                + (Simd32x4::from(self[e412]) * Simd32x4::from([geometric_product[e2], geometric_product[e415], geometric_product[e321], geometric_product[e125]]))
                + (self.group1().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e415]))
                + (self.group2().www() * geometric_product.group3().xyz()).with_w(self[e425] * geometric_product[e425])
                + (self.group3().yzx() * geometric_product.group0().zxy()).with_w(self[e435] * geometric_product[e435])
                - (Simd32x4::from([geometric_product[e12345], geometric_product[e435], geometric_product[e2], geometric_product[e321]]) * self.group0().xxx().with_w(self[e321]))
                - (Simd32x4::from([geometric_product[e425], geometric_product[e1], geometric_product[e12345], geometric_product[e4]]) * self.group0().zzz().with_w(self[e5]))
                - (Simd32x4::from([geometric_product[e3], geometric_product[e12345], geometric_product[e415], geometric_product[e5]]) * self.group0().yyy().with_w(self[e4])),
            // e23, e31, e12, e45
            Simd32x4::from([
                self[e5] * geometric_product[e423] * -1.0,
                self[e5] * geometric_product[e431] * -1.0,
                self[e5] * geometric_product[e412] * -1.0,
                self[e4] * geometric_product[e5],
            ]) + (self.group2().yzxy() * geometric_product.group0().zxyy())
                + (self.group0().yzx() * geometric_product.group2().zxy()).with_w(self[e321] * geometric_product[e12345])
                + (self.group1().yzx() * geometric_product.group1().zxy()).with_w(self[e235] * geometric_product[e423])
                + (self.group3().yzx() * geometric_product.group3().zxy()).with_w(self[e125] * geometric_product[e412])
                - (Simd32x4::from([geometric_product[e431], geometric_product[e4], geometric_product[e4], geometric_product[e415]]) * self.group2().zyz().with_w(self[e1]))
                - (Simd32x4::from([geometric_product[e12345], geometric_product[e435], geometric_product[e415], geometric_product[e125]]) * self.group1().xxy().with_w(self[e412]))
                - (Simd32x4::from([geometric_product[e425], geometric_product[e12345], geometric_product[e12345], geometric_product[e1]]) * self.group1().zyzx())
                - (Simd32x4::from([geometric_product[e321], geometric_product[e3], geometric_product[e1], geometric_product[e435]]) * self.group3().xxyz())
                - (Simd32x4::from([geometric_product[e2], geometric_product[e321], geometric_product[e321], geometric_product[e4]]) * self.group3().zyzw())
                - (Simd32x4::from([geometric_product[e4], geometric_product[e412], geometric_product[e423], geometric_product[e3]]) * self.group2().xxy().with_w(self[e435]))
                - (self.group1().wwwy() * geometric_product.group3().xyzy())
                - (geometric_product.group2().ywwy() * self.group0().zyz().with_w(self[e431]))
                - (geometric_product.group2().wzxx() * self.group0().xxy().with_w(self[e423]))
                - (self.group2().www() * geometric_product.group2().xyz()).with_w(self[e2] * geometric_product[e425]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(self[e125] * geometric_product[e2]) - (self[e2] * geometric_product[e125]) - (self[e5] * geometric_product[e415]) - (self[e5] * geometric_product[e1]),
                -(self[e315] * geometric_product[e321]) - (self[e3] * geometric_product[e235]) - (self[e5] * geometric_product[e425]) - (self[e5] * geometric_product[e2]),
                -(self[e125] * geometric_product[e321]) - (self[e1] * geometric_product[e315]) - (self[e5] * geometric_product[e435]) - (self[e5] * geometric_product[e3]),
                (self[e4] * geometric_product[e321]) + (self[e1] * geometric_product[e423]) + (self[e2] * geometric_product[e431]) + (self[e3] * geometric_product[e412]),
            ]) + (geometric_product.group1().zxyz() * self.group2().yzx().with_w(self[e412]))
                + (self.group1().yzx() * geometric_product.group2().zxy()).with_w(self[e423] * geometric_product[e415])
                + (self.group1().www() * geometric_product.group2().xyz()).with_w(self[e431] * geometric_product[e425])
                + (self.group2().yzx() * geometric_product.group3().zxy()).with_w(self[e415] * geometric_product[e423])
                + (self.group3().xxy() * geometric_product.group2().wzx()).with_w(self[e425] * geometric_product[e431])
                + (self.group3().zyz() * geometric_product.group2().yww()).with_w(self[e435] * geometric_product[e412])
                - (Simd32x4::from([geometric_product[e12345], geometric_product[e435], geometric_product[e415], geometric_product[e3]]) * self.group2().xxy().with_w(self[e412]))
                - (Simd32x4::from([geometric_product[e425], geometric_product[e12345], geometric_product[e12345], geometric_product[e12345]]) * self.group2().zyzw())
                - (Simd32x4::from([geometric_product[e321], geometric_product[e3], geometric_product[e1], geometric_product[e4]]) * self.group2().xxy().with_w(self[e321]))
                - (self.group1().xxy() * geometric_product.group2().wzx()).with_w(self[e423] * geometric_product[e1])
                - (self.group1().zyz() * geometric_product.group2().yww()).with_w(self[e431] * geometric_product[e2]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e5] * geometric_product[e423] * -1.0,
                self[e5] * geometric_product[e431] * -1.0,
                self[e5] * geometric_product[e412] * -1.0,
                self[e125] * geometric_product[e3],
            ]) + (Simd32x4::from([geometric_product[e12345], geometric_product[e435], geometric_product[e415], geometric_product[e2]]) * self.group3().xxy().with_w(self[e315]))
                + (Simd32x4::from([geometric_product[e425], geometric_product[e12345], geometric_product[e12345], geometric_product[e435]])
                    * self.group3().zyz().with_w(self[e125]))
                + (Simd32x4::from([geometric_product[e321], geometric_product[e3], geometric_product[e1], geometric_product[e125]]) * self.group1().xxyz())
                + (Simd32x4::from([geometric_product[e2], geometric_product[e321], geometric_product[e321], geometric_product[e5]]) * self.group1().zyzw())
                + (self.group2().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e1]))
                + (self.group2().wwwy() * geometric_product.group2().xyz().with_w(geometric_product[e425]))
                + (geometric_product.group1().xyzx() * self.group1().www().with_w(self[e235]))
                + (geometric_product.group2().ywwy() * self.group0().zyz().with_w(self[e425]))
                + (geometric_product.group2().wzxx() * self.group0().xxy().with_w(self[e415]))
                - (Simd32x4::from([geometric_product[e431], geometric_product[e4], geometric_product[e4], geometric_product[e12345]]) * self.group2().zyz().with_w(self[e5]))
                - (Simd32x4::from([geometric_product[e4], geometric_product[e412], geometric_product[e423], geometric_product[e125]]) * self.group2().xxy().with_w(self[e3]))
                - (self.group3().yzxw() * geometric_product.group1().zxyw())
                - (geometric_product.group2().zxyx() * self.group0().yzx().with_w(self[e1]))
                - (self.group1().yzx() * geometric_product.group3().zxy()).with_w(self[e2] * geometric_product[e315]),
        );
    }
}
impl GeometricQuotient<VersorOdd> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       47       67        0
    //    simd3        0       10        0
    //    simd4       47       45        0
    // Totals...
    // yes simd       94      122        0
    //  no simd      235      277        0
    fn geometric_quotient(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let reverse = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + 2.0 * (other[e1234] * other[e3215])
                + f32::powi(other[scalar], 2)
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2),
        );
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e435] * geometric_product[e42])
                    + (self[e321] * geometric_product[e41])
                    + (self[e4] * geometric_product[e23])
                    + (self[e4] * geometric_product[e4235])
                    + (self[e1] * geometric_product[e1234])
                    + (self[e3] * geometric_product[e42]),
                (self[e425] * geometric_product[e1234])
                    + (self[e321] * geometric_product[e42])
                    + (self[e4] * geometric_product[e31])
                    + (self[e4] * geometric_product[e4315])
                    + (self[e1] * geometric_product[e43])
                    + (self[e2] * geometric_product[e1234]),
                (self[e435] * geometric_product[e1234])
                    + (self[e321] * geometric_product[e43])
                    + (self[e4] * geometric_product[e12])
                    + (self[e4] * geometric_product[e4125])
                    + (self[e2] * geometric_product[e41])
                    + (self[e3] * geometric_product[e1234]),
                -(self[e425] * geometric_product[e31])
                    - (self[e435] * geometric_product[e12])
                    - (self[e321] * geometric_product[e45])
                    - (self[e235] * geometric_product[e41])
                    - (self[e315] * geometric_product[e42])
                    - (self[e125] * geometric_product[e43]),
            ]) + (Simd32x4::from([geometric_product[scalar], geometric_product[e12], geometric_product[e23], geometric_product[e3215]]) * self.group0().xxy().with_w(self[e4]))
                + (Simd32x4::from([geometric_product[e31], geometric_product[scalar], geometric_product[scalar], geometric_product[e4315]]) * self.group0().zyz().with_w(self[e2]))
                + (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], geometric_product[e4235]]) * self.group0().xxy().with_w(self[e1]))
                + (Simd32x4::from([geometric_product[e1234], geometric_product[e43], geometric_product[e41], geometric_product[e1234]]) * self.group1().xxy().with_w(self[e5]))
                + (Simd32x4::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45], geometric_product[e4125]]) * self.group0().zyz().with_w(self[e3]))
                - (self.group0().yzx() * geometric_product.group1().zxy()).with_w(self[e423] * geometric_product[e15])
                - (self.group0().yzx() * geometric_product.group3().zxy()).with_w(self[e431] * geometric_product[e25])
                - (self.group1().yzx() * geometric_product.group0().zxy()).with_w(self[e412] * geometric_product[e35])
                - (self.group3().yzx() * geometric_product.group0().zxy()).with_w(self[e415] * geometric_product[e23]),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e5] * geometric_product[e41],
                self[e5] * geometric_product[e42],
                self[e5] * geometric_product[e43],
                self[e5] * geometric_product[e1234] * -1.0,
            ]) + (Simd32x4::from([geometric_product[e42], geometric_product[e1234], geometric_product[e1234], geometric_product[e42]]) * self.group2().zyzy())
                + (Simd32x4::from([geometric_product[scalar], geometric_product[e12], geometric_product[e23], geometric_product[e4125]]) * self.group1().xxyz())
                + (Simd32x4::from([geometric_product[e31], geometric_product[scalar], geometric_product[scalar], geometric_product[scalar]]) * self.group1().zyzw())
                + (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], geometric_product[e4315]]) * self.group0().zyz().with_w(self[e425]))
                + (Simd32x4::from([geometric_product[e1234], geometric_product[e43], geometric_product[e41], geometric_product[e41]]) * self.group2().xxyx())
                + (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e4235]]) * self.group0().xxy().with_w(self[e415]))
                + (self.group2().wwwz() * geometric_product.group2().xyz().with_w(geometric_product[e43]))
                + (geometric_product.group3().zxyw() * self.group3().yzx().with_w(self[e4]))
                - (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], geometric_product[e31]]) * self.group3().xxyy())
                - (Simd32x4::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45], geometric_product[e12]]) * self.group3().zyzz())
                - (geometric_product.group2().zxyx() * self.group0().yzx().with_w(self[e423]))
                - (self.group1().yzx() * geometric_product.group1().zxy()).with_w(self[e431] * geometric_product[e25])
                - (self.group1().www() * geometric_product.group3().xyz()).with_w(self[e412] * geometric_product[e35])
                - (self.group2().yzx() * geometric_product.group0().zxy()).with_w(self[e1] * geometric_product[e23]),
            // e235, e315, e125, e5
            (Simd32x4::from(self[e5]) * geometric_product.group1().xyz().with_w(geometric_product[scalar]))
                + (Simd32x4::from([geometric_product[scalar], geometric_product[e12], geometric_product[e4315], geometric_product[e4125]]) * self.group2().xxxz())
                + (Simd32x4::from([geometric_product[e31], geometric_product[e4235], geometric_product[scalar], geometric_product[e25]]) * self.group2().zzz().with_w(self[e2]))
                + (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], geometric_product[e4315]]) * self.group1().zyz().with_w(self[e315]))
                + (Simd32x4::from([geometric_product[e4125], geometric_product[scalar], geometric_product[e23], geometric_product[e15]]) * self.group2().yyy().with_w(self[e1]))
                + (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e4235]]) * self.group1().xxy().with_w(self[e235]))
                + (self.group3().yzxz() * geometric_product.group2().zxyz())
                - (Simd32x4::from(self[e5]) * geometric_product.group3().xyz().with_w(geometric_product[e45]))
                - (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e31], geometric_product[e35]]) * self.group2().xxx().with_w(self[e435]))
                - (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], geometric_product[e12]]) * self.group3().zyz().with_w(self[e125]))
                - (Simd32x4::from([geometric_product[e4315], geometric_product[e23], geometric_product[e45], geometric_product[e23]]) * self.group2().zzzx())
                - (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e31]]) * self.group3().xxy().with_w(self[e315]))
                - (self.group1().yzxx() * geometric_product.group2().zxyx())
                - (self.group1().wwwy() * geometric_product.group2().xyzy())
                - (geometric_product.group1().zw().with_zw(geometric_product[e4235], geometric_product[e3215]) * self.group2().yyy().with_w(self[e321])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e321] * geometric_product[e23])
                    + (self[e315] * geometric_product[e43])
                    + (self[e4] * geometric_product[e15])
                    + (self[e1] * geometric_product[scalar])
                    + (self[e3] * geometric_product[e31]),
                (self[e321] * geometric_product[e31])
                    + (self[e125] * geometric_product[e41])
                    + (self[e4] * geometric_product[e25])
                    + (self[e1] * geometric_product[e12])
                    + (self[e2] * geometric_product[scalar]),
                (self[e321] * geometric_product[e12])
                    + (self[e235] * geometric_product[e42])
                    + (self[e4] * geometric_product[e35])
                    + (self[e2] * geometric_product[e23])
                    + (self[e3] * geometric_product[scalar]),
                -(self[e425] * geometric_product[e42])
                    - (self[e435] * geometric_product[e43])
                    - (self[e1] * geometric_product[e41])
                    - (self[e2] * geometric_product[e42])
                    - (self[e3] * geometric_product[e43]),
            ]) + (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], geometric_product[scalar]]) * self.group0().zyz().with_w(self[e4]))
                + (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e1234]]) * self.group0().xxy().with_w(self[e321]))
                + (self.group1().yzx() * geometric_product.group3().zxy()).with_w(self[e4] * geometric_product[e45])
                - (Simd32x4::from([geometric_product[e42], geometric_product[e1234], geometric_product[e1234], geometric_product[e12]]) * self.group2().zyz().with_w(self[e412]))
                - (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], geometric_product[e4235]]) * self.group1().xxy().with_w(self[e423]))
                - (Simd32x4::from([geometric_product[e1234], geometric_product[e43], geometric_product[e41], geometric_product[e4315]]) * self.group2().xxy().with_w(self[e431]))
                - (Simd32x4::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45], geometric_product[e31]]) * self.group1().zyz().with_w(self[e431]))
                - (geometric_product.group0().xyzx() * self.group3().www().with_w(self[e415]))
                - (self.group0().yzx() * geometric_product.group2().zxy()).with_w(self[e423] * geometric_product[e23])
                - (self.group3().yzx() * geometric_product.group1().zxy()).with_w(self[e412] * geometric_product[e4125]),
        );
    }
}
impl std::ops::Div<GeometricQuotientInfix> for AntiDualNum {
    type Output = GeometricQuotientInfixPartial<AntiDualNum>;
    fn div(self, _rhs: GeometricQuotientInfix) -> Self::Output {
        GeometricQuotientInfixPartial(self)
    }
}
impl GeometricQuotient<AntiCircleRotor> for AntiDualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8        9        0
    //    simd3        2        6        0
    //    simd4        0        6        0
    // Totals...
    // yes simd       10       21        0
    //  no simd       14       51        0
    fn geometric_quotient(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiCircleRotor::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, scalar
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                + f32::powi(other[scalar], 2)
                - f32::powi(other[e45], 2),
        );
        let geometric_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(self[scalar]) * geometric_product.group0().with_w(geometric_product[scalar]),
            // e23, e31, e12, e45
            ((Simd32x3::from(self[e3215]) * geometric_product.group0()) + (Simd32x3::from(self[scalar]) * geometric_product.group1().xyz()))
                .with_w(geometric_product[e45] * self[scalar]),
            // e15, e25, e35, e1234
            ((Simd32x3::from(self[e3215]) * geometric_product.group1().xyz()) + (Simd32x3::from(self[scalar]) * geometric_product.group2().xyz())).with_w(0.0),
            // e4235, e4315, e4125, e3215
            self.group0()
                .xx()
                .with_zw(self[e3215], (geometric_product[scalar] * self[e3215]) - (geometric_product[e45] * self[e3215]))
                * geometric_product.group0().with_w(1.0),
        );
    }
}
impl GeometricQuotient<AntiDipoleInversion> for AntiDualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       17        0
    //    simd3        1        4        0
    //    simd4        3        9        0
    // Totals...
    // yes simd       14       30        0
    //  no simd       25       65        0
    fn geometric_quotient(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e4
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125])
                - 2.0 * (other[e4] * other[e5]),
        );
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e4
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e1, e2, e3, e5
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            self.group0().yy().with_zw(self[scalar], self[e3215]) * geometric_product.group0().with_w(geometric_product[e4]),
            // e415, e425, e435, e321
            Simd32x4::from([
                geometric_product[e415] * self[scalar],
                geometric_product[e425] * self[scalar],
                geometric_product[e435] * self[scalar],
                geometric_product[e4] * self[e3215] * -1.0,
            ]) + (self.group0().xx().with_zw(self[e3215], self[scalar]) * geometric_product.group0().with_w(geometric_product[e321])),
            // e235, e315, e125, e5
            Simd32x4::from([
                geometric_product[e235] * self[scalar],
                geometric_product[e315] * self[scalar],
                geometric_product[e125] * self[scalar],
                0.0,
            ]) + (Simd32x4::from(self[e3215]) * geometric_product.group1())
                + (geometric_product.group3() * self.group0().xx().with_zw(self[e3215], self[scalar])),
            // e1, e2, e3, e4
            ((Simd32x3::from(self[scalar]) * geometric_product.group3().xyz()) - (Simd32x3::from(self[e3215]) * geometric_product.group0()))
                .with_w(geometric_product[e4] * self[scalar]),
        );
    }
}
impl GeometricQuotient<AntiDualNum> for AntiDualNum {
    type Output = AntiDualNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        3        0
    //    simd2        0        1        0
    // Totals...
    // yes simd        1        4        0
    //  no simd        1        5        0
    fn geometric_quotient(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDualNum::from_groups(/* e3215, scalar */ Simd32x2::from(f32::powi(other[scalar], -2)) * other.group0());
        return AntiDualNum::from_groups(/* e3215, scalar */ Simd32x2::from([
            (geometric_product[e3215] * self[scalar]) + (geometric_product[scalar] * self[e3215]),
            geometric_product[scalar] * self[scalar],
        ]));
    }
}
impl GeometricQuotient<AntiFlatPoint> for AntiDualNum {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        5        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        7        0
    //  no simd        0       13        0
    fn geometric_quotient(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlatPoint::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(f32::powi(other[e321], -2)) * Simd32x4::from([other[e235] * -1.0, other[e315] * -1.0, other[e125] * -1.0, other[e321] * -1.0]),
        );
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(self[scalar]) * geometric_product.group0(),
            // e1, e2, e3, e5
            Simd32x3::from(0.0).with_w(self[e3215] * geometric_product[e321]),
        );
    }
}
impl GeometricQuotient<AntiFlector> for AntiDualNum {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        3        0
    //    simd3        1        2        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        5        9        0
    //  no simd        7       25        0
    fn geometric_quotient(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiFlector::from_groups(/* e235, e315, e125, e321 */ other.group0() * Simd32x4::from(-1.0), /* e1, e2, e3, e5 */ other.group1());
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2),
        );
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e1, e2, e3, e5
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            ((Simd32x3::from(self[e3215]) * geometric_product.group1().xyz()) + (Simd32x3::from(self[scalar]) * geometric_product.group0().xyz()))
                .with_w(self[scalar] * geometric_product[e321]),
            // e1, e2, e3, e5
            self.group0()
                .yy()
                .with_zw(self[scalar], (self[e3215] * geometric_product[e321]) + (self[scalar] * geometric_product[e5]))
                * geometric_product.group1().xyz().with_w(1.0),
        );
    }
}
impl GeometricQuotient<AntiLine> for AntiDualNum {
    type Output = AntiLine;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        0        0
    //    simd3        1        7        0
    // Totals...
    // yes simd        3        7        0
    //  no simd        5       21        0
    fn geometric_quotient(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiLine::from_groups(
            // e23, e31, e12
            other.group0() * Simd32x3::from(-1.0),
            // e15, e25, e35
            other.group1() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(/* scalar */ f32::powi(other[e23], 2) + f32::powi(other[e31], 2) + f32::powi(other[e12], 2));
        let geometric_product = AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e15, e25, e35
            Simd32x3::from(other_2[scalar]) * reverse.group1(),
        );
        return AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(self[scalar]) * geometric_product.group0(),
            // e15, e25, e35
            (Simd32x3::from(self[e3215]) * geometric_product.group0()) + (Simd32x3::from(self[scalar]) * geometric_product.group1()),
        );
    }
}
impl GeometricQuotient<AntiMotor> for AntiDualNum {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        0        0
    //    simd4        1        7        0
    // Totals...
    // yes simd        4        7        0
    //  no simd        7       28        0
    fn geometric_quotient(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, e3215
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e23], 2) + f32::powi(other[e31], 2) + f32::powi(other[e12], 2) + f32::powi(other[scalar], 2),
        );
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e15, e25, e35, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(self[scalar]) * geometric_product.group0(),
            // e15, e25, e35, e3215
            (Simd32x4::from(self[e3215]) * geometric_product.group0()) + (Simd32x4::from(self[scalar]) * geometric_product.group1()),
        );
    }
}
impl GeometricQuotient<AntiPlane> for AntiDualNum {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        0        0
    //    simd4        0        5        0
    // Totals...
    // yes simd        2        5        0
    //  no simd        2       20        0
    fn geometric_quotient(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiPlane::from_groups(
            // e1, e2, e3, e5
            Simd32x4::from(f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)) * other.group0(),
        );
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            self.group0().xx().with_zw(self[e3215], 0.0) * Simd32x3::from(1.0).with_w(0.0) * geometric_product.group0().xyz().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
            // e1, e2, e3, e5
            Simd32x4::from(self[scalar]) * geometric_product.group0(),
        );
    }
}
impl GeometricQuotient<AntiScalar> for AntiDualNum {
    type Output = DualNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        1
    //    simd2        0        1        0
    // Totals...
    // yes simd        0        2        1
    //  no simd        0        3        1
    fn geometric_quotient(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return DualNum::from_groups(/* e5, e12345 */ Simd32x2::from(1.0 / other[e12345] * -1.0) * self.group0());
    }
}
impl GeometricQuotient<Circle> for AntiDualNum {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6        7        0
    //    simd3        2        9        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        8       20        0
    //  no simd       12       50        0
    fn geometric_quotient(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let reverse = Circle::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125
            other.group2() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group2(),
        );
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[scalar]) * geometric_product.group0(),
            // e415, e425, e435, e321
            ((Simd32x3::from(self[e3215]) * geometric_product.group0()) + (Simd32x3::from(self[scalar]) * geometric_product.group1().xyz()))
                .with_w(self[scalar] * geometric_product[e321]),
            // e235, e315, e125, e4
            ((Simd32x3::from(self[e3215]) * geometric_product.group1().xyz()) + (Simd32x3::from(self[scalar]) * geometric_product.group2())).with_w(0.0),
            // e1, e2, e3, e5
            Simd32x4::from(self[e3215]) * geometric_product.group0().with_w(geometric_product[e321]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricQuotient<CircleRotor> for AntiDualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7        7        0
    //    simd3        1        4        0
    //    simd4        1       10        0
    // Totals...
    // yes simd        9       21        0
    //  no simd       14       59        0
    fn geometric_quotient(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let reverse = CircleRotor::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e12345
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - f32::powi(other[e12345], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(self[scalar]) * geometric_product.group0().with_w(geometric_product[e12345]),
            // e415, e425, e435, e321
            ((Simd32x3::from(self[e3215]) * geometric_product.group0()) + (Simd32x3::from(self[scalar]) * geometric_product.group1().xyz()))
                .with_w(self[scalar] * geometric_product[e321]),
            // e235, e315, e125, e5
            (Simd32x4::from(self[e3215]) * geometric_product.group1()) + (geometric_product.group2() * self.group0().yy().with_zw(self[scalar], self[e3215])),
            // e1, e2, e3, e4
            self.group0().xx().with_zw(self[e3215], 0.0) * Simd32x3::from(1.0).with_w(0.0) * geometric_product.group0().with_w(0.0) * Simd32x4::from([-1.0, -1.0, -1.0, 0.0]),
        );
    }
}
impl GeometricQuotient<Dipole> for AntiDualNum {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6        7        0
    //    simd3        2        9        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        8       20        0
    //  no simd       12       50        0
    fn geometric_quotient(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let reverse = Dipole::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35
            other.group2() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2),
        );
        let geometric_product = Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35
            Simd32x3::from(other_2[scalar]) * reverse.group2(),
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[scalar]) * geometric_product.group0(),
            // e23, e31, e12, e45
            ((Simd32x3::from(self[e3215]) * geometric_product.group0()) + (Simd32x3::from(self[scalar]) * geometric_product.group1().xyz()))
                .with_w(self[scalar] * geometric_product[e45]),
            // e15, e25, e35, e1234
            ((Simd32x3::from(self[e3215]) * geometric_product.group1().xyz()) + (Simd32x3::from(self[scalar]) * geometric_product.group2())).with_w(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e3215]) * geometric_product.group0().with_w(geometric_product[e45]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
    }
}
impl GeometricQuotient<DipoleInversion> for AntiDualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       14        0
    //    simd3        2        5        0
    //    simd4        2        9        0
    // Totals...
    // yes simd       14       28        0
    //  no simd       24       65        0
    fn geometric_quotient(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let reverse = DipoleInversion::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + 2.0 * (other[e1234] * other[e3215])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2),
        );
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            self.group0().yy().with_zw(self[scalar], self[e3215]) * geometric_product.group0().with_w(geometric_product[e1234]),
            // e23, e31, e12, e45
            (Simd32x4::from(self[e3215]) * geometric_product.group0().with_w(geometric_product[e1234])) + (Simd32x4::from(self[scalar]) * geometric_product.group1()),
            // e15, e25, e35, e1234
            ((Simd32x3::from(self[e3215]) * geometric_product.group1().xyz()) + (Simd32x3::from(self[scalar]) * geometric_product.group2().xyz())
                - (Simd32x3::from(self[e3215]) * geometric_product.group3().xyz()))
            .with_w(self[scalar] * geometric_product[e1234]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[scalar] * geometric_product[e4235],
                self[scalar] * geometric_product[e4315],
                self[scalar] * geometric_product[e4125],
                self[e3215] * geometric_product[e45] * -1.0,
            ]) + (self.group0().xx().with_zw(self[e3215], self[scalar]) * geometric_product.group0().with_w(geometric_product[e3215])),
        );
    }
}
impl GeometricQuotient<DualNum> for AntiDualNum {
    type Output = DualNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        4        0
    //    simd2        0        1        0
    // Totals...
    // yes simd        1        5        0
    //  no simd        1        6        0
    fn geometric_quotient(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DualNum::from_groups(/* e5, e12345 */ Simd32x2::from(f32::powi(other[e12345], -2) * -1.0) * other.group0());
        return DualNum::from_groups(/* e5, e12345 */ Simd32x2::from([
            (self[e3215] * geometric_product[e12345]) + (self[scalar] * geometric_product[e5]),
            self[scalar] * geometric_product[e12345],
        ]));
    }
}
impl GeometricQuotient<FlatPoint> for AntiDualNum {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        7        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        9        0
    //  no simd        0       15        0
    fn geometric_quotient(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = FlatPoint::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(f32::powi(other[e45], -2) * -1.0) * Simd32x4::from([other[e15] * -1.0, other[e25] * -1.0, other[e35] * -1.0, other[e45] * -1.0]),
        );
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(self[scalar]) * geometric_product.group0(),
            // e4235, e4315, e4125, e3215
            Simd32x3::from(0.0).with_w(self[e3215] * geometric_product[e45] * -1.0),
        );
    }
}
impl GeometricQuotient<Flector> for AntiDualNum {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        3        0
    //    simd3        1        2        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        5        9        0
    //  no simd        7       25        0
    fn geometric_quotient(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let reverse = Flector::from_groups(
            // e15, e25, e35, e45
            other.group0() * Simd32x4::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group1(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            -f32::powi(other[e45], 2) - f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2),
        );
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return Flector::from_groups(
            // e15, e25, e35, e45
            ((Simd32x3::from(self[scalar]) * geometric_product.group0().xyz()) - (Simd32x3::from(self[e3215]) * geometric_product.group1().xyz()))
                .with_w(self[scalar] * geometric_product[e45]),
            // e4235, e4315, e4125, e3215
            self.group0()
                .yy()
                .with_zw(self[scalar], (self[scalar] * geometric_product[e3215]) - (self[e3215] * geometric_product[e45]))
                * geometric_product.group1().xyz().with_w(1.0),
        );
    }
}
impl GeometricQuotient<Line> for AntiDualNum {
    type Output = Line;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        0        0
    //    simd3        1        7        0
    // Totals...
    // yes simd        3        7        0
    //  no simd        5       21        0
    fn geometric_quotient(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let reverse = Line::from_groups(
            // e415, e425, e435
            other.group0() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group1() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(/* scalar */ -f32::powi(other[e415], 2) - f32::powi(other[e425], 2) - f32::powi(other[e435], 2));
        let geometric_product = Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group1(),
        );
        return Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(self[scalar]) * geometric_product.group0(),
            // e235, e315, e125
            (Simd32x3::from(self[e3215]) * geometric_product.group0()) + (Simd32x3::from(self[scalar]) * geometric_product.group1()),
        );
    }
}
impl GeometricQuotient<Motor> for AntiDualNum {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        0        0
    //    simd4        1        7        0
    // Totals...
    // yes simd        4        7        0
    //  no simd        7       28        0
    fn geometric_quotient(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let reverse = Motor::from_groups(
            // e415, e425, e435, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            -f32::powi(other[e415], 2) - f32::powi(other[e425], 2) - f32::powi(other[e435], 2) - f32::powi(other[e12345], 2),
        );
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e235, e315, e125, e5
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(self[scalar]) * geometric_product.group0(),
            // e235, e315, e125, e5
            (Simd32x4::from(self[e3215]) * geometric_product.group0()) + (Simd32x4::from(self[scalar]) * geometric_product.group1()),
        );
    }
}
impl GeometricQuotient<MultiVector> for AntiDualNum {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       25       36        0
    //    simd2        1        3        0
    //    simd3        4       17        0
    //    simd4        5       11        0
    // Totals...
    // yes simd       35       67        0
    //  no simd       59      137        0
    fn geometric_quotient(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let reverse = MultiVector::from_groups(
            // scalar, e12345
            other.group0(),
            // e1, e2, e3, e4
            other.group1(),
            // e5
            other[e5],
            // e15, e25, e35, e45
            other.group3() * Simd32x4::from(-1.0),
            // e41, e42, e43
            other.group4() * Simd32x3::from(-1.0),
            // e23, e31, e12
            other.group5() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group6() * Simd32x4::from(-1.0),
            // e423, e431, e412
            other.group7() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group8() * Simd32x3::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group9(),
            // e1234
            other[e1234],
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e15] * other[e41])
                + 2.0 * (other[e25] * other[e42])
                + 2.0 * (other[e35] * other[e43])
                + 2.0 * (other[e3215] * other[e1234])
                + f32::powi(other[scalar], 2)
                + f32::powi(other[e1], 2)
                + f32::powi(other[e2], 2)
                + f32::powi(other[e3], 2)
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                + f32::powi(other[e321], 2)
                - f32::powi(other[e12345], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2)
                - 2.0 * (other[e4] * other[e5])
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(other_2[scalar]) * reverse.group0(),
            // e1, e2, e3, e4
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e5
            reverse[e5] * other_2[scalar],
            // e15, e25, e35, e45
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group4(),
            // e23, e31, e12
            Simd32x3::from(other_2[scalar]) * reverse.group5(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group6(),
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group7(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group8(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group9(),
            // e1234
            reverse[e1234] * other_2[scalar],
        );
        return MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from(self[e3215]) * Simd32x2::from([geometric_product[e1234], geometric_product[e4]])) + (Simd32x2::from(self[scalar]) * geometric_product.group0()),
            // e1, e2, e3, e4
            ((Simd32x3::from(self[scalar]) * geometric_product.group1().xyz()) - (Simd32x3::from(self[e3215]) * geometric_product.group7()))
                .with_w(self[scalar] * geometric_product[e4]),
            // e5
            (self[e3215] * geometric_product[e12345]) + (self[e3215] * geometric_product[e321]) + (self[scalar] * geometric_product[e5]),
            // e15, e25, e35, e45
            Simd32x4::from([
                self[e3215] * geometric_product[e4235] * -1.0,
                self[e3215] * geometric_product[e4315] * -1.0,
                self[e3215] * geometric_product[e4125] * -1.0,
                0.0,
            ]) + (Simd32x4::from(self[e3215]) * geometric_product.group5().with_w(geometric_product[e1234]))
                + (Simd32x4::from(self[scalar]) * geometric_product.group3()),
            // e41, e42, e43
            Simd32x3::from(self[scalar]) * geometric_product.group4(),
            // e23, e31, e12
            (Simd32x3::from(self[e3215]) * geometric_product.group4()) + (Simd32x3::from(self[scalar]) * geometric_product.group5()),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[scalar] * geometric_product[e415],
                self[scalar] * geometric_product[e425],
                self[scalar] * geometric_product[e435],
                self[e3215] * geometric_product[e4] * -1.0,
            ]) + (self.group0().xx().with_zw(self[e3215], self[scalar]) * geometric_product.group7().with_w(geometric_product[e321])),
            // e423, e431, e412
            Simd32x3::from(self[scalar]) * geometric_product.group7(),
            // e235, e315, e125
            (Simd32x3::from(self[e3215]) * geometric_product.group1().xyz())
                + (Simd32x3::from(self[e3215]) * geometric_product.group6().xyz())
                + (Simd32x3::from(self[scalar]) * geometric_product.group8()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[e3215]) * geometric_product.group4().with_w(geometric_product[scalar]))
                + (Simd32x4::from(self[scalar]) * geometric_product.group9())
                + Simd32x3::from(0.0).with_w(self[e3215] * geometric_product[e45] * -1.0),
            // e1234
            self[scalar] * geometric_product[e1234],
        );
    }
}
impl GeometricQuotient<Plane> for AntiDualNum {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        0        0
    //    simd4        0        5        0
    // Totals...
    // yes simd        2        5        0
    //  no simd        2       20        0
    fn geometric_quotient(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Plane::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(-f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2)) * other.group0(),
        );
        return Flector::from_groups(
            // e15, e25, e35, e45
            self.group0().xx().with_zw(self[e3215], 0.0) * Simd32x3::from(1.0).with_w(0.0) * geometric_product.group0().xyz().with_w(0.0) * Simd32x4::from([-1.0, -1.0, -1.0, 0.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[scalar]) * geometric_product.group0(),
        );
    }
}
impl GeometricQuotient<RoundPoint> for AntiDualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        6        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        3        9        0
    //  no simd        3       18        0
    fn geometric_quotient(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2) - 2.0 * (other[e4] * other[e5]),
        );
        let geometric_product = RoundPoint::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from(other_2[scalar]) * other.group0(), /* e5 */ other[e5] * other_2[scalar]);
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x3::from(0.0).with_w(self[e3215] * geometric_product[e4]),
            // e415, e425, e435, e321
            Simd32x3::from(0.0).with_w(self[e3215] * geometric_product[e4] * -1.0),
            // e235, e315, e125, e5
            self.group0().xx().with_zw(self[e3215], self[scalar]) * geometric_product.group0().xyz().with_w(geometric_product[e5]),
            // e1, e2, e3, e4
            Simd32x4::from(self[scalar]) * geometric_product.group0(),
        );
    }
}
impl GeometricQuotient<Scalar> for AntiDualNum {
    type Output = AntiDualNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        0        1
    //    simd2        0        1        0
    // Totals...
    // yes simd        0        1        1
    //  no simd        0        2        1
    fn geometric_quotient(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiDualNum::from_groups(/* e3215, scalar */ Simd32x2::from(1.0 / other[scalar]) * self.group0());
    }
}
impl GeometricQuotient<Sphere> for AntiDualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        5        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        3        9        0
    //  no simd        3       21        0
    fn geometric_quotient(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e3215] * other[e1234]) - f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2),
        );
        let geometric_product = Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * other.group0(),
            // e1234
            other_2[scalar] * other[e1234],
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x3::from(0.0).with_w(self[e3215] * geometric_product[e1234]),
            // e23, e31, e12, e45
            Simd32x3::from(0.0).with_w(self[e3215] * geometric_product[e1234]),
            // e15, e25, e35, e1234
            self.group0().xx().with_zw(self[e3215], self[scalar]) * geometric_product.group0().xyz().with_w(geometric_product[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[scalar]) * geometric_product.group0(),
        );
    }
}
impl GeometricQuotient<VersorEven> for AntiDualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       16        0
    //    simd3        1        2        0
    //    simd4        3       12        0
    // Totals...
    // yes simd       16       30        0
    //  no simd       27       70        0
    fn geometric_quotient(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let reverse = VersorEven::from_groups(
            // e423, e431, e412, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e5
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e4
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)
                - f32::powi(other[e12345], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125])
                - 2.0 * (other[e5] * other[e4]),
        );
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e5
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e1, e2, e3, e4
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            self.group0()
                .yy()
                .with_zw(self[scalar], (self[e3215] * geometric_product[e4]) + (self[scalar] * geometric_product[e12345]))
                * geometric_product.group0().xyz().with_w(1.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[scalar] * geometric_product[e415],
                self[scalar] * geometric_product[e425],
                self[scalar] * geometric_product[e435],
                self[e3215] * geometric_product[e4] * -1.0,
            ]) + (self.group0().xx().with_zw(self[e3215], self[scalar]) * geometric_product.group0().xyz().with_w(geometric_product[e321])),
            // e235, e315, e125, e5
            (Simd32x4::from(self[e3215]) * geometric_product.group1().xyz().with_w(geometric_product[e12345]))
                + (Simd32x4::from(self[e3215]) * geometric_product.group3().xyz().with_w(geometric_product[e321]))
                + (Simd32x4::from(self[scalar]) * geometric_product.group2()),
            // e1, e2, e3, e4
            ((Simd32x3::from(self[scalar]) * geometric_product.group3().xyz()) - (Simd32x3::from(self[e3215]) * geometric_product.group0().xyz()))
                .with_w(self[scalar] * geometric_product[e4]),
        );
    }
}
impl GeometricQuotient<VersorOdd> for AntiDualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       13        0
    //    simd3        2        3        0
    //    simd4        3       12        0
    // Totals...
    // yes simd       17       28        0
    //  no simd       30       70        0
    fn geometric_quotient(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let reverse = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + 2.0 * (other[e1234] * other[e3215])
                + f32::powi(other[scalar], 2)
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2),
        );
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            self.group0()
                .yy()
                .with_zw(self[scalar], (self[e3215] * geometric_product[e1234]) + (self[scalar] * geometric_product[scalar]))
                * geometric_product.group0().xyz().with_w(1.0),
            // e23, e31, e12, e45
            (Simd32x4::from(self[e3215]) * geometric_product.group0().xyz().with_w(geometric_product[e1234])) + (Simd32x4::from(self[scalar]) * geometric_product.group1()),
            // e15, e25, e35, e1234
            ((Simd32x3::from(self[e3215]) * geometric_product.group1().xyz()) + (Simd32x3::from(self[scalar]) * geometric_product.group2().xyz())
                - (Simd32x3::from(self[e3215]) * geometric_product.group3().xyz()))
            .with_w(self[scalar] * geometric_product[e1234]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[e3215]) * geometric_product.group0())
                + (Simd32x4::from(self[scalar]) * geometric_product.group3())
                + Simd32x3::from(0.0).with_w(self[e3215] * geometric_product[e45] * -1.0),
        );
    }
}
impl std::ops::Div<GeometricQuotientInfix> for AntiFlatPoint {
    type Output = GeometricQuotientInfixPartial<AntiFlatPoint>;
    fn div(self, _rhs: GeometricQuotientInfix) -> Self::Output {
        GeometricQuotientInfixPartial(self)
    }
}
impl GeometricQuotient<AntiCircleRotor> for AntiFlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       25        0
    //    simd3        0        6        0
    //    simd4        6        8        0
    // Totals...
    // yes simd       21       39        0
    //  no simd       39       75        0
    fn geometric_quotient(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiCircleRotor::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, scalar
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                + f32::powi(other[scalar], 2)
                - f32::powi(other[e45], 2),
        );
        let geometric_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x3::from(self[e321]) * geometric_product.group0()).with_w(
                -(geometric_product[e41] * self[e235]) - (geometric_product[e42] * self[e315]) - (geometric_product[e43] * self[e125]) - (geometric_product[e45] * self[e321]),
            ),
            // e415, e425, e435, e321
            Simd32x4::from([
                geometric_product[e43] * self[e315] * -1.0,
                geometric_product[e41] * self[e125] * -1.0,
                geometric_product[e42] * self[e235] * -1.0,
                (geometric_product[e42] * self[e315]) + (geometric_product[e43] * self[e125]) + (geometric_product[scalar] * self[e321]),
            ]) + (self.group0().zxyx() * geometric_product.group0().yzx().with_w(geometric_product[e41])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (geometric_product[e31] * self[e125]) + (geometric_product[scalar] * self[e235]),
                (geometric_product[e12] * self[e235]) + (geometric_product[scalar] * self[e315]),
                (geometric_product[e23] * self[e315]) + (geometric_product[scalar] * self[e125]),
                0.0,
            ]) - (geometric_product.group1().zxyx() * self.group0().yzxx())
                - (geometric_product.group1().wwwy() * self.group0().xyzy())
                - (self.group0().wwwz() * geometric_product.group2().xyz().with_w(geometric_product[e12])),
            // e1, e2, e3, e4
            (Simd32x3::from(self[e321]) * geometric_product.group1().xyz()).with_w(0.0) + (geometric_product.group0().zxy() * self.group0().yzx()).with_w(0.0)
                - (geometric_product.group0().yzx() * self.group0().zxy()).with_w(0.0),
        );
    }
}
impl GeometricQuotient<AntiDipoleInversion> for AntiFlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       27       36        0
    //    simd3        5       10        0
    //    simd4        3        8        0
    // Totals...
    // yes simd       35       54        0
    //  no simd       54       98        0
    fn geometric_quotient(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e4
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125])
                - 2.0 * (other[e4] * other[e5]),
        );
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e4
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e1, e2, e3, e5
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x3::from(self[e321]) * geometric_product.group0() * Simd32x3::from(-1.0)).with_w(
                (geometric_product[e423] * self[e235]) + (geometric_product[e431] * self[e315]) + (geometric_product[e412] * self[e125]) - (geometric_product[e321] * self[e321]),
            ),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(geometric_product[e431] * self[e125]) - (geometric_product[e4] * self[e235]) - (geometric_product[e1] * self[e321]),
                -(geometric_product[e412] * self[e235]) - (geometric_product[e4] * self[e315]) - (geometric_product[e2] * self[e321]),
                -(geometric_product[e423] * self[e315]) - (geometric_product[e4] * self[e125]) - (geometric_product[e3] * self[e321]),
                (geometric_product[e431] * self[e315]) + (geometric_product[e412] * self[e125]),
            ]) + (self.group0().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e423])),
            // e15, e25, e35, e1234
            ((Simd32x3::from(self[e321]) * geometric_product.group2().xyz())
                + (geometric_product.group1().zxy() * self.group0().yzx())
                + (geometric_product.group3().zxy() * self.group0().yzx())
                - (Simd32x3::from(geometric_product[e321]) * self.group0().xyz())
                - (geometric_product.group1().yzx() * self.group0().zxy())
                - (geometric_product.group3().yzx() * self.group0().zxy()))
            .with_w(geometric_product[e4] * self[e321] * -1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(geometric_product[e431] * self[e125]) - (geometric_product[e4] * self[e235]),
                -(geometric_product[e412] * self[e235]) - (geometric_product[e4] * self[e315]),
                -(geometric_product[e423] * self[e315]) - (geometric_product[e4] * self[e125]),
                (geometric_product[e435] * self[e125])
                    + (geometric_product[e1] * self[e235])
                    + (geometric_product[e2] * self[e315])
                    + (geometric_product[e3] * self[e125])
                    + (geometric_product[e5] * self[e321]),
            ]) + (geometric_product.group1().xyzy() * self.group0().wwwy())
                + (self.group0().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e415])),
        );
    }
}
impl GeometricQuotient<AntiDualNum> for AntiFlatPoint {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd2        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0        8        0
    fn geometric_quotient(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDualNum::from_groups(/* e3215, scalar */ Simd32x2::from(f32::powi(other[scalar], -2)) * other.group0());
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(geometric_product[scalar]) * self.group0(),
            // e1, e2, e3, e5
            Simd32x3::from(0.0).with_w(geometric_product[e3215] * self[e321] * -1.0),
        );
    }
}
impl GeometricQuotient<AntiFlatPoint> for AntiFlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        6        0
    //    simd3        1        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        1        9        0
    //  no simd        3       16        0
    fn geometric_quotient(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlatPoint::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(f32::powi(other[e321], -2)) * Simd32x4::from([other[e235] * -1.0, other[e315] * -1.0, other[e125] * -1.0, other[e321] * -1.0]),
        );
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x3::from(0.0).with_w(geometric_product[e321] * self[e321] * -1.0),
            // e15, e25, e35, e3215
            ((Simd32x3::from(self[e321]) * geometric_product.group0().xyz()) - (Simd32x3::from(geometric_product[e321]) * self.group0().xyz())).with_w(0.0),
        );
    }
}
impl GeometricQuotient<AntiFlector> for AntiFlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7        8        0
    //    simd4        2        7        0
    // Totals...
    // yes simd        9       15        0
    //  no simd       15       36        0
    fn geometric_quotient(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiFlector::from_groups(/* e235, e315, e125, e321 */ other.group0() * Simd32x4::from(-1.0), /* e1, e2, e3, e5 */ other.group1());
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2),
        );
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e1, e2, e3, e5
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(self[e321]) * geometric_product.group1().xyz().with_w(geometric_product[e321]) * Simd32x4::from(-1.0),
            // e15, e25, e35, e3215
            Simd32x4::from([
                -(self[e235] * geometric_product[e321]) - (self[e125] * geometric_product[e2]),
                -(self[e235] * geometric_product[e3]) - (self[e315] * geometric_product[e321]),
                -(self[e315] * geometric_product[e1]) - (self[e125] * geometric_product[e321]),
                (self[e125] * geometric_product[e3]) + (self[e321] * geometric_product[e5]),
            ]) + (self.group0().yzxx() * geometric_product.group1().zxyx())
                + (self.group0().wwwy() * geometric_product.group0().xyz().with_w(geometric_product[e2])),
        );
    }
}
impl GeometricQuotient<AntiLine> for AntiFlatPoint {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        3        0
    //    simd3        0        8        0
    //    simd4        2        0        0
    // Totals...
    // yes simd        6       11        0
    //  no simd       12       27        0
    fn geometric_quotient(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiLine::from_groups(
            // e23, e31, e12
            other.group0() * Simd32x3::from(-1.0),
            // e15, e25, e35
            other.group1() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(/* scalar */ f32::powi(other[e23], 2) + f32::powi(other[e31], 2) + f32::powi(other[e12], 2));
        let geometric_product = AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e15, e25, e35
            Simd32x3::from(other_2[scalar]) * reverse.group1(),
        );
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            (geometric_product.group0().yzx() * self.group0().zxy()).with_w(0.0)
                - (Simd32x3::from(self[e321]) * geometric_product.group1()).with_w(0.0)
                - (geometric_product.group0().zxy() * self.group0().yzx()).with_w(0.0),
            // e1, e2, e3, e5
            (Simd32x3::from(self[e321]) * geometric_product.group0())
                .with_w(-(self[e235] * geometric_product[e23]) - (self[e315] * geometric_product[e31]) - (self[e125] * geometric_product[e12])),
        );
    }
}
impl GeometricQuotient<AntiMotor> for AntiFlatPoint {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6        5        0
    //    simd3        3        5        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        9       14        0
    //  no simd       15       36        0
    fn geometric_quotient(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, e3215
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e23], 2) + f32::powi(other[e31], 2) + f32::powi(other[e12], 2) + f32::powi(other[scalar], 2),
        );
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e15, e25, e35, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            ((self.group0().xxy() * geometric_product.group0().wzx()) + (self.group0().zyz() * geometric_product.group0().yww())
                - (Simd32x3::from(self[e321]) * geometric_product.group1().xyz())
                - (self.group0().yzx() * geometric_product.group0().zxy()))
            .with_w(self[e321] * geometric_product[scalar]),
            // e1, e2, e3, e5
            (self.group0().www() * geometric_product.group0().xyz()).with_w(
                -(self[e235] * geometric_product[e23]) - (self[e315] * geometric_product[e31]) - (self[e125] * geometric_product[e12]) - (self[e321] * geometric_product[e3215]),
            ),
        );
    }
}
impl GeometricQuotient<AntiPlane> for AntiFlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        9        0
    //    simd4        1        5        0
    // Totals...
    // yes simd        5       14        0
    //  no simd        8       29        0
    fn geometric_quotient(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiPlane::from_groups(
            // e1, e2, e3, e5
            Simd32x4::from(f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)) * other.group0(),
        );
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x3::from(1.0).with_w(0.0) * self.group0().www().with_w(0.0) * geometric_product.group0().xyz().with_w(0.0) * Simd32x4::from([-1.0, -1.0, -1.0, 0.0]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                self[e125] * geometric_product[e2] * -1.0,
                self[e235] * geometric_product[e3] * -1.0,
                self[e315] * geometric_product[e1] * -1.0,
                (self[e315] * geometric_product[e2]) + (self[e125] * geometric_product[e3]) + (self[e321] * geometric_product[e5]),
            ]) + (self.group0().yzxx() * geometric_product.group0().zxyx()),
        );
    }
}
impl GeometricQuotient<AntiScalar> for AntiFlatPoint {
    type Output = FlatPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        1
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        3        1
    //  no simd        0        9        1
    fn geometric_quotient(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return FlatPoint::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(1.0 / other[e12345] * -1.0) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricQuotient<Circle> for AntiFlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       26        0
    //    simd3        0       11        0
    //    simd4        6        4        0
    // Totals...
    // yes simd       16       41        0
    //  no simd       34       75        0
    fn geometric_quotient(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let reverse = Circle::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125
            other.group2() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group2(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x3::from(self[e321]) * geometric_product.group0() * Simd32x3::from(-1.0)).with_w(
                (self[e235] * geometric_product[e423]) + (self[e315] * geometric_product[e431]) + (self[e125] * geometric_product[e412]) - (self[e321] * geometric_product[e321]),
            ),
            // e23, e31, e12, e45
            Simd32x4::from([
                self[e125] * geometric_product[e431] * -1.0,
                self[e235] * geometric_product[e412] * -1.0,
                self[e315] * geometric_product[e423] * -1.0,
                (self[e315] * geometric_product[e431]) + (self[e125] * geometric_product[e412]),
            ]) + (self.group0().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e423])),
            // e15, e25, e35, e1234
            (Simd32x3::from(self[e321]) * geometric_product.group2()).with_w(0.0) + (self.group0().yzx() * geometric_product.group1().zxy()).with_w(0.0)
                - (self.group0().xxy() * geometric_product.group1().wzx()).with_w(0.0)
                - (self.group0().zyz() * geometric_product.group1().yww()).with_w(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e125] * geometric_product[e431] * -1.0,
                self[e235] * geometric_product[e412] * -1.0,
                self[e315] * geometric_product[e423] * -1.0,
                self[e125] * geometric_product[e435],
            ]) + (self.group0().wwwy() * geometric_product.group1().xyzy())
                + (geometric_product.group0().zxy() * self.group0().yzx()).with_w(self[e235] * geometric_product[e415]),
        );
    }
}
impl GeometricQuotient<CircleRotor> for AntiFlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       27        0
    //    simd3        0       10        0
    //    simd4        7        6        0
    // Totals...
    // yes simd       19       43        0
    //  no simd       40       81        0
    fn geometric_quotient(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let reverse = CircleRotor::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e12345
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - f32::powi(other[e12345], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x3::from(self[e321]) * geometric_product.group0() * Simd32x3::from(-1.0)).with_w(
                (self[e235] * geometric_product[e423]) + (self[e315] * geometric_product[e431]) + (self[e125] * geometric_product[e412]) - (self[e321] * geometric_product[e321]),
            ),
            // e23, e31, e12, e45
            Simd32x4::from([
                self[e125] * geometric_product[e431] * -1.0,
                self[e235] * geometric_product[e412] * -1.0,
                self[e315] * geometric_product[e423] * -1.0,
                (self[e315] * geometric_product[e431]) + (self[e125] * geometric_product[e412]) + (self[e321] * geometric_product[e12345]),
            ]) + (self.group0().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e423])),
            // e15, e25, e35, e1234
            (Simd32x3::from(self[e321]) * geometric_product.group2().xyz()).with_w(0.0) + (self.group0().yzx() * geometric_product.group1().zxy()).with_w(0.0)
                - (Simd32x3::from([geometric_product[e425], geometric_product[e12345], geometric_product[e12345]]) * self.group0().zyz()).with_w(0.0)
                - (Simd32x3::from([geometric_product[e12345], geometric_product[e321], geometric_product[e321]]) * self.group0().xyz()).with_w(0.0)
                - (self.group0().xxy() * geometric_product.group1().wzx()).with_w(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e125] * geometric_product[e431] * -1.0,
                self[e235] * geometric_product[e412] * -1.0,
                self[e315] * geometric_product[e423] * -1.0,
                self[e125] * geometric_product[e435],
            ]) + (self.group0().wwwy() * geometric_product.group1().xyzy())
                + (geometric_product.group0().zxy() * self.group0().yzx()).with_w(self[e235] * geometric_product[e415]),
        );
    }
}
impl GeometricQuotient<Dipole> for AntiFlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       22        0
    //    simd3        0        9        0
    //    simd4        6        5        0
    // Totals...
    // yes simd       16       36        0
    //  no simd       34       69        0
    fn geometric_quotient(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let reverse = Dipole::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35
            other.group2() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2),
        );
        let geometric_product = Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35
            Simd32x3::from(other_2[scalar]) * reverse.group2(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x3::from(self[e321]) * geometric_product.group0()).with_w(
                -(self[e235] * geometric_product[e41]) - (self[e315] * geometric_product[e42]) - (self[e125] * geometric_product[e43]) - (self[e321] * geometric_product[e45]),
            ),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e315] * geometric_product[e43] * -1.0,
                self[e125] * geometric_product[e41] * -1.0,
                self[e235] * geometric_product[e42] * -1.0,
                (self[e315] * geometric_product[e42]) + (self[e125] * geometric_product[e43]),
            ]) + (self.group0().zxyx() * geometric_product.group0().yzx().with_w(geometric_product[e41])),
            // e235, e315, e125, e5
            Simd32x4::from([self[e125] * geometric_product[e31], self[e235] * geometric_product[e12], self[e315] * geometric_product[e23], 0.0])
                - (self.group0().xyxy() * geometric_product.group1().wwyy())
                - (self.group0().yzzz() * geometric_product.group1().zxwz())
                - (geometric_product.group2() * self.group0().www()).with_w(self[e235] * geometric_product[e23]),
            // e1, e2, e3, e4
            (Simd32x3::from(self[e321]) * geometric_product.group1().xyz()).with_w(0.0) + (geometric_product.group0().zxy() * self.group0().yzx()).with_w(0.0)
                - (geometric_product.group0().yzx() * self.group0().zxy()).with_w(0.0),
        );
    }
}
impl GeometricQuotient<DipoleInversion> for AntiFlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       22        0
    //    simd3        3        8        0
    //    simd4        8       12        0
    // Totals...
    // yes simd       27       42        0
    //  no simd       57       94        0
    fn geometric_quotient(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let reverse = DipoleInversion::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + 2.0 * (other[e1234] * other[e3215])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2),
        );
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x3::from(self[e321]) * geometric_product.group0()).with_w(
                -(self[e235] * geometric_product[e41]) - (self[e315] * geometric_product[e42]) - (self[e125] * geometric_product[e43]) - (self[e321] * geometric_product[e45]),
            ),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(self[e315] * geometric_product[e43]) - (self[e321] * geometric_product[e4235]),
                -(self[e125] * geometric_product[e41]) - (self[e321] * geometric_product[e4315]),
                -(self[e235] * geometric_product[e42]) - (self[e321] * geometric_product[e4125]),
                self[e125] * geometric_product[e43],
            ]) + (self.group0().zxyx() * geometric_product.group0().yzx().with_w(geometric_product[e41]))
                + (geometric_product.group2().www() * self.group0().xyz()).with_w(self[e315] * geometric_product[e42]),
            // e235, e315, e125, e5
            (Simd32x4::from([geometric_product[e31], geometric_product[e4235], geometric_product[e23], geometric_product[e4315]]) * self.group0().zzyy())
                + (Simd32x4::from([geometric_product[e4125], geometric_product[e12], geometric_product[e4315], geometric_product[e4235]]) * self.group0().yxxx())
                + Simd32x3::from(0.0).with_w(self[e125] * geometric_product[e4125])
                - (Simd32x4::from(self[e235]) * Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e31], geometric_product[e23]]))
                - (Simd32x4::from(self[e315]) * geometric_product.group1().zw().with_zw(geometric_product[e4235], geometric_product[e31]))
                - (Simd32x4::from(self[e125]) * Simd32x4::from([geometric_product[e4315], geometric_product[e23], geometric_product[e45], geometric_product[e12]]))
                - (Simd32x4::from(self[e321]) * geometric_product.group2().xyz().with_w(geometric_product[e3215])),
            // e1, e2, e3, e4
            ((Simd32x3::from(self[e321]) * geometric_product.group1().xyz()) + (geometric_product.group0().zxy() * self.group0().yzx())
                - (Simd32x3::from(geometric_product[e1234]) * self.group0().xyz())
                - (geometric_product.group0().yzx() * self.group0().zxy()))
            .with_w(self[e321] * geometric_product[e1234]),
        );
    }
}
impl GeometricQuotient<DualNum> for AntiFlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd2        0        1        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        5        0
    //  no simd        0       12        0
    fn geometric_quotient(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DualNum::from_groups(/* e5, e12345 */ Simd32x2::from(f32::powi(other[e12345], -2) * -1.0) * other.group0());
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(geometric_product[e12345]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            Simd32x3::from(0.0).with_w(self[e321] * geometric_product[e5]),
        );
    }
}
impl GeometricQuotient<FlatPoint> for AntiFlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        7        0
    //    simd3        1        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        1       10        0
    //  no simd        3       17        0
    fn geometric_quotient(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = FlatPoint::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(f32::powi(other[e45], -2) * -1.0) * Simd32x4::from([other[e15] * -1.0, other[e25] * -1.0, other[e35] * -1.0, other[e45] * -1.0]),
        );
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x3::from(0.0).with_w(self[e321] * geometric_product[e45] * -1.0),
            // e235, e315, e125, e5
            (-(Simd32x3::from(self[e321]) * geometric_product.group0().xyz()) - (Simd32x3::from(geometric_product[e45]) * self.group0().xyz())).with_w(0.0),
        );
    }
}
impl GeometricQuotient<Flector> for AntiFlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7        8        0
    //    simd4        2        7        0
    // Totals...
    // yes simd        9       15        0
    //  no simd       15       36        0
    fn geometric_quotient(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let reverse = Flector::from_groups(
            // e15, e25, e35, e45
            other.group0() * Simd32x4::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group1(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            -f32::powi(other[e45], 2) - f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2),
        );
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(self[e321]) * geometric_product.group1().xyz().with_w(geometric_product[e45]) * Simd32x4::from(-1.0),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e125] * geometric_product[e4315]) - (self[e321] * geometric_product[e15]),
                -(self[e315] * geometric_product[e45]) - (self[e321] * geometric_product[e25]),
                -(self[e125] * geometric_product[e45]) - (self[e321] * geometric_product[e35]),
                (self[e315] * geometric_product[e4315]) + (self[e125] * geometric_product[e4125]),
            ]) + (self.group0().yzxx() * geometric_product.group1().zxyx())
                - (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], geometric_product[e3215]]) * self.group0().xxyw()),
        );
    }
}
impl GeometricQuotient<Line> for AntiFlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        3        0
    //    simd3        0        8        0
    //    simd4        2        0        0
    // Totals...
    // yes simd        6       11        0
    //  no simd       12       27        0
    fn geometric_quotient(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let reverse = Line::from_groups(
            // e415, e425, e435
            other.group0() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group1() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(/* scalar */ -f32::powi(other[e415], 2) - f32::powi(other[e425], 2) - f32::powi(other[e435], 2));
        let geometric_product = Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group1(),
        );
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x3::from(self[e321]) * geometric_product.group1()).with_w(0.0) + (geometric_product.group0().zxy() * self.group0().yzx()).with_w(0.0)
                - (geometric_product.group0().yzx() * self.group0().zxy()).with_w(0.0),
            // e4235, e4315, e4125, e3215
            (Simd32x3::from(self[e321]) * geometric_product.group0())
                .with_w((self[e235] * geometric_product[e415]) + (self[e315] * geometric_product[e425]) + (self[e125] * geometric_product[e435])),
        );
    }
}
impl GeometricQuotient<Motor> for AntiFlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6        5        0
    //    simd3        3        5        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        9       14        0
    //  no simd       15       36        0
    fn geometric_quotient(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let reverse = Motor::from_groups(
            // e415, e425, e435, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            -f32::powi(other[e415], 2) - f32::powi(other[e425], 2) - f32::powi(other[e435], 2) - f32::powi(other[e12345], 2),
        );
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e235, e315, e125, e5
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return Flector::from_groups(
            // e15, e25, e35, e45
            ((Simd32x3::from(self[e321]) * geometric_product.group1().xyz()) + (self.group0().yzx() * geometric_product.group0().zxy())
                - (self.group0().xxy() * geometric_product.group0().wzx())
                - (self.group0().zyz() * geometric_product.group0().yww()))
            .with_w(self[e321] * geometric_product[e12345]),
            // e4235, e4315, e4125, e3215
            (self.group0().www() * geometric_product.group0().xyz()).with_w(
                (self[e235] * geometric_product[e415]) + (self[e315] * geometric_product[e425]) + (self[e125] * geometric_product[e435]) + (self[e321] * geometric_product[e5]),
            ),
        );
    }
}
impl GeometricQuotient<MultiVector> for AntiFlatPoint {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       53       70        0
    //    simd2        1        2        0
    //    simd3       12       30        0
    //    simd4        7        9        0
    // Totals...
    // yes simd       73      111        0
    //  no simd      119      200        0
    fn geometric_quotient(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let reverse = MultiVector::from_groups(
            // scalar, e12345
            other.group0(),
            // e1, e2, e3, e4
            other.group1(),
            // e5
            other[e5],
            // e15, e25, e35, e45
            other.group3() * Simd32x4::from(-1.0),
            // e41, e42, e43
            other.group4() * Simd32x3::from(-1.0),
            // e23, e31, e12
            other.group5() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group6() * Simd32x4::from(-1.0),
            // e423, e431, e412
            other.group7() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group8() * Simd32x3::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group9(),
            // e1234
            other[e1234],
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e15] * other[e41])
                + 2.0 * (other[e25] * other[e42])
                + 2.0 * (other[e35] * other[e43])
                + 2.0 * (other[e3215] * other[e1234])
                + f32::powi(other[scalar], 2)
                + f32::powi(other[e1], 2)
                + f32::powi(other[e2], 2)
                + f32::powi(other[e3], 2)
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                + f32::powi(other[e321], 2)
                - f32::powi(other[e12345], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2)
                - 2.0 * (other[e4] * other[e5])
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(other_2[scalar]) * reverse.group0(),
            // e1, e2, e3, e4
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e5
            reverse[e5] * other_2[scalar],
            // e15, e25, e35, e45
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group4(),
            // e23, e31, e12
            Simd32x3::from(other_2[scalar]) * reverse.group5(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group6(),
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group7(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group8(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group9(),
            // e1234
            reverse[e1234] * other_2[scalar],
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e235] * geometric_product[e423]) + (self[e315] * geometric_product[e431]) + (self[e125] * geometric_product[e412]),
                -(self[e315] * geometric_product[e42]) - (self[e125] * geometric_product[e43]) - (self[e321] * geometric_product[e45]),
            ]) - (Simd32x2::from([geometric_product[e321], geometric_product[e41]]) * self.group0().wx()),
            // e1, e2, e3, e4
            ((Simd32x3::from(self[e321]) * geometric_product.group5()) + (geometric_product.group4().zxy() * self.group0().yzx())
                - (Simd32x3::from(geometric_product[e1234]) * self.group0().xyz())
                - (geometric_product.group4().yzx() * self.group0().zxy()))
            .with_w(self[e321] * geometric_product[e1234]),
            // e5
            (self[e235] * geometric_product[e4235]) + (self[e315] * geometric_product[e4315]) + (self[e125] * geometric_product[e4125])
                - (self[e235] * geometric_product[e23])
                - (self[e315] * geometric_product[e31])
                - (self[e125] * geometric_product[e12])
                - (self[e321] * geometric_product[e3215]),
            // e15, e25, e35, e45
            Simd32x4::from([
                -(self[e235] * geometric_product[e12345]) - (self[e235] * geometric_product[e321]) - (self[e125] * geometric_product[e2]) - (self[e125] * geometric_product[e425]),
                -(self[e235] * geometric_product[e3]) - (self[e235] * geometric_product[e435]) - (self[e315] * geometric_product[e12345]) - (self[e315] * geometric_product[e321]),
                -(self[e315] * geometric_product[e1]) - (self[e315] * geometric_product[e415]) - (self[e125] * geometric_product[e12345]) - (self[e125] * geometric_product[e321]),
                self[e125] * geometric_product[e412],
            ]) + (Simd32x4::from(self[e321]) * geometric_product.group8().with_w(geometric_product[e12345]))
                + (self.group0().yzx() * geometric_product.group1().zxy()).with_w(self[e235] * geometric_product[e423])
                + (self.group0().yzx() * geometric_product.group6().zxy()).with_w(self[e315] * geometric_product[e431]),
            // e41, e42, e43
            Simd32x3::from(self[e321]) * geometric_product.group7() * Simd32x3::from(-1.0),
            // e23, e31, e12
            (geometric_product.group7().zxy() * self.group0().yzx())
                - (Simd32x3::from(self[e321]) * geometric_product.group1().xyz())
                - (Simd32x3::from(geometric_product[e4]) * self.group0().xyz())
                - (geometric_product.group7().yzx() * self.group0().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(self[e315] * geometric_product[e43]) - (self[e321] * geometric_product[e4235]),
                -(self[e125] * geometric_product[e41]) - (self[e321] * geometric_product[e4315]),
                -(self[e235] * geometric_product[e42]) - (self[e321] * geometric_product[e4125]),
                (self[e315] * geometric_product[e42]) + (self[e125] * geometric_product[e43]),
            ]) + (self.group0().zxyw() * geometric_product.group4().yzx().with_w(geometric_product[scalar]))
                + (Simd32x3::from(geometric_product[e1234]) * self.group0().xyz()).with_w(self[e235] * geometric_product[e41]),
            // e423, e431, e412
            Simd32x3::from(self[e321]) * geometric_product.group4(),
            // e235, e315, e125
            (Simd32x3::from(geometric_product[scalar]) * self.group0().xyz())
                + (geometric_product.group5().yzx() * self.group0().zxy())
                + (self.group0().yzx() * geometric_product.group9().zxy())
                - (Simd32x3::from(self[e321]) * geometric_product.group3().xyz())
                - (Simd32x3::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235]]) * self.group0().xxy())
                - (Simd32x3::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45]]) * self.group0().zyz())
                - (geometric_product.group5().zxy() * self.group0().yzx()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(self[e235] * geometric_product[e4]) - (self[e125] * geometric_product[e431]),
                -(self[e235] * geometric_product[e412]) - (self[e315] * geometric_product[e4]),
                -(self[e315] * geometric_product[e423]) - (self[e125] * geometric_product[e4]),
                (self[e315] * geometric_product[e2])
                    + (self[e315] * geometric_product[e425])
                    + (self[e125] * geometric_product[e3])
                    + (self[e125] * geometric_product[e435])
                    + (self[e321] * geometric_product[e5]),
            ]) + (self.group0().wwwx() * geometric_product.group6().xyzx())
                + (geometric_product.group7().zxy() * self.group0().yzx()).with_w(self[e235] * geometric_product[e1]),
            // e1234
            self[e321] * geometric_product[e4] * -1.0,
        );
    }
}
impl GeometricQuotient<Plane> for AntiFlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        2        0
    //    simd4        2        6        0
    // Totals...
    // yes simd        5        8        0
    //  no simd       11       26        0
    fn geometric_quotient(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Plane::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(-f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2)) * other.group0(),
        );
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x3::from(1.0).with_w(0.0) * self.group0().www().with_w(0.0) * geometric_product.group0().xyz().with_w(0.0) * Simd32x4::from([-1.0, -1.0, -1.0, 0.0]),
            // e235, e315, e125, e5
            (self.group0().yzxx() * geometric_product.group0().zxyx())
                + Simd32x3::from(0.0).with_w((self[e315] * geometric_product[e4315]) + (self[e125] * geometric_product[e4125]))
                - (self.group0().zxyw() * geometric_product.group0().yzxw()),
        );
    }
}
impl GeometricQuotient<RoundPoint> for AntiFlatPoint {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6        9        0
    //    simd3        2        6        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        8       16        0
    //  no simd       12       31        0
    fn geometric_quotient(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2) - 2.0 * (other[e4] * other[e5]),
        );
        let geometric_product = RoundPoint::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from(other_2[scalar]) * other.group0(), /* e5 */ other[e5] * other_2[scalar]);
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            (-(Simd32x3::from(self[e321]) * geometric_product.group0().xyz()) - (Simd32x3::from(geometric_product[e4]) * self.group0().xyz())).with_w(0.0),
            // e15, e25, e35, e1234
            ((self.group0().yzx() * geometric_product.group0().zxy()) - (self.group0().zxy() * geometric_product.group0().yzx())).with_w(self[e321] * geometric_product[e4] * -1.0),
            // e4235, e4315, e4125, e3215
            (Simd32x3::from(geometric_product[e4]) * self.group0().xyz() * Simd32x3::from(-1.0))
                .with_w((self[e235] * geometric_product[e1]) + (self[e315] * geometric_product[e2]) + (self[e125] * geometric_product[e3]) + (self[e321] * geometric_product[e5])),
        );
    }
}
impl GeometricQuotient<Scalar> for AntiFlatPoint {
    type Output = AntiFlatPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        0        1
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        1        1
    //  no simd        0        4        1
    fn geometric_quotient(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ Simd32x4::from(1.0 / other[scalar]) * self.group0());
    }
}
impl GeometricQuotient<Sphere> for AntiFlatPoint {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6        8        0
    //    simd3        2        6        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        8       15        0
    //  no simd       12       30        0
    fn geometric_quotient(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e3215] * other[e1234]) - f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2),
        );
        let geometric_product = Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * other.group0(),
            // e1234
            other_2[scalar] * other[e1234],
        );
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            ((Simd32x3::from(geometric_product[e1234]) * self.group0().xyz()) - (Simd32x3::from(self[e321]) * geometric_product.group0().xyz())).with_w(0.0),
            // e235, e315, e125, e4
            ((self.group0().yzx() * geometric_product.group0().zxy()) - (self.group0().zxy() * geometric_product.group0().yzx())).with_w(self[e321] * geometric_product[e1234]),
            // e1, e2, e3, e5
            (Simd32x3::from(geometric_product[e1234]) * self.group0().xyz() * Simd32x3::from(-1.0)).with_w(
                (self[e235] * geometric_product[e4235]) + (self[e315] * geometric_product[e4315]) + (self[e125] * geometric_product[e4125])
                    - (self[e321] * geometric_product[e3215]),
            ),
        );
    }
}
impl GeometricQuotient<VersorEven> for AntiFlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       29       37        0
    //    simd3        6        9        0
    //    simd4        3       10        0
    // Totals...
    // yes simd       38       56        0
    //  no simd       59      104        0
    fn geometric_quotient(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let reverse = VersorEven::from_groups(
            // e423, e431, e412, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e5
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e4
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)
                - f32::powi(other[e12345], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125])
                - 2.0 * (other[e5] * other[e4]),
        );
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e5
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e1, e2, e3, e4
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (self.group0().www() * geometric_product.group0().xyz() * Simd32x3::from(-1.0)).with_w(
                (self[e235] * geometric_product[e423]) + (self[e315] * geometric_product[e431]) + (self[e125] * geometric_product[e412]) - (self[e321] * geometric_product[e321]),
            ),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(self[e235] * geometric_product[e4]) - (self[e125] * geometric_product[e431]) - (self[e321] * geometric_product[e1]),
                -(self[e235] * geometric_product[e412]) - (self[e315] * geometric_product[e4]) - (self[e321] * geometric_product[e2]),
                -(self[e315] * geometric_product[e423]) - (self[e125] * geometric_product[e4]) - (self[e321] * geometric_product[e3]),
                (self[e315] * geometric_product[e431]) + (self[e125] * geometric_product[e412]) + (self[e321] * geometric_product[e12345]),
            ]) + (self.group0().yzxx() * geometric_product.group0().zxyx()),
            // e15, e25, e35, e1234
            ((Simd32x3::from(self[e321]) * geometric_product.group2().xyz())
                + (self.group0().yzx() * geometric_product.group1().zxy())
                + (self.group0().yzx() * geometric_product.group3().zxy())
                - (Simd32x3::from([geometric_product[e12345], geometric_product[e435], geometric_product[e415]]) * self.group0().xxy())
                - (Simd32x3::from([geometric_product[e425], geometric_product[e12345], geometric_product[e12345]]) * self.group0().zyz())
                - (Simd32x3::from([geometric_product[e321], geometric_product[e3], geometric_product[e1]]) * self.group0().xxy())
                - (Simd32x3::from([geometric_product[e2], geometric_product[e321], geometric_product[e321]]) * self.group0().zyz()))
            .with_w(self[e321] * geometric_product[e4] * -1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(self[e235] * geometric_product[e4]) - (self[e125] * geometric_product[e431]),
                -(self[e235] * geometric_product[e412]) - (self[e315] * geometric_product[e4]),
                -(self[e315] * geometric_product[e423]) - (self[e125] * geometric_product[e4]),
                (self[e315] * geometric_product[e425])
                    + (self[e315] * geometric_product[e2])
                    + (self[e125] * geometric_product[e435])
                    + (self[e125] * geometric_product[e3])
                    + (self[e321] * geometric_product[e5]),
            ]) + (self.group0().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e415]))
                + (self.group0().wwwx() * geometric_product.group1().xyz().with_w(geometric_product[e1])),
        );
    }
}
impl GeometricQuotient<VersorOdd> for AntiFlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       21        0
    //    simd3        3        5        0
    //    simd4        8       16        0
    // Totals...
    // yes simd       29       42        0
    //  no simd       59      100        0
    fn geometric_quotient(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let reverse = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + 2.0 * (other[e1234] * other[e3215])
                + f32::powi(other[scalar], 2)
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2),
        );
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (self.group0().www() * geometric_product.group0().xyz()).with_w(
                -(self[e235] * geometric_product[e41]) - (self[e315] * geometric_product[e42]) - (self[e125] * geometric_product[e43]) - (self[e321] * geometric_product[e45]),
            ),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(self[e315] * geometric_product[e43]) - (self[e321] * geometric_product[e4235]),
                -(self[e125] * geometric_product[e41]) - (self[e321] * geometric_product[e4315]),
                -(self[e235] * geometric_product[e42]) - (self[e321] * geometric_product[e4125]),
                (self[e125] * geometric_product[e43]) + (self[e321] * geometric_product[scalar]),
            ]) + (Simd32x4::from([geometric_product[e42], geometric_product[e1234], geometric_product[e1234], geometric_product[e42]]) * self.group0().zyzy())
                + (Simd32x4::from([geometric_product[e1234], geometric_product[e43], geometric_product[e41], geometric_product[e41]]) * self.group0().xxyx()),
            // e235, e315, e125, e5
            (Simd32x4::from(self[e235]) * Simd32x4::from([geometric_product[scalar], geometric_product[e12], geometric_product[e4315], geometric_product[e4235]]))
                + (Simd32x4::from(self[e315]) * Simd32x4::from([geometric_product[e4125], geometric_product[scalar], geometric_product[e23], geometric_product[e4315]]))
                + (Simd32x4::from(self[e125]) * Simd32x4::from([geometric_product[e31], geometric_product[e4235], geometric_product[scalar], geometric_product[e4125]]))
                - (Simd32x4::from(self[e235]) * Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e31], geometric_product[e23]]))
                - (Simd32x4::from(self[e315]) * geometric_product.group1().zw().with_zw(geometric_product[e4235], geometric_product[e31]))
                - (Simd32x4::from(self[e125]) * Simd32x4::from([geometric_product[e4315], geometric_product[e23], geometric_product[e45], geometric_product[e12]]))
                - (Simd32x4::from(self[e321]) * geometric_product.group2().xyz().with_w(geometric_product[e3215])),
            // e1, e2, e3, e4
            ((Simd32x3::from(self[e321]) * geometric_product.group1().xyz()) + (self.group0().yzx() * geometric_product.group0().zxy())
                - (Simd32x3::from([geometric_product[e42], geometric_product[e1234], geometric_product[e1234]]) * self.group0().zyz())
                - (Simd32x3::from([geometric_product[e1234], geometric_product[e43], geometric_product[e41]]) * self.group0().xxy()))
            .with_w(self[e321] * geometric_product[e1234]),
        );
    }
}
impl std::ops::Div<GeometricQuotientInfix> for AntiFlector {
    type Output = GeometricQuotientInfixPartial<AntiFlector>;
    fn div(self, _rhs: GeometricQuotientInfix) -> Self::Output {
        GeometricQuotientInfixPartial(self)
    }
}
impl GeometricQuotient<AntiCircleRotor> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       23       32        0
    //    simd3        0        4        0
    //    simd4       15       18        0
    // Totals...
    // yes simd       38       54        0
    //  no simd       83      116        0
    fn geometric_quotient(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiCircleRotor::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, scalar
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                + f32::powi(other[scalar], 2)
                - f32::powi(other[e45], 2),
        );
        let geometric_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (geometric_product[e41] * self[e321]) + (geometric_product[e42] * self[e3]),
                (geometric_product[e42] * self[e321]) + (geometric_product[e43] * self[e1]),
                (geometric_product[e41] * self[e2]) + (geometric_product[e43] * self[e321]),
                -(geometric_product[e42] * self[e315]) - (geometric_product[e43] * self[e125]) - (geometric_product[e45] * self[e321]),
            ]) - (geometric_product.group0().zxy() * self.group1().yzx()).with_w(geometric_product[e41] * self[e235]),
            // e415, e425, e435, e321
            (self.group0().zx().with_zw(self[e5], self[e315]) * geometric_product.group0().yzz().with_w(geometric_product[e42]))
                + (self.group1().ww().with_zw(self[e315], self[e235]) * geometric_product.group0().xyx().with_w(geometric_product[e41]))
                + Simd32x3::from(0.0).with_w((geometric_product[e43] * self[e125]) + (geometric_product[scalar] * self[e321]) - (geometric_product[e12] * self[e3]))
                - (geometric_product.group1().wwwy() * self.group1().xyzy())
                - (geometric_product.group0().zxy() * self.group0().yzx()).with_w(geometric_product[e23] * self[e1]),
            // e235, e315, e125, e5
            (Simd32x4::from(geometric_product[scalar]) * self.group0().xyz().with_w(self[e5]))
                + (geometric_product.group2().zxyz() * self.group1().yzxz())
                + (self.group0().zx().with_zw(self[e5], self[e2]) * geometric_product.group1().yzz().with_w(geometric_product[e25]))
                + (self.group1().ww().with_zw(self[e315], self[e1]) * geometric_product.group1().xyx().with_w(geometric_product[e15]))
                - (geometric_product.group1().zxyx() * self.group0().yzxx())
                - (geometric_product.group1().wwwy() * self.group0().xyzy())
                - (self.group0().ww().with_zw(self[e2], self[e125]) * geometric_product.group2().xyx().with_w(geometric_product[e12]))
                - (self.group1().zx().with_zw(self[e321], self[e5]) * geometric_product.group2().yzz().with_w(geometric_product[e45])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (geometric_product[e43] * self[e315]) + (geometric_product[e23] * self[e321]) + (geometric_product[e31] * self[e3]) + (geometric_product[scalar] * self[e1]),
                (geometric_product[e41] * self[e125]) + (geometric_product[e31] * self[e321]) + (geometric_product[e12] * self[e1]) + (geometric_product[scalar] * self[e2]),
                (geometric_product[e42] * self[e235]) + (geometric_product[e23] * self[e2]) + (geometric_product[e12] * self[e321]) + (geometric_product[scalar] * self[e3]),
                0.0,
            ]) - (self.group1().yzxz() * geometric_product.group1().zxy().with_w(geometric_product[e43]))
                - (self.group0().zx().with_zw(self[e5], self[e2]) * geometric_product.group0().yzz().with_w(geometric_product[e42]))
                - (self.group1().ww().with_zw(self[e315], self[e1]) * geometric_product.group0().xyx().with_w(geometric_product[e41])),
        );
    }
}
impl GeometricQuotient<AntiDipoleInversion> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       38       54        0
    //    simd3        0        5        0
    //    simd4       20       22        0
    // Totals...
    // yes simd       58       81        0
    //  no simd      118      157        0
    fn geometric_quotient(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e4
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125])
                - 2.0 * (other[e4] * other[e5]),
        );
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e4
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e1, e2, e3, e5
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                geometric_product[e4] * self[e1] * -1.0,
                geometric_product[e4] * self[e2] * -1.0,
                geometric_product[e4] * self[e3] * -1.0,
                (geometric_product[e431] * self[e315])
                    + (geometric_product[e412] * self[e125])
                    + (geometric_product[e1] * self[e1])
                    + (geometric_product[e2] * self[e2])
                    + (geometric_product[e3] * self[e3]),
            ]) + (geometric_product.group0().zxy() * self.group1().yzx()).with_w(geometric_product[e423] * self[e235])
                - (self.group0().ww().with_zw(self[e2], self[e321]) * geometric_product.group0().xyx().with_w(geometric_product[e321]))
                - (self.group1().zx().with_zw(self[e321], self[e5]) * geometric_product.group0().yzz().with_w(geometric_product[e4])),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(geometric_product[e1] * self[e321]) - (geometric_product[e2] * self[e3]),
                -(geometric_product[e2] * self[e321]) - (geometric_product[e3] * self[e1]),
                -(geometric_product[e1] * self[e2]) - (geometric_product[e3] * self[e321]),
                geometric_product[e412] * self[e125],
            ]) + (self.group0().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e423]))
                + (geometric_product.group3().zxy() * self.group1().yzx()).with_w(geometric_product[e431] * self[e315])
                - (Simd32x4::from(geometric_product[e4]) * self.group0().xyz().with_w(self[e5]))
                - (geometric_product.group1().wwwz() * self.group1().xyzz())
                - (self.group0().zx().with_zw(self[e5], self[e2]) * geometric_product.group0().yzz().with_w(geometric_product[e425]))
                - (self.group1().ww().with_zw(self[e315], self[e1]) * geometric_product.group0().xyx().with_w(geometric_product[e415])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (geometric_product[e3] * self[e315]) + (geometric_product[e5] * self[e1])
                    - (geometric_product[e425] * self[e125])
                    - (geometric_product[e321] * self[e235])
                    - (geometric_product[e125] * self[e2])
                    - (geometric_product[e1] * self[e5])
                    - (geometric_product[e2] * self[e125]),
                (geometric_product[e1] * self[e125]) + (geometric_product[e5] * self[e2])
                    - (geometric_product[e435] * self[e235])
                    - (geometric_product[e321] * self[e315])
                    - (geometric_product[e235] * self[e3])
                    - (geometric_product[e2] * self[e5])
                    - (geometric_product[e3] * self[e235]),
                (geometric_product[e2] * self[e235]) + (geometric_product[e5] * self[e3])
                    - (geometric_product[e435] * self[e5])
                    - (geometric_product[e321] * self[e125])
                    - (geometric_product[e315] * self[e1])
                    - (geometric_product[e1] * self[e315])
                    - (geometric_product[e3] * self[e5]),
                0.0,
            ]) + (self.group0().ww().with_zw(self[e2], self[e2]) * geometric_product.group2().xyx().with_w(geometric_product[e431]))
                + (self.group1().zx().with_zw(self[e321], self[e3]) * geometric_product.group2().yzz().with_w(geometric_product[e412]))
                + (geometric_product.group1().zxy() * self.group0().yzx()).with_w(geometric_product[e423] * self[e1])
                - (self.group1().ww().with_zw(self[e315], self[e321]) * geometric_product.group1().xyx().with_w(geometric_product[e4])),
            // e4235, e4315, e4125, e3215
            (geometric_product.group1().xyxy() * self.group0().ww().with_zw(self[e2], self[e315]))
                + (geometric_product.group1().yzzz() * self.group1().zx().with_zw(self[e321], self[e125]))
                + (self.group0().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e415]))
                + Simd32x3::from(0.0).with_w(
                    (geometric_product[e1] * self[e235]) + (geometric_product[e2] * self[e315]) + (geometric_product[e3] * self[e125]) + (geometric_product[e5] * self[e321]),
                )
                - (geometric_product.group2().wwwz() * self.group0().xyz().with_w(self[e3]))
                - (self.group1().yzxy() * geometric_product.group1().zxy().with_w(geometric_product[e315]))
                - (self.group0().zx().with_zw(self[e5], self[e1]) * geometric_product.group0().yzz().with_w(geometric_product[e235]))
                - (self.group1().ww().with_zw(self[e315], self[e5]) * geometric_product.group0().xyx().with_w(geometric_product[e321])),
        );
    }
}
impl GeometricQuotient<AntiDualNum> for AntiFlector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        3        0
    //    simd2        0        1        0
    //    simd3        1        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        2        7        0
    //  no simd        4       15        0
    fn geometric_quotient(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDualNum::from_groups(/* e3215, scalar */ Simd32x2::from(f32::powi(other[scalar], -2)) * other.group0());
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            ((Simd32x3::from(geometric_product[scalar]) * self.group0().xyz()) - (Simd32x3::from(geometric_product[e3215]) * self.group1().xyz()))
                .with_w(geometric_product[scalar] * self[e321]),
            // e1, e2, e3, e5
            geometric_product
                .group0()
                .yy()
                .with_zw(geometric_product[scalar], (geometric_product[scalar] * self[e5]) - (geometric_product[e3215] * self[e321]))
                * self.group1().xyz().with_w(1.0),
        );
    }
}
impl GeometricQuotient<AntiFlatPoint> for AntiFlector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       12        0
    //    simd4        2        5        0
    // Totals...
    // yes simd        6       17        0
    //  no simd       12       32        0
    fn geometric_quotient(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlatPoint::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(f32::powi(other[e321], -2)) * Simd32x4::from([other[e235] * -1.0, other[e315] * -1.0, other[e125] * -1.0, other[e321] * -1.0]),
        );
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(geometric_product[e321]) * self.group1().xyz().with_w(self[e321]) * Simd32x4::from(-1.0),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (geometric_product[e235] * self[e321]) + (geometric_product[e315] * self[e3]),
                (geometric_product[e315] * self[e321]) + (geometric_product[e125] * self[e1]),
                (geometric_product[e235] * self[e2]) + (geometric_product[e125] * self[e321]),
                -(geometric_product[e125] * self[e3]) - (geometric_product[e321] * self[e5]),
            ]) - (geometric_product.group0().zxyx() * self.group1().yzxx())
                - (geometric_product.group0().wwwy() * self.group0().xyz().with_w(self[e2])),
        );
    }
}
impl GeometricQuotient<AntiFlector> for AntiFlector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7        8        0
    //    simd4        9       13        0
    // Totals...
    // yes simd       16       21        0
    //  no simd       43       60        0
    fn geometric_quotient(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiFlector::from_groups(/* e235, e315, e125, e321 */ other.group0() * Simd32x4::from(-1.0), /* e1, e2, e3, e5 */ other.group1());
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2),
        );
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e1, e2, e3, e5
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                -(geometric_product[e1] * self[e321]) - (geometric_product[e2] * self[e3]),
                -(geometric_product[e2] * self[e321]) - (geometric_product[e3] * self[e1]),
                -(geometric_product[e1] * self[e2]) - (geometric_product[e3] * self[e321]),
                (geometric_product[e2] * self[e2]) + (geometric_product[e3] * self[e3]),
            ]) + (geometric_product.group1().zxyx() * self.group1().yzxx())
                - (Simd32x4::from(geometric_product[e321]) * self.group1().xyz().with_w(self[e321])),
            // e15, e25, e35, e3215
            (Simd32x4::from(geometric_product[e5]) * self.group1().xyz().with_w(self[e321]))
                + (geometric_product.group1().zxyz() * self.group0().yzxz())
                + (self.group0().ww().with_zw(self[e2], self[e235]) * geometric_product.group0().xyx().with_w(geometric_product[e1]))
                + (self.group1().zx().with_zw(self[e321], self[e315]) * geometric_product.group0().yzz().with_w(geometric_product[e2]))
                - (geometric_product.group0().zxyx() * self.group1().yzxx())
                - (geometric_product.group0().wwwy() * self.group0().xyz().with_w(self[e2]))
                - (self.group0().zx().with_zw(self[e5], self[e5]) * geometric_product.group1().yzz().with_w(geometric_product[e321]))
                - (self.group1().ww().with_zw(self[e315], self[e3]) * geometric_product.group1().xyx().with_w(geometric_product[e125])),
        );
    }
}
impl GeometricQuotient<AntiLine> for AntiFlector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       14        0
    //    simd3        0        6        0
    //    simd4        6        4        0
    // Totals...
    // yes simd       16       24        0
    //  no simd       34       48        0
    fn geometric_quotient(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiLine::from_groups(
            // e23, e31, e12
            other.group0() * Simd32x3::from(-1.0),
            // e15, e25, e35
            other.group1() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(/* scalar */ f32::powi(other[e23], 2) + f32::powi(other[e31], 2) + f32::powi(other[e12], 2));
        let geometric_product = AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e15, e25, e35
            Simd32x3::from(other_2[scalar]) * reverse.group1(),
        );
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (self[e125] * geometric_product[e31]) + (self[e2] * geometric_product[e35]) + (self[e5] * geometric_product[e23]),
                (self[e235] * geometric_product[e12]) + (self[e3] * geometric_product[e15]) + (self[e5] * geometric_product[e31]),
                (self[e315] * geometric_product[e23]) + (self[e1] * geometric_product[e25]) + (self[e5] * geometric_product[e12]),
                0.0,
            ]) - (self.group0().ww().with_zw(self[e2], self[e2]) * geometric_product.group1().xyx().with_w(geometric_product[e31]))
                - (self.group1().zx().with_zw(self[e321], self[e3]) * geometric_product.group1().yzz().with_w(geometric_product[e12]))
                - (geometric_product.group0().zxy() * self.group0().yzx()).with_w(self[e1] * geometric_product[e23]),
            // e1, e2, e3, e5
            (self.group0().ww().with_zw(self[e2], self[e1]) * geometric_product.group0().xyx().with_w(geometric_product[e15]))
                + (self.group1().zx().with_zw(self[e321], self[e2]) * geometric_product.group0().yzz().with_w(geometric_product[e25]))
                + Simd32x3::from(0.0).with_w((self[e3] * geometric_product[e35]) - (self[e315] * geometric_product[e31]) - (self[e125] * geometric_product[e12]))
                - (geometric_product.group0().zxy() * self.group1().yzx()).with_w(self[e235] * geometric_product[e23]),
        );
    }
}
impl GeometricQuotient<AntiMotor> for AntiFlector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       18        0
    //    simd3        0        2        0
    //    simd4        8       10        0
    // Totals...
    // yes simd       23       30        0
    //  no simd       47       64        0
    fn geometric_quotient(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, e3215
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e23], 2) + f32::powi(other[e31], 2) + f32::powi(other[e12], 2) + f32::powi(other[scalar], 2),
        );
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e15, e25, e35, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (self[e125] * geometric_product[e31]) + (self[e2] * geometric_product[e35]) + (self[e5] * geometric_product[e23]) - (self[e3] * geometric_product[e25]),
                (self[e315] * geometric_product[scalar]) + (self[e3] * geometric_product[e15]) + (self[e5] * geometric_product[e31]) - (self[e2] * geometric_product[e3215]),
                (self[e125] * geometric_product[scalar]) + (self[e1] * geometric_product[e25]) + (self[e5] * geometric_product[e12]) - (self[e3] * geometric_product[e3215]),
                0.0,
            ]) + (self.group0().xxyw() * geometric_product.group0().wzxw())
                - (self.group1().xxyz() * geometric_product.group1().wzx().with_w(geometric_product[e12]))
                - (geometric_product.group0().zxyx() * self.group0().yzx().with_w(self[e1]))
                - (self.group0().www() * geometric_product.group1().xyz()).with_w(self[e2] * geometric_product[e31]),
            // e1, e2, e3, e5
            (self.group1().xxyy() * geometric_product.group0().wzx().with_w(geometric_product[e25]))
                + (self.group1().zyzz() * geometric_product.group0().yww().with_w(geometric_product[e35]))
                + Simd32x3::from(0.0).with_w(
                    (self[e5] * geometric_product[scalar])
                        - (self[e315] * geometric_product[e31])
                        - (self[e125] * geometric_product[e12])
                        - (self[e321] * geometric_product[e3215]),
                )
                + (self.group0().www() * geometric_product.group0().xyz()).with_w(self[e1] * geometric_product[e15])
                - (geometric_product.group0().zxyx() * self.group1().yzx().with_w(self[e235])),
        );
    }
}
impl GeometricQuotient<AntiPlane> for AntiFlector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       16        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       13       20        0
    //  no simd       22       32        0
    fn geometric_quotient(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiPlane::from_groups(
            // e1, e2, e3, e5
            Simd32x4::from(f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)) * other.group0(),
        );
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                -(self[e321] * geometric_product[e1]) - (self[e3] * geometric_product[e2]),
                -(self[e321] * geometric_product[e2]) - (self[e1] * geometric_product[e3]),
                -(self[e321] * geometric_product[e3]) - (self[e2] * geometric_product[e1]),
                (self[e2] * geometric_product[e2]) + (self[e3] * geometric_product[e3]),
            ]) + (self.group1().yzxx() * geometric_product.group0().zxyx()),
            // e15, e25, e35, e3215
            Simd32x4::from([
                -(self[e125] * geometric_product[e2]) - (self[e5] * geometric_product[e1]),
                -(self[e235] * geometric_product[e3]) - (self[e5] * geometric_product[e2]),
                -(self[e315] * geometric_product[e1]) - (self[e5] * geometric_product[e3]),
                (self[e125] * geometric_product[e3]) + (self[e321] * geometric_product[e5]),
            ]) + (self.group0().yzxx() * geometric_product.group0().zxyx())
                + (geometric_product.group0().wwwy() * self.group1().xyz().with_w(self[e315])),
        );
    }
}
impl GeometricQuotient<AntiScalar> for AntiFlector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        1
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        5        1
    //  no simd        0       17        1
    fn geometric_quotient(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiScalar::from_groups(/* e12345 */ 1.0 / other[e12345] * -1.0);
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(geometric_product[e12345]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(geometric_product[e12345]) * self.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
    }
}
impl GeometricQuotient<Circle> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       34        0
    //    simd3        0        8        0
    //    simd4       15       13        0
    // Totals...
    // yes simd       32       55        0
    //  no simd       77      110        0
    fn geometric_quotient(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let reverse = Circle::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125
            other.group2() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group2(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e3] * geometric_product[e431] * -1.0,
                self[e1] * geometric_product[e412] * -1.0,
                self[e321] * geometric_product[e412] * -1.0,
                (self[e315] * geometric_product[e431]) + (self[e125] * geometric_product[e412]),
            ]) + (geometric_product.group0().zxy() * self.group1().yzx()).with_w(self[e235] * geometric_product[e423])
                - (self.group0().ww().with_zw(self[e2], geometric_product[e321]) * geometric_product.group0().xyx().with_w(self[e321])),
            // e23, e31, e12, e45
            (self.group0().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e423]))
                + Simd32x3::from(0.0).with_w((self[e315] * geometric_product[e431]) + (self[e125] * geometric_product[e412]))
                - (self.group1().xyzz() * geometric_product.group1().wwwz())
                - (self.group0().zx().with_zw(self[e5], geometric_product[e425]) * geometric_product.group0().yzz().with_w(self[e2]))
                - (self.group1().ww().with_zw(self[e315], geometric_product[e415]) * geometric_product.group0().xyx().with_w(self[e1])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(self[e235] * geometric_product[e321]) - (self[e125] * geometric_product[e425]) - (self[e2] * geometric_product[e125]) - (self[e5] * geometric_product[e415]),
                -(self[e235] * geometric_product[e435]) - (self[e315] * geometric_product[e321]) - (self[e3] * geometric_product[e235]) - (self[e5] * geometric_product[e425]),
                -(self[e315] * geometric_product[e415]) - (self[e125] * geometric_product[e321]) - (self[e1] * geometric_product[e315]) - (self[e5] * geometric_product[e435]),
                0.0,
            ]) + (self.group0().ww().with_zw(self[e2], self[e1]) * geometric_product.group2().xyx().with_w(geometric_product[e423]))
                + (self.group1().zx().with_zw(self[e321], self[e2]) * geometric_product.group2().yzz().with_w(geometric_product[e431]))
                + (self.group0().yzx() * geometric_product.group1().zxy()).with_w(self[e3] * geometric_product[e412]),
            // e4235, e4315, e4125, e3215
            (self.group0().wwwy() * geometric_product.group1().xyzy())
                + (geometric_product.group1().yzxz() * self.group1().zxy().with_w(self[e125]))
                + Simd32x3::from(0.0).with_w(self[e5] * geometric_product[e321] * -1.0)
                + (geometric_product.group0().zxy() * self.group0().yzx()).with_w(self[e235] * geometric_product[e415])
                - (self.group0().zx().with_zw(self[e5], self[e2]) * geometric_product.group0().yzz().with_w(geometric_product[e315]))
                - (self.group1().ww().with_zw(self[e315], self[e1]) * geometric_product.group0().xyx().with_w(geometric_product[e235]))
                - (self.group1().yzx() * geometric_product.group1().zxy()).with_w(self[e3] * geometric_product[e125]),
        );
    }
}
impl GeometricQuotient<CircleRotor> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       23       42        0
    //    simd3        0        7        0
    //    simd4       15       14        0
    // Totals...
    // yes simd       38       63        0
    //  no simd       83      119        0
    fn geometric_quotient(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let reverse = CircleRotor::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e12345
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - f32::powi(other[e12345], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e3] * geometric_product[e431] * -1.0,
                self[e1] * geometric_product[e412] * -1.0,
                self[e321] * geometric_product[e412] * -1.0,
                (self[e315] * geometric_product[e431]) + (self[e125] * geometric_product[e412]),
            ]) + (geometric_product.group0().zxy() * self.group1().yzx()).with_w(self[e235] * geometric_product[e423])
                - (self.group0().ww().with_zw(self[e2], geometric_product[e321]) * geometric_product.group0().xyx().with_w(self[e321])),
            // e23, e31, e12, e45
            (self.group0().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e423]))
                + Simd32x3::from(0.0).with_w((self[e315] * geometric_product[e431]) + (self[e125] * geometric_product[e412]) + (self[e321] * geometric_product[e12345]))
                - (self.group1().xyzz() * geometric_product.group1().wwwz())
                - (self.group0().zx().with_zw(self[e5], geometric_product[e425]) * geometric_product.group0().yzz().with_w(self[e2]))
                - (self.group1().ww().with_zw(self[e315], geometric_product[e415]) * geometric_product.group0().xyx().with_w(self[e1])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(self[e235] * geometric_product[e321])
                    - (self[e235] * geometric_product[e12345])
                    - (self[e125] * geometric_product[e425])
                    - (self[e2] * geometric_product[e125])
                    - (self[e5] * geometric_product[e415]),
                -(self[e235] * geometric_product[e435])
                    - (self[e315] * geometric_product[e321])
                    - (self[e315] * geometric_product[e12345])
                    - (self[e3] * geometric_product[e235])
                    - (self[e5] * geometric_product[e425]),
                -(self[e315] * geometric_product[e415])
                    - (self[e125] * geometric_product[e321])
                    - (self[e125] * geometric_product[e12345])
                    - (self[e1] * geometric_product[e315])
                    - (self[e5] * geometric_product[e435]),
                0.0,
            ]) + (self.group0().yzx() * geometric_product.group1().zxy()).with_w(self[e1] * geometric_product[e423])
                + (self.group0().www() * geometric_product.group2().xyz()).with_w(self[e2] * geometric_product[e431])
                + (self.group1().zxy() * geometric_product.group2().yzx()).with_w(self[e3] * geometric_product[e412]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e3] * geometric_product[e425],
                self[e2] * geometric_product[e12345],
                self[e3] * geometric_product[e12345],
                -(self[e5] * geometric_product[e321]) - (self[e5] * geometric_product[e12345]),
            ]) + (Simd32x4::from([geometric_product[e12345], geometric_product[e435], geometric_product[e415], geometric_product[e435]]) * self.group1().xxy().with_w(self[e125]))
                + (self.group0().wwwy() * geometric_product.group1().xyzy())
                + (geometric_product.group0().zxy() * self.group0().yzx()).with_w(self[e235] * geometric_product[e415])
                - (self.group1().yzxz() * geometric_product.group1().zxy().with_w(geometric_product[e125]))
                - (self.group0().zx().with_zw(self[e5], geometric_product[e315]) * geometric_product.group0().yzz().with_w(self[e2]))
                - (self.group1().ww().with_zw(self[e315], geometric_product[e235]) * geometric_product.group0().xyx().with_w(self[e1])),
        );
    }
}
impl GeometricQuotient<Dipole> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       31        0
    //    simd3        0        9        0
    //    simd4       14       12        0
    // Totals...
    // yes simd       32       52        0
    //  no simd       74      106        0
    fn geometric_quotient(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let reverse = Dipole::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35
            other.group2() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2),
        );
        let geometric_product = Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35
            Simd32x3::from(other_2[scalar]) * reverse.group2(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e321] * geometric_product[e41]) + (self[e3] * geometric_product[e42]),
                (self[e321] * geometric_product[e42]) + (self[e1] * geometric_product[e43]),
                (self[e321] * geometric_product[e43]) + (self[e2] * geometric_product[e41]),
                -(self[e315] * geometric_product[e42]) - (self[e125] * geometric_product[e43]) - (self[e321] * geometric_product[e45]),
            ]) - (geometric_product.group0().zxy() * self.group1().yzx()).with_w(self[e235] * geometric_product[e41]),
            // e415, e425, e435, e321
            (self.group0().zx().with_zw(self[e5], self[e315]) * geometric_product.group0().yzz().with_w(geometric_product[e42]))
                + (self.group1().ww().with_zw(self[e315], self[e235]) * geometric_product.group0().xyx().with_w(geometric_product[e41]))
                + Simd32x3::from(0.0).with_w((self[e125] * geometric_product[e43]) - (self[e3] * geometric_product[e12]))
                - (self.group1().xyzy() * geometric_product.group1().wwwy())
                - (geometric_product.group0().zxy() * self.group0().yzx()).with_w(self[e1] * geometric_product[e23]),
            // e235, e315, e125, e5
            (self.group1().yzxx() * geometric_product.group2().zxy().with_w(geometric_product[e15]))
                + (self.group0().zxy() * geometric_product.group1().yzx()).with_w(self[e2] * geometric_product[e25])
                + (self.group1().www() * geometric_product.group1().xyz()).with_w(self[e3] * geometric_product[e35])
                - (self.group0().xyxz() * geometric_product.group1().wwyz())
                - (geometric_product.group1().zxww() * self.group0().yzz().with_w(self[e5]))
                - (self.group0().ww().with_zw(self[e2], geometric_product[e23]) * geometric_product.group2().xyx().with_w(self[e235]))
                - (self.group1().zx().with_zw(self[e321], geometric_product[e31]) * geometric_product.group2().yzz().with_w(self[e315])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e315] * geometric_product[e43]) + (self[e321] * geometric_product[e23]) + (self[e3] * geometric_product[e31]),
                (self[e125] * geometric_product[e41]) + (self[e321] * geometric_product[e31]) + (self[e1] * geometric_product[e12]),
                (self[e235] * geometric_product[e42]) + (self[e321] * geometric_product[e12]) + (self[e2] * geometric_product[e23]),
                0.0,
            ]) - (self.group0().zx().with_zw(self[e5], self[e2]) * geometric_product.group0().yzz().with_w(geometric_product[e42]))
                - (self.group1().ww().with_zw(self[e315], self[e1]) * geometric_product.group0().xyx().with_w(geometric_product[e41]))
                - (self.group1().yzx() * geometric_product.group1().zxy()).with_w(self[e3] * geometric_product[e43]),
        );
    }
}
impl GeometricQuotient<DipoleInversion> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       23       39        0
    //    simd3        0        9        0
    //    simd4       24       22        0
    // Totals...
    // yes simd       47       70        0
    //  no simd      119      154        0
    fn geometric_quotient(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let reverse = DipoleInversion::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + 2.0 * (other[e1234] * other[e3215])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2),
        );
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (self.group1().xyzz() * geometric_product.group2().www().with_w(geometric_product[e4125]))
                + (self.group0().ww().with_zw(self[e2], geometric_product[e4235]) * geometric_product.group0().xyx().with_w(self[e1]))
                + (self.group1().zx().with_zw(self[e321], geometric_product[e4315]) * geometric_product.group0().yzz().with_w(self[e2]))
                + Simd32x3::from(0.0).with_w(
                    (self[e5] * geometric_product[e1234]) - (self[e315] * geometric_product[e42]) - (self[e125] * geometric_product[e43]) - (self[e321] * geometric_product[e45]),
                )
                - (geometric_product.group0().zxy() * self.group1().yzx()).with_w(self[e235] * geometric_product[e41]),
            // e415, e425, e435, e321
            Simd32x4::from([self[e2] * geometric_product[e4125], self[e3] * geometric_product[e4235], self[e1] * geometric_product[e4315], 0.0])
                + (self.group0().zx().with_zw(self[e5], self[e315]) * geometric_product.group0().yzz().with_w(geometric_product[e42]))
                + (self.group1().ww().with_zw(self[e315], self[e235]) * geometric_product.group0().xyx().with_w(geometric_product[e41]))
                + (geometric_product.group2().www() * self.group0().xyz()).with_w(self[e125] * geometric_product[e43])
                - (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], geometric_product[e12]]) * self.group1().xxyz())
                - (Simd32x4::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45], geometric_product[e1234]]) * self.group1().zyzw())
                - (geometric_product.group0().zxy() * self.group0().yzx()).with_w(self[e1] * geometric_product[e23])
                - (self.group0().www() * geometric_product.group3().xyz()).with_w(self[e2] * geometric_product[e31]),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e3] * geometric_product[e25]) - (self[e5] * geometric_product[e4235]),
                -(self[e2] * geometric_product[e3215]) - (self[e5] * geometric_product[e4315]),
                -(self[e3] * geometric_product[e3215]) - (self[e5] * geometric_product[e4125]),
                (self[e2] * geometric_product[e25]) + (self[e3] * geometric_product[e35]),
            ]) + (Simd32x4::from([geometric_product[e31], geometric_product[e4235], geometric_product[e23], geometric_product[e4315]]) * self.group0().zzyy())
                + (Simd32x4::from([geometric_product[e4125], geometric_product[e12], geometric_product[e4315], geometric_product[e4235]]) * self.group0().yxxx())
                + (self.group1().wwwx() * geometric_product.group1().xyz().with_w(geometric_product[e15]))
                + (self.group1().yzx() * geometric_product.group2().zxy()).with_w(self[e125] * geometric_product[e4125])
                - (Simd32x4::from(self[e235]) * Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e31], geometric_product[e23]]))
                - (Simd32x4::from(self[e315]) * geometric_product.group1().zw().with_zw(geometric_product[e4235], geometric_product[e31]))
                - (Simd32x4::from(self[e125]) * Simd32x4::from([geometric_product[e4315], geometric_product[e23], geometric_product[e45], geometric_product[e12]]))
                - (Simd32x4::from(self[e321]) * geometric_product.group2().xyz().with_w(geometric_product[e3215]))
                - (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e45]]) * self.group1().xxyw()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e321] * geometric_product[e23]) + (self[e3] * geometric_product[e31]) - (self[e2] * geometric_product[e12]),
                (self[e321] * geometric_product[e31]) + (self[e1] * geometric_product[e12]) - (self[e3] * geometric_product[e23]),
                (self[e321] * geometric_product[e12]) + (self[e2] * geometric_product[e23]) - (self[e1] * geometric_product[e31]),
                0.0,
            ]) + (geometric_product.group0().zxy() * self.group0().yzx()).with_w(self[e321] * geometric_product[e1234])
                - (self.group0().zx().with_zw(self[e5], self[e2]) * geometric_product.group0().yzz().with_w(geometric_product[e42]))
                - (self.group1().ww().with_zw(self[e315], self[e1]) * geometric_product.group0().xyx().with_w(geometric_product[e41]))
                - (geometric_product.group2().www() * self.group0().xyz()).with_w(self[e3] * geometric_product[e43]),
        );
    }
}
impl GeometricQuotient<DualNum> for AntiFlector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        4        0
    //    simd2        0        1        0
    //    simd3        1        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        2        8        0
    //  no simd        4       16        0
    fn geometric_quotient(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DualNum::from_groups(/* e5, e12345 */ Simd32x2::from(f32::powi(other[e12345], -2) * -1.0) * other.group0());
        return Flector::from_groups(
            // e15, e25, e35, e45
            ((Simd32x3::from(geometric_product[e5]) * self.group1().xyz()) - (Simd32x3::from(geometric_product[e12345]) * self.group0().xyz()))
                .with_w(self[e321] * geometric_product[e12345]),
            // e4235, e4315, e4125, e3215
            geometric_product
                .group0()
                .yy()
                .with_zw(geometric_product[e12345], (self[e321] * geometric_product[e5]) - (self[e5] * geometric_product[e12345]))
                * self.group1().xyz().with_w(1.0),
        );
    }
}
impl GeometricQuotient<FlatPoint> for AntiFlector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       13        0
    //    simd4        2        5        0
    // Totals...
    // yes simd        6       18        0
    //  no simd       12       33        0
    fn geometric_quotient(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = FlatPoint::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(f32::powi(other[e45], -2) * -1.0) * Simd32x4::from([other[e15] * -1.0, other[e25] * -1.0, other[e35] * -1.0, other[e45] * -1.0]),
        );
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(geometric_product[e45]) * self.group1().xyz().with_w(self[e321]) * Simd32x4::from(-1.0),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e321] * geometric_product[e15]) - (self[e3] * geometric_product[e25]),
                -(self[e321] * geometric_product[e25]) - (self[e1] * geometric_product[e35]),
                -(self[e321] * geometric_product[e35]) - (self[e2] * geometric_product[e15]),
                (self[e2] * geometric_product[e25]) + (self[e3] * geometric_product[e35]),
            ]) + (self.group1().yzxx() * geometric_product.group0().zxyx())
                - (Simd32x4::from(geometric_product[e45]) * self.group0().xyz().with_w(self[e5])),
        );
    }
}
impl GeometricQuotient<Flector> for AntiFlector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       25        0
    //    simd3        0        1        0
    //    simd4        6        8        0
    // Totals...
    // yes simd       25       34        0
    //  no simd       43       60        0
    fn geometric_quotient(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let reverse = Flector::from_groups(
            // e15, e25, e35, e45
            other.group0() * Simd32x4::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group1(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            -f32::powi(other[e45], 2) - f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2),
        );
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                -(self[e1] * geometric_product[e45]) - (self[e3] * geometric_product[e4315]),
                -(self[e1] * geometric_product[e4125]) - (self[e2] * geometric_product[e45]),
                -(self[e2] * geometric_product[e4235]) - (self[e3] * geometric_product[e45]),
                (self[e2] * geometric_product[e4315]) + (self[e3] * geometric_product[e4125]),
            ]) + (self.group1().yzxx() * geometric_product.group1().zxyx())
                - (Simd32x4::from(self[e321]) * geometric_product.group1().xyz().with_w(geometric_product[e45])),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e321] * geometric_product[e15]) - (self[e1] * geometric_product[e3215]) - (self[e3] * geometric_product[e25]) - (self[e5] * geometric_product[e4235]),
                -(self[e321] * geometric_product[e25]) - (self[e1] * geometric_product[e35]) - (self[e2] * geometric_product[e3215]) - (self[e5] * geometric_product[e4315]),
                -(self[e321] * geometric_product[e35]) - (self[e2] * geometric_product[e15]) - (self[e3] * geometric_product[e3215]) - (self[e5] * geometric_product[e4125]),
                (self[e125] * geometric_product[e4125]) + (self[e1] * geometric_product[e15]) + (self[e2] * geometric_product[e25]) + (self[e3] * geometric_product[e35]),
            ]) + (self.group0().yzxx() * geometric_product.group1().zxyx())
                + (self.group1().yzx() * geometric_product.group0().zxy()).with_w(self[e315] * geometric_product[e4315])
                - (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], geometric_product[e3215]]) * self.group0().xxyw())
                - (Simd32x4::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45], geometric_product[e45]]) * self.group0().zyz().with_w(self[e5])),
        );
    }
}
impl GeometricQuotient<Line> for AntiFlector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       12        0
    //    simd3        0        4        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       16       22        0
    //  no simd       34       48        0
    fn geometric_quotient(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let reverse = Line::from_groups(
            // e415, e425, e435
            other.group0() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group1() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(/* scalar */ -f32::powi(other[e415], 2) - f32::powi(other[e425], 2) - f32::powi(other[e435], 2));
        let geometric_product = Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group1(),
        );
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e315] * geometric_product[e435]) + (self[e321] * geometric_product[e235]) + (self[e3] * geometric_product[e315]),
                (self[e125] * geometric_product[e415]) + (self[e321] * geometric_product[e315]) + (self[e1] * geometric_product[e125]),
                (self[e235] * geometric_product[e425]) + (self[e321] * geometric_product[e125]) + (self[e2] * geometric_product[e235]),
                0.0,
            ]) - (self.group1().yzxz() * geometric_product.group1().zxy().with_w(geometric_product[e435]))
                - (self.group0().zx().with_zw(self[e5], self[e2]) * geometric_product.group0().yzz().with_w(geometric_product[e425]))
                - (self.group1().ww().with_zw(self[e315], self[e1]) * geometric_product.group0().xyx().with_w(geometric_product[e415])),
            // e4235, e4315, e4125, e3215
            (self.group0().ww().with_zw(self[e2], self[e235]) * geometric_product.group0().xyx().with_w(geometric_product[e415]))
                + (self.group1().zx().with_zw(self[e321], self[e315]) * geometric_product.group0().yzz().with_w(geometric_product[e425]))
                + Simd32x3::from(0.0).with_w((self[e125] * geometric_product[e435]) - (self[e2] * geometric_product[e315]) - (self[e3] * geometric_product[e125]))
                - (self.group1().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e235])),
        );
    }
}
impl GeometricQuotient<Motor> for AntiFlector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       16        0
    //    simd4        8       12        0
    // Totals...
    // yes simd       23       28        0
    //  no simd       47       64        0
    fn geometric_quotient(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let reverse = Motor::from_groups(
            // e415, e425, e435, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            -f32::powi(other[e415], 2) - f32::powi(other[e425], 2) - f32::powi(other[e435], 2) - f32::powi(other[e12345], 2),
        );
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e235, e315, e125, e5
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e321] * geometric_product[e235]) + (self[e1] * geometric_product[e5]) + (self[e3] * geometric_product[e315]) - (self[e5] * geometric_product[e415]),
                (self[e321] * geometric_product[e315]) + (self[e1] * geometric_product[e125]) + (self[e2] * geometric_product[e5]) - (self[e5] * geometric_product[e425]),
                (self[e321] * geometric_product[e125]) + (self[e2] * geometric_product[e235]) + (self[e3] * geometric_product[e5]) - (self[e5] * geometric_product[e435]),
                0.0,
            ]) + (self.group0().yzxw() * geometric_product.group0().zxyw())
                - (self.group1().yzxz() * geometric_product.group1().zxy().with_w(geometric_product[e435]))
                - (geometric_product.group0().ywwy() * self.group0().zyz().with_w(self[e2]))
                - (geometric_product.group0().wzxx() * self.group0().xxy().with_w(self[e1])),
            // e4235, e4315, e4125, e3215
            (self.group0().wwwx() * geometric_product.group0().xyzx())
                + (geometric_product.group0().ywwz() * self.group1().zyz().with_w(self[e125]))
                + (geometric_product.group0().wzxy() * self.group1().xxy().with_w(self[e315]))
                + Simd32x3::from(0.0).with_w(
                    (self[e321] * geometric_product[e5]) - (self[e2] * geometric_product[e315]) - (self[e3] * geometric_product[e125]) - (self[e5] * geometric_product[e12345]),
                )
                - (self.group1().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e235])),
        );
    }
}
impl GeometricQuotient<MultiVector> for AntiFlector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64       80        0
    //    simd2        4        5        0
    //    simd3       24       46        0
    //    simd4       27       24        0
    // Totals...
    // yes simd      119      155        0
    //  no simd      252      324        0
    fn geometric_quotient(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let reverse = MultiVector::from_groups(
            // scalar, e12345
            other.group0(),
            // e1, e2, e3, e4
            other.group1(),
            // e5
            other[e5],
            // e15, e25, e35, e45
            other.group3() * Simd32x4::from(-1.0),
            // e41, e42, e43
            other.group4() * Simd32x3::from(-1.0),
            // e23, e31, e12
            other.group5() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group6() * Simd32x4::from(-1.0),
            // e423, e431, e412
            other.group7() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group8() * Simd32x3::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group9(),
            // e1234
            other[e1234],
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e15] * other[e41])
                + 2.0 * (other[e25] * other[e42])
                + 2.0 * (other[e35] * other[e43])
                + 2.0 * (other[e3215] * other[e1234])
                + f32::powi(other[scalar], 2)
                + f32::powi(other[e1], 2)
                + f32::powi(other[e2], 2)
                + f32::powi(other[e3], 2)
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                + f32::powi(other[e321], 2)
                - f32::powi(other[e12345], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2)
                - 2.0 * (other[e4] * other[e5])
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(other_2[scalar]) * reverse.group0(),
            // e1, e2, e3, e4
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e5
            reverse[e5] * other_2[scalar],
            // e15, e25, e35, e45
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group4(),
            // e23, e31, e12
            Simd32x3::from(other_2[scalar]) * reverse.group5(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group6(),
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group7(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group8(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group9(),
            // e1234
            reverse[e1234] * other_2[scalar],
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e235] * geometric_product[e423]) + (self[e315] * geometric_product[e431]) + (self[e125] * geometric_product[e412]) - (self[e5] * geometric_product[e4]),
                (self[e5] * geometric_product[e1234]) - (self[e315] * geometric_product[e42]) - (self[e125] * geometric_product[e43]) - (self[e321] * geometric_product[e45]),
            ]) + (Simd32x2::from(self[e1]) * Simd32x2::from([geometric_product[e1], geometric_product[e4235]]))
                + (Simd32x2::from(self[e2]) * Simd32x2::from([geometric_product[e2], geometric_product[e4315]]))
                + (Simd32x2::from(self[e3]) * Simd32x2::from([geometric_product[e3], geometric_product[e4125]]))
                - (Simd32x2::from([geometric_product[e321], geometric_product[e41]]) * self.group0().wx()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e315] * geometric_product[e43]) + (self[e321] * geometric_product[e23]) + (self[e3] * geometric_product[e31]) - (self[e235] * geometric_product[e1234]),
                (self[e125] * geometric_product[e41]) + (self[e321] * geometric_product[e31]) + (self[e1] * geometric_product[e12]) - (self[e315] * geometric_product[e1234]),
                (self[e235] * geometric_product[e42]) + (self[e321] * geometric_product[e12]) + (self[e2] * geometric_product[e23]) - (self[e125] * geometric_product[e1234]),
                0.0,
            ]) + (geometric_product.group0().xx().with_zw(geometric_product[scalar], self[e321]) * self.group1().xyz().with_w(geometric_product[e1234]))
                - (self.group1().yzxz() * geometric_product.group5().zxy().with_w(geometric_product[e43]))
                - (self.group0().zx().with_zw(self[e5], self[e2]) * geometric_product.group4().yzz().with_w(geometric_product[e42]))
                - (self.group1().ww().with_zw(self[e315], self[e1]) * geometric_product.group4().xyx().with_w(geometric_product[e41])),
            // e5
            (self[e235] * geometric_product[e4235])
                + (self[e315] * geometric_product[e4315])
                + (self[e125] * geometric_product[e4125])
                + (self[e1] * geometric_product[e15])
                + (self[e2] * geometric_product[e25])
                + (self[e3] * geometric_product[e35])
                + (self[e5] * geometric_product[scalar])
                - (self[e235] * geometric_product[e23])
                - (self[e315] * geometric_product[e31])
                - (self[e125] * geometric_product[e12])
                - (self[e321] * geometric_product[e3215])
                - (self[e5] * geometric_product[e45]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e1] * geometric_product[e5]) - (self[e125] * geometric_product[e425]) - (self[e5] * geometric_product[e1]) - (self[e5] * geometric_product[e415]),
                (self[e2] * geometric_product[e5]) - (self[e315] * geometric_product[e321]) - (self[e5] * geometric_product[e2]) - (self[e5] * geometric_product[e425]),
                (self[e3] * geometric_product[e5]) - (self[e125] * geometric_product[e321]) - (self[e5] * geometric_product[e3]) - (self[e5] * geometric_product[e435]),
                0.0,
            ]) + (self.group0().ww().with_zw(self[e2], self[e321]) * geometric_product.group8().xyx().with_w(geometric_product[e12345]))
                + (self.group1().zx().with_zw(self[e321], self[e235]) * geometric_product.group8().yzz().with_w(geometric_product[e423]))
                + (self.group0().yzx() * geometric_product.group1().zxy()).with_w(self[e315] * geometric_product[e431])
                + (self.group0().yzx() * geometric_product.group6().zxy()).with_w(self[e125] * geometric_product[e412])
                - (Simd32x4::from([geometric_product[e2], geometric_product[e435], geometric_product[e415], geometric_product[e4]]) * self.group0().zxy().with_w(self[e5]))
                - (Simd32x4::from([geometric_product[e321], geometric_product[e3], geometric_product[e1], geometric_product[e435]]) * self.group0().xxy().with_w(self[e3]))
                - (geometric_product.group0().yy().with_zw(geometric_product[e12345], self[e1]) * self.group0().xyz().with_w(geometric_product[e415]))
                - (geometric_product.group8().zxy() * self.group1().yzx()).with_w(self[e2] * geometric_product[e425]),
            // e41, e42, e43
            (geometric_product.group7().zxy() * self.group1().yzx())
                - (Simd32x3::from(geometric_product[e4]) * self.group1().xyz())
                - (Simd32x3::from([self[e321], self[e321], self[e2]]) * geometric_product.group7().xyx())
                - (Simd32x3::from([self[e3], self[e1], self[e321]]) * geometric_product.group7().yzz()),
            // e23, e31, e12
            (geometric_product.group7().zxy() * self.group0().yzx()) + (self.group1().yzx() * geometric_product.group1().zxy())
                - (Simd32x3::from(self[e321]) * geometric_product.group1().xyz())
                - (Simd32x3::from(geometric_product[e4]) * self.group0().xyz())
                - (Simd32x3::from([self[e125], self[e235], self[e5]]) * geometric_product.group7().yzz())
                - (Simd32x3::from([self[e5], self[e5], self[e315]]) * geometric_product.group7().xyx())
                - (Simd32x3::from([geometric_product[e2], geometric_product[e321], geometric_product[e321]]) * self.group1().zyz())
                - (Simd32x3::from([geometric_product[e321], geometric_product[e3], geometric_product[e1]]) * self.group1().xxy()),
            // e415, e425, e435, e321
            (self.group0().zx().with_zw(self[e5], self[e235]) * geometric_product.group4().yzz().with_w(geometric_product[e41]))
                + (self.group1().ww().with_zw(self[e315], self[e321]) * geometric_product.group4().xyx().with_w(geometric_product[scalar]))
                + (Simd32x3::from(geometric_product[e1234]) * self.group0().xyz()).with_w(self[e315] * geometric_product[e42])
                + (self.group1().yzx() * geometric_product.group9().zxy()).with_w(self[e125] * geometric_product[e43])
                - (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], self[e3]]) * self.group1().xxy().with_w(geometric_product[e12]))
                - (Simd32x4::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45], geometric_product[e1234]]) * self.group1().zyzw())
                - (geometric_product.group4().zxy() * self.group0().yzx()).with_w(self[e1] * geometric_product[e23])
                - (self.group0().www() * geometric_product.group9().xyz()).with_w(self[e2] * geometric_product[e31]),
            // e423, e431, e412
            (Simd32x3::from(geometric_product[e1234]) * self.group1().xyz())
                + (Simd32x3::from([self[e321], self[e321], self[e2]]) * geometric_product.group4().xyx())
                + (Simd32x3::from([self[e3], self[e1], self[e321]]) * geometric_product.group4().yzz())
                - (geometric_product.group4().zxy() * self.group1().yzx()),
            // e235, e315, e125
            (Simd32x3::from(geometric_product[scalar]) * self.group0().xyz())
                + (Simd32x3::from([self[e125], self[e235], self[e5]]) * geometric_product.group5().yzz())
                + (Simd32x3::from([self[e5], self[e5], self[e315]]) * geometric_product.group5().xyx())
                + (self.group0().yzx() * geometric_product.group9().zxy())
                + (self.group1().yzx() * geometric_product.group3().zxy())
                - (Simd32x3::from(self[e321]) * geometric_product.group3().xyz())
                - (Simd32x3::from(self[e5]) * geometric_product.group9().xyz())
                - (Simd32x3::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215]]) * self.group1().zyz())
                - (Simd32x3::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235]]) * self.group0().xxy())
                - (Simd32x3::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45]]) * self.group0().zyz())
                - (Simd32x3::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15]]) * self.group1().xxy())
                - (geometric_product.group5().zxy() * self.group0().yzx()),
            // e4235, e4315, e4125, e3215
            (self.group0().wwwy() * geometric_product.group6().xyz().with_w(geometric_product[e2]))
                + (geometric_product.group6().yzxy() * self.group1().zxy().with_w(self[e315]))
                + (geometric_product.group0().yy().with_zw(geometric_product[e12345], self[e235]) * self.group1().xyz().with_w(geometric_product[e1]))
                + Simd32x3::from(0.0).with_w(
                    (self[e125] * geometric_product[e3]) + (self[e125] * geometric_product[e435]) + (self[e321] * geometric_product[e5]) - (self[e5] * geometric_product[e321]),
                )
                + (geometric_product.group7().zxy() * self.group0().yzx()).with_w(self[e235] * geometric_product[e415])
                - (self.group0().zx().with_zw(self[e5], self[e1]) * geometric_product.group7().yzz().with_w(geometric_product[e235]))
                - (self.group1().ww().with_zw(self[e315], self[e5]) * geometric_product.group7().xyx().with_w(geometric_product[e12345]))
                - (self.group1().yzx() * geometric_product.group6().zxy()).with_w(self[e3] * geometric_product[e125])
                - (geometric_product.group1().www() * self.group0().xyz()).with_w(self[e2] * geometric_product[e315]),
            // e1234
            (self[e1] * geometric_product[e423]) + (self[e2] * geometric_product[e431]) + (self[e3] * geometric_product[e412]) - (self[e321] * geometric_product[e4]),
        );
    }
}
impl GeometricQuotient<Plane> for AntiFlector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       16        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       13       20        0
    //  no simd       22       32        0
    fn geometric_quotient(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Plane::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(-f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2)) * other.group0(),
        );
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                -(self[e321] * geometric_product[e4235]) - (self[e3] * geometric_product[e4315]),
                -(self[e321] * geometric_product[e4315]) - (self[e1] * geometric_product[e4125]),
                -(self[e321] * geometric_product[e4125]) - (self[e2] * geometric_product[e4235]),
                (self[e2] * geometric_product[e4315]) + (self[e3] * geometric_product[e4125]),
            ]) + (self.group1().yzxx() * geometric_product.group0().zxyx()),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e1] * geometric_product[e3215]) - (self[e5] * geometric_product[e4235]),
                -(self[e2] * geometric_product[e3215]) - (self[e5] * geometric_product[e4315]),
                -(self[e3] * geometric_product[e3215]) - (self[e5] * geometric_product[e4125]),
                (self[e315] * geometric_product[e4315]) + (self[e125] * geometric_product[e4125]),
            ]) + (self.group0().yzxx() * geometric_product.group0().zxyx())
                - (self.group0().zxyw() * geometric_product.group0().yzxw()),
        );
    }
}
impl GeometricQuotient<RoundPoint> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       15        0
    //    simd3        6       12        0
    //    simd4        0        1        0
    // Totals...
    // yes simd       15       28        0
    //  no simd       27       55        0
    fn geometric_quotient(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2) - 2.0 * (other[e4] * other[e5]),
        );
        let geometric_product = RoundPoint::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from(other_2[scalar]) * other.group0(), /* e5 */ other[e5] * other_2[scalar]);
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x3::from(geometric_product[e4]) * self.group1().xyz() * Simd32x3::from(-1.0))
                .with_w((self[e1] * geometric_product[e1]) + (self[e2] * geometric_product[e2]) + (self[e3] * geometric_product[e3]) - (self[e5] * geometric_product[e4])),
            // e23, e31, e12, e45
            ((self.group1().yzx() * geometric_product.group0().zxy())
                - (Simd32x3::from(self[e321]) * geometric_product.group0().xyz())
                - (Simd32x3::from(geometric_product[e4]) * self.group0().xyz())
                - (self.group1().zxy() * geometric_product.group0().yzx()))
            .with_w(self[e5] * geometric_product[e4] * -1.0),
            // e15, e25, e35, e1234
            ((Simd32x3::from(geometric_product[e5]) * self.group1().xyz()) + (self.group0().yzx() * geometric_product.group0().zxy())
                - (Simd32x3::from(self[e5]) * geometric_product.group0().xyz())
                - (self.group0().zxy() * geometric_product.group0().yzx()))
            .with_w(self[e321] * geometric_product[e4] * -1.0),
            // e4235, e4315, e4125, e3215
            (Simd32x3::from(geometric_product[e4]) * self.group0().xyz() * Simd32x3::from(-1.0))
                .with_w((self[e235] * geometric_product[e1]) + (self[e315] * geometric_product[e2]) + (self[e125] * geometric_product[e3]) + (self[e321] * geometric_product[e5])),
        );
    }
}
impl GeometricQuotient<Scalar> for AntiFlector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        0        1
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        2        1
    //  no simd        0        8        1
    fn geometric_quotient(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Scalar::from_groups(/* scalar */ 1.0 / other[scalar]);
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(geometric_product[scalar]) * self.group0(),
            // e1, e2, e3, e5
            Simd32x4::from(geometric_product[scalar]) * self.group1(),
        );
    }
}
impl GeometricQuotient<Sphere> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       17        0
    //    simd3        3        5        0
    //    simd4        2        5        0
    // Totals...
    // yes simd       15       27        0
    //  no simd       27       52        0
    fn geometric_quotient(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e3215] * other[e1234]) - f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2),
        );
        let geometric_product = Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * other.group0(),
            // e1234
            other_2[scalar] * other[e1234],
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x3::from(geometric_product[e1234]) * self.group1().xyz()).with_w(
                (self[e1] * geometric_product[e4235]) + (self[e2] * geometric_product[e4315]) + (self[e3] * geometric_product[e4125]) + (self[e5] * geometric_product[e1234]),
            ),
            // e415, e425, e435, e321
            ((Simd32x3::from(geometric_product[e1234]) * self.group0().xyz()) + (self.group1().yzx() * geometric_product.group0().zxy())
                - (Simd32x3::from(self[e321]) * geometric_product.group0().xyz())
                - (self.group1().zxy() * geometric_product.group0().yzx()))
            .with_w(self[e5] * geometric_product[e1234] * -1.0),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e1] * geometric_product[e3215]) - (self[e5] * geometric_product[e4235]),
                -(self[e2] * geometric_product[e3215]) - (self[e5] * geometric_product[e4315]),
                -(self[e3] * geometric_product[e3215]) - (self[e5] * geometric_product[e4125]),
                (self[e315] * geometric_product[e4315]) + (self[e125] * geometric_product[e4125]),
            ]) + (self.group0().yzxx() * geometric_product.group0().zxyx())
                - (self.group0().zxyw() * geometric_product.group0().yzxw()),
            // e1, e2, e3, e4
            Simd32x4::from(geometric_product[e1234]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricQuotient<VersorEven> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       43       60        0
    //    simd3        0        5        0
    //    simd4       21       23        0
    // Totals...
    // yes simd       64       88        0
    //  no simd      127      167        0
    fn geometric_quotient(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let reverse = VersorEven::from_groups(
            // e423, e431, e412, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e5
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e4
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)
                - f32::powi(other[e12345], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125])
                - 2.0 * (other[e5] * other[e4]),
        );
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e5
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e1, e2, e3, e4
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e3] * geometric_product[e431] * -1.0,
                self[e2] * geometric_product[e4] * -1.0,
                self[e3] * geometric_product[e4] * -1.0,
                (self[e315] * geometric_product[e431])
                    + (self[e125] * geometric_product[e412])
                    + (self[e1] * geometric_product[e1])
                    + (self[e2] * geometric_product[e2])
                    + (self[e3] * geometric_product[e3]),
            ]) + (geometric_product.group0().zxyx() * self.group1().yzx().with_w(self[e235]))
                - (Simd32x4::from(self[e321]) * geometric_product.group0().xyz().with_w(geometric_product[e321]))
                - (Simd32x4::from([geometric_product[e4], geometric_product[e412], geometric_product[e423], geometric_product[e4]]) * self.group1().xxyw()),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(self[e3] * geometric_product[e2]) - (self[e5] * geometric_product[e423]),
                -(self[e2] * geometric_product[e321]) - (self[e5] * geometric_product[e431]),
                -(self[e3] * geometric_product[e321]) - (self[e5] * geometric_product[e412]),
                (self[e125] * geometric_product[e412]) + (self[e321] * geometric_product[e12345]),
            ]) + (self.group0().yzxx() * geometric_product.group0().zxyx())
                + (self.group1().yzx() * geometric_product.group3().zxy()).with_w(self[e315] * geometric_product[e431])
                - (Simd32x4::from([geometric_product[e431], geometric_product[e4], geometric_product[e4], geometric_product[e425]]) * self.group0().zyz().with_w(self[e2]))
                - (Simd32x4::from([geometric_product[e321], geometric_product[e3], geometric_product[e1], geometric_product[e4]]) * self.group1().xxyw())
                - (Simd32x4::from([geometric_product[e4], geometric_product[e412], geometric_product[e423], geometric_product[e415]]) * self.group0().xxy().with_w(self[e1]))
                - (self.group0().www() * geometric_product.group3().xyz()).with_w(self[e3] * geometric_product[e435]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e1] * geometric_product[e5]) + (self[e3] * geometric_product[e315])
                    - (self[e235] * geometric_product[e321])
                    - (self[e125] * geometric_product[e425])
                    - (self[e125] * geometric_product[e2])
                    - (self[e2] * geometric_product[e125])
                    - (self[e5] * geometric_product[e415])
                    - (self[e5] * geometric_product[e1]),
                (self[e1] * geometric_product[e125]) + (self[e2] * geometric_product[e5])
                    - (self[e235] * geometric_product[e3])
                    - (self[e315] * geometric_product[e12345])
                    - (self[e315] * geometric_product[e321])
                    - (self[e3] * geometric_product[e235])
                    - (self[e5] * geometric_product[e425])
                    - (self[e5] * geometric_product[e2]),
                (self[e2] * geometric_product[e235]) + (self[e3] * geometric_product[e5])
                    - (self[e315] * geometric_product[e1])
                    - (self[e125] * geometric_product[e12345])
                    - (self[e125] * geometric_product[e321])
                    - (self[e1] * geometric_product[e315])
                    - (self[e5] * geometric_product[e435])
                    - (self[e5] * geometric_product[e3]),
                0.0,
            ]) + (self.group0().yzx() * geometric_product.group1().zxy()).with_w(self[e1] * geometric_product[e423])
                + (self.group0().yzx() * geometric_product.group3().zxy()).with_w(self[e2] * geometric_product[e431])
                + (self.group0().www() * geometric_product.group2().xyz()).with_w(self[e3] * geometric_product[e412])
                - (Simd32x4::from([geometric_product[e12345], geometric_product[e435], geometric_product[e415], geometric_product[e4]]) * self.group0().xxyw()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([geometric_product[e12345], geometric_product[e435], geometric_product[e415], geometric_product[e425]]) * self.group1().xxy().with_w(self[e315]))
                + (Simd32x4::from([geometric_product[e425], geometric_product[e12345], geometric_product[e12345], geometric_product[e2]]) * self.group1().zyz().with_w(self[e315]))
                + (self.group0().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e415]))
                + (self.group0().wwwx() * geometric_product.group1().xyz().with_w(geometric_product[e1]))
                + Simd32x3::from(0.0).with_w(
                    (self[e125] * geometric_product[e435]) + (self[e125] * geometric_product[e3]) + (self[e321] * geometric_product[e5]) - (self[e5] * geometric_product[e321]),
                )
                - (Simd32x4::from(self[e5]) * geometric_product.group0())
                - (Simd32x4::from([geometric_product[e431], geometric_product[e4], geometric_product[e4], geometric_product[e315]]) * self.group0().zyz().with_w(self[e2]))
                - (Simd32x4::from([geometric_product[e4], geometric_product[e412], geometric_product[e423], geometric_product[e235]]) * self.group0().xxy().with_w(self[e1]))
                - (self.group1().yzxz() * geometric_product.group1().zxy().with_w(geometric_product[e125])),
        );
    }
}
impl GeometricQuotient<VersorOdd> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       27       36        0
    //    simd3        0        4        0
    //    simd4       25       29        0
    // Totals...
    // yes simd       52       69        0
    //  no simd      127      164        0
    fn geometric_quotient(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let reverse = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + 2.0 * (other[e1234] * other[e3215])
                + f32::powi(other[scalar], 2)
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2),
        );
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([geometric_product[e42], geometric_product[e1234], geometric_product[e1234], geometric_product[e4125]]) * self.group1().zyzz())
                + (Simd32x4::from([geometric_product[e1234], geometric_product[e43], geometric_product[e41], geometric_product[e4315]]) * self.group1().xxyy())
                + Simd32x3::from(0.0).with_w(
                    (self[e5] * geometric_product[e1234]) - (self[e315] * geometric_product[e42]) - (self[e125] * geometric_product[e43]) - (self[e321] * geometric_product[e45]),
                )
                + (self.group0().www() * geometric_product.group0().xyz()).with_w(self[e1] * geometric_product[e4235])
                - (geometric_product.group0().zxyx() * self.group1().yzx().with_w(self[e235])),
            // e415, e425, e435, e321
            (Simd32x4::from([geometric_product[e42], geometric_product[e1234], geometric_product[e1234], geometric_product[e42]]) * self.group0().zyzy())
                + (Simd32x4::from([geometric_product[e1234], geometric_product[e43], geometric_product[e41], geometric_product[e41]]) * self.group0().xxyx())
                + (geometric_product.group0() * self.group1().www().with_w(self[e321]))
                + (self.group1().yzx() * geometric_product.group3().zxy()).with_w(self[e125] * geometric_product[e43])
                - (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], geometric_product[e12]]) * self.group1().xxyz())
                - (Simd32x4::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45], geometric_product[e1234]]) * self.group1().zyzw())
                - (self.group0().yzx() * geometric_product.group0().zxy()).with_w(self[e1] * geometric_product[e23])
                - (self.group0().www() * geometric_product.group3().xyz()).with_w(self[e2] * geometric_product[e31]),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e3] * geometric_product[e25]) - (self[e5] * geometric_product[e4235]),
                -(self[e2] * geometric_product[e3215]) - (self[e5] * geometric_product[e4315]),
                -(self[e3] * geometric_product[e3215]) - (self[e5] * geometric_product[e4125]),
                (self[e3] * geometric_product[e35]) + (self[e5] * geometric_product[scalar]),
            ]) + (Simd32x4::from(self[e235]) * Simd32x4::from([geometric_product[scalar], geometric_product[e12], geometric_product[e4315], geometric_product[e4235]]))
                + (Simd32x4::from(self[e315]) * Simd32x4::from([geometric_product[e4125], geometric_product[scalar], geometric_product[e23], geometric_product[e4315]]))
                + (Simd32x4::from(self[e125]) * Simd32x4::from([geometric_product[e31], geometric_product[e4235], geometric_product[scalar], geometric_product[e4125]]))
                + (self.group1().yzxx() * geometric_product.group2().zxyx())
                + (self.group1().wwwy() * geometric_product.group1().xyz().with_w(geometric_product[e25]))
                - (Simd32x4::from(self[e235]) * Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e31], geometric_product[e23]]))
                - (Simd32x4::from(self[e315]) * geometric_product.group1().zw().with_zw(geometric_product[e4235], geometric_product[e31]))
                - (Simd32x4::from(self[e125]) * Simd32x4::from([geometric_product[e4315], geometric_product[e23], geometric_product[e45], geometric_product[e12]]))
                - (Simd32x4::from(self[e321]) * geometric_product.group2().xyz().with_w(geometric_product[e3215]))
                - (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e45]]) * self.group1().xxyw()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e321] * geometric_product[e23]) + (self[e1] * geometric_product[scalar]) + (self[e3] * geometric_product[e31]) - (self[e5] * geometric_product[e41]),
                (self[e321] * geometric_product[e31]) + (self[e1] * geometric_product[e12]) + (self[e2] * geometric_product[scalar]) - (self[e5] * geometric_product[e42]),
                (self[e321] * geometric_product[e12]) + (self[e2] * geometric_product[e23]) + (self[e3] * geometric_product[scalar]) - (self[e5] * geometric_product[e43]),
                0.0,
            ]) + (self.group0().yzxw() * geometric_product.group0().zxy().with_w(geometric_product[e1234]))
                - (Simd32x4::from([geometric_product[e42], geometric_product[e1234], geometric_product[e1234], geometric_product[e42]]) * self.group0().zyz().with_w(self[e2]))
                - (Simd32x4::from([geometric_product[e1234], geometric_product[e43], geometric_product[e41], geometric_product[e41]]) * self.group0().xxy().with_w(self[e1]))
                - (self.group1().yzxz() * geometric_product.group1().zxy().with_w(geometric_product[e43])),
        );
    }
}
impl std::ops::Div<GeometricQuotientInfix> for AntiLine {
    type Output = GeometricQuotientInfixPartial<AntiLine>;
    fn div(self, _rhs: GeometricQuotientInfix) -> Self::Output {
        GeometricQuotientInfixPartial(self)
    }
}
impl GeometricQuotient<AntiCircleRotor> for AntiLine {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       30       52        0
    //    simd3        0        9        0
    //    simd4        7        4        0
    // Totals...
    // yes simd       37       65        0
    //  no simd       58       95        0
    fn geometric_quotient(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiCircleRotor::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, scalar
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                + f32::powi(other[scalar], 2)
                - f32::powi(other[e45], 2),
        );
        let geometric_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                geometric_product[e42] * self[e12],
                geometric_product[e43] * self[e23],
                geometric_product[e41] * self[e31],
                -(geometric_product[e42] * self[e25])
                    - (geometric_product[e43] * self[e35])
                    - (geometric_product[e23] * self[e23])
                    - (geometric_product[e31] * self[e31])
                    - (geometric_product[e12] * self[e12]),
            ]) - (geometric_product.group0().zxy() * self.group0().yzx()).with_w(geometric_product[e41] * self[e15]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (geometric_product[e42] * self[e35]) + (geometric_product[e31] * self[e12]) + (geometric_product[scalar] * self[e23]),
                (geometric_product[e43] * self[e15]) + (geometric_product[e12] * self[e23]) + (geometric_product[scalar] * self[e31]),
                (geometric_product[e41] * self[e25]) + (geometric_product[e23] * self[e31]) + (geometric_product[scalar] * self[e12]),
                geometric_product[e43] * self[e35] * -1.0,
            ]) - (geometric_product.group0().zxy() * self.group1().yzx()).with_w(geometric_product[e41] * self[e15])
                - (self.group0().yzx() * geometric_product.group1().zxy()).with_w(geometric_product[e42] * self[e25]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (geometric_product[e31] * self[e35]) + (geometric_product[e25] * self[e12]) + (geometric_product[scalar] * self[e15]),
                (geometric_product[e12] * self[e15]) + (geometric_product[e35] * self[e23]) + (geometric_product[scalar] * self[e25]),
                (geometric_product[e23] * self[e25]) + (geometric_product[e15] * self[e31]) + (geometric_product[scalar] * self[e35]),
                0.0,
            ]) - (self.group0().yzx() * geometric_product.group2().zxy()).with_w(geometric_product[e41] * self[e23])
                - (self.group1().xyx() * geometric_product.group1().wwy()).with_w(geometric_product[e42] * self[e31])
                - (self.group1().yzz() * geometric_product.group1().zxw()).with_w(geometric_product[e43] * self[e12]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (geometric_product[e42] * self[e35]) + (geometric_product[e45] * self[e23]),
                (geometric_product[e43] * self[e15]) + (geometric_product[e45] * self[e31]),
                (geometric_product[e41] * self[e25]) + (geometric_product[e45] * self[e12]),
                -(geometric_product[e23] * self[e15])
                    - (geometric_product[e31] * self[e25])
                    - (geometric_product[e12] * self[e35])
                    - (geometric_product[e25] * self[e31])
                    - (geometric_product[e35] * self[e12]),
            ]) - (geometric_product.group0().zxy() * self.group1().yzx()).with_w(geometric_product[e15] * self[e23]),
        );
    }
}
impl GeometricQuotient<AntiDipoleInversion> for AntiLine {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       62        0
    //    simd3        0       13        0
    //    simd4       12        6        0
    // Totals...
    // yes simd       52       81        0
    //  no simd       88      125        0
    fn geometric_quotient(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e4
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125])
                - 2.0 * (other[e4] * other[e5]),
        );
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e4
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e1, e2, e3, e5
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (geometric_product[e431] * self[e12]) + (geometric_product[e4] * self[e23]),
                (geometric_product[e412] * self[e23]) + (geometric_product[e4] * self[e31]),
                (geometric_product[e423] * self[e31]) + (geometric_product[e4] * self[e12]),
                -(geometric_product[e431] * self[e25])
                    - (geometric_product[e412] * self[e35])
                    - (geometric_product[e415] * self[e23])
                    - (geometric_product[e425] * self[e31])
                    - (geometric_product[e435] * self[e12]),
            ]) - (geometric_product.group0().zxy() * self.group0().yzx()).with_w(geometric_product[e423] * self[e15]),
            // e415, e425, e435, e321
            Simd32x3::from(0.0).with_w(geometric_product[e3] * self[e12] * -1.0)
                + (self.group1() * geometric_product.group2().www()).with_w(geometric_product[e412] * self[e35])
                + (geometric_product.group0().yzx() * self.group1().zxy()).with_w(geometric_product[e423] * self[e15])
                + (self.group0().zxy() * geometric_product.group1().yzx()).with_w(geometric_product[e431] * self[e25])
                - (geometric_product.group0().zxy() * self.group1().yzx()).with_w(geometric_product[e1] * self[e23])
                - (self.group0().yzx() * geometric_product.group1().zxy()).with_w(geometric_product[e2] * self[e31]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (geometric_product[e425] * self[e35])
                    + (geometric_product[e321] * self[e15])
                    + (geometric_product[e315] * self[e12])
                    + (geometric_product[e2] * self[e35])
                    + (geometric_product[e5] * self[e23]),
                (geometric_product[e435] * self[e15])
                    + (geometric_product[e321] * self[e25])
                    + (geometric_product[e125] * self[e23])
                    + (geometric_product[e3] * self[e15])
                    + (geometric_product[e5] * self[e31]),
                (geometric_product[e415] * self[e25])
                    + (geometric_product[e321] * self[e35])
                    + (geometric_product[e235] * self[e31])
                    + (geometric_product[e1] * self[e25])
                    + (geometric_product[e5] * self[e12]),
                -(geometric_product[e415] * self[e15])
                    - (geometric_product[e425] * self[e25])
                    - (geometric_product[e435] * self[e35])
                    - (geometric_product[e1] * self[e15])
                    - (geometric_product[e2] * self[e25])
                    - (geometric_product[e3] * self[e35]),
            ]) - (geometric_product.group2().zxyx() * self.group0().yzx().with_w(self[e23]))
                - (self.group1().yzx() * geometric_product.group1().zxy()).with_w(geometric_product[e315] * self[e31])
                - (self.group1().yzx() * geometric_product.group3().zxy()).with_w(geometric_product[e125] * self[e12]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (geometric_product[e412] * self[e25]) + (geometric_product[e321] * self[e23]) + (geometric_product[e2] * self[e12]),
                (geometric_product[e423] * self[e35]) + (geometric_product[e321] * self[e31]) + (geometric_product[e3] * self[e23]),
                (geometric_product[e431] * self[e15]) + (geometric_product[e321] * self[e12]) + (geometric_product[e1] * self[e31]),
                0.0,
            ]) - (self.group1() * geometric_product.group2().www()).with_w(geometric_product[e412] * self[e12])
                - (geometric_product.group0().yzx() * self.group1().zxy()).with_w(geometric_product[e423] * self[e23])
                - (self.group0().yzx() * geometric_product.group3().zxy()).with_w(geometric_product[e431] * self[e31]),
        );
    }
}
impl GeometricQuotient<AntiDualNum> for AntiLine {
    type Output = AntiLine;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd2        0        1        0
    //    simd3        1        3        0
    // Totals...
    // yes simd        1        4        0
    //  no simd        3       11        0
    fn geometric_quotient(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDualNum::from_groups(/* e3215, scalar */ Simd32x2::from(f32::powi(other[scalar], -2)) * other.group0());
        return AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(geometric_product[scalar]) * self.group0(),
            // e15, e25, e35
            (Simd32x3::from(geometric_product[e3215]) * self.group0()) + (Simd32x3::from(geometric_product[scalar]) * self.group1()),
        );
    }
}
impl GeometricQuotient<AntiFlatPoint> for AntiLine {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        7        0
    //    simd3        0        4        0
    //    simd4        2        1        0
    // Totals...
    // yes simd        4       12        0
    //  no simd       10       23        0
    fn geometric_quotient(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlatPoint::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(f32::powi(other[e321], -2)) * Simd32x4::from([other[e235] * -1.0, other[e315] * -1.0, other[e125] * -1.0, other[e321] * -1.0]),
        );
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x3::from(geometric_product[e321]) * self.group1()).with_w(0.0) + (self.group0().zxy() * geometric_product.group0().yzx()).with_w(0.0)
                - (self.group0().yzx() * geometric_product.group0().zxy()).with_w(0.0),
            // e1, e2, e3, e5
            (Simd32x3::from(geometric_product[e321]) * self.group0())
                .with_w(-(geometric_product[e235] * self[e23]) - (geometric_product[e315] * self[e31]) - (geometric_product[e125] * self[e12])),
        );
    }
}
impl GeometricQuotient<AntiFlector> for AntiLine {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       27        0
    //    simd3        0        2        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       22       33        0
    //  no simd       31       49        0
    fn geometric_quotient(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiFlector::from_groups(/* e235, e315, e125, e321 */ other.group0() * Simd32x4::from(-1.0), /* e1, e2, e3, e5 */ other.group1());
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2),
        );
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e1, e2, e3, e5
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (geometric_product[e315] * self[e12]) + (geometric_product[e321] * self[e15]) + (geometric_product[e2] * self[e35]) + (geometric_product[e5] * self[e23]),
                (geometric_product[e125] * self[e23]) + (geometric_product[e321] * self[e25]) + (geometric_product[e3] * self[e15]) + (geometric_product[e5] * self[e31]),
                (geometric_product[e235] * self[e31]) + (geometric_product[e321] * self[e35]) + (geometric_product[e1] * self[e25]) + (geometric_product[e5] * self[e12]),
                geometric_product[e3] * self[e12] * -1.0,
            ]) - (geometric_product.group1().zxyy() * self.group1().yzx().with_w(self[e31]))
                - (self.group0().yzx() * geometric_product.group0().zxy()).with_w(geometric_product[e1] * self[e23]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (geometric_product[e321] * self[e23]) + (geometric_product[e2] * self[e12]),
                (geometric_product[e321] * self[e31]) + (geometric_product[e3] * self[e23]),
                (geometric_product[e321] * self[e12]) + (geometric_product[e1] * self[e31]),
                -(geometric_product[e315] * self[e31])
                    - (geometric_product[e125] * self[e12])
                    - (geometric_product[e1] * self[e15])
                    - (geometric_product[e2] * self[e25])
                    - (geometric_product[e3] * self[e35]),
            ]) - (self.group0().yzx() * geometric_product.group1().zxy()).with_w(geometric_product[e235] * self[e23]),
        );
    }
}
impl GeometricQuotient<AntiLine> for AntiLine {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       18        0
    //    simd3        0        7        0
    //    simd4        3        0        0
    // Totals...
    // yes simd       12       25        0
    //  no simd       21       39        0
    fn geometric_quotient(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiLine::from_groups(
            // e23, e31, e12
            other.group0() * Simd32x3::from(-1.0),
            // e15, e25, e35
            other.group1() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(/* scalar */ f32::powi(other[e23], 2) + f32::powi(other[e31], 2) + f32::powi(other[e12], 2));
        let geometric_product = AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e15, e25, e35
            Simd32x3::from(other_2[scalar]) * reverse.group1(),
        );
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                geometric_product[e31] * self[e12],
                geometric_product[e12] * self[e23],
                geometric_product[e23] * self[e31],
                -(geometric_product[e31] * self[e31]) - (geometric_product[e12] * self[e12]),
            ]) - (geometric_product.group0().zxy() * self.group0().yzx()).with_w(geometric_product[e23] * self[e23]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (geometric_product[e31] * self[e35]) + (geometric_product[e25] * self[e12]),
                (geometric_product[e12] * self[e15]) + (geometric_product[e35] * self[e23]),
                (geometric_product[e23] * self[e25]) + (geometric_product[e15] * self[e31]),
                -(geometric_product[e12] * self[e35]) - (geometric_product[e15] * self[e23]) - (geometric_product[e25] * self[e31]) - (geometric_product[e35] * self[e12]),
            ]) - (geometric_product.group0().zxy() * self.group1().yzx()).with_w(geometric_product[e23] * self[e15])
                - (geometric_product.group1().zxy() * self.group0().yzx()).with_w(geometric_product[e31] * self[e25]),
        );
    }
}
impl GeometricQuotient<AntiMotor> for AntiLine {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       25        0
    //    simd3        0        1        0
    //    simd4        3        6        0
    // Totals...
    // yes simd       22       32        0
    //  no simd       31       52        0
    fn geometric_quotient(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, e3215
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e23], 2) + f32::powi(other[e31], 2) + f32::powi(other[e12], 2) + f32::powi(other[scalar], 2),
        );
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e15, e25, e35, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self[e23] * geometric_product[scalar]) + (self[e12] * geometric_product[e31]),
                (self[e23] * geometric_product[e12]) + (self[e31] * geometric_product[scalar]),
                (self[e31] * geometric_product[e23]) + (self[e12] * geometric_product[scalar]),
                -(self[e31] * geometric_product[e31]) - (self[e12] * geometric_product[e12]),
            ]) - (geometric_product.group0().zxyx() * self.group0().yzx().with_w(self[e23])),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self[e23] * geometric_product[e3215]) + (self[e12] * geometric_product[e25]) + (self[e15] * geometric_product[scalar]) + (self[e35] * geometric_product[e31]),
                (self[e23] * geometric_product[e35]) + (self[e31] * geometric_product[e3215]) + (self[e15] * geometric_product[e12]) + (self[e25] * geometric_product[scalar]),
                (self[e31] * geometric_product[e15]) + (self[e12] * geometric_product[e3215]) + (self[e25] * geometric_product[e23]) + (self[e35] * geometric_product[scalar]),
                -(self[e12] * geometric_product[e35]) - (self[e15] * geometric_product[e23]) - (self[e25] * geometric_product[e31]) - (self[e35] * geometric_product[e12]),
            ]) - (geometric_product.group1().zxyx() * self.group0().yzx().with_w(self[e23]))
                - (self.group1().yzx() * geometric_product.group0().zxy()).with_w(self[e31] * geometric_product[e25]),
        );
    }
}
impl GeometricQuotient<AntiPlane> for AntiLine {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       13        0
    //    simd4        2        3        0
    // Totals...
    // yes simd        9       16        0
    //  no simd       15       25        0
    fn geometric_quotient(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiPlane::from_groups(
            // e1, e2, e3, e5
            Simd32x4::from(f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)) * other.group0(),
        );
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (self[e23] * geometric_product[e5]) + (self[e35] * geometric_product[e2]),
                (self[e31] * geometric_product[e5]) + (self[e15] * geometric_product[e3]),
                (self[e12] * geometric_product[e5]) + (self[e25] * geometric_product[e1]),
                -(self[e31] * geometric_product[e2]) - (self[e12] * geometric_product[e3]),
            ]) - (geometric_product.group0().zxyx() * self.group1().yzx().with_w(self[e23])),
            // e1, e2, e3, e5
            Simd32x4::from([
                self[e12] * geometric_product[e2],
                self[e23] * geometric_product[e3],
                self[e31] * geometric_product[e1],
                -(self[e25] * geometric_product[e2]) - (self[e35] * geometric_product[e3]),
            ]) - (geometric_product.group0().zxyx() * self.group0().yzx().with_w(self[e15])),
        );
    }
}
impl GeometricQuotient<AntiScalar> for AntiLine {
    type Output = Line;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        1
    //    simd3        0        2        0
    // Totals...
    // yes simd        0        3        1
    //  no simd        0        7        1
    fn geometric_quotient(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiScalar::from_groups(/* e12345 */ 1.0 / other[e12345] * -1.0);
        return Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(geometric_product[e12345]) * self.group0(),
            // e235, e315, e125
            Simd32x3::from(geometric_product[e12345]) * self.group1(),
        );
    }
}
impl GeometricQuotient<Circle> for AntiLine {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       26       48        0
    //    simd3        0       10        0
    //    simd4        6        2        0
    // Totals...
    // yes simd       32       60        0
    //  no simd       50       86        0
    fn geometric_quotient(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let reverse = Circle::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125
            other.group2() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group2(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e12] * geometric_product[e431],
                self[e23] * geometric_product[e412],
                self[e31] * geometric_product[e423],
                -(self[e31] * geometric_product[e425])
                    - (self[e12] * geometric_product[e435])
                    - (self[e15] * geometric_product[e423])
                    - (self[e25] * geometric_product[e431])
                    - (self[e35] * geometric_product[e412]),
            ]) - (self.group0().yzx() * geometric_product.group0().zxy()).with_w(self[e23] * geometric_product[e415]),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(self[e31] * geometric_product[e435]) - (self[e25] * geometric_product[e412]),
                -(self[e12] * geometric_product[e415]) - (self[e35] * geometric_product[e423]),
                -(self[e23] * geometric_product[e425]) - (self[e15] * geometric_product[e431]),
                self[e35] * geometric_product[e412],
            ]) + (self.group0().zxy() * geometric_product.group1().yzx()).with_w(self[e15] * geometric_product[e423])
                + (self.group1().zxy() * geometric_product.group0().yzx()).with_w(self[e25] * geometric_product[e431]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * geometric_product[e315]) + (self[e15] * geometric_product[e321]) + (self[e35] * geometric_product[e425]),
                (self[e23] * geometric_product[e125]) + (self[e15] * geometric_product[e435]) + (self[e25] * geometric_product[e321]),
                (self[e31] * geometric_product[e235]) + (self[e25] * geometric_product[e415]) + (self[e35] * geometric_product[e321]),
                -(self[e12] * geometric_product[e125]) - (self[e15] * geometric_product[e415]) - (self[e25] * geometric_product[e425]) - (self[e35] * geometric_product[e435]),
            ]) - (self.group0().yzx() * geometric_product.group2().zxy()).with_w(self[e23] * geometric_product[e235])
                - (self.group1().yzx() * geometric_product.group1().zxy()).with_w(self[e31] * geometric_product[e315]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e23] * geometric_product[e321]) + (self[e25] * geometric_product[e412]),
                (self[e31] * geometric_product[e321]) + (self[e35] * geometric_product[e423]),
                (self[e12] * geometric_product[e321]) + (self[e15] * geometric_product[e431]),
                -(self[e31] * geometric_product[e431]) - (self[e12] * geometric_product[e412]),
            ]) - (self.group1().zxy() * geometric_product.group0().yzx()).with_w(self[e23] * geometric_product[e423]),
        );
    }
}
impl GeometricQuotient<CircleRotor> for AntiLine {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       30       48        0
    //    simd3        0        6        0
    //    simd4        7        7        0
    // Totals...
    // yes simd       37       61        0
    //  no simd       58       94        0
    fn geometric_quotient(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let reverse = CircleRotor::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e12345
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - f32::powi(other[e12345], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e12] * geometric_product[e431],
                self[e23] * geometric_product[e412],
                self[e31] * geometric_product[e423],
                -(self[e31] * geometric_product[e425])
                    - (self[e12] * geometric_product[e435])
                    - (self[e15] * geometric_product[e423])
                    - (self[e25] * geometric_product[e431])
                    - (self[e35] * geometric_product[e412]),
            ]) - (self.group0().yzx() * geometric_product.group0().zxy()).with_w(self[e23] * geometric_product[e415]),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(self[e31] * geometric_product[e435]) - (self[e25] * geometric_product[e412]),
                -(self[e12] * geometric_product[e415]) - (self[e35] * geometric_product[e423]),
                -(self[e23] * geometric_product[e425]) - (self[e15] * geometric_product[e431]),
                0.0,
            ]) + (Simd32x4::from([geometric_product[e425], geometric_product[e12345], geometric_product[e12345], geometric_product[e431]]) * self.group0().zyz().with_w(self[e25]))
                + (Simd32x4::from([geometric_product[e12345], geometric_product[e435], geometric_product[e415], geometric_product[e423]]) * self.group0().xxy().with_w(self[e15]))
                + (self.group1().zxy() * geometric_product.group0().yzx()).with_w(self[e35] * geometric_product[e412]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * geometric_product[e315]) + (self[e15] * geometric_product[e321]) + (self[e15] * geometric_product[e12345]) + (self[e35] * geometric_product[e425]),
                (self[e23] * geometric_product[e125]) + (self[e15] * geometric_product[e435]) + (self[e25] * geometric_product[e321]) + (self[e25] * geometric_product[e12345]),
                (self[e31] * geometric_product[e235]) + (self[e25] * geometric_product[e415]) + (self[e35] * geometric_product[e321]) + (self[e35] * geometric_product[e12345]),
                -(self[e12] * geometric_product[e125]) - (self[e15] * geometric_product[e415]) - (self[e25] * geometric_product[e425]) - (self[e35] * geometric_product[e435]),
            ]) - (geometric_product.group2().zxyx() * self.group0().yzx().with_w(self[e23]))
                - (self.group1().yzx() * geometric_product.group1().zxy()).with_w(self[e31] * geometric_product[e315]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e23] * geometric_product[e321]) + (self[e25] * geometric_product[e412]),
                (self[e31] * geometric_product[e321]) + (self[e35] * geometric_product[e423]),
                (self[e12] * geometric_product[e321]) + (self[e15] * geometric_product[e431]),
                -(self[e31] * geometric_product[e431]) - (self[e12] * geometric_product[e412]),
            ]) - (self.group1().zxy() * geometric_product.group0().yzx()).with_w(self[e23] * geometric_product[e423]),
        );
    }
}
impl GeometricQuotient<Dipole> for AntiLine {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       23       46        0
    //    simd3        0       11        0
    //    simd4        7        2        0
    // Totals...
    // yes simd       30       59        0
    //  no simd       51       87        0
    fn geometric_quotient(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let reverse = Dipole::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35
            other.group2() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2),
        );
        let geometric_product = Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35
            Simd32x3::from(other_2[scalar]) * reverse.group2(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e12] * geometric_product[e42],
                self[e23] * geometric_product[e43],
                self[e31] * geometric_product[e41],
                -(self[e31] * geometric_product[e31])
                    - (self[e12] * geometric_product[e12])
                    - (self[e15] * geometric_product[e41])
                    - (self[e25] * geometric_product[e42])
                    - (self[e35] * geometric_product[e43]),
            ]) - (self.group0().yzx() * geometric_product.group0().zxy()).with_w(self[e23] * geometric_product[e23]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e12] * geometric_product[e31]) + (self[e35] * geometric_product[e42]),
                (self[e23] * geometric_product[e12]) + (self[e15] * geometric_product[e43]),
                (self[e31] * geometric_product[e23]) + (self[e25] * geometric_product[e41]),
                self[e35] * geometric_product[e43] * -1.0,
            ]) - (self.group0().yzx() * geometric_product.group1().zxy()).with_w(self[e15] * geometric_product[e41])
                - (self.group1().yzx() * geometric_product.group0().zxy()).with_w(self[e25] * geometric_product[e42]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e12] * geometric_product[e25]) + (self[e35] * geometric_product[e31]),
                (self[e23] * geometric_product[e35]) + (self[e15] * geometric_product[e12]),
                (self[e31] * geometric_product[e15]) + (self[e25] * geometric_product[e23]),
                0.0,
            ]) - (self.group0().yzx() * geometric_product.group2().zxy()).with_w(self[e23] * geometric_product[e41])
                - (self.group1().xyx() * geometric_product.group1().wwy()).with_w(self[e31] * geometric_product[e42])
                - (self.group1().yzz() * geometric_product.group1().zxw()).with_w(self[e12] * geometric_product[e43]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e23] * geometric_product[e45]) + (self[e35] * geometric_product[e42]),
                (self[e31] * geometric_product[e45]) + (self[e15] * geometric_product[e43]),
                (self[e12] * geometric_product[e45]) + (self[e25] * geometric_product[e41]),
                -(self[e31] * geometric_product[e25])
                    - (self[e12] * geometric_product[e35])
                    - (self[e15] * geometric_product[e23])
                    - (self[e25] * geometric_product[e31])
                    - (self[e35] * geometric_product[e12]),
            ]) - (self.group1().yzx() * geometric_product.group0().zxy()).with_w(self[e23] * geometric_product[e15]),
        );
    }
}
impl GeometricQuotient<DipoleInversion> for AntiLine {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       41       60        0
    //    simd3        0        8        0
    //    simd4       11       10        0
    // Totals...
    // yes simd       52       78        0
    //  no simd       85      124        0
    fn geometric_quotient(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let reverse = DipoleInversion::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + 2.0 * (other[e1234] * other[e3215])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2),
        );
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e23] * geometric_product[e1234]) + (self[e12] * geometric_product[e42]),
                (self[e23] * geometric_product[e43]) + (self[e31] * geometric_product[e1234]),
                (self[e31] * geometric_product[e41]) + (self[e12] * geometric_product[e1234]),
                -(self[e31] * geometric_product[e31])
                    - (self[e12] * geometric_product[e12])
                    - (self[e15] * geometric_product[e41])
                    - (self[e25] * geometric_product[e42])
                    - (self[e35] * geometric_product[e43]),
            ]) - (self.group0().yzx() * geometric_product.group0().zxy()).with_w(self[e23] * geometric_product[e23]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e12] * geometric_product[e31]) + (self[e15] * geometric_product[e1234]) + (self[e35] * geometric_product[e42]),
                (self[e23] * geometric_product[e12]) + (self[e15] * geometric_product[e43]) + (self[e25] * geometric_product[e1234]),
                (self[e31] * geometric_product[e23]) + (self[e25] * geometric_product[e41]) + (self[e35] * geometric_product[e1234]),
                -(self[e12] * geometric_product[e4125]) - (self[e15] * geometric_product[e41]) - (self[e25] * geometric_product[e42]) - (self[e35] * geometric_product[e43]),
            ]) - (self.group0().yzx() * geometric_product.group1().zxy()).with_w(self[e23] * geometric_product[e4235])
                - (self.group1().yzx() * geometric_product.group0().zxy()).with_w(self[e31] * geometric_product[e4315]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * geometric_product[e3215]) + (self[e12] * geometric_product[e25]) + (self[e25] * geometric_product[e4125]) + (self[e35] * geometric_product[e31])
                    - (self[e35] * geometric_product[e4315]),
                (self[e23] * geometric_product[e35]) + (self[e31] * geometric_product[e3215]) + (self[e15] * geometric_product[e12]) + (self[e35] * geometric_product[e4235])
                    - (self[e35] * geometric_product[e23]),
                (self[e31] * geometric_product[e15]) + (self[e12] * geometric_product[e3215]) + (self[e15] * geometric_product[e4315]) + (self[e25] * geometric_product[e23])
                    - (self[e35] * geometric_product[e45]),
                0.0,
            ]) - (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e31], geometric_product[e42]]) * self.group1().xxx().with_w(self[e31]))
                - (geometric_product.group1().zw().with_zw(geometric_product[e4235], geometric_product[e43]) * self.group1().yyy().with_w(self[e12]))
                - (self.group0().yzx() * geometric_product.group2().zxy()).with_w(self[e23] * geometric_product[e41]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e35] * geometric_product[e42],
                self[e25] * geometric_product[e1234],
                self[e35] * geometric_product[e1234],
                -(self[e12] * geometric_product[e35]) - (self[e15] * geometric_product[e23]) - (self[e25] * geometric_product[e31]) - (self[e35] * geometric_product[e12]),
            ]) + (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], geometric_product[e4235]]) * self.group0().xxy().with_w(self[e15]))
                + (Simd32x4::from([geometric_product[e1234], geometric_product[e43], geometric_product[e41], geometric_product[e4125]]) * self.group1().xxy().with_w(self[e35]))
                + (Simd32x4::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45], geometric_product[e4315]]) * self.group0().zyz().with_w(self[e25]))
                - (self.group0().yzx() * geometric_product.group3().zxy()).with_w(self[e23] * geometric_product[e15])
                - (self.group1().yzx() * geometric_product.group0().zxy()).with_w(self[e31] * geometric_product[e25]),
        );
    }
}
impl GeometricQuotient<DualNum> for AntiLine {
    type Output = Line;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd2        0        1        0
    //    simd3        1        3        0
    // Totals...
    // yes simd        1        5        0
    //  no simd        3       12        0
    fn geometric_quotient(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DualNum::from_groups(/* e5, e12345 */ Simd32x2::from(f32::powi(other[e12345], -2) * -1.0) * other.group0());
        return Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(geometric_product[e12345]) * self.group0(),
            // e235, e315, e125
            (Simd32x3::from(geometric_product[e5]) * self.group0()) + (Simd32x3::from(geometric_product[e12345]) * self.group1()),
        );
    }
}
impl GeometricQuotient<FlatPoint> for AntiLine {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        8        0
    //    simd3        0        4        0
    //    simd4        2        1        0
    // Totals...
    // yes simd        4       13        0
    //  no simd       10       24        0
    fn geometric_quotient(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = FlatPoint::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(f32::powi(other[e45], -2) * -1.0) * Simd32x4::from([other[e15] * -1.0, other[e25] * -1.0, other[e35] * -1.0, other[e45] * -1.0]),
        );
        return Flector::from_groups(
            // e15, e25, e35, e45
            (self.group0().zxy() * geometric_product.group0().yzx()).with_w(0.0)
                - (Simd32x3::from(geometric_product[e45]) * self.group1()).with_w(0.0)
                - (self.group0().yzx() * geometric_product.group0().zxy()).with_w(0.0),
            // e4235, e4315, e4125, e3215
            (Simd32x3::from(geometric_product[e45]) * self.group0())
                .with_w(-(self[e23] * geometric_product[e15]) - (self[e31] * geometric_product[e25]) - (self[e12] * geometric_product[e35])),
        );
    }
}
impl GeometricQuotient<Flector> for AntiLine {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       14        0
    //    simd3        0        2        0
    //    simd4        6        7        0
    // Totals...
    // yes simd       17       23        0
    //  no simd       35       48        0
    fn geometric_quotient(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let reverse = Flector::from_groups(
            // e15, e25, e35, e45
            other.group0() * Simd32x4::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group1(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            -f32::powi(other[e45], 2) - f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2),
        );
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e23] * geometric_product[e3215]) + (self[e12] * geometric_product[e25]) + (self[e25] * geometric_product[e4125]),
                (self[e23] * geometric_product[e35]) + (self[e31] * geometric_product[e3215]) + (self[e35] * geometric_product[e4235]),
                (self[e31] * geometric_product[e15]) + (self[e12] * geometric_product[e3215]) + (self[e15] * geometric_product[e4315]),
                0.0,
            ]) - (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], geometric_product[e4315]]) * self.group1().xxy().with_w(self[e31]))
                - (Simd32x4::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45], geometric_product[e4125]]) * self.group1().zyz().with_w(self[e12]))
                - (self.group0().yzx() * geometric_product.group0().zxy()).with_w(self[e23] * geometric_product[e4235]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], geometric_product[e4235]]) * self.group0().xxy().with_w(self[e15]))
                + (Simd32x4::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45], geometric_product[e4315]]) * self.group0().zyz().with_w(self[e25]))
                + Simd32x3::from(0.0).with_w((self[e35] * geometric_product[e4125]) - (self[e31] * geometric_product[e25]) - (self[e12] * geometric_product[e35]))
                - (self.group0().yzx() * geometric_product.group1().zxy()).with_w(self[e23] * geometric_product[e15]),
        );
    }
}
impl GeometricQuotient<Line> for AntiLine {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       18        0
    //    simd3        0        7        0
    //    simd4        3        0        0
    // Totals...
    // yes simd       12       25        0
    //  no simd       21       39        0
    fn geometric_quotient(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let reverse = Line::from_groups(
            // e415, e425, e435
            other.group0() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group1() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(/* scalar */ -f32::powi(other[e415], 2) - f32::powi(other[e425], 2) - f32::powi(other[e435], 2));
        let geometric_product = Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group1(),
        );
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                self[e12] * geometric_product[e425],
                self[e23] * geometric_product[e435],
                self[e31] * geometric_product[e415],
                -(self[e31] * geometric_product[e425]) - (self[e12] * geometric_product[e435]),
            ]) - (self.group0().yzx() * geometric_product.group0().zxy()).with_w(self[e23] * geometric_product[e415]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * geometric_product[e315]) + (self[e35] * geometric_product[e425]),
                (self[e23] * geometric_product[e125]) + (self[e15] * geometric_product[e435]),
                (self[e31] * geometric_product[e235]) + (self[e25] * geometric_product[e415]),
                -(self[e12] * geometric_product[e125]) - (self[e15] * geometric_product[e415]) - (self[e25] * geometric_product[e425]) - (self[e35] * geometric_product[e435]),
            ]) - (self.group0().yzx() * geometric_product.group1().zxy()).with_w(self[e23] * geometric_product[e235])
                - (self.group1().yzx() * geometric_product.group0().zxy()).with_w(self[e31] * geometric_product[e315]),
        );
    }
}
impl GeometricQuotient<Motor> for AntiLine {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       25        0
    //    simd3        0        1        0
    //    simd4        3        6        0
    // Totals...
    // yes simd       22       32        0
    //  no simd       31       52        0
    fn geometric_quotient(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let reverse = Motor::from_groups(
            // e415, e425, e435, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            -f32::powi(other[e415], 2) - f32::powi(other[e425], 2) - f32::powi(other[e435], 2) - f32::powi(other[e12345], 2),
        );
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e235, e315, e125, e5
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self[e23] * geometric_product[e12345]) + (self[e12] * geometric_product[e425]),
                (self[e23] * geometric_product[e435]) + (self[e31] * geometric_product[e12345]),
                (self[e31] * geometric_product[e415]) + (self[e12] * geometric_product[e12345]),
                -(self[e31] * geometric_product[e425]) - (self[e12] * geometric_product[e435]),
            ]) - (geometric_product.group0().zxyx() * self.group0().yzx().with_w(self[e23])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e23] * geometric_product[e5]) + (self[e12] * geometric_product[e315]) + (self[e15] * geometric_product[e12345]) + (self[e35] * geometric_product[e425]),
                (self[e23] * geometric_product[e125]) + (self[e31] * geometric_product[e5]) + (self[e15] * geometric_product[e435]) + (self[e25] * geometric_product[e12345]),
                (self[e31] * geometric_product[e235]) + (self[e12] * geometric_product[e5]) + (self[e25] * geometric_product[e415]) + (self[e35] * geometric_product[e12345]),
                -(self[e12] * geometric_product[e125]) - (self[e15] * geometric_product[e415]) - (self[e25] * geometric_product[e425]) - (self[e35] * geometric_product[e435]),
            ]) - (geometric_product.group1().zxyx() * self.group0().yzx().with_w(self[e23]))
                - (self.group1().yzx() * geometric_product.group0().zxy()).with_w(self[e31] * geometric_product[e315]),
        );
    }
}
impl GeometricQuotient<MultiVector> for AntiLine {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       55       75        0
    //    simd2        5        7        0
    //    simd3       17       36        0
    //    simd4       17       16        0
    // Totals...
    // yes simd       94      134        0
    //  no simd      184      261        0
    fn geometric_quotient(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let reverse = MultiVector::from_groups(
            // scalar, e12345
            other.group0(),
            // e1, e2, e3, e4
            other.group1(),
            // e5
            other[e5],
            // e15, e25, e35, e45
            other.group3() * Simd32x4::from(-1.0),
            // e41, e42, e43
            other.group4() * Simd32x3::from(-1.0),
            // e23, e31, e12
            other.group5() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group6() * Simd32x4::from(-1.0),
            // e423, e431, e412
            other.group7() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group8() * Simd32x3::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group9(),
            // e1234
            other[e1234],
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e15] * other[e41])
                + 2.0 * (other[e25] * other[e42])
                + 2.0 * (other[e35] * other[e43])
                + 2.0 * (other[e3215] * other[e1234])
                + f32::powi(other[scalar], 2)
                + f32::powi(other[e1], 2)
                + f32::powi(other[e2], 2)
                + f32::powi(other[e3], 2)
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                + f32::powi(other[e321], 2)
                - f32::powi(other[e12345], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2)
                - 2.0 * (other[e4] * other[e5])
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(other_2[scalar]) * reverse.group0(),
            // e1, e2, e3, e4
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e5
            reverse[e5] * other_2[scalar],
            // e15, e25, e35, e45
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group4(),
            // e23, e31, e12
            Simd32x3::from(other_2[scalar]) * reverse.group5(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group6(),
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group7(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group8(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group9(),
            // e1234
            reverse[e1234] * other_2[scalar],
        );
        return MultiVector::from_groups(
            // scalar, e12345
            -(Simd32x2::from(self[e23]) * Simd32x2::from([geometric_product[e23], geometric_product[e415]]))
                - (Simd32x2::from(self[e31]) * Simd32x2::from([geometric_product[e31], geometric_product[e425]]))
                - (Simd32x2::from(self[e12]) * Simd32x2::from([geometric_product[e12], geometric_product[e435]]))
                - (Simd32x2::from(self[e15]) * Simd32x2::from([geometric_product[e41], geometric_product[e423]]))
                - (Simd32x2::from(self[e25]) * Simd32x2::from([geometric_product[e42], geometric_product[e431]]))
                - (Simd32x2::from(self[e35]) * Simd32x2::from([geometric_product[e43], geometric_product[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e23] * geometric_product[e321]) + (self[e12] * geometric_product[e2]) + (self[e25] * geometric_product[e412]),
                (self[e23] * geometric_product[e3]) + (self[e31] * geometric_product[e321]) + (self[e35] * geometric_product[e423]),
                (self[e31] * geometric_product[e1]) + (self[e12] * geometric_product[e321]) + (self[e15] * geometric_product[e431]),
                0.0,
            ]) - (Simd32x4::from([geometric_product[e4], geometric_product[e412], geometric_product[e423], geometric_product[e431]]) * self.group1().xxy().with_w(self[e31]))
                - (Simd32x4::from([geometric_product[e431], geometric_product[e4], geometric_product[e4], geometric_product[e412]]) * self.group1().zyz().with_w(self[e12]))
                - (self.group0().yzx() * geometric_product.group1().zxy()).with_w(self[e23] * geometric_product[e423]),
            // e5
            -(self[e23] * geometric_product[e235])
                - (self[e31] * geometric_product[e315])
                - (self[e12] * geometric_product[e125])
                - (self[e15] * geometric_product[e1])
                - (self[e15] * geometric_product[e415])
                - (self[e25] * geometric_product[e2])
                - (self[e25] * geometric_product[e425])
                - (self[e35] * geometric_product[e3])
                - (self[e35] * geometric_product[e435]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e23] * geometric_product[e3215])
                    + (self[e12] * geometric_product[e25])
                    + (self[e15] * geometric_product[scalar])
                    + (self[e25] * geometric_product[e4125])
                    + (self[e35] * geometric_product[e31]),
                (self[e23] * geometric_product[e35])
                    + (self[e31] * geometric_product[e3215])
                    + (self[e15] * geometric_product[e12])
                    + (self[e25] * geometric_product[scalar])
                    + (self[e35] * geometric_product[e4235]),
                (self[e31] * geometric_product[e15])
                    + (self[e12] * geometric_product[e3215])
                    + (self[e15] * geometric_product[e4315])
                    + (self[e25] * geometric_product[e23])
                    + (self[e35] * geometric_product[scalar]),
                -(self[e25] * geometric_product[e42]) - (self[e35] * geometric_product[e43]),
            ]) - (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e31], geometric_product[e4315]]) * self.group1().xxx().with_w(self[e31]))
                - (Simd32x4::from([geometric_product[e12], geometric_product[e45], geometric_product[e4235], geometric_product[e4125]]) * self.group1().yyy().with_w(self[e12]))
                - (Simd32x4::from([geometric_product[e4315], geometric_product[e23], geometric_product[e45], geometric_product[e41]]) * self.group1().zzz().with_w(self[e15]))
                - (self.group0().yzx() * geometric_product.group3().zxy()).with_w(self[e23] * geometric_product[e4235]),
            // e41, e42, e43
            (Simd32x3::from([geometric_product[e42], geometric_product[e1234], geometric_product[e1234]]) * self.group0().zyz())
                + (Simd32x3::from([geometric_product[e1234], geometric_product[e43], geometric_product[e41]]) * self.group0().xxy())
                - (self.group0().yzx() * geometric_product.group4().zxy()),
            // e23, e31, e12
            (Simd32x3::from(geometric_product[scalar]) * self.group0())
                + (Simd32x3::from([geometric_product[e42], geometric_product[e1234], geometric_product[e1234]]) * self.group1().zyz())
                + (Simd32x3::from([geometric_product[e1234], geometric_product[e43], geometric_product[e41]]) * self.group1().xxy())
                + (self.group0().zxy() * geometric_product.group5().yzx())
                - (self.group0().yzx() * geometric_product.group5().zxy())
                - (self.group1().yzx() * geometric_product.group4().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e35] * geometric_product[e431],
                self[e25] * geometric_product[e4],
                self[e35] * geometric_product[e4],
                self[e12] * geometric_product[e3] * -1.0,
            ]) + (Simd32x4::from([geometric_product[e4], geometric_product[e412], geometric_product[e423], geometric_product[e412]]) * self.group1().xxy().with_w(self[e35]))
                + (geometric_product.group0().yy().with_zw(geometric_product[e12345], self[e15]) * self.group0().with_w(geometric_product[e423]))
                + (self.group0().zxy() * geometric_product.group6().yzx()).with_w(self[e25] * geometric_product[e431])
                - (self.group0().yzx() * geometric_product.group6().zxy()).with_w(self[e23] * geometric_product[e1])
                - (self.group1().yzx() * geometric_product.group7().zxy()).with_w(self[e31] * geometric_product[e2]),
            // e423, e431, e412
            (Simd32x3::from([geometric_product[e4], geometric_product[e412], geometric_product[e423]]) * self.group0().xxy())
                + (Simd32x3::from([geometric_product[e431], geometric_product[e4], geometric_product[e4]]) * self.group0().zyz())
                - (self.group0().yzx() * geometric_product.group7().zxy()),
            // e235, e315, e125
            (Simd32x3::from(geometric_product[e12345]) * self.group1())
                + (Simd32x3::from([geometric_product[e2], geometric_product[e435], geometric_product[e415]]) * self.group1().zxy())
                + (Simd32x3::from([geometric_product[e5], geometric_product[e125], geometric_product[e235]]) * self.group0().xxy())
                + (Simd32x3::from([geometric_product[e321], geometric_product[e3], geometric_product[e1]]) * self.group1().xxy())
                + (Simd32x3::from([geometric_product[e315], geometric_product[e5], geometric_product[e5]]) * self.group0().zyz())
                + (self.group1().zyz() * geometric_product.group6().yww())
                - (self.group0().yzx() * geometric_product.group8().zxy())
                - (self.group1().yzx() * geometric_product.group1().zxy())
                - (self.group1().yzx() * geometric_product.group6().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e35] * geometric_product[e42],
                self[e25] * geometric_product[e1234],
                self[e35] * geometric_product[e1234],
                -(self[e12] * geometric_product[e35]) - (self[e15] * geometric_product[e23]) - (self[e25] * geometric_product[e31]) - (self[e35] * geometric_product[e12]),
            ]) + (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], geometric_product[e4235]]) * self.group0().xxy().with_w(self[e15]))
                + (Simd32x4::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45], geometric_product[e4315]]) * self.group0().zyz().with_w(self[e25]))
                + (Simd32x4::from([geometric_product[e1234], geometric_product[e43], geometric_product[e41], geometric_product[e4125]]) * self.group1().xxy().with_w(self[e35]))
                - (self.group0().yzx() * geometric_product.group9().zxy()).with_w(self[e23] * geometric_product[e15])
                - (self.group1().yzx() * geometric_product.group4().zxy()).with_w(self[e31] * geometric_product[e25]),
            // e1234
            -(self[e23] * geometric_product[e41]) - (self[e31] * geometric_product[e42]) - (self[e12] * geometric_product[e43]),
        );
    }
}
impl GeometricQuotient<Plane> for AntiLine {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       16        0
    //    simd4        2        3        0
    // Totals...
    // yes simd        9       19        0
    //  no simd       15       28        0
    fn geometric_quotient(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Plane::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(-f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2)) * other.group0(),
        );
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e23] * geometric_product[e3215]) + (self[e25] * geometric_product[e4125]),
                (self[e31] * geometric_product[e3215]) + (self[e35] * geometric_product[e4235]),
                (self[e12] * geometric_product[e3215]) + (self[e15] * geometric_product[e4315]),
                -(self[e31] * geometric_product[e4315]) - (self[e12] * geometric_product[e4125]),
            ]) - (geometric_product.group0().yzxx() * self.group1().zxy().with_w(self[e23])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e31] * geometric_product[e4125] * -1.0,
                self[e12] * geometric_product[e4235] * -1.0,
                self[e23] * geometric_product[e4315] * -1.0,
                (self[e25] * geometric_product[e4315]) + (self[e35] * geometric_product[e4125]),
            ]) + (geometric_product.group0().yzxx() * self.group0().zxy().with_w(self[e15])),
        );
    }
}
impl GeometricQuotient<RoundPoint> for AntiLine {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       11        0
    //    simd3        0        5        0
    //    simd4        4        3        0
    // Totals...
    // yes simd        9       19        0
    //  no simd       21       38        0
    fn geometric_quotient(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2) - 2.0 * (other[e4] * other[e5]),
        );
        let geometric_product = RoundPoint::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from(other_2[scalar]) * other.group0(), /* e5 */ other[e5] * other_2[scalar]);
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(geometric_product[e4]) * self.group0(),
            // e415, e425, e435, e321
            (Simd32x3::from(geometric_product[e4]) * self.group1())
                .with_w(-(self[e23] * geometric_product[e1]) - (self[e31] * geometric_product[e2]) - (self[e12] * geometric_product[e3])),
            // e235, e315, e125, e4
            (Simd32x3::from(geometric_product[e5]) * self.group0()).with_w(0.0) + (self.group1().zxy() * geometric_product.group0().yzx()).with_w(0.0)
                - (self.group1().yzx() * geometric_product.group0().zxy()).with_w(0.0),
            // e1, e2, e3, e5
            Simd32x4::from([
                self[e12] * geometric_product[e2],
                self[e23] * geometric_product[e3],
                self[e31] * geometric_product[e1],
                self[e35] * geometric_product[e3] * -1.0,
            ]) - (geometric_product.group0().zxyx() * self.group0().yzx().with_w(self[e15]))
                - (geometric_product.group0().wwwy() * self.group1().with_w(self[e25])),
        );
    }
}
impl GeometricQuotient<Scalar> for AntiLine {
    type Output = AntiLine;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        0        1
    //    simd3        0        2        0
    // Totals...
    // yes simd        0        2        1
    //  no simd        0        6        1
    fn geometric_quotient(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Scalar::from_groups(/* scalar */ 1.0 / other[scalar]);
        return AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(geometric_product[scalar]) * self.group0(),
            // e15, e25, e35
            Simd32x3::from(geometric_product[scalar]) * self.group1(),
        );
    }
}
impl GeometricQuotient<Sphere> for AntiLine {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       14        0
    //    simd3        0        6        0
    //    simd4        4        2        0
    // Totals...
    // yes simd        9       22        0
    //  no simd       21       40        0
    fn geometric_quotient(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e3215] * other[e1234]) - f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2),
        );
        let geometric_product = Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * other.group0(),
            // e1234
            other_2[scalar] * other[e1234],
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(geometric_product[e1234]) * self.group0(),
            // e23, e31, e12, e45
            (Simd32x3::from(geometric_product[e1234]) * self.group1())
                .with_w(-(self[e23] * geometric_product[e4235]) - (self[e31] * geometric_product[e4315]) - (self[e12] * geometric_product[e4125])),
            // e15, e25, e35, e1234
            (Simd32x3::from(geometric_product[e3215]) * self.group0()).with_w(0.0) + (self.group1().yzx() * geometric_product.group0().zxy()).with_w(0.0)
                - (self.group1().zxy() * geometric_product.group0().yzx()).with_w(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e31] * geometric_product[e4125] * -1.0,
                self[e12] * geometric_product[e4235] * -1.0,
                self[e23] * geometric_product[e4315] * -1.0,
                self[e35] * geometric_product[e4125],
            ]) + (geometric_product.group0().yzxx() * self.group0().zxy().with_w(self[e15]))
                + (Simd32x3::from(geometric_product[e1234]) * self.group1()).with_w(self[e25] * geometric_product[e4315]),
        );
    }
}
impl GeometricQuotient<VersorEven> for AntiLine {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44       63        0
    //    simd3        0        6        0
    //    simd4       12       13        0
    // Totals...
    // yes simd       56       82        0
    //  no simd       92      133        0
    fn geometric_quotient(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let reverse = VersorEven::from_groups(
            // e423, e431, e412, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e5
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e4
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)
                - f32::powi(other[e12345], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125])
                - 2.0 * (other[e5] * other[e4]),
        );
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e5
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e1, e2, e3, e4
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e23] * geometric_product[e4]) + (self[e12] * geometric_product[e431]),
                (self[e23] * geometric_product[e412]) + (self[e31] * geometric_product[e4]),
                (self[e31] * geometric_product[e423]) + (self[e12] * geometric_product[e4]),
                -(self[e31] * geometric_product[e425])
                    - (self[e12] * geometric_product[e435])
                    - (self[e15] * geometric_product[e423])
                    - (self[e25] * geometric_product[e431])
                    - (self[e35] * geometric_product[e412]),
            ]) - (self.group0().yzx() * geometric_product.group0().zxy()).with_w(self[e23] * geometric_product[e415]),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e35] * geometric_product[e431],
                self[e25] * geometric_product[e4],
                self[e35] * geometric_product[e4],
                self[e12] * geometric_product[e3] * -1.0,
            ]) + (Simd32x4::from([geometric_product[e12345], geometric_product[e435], geometric_product[e415], geometric_product[e423]]) * self.group0().xxy().with_w(self[e15]))
                + (Simd32x4::from([geometric_product[e425], geometric_product[e12345], geometric_product[e12345], geometric_product[e431]])
                    * self.group0().zyz().with_w(self[e25]))
                + (Simd32x4::from([geometric_product[e4], geometric_product[e412], geometric_product[e423], geometric_product[e412]]) * self.group1().xxy().with_w(self[e35]))
                - (self.group0().yzx() * geometric_product.group1().zxy()).with_w(self[e23] * geometric_product[e1])
                - (self.group1().yzx() * geometric_product.group0().zxy()).with_w(self[e31] * geometric_product[e2]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e23] * geometric_product[e5])
                    + (self[e12] * geometric_product[e315])
                    + (self[e15] * geometric_product[e12345])
                    + (self[e15] * geometric_product[e321])
                    + (self[e35] * geometric_product[e425])
                    + (self[e35] * geometric_product[e2]),
                (self[e23] * geometric_product[e125])
                    + (self[e31] * geometric_product[e5])
                    + (self[e15] * geometric_product[e435])
                    + (self[e15] * geometric_product[e3])
                    + (self[e25] * geometric_product[e12345])
                    + (self[e25] * geometric_product[e321]),
                (self[e31] * geometric_product[e235])
                    + (self[e12] * geometric_product[e5])
                    + (self[e25] * geometric_product[e415])
                    + (self[e25] * geometric_product[e1])
                    + (self[e35] * geometric_product[e12345])
                    + (self[e35] * geometric_product[e321]),
                -(self[e15] * geometric_product[e415])
                    - (self[e15] * geometric_product[e1])
                    - (self[e25] * geometric_product[e425])
                    - (self[e25] * geometric_product[e2])
                    - (self[e35] * geometric_product[e435])
                    - (self[e35] * geometric_product[e3]),
            ]) - (geometric_product.group2().zxyx() * self.group0().yzx().with_w(self[e23]))
                - (self.group1().yzx() * geometric_product.group1().zxy()).with_w(self[e31] * geometric_product[e315])
                - (self.group1().yzx() * geometric_product.group3().zxy()).with_w(self[e12] * geometric_product[e125]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e23] * geometric_product[e321]) + (self[e12] * geometric_product[e2]) + (self[e25] * geometric_product[e412]),
                (self[e23] * geometric_product[e3]) + (self[e31] * geometric_product[e321]) + (self[e35] * geometric_product[e423]),
                (self[e31] * geometric_product[e1]) + (self[e12] * geometric_product[e321]) + (self[e15] * geometric_product[e431]),
                0.0,
            ]) - (Simd32x4::from([geometric_product[e431], geometric_product[e4], geometric_product[e4], geometric_product[e412]]) * self.group1().zyz().with_w(self[e12]))
                - (Simd32x4::from([geometric_product[e4], geometric_product[e412], geometric_product[e423], geometric_product[e431]]) * self.group1().xxy().with_w(self[e31]))
                - (self.group0().yzx() * geometric_product.group3().zxy()).with_w(self[e23] * geometric_product[e423]),
        );
    }
}
impl GeometricQuotient<VersorOdd> for AntiLine {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       66        0
    //    simd3        0        6        0
    //    simd4       11       12        0
    // Totals...
    // yes simd       59       84        0
    //  no simd       92      132        0
    fn geometric_quotient(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let reverse = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + 2.0 * (other[e1234] * other[e3215])
                + f32::powi(other[scalar], 2)
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2),
        );
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e23] * geometric_product[e1234]) + (self[e12] * geometric_product[e42]),
                (self[e23] * geometric_product[e43]) + (self[e31] * geometric_product[e1234]),
                (self[e31] * geometric_product[e41]) + (self[e12] * geometric_product[e1234]),
                -(self[e31] * geometric_product[e31])
                    - (self[e12] * geometric_product[e12])
                    - (self[e15] * geometric_product[e41])
                    - (self[e25] * geometric_product[e42])
                    - (self[e35] * geometric_product[e43]),
            ]) - (self.group0().yzx() * geometric_product.group0().zxy()).with_w(self[e23] * geometric_product[e23]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e23] * geometric_product[scalar]) + (self[e12] * geometric_product[e31]) + (self[e15] * geometric_product[e1234]) + (self[e35] * geometric_product[e42]),
                (self[e23] * geometric_product[e12]) + (self[e31] * geometric_product[scalar]) + (self[e15] * geometric_product[e43]) + (self[e25] * geometric_product[e1234]),
                (self[e31] * geometric_product[e23]) + (self[e12] * geometric_product[scalar]) + (self[e25] * geometric_product[e41]) + (self[e35] * geometric_product[e1234]),
                -(self[e12] * geometric_product[e4125]) - (self[e15] * geometric_product[e41]) - (self[e25] * geometric_product[e42]) - (self[e35] * geometric_product[e43]),
            ]) - (self.group0().yzx() * geometric_product.group1().zxy()).with_w(self[e23] * geometric_product[e4235])
                - (self.group1().yzx() * geometric_product.group0().zxy()).with_w(self[e31] * geometric_product[e4315]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * geometric_product[e3215])
                    + (self[e12] * geometric_product[e25])
                    + (self[e15] * geometric_product[scalar])
                    + (self[e25] * geometric_product[e4125])
                    + (self[e35] * geometric_product[e31])
                    - (self[e35] * geometric_product[e4315]),
                (self[e23] * geometric_product[e35])
                    + (self[e31] * geometric_product[e3215])
                    + (self[e15] * geometric_product[e12])
                    + (self[e25] * geometric_product[scalar])
                    + (self[e35] * geometric_product[e4235])
                    - (self[e35] * geometric_product[e23]),
                (self[e31] * geometric_product[e15])
                    + (self[e12] * geometric_product[e3215])
                    + (self[e15] * geometric_product[e4315])
                    + (self[e25] * geometric_product[e23])
                    + (self[e35] * geometric_product[scalar])
                    - (self[e35] * geometric_product[e45]),
                0.0,
            ]) - (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e31], geometric_product[e42]]) * self.group1().xxx().with_w(self[e31]))
                - (geometric_product.group1().zw().with_zw(geometric_product[e4235], geometric_product[e43]) * self.group1().yyy().with_w(self[e12]))
                - (self.group0().yzx() * geometric_product.group2().zxy()).with_w(self[e23] * geometric_product[e41]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e35] * geometric_product[e42],
                self[e25] * geometric_product[e1234],
                self[e35] * geometric_product[e1234],
                -(self[e12] * geometric_product[e35]) - (self[e15] * geometric_product[e23]) - (self[e25] * geometric_product[e31]) - (self[e35] * geometric_product[e12]),
            ]) + (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], geometric_product[e4235]]) * self.group0().xxy().with_w(self[e15]))
                + (Simd32x4::from([geometric_product[e1234], geometric_product[e43], geometric_product[e41], geometric_product[e4125]]) * self.group1().xxy().with_w(self[e35]))
                + (Simd32x4::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45], geometric_product[e4315]]) * self.group0().zyz().with_w(self[e25]))
                - (self.group0().yzx() * geometric_product.group3().zxy()).with_w(self[e23] * geometric_product[e15])
                - (self.group1().yzx() * geometric_product.group0().zxy()).with_w(self[e31] * geometric_product[e25]),
        );
    }
}
impl std::ops::Div<GeometricQuotientInfix> for AntiMotor {
    type Output = GeometricQuotientInfixPartial<AntiMotor>;
    fn div(self, _rhs: GeometricQuotientInfix) -> Self::Output {
        GeometricQuotientInfixPartial(self)
    }
}
impl GeometricQuotient<AntiCircleRotor> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       60        0
    //    simd3        0        7        0
    //    simd4       10        9        0
    // Totals...
    // yes simd       50       76        0
    //  no simd       80      117        0
    fn geometric_quotient(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiCircleRotor::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, scalar
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                + f32::powi(other[scalar], 2)
                - f32::powi(other[e45], 2),
        );
        let geometric_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                geometric_product[e42] * self[e12],
                geometric_product[e43] * self[e23],
                geometric_product[e43] * self[scalar],
                -(geometric_product[e42] * self[e25])
                    - (geometric_product[e43] * self[e35])
                    - (geometric_product[e23] * self[e23])
                    - (geometric_product[e31] * self[e31])
                    - (geometric_product[e12] * self[e12]),
            ]) + (self.group0().wwyw() * geometric_product.group0().xyx().with_w(geometric_product[scalar]))
                - (geometric_product.group0().zxy() * self.group0().yzx()).with_w(geometric_product[e41] * self[e15]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (geometric_product[e42] * self[e35]) + (geometric_product[e23] * self[scalar]) + (geometric_product[e31] * self[e12]) + (geometric_product[scalar] * self[e23]),
                (geometric_product[e43] * self[e15]) + (geometric_product[e31] * self[scalar]) + (geometric_product[e12] * self[e23]) + (geometric_product[scalar] * self[e31]),
                (geometric_product[e43] * self[e3215]) + (geometric_product[e23] * self[e31]) + (geometric_product[e12] * self[scalar]) + (geometric_product[scalar] * self[e12]),
                geometric_product[e43] * self[e35] * -1.0,
            ]) + (geometric_product.group0().xyx() * self.group1().wwy()).with_w(geometric_product[e45] * self[scalar])
                - (self.group1().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e41]))
                - (geometric_product.group1().zxy() * self.group0().yzx()).with_w(geometric_product[e42] * self[e25]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (geometric_product[e23] * self[e3215])
                    + (geometric_product[e31] * self[e35])
                    + (geometric_product[e15] * self[scalar])
                    + (geometric_product[e25] * self[e12])
                    + (geometric_product[scalar] * self[e15]),
                (geometric_product[e31] * self[e3215])
                    + (geometric_product[e12] * self[e15])
                    + (geometric_product[e25] * self[scalar])
                    + (geometric_product[e35] * self[e23])
                    + (geometric_product[scalar] * self[e25]),
                (geometric_product[e23] * self[e25])
                    + (geometric_product[e12] * self[e3215])
                    + (geometric_product[e15] * self[e31])
                    + (geometric_product[e35] * self[scalar])
                    + (geometric_product[scalar] * self[e35]),
                0.0,
            ]) - (self.group0().yzxz() * geometric_product.group2().zxy().with_w(geometric_product[e43]))
                - (geometric_product.group1().zxy() * self.group1().yzx()).with_w(geometric_product[e41] * self[e23])
                - (geometric_product.group1().www() * self.group1().xyz()).with_w(geometric_product[e42] * self[e31]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (geometric_product[e42] * self[e35]) + (geometric_product[e45] * self[e23]),
                (geometric_product[e43] * self[e15]) + (geometric_product[e45] * self[e31]),
                (geometric_product[e43] * self[e3215]) + (geometric_product[e45] * self[e12]),
                -(geometric_product[e31] * self[e25])
                    - (geometric_product[e12] * self[e35])
                    - (geometric_product[e45] * self[e3215])
                    - (geometric_product[e15] * self[e23])
                    - (geometric_product[e25] * self[e31])
                    - (geometric_product[e35] * self[e12]),
            ]) + (self.group1().wwyw() * geometric_product.group0().xyx().with_w(geometric_product[scalar]))
                - (self.group1().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e23])),
        );
    }
}
impl GeometricQuotient<AntiDipoleInversion> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       47       69        0
    //    simd3        0       11        0
    //    simd4       17       13        0
    // Totals...
    // yes simd       64       93        0
    //  no simd      115      154        0
    fn geometric_quotient(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e4
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125])
                - 2.0 * (other[e4] * other[e5]),
        );
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e4
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e1, e2, e3, e5
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (geometric_product[e431] * self[e12]) + (geometric_product[e4] * self[e23]),
                (geometric_product[e412] * self[e23]) + (geometric_product[e4] * self[e31]),
                (geometric_product[e412] * self[scalar]) + (geometric_product[e4] * self[e12]),
                -(geometric_product[e431] * self[e25])
                    - (geometric_product[e412] * self[e35])
                    - (geometric_product[e415] * self[e23])
                    - (geometric_product[e425] * self[e31])
                    - (geometric_product[e435] * self[e12]),
            ]) + (geometric_product.group0().xyx() * self.group0().wwy()).with_w(geometric_product[e4] * self[e3215])
                - (geometric_product.group0().zxy() * self.group0().yzx()).with_w(geometric_product[e423] * self[e15]),
            // e415, e425, e435, e321
            Simd32x4::from([
                geometric_product[e4] * self[e15],
                geometric_product[e4] * self[e25],
                geometric_product[e4] * self[e35],
                -(geometric_product[e2] * self[e31]) - (geometric_product[e3] * self[e12]),
            ]) + (geometric_product.group1().yzzw() * self.group0().zxww())
                + (self.group1().zxwy() * geometric_product.group0().yzz().with_w(geometric_product[e431]))
                + (self.group1().wwyx() * geometric_product.group0().xyx().with_w(geometric_product[e423]))
                + (geometric_product.group1().xyx() * self.group0().wwy()).with_w(geometric_product[e412] * self[e35])
                - (self.group0().yzxx() * geometric_product.group1().zxy().with_w(geometric_product[e1]))
                - (self.group1().yzxw() * geometric_product.group0().zxy().with_w(geometric_product[e4])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (geometric_product[e321] * self[e15])
                    + (geometric_product[e235] * self[scalar])
                    + (geometric_product[e315] * self[e12])
                    + (geometric_product[e1] * self[e3215])
                    + (geometric_product[e2] * self[e35])
                    + (geometric_product[e5] * self[e23]),
                (geometric_product[e321] * self[e25])
                    + (geometric_product[e315] * self[scalar])
                    + (geometric_product[e125] * self[e23])
                    + (geometric_product[e2] * self[e3215])
                    + (geometric_product[e3] * self[e15])
                    + (geometric_product[e5] * self[e31]),
                (geometric_product[e321] * self[e35])
                    + (geometric_product[e235] * self[e31])
                    + (geometric_product[e125] * self[scalar])
                    + (geometric_product[e1] * self[e25])
                    + (geometric_product[e3] * self[e3215])
                    + (geometric_product[e5] * self[e12]),
                -(geometric_product[e235] * self[e23])
                    - (geometric_product[e315] * self[e31])
                    - (geometric_product[e125] * self[e12])
                    - (geometric_product[e1] * self[e15])
                    - (geometric_product[e2] * self[e25])
                    - (geometric_product[e3] * self[e35]),
            ]) + (geometric_product.group1().xyxw() * self.group1().wwyw())
                + (geometric_product.group1().yzz() * self.group1().zxw()).with_w(geometric_product[e5] * self[scalar])
                - (geometric_product.group1().zxyx() * self.group1().yzxx())
                - (self.group1().yzxz() * geometric_product.group3().zxy().with_w(geometric_product[e435]))
                - (geometric_product.group2().zxy() * self.group0().yzx()).with_w(geometric_product[e425] * self[e25]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (geometric_product[e321] * self[e23]) + (geometric_product[e1] * self[scalar]) + (geometric_product[e2] * self[e12]) - (geometric_product[e3] * self[e31]),
                (geometric_product[e321] * self[e31]) + (geometric_product[e2] * self[scalar]) + (geometric_product[e3] * self[e23]) - (geometric_product[e1] * self[e12]),
                (geometric_product[e321] * self[e12]) + (geometric_product[e1] * self[e31]) + (geometric_product[e3] * self[scalar]) - (geometric_product[e2] * self[e23]),
                0.0,
            ]) + (geometric_product.group0().zxy() * self.group1().yzx()).with_w(geometric_product[e4] * self[scalar])
                - (geometric_product.group0().xyx() * self.group1().wwy()).with_w(geometric_product[e423] * self[e23])
                - (geometric_product.group0().yzz() * self.group1().zxw()).with_w(geometric_product[e431] * self[e31])
                - (geometric_product.group2().www() * self.group1().xyz()).with_w(geometric_product[e412] * self[e12]),
        );
    }
}
impl GeometricQuotient<AntiDualNum> for AntiMotor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd2        0        1        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        1        4        0
    //  no simd        4       14        0
    fn geometric_quotient(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDualNum::from_groups(/* e3215, scalar */ Simd32x2::from(f32::powi(other[scalar], -2)) * other.group0());
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(geometric_product[scalar]) * self.group0(),
            // e15, e25, e35, e3215
            (Simd32x4::from(geometric_product[e3215]) * self.group0()) + (Simd32x4::from(geometric_product[scalar]) * self.group1()),
        );
    }
}
impl GeometricQuotient<AntiFlatPoint> for AntiMotor {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        9        0
    //    simd3        3        5        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        6       15        0
    //  no simd       12       28        0
    fn geometric_quotient(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlatPoint::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(f32::powi(other[e321], -2)) * Simd32x4::from([other[e235] * -1.0, other[e315] * -1.0, other[e125] * -1.0, other[e321] * -1.0]),
        );
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            ((Simd32x3::from(geometric_product[e321]) * self.group1().xyz())
                + (geometric_product.group0().xyx() * self.group0().wwy())
                + (geometric_product.group0().yzz() * self.group0().zxw())
                - (geometric_product.group0().zxy() * self.group0().yzx()))
            .with_w(geometric_product[e321] * self[scalar]),
            // e1, e2, e3, e5
            (geometric_product.group0().www() * self.group0().xyz()).with_w(
                (geometric_product[e321] * self[e3215]) - (geometric_product[e235] * self[e23]) - (geometric_product[e315] * self[e31]) - (geometric_product[e125] * self[e12]),
            ),
        );
    }
}
impl GeometricQuotient<AntiFlector> for AntiMotor {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       25        0
    //    simd4        6        9        0
    // Totals...
    // yes simd       25       34        0
    //  no simd       43       61        0
    fn geometric_quotient(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiFlector::from_groups(/* e235, e315, e125, e321 */ other.group0() * Simd32x4::from(-1.0), /* e1, e2, e3, e5 */ other.group1());
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2),
        );
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e1, e2, e3, e5
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (geometric_product[e315] * self[e12])
                    + (geometric_product[e321] * self[e15])
                    + (geometric_product[e1] * self[e3215])
                    + (geometric_product[e2] * self[e35])
                    + (geometric_product[e5] * self[e23]),
                (geometric_product[e125] * self[e23])
                    + (geometric_product[e321] * self[e25])
                    + (geometric_product[e2] * self[e3215])
                    + (geometric_product[e3] * self[e15])
                    + (geometric_product[e5] * self[e31]),
                (geometric_product[e125] * self[scalar])
                    + (geometric_product[e321] * self[e35])
                    + (geometric_product[e1] * self[e25])
                    + (geometric_product[e3] * self[e3215])
                    + (geometric_product[e5] * self[e12]),
                geometric_product[e3] * self[e12] * -1.0,
            ]) + (geometric_product.group0().xyxw() * self.group0().wwyw())
                - (geometric_product.group1().zxyy() * self.group1().yzx().with_w(self[e31]))
                - (self.group0().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e1])),
            // e1, e2, e3, e5
            Simd32x4::from([
                geometric_product[e2] * self[e12],
                geometric_product[e3] * self[e23],
                geometric_product[e3] * self[scalar],
                -(geometric_product[e315] * self[e31])
                    - (geometric_product[e125] * self[e12])
                    - (geometric_product[e1] * self[e15])
                    - (geometric_product[e2] * self[e25])
                    - (geometric_product[e3] * self[e35]),
            ]) + (Simd32x4::from(geometric_product[e321]) * self.group0().xyz().with_w(self[e3215]))
                + (geometric_product.group1().xyxw() * self.group0().wwyw())
                - (self.group0().yzxx() * geometric_product.group1().zxy().with_w(geometric_product[e235])),
        );
    }
}
impl GeometricQuotient<AntiLine> for AntiMotor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       25        0
    //    simd3        0        5        0
    //    simd4        3        2        0
    // Totals...
    // yes simd       21       32        0
    //  no simd       30       48        0
    fn geometric_quotient(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiLine::from_groups(
            // e23, e31, e12
            other.group0() * Simd32x3::from(-1.0),
            // e15, e25, e35
            other.group1() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(/* scalar */ f32::powi(other[e23], 2) + f32::powi(other[e31], 2) + f32::powi(other[e12], 2));
        let geometric_product = AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e15, e25, e35
            Simd32x3::from(other_2[scalar]) * reverse.group1(),
        );
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (geometric_product[e23] * self[scalar]) + (geometric_product[e31] * self[e12]),
                (geometric_product[e31] * self[scalar]) + (geometric_product[e12] * self[e23]),
                (geometric_product[e23] * self[e31]) + (geometric_product[e12] * self[scalar]),
                -(geometric_product[e31] * self[e31]) - (geometric_product[e12] * self[e12]),
            ]) - (self.group0().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e23])),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (geometric_product[e23] * self[e3215]) + (geometric_product[e31] * self[e35]) + (geometric_product[e15] * self[scalar]) + (geometric_product[e25] * self[e12]),
                (geometric_product[e31] * self[e3215]) + (geometric_product[e12] * self[e15]) + (geometric_product[e25] * self[scalar]) + (geometric_product[e35] * self[e23]),
                (geometric_product[e23] * self[e25]) + (geometric_product[e12] * self[e3215]) + (geometric_product[e15] * self[e31]) + (geometric_product[e35] * self[scalar]),
                -(geometric_product[e12] * self[e35]) - (geometric_product[e15] * self[e23]) - (geometric_product[e25] * self[e31]) - (geometric_product[e35] * self[e12]),
            ]) - (self.group1().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e23]))
                - (geometric_product.group1().zxy() * self.group0().yzx()).with_w(geometric_product[e31] * self[e25]),
        );
    }
}
impl GeometricQuotient<AntiMotor> for AntiMotor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       26        0
    //    simd3        0        2        0
    //    simd4        6        8        0
    // Totals...
    // yes simd       25       36        0
    //  no simd       43       64        0
    fn geometric_quotient(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, e3215
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e23], 2) + f32::powi(other[e31], 2) + f32::powi(other[e12], 2) + f32::powi(other[scalar], 2),
        );
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e15, e25, e35, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (geometric_product[e31] * self[e12]) + (geometric_product[scalar] * self[e23]),
                (geometric_product[e12] * self[e23]) + (geometric_product[scalar] * self[e31]),
                (geometric_product[e12] * self[scalar]) + (geometric_product[scalar] * self[e12]),
                -(geometric_product[e31] * self[e31]) - (geometric_product[e12] * self[e12]),
            ]) + (geometric_product.group0().xyxw() * self.group0().wwyw())
                - (geometric_product.group0().zxyx() * self.group0().yzxx()),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (geometric_product[scalar] * self[e15]) + (geometric_product[e15] * self[scalar]) + (geometric_product[e25] * self[e12]) + (geometric_product[e3215] * self[e23]),
                (geometric_product[scalar] * self[e25]) + (geometric_product[e25] * self[scalar]) + (geometric_product[e35] * self[e23]) + (geometric_product[e3215] * self[e31]),
                (geometric_product[scalar] * self[e35]) + (geometric_product[e15] * self[e31]) + (geometric_product[e35] * self[scalar]) + (geometric_product[e3215] * self[e12]),
                -(geometric_product[e12] * self[e35]) - (geometric_product[e15] * self[e23]) - (geometric_product[e25] * self[e31]) - (geometric_product[e35] * self[e12]),
            ]) + (geometric_product.group0().xyxw() * self.group1().wwyw())
                + (geometric_product.group0().yzz() * self.group1().zxw()).with_w(geometric_product[e3215] * self[scalar])
                - (geometric_product.group0().zxyx() * self.group1().yzxx())
                - (geometric_product.group1().zxy() * self.group0().yzx()).with_w(geometric_product[e31] * self[e25]),
        );
    }
}
impl GeometricQuotient<AntiPlane> for AntiMotor {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       16        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       13       20        0
    //  no simd       22       32        0
    fn geometric_quotient(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiPlane::from_groups(
            // e1, e2, e3, e5
            Simd32x4::from(f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)) * other.group0(),
        );
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (self[e23] * geometric_product[e5]) + (self[e35] * geometric_product[e2]) + (self[e3215] * geometric_product[e1]),
                (self[e31] * geometric_product[e5]) + (self[e15] * geometric_product[e3]) + (self[e3215] * geometric_product[e2]),
                (self[e12] * geometric_product[e5]) + (self[e25] * geometric_product[e1]) + (self[e3215] * geometric_product[e3]),
                -(self[e31] * geometric_product[e2]) - (self[e12] * geometric_product[e3]),
            ]) - (geometric_product.group0().zxyx() * self.group1().yzx().with_w(self[e23])),
            // e1, e2, e3, e5
            Simd32x4::from([
                self[scalar] * geometric_product[e1],
                self[scalar] * geometric_product[e2],
                self[scalar] * geometric_product[e3],
                -(self[e25] * geometric_product[e2]) - (self[e35] * geometric_product[e3]),
            ]) + (self.group0().zxyw() * geometric_product.group0().yzxw())
                - (geometric_product.group0().zxyx() * self.group0().yzx().with_w(self[e15])),
        );
    }
}
impl GeometricQuotient<AntiScalar> for AntiMotor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        1
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        3        1
    //  no simd        0        9        1
    fn geometric_quotient(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiScalar::from_groups(/* e12345 */ 1.0 / other[e12345] * -1.0);
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(geometric_product[e12345]) * self.group0(),
            // e235, e315, e125, e5
            Simd32x4::from(geometric_product[e12345]) * self.group1(),
        );
    }
}
impl GeometricQuotient<Circle> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       31       53        0
    //    simd3        0       10        0
    //    simd4       10        6        0
    // Totals...
    // yes simd       41       69        0
    //  no simd       71      107        0
    fn geometric_quotient(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let reverse = Circle::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125
            other.group2() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group2(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e12] * geometric_product[e431]) + (self[scalar] * geometric_product[e423]),
                (self[e23] * geometric_product[e412]) + (self[scalar] * geometric_product[e431]),
                (self[e31] * geometric_product[e423]) + (self[scalar] * geometric_product[e412]),
                -(self[e23] * geometric_product[e415])
                    - (self[e31] * geometric_product[e425])
                    - (self[e12] * geometric_product[e435])
                    - (self[e25] * geometric_product[e431])
                    - (self[e35] * geometric_product[e412]),
            ]) - (geometric_product.group0().zxy() * self.group0().yzx()).with_w(self[e15] * geometric_product[e423]),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(self[e31] * geometric_product[e435]) - (self[e25] * geometric_product[e412]),
                -(self[e12] * geometric_product[e415]) - (self[e35] * geometric_product[e423]),
                -(self[e23] * geometric_product[e425]) - (self[e15] * geometric_product[e431]),
                0.0,
            ]) + (Simd32x4::from(self[scalar]) * geometric_product.group1())
                + (self.group1().zxwy() * geometric_product.group0().yzz().with_w(geometric_product[e431]))
                + (self.group1().wwyx() * geometric_product.group0().xyx().with_w(geometric_product[e423]))
                + (self.group0().zxy() * geometric_product.group1().yzx()).with_w(self[e35] * geometric_product[e412]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * geometric_product[e315]) + (self[e15] * geometric_product[e321]) + (self[e35] * geometric_product[e425]) + (self[e3215] * geometric_product[e415]),
                (self[e23] * geometric_product[e125]) + (self[e15] * geometric_product[e435]) + (self[e25] * geometric_product[e321]) + (self[e3215] * geometric_product[e425]),
                (self[scalar] * geometric_product[e125]) + (self[e25] * geometric_product[e415]) + (self[e35] * geometric_product[e321]) + (self[e3215] * geometric_product[e435]),
                -(self[e12] * geometric_product[e125]) - (self[e15] * geometric_product[e415]) - (self[e25] * geometric_product[e425]) - (self[e35] * geometric_product[e435]),
            ]) + (geometric_product.group2().xyx() * self.group0().wwy()).with_w(self[e3215] * geometric_product[e321])
                - (self.group0().yzxx() * geometric_product.group2().zxy().with_w(geometric_product[e235]))
                - (self.group1().yzx() * geometric_product.group1().zxy()).with_w(self[e31] * geometric_product[e315]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e23] * geometric_product[e321]) + (self[e25] * geometric_product[e412]),
                (self[e31] * geometric_product[e321]) + (self[e35] * geometric_product[e423]),
                (self[e12] * geometric_product[e321]) + (self[e15] * geometric_product[e431]),
                self[e12] * geometric_product[e412] * -1.0,
            ]) - (geometric_product.group0().xyx() * self.group1().wwy()).with_w(self[e23] * geometric_product[e423])
                - (geometric_product.group0().yzz() * self.group1().zxw()).with_w(self[e31] * geometric_product[e431]),
        );
    }
}
impl GeometricQuotient<CircleRotor> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       53        0
    //    simd3        0        8        0
    //    simd4       12       10        0
    // Totals...
    // yes simd       44       71        0
    //  no simd       80      117        0
    fn geometric_quotient(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let reverse = CircleRotor::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e12345
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - f32::powi(other[e12345], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e12] * geometric_product[e431],
                self[e23] * geometric_product[e412],
                self[scalar] * geometric_product[e412],
                -(self[e23] * geometric_product[e415])
                    - (self[e31] * geometric_product[e425])
                    - (self[e12] * geometric_product[e435])
                    - (self[e25] * geometric_product[e431])
                    - (self[e35] * geometric_product[e412]),
            ]) + (geometric_product.group0().xyx() * self.group0().wwy()).with_w(self[scalar] * geometric_product[e12345])
                - (geometric_product.group0().zxy() * self.group0().yzx()).with_w(self[e15] * geometric_product[e423]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[scalar] * geometric_product[e415]) - (self[e31] * geometric_product[e435]) - (self[e25] * geometric_product[e412]),
                (self[scalar] * geometric_product[e425]) - (self[e12] * geometric_product[e415]) - (self[e35] * geometric_product[e423]),
                (self[scalar] * geometric_product[e435]) - (self[e23] * geometric_product[e425]) - (self[e15] * geometric_product[e431]),
                0.0,
            ]) + (Simd32x4::from([geometric_product[e425], geometric_product[e12345], geometric_product[e12345], geometric_product[e321]]) * self.group0().zyzw())
                + (Simd32x4::from([geometric_product[e12345], geometric_product[e435], geometric_product[e415], self[e35]]) * self.group0().xxy().with_w(geometric_product[e412]))
                + (self.group1().zxwy() * geometric_product.group0().yzz().with_w(geometric_product[e431]))
                + (self.group1().wwyx() * geometric_product.group0().xyx().with_w(geometric_product[e423])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e15] * geometric_product[e321]) + (self[e15] * geometric_product[e12345]) + (self[e35] * geometric_product[e425]) + (self[e3215] * geometric_product[e415]),
                (self[e15] * geometric_product[e435]) + (self[e25] * geometric_product[e321]) + (self[e25] * geometric_product[e12345]) + (self[e3215] * geometric_product[e425]),
                (self[e25] * geometric_product[e415]) + (self[e35] * geometric_product[e321]) + (self[e35] * geometric_product[e12345]) + (self[e3215] * geometric_product[e435]),
                -(self[e12] * geometric_product[e125]) - (self[e15] * geometric_product[e415]) - (self[e25] * geometric_product[e425]) - (self[e35] * geometric_product[e435]),
            ]) + (geometric_product.group2() * self.group0().www().with_w(self[e3215]))
                + (self.group0().zxy() * geometric_product.group2().yzx()).with_w(self[e3215] * geometric_product[e321])
                - (self.group0().yzxx() * geometric_product.group2().zxyx())
                - (self.group1().yzx() * geometric_product.group1().zxy()).with_w(self[e31] * geometric_product[e315]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e23] * geometric_product[e321]) + (self[e25] * geometric_product[e412]),
                (self[e31] * geometric_product[e321]) + (self[e35] * geometric_product[e423]),
                (self[e12] * geometric_product[e321]) + (self[e15] * geometric_product[e431]),
                self[e12] * geometric_product[e412] * -1.0,
            ]) - (geometric_product.group0().xyx() * self.group1().wwy()).with_w(self[e23] * geometric_product[e423])
                - (geometric_product.group0().yzz() * self.group1().zxw()).with_w(self[e31] * geometric_product[e431]),
        );
    }
}
impl GeometricQuotient<Dipole> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       39       61        0
    //    simd3        0       10        0
    //    simd4        8        4        0
    // Totals...
    // yes simd       47       75        0
    //  no simd       71      107        0
    fn geometric_quotient(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let reverse = Dipole::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35
            other.group2() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2),
        );
        let geometric_product = Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35
            Simd32x3::from(other_2[scalar]) * reverse.group2(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e12] * geometric_product[e42]) + (self[scalar] * geometric_product[e41]),
                (self[e23] * geometric_product[e43]) + (self[scalar] * geometric_product[e42]),
                (self[e31] * geometric_product[e41]) + (self[scalar] * geometric_product[e43]),
                -(self[e23] * geometric_product[e23])
                    - (self[e31] * geometric_product[e31])
                    - (self[e12] * geometric_product[e12])
                    - (self[e25] * geometric_product[e42])
                    - (self[e35] * geometric_product[e43]),
            ]) - (geometric_product.group0().zxy() * self.group0().yzx()).with_w(self[e15] * geometric_product[e41]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e12] * geometric_product[e31]) + (self[scalar] * geometric_product[e23]) + (self[e35] * geometric_product[e42]),
                (self[e23] * geometric_product[e12]) + (self[scalar] * geometric_product[e31]) + (self[e15] * geometric_product[e43]),
                (self[e31] * geometric_product[e23]) + (self[scalar] * geometric_product[e12]) + (self[e3215] * geometric_product[e43]),
                self[e35] * geometric_product[e43] * -1.0,
            ]) + (geometric_product.group0().xyx() * self.group1().wwy()).with_w(self[scalar] * geometric_product[e45])
                - (self.group1().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e41]))
                - (self.group0().yzx() * geometric_product.group1().zxy()).with_w(self[e25] * geometric_product[e42]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e12] * geometric_product[e25]) + (self[scalar] * geometric_product[e15]) + (self[e35] * geometric_product[e31]) + (self[e3215] * geometric_product[e23]),
                (self[e23] * geometric_product[e35]) + (self[scalar] * geometric_product[e25]) + (self[e15] * geometric_product[e12]) + (self[e3215] * geometric_product[e31]),
                (self[e31] * geometric_product[e15]) + (self[scalar] * geometric_product[e35]) + (self[e25] * geometric_product[e23]) + (self[e3215] * geometric_product[e12]),
                0.0,
            ]) - (self.group0().yzxx() * geometric_product.group2().zxy().with_w(geometric_product[e41]))
                - (self.group1().xyx() * geometric_product.group1().wwy()).with_w(self[e31] * geometric_product[e42])
                - (self.group1().yzz() * geometric_product.group1().zxw()).with_w(self[e12] * geometric_product[e43]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e23] * geometric_product[e45]) + (self[e35] * geometric_product[e42]) + (self[e3215] * geometric_product[e41]),
                (self[e31] * geometric_product[e45]) + (self[e15] * geometric_product[e43]) + (self[e3215] * geometric_product[e42]),
                (self[e12] * geometric_product[e45]) + (self[e25] * geometric_product[e41]) + (self[e3215] * geometric_product[e43]),
                -(self[e31] * geometric_product[e25])
                    - (self[e12] * geometric_product[e35])
                    - (self[e15] * geometric_product[e23])
                    - (self[e25] * geometric_product[e31])
                    - (self[e35] * geometric_product[e12])
                    - (self[e3215] * geometric_product[e45]),
            ]) - (geometric_product.group0().zxy() * self.group1().yzx()).with_w(self[e23] * geometric_product[e15]),
        );
    }
}
impl GeometricQuotient<DipoleInversion> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       51       73        0
    //    simd3        0       11        0
    //    simd4       16       12        0
    // Totals...
    // yes simd       67       96        0
    //  no simd      115      154        0
    fn geometric_quotient(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let reverse = DipoleInversion::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + 2.0 * (other[e1234] * other[e3215])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2),
        );
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e23] * geometric_product[e1234]) + (self[e12] * geometric_product[e42]),
                (self[e23] * geometric_product[e43]) + (self[e31] * geometric_product[e1234]),
                (self[e12] * geometric_product[e1234]) + (self[scalar] * geometric_product[e43]),
                -(self[e23] * geometric_product[e23])
                    - (self[e31] * geometric_product[e31])
                    - (self[e12] * geometric_product[e12])
                    - (self[e25] * geometric_product[e42])
                    - (self[e35] * geometric_product[e43]),
            ]) + (geometric_product.group0().xyx() * self.group0().wwy()).with_w(self[e3215] * geometric_product[e1234])
                - (geometric_product.group0().zxy() * self.group0().yzx()).with_w(self[e15] * geometric_product[e41]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e12] * geometric_product[e31]) + (self[scalar] * geometric_product[e23]) + (self[e15] * geometric_product[e1234]),
                (self[e23] * geometric_product[e12]) + (self[scalar] * geometric_product[e31]) + (self[e25] * geometric_product[e1234]),
                (self[e31] * geometric_product[e23]) + (self[scalar] * geometric_product[e12]) + (self[e35] * geometric_product[e1234]),
                -(self[e23] * geometric_product[e4235]) - (self[e31] * geometric_product[e4315]) - (self[e12] * geometric_product[e4125]) - (self[e35] * geometric_product[e43]),
            ]) + (geometric_product.group0().xyx() * self.group1().wwy()).with_w(self[scalar] * geometric_product[e45])
                + (geometric_product.group0().yzz() * self.group1().zxw()).with_w(self[e3215] * geometric_product[e1234])
                - (self.group1().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e41]))
                - (self.group0().yzx() * geometric_product.group1().zxy()).with_w(self[e25] * geometric_product[e42]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e12] * geometric_product[e25])
                    + (self[scalar] * geometric_product[e15])
                    + (self[e25] * geometric_product[e4125])
                    + (self[e35] * geometric_product[e31])
                    + (self[e3215] * geometric_product[e23])
                    - (self[e35] * geometric_product[e4315])
                    - (self[e3215] * geometric_product[e4235]),
                (self[e31] * geometric_product[e3215])
                    + (self[scalar] * geometric_product[e25])
                    + (self[e15] * geometric_product[e12])
                    + (self[e35] * geometric_product[e4235])
                    + (self[e3215] * geometric_product[e31])
                    - (self[e35] * geometric_product[e23])
                    - (self[e3215] * geometric_product[e4315]),
                (self[e12] * geometric_product[e3215])
                    + (self[scalar] * geometric_product[e35])
                    + (self[e15] * geometric_product[e4315])
                    + (self[e25] * geometric_product[e23])
                    + (self[e3215] * geometric_product[e12])
                    - (self[e35] * geometric_product[e45])
                    - (self[e3215] * geometric_product[e4125]),
                0.0,
            ]) + (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e1234]]) * self.group0().xxyw())
                - (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e31], self[e31]]) * self.group1().xxx().with_w(geometric_product[e42]))
                - (geometric_product.group1().zw().with_zw(geometric_product[e4235], self[e12]) * self.group1().yyy().with_w(geometric_product[e43]))
                - (self.group0().yzx() * geometric_product.group2().zxy()).with_w(self[e23] * geometric_product[e41]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[scalar] * geometric_product[e4235]) + (self[e15] * geometric_product[e1234]),
                (self[scalar] * geometric_product[e4315]) + (self[e25] * geometric_product[e1234]),
                (self[scalar] * geometric_product[e4125]) + (self[e35] * geometric_product[e1234]),
                -(self[e12] * geometric_product[e35])
                    - (self[e15] * geometric_product[e23])
                    - (self[e25] * geometric_product[e31])
                    - (self[e35] * geometric_product[e12])
                    - (self[e3215] * geometric_product[e45]),
            ]) + (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], geometric_product[e4315]]) * self.group0().xxy().with_w(self[e25]))
                + (Simd32x4::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45], geometric_product[e4125]]) * self.group0().zyz().with_w(self[e35]))
                + (geometric_product.group0().xyx() * self.group1().wwy()).with_w(self[scalar] * geometric_product[e3215])
                + (geometric_product.group0().yzz() * self.group1().zxw()).with_w(self[e15] * geometric_product[e4235])
                - (self.group0().yzxy() * geometric_product.group3().zxy().with_w(geometric_product[e25]))
                - (geometric_product.group0().zxy() * self.group1().yzx()).with_w(self[e23] * geometric_product[e15]),
        );
    }
}
impl GeometricQuotient<DualNum> for AntiMotor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd2        0        1        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        1        5        0
    //  no simd        4       15        0
    fn geometric_quotient(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DualNum::from_groups(/* e5, e12345 */ Simd32x2::from(f32::powi(other[e12345], -2) * -1.0) * other.group0());
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(geometric_product[e12345]) * self.group0(),
            // e235, e315, e125, e5
            (Simd32x4::from(geometric_product[e5]) * self.group0()) + (Simd32x4::from(geometric_product[e12345]) * self.group1()),
        );
    }
}
impl GeometricQuotient<FlatPoint> for AntiMotor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       10        0
    //    simd3        3        5        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        6       16        0
    //  no simd       12       29        0
    fn geometric_quotient(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = FlatPoint::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(f32::powi(other[e45], -2) * -1.0) * Simd32x4::from([other[e15] * -1.0, other[e25] * -1.0, other[e35] * -1.0, other[e45] * -1.0]),
        );
        return Flector::from_groups(
            // e15, e25, e35, e45
            ((Simd32x3::from(self[scalar]) * geometric_product.group0().xyz()) + (self.group0().zxy() * geometric_product.group0().yzx())
                - (Simd32x3::from(geometric_product[e45]) * self.group1().xyz())
                - (self.group0().yzx() * geometric_product.group0().zxy()))
            .with_w(self[scalar] * geometric_product[e45]),
            // e4235, e4315, e4125, e3215
            (Simd32x3::from(geometric_product[e45]) * self.group0().xyz()).with_w(
                -(self[e23] * geometric_product[e15]) - (self[e31] * geometric_product[e25]) - (self[e12] * geometric_product[e35]) - (self[e3215] * geometric_product[e45]),
            ),
        );
    }
}
impl GeometricQuotient<Flector> for AntiMotor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       16        0
    //    simd4        8       11        0
    // Totals...
    // yes simd       23       27        0
    //  no simd       47       60        0
    fn geometric_quotient(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let reverse = Flector::from_groups(
            // e15, e25, e35, e45
            other.group0() * Simd32x4::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group1(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            -f32::powi(other[e45], 2) - f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2),
        );
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e12] * geometric_product[e25]) + (self[scalar] * geometric_product[e15]) + (self[e25] * geometric_product[e4125]) - (self[e3215] * geometric_product[e4235]),
                (self[e31] * geometric_product[e3215]) + (self[scalar] * geometric_product[e25]) + (self[e35] * geometric_product[e4235])
                    - (self[e3215] * geometric_product[e4315]),
                (self[e12] * geometric_product[e3215]) + (self[scalar] * geometric_product[e35]) + (self[e15] * geometric_product[e4315])
                    - (self[e3215] * geometric_product[e4125]),
                0.0,
            ]) + (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e45]]) * self.group0().xxyw())
                - (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], geometric_product[e4315]]) * self.group1().xxy().with_w(self[e31]))
                - (Simd32x4::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45], geometric_product[e4125]]) * self.group1().zyz().with_w(self[e12]))
                - (self.group0().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e4235])),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], geometric_product[e3215]]) * self.group0().xxyw())
                + (Simd32x4::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45], geometric_product[e4235]]) * self.group0().zyz().with_w(self[e15]))
                + (geometric_product.group1().xyzy() * self.group0().www().with_w(self[e25]))
                + Simd32x3::from(0.0).with_w(
                    (self[e35] * geometric_product[e4125]) - (self[e31] * geometric_product[e25]) - (self[e12] * geometric_product[e35]) - (self[e3215] * geometric_product[e45]),
                )
                - (self.group0().yzxx() * geometric_product.group1().zxy().with_w(geometric_product[e15])),
        );
    }
}
impl GeometricQuotient<Line> for AntiMotor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       25        0
    //    simd3        0        5        0
    //    simd4        3        2        0
    // Totals...
    // yes simd       21       32        0
    //  no simd       30       48        0
    fn geometric_quotient(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let reverse = Line::from_groups(
            // e415, e425, e435
            other.group0() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group1() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(/* scalar */ -f32::powi(other[e415], 2) - f32::powi(other[e425], 2) - f32::powi(other[e435], 2));
        let geometric_product = Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group1(),
        );
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self[e12] * geometric_product[e425]) + (self[scalar] * geometric_product[e415]),
                (self[e23] * geometric_product[e435]) + (self[scalar] * geometric_product[e425]),
                (self[e31] * geometric_product[e415]) + (self[scalar] * geometric_product[e435]),
                -(self[e31] * geometric_product[e425]) - (self[e12] * geometric_product[e435]),
            ]) - (self.group0().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e415])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * geometric_product[e315]) + (self[scalar] * geometric_product[e235]) + (self[e35] * geometric_product[e425]) + (self[e3215] * geometric_product[e415]),
                (self[e23] * geometric_product[e125]) + (self[scalar] * geometric_product[e315]) + (self[e15] * geometric_product[e435]) + (self[e3215] * geometric_product[e425]),
                (self[e31] * geometric_product[e235]) + (self[scalar] * geometric_product[e125]) + (self[e25] * geometric_product[e415]) + (self[e3215] * geometric_product[e435]),
                -(self[e23] * geometric_product[e235]) - (self[e31] * geometric_product[e315]) - (self[e12] * geometric_product[e125]) - (self[e35] * geometric_product[e435]),
            ]) - (self.group1().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e415]))
                - (geometric_product.group1().zxy() * self.group0().yzx()).with_w(self[e25] * geometric_product[e425]),
        );
    }
}
impl GeometricQuotient<Motor> for AntiMotor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       26        0
    //    simd3        0        2        0
    //    simd4        6        8        0
    // Totals...
    // yes simd       25       36        0
    //  no simd       43       64        0
    fn geometric_quotient(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let reverse = Motor::from_groups(
            // e415, e425, e435, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            -f32::powi(other[e415], 2) - f32::powi(other[e425], 2) - f32::powi(other[e435], 2) - f32::powi(other[e12345], 2),
        );
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e235, e315, e125, e5
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self[e12] * geometric_product[e425]) + (self[scalar] * geometric_product[e415]),
                (self[e31] * geometric_product[e12345]) + (self[scalar] * geometric_product[e425]),
                (self[e12] * geometric_product[e12345]) + (self[scalar] * geometric_product[e435]),
                -(self[e31] * geometric_product[e425]) - (self[e12] * geometric_product[e435]),
            ]) + (self.group0().xxyw() * geometric_product.group0().wzxw())
                - (self.group0().yzxx() * geometric_product.group0().zxyx()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[scalar] * geometric_product[e235])
                    + (self[e15] * geometric_product[e12345])
                    + (self[e35] * geometric_product[e425])
                    + (self[e3215] * geometric_product[e415]),
                (self[scalar] * geometric_product[e315])
                    + (self[e15] * geometric_product[e435])
                    + (self[e25] * geometric_product[e12345])
                    + (self[e3215] * geometric_product[e425]),
                (self[scalar] * geometric_product[e125])
                    + (self[e25] * geometric_product[e415])
                    + (self[e35] * geometric_product[e12345])
                    + (self[e3215] * geometric_product[e435]),
                -(self[e12] * geometric_product[e125]) - (self[e15] * geometric_product[e415]) - (self[e25] * geometric_product[e425]) - (self[e35] * geometric_product[e435]),
            ]) + (self.group0().xxyw() * geometric_product.group1().wzxw())
                + (self.group0().zyz() * geometric_product.group1().yww()).with_w(self[e3215] * geometric_product[e12345])
                - (self.group0().yzxx() * geometric_product.group1().zxyx())
                - (self.group1().yzx() * geometric_product.group0().zxy()).with_w(self[e31] * geometric_product[e315]),
        );
    }
}
impl GeometricQuotient<MultiVector> for AntiMotor {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       66       88        0
    //    simd2        7        9        0
    //    simd3       24       45        0
    //    simd4       24       21        0
    // Totals...
    // yes simd      121      163        0
    //  no simd      248      325        0
    fn geometric_quotient(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let reverse = MultiVector::from_groups(
            // scalar, e12345
            other.group0(),
            // e1, e2, e3, e4
            other.group1(),
            // e5
            other[e5],
            // e15, e25, e35, e45
            other.group3() * Simd32x4::from(-1.0),
            // e41, e42, e43
            other.group4() * Simd32x3::from(-1.0),
            // e23, e31, e12
            other.group5() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group6() * Simd32x4::from(-1.0),
            // e423, e431, e412
            other.group7() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group8() * Simd32x3::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group9(),
            // e1234
            other[e1234],
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e15] * other[e41])
                + 2.0 * (other[e25] * other[e42])
                + 2.0 * (other[e35] * other[e43])
                + 2.0 * (other[e3215] * other[e1234])
                + f32::powi(other[scalar], 2)
                + f32::powi(other[e1], 2)
                + f32::powi(other[e2], 2)
                + f32::powi(other[e3], 2)
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                + f32::powi(other[e321], 2)
                - f32::powi(other[e12345], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2)
                - 2.0 * (other[e4] * other[e5])
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(other_2[scalar]) * reverse.group0(),
            // e1, e2, e3, e4
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e5
            reverse[e5] * other_2[scalar],
            // e15, e25, e35, e45
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group4(),
            // e23, e31, e12
            Simd32x3::from(other_2[scalar]) * reverse.group5(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group6(),
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group7(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group8(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group9(),
            // e1234
            reverse[e1234] * other_2[scalar],
        );
        return MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from(self[scalar]) * geometric_product.group0()) + (Simd32x2::from(self[e3215]) * Simd32x2::from([geometric_product[e1234], geometric_product[e4]]))
                - (Simd32x2::from(self[e23]) * Simd32x2::from([geometric_product[e23], geometric_product[e415]]))
                - (Simd32x2::from(self[e31]) * Simd32x2::from([geometric_product[e31], geometric_product[e425]]))
                - (Simd32x2::from(self[e12]) * Simd32x2::from([geometric_product[e12], geometric_product[e435]]))
                - (Simd32x2::from(self[e15]) * Simd32x2::from([geometric_product[e41], geometric_product[e423]]))
                - (Simd32x2::from(self[e25]) * Simd32x2::from([geometric_product[e42], geometric_product[e431]]))
                - (Simd32x2::from(self[e35]) * Simd32x2::from([geometric_product[e43], geometric_product[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e23] * geometric_product[e321]) + (self[e12] * geometric_product[e2]) + (self[scalar] * geometric_product[e1]) - (self[e15] * geometric_product[e4]),
                (self[e23] * geometric_product[e3]) + (self[e31] * geometric_product[e321]) + (self[scalar] * geometric_product[e2]) - (self[e25] * geometric_product[e4]),
                (self[e31] * geometric_product[e1]) + (self[e12] * geometric_product[e321]) + (self[scalar] * geometric_product[e3]) - (self[e35] * geometric_product[e4]),
                0.0,
            ]) + (geometric_product.group7().zxy() * self.group1().yzx()).with_w(self[scalar] * geometric_product[e4])
                - (geometric_product.group7().xyx() * self.group1().wwy()).with_w(self[e23] * geometric_product[e423])
                - (geometric_product.group7().yzz() * self.group1().zxw()).with_w(self[e31] * geometric_product[e431])
                - (self.group0().yzx() * geometric_product.group1().zxy()).with_w(self[e12] * geometric_product[e412]),
            // e5
            (self[scalar] * geometric_product[e5]) + (self[e3215] * geometric_product[e12345]) + (self[e3215] * geometric_product[e321])
                - (self[e23] * geometric_product[e235])
                - (self[e31] * geometric_product[e315])
                - (self[e12] * geometric_product[e125])
                - (self[e15] * geometric_product[e1])
                - (self[e15] * geometric_product[e415])
                - (self[e25] * geometric_product[e2])
                - (self[e25] * geometric_product[e425])
                - (self[e35] * geometric_product[e3])
                - (self[e35] * geometric_product[e435]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e23] * geometric_product[e3215])
                    + (self[e12] * geometric_product[e25])
                    + (self[scalar] * geometric_product[e15])
                    + (self[e25] * geometric_product[e4125])
                    + (self[e35] * geometric_product[e31]),
                (self[e23] * geometric_product[e35])
                    + (self[e31] * geometric_product[e3215])
                    + (self[scalar] * geometric_product[e25])
                    + (self[e15] * geometric_product[e12])
                    + (self[e35] * geometric_product[e4235]),
                (self[e31] * geometric_product[e15])
                    + (self[e12] * geometric_product[e3215])
                    + (self[scalar] * geometric_product[e35])
                    + (self[e15] * geometric_product[e4315])
                    + (self[e3215] * geometric_product[e12]),
                self[e12] * geometric_product[e4125] * -1.0,
            ]) + (geometric_product.group0().xx().with_zw(geometric_product[scalar], self[scalar]) * self.group1().xyz().with_w(geometric_product[e45]))
                + (geometric_product.group5().xyx() * self.group1().wwy()).with_w(self[e3215] * geometric_product[e1234])
                - (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], self[e35]]) * self.group1().xxy().with_w(geometric_product[e43]))
                - (Simd32x4::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45], geometric_product[e4235]]) * self.group1().zyz().with_w(self[e23]))
                - (self.group1().yzxx() * geometric_product.group5().zxy().with_w(geometric_product[e41]))
                - (geometric_product.group9().xyzy() * self.group1().www().with_w(self[e31]))
                - (self.group0().yzx() * geometric_product.group3().zxy()).with_w(self[e25] * geometric_product[e42]),
            // e41, e42, e43
            (Simd32x3::from(geometric_product[e1234]) * self.group0().xyz())
                + (geometric_product.group4().xyx() * self.group0().wwy())
                + (geometric_product.group4().yzz() * self.group0().zxw())
                - (geometric_product.group4().zxy() * self.group0().yzx()),
            // e23, e31, e12
            (Simd32x3::from(geometric_product[scalar]) * self.group0().xyz())
                + (Simd32x3::from(geometric_product[e1234]) * self.group1().xyz())
                + (geometric_product.group4().xyx() * self.group1().wwy())
                + (geometric_product.group4().yzz() * self.group1().zxw())
                + (geometric_product.group5().xyx() * self.group0().wwy())
                + (geometric_product.group5().yzz() * self.group0().zxw())
                - (geometric_product.group4().zxy() * self.group1().yzx())
                - (geometric_product.group5().zxy() * self.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[scalar] * geometric_product[e415]) + (self[e15] * geometric_product[e4]),
                (self[scalar] * geometric_product[e425]) + (self[e25] * geometric_product[e4]),
                (self[scalar] * geometric_product[e435]) + (self[e35] * geometric_product[e4]),
                -(self[e12] * geometric_product[e3]) - (self[e3215] * geometric_product[e4]),
            ]) + (self.group0().zxyw() * geometric_product.group6().yzxw())
                + (self.group1().zxwz() * geometric_product.group7().yzz().with_w(geometric_product[e412]))
                + (self.group1().wwyy() * geometric_product.group7().xyx().with_w(geometric_product[e431]))
                + (geometric_product.group0().yy().with_zw(geometric_product[e12345], geometric_product[e423]) * self.group0().xyz().with_w(self[e15]))
                - (self.group0().yzxy() * geometric_product.group6().zxy().with_w(geometric_product[e2]))
                - (geometric_product.group7().zxy() * self.group1().yzx()).with_w(self[e23] * geometric_product[e1]),
            // e423, e431, e412
            (Simd32x3::from(geometric_product[e4]) * self.group0().xyz())
                + (geometric_product.group7().xyx() * self.group0().wwy())
                + (geometric_product.group7().yzz() * self.group0().zxw())
                - (geometric_product.group7().zxy() * self.group0().yzx()),
            // e235, e315, e125
            (Simd32x3::from(self[e3215]) * geometric_product.group1().xyz())
                + (Simd32x3::from(self[e3215]) * geometric_product.group6().xyz())
                + (Simd32x3::from(geometric_product[e12345]) * self.group1().xyz())
                + (Simd32x3::from(geometric_product[e5]) * self.group0().xyz())
                + (Simd32x3::from([geometric_product[e2], geometric_product[e435], geometric_product[e415]]) * self.group1().zxy())
                + (Simd32x3::from([geometric_product[e321], geometric_product[e3], geometric_product[e1]]) * self.group1().xxy())
                + (geometric_product.group8().xyx() * self.group0().wwy())
                + (geometric_product.group8().yzz() * self.group0().zxw())
                + (self.group1().zyz() * geometric_product.group6().yww())
                - (geometric_product.group8().zxy() * self.group0().yzx())
                - (self.group1().yzx() * geometric_product.group1().zxy())
                - (self.group1().yzx() * geometric_product.group6().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e15] * geometric_product[e1234],
                self[e25] * geometric_product[e1234],
                self[e35] * geometric_product[e1234],
                -(self[e23] * geometric_product[e15])
                    - (self[e31] * geometric_product[e25])
                    - (self[e12] * geometric_product[e35])
                    - (self[e35] * geometric_product[e12])
                    - (self[e3215] * geometric_product[e45]),
            ]) + (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], geometric_product[e4235]]) * self.group0().xxy().with_w(self[e15]))
                + (Simd32x4::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45], geometric_product[e4315]]) * self.group0().zyz().with_w(self[e25]))
                + (self.group1().wwyw() * geometric_product.group4().xyx().with_w(geometric_product[scalar]))
                + (geometric_product.group9().xyzz() * self.group0().www().with_w(self[e35]))
                + (geometric_product.group4().yzz() * self.group1().zxw()).with_w(self[scalar] * geometric_product[e3215])
                - (self.group1().yzxx() * geometric_product.group4().zxy().with_w(geometric_product[e23]))
                - (self.group0().yzx() * geometric_product.group9().zxy()).with_w(self[e25] * geometric_product[e31]),
            // e1234
            (self[scalar] * geometric_product[e1234]) - (self[e23] * geometric_product[e41]) - (self[e31] * geometric_product[e42]) - (self[e12] * geometric_product[e43]),
        );
    }
}
impl GeometricQuotient<Plane> for AntiMotor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       16        0
    //    simd4        4        5        0
    // Totals...
    // yes simd       10       21        0
    //  no simd       22       36        0
    fn geometric_quotient(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Plane::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(-f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2)) * other.group0(),
        );
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e23] * geometric_product[e3215]) + (self[e25] * geometric_product[e4125]),
                (self[e31] * geometric_product[e3215]) + (self[e35] * geometric_product[e4235]),
                (self[e12] * geometric_product[e3215]) + (self[e15] * geometric_product[e4315]),
                self[e12] * geometric_product[e4125] * -1.0,
            ]) - (geometric_product.group0().xyzy() * self.group1().www().with_w(self[e31]))
                - (geometric_product.group0().yzxx() * self.group1().zxy().with_w(self[e23])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e31] * geometric_product[e4125] * -1.0,
                self[e12] * geometric_product[e4235] * -1.0,
                self[e23] * geometric_product[e4315] * -1.0,
                (self[e25] * geometric_product[e4315]) + (self[e35] * geometric_product[e4125]),
            ]) + (self.group0().zxyw() * geometric_product.group0().yzxw())
                + (geometric_product.group0().xyzx() * self.group0().www().with_w(self[e15])),
        );
    }
}
impl GeometricQuotient<RoundPoint> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       16        0
    //    simd3        3        5        0
    //    simd4        2        4        0
    // Totals...
    // yes simd       15       25        0
    //  no simd       27       47        0
    fn geometric_quotient(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2) - 2.0 * (other[e4] * other[e5]),
        );
        let geometric_product = RoundPoint::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from(other_2[scalar]) * other.group0(), /* e5 */ other[e5] * other_2[scalar]);
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(geometric_product[e4]) * self.group0().xyz().with_w(self[e3215]),
            // e415, e425, e435, e321
            (Simd32x3::from(geometric_product[e4]) * self.group1().xyz())
                .with_w(-(self[e23] * geometric_product[e1]) - (self[e31] * geometric_product[e2]) - (self[e12] * geometric_product[e3]) - (self[e3215] * geometric_product[e4])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e35] * geometric_product[e2]) + (self[e3215] * geometric_product[e1]),
                (self[e15] * geometric_product[e3]) + (self[e3215] * geometric_product[e2]),
                (self[e25] * geometric_product[e1]) + (self[e3215] * geometric_product[e3]),
                -(self[e25] * geometric_product[e2]) - (self[e35] * geometric_product[e3]),
            ]) + (Simd32x4::from(geometric_product[e5]) * self.group0())
                - (self.group1().yzxx() * geometric_product.group0().zxyx()),
            // e1, e2, e3, e4
            ((Simd32x3::from(self[scalar]) * geometric_product.group0().xyz()) + (self.group0().zxy() * geometric_product.group0().yzx())
                - (Simd32x3::from(geometric_product[e4]) * self.group1().xyz())
                - (self.group0().yzx() * geometric_product.group0().zxy()))
            .with_w(self[scalar] * geometric_product[e4]),
        );
    }
}
impl GeometricQuotient<Scalar> for AntiMotor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        0        1
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        2        1
    //  no simd        0        8        1
    fn geometric_quotient(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Scalar::from_groups(/* scalar */ 1.0 / other[scalar]);
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(geometric_product[scalar]) * self.group0(),
            // e15, e25, e35, e3215
            Simd32x4::from(geometric_product[scalar]) * self.group1(),
        );
    }
}
impl GeometricQuotient<Sphere> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       15        0
    //    simd3        3        5        0
    //    simd4        3        5        0
    // Totals...
    // yes simd       12       25        0
    //  no simd       27       50        0
    fn geometric_quotient(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e3215] * other[e1234]) - f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2),
        );
        let geometric_product = Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * other.group0(),
            // e1234
            other_2[scalar] * other[e1234],
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(geometric_product[e1234]) * self.group0().xyz().with_w(self[e3215]),
            // e23, e31, e12, e45
            (Simd32x3::from(geometric_product[e1234]) * self.group1().xyz()).with_w(
                (self[e3215] * geometric_product[e1234]) - (self[e23] * geometric_product[e4235]) - (self[e31] * geometric_product[e4315]) - (self[e12] * geometric_product[e4125]),
            ),
            // e15, e25, e35, e1234
            ((Simd32x3::from(geometric_product[e3215]) * self.group0().xyz()) + (self.group1().yzx() * geometric_product.group0().zxy())
                - (Simd32x3::from(self[e3215]) * geometric_product.group0().xyz())
                - (self.group1().zxy() * geometric_product.group0().yzx()))
            .with_w(self[scalar] * geometric_product[e1234]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e31] * geometric_product[e4125] * -1.0,
                self[e12] * geometric_product[e4235] * -1.0,
                self[e23] * geometric_product[e4315] * -1.0,
                self[e35] * geometric_product[e4125],
            ]) + (self.group0().zxyw() * geometric_product.group0().yzxw())
                + (self.group1().xyzy() * Simd32x3::from(geometric_product[e1234]).with_w(geometric_product[e4315]))
                + (geometric_product.group0().xyzx() * self.group0().www().with_w(self[e15])),
        );
    }
}
impl GeometricQuotient<VersorEven> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       66        0
    //    simd3        0        6        0
    //    simd4       19       20        0
    // Totals...
    // yes simd       67       92        0
    //  no simd      124      164        0
    fn geometric_quotient(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let reverse = VersorEven::from_groups(
            // e423, e431, e412, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e5
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e4
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)
                - f32::powi(other[e12345], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125])
                - 2.0 * (other[e5] * other[e4]),
        );
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e5
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e1, e2, e3, e4
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[scalar] * geometric_product[e423],
                self[scalar] * geometric_product[e431],
                self[scalar] * geometric_product[e412],
                -(self[e31] * geometric_product[e425])
                    - (self[e12] * geometric_product[e435])
                    - (self[e15] * geometric_product[e423])
                    - (self[e25] * geometric_product[e431])
                    - (self[e35] * geometric_product[e412]),
            ]) + (Simd32x4::from([geometric_product[e431], geometric_product[e4], geometric_product[e4], geometric_product[e4]]) * self.group0().zyz().with_w(self[e3215]))
                + (Simd32x4::from([geometric_product[e4], geometric_product[e412], geometric_product[e423], geometric_product[e12345]]) * self.group0().xxyw())
                - (self.group0().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e415])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e35] * geometric_product[e431]) + (self[e3215] * geometric_product[e423]),
                (self[e25] * geometric_product[e4]) + (self[e3215] * geometric_product[e431]),
                (self[e35] * geometric_product[e4]) + (self[e3215] * geometric_product[e412]),
                -(self[e12] * geometric_product[e3]) - (self[e3215] * geometric_product[e4]),
            ]) + (Simd32x4::from([geometric_product[e12345], geometric_product[e435], geometric_product[e415], geometric_product[e321]]) * self.group0().xxyw())
                + (Simd32x4::from([geometric_product[e425], geometric_product[e12345], geometric_product[e12345], geometric_product[e423]])
                    * self.group0().zyz().with_w(self[e15]))
                + (Simd32x4::from([geometric_product[e4], geometric_product[e412], geometric_product[e423], geometric_product[e412]]) * self.group1().xxyz())
                + (self.group0().www() * geometric_product.group1().xyz()).with_w(self[e25] * geometric_product[e431])
                - (self.group0().yzxx() * geometric_product.group1().zxy().with_w(geometric_product[e1]))
                - (self.group1().yzx() * geometric_product.group0().zxy()).with_w(self[e31] * geometric_product[e2]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e15] * geometric_product[e12345])
                    + (self[e15] * geometric_product[e321])
                    + (self[e35] * geometric_product[e425])
                    + (self[e35] * geometric_product[e2])
                    + (self[e3215] * geometric_product[e415])
                    + (self[e3215] * geometric_product[e1]),
                (self[e15] * geometric_product[e435])
                    + (self[e15] * geometric_product[e3])
                    + (self[e25] * geometric_product[e12345])
                    + (self[e25] * geometric_product[e321])
                    + (self[e3215] * geometric_product[e425])
                    + (self[e3215] * geometric_product[e2]),
                (self[e25] * geometric_product[e415])
                    + (self[e25] * geometric_product[e1])
                    + (self[e35] * geometric_product[e12345])
                    + (self[e35] * geometric_product[e321])
                    + (self[e3215] * geometric_product[e435])
                    + (self[e3215] * geometric_product[e3]),
                -(self[e15] * geometric_product[e415])
                    - (self[e15] * geometric_product[e1])
                    - (self[e25] * geometric_product[e425])
                    - (self[e25] * geometric_product[e2])
                    - (self[e35] * geometric_product[e435])
                    - (self[e35] * geometric_product[e3]),
            ]) + (self.group0().xxyw() * geometric_product.group2().wzxw())
                + (self.group0().zyz() * geometric_product.group2().yww()).with_w(self[e3215] * geometric_product[e12345])
                + (self.group0().www() * geometric_product.group2().xyz()).with_w(self[e3215] * geometric_product[e321])
                - (self.group0().yzxx() * geometric_product.group2().zxyx())
                - (self.group1().yzx() * geometric_product.group1().zxy()).with_w(self[e31] * geometric_product[e315])
                - (self.group1().yzx() * geometric_product.group3().zxy()).with_w(self[e12] * geometric_product[e125]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e12] * geometric_product[e2]) + (self[scalar] * geometric_product[e1]) + (self[e25] * geometric_product[e412]) - (self[e3215] * geometric_product[e423]),
                (self[e31] * geometric_product[e321]) + (self[scalar] * geometric_product[e2]) + (self[e35] * geometric_product[e423]) - (self[e3215] * geometric_product[e431]),
                (self[e12] * geometric_product[e321]) + (self[scalar] * geometric_product[e3]) + (self[e15] * geometric_product[e431]) - (self[e3215] * geometric_product[e412]),
                0.0,
            ]) + (Simd32x4::from([geometric_product[e321], geometric_product[e3], geometric_product[e1], geometric_product[e4]]) * self.group0().xxyw())
                - (Simd32x4::from([geometric_product[e431], geometric_product[e4], geometric_product[e4], geometric_product[e412]]) * self.group1().zyz().with_w(self[e12]))
                - (Simd32x4::from([geometric_product[e4], geometric_product[e412], geometric_product[e423], geometric_product[e431]]) * self.group1().xxy().with_w(self[e31]))
                - (self.group0().yzxx() * geometric_product.group3().zxy().with_w(geometric_product[e423])),
        );
    }
}
impl GeometricQuotient<VersorOdd> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       52       66        0
    //    simd3        0        2        0
    //    simd4       18       23        0
    // Totals...
    // yes simd       70       91        0
    //  no simd      124      164        0
    fn geometric_quotient(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let reverse = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + 2.0 * (other[e1234] * other[e3215])
                + f32::powi(other[scalar], 2)
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2),
        );
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[scalar] * geometric_product[e41],
                self[scalar] * geometric_product[e42],
                self[scalar] * geometric_product[e43],
                -(self[e31] * geometric_product[e31])
                    - (self[e12] * geometric_product[e12])
                    - (self[e15] * geometric_product[e41])
                    - (self[e25] * geometric_product[e42])
                    - (self[e35] * geometric_product[e43]),
            ]) + (Simd32x4::from([geometric_product[e42], geometric_product[e1234], geometric_product[e1234], geometric_product[e1234]]) * self.group0().zyz().with_w(self[e3215]))
                + (Simd32x4::from([geometric_product[e1234], geometric_product[e43], geometric_product[e41], geometric_product[scalar]]) * self.group0().xxyw())
                - (self.group0().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e23])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[scalar] * geometric_product[e23]) + (self[e15] * geometric_product[e1234]) + (self[e35] * geometric_product[e42]) + (self[e3215] * geometric_product[e41]),
                (self[scalar] * geometric_product[e31]) + (self[e15] * geometric_product[e43]) + (self[e25] * geometric_product[e1234]) + (self[e3215] * geometric_product[e42]),
                (self[scalar] * geometric_product[e12]) + (self[e25] * geometric_product[e41]) + (self[e35] * geometric_product[e1234]) + (self[e3215] * geometric_product[e43]),
                -(self[e12] * geometric_product[e4125]) - (self[e15] * geometric_product[e41]) - (self[e25] * geometric_product[e42]) - (self[e35] * geometric_product[e43]),
            ]) + (Simd32x4::from([geometric_product[scalar], geometric_product[e12], geometric_product[e23], geometric_product[e45]]) * self.group0().xxyw())
                + (Simd32x4::from([geometric_product[e31], geometric_product[scalar], geometric_product[scalar], geometric_product[e1234]])
                    * self.group0().zyz().with_w(self[e3215]))
                - (self.group0().yzxx() * geometric_product.group1().zxy().with_w(geometric_product[e4235]))
                - (self.group1().yzx() * geometric_product.group0().zxy()).with_w(self[e31] * geometric_product[e4315]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e12] * geometric_product[e25])
                    + (self[scalar] * geometric_product[e15])
                    + (self[e15] * geometric_product[scalar])
                    + (self[e25] * geometric_product[e4125])
                    + (self[e35] * geometric_product[e31])
                    + (self[e3215] * geometric_product[e23])
                    - (self[e35] * geometric_product[e4315])
                    - (self[e3215] * geometric_product[e4235]),
                (self[e31] * geometric_product[e3215])
                    + (self[scalar] * geometric_product[e25])
                    + (self[e15] * geometric_product[e12])
                    + (self[e25] * geometric_product[scalar])
                    + (self[e35] * geometric_product[e4235])
                    + (self[e3215] * geometric_product[e31])
                    - (self[e35] * geometric_product[e23])
                    - (self[e3215] * geometric_product[e4315]),
                (self[e12] * geometric_product[e3215])
                    + (self[scalar] * geometric_product[e35])
                    + (self[e15] * geometric_product[e4315])
                    + (self[e25] * geometric_product[e23])
                    + (self[e35] * geometric_product[scalar])
                    + (self[e3215] * geometric_product[e12])
                    - (self[e35] * geometric_product[e45])
                    - (self[e3215] * geometric_product[e4125]),
                0.0,
            ]) + (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e1234]]) * self.group0().xxyw())
                - (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e31], geometric_product[e42]]) * self.group1().xxx().with_w(self[e31]))
                - (self.group0().yzxx() * geometric_product.group2().zxy().with_w(geometric_product[e41]))
                - (geometric_product.group1().zw().with_zw(geometric_product[e4235], geometric_product[e43]) * self.group1().yyy().with_w(self[e12])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e3215] * geometric_product[e41],
                self[e3215] * geometric_product[e42],
                self[e3215] * geometric_product[e43],
                -(self[e12] * geometric_product[e35])
                    - (self[e15] * geometric_product[e23])
                    - (self[e25] * geometric_product[e31])
                    - (self[e35] * geometric_product[e12])
                    - (self[e3215] * geometric_product[e45]),
            ]) + (Simd32x4::from([geometric_product[e42], geometric_product[e1234], geometric_product[e1234], geometric_product[scalar]]) * self.group1().zyzw())
                + (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], geometric_product[e3215]]) * self.group0().xxyw())
                + (Simd32x4::from([geometric_product[e1234], geometric_product[e43], geometric_product[e41], geometric_product[e4125]]) * self.group1().xxyz())
                + (Simd32x4::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45], geometric_product[e4235]]) * self.group0().zyz().with_w(self[e15]))
                + (geometric_product.group3().xyzy() * self.group0().www().with_w(self[e25]))
                - (self.group0().yzxx() * geometric_product.group3().zxy().with_w(geometric_product[e15]))
                - (self.group1().yzx() * geometric_product.group0().zxy()).with_w(self[e31] * geometric_product[e25]),
        );
    }
}
impl std::ops::Div<GeometricQuotientInfix> for AntiPlane {
    type Output = GeometricQuotientInfixPartial<AntiPlane>;
    fn div(self, _rhs: GeometricQuotientInfix) -> Self::Output {
        GeometricQuotientInfixPartial(self)
    }
}
impl GeometricQuotient<AntiCircleRotor> for AntiPlane {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       27        0
    //    simd3        1        4        0
    //    simd4        5        9        0
    // Totals...
    // yes simd       19       40        0
    //  no simd       36       75        0
    fn geometric_quotient(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiCircleRotor::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, scalar
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                + f32::powi(other[scalar], 2)
                - f32::powi(other[e45], 2),
        );
        let geometric_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
        );
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (geometric_product.group0().yzx() * self.group0().zxy()) - (geometric_product.group0().zxy() * self.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                geometric_product[e41] * self[e5],
                geometric_product[e42] * self[e5],
                geometric_product[e43] * self[e5],
                -(geometric_product[e31] * self[e2]) - (geometric_product[e12] * self[e3]),
            ]) - (geometric_product.group1().wwwx() * self.group0().xyzx()),
            // e235, e315, e125, e4
            Simd32x4::from([
                (geometric_product[e23] * self[e5]) + (geometric_product[e35] * self[e2]),
                (geometric_product[e31] * self[e5]) + (geometric_product[e15] * self[e3]),
                (geometric_product[e12] * self[e5]) + (geometric_product[e25] * self[e1]),
                -(geometric_product[e42] * self[e2]) - (geometric_product[e43] * self[e3]),
            ]) - (self.group0().zxyx() * geometric_product.group2().yzx().with_w(geometric_product[e41])),
            // e1, e2, e3, e5
            Simd32x4::from([
                geometric_product[e12] * self[e2] * -1.0,
                geometric_product[e23] * self[e3] * -1.0,
                geometric_product[e31] * self[e1] * -1.0,
                (geometric_product[e35] * self[e3]) + (geometric_product[scalar] * self[e5]),
            ]) + (geometric_product.group2().wwwy() * self.group0().xyzy())
                + (self.group0().zxyx() * geometric_product.group1().yzx().with_w(geometric_product[e15]))
                - (Simd32x4::from(self[e5]) * geometric_product.group0().with_w(geometric_product[e45])),
        );
    }
}
impl GeometricQuotient<AntiDipoleInversion> for AntiPlane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       36        0
    //    simd3        0        2        0
    //    simd4        9       14        0
    // Totals...
    // yes simd       27       52        0
    //  no simd       54       98        0
    fn geometric_quotient(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e4
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125])
                - 2.0 * (other[e4] * other[e5]),
        );
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e4
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e1, e2, e3, e5
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                geometric_product[e4] * self[e1] * -1.0,
                geometric_product[e4] * self[e2] * -1.0,
                geometric_product[e4] * self[e3] * -1.0,
                (geometric_product[e2] * self[e2]) + (geometric_product[e3] * self[e3]),
            ]) + (self.group0().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e1]))
                - (self.group0().zxyw() * geometric_product.group0().yzx().with_w(geometric_product[e4])),
            // e23, e31, e12, e45
            Simd32x4::from([
                geometric_product[e3] * self[e2],
                geometric_product[e1] * self[e3],
                geometric_product[e2] * self[e1],
                geometric_product[e4] * self[e5] * -1.0,
            ]) - (geometric_product.group1().wwwy() * self.group0().xyzy())
                - (self.group0().zxyz() * geometric_product.group3().yzx().with_w(geometric_product[e435]))
                - (self.group0().wwwx() * geometric_product.group0().with_w(geometric_product[e415])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(geometric_product[e415] * self[e5]) - (geometric_product[e125] * self[e2]) - (geometric_product[e1] * self[e5]),
                -(geometric_product[e425] * self[e5]) - (geometric_product[e235] * self[e3]) - (geometric_product[e2] * self[e5]),
                -(geometric_product[e435] * self[e5]) - (geometric_product[e315] * self[e1]) - (geometric_product[e3] * self[e5]),
                geometric_product[e412] * self[e3],
            ]) + (self.group0().xyzy() * geometric_product.group3().www().with_w(geometric_product[e431]))
                + (self.group0().zxyx() * geometric_product.group2().yzx().with_w(geometric_product[e423])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                geometric_product[e425] * self[e3],
                geometric_product[e435] * self[e1],
                geometric_product[e415] * self[e2],
                -(geometric_product[e315] * self[e2]) - (geometric_product[e125] * self[e3]),
            ]) - (Simd32x4::from(self[e5]) * geometric_product.group0().with_w(geometric_product[e321]))
                - (self.group0().yzxx() * geometric_product.group1().zxy().with_w(geometric_product[e235])),
        );
    }
}
impl GeometricQuotient<AntiDualNum> for AntiPlane {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd2        0        1        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        5        0
    //  no simd        0       18        0
    fn geometric_quotient(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDualNum::from_groups(/* e3215, scalar */ Simd32x2::from(f32::powi(other[scalar], -2)) * other.group0());
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            geometric_product.group0().xx().with_zw(geometric_product[e3215], 0.0)
                * Simd32x3::from(1.0).with_w(0.0)
                * self.group0().xyz().with_w(0.0)
                * Simd32x4::from([-1.0, -1.0, -1.0, 0.0]),
            // e1, e2, e3, e5
            Simd32x4::from(geometric_product[scalar]) * self.group0(),
        );
    }
}
impl GeometricQuotient<AntiFlatPoint> for AntiPlane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2       10        0
    //    simd4        1        5        0
    // Totals...
    // yes simd        3       15        0
    //  no simd        6       30        0
    fn geometric_quotient(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlatPoint::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(f32::powi(other[e321], -2)) * Simd32x4::from([other[e235] * -1.0, other[e315] * -1.0, other[e125] * -1.0, other[e321] * -1.0]),
        );
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x3::from(1.0).with_w(0.0) * geometric_product.group0().www().with_w(0.0) * self.group0().xyz().with_w(0.0) * Simd32x4::from([-1.0, -1.0, -1.0, 0.0]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                geometric_product[e315] * self[e3],
                geometric_product[e125] * self[e1],
                geometric_product[e235] * self[e2],
                -(geometric_product[e315] * self[e2]) - (geometric_product[e125] * self[e3]) - (geometric_product[e321] * self[e5]),
            ]) - (geometric_product.group0().zxyx() * self.group0().yzxx()),
        );
    }
}
impl GeometricQuotient<AntiFlector> for AntiPlane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       16        0
    //    simd4        3        6        0
    // Totals...
    // yes simd       14       22        0
    //  no simd       23       40        0
    fn geometric_quotient(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiFlector::from_groups(/* e235, e315, e125, e321 */ other.group0() * Simd32x4::from(-1.0), /* e1, e2, e3, e5 */ other.group1());
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2),
        );
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e1, e2, e3, e5
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                -(geometric_product[e321] * self[e1]) - (geometric_product[e2] * self[e3]),
                -(geometric_product[e321] * self[e2]) - (geometric_product[e3] * self[e1]),
                -(geometric_product[e321] * self[e3]) - (geometric_product[e1] * self[e2]),
                (geometric_product[e2] * self[e2]) + (geometric_product[e3] * self[e3]),
            ]) + (geometric_product.group1().zxyx() * self.group0().yzxx()),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (geometric_product[e315] * self[e3]) + (geometric_product[e5] * self[e1]),
                (geometric_product[e125] * self[e1]) + (geometric_product[e5] * self[e2]),
                (geometric_product[e235] * self[e2]) + (geometric_product[e5] * self[e3]),
                -(geometric_product[e125] * self[e3]) - (geometric_product[e321] * self[e5]),
            ]) - (geometric_product.group0().zxyx() * self.group0().yzxx())
                - (self.group0().wwwy() * geometric_product.group1().xyz().with_w(geometric_product[e315])),
        );
    }
}
impl GeometricQuotient<AntiLine> for AntiPlane {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       16        0
    //    simd3        0        4        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        9       22        0
    //  no simd       15       36        0
    fn geometric_quotient(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiLine::from_groups(
            // e23, e31, e12
            other.group0() * Simd32x3::from(-1.0),
            // e15, e25, e35
            other.group1() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(/* scalar */ f32::powi(other[e23], 2) + f32::powi(other[e31], 2) + f32::powi(other[e12], 2));
        let geometric_product = AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e15, e25, e35
            Simd32x3::from(other_2[scalar]) * reverse.group1(),
        );
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (geometric_product[e23] * self[e5]) + (geometric_product[e35] * self[e2]),
                (geometric_product[e31] * self[e5]) + (geometric_product[e15] * self[e3]),
                (geometric_product[e12] * self[e5]) + (geometric_product[e25] * self[e1]),
                -(geometric_product[e31] * self[e2]) - (geometric_product[e12] * self[e3]),
            ]) - (self.group0().zxyx() * geometric_product.group1().yzx().with_w(geometric_product[e23])),
            // e1, e2, e3, e5
            Simd32x4::from([
                geometric_product[e12] * self[e2] * -1.0,
                geometric_product[e23] * self[e3] * -1.0,
                geometric_product[e31] * self[e1] * -1.0,
                (geometric_product[e25] * self[e2]) + (geometric_product[e35] * self[e3]),
            ]) + (self.group0().zxyx() * geometric_product.group0().yzx().with_w(geometric_product[e15])),
        );
    }
}
impl GeometricQuotient<AntiMotor> for AntiPlane {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       16        0
    //    simd4        4        8        0
    // Totals...
    // yes simd       11       24        0
    //  no simd       23       48        0
    fn geometric_quotient(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, e3215
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e23], 2) + f32::powi(other[e31], 2) + f32::powi(other[e12], 2) + f32::powi(other[scalar], 2),
        );
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e15, e25, e35, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (geometric_product[e23] * self[e5]) + (geometric_product[e35] * self[e2]),
                (geometric_product[e31] * self[e5]) + (geometric_product[e15] * self[e3]),
                (geometric_product[e12] * self[e5]) + (geometric_product[e25] * self[e1]),
                geometric_product[e12] * self[e3] * -1.0,
            ]) - (self.group0().xyzy() * geometric_product.group1().www().with_w(geometric_product[e31]))
                - (self.group0().zxyx() * geometric_product.group1().yzx().with_w(geometric_product[e23])),
            // e1, e2, e3, e5
            Simd32x4::from([
                geometric_product[e12] * self[e2] * -1.0,
                geometric_product[e23] * self[e3] * -1.0,
                geometric_product[e31] * self[e1] * -1.0,
                (geometric_product[e25] * self[e2]) + (geometric_product[e35] * self[e3]),
            ]) + (geometric_product.group0().yzxw() * self.group0().zxyw())
                + (self.group0().xyzx() * geometric_product.group0().www().with_w(geometric_product[e15])),
        );
    }
}
impl GeometricQuotient<AntiPlane> for AntiPlane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        8        0
    //    simd3        1        2        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        5       12        0
    //  no simd       10       22        0
    fn geometric_quotient(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiPlane::from_groups(
            // e1, e2, e3, e5
            Simd32x4::from(f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)) * other.group0(),
        );
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                geometric_product[e2] * self[e3] * -1.0,
                geometric_product[e3] * self[e1] * -1.0,
                geometric_product[e1] * self[e2] * -1.0,
                (geometric_product[e2] * self[e2]) + (geometric_product[e3] * self[e3]),
            ]) + (geometric_product.group0().zxyx() * self.group0().yzxx()),
            // e15, e25, e35, e3215
            ((Simd32x3::from(geometric_product[e5]) * self.group0().xyz()) - (Simd32x3::from(self[e5]) * geometric_product.group0().xyz())).with_w(0.0),
        );
    }
}
impl GeometricQuotient<AntiScalar> for AntiPlane {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        1
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        3        1
    //  no simd        0        9        1
    fn geometric_quotient(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(1.0 / other[e12345] * -1.0) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
    }
}
impl GeometricQuotient<Circle> for AntiPlane {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       23        0
    //    simd3        1        8        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       17       36        0
    //  no simd       34       67        0
    fn geometric_quotient(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let reverse = Circle::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125
            other.group2() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group2(),
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (geometric_product.group0().zxy() * self.group0().yzx()) - (geometric_product.group0().yzx() * self.group0().zxy()),
            // e23, e31, e12, e45
            Simd32x3::from(0.0).with_w(self[e3] * geometric_product[e435] * -1.0)
                - (self.group0().xyzy() * geometric_product.group1().wwwy())
                - (geometric_product.group0() * self.group0().www()).with_w(self[e1] * geometric_product[e415]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(self[e2] * geometric_product[e125]) - (self[e5] * geometric_product[e415]),
                -(self[e3] * geometric_product[e235]) - (self[e5] * geometric_product[e425]),
                -(self[e1] * geometric_product[e315]) - (self[e5] * geometric_product[e435]),
                (self[e2] * geometric_product[e431]) + (self[e3] * geometric_product[e412]),
            ]) + (self.group0().zxyx() * geometric_product.group2().yzx().with_w(geometric_product[e423])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e3] * geometric_product[e425],
                self[e1] * geometric_product[e435],
                self[e2] * geometric_product[e415],
                -(self[e3] * geometric_product[e125]) - (self[e5] * geometric_product[e321]),
            ]) - (self.group0().wwwx() * geometric_product.group0().with_w(geometric_product[e235]))
                - (self.group0().yzx() * geometric_product.group1().zxy()).with_w(self[e2] * geometric_product[e315]),
        );
    }
}
impl GeometricQuotient<CircleRotor> for AntiPlane {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       28        0
    //    simd3        1        7        0
    //    simd4        5        6        0
    // Totals...
    // yes simd       22       41        0
    //  no simd       39       73        0
    fn geometric_quotient(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let reverse = CircleRotor::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e12345
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - f32::powi(other[e12345], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (geometric_product.group0().zxy() * self.group0().yzx()) - (geometric_product.group0().yzx() * self.group0().zxy()),
            // e23, e31, e12, e45
            Simd32x3::from(0.0).with_w(self[e3] * geometric_product[e435] * -1.0)
                - (self.group0().xyzy() * geometric_product.group1().wwwy())
                - (geometric_product.group0() * self.group0().www()).with_w(self[e1] * geometric_product[e415]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(self[e2] * geometric_product[e125]) - (self[e5] * geometric_product[e415]),
                -(self[e3] * geometric_product[e235]) - (self[e5] * geometric_product[e425]),
                -(self[e1] * geometric_product[e315]) - (self[e5] * geometric_product[e435]),
                (self[e2] * geometric_product[e431]) + (self[e3] * geometric_product[e412]),
            ]) + (self.group0().zxy() * geometric_product.group2().yzx()).with_w(self[e1] * geometric_product[e423]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e1] * geometric_product[e12345]) + (self[e3] * geometric_product[e425]),
                (self[e1] * geometric_product[e435]) + (self[e2] * geometric_product[e12345]),
                (self[e2] * geometric_product[e415]) + (self[e3] * geometric_product[e12345]),
                -(self[e3] * geometric_product[e125]) - (self[e5] * geometric_product[e321]) - (self[e5] * geometric_product[e12345]),
            ]) - (self.group0().yzxy() * geometric_product.group1().zxy().with_w(geometric_product[e315]))
                - (geometric_product.group0() * self.group0().www()).with_w(self[e1] * geometric_product[e235]),
        );
    }
}
impl GeometricQuotient<Dipole> for AntiPlane {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       29        0
    //    simd3        1        8        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       17       41        0
    //  no simd       31       69        0
    fn geometric_quotient(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let reverse = Dipole::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35
            other.group2() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2),
        );
        let geometric_product = Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35
            Simd32x3::from(other_2[scalar]) * reverse.group2(),
        );
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (geometric_product.group0().yzx() * self.group0().zxy()) - (geometric_product.group0().zxy() * self.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e5] * geometric_product[e41],
                self[e5] * geometric_product[e42],
                self[e5] * geometric_product[e43],
                -(self[e2] * geometric_product[e31]) - (self[e3] * geometric_product[e12]),
            ]) - (self.group0().xyzx() * geometric_product.group1().wwwx()),
            // e235, e315, e125, e4
            Simd32x4::from([
                (self[e2] * geometric_product[e35]) + (self[e5] * geometric_product[e23]),
                (self[e3] * geometric_product[e15]) + (self[e5] * geometric_product[e31]),
                (self[e1] * geometric_product[e25]) + (self[e5] * geometric_product[e12]),
                -(self[e2] * geometric_product[e42]) - (self[e3] * geometric_product[e43]),
            ]) - (self.group0().zxyx() * geometric_product.group2().yzx().with_w(geometric_product[e41])),
            // e1, e2, e3, e5
            Simd32x4::from([
                self[e2] * geometric_product[e12] * -1.0,
                self[e3] * geometric_product[e23] * -1.0,
                self[e1] * geometric_product[e31] * -1.0,
                (self[e2] * geometric_product[e25]) + (self[e3] * geometric_product[e35]),
            ]) + (self.group0().zxy() * geometric_product.group1().yzx()).with_w(self[e1] * geometric_product[e15])
                - (geometric_product.group0() * self.group0().www()).with_w(self[e5] * geometric_product[e45]),
        );
    }
}
impl GeometricQuotient<DipoleInversion> for AntiPlane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       38        0
    //    simd3        0        4        0
    //    simd4        9       12        0
    // Totals...
    // yes simd       27       54        0
    //  no simd       54       98        0
    fn geometric_quotient(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let reverse = DipoleInversion::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + 2.0 * (other[e1234] * other[e3215])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2),
        );
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e2] * geometric_product[e43] * -1.0,
                self[e3] * geometric_product[e41] * -1.0,
                self[e1] * geometric_product[e42] * -1.0,
                (self[e3] * geometric_product[e4125]) + (self[e5] * geometric_product[e1234]),
            ]) + (self.group0().xyzy() * geometric_product.group2().www().with_w(geometric_product[e4315]))
                + (geometric_product.group0().yzx() * self.group0().zxy()).with_w(self[e1] * geometric_product[e4235]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e2] * geometric_product[e4125]) + (self[e5] * geometric_product[e41]),
                (self[e3] * geometric_product[e4235]) + (self[e5] * geometric_product[e42]),
                (self[e1] * geometric_product[e4315]) + (self[e5] * geometric_product[e43]),
                -(self[e3] * geometric_product[e12]) - (self[e5] * geometric_product[e1234]),
            ]) - (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], geometric_product[e23]]) * self.group0().xxyx())
                - (Simd32x4::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45], geometric_product[e31]]) * self.group0().zyzy()),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e3] * geometric_product[e25]) - (self[e5] * geometric_product[e4235]),
                -(self[e2] * geometric_product[e3215]) - (self[e5] * geometric_product[e4315]),
                -(self[e3] * geometric_product[e3215]) - (self[e5] * geometric_product[e4125]),
                self[e3] * geometric_product[e35],
            ]) + (self.group0().yzxx() * geometric_product.group2().zxyx())
                + (self.group0().wwwy() * geometric_product.group1().xyz().with_w(geometric_product[e25]))
                - (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e45]]) * self.group0().xxyw()),
            // e1, e2, e3, e4
            Simd32x4::from([
                self[e3] * geometric_product[e31],
                self[e1] * geometric_product[e12],
                self[e2] * geometric_product[e23],
                self[e3] * geometric_product[e43] * -1.0,
            ]) - (self.group0().wwwx() * geometric_product.group0().with_w(geometric_product[e41]))
                - (self.group0().yzx() * geometric_product.group1().zxy()).with_w(self[e2] * geometric_product[e42]),
        );
    }
}
impl GeometricQuotient<DualNum> for AntiPlane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd2        0        1        0
    //    simd4        0        5        0
    // Totals...
    // yes simd        0        7        0
    //  no simd        0       23        0
    fn geometric_quotient(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DualNum::from_groups(/* e5, e12345 */ Simd32x2::from(f32::powi(other[e12345], -2) * -1.0) * other.group0());
        return Flector::from_groups(
            // e15, e25, e35, e45
            geometric_product.group0().xx().with_zw(geometric_product[e5], 0.0)
                * Simd32x3::from(1.0).with_w(0.0)
                * self.group0().xyz().with_w(0.0)
                * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(geometric_product[e12345]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
    }
}
impl GeometricQuotient<FlatPoint> for AntiPlane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        7        0
    //    simd4        2        6        0
    // Totals...
    // yes simd        3       13        0
    //  no simd        9       31        0
    fn geometric_quotient(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = FlatPoint::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(f32::powi(other[e45], -2) * -1.0) * Simd32x4::from([other[e15] * -1.0, other[e25] * -1.0, other[e35] * -1.0, other[e45] * -1.0]),
        );
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x3::from(1.0).with_w(0.0) * geometric_product.group0().www().with_w(0.0) * self.group0().xyz().with_w(0.0) * Simd32x4::from([-1.0, -1.0, -1.0, 0.0]),
            // e235, e315, e125, e5
            (self.group0().yzxx() * geometric_product.group0().zxyx()) + Simd32x3::from(0.0).with_w((self[e2] * geometric_product[e25]) + (self[e3] * geometric_product[e35]))
                - (self.group0().zxyw() * geometric_product.group0().yzxw()),
        );
    }
}
impl GeometricQuotient<Flector> for AntiPlane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       16        0
    //    simd4        3        6        0
    // Totals...
    // yes simd       14       22        0
    //  no simd       23       40        0
    fn geometric_quotient(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let reverse = Flector::from_groups(
            // e15, e25, e35, e45
            other.group0() * Simd32x4::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group1(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            -f32::powi(other[e45], 2) - f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2),
        );
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                -(self[e1] * geometric_product[e45]) - (self[e3] * geometric_product[e4315]),
                -(self[e1] * geometric_product[e4125]) - (self[e2] * geometric_product[e45]),
                -(self[e2] * geometric_product[e4235]) - (self[e3] * geometric_product[e45]),
                (self[e2] * geometric_product[e4315]) + (self[e3] * geometric_product[e4125]),
            ]) + (self.group0().yzxx() * geometric_product.group1().zxyx()),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e3] * geometric_product[e25]) - (self[e5] * geometric_product[e4235]),
                -(self[e2] * geometric_product[e3215]) - (self[e5] * geometric_product[e4315]),
                -(self[e3] * geometric_product[e3215]) - (self[e5] * geometric_product[e4125]),
                (self[e2] * geometric_product[e25]) + (self[e3] * geometric_product[e35]),
            ]) + (self.group0().yzxx() * geometric_product.group0().zxyx())
                - (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e45]]) * self.group0().xxyw()),
        );
    }
}
impl GeometricQuotient<Line> for AntiPlane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       10        0
    //    simd3        0        4        0
    //    simd4        3        3        0
    // Totals...
    // yes simd        6       17        0
    //  no simd       15       34        0
    fn geometric_quotient(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let reverse = Line::from_groups(
            // e415, e425, e435
            other.group0() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group1() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(/* scalar */ -f32::powi(other[e415], 2) - f32::powi(other[e425], 2) - f32::powi(other[e435], 2));
        let geometric_product = Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group1(),
        );
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                self[e3] * geometric_product[e315],
                self[e1] * geometric_product[e125],
                self[e2] * geometric_product[e235],
                self[e3] * geometric_product[e435] * -1.0,
            ]) - (self.group0().yzxy() * geometric_product.group1().zxy().with_w(geometric_product[e425]))
                - (self.group0().wwwx() * geometric_product.group0().with_w(geometric_product[e415])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e3] * geometric_product[e425],
                self[e1] * geometric_product[e435],
                self[e2] * geometric_product[e415],
                -(self[e2] * geometric_product[e315]) - (self[e3] * geometric_product[e125]),
            ]) - (self.group0().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e235])),
        );
    }
}
impl GeometricQuotient<Motor> for AntiPlane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       17        0
    //    simd4        3        7        0
    // Totals...
    // yes simd       14       24        0
    //  no simd       23       45        0
    fn geometric_quotient(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let reverse = Motor::from_groups(
            // e415, e425, e435, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            -f32::powi(other[e415], 2) - f32::powi(other[e425], 2) - f32::powi(other[e435], 2) - f32::powi(other[e12345], 2),
        );
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e235, e315, e125, e5
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e1] * geometric_product[e5]) + (self[e3] * geometric_product[e315]),
                (self[e1] * geometric_product[e125]) + (self[e2] * geometric_product[e5]),
                (self[e2] * geometric_product[e235]) + (self[e3] * geometric_product[e5]),
                self[e3] * geometric_product[e435] * -1.0,
            ]) - (self.group0().yzxx() * geometric_product.group1().zxy().with_w(geometric_product[e415]))
                - (self.group0().wwwy() * geometric_product.group0().xyzy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e1] * geometric_product[e12345]) + (self[e3] * geometric_product[e425]),
                (self[e1] * geometric_product[e435]) + (self[e2] * geometric_product[e12345]),
                (self[e2] * geometric_product[e415]) + (self[e3] * geometric_product[e12345]),
                -(self[e2] * geometric_product[e315]) - (self[e3] * geometric_product[e125]) - (self[e5] * geometric_product[e12345]),
            ]) - (self.group0().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e235])),
        );
    }
}
impl GeometricQuotient<MultiVector> for AntiPlane {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44       64        0
    //    simd2        3        4        0
    //    simd3       11       25        0
    //    simd4        9       13        0
    // Totals...
    // yes simd       67      106        0
    //  no simd      119      199        0
    fn geometric_quotient(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let reverse = MultiVector::from_groups(
            // scalar, e12345
            other.group0(),
            // e1, e2, e3, e4
            other.group1(),
            // e5
            other[e5],
            // e15, e25, e35, e45
            other.group3() * Simd32x4::from(-1.0),
            // e41, e42, e43
            other.group4() * Simd32x3::from(-1.0),
            // e23, e31, e12
            other.group5() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group6() * Simd32x4::from(-1.0),
            // e423, e431, e412
            other.group7() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group8() * Simd32x3::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group9(),
            // e1234
            other[e1234],
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e15] * other[e41])
                + 2.0 * (other[e25] * other[e42])
                + 2.0 * (other[e35] * other[e43])
                + 2.0 * (other[e3215] * other[e1234])
                + f32::powi(other[scalar], 2)
                + f32::powi(other[e1], 2)
                + f32::powi(other[e2], 2)
                + f32::powi(other[e3], 2)
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                + f32::powi(other[e321], 2)
                - f32::powi(other[e12345], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2)
                - 2.0 * (other[e4] * other[e5])
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(other_2[scalar]) * reverse.group0(),
            // e1, e2, e3, e4
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e5
            reverse[e5] * other_2[scalar],
            // e15, e25, e35, e45
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group4(),
            // e23, e31, e12
            Simd32x3::from(other_2[scalar]) * reverse.group5(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group6(),
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group7(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group8(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group9(),
            // e1234
            reverse[e1234] * other_2[scalar],
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([self[e5] * geometric_product[e4] * -1.0, self[e5] * geometric_product[e1234]])
                + (Simd32x2::from(self[e1]) * Simd32x2::from([geometric_product[e1], geometric_product[e4235]]))
                + (Simd32x2::from(self[e2]) * Simd32x2::from([geometric_product[e2], geometric_product[e4315]]))
                + (Simd32x2::from(self[e3]) * Simd32x2::from([geometric_product[e3], geometric_product[e4125]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e1] * geometric_product[scalar]) + (self[e3] * geometric_product[e31]),
                (self[e1] * geometric_product[e12]) + (self[e2] * geometric_product[scalar]),
                (self[e2] * geometric_product[e23]) + (self[e3] * geometric_product[scalar]),
                self[e3] * geometric_product[e43] * -1.0,
            ]) - (self.group0().yzxy() * geometric_product.group5().zxy().with_w(geometric_product[e42]))
                - (self.group0().wwwx() * geometric_product.group4().with_w(geometric_product[e41])),
            // e5
            (self[e1] * geometric_product[e15]) + (self[e2] * geometric_product[e25]) + (self[e3] * geometric_product[e35]) + (self[e5] * geometric_product[scalar])
                - (self[e5] * geometric_product[e45]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e1] * geometric_product[e5]) + (self[e3] * geometric_product[e315]),
                (self[e1] * geometric_product[e125]) + (self[e2] * geometric_product[e5]),
                (self[e2] * geometric_product[e235]) + (self[e3] * geometric_product[e5]),
                self[e5] * geometric_product[e4] * -1.0,
            ]) - (self.group0().wwwy() * geometric_product.group1().xyz().with_w(geometric_product[e425]))
                - (self.group0().wwwz() * geometric_product.group6().xyzz())
                - (geometric_product.group8().zxy() * self.group0().yzx()).with_w(self[e1] * geometric_product[e415]),
            // e41, e42, e43
            (geometric_product.group7().zxy() * self.group0().yzx())
                - (Simd32x3::from(geometric_product[e4]) * self.group0().xyz())
                - (geometric_product.group7().yzx() * self.group0().zxy()),
            // e23, e31, e12
            (self.group0().yzx() * geometric_product.group1().zxy())
                - (Simd32x3::from(self[e5]) * geometric_product.group7())
                - (Simd32x3::from([geometric_product[e2], geometric_product[e321], geometric_product[e321]]) * self.group0().zyz())
                - (Simd32x3::from([geometric_product[e321], geometric_product[e3], geometric_product[e1]]) * self.group0().xxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e2] * geometric_product[e4125]) + (self[e5] * geometric_product[e41]),
                (self[e3] * geometric_product[e4235]) + (self[e5] * geometric_product[e42]),
                (self[e1] * geometric_product[e4315]) + (self[e5] * geometric_product[e43]),
                -(self[e3] * geometric_product[e12]) - (self[e5] * geometric_product[e1234]),
            ]) - (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], self[e1]]) * self.group0().xxy().with_w(geometric_product[e23]))
                - (Simd32x4::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45], self[e2]]) * self.group0().zyz().with_w(geometric_product[e31])),
            // e423, e431, e412
            (Simd32x3::from(geometric_product[e1234]) * self.group0().xyz()) + (geometric_product.group4().yzx() * self.group0().zxy())
                - (geometric_product.group4().zxy() * self.group0().yzx()),
            // e235, e315, e125
            (Simd32x3::from(self[e5]) * geometric_product.group5()) + (self.group0().yzx() * geometric_product.group3().zxy())
                - (Simd32x3::from(self[e5]) * geometric_product.group9().xyz())
                - (Simd32x3::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215]]) * self.group0().zyz())
                - (Simd32x3::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15]]) * self.group0().xxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e1] * geometric_product[e12345]) + (self[e3] * geometric_product[e425]),
                (self[e1] * geometric_product[e435]) + (self[e2] * geometric_product[e12345]),
                (self[e2] * geometric_product[e415]) + (self[e3] * geometric_product[e12345]),
                -(self[e2] * geometric_product[e315]) - (self[e3] * geometric_product[e125]) - (self[e5] * geometric_product[e321]),
            ]) - (Simd32x4::from(self[e5]) * geometric_product.group7().with_w(geometric_product[e12345]))
                - (self.group0().yzx() * geometric_product.group6().zxy()).with_w(self[e1] * geometric_product[e235]),
            // e1234
            (self[e1] * geometric_product[e423]) + (self[e2] * geometric_product[e431]) + (self[e3] * geometric_product[e412]),
        );
    }
}
impl GeometricQuotient<Plane> for AntiPlane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        8        0
    //    simd3        1        2        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        5       12        0
    //  no simd       10       22        0
    fn geometric_quotient(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Plane::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(-f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2)) * other.group0(),
        );
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                self[e3] * geometric_product[e4315] * -1.0,
                self[e1] * geometric_product[e4125] * -1.0,
                self[e2] * geometric_product[e4235] * -1.0,
                (self[e2] * geometric_product[e4315]) + (self[e3] * geometric_product[e4125]),
            ]) + (self.group0().yzxx() * geometric_product.group0().zxyx()),
            // e235, e315, e125, e5
            (-(Simd32x3::from(self[e5]) * geometric_product.group0().xyz()) - (Simd32x3::from(geometric_product[e3215]) * self.group0().xyz())).with_w(0.0),
        );
    }
}
impl GeometricQuotient<RoundPoint> for AntiPlane {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        7        0
    //    simd3        1        4        0
    //    simd4        2        3        0
    // Totals...
    // yes simd        7       14        0
    //  no simd       15       31        0
    fn geometric_quotient(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2) - 2.0 * (other[e4] * other[e5]),
        );
        let geometric_product = RoundPoint::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from(other_2[scalar]) * other.group0(), /* e5 */ other[e5] * other_2[scalar]);
        return AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(geometric_product[e4]) * self.group0().xyz() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            ((self.group0().yzx() * geometric_product.group0().zxy()) - (self.group0().zxy() * geometric_product.group0().yzx())).with_w(self[e5] * geometric_product[e4] * -1.0),
            // e15, e25, e35, scalar
            (self.group0().xyzx() * Simd32x3::from(geometric_product[e5]).with_w(geometric_product[e1]))
                + Simd32x3::from(0.0).with_w((self[e2] * geometric_product[e2]) + (self[e3] * geometric_product[e3]))
                - (Simd32x4::from(self[e5]) * geometric_product.group0()),
        );
    }
}
impl GeometricQuotient<Scalar> for AntiPlane {
    type Output = AntiPlane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        0        1
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        1        1
    //  no simd        0        4        1
    fn geometric_quotient(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from(1.0 / other[scalar]) * self.group0());
    }
}
impl GeometricQuotient<Sphere> for AntiPlane {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       15        0
    //    simd3        1        3        0
    //    simd4        0        1        0
    // Totals...
    // yes simd       10       19        0
    //  no simd       12       28        0
    fn geometric_quotient(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e3215] * other[e1234]) - f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2),
        );
        let geometric_product = Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * other.group0(),
            // e1234
            other_2[scalar] * other[e1234],
        );
        return CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(geometric_product[e1234]) * self.group0().xyz(),
            // e415, e425, e435, e321
            ((self.group0().yzx() * geometric_product.group0().zxy()) - (self.group0().zxy() * geometric_product.group0().yzx()))
                .with_w(self[e5] * geometric_product[e1234] * -1.0),
            // e235, e315, e125, e12345
            Simd32x4::from([
                -(self[e1] * geometric_product[e3215]) - (self[e5] * geometric_product[e4235]),
                -(self[e2] * geometric_product[e3215]) - (self[e5] * geometric_product[e4315]),
                -(self[e3] * geometric_product[e3215]) - (self[e5] * geometric_product[e4125]),
                (self[e1] * geometric_product[e4235]) + (self[e2] * geometric_product[e4315]) + (self[e3] * geometric_product[e4125]) + (self[e5] * geometric_product[e1234]),
            ]),
        );
    }
}
impl GeometricQuotient<VersorEven> for AntiPlane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       23       40        0
    //    simd4        9       16        0
    // Totals...
    // yes simd       32       56        0
    //  no simd       59      104        0
    fn geometric_quotient(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let reverse = VersorEven::from_groups(
            // e423, e431, e412, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e5
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e4
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)
                - f32::powi(other[e12345], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125])
                - 2.0 * (other[e5] * other[e4]),
        );
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e5
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e1, e2, e3, e4
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e3] * geometric_product[e431] * -1.0,
                self[e2] * geometric_product[e4] * -1.0,
                self[e3] * geometric_product[e4] * -1.0,
                (self[e2] * geometric_product[e2]) + (self[e3] * geometric_product[e3]),
            ]) + (self.group0().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e1]))
                - (Simd32x4::from([geometric_product[e4], geometric_product[e412], geometric_product[e423], geometric_product[e4]]) * self.group0().xxyw()),
            // e23, e31, e12, e45
            Simd32x4::from([
                self[e2] * geometric_product[e3],
                self[e3] * geometric_product[e1],
                self[e1] * geometric_product[e2],
                self[e5] * geometric_product[e4] * -1.0,
            ]) - (Simd32x4::from([geometric_product[e321], geometric_product[e3], geometric_product[e1], geometric_product[e415]]) * self.group0().xxyx())
                - (Simd32x4::from([geometric_product[e2], geometric_product[e321], geometric_product[e321], geometric_product[e425]]) * self.group0().zyzy())
                - (self.group0().wwwz() * geometric_product.group0().xyz().with_w(geometric_product[e435])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(self[e2] * geometric_product[e125]) - (self[e5] * geometric_product[e415]) - (self[e5] * geometric_product[e1]),
                -(self[e3] * geometric_product[e235]) - (self[e5] * geometric_product[e425]) - (self[e5] * geometric_product[e2]),
                -(self[e1] * geometric_product[e315]) - (self[e5] * geometric_product[e435]) - (self[e5] * geometric_product[e3]),
                self[e3] * geometric_product[e412],
            ]) + (self.group0().xxyx() * geometric_product.group2().wzx().with_w(geometric_product[e423]))
                + (self.group0().zyzy() * geometric_product.group2().yww().with_w(geometric_product[e431])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e1] * geometric_product[e12345]) + (self[e3] * geometric_product[e425]),
                (self[e1] * geometric_product[e435]) + (self[e2] * geometric_product[e12345]),
                (self[e2] * geometric_product[e415]) + (self[e3] * geometric_product[e12345]),
                -(self[e3] * geometric_product[e125]) - (self[e5] * geometric_product[e12345]) - (self[e5] * geometric_product[e321]),
            ]) - (self.group0().yzxx() * geometric_product.group1().zxy().with_w(geometric_product[e235]))
                - (self.group0().wwwy() * geometric_product.group0().xyz().with_w(geometric_product[e315])),
        );
    }
}
impl GeometricQuotient<VersorOdd> for AntiPlane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       23       40        0
    //    simd4        9       16        0
    // Totals...
    // yes simd       32       56        0
    //  no simd       59      104        0
    fn geometric_quotient(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let reverse = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + 2.0 * (other[e1234] * other[e3215])
                + f32::powi(other[scalar], 2)
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2),
        );
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e2] * geometric_product[e43] * -1.0,
                self[e3] * geometric_product[e41] * -1.0,
                self[e1] * geometric_product[e42] * -1.0,
                (self[e3] * geometric_product[e4125]) + (self[e5] * geometric_product[e1234]),
            ]) + (Simd32x4::from([geometric_product[e42], geometric_product[e1234], geometric_product[e1234], geometric_product[e4315]]) * self.group0().zyzy())
                + (Simd32x4::from([geometric_product[e1234], geometric_product[e43], geometric_product[e41], geometric_product[e4235]]) * self.group0().xxyx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e2] * geometric_product[e4125]) + (self[e5] * geometric_product[e41]),
                (self[e3] * geometric_product[e4235]) + (self[e5] * geometric_product[e42]),
                (self[e1] * geometric_product[e4315]) + (self[e5] * geometric_product[e43]),
                -(self[e3] * geometric_product[e12]) - (self[e5] * geometric_product[e1234]),
            ]) - (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], geometric_product[e23]]) * self.group0().xxyx())
                - (Simd32x4::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45], geometric_product[e31]]) * self.group0().zyzy()),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e3] * geometric_product[e25]) - (self[e5] * geometric_product[e4235]),
                -(self[e2] * geometric_product[e3215]) - (self[e5] * geometric_product[e4315]),
                -(self[e3] * geometric_product[e3215]) - (self[e5] * geometric_product[e4125]),
                (self[e3] * geometric_product[e35]) + (self[e5] * geometric_product[scalar]),
            ]) + (self.group0().yzxx() * geometric_product.group2().zxyx())
                + (self.group0().wwwy() * geometric_product.group1().xyz().with_w(geometric_product[e25]))
                - (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e45]]) * self.group0().xxyw()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e1] * geometric_product[scalar]) + (self[e3] * geometric_product[e31]),
                (self[e1] * geometric_product[e12]) + (self[e2] * geometric_product[scalar]),
                (self[e2] * geometric_product[e23]) + (self[e3] * geometric_product[scalar]),
                self[e3] * geometric_product[e43] * -1.0,
            ]) - (self.group0().yzxx() * geometric_product.group1().zxy().with_w(geometric_product[e41]))
                - (self.group0().wwwy() * geometric_product.group0().xyzy()),
        );
    }
}
impl std::ops::Div<GeometricQuotientInfix> for AntiScalar {
    type Output = GeometricQuotientInfixPartial<AntiScalar>;
    fn div(self, _rhs: GeometricQuotientInfix) -> Self::Output {
        GeometricQuotientInfixPartial(self)
    }
}
impl GeometricQuotient<AntiCircleRotor> for AntiScalar {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7        6        0
    //    simd3        0        3        0
    //    simd4        0        7        0
    // Totals...
    // yes simd        7       16        0
    //  no simd        7       43        0
    fn geometric_quotient(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiCircleRotor::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, scalar
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                + f32::powi(other[scalar], 2)
                - f32::powi(other[e45], 2),
        );
        let geometric_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
        );
        return CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[e12345]) * geometric_product.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(self[e12345]) * geometric_product.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e235, e315, e125, e12345
            Simd32x4::from(self[e12345]) * geometric_product.group2(),
        );
    }
}
impl GeometricQuotient<AntiDipoleInversion> for AntiScalar {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10        8        0
    //    simd3        0        4        0
    //    simd4        0       11        0
    // Totals...
    // yes simd       10       23        0
    //  no simd       10       64        0
    fn geometric_quotient(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e4
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125])
                - 2.0 * (other[e4] * other[e5]),
        );
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e4
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e1, e2, e3, e5
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[e12345]) * geometric_product.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from(self[e12345]) * geometric_product.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, e1234
            Simd32x4::from(self[e12345]) * geometric_product.group2() * Simd32x4::from(-1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * geometric_product.group3() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
    }
}
impl GeometricQuotient<AntiDualNum> for AntiScalar {
    type Output = DualNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd2        0        1        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0        4        0
    fn geometric_quotient(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let other_2 = Scalar::from_groups(/* scalar */ f32::powi(other[scalar], -2));
        return DualNum::from_groups(
            // e5, e12345
            Simd32x2::from(self[e12345]) * Simd32x2::from([other[e3215] * other_2[scalar], other[scalar] * other_2[scalar]]),
        );
    }
}
impl GeometricQuotient<AntiFlatPoint> for AntiScalar {
    type Output = FlatPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        4        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        0        7        0
    //  no simd        0       16        0
    fn geometric_quotient(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ other.group0() * Simd32x4::from(-1.0));
        let other_2 = Scalar::from_groups(/* scalar */ f32::powi(other[e321], -2));
        return FlatPoint::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(self[e12345])
                * Simd32x4::from([
                    reverse[e235] * other_2[scalar],
                    reverse[e315] * other_2[scalar],
                    reverse[e125] * other_2[scalar],
                    reverse[e321] * other_2[scalar],
                ])
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricQuotient<AntiFlector> for AntiScalar {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        0        0
    //    simd4        0        7        0
    // Totals...
    // yes simd        3        7        0
    //  no simd        3       28        0
    fn geometric_quotient(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiFlector::from_groups(/* e235, e315, e125, e321 */ other.group0() * Simd32x4::from(-1.0), /* e1, e2, e3, e5 */ other.group1());
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2),
        );
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e1, e2, e3, e5
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(self[e12345]) * geometric_product.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * geometric_product.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
    }
}
impl GeometricQuotient<AntiLine> for AntiScalar {
    type Output = Line;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        0        0
    //    simd3        0        6        0
    // Totals...
    // yes simd        2        6        0
    //  no simd        2       18        0
    fn geometric_quotient(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiLine::from_groups(
            // e23, e31, e12
            other.group0() * Simd32x3::from(-1.0),
            // e15, e25, e35
            other.group1() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(/* scalar */ f32::powi(other[e23], 2) + f32::powi(other[e31], 2) + f32::powi(other[e12], 2));
        let geometric_product = AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e15, e25, e35
            Simd32x3::from(other_2[scalar]) * reverse.group1(),
        );
        return Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(self[e12345]) * geometric_product.group0(),
            // e235, e315, e125
            Simd32x3::from(self[e12345]) * geometric_product.group1(),
        );
    }
}
impl GeometricQuotient<AntiMotor> for AntiScalar {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        0        0
    //    simd4        0        6        0
    // Totals...
    // yes simd        3        6        0
    //  no simd        3       24        0
    fn geometric_quotient(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, e3215
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e23], 2) + f32::powi(other[e31], 2) + f32::powi(other[e12], 2) + f32::powi(other[scalar], 2),
        );
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e15, e25, e35, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(self[e12345]) * geometric_product.group0(),
            // e235, e315, e125, e5
            Simd32x4::from(self[e12345]) * geometric_product.group1(),
        );
    }
}
impl GeometricQuotient<AntiPlane> for AntiScalar {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        4        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        2        6        0
    //  no simd        2       12        0
    fn geometric_quotient(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let other_2 = Scalar::from_groups(/* scalar */ f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2));
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345])
                * Simd32x4::from([other[e1] * other_2[scalar], other[e2] * other_2[scalar], other[e3] * other_2[scalar], other[e5] * other_2[scalar]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
    }
}
impl GeometricQuotient<AntiScalar> for AntiScalar {
    type Output = Scalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        0        1
    fn geometric_quotient(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ self[e12345] / (other[e12345]));
    }
}
impl GeometricQuotient<Circle> for AntiScalar {
    type Output = Dipole;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6        6        0
    //    simd3        0        8        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        6       18        0
    //  no simd        6       46        0
    fn geometric_quotient(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let reverse = Circle::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125
            other.group2() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group2(),
        );
        return Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[e12345]) * geometric_product.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from(self[e12345]) * geometric_product.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35
            Simd32x3::from(self[e12345]) * geometric_product.group2() * Simd32x3::from(-1.0),
        );
    }
}
impl GeometricQuotient<CircleRotor> for AntiScalar {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7        6        0
    //    simd3        0        4        0
    //    simd4        0        8        0
    // Totals...
    // yes simd        7       18        0
    //  no simd        7       50        0
    fn geometric_quotient(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let reverse = CircleRotor::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e12345
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - f32::powi(other[e12345], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
        );
        return AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[e12345]) * geometric_product.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from(self[e12345]) * geometric_product.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, scalar
            Simd32x4::from(self[e12345]) * geometric_product.group2() * Simd32x4::from(-1.0),
        );
    }
}
impl GeometricQuotient<Dipole> for AntiScalar {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6        6        0
    //    simd3        0        6        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        6       16        0
    //  no simd        6       40        0
    fn geometric_quotient(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let reverse = Dipole::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35
            other.group2() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2),
        );
        let geometric_product = Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35
            Simd32x3::from(other_2[scalar]) * reverse.group2(),
        );
        return Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[e12345]) * geometric_product.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(self[e12345]) * geometric_product.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e235, e315, e125
            Simd32x3::from(self[e12345]) * geometric_product.group2(),
        );
    }
}
impl GeometricQuotient<DipoleInversion> for AntiScalar {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10        8        0
    //    simd3        0        3        0
    //    simd4        0       10        0
    // Totals...
    // yes simd       10       21        0
    //  no simd       10       57        0
    fn geometric_quotient(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let reverse = DipoleInversion::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + 2.0 * (other[e1234] * other[e3215])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2),
        );
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[e12345]) * geometric_product.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(self[e12345]) * geometric_product.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e235, e315, e125, e4
            Simd32x4::from(self[e12345]) * geometric_product.group2(),
            // e1, e2, e3, e5
            Simd32x4::from(self[e12345]) * geometric_product.group3() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricQuotient<DualNum> for AntiScalar {
    type Output = AntiDualNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd2        0        2        0
    // Totals...
    // yes simd        0        5        0
    //  no simd        0        7        0
    fn geometric_quotient(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let other_2 = Scalar::from_groups(/* scalar */ f32::powi(other[e12345], -2) * -1.0);
        return AntiDualNum::from_groups(
            // e3215, scalar
            Simd32x2::from(self[e12345]) * Simd32x2::from([other[e5] * other_2[scalar], other[e12345] * other_2[scalar]]) * Simd32x2::from(-1.0),
        );
    }
}
impl GeometricQuotient<FlatPoint> for AntiScalar {
    type Output = AntiFlatPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        5        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        0        8        0
    //  no simd        0       17        0
    fn geometric_quotient(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let reverse = FlatPoint::from_groups(/* e15, e25, e35, e45 */ other.group0() * Simd32x4::from(-1.0));
        let other_2 = Scalar::from_groups(/* scalar */ f32::powi(other[e45], -2) * -1.0);
        return AntiFlatPoint::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(self[e12345])
                * Simd32x4::from([
                    reverse[e15] * other_2[scalar],
                    reverse[e25] * other_2[scalar],
                    reverse[e35] * other_2[scalar],
                    reverse[e45] * other_2[scalar],
                ])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
    }
}
impl GeometricQuotient<Flector> for AntiScalar {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        0        0
    //    simd4        0        7        0
    // Totals...
    // yes simd        3        7        0
    //  no simd        3       28        0
    fn geometric_quotient(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let reverse = Flector::from_groups(
            // e15, e25, e35, e45
            other.group0() * Simd32x4::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group1(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            -f32::powi(other[e45], 2) - f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2),
        );
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(self[e12345]) * geometric_product.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1, e2, e3, e5
            Simd32x4::from(self[e12345]) * geometric_product.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricQuotient<Line> for AntiScalar {
    type Output = AntiLine;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        0        0
    //    simd3        0        8        0
    // Totals...
    // yes simd        2        8        0
    //  no simd        2       24        0
    fn geometric_quotient(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let reverse = Line::from_groups(
            // e415, e425, e435
            other.group0() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group1() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(/* scalar */ -f32::powi(other[e415], 2) - f32::powi(other[e425], 2) - f32::powi(other[e435], 2));
        let geometric_product = Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group1(),
        );
        return AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(self[e12345]) * geometric_product.group0() * Simd32x3::from(-1.0),
            // e15, e25, e35
            Simd32x3::from(self[e12345]) * geometric_product.group1() * Simd32x3::from(-1.0),
        );
    }
}
impl GeometricQuotient<Motor> for AntiScalar {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        0        0
    //    simd4        0        8        0
    // Totals...
    // yes simd        3        8        0
    //  no simd        3       32        0
    fn geometric_quotient(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let reverse = Motor::from_groups(
            // e415, e425, e435, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            -f32::powi(other[e415], 2) - f32::powi(other[e425], 2) - f32::powi(other[e435], 2) - f32::powi(other[e12345], 2),
        );
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e235, e315, e125, e5
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(self[e12345]) * geometric_product.group0() * Simd32x4::from(-1.0),
            // e15, e25, e35, e3215
            Simd32x4::from(self[e12345]) * geometric_product.group1() * Simd32x4::from(-1.0),
        );
    }
}
impl GeometricQuotient<MultiVector> for AntiScalar {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       23       24        0
    //    simd2        0        3        0
    //    simd3        0       17        0
    //    simd4        0       10        0
    // Totals...
    // yes simd       23       54        0
    //  no simd       23      121        0
    fn geometric_quotient(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let reverse = MultiVector::from_groups(
            // scalar, e12345
            other.group0(),
            // e1, e2, e3, e4
            other.group1(),
            // e5
            other[e5],
            // e15, e25, e35, e45
            other.group3() * Simd32x4::from(-1.0),
            // e41, e42, e43
            other.group4() * Simd32x3::from(-1.0),
            // e23, e31, e12
            other.group5() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group6() * Simd32x4::from(-1.0),
            // e423, e431, e412
            other.group7() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group8() * Simd32x3::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group9(),
            // e1234
            other[e1234],
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e15] * other[e41])
                + 2.0 * (other[e25] * other[e42])
                + 2.0 * (other[e35] * other[e43])
                + 2.0 * (other[e3215] * other[e1234])
                + f32::powi(other[scalar], 2)
                + f32::powi(other[e1], 2)
                + f32::powi(other[e2], 2)
                + f32::powi(other[e3], 2)
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                + f32::powi(other[e321], 2)
                - f32::powi(other[e12345], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2)
                - 2.0 * (other[e4] * other[e5])
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(other_2[scalar]) * reverse.group0(),
            // e1, e2, e3, e4
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e5
            reverse[e5] * other_2[scalar],
            // e15, e25, e35, e45
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group4(),
            // e23, e31, e12
            Simd32x3::from(other_2[scalar]) * reverse.group5(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group6(),
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group7(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group8(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group9(),
            // e1234
            reverse[e1234] * other_2[scalar],
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(self[e12345]) * geometric_product.group0().yx() * Simd32x2::from([-1.0, 1.0]),
            // e1, e2, e3, e4
            (Simd32x3::from(self[e12345]) * geometric_product.group9().xyz() * Simd32x3::from(-1.0)).with_w(self[e12345] * geometric_product[e1234]),
            // e5
            self[e12345] * geometric_product[e3215],
            // e15, e25, e35, e45
            Simd32x4::from(self[e12345]) * geometric_product.group8().with_w(geometric_product[e321]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e41, e42, e43
            Simd32x3::from(self[e12345]) * geometric_product.group7() * Simd32x3::from(-1.0),
            // e23, e31, e12
            Simd32x3::from(self[e12345]) * geometric_product.group6().xyz() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            Simd32x4::from(self[e12345]) * geometric_product.group5().with_w(geometric_product[e45]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e423, e431, e412
            Simd32x3::from(self[e12345]) * geometric_product.group4(),
            // e235, e315, e125
            Simd32x3::from(self[e12345]) * geometric_product.group3().xyz(),
            // e4235, e4315, e4125, e3215
            (Simd32x3::from(self[e12345]) * geometric_product.group1().xyz()).with_w(self[e12345] * geometric_product[e5] * -1.0),
            // e1234
            self[e12345] * geometric_product[e4] * -1.0,
        );
    }
}
impl GeometricQuotient<Plane> for AntiScalar {
    type Output = AntiPlane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        4        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        2        6        0
    //  no simd        2       12        0
    fn geometric_quotient(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let other_2 = Scalar::from_groups(/* scalar */ -f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2));
        return AntiPlane::from_groups(
            // e1, e2, e3, e5
            Simd32x4::from(self[e12345])
                * Simd32x4::from([
                    other[e4235] * other_2[scalar],
                    other[e4315] * other_2[scalar],
                    other[e4125] * other_2[scalar],
                    other[e3215] * other_2[scalar],
                ])
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricQuotient<RoundPoint> for AntiScalar {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        7        0
    //    simd3        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        3        9        0
    //  no simd        3       14        0
    fn geometric_quotient(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2) - 2.0 * (other[e4] * other[e5]),
        );
        let geometric_product = RoundPoint::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from(other_2[scalar]) * other.group0(), /* e5 */ other[e5] * other_2[scalar]);
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x3::from(self[e12345]) * geometric_product.group0().xyz()).with_w(self[e12345] * geometric_product[e5] * -1.0),
            // e1234
            self[e12345] * geometric_product[e4] * -1.0,
        );
    }
}
impl GeometricQuotient<Scalar> for AntiScalar {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        0        1
    fn geometric_quotient(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ self[e12345] / (other[scalar]));
    }
}
impl GeometricQuotient<Sphere> for AntiScalar {
    type Output = RoundPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        5        0
    //    simd3        0        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        3        8        0
    //  no simd        3       15        0
    fn geometric_quotient(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e3215] * other[e1234]) - f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2),
        );
        let geometric_product = Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * other.group0(),
            // e1234
            other_2[scalar] * other[e1234],
        );
        return RoundPoint::from_groups(
            // e1, e2, e3, e4
            (Simd32x3::from(self[e12345]) * geometric_product.group0().xyz() * Simd32x3::from(-1.0)).with_w(self[e12345] * geometric_product[e1234]),
            // e5
            self[e12345] * geometric_product[e3215],
        );
    }
}
impl GeometricQuotient<VersorEven> for AntiScalar {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11        8        0
    //    simd4        0       15        0
    // Totals...
    // yes simd       11       23        0
    //  no simd       11       68        0
    fn geometric_quotient(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let reverse = VersorEven::from_groups(
            // e423, e431, e412, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e5
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e4
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)
                - f32::powi(other[e12345], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125])
                - 2.0 * (other[e5] * other[e4]),
        );
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e5
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e1, e2, e3, e4
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(self[e12345]) * geometric_product.group0() * Simd32x4::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from(self[e12345]) * geometric_product.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, e1234
            Simd32x4::from(self[e12345]) * geometric_product.group2().xyz().with_w(geometric_product[e4]) * Simd32x4::from(-1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * geometric_product.group3().xyz().with_w(geometric_product[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
    }
}
impl GeometricQuotient<VersorOdd> for AntiScalar {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11        8        0
    //    simd4        0       13        0
    // Totals...
    // yes simd       11       21        0
    //  no simd       11       60        0
    fn geometric_quotient(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let reverse = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + 2.0 * (other[e1234] * other[e3215])
                + f32::powi(other[scalar], 2)
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2),
        );
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(self[e12345]) * geometric_product.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(self[e12345]) * geometric_product.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e235, e315, e125, e5
            Simd32x4::from(self[e12345]) * geometric_product.group2().xyz().with_w(geometric_product[e3215]),
            // e1, e2, e3, e4
            Simd32x4::from(self[e12345]) * geometric_product.group3().xyz().with_w(geometric_product[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl std::ops::Div<GeometricQuotientInfix> for Circle {
    type Output = GeometricQuotientInfixPartial<Circle>;
    fn div(self, _rhs: GeometricQuotientInfix) -> Self::Output {
        GeometricQuotientInfixPartial(self)
    }
}
impl GeometricQuotient<AntiCircleRotor> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       41       62        0
    //    simd3        0       12        0
    //    simd4       15       10        0
    // Totals...
    // yes simd       56       84        0
    //  no simd      101      138        0
    fn geometric_quotient(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiCircleRotor::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, scalar
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                + f32::powi(other[scalar], 2)
                - f32::powi(other[e45], 2),
        );
        let geometric_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (geometric_product[e41] * self[e321])
                    + (geometric_product[e42] * self[e435])
                    + (geometric_product[e31] * self[e412])
                    + (geometric_product[e45] * self[e423])
                    + (geometric_product[scalar] * self[e423]),
                (geometric_product[e42] * self[e321])
                    + (geometric_product[e43] * self[e415])
                    + (geometric_product[e12] * self[e423])
                    + (geometric_product[e45] * self[e431])
                    + (geometric_product[scalar] * self[e431]),
                (geometric_product[e41] * self[e425])
                    + (geometric_product[e43] * self[e321])
                    + (geometric_product[e23] * self[e431])
                    + (geometric_product[e45] * self[e412])
                    + (geometric_product[scalar] * self[e412]),
                -(geometric_product[e43] * self[e125])
                    - (geometric_product[e23] * self[e415])
                    - (geometric_product[e31] * self[e425])
                    - (geometric_product[e12] * self[e435])
                    - (geometric_product[e45] * self[e321])
                    - (geometric_product[e15] * self[e423])
                    - (geometric_product[e25] * self[e431])
                    - (geometric_product[e35] * self[e412]),
            ]) - (geometric_product.group0().zxy() * self.group1().yzx()).with_w(geometric_product[e41] * self[e235])
                - (self.group0().yzx() * geometric_product.group1().zxy()).with_w(geometric_product[e42] * self[e315]),
            // e415, e425, e435, e321
            (Simd32x4::from(geometric_product[scalar]) * self.group1())
                + (geometric_product.group0().yzx() * self.group2().zxy()).with_w(geometric_product[e41] * self[e235])
                + (self.group0().zxy() * geometric_product.group2().yzx()).with_w(geometric_product[e42] * self[e315])
                + (geometric_product.group1().yzx() * self.group1().zxy()).with_w(geometric_product[e43] * self[e125])
                - (geometric_product.group2().zxyy() * self.group0().yzx().with_w(self[e431]))
                - (geometric_product.group0().zxy() * self.group2().yzx()).with_w(geometric_product[e15] * self[e423])
                - (geometric_product.group1().zxy() * self.group1().yzx()).with_w(geometric_product[e35] * self[e412]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (geometric_product[e31] * self[e125]) + (geometric_product[e25] * self[e435]) + (geometric_product[scalar] * self[e235]),
                (geometric_product[e12] * self[e235]) + (geometric_product[e35] * self[e415]) + (geometric_product[scalar] * self[e315]),
                (geometric_product[e23] * self[e315]) + (geometric_product[e15] * self[e425]) + (geometric_product[scalar] * self[e125]),
                -(geometric_product[e25] * self[e425]) - (geometric_product[e35] * self[e435]),
            ]) - (geometric_product.group1().zxwy() * self.group2().yzz().with_w(self[e315]))
                - (geometric_product.group1().wwyx() * self.group2().xyx().with_w(self[e235]))
                - (geometric_product.group2().zyzx() * self.group1().ywwx())
                - (geometric_product.group2().xxy() * self.group1().wzx()).with_w(geometric_product[e12] * self[e125]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (geometric_product[e43] * self[e315]) + (geometric_product[e23] * self[e321]) + (geometric_product[e25] * self[e412]),
                (geometric_product[e41] * self[e125]) + (geometric_product[e31] * self[e321]) + (geometric_product[e35] * self[e423]),
                (geometric_product[e42] * self[e235]) + (geometric_product[e12] * self[e321]) + (geometric_product[e15] * self[e431]),
                -(geometric_product[e23] * self[e423]) - (geometric_product[e31] * self[e431]) - (geometric_product[e12] * self[e412]),
            ]) - (self.group1().xyzz() * geometric_product.group1().www().with_w(geometric_product[e43]))
                - (geometric_product.group0().yzx() * self.group2().zxy()).with_w(geometric_product[e41] * self[e415])
                - (self.group0().yzx() * geometric_product.group2().zxy()).with_w(geometric_product[e42] * self[e425]),
        );
    }
}
impl GeometricQuotient<AntiDipoleInversion> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       63        0
    //    simd3        0       16        0
    //    simd4       27       19        0
    // Totals...
    // yes simd       63       98        0
    //  no simd      144      187        0
    fn geometric_quotient(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e4
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125])
                - 2.0 * (other[e4] * other[e5]),
        );
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e4
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e1, e2, e3, e5
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(geometric_product[e431] * self[e435]) - (geometric_product[e425] * self[e412]) - (geometric_product[e4] * self[e415]) - (geometric_product[e3] * self[e431]),
                -(geometric_product[e412] * self[e415]) - (geometric_product[e435] * self[e423]) - (geometric_product[e4] * self[e425]) - (geometric_product[e1] * self[e412]),
                -(geometric_product[e412] * self[e321]) - (geometric_product[e415] * self[e431]) - (geometric_product[e4] * self[e435]) - (geometric_product[e2] * self[e423]),
                (geometric_product[e415] * self[e415])
                    + (geometric_product[e425] * self[e425])
                    + (geometric_product[e435] * self[e435])
                    + (geometric_product[e315] * self[e431])
                    + (geometric_product[e125] * self[e412]),
            ]) + (Simd32x4::from([geometric_product[e321], geometric_product[e3], geometric_product[e425], self[e315]]) * self.group0().xxx().with_w(geometric_product[e431]))
                + (Simd32x4::from([geometric_product[e2], geometric_product[e415], geometric_product[e321], geometric_product[e235]]) * self.group0().zzz().with_w(self[e423]))
                + (geometric_product.group1().zw().with_zw(geometric_product[e1], self[e125]) * self.group0().yyy().with_w(geometric_product[e412]))
                + (geometric_product.group0().zxy() * self.group1().yzx()).with_w(geometric_product[e423] * self[e235])
                - (self.group1().wwyw() * geometric_product.group0().xyx().with_w(geometric_product[e321])),
            // e23, e31, e12, e45
            (geometric_product.group0().zxy() * self.group2().yzx()).with_w(geometric_product[e423] * self[e235])
                + (self.group0().yzx() * geometric_product.group2().zxy()).with_w(geometric_product[e431] * self[e315])
                + (geometric_product.group1().zxy() * self.group1().yzx()).with_w(geometric_product[e412] * self[e125])
                - (Simd32x4::from([geometric_product[e315], geometric_product[e5], geometric_product[e5], geometric_product[e125]]) * self.group0().zyz().with_w(self[e412]))
                - (Simd32x4::from([geometric_product[e5], geometric_product[e125], geometric_product[e235], geometric_product[e315]]) * self.group0().xxy().with_w(self[e431]))
                - (geometric_product.group3().xyzz() * self.group1().wwwz())
                - (self.group1().zxyy() * geometric_product.group1().yzx().with_w(geometric_product[e2]))
                - (self.group2() * geometric_product.group2().www()).with_w(geometric_product[e1] * self[e415])
                - (geometric_product.group0().yzx() * self.group2().zxy()).with_w(geometric_product[e235] * self[e423]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                geometric_product[e5] * self[e415] * -1.0,
                geometric_product[e5] * self[e425] * -1.0,
                geometric_product[e5] * self[e435] * -1.0,
                (geometric_product[e425] * self[e431]) + (geometric_product[e435] * self[e412]),
            ]) + (self.group1().wzxz() * geometric_product.group2().xxy().with_w(geometric_product[e412]))
                + (self.group2().yzx() * geometric_product.group1().zxy()).with_w(geometric_product[e423] * self[e415])
                + (self.group2().yzx() * geometric_product.group3().zxy()).with_w(geometric_product[e431] * self[e425])
                + (geometric_product.group2().zyz() * self.group1().yww()).with_w(geometric_product[e415] * self[e423])
                - (Simd32x4::from([geometric_product[e425], geometric_product[e3], geometric_product[e1], geometric_product[e2]]) * self.group2().zxy().with_w(self[e431]))
                - (Simd32x4::from([geometric_product[e2], geometric_product[e321], geometric_product[e321], geometric_product[e3]]) * self.group2().zyz().with_w(self[e412]))
                - (geometric_product.group2().yzxw() * self.group1().zxyw())
                - (self.group2().xxy() * geometric_product.group1().wzx()).with_w(geometric_product[e1] * self[e423]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(geometric_product[e431] * self[e125]) - (geometric_product[e125] * self[e431]) - (geometric_product[e4] * self[e235]) - (geometric_product[e3] * self[e425]),
                -(geometric_product[e412] * self[e235]) - (geometric_product[e235] * self[e412]) - (geometric_product[e4] * self[e315]) - (geometric_product[e1] * self[e435]),
                -(geometric_product[e423] * self[e315]) - (geometric_product[e315] * self[e423]) - (geometric_product[e4] * self[e125]) - (geometric_product[e2] * self[e415]),
                (geometric_product[e235] * self[e415]) + (geometric_product[e315] * self[e425]) + (geometric_product[e125] * self[e435]) + (geometric_product[e5] * self[e321]),
            ]) + (Simd32x4::from([geometric_product[e315], geometric_product[e5], geometric_product[e5], geometric_product[e425]]) * self.group0().zyz().with_w(self[e315]))
                + (Simd32x4::from([geometric_product[e5], geometric_product[e125], geometric_product[e235], geometric_product[e1]]) * self.group0().xxy().with_w(self[e235]))
                + (geometric_product.group0().zxy() * self.group2().yzx()).with_w(geometric_product[e415] * self[e235])
                + (geometric_product.group1().www() * self.group1().xyz()).with_w(geometric_product[e435] * self[e125])
                + (geometric_product.group3().yzx() * self.group1().zxy()).with_w(geometric_product[e3] * self[e125])
                + (self.group1().www() * geometric_product.group1().xyz()).with_w(geometric_product[e2] * self[e315]),
        );
    }
}
impl GeometricQuotient<AntiDualNum> for Circle {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd2        0        1        0
    //    simd3        2        5        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        2        9        0
    //  no simd        6       26        0
    fn geometric_quotient(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDualNum::from_groups(/* e3215, scalar */ Simd32x2::from(f32::powi(other[scalar], -2)) * other.group0());
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(geometric_product[scalar]) * self.group0(),
            // e415, e425, e435, e321
            ((Simd32x3::from(geometric_product[e3215]) * self.group0()) + (Simd32x3::from(geometric_product[scalar]) * self.group1().xyz()))
                .with_w(geometric_product[scalar] * self[e321]),
            // e235, e315, e125, e4
            ((Simd32x3::from(geometric_product[e3215]) * self.group1().xyz()) + (Simd32x3::from(geometric_product[scalar]) * self.group2())).with_w(0.0),
            // e1, e2, e3, e5
            Simd32x4::from(geometric_product[e3215]) * self.group0().with_w(self[e321]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
    }
}
impl GeometricQuotient<AntiFlatPoint> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       21        0
    //    simd3        0        6        0
    //    simd4        6        3        0
    // Totals...
    // yes simd       10       30        0
    //  no simd       28       51        0
    fn geometric_quotient(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlatPoint::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(f32::powi(other[e321], -2)) * Simd32x4::from([other[e235] * -1.0, other[e315] * -1.0, other[e125] * -1.0, other[e321] * -1.0]),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x3::from(geometric_product[e321]) * self.group0()).with_w(
                (geometric_product[e235] * self[e423]) + (geometric_product[e315] * self[e431]) + (geometric_product[e125] * self[e412]) - (geometric_product[e321] * self[e321]),
            ),
            // e23, e31, e12, e45
            Simd32x4::from([
                geometric_product[e125] * self[e431],
                geometric_product[e235] * self[e412],
                geometric_product[e315] * self[e423],
                -(geometric_product[e315] * self[e431]) - (geometric_product[e125] * self[e412]),
            ]) - (geometric_product.group0().yzxx() * self.group0().zxy().with_w(self[e423])),
            // e15, e25, e35, e1234
            (geometric_product.group0().xxy() * self.group1().wzx()).with_w(0.0) + (geometric_product.group0().zyz() * self.group1().yww()).with_w(0.0)
                - (Simd32x3::from(geometric_product[e321]) * self.group2()).with_w(0.0)
                - (geometric_product.group0().yzx() * self.group1().zxy()).with_w(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                geometric_product[e125] * self[e431] * -1.0,
                geometric_product[e235] * self[e412] * -1.0,
                geometric_product[e315] * self[e423] * -1.0,
                geometric_product[e125] * self[e435],
            ]) + (geometric_product.group0().wwwy() * self.group1().xyzy())
                + (self.group0().zxy() * geometric_product.group0().yzx()).with_w(geometric_product[e235] * self[e415]),
        );
    }
}
impl GeometricQuotient<AntiFlector> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       32        0
    //    simd3        0        4        0
    //    simd4       13       12        0
    // Totals...
    // yes simd       32       48        0
    //  no simd       71       92        0
    fn geometric_quotient(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiFlector::from_groups(/* e235, e315, e125, e321 */ other.group0() * Simd32x4::from(-1.0), /* e1, e2, e3, e5 */ other.group1());
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2),
        );
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e1, e2, e3, e5
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([geometric_product[e321], geometric_product[e3], geometric_product[e1], geometric_product[e235]]) * self.group0().xxy().with_w(self[e423]))
                + (Simd32x4::from([geometric_product[e2], geometric_product[e321], geometric_product[e321], geometric_product[e315]]) * self.group0().zyz().with_w(self[e431]))
                + Simd32x3::from(0.0).with_w(geometric_product[e125] * self[e412])
                - (self.group0().yzx() * geometric_product.group1().zxy()).with_w(geometric_product[e321] * self[e321]),
            // e23, e31, e12, e45
            Simd32x4::from([
                geometric_product[e125] * self[e431],
                geometric_product[e235] * self[e412],
                geometric_product[e315] * self[e423],
                -(geometric_product[e1] * self[e415]) - (geometric_product[e2] * self[e425]) - (geometric_product[e3] * self[e435]),
            ]) - (Simd32x4::from([geometric_product[e315], geometric_product[e5], geometric_product[e5], geometric_product[e315]]) * self.group0().zyz().with_w(self[e431]))
                - (Simd32x4::from([geometric_product[e5], geometric_product[e125], geometric_product[e235], geometric_product[e235]]) * self.group0().xxy().with_w(self[e423]))
                - (self.group1().www() * geometric_product.group1().xyz()).with_w(geometric_product[e125] * self[e412]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (geometric_product[e235] * self[e321]) + (geometric_product[e125] * self[e425]) + (geometric_product[e3] * self[e315]) - (geometric_product[e5] * self[e415]),
                (geometric_product[e235] * self[e435]) + (geometric_product[e315] * self[e321]) + (geometric_product[e1] * self[e125]) - (geometric_product[e5] * self[e425]),
                (geometric_product[e315] * self[e415]) + (geometric_product[e125] * self[e321]) + (geometric_product[e2] * self[e235]) - (geometric_product[e5] * self[e435]),
                0.0,
            ]) - (Simd32x4::from([geometric_product[e321], geometric_product[e3], geometric_product[e1], geometric_product[e1]]) * self.group2().xxy().with_w(self[e423]))
                - (Simd32x4::from([geometric_product[e2], geometric_product[e321], geometric_product[e321], geometric_product[e2]]) * self.group2().zyz().with_w(self[e431]))
                - (geometric_product.group0().yzx() * self.group1().zxy()).with_w(geometric_product[e3] * self[e412]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(geometric_product[e125] * self[e431]) - (geometric_product[e3] * self[e425]),
                -(geometric_product[e235] * self[e412]) - (geometric_product[e1] * self[e435]),
                -(geometric_product[e315] * self[e423]) - (geometric_product[e2] * self[e415]),
                (geometric_product[e315] * self[e425]) + (geometric_product[e125] * self[e435]) + (geometric_product[e5] * self[e321]),
            ]) + (Simd32x4::from([geometric_product[e315], geometric_product[e5], geometric_product[e5], geometric_product[e2]]) * self.group0().zyz().with_w(self[e315]))
                + (Simd32x4::from([geometric_product[e5], geometric_product[e125], geometric_product[e235], geometric_product[e1]]) * self.group0().xxy().with_w(self[e235]))
                + (self.group1().zxyx() * geometric_product.group1().yzx().with_w(geometric_product[e235]))
                + (geometric_product.group0().www() * self.group1().xyz()).with_w(geometric_product[e3] * self[e125]),
        );
    }
}
impl GeometricQuotient<AntiLine> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       40        0
    //    simd3        0       11        0
    //    simd4        7        0        0
    // Totals...
    // yes simd       25       51        0
    //  no simd       46       73        0
    fn geometric_quotient(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiLine::from_groups(
            // e23, e31, e12
            other.group0() * Simd32x3::from(-1.0),
            // e15, e25, e35
            other.group1() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(/* scalar */ f32::powi(other[e23], 2) + f32::powi(other[e31], 2) + f32::powi(other[e12], 2));
        let geometric_product = AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e15, e25, e35
            Simd32x3::from(other_2[scalar]) * reverse.group1(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                geometric_product[e31] * self[e412],
                geometric_product[e12] * self[e423],
                geometric_product[e23] * self[e431],
                -(geometric_product[e31] * self[e425])
                    - (geometric_product[e12] * self[e435])
                    - (geometric_product[e15] * self[e423])
                    - (geometric_product[e25] * self[e431])
                    - (geometric_product[e35] * self[e412]),
            ]) - (geometric_product.group0().zxy() * self.group0().yzx()).with_w(geometric_product[e23] * self[e415]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (geometric_product[e31] * self[e435]) + (geometric_product[e25] * self[e412]),
                (geometric_product[e12] * self[e415]) + (geometric_product[e35] * self[e423]),
                (geometric_product[e23] * self[e425]) + (geometric_product[e15] * self[e431]),
                geometric_product[e35] * self[e412] * -1.0,
            ]) - (geometric_product.group0().zxy() * self.group1().yzx()).with_w(geometric_product[e15] * self[e423])
                - (geometric_product.group1().zxy() * self.group0().yzx()).with_w(geometric_product[e25] * self[e431]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (geometric_product[e31] * self[e125]) + (geometric_product[e25] * self[e435]),
                (geometric_product[e12] * self[e235]) + (geometric_product[e35] * self[e415]),
                (geometric_product[e23] * self[e315]) + (geometric_product[e15] * self[e425]),
                -(geometric_product[e15] * self[e415]) - (geometric_product[e25] * self[e425]) - (geometric_product[e35] * self[e435]),
            ]) - (geometric_product.group0().zxy() * self.group2().yzx()).with_w(geometric_product[e23] * self[e235])
                - (geometric_product.group1().xxy() * self.group1().wzx()).with_w(geometric_product[e31] * self[e315])
                - (geometric_product.group1().zyz() * self.group1().yww()).with_w(geometric_product[e12] * self[e125]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (geometric_product[e23] * self[e321]) + (geometric_product[e25] * self[e412]),
                (geometric_product[e31] * self[e321]) + (geometric_product[e35] * self[e423]),
                (geometric_product[e12] * self[e321]) + (geometric_product[e15] * self[e431]),
                -(geometric_product[e31] * self[e431]) - (geometric_product[e12] * self[e412]),
            ]) - (geometric_product.group1().zxy() * self.group0().yzx()).with_w(geometric_product[e23] * self[e423]),
        );
    }
}
impl GeometricQuotient<AntiMotor> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       35       55        0
    //    simd3        0        6        0
    //    simd4        8        6        0
    // Totals...
    // yes simd       43       67        0
    //  no simd       67       97        0
    fn geometric_quotient(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, e3215
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e23], 2) + f32::powi(other[e31], 2) + f32::powi(other[e12], 2) + f32::powi(other[scalar], 2),
        );
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e15, e25, e35, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (geometric_product[e31] * self[e412]) + (geometric_product[scalar] * self[e423]),
                (geometric_product[e12] * self[e423]) + (geometric_product[scalar] * self[e431]),
                (geometric_product[e23] * self[e431]) + (geometric_product[scalar] * self[e412]),
                -(geometric_product[e23] * self[e415])
                    - (geometric_product[e31] * self[e425])
                    - (geometric_product[e12] * self[e435])
                    - (geometric_product[e25] * self[e431])
                    - (geometric_product[e35] * self[e412]),
            ]) - (self.group0().yzx() * geometric_product.group0().zxy()).with_w(geometric_product[e15] * self[e423]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (geometric_product[e31] * self[e435]) + (geometric_product[scalar] * self[e415]) + (geometric_product[e25] * self[e412]),
                (geometric_product[e12] * self[e415]) + (geometric_product[scalar] * self[e425]) + (geometric_product[e3215] * self[e431]),
                (geometric_product[e23] * self[e425]) + (geometric_product[scalar] * self[e435]) + (geometric_product[e3215] * self[e412]),
                geometric_product[e35] * self[e412] * -1.0,
            ]) + (self.group0().xxy() * geometric_product.group1().wzx()).with_w(geometric_product[scalar] * self[e321])
                - (geometric_product.group1().zxyx() * self.group0().yzx().with_w(self[e423]))
                - (geometric_product.group0().zxy() * self.group1().yzx()).with_w(geometric_product[e25] * self[e431]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (geometric_product[e31] * self[e125]) + (geometric_product[scalar] * self[e235]) + (geometric_product[e25] * self[e435]) + (geometric_product[e3215] * self[e415]),
                (geometric_product[e12] * self[e235]) + (geometric_product[scalar] * self[e315]) + (geometric_product[e35] * self[e415]) + (geometric_product[e3215] * self[e425]),
                (geometric_product[e23] * self[e315]) + (geometric_product[scalar] * self[e125]) + (geometric_product[e15] * self[e425]) + (geometric_product[e3215] * self[e435]),
                -(geometric_product[e15] * self[e415]) - (geometric_product[e25] * self[e425]) - (geometric_product[e35] * self[e435]) - (geometric_product[e3215] * self[e321]),
            ]) - (geometric_product.group0().zxyx() * self.group2().yzx().with_w(self[e235]))
                - (geometric_product.group1().xxy() * self.group1().wzx()).with_w(geometric_product[e31] * self[e315])
                - (geometric_product.group1().zyz() * self.group1().yww()).with_w(geometric_product[e12] * self[e125]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (geometric_product[e23] * self[e321]) + (geometric_product[e25] * self[e412]) + (geometric_product[e3215] * self[e423]),
                (geometric_product[e31] * self[e321]) + (geometric_product[e35] * self[e423]) + (geometric_product[e3215] * self[e431]),
                (geometric_product[e12] * self[e321]) + (geometric_product[e15] * self[e431]) + (geometric_product[e3215] * self[e412]),
                -(geometric_product[e31] * self[e431]) - (geometric_product[e12] * self[e412]),
            ]) - (self.group0().yzx() * geometric_product.group1().zxy()).with_w(geometric_product[e23] * self[e423]),
        );
    }
}
impl GeometricQuotient<AntiPlane> for Circle {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       18        0
    //    simd3        1        5        0
    //    simd4        6        4        0
    // Totals...
    // yes simd       10       27        0
    //  no simd       30       49        0
    fn geometric_quotient(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiPlane::from_groups(
            // e1, e2, e3, e5
            Simd32x4::from(f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)) * other.group0(),
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (self.group0().zxy() * geometric_product.group0().yzx()) - (self.group0().yzx() * geometric_product.group0().zxy()),
            // e23, e31, e12, e45
            Simd32x3::from(0.0).with_w(geometric_product[e3] * self[e435] * -1.0)
                - (geometric_product.group0().xyzy() * self.group1().wwwy())
                - (self.group0() * geometric_product.group0().www()).with_w(geometric_product[e1] * self[e415]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                geometric_product[e3] * self[e315],
                geometric_product[e1] * self[e125],
                geometric_product[e2] * self[e235],
                geometric_product[e3] * self[e412] * -1.0,
            ]) - (geometric_product.group0().yzxx() * self.group2().zxy().with_w(self[e423]))
                - (geometric_product.group0().www() * self.group1().xyz()).with_w(geometric_product[e2] * self[e431]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                geometric_product[e3] * self[e425] * -1.0,
                geometric_product[e1] * self[e435] * -1.0,
                geometric_product[e2] * self[e415] * -1.0,
                (geometric_product[e3] * self[e125]) + (geometric_product[e5] * self[e321]),
            ]) + (geometric_product.group0().wwwx() * self.group0().with_w(self[e235]))
                + (geometric_product.group0().yzx() * self.group1().zxy()).with_w(geometric_product[e2] * self[e315]),
        );
    }
}
impl GeometricQuotient<AntiScalar> for Circle {
    type Output = Dipole;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        1
    //    simd3        0        4        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        7        1
    //  no simd        0       21        1
    fn geometric_quotient(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiScalar::from_groups(/* e12345 */ 1.0 / other[e12345] * -1.0);
        return Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(geometric_product[e12345]) * self.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from(geometric_product[e12345]) * self.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35
            Simd32x3::from(geometric_product[e12345]) * self.group2() * Simd32x3::from(-1.0),
        );
    }
}
impl GeometricQuotient<Circle> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       26       51        0
    //    simd3        0       17        0
    //    simd4       16        6        0
    // Totals...
    // yes simd       42       74        0
    //  no simd       90      126        0
    fn geometric_quotient(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let reverse = Circle::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125
            other.group2() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group2(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(geometric_product[e431] * self[e435]) - (geometric_product[e425] * self[e412]),
                -(geometric_product[e412] * self[e415]) - (geometric_product[e435] * self[e423]),
                -(geometric_product[e412] * self[e321]) - (geometric_product[e415] * self[e431]),
                (geometric_product[e415] * self[e415])
                    + (geometric_product[e425] * self[e425])
                    + (geometric_product[e435] * self[e435])
                    + (geometric_product[e235] * self[e423])
                    + (geometric_product[e315] * self[e431])
                    + (geometric_product[e125] * self[e412]),
            ]) + (geometric_product.group0().zxy() * self.group1().yzx()).with_w(geometric_product[e423] * self[e235])
                + (self.group0().xyx() * geometric_product.group1().wwy()).with_w(geometric_product[e431] * self[e315])
                + (self.group0().yzz() * geometric_product.group1().zxw()).with_w(geometric_product[e412] * self[e125])
                - (self.group1().wwyw() * geometric_product.group0().xyx().with_w(geometric_product[e321])),
            // e23, e31, e12, e45
            (geometric_product.group0().zxy() * self.group2().yzx()).with_w(geometric_product[e423] * self[e235])
                + (geometric_product.group2().zxy() * self.group0().yzx()).with_w(geometric_product[e431] * self[e315])
                + (geometric_product.group1().zxy() * self.group1().yzx()).with_w(geometric_product[e412] * self[e125])
                - (geometric_product.group0().yzx() * self.group2().zxy()).with_w(geometric_product[e235] * self[e423])
                - (geometric_product.group2().yzx() * self.group0().zxy()).with_w(geometric_product[e315] * self[e431])
                - (geometric_product.group1().yzx() * self.group1().zxy()).with_w(geometric_product[e125] * self[e412]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(geometric_product[e425] * self[e125]) - (geometric_product[e321] * self[e235]) - (geometric_product[e315] * self[e435]),
                -(geometric_product[e435] * self[e235]) - (geometric_product[e321] * self[e315]) - (geometric_product[e125] * self[e415]),
                -(geometric_product[e415] * self[e315]) - (geometric_product[e321] * self[e125]) - (geometric_product[e235] * self[e425]),
                (geometric_product[e415] * self[e423]) + (geometric_product[e425] * self[e431]) + (geometric_product[e435] * self[e412]),
            ]) + (self.group1().ywwy() * geometric_product.group2().zyz().with_w(geometric_product[e431]))
                + (self.group1().wzxx() * geometric_product.group2().xxy().with_w(geometric_product[e423]))
                + (self.group2().yzx() * geometric_product.group1().zxy()).with_w(geometric_product[e412] * self[e435]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(geometric_product[e431] * self[e125]) - (geometric_product[e125] * self[e431]),
                -(geometric_product[e412] * self[e235]) - (geometric_product[e235] * self[e412]),
                -(geometric_product[e423] * self[e315]) - (geometric_product[e315] * self[e423]),
                (geometric_product[e425] * self[e315]) + (geometric_product[e435] * self[e125]),
            ]) + (self.group1().wwwz() * geometric_product.group1().xyz().with_w(geometric_product[e125]))
                + (geometric_product.group0().zxy() * self.group2().yzx()).with_w(geometric_product[e235] * self[e415])
                + (geometric_product.group2().yzx() * self.group0().zxy()).with_w(geometric_product[e315] * self[e425])
                + (geometric_product.group1().www() * self.group1().xyz()).with_w(geometric_product[e415] * self[e235]),
        );
    }
}
impl GeometricQuotient<CircleRotor> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       33       62        0
    //    simd3        0       13        0
    //    simd4       17       10        0
    // Totals...
    // yes simd       50       85        0
    //  no simd      101      141        0
    fn geometric_quotient(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let reverse = CircleRotor::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e12345
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - f32::powi(other[e12345], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(self[e412] * geometric_product[e425]) - (self[e435] * geometric_product[e431]) - (self[e321] * geometric_product[e423]),
                -(self[e431] * geometric_product[e12345]) - (self[e415] * geometric_product[e412]) - (self[e321] * geometric_product[e431]),
                -(self[e412] * geometric_product[e12345]) - (self[e425] * geometric_product[e423]) - (self[e321] * geometric_product[e412]),
                (self[e415] * geometric_product[e415])
                    + (self[e425] * geometric_product[e425])
                    + (self[e435] * geometric_product[e435])
                    + (self[e235] * geometric_product[e423])
                    + (self[e315] * geometric_product[e431])
                    + (self[e125] * geometric_product[e412]),
            ]) + (self.group0().xyx() * geometric_product.group1().wwy()).with_w(self[e423] * geometric_product[e235])
                + (self.group0().yzz() * geometric_product.group1().zxw()).with_w(self[e431] * geometric_product[e315])
                + (geometric_product.group0().zxy() * self.group1().yzx()).with_w(self[e412] * geometric_product[e125])
                - (Simd32x4::from([geometric_product[e12345], geometric_product[e435], geometric_product[e415], geometric_product[e321]]) * self.group0().xxy().with_w(self[e321])),
            // e23, e31, e12, e45
            Simd32x4::from([
                self[e435] * geometric_product[e425] * -1.0,
                self[e425] * geometric_product[e12345] * -1.0,
                self[e435] * geometric_product[e12345] * -1.0,
                self[e321] * geometric_product[e12345],
            ]) + (self.group0().yzx() * geometric_product.group2().zxy()).with_w(self[e235] * geometric_product[e423])
                + (self.group2().yzx() * geometric_product.group0().zxy()).with_w(self[e315] * geometric_product[e431])
                + (self.group1().yzx() * geometric_product.group1().zxy()).with_w(self[e125] * geometric_product[e412])
                - (Simd32x4::from([geometric_product[e12345], geometric_product[e435], geometric_product[e415], geometric_product[e125]]) * self.group1().xxy().with_w(self[e412]))
                - (geometric_product.group2().yzxx() * self.group0().zxy().with_w(self[e423]))
                - (self.group2().zxy() * geometric_product.group0().yzx()).with_w(self[e431] * geometric_product[e315]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(self[e435] * geometric_product[e315])
                    - (self[e235] * geometric_product[e321])
                    - (self[e235] * geometric_product[e12345])
                    - (self[e125] * geometric_product[e425]),
                -(self[e415] * geometric_product[e125])
                    - (self[e235] * geometric_product[e435])
                    - (self[e315] * geometric_product[e321])
                    - (self[e315] * geometric_product[e12345]),
                -(self[e425] * geometric_product[e235])
                    - (self[e315] * geometric_product[e415])
                    - (self[e125] * geometric_product[e321])
                    - (self[e125] * geometric_product[e12345]),
                (self[e415] * geometric_product[e423]) + (self[e425] * geometric_product[e431]) + (self[e435] * geometric_product[e412]),
            ]) + (geometric_product.group1().zxyx() * self.group2().yzx().with_w(self[e423]))
                + (self.group1().yzx() * geometric_product.group2().zxy()).with_w(self[e431] * geometric_product[e425])
                + (self.group1().www() * geometric_product.group2().xyz()).with_w(self[e412] * geometric_product[e435]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(self[e431] * geometric_product[e125]) - (self[e125] * geometric_product[e431]),
                -(self[e412] * geometric_product[e235]) - (self[e235] * geometric_product[e412]),
                -(self[e423] * geometric_product[e315]) - (self[e315] * geometric_product[e423]),
                (self[e425] * geometric_product[e315]) + (self[e435] * geometric_product[e125]),
            ]) + (self.group1().wwwx() * geometric_product.group1().xyz().with_w(geometric_product[e235]))
                + (geometric_product.group1().wwwz() * self.group1().xyz().with_w(self[e125]))
                + (self.group0().zxy() * geometric_product.group2().yzx()).with_w(self[e235] * geometric_product[e415])
                + (self.group2().yzx() * geometric_product.group0().zxy()).with_w(self[e315] * geometric_product[e425]),
        );
    }
}
impl GeometricQuotient<Dipole> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       34       57        0
    //    simd3        0       15        0
    //    simd4       14        6        0
    // Totals...
    // yes simd       48       78        0
    //  no simd       90      126        0
    fn geometric_quotient(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let reverse = Dipole::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35
            other.group2() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2),
        );
        let geometric_product = Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35
            Simd32x3::from(other_2[scalar]) * reverse.group2(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e423] * geometric_product[e45]) + (self[e412] * geometric_product[e31]) + (self[e435] * geometric_product[e42]) + (self[e321] * geometric_product[e41]),
                (self[e423] * geometric_product[e12]) + (self[e431] * geometric_product[e45]) + (self[e415] * geometric_product[e43]) + (self[e321] * geometric_product[e42]),
                (self[e431] * geometric_product[e23]) + (self[e412] * geometric_product[e45]) + (self[e425] * geometric_product[e41]) + (self[e321] * geometric_product[e43]),
                -(self[e412] * geometric_product[e35])
                    - (self[e415] * geometric_product[e23])
                    - (self[e425] * geometric_product[e31])
                    - (self[e435] * geometric_product[e12])
                    - (self[e321] * geometric_product[e45])
                    - (self[e235] * geometric_product[e41])
                    - (self[e315] * geometric_product[e42])
                    - (self[e125] * geometric_product[e43]),
            ]) - (self.group0().yzx() * geometric_product.group1().zxy()).with_w(self[e423] * geometric_product[e15])
                - (geometric_product.group0().zxy() * self.group1().yzx()).with_w(self[e431] * geometric_product[e25]),
            // e415, e425, e435, e321
            (self.group0().zxy() * geometric_product.group2().yzx()).with_w(self[e235] * geometric_product[e41])
                + (self.group2().zxy() * geometric_product.group0().yzx()).with_w(self[e315] * geometric_product[e42])
                + (self.group1().zxy() * geometric_product.group1().yzx()).with_w(self[e125] * geometric_product[e43])
                - (self.group0().yzx() * geometric_product.group2().zxy()).with_w(self[e423] * geometric_product[e15])
                - (self.group2().yzx() * geometric_product.group0().zxy()).with_w(self[e431] * geometric_product[e25])
                - (self.group1().yzx() * geometric_product.group1().zxy()).with_w(self[e412] * geometric_product[e35]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e435] * geometric_product[e25]) + (self[e125] * geometric_product[e31]),
                (self[e415] * geometric_product[e35]) + (self[e235] * geometric_product[e12]),
                (self[e425] * geometric_product[e15]) + (self[e315] * geometric_product[e23]),
                -(self[e425] * geometric_product[e25]) - (self[e435] * geometric_product[e35]),
            ]) - (self.group1().ywwx() * geometric_product.group2().zyz().with_w(geometric_product[e15]))
                - (geometric_product.group1().zxwy() * self.group2().yzz().with_w(self[e315]))
                - (geometric_product.group1().wwyx() * self.group2().xyx().with_w(self[e235]))
                - (geometric_product.group2().xxy() * self.group1().wzx()).with_w(self[e125] * geometric_product[e12]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e412] * geometric_product[e25]) + (self[e321] * geometric_product[e23]) + (self[e315] * geometric_product[e43]),
                (self[e423] * geometric_product[e35]) + (self[e321] * geometric_product[e31]) + (self[e125] * geometric_product[e41]),
                (self[e431] * geometric_product[e15]) + (self[e321] * geometric_product[e12]) + (self[e235] * geometric_product[e42]),
                -(self[e415] * geometric_product[e41]) - (self[e425] * geometric_product[e42]) - (self[e435] * geometric_product[e43]),
            ]) - (geometric_product.group1().wwwz() * self.group1().xyz().with_w(self[e412]))
                - (self.group0().yzx() * geometric_product.group2().zxy()).with_w(self[e423] * geometric_product[e23])
                - (self.group2().zxy() * geometric_product.group0().yzx()).with_w(self[e431] * geometric_product[e31]),
        );
    }
}
impl GeometricQuotient<DipoleInversion> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44       67        0
    //    simd3        0        8        0
    //    simd4       25       24        0
    // Totals...
    // yes simd       69       99        0
    //  no simd      144      187        0
    fn geometric_quotient(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let reverse = DipoleInversion::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + 2.0 * (other[e1234] * other[e3215])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2),
        );
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e423] * geometric_product[e45])
                    + (self[e412] * geometric_product[e31])
                    + (self[e412] * geometric_product[e4315])
                    + (self[e415] * geometric_product[e1234])
                    + (self[e435] * geometric_product[e42])
                    + (self[e321] * geometric_product[e41]),
                (self[e423] * geometric_product[e12])
                    + (self[e423] * geometric_product[e4125])
                    + (self[e431] * geometric_product[e45])
                    + (self[e415] * geometric_product[e43])
                    + (self[e425] * geometric_product[e1234])
                    + (self[e321] * geometric_product[e42]),
                (self[e431] * geometric_product[e23])
                    + (self[e431] * geometric_product[e4235])
                    + (self[e412] * geometric_product[e45])
                    + (self[e425] * geometric_product[e41])
                    + (self[e435] * geometric_product[e1234])
                    + (self[e321] * geometric_product[e43]),
                -(self[e415] * geometric_product[e23])
                    - (self[e425] * geometric_product[e31])
                    - (self[e435] * geometric_product[e12])
                    - (self[e321] * geometric_product[e45])
                    - (self[e235] * geometric_product[e41])
                    - (self[e315] * geometric_product[e42])
                    - (self[e125] * geometric_product[e43]),
            ]) - (self.group0().yzx() * geometric_product.group1().zxy()).with_w(self[e423] * geometric_product[e15])
                - (self.group0().yzx() * geometric_product.group3().zxy()).with_w(self[e431] * geometric_product[e25])
                - (geometric_product.group0().zxy() * self.group1().yzx()).with_w(self[e412] * geometric_product[e35]),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e321] * geometric_product[e4235] * -1.0,
                self[e321] * geometric_product[e4315] * -1.0,
                self[e321] * geometric_product[e4125] * -1.0,
                self[e435] * geometric_product[e4125],
            ]) + (Simd32x4::from([geometric_product[e42], geometric_product[e1234], geometric_product[e1234], geometric_product[e4235]]) * self.group2().zyz().with_w(self[e415]))
                + (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], geometric_product[e42]]) * self.group0().zyz().with_w(self[e315]))
                + (Simd32x4::from([geometric_product[e1234], geometric_product[e43], geometric_product[e41], geometric_product[e43]]) * self.group2().xxy().with_w(self[e125]))
                + (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e41]]) * self.group0().xxy().with_w(self[e235]))
                + (self.group1().zxyy() * geometric_product.group1().yzx().with_w(geometric_product[e4315]))
                - (geometric_product.group2().zxyx() * self.group0().yzx().with_w(self[e423]))
                - (self.group2().yzx() * geometric_product.group0().zxy()).with_w(self[e431] * geometric_product[e25])
                - (self.group1().yzx() * geometric_product.group1().zxy()).with_w(self[e412] * geometric_product[e35]),
            // e235, e315, e125, e5
            Simd32x4::from([
                self[e435] * geometric_product[e25],
                self[e425] * geometric_product[e3215],
                self[e435] * geometric_product[e3215],
                -(self[e435] * geometric_product[e35]) - (self[e321] * geometric_product[e3215]),
            ]) + (Simd32x4::from([geometric_product[e31], geometric_product[e4235], geometric_product[e23], geometric_product[e4315]]) * self.group2().zzy().with_w(self[e315]))
                + (Simd32x4::from([geometric_product[e4125], geometric_product[e12], geometric_product[e4315], geometric_product[e4235]]) * self.group2().yxx().with_w(self[e235]))
                + (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e4125]]) * self.group1().xxy().with_w(self[e125]))
                - (Simd32x4::from(self[e235]) * Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e31], geometric_product[e23]]))
                - (Simd32x4::from(self[e315]) * geometric_product.group1().zw().with_zw(geometric_product[e4235], geometric_product[e31]))
                - (Simd32x4::from(self[e125]) * Simd32x4::from([geometric_product[e4315], geometric_product[e23], geometric_product[e45], geometric_product[e12]]))
                - (self.group1().yzxx() * geometric_product.group2().zxyx())
                - (self.group1().wwwy() * geometric_product.group2().xyzy()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e412] * geometric_product[e25]) + (self[e425] * geometric_product[e4125]) + (self[e321] * geometric_product[e23]) + (self[e315] * geometric_product[e43]),
                (self[e431] * geometric_product[e3215]) + (self[e435] * geometric_product[e4235]) + (self[e321] * geometric_product[e31]) + (self[e125] * geometric_product[e41]),
                (self[e412] * geometric_product[e3215]) + (self[e415] * geometric_product[e4315]) + (self[e321] * geometric_product[e12]) + (self[e235] * geometric_product[e42]),
                -(self[e412] * geometric_product[e4125]) - (self[e415] * geometric_product[e41]) - (self[e425] * geometric_product[e42]) - (self[e435] * geometric_product[e43]),
            ]) + (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e1234]]) * self.group0().xxy().with_w(self[e321]))
                - (Simd32x4::from([geometric_product[e42], geometric_product[e1234], geometric_product[e1234], geometric_product[e31]]) * self.group2().zyz().with_w(self[e431]))
                - (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], geometric_product[e4315]]) * self.group1().xxy().with_w(self[e431]))
                - (Simd32x4::from([geometric_product[e1234], geometric_product[e43], geometric_product[e41], geometric_product[e4235]]) * self.group2().xxy().with_w(self[e423]))
                - (Simd32x4::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45], geometric_product[e12]]) * self.group1().zyz().with_w(self[e412]))
                - (self.group0().yzx() * geometric_product.group2().zxy()).with_w(self[e423] * geometric_product[e23]),
        );
    }
}
impl GeometricQuotient<DualNum> for Circle {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd2        0        1        0
    //    simd3        2        6        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        2       10        0
    //  no simd        6       26        0
    fn geometric_quotient(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DualNum::from_groups(/* e5, e12345 */ Simd32x2::from(f32::powi(other[e12345], -2) * -1.0) * other.group0());
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(geometric_product[e12345]) * self.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            (-(Simd32x3::from(geometric_product[e5]) * self.group0()) - (Simd32x3::from(geometric_product[e12345]) * self.group1().xyz()))
                .with_w(self[e321] * geometric_product[e12345]),
            // e15, e25, e35, e1234
            (-(Simd32x3::from(geometric_product[e5]) * self.group1().xyz()) - (Simd32x3::from(geometric_product[e12345]) * self.group2())).with_w(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(geometric_product[e5]) * self.group0().with_w(self[e321]),
        );
    }
}
impl GeometricQuotient<FlatPoint> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       17        0
    //    simd3        0        4        0
    //    simd4        6        5        0
    // Totals...
    // yes simd       10       26        0
    //  no simd       28       49        0
    fn geometric_quotient(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = FlatPoint::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(f32::powi(other[e45], -2) * -1.0) * Simd32x4::from([other[e15] * -1.0, other[e25] * -1.0, other[e35] * -1.0, other[e45] * -1.0]),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x3::from(geometric_product[e45]) * self.group0()).with_w(
                -(self[e423] * geometric_product[e15]) - (self[e431] * geometric_product[e25]) - (self[e412] * geometric_product[e35]) - (self[e321] * geometric_product[e45]),
            ),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e412] * geometric_product[e25],
                self[e423] * geometric_product[e35],
                self[e431] * geometric_product[e15],
                -(self[e431] * geometric_product[e25]) - (self[e412] * geometric_product[e35]),
            ]) - (geometric_product.group0().zxyx() * self.group0().yzx().with_w(self[e423])),
            // e235, e315, e125, e5
            Simd32x4::from([self[e435] * geometric_product[e25], self[e415] * geometric_product[e35], self[e425] * geometric_product[e15], 0.0])
                - (self.group1().yzxy() * geometric_product.group0().zxyy())
                - (self.group1().wwwz() * geometric_product.group0().xyzz())
                - (geometric_product.group0().wwwx() * self.group2().with_w(self[e415])),
            // e1, e2, e3, e4
            (self.group0().zxy() * geometric_product.group0().yzx()).with_w(0.0)
                - (Simd32x3::from(geometric_product[e45]) * self.group1().xyz()).with_w(0.0)
                - (self.group0().yzx() * geometric_product.group0().zxy()).with_w(0.0),
        );
    }
}
impl GeometricQuotient<Flector> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       23        0
    //    simd3        0        3        0
    //    simd4       14       15        0
    // Totals...
    // yes simd       29       41        0
    //  no simd       71       92        0
    fn geometric_quotient(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let reverse = Flector::from_groups(
            // e15, e25, e35, e45
            other.group0() * Simd32x4::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group1(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            -f32::powi(other[e45], 2) - f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2),
        );
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e423] * geometric_product[e45]) + (self[e412] * geometric_product[e4315]),
                (self[e423] * geometric_product[e4125]) + (self[e431] * geometric_product[e45]),
                (self[e431] * geometric_product[e4235]) + (self[e412] * geometric_product[e45]),
                -(self[e431] * geometric_product[e25]) - (self[e412] * geometric_product[e35]) - (self[e321] * geometric_product[e45]),
            ]) - (self.group0().yzx() * geometric_product.group1().zxy()).with_w(self[e423] * geometric_product[e15]),
            // e415, e425, e435, e321
            (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], geometric_product[e4315]]) * self.group0().zyz().with_w(self[e425]))
                + (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e4235]]) * self.group0().xxy().with_w(self[e415]))
                + Simd32x3::from(0.0).with_w((self[e435] * geometric_product[e4125]) - (self[e412] * geometric_product[e35]))
                - (geometric_product.group0().zxyx() * self.group0().yzx().with_w(self[e423]))
                - (self.group1().www() * geometric_product.group1().xyz()).with_w(self[e431] * geometric_product[e25]),
            // e235, e315, e125, e5
            (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], geometric_product[e4125]]) * self.group1().zyz().with_w(self[e125]))
                + (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e4315]]) * self.group1().xxy().with_w(self[e315]))
                + (geometric_product.group1().zxyx() * self.group2().yzx().with_w(self[e235]))
                - (Simd32x4::from(self[e321]) * geometric_product.group0().xyz().with_w(geometric_product[e3215]))
                - (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], geometric_product[e15]]) * self.group2().xxy().with_w(self[e415]))
                - (Simd32x4::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45], geometric_product[e25]]) * self.group2().zyz().with_w(self[e425]))
                - (self.group1().yzxz() * geometric_product.group0().zxyz()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e423] * geometric_product[e3215]) + (self[e412] * geometric_product[e25]) + (self[e425] * geometric_product[e4125]),
                (self[e423] * geometric_product[e35]) + (self[e431] * geometric_product[e3215]) + (self[e435] * geometric_product[e4235]),
                (self[e431] * geometric_product[e15]) + (self[e412] * geometric_product[e3215]) + (self[e415] * geometric_product[e4315]),
                0.0,
            ]) - (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], geometric_product[e4315]]) * self.group1().xxy().with_w(self[e431]))
                - (Simd32x4::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45], geometric_product[e4125]]) * self.group1().zyz().with_w(self[e412]))
                - (self.group0().yzx() * geometric_product.group0().zxy()).with_w(self[e423] * geometric_product[e4235]),
        );
    }
}
impl GeometricQuotient<Line> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       43        0
    //    simd3        0       12        0
    //    simd4        8        0        0
    // Totals...
    // yes simd       23       55        0
    //  no simd       47       79        0
    fn geometric_quotient(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let reverse = Line::from_groups(
            // e415, e425, e435
            other.group0() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group1() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(/* scalar */ -f32::powi(other[e415], 2) - f32::powi(other[e425], 2) - f32::powi(other[e435], 2));
        let geometric_product = Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group1(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e412] * geometric_product[e425] * -1.0,
                self[e423] * geometric_product[e435] * -1.0,
                self[e431] * geometric_product[e415] * -1.0,
                (self[e431] * geometric_product[e315])
                    + (self[e412] * geometric_product[e125])
                    + (self[e415] * geometric_product[e415])
                    + (self[e425] * geometric_product[e425])
                    + (self[e435] * geometric_product[e435]),
            ]) + (self.group0().yzx() * geometric_product.group0().zxy()).with_w(self[e423] * geometric_product[e235]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e431] * geometric_product[e125]) + (self[e425] * geometric_product[e435]),
                (self[e412] * geometric_product[e235]) + (self[e435] * geometric_product[e415]),
                (self[e423] * geometric_product[e315]) + (self[e415] * geometric_product[e425]),
                self[e412] * geometric_product[e125] * -1.0,
            ]) - (self.group0().zxy() * geometric_product.group1().yzx()).with_w(self[e423] * geometric_product[e235])
                - (geometric_product.group0().yzx() * self.group1().zxy()).with_w(self[e431] * geometric_product[e315]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(self[e435] * geometric_product[e315]) - (self[e125] * geometric_product[e425]),
                -(self[e415] * geometric_product[e125]) - (self[e235] * geometric_product[e435]),
                -(self[e425] * geometric_product[e235]) - (self[e315] * geometric_product[e415]),
                0.0,
            ]) + (self.group2().yzx() * geometric_product.group0().zxy()).with_w(self[e423] * geometric_product[e415])
                + (geometric_product.group1().xxy() * self.group1().wzx()).with_w(self[e431] * geometric_product[e425])
                + (geometric_product.group1().zyz() * self.group1().yww()).with_w(self[e412] * geometric_product[e435]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e431] * geometric_product[e125] * -1.0,
                self[e412] * geometric_product[e235] * -1.0,
                self[e423] * geometric_product[e315] * -1.0,
                (self[e415] * geometric_product[e235]) + (self[e425] * geometric_product[e315]) + (self[e435] * geometric_product[e125]) + (self[e125] * geometric_product[e435]),
            ]) + (geometric_product.group0() * self.group1().www()).with_w(self[e315] * geometric_product[e425])
                + (self.group0().zxy() * geometric_product.group1().yzx()).with_w(self[e235] * geometric_product[e415]),
        );
    }
}
impl GeometricQuotient<Motor> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       25       46        0
    //    simd3        0        7        0
    //    simd4       11        8        0
    // Totals...
    // yes simd       36       61        0
    //  no simd       69       99        0
    fn geometric_quotient(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let reverse = Motor::from_groups(
            // e415, e425, e435, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            -f32::powi(other[e415], 2) - f32::powi(other[e425], 2) - f32::powi(other[e435], 2) - f32::powi(other[e12345], 2),
        );
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e235, e315, e125, e5
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(self[e423] * geometric_product[e12345]) - (self[e412] * geometric_product[e425]),
                -(self[e423] * geometric_product[e435]) - (self[e431] * geometric_product[e12345]),
                -(self[e431] * geometric_product[e415]) - (self[e412] * geometric_product[e12345]),
                (self[e431] * geometric_product[e315])
                    + (self[e412] * geometric_product[e125])
                    + (self[e415] * geometric_product[e415])
                    + (self[e425] * geometric_product[e425])
                    + (self[e435] * geometric_product[e435]),
            ]) + (self.group0().yzx() * geometric_product.group0().zxy()).with_w(self[e423] * geometric_product[e235]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e425] * geometric_product[e435]) - (self[e435] * geometric_product[e425]),
                (self[e435] * geometric_product[e415]) - (self[e425] * geometric_product[e12345]),
                (self[e415] * geometric_product[e425]) - (self[e435] * geometric_product[e12345]),
                0.0,
            ]) + (self.group0().yzx() * geometric_product.group1().zxy()).with_w(self[e321] * geometric_product[e12345])
                - (geometric_product.group1().ywwy() * self.group0().zyz().with_w(self[e431]))
                - (geometric_product.group1().wzxx() * self.group0().xxy().with_w(self[e423]))
                - (self.group1().xxy() * geometric_product.group0().wzx()).with_w(self[e412] * geometric_product[e125]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(self[e415] * geometric_product[e5]) - (self[e435] * geometric_product[e315]) - (self[e235] * geometric_product[e12345]) - (self[e125] * geometric_product[e425]),
                -(self[e415] * geometric_product[e125]) - (self[e425] * geometric_product[e5]) - (self[e235] * geometric_product[e435]) - (self[e315] * geometric_product[e12345]),
                -(self[e425] * geometric_product[e235]) - (self[e435] * geometric_product[e5]) - (self[e315] * geometric_product[e415]) - (self[e125] * geometric_product[e12345]),
                0.0,
            ]) + (geometric_product.group0().zxyx() * self.group2().yzx().with_w(self[e423]))
                + (self.group1().yzx() * geometric_product.group1().zxy()).with_w(self[e431] * geometric_product[e425])
                + (self.group1().www() * geometric_product.group1().xyz()).with_w(self[e412] * geometric_product[e435]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e431] * geometric_product[e125] * -1.0,
                self[e412] * geometric_product[e235] * -1.0,
                self[e423] * geometric_product[e315] * -1.0,
                (self[e415] * geometric_product[e235]) + (self[e425] * geometric_product[e315]) + (self[e435] * geometric_product[e125]) + (self[e321] * geometric_product[e5]),
            ]) + (geometric_product.group0().xyzz() * self.group1().www().with_w(self[e125]))
                + (self.group0().xxy() * geometric_product.group1().wzx()).with_w(self[e235] * geometric_product[e415])
                + (self.group0().zyz() * geometric_product.group1().yww()).with_w(self[e315] * geometric_product[e425]),
        );
    }
}
impl GeometricQuotient<MultiVector> for Circle {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       81      106        0
    //    simd2        1        2        0
    //    simd3       36       59        0
    //    simd4       30       26        0
    // Totals...
    // yes simd      148      193        0
    //  no simd      311      391        0
    fn geometric_quotient(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let reverse = MultiVector::from_groups(
            // scalar, e12345
            other.group0(),
            // e1, e2, e3, e4
            other.group1(),
            // e5
            other[e5],
            // e15, e25, e35, e45
            other.group3() * Simd32x4::from(-1.0),
            // e41, e42, e43
            other.group4() * Simd32x3::from(-1.0),
            // e23, e31, e12
            other.group5() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group6() * Simd32x4::from(-1.0),
            // e423, e431, e412
            other.group7() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group8() * Simd32x3::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group9(),
            // e1234
            other[e1234],
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e15] * other[e41])
                + 2.0 * (other[e25] * other[e42])
                + 2.0 * (other[e35] * other[e43])
                + 2.0 * (other[e3215] * other[e1234])
                + f32::powi(other[scalar], 2)
                + f32::powi(other[e1], 2)
                + f32::powi(other[e2], 2)
                + f32::powi(other[e3], 2)
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                + f32::powi(other[e321], 2)
                - f32::powi(other[e12345], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2)
                - 2.0 * (other[e4] * other[e5])
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(other_2[scalar]) * reverse.group0(),
            // e1, e2, e3, e4
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e5
            reverse[e5] * other_2[scalar],
            // e15, e25, e35, e45
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group4(),
            // e23, e31, e12
            Simd32x3::from(other_2[scalar]) * reverse.group5(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group6(),
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group7(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group8(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group9(),
            // e1234
            reverse[e1234] * other_2[scalar],
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e423] * geometric_product[e235])
                    + (self[e431] * geometric_product[e315])
                    + (self[e412] * geometric_product[e125])
                    + (self[e415] * geometric_product[e415])
                    + (self[e425] * geometric_product[e425])
                    + (self[e435] * geometric_product[e435])
                    + (self[e235] * geometric_product[e423])
                    + (self[e315] * geometric_product[e431])
                    + (self[e125] * geometric_product[e412]),
                -(self[e423] * geometric_product[e15])
                    - (self[e431] * geometric_product[e25])
                    - (self[e412] * geometric_product[e35])
                    - (self[e425] * geometric_product[e31])
                    - (self[e435] * geometric_product[e12])
                    - (self[e321] * geometric_product[e45])
                    - (self[e235] * geometric_product[e41])
                    - (self[e315] * geometric_product[e42])
                    - (self[e125] * geometric_product[e43]),
            ]) - (Simd32x2::from([geometric_product[e321], geometric_product[e23]]) * self.group1().wx()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e412] * geometric_product[e25]) + (self[e425] * geometric_product[e4125]) + (self[e321] * geometric_product[e23]) + (self[e315] * geometric_product[e43]),
                (self[e431] * geometric_product[e3215]) + (self[e435] * geometric_product[e4235]) + (self[e321] * geometric_product[e31]) + (self[e125] * geometric_product[e41]),
                (self[e412] * geometric_product[e3215]) + (self[e415] * geometric_product[e4315]) + (self[e321] * geometric_product[e12]) + (self[e235] * geometric_product[e42]),
                -(self[e412] * geometric_product[e4125]) - (self[e415] * geometric_product[e41]) - (self[e425] * geometric_product[e42]) - (self[e435] * geometric_product[e43]),
            ]) + (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e1234]]) * self.group0().xxy().with_w(self[e321]))
                - (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], geometric_product[e4315]]) * self.group1().xxy().with_w(self[e431]))
                - (Simd32x4::from([geometric_product[e42], geometric_product[e1234], geometric_product[e1234], geometric_product[e31]]) * self.group2().zyz().with_w(self[e431]))
                - (Simd32x4::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45], geometric_product[e12]]) * self.group1().zyz().with_w(self[e412]))
                - (Simd32x4::from([geometric_product[e1234], geometric_product[e43], geometric_product[e41], geometric_product[e4235]]) * self.group2().xxy().with_w(self[e423]))
                - (self.group0().yzx() * geometric_product.group3().zxy()).with_w(self[e423] * geometric_product[e23]),
            // e5
            (self[e235] * geometric_product[e4235]) + (self[e315] * geometric_product[e4315]) + (self[e125] * geometric_product[e4125])
                - (self[e415] * geometric_product[e15])
                - (self[e425] * geometric_product[e25])
                - (self[e435] * geometric_product[e35])
                - (self[e321] * geometric_product[e3215])
                - (self[e235] * geometric_product[e23])
                - (self[e315] * geometric_product[e31])
                - (self[e125] * geometric_product[e12]),
            // e15, e25, e35, e45
            (self.group2().yzx() * geometric_product.group1().zxy()).with_w(self[e321] * geometric_product[e12345])
                + (self.group2().yzx() * geometric_product.group6().zxy()).with_w(self[e235] * geometric_product[e423])
                + (geometric_product.group8().xxy() * self.group1().wzx()).with_w(self[e315] * geometric_product[e431])
                + (geometric_product.group8().zyz() * self.group1().yww()).with_w(self[e125] * geometric_product[e412])
                - (Simd32x4::from([geometric_product[e2], geometric_product[e435], geometric_product[e415], geometric_product[e125]]) * self.group2().zxy().with_w(self[e412]))
                - (Simd32x4::from([geometric_product[e321], geometric_product[e3], geometric_product[e1], geometric_product[e315]]) * self.group2().xxy().with_w(self[e431]))
                - (self.group1().xyzz() * Simd32x3::from(geometric_product[e5]).with_w(geometric_product[e3]))
                - (geometric_product.group0().yy().with_zw(geometric_product[e12345], self[e423]) * self.group2().with_w(geometric_product[e235]))
                - (self.group2().zyz() * geometric_product.group6().yww()).with_w(self[e415] * geometric_product[e1])
                - (geometric_product.group8().yzx() * self.group1().zxy()).with_w(self[e425] * geometric_product[e2]),
            // e41, e42, e43
            (Simd32x3::from(self[e423]) * Simd32x3::from([geometric_product[e321], geometric_product[e3], geometric_product[e425]]))
                + (Simd32x3::from(self[e431]) * Simd32x3::from([geometric_product[e435], geometric_product[e321], geometric_product[e1]]))
                + (Simd32x3::from(self[e412]) * Simd32x3::from([geometric_product[e2], geometric_product[e415], geometric_product[e321]]))
                + (geometric_product.group7().zxy() * self.group1().yzx())
                - (Simd32x3::from(geometric_product[e12345]) * self.group0())
                - (Simd32x3::from(geometric_product[e4]) * self.group1().xyz())
                - (Simd32x3::from([geometric_product[e3], geometric_product[e435], geometric_product[e2]]) * self.group0().yxx())
                - (Simd32x3::from([geometric_product[e425], geometric_product[e1], geometric_product[e415]]) * self.group0().zzy())
                - (geometric_product.group7().xyx() * self.group1().wwy())
                - (geometric_product.group7().yzz() * self.group1().zxw()),
            // e23, e31, e12
            (self.group0().yzx() * geometric_product.group8().zxy())
                + (self.group2().yzx() * geometric_product.group7().zxy())
                + (self.group1().yzx() * geometric_product.group6().zxy())
                - (Simd32x3::from(self[e321]) * geometric_product.group1().xyz())
                - (Simd32x3::from(geometric_product[e12345]) * self.group1().xyz())
                - (Simd32x3::from([geometric_product[e4], geometric_product[e412], geometric_product[e423]]) * self.group2().xxy())
                - (Simd32x3::from([geometric_product[e5], geometric_product[e125], geometric_product[e235]]) * self.group0().xxy())
                - (Simd32x3::from([geometric_product[e431], geometric_product[e4], geometric_product[e4]]) * self.group2().zyz())
                - (Simd32x3::from([geometric_product[e315], geometric_product[e5], geometric_product[e5]]) * self.group0().zyz())
                - (self.group1().zxy() * geometric_product.group6().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e321] * geometric_product[e4235] * -1.0,
                self[e321] * geometric_product[e4315] * -1.0,
                self[e321] * geometric_product[e4125] * -1.0,
                self[e435] * geometric_product[e4125],
            ]) + (Simd32x4::from(geometric_product[scalar]) * self.group1())
                + (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], geometric_product[e42]]) * self.group0().zyz().with_w(self[e315]))
                + (Simd32x4::from([geometric_product[e42], geometric_product[e1234], geometric_product[e1234], geometric_product[e4235]]) * self.group2().zyz().with_w(self[e415]))
                + (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e41]]) * self.group0().xxy().with_w(self[e235]))
                + (Simd32x4::from([geometric_product[e1234], geometric_product[e43], geometric_product[e41], geometric_product[e43]]) * self.group2().xxy().with_w(self[e125]))
                + (geometric_product.group5().yzx() * self.group1().zxy()).with_w(self[e425] * geometric_product[e4315])
                - (geometric_product.group3().zxyx() * self.group0().yzx().with_w(self[e423]))
                - (self.group2().yzx() * geometric_product.group4().zxy()).with_w(self[e431] * geometric_product[e25])
                - (geometric_product.group5().zxy() * self.group1().yzx()).with_w(self[e412] * geometric_product[e35]),
            // e423, e431, e412
            (Simd32x3::from(geometric_product[scalar]) * self.group0())
                + (Simd32x3::from(geometric_product[e1234]) * self.group1().xyz())
                + (Simd32x3::from([geometric_product[e45], geometric_product[e12], geometric_product[e23]]) * self.group0().xxy())
                + (Simd32x3::from([geometric_product[e31], geometric_product[e4125], geometric_product[e4235]]) * self.group0().zxy())
                + (Simd32x3::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45]]) * self.group0().zyz())
                + (geometric_product.group4().xyx() * self.group1().wwy())
                + (geometric_product.group4().yzz() * self.group1().zxw())
                - (self.group0().yzx() * geometric_product.group5().zxy())
                - (self.group0().yzx() * geometric_product.group9().zxy())
                - (geometric_product.group4().zxy() * self.group1().yzx()),
            // e235, e315, e125
            (Simd32x3::from(geometric_product[scalar]) * self.group2())
                + (Simd32x3::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215]]) * self.group1().zyz())
                + (Simd32x3::from([geometric_product[e31], geometric_product[e4235], geometric_product[e23]]) * self.group2().zzy())
                + (Simd32x3::from([geometric_product[e4125], geometric_product[e12], geometric_product[e4315]]) * self.group2().yxx())
                + (Simd32x3::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15]]) * self.group1().xxy())
                - (Simd32x3::from(self[e321]) * geometric_product.group3().xyz())
                - (Simd32x3::from(self[e235]) * Simd32x3::from([geometric_product[e45], geometric_product[e4125], geometric_product[e31]]))
                - (Simd32x3::from(self[e315]) * Simd32x3::from([geometric_product[e12], geometric_product[e45], geometric_product[e4235]]))
                - (Simd32x3::from(self[e125]) * Simd32x3::from([geometric_product[e4315], geometric_product[e23], geometric_product[e45]]))
                - (self.group1().yzx() * geometric_product.group3().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(self[e431] * geometric_product[e125]) - (self[e425] * geometric_product[e3]) - (self[e235] * geometric_product[e4]) - (self[e125] * geometric_product[e431]),
                -(self[e412] * geometric_product[e235]) - (self[e435] * geometric_product[e1]) - (self[e235] * geometric_product[e412]) - (self[e315] * geometric_product[e4]),
                -(self[e423] * geometric_product[e315]) - (self[e415] * geometric_product[e2]) - (self[e315] * geometric_product[e423]) - (self[e125] * geometric_product[e4]),
                (self[e415] * geometric_product[e235]) + (self[e425] * geometric_product[e315]) + (self[e435] * geometric_product[e125]) + (self[e321] * geometric_product[e5]),
            ]) + (Simd32x4::from([geometric_product[e2], geometric_product[e321], geometric_product[e321], geometric_product[e3]]) * self.group1().zyz().with_w(self[e125]))
                + (Simd32x4::from([geometric_product[e5], geometric_product[e125], geometric_product[e235], geometric_product[e1]]) * self.group0().xxy().with_w(self[e235]))
                + (Simd32x4::from([geometric_product[e321], geometric_product[e3], geometric_product[e1], geometric_product[e425]]) * self.group1().xxy().with_w(self[e315]))
                + (Simd32x4::from([geometric_product[e315], geometric_product[e5], geometric_product[e5], geometric_product[e415]]) * self.group0().zyz().with_w(self[e235]))
                + (geometric_product.group6().xyzz() * self.group1().www().with_w(self[e125]))
                + (self.group2().yzx() * geometric_product.group7().zxy()).with_w(self[e315] * geometric_product[e2]),
            // e1234
            (self[e423] * geometric_product[e415])
                + (self[e431] * geometric_product[e425])
                + (self[e412] * geometric_product[e435])
                + (self[e415] * geometric_product[e423])
                + (self[e425] * geometric_product[e431])
                + (self[e435] * geometric_product[e412])
                - (self[e423] * geometric_product[e1])
                - (self[e431] * geometric_product[e2])
                - (self[e412] * geometric_product[e3])
                - (self[e321] * geometric_product[e4]),
        );
    }
}
impl GeometricQuotient<Plane> for Circle {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       17        0
    //    simd3        1        2        0
    //    simd4        5        6        0
    // Totals...
    // yes simd       13       25        0
    //  no simd       30       47        0
    fn geometric_quotient(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Plane::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(-f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2)) * other.group0(),
        );
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (self.group0().zxy() * geometric_product.group0().yzx()) - (self.group0().yzx() * geometric_product.group0().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e321] * geometric_product[e4235] * -1.0,
                self[e321] * geometric_product[e4315] * -1.0,
                self[e321] * geometric_product[e4125] * -1.0,
                (self[e425] * geometric_product[e4315]) + (self[e435] * geometric_product[e4125]),
            ]) + (geometric_product.group0().wwwx() * self.group0().with_w(self[e415])),
            // e235, e315, e125, e4
            Simd32x4::from([
                (self[e415] * geometric_product[e3215]) + (self[e315] * geometric_product[e4125]),
                (self[e425] * geometric_product[e3215]) + (self[e125] * geometric_product[e4235]),
                (self[e435] * geometric_product[e3215]) + (self[e235] * geometric_product[e4315]),
                -(self[e431] * geometric_product[e4315]) - (self[e412] * geometric_product[e4125]),
            ]) - (geometric_product.group0().yzxx() * self.group2().zxy().with_w(self[e423])),
            // e1, e2, e3, e5
            (geometric_product.group0().zxyy() * self.group1().yzx().with_w(self[e315]))
                + (geometric_product.group0().wwwx() * self.group0().with_w(self[e235]))
                + Simd32x3::from(0.0).with_w(self[e125] * geometric_product[e4125])
                - (self.group1().zxyw() * geometric_product.group0().yzxw()),
        );
    }
}
impl GeometricQuotient<RoundPoint> for Circle {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       19        0
    //    simd3        2        6        0
    //    simd4        6        5        0
    // Totals...
    // yes simd       16       30        0
    //  no simd       38       57        0
    fn geometric_quotient(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2) - 2.0 * (other[e4] * other[e5]),
        );
        let geometric_product = RoundPoint::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from(other_2[scalar]) * other.group0(), /* e5 */ other[e5] * other_2[scalar]);
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (self.group0().zxy() * geometric_product.group0().yzx())
                - (Simd32x3::from(geometric_product[e4]) * self.group1().xyz())
                - (self.group0().yzx() * geometric_product.group0().zxy()),
            // e23, e31, e12, e45
            -(self.group1().wwwz() * geometric_product.group0().xyzz())
                - (geometric_product.group0().wwwy() * self.group2().with_w(self[e425]))
                - (Simd32x3::from(geometric_product[e5]) * self.group0()).with_w(self[e415] * geometric_product[e1]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                self[e315] * geometric_product[e3],
                self[e125] * geometric_product[e1],
                self[e235] * geometric_product[e2],
                -(self[e412] * geometric_product[e3]) - (self[e321] * geometric_product[e4]),
            ]) - (geometric_product.group0().yzxx() * self.group2().zxy().with_w(self[e423]))
                - (Simd32x3::from(geometric_product[e5]) * self.group1().xyz()).with_w(self[e431] * geometric_product[e2]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(self[e425] * geometric_product[e3]) - (self[e235] * geometric_product[e4]),
                -(self[e435] * geometric_product[e1]) - (self[e315] * geometric_product[e4]),
                -(self[e415] * geometric_product[e2]) - (self[e125] * geometric_product[e4]),
                (self[e321] * geometric_product[e5]) + (self[e125] * geometric_product[e3]),
            ]) + (geometric_product.group0().yzxy() * self.group1().zxy().with_w(self[e315]))
                + (Simd32x3::from(geometric_product[e5]) * self.group0()).with_w(self[e235] * geometric_product[e1]),
        );
    }
}
impl GeometricQuotient<Scalar> for Circle {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        0        1
    //    simd3        0        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        3        1
    //  no simd        0       10        1
    fn geometric_quotient(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Scalar::from_groups(/* scalar */ 1.0 / other[scalar]);
        return Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from(geometric_product[scalar]) * self.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(geometric_product[scalar]) * self.group1(),
            // e235, e315, e125
            Simd32x3::from(geometric_product[scalar]) * self.group2(),
        );
    }
}
impl GeometricQuotient<Sphere> for Circle {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       25        0
    //    simd3        2        6        0
    //    simd4        7        5        0
    // Totals...
    // yes simd       13       36        0
    //  no simd       38       63        0
    fn geometric_quotient(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e3215] * other[e1234]) - f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2),
        );
        let geometric_product = Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * other.group0(),
            // e1234
            other_2[scalar] * other[e1234],
        );
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(geometric_product[e1234]) * self.group1().xyz()) + (self.group0().zxy() * geometric_product.group0().yzx())
                - (self.group0().yzx() * geometric_product.group0().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e321] * geometric_product[e4235] * -1.0,
                self[e321] * geometric_product[e4315] * -1.0,
                self[e321] * geometric_product[e4125] * -1.0,
                self[e435] * geometric_product[e4125],
            ]) + (geometric_product.group0().wwwx() * self.group0().with_w(self[e415]))
                + (Simd32x3::from(geometric_product[e1234]) * self.group2()).with_w(self[e425] * geometric_product[e4315]),
            // e235, e315, e125, e4
            Simd32x4::from([
                self[e415] * geometric_product[e3215],
                self[e425] * geometric_product[e3215],
                self[e435] * geometric_product[e3215],
                -(self[e431] * geometric_product[e4315]) - (self[e412] * geometric_product[e4125]),
            ]) + (self.group2().yzx() * geometric_product.group0().zxy()).with_w(self[e321] * geometric_product[e1234])
                - (geometric_product.group0().yzxx() * self.group2().zxy().with_w(self[e423])),
            // e1, e2, e3, e5
            Simd32x4::from([
                self[e435] * geometric_product[e4315] * -1.0,
                self[e415] * geometric_product[e4125] * -1.0,
                self[e425] * geometric_product[e4235] * -1.0,
                self[e125] * geometric_product[e4125],
            ]) + (geometric_product.group0().zxyy() * self.group1().yzx().with_w(self[e315]))
                + (geometric_product.group0().wwwx() * self.group0().with_w(self[e235]))
                - (Simd32x3::from(geometric_product[e1234]) * self.group2()).with_w(self[e321] * geometric_product[e3215]),
        );
    }
}
impl GeometricQuotient<VersorEven> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       43       67        0
    //    simd3        0        8        0
    //    simd4       28       27        0
    // Totals...
    // yes simd       71      102        0
    //  no simd      155      199        0
    fn geometric_quotient(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let reverse = VersorEven::from_groups(
            // e423, e431, e412, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e5
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e4
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)
                - f32::powi(other[e12345], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125])
                - 2.0 * (other[e5] * other[e4]),
        );
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e5
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e1, e2, e3, e4
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(self[e431] * geometric_product[e3])
                    - (self[e412] * geometric_product[e425])
                    - (self[e415] * geometric_product[e4])
                    - (self[e435] * geometric_product[e431])
                    - (self[e321] * geometric_product[e423]),
                -(self[e431] * geometric_product[e12345])
                    - (self[e412] * geometric_product[e1])
                    - (self[e415] * geometric_product[e412])
                    - (self[e425] * geometric_product[e4])
                    - (self[e321] * geometric_product[e431]),
                -(self[e431] * geometric_product[e415])
                    - (self[e412] * geometric_product[e12345])
                    - (self[e425] * geometric_product[e423])
                    - (self[e435] * geometric_product[e4])
                    - (self[e321] * geometric_product[e412]),
                (self[e415] * geometric_product[e415])
                    + (self[e425] * geometric_product[e425])
                    + (self[e435] * geometric_product[e435])
                    + (self[e315] * geometric_product[e431])
                    + (self[e125] * geometric_product[e412]),
            ]) + (Simd32x4::from(self[e423]) * Simd32x4::from([geometric_product[e321], geometric_product[e3], geometric_product[e425], geometric_product[e235]]))
                + (Simd32x4::from(self[e431]) * geometric_product.group1().zw().with_zw(geometric_product[e1], geometric_product[e315]))
                + (Simd32x4::from(self[e412]) * Simd32x4::from([geometric_product[e2], geometric_product[e415], geometric_product[e321], geometric_product[e125]]))
                + (geometric_product.group0().zxyx() * self.group1().yzx().with_w(self[e235]))
                - (Simd32x4::from([geometric_product[e12345], geometric_product[e435], geometric_product[e2], geometric_product[e321]]) * self.group0().xxx().with_w(self[e321])),
            // e23, e31, e12, e45
            Simd32x4::from([
                self[e321] * geometric_product[e1] * -1.0,
                self[e321] * geometric_product[e2] * -1.0,
                self[e321] * geometric_product[e3] * -1.0,
                self[e321] * geometric_product[e12345],
            ]) + (geometric_product.group0().zxyy() * self.group2().yzx().with_w(self[e315]))
                + (self.group0().yzx() * geometric_product.group2().zxy()).with_w(self[e235] * geometric_product[e423])
                + (self.group1().yzx() * geometric_product.group1().zxy()).with_w(self[e125] * geometric_product[e412])
                - (Simd32x4::from([geometric_product[e431], geometric_product[e4], geometric_product[e4], geometric_product[e1]]) * self.group2().zyz().with_w(self[e415]))
                - (Simd32x4::from([geometric_product[e12345], geometric_product[e435], geometric_product[e415], geometric_product[e2]]) * self.group1().xxyy())
                - (Simd32x4::from([geometric_product[e425], geometric_product[e12345], geometric_product[e12345], geometric_product[e3]]) * self.group1().zyzz())
                - (Simd32x4::from([geometric_product[e4], geometric_product[e412], geometric_product[e423], geometric_product[e125]]) * self.group2().xxy().with_w(self[e412]))
                - (geometric_product.group2().ywwy() * self.group0().zyz().with_w(self[e431]))
                - (geometric_product.group2().wzxx() * self.group0().xxy().with_w(self[e423])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(self[e415] * geometric_product[e5]) - (self[e435] * geometric_product[e315]),
                -(self[e415] * geometric_product[e125]) - (self[e425] * geometric_product[e5]),
                -(self[e425] * geometric_product[e235]) - (self[e435] * geometric_product[e5]),
                (self[e425] * geometric_product[e431]) + (self[e435] * geometric_product[e412]),
            ]) + (self.group1().wwwx() * geometric_product.group2().xyz().with_w(geometric_product[e423]))
                + (geometric_product.group1().zxyx() * self.group2().yzx().with_w(self[e423]))
                + (self.group2().yzx() * geometric_product.group3().zxy()).with_w(self[e431] * geometric_product[e425])
                + (self.group1().yzx() * geometric_product.group2().zxy()).with_w(self[e412] * geometric_product[e435])
                - (Simd32x4::from([geometric_product[e12345], geometric_product[e435], geometric_product[e415], geometric_product[e1]]) * self.group2().xxy().with_w(self[e423]))
                - (Simd32x4::from([geometric_product[e425], geometric_product[e12345], geometric_product[e12345], geometric_product[e3]]) * self.group2().zyz().with_w(self[e412]))
                - (Simd32x4::from([geometric_product[e321], geometric_product[e3], geometric_product[e1], geometric_product[e2]]) * self.group2().xxy().with_w(self[e431]))
                - (Simd32x4::from([geometric_product[e2], geometric_product[e321], geometric_product[e321], geometric_product[e4]]) * self.group2().zyz().with_w(self[e321])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(self[e431] * geometric_product[e125]) - (self[e425] * geometric_product[e3]) - (self[e235] * geometric_product[e4]) - (self[e125] * geometric_product[e431]),
                -(self[e412] * geometric_product[e235]) - (self[e435] * geometric_product[e1]) - (self[e235] * geometric_product[e412]) - (self[e315] * geometric_product[e4]),
                -(self[e423] * geometric_product[e315]) - (self[e415] * geometric_product[e2]) - (self[e315] * geometric_product[e423]) - (self[e125] * geometric_product[e4]),
                (self[e415] * geometric_product[e235]) + (self[e425] * geometric_product[e315]) + (self[e435] * geometric_product[e125]) + (self[e321] * geometric_product[e5]),
            ]) + (Simd32x4::from([geometric_product[e321], geometric_product[e3], geometric_product[e1], geometric_product[e2]]) * self.group1().xxy().with_w(self[e315]))
                + (Simd32x4::from([geometric_product[e2], geometric_product[e321], geometric_product[e321], geometric_product[e435]]) * self.group1().zyz().with_w(self[e125]))
                + (self.group0().xxy() * geometric_product.group2().wzx()).with_w(self[e235] * geometric_product[e415])
                + (self.group0().zyz() * geometric_product.group2().yww()).with_w(self[e235] * geometric_product[e1])
                + (self.group2().yzx() * geometric_product.group0().zxy()).with_w(self[e315] * geometric_product[e425])
                + (self.group1().www() * geometric_product.group1().xyz()).with_w(self[e125] * geometric_product[e3]),
        );
    }
}
impl GeometricQuotient<VersorOdd> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       51       73        0
    //    simd3        0        6        0
    //    simd4       26       27        0
    // Totals...
    // yes simd       77      106        0
    //  no simd      155      199        0
    fn geometric_quotient(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let reverse = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + 2.0 * (other[e1234] * other[e3215])
                + f32::powi(other[scalar], 2)
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2),
        );
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e423] * geometric_product[scalar])
                    + (self[e423] * geometric_product[e45])
                    + (self[e412] * geometric_product[e31])
                    + (self[e412] * geometric_product[e4315])
                    + (self[e415] * geometric_product[e1234])
                    + (self[e435] * geometric_product[e42])
                    + (self[e321] * geometric_product[e41]),
                (self[e423] * geometric_product[e12])
                    + (self[e423] * geometric_product[e4125])
                    + (self[e431] * geometric_product[scalar])
                    + (self[e431] * geometric_product[e45])
                    + (self[e415] * geometric_product[e43])
                    + (self[e425] * geometric_product[e1234])
                    + (self[e321] * geometric_product[e42]),
                (self[e431] * geometric_product[e23])
                    + (self[e431] * geometric_product[e4235])
                    + (self[e412] * geometric_product[scalar])
                    + (self[e412] * geometric_product[e45])
                    + (self[e425] * geometric_product[e41])
                    + (self[e435] * geometric_product[e1234])
                    + (self[e321] * geometric_product[e43]),
                -(self[e415] * geometric_product[e23])
                    - (self[e425] * geometric_product[e31])
                    - (self[e435] * geometric_product[e12])
                    - (self[e321] * geometric_product[e45])
                    - (self[e235] * geometric_product[e41])
                    - (self[e315] * geometric_product[e42])
                    - (self[e125] * geometric_product[e43]),
            ]) - (self.group0().yzx() * geometric_product.group1().zxy()).with_w(self[e423] * geometric_product[e15])
                - (self.group0().yzx() * geometric_product.group3().zxy()).with_w(self[e431] * geometric_product[e25])
                - (self.group1().yzx() * geometric_product.group0().zxy()).with_w(self[e412] * geometric_product[e35]),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e321] * geometric_product[e4235] * -1.0,
                self[e321] * geometric_product[e4315] * -1.0,
                self[e321] * geometric_product[e4125] * -1.0,
                self[e321] * geometric_product[scalar],
            ]) + (Simd32x4::from([geometric_product[e42], geometric_product[e1234], geometric_product[e1234], geometric_product[e4235]]) * self.group2().zyz().with_w(self[e415]))
                + (Simd32x4::from([geometric_product[scalar], geometric_product[e12], geometric_product[e23], geometric_product[e4315]]) * self.group1().xxyy())
                + (Simd32x4::from([geometric_product[e31], geometric_product[scalar], geometric_product[scalar], geometric_product[e4125]]) * self.group1().zyzz())
                + (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], geometric_product[e42]]) * self.group0().zyz().with_w(self[e315]))
                + (Simd32x4::from([geometric_product[e1234], geometric_product[e43], geometric_product[e41], geometric_product[e43]]) * self.group2().xxy().with_w(self[e125]))
                + (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e41]]) * self.group0().xxy().with_w(self[e235]))
                - (geometric_product.group2().zxyx() * self.group0().yzx().with_w(self[e423]))
                - (self.group2().yzx() * geometric_product.group0().zxy()).with_w(self[e431] * geometric_product[e25])
                - (self.group1().yzx() * geometric_product.group1().zxy()).with_w(self[e412] * geometric_product[e35]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e415] * geometric_product[e3215]) + (self[e435] * geometric_product[e25]),
                (self[e415] * geometric_product[e35]) + (self[e425] * geometric_product[e3215]),
                (self[e425] * geometric_product[e15]) + (self[e435] * geometric_product[e3215]),
                -(self[e435] * geometric_product[e35]) - (self[e321] * geometric_product[e3215]),
            ]) + (Simd32x4::from(self[e235]) * Simd32x4::from([geometric_product[scalar], geometric_product[e12], geometric_product[e4315], geometric_product[e4235]]))
                + (Simd32x4::from(self[e315]) * Simd32x4::from([geometric_product[e4125], geometric_product[scalar], geometric_product[e23], geometric_product[e4315]]))
                + (Simd32x4::from(self[e125]) * Simd32x4::from([geometric_product[e31], geometric_product[e4235], geometric_product[scalar], geometric_product[e4125]]))
                - (Simd32x4::from(self[e235]) * Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e31], geometric_product[e23]]))
                - (Simd32x4::from(self[e315]) * geometric_product.group1().zw().with_zw(geometric_product[e4235], geometric_product[e31]))
                - (Simd32x4::from(self[e125]) * Simd32x4::from([geometric_product[e4315], geometric_product[e23], geometric_product[e45], geometric_product[e12]]))
                - (self.group1().yzxx() * geometric_product.group2().zxyx())
                - (self.group1().wwwy() * geometric_product.group2().xyzy()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e412] * geometric_product[e25]) + (self[e425] * geometric_product[e4125]) + (self[e321] * geometric_product[e23]) + (self[e315] * geometric_product[e43]),
                (self[e431] * geometric_product[e3215]) + (self[e435] * geometric_product[e4235]) + (self[e321] * geometric_product[e31]) + (self[e125] * geometric_product[e41]),
                (self[e412] * geometric_product[e3215]) + (self[e415] * geometric_product[e4315]) + (self[e321] * geometric_product[e12]) + (self[e235] * geometric_product[e42]),
                -(self[e412] * geometric_product[e4125]) - (self[e415] * geometric_product[e41]) - (self[e425] * geometric_product[e42]) - (self[e435] * geometric_product[e43]),
            ]) + (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e1234]]) * self.group0().xxy().with_w(self[e321]))
                - (Simd32x4::from([geometric_product[e42], geometric_product[e1234], geometric_product[e1234], geometric_product[e31]]) * self.group2().zyz().with_w(self[e431]))
                - (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], geometric_product[e4315]]) * self.group1().xxy().with_w(self[e431]))
                - (Simd32x4::from([geometric_product[e1234], geometric_product[e43], geometric_product[e41], geometric_product[e4235]]) * self.group2().xxy().with_w(self[e423]))
                - (Simd32x4::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45], geometric_product[e12]]) * self.group1().zyz().with_w(self[e412]))
                - (self.group0().yzx() * geometric_product.group2().zxy()).with_w(self[e423] * geometric_product[e23]),
        );
    }
}
impl std::ops::Div<GeometricQuotientInfix> for CircleRotor {
    type Output = GeometricQuotientInfixPartial<CircleRotor>;
    fn div(self, _rhs: GeometricQuotientInfix) -> Self::Output {
        GeometricQuotientInfixPartial(self)
    }
}
impl GeometricQuotient<AntiCircleRotor> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44       69        0
    //    simd3        0       11        0
    //    simd4       17       12        0
    // Totals...
    // yes simd       61       92        0
    //  no simd      112      150        0
    fn geometric_quotient(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiCircleRotor::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, scalar
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                + f32::powi(other[scalar], 2)
                - f32::powi(other[e45], 2),
        );
        let geometric_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (geometric_product[e41] * self[e12345])
                    + (geometric_product[e42] * self[e435])
                    + (geometric_product[e31] * self[e412])
                    + (geometric_product[e45] * self[e423])
                    + (geometric_product[scalar] * self[e423]),
                (geometric_product[e42] * self[e12345])
                    + (geometric_product[e43] * self[e415])
                    + (geometric_product[e12] * self[e423])
                    + (geometric_product[e45] * self[e431])
                    + (geometric_product[scalar] * self[e431]),
                (geometric_product[e43] * self[e321])
                    + (geometric_product[e43] * self[e12345])
                    + (geometric_product[e23] * self[e431])
                    + (geometric_product[e45] * self[e412])
                    + (geometric_product[scalar] * self[e412]),
                -(geometric_product[e43] * self[e125])
                    - (geometric_product[e23] * self[e415])
                    - (geometric_product[e31] * self[e425])
                    - (geometric_product[e12] * self[e435])
                    - (geometric_product[e45] * self[e321])
                    - (geometric_product[e15] * self[e423])
                    - (geometric_product[e25] * self[e431])
                    - (geometric_product[e35] * self[e412]),
            ]) + (geometric_product.group0().xyx() * self.group1().wwy()).with_w(geometric_product[scalar] * self[e12345])
                - (geometric_product.group0().zxy() * self.group1().yzx()).with_w(geometric_product[e41] * self[e235])
                - (self.group0().yzx() * geometric_product.group1().zxy()).with_w(geometric_product[e42] * self[e315]),
            // e415, e425, e435, e321
            Simd32x4::from([
                geometric_product[scalar] * self[e415],
                geometric_product[scalar] * self[e425],
                geometric_product[scalar] * self[e435],
                geometric_product[e45] * self[e12345] * -1.0,
            ]) + (self.group2().zxyx() * geometric_product.group0().yzx().with_w(geometric_product[e41]))
                + (self.group1().zx().with_zw(self[e12345], self[e321]) * geometric_product.group1().yzz().with_w(geometric_product[scalar]))
                + (self.group2().ww().with_zw(self[e425], self[e125]) * geometric_product.group1().xyx().with_w(geometric_product[e43]))
                + (self.group0().zxy() * geometric_product.group2().yzx()).with_w(geometric_product[e42] * self[e315])
                - (geometric_product.group2().zxyy() * self.group0().yzx().with_w(self[e431]))
                - (geometric_product.group0().zxy() * self.group2().yzx()).with_w(geometric_product[e15] * self[e423])
                - (geometric_product.group1().zxy() * self.group1().yzx()).with_w(geometric_product[e35] * self[e412]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (geometric_product[e31] * self[e125]) + (geometric_product[e15] * self[e12345]) + (geometric_product[e25] * self[e435]) + (geometric_product[scalar] * self[e235]),
                (geometric_product[e12] * self[e235]) + (geometric_product[e25] * self[e12345]) + (geometric_product[e35] * self[e415]) + (geometric_product[scalar] * self[e315]),
                (geometric_product[e23] * self[e315]) + (geometric_product[e15] * self[e425]) + (geometric_product[e35] * self[e12345]) + (geometric_product[scalar] * self[e125]),
                -(geometric_product[e25] * self[e425]) - (geometric_product[e35] * self[e435]),
            ]) - (geometric_product.group1().zxyx() * self.group2().yzxx())
                - (geometric_product.group1().wwwy() * self.group2().xyzy())
                - (geometric_product.group2().zyzx() * self.group1().ywwx())
                - (geometric_product.group2().xxy() * self.group1().wzx()).with_w(geometric_product[e12] * self[e125]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (geometric_product[e43] * self[e315]) + (geometric_product[e23] * self[e321]) + (geometric_product[e25] * self[e412]),
                (geometric_product[e41] * self[e125]) + (geometric_product[e31] * self[e321]) + (geometric_product[e35] * self[e423]),
                (geometric_product[e42] * self[e235]) + (geometric_product[e12] * self[e321]) + (geometric_product[e15] * self[e431]),
                -(geometric_product[e23] * self[e423]) - (geometric_product[e31] * self[e431]) - (geometric_product[e12] * self[e412]),
            ]) - (self.group1().xyzz() * geometric_product.group1().www().with_w(geometric_product[e43]))
                - (geometric_product.group0().yzx() * self.group2().zxy()).with_w(geometric_product[e41] * self[e415])
                - (self.group0().yzx() * geometric_product.group2().zxy()).with_w(geometric_product[e42] * self[e425]),
        );
    }
}
impl GeometricQuotient<AntiDipoleInversion> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       35       64        0
    //    simd3        0       11        0
    //    simd4       31       27        0
    // Totals...
    // yes simd       66      102        0
    //  no simd      159      205        0
    fn geometric_quotient(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e4
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125])
                - 2.0 * (other[e4] * other[e5]),
        );
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e4
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e1, e2, e3, e5
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(geometric_product[e423] * self[e12345])
                    - (geometric_product[e431] * self[e435])
                    - (geometric_product[e425] * self[e412])
                    - (geometric_product[e4] * self[e415])
                    - (geometric_product[e3] * self[e431]),
                -(geometric_product[e431] * self[e12345])
                    - (geometric_product[e412] * self[e415])
                    - (geometric_product[e435] * self[e423])
                    - (geometric_product[e4] * self[e425])
                    - (geometric_product[e1] * self[e412]),
                -(geometric_product[e412] * self[e321])
                    - (geometric_product[e412] * self[e12345])
                    - (geometric_product[e415] * self[e431])
                    - (geometric_product[e4] * self[e435])
                    - (geometric_product[e2] * self[e423]),
                (geometric_product[e415] * self[e415])
                    + (geometric_product[e425] * self[e425])
                    + (geometric_product[e435] * self[e435])
                    + (geometric_product[e315] * self[e431])
                    + (geometric_product[e125] * self[e412]),
            ]) + (Simd32x4::from([geometric_product[e321], geometric_product[e3], geometric_product[e425], self[e315]]) * self.group0().xxx().with_w(geometric_product[e431]))
                + (Simd32x4::from([geometric_product[e2], geometric_product[e415], geometric_product[e321], geometric_product[e235]]) * self.group0().zzz().with_w(self[e423]))
                + (geometric_product.group1().zw().with_zw(geometric_product[e1], self[e125]) * self.group0().yyy().with_w(geometric_product[e412]))
                + (geometric_product.group0().zxy() * self.group1().yzx()).with_w(geometric_product[e423] * self[e235])
                - (self.group1().wwyw() * geometric_product.group0().xyx().with_w(geometric_product[e321])),
            // e23, e31, e12, e45
            Simd32x4::from([
                geometric_product[e1] * self[e321] * -1.0,
                geometric_product[e2] * self[e321] * -1.0,
                geometric_product[e3] * self[e321] * -1.0,
                geometric_product[e321] * self[e12345],
            ]) + (self.group2().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e423]))
                + (self.group0().yzx() * geometric_product.group2().zxy()).with_w(geometric_product[e431] * self[e315])
                + (geometric_product.group1().zxy() * self.group1().yzx()).with_w(geometric_product[e412] * self[e125])
                - (Simd32x4::from([geometric_product[e315], geometric_product[e5], geometric_product[e5], geometric_product[e125]]) * self.group0().zyz().with_w(self[e412]))
                - (Simd32x4::from([geometric_product[e5], geometric_product[e125], geometric_product[e235], geometric_product[e315]]) * self.group0().xxy().with_w(self[e431]))
                - (self.group1().zx().with_zw(self[e12345], self[e425]) * geometric_product.group1().yzz().with_w(geometric_product[e2]))
                - (self.group2().ww().with_zw(self[e425], self[e415]) * geometric_product.group1().xyx().with_w(geometric_product[e1]))
                - (geometric_product.group0().yzx() * self.group2().zxy()).with_w(geometric_product[e235] * self[e423])
                - (geometric_product.group2().www() * self.group2().xyz()).with_w(geometric_product[e3] * self[e435]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                geometric_product[e5] * self[e415] * -1.0,
                geometric_product[e5] * self[e425] * -1.0,
                geometric_product[e5] * self[e435] * -1.0,
                (geometric_product[e425] * self[e431]) + (geometric_product[e435] * self[e412]),
            ]) + (self.group1().ywwz() * geometric_product.group2().zyz().with_w(geometric_product[e412]))
                + (self.group1().wzxy() * geometric_product.group2().xxy().with_w(geometric_product[e431]))
                + (geometric_product.group1().zxy() * self.group2().yzx()).with_w(geometric_product[e423] * self[e415])
                + (geometric_product.group3().zxy() * self.group2().yzx()).with_w(geometric_product[e415] * self[e423])
                - (geometric_product.group2().yzzw() * self.group1().zx().with_zw(self[e12345], self[e321]))
                - (self.group2().zxyw() * geometric_product.group3().yzx().with_w(geometric_product[e4]))
                - (self.group2().ww().with_zw(self[e425], geometric_product[e3]) * geometric_product.group2().xyx().with_w(self[e412]))
                - (geometric_product.group1().yzx() * self.group2().zxy()).with_w(geometric_product[e1] * self[e423])
                - (geometric_product.group1().www() * self.group2().xyz()).with_w(geometric_product[e2] * self[e431]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(geometric_product[e125] * self[e431]) - (geometric_product[e4] * self[e235]) - (geometric_product[e3] * self[e425]),
                -(geometric_product[e235] * self[e412]) - (geometric_product[e4] * self[e315]) - (geometric_product[e1] * self[e435]),
                -(geometric_product[e315] * self[e423]) - (geometric_product[e4] * self[e125]) - (geometric_product[e2] * self[e415]),
                (geometric_product[e2] * self[e315]) + (geometric_product[e3] * self[e125]) + (geometric_product[e5] * self[e321]),
            ]) + (Simd32x4::from([geometric_product[e315], geometric_product[e5], geometric_product[e5], self[e125]]) * self.group0().zyz().with_w(geometric_product[e435]))
                + (Simd32x4::from([geometric_product[e5], geometric_product[e125], geometric_product[e235], self[e315]]) * self.group0().xxy().with_w(geometric_product[e425]))
                + (geometric_product.group3().yzzx() * self.group1().zx().with_zw(self[e12345], self[e235]))
                + (self.group1().xyzy() * geometric_product.group1().www().with_w(geometric_product[e315]))
                + (self.group1().wwwx() * geometric_product.group1().xyz().with_w(geometric_product[e235]))
                + (self.group2().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e415]))
                + (self.group2().ww().with_zw(self[e425], self[e435]) * geometric_product.group3().xyx().with_w(geometric_product[e125]))
                - (self.group2().zxyw() * geometric_product.group0().yzx().with_w(geometric_product[e5])),
        );
    }
}
impl GeometricQuotient<AntiDualNum> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        6        0
    //    simd2        0        1        0
    //    simd3        1        2        0
    //    simd4        1        5        0
    // Totals...
    // yes simd        2       14        0
    //  no simd        7       34        0
    fn geometric_quotient(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDualNum::from_groups(/* e3215, scalar */ Simd32x2::from(f32::powi(other[scalar], -2)) * other.group0());
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(geometric_product[scalar]) * self.group0().with_w(self[e12345]),
            // e415, e425, e435, e321
            ((Simd32x3::from(geometric_product[e3215]) * self.group0()) + (Simd32x3::from(geometric_product[scalar]) * self.group1().xyz()))
                .with_w(geometric_product[scalar] * self[e321]),
            // e235, e315, e125, e5
            Simd32x4::from([
                geometric_product[scalar] * self[e235],
                geometric_product[scalar] * self[e315],
                geometric_product[scalar] * self[e125],
                geometric_product[e3215] * self[e321] * -1.0,
            ]) + (Simd32x4::from(geometric_product[e3215]) * self.group1().xyz().with_w(self[e12345])),
            // e1, e2, e3, e4
            geometric_product.group0().xx().with_zw(geometric_product[e3215], 0.0)
                * Simd32x3::from(1.0).with_w(0.0)
                * self.group0().with_w(0.0)
                * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
        );
    }
}
impl GeometricQuotient<AntiFlatPoint> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       19        0
    //    simd3        0        8        0
    //    simd4        8        3        0
    // Totals...
    // yes simd       12       30        0
    //  no simd       36       55        0
    fn geometric_quotient(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlatPoint::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(f32::powi(other[e321], -2)) * Simd32x4::from([other[e235] * -1.0, other[e315] * -1.0, other[e125] * -1.0, other[e321] * -1.0]),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x3::from(geometric_product[e321]) * self.group0()).with_w(
                (geometric_product[e235] * self[e423]) + (geometric_product[e315] * self[e431]) + (geometric_product[e125] * self[e412]) - (geometric_product[e321] * self[e321]),
            ),
            // e23, e31, e12, e45
            Simd32x3::from(0.0).with_w(-(geometric_product[e315] * self[e431]) - (geometric_product[e125] * self[e412]))
                + (self.group0().yzx() * geometric_product.group0().zxy()).with_w(geometric_product[e321] * self[e12345])
                - (geometric_product.group0().yzxx() * self.group0().zxy().with_w(self[e423])),
            // e15, e25, e35, e1234
            (geometric_product.group0().xxy() * self.group1().wzx()).with_w(0.0) + (geometric_product.group0().zyz() * self.group1().yww()).with_w(0.0)
                - (Simd32x3::from(geometric_product[e321]) * self.group2().xyz()).with_w(0.0)
                - (Simd32x3::from([self[e435], self[e415], self[e12345]]) * geometric_product.group0().yzz()).with_w(0.0)
                - (Simd32x3::from([self[e12345], self[e12345], self[e425]]) * geometric_product.group0().xyx()).with_w(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                geometric_product[e125] * self[e431] * -1.0,
                geometric_product[e235] * self[e412] * -1.0,
                geometric_product[e315] * self[e423] * -1.0,
                geometric_product[e125] * self[e435],
            ]) + (geometric_product.group0().wwwy() * self.group1().xyzy())
                + (self.group0().zxy() * geometric_product.group0().yzx()).with_w(geometric_product[e235] * self[e415]),
        );
    }
}
impl GeometricQuotient<AntiFlector> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       32        0
    //    simd3        0        5        0
    //    simd4       16       14        0
    // Totals...
    // yes simd       34       51        0
    //  no simd       82      103        0
    fn geometric_quotient(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiFlector::from_groups(/* e235, e315, e125, e321 */ other.group0() * Simd32x4::from(-1.0), /* e1, e2, e3, e5 */ other.group1());
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2),
        );
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e1, e2, e3, e5
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([geometric_product[e321], geometric_product[e3], geometric_product[e1], geometric_product[e235]]) * self.group0().xxy().with_w(self[e423]))
                + (Simd32x4::from([geometric_product[e2], geometric_product[e321], geometric_product[e321], geometric_product[e315]]) * self.group0().zyz().with_w(self[e431]))
                + Simd32x3::from(0.0).with_w(geometric_product[e125] * self[e412])
                - (self.group0().yzx() * geometric_product.group1().zxy()).with_w(geometric_product[e321] * self[e321]),
            // e23, e31, e12, e45
            Simd32x3::from(0.0).with_w(-(geometric_product[e1] * self[e415]) - (geometric_product[e2] * self[e425]) - (geometric_product[e3] * self[e435]))
                + (self.group0().yzx() * geometric_product.group0().zxy()).with_w(geometric_product[e321] * self[e12345])
                - (Simd32x4::from([geometric_product[e315], geometric_product[e5], geometric_product[e5], geometric_product[e315]]) * self.group0().zyz().with_w(self[e431]))
                - (Simd32x4::from([geometric_product[e5], geometric_product[e125], geometric_product[e235], geometric_product[e235]]) * self.group0().xxy().with_w(self[e423]))
                - (self.group1().www() * geometric_product.group1().xyz()).with_w(geometric_product[e125] * self[e412]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (geometric_product[e235] * self[e321]) + (geometric_product[e125] * self[e425]) + (geometric_product[e3] * self[e315])
                    - (geometric_product[e2] * self[e125])
                    - (geometric_product[e5] * self[e415]),
                (geometric_product[e235] * self[e435]) + (geometric_product[e315] * self[e321]) + (geometric_product[e1] * self[e125])
                    - (geometric_product[e3] * self[e235])
                    - (geometric_product[e5] * self[e425]),
                (geometric_product[e315] * self[e415]) + (geometric_product[e125] * self[e321]) + (geometric_product[e2] * self[e235])
                    - (geometric_product[e1] * self[e315])
                    - (geometric_product[e5] * self[e435]),
                0.0,
            ]) - (self.group1().zx().with_zw(self[e12345], geometric_product[e2]) * geometric_product.group0().yzz().with_w(self[e431]))
                - (self.group2().ww().with_zw(self[e425], geometric_product[e1]) * geometric_product.group0().xyx().with_w(self[e423]))
                - (geometric_product.group0().www() * self.group2().xyz()).with_w(geometric_product[e3] * self[e412]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                geometric_product[e3] * self[e425] * -1.0,
                geometric_product[e1] * self[e435] * -1.0,
                geometric_product[e2] * self[e415] * -1.0,
                (geometric_product[e3] * self[e125]) + (geometric_product[e5] * self[e321]),
            ]) + (Simd32x4::from([geometric_product[e315], geometric_product[e5], geometric_product[e5], self[e425]]) * self.group0().zyz().with_w(geometric_product[e315]))
                + (Simd32x4::from([geometric_product[e5], geometric_product[e125], geometric_product[e235], self[e415]]) * self.group0().xxy().with_w(geometric_product[e235]))
                + (geometric_product.group0().wwwz() * self.group1().xyzz())
                + (geometric_product.group1().xyxx() * self.group2().ww().with_zw(self[e425], self[e235]))
                + (geometric_product.group1().yzzy() * self.group1().zx().with_zw(self[e12345], self[e315]))
                - (self.group0().yzx() * geometric_product.group0().zxy()).with_w(geometric_product[e5] * self[e12345]),
        );
    }
}
impl GeometricQuotient<AntiLine> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       45        0
    //    simd3        0       10        0
    //    simd4        7        1        0
    // Totals...
    // yes simd       31       56        0
    //  no simd       52       79        0
    fn geometric_quotient(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiLine::from_groups(
            // e23, e31, e12
            other.group0() * Simd32x3::from(-1.0),
            // e15, e25, e35
            other.group1() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(/* scalar */ f32::powi(other[e23], 2) + f32::powi(other[e31], 2) + f32::powi(other[e12], 2));
        let geometric_product = AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e15, e25, e35
            Simd32x3::from(other_2[scalar]) * reverse.group1(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                geometric_product[e31] * self[e412],
                geometric_product[e12] * self[e423],
                geometric_product[e23] * self[e431],
                -(geometric_product[e31] * self[e425])
                    - (geometric_product[e12] * self[e435])
                    - (geometric_product[e15] * self[e423])
                    - (geometric_product[e25] * self[e431])
                    - (geometric_product[e35] * self[e412]),
            ]) - (geometric_product.group0().zxy() * self.group0().yzx()).with_w(geometric_product[e23] * self[e415]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (geometric_product[e23] * self[e12345]) + (geometric_product[e31] * self[e435]) + (geometric_product[e25] * self[e412]),
                (geometric_product[e31] * self[e12345]) + (geometric_product[e12] * self[e415]) + (geometric_product[e35] * self[e423]),
                (geometric_product[e23] * self[e425]) + (geometric_product[e12] * self[e12345]) + (geometric_product[e15] * self[e431]),
                geometric_product[e35] * self[e412] * -1.0,
            ]) - (geometric_product.group0().zxy() * self.group1().yzx()).with_w(geometric_product[e15] * self[e423])
                - (geometric_product.group1().zxy() * self.group0().yzx()).with_w(geometric_product[e25] * self[e431]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (geometric_product[e31] * self[e125]) + (geometric_product[e15] * self[e12345]) + (geometric_product[e25] * self[e435]),
                (geometric_product[e12] * self[e235]) + (geometric_product[e25] * self[e12345]) + (geometric_product[e35] * self[e415]),
                (geometric_product[e23] * self[e315]) + (geometric_product[e15] * self[e425]) + (geometric_product[e35] * self[e12345]),
                -(geometric_product[e15] * self[e415]) - (geometric_product[e25] * self[e425]) - (geometric_product[e35] * self[e435]),
            ]) - (self.group2().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e23]))
                - (geometric_product.group1().xxy() * self.group1().wzx()).with_w(geometric_product[e31] * self[e315])
                - (geometric_product.group1().zyz() * self.group1().yww()).with_w(geometric_product[e12] * self[e125]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (geometric_product[e23] * self[e321]) + (geometric_product[e25] * self[e412]),
                (geometric_product[e31] * self[e321]) + (geometric_product[e35] * self[e423]),
                (geometric_product[e12] * self[e321]) + (geometric_product[e15] * self[e431]),
                -(geometric_product[e31] * self[e431]) - (geometric_product[e12] * self[e412]),
            ]) - (geometric_product.group1().zxy() * self.group0().yzx()).with_w(geometric_product[e23] * self[e423]),
        );
    }
}
impl GeometricQuotient<AntiMotor> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       35       56        0
    //    simd3        0        7        0
    //    simd4       10        7        0
    // Totals...
    // yes simd       45       70        0
    //  no simd       75      105        0
    fn geometric_quotient(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, e3215
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e23], 2) + f32::powi(other[e31], 2) + f32::powi(other[e12], 2) + f32::powi(other[scalar], 2),
        );
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e15, e25, e35, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                geometric_product[e31] * self[e412],
                geometric_product[scalar] * self[e431],
                geometric_product[scalar] * self[e412],
                -(geometric_product[e23] * self[e415])
                    - (geometric_product[e31] * self[e425])
                    - (geometric_product[e12] * self[e435])
                    - (geometric_product[e25] * self[e431])
                    - (geometric_product[e35] * self[e412]),
            ]) + (self.group0().xxy() * geometric_product.group0().wzx()).with_w(geometric_product[scalar] * self[e12345])
                - (self.group0().yzx() * geometric_product.group0().zxy()).with_w(geometric_product[e15] * self[e423]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (geometric_product[e23] * self[e12345]) + (geometric_product[e31] * self[e435]) + (geometric_product[scalar] * self[e415]) + (geometric_product[e25] * self[e412]),
                (geometric_product[e31] * self[e12345])
                    + (geometric_product[e12] * self[e415])
                    + (geometric_product[scalar] * self[e425])
                    + (geometric_product[e3215] * self[e431]),
                (geometric_product[e23] * self[e425])
                    + (geometric_product[e12] * self[e12345])
                    + (geometric_product[scalar] * self[e435])
                    + (geometric_product[e3215] * self[e412]),
                geometric_product[e35] * self[e412] * -1.0,
            ]) + (self.group0().xxy() * geometric_product.group1().wzx()).with_w(geometric_product[scalar] * self[e321])
                - (geometric_product.group1().zxyx() * self.group0().yzx().with_w(self[e423]))
                - (geometric_product.group0().zxy() * self.group1().yzx()).with_w(geometric_product[e25] * self[e431]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (geometric_product[scalar] * self[e235])
                    + (geometric_product[e15] * self[e12345])
                    + (geometric_product[e25] * self[e435])
                    + (geometric_product[e3215] * self[e415]),
                (geometric_product[scalar] * self[e315])
                    + (geometric_product[e25] * self[e12345])
                    + (geometric_product[e35] * self[e415])
                    + (geometric_product[e3215] * self[e425]),
                (geometric_product[scalar] * self[e125])
                    + (geometric_product[e15] * self[e425])
                    + (geometric_product[e35] * self[e12345])
                    + (geometric_product[e3215] * self[e435]),
                -(geometric_product[e15] * self[e415]) - (geometric_product[e25] * self[e425]) - (geometric_product[e35] * self[e435]) - (geometric_product[e3215] * self[e321]),
            ]) + (self.group2().zxyw() * geometric_product.group0().yzx().with_w(geometric_product[e3215]))
                - (geometric_product.group0().zxyx() * self.group2().yzxx())
                - (geometric_product.group1().xxy() * self.group1().wzx()).with_w(geometric_product[e31] * self[e315])
                - (geometric_product.group1().zyz() * self.group1().yww()).with_w(geometric_product[e12] * self[e125]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (geometric_product[e23] * self[e321]) + (geometric_product[e25] * self[e412]) + (geometric_product[e3215] * self[e423]),
                (geometric_product[e31] * self[e321]) + (geometric_product[e35] * self[e423]) + (geometric_product[e3215] * self[e431]),
                (geometric_product[e12] * self[e321]) + (geometric_product[e15] * self[e431]) + (geometric_product[e3215] * self[e412]),
                -(geometric_product[e31] * self[e431]) - (geometric_product[e12] * self[e412]),
            ]) - (self.group0().yzx() * geometric_product.group1().zxy()).with_w(geometric_product[e23] * self[e423]),
        );
    }
}
impl GeometricQuotient<AntiPlane> for CircleRotor {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2       12        0
    //    simd3        1        6        0
    //    simd4        8        5        0
    // Totals...
    // yes simd       11       23        0
    //  no simd       37       50        0
    fn geometric_quotient(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiPlane::from_groups(
            // e1, e2, e3, e5
            Simd32x4::from(f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)) * other.group0(),
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (self.group0().zxy() * geometric_product.group0().yzx()) - (self.group0().yzx() * geometric_product.group0().zxy()),
            // e23, e31, e12, e45
            Simd32x3::from(0.0).with_w(geometric_product[e3] * self[e435] * -1.0)
                - (geometric_product.group0().xyzy() * self.group1().wwwy())
                - (self.group0() * geometric_product.group0().www()).with_w(geometric_product[e1] * self[e415]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                geometric_product[e3] * self[e315],
                geometric_product[e1] * self[e125],
                geometric_product[e2] * self[e235],
                geometric_product[e3] * self[e412] * -1.0,
            ]) - (geometric_product.group0().yzx() * self.group2().zxy()).with_w(geometric_product[e1] * self[e423])
                - (geometric_product.group0().www() * self.group1().xyz()).with_w(geometric_product[e2] * self[e431]),
            // e4235, e4315, e4125, e3215
            (geometric_product.group0().xyxy() * self.group2().ww().with_zw(self[e425], self[e315]))
                + (geometric_product.group0().yzzz() * self.group1().zx().with_zw(self[e12345], self[e125]))
                + Simd32x3::from(0.0).with_w(geometric_product[e5] * self[e321])
                + (self.group0() * geometric_product.group0().www()).with_w(geometric_product[e1] * self[e235])
                - (geometric_product.group0().zxyw() * self.group1().yzx().with_w(self[e12345])),
        );
    }
}
impl GeometricQuotient<AntiScalar> for CircleRotor {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        1
    //    simd3        0        2        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        7        1
    //  no simd        0       23        1
    fn geometric_quotient(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiScalar::from_groups(/* e12345 */ 1.0 / other[e12345] * -1.0);
        return AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(geometric_product[e12345]) * self.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from(geometric_product[e12345]) * self.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, scalar
            Simd32x4::from(geometric_product[e12345]) * self.group2() * Simd32x4::from(-1.0),
        );
    }
}
impl GeometricQuotient<Circle> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       61        0
    //    simd3        0       14        0
    //    simd4       17        9        0
    // Totals...
    // yes simd       49       84        0
    //  no simd      100      139        0
    fn geometric_quotient(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let reverse = Circle::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125
            other.group2() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group2(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(geometric_product[e423] * self[e12345]) - (geometric_product[e431] * self[e435]) - (geometric_product[e425] * self[e412]),
                -(geometric_product[e431] * self[e12345]) - (geometric_product[e412] * self[e415]) - (geometric_product[e435] * self[e423]),
                -(geometric_product[e412] * self[e321]) - (geometric_product[e412] * self[e12345]) - (geometric_product[e415] * self[e431]),
                (geometric_product[e415] * self[e415])
                    + (geometric_product[e425] * self[e425])
                    + (geometric_product[e435] * self[e435])
                    + (geometric_product[e235] * self[e423])
                    + (geometric_product[e315] * self[e431])
                    + (geometric_product[e125] * self[e412]),
            ]) + (geometric_product.group0().zxy() * self.group1().yzx()).with_w(geometric_product[e423] * self[e235])
                + (self.group0().xyx() * geometric_product.group1().wwy()).with_w(geometric_product[e431] * self[e315])
                + (self.group0().yzz() * geometric_product.group1().zxw()).with_w(geometric_product[e412] * self[e125])
                - (self.group1().wwyw() * geometric_product.group0().xyx().with_w(geometric_product[e321])),
            // e23, e31, e12, e45
            Simd32x4::from([
                geometric_product[e425] * self[e435] * -1.0,
                geometric_product[e435] * self[e415] * -1.0,
                geometric_product[e435] * self[e12345] * -1.0,
                geometric_product[e321] * self[e12345],
            ]) + (self.group2().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e423]))
                + (geometric_product.group2().zxy() * self.group0().yzx()).with_w(geometric_product[e431] * self[e315])
                + (geometric_product.group1().zxy() * self.group1().yzx()).with_w(geometric_product[e412] * self[e125])
                - (self.group2().ww().with_zw(self[e425], self[e412]) * geometric_product.group1().xyx().with_w(geometric_product[e125]))
                - (geometric_product.group0().yzx() * self.group2().zxy()).with_w(geometric_product[e235] * self[e423])
                - (geometric_product.group2().yzx() * self.group0().zxy()).with_w(geometric_product[e315] * self[e431]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(geometric_product[e425] * self[e125])
                    - (geometric_product[e321] * self[e235])
                    - (geometric_product[e235] * self[e12345])
                    - (geometric_product[e315] * self[e435]),
                -(geometric_product[e435] * self[e235])
                    - (geometric_product[e321] * self[e315])
                    - (geometric_product[e315] * self[e12345])
                    - (geometric_product[e125] * self[e415]),
                -(geometric_product[e415] * self[e315])
                    - (geometric_product[e321] * self[e125])
                    - (geometric_product[e235] * self[e425])
                    - (geometric_product[e125] * self[e12345]),
                (geometric_product[e415] * self[e423]) + (geometric_product[e425] * self[e431]) + (geometric_product[e435] * self[e412]),
            ]) + (self.group1().ywwy() * geometric_product.group2().zyz().with_w(geometric_product[e431]))
                + (self.group1().wzxx() * geometric_product.group2().xxy().with_w(geometric_product[e423]))
                + (geometric_product.group1().zxy() * self.group2().yzx()).with_w(geometric_product[e412] * self[e435]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(geometric_product[e431] * self[e125]) - (geometric_product[e125] * self[e431]),
                -(geometric_product[e412] * self[e235]) - (geometric_product[e235] * self[e412]),
                -(geometric_product[e423] * self[e315]) - (geometric_product[e315] * self[e423]),
                (geometric_product[e425] * self[e315]) + (geometric_product[e435] * self[e125]),
            ]) + (geometric_product.group1().wwwx() * self.group1().xyz().with_w(self[e235]))
                + (self.group1().wwwz() * geometric_product.group1().xyz().with_w(geometric_product[e125]))
                + (geometric_product.group0().zxy() * self.group2().yzx()).with_w(geometric_product[e235] * self[e415])
                + (geometric_product.group2().yzx() * self.group0().zxy()).with_w(geometric_product[e315] * self[e425]),
        );
    }
}
impl GeometricQuotient<CircleRotor> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       63        0
    //    simd3        0       10        0
    //    simd4       18       14        0
    // Totals...
    // yes simd       58       87        0
    //  no simd      112      149        0
    fn geometric_quotient(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let reverse = CircleRotor::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e12345
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - f32::powi(other[e12345], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(geometric_product[e431] * self[e435]) - (geometric_product[e425] * self[e412]) - (geometric_product[e12345] * self[e423]),
                -(geometric_product[e412] * self[e415]) - (geometric_product[e435] * self[e423]) - (geometric_product[e12345] * self[e431]),
                -(geometric_product[e412] * self[e12345]) - (geometric_product[e415] * self[e431]) - (geometric_product[e12345] * self[e412]),
                (geometric_product[e415] * self[e415])
                    + (geometric_product[e425] * self[e425])
                    + (geometric_product[e435] * self[e435])
                    + (geometric_product[e235] * self[e423])
                    + (geometric_product[e315] * self[e431])
                    + (geometric_product[e125] * self[e412]),
            ]) + (geometric_product.group0().zxy() * self.group1().yzx()).with_w(geometric_product[e423] * self[e235])
                + (self.group0().xyx() * geometric_product.group1().wwy()).with_w(geometric_product[e431] * self[e315])
                + (self.group0().yzz() * geometric_product.group1().zxw()).with_w(geometric_product[e412] * self[e125])
                - (self.group1().wwyw() * geometric_product.group0().xyx().with_w(geometric_product[e321]))
                - (self.group2().ww().with_zw(self[e321], self[e12345]) * geometric_product.group0().with_w(geometric_product[e12345])),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(geometric_product[e425] * self[e435]) - (geometric_product[e12345] * self[e415]),
                -(geometric_product[e435] * self[e415]) - (geometric_product[e12345] * self[e425]),
                -(geometric_product[e435] * self[e12345]) - (geometric_product[e12345] * self[e435]),
                (geometric_product[e321] * self[e12345]) + (geometric_product[e12345] * self[e321]),
            ]) + (self.group2().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e423]))
                + (self.group0().yzx() * geometric_product.group2().zxy()).with_w(geometric_product[e431] * self[e315])
                + (geometric_product.group1().zxy() * self.group1().yzx()).with_w(geometric_product[e412] * self[e125])
                - (geometric_product.group2().yzxy() * self.group0().zxy().with_w(self[e431]))
                - (self.group2().ww().with_zw(self[e425], geometric_product[e125]) * geometric_product.group1().xyx().with_w(self[e412]))
                - (geometric_product.group0().yzx() * self.group2().zxy()).with_w(geometric_product[e235] * self[e423]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(geometric_product[e425] * self[e125])
                    - (geometric_product[e321] * self[e235])
                    - (geometric_product[e235] * self[e12345])
                    - (geometric_product[e315] * self[e435])
                    - (geometric_product[e12345] * self[e235]),
                -(geometric_product[e435] * self[e235])
                    - (geometric_product[e321] * self[e315])
                    - (geometric_product[e315] * self[e12345])
                    - (geometric_product[e125] * self[e415])
                    - (geometric_product[e12345] * self[e315]),
                -(geometric_product[e415] * self[e315])
                    - (geometric_product[e321] * self[e125])
                    - (geometric_product[e235] * self[e425])
                    - (geometric_product[e125] * self[e12345])
                    - (geometric_product[e12345] * self[e125]),
                (geometric_product[e415] * self[e423]) + (geometric_product[e425] * self[e431]) + (geometric_product[e435] * self[e412]),
            ]) + (self.group1().ywwz() * geometric_product.group2().zyz().with_w(geometric_product[e412]))
                + (self.group1().wzxy() * geometric_product.group2().xxy().with_w(geometric_product[e431]))
                + (geometric_product.group1().zxy() * self.group2().yzx()).with_w(geometric_product[e423] * self[e415]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(geometric_product[e431] * self[e125]) - (geometric_product[e125] * self[e431]),
                -(geometric_product[e412] * self[e235]) - (geometric_product[e235] * self[e412]),
                -(geometric_product[e423] * self[e315]) - (geometric_product[e315] * self[e423]),
                (geometric_product[e315] * self[e425]) + (geometric_product[e125] * self[e435]),
            ]) + (geometric_product.group1().xyzz() * self.group1().www().with_w(self[e125]))
                + (self.group1().xyzx() * geometric_product.group1().www().with_w(geometric_product[e235]))
                + (self.group2().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e415]))
                + (self.group0().zxy() * geometric_product.group2().yzx()).with_w(geometric_product[e425] * self[e315]),
        );
    }
}
impl GeometricQuotient<Dipole> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       67        0
    //    simd3        0       14        0
    //    simd4       15        7        0
    // Totals...
    // yes simd       55       88        0
    //  no simd      100      137        0
    fn geometric_quotient(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let reverse = Dipole::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35
            other.group2() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2),
        );
        let geometric_product = Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35
            Simd32x3::from(other_2[scalar]) * reverse.group2(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e423] * geometric_product[e45])
                    + (self[e412] * geometric_product[e31])
                    + (self[e435] * geometric_product[e42])
                    + (self[e321] * geometric_product[e41])
                    + (self[e12345] * geometric_product[e41]),
                (self[e423] * geometric_product[e12])
                    + (self[e431] * geometric_product[e45])
                    + (self[e415] * geometric_product[e43])
                    + (self[e321] * geometric_product[e42])
                    + (self[e12345] * geometric_product[e42]),
                (self[e431] * geometric_product[e23])
                    + (self[e412] * geometric_product[e45])
                    + (self[e425] * geometric_product[e41])
                    + (self[e321] * geometric_product[e43])
                    + (self[e12345] * geometric_product[e43]),
                -(self[e412] * geometric_product[e35])
                    - (self[e415] * geometric_product[e23])
                    - (self[e425] * geometric_product[e31])
                    - (self[e435] * geometric_product[e12])
                    - (self[e321] * geometric_product[e45])
                    - (self[e235] * geometric_product[e41])
                    - (self[e315] * geometric_product[e42])
                    - (self[e125] * geometric_product[e43]),
            ]) - (self.group0().yzx() * geometric_product.group1().zxy()).with_w(self[e423] * geometric_product[e15])
                - (geometric_product.group0().zxy() * self.group1().yzx()).with_w(self[e431] * geometric_product[e25]),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e12345] * geometric_product[e23],
                self[e12345] * geometric_product[e31],
                self[e12345] * geometric_product[e12],
                self[e12345] * geometric_product[e45] * -1.0,
            ]) + (self.group2().zxyy() * geometric_product.group0().yzx().with_w(geometric_product[e42]))
                + (self.group0().zxy() * geometric_product.group2().yzx()).with_w(self[e235] * geometric_product[e41])
                + (self.group1().zxy() * geometric_product.group1().yzx()).with_w(self[e125] * geometric_product[e43])
                - (self.group0().yzx() * geometric_product.group2().zxy()).with_w(self[e423] * geometric_product[e15])
                - (geometric_product.group0().zxy() * self.group2().yzx()).with_w(self[e431] * geometric_product[e25])
                - (self.group1().yzx() * geometric_product.group1().zxy()).with_w(self[e412] * geometric_product[e35]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e435] * geometric_product[e25]) + (self[e125] * geometric_product[e31]) + (self[e12345] * geometric_product[e15]),
                (self[e415] * geometric_product[e35]) + (self[e235] * geometric_product[e12]) + (self[e12345] * geometric_product[e25]),
                (self[e425] * geometric_product[e15]) + (self[e315] * geometric_product[e23]) + (self[e12345] * geometric_product[e35]),
                -(self[e315] * geometric_product[e31]) - (self[e125] * geometric_product[e12]),
            ]) - (self.group1().ywwy() * geometric_product.group2().zyz().with_w(geometric_product[e25]))
                - (self.group1().wzxx() * geometric_product.group2().xxy().with_w(geometric_product[e15]))
                - (self.group2().yzzx() * geometric_product.group1().zxwx())
                - (self.group2().xyx() * geometric_product.group1().wwy()).with_w(self[e435] * geometric_product[e35]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e412] * geometric_product[e25]) + (self[e321] * geometric_product[e23]) + (self[e315] * geometric_product[e43]),
                (self[e423] * geometric_product[e35]) + (self[e321] * geometric_product[e31]) + (self[e125] * geometric_product[e41]),
                (self[e431] * geometric_product[e15]) + (self[e321] * geometric_product[e12]) + (self[e235] * geometric_product[e42]),
                -(self[e415] * geometric_product[e41]) - (self[e425] * geometric_product[e42]) - (self[e435] * geometric_product[e43]),
            ]) - (geometric_product.group1().wwwz() * self.group1().xyz().with_w(self[e412]))
                - (self.group0().yzx() * geometric_product.group2().zxy()).with_w(self[e423] * geometric_product[e23])
                - (geometric_product.group0().yzx() * self.group2().zxy()).with_w(self[e431] * geometric_product[e31]),
        );
    }
}
impl GeometricQuotient<DipoleInversion> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       43       64        0
    //    simd3        0       13        0
    //    simd4       29       24        0
    // Totals...
    // yes simd       72      101        0
    //  no simd      159      199        0
    fn geometric_quotient(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let reverse = DipoleInversion::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + 2.0 * (other[e1234] * other[e3215])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2),
        );
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e423] * geometric_product[e45])
                    + (self[e412] * geometric_product[e31])
                    + (self[e412] * geometric_product[e4315])
                    + (self[e415] * geometric_product[e1234])
                    + (self[e435] * geometric_product[e42])
                    + (self[e321] * geometric_product[e41])
                    + (self[e12345] * geometric_product[e41]),
                (self[e423] * geometric_product[e12])
                    + (self[e423] * geometric_product[e4125])
                    + (self[e431] * geometric_product[e45])
                    + (self[e415] * geometric_product[e43])
                    + (self[e425] * geometric_product[e1234])
                    + (self[e321] * geometric_product[e42])
                    + (self[e12345] * geometric_product[e42]),
                (self[e431] * geometric_product[e23])
                    + (self[e431] * geometric_product[e4235])
                    + (self[e412] * geometric_product[e45])
                    + (self[e425] * geometric_product[e41])
                    + (self[e435] * geometric_product[e1234])
                    + (self[e321] * geometric_product[e43])
                    + (self[e12345] * geometric_product[e43]),
                -(self[e415] * geometric_product[e23])
                    - (self[e425] * geometric_product[e31])
                    - (self[e435] * geometric_product[e12])
                    - (self[e321] * geometric_product[e45])
                    - (self[e235] * geometric_product[e41])
                    - (self[e315] * geometric_product[e42])
                    - (self[e125] * geometric_product[e43]),
            ]) - (self.group0().yzx() * geometric_product.group1().zxy()).with_w(self[e423] * geometric_product[e15])
                - (self.group0().yzx() * geometric_product.group3().zxy()).with_w(self[e431] * geometric_product[e25])
                - (geometric_product.group0().zxy() * self.group1().yzx()).with_w(self[e412] * geometric_product[e35]),
            // e415, e425, e435, e321
            (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], self[e315]]) * self.group0().zyz().with_w(geometric_product[e42]))
                + (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], self[e235]]) * self.group0().xxy().with_w(geometric_product[e41]))
                + (self.group1().zxyx() * geometric_product.group1().yzx().with_w(geometric_product[e4235]))
                + (self.group2().zxyz() * geometric_product.group0().yzx().with_w(geometric_product[e43]))
                + (self.group2().www() * geometric_product.group1().xyz()).with_w(self[e435] * geometric_product[e4125])
                + (geometric_product.group2().www() * self.group2().xyz()).with_w(self[e425] * geometric_product[e4315])
                - (geometric_product.group2().zxyx() * self.group0().yzx().with_w(self[e423]))
                - (geometric_product.group0().zxy() * self.group2().yzx()).with_w(self[e431] * geometric_product[e25])
                - (self.group1().yzx() * geometric_product.group1().zxy()).with_w(self[e412] * geometric_product[e35])
                - (self.group1().www() * geometric_product.group3().xyz()).with_w(self[e12345] * geometric_product[e45]),
            // e235, e315, e125, e5
            Simd32x4::from([
                self[e12345] * geometric_product[e15],
                self[e12345] * geometric_product[e25],
                self[e12345] * geometric_product[e35],
                -(self[e315] * geometric_product[e31]) - (self[e125] * geometric_product[e12]),
            ]) + (Simd32x4::from([geometric_product[e31], geometric_product[e4235], geometric_product[e23], geometric_product[e3215]]) * self.group2().zzyw())
                + (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], geometric_product[e4315]]) * self.group1().zyz().with_w(self[e315]))
                + (Simd32x4::from([geometric_product[e4125], geometric_product[e12], geometric_product[e4315], geometric_product[e4125]]) * self.group2().yxxz())
                + (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e4235]]) * self.group1().xxy().with_w(self[e235]))
                - (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e31], geometric_product[e35]]) * self.group2().xxx().with_w(self[e435]))
                - (Simd32x4::from([geometric_product[e4315], geometric_product[e23], geometric_product[e45], geometric_product[e23]]) * self.group2().zzzx())
                - (self.group1().yzxx() * geometric_product.group2().zxyx())
                - (self.group1().wwwy() * geometric_product.group2().xyzy())
                - (geometric_product.group1().zw().with_zw(geometric_product[e4235], geometric_product[e3215]) * self.group2().yyy().with_w(self[e321])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e425] * geometric_product[e4125]) + (self[e321] * geometric_product[e23]) + (self[e315] * geometric_product[e43]),
                (self[e435] * geometric_product[e4235]) + (self[e321] * geometric_product[e31]) + (self[e125] * geometric_product[e41]),
                (self[e415] * geometric_product[e4315]) + (self[e321] * geometric_product[e12]) + (self[e235] * geometric_product[e42]),
                -(self[e415] * geometric_product[e41]) - (self[e425] * geometric_product[e42]) - (self[e435] * geometric_product[e43]),
            ]) + (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], geometric_product[e1234]])
                * self.group0().zyz().with_w(self[e12345]))
                + (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e1234]]) * self.group0().xxy().with_w(self[e321]))
                - (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], geometric_product[e31]]) * self.group1().xxy().with_w(self[e431]))
                - (Simd32x4::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45], geometric_product[e4315]]) * self.group1().zyz().with_w(self[e431]))
                - (geometric_product.group3().xyzz() * self.group2().www().with_w(self[e412]))
                - (self.group0().yzx() * geometric_product.group2().zxy()).with_w(self[e423] * geometric_product[e23])
                - (geometric_product.group0().yzx() * self.group2().zxy()).with_w(self[e423] * geometric_product[e4235])
                - (geometric_product.group2().www() * self.group2().xyz()).with_w(self[e412] * geometric_product[e12]),
        );
    }
}
impl GeometricQuotient<DualNum> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        4        0
    //    simd2        0        1        0
    //    simd3        2        4        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        3       12        0
    //  no simd        7       30        0
    fn geometric_quotient(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DualNum::from_groups(/* e5, e12345 */ Simd32x2::from(f32::powi(other[e12345], -2) * -1.0) * other.group0());
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(geometric_product[e12345]) * self.group0().with_w(self[e12345]) * Simd32x4::from(-1.0),
            // e23, e31, e12, e45
            (-(Simd32x3::from(geometric_product[e5]) * self.group0()) - (Simd32x3::from(geometric_product[e12345]) * self.group1().xyz()))
                .with_w(self[e321] * geometric_product[e12345]),
            // e15, e25, e35, e1234
            (-(Simd32x3::from(geometric_product[e5]) * self.group1().xyz()) - (Simd32x3::from(geometric_product[e12345]) * self.group2().xyz())).with_w(0.0),
            // e4235, e4315, e4125, e3215
            geometric_product
                .group0()
                .xx()
                .with_zw(geometric_product[e5], (self[e321] * geometric_product[e5]) - (self[e12345] * geometric_product[e5]))
                * self.group0().with_w(1.0),
        );
    }
}
impl GeometricQuotient<FlatPoint> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       21        0
    //    simd3        0        4        0
    //    simd4        6        5        0
    // Totals...
    // yes simd       14       30        0
    //  no simd       32       53        0
    fn geometric_quotient(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = FlatPoint::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(f32::powi(other[e45], -2) * -1.0) * Simd32x4::from([other[e15] * -1.0, other[e25] * -1.0, other[e35] * -1.0, other[e45] * -1.0]),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x3::from(geometric_product[e45]) * self.group0()).with_w(
                -(self[e423] * geometric_product[e15]) - (self[e431] * geometric_product[e25]) - (self[e412] * geometric_product[e35]) - (self[e321] * geometric_product[e45]),
            ),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e412] * geometric_product[e25],
                self[e423] * geometric_product[e35],
                self[e431] * geometric_product[e15],
                -(self[e431] * geometric_product[e25]) - (self[e412] * geometric_product[e35]) - (self[e12345] * geometric_product[e45]),
            ]) - (geometric_product.group0().zxyx() * self.group0().yzx().with_w(self[e423])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e435] * geometric_product[e25]) + (self[e12345] * geometric_product[e15]),
                (self[e415] * geometric_product[e35]) + (self[e12345] * geometric_product[e25]),
                (self[e425] * geometric_product[e15]) + (self[e12345] * geometric_product[e35]),
                0.0,
            ]) - (self.group1().yzxx() * geometric_product.group0().zxyx())
                - (self.group1().wwwy() * geometric_product.group0().xyzy())
                - (geometric_product.group0().wwwz() * self.group2().xyz().with_w(self[e435])),
            // e1, e2, e3, e4
            (self.group0().zxy() * geometric_product.group0().yzx()).with_w(0.0)
                - (Simd32x3::from(geometric_product[e45]) * self.group1().xyz()).with_w(0.0)
                - (self.group0().yzx() * geometric_product.group0().zxy()).with_w(0.0),
        );
    }
}
impl GeometricQuotient<Flector> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       27        0
    //    simd3        0        3        0
    //    simd4       15       16        0
    // Totals...
    // yes simd       34       46        0
    //  no simd       79      100        0
    fn geometric_quotient(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let reverse = Flector::from_groups(
            // e15, e25, e35, e45
            other.group0() * Simd32x4::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group1(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            -f32::powi(other[e45], 2) - f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2),
        );
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e423] * geometric_product[e45]) + (self[e412] * geometric_product[e4315]),
                (self[e423] * geometric_product[e4125]) + (self[e431] * geometric_product[e45]),
                (self[e431] * geometric_product[e4235]) + (self[e412] * geometric_product[e45]),
                -(self[e431] * geometric_product[e25]) - (self[e412] * geometric_product[e35]) - (self[e321] * geometric_product[e45]),
            ]) - (self.group0().yzx() * geometric_product.group1().zxy()).with_w(self[e423] * geometric_product[e15]),
            // e415, e425, e435, e321
            (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], geometric_product[e4315]]) * self.group0().zyz().with_w(self[e425]))
                + (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e4235]]) * self.group0().xxy().with_w(self[e415]))
                + Simd32x3::from(0.0).with_w((self[e435] * geometric_product[e4125]) - (self[e412] * geometric_product[e35]) - (self[e12345] * geometric_product[e45]))
                - (geometric_product.group0().zxyx() * self.group0().yzx().with_w(self[e423]))
                - (self.group1().www() * geometric_product.group1().xyz()).with_w(self[e431] * geometric_product[e25]),
            // e235, e315, e125, e5
            (Simd32x4::from(self[e12345]) * geometric_product.group0().xyz().with_w(geometric_product[e3215]))
                + (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], geometric_product[e4315]]) * self.group1().zyz().with_w(self[e315]))
                + (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e4235]]) * self.group1().xxy().with_w(self[e235]))
                + (self.group2().yzxz() * geometric_product.group1().zxyz())
                - (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], geometric_product[e35]]) * self.group2().xxy().with_w(self[e435]))
                - (Simd32x4::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45], geometric_product[e3215]]) * self.group2().zyz().with_w(self[e321]))
                - (self.group1().yzxx() * geometric_product.group0().zxyx())
                - (self.group1().wwwy() * geometric_product.group0().xyzy()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e423] * geometric_product[e3215]) + (self[e412] * geometric_product[e25]) + (self[e425] * geometric_product[e4125])
                    - (self[e12345] * geometric_product[e4235]),
                (self[e423] * geometric_product[e35]) + (self[e431] * geometric_product[e3215]) + (self[e435] * geometric_product[e4235])
                    - (self[e12345] * geometric_product[e4315]),
                (self[e431] * geometric_product[e15]) + (self[e412] * geometric_product[e3215]) + (self[e415] * geometric_product[e4315])
                    - (self[e12345] * geometric_product[e4125]),
                0.0,
            ]) - (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], geometric_product[e4315]]) * self.group1().xxy().with_w(self[e431]))
                - (Simd32x4::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45], geometric_product[e4125]]) * self.group1().zyz().with_w(self[e412]))
                - (self.group0().yzx() * geometric_product.group0().zxy()).with_w(self[e423] * geometric_product[e4235]),
        );
    }
}
impl GeometricQuotient<Line> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       43        0
    //    simd3        0       11        0
    //    simd4        9        2        0
    // Totals...
    // yes simd       27       56        0
    //  no simd       54       84        0
    fn geometric_quotient(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let reverse = Line::from_groups(
            // e415, e425, e435
            other.group0() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group1() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(/* scalar */ -f32::powi(other[e415], 2) - f32::powi(other[e425], 2) - f32::powi(other[e435], 2));
        let geometric_product = Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group1(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e412] * geometric_product[e425] * -1.0,
                self[e423] * geometric_product[e435] * -1.0,
                self[e431] * geometric_product[e415] * -1.0,
                (self[e431] * geometric_product[e315])
                    + (self[e412] * geometric_product[e125])
                    + (self[e415] * geometric_product[e415])
                    + (self[e425] * geometric_product[e425])
                    + (self[e435] * geometric_product[e435]),
            ]) + (self.group0().yzx() * geometric_product.group0().zxy()).with_w(self[e423] * geometric_product[e235]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e431] * geometric_product[e125]) + (self[e425] * geometric_product[e435]),
                (self[e412] * geometric_product[e235]) + (self[e435] * geometric_product[e415]),
                (self[e423] * geometric_product[e315]) + (self[e415] * geometric_product[e425]),
                0.0,
            ]) - (self.group1().zx().with_zw(self[e12345], geometric_product[e125]) * geometric_product.group0().yzz().with_w(self[e412]))
                - (self.group2().ww().with_zw(self[e425], geometric_product[e315]) * geometric_product.group0().xyx().with_w(self[e431]))
                - (self.group0().zxy() * geometric_product.group1().yzx()).with_w(self[e423] * geometric_product[e235]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(self[e435] * geometric_product[e315]) - (self[e125] * geometric_product[e425]) - (self[e12345] * geometric_product[e235]),
                -(self[e415] * geometric_product[e125]) - (self[e235] * geometric_product[e435]) - (self[e12345] * geometric_product[e315]),
                -(self[e425] * geometric_product[e235]) - (self[e315] * geometric_product[e415]) - (self[e12345] * geometric_product[e125]),
                0.0,
            ]) + (geometric_product.group0().zxy() * self.group2().yzx()).with_w(self[e423] * geometric_product[e415])
                + (geometric_product.group1().xxy() * self.group1().wzx()).with_w(self[e431] * geometric_product[e425])
                + (geometric_product.group1().zyz() * self.group1().yww()).with_w(self[e412] * geometric_product[e435]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e431] * geometric_product[e125] * -1.0,
                self[e412] * geometric_product[e235] * -1.0,
                self[e423] * geometric_product[e315] * -1.0,
                (self[e415] * geometric_product[e235]) + (self[e425] * geometric_product[e315]) + (self[e435] * geometric_product[e125]) + (self[e125] * geometric_product[e435]),
            ]) + (geometric_product.group0() * self.group1().www()).with_w(self[e315] * geometric_product[e425])
                + (self.group0().zxy() * geometric_product.group1().yzx()).with_w(self[e235] * geometric_product[e415]),
        );
    }
}
impl GeometricQuotient<Motor> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       44        0
    //    simd3        0        5        0
    //    simd4       13       12        0
    // Totals...
    // yes simd       41       61        0
    //  no simd       80      107        0
    fn geometric_quotient(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let reverse = Motor::from_groups(
            // e415, e425, e435, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            -f32::powi(other[e415], 2) - f32::powi(other[e425], 2) - f32::powi(other[e435], 2) - f32::powi(other[e12345], 2),
        );
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e235, e315, e125, e5
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e412] * geometric_product[e425] * -1.0,
                self[e431] * geometric_product[e12345] * -1.0,
                self[e412] * geometric_product[e12345] * -1.0,
                (self[e431] * geometric_product[e315])
                    + (self[e412] * geometric_product[e125])
                    + (self[e415] * geometric_product[e415])
                    + (self[e425] * geometric_product[e425])
                    + (self[e435] * geometric_product[e435]),
            ]) + (self.group0().yzx() * geometric_product.group0().zxy()).with_w(self[e423] * geometric_product[e235])
                - (geometric_product.group0().wzxw() * self.group0().xxy().with_w(self[e12345])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e425] * geometric_product[e435]) - (self[e435] * geometric_product[e425]) - (self[e12345] * geometric_product[e415]),
                (self[e435] * geometric_product[e415]) - (self[e425] * geometric_product[e12345]) - (self[e12345] * geometric_product[e425]),
                (self[e415] * geometric_product[e425]) - (self[e435] * geometric_product[e12345]) - (self[e12345] * geometric_product[e435]),
                0.0,
            ]) + (self.group0().yzx() * geometric_product.group1().zxy()).with_w(self[e321] * geometric_product[e12345])
                - (geometric_product.group1().ywwy() * self.group0().zyz().with_w(self[e431]))
                - (geometric_product.group1().wzxx() * self.group0().xxy().with_w(self[e423]))
                - (self.group1().xxy() * geometric_product.group0().wzx()).with_w(self[e412] * geometric_product[e125]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(self[e415] * geometric_product[e5])
                    - (self[e435] * geometric_product[e315])
                    - (self[e235] * geometric_product[e12345])
                    - (self[e125] * geometric_product[e425])
                    - (self[e12345] * geometric_product[e235]),
                -(self[e415] * geometric_product[e125])
                    - (self[e425] * geometric_product[e5])
                    - (self[e235] * geometric_product[e435])
                    - (self[e315] * geometric_product[e12345])
                    - (self[e12345] * geometric_product[e315]),
                -(self[e425] * geometric_product[e235])
                    - (self[e435] * geometric_product[e5])
                    - (self[e315] * geometric_product[e415])
                    - (self[e125] * geometric_product[e12345])
                    - (self[e12345] * geometric_product[e125]),
                0.0,
            ]) + (geometric_product.group0().zxyz() * self.group2().yzx().with_w(self[e412]))
                + (self.group1().yzx() * geometric_product.group1().zxy()).with_w(self[e423] * geometric_product[e415])
                + (self.group1().www() * geometric_product.group1().xyz()).with_w(self[e431] * geometric_product[e425]),
            // e4235, e4315, e4125, e3215
            (self.group1().wwwz() * geometric_product.group0().xyz().with_w(geometric_product[e125]))
                + (geometric_product.group1().ywwy() * self.group0().zyz().with_w(self[e425]))
                + (geometric_product.group1().wzxx() * self.group0().xxy().with_w(self[e415]))
                + Simd32x3::from(0.0).with_w(
                    (self[e321] * geometric_product[e5]) + (self[e235] * geometric_product[e415]) + (self[e315] * geometric_product[e425]) + (self[e125] * geometric_product[e435]),
                )
                - (geometric_product.group1().zxyw() * self.group0().yzx().with_w(self[e12345])),
        );
    }
}
impl GeometricQuotient<MultiVector> for CircleRotor {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       73       99        0
    //    simd2        3        4        0
    //    simd3       40       64        0
    //    simd4       36       31        0
    // Totals...
    // yes simd      152      198        0
    //  no simd      343      423        0
    fn geometric_quotient(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let reverse = MultiVector::from_groups(
            // scalar, e12345
            other.group0(),
            // e1, e2, e3, e4
            other.group1(),
            // e5
            other[e5],
            // e15, e25, e35, e45
            other.group3() * Simd32x4::from(-1.0),
            // e41, e42, e43
            other.group4() * Simd32x3::from(-1.0),
            // e23, e31, e12
            other.group5() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group6() * Simd32x4::from(-1.0),
            // e423, e431, e412
            other.group7() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group8() * Simd32x3::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group9(),
            // e1234
            other[e1234],
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e15] * other[e41])
                + 2.0 * (other[e25] * other[e42])
                + 2.0 * (other[e35] * other[e43])
                + 2.0 * (other[e3215] * other[e1234])
                + f32::powi(other[scalar], 2)
                + f32::powi(other[e1], 2)
                + f32::powi(other[e2], 2)
                + f32::powi(other[e3], 2)
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                + f32::powi(other[e321], 2)
                - f32::powi(other[e12345], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2)
                - 2.0 * (other[e4] * other[e5])
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(other_2[scalar]) * reverse.group0(),
            // e1, e2, e3, e4
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e5
            reverse[e5] * other_2[scalar],
            // e15, e25, e35, e45
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group4(),
            // e23, e31, e12
            Simd32x3::from(other_2[scalar]) * reverse.group5(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group6(),
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group7(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group8(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group9(),
            // e1234
            reverse[e1234] * other_2[scalar],
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e423] * geometric_product[e235])
                    + (self[e431] * geometric_product[e315])
                    + (self[e412] * geometric_product[e125])
                    + (self[e415] * geometric_product[e415])
                    + (self[e425] * geometric_product[e425])
                    + (self[e435] * geometric_product[e435])
                    + (self[e315] * geometric_product[e431])
                    + (self[e125] * geometric_product[e412]),
                -(self[e423] * geometric_product[e15])
                    - (self[e431] * geometric_product[e25])
                    - (self[e412] * geometric_product[e35])
                    - (self[e425] * geometric_product[e31])
                    - (self[e435] * geometric_product[e12])
                    - (self[e321] * geometric_product[e45])
                    - (self[e315] * geometric_product[e42])
                    - (self[e125] * geometric_product[e43]),
            ]) + (Simd32x2::from([geometric_product[e423], geometric_product[scalar]]) * self.group2().xw())
                - (Simd32x2::from([geometric_product[e12345], geometric_product[e41]]) * self.group2().wx())
                - (Simd32x2::from([geometric_product[e321], geometric_product[e23]]) * self.group1().wx()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e425] * geometric_product[e4125]) + (self[e321] * geometric_product[e23]) + (self[e315] * geometric_product[e43]),
                (self[e435] * geometric_product[e4235]) + (self[e321] * geometric_product[e31]) + (self[e125] * geometric_product[e41]),
                (self[e415] * geometric_product[e4315]) + (self[e321] * geometric_product[e12]) + (self[e235] * geometric_product[e42]),
                -(self[e415] * geometric_product[e41]) - (self[e425] * geometric_product[e42]) - (self[e435] * geometric_product[e43]),
            ]) + (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], geometric_product[e1234]])
                * self.group0().zyz().with_w(self[e12345]))
                + (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e1234]]) * self.group0().xxy().with_w(self[e321]))
                - (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], geometric_product[e31]]) * self.group1().xxy().with_w(self[e431]))
                - (Simd32x4::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45], geometric_product[e4315]]) * self.group1().zyz().with_w(self[e431]))
                - (geometric_product.group9().xyzz() * self.group2().www().with_w(self[e412]))
                - (Simd32x3::from(geometric_product[e1234]) * self.group2().xyz()).with_w(self[e412] * geometric_product[e12])
                - (self.group0().yzx() * geometric_product.group3().zxy()).with_w(self[e423] * geometric_product[e23])
                - (geometric_product.group4().yzx() * self.group2().zxy()).with_w(self[e423] * geometric_product[e4235]),
            // e5
            (self[e235] * geometric_product[e4235]) + (self[e315] * geometric_product[e4315]) + (self[e125] * geometric_product[e4125]) + (self[e12345] * geometric_product[e3215])
                - (self[e415] * geometric_product[e15])
                - (self[e425] * geometric_product[e25])
                - (self[e435] * geometric_product[e35])
                - (self[e321] * geometric_product[e3215])
                - (self[e235] * geometric_product[e23])
                - (self[e315] * geometric_product[e31])
                - (self[e125] * geometric_product[e12]),
            // e15, e25, e35, e45
            Simd32x4::from([
                self[e125] * geometric_product[e425] * -1.0,
                self[e315] * geometric_product[e321] * -1.0,
                self[e125] * geometric_product[e321] * -1.0,
                self[e12345] * geometric_product[e321],
            ]) + (self.group1().wzxw() * geometric_product.group8().xxy().with_w(geometric_product[e12345]))
                + (geometric_product.group8().zyz() * self.group1().yww()).with_w(self[e235] * geometric_product[e423])
                + (self.group2().yzx() * geometric_product.group1().zxy()).with_w(self[e315] * geometric_product[e431])
                + (self.group2().yzx() * geometric_product.group6().zxy()).with_w(self[e125] * geometric_product[e412])
                - (Simd32x4::from([geometric_product[e2], geometric_product[e435], geometric_product[e415], geometric_product[e3]]) * self.group2().zxy().with_w(self[e435]))
                - (Simd32x4::from([geometric_product[e321], geometric_product[e3], geometric_product[e1], geometric_product[e2]]) * self.group2().xxy().with_w(self[e425]))
                - (self.group1().xyzx() * Simd32x3::from(geometric_product[e5]).with_w(geometric_product[e1]))
                - (geometric_product.group0().yy().with_zw(geometric_product[e12345], self[e423]) * self.group2().xyz().with_w(geometric_product[e235]))
                - (self.group1().zx().with_zw(self[e12345], geometric_product[e125]) * geometric_product.group8().yzz().with_w(self[e412]))
                - (self.group2().ww().with_zw(self[e425], geometric_product[e315]) * geometric_product.group8().xyx().with_w(self[e431])),
            // e41, e42, e43
            (Simd32x3::from(self[e423]) * Simd32x3::from([geometric_product[e321], geometric_product[e3], geometric_product[e425]]))
                + (Simd32x3::from(self[e431]) * Simd32x3::from([geometric_product[e435], geometric_product[e321], geometric_product[e1]]))
                + (Simd32x3::from(self[e412]) * Simd32x3::from([geometric_product[e2], geometric_product[e415], geometric_product[e321]]))
                + (geometric_product.group7().zxy() * self.group1().yzx())
                - (Simd32x3::from(geometric_product[e12345]) * self.group0())
                - (Simd32x3::from(geometric_product[e4]) * self.group1().xyz())
                - (Simd32x3::from([self[e435], self[e415], self[e12345]]) * geometric_product.group7().yzz())
                - (Simd32x3::from([self[e12345], self[e12345], self[e321]]) * geometric_product.group7())
                - (Simd32x3::from([geometric_product[e3], geometric_product[e435], geometric_product[e2]]) * self.group0().yxx())
                - (Simd32x3::from([geometric_product[e425], geometric_product[e1], geometric_product[e415]]) * self.group0().zzy())
                - (geometric_product.group7().xyx() * self.group1().wwy()),
            // e23, e31, e12
            (self.group0().yzx() * geometric_product.group8().zxy())
                + (geometric_product.group7().zxy() * self.group2().yzx())
                + (self.group1().yzx() * geometric_product.group6().zxy())
                - (Simd32x3::from(self[e321]) * geometric_product.group1().xyz())
                - (Simd32x3::from(self[e12345]) * geometric_product.group6().xyz())
                - (Simd32x3::from(geometric_product[e12345]) * self.group1().xyz())
                - (Simd32x3::from(geometric_product[e4]) * self.group2().xyz())
                - (Simd32x3::from([geometric_product[e5], geometric_product[e125], geometric_product[e235]]) * self.group0().xxy())
                - (Simd32x3::from([geometric_product[e315], geometric_product[e5], geometric_product[e5]]) * self.group0().zyz())
                - (geometric_product.group7().yzx() * self.group2().zxy())
                - (self.group1().zxy() * geometric_product.group6().yzx()),
            // e415, e425, e435, e321
            (Simd32x4::from(geometric_product[scalar]) * self.group1())
                + (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], self[e315]]) * self.group0().zyz().with_w(geometric_product[e42]))
                + (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], self[e235]]) * self.group0().xxy().with_w(geometric_product[e41]))
                + (self.group2().zxyz() * geometric_product.group4().yzx().with_w(geometric_product[e43]))
                + (self.group1().zx().with_zw(self[e12345], geometric_product[e4315]) * geometric_product.group5().yzz().with_w(self[e425]))
                + (self.group2().ww().with_zw(self[e425], geometric_product[e4235]) * geometric_product.group5().xyx().with_w(self[e415]))
                + (Simd32x3::from(geometric_product[e1234]) * self.group2().xyz()).with_w(self[e435] * geometric_product[e4125])
                - (geometric_product.group3().zxyx() * self.group0().yzx().with_w(self[e423]))
                - (geometric_product.group4().zxy() * self.group2().yzx()).with_w(self[e431] * geometric_product[e25])
                - (geometric_product.group5().zxy() * self.group1().yzx()).with_w(self[e412] * geometric_product[e35])
                - (self.group1().www() * geometric_product.group9().xyz()).with_w(self[e12345] * geometric_product[e45]),
            // e423, e431, e412
            (Simd32x3::from(geometric_product[scalar]) * self.group0())
                + (Simd32x3::from(geometric_product[e1234]) * self.group1().xyz())
                + (Simd32x3::from([self[e435], self[e415], self[e12345]]) * geometric_product.group4().yzz())
                + (Simd32x3::from([self[e12345], self[e12345], self[e321]]) * geometric_product.group4())
                + (Simd32x3::from([geometric_product[e45], geometric_product[e12], geometric_product[e23]]) * self.group0().xxy())
                + (Simd32x3::from([geometric_product[e31], geometric_product[e4125], geometric_product[e4235]]) * self.group0().zxy())
                + (Simd32x3::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45]]) * self.group0().zyz())
                + (geometric_product.group4().xyx() * self.group1().wwy())
                - (self.group0().yzx() * geometric_product.group5().zxy())
                - (self.group0().yzx() * geometric_product.group9().zxy())
                - (geometric_product.group4().zxy() * self.group1().yzx()),
            // e235, e315, e125
            (Simd32x3::from(self[e12345]) * geometric_product.group3().xyz())
                + (Simd32x3::from(geometric_product[scalar]) * self.group2().xyz())
                + (Simd32x3::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215]]) * self.group1().zyz())
                + (Simd32x3::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15]]) * self.group1().xxy())
                + (geometric_product.group5().yzx() * self.group2().zxy())
                + (self.group2().yzx() * geometric_product.group9().zxy())
                - (Simd32x3::from(self[e321]) * geometric_product.group3().xyz())
                - (Simd32x3::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235]]) * self.group2().xxy())
                - (Simd32x3::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45]]) * self.group2().zyz())
                - (geometric_product.group5().zxy() * self.group2().yzx())
                - (self.group1().yzx() * geometric_product.group3().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(self[e425] * geometric_product[e3]) - (self[e235] * geometric_product[e4]) - (self[e125] * geometric_product[e431]),
                -(self[e435] * geometric_product[e1]) - (self[e235] * geometric_product[e412]) - (self[e315] * geometric_product[e4]),
                -(self[e415] * geometric_product[e2]) - (self[e315] * geometric_product[e423]) - (self[e125] * geometric_product[e4]),
                (self[e315] * geometric_product[e425]) + (self[e125] * geometric_product[e3]) + (self[e125] * geometric_product[e435]),
            ]) + (Simd32x4::from([geometric_product[e2], geometric_product[e321], geometric_product[e321], geometric_product[e1]]) * self.group1().zyz().with_w(self[e235]))
                + (Simd32x4::from([geometric_product[e5], geometric_product[e125], geometric_product[e235], self[e415]]) * self.group0().xxy().with_w(geometric_product[e235]))
                + (Simd32x4::from([geometric_product[e321], geometric_product[e3], geometric_product[e1], geometric_product[e5]]) * self.group1().xxyw())
                + (Simd32x4::from([geometric_product[e315], geometric_product[e5], geometric_product[e5], self[e425]]) * self.group0().zyz().with_w(geometric_product[e315]))
                + (self.group2().wwwy() * geometric_product.group1().xyzy())
                + (geometric_product.group6().xyzx() * self.group1().www().with_w(self[e235]))
                + (geometric_product.group7().zxy() * self.group2().yzx()).with_w(self[e435] * geometric_product[e125])
                - (self.group0().yzx() * geometric_product.group8().zxy()).with_w(self[e12345] * geometric_product[e5]),
            // e1234
            (self[e423] * geometric_product[e415])
                + (self[e431] * geometric_product[e425])
                + (self[e412] * geometric_product[e435])
                + (self[e415] * geometric_product[e423])
                + (self[e425] * geometric_product[e431])
                + (self[e435] * geometric_product[e412])
                - (self[e423] * geometric_product[e1])
                - (self[e431] * geometric_product[e2])
                - (self[e412] * geometric_product[e3])
                - (self[e321] * geometric_product[e4])
                - (self[e12345] * geometric_product[e4]),
        );
    }
}
impl GeometricQuotient<Plane> for CircleRotor {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       24        0
    //    simd3        1        2        0
    //    simd4        5        6        0
    // Totals...
    // yes simd       14       32        0
    //  no simd       31       54        0
    fn geometric_quotient(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Plane::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(-f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2)) * other.group0(),
        );
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (self.group0().zxy() * geometric_product.group0().yzx()) - (self.group0().yzx() * geometric_product.group0().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e321] * geometric_product[e4235] * -1.0,
                self[e321] * geometric_product[e4315] * -1.0,
                self[e321] * geometric_product[e4125] * -1.0,
                (self[e425] * geometric_product[e4315]) + (self[e435] * geometric_product[e4125]),
            ]) + (geometric_product.group0().wwwx() * self.group0().with_w(self[e415])),
            // e235, e315, e125, e4
            Simd32x4::from([
                (self[e415] * geometric_product[e3215]) + (self[e315] * geometric_product[e4125]),
                (self[e425] * geometric_product[e3215]) + (self[e125] * geometric_product[e4235]),
                (self[e435] * geometric_product[e3215]) + (self[e235] * geometric_product[e4315]),
                -(self[e431] * geometric_product[e4315]) - (self[e412] * geometric_product[e4125]),
            ]) - (geometric_product.group0().yzxx() * self.group2().zxy().with_w(self[e423])),
            // e1, e2, e3, e5
            Simd32x4::from([
                self[e12345] * geometric_product[e4235] * -1.0,
                self[e12345] * geometric_product[e4315] * -1.0,
                self[e12345] * geometric_product[e4125] * -1.0,
                (self[e125] * geometric_product[e4125]) + (self[e12345] * geometric_product[e3215]),
            ]) + (geometric_product.group0().zxyy() * self.group1().yzx().with_w(self[e315]))
                + (geometric_product.group0().wwwx() * self.group0().with_w(self[e235]))
                - (self.group1().zxyw() * geometric_product.group0().yzxw()),
        );
    }
}
impl GeometricQuotient<RoundPoint> for CircleRotor {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       19        0
    //    simd3        2        6        0
    //    simd4        8        7        0
    // Totals...
    // yes simd       15       32        0
    //  no simd       43       65        0
    fn geometric_quotient(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2) - 2.0 * (other[e4] * other[e5]),
        );
        let geometric_product = RoundPoint::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from(other_2[scalar]) * other.group0(), /* e5 */ other[e5] * other_2[scalar]);
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (self.group0().zxy() * geometric_product.group0().yzx())
                - (Simd32x3::from(geometric_product[e4]) * self.group1().xyz())
                - (self.group0().yzx() * geometric_product.group0().zxy()),
            // e23, e31, e12, e45
            -(self.group1().wwwy() * geometric_product.group0().xyzy())
                - (geometric_product.group0().wwwz() * self.group2().xyz().with_w(self[e435]))
                - (Simd32x3::from(geometric_product[e5]) * self.group0()).with_w(self[e415] * geometric_product[e1]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                self[e315] * geometric_product[e3],
                self[e125] * geometric_product[e1],
                self[e235] * geometric_product[e2],
                -(self[e412] * geometric_product[e3]) - (self[e321] * geometric_product[e4]) - (self[e12345] * geometric_product[e4]),
            ]) - (geometric_product.group0().yzxy() * self.group2().zxy().with_w(self[e431]))
                - (Simd32x3::from(geometric_product[e5]) * self.group1().xyz()).with_w(self[e423] * geometric_product[e1]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e235] * geometric_product[e4] * -1.0,
                self[e315] * geometric_product[e4] * -1.0,
                self[e125] * geometric_product[e4] * -1.0,
                self[e125] * geometric_product[e3],
            ]) + (Simd32x4::from(geometric_product[e5]) * self.group0().with_w(self[e321]))
                + (self.group2().wwwy() * geometric_product.group0().xyzy())
                + (geometric_product.group0().yzxx() * self.group1().zxy().with_w(self[e235]))
                - (self.group1().yzx() * geometric_product.group0().zxy()).with_w(self[e12345] * geometric_product[e5]),
        );
    }
}
impl GeometricQuotient<Scalar> for CircleRotor {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        0        1
    //    simd3        0        1        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        3        1
    //  no simd        0       11        1
    fn geometric_quotient(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Scalar::from_groups(/* scalar */ 1.0 / other[scalar]);
        return CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(geometric_product[scalar]) * self.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(geometric_product[scalar]) * self.group1(),
            // e235, e315, e125, e12345
            Simd32x4::from(geometric_product[scalar]) * self.group2(),
        );
    }
}
impl GeometricQuotient<Sphere> for CircleRotor {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       21        0
    //    simd3        2        4        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       18       33        0
    //  no simd       46       65        0
    fn geometric_quotient(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e3215] * other[e1234]) - f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2),
        );
        let geometric_product = Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * other.group0(),
            // e1234
            other_2[scalar] * other[e1234],
        );
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(geometric_product[e1234]) * self.group1().xyz()) + (self.group0().zxy() * geometric_product.group0().yzx())
                - (self.group0().yzx() * geometric_product.group0().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e321] * geometric_product[e4235] * -1.0,
                self[e321] * geometric_product[e4315] * -1.0,
                self[e321] * geometric_product[e4125] * -1.0,
                self[e435] * geometric_product[e4125],
            ]) + (geometric_product.group0().wwwx() * self.group0().with_w(self[e415]))
                + (Simd32x3::from(geometric_product[e1234]) * self.group2().xyz()).with_w(self[e425] * geometric_product[e4315]),
            // e235, e315, e125, e4
            (self.group1() * geometric_product.group0().www().with_w(geometric_product[e1234]))
                + (self.group2().yzxw() * geometric_product.group0().zxy().with_w(geometric_product[e1234]))
                + Simd32x3::from(0.0).with_w(-(self[e431] * geometric_product[e4315]) - (self[e412] * geometric_product[e4125]))
                - (geometric_product.group0().yzxx() * self.group2().zxy().with_w(self[e423])),
            // e1, e2, e3, e5
            Simd32x4::from([
                -(self[e235] * geometric_product[e1234]) - (self[e12345] * geometric_product[e4235]),
                -(self[e315] * geometric_product[e1234]) - (self[e12345] * geometric_product[e4315]),
                -(self[e125] * geometric_product[e1234]) - (self[e12345] * geometric_product[e4125]),
                (self[e125] * geometric_product[e4125]) + (self[e12345] * geometric_product[e3215]),
            ]) + (geometric_product.group0().zxyy() * self.group1().yzx().with_w(self[e315]))
                + (geometric_product.group0().wwwx() * self.group0().with_w(self[e235]))
                - (self.group1().zxyw() * geometric_product.group0().yzxw()),
        );
    }
}
impl GeometricQuotient<VersorEven> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       43       63        0
    //    simd3        0        7        0
    //    simd4       32       32        0
    // Totals...
    // yes simd       75      102        0
    //  no simd      171      212        0
    fn geometric_quotient(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let reverse = VersorEven::from_groups(
            // e423, e431, e412, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e5
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e4
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)
                - f32::powi(other[e12345], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125])
                - 2.0 * (other[e5] * other[e4]),
        );
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e5
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e1, e2, e3, e4
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(self[e412] * geometric_product[e425])
                    - (self[e415] * geometric_product[e4])
                    - (self[e435] * geometric_product[e431])
                    - (self[e321] * geometric_product[e423])
                    - (self[e12345] * geometric_product[e423]),
                -(self[e412] * geometric_product[e1])
                    - (self[e415] * geometric_product[e412])
                    - (self[e425] * geometric_product[e4])
                    - (self[e321] * geometric_product[e431])
                    - (self[e12345] * geometric_product[e431]),
                -(self[e412] * geometric_product[e12345])
                    - (self[e425] * geometric_product[e423])
                    - (self[e435] * geometric_product[e4])
                    - (self[e321] * geometric_product[e412])
                    - (self[e12345] * geometric_product[e412]),
                (self[e425] * geometric_product[e425])
                    + (self[e435] * geometric_product[e435])
                    + (self[e235] * geometric_product[e423])
                    + (self[e315] * geometric_product[e431])
                    + (self[e125] * geometric_product[e412]),
            ]) + (Simd32x4::from(self[e423]) * Simd32x4::from([geometric_product[e321], geometric_product[e3], geometric_product[e425], geometric_product[e235]]))
                + (Simd32x4::from(self[e431]) * geometric_product.group1().zw().with_zw(geometric_product[e1], geometric_product[e315]))
                + (Simd32x4::from(self[e412]) * Simd32x4::from([geometric_product[e2], geometric_product[e415], geometric_product[e321], geometric_product[e125]]))
                + (self.group1().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e415]))
                - (Simd32x4::from([geometric_product[e12345], geometric_product[e435], geometric_product[e2], geometric_product[e321]]) * self.group0().xxx().with_w(self[e321]))
                - (Simd32x4::from([geometric_product[e3], geometric_product[e12345], geometric_product[e415], geometric_product[e12345]])
                    * self.group0().yyy().with_w(self[e12345])),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(self[e125] * geometric_product[e431]) - (self[e12345] * geometric_product[e415]),
                -(self[e315] * geometric_product[e4]) - (self[e12345] * geometric_product[e425]),
                -(self[e125] * geometric_product[e4]) - (self[e12345] * geometric_product[e435]),
                (self[e125] * geometric_product[e412]) + (self[e12345] * geometric_product[e321]),
            ]) + (self.group2().yzxy() * geometric_product.group0().zxyy())
                + (self.group0().yzx() * geometric_product.group2().zxy()).with_w(self[e321] * geometric_product[e12345])
                + (self.group1().yzx() * geometric_product.group1().zxy()).with_w(self[e235] * geometric_product[e423])
                - (Simd32x4::from([geometric_product[e12345], geometric_product[e435], geometric_product[e415], geometric_product[e125]]) * self.group1().xxy().with_w(self[e412]))
                - (Simd32x4::from([geometric_product[e425], geometric_product[e12345], geometric_product[e12345], geometric_product[e1]]) * self.group1().zyzx())
                - (Simd32x4::from([geometric_product[e4], geometric_product[e412], geometric_product[e423], geometric_product[e3]]) * self.group2().xxy().with_w(self[e435]))
                - (self.group1().wwwy() * geometric_product.group3().xyzy())
                - (geometric_product.group2().ywwy() * self.group0().zyz().with_w(self[e431]))
                - (geometric_product.group2().wzxx() * self.group0().xxy().with_w(self[e423])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(self[e125] * geometric_product[e2]) - (self[e12345] * geometric_product[e235]),
                -(self[e315] * geometric_product[e321]) - (self[e12345] * geometric_product[e315]),
                -(self[e125] * geometric_product[e321]) - (self[e12345] * geometric_product[e125]),
                (self[e425] * geometric_product[e431]) + (self[e435] * geometric_product[e412]),
            ]) + (geometric_product.group1().zxyz() * self.group2().yzx().with_w(self[e412]))
                + (self.group1().yzx() * geometric_product.group2().zxy()).with_w(self[e423] * geometric_product[e415])
                + (self.group1().www() * geometric_product.group2().xyz()).with_w(self[e431] * geometric_product[e425])
                + (self.group2().yzx() * geometric_product.group3().zxy()).with_w(self[e415] * geometric_product[e423])
                - (Simd32x4::from([geometric_product[e12345], geometric_product[e435], geometric_product[e415], geometric_product[e3]]) * self.group2().xxy().with_w(self[e412]))
                - (Simd32x4::from([geometric_product[e425], geometric_product[e12345], geometric_product[e12345], geometric_product[e4]]) * self.group2().zyzw())
                - (Simd32x4::from([geometric_product[e321], geometric_product[e3], geometric_product[e1], geometric_product[e4]]) * self.group2().xxy().with_w(self[e321]))
                - (self.group1().xxy() * geometric_product.group2().wzx()).with_w(self[e423] * geometric_product[e1])
                - (self.group1().zyz() * geometric_product.group2().yww()).with_w(self[e431] * geometric_product[e2]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(self[e425] * geometric_product[e3]) - (self[e235] * geometric_product[e4]) - (self[e125] * geometric_product[e431]),
                -(self[e435] * geometric_product[e1]) - (self[e235] * geometric_product[e412]) - (self[e315] * geometric_product[e4]),
                -(self[e415] * geometric_product[e2]) - (self[e315] * geometric_product[e423]) - (self[e125] * geometric_product[e4]),
                (self[e315] * geometric_product[e2]) + (self[e125] * geometric_product[e435]) + (self[e125] * geometric_product[e3]),
            ]) + (Simd32x4::from([geometric_product[e321], geometric_product[e3], geometric_product[e1], geometric_product[e125]]) * self.group1().xxyz())
                + (Simd32x4::from([geometric_product[e2], geometric_product[e321], geometric_product[e321], geometric_product[e5]]) * self.group1().zyzw())
                + (self.group2().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e1]))
                + (self.group2().wwwy() * geometric_product.group3().xyz().with_w(geometric_product[e425]))
                + (geometric_product.group1().xyzx() * self.group1().www().with_w(self[e235]))
                + (geometric_product.group2().ywwy() * self.group0().zyz().with_w(self[e425]))
                + (geometric_product.group2().wzxx() * self.group0().xxy().with_w(self[e415]))
                - (geometric_product.group2().zxyw() * self.group0().yzx().with_w(self[e12345])),
        );
    }
}
impl GeometricQuotient<VersorOdd> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       47       62        0
    //    simd3        0        6        0
    //    simd4       31       33        0
    // Totals...
    // yes simd       78      101        0
    //  no simd      171      212        0
    fn geometric_quotient(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let reverse = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + 2.0 * (other[e1234] * other[e3215])
                + f32::powi(other[scalar], 2)
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2),
        );
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e423] * geometric_product[e45])
                    + (self[e412] * geometric_product[e31])
                    + (self[e412] * geometric_product[e4315])
                    + (self[e415] * geometric_product[e1234])
                    + (self[e435] * geometric_product[e42])
                    + (self[e321] * geometric_product[e41])
                    + (self[e12345] * geometric_product[e41]),
                (self[e423] * geometric_product[e4125])
                    + (self[e431] * geometric_product[scalar])
                    + (self[e431] * geometric_product[e45])
                    + (self[e415] * geometric_product[e43])
                    + (self[e425] * geometric_product[e1234])
                    + (self[e321] * geometric_product[e42])
                    + (self[e12345] * geometric_product[e42]),
                (self[e431] * geometric_product[e4235])
                    + (self[e412] * geometric_product[scalar])
                    + (self[e412] * geometric_product[e45])
                    + (self[e425] * geometric_product[e41])
                    + (self[e435] * geometric_product[e1234])
                    + (self[e321] * geometric_product[e43])
                    + (self[e12345] * geometric_product[e43]),
                -(self[e415] * geometric_product[e23])
                    - (self[e425] * geometric_product[e31])
                    - (self[e435] * geometric_product[e12])
                    - (self[e321] * geometric_product[e45])
                    - (self[e235] * geometric_product[e41])
                    - (self[e315] * geometric_product[e42])
                    - (self[e125] * geometric_product[e43]),
            ]) + (Simd32x4::from([geometric_product[scalar], geometric_product[e12], geometric_product[e23], geometric_product[scalar]])
                * self.group0().xxy().with_w(self[e12345]))
                - (self.group0().yzx() * geometric_product.group1().zxy()).with_w(self[e423] * geometric_product[e15])
                - (self.group0().yzx() * geometric_product.group3().zxy()).with_w(self[e431] * geometric_product[e25])
                - (self.group1().yzx() * geometric_product.group0().zxy()).with_w(self[e412] * geometric_product[e35]),
            // e415, e425, e435, e321
            (Simd32x4::from([geometric_product[e42], geometric_product[e1234], geometric_product[e1234], geometric_product[e42]]) * self.group2().zyzy())
                + (Simd32x4::from([geometric_product[scalar], geometric_product[e12], geometric_product[e23], geometric_product[e4125]]) * self.group1().xxyz())
                + (Simd32x4::from([geometric_product[e31], geometric_product[scalar], geometric_product[scalar], geometric_product[scalar]]) * self.group1().zyzw())
                + (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], geometric_product[e4315]]) * self.group0().zyz().with_w(self[e425]))
                + (Simd32x4::from([geometric_product[e1234], geometric_product[e43], geometric_product[e41], geometric_product[e41]]) * self.group2().xxyx())
                + (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e4235]]) * self.group0().xxy().with_w(self[e415]))
                + (self.group2().wwwz() * geometric_product.group1().xyz().with_w(geometric_product[e43]))
                - (self.group2().yzxw() * geometric_product.group0().zxy().with_w(geometric_product[e45]))
                - (geometric_product.group2().zxyx() * self.group0().yzx().with_w(self[e423]))
                - (self.group1().yzx() * geometric_product.group1().zxy()).with_w(self[e431] * geometric_product[e25])
                - (self.group1().www() * geometric_product.group3().xyz()).with_w(self[e412] * geometric_product[e35]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e125] * geometric_product[e31]) + (self[e12345] * geometric_product[e15]),
                (self[e125] * geometric_product[e4235]) + (self[e12345] * geometric_product[e25]),
                (self[e125] * geometric_product[scalar]) + (self[e12345] * geometric_product[e35]),
                -(self[e315] * geometric_product[e31]) - (self[e125] * geometric_product[e12]),
            ]) + (Simd32x4::from([geometric_product[scalar], geometric_product[e12], geometric_product[e4315], geometric_product[e4125]]) * self.group2().xxxz())
                + (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], geometric_product[e4315]]) * self.group1().zyz().with_w(self[e315]))
                + (Simd32x4::from([geometric_product[e4125], geometric_product[scalar], geometric_product[e23], geometric_product[e3215]]) * self.group2().yyyw())
                + (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e4235]]) * self.group1().xxy().with_w(self[e235]))
                - (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e31], geometric_product[e35]]) * self.group2().xxx().with_w(self[e435]))
                - (Simd32x4::from([geometric_product[e4315], geometric_product[e23], geometric_product[e45], geometric_product[e23]]) * self.group2().zzzx())
                - (self.group1().yzxx() * geometric_product.group2().zxyx())
                - (self.group1().wwwy() * geometric_product.group2().xyzy())
                - (geometric_product.group1().zw().with_zw(geometric_product[e4235], geometric_product[e3215]) * self.group2().yyy().with_w(self[e321])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e425] * geometric_product[e4125]) + (self[e321] * geometric_product[e23]) + (self[e315] * geometric_product[e43]),
                (self[e435] * geometric_product[e4235]) + (self[e321] * geometric_product[e31]) + (self[e125] * geometric_product[e41]),
                (self[e415] * geometric_product[e4315]) + (self[e321] * geometric_product[e12]) + (self[e235] * geometric_product[e42]),
                -(self[e415] * geometric_product[e41]) - (self[e425] * geometric_product[e42]) - (self[e435] * geometric_product[e43]),
            ]) + (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], geometric_product[e1234]])
                * self.group0().zyz().with_w(self[e12345]))
                + (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e1234]]) * self.group0().xxy().with_w(self[e321]))
                - (Simd32x4::from([geometric_product[e42], geometric_product[e1234], geometric_product[e1234], geometric_product[e12]]) * self.group2().zyz().with_w(self[e412]))
                - (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], geometric_product[e4235]]) * self.group1().xxy().with_w(self[e423]))
                - (Simd32x4::from([geometric_product[e1234], geometric_product[e43], geometric_product[e41], geometric_product[e4315]]) * self.group2().xxy().with_w(self[e431]))
                - (Simd32x4::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45], geometric_product[e31]]) * self.group1().zyz().with_w(self[e431]))
                - (geometric_product.group3().xyzz() * self.group2().www().with_w(self[e412]))
                - (self.group0().yzx() * geometric_product.group2().zxy()).with_w(self[e423] * geometric_product[e23]),
        );
    }
}
impl std::ops::Div<GeometricQuotientInfix> for Dipole {
    type Output = GeometricQuotientInfixPartial<Dipole>;
    fn div(self, _rhs: GeometricQuotientInfix) -> Self::Output {
        GeometricQuotientInfixPartial(self)
    }
}
impl GeometricQuotient<AntiCircleRotor> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       41       64        0
    //    simd3        0       14        0
    //    simd4       15        8        0
    // Totals...
    // yes simd       56       86        0
    //  no simd      101      138        0
    fn geometric_quotient(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiCircleRotor::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, scalar
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                + f32::powi(other[scalar], 2)
                - f32::powi(other[e45], 2),
        );
        let geometric_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (geometric_product[e31] * self[e43]) + (geometric_product[e45] * self[e41]) + (geometric_product[scalar] * self[e41]),
                (geometric_product[e12] * self[e41]) + (geometric_product[e45] * self[e42]) + (geometric_product[scalar] * self[e42]),
                (geometric_product[e23] * self[e42]) + (geometric_product[e45] * self[e43]) + (geometric_product[scalar] * self[e43]),
                -(geometric_product[e23] * self[e23])
                    - (geometric_product[e31] * self[e31])
                    - (geometric_product[e12] * self[e12])
                    - (geometric_product[e15] * self[e41])
                    - (geometric_product[e25] * self[e42])
                    - (geometric_product[e35] * self[e43]),
            ]) + (self.group1().zxyw() * geometric_product.group0().yzx().with_w(geometric_product[e45]))
                - (geometric_product.group0().xxy() * self.group1().wzx()).with_w(geometric_product[e41] * self[e15])
                - (geometric_product.group0().zyz() * self.group1().yww()).with_w(geometric_product[e42] * self[e25])
                - (self.group0().yzx() * geometric_product.group1().zxy()).with_w(geometric_product[e43] * self[e35]),
            // e23, e31, e12, e45
            (Simd32x4::from(geometric_product[scalar]) * self.group1())
                + (geometric_product.group2().yzxy() * self.group0().zxy().with_w(self[e42]))
                + (geometric_product.group0().yzx() * self.group2().zxy()).with_w(geometric_product[e15] * self[e41])
                + (geometric_product.group1().yzx() * self.group1().zxy()).with_w(geometric_product[e35] * self[e43])
                - (geometric_product.group0().zxy() * self.group2().yzx()).with_w(geometric_product[e41] * self[e15])
                - (self.group0().yzx() * geometric_product.group2().zxy()).with_w(geometric_product[e42] * self[e25])
                - (geometric_product.group1().zxy() * self.group1().yzx()).with_w(geometric_product[e43] * self[e35]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (geometric_product[e31] * self[e35]) + (geometric_product[e15] * self[e45]) + (geometric_product[e25] * self[e12]) + (geometric_product[scalar] * self[e15]),
                (geometric_product[e12] * self[e15]) + (geometric_product[e25] * self[e45]) + (geometric_product[e35] * self[e23]) + (geometric_product[scalar] * self[e25]),
                (geometric_product[e23] * self[e25]) + (geometric_product[e15] * self[e31]) + (geometric_product[e35] * self[e45]) + (geometric_product[scalar] * self[e35]),
                -(geometric_product[e23] * self[e41]) - (geometric_product[e31] * self[e42]) - (geometric_product[e12] * self[e43]),
            ]) - (self.group1().yzxz() * geometric_product.group2().zxy().with_w(geometric_product[e43]))
                - (self.group2().xyx() * geometric_product.group1().wwy()).with_w(geometric_product[e41] * self[e23])
                - (self.group2().yzz() * geometric_product.group1().zxw()).with_w(geometric_product[e42] * self[e31]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (geometric_product[e42] * self[e35]) + (geometric_product[e23] * self[e45]) + (geometric_product[e45] * self[e23]) + (geometric_product[e35] * self[e42]),
                (geometric_product[e43] * self[e15]) + (geometric_product[e31] * self[e45]) + (geometric_product[e45] * self[e31]) + (geometric_product[e15] * self[e43]),
                (geometric_product[e41] * self[e25]) + (geometric_product[e12] * self[e45]) + (geometric_product[e45] * self[e12]) + (geometric_product[e25] * self[e41]),
                -(geometric_product[e12] * self[e35]) - (geometric_product[e15] * self[e23]) - (geometric_product[e25] * self[e31]) - (geometric_product[e35] * self[e12]),
            ]) - (geometric_product.group0().zxy() * self.group2().yzx()).with_w(geometric_product[e23] * self[e15])
                - (self.group0().zxy() * geometric_product.group2().yzx()).with_w(geometric_product[e31] * self[e25]),
        );
    }
}
impl GeometricQuotient<AntiDipoleInversion> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       75        0
    //    simd3        0       15        0
    //    simd4       24       16        0
    // Totals...
    // yes simd       72      106        0
    //  no simd      144      184        0
    fn geometric_quotient(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e4
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125])
                - 2.0 * (other[e4] * other[e5]),
        );
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e4
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e1, e2, e3, e5
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (geometric_product[e431] * self[e12]) + (geometric_product[e425] * self[e43]) + (geometric_product[e4] * self[e23]) + (geometric_product[e3] * self[e42]),
                (geometric_product[e412] * self[e23]) + (geometric_product[e435] * self[e41]) + (geometric_product[e4] * self[e31]) + (geometric_product[e1] * self[e43]),
                (geometric_product[e423] * self[e31]) + (geometric_product[e415] * self[e42]) + (geometric_product[e4] * self[e12]) + (geometric_product[e2] * self[e41]),
                -(geometric_product[e415] * self[e23])
                    - (geometric_product[e425] * self[e31])
                    - (geometric_product[e435] * self[e12])
                    - (geometric_product[e321] * self[e45])
                    - (geometric_product[e125] * self[e43]),
            ]) - (Simd32x4::from([geometric_product[e321], geometric_product[e3], geometric_product[e425], self[e35]]) * self.group0().xxx().with_w(geometric_product[e412]))
                - (Simd32x4::from([geometric_product[e2], geometric_product[e415], geometric_product[e321], geometric_product[e315]]) * self.group0().zzz().with_w(self[e42]))
                - (geometric_product.group1().zw().with_zw(geometric_product[e1], geometric_product[e235]) * self.group0().yyy().with_w(self[e41]))
                - (geometric_product.group0().xxy() * self.group1().wzx()).with_w(geometric_product[e423] * self[e15])
                - (geometric_product.group0().zyz() * self.group1().yww()).with_w(geometric_product[e431] * self[e25]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (geometric_product[e425] * self[e12]) + (geometric_product[e4] * self[e15]),
                (geometric_product[e435] * self[e23]) + (geometric_product[e4] * self[e25]),
                (geometric_product[e415] * self[e31]) + (geometric_product[e4] * self[e35]),
                -(geometric_product[e2] * self[e31]) - (geometric_product[e3] * self[e12]),
            ]) + (Simd32x4::from([geometric_product[e315], geometric_product[e5], geometric_product[e5], self[e35]]) * self.group0().zyz().with_w(geometric_product[e412]))
                + (Simd32x4::from([geometric_product[e5], geometric_product[e125], geometric_product[e235], self[e25]]) * self.group0().xxy().with_w(geometric_product[e431]))
                + (geometric_product.group0().yzx() * self.group2().zxy()).with_w(geometric_product[e423] * self[e15])
                - (geometric_product.group2().zxyy() * self.group0().yzx().with_w(self[e42]))
                - (geometric_product.group3().xyzx() * self.group1().wwwx())
                - (geometric_product.group0().zxy() * self.group2().yzx()).with_w(geometric_product[e235] * self[e41])
                - (geometric_product.group1().zxy() * self.group1().yzx()).with_w(geometric_product[e125] * self[e43]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (geometric_product[e425] * self[e35])
                    + (geometric_product[e235] * self[e45])
                    + (geometric_product[e315] * self[e12])
                    + (geometric_product[e2] * self[e35])
                    + (geometric_product[e5] * self[e23]),
                (geometric_product[e321] * self[e25])
                    + (geometric_product[e315] * self[e45])
                    + (geometric_product[e125] * self[e23])
                    + (geometric_product[e3] * self[e15])
                    + (geometric_product[e5] * self[e31]),
                (geometric_product[e321] * self[e35])
                    + (geometric_product[e235] * self[e31])
                    + (geometric_product[e125] * self[e45])
                    + (geometric_product[e1] * self[e25])
                    + (geometric_product[e5] * self[e12]),
                -(geometric_product[e435] * self[e35])
                    - (geometric_product[e235] * self[e23])
                    - (geometric_product[e315] * self[e31])
                    - (geometric_product[e125] * self[e12])
                    - (geometric_product[e2] * self[e25])
                    - (geometric_product[e3] * self[e35]),
            ]) + (self.group2().xxy() * geometric_product.group1().wzx()).with_w(geometric_product[e5] * self[e45])
                - (geometric_product.group1().zxyx() * self.group2().yzx().with_w(self[e15]))
                - (geometric_product.group3().zxyx() * self.group2().yzx().with_w(self[e15]))
                - (geometric_product.group2().zxy() * self.group1().yzx()).with_w(geometric_product[e425] * self[e25]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (geometric_product[e321] * self[e23]) + (geometric_product[e2] * self[e12]),
                (geometric_product[e321] * self[e31]) + (geometric_product[e3] * self[e23]),
                (geometric_product[e321] * self[e12]) + (geometric_product[e1] * self[e31]),
                -(geometric_product[e435] * self[e43]) - (geometric_product[e4] * self[e45]),
            ]) + (Simd32x4::from([geometric_product[e315], geometric_product[e5], geometric_product[e5], geometric_product[e3]]) * self.group0().zyz().with_w(self[e43]))
                + (Simd32x4::from([geometric_product[e5], geometric_product[e125], geometric_product[e235], geometric_product[e2]]) * self.group0().xxy().with_w(self[e42]))
                + (geometric_product.group0().zxy() * self.group2().yzx()).with_w(geometric_product[e1] * self[e41])
                - (self.group2() * geometric_product.group2().www()).with_w(geometric_product[e412] * self[e12])
                - (geometric_product.group0().yzx() * self.group2().zxy()).with_w(geometric_product[e423] * self[e23])
                - (self.group0().yzx() * geometric_product.group2().zxy()).with_w(geometric_product[e431] * self[e31])
                - (geometric_product.group3().zxy() * self.group1().yzx()).with_w(geometric_product[e425] * self[e42])
                - (self.group1().www() * geometric_product.group1().xyz()).with_w(geometric_product[e415] * self[e41]),
        );
    }
}
impl GeometricQuotient<AntiDualNum> for Dipole {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd2        0        1        0
    //    simd3        2        5        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        2        9        0
    //  no simd        6       26        0
    fn geometric_quotient(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDualNum::from_groups(/* e3215, scalar */ Simd32x2::from(f32::powi(other[scalar], -2)) * other.group0());
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(geometric_product[scalar]) * self.group0(),
            // e23, e31, e12, e45
            ((Simd32x3::from(geometric_product[e3215]) * self.group0()) + (Simd32x3::from(geometric_product[scalar]) * self.group1().xyz()))
                .with_w(geometric_product[scalar] * self[e45]),
            // e15, e25, e35, e1234
            ((Simd32x3::from(geometric_product[e3215]) * self.group1().xyz()) + (Simd32x3::from(geometric_product[scalar]) * self.group2())).with_w(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(geometric_product[e3215]) * self.group0().with_w(self[e45]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricQuotient<AntiFlatPoint> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       24        0
    //    simd3        0        5        0
    //    simd4        4        3        0
    // Totals...
    // yes simd       15       32        0
    //  no simd       27       51        0
    fn geometric_quotient(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlatPoint::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(f32::powi(other[e321], -2)) * Simd32x4::from([other[e235] * -1.0, other[e315] * -1.0, other[e125] * -1.0, other[e321] * -1.0]),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x3::from(geometric_product[e321]) * self.group0() * Simd32x3::from(-1.0)).with_w(
                -(geometric_product[e235] * self[e41]) - (geometric_product[e315] * self[e42]) - (geometric_product[e125] * self[e43]) - (geometric_product[e321] * self[e45]),
            ),
            // e415, e425, e435, e321
            Simd32x4::from([
                geometric_product[e315] * self[e43],
                geometric_product[e125] * self[e41],
                geometric_product[e235] * self[e42],
                -(geometric_product[e315] * self[e42]) - (geometric_product[e125] * self[e43]),
            ]) - (geometric_product.group0().zxyx() * self.group0().yzx().with_w(self[e41])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (geometric_product[e235] * self[e45]) + (geometric_product[e315] * self[e12]) + (geometric_product[e321] * self[e15]),
                (geometric_product[e315] * self[e45]) + (geometric_product[e125] * self[e23]) + (geometric_product[e321] * self[e25]),
                (geometric_product[e235] * self[e31]) + (geometric_product[e125] * self[e45]) + (geometric_product[e321] * self[e35]),
                -(geometric_product[e315] * self[e31]) - (geometric_product[e125] * self[e12]),
            ]) - (geometric_product.group0().zxyx() * self.group1().yzxx()),
            // e1, e2, e3, e4
            (Simd32x3::from(geometric_product[e321]) * self.group1().xyz()).with_w(0.0) + (self.group0().zxy() * geometric_product.group0().yzx()).with_w(0.0)
                - (self.group0().yzx() * geometric_product.group0().zxy()).with_w(0.0),
        );
    }
}
impl GeometricQuotient<AntiFlector> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       43        0
    //    simd3        0        3        0
    //    simd4       10       10        0
    // Totals...
    // yes simd       38       56        0
    //  no simd       68       92        0
    fn geometric_quotient(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiFlector::from_groups(/* e235, e315, e125, e321 */ other.group0() * Simd32x4::from(-1.0), /* e1, e2, e3, e5 */ other.group1());
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2),
        );
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e1, e2, e3, e5
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                geometric_product[e3] * self[e42],
                geometric_product[e1] * self[e43],
                geometric_product[e2] * self[e41],
                -(geometric_product[e125] * self[e43]) - (geometric_product[e321] * self[e45]),
            ]) - (Simd32x4::from([geometric_product[e321], geometric_product[e3], geometric_product[e1], geometric_product[e235]]) * self.group0().xxy().with_w(self[e41]))
                - (Simd32x4::from([geometric_product[e2], geometric_product[e321], geometric_product[e321], geometric_product[e315]]) * self.group0().zyz().with_w(self[e42])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (geometric_product[e315] * self[e43]) + (geometric_product[e5] * self[e41]),
                (geometric_product[e125] * self[e41]) + (geometric_product[e5] * self[e42]),
                (geometric_product[e235] * self[e42]) + (geometric_product[e5] * self[e43]),
                -(geometric_product[e125] * self[e43]) - (geometric_product[e1] * self[e23]) - (geometric_product[e2] * self[e31]) - (geometric_product[e3] * self[e12]),
            ]) - (geometric_product.group0().zxyx() * self.group0().yzx().with_w(self[e41]))
                - (self.group1().www() * geometric_product.group1().xyz()).with_w(geometric_product[e315] * self[e42]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (geometric_product[e235] * self[e45]) + (geometric_product[e315] * self[e12]) + (geometric_product[e2] * self[e35]) + (geometric_product[e5] * self[e23]),
                (geometric_product[e315] * self[e45]) + (geometric_product[e125] * self[e23]) + (geometric_product[e321] * self[e25]) + (geometric_product[e5] * self[e31]),
                (geometric_product[e235] * self[e31]) + (geometric_product[e125] * self[e45]) + (geometric_product[e321] * self[e35]) + (geometric_product[e5] * self[e12]),
                -(geometric_product[e235] * self[e23]) - (geometric_product[e315] * self[e31]) - (geometric_product[e125] * self[e12]) - (geometric_product[e3] * self[e35]),
            ]) + (Simd32x4::from([geometric_product[e321], geometric_product[e3], geometric_product[e1], self[e45]]) * self.group2().xxy().with_w(geometric_product[e5]))
                - (geometric_product.group1().zxyx() * self.group2().yzx().with_w(self[e15]))
                - (geometric_product.group0().zxy() * self.group1().yzx()).with_w(geometric_product[e2] * self[e25]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (geometric_product[e2] * self[e12]) - (geometric_product[e125] * self[e42]) - (geometric_product[e3] * self[e31]),
                (geometric_product[e3] * self[e23]) - (geometric_product[e235] * self[e43]) - (geometric_product[e1] * self[e12]),
                (geometric_product[e1] * self[e31]) - (geometric_product[e315] * self[e41]) - (geometric_product[e2] * self[e23]),
                0.0,
            ]) + (Simd32x4::from([geometric_product[e315], geometric_product[e5], geometric_product[e5], geometric_product[e2]]) * self.group0().zyz().with_w(self[e42]))
                + (Simd32x4::from([geometric_product[e5], geometric_product[e125], geometric_product[e235], geometric_product[e1]]) * self.group0().xxy().with_w(self[e41]))
                + (geometric_product.group0().www() * self.group1().xyz()).with_w(geometric_product[e3] * self[e43]),
        );
    }
}
impl GeometricQuotient<AntiLine> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       22       43        0
    //    simd3        0       10        0
    //    simd4        6        0        0
    // Totals...
    // yes simd       28       53        0
    //  no simd       46       73        0
    fn geometric_quotient(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiLine::from_groups(
            // e23, e31, e12
            other.group0() * Simd32x3::from(-1.0),
            // e15, e25, e35
            other.group1() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(/* scalar */ f32::powi(other[e23], 2) + f32::powi(other[e31], 2) + f32::powi(other[e12], 2));
        let geometric_product = AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e15, e25, e35
            Simd32x3::from(other_2[scalar]) * reverse.group1(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                geometric_product[e31] * self[e43],
                geometric_product[e12] * self[e41],
                geometric_product[e23] * self[e42],
                -(geometric_product[e31] * self[e31])
                    - (geometric_product[e12] * self[e12])
                    - (geometric_product[e15] * self[e41])
                    - (geometric_product[e25] * self[e42])
                    - (geometric_product[e35] * self[e43]),
            ]) - (geometric_product.group0().zxy() * self.group0().yzx()).with_w(geometric_product[e23] * self[e23]),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(geometric_product[e12] * self[e31]) - (geometric_product[e35] * self[e42]),
                -(geometric_product[e23] * self[e12]) - (geometric_product[e15] * self[e43]),
                -(geometric_product[e31] * self[e23]) - (geometric_product[e25] * self[e41]),
                geometric_product[e35] * self[e43],
            ]) + (geometric_product.group0().yzx() * self.group1().zxy()).with_w(geometric_product[e15] * self[e41])
                + (geometric_product.group1().yzx() * self.group0().zxy()).with_w(geometric_product[e25] * self[e42]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (geometric_product[e31] * self[e35]) + (geometric_product[e15] * self[e45]) + (geometric_product[e25] * self[e12]),
                (geometric_product[e12] * self[e15]) + (geometric_product[e25] * self[e45]) + (geometric_product[e35] * self[e23]),
                (geometric_product[e23] * self[e25]) + (geometric_product[e15] * self[e31]) + (geometric_product[e35] * self[e45]),
                geometric_product[e12] * self[e43] * -1.0,
            ]) - (geometric_product.group0().zxy() * self.group2().yzx()).with_w(geometric_product[e23] * self[e41])
                - (geometric_product.group1().zxy() * self.group1().yzx()).with_w(geometric_product[e31] * self[e42]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (geometric_product[e23] * self[e45]) + (geometric_product[e35] * self[e42]),
                (geometric_product[e31] * self[e45]) + (geometric_product[e15] * self[e43]),
                (geometric_product[e12] * self[e45]) + (geometric_product[e25] * self[e41]),
                -(geometric_product[e31] * self[e25])
                    - (geometric_product[e12] * self[e35])
                    - (geometric_product[e15] * self[e23])
                    - (geometric_product[e25] * self[e31])
                    - (geometric_product[e35] * self[e12]),
            ]) - (geometric_product.group1().yzx() * self.group0().zxy()).with_w(geometric_product[e23] * self[e15]),
        );
    }
}
impl GeometricQuotient<AntiMotor> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       47        0
    //    simd3        0        6        0
    //    simd4       10        8        0
    // Totals...
    // yes simd       38       61        0
    //  no simd       68       97        0
    fn geometric_quotient(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, e3215
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e23], 2) + f32::powi(other[e31], 2) + f32::powi(other[e12], 2) + f32::powi(other[scalar], 2),
        );
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e15, e25, e35, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (geometric_product[e31] * self[e43]) + (geometric_product[scalar] * self[e41]),
                (geometric_product[e12] * self[e41]) + (geometric_product[scalar] * self[e42]),
                (geometric_product[e23] * self[e42]) + (geometric_product[scalar] * self[e43]),
                -(geometric_product[e23] * self[e23])
                    - (geometric_product[e31] * self[e31])
                    - (geometric_product[e12] * self[e12])
                    - (geometric_product[e25] * self[e42])
                    - (geometric_product[e35] * self[e43]),
            ]) - (self.group0().yzx() * geometric_product.group0().zxy()).with_w(geometric_product[e15] * self[e41]),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(geometric_product[e12] * self[e31]) - (geometric_product[e35] * self[e42]),
                -(geometric_product[e23] * self[e12]) - (geometric_product[e15] * self[e43]),
                -(geometric_product[e31] * self[e23]) - (geometric_product[e25] * self[e41]),
                0.0,
            ]) + (Simd32x4::from(geometric_product[scalar]) * self.group1())
                + (geometric_product.group1().ywwy() * self.group0().zyz().with_w(self[e42]))
                + (geometric_product.group1().wzxx() * self.group0().xxy().with_w(self[e41]))
                + (geometric_product.group0().yzx() * self.group1().zxy()).with_w(geometric_product[e35] * self[e43]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (geometric_product[e31] * self[e35])
                    + (geometric_product[scalar] * self[e15])
                    + (geometric_product[e15] * self[e45])
                    + (geometric_product[e25] * self[e12])
                    + (geometric_product[e3215] * self[e23]),
                (geometric_product[e12] * self[e15])
                    + (geometric_product[scalar] * self[e25])
                    + (geometric_product[e25] * self[e45])
                    + (geometric_product[e35] * self[e23])
                    + (geometric_product[e3215] * self[e31]),
                (geometric_product[e23] * self[e25])
                    + (geometric_product[scalar] * self[e35])
                    + (geometric_product[e15] * self[e31])
                    + (geometric_product[e35] * self[e45])
                    + (geometric_product[e3215] * self[e12]),
                geometric_product[e12] * self[e43] * -1.0,
            ]) - (geometric_product.group0().zxyx() * self.group2().yzx().with_w(self[e41]))
                - (geometric_product.group1().zxy() * self.group1().yzx()).with_w(geometric_product[e31] * self[e42]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                geometric_product[e23] * self[e45],
                geometric_product[e31] * self[e45],
                geometric_product[e12] * self[e45],
                -(geometric_product[e12] * self[e35]) - (geometric_product[e15] * self[e23]) - (geometric_product[e25] * self[e31]) - (geometric_product[e35] * self[e12]),
            ]) + (self.group0().yzx() * geometric_product.group1().zxy()).with_w(geometric_product[e3215] * self[e45])
                - (self.group0().xxy() * geometric_product.group1().wzx()).with_w(geometric_product[e23] * self[e15])
                - (self.group0().zyz() * geometric_product.group1().yww()).with_w(geometric_product[e31] * self[e25]),
        );
    }
}
impl GeometricQuotient<AntiPlane> for Dipole {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       20        0
    //    simd3        1        5        0
    //    simd4        5        3        0
    // Totals...
    // yes simd       10       28        0
    //  no simd       27       47        0
    fn geometric_quotient(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiPlane::from_groups(
            // e1, e2, e3, e5
            Simd32x4::from(f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)) * other.group0(),
        );
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (self.group0().yzx() * geometric_product.group0().zxy()) - (self.group0().zxy() * geometric_product.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                geometric_product[e5] * self[e41],
                geometric_product[e5] * self[e42],
                geometric_product[e5] * self[e43],
                -(geometric_product[e2] * self[e31]) - (geometric_product[e3] * self[e12]),
            ]) - (geometric_product.group0().xyzx() * self.group1().wwwx()),
            // e235, e315, e125, e4
            Simd32x4::from([
                geometric_product[e3] * self[e25] * -1.0,
                geometric_product[e1] * self[e35] * -1.0,
                geometric_product[e2] * self[e15] * -1.0,
                geometric_product[e3] * self[e43],
            ]) + (geometric_product.group0().yzxx() * self.group2().zxy().with_w(self[e41]))
                + (geometric_product.group0().www() * self.group1().xyz()).with_w(geometric_product[e2] * self[e42]),
            // e1, e2, e3, e5
            Simd32x4::from([
                geometric_product[e2] * self[e12],
                geometric_product[e3] * self[e23],
                geometric_product[e1] * self[e31],
                -(geometric_product[e2] * self[e25]) - (geometric_product[e3] * self[e35]),
            ]) + (self.group0() * geometric_product.group0().www()).with_w(geometric_product[e5] * self[e45])
                - (geometric_product.group0().zxy() * self.group1().yzx()).with_w(geometric_product[e1] * self[e15]),
        );
    }
}
impl GeometricQuotient<AntiScalar> for Dipole {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        1
    //    simd3        0        2        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        5        1
    //  no simd        0       15        1
    fn geometric_quotient(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiScalar::from_groups(/* e12345 */ 1.0 / other[e12345] * -1.0);
        return Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from(geometric_product[e12345]) * self.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(geometric_product[e12345]) * self.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e235, e315, e125
            Simd32x3::from(geometric_product[e12345]) * self.group2(),
        );
    }
}
impl GeometricQuotient<Circle> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       34       59        0
    //    simd3        0       17        0
    //    simd4       14        4        0
    // Totals...
    // yes simd       48       80        0
    //  no simd       90      126        0
    fn geometric_quotient(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let reverse = Circle::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125
            other.group2() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group2(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (geometric_product[e431] * self[e12]) + (geometric_product[e425] * self[e43]),
                (geometric_product[e412] * self[e23]) + (geometric_product[e435] * self[e41]),
                (geometric_product[e423] * self[e31]) + (geometric_product[e415] * self[e42]),
                -(geometric_product[e415] * self[e23])
                    - (geometric_product[e425] * self[e31])
                    - (geometric_product[e435] * self[e12])
                    - (geometric_product[e321] * self[e45])
                    - (geometric_product[e315] * self[e42])
                    - (geometric_product[e125] * self[e43]),
            ]) - (geometric_product.group0().xxy() * self.group1().wzx()).with_w(geometric_product[e423] * self[e15])
                - (geometric_product.group0().zyz() * self.group1().yww()).with_w(geometric_product[e431] * self[e25])
                - (self.group0().xyx() * geometric_product.group1().wwy()).with_w(geometric_product[e412] * self[e35])
                - (self.group0().yzz() * geometric_product.group1().zxw()).with_w(geometric_product[e235] * self[e41]),
            // e415, e425, e435, e321
            (geometric_product.group0().yzx() * self.group2().zxy()).with_w(geometric_product[e423] * self[e15])
                + (geometric_product.group2().yzx() * self.group0().zxy()).with_w(geometric_product[e431] * self[e25])
                + (geometric_product.group1().yzx() * self.group1().zxy()).with_w(geometric_product[e412] * self[e35])
                - (geometric_product.group0().zxy() * self.group2().yzx()).with_w(geometric_product[e235] * self[e41])
                - (geometric_product.group2().zxy() * self.group0().yzx()).with_w(geometric_product[e315] * self[e42])
                - (geometric_product.group1().zxy() * self.group1().yzx()).with_w(geometric_product[e125] * self[e43]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (geometric_product[e425] * self[e35]) + (geometric_product[e321] * self[e15]) + (geometric_product[e235] * self[e45]) + (geometric_product[e315] * self[e12]),
                (geometric_product[e435] * self[e15]) + (geometric_product[e321] * self[e25]) + (geometric_product[e315] * self[e45]) + (geometric_product[e125] * self[e23]),
                (geometric_product[e415] * self[e25]) + (geometric_product[e321] * self[e35]) + (geometric_product[e235] * self[e31]) + (geometric_product[e125] * self[e45]),
                -(geometric_product[e415] * self[e15]) - (geometric_product[e425] * self[e25]) - (geometric_product[e435] * self[e35]) - (geometric_product[e125] * self[e12]),
            ]) - (self.group1().yzxx() * geometric_product.group2().zxy().with_w(geometric_product[e235]))
                - (self.group2().yzx() * geometric_product.group1().zxy()).with_w(geometric_product[e315] * self[e31]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (geometric_product[e412] * self[e25]) + (geometric_product[e321] * self[e23]) + (geometric_product[e315] * self[e43]),
                (geometric_product[e423] * self[e35]) + (geometric_product[e321] * self[e31]) + (geometric_product[e125] * self[e41]),
                (geometric_product[e431] * self[e15]) + (geometric_product[e321] * self[e12]) + (geometric_product[e235] * self[e42]),
                -(geometric_product[e415] * self[e41]) - (geometric_product[e425] * self[e42]) - (geometric_product[e435] * self[e43]),
            ]) - (self.group1().wwwz() * geometric_product.group1().xyz().with_w(geometric_product[e412]))
                - (geometric_product.group0().yzx() * self.group2().zxy()).with_w(geometric_product[e423] * self[e23])
                - (geometric_product.group2().zxy() * self.group0().yzx()).with_w(geometric_product[e431] * self[e31]),
        );
    }
}
impl GeometricQuotient<CircleRotor> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       41       69        0
    //    simd3        0       14        0
    //    simd4       15        7        0
    // Totals...
    // yes simd       56       90        0
    //  no simd      101      139        0
    fn geometric_quotient(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let reverse = CircleRotor::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e12345
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - f32::powi(other[e12345], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (geometric_product[e431] * self[e12]) + (geometric_product[e425] * self[e43]) + (geometric_product[e12345] * self[e41]),
                (geometric_product[e412] * self[e23]) + (geometric_product[e435] * self[e41]) + (geometric_product[e12345] * self[e42]),
                (geometric_product[e423] * self[e31]) + (geometric_product[e415] * self[e42]) + (geometric_product[e12345] * self[e43]),
                -(geometric_product[e415] * self[e23])
                    - (geometric_product[e425] * self[e31])
                    - (geometric_product[e435] * self[e12])
                    - (geometric_product[e321] * self[e45])
                    - (geometric_product[e315] * self[e42])
                    - (geometric_product[e125] * self[e43]),
            ]) - (geometric_product.group0().xxy() * self.group1().wzx()).with_w(geometric_product[e423] * self[e15])
                - (geometric_product.group0().zyz() * self.group1().yww()).with_w(geometric_product[e431] * self[e25])
                - (self.group0().xyx() * geometric_product.group1().wwy()).with_w(geometric_product[e412] * self[e35])
                - (self.group0().yzz() * geometric_product.group1().zxw()).with_w(geometric_product[e235] * self[e41]),
            // e415, e425, e435, e321
            Simd32x4::from([
                geometric_product[e12345] * self[e23],
                geometric_product[e12345] * self[e31],
                geometric_product[e12345] * self[e12],
                geometric_product[e12345] * self[e45] * -1.0,
            ]) + (geometric_product.group0().yzx() * self.group2().zxy()).with_w(geometric_product[e423] * self[e15])
                + (self.group0().zxy() * geometric_product.group2().yzx()).with_w(geometric_product[e431] * self[e25])
                + (geometric_product.group1().yzx() * self.group1().zxy()).with_w(geometric_product[e412] * self[e35])
                - (geometric_product.group2().zxyy() * self.group0().yzx().with_w(self[e42]))
                - (geometric_product.group0().zxy() * self.group2().yzx()).with_w(geometric_product[e235] * self[e41])
                - (geometric_product.group1().zxy() * self.group1().yzx()).with_w(geometric_product[e125] * self[e43]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (geometric_product[e425] * self[e35])
                    + (geometric_product[e321] * self[e15])
                    + (geometric_product[e235] * self[e45])
                    + (geometric_product[e315] * self[e12])
                    + (geometric_product[e12345] * self[e15]),
                (geometric_product[e435] * self[e15])
                    + (geometric_product[e321] * self[e25])
                    + (geometric_product[e315] * self[e45])
                    + (geometric_product[e125] * self[e23])
                    + (geometric_product[e12345] * self[e25]),
                (geometric_product[e415] * self[e25])
                    + (geometric_product[e321] * self[e35])
                    + (geometric_product[e235] * self[e31])
                    + (geometric_product[e125] * self[e45])
                    + (geometric_product[e12345] * self[e35]),
                -(geometric_product[e435] * self[e35]) - (geometric_product[e235] * self[e23]) - (geometric_product[e315] * self[e31]) - (geometric_product[e125] * self[e12]),
            ]) - (geometric_product.group1().zxyx() * self.group2().yzx().with_w(self[e15]))
                - (geometric_product.group2().zxy() * self.group1().yzx()).with_w(geometric_product[e425] * self[e25]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (geometric_product[e412] * self[e25]) + (geometric_product[e321] * self[e23]) + (geometric_product[e315] * self[e43]),
                (geometric_product[e423] * self[e35]) + (geometric_product[e321] * self[e31]) + (geometric_product[e125] * self[e41]),
                (geometric_product[e431] * self[e15]) + (geometric_product[e321] * self[e12]) + (geometric_product[e235] * self[e42]),
                -(geometric_product[e415] * self[e41]) - (geometric_product[e425] * self[e42]) - (geometric_product[e435] * self[e43]),
            ]) - (self.group1().wwwz() * geometric_product.group1().xyz().with_w(geometric_product[e412]))
                - (geometric_product.group0().yzx() * self.group2().zxy()).with_w(geometric_product[e423] * self[e23])
                - (self.group0().yzx() * geometric_product.group2().zxy()).with_w(geometric_product[e431] * self[e31]),
        );
    }
}
impl GeometricQuotient<Dipole> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       34       59        0
    //    simd3        0       17        0
    //    simd4       14        4        0
    // Totals...
    // yes simd       48       80        0
    //  no simd       90      126        0
    fn geometric_quotient(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let reverse = Dipole::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35
            other.group2() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2),
        );
        let geometric_product = Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35
            Simd32x3::from(other_2[scalar]) * reverse.group2(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (geometric_product[e31] * self[e43]) + (geometric_product[e45] * self[e41]),
                (geometric_product[e12] * self[e41]) + (geometric_product[e45] * self[e42]),
                (geometric_product[e23] * self[e42]) + (geometric_product[e45] * self[e43]),
                -(geometric_product[e23] * self[e23])
                    - (geometric_product[e31] * self[e31])
                    - (geometric_product[e12] * self[e12])
                    - (geometric_product[e15] * self[e41])
                    - (geometric_product[e25] * self[e42])
                    - (geometric_product[e35] * self[e43]),
            ]) + (self.group1().zxyw() * geometric_product.group0().yzx().with_w(geometric_product[e45]))
                - (geometric_product.group0().xxy() * self.group1().wzx()).with_w(geometric_product[e41] * self[e15])
                - (geometric_product.group0().zyz() * self.group1().yww()).with_w(geometric_product[e42] * self[e25])
                - (self.group0().yzx() * geometric_product.group1().zxy()).with_w(geometric_product[e43] * self[e35]),
            // e23, e31, e12, e45
            (geometric_product.group0().yzx() * self.group2().zxy()).with_w(geometric_product[e15] * self[e41])
                + (geometric_product.group2().yzx() * self.group0().zxy()).with_w(geometric_product[e25] * self[e42])
                + (geometric_product.group1().yzx() * self.group1().zxy()).with_w(geometric_product[e35] * self[e43])
                - (geometric_product.group0().zxy() * self.group2().yzx()).with_w(geometric_product[e41] * self[e15])
                - (geometric_product.group2().zxy() * self.group0().yzx()).with_w(geometric_product[e42] * self[e25])
                - (geometric_product.group1().zxy() * self.group1().yzx()).with_w(geometric_product[e43] * self[e35]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (geometric_product[e31] * self[e35]) + (geometric_product[e15] * self[e45]) + (geometric_product[e25] * self[e12]),
                (geometric_product[e12] * self[e15]) + (geometric_product[e25] * self[e45]) + (geometric_product[e35] * self[e23]),
                (geometric_product[e23] * self[e25]) + (geometric_product[e15] * self[e31]) + (geometric_product[e35] * self[e45]),
                -(geometric_product[e23] * self[e41]) - (geometric_product[e31] * self[e42]) - (geometric_product[e12] * self[e43]),
            ]) - (self.group1().yzxx() * geometric_product.group2().zxy().with_w(geometric_product[e41]))
                - (self.group2().xyx() * geometric_product.group1().wwy()).with_w(geometric_product[e42] * self[e31])
                - (self.group2().yzz() * geometric_product.group1().zxw()).with_w(geometric_product[e43] * self[e12]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (geometric_product[e42] * self[e35]) + (geometric_product[e23] * self[e45]) + (geometric_product[e45] * self[e23]) + (geometric_product[e35] * self[e42]),
                (geometric_product[e43] * self[e15]) + (geometric_product[e31] * self[e45]) + (geometric_product[e45] * self[e31]) + (geometric_product[e15] * self[e43]),
                (geometric_product[e41] * self[e25]) + (geometric_product[e12] * self[e45]) + (geometric_product[e45] * self[e12]) + (geometric_product[e25] * self[e41]),
                -(geometric_product[e23] * self[e15]) - (geometric_product[e31] * self[e25]) - (geometric_product[e12] * self[e35]) - (geometric_product[e35] * self[e12]),
            ]) - (geometric_product.group0().zxy() * self.group2().yzx()).with_w(geometric_product[e15] * self[e23])
                - (geometric_product.group2().yzx() * self.group0().zxy()).with_w(geometric_product[e25] * self[e31]),
        );
    }
}
impl GeometricQuotient<DipoleInversion> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       52       76        0
    //    simd3        0       12        0
    //    simd4       23       18        0
    // Totals...
    // yes simd       75      106        0
    //  no simd      144      184        0
    fn geometric_quotient(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let reverse = DipoleInversion::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + 2.0 * (other[e1234] * other[e3215])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2),
        );
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e43] * geometric_product[e31]) + (self[e43] * geometric_product[e4315]) + (self[e23] * geometric_product[e1234]) + (self[e12] * geometric_product[e42]),
                (self[e41] * geometric_product[e4125]) + (self[e42] * geometric_product[e45]) + (self[e23] * geometric_product[e43]) + (self[e31] * geometric_product[e1234]),
                (self[e42] * geometric_product[e4235]) + (self[e43] * geometric_product[e45]) + (self[e31] * geometric_product[e41]) + (self[e12] * geometric_product[e1234]),
                -(self[e23] * geometric_product[e23])
                    - (self[e31] * geometric_product[e31])
                    - (self[e12] * geometric_product[e12])
                    - (self[e25] * geometric_product[e42])
                    - (self[e35] * geometric_product[e43]),
            ]) + (geometric_product.group1().wzxw() * self.group0().xxy().with_w(self[e45]))
                - (self.group0().yzx() * geometric_product.group1().zxy()).with_w(self[e41] * geometric_product[e15])
                - (self.group0().yzx() * geometric_product.group3().zxy()).with_w(self[e42] * geometric_product[e25])
                - (geometric_product.group0().xxy() * self.group1().wzx()).with_w(self[e43] * geometric_product[e35])
                - (geometric_product.group0().zyz() * self.group1().yww()).with_w(self[e15] * geometric_product[e41]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e12] * geometric_product[e31]) + (self[e45] * geometric_product[e4235]) + (self[e35] * geometric_product[e42]),
                (self[e23] * geometric_product[e12]) + (self[e45] * geometric_product[e4315]) + (self[e25] * geometric_product[e1234]),
                (self[e31] * geometric_product[e23]) + (self[e45] * geometric_product[e4125]) + (self[e35] * geometric_product[e1234]),
                -(self[e23] * geometric_product[e4235]) - (self[e31] * geometric_product[e4315]) - (self[e12] * geometric_product[e4125]),
            ]) + (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], geometric_product[e25]]) * self.group0().zyz().with_w(self[e42]))
                + (Simd32x4::from([geometric_product[e1234], geometric_product[e43], geometric_product[e41], geometric_product[e35]]) * self.group2().xxy().with_w(self[e43]))
                + (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e15]]) * self.group0().xxy().with_w(self[e41]))
                - (self.group0().yzx() * geometric_product.group2().zxy()).with_w(self[e15] * geometric_product[e41])
                - (self.group2().yzx() * geometric_product.group0().zxy()).with_w(self[e25] * geometric_product[e42])
                - (self.group1().yzx() * geometric_product.group1().zxy()).with_w(self[e35] * geometric_product[e43]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * geometric_product[e3215])
                    + (self[e12] * geometric_product[e25])
                    + (self[e45] * geometric_product[e15])
                    + (self[e25] * geometric_product[e4125])
                    + (self[e35] * geometric_product[e31]),
                (self[e23] * geometric_product[e35])
                    + (self[e31] * geometric_product[e3215])
                    + (self[e45] * geometric_product[e25])
                    + (self[e15] * geometric_product[e12])
                    + (self[e35] * geometric_product[e4235]),
                (self[e31] * geometric_product[e15])
                    + (self[e12] * geometric_product[e3215])
                    + (self[e45] * geometric_product[e35])
                    + (self[e15] * geometric_product[e4315])
                    + (self[e25] * geometric_product[e23]),
                -(self[e43] * geometric_product[e12])
                    - (self[e43] * geometric_product[e4125])
                    - (self[e23] * geometric_product[e41])
                    - (self[e31] * geometric_product[e42])
                    - (self[e12] * geometric_product[e43])
                    - (self[e45] * geometric_product[e1234]),
            ]) - (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e31], geometric_product[e23]]) * self.group2().xxx().with_w(self[e41]))
                - (Simd32x4::from([geometric_product[e4315], geometric_product[e23], geometric_product[e45], geometric_product[e31]]) * self.group2().zzz().with_w(self[e42]))
                - (geometric_product.group1().zw().with_zw(geometric_product[e4235], geometric_product[e4235]) * self.group2().yyy().with_w(self[e41]))
                - (self.group1().yzx() * geometric_product.group2().zxy()).with_w(self[e42] * geometric_product[e4315]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e12] * geometric_product[e4315]) + (self[e45] * geometric_product[e23]),
                (self[e31] * geometric_product[e45]) + (self[e45] * geometric_product[e31]),
                (self[e12] * geometric_product[e45]) + (self[e45] * geometric_product[e12]),
                -(self[e31] * geometric_product[e25]) - (self[e12] * geometric_product[e35]),
            ]) + (Simd32x4::from([geometric_product[e42], geometric_product[e1234], geometric_product[e1234], geometric_product[e4125]]) * self.group2().zyz().with_w(self[e35]))
                + (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], geometric_product[e3215]]) * self.group1().xxyw())
                + (Simd32x4::from([geometric_product[e1234], geometric_product[e43], geometric_product[e41], geometric_product[e4315]]) * self.group2().xxy().with_w(self[e25]))
                + (self.group0().yzx() * geometric_product.group2().zxy()).with_w(self[e15] * geometric_product[e4235])
                - (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], geometric_product[e31]]) * self.group0().zyz().with_w(self[e25]))
                - (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e23]]) * self.group0().xxy().with_w(self[e15]))
                - (self.group1().yzxx() * geometric_product.group3().zxy().with_w(geometric_product[e15]))
                - (self.group2().yzx() * geometric_product.group0().zxy()).with_w(self[e35] * geometric_product[e12]),
        );
    }
}
impl GeometricQuotient<DualNum> for Dipole {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd2        0        1        0
    //    simd3        2        5        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        2       10        0
    //  no simd        6       24        0
    fn geometric_quotient(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DualNum::from_groups(/* e5, e12345 */ Simd32x2::from(f32::powi(other[e12345], -2) * -1.0) * other.group0());
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(geometric_product[e12345]) * self.group0(),
            // e415, e425, e435, e321
            ((Simd32x3::from(geometric_product[e5]) * self.group0()) + (Simd32x3::from(geometric_product[e12345]) * self.group1().xyz()))
                .with_w(self[e45] * geometric_product[e12345] * -1.0),
            // e235, e315, e125, e4
            ((Simd32x3::from(geometric_product[e5]) * self.group1().xyz()) + (Simd32x3::from(geometric_product[e12345]) * self.group2())).with_w(0.0),
            // e1, e2, e3, e5
            Simd32x4::from(geometric_product[e5]) * self.group0().with_w(self[e45]),
        );
    }
}
impl GeometricQuotient<FlatPoint> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       25        0
    //    simd3        0        5        0
    //    simd4        5        3        0
    // Totals...
    // yes simd       13       33        0
    //  no simd       28       52        0
    fn geometric_quotient(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = FlatPoint::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(f32::powi(other[e45], -2) * -1.0) * Simd32x4::from([other[e15] * -1.0, other[e25] * -1.0, other[e35] * -1.0, other[e45] * -1.0]),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x3::from(geometric_product[e45]) * self.group0())
                .with_w((self[e45] * geometric_product[e45]) - (self[e41] * geometric_product[e15]) - (self[e42] * geometric_product[e25]) - (self[e43] * geometric_product[e35])),
            // e23, e31, e12, e45
            Simd32x4::from([
                self[e42] * geometric_product[e35] * -1.0,
                self[e43] * geometric_product[e15] * -1.0,
                self[e41] * geometric_product[e25] * -1.0,
                (self[e42] * geometric_product[e25]) + (self[e43] * geometric_product[e35]),
            ]) + (geometric_product.group0().yzxx() * self.group0().zxy().with_w(self[e41])),
            // e15, e25, e35, e1234
            (Simd32x3::from(self[e45]) * geometric_product.group0().xyz()).with_w(0.0) + (self.group1().zxy() * geometric_product.group0().yzx()).with_w(0.0)
                - (Simd32x3::from(geometric_product[e45]) * self.group2()).with_w(0.0)
                - (self.group1().yzx() * geometric_product.group0().zxy()).with_w(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e42] * geometric_product[e35]) + (self[e23] * geometric_product[e45]),
                (self[e43] * geometric_product[e15]) + (self[e31] * geometric_product[e45]),
                (self[e41] * geometric_product[e25]) + (self[e12] * geometric_product[e45]),
                -(self[e31] * geometric_product[e25]) - (self[e12] * geometric_product[e35]),
            ]) - (geometric_product.group0().yzxx() * self.group0().zxy().with_w(self[e23])),
        );
    }
}
impl GeometricQuotient<Flector> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       25        0
    //    simd3        0        5        0
    //    simd4       15       13        0
    // Totals...
    // yes simd       29       43        0
    //  no simd       74       92        0
    fn geometric_quotient(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let reverse = Flector::from_groups(
            // e15, e25, e35, e45
            other.group0() * Simd32x4::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group1(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            -f32::powi(other[e45], 2) - f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2),
        );
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e43] * geometric_product[e4315],
                self[e42] * geometric_product[e45],
                self[e43] * geometric_product[e45],
                -(self[e42] * geometric_product[e25]) - (self[e43] * geometric_product[e35]),
            ]) + (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], geometric_product[e45]]) * self.group0().xxy().with_w(self[e45]))
                - (self.group0().yzx() * geometric_product.group1().zxy()).with_w(self[e41] * geometric_product[e15]),
            // e23, e31, e12, e45
            (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], geometric_product[e25]]) * self.group0().zyz().with_w(self[e42]))
                + (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e15]]) * self.group0().xxy().with_w(self[e41]))
                + Simd32x3::from(0.0).with_w(-(self[e31] * geometric_product[e4315]) - (self[e12] * geometric_product[e4125]))
                + (self.group1().www() * geometric_product.group1().xyz()).with_w(self[e43] * geometric_product[e35])
                - (self.group0().yzx() * geometric_product.group0().zxy()).with_w(self[e23] * geometric_product[e4235]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * geometric_product[e3215]) + (self[e12] * geometric_product[e25]) + (self[e45] * geometric_product[e15]) + (self[e25] * geometric_product[e4125]),
                (self[e23] * geometric_product[e35]) + (self[e31] * geometric_product[e3215]) + (self[e45] * geometric_product[e25]) + (self[e35] * geometric_product[e4235]),
                (self[e31] * geometric_product[e15]) + (self[e12] * geometric_product[e3215]) + (self[e45] * geometric_product[e35]) + (self[e15] * geometric_product[e4315]),
                0.0,
            ]) - (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], geometric_product[e4235]]) * self.group2().xxy().with_w(self[e41]))
                - (Simd32x4::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45], geometric_product[e4315]]) * self.group2().zyz().with_w(self[e42]))
                - (self.group1().yzx() * geometric_product.group0().zxy()).with_w(self[e43] * geometric_product[e4125]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], geometric_product[e4315]]) * self.group1().xxy().with_w(self[e25]))
                + (Simd32x4::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45], geometric_product[e4125]]) * self.group1().zyz().with_w(self[e35]))
                + Simd32x3::from(0.0).with_w(self[e45] * geometric_product[e3215])
                + (self.group0().yzx() * geometric_product.group0().zxy()).with_w(self[e15] * geometric_product[e4235])
                - (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], geometric_product[e25]]) * self.group0().zyz().with_w(self[e31]))
                - (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e15]]) * self.group0().xxy().with_w(self[e23]))
                - (self.group1().yzxz() * geometric_product.group1().zxy().with_w(geometric_product[e35])),
        );
    }
}
impl GeometricQuotient<Line> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       41        0
    //    simd3        0       11        0
    //    simd4        7        0        0
    // Totals...
    // yes simd       25       52        0
    //  no simd       46       74        0
    fn geometric_quotient(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let reverse = Line::from_groups(
            // e415, e425, e435
            other.group0() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group1() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(/* scalar */ -f32::powi(other[e415], 2) - f32::powi(other[e425], 2) - f32::powi(other[e435], 2));
        let geometric_product = Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group1(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e43] * geometric_product[e425],
                self[e41] * geometric_product[e435],
                self[e42] * geometric_product[e415],
                -(self[e42] * geometric_product[e315])
                    - (self[e43] * geometric_product[e125])
                    - (self[e23] * geometric_product[e415])
                    - (self[e31] * geometric_product[e425])
                    - (self[e12] * geometric_product[e435]),
            ]) - (self.group0().yzx() * geometric_product.group0().zxy()).with_w(self[e41] * geometric_product[e235]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e43] * geometric_product[e315]) + (self[e12] * geometric_product[e425]),
                (self[e41] * geometric_product[e125]) + (self[e23] * geometric_product[e435]),
                (self[e42] * geometric_product[e235]) + (self[e31] * geometric_product[e415]),
                self[e43] * geometric_product[e125] * -1.0,
            ]) - (self.group0().yzx() * geometric_product.group1().zxy()).with_w(self[e41] * geometric_product[e235])
                - (geometric_product.group0().zxy() * self.group1().yzx()).with_w(self[e42] * geometric_product[e315]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * geometric_product[e315]) + (self[e45] * geometric_product[e235]) + (self[e35] * geometric_product[e425]),
                (self[e23] * geometric_product[e125]) + (self[e45] * geometric_product[e315]) + (self[e15] * geometric_product[e435]),
                (self[e31] * geometric_product[e235]) + (self[e45] * geometric_product[e125]) + (self[e25] * geometric_product[e415]),
                -(self[e23] * geometric_product[e235]) - (self[e31] * geometric_product[e315]) - (self[e12] * geometric_product[e125]) - (self[e35] * geometric_product[e435]),
            ]) - (self.group2().yzx() * geometric_product.group0().zxy()).with_w(self[e15] * geometric_product[e415])
                - (geometric_product.group1().zxy() * self.group1().yzx()).with_w(self[e25] * geometric_product[e425]),
            // e1, e2, e3, e4
            Simd32x4::from([
                self[e43] * geometric_product[e315],
                self[e41] * geometric_product[e125],
                self[e42] * geometric_product[e235],
                self[e43] * geometric_product[e435] * -1.0,
            ]) - (geometric_product.group0() * self.group1().www()).with_w(self[e42] * geometric_product[e425])
                - (self.group0().yzx() * geometric_product.group1().zxy()).with_w(self[e41] * geometric_product[e415]),
        );
    }
}
impl GeometricQuotient<Motor> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       35       54        0
    //    simd3        0        5        0
    //    simd4        8        7        0
    // Totals...
    // yes simd       43       66        0
    //  no simd       67       97        0
    fn geometric_quotient(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let reverse = Motor::from_groups(
            // e415, e425, e435, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            -f32::powi(other[e415], 2) - f32::powi(other[e425], 2) - f32::powi(other[e435], 2) - f32::powi(other[e12345], 2),
        );
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e235, e315, e125, e5
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e41] * geometric_product[e12345]) + (self[e43] * geometric_product[e425]),
                (self[e41] * geometric_product[e435]) + (self[e42] * geometric_product[e12345]),
                (self[e42] * geometric_product[e415]) + (self[e43] * geometric_product[e12345]),
                -(self[e42] * geometric_product[e315])
                    - (self[e43] * geometric_product[e125])
                    - (self[e23] * geometric_product[e415])
                    - (self[e31] * geometric_product[e425])
                    - (self[e12] * geometric_product[e435]),
            ]) - (self.group0().yzx() * geometric_product.group0().zxy()).with_w(self[e41] * geometric_product[e235]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e41] * geometric_product[e5]) + (self[e43] * geometric_product[e315]) + (self[e23] * geometric_product[e12345]) + (self[e12] * geometric_product[e425]),
                (self[e41] * geometric_product[e125]) + (self[e42] * geometric_product[e5]) + (self[e23] * geometric_product[e435]) + (self[e31] * geometric_product[e12345]),
                (self[e42] * geometric_product[e235]) + (self[e43] * geometric_product[e5]) + (self[e31] * geometric_product[e415]) + (self[e12] * geometric_product[e12345]),
                -(self[e43] * geometric_product[e125]) - (self[e45] * geometric_product[e12345]),
            ]) - (geometric_product.group1().zxyx() * self.group0().yzx().with_w(self[e41]))
                - (self.group1().yzx() * geometric_product.group0().zxy()).with_w(self[e42] * geometric_product[e315]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e23] * geometric_product[e5]) + (self[e12] * geometric_product[e315]) + (self[e45] * geometric_product[e235]) + (self[e35] * geometric_product[e425]),
                (self[e23] * geometric_product[e125]) + (self[e31] * geometric_product[e5]) + (self[e45] * geometric_product[e315]) + (self[e25] * geometric_product[e12345]),
                (self[e31] * geometric_product[e235]) + (self[e12] * geometric_product[e5]) + (self[e45] * geometric_product[e125]) + (self[e35] * geometric_product[e12345]),
                -(self[e23] * geometric_product[e235]) - (self[e31] * geometric_product[e315]) - (self[e12] * geometric_product[e125]) - (self[e35] * geometric_product[e435]),
            ]) + (self.group2().xxy() * geometric_product.group0().wzx()).with_w(self[e45] * geometric_product[e5])
                - (geometric_product.group0().zxyx() * self.group2().yzx().with_w(self[e15]))
                - (self.group1().yzx() * geometric_product.group1().zxy()).with_w(self[e25] * geometric_product[e425]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e41] * geometric_product[e5]) + (self[e43] * geometric_product[e315]),
                (self[e41] * geometric_product[e125]) + (self[e42] * geometric_product[e5]),
                (self[e42] * geometric_product[e235]) + (self[e43] * geometric_product[e5]),
                self[e43] * geometric_product[e435] * -1.0,
            ]) - (geometric_product.group0().xyzy() * self.group1().www().with_w(self[e42]))
                - (self.group0().yzx() * geometric_product.group1().zxy()).with_w(self[e41] * geometric_product[e415]),
        );
    }
}
impl GeometricQuotient<MultiVector> for Dipole {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       61       88        0
    //    simd2        9       10        0
    //    simd3       36       59        0
    //    simd4       31       26        0
    // Totals...
    // yes simd      137      183        0
    //  no simd      311      389        0
    fn geometric_quotient(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let reverse = MultiVector::from_groups(
            // scalar, e12345
            other.group0(),
            // e1, e2, e3, e4
            other.group1(),
            // e5
            other[e5],
            // e15, e25, e35, e45
            other.group3() * Simd32x4::from(-1.0),
            // e41, e42, e43
            other.group4() * Simd32x3::from(-1.0),
            // e23, e31, e12
            other.group5() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group6() * Simd32x4::from(-1.0),
            // e423, e431, e412
            other.group7() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group8() * Simd32x3::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group9(),
            // e1234
            other[e1234],
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e15] * other[e41])
                + 2.0 * (other[e25] * other[e42])
                + 2.0 * (other[e35] * other[e43])
                + 2.0 * (other[e3215] * other[e1234])
                + f32::powi(other[scalar], 2)
                + f32::powi(other[e1], 2)
                + f32::powi(other[e2], 2)
                + f32::powi(other[e3], 2)
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                + f32::powi(other[e321], 2)
                - f32::powi(other[e12345], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2)
                - 2.0 * (other[e4] * other[e5])
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(other_2[scalar]) * reverse.group0(),
            // e1, e2, e3, e4
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e5
            reverse[e5] * other_2[scalar],
            // e15, e25, e35, e45
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group4(),
            // e23, e31, e12
            Simd32x3::from(other_2[scalar]) * reverse.group5(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group6(),
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group7(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group8(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group9(),
            // e1234
            reverse[e1234] * other_2[scalar],
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([self[e45] * geometric_product[e45], self[e45] * geometric_product[e321] * -1.0])
                - (Simd32x2::from(self[e41]) * Simd32x2::from([geometric_product[e15], geometric_product[e235]]))
                - (Simd32x2::from(self[e42]) * Simd32x2::from([geometric_product[e25], geometric_product[e315]]))
                - (Simd32x2::from(self[e43]) * Simd32x2::from([geometric_product[e35], geometric_product[e125]]))
                - (Simd32x2::from(self[e23]) * Simd32x2::from([geometric_product[e23], geometric_product[e415]]))
                - (Simd32x2::from(self[e31]) * Simd32x2::from([geometric_product[e31], geometric_product[e425]]))
                - (Simd32x2::from(self[e12]) * Simd32x2::from([geometric_product[e12], geometric_product[e435]]))
                - (Simd32x2::from(self[e15]) * Simd32x2::from([geometric_product[e41], geometric_product[e423]]))
                - (Simd32x2::from(self[e25]) * Simd32x2::from([geometric_product[e42], geometric_product[e431]]))
                - (Simd32x2::from(self[e35]) * Simd32x2::from([geometric_product[e43], geometric_product[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e23] * geometric_product[e321]) + (self[e12] * geometric_product[e2]),
                (self[e23] * geometric_product[e3]) + (self[e31] * geometric_product[e321]),
                (self[e31] * geometric_product[e1]) + (self[e12] * geometric_product[e321]),
                -(self[e12] * geometric_product[e412]) - (self[e45] * geometric_product[e4]),
            ]) + (Simd32x4::from([geometric_product[e5], geometric_product[e125], geometric_product[e235], geometric_product[e1]]) * self.group0().xxy().with_w(self[e41]))
                + (Simd32x4::from([geometric_product[e315], geometric_product[e5], geometric_product[e5], geometric_product[e2]]) * self.group0().zyz().with_w(self[e42]))
                + (self.group2().yzx() * geometric_product.group7().zxy()).with_w(self[e43] * geometric_product[e3])
                - (Simd32x4::from([geometric_product[e4], geometric_product[e412], geometric_product[e423], geometric_product[e425]]) * self.group2().xxy().with_w(self[e42]))
                - (Simd32x4::from([geometric_product[e431], geometric_product[e4], geometric_product[e4], geometric_product[e435]]) * self.group2().zyz().with_w(self[e43]))
                - (self.group0().yzx() * geometric_product.group8().zxy()).with_w(self[e41] * geometric_product[e415])
                - (self.group1().yzx() * geometric_product.group1().zxy()).with_w(self[e23] * geometric_product[e423])
                - (self.group1().www() * geometric_product.group6().xyz()).with_w(self[e31] * geometric_product[e431]),
            // e5
            (self[e45] * geometric_product[e5])
                - (self[e23] * geometric_product[e235])
                - (self[e31] * geometric_product[e315])
                - (self[e12] * geometric_product[e125])
                - (self[e15] * geometric_product[e1])
                - (self[e15] * geometric_product[e415])
                - (self[e25] * geometric_product[e2])
                - (self[e25] * geometric_product[e425])
                - (self[e35] * geometric_product[e3])
                - (self[e35] * geometric_product[e435]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e12] * geometric_product[e25]) + (self[e45] * geometric_product[e15]),
                (self[e31] * geometric_product[e3215]) + (self[e45] * geometric_product[e25]),
                (self[e12] * geometric_product[e3215]) + (self[e45] * geometric_product[e35]),
                -(self[e31] * geometric_product[e4315]) - (self[e12] * geometric_product[e4125]),
            ]) + (Simd32x4::from(geometric_product[scalar]) * self.group2().with_w(self[e45]))
                + (Simd32x4::from([geometric_product[e31], geometric_product[e4235], geometric_product[e23], geometric_product[e25]]) * self.group2().zzy().with_w(self[e42]))
                + (Simd32x4::from([geometric_product[e4125], geometric_product[e12], geometric_product[e4315], geometric_product[e15]]) * self.group2().yxx().with_w(self[e41]))
                + (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e35]]) * self.group1().xxy().with_w(self[e43]))
                - (Simd32x4::from(self[e15]) * Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e31], geometric_product[e41]]))
                - (Simd32x4::from(self[e25]) * Simd32x4::from([geometric_product[e12], geometric_product[e45], geometric_product[e4235], geometric_product[e42]]))
                - (Simd32x4::from(self[e35]) * Simd32x4::from([geometric_product[e4315], geometric_product[e23], geometric_product[e45], geometric_product[e43]]))
                - (self.group1().yzxx() * geometric_product.group3().zxy().with_w(geometric_product[e4235])),
            // e41, e42, e43
            (Simd32x3::from(geometric_product[scalar]) * self.group0())
                + (Simd32x3::from(geometric_product[e1234]) * self.group1().xyz())
                + (Simd32x3::from([geometric_product[e45], geometric_product[e12], geometric_product[e23]]) * self.group0().xxy())
                + (Simd32x3::from([geometric_product[e31], geometric_product[e4125], geometric_product[e4235]]) * self.group0().zxy())
                + (Simd32x3::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45]]) * self.group0().zyz())
                + (geometric_product.group4().yzx() * self.group1().zxy())
                - (self.group0().yzx() * geometric_product.group5().zxy())
                - (self.group0().yzx() * geometric_product.group9().zxy())
                - (geometric_product.group4().xxy() * self.group1().wzx())
                - (geometric_product.group4().zyz() * self.group1().yww()),
            // e23, e31, e12
            (Simd32x3::from(self[e45]) * geometric_product.group9().xyz())
                + (Simd32x3::from(geometric_product[scalar]) * self.group1().xyz())
                + (Simd32x3::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215]]) * self.group0().zyz())
                + (Simd32x3::from([geometric_product[e42], geometric_product[e1234], geometric_product[e1234]]) * self.group2().zyz())
                + (Simd32x3::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15]]) * self.group0().xxy())
                + (Simd32x3::from([geometric_product[e1234], geometric_product[e43], geometric_product[e41]]) * self.group2().xxy())
                + (geometric_product.group5().yzx() * self.group1().zxy())
                - (self.group0().yzx() * geometric_product.group3().zxy())
                - (self.group2().yzx() * geometric_product.group4().zxy())
                - (geometric_product.group5().zxy() * self.group1().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e12] * geometric_product[e425]) + (self[e15] * geometric_product[e4]) + (self[e35] * geometric_product[e431]),
                (self[e23] * geometric_product[e435]) + (self[e15] * geometric_product[e412]) + (self[e25] * geometric_product[e4]),
                (self[e31] * geometric_product[e415]) + (self[e25] * geometric_product[e423]) + (self[e35] * geometric_product[e4]),
                -(self[e23] * geometric_product[e1]) - (self[e31] * geometric_product[e2]) - (self[e12] * geometric_product[e3]),
            ]) + (Simd32x4::from([geometric_product[e5], geometric_product[e125], geometric_product[e235], geometric_product[e431]]) * self.group0().xxy().with_w(self[e25]))
                + (Simd32x4::from([geometric_product[e315], geometric_product[e5], geometric_product[e5], geometric_product[e412]]) * self.group0().zyz().with_w(self[e35]))
                + (geometric_product.group0().yy().with_zw(geometric_product[e12345], self[e15]) * self.group1().xyz().with_w(geometric_product[e423]))
                - (self.group0().yzx() * geometric_product.group8().zxy()).with_w(self[e45] * geometric_product[e12345])
                - (self.group2().yzx() * geometric_product.group7().zxy()).with_w(self[e41] * geometric_product[e235])
                - (self.group1().yzx() * geometric_product.group6().zxy()).with_w(self[e42] * geometric_product[e315])
                - (self.group1().www() * geometric_product.group1().xyz()).with_w(self[e43] * geometric_product[e125]),
            // e423, e431, e412
            (Simd32x3::from(geometric_product[e12345]) * self.group0())
                + (Simd32x3::from(geometric_product[e4]) * self.group1().xyz())
                + (Simd32x3::from([geometric_product[e3], geometric_product[e435], geometric_product[e2]]) * self.group0().yxx())
                + (Simd32x3::from([geometric_product[e425], geometric_product[e1], geometric_product[e415]]) * self.group0().zzy())
                + (geometric_product.group7().yzx() * self.group1().zxy())
                - (Simd32x3::from(self[e41]) * Simd32x3::from([geometric_product[e321], geometric_product[e3], geometric_product[e425]]))
                - (Simd32x3::from(self[e42]) * Simd32x3::from([geometric_product[e435], geometric_product[e321], geometric_product[e1]]))
                - (Simd32x3::from(self[e43]) * Simd32x3::from([geometric_product[e2], geometric_product[e415], geometric_product[e321]]))
                - (geometric_product.group7().xxy() * self.group1().wzx())
                - (geometric_product.group7().zyz() * self.group1().yww()),
            // e235, e315, e125
            (Simd32x3::from(geometric_product[e12345]) * self.group2())
                + (Simd32x3::from(geometric_product[e5]) * self.group1().xyz())
                + (Simd32x3::from([geometric_product[e2], geometric_product[e435], geometric_product[e415]]) * self.group2().zxy())
                + (Simd32x3::from([geometric_product[e321], geometric_product[e3], geometric_product[e1]]) * self.group2().xxy())
                + (self.group2().zyz() * geometric_product.group6().yww())
                + (geometric_product.group8().xyx() * self.group1().wwy())
                + (geometric_product.group8().yzz() * self.group1().zxw())
                - (self.group2().yzx() * geometric_product.group1().zxy())
                - (self.group2().yzx() * geometric_product.group6().zxy())
                - (geometric_product.group8().zxy() * self.group1().yzx()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e23] * geometric_product[e45]) + (self[e12] * geometric_product[e4315]),
                (self[e23] * geometric_product[e4125]) + (self[e31] * geometric_product[e45]),
                (self[e31] * geometric_product[e4235]) + (self[e12] * geometric_product[e45]),
                -(self[e31] * geometric_product[e25]) - (self[e12] * geometric_product[e35]),
            ]) + (Simd32x4::from([geometric_product[e42], geometric_product[e1234], geometric_product[e1234], geometric_product[e4125]]) * self.group2().zyz().with_w(self[e35]))
                + (Simd32x4::from([geometric_product[e1234], geometric_product[e43], geometric_product[e41], geometric_product[e4315]]) * self.group2().xxy().with_w(self[e25]))
                + (geometric_product.group5() * self.group1().www()).with_w(self[e45] * geometric_product[e3215])
                + (self.group0().yzx() * geometric_product.group3().zxy()).with_w(self[e15] * geometric_product[e4235])
                - (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], geometric_product[e31]]) * self.group0().zyz().with_w(self[e25]))
                - (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e23]]) * self.group0().xxy().with_w(self[e15]))
                - (self.group1().yzxx() * geometric_product.group9().zxy().with_w(geometric_product[e15]))
                - (self.group2().yzx() * geometric_product.group4().zxy()).with_w(self[e35] * geometric_product[e12]),
            // e1234
            -(self[e41] * geometric_product[e23])
                - (self[e41] * geometric_product[e4235])
                - (self[e42] * geometric_product[e31])
                - (self[e42] * geometric_product[e4315])
                - (self[e43] * geometric_product[e12])
                - (self[e43] * geometric_product[e4125])
                - (self[e23] * geometric_product[e41])
                - (self[e31] * geometric_product[e42])
                - (self[e12] * geometric_product[e43])
                - (self[e45] * geometric_product[e1234]),
        );
    }
}
impl GeometricQuotient<Plane> for Dipole {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       26        0
    //    simd3        1        2        0
    //    simd4        2        3        0
    // Totals...
    // yes simd       19       31        0
    //  no simd       27       44        0
    fn geometric_quotient(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Plane::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(-f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2)) * other.group0(),
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (self.group0().zxy() * geometric_product.group0().yzx()) - (self.group0().yzx() * geometric_product.group0().zxy()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e41] * geometric_product[e3215]) + (self[e45] * geometric_product[e4235]),
                (self[e42] * geometric_product[e3215]) + (self[e45] * geometric_product[e4315]),
                (self[e43] * geometric_product[e3215]) + (self[e45] * geometric_product[e4125]),
                -(self[e23] * geometric_product[e4235]) - (self[e31] * geometric_product[e4315]) - (self[e12] * geometric_product[e4125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * geometric_product[e3215]) + (self[e25] * geometric_product[e4125]),
                (self[e31] * geometric_product[e3215]) + (self[e35] * geometric_product[e4235]),
                (self[e12] * geometric_product[e3215]) + (self[e15] * geometric_product[e4315]),
                -(self[e42] * geometric_product[e4315]) - (self[e43] * geometric_product[e4125]),
            ]) - (geometric_product.group0().yzxx() * self.group2().zxy().with_w(self[e41])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(self[e41] * geometric_product[e3215]) - (self[e31] * geometric_product[e4125]),
                -(self[e42] * geometric_product[e3215]) - (self[e12] * geometric_product[e4235]),
                -(self[e43] * geometric_product[e3215]) - (self[e23] * geometric_product[e4315]),
                (self[e45] * geometric_product[e3215]) + (self[e25] * geometric_product[e4315]) + (self[e35] * geometric_product[e4125]),
            ]) + (geometric_product.group0().yzxx() * self.group1().zxy().with_w(self[e15])),
        );
    }
}
impl GeometricQuotient<RoundPoint> for Dipole {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       18        0
    //    simd3        2        4        0
    //    simd4        7        7        0
    // Totals...
    // yes simd       16       29        0
    //  no simd       41       58        0
    fn geometric_quotient(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2) - 2.0 * (other[e4] * other[e5]),
        );
        let geometric_product = RoundPoint::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from(other_2[scalar]) * other.group0(), /* e5 */ other[e5] * other_2[scalar]);
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(geometric_product[e4]) * self.group1().xyz()) + (self.group0().yzx() * geometric_product.group0().zxy())
                - (self.group0().zxy() * geometric_product.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e41] * geometric_product[e5]) + (self[e15] * geometric_product[e4]),
                (self[e42] * geometric_product[e5]) + (self[e25] * geometric_product[e4]),
                (self[e43] * geometric_product[e5]) + (self[e35] * geometric_product[e4]),
                -(self[e31] * geometric_product[e2]) - (self[e12] * geometric_product[e3]),
            ]) - (self.group1().wwwx() * geometric_product.group0().xyzx()),
            // e235, e315, e125, e4
            (geometric_product.group0().yzxx() * self.group2().zxy().with_w(self[e41]))
                + Simd32x3::from(0.0).with_w(self[e43] * geometric_product[e3])
                + (Simd32x3::from(geometric_product[e5]) * self.group1().xyz()).with_w(self[e42] * geometric_product[e2])
                - (geometric_product.group0().zxyw() * self.group2().yzx().with_w(self[e45])),
            // e1, e2, e3, e5
            Simd32x4::from([
                self[e12] * geometric_product[e2],
                self[e23] * geometric_product[e3],
                self[e31] * geometric_product[e1],
                self[e35] * geometric_product[e3] * -1.0,
            ]) + (Simd32x4::from(geometric_product[e5]) * self.group0().with_w(self[e45]))
                - (geometric_product.group0().zxyy() * self.group1().yzx().with_w(self[e25]))
                - (geometric_product.group0().wwwx() * self.group2().with_w(self[e15])),
        );
    }
}
impl GeometricQuotient<Scalar> for Dipole {
    type Output = Dipole;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        0        1
    //    simd3        0        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        3        1
    //  no simd        0       10        1
    fn geometric_quotient(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Scalar::from_groups(/* scalar */ 1.0 / other[scalar]);
        return Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(geometric_product[scalar]) * self.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(geometric_product[scalar]) * self.group1(),
            // e15, e25, e35
            Simd32x3::from(geometric_product[scalar]) * self.group2(),
        );
    }
}
impl GeometricQuotient<Sphere> for Dipole {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       33        0
    //    simd3        2        4        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       25       40        0
    //  no simd       38       57        0
    fn geometric_quotient(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e3215] * other[e1234]) - f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2),
        );
        let geometric_product = Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * other.group0(),
            // e1234
            other_2[scalar] * other[e1234],
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(geometric_product[e1234]) * self.group1().xyz()) + (self.group0().zxy() * geometric_product.group0().yzx())
                - (self.group0().yzx() * geometric_product.group0().zxy()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e41] * geometric_product[e3215]) + (self[e45] * geometric_product[e4235]) + (self[e15] * geometric_product[e1234]),
                (self[e42] * geometric_product[e3215]) + (self[e45] * geometric_product[e4315]) + (self[e25] * geometric_product[e1234]),
                (self[e43] * geometric_product[e3215]) + (self[e45] * geometric_product[e4125]) + (self[e35] * geometric_product[e1234]),
                -(self[e23] * geometric_product[e4235]) - (self[e31] * geometric_product[e4315]) - (self[e12] * geometric_product[e4125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * geometric_product[e3215]) + (self[e25] * geometric_product[e4125]),
                (self[e31] * geometric_product[e3215]) + (self[e35] * geometric_product[e4235]),
                (self[e12] * geometric_product[e3215]) + (self[e15] * geometric_product[e4315]),
                -(self[e42] * geometric_product[e4315]) - (self[e43] * geometric_product[e4125]) - (self[e45] * geometric_product[e1234]),
            ]) - (geometric_product.group0().yzxx() * self.group2().zxy().with_w(self[e41])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(self[e41] * geometric_product[e3215]) - (self[e31] * geometric_product[e4125]),
                -(self[e42] * geometric_product[e3215]) - (self[e12] * geometric_product[e4235]),
                -(self[e43] * geometric_product[e3215]) - (self[e23] * geometric_product[e4315]),
                (self[e45] * geometric_product[e3215]) + (self[e35] * geometric_product[e4125]),
            ]) + (geometric_product.group0().yzxy() * self.group1().zxy().with_w(self[e25]))
                + (Simd32x3::from(geometric_product[e1234]) * self.group2()).with_w(self[e15] * geometric_product[e4235]),
        );
    }
}
impl GeometricQuotient<VersorEven> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       59       81        0
    //    simd3        0        9        0
    //    simd4       24       22        0
    // Totals...
    // yes simd       83      112        0
    //  no simd      155      196        0
    fn geometric_quotient(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let reverse = VersorEven::from_groups(
            // e423, e431, e412, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e5
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e4
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)
                - f32::powi(other[e12345], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125])
                - 2.0 * (other[e5] * other[e4]),
        );
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e5
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e1, e2, e3, e4
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e41] * geometric_product[e12345])
                    + (self[e42] * geometric_product[e3])
                    + (self[e43] * geometric_product[e425])
                    + (self[e23] * geometric_product[e4])
                    + (self[e12] * geometric_product[e431]),
                (self[e41] * geometric_product[e435])
                    + (self[e42] * geometric_product[e12345])
                    + (self[e43] * geometric_product[e1])
                    + (self[e23] * geometric_product[e412])
                    + (self[e31] * geometric_product[e4]),
                (self[e41] * geometric_product[e2])
                    + (self[e42] * geometric_product[e415])
                    + (self[e43] * geometric_product[e12345])
                    + (self[e31] * geometric_product[e423])
                    + (self[e12] * geometric_product[e4]),
                -(self[e23] * geometric_product[e415])
                    - (self[e31] * geometric_product[e425])
                    - (self[e12] * geometric_product[e435])
                    - (self[e45] * geometric_product[e321])
                    - (self[e35] * geometric_product[e412]),
            ]) - (Simd32x4::from(self[e41]) * Simd32x4::from([geometric_product[e321], geometric_product[e3], geometric_product[e425], geometric_product[e235]]))
                - (Simd32x4::from(self[e42]) * geometric_product.group1().zw().with_zw(geometric_product[e1], geometric_product[e315]))
                - (Simd32x4::from(self[e43]) * Simd32x4::from([geometric_product[e2], geometric_product[e415], geometric_product[e321], geometric_product[e125]]))
                - (geometric_product.group0().xyzy() * self.group1().www().with_w(self[e25]))
                - (geometric_product.group0().zxyx() * self.group1().yzx().with_w(self[e15])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e23] * geometric_product[e12345]) + (self[e12] * geometric_product[e425]) + (self[e35] * geometric_product[e431]),
                (self[e23] * geometric_product[e435]) + (self[e31] * geometric_product[e12345]) + (self[e25] * geometric_product[e4]),
                (self[e31] * geometric_product[e415]) + (self[e12] * geometric_product[e12345]) + (self[e35] * geometric_product[e4]),
                -(self[e31] * geometric_product[e2]) - (self[e12] * geometric_product[e3]) - (self[e45] * geometric_product[e12345]),
            ]) + (Simd32x4::from([geometric_product[e4], geometric_product[e412], geometric_product[e423], geometric_product[e412]]) * self.group2().xxy().with_w(self[e35]))
                + (self.group0().xxy() * geometric_product.group2().wzx()).with_w(self[e15] * geometric_product[e423])
                + (self.group0().zyz() * geometric_product.group2().yww()).with_w(self[e25] * geometric_product[e431])
                - (self.group1().wwwx() * geometric_product.group3().xyzx())
                - (geometric_product.group2().zxyx() * self.group0().yzx().with_w(self[e41]))
                - (self.group2().yzx() * geometric_product.group0().zxy()).with_w(self[e42] * geometric_product[e315])
                - (self.group1().yzx() * geometric_product.group1().zxy()).with_w(self[e43] * geometric_product[e125]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e23] * geometric_product[e5])
                    + (self[e12] * geometric_product[e315])
                    + (self[e45] * geometric_product[e235])
                    + (self[e15] * geometric_product[e321])
                    + (self[e35] * geometric_product[e425])
                    + (self[e35] * geometric_product[e2]),
                (self[e23] * geometric_product[e125])
                    + (self[e31] * geometric_product[e5])
                    + (self[e45] * geometric_product[e315])
                    + (self[e15] * geometric_product[e3])
                    + (self[e25] * geometric_product[e12345])
                    + (self[e25] * geometric_product[e321]),
                (self[e31] * geometric_product[e235])
                    + (self[e12] * geometric_product[e5])
                    + (self[e45] * geometric_product[e125])
                    + (self[e25] * geometric_product[e1])
                    + (self[e35] * geometric_product[e12345])
                    + (self[e35] * geometric_product[e321]),
                -(self[e23] * geometric_product[e235])
                    - (self[e31] * geometric_product[e315])
                    - (self[e12] * geometric_product[e125])
                    - (self[e25] * geometric_product[e2])
                    - (self[e35] * geometric_product[e435])
                    - (self[e35] * geometric_product[e3]),
            ]) + (Simd32x4::from([geometric_product[e12345], geometric_product[e435], geometric_product[e415], geometric_product[e5]]) * self.group2().xxy().with_w(self[e45]))
                - (geometric_product.group1().zxyx() * self.group2().yzx().with_w(self[e15]))
                - (geometric_product.group3().zxyx() * self.group2().yzx().with_w(self[e15]))
                - (self.group1().yzx() * geometric_product.group2().zxy()).with_w(self[e25] * geometric_product[e425]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e23] * geometric_product[e321]) + (self[e12] * geometric_product[e2]),
                (self[e23] * geometric_product[e3]) + (self[e31] * geometric_product[e321]),
                (self[e31] * geometric_product[e1]) + (self[e12] * geometric_product[e321]),
                -(self[e12] * geometric_product[e412]) - (self[e45] * geometric_product[e4]),
            ]) + (self.group0().xxy() * geometric_product.group2().wzx()).with_w(self[e41] * geometric_product[e1])
                + (self.group0().zyz() * geometric_product.group2().yww()).with_w(self[e42] * geometric_product[e2])
                + (self.group2().yzx() * geometric_product.group0().zxy()).with_w(self[e43] * geometric_product[e3])
                - (Simd32x4::from([geometric_product[e431], geometric_product[e4], geometric_product[e4], geometric_product[e435]]) * self.group2().zyz().with_w(self[e43]))
                - (Simd32x4::from([geometric_product[e4], geometric_product[e412], geometric_product[e423], geometric_product[e425]]) * self.group2().xxy().with_w(self[e42]))
                - (self.group1().yzxx() * geometric_product.group3().zxy().with_w(geometric_product[e423]))
                - (self.group1().wwwy() * geometric_product.group1().xyz().with_w(geometric_product[e431]))
                - (self.group0().yzx() * geometric_product.group2().zxy()).with_w(self[e41] * geometric_product[e415]),
        );
    }
}
impl GeometricQuotient<VersorOdd> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       59       80        0
    //    simd3        0        8        0
    //    simd4       24       23        0
    // Totals...
    // yes simd       83      111        0
    //  no simd      155      196        0
    fn geometric_quotient(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let reverse = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + 2.0 * (other[e1234] * other[e3215])
                + f32::powi(other[scalar], 2)
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2),
        );
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e41] * geometric_product[e45])
                    + (self[e43] * geometric_product[e31])
                    + (self[e43] * geometric_product[e4315])
                    + (self[e23] * geometric_product[e1234])
                    + (self[e12] * geometric_product[e42]),
                (self[e41] * geometric_product[e4125])
                    + (self[e42] * geometric_product[scalar])
                    + (self[e42] * geometric_product[e45])
                    + (self[e23] * geometric_product[e43])
                    + (self[e31] * geometric_product[e1234]),
                (self[e42] * geometric_product[e4235])
                    + (self[e43] * geometric_product[scalar])
                    + (self[e43] * geometric_product[e45])
                    + (self[e31] * geometric_product[e41])
                    + (self[e12] * geometric_product[e1234]),
                -(self[e23] * geometric_product[e23])
                    - (self[e31] * geometric_product[e31])
                    - (self[e12] * geometric_product[e12])
                    - (self[e25] * geometric_product[e42])
                    - (self[e35] * geometric_product[e43]),
            ]) + (Simd32x4::from([geometric_product[scalar], geometric_product[e12], geometric_product[e23], geometric_product[e45]]) * self.group0().xxy().with_w(self[e45]))
                - (geometric_product.group0().xyzx() * self.group1().www().with_w(self[e15]))
                - (self.group0().yzx() * geometric_product.group1().zxy()).with_w(self[e41] * geometric_product[e15])
                - (self.group0().yzx() * geometric_product.group3().zxy()).with_w(self[e42] * geometric_product[e25])
                - (self.group1().yzx() * geometric_product.group0().zxy()).with_w(self[e43] * geometric_product[e35]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e23] * geometric_product[scalar]) + (self[e12] * geometric_product[e31]) + (self[e45] * geometric_product[e4235]),
                (self[e23] * geometric_product[e12]) + (self[e31] * geometric_product[scalar]) + (self[e45] * geometric_product[e4315]),
                (self[e31] * geometric_product[e23]) + (self[e12] * geometric_product[scalar]) + (self[e45] * geometric_product[e4125]),
                -(self[e23] * geometric_product[e4235]) - (self[e31] * geometric_product[e4315]) - (self[e12] * geometric_product[e4125]),
            ]) + (Simd32x4::from([geometric_product[e42], geometric_product[e1234], geometric_product[e1234], geometric_product[scalar]]) * self.group2().zyz().with_w(self[e45]))
                + (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], geometric_product[e25]]) * self.group0().zyz().with_w(self[e42]))
                + (Simd32x4::from([geometric_product[e1234], geometric_product[e43], geometric_product[e41], geometric_product[e35]]) * self.group2().xxy().with_w(self[e43]))
                + (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e15]]) * self.group0().xxy().with_w(self[e41]))
                - (geometric_product.group0().zxyy() * self.group2().yzx().with_w(self[e25]))
                - (self.group0().yzx() * geometric_product.group2().zxy()).with_w(self[e15] * geometric_product[e41])
                - (self.group1().yzx() * geometric_product.group1().zxy()).with_w(self[e35] * geometric_product[e43]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * geometric_product[e3215])
                    + (self[e12] * geometric_product[e25])
                    + (self[e45] * geometric_product[e15])
                    + (self[e15] * geometric_product[scalar])
                    + (self[e25] * geometric_product[e4125])
                    + (self[e35] * geometric_product[e31]),
                (self[e23] * geometric_product[e35])
                    + (self[e31] * geometric_product[e3215])
                    + (self[e45] * geometric_product[e25])
                    + (self[e15] * geometric_product[e12])
                    + (self[e25] * geometric_product[scalar])
                    + (self[e35] * geometric_product[e4235]),
                (self[e31] * geometric_product[e15])
                    + (self[e12] * geometric_product[e3215])
                    + (self[e45] * geometric_product[e35])
                    + (self[e15] * geometric_product[e4315])
                    + (self[e25] * geometric_product[e23])
                    + (self[e35] * geometric_product[scalar]),
                -(self[e43] * geometric_product[e12])
                    - (self[e43] * geometric_product[e4125])
                    - (self[e23] * geometric_product[e41])
                    - (self[e31] * geometric_product[e42])
                    - (self[e12] * geometric_product[e43])
                    - (self[e45] * geometric_product[e1234]),
            ]) - (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e31], geometric_product[e23]]) * self.group2().xxx().with_w(self[e41]))
                - (Simd32x4::from([geometric_product[e4315], geometric_product[e23], geometric_product[e45], geometric_product[e31]]) * self.group2().zzz().with_w(self[e42]))
                - (geometric_product.group1().zw().with_zw(geometric_product[e4235], geometric_product[e4235]) * self.group2().yyy().with_w(self[e41]))
                - (self.group1().yzx() * geometric_product.group2().zxy()).with_w(self[e42] * geometric_product[e4315]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e12] * geometric_product[e4315]) + (self[e45] * geometric_product[e23]),
                (self[e31] * geometric_product[e45]) + (self[e45] * geometric_product[e31]),
                (self[e12] * geometric_product[e45]) + (self[e45] * geometric_product[e12]),
                -(self[e31] * geometric_product[e25]) - (self[e12] * geometric_product[e35]),
            ]) + (Simd32x4::from([geometric_product[e42], geometric_product[e1234], geometric_product[e1234], geometric_product[e4125]]) * self.group2().zyz().with_w(self[e35]))
                + (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], geometric_product[e3215]]) * self.group1().xxyw())
                + (Simd32x4::from([geometric_product[e1234], geometric_product[e43], geometric_product[e41], geometric_product[e4315]]) * self.group2().xxy().with_w(self[e25]))
                + (self.group0().yzx() * geometric_product.group2().zxy()).with_w(self[e15] * geometric_product[e4235])
                - (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], geometric_product[e31]]) * self.group0().zyz().with_w(self[e25]))
                - (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e23]]) * self.group0().xxy().with_w(self[e15]))
                - (self.group1().yzxx() * geometric_product.group3().zxy().with_w(geometric_product[e15]))
                - (self.group2().yzx() * geometric_product.group0().zxy()).with_w(self[e35] * geometric_product[e12]),
        );
    }
}
impl std::ops::Div<GeometricQuotientInfix> for DipoleInversion {
    type Output = GeometricQuotientInfixPartial<DipoleInversion>;
    fn div(self, _rhs: GeometricQuotientInfix) -> Self::Output {
        GeometricQuotientInfixPartial(self)
    }
}
impl GeometricQuotient<AntiCircleRotor> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       52       76        0
    //    simd3        0       11        0
    //    simd4       26       21        0
    // Totals...
    // yes simd       78      108        0
    //  no simd      156      193        0
    fn geometric_quotient(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiCircleRotor::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, scalar
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                + f32::powi(other[scalar], 2)
                - f32::powi(other[e45], 2),
        );
        let geometric_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (geometric_product[e43] * self[e4315])
                    + (geometric_product[e23] * self[e1234])
                    + (geometric_product[e31] * self[e43])
                    + (geometric_product[e45] * self[e41])
                    + (geometric_product[scalar] * self[e41]),
                (geometric_product[e43] * self[e23])
                    + (geometric_product[e31] * self[e1234])
                    + (geometric_product[e12] * self[e41])
                    + (geometric_product[e45] * self[e42])
                    + (geometric_product[scalar] * self[e42]),
                (geometric_product[e42] * self[e4235])
                    + (geometric_product[e23] * self[e42])
                    + (geometric_product[e12] * self[e1234])
                    + (geometric_product[e45] * self[e43])
                    + (geometric_product[scalar] * self[e43]),
                -(geometric_product[e23] * self[e23])
                    - (geometric_product[e31] * self[e31])
                    - (geometric_product[e12] * self[e12])
                    - (geometric_product[e25] * self[e42])
                    - (geometric_product[e35] * self[e43]),
            ]) + (Simd32x4::from([self[e12], self[e4125], self[e31], self[e45]]) * geometric_product.group0().yxx().with_w(geometric_product[e45]))
                - (Simd32x4::from(geometric_product[e41]) * self.group1().wz().with_zw(self[e4315], self[e15]))
                - (Simd32x4::from(geometric_product[e42]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(geometric_product[e43]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]]))
                - (self.group0().yzx() * geometric_product.group1().zxy()).with_w(geometric_product[e15] * self[e41]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (geometric_product[e45] * self[e4235]) + (geometric_product[e15] * self[e1234]) + (geometric_product[scalar] * self[e23]),
                (geometric_product[e45] * self[e4315]) + (geometric_product[e25] * self[e1234]) + (geometric_product[scalar] * self[e31]),
                (geometric_product[e45] * self[e4125]) + (geometric_product[e35] * self[e1234]) + (geometric_product[scalar] * self[e12]),
                -(geometric_product[e23] * self[e4235]) - (geometric_product[e31] * self[e4315]) - (geometric_product[e12] * self[e4125]),
            ]) + (geometric_product.group2().yzxz() * self.group0().zxy().with_w(self[e43]))
                + (self.group1().zxyw() * geometric_product.group1().yzx().with_w(geometric_product[scalar]))
                + (self.group2().zx().with_zw(self[e3215], geometric_product[e25]) * geometric_product.group0().yzz().with_w(self[e42]))
                + (self.group3().ww().with_zw(self[e25], geometric_product[e15]) * geometric_product.group0().xyx().with_w(self[e41]))
                - (self.group2().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e41]))
                - (self.group0().yzx() * geometric_product.group2().zxy()).with_w(geometric_product[e42] * self[e25])
                - (geometric_product.group1().zxy() * self.group1().yzx()).with_w(geometric_product[e43] * self[e35]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                geometric_product[scalar] * self[e15],
                geometric_product[scalar] * self[e25],
                geometric_product[scalar] * self[e35],
                -(geometric_product[e31] * self[e42]) - (geometric_product[e12] * self[e43]),
            ]) + (geometric_product.group2().yzzw() * self.group3().zx().with_zw(self[e45], self[e1234]))
                + (self.group1().zx().with_zw(self[e4315], self[e1234]) * geometric_product.group2().yzx().with_w(geometric_product[e45]))
                + (self.group2().zx().with_zw(self[e3215], self[e4315]) * geometric_product.group1().yzz().with_w(geometric_product[e42]))
                + (self.group3().ww().with_zw(self[e25], self[e4235]) * geometric_product.group1().xyx().with_w(geometric_product[e41]))
                + (geometric_product.group2().xyx() * self.group1().wwy()).with_w(geometric_product[e43] * self[e4125])
                - (self.group1().yzxz() * geometric_product.group2().zxy().with_w(geometric_product[e43]))
                - (geometric_product.group1().zxy() * self.group2().yzx()).with_w(geometric_product[e41] * self[e23])
                - (geometric_product.group1().www() * self.group2().xyz()).with_w(geometric_product[e42] * self[e31])
                - (geometric_product.group2().zxy() * self.group3().yzx()).with_w(geometric_product[e23] * self[e41]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (geometric_product[e42] * self[e35])
                    + (geometric_product[e23] * self[e45])
                    + (geometric_product[e31] * self[e4125])
                    + (geometric_product[e45] * self[e23])
                    + (geometric_product[e35] * self[e42])
                    + (geometric_product[scalar] * self[e4235]),
                (geometric_product[e43] * self[e15])
                    + (geometric_product[e31] * self[e45])
                    + (geometric_product[e12] * self[e4235])
                    + (geometric_product[e45] * self[e31])
                    + (geometric_product[e15] * self[e43])
                    + (geometric_product[scalar] * self[e4315]),
                (geometric_product[e43] * self[e3215])
                    + (geometric_product[e23] * self[e4315])
                    + (geometric_product[e12] * self[e45])
                    + (geometric_product[e45] * self[e12])
                    + (geometric_product[e25] * self[e41])
                    + (geometric_product[scalar] * self[e4125]),
                -(geometric_product[e15] * self[e23])
                    - (geometric_product[e15] * self[e4235])
                    - (geometric_product[e25] * self[e31])
                    - (geometric_product[e25] * self[e4315])
                    - (geometric_product[e35] * self[e12])
                    - (geometric_product[e35] * self[e4125]),
            ]) + (self.group3().ww().with_zw(self[e25], self[e3215]) * geometric_product.group0().xyx().with_w(geometric_product[scalar]))
                - (geometric_product.group1().zxyz() * self.group3().yzx().with_w(self[e35]))
                - (self.group2().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e23]))
                - (self.group0().zxy() * geometric_product.group2().yzx()).with_w(geometric_product[e31] * self[e25])
                - (self.group2().www() * geometric_product.group2().xyz()).with_w(geometric_product[e45] * self[e3215]),
        );
    }
}
impl GeometricQuotient<AntiDipoleInversion> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       39       70        0
    //    simd3        0       17        0
    //    simd4       45       35        0
    // Totals...
    // yes simd       84      122        0
    //  no simd      219      261        0
    fn geometric_quotient(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e4
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125])
                - 2.0 * (other[e4] * other[e5]),
        );
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e4
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e1, e2, e3, e5
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                geometric_product[e4] * self[e23],
                geometric_product[e4] * self[e31],
                geometric_product[e4] * self[e12],
                -(geometric_product[e435] * self[e12]) - (geometric_product[e321] * self[e45]),
            ]) + (Simd32x4::from(self[e1234]) * geometric_product.group1().xyz().with_w(geometric_product[e5]))
                + (Simd32x4::from([geometric_product[e425], geometric_product[e1], geometric_product[e415], self[e4125]]) * self.group0().zzy().with_w(geometric_product[e3]))
                + (Simd32x4::from([geometric_product[e3], geometric_product[e435], geometric_product[e2], self[e4315]]) * self.group0().yxx().with_w(geometric_product[e2]))
                + (Simd32x4::from([self[e12], self[e4125], self[e31], self[e3215]]) * geometric_product.group0().yxx().with_w(geometric_product[e4]))
                + (Simd32x4::from([self[e4315], self[e23], self[e4235], self[e4235]]) * geometric_product.group0().zzy().with_w(geometric_product[e1]))
                - (Simd32x4::from(geometric_product[e423]) * self.group1().wz().with_zw(self[e4315], self[e15]))
                - (Simd32x4::from(geometric_product[e431]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(geometric_product[e412]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]]))
                - (Simd32x4::from(self[e41]) * Simd32x4::from([geometric_product[e321], geometric_product[e3], geometric_product[e425], geometric_product[e235]]))
                - (Simd32x4::from(self[e42]) * geometric_product.group1().zw().with_zw(geometric_product[e1], geometric_product[e315]))
                - (Simd32x4::from(self[e43]) * Simd32x4::from([geometric_product[e2], geometric_product[e415], geometric_product[e321], geometric_product[e125]]))
                - (geometric_product.group2().www() * self.group3().xyz()).with_w(geometric_product[e415] * self[e23])
                - (self.group2().www() * geometric_product.group3().xyz()).with_w(geometric_product[e425] * self[e31]),
            // e415, e425, e435, e321
            Simd32x4::from([
                geometric_product[e3] * self[e4315],
                geometric_product[e1] * self[e4125],
                geometric_product[e2] * self[e4235],
                geometric_product[e3] * self[e12] * -1.0,
            ]) + (Simd32x4::from([geometric_product[e315], geometric_product[e5], geometric_product[e5], self[e4235]]) * self.group0().zyz().with_w(geometric_product[e415]))
                + (Simd32x4::from([geometric_product[e5], geometric_product[e125], geometric_product[e235], self[e35]]) * self.group0().xxy().with_w(geometric_product[e412]))
                + (self.group2() * geometric_product.group2().www().with_w(geometric_product[e5]))
                + (geometric_product.group1().yzxy() * self.group1().zxy().with_w(self[e4315]))
                + (self.group2().zx().with_zw(self[e3215], self[e25]) * geometric_product.group0().yzz().with_w(geometric_product[e431]))
                + (self.group3().ww().with_zw(self[e25], self[e15]) * geometric_product.group0().xyx().with_w(geometric_product[e423]))
                + (self.group2().www() * geometric_product.group2().xyz()).with_w(geometric_product[e435] * self[e4125])
                - (self.group3() * geometric_product.group1().www().with_w(geometric_product[e4]))
                - (geometric_product.group2().zxyy() * self.group0().yzx().with_w(self[e42]))
                - (geometric_product.group3().xyxx() * self.group1().ww().with_zw(self[e4315], self[e23]))
                - (geometric_product.group3().yzzy() * self.group3().zx().with_zw(self[e45], self[e31]))
                - (geometric_product.group0().zxy() * self.group2().yzx()).with_w(geometric_product[e235] * self[e41])
                - (geometric_product.group1().zxy() * self.group1().yzx()).with_w(geometric_product[e125] * self[e43]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (geometric_product[e321] * self[e15])
                    + (geometric_product[e235] * self[e45])
                    + (geometric_product[e315] * self[e12])
                    + (geometric_product[e315] * self[e4125])
                    + (geometric_product[e1] * self[e3215])
                    + (geometric_product[e2] * self[e35])
                    + (geometric_product[e5] * self[e23])
                    + (geometric_product[e5] * self[e4235]),
                (geometric_product[e321] * self[e25])
                    + (geometric_product[e315] * self[e45])
                    + (geometric_product[e125] * self[e23])
                    + (geometric_product[e125] * self[e4235])
                    + (geometric_product[e2] * self[e3215])
                    + (geometric_product[e3] * self[e15])
                    + (geometric_product[e5] * self[e31])
                    + (geometric_product[e5] * self[e4315]),
                (geometric_product[e321] * self[e35])
                    + (geometric_product[e235] * self[e31])
                    + (geometric_product[e235] * self[e4315])
                    + (geometric_product[e125] * self[e45])
                    + (geometric_product[e1] * self[e25])
                    + (geometric_product[e3] * self[e3215])
                    + (geometric_product[e5] * self[e12])
                    + (geometric_product[e5] * self[e4125]),
                -(geometric_product[e235] * self[e4235])
                    - (geometric_product[e315] * self[e31])
                    - (geometric_product[e315] * self[e4315])
                    - (geometric_product[e125] * self[e12])
                    - (geometric_product[e125] * self[e4125])
                    - (geometric_product[e1] * self[e15])
                    - (geometric_product[e2] * self[e25])
                    - (geometric_product[e3] * self[e35]),
            ]) + (geometric_product.group1().xyxw() * self.group3().ww().with_zw(self[e25], self[e3215]))
                + (self.group2().zx().with_zw(self[e3215], self[e45]) * geometric_product.group1().yzz().with_w(geometric_product[e5]))
                - (geometric_product.group1().zxyx() * self.group2().yzxx())
                - (geometric_product.group2().zxy() * self.group1().yzx()).with_w(geometric_product[e425] * self[e25])
                - (geometric_product.group2().zxy() * self.group3().yzx()).with_w(geometric_product[e435] * self[e35])
                - (geometric_product.group3().zxy() * self.group2().yzx()).with_w(geometric_product[e235] * self[e23]),
            // e1, e2, e3, e4
            Simd32x4::from([
                geometric_product[e2] * self[e12],
                geometric_product[e3] * self[e23],
                geometric_product[e1] * self[e31],
                geometric_product[e4] * self[e45] * -1.0,
            ]) + (Simd32x4::from([geometric_product[e315], geometric_product[e5], geometric_product[e5], self[e4125]]) * self.group0().zyz().with_w(geometric_product[e412]))
                + (Simd32x4::from([geometric_product[e5], geometric_product[e125], geometric_product[e235], self[e4315]]) * self.group0().xxy().with_w(geometric_product[e431]))
                + (geometric_product.group0().zxy() * self.group2().yzx()).with_w(geometric_product[e423] * self[e4235])
                + (geometric_product.group1().zxy() * self.group3().yzx()).with_w(geometric_product[e1] * self[e41])
                + (geometric_product.group1().www() * self.group1().xyz()).with_w(geometric_product[e2] * self[e42])
                + (self.group2().www() * geometric_product.group2().xyz()).with_w(geometric_product[e3] * self[e43])
                - (self.group1().ww().with_zw(self[e4315], geometric_product[e415]) * geometric_product.group1().xyx().with_w(self[e41]))
                - (self.group2().zx().with_zw(self[e3215], self[e31]) * geometric_product.group0().yzz().with_w(geometric_product[e431]))
                - (self.group3().zx().with_zw(self[e45], geometric_product[e425]) * geometric_product.group1().yzz().with_w(self[e42]))
                - (self.group3().ww().with_zw(self[e25], self[e23]) * geometric_product.group0().xyx().with_w(geometric_product[e423]))
                - (self.group0().yzx() * geometric_product.group2().zxy()).with_w(geometric_product[e412] * self[e12])
                - (geometric_product.group2().www() * self.group2().xyz()).with_w(geometric_product[e435] * self[e43])
                - (geometric_product.group3().zxy() * self.group1().yzx()).with_w(geometric_product[e321] * self[e1234]),
        );
    }
}
impl GeometricQuotient<AntiDualNum> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0       13        0
    //    simd2        0        1        0
    //    simd3        2        3        0
    //    simd4        2        3        0
    // Totals...
    // yes simd        4       20        0
    //  no simd       14       36        0
    fn geometric_quotient(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDualNum::from_groups(/* e3215, scalar */ Simd32x2::from(f32::powi(other[scalar], -2)) * other.group0());
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            geometric_product.group0().yy().with_zw(geometric_product[scalar], geometric_product[e3215]) * self.group0().with_w(self[e1234]),
            // e23, e31, e12, e45
            Simd32x4::from([
                geometric_product[scalar] * self[e23],
                geometric_product[scalar] * self[e31],
                geometric_product[scalar] * self[e12],
                geometric_product[e3215] * self[e1234] * -1.0,
            ]) + (geometric_product.group0().xx().with_zw(geometric_product[e3215], geometric_product[scalar]) * self.group0().with_w(self[e45])),
            // e15, e25, e35, e1234
            ((Simd32x3::from(geometric_product[e3215]) * self.group1().xyz())
                + (Simd32x3::from(geometric_product[e3215]) * self.group3().xyz())
                + (Simd32x3::from(geometric_product[scalar]) * self.group2().xyz()))
            .with_w(geometric_product[scalar] * self[e1234]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                geometric_product[e3215] * self[e41] * -1.0,
                geometric_product[e3215] * self[e42] * -1.0,
                geometric_product[e3215] * self[e43] * -1.0,
                geometric_product[scalar] * self[e3215],
            ]) + (geometric_product.group0().yy().with_zw(geometric_product[scalar], geometric_product[e3215]) * self.group3().xyz().with_w(self[e45])),
        );
    }
}
impl GeometricQuotient<AntiFlatPoint> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       32        0
    //    simd3        3        7        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       23       44        0
    //  no simd       44       73        0
    fn geometric_quotient(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlatPoint::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(f32::powi(other[e321], -2)) * Simd32x4::from([other[e235] * -1.0, other[e315] * -1.0, other[e125] * -1.0, other[e321] * -1.0]),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x3::from(geometric_product[e321]) * self.group0() * Simd32x3::from(-1.0)).with_w(
                -(geometric_product[e235] * self[e41]) - (geometric_product[e315] * self[e42]) - (geometric_product[e125] * self[e43]) - (geometric_product[e321] * self[e45]),
            ),
            // e415, e425, e435, e321
            Simd32x4::from([
                (geometric_product[e235] * self[e1234]) + (geometric_product[e315] * self[e43]),
                (geometric_product[e315] * self[e1234]) + (geometric_product[e125] * self[e41]),
                (geometric_product[e235] * self[e42]) + (geometric_product[e125] * self[e1234]),
                geometric_product[e125] * self[e43] * -1.0,
            ]) - (geometric_product.group0().zxyx() * self.group0().yzx().with_w(self[e41]))
                - (geometric_product.group0().www() * self.group3().xyz()).with_w(geometric_product[e315] * self[e42]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (geometric_product[e315] * self[e12]) + (geometric_product[e315] * self[e4125]) + (geometric_product[e321] * self[e15]),
                (geometric_product[e125] * self[e23]) + (geometric_product[e125] * self[e4235]) + (geometric_product[e321] * self[e25]),
                (geometric_product[e235] * self[e4315]) + (geometric_product[e125] * self[e45]) + (geometric_product[e321] * self[e35]),
                -(geometric_product[e315] * self[e31]) - (geometric_product[e315] * self[e4315]) - (geometric_product[e125] * self[e12]) - (geometric_product[e125] * self[e4125]),
            ]) + (geometric_product.group0().xyxw() * self.group1().wwy().with_w(self[e3215]))
                - (geometric_product.group0().zxyx() * self.group1().yzxx())
                - (geometric_product.group0().zxyx() * self.group3().yzxx()),
            // e1, e2, e3, e4
            ((Simd32x3::from(geometric_product[e321]) * self.group1().xyz())
                + (Simd32x3::from(self[e1234]) * geometric_product.group0().xyz())
                + (self.group0().zxy() * geometric_product.group0().yzx())
                - (self.group0().yzx() * geometric_product.group0().zxy()))
            .with_w(geometric_product[e321] * self[e1234] * -1.0),
        );
    }
}
impl GeometricQuotient<AntiFlector> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       39       54        0
    //    simd3        0        6        0
    //    simd4       18       15        0
    // Totals...
    // yes simd       57       75        0
    //  no simd      111      132        0
    fn geometric_quotient(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiFlector::from_groups(/* e235, e315, e125, e321 */ other.group0() * Simd32x4::from(-1.0), /* e1, e2, e3, e5 */ other.group1());
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2),
        );
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e1, e2, e3, e5
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x3::from(0.0).with_w(
                (geometric_product[e2] * self[e4315]) + (geometric_product[e3] * self[e4125]) + (geometric_product[e5] * self[e1234]) - (geometric_product[e321] * self[e45]),
            ) + (self.group0().yzx() * geometric_product.group1().zxy()).with_w(geometric_product[e1] * self[e4235])
                - (Simd32x4::from([geometric_product[e321], geometric_product[e3], geometric_product[e1], geometric_product[e235]]) * self.group0().xxy().with_w(self[e41]))
                - (Simd32x4::from([geometric_product[e2], geometric_product[e321], geometric_product[e321], geometric_product[e315]]) * self.group0().zyz().with_w(self[e42]))
                - (self.group2().www() * geometric_product.group1().xyz()).with_w(geometric_product[e125] * self[e43]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (geometric_product[e235] * self[e1234]) + (geometric_product[e315] * self[e43]) + (geometric_product[e3] * self[e4315]),
                (geometric_product[e315] * self[e1234]) + (geometric_product[e1] * self[e4125]) + (geometric_product[e5] * self[e42]),
                (geometric_product[e125] * self[e1234]) + (geometric_product[e2] * self[e4235]) + (geometric_product[e5] * self[e43]),
                -(geometric_product[e2] * self[e31]) - (geometric_product[e3] * self[e12]),
            ]) + (Simd32x4::from([geometric_product[e5], geometric_product[e125], geometric_product[e235], self[e1234]]) * self.group0().xxy().with_w(geometric_product[e5]))
                - (geometric_product.group0().zxyx() * self.group0().yzx().with_w(self[e41]))
                - (geometric_product.group1().yzzx() * self.group3().zx().with_zw(self[e45], self[e23]))
                - (self.group1().ww().with_zw(self[e4315], geometric_product[e125]) * geometric_product.group1().xyx().with_w(self[e43]))
                - (geometric_product.group0().www() * self.group3().xyz()).with_w(geometric_product[e315] * self[e42]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (geometric_product[e315] * self[e4125])
                    + (geometric_product[e321] * self[e15])
                    + (geometric_product[e1] * self[e3215])
                    + (geometric_product[e2] * self[e35])
                    + (geometric_product[e5] * self[e23])
                    + (geometric_product[e5] * self[e4235]),
                (geometric_product[e125] * self[e4235])
                    + (geometric_product[e321] * self[e25])
                    + (geometric_product[e2] * self[e3215])
                    + (geometric_product[e3] * self[e15])
                    + (geometric_product[e5] * self[e31])
                    + (geometric_product[e5] * self[e4315]),
                (geometric_product[e125] * self[e45])
                    + (geometric_product[e321] * self[e35])
                    + (geometric_product[e1] * self[e25])
                    + (geometric_product[e3] * self[e3215])
                    + (geometric_product[e5] * self[e12])
                    + (geometric_product[e5] * self[e4125]),
                -(geometric_product[e315] * self[e4315])
                    - (geometric_product[e125] * self[e12])
                    - (geometric_product[e125] * self[e4125])
                    - (geometric_product[e1] * self[e15])
                    - (geometric_product[e2] * self[e25])
                    - (geometric_product[e3] * self[e35]),
            ]) + (geometric_product.group0().xyxw() * self.group1().wwy().with_w(self[e3215]))
                + (self.group1().zx().with_zw(self[e4315], self[e45]) * geometric_product.group0().yzx().with_w(geometric_product[e5]))
                - (geometric_product.group0().zxyx() * self.group1().yzxx())
                - (geometric_product.group0().zxyx() * self.group3().yzxx())
                - (geometric_product.group1().zxy() * self.group2().yzx()).with_w(geometric_product[e315] * self[e31]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (geometric_product[e321] * self[e23]) + (geometric_product[e2] * self[e12]) - (geometric_product[e3] * self[e31]),
                (geometric_product[e321] * self[e31]) + (geometric_product[e3] * self[e23]) - (geometric_product[e1] * self[e12]),
                (geometric_product[e321] * self[e12]) + (geometric_product[e1] * self[e31]) - (geometric_product[e2] * self[e23]),
                0.0,
            ]) + (Simd32x4::from([geometric_product[e315], geometric_product[e5], geometric_product[e5], geometric_product[e2]]) * self.group0().zyz().with_w(self[e42]))
                + (Simd32x4::from([geometric_product[e5], geometric_product[e125], geometric_product[e235], geometric_product[e1]]) * self.group0().xxy().with_w(self[e41]))
                + (self.group2().www() * geometric_product.group0().xyz()).with_w(geometric_product[e3] * self[e43])
                - (self.group0().yzx() * geometric_product.group0().zxy()).with_w(geometric_product[e321] * self[e1234]),
        );
    }
}
impl GeometricQuotient<AntiLine> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       51        0
    //    simd3        0       12        0
    //    simd4       12        4        0
    // Totals...
    // yes simd       44       67        0
    //  no simd       80      103        0
    fn geometric_quotient(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiLine::from_groups(
            // e23, e31, e12
            other.group0() * Simd32x3::from(-1.0),
            // e15, e25, e35
            other.group1() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(/* scalar */ f32::powi(other[e23], 2) + f32::powi(other[e31], 2) + f32::powi(other[e12], 2));
        let geometric_product = AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e15, e25, e35
            Simd32x3::from(other_2[scalar]) * reverse.group1(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (geometric_product[e23] * self[e1234]) + (geometric_product[e31] * self[e43]),
                (geometric_product[e31] * self[e1234]) + (geometric_product[e12] * self[e41]),
                (geometric_product[e23] * self[e42]) + (geometric_product[e12] * self[e1234]),
                -(geometric_product[e31] * self[e31])
                    - (geometric_product[e12] * self[e12])
                    - (geometric_product[e15] * self[e41])
                    - (geometric_product[e25] * self[e42])
                    - (geometric_product[e35] * self[e43]),
            ]) - (geometric_product.group0().zxy() * self.group0().yzx()).with_w(geometric_product[e23] * self[e23]),
            // e23, e31, e12, e45
            (self.group0().zx().with_zw(self[e1234], self[e43]) * geometric_product.group1().yzz().with_w(geometric_product[e35]))
                + (self.group2().ww().with_zw(self[e42], self[e42]) * geometric_product.group1().xyx().with_w(geometric_product[e25]))
                + Simd32x3::from(0.0).with_w(geometric_product[e12] * self[e4125] * -1.0)
                + (geometric_product.group0().yzx() * self.group1().zxy()).with_w(geometric_product[e15] * self[e41])
                - (geometric_product.group0().zxy() * self.group1().yzx()).with_w(geometric_product[e23] * self[e4235])
                - (geometric_product.group1().zxy() * self.group0().yzx()).with_w(geometric_product[e31] * self[e4315]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (geometric_product[e23] * self[e3215])
                    + (geometric_product[e31] * self[e35])
                    + (geometric_product[e15] * self[e45])
                    + (geometric_product[e25] * self[e12])
                    + (geometric_product[e25] * self[e4125]),
                (geometric_product[e31] * self[e3215])
                    + (geometric_product[e12] * self[e15])
                    + (geometric_product[e25] * self[e45])
                    + (geometric_product[e35] * self[e23])
                    + (geometric_product[e35] * self[e4235]),
                (geometric_product[e23] * self[e25])
                    + (geometric_product[e12] * self[e3215])
                    + (geometric_product[e15] * self[e31])
                    + (geometric_product[e15] * self[e4315])
                    + (geometric_product[e35] * self[e45]),
                0.0,
            ]) - (geometric_product.group0().zxy() * self.group2().yzx()).with_w(geometric_product[e23] * self[e41])
                - (geometric_product.group1().zxy() * self.group1().yzx()).with_w(geometric_product[e31] * self[e42])
                - (geometric_product.group1().zxy() * self.group3().yzx()).with_w(geometric_product[e12] * self[e43]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (geometric_product[e23] * self[e45]) + (geometric_product[e31] * self[e4125]) + (geometric_product[e35] * self[e42]),
                (geometric_product[e31] * self[e45]) + (geometric_product[e12] * self[e4235]) + (geometric_product[e15] * self[e43]),
                (geometric_product[e23] * self[e4315]) + (geometric_product[e12] * self[e45]) + (geometric_product[e25] * self[e41]),
                -(geometric_product[e15] * self[e23])
                    - (geometric_product[e15] * self[e4235])
                    - (geometric_product[e25] * self[e31])
                    - (geometric_product[e25] * self[e4315])
                    - (geometric_product[e35] * self[e12])
                    - (geometric_product[e35] * self[e4125]),
            ]) - (self.group0().zx().with_zw(self[e1234], self[e35]) * geometric_product.group1().yzz().with_w(geometric_product[e12]))
                - (self.group2().ww().with_zw(self[e42], self[e25]) * geometric_product.group1().xyx().with_w(geometric_product[e31]))
                - (geometric_product.group0().zxy() * self.group3().yzx()).with_w(geometric_product[e23] * self[e15]),
        );
    }
}
impl GeometricQuotient<AntiMotor> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       58        0
    //    simd3        0       10        0
    //    simd4       18       12        0
    // Totals...
    // yes simd       54       80        0
    //  no simd      108      136        0
    fn geometric_quotient(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, e3215
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e23], 2) + f32::powi(other[e31], 2) + f32::powi(other[e12], 2) + f32::powi(other[scalar], 2),
        );
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e15, e25, e35, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (geometric_product[e23] * self[e1234]) + (geometric_product[e31] * self[e43]),
                (geometric_product[e31] * self[e1234]) + (geometric_product[scalar] * self[e42]),
                (geometric_product[e12] * self[e1234]) + (geometric_product[scalar] * self[e43]),
                -(geometric_product[e23] * self[e23])
                    - (geometric_product[e31] * self[e31])
                    - (geometric_product[e12] * self[e12])
                    - (geometric_product[e25] * self[e42])
                    - (geometric_product[e35] * self[e43]),
            ]) + (self.group0().xxy() * geometric_product.group0().wzx()).with_w(geometric_product[e3215] * self[e1234])
                - (self.group0().yzx() * geometric_product.group0().zxy()).with_w(geometric_product[e15] * self[e41]),
            // e23, e31, e12, e45
            Simd32x4::from([
                geometric_product[e15] * self[e1234],
                geometric_product[e25] * self[e1234],
                geometric_product[e35] * self[e1234],
                -(geometric_product[e12] * self[e4125]) - (geometric_product[e3215] * self[e1234]),
            ]) + (Simd32x4::from(geometric_product[scalar]) * self.group1())
                + (geometric_product.group1().ywwy() * self.group0().zyz().with_w(self[e42]))
                + (geometric_product.group1().wzxx() * self.group0().xxy().with_w(self[e41]))
                + (geometric_product.group0().yzx() * self.group1().zxy()).with_w(geometric_product[e35] * self[e43])
                - (geometric_product.group0().zxyy() * self.group1().yzx().with_w(self[e4315]))
                - (self.group0().yzx() * geometric_product.group1().zxy()).with_w(geometric_product[e23] * self[e4235]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (geometric_product[e31] * self[e35])
                    + (geometric_product[scalar] * self[e15])
                    + (geometric_product[e15] * self[e45])
                    + (geometric_product[e25] * self[e12])
                    + (geometric_product[e25] * self[e4125])
                    + (geometric_product[e3215] * self[e23])
                    + (geometric_product[e3215] * self[e4235]),
                (geometric_product[e12] * self[e15])
                    + (geometric_product[scalar] * self[e25])
                    + (geometric_product[e25] * self[e45])
                    + (geometric_product[e35] * self[e23])
                    + (geometric_product[e35] * self[e4235])
                    + (geometric_product[e3215] * self[e31])
                    + (geometric_product[e3215] * self[e4315]),
                (geometric_product[e12] * self[e3215])
                    + (geometric_product[scalar] * self[e35])
                    + (geometric_product[e15] * self[e31])
                    + (geometric_product[e15] * self[e4315])
                    + (geometric_product[e35] * self[e45])
                    + (geometric_product[e3215] * self[e12])
                    + (geometric_product[e3215] * self[e4125]),
                0.0,
            ]) + (geometric_product.group0().xyxw() * self.group3().ww().with_zw(self[e25], self[e1234]))
                - (geometric_product.group0().zxy() * self.group2().yzx()).with_w(geometric_product[e23] * self[e41])
                - (geometric_product.group1().zxy() * self.group1().yzx()).with_w(geometric_product[e31] * self[e42])
                - (geometric_product.group1().zxy() * self.group3().yzx()).with_w(geometric_product[e12] * self[e43]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (geometric_product[e31] * self[e4125]) + (geometric_product[scalar] * self[e4235]),
                (geometric_product[e12] * self[e4235]) + (geometric_product[scalar] * self[e4315]),
                (geometric_product[e12] * self[e45]) + (geometric_product[scalar] * self[e4125]),
                -(geometric_product[e15] * self[e4235])
                    - (geometric_product[e25] * self[e31])
                    - (geometric_product[e25] * self[e4315])
                    - (geometric_product[e35] * self[e12])
                    - (geometric_product[e35] * self[e4125]),
            ]) + (self.group1().ww().with_zw(self[e4315], self[e45]) * geometric_product.group0().xyx().with_w(geometric_product[e3215]))
                + (self.group0().yzx() * geometric_product.group1().zxy()).with_w(geometric_product[scalar] * self[e3215])
                - (geometric_product.group0().zxyz() * self.group3().yzx().with_w(self[e35]))
                - (geometric_product.group1().xyzx() * self.group2().www().with_w(self[e23]))
                - (self.group0().xxy() * geometric_product.group1().wzx()).with_w(geometric_product[e23] * self[e15])
                - (self.group0().zyz() * geometric_product.group1().yww()).with_w(geometric_product[e31] * self[e25]),
        );
    }
}
impl GeometricQuotient<AntiPlane> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       35        0
    //    simd3        0        3        0
    //    simd4        8        6        0
    // Totals...
    // yes simd       22       44        0
    //  no simd       46       68        0
    fn geometric_quotient(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiPlane::from_groups(
            // e1, e2, e3, e5
            Simd32x4::from(f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)) * other.group0(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                -(geometric_product[e1] * self[e1234]) - (geometric_product[e2] * self[e43]),
                -(geometric_product[e2] * self[e1234]) - (geometric_product[e3] * self[e41]),
                -(geometric_product[e1] * self[e42]) - (geometric_product[e3] * self[e1234]),
                (geometric_product[e2] * self[e4315]) + (geometric_product[e3] * self[e4125]) + (geometric_product[e5] * self[e1234]),
            ]) + (self.group0().yzx() * geometric_product.group0().zxy()).with_w(geometric_product[e1] * self[e4235]),
            // e415, e425, e435, e321
            Simd32x4::from([
                geometric_product[e3] * self[e4315],
                geometric_product[e1] * self[e4125],
                geometric_product[e2] * self[e4235],
                geometric_product[e3] * self[e12] * -1.0,
            ]) + (self.group0() * geometric_product.group0().www()).with_w(geometric_product[e5] * self[e1234])
                - (geometric_product.group0().xyxx() * self.group1().ww().with_zw(self[e4315], self[e23]))
                - (geometric_product.group0().yzzy() * self.group3().zx().with_zw(self[e45], self[e31])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (geometric_product[e2] * self[e35]) + (geometric_product[e5] * self[e23]) + (geometric_product[e5] * self[e4235]),
                (geometric_product[e3] * self[e15]) + (geometric_product[e5] * self[e31]) + (geometric_product[e5] * self[e4315]),
                (geometric_product[e3] * self[e3215]) + (geometric_product[e5] * self[e12]) + (geometric_product[e5] * self[e4125]),
                -(geometric_product[e2] * self[e25]) - (geometric_product[e3] * self[e35]),
            ]) + (geometric_product.group0().xyxw() * self.group3().ww().with_zw(self[e25], self[e45]))
                - (geometric_product.group0().zxyx() * self.group2().yzxx()),
            // e1, e2, e3, e4
            Simd32x4::from([
                geometric_product[e3] * self[e31] * -1.0,
                geometric_product[e1] * self[e12] * -1.0,
                geometric_product[e2] * self[e23] * -1.0,
                geometric_product[e3] * self[e43],
            ]) + (geometric_product.group0().wwwx() * self.group0().with_w(self[e41]))
                + (geometric_product.group0().yzx() * self.group1().zxy()).with_w(geometric_product[e2] * self[e42]),
        );
    }
}
impl GeometricQuotient<AntiScalar> for DipoleInversion {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        1
    //    simd3        0        1        0
    //    simd4        0        5        0
    // Totals...
    // yes simd        0        7        1
    //  no simd        0       24        1
    fn geometric_quotient(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiScalar::from_groups(/* e12345 */ 1.0 / other[e12345] * -1.0);
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(geometric_product[e12345]) * self.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(geometric_product[e12345]) * self.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e235, e315, e125, e4
            Simd32x4::from(geometric_product[e12345]) * self.group2(),
            // e1, e2, e3, e5
            Simd32x4::from(geometric_product[e12345]) * self.group3() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricQuotient<Circle> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       68        0
    //    simd3        0       13        0
    //    simd4       25       18        0
    // Totals...
    // yes simd       65       99        0
    //  no simd      140      179        0
    fn geometric_quotient(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let reverse = Circle::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125
            other.group2() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group2(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (geometric_product[e431] * self[e12]) + (geometric_product[e412] * self[e4315]) + (geometric_product[e415] * self[e1234]) + (geometric_product[e425] * self[e43]),
                (geometric_product[e423] * self[e4125]) + (geometric_product[e412] * self[e23]) + (geometric_product[e425] * self[e1234]) + (geometric_product[e435] * self[e41]),
                (geometric_product[e423] * self[e31]) + (geometric_product[e431] * self[e4235]) + (geometric_product[e415] * self[e42]) + (geometric_product[e435] * self[e1234]),
                -(geometric_product[e415] * self[e23])
                    - (geometric_product[e425] * self[e31])
                    - (geometric_product[e435] * self[e12])
                    - (geometric_product[e321] * self[e45])
                    - (geometric_product[e125] * self[e43]),
            ]) - (Simd32x4::from(geometric_product[e423]) * self.group1().wz().with_zw(self[e4315], self[e15]))
                - (Simd32x4::from(geometric_product[e431]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(geometric_product[e412]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]]))
                - (self.group0().xyx() * geometric_product.group1().wwy()).with_w(geometric_product[e235] * self[e41])
                - (self.group0().yzz() * geometric_product.group1().zxw()).with_w(geometric_product[e315] * self[e42]),
            // e415, e425, e435, e321
            Simd32x4::from([
                geometric_product[e321] * self[e4235] * -1.0,
                geometric_product[e321] * self[e4315] * -1.0,
                geometric_product[e321] * self[e4125] * -1.0,
                geometric_product[e435] * self[e4125],
            ]) + (geometric_product.group1().yzxy() * self.group1().zxy().with_w(self[e4315]))
                + (self.group0().zx().with_zw(self[e1234], self[e4235]) * geometric_product.group2().yzz().with_w(geometric_product[e415]))
                + (self.group2().zx().with_zw(self[e3215], self[e25]) * geometric_product.group0().yzz().with_w(geometric_product[e431]))
                + (self.group2().ww().with_zw(self[e42], self[e35]) * geometric_product.group2().xyx().with_w(geometric_product[e412]))
                + (self.group3().ww().with_zw(self[e25], self[e15]) * geometric_product.group0().xyx().with_w(geometric_product[e423]))
                - (geometric_product.group0().zxy() * self.group2().yzx()).with_w(geometric_product[e235] * self[e41])
                - (geometric_product.group2().zxy() * self.group0().yzx()).with_w(geometric_product[e315] * self[e42])
                - (geometric_product.group1().zxy() * self.group1().yzx()).with_w(geometric_product[e125] * self[e43]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (geometric_product[e415] * self[e3215])
                    + (geometric_product[e425] * self[e35])
                    + (geometric_product[e321] * self[e15])
                    + (geometric_product[e315] * self[e12])
                    + (geometric_product[e315] * self[e4125]),
                (geometric_product[e425] * self[e3215])
                    + (geometric_product[e435] * self[e15])
                    + (geometric_product[e321] * self[e25])
                    + (geometric_product[e125] * self[e23])
                    + (geometric_product[e125] * self[e4235]),
                (geometric_product[e415] * self[e25])
                    + (geometric_product[e435] * self[e3215])
                    + (geometric_product[e321] * self[e35])
                    + (geometric_product[e235] * self[e4315])
                    + (geometric_product[e125] * self[e45]),
                -(geometric_product[e415] * self[e15])
                    - (geometric_product[e425] * self[e25])
                    - (geometric_product[e435] * self[e35])
                    - (geometric_product[e315] * self[e4315])
                    - (geometric_product[e125] * self[e12])
                    - (geometric_product[e125] * self[e4125]),
            ]) + (geometric_product.group2().xyx() * self.group1().wwy()).with_w(geometric_product[e321] * self[e3215])
                - (self.group1().yzxx() * geometric_product.group2().zxy().with_w(geometric_product[e235]))
                - (self.group3().yzxx() * geometric_product.group2().zxy().with_w(geometric_product[e235]))
                - (geometric_product.group1().zxy() * self.group2().yzx()).with_w(geometric_product[e315] * self[e31]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (geometric_product[e435] * self[e4315]) + (geometric_product[e321] * self[e23]),
                (geometric_product[e415] * self[e4125]) + (geometric_product[e321] * self[e31]),
                (geometric_product[e425] * self[e4235]) + (geometric_product[e321] * self[e12]),
                -(geometric_product[e435] * self[e43]) - (geometric_product[e321] * self[e1234]),
            ]) + (self.group0().zx().with_zw(self[e1234], self[e4125]) * geometric_product.group2().yzz().with_w(geometric_product[e412]))
                + (self.group2().ww().with_zw(self[e42], self[e4315]) * geometric_product.group2().xyx().with_w(geometric_product[e431]))
                + (geometric_product.group0().zxy() * self.group2().yzx()).with_w(geometric_product[e423] * self[e4235])
                - (self.group1().ww().with_zw(self[e4315], geometric_product[e415]) * geometric_product.group1().xyx().with_w(self[e41]))
                - (self.group2().zx().with_zw(self[e3215], self[e31]) * geometric_product.group0().yzz().with_w(geometric_product[e431]))
                - (self.group3().zx().with_zw(self[e45], geometric_product[e425]) * geometric_product.group1().yzz().with_w(self[e42]))
                - (self.group3().ww().with_zw(self[e25], self[e23]) * geometric_product.group0().xyx().with_w(geometric_product[e423]))
                - (geometric_product.group2().zxy() * self.group0().yzx()).with_w(geometric_product[e412] * self[e12]),
        );
    }
}
impl GeometricQuotient<CircleRotor> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       67        0
    //    simd3        0       17        0
    //    simd4       29       19        0
    // Totals...
    // yes simd       69      103        0
    //  no simd      156      194        0
    fn geometric_quotient(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let reverse = CircleRotor::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e12345
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - f32::powi(other[e12345], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (geometric_product[e431] * self[e12])
                    + (geometric_product[e412] * self[e4315])
                    + (geometric_product[e415] * self[e1234])
                    + (geometric_product[e425] * self[e43])
                    + (geometric_product[e12345] * self[e41]),
                (geometric_product[e423] * self[e4125])
                    + (geometric_product[e412] * self[e23])
                    + (geometric_product[e425] * self[e1234])
                    + (geometric_product[e435] * self[e41])
                    + (geometric_product[e12345] * self[e42]),
                (geometric_product[e423] * self[e31])
                    + (geometric_product[e431] * self[e4235])
                    + (geometric_product[e415] * self[e42])
                    + (geometric_product[e435] * self[e1234])
                    + (geometric_product[e12345] * self[e43]),
                -(geometric_product[e415] * self[e23])
                    - (geometric_product[e425] * self[e31])
                    - (geometric_product[e435] * self[e12])
                    - (geometric_product[e321] * self[e45])
                    - (geometric_product[e125] * self[e43]),
            ]) - (Simd32x4::from(geometric_product[e423]) * self.group1().wz().with_zw(self[e4315], self[e15]))
                - (Simd32x4::from(geometric_product[e431]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(geometric_product[e412]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]]))
                - (self.group0().xyx() * geometric_product.group1().wwy()).with_w(geometric_product[e235] * self[e41])
                - (self.group0().yzz() * geometric_product.group1().zxw()).with_w(geometric_product[e315] * self[e42]),
            // e415, e425, e435, e321
            (geometric_product.group1().yzxx() * self.group1().zxy().with_w(self[e4235]))
                + (self.group2().zx().with_zw(self[e3215], self[e25]) * geometric_product.group0().yzz().with_w(geometric_product[e431]))
                + (self.group3().ww().with_zw(self[e25], self[e15]) * geometric_product.group0().xyx().with_w(geometric_product[e423]))
                + (self.group0().zxy() * geometric_product.group2().yzx()).with_w(geometric_product[e412] * self[e35])
                + (geometric_product.group2().www() * self.group1().xyz()).with_w(geometric_product[e435] * self[e4125])
                + (self.group2().www() * geometric_product.group2().xyz()).with_w(geometric_product[e425] * self[e4315])
                - (geometric_product.group2().zxyy() * self.group0().yzx().with_w(self[e42]))
                - (geometric_product.group0().zxy() * self.group2().yzx()).with_w(geometric_product[e235] * self[e41])
                - (geometric_product.group1().zxy() * self.group1().yzx()).with_w(geometric_product[e125] * self[e43])
                - (geometric_product.group1().www() * self.group3().xyz()).with_w(geometric_product[e12345] * self[e45]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (geometric_product[e321] * self[e15])
                    + (geometric_product[e235] * self[e45])
                    + (geometric_product[e315] * self[e12])
                    + (geometric_product[e315] * self[e4125])
                    + (geometric_product[e12345] * self[e15]),
                (geometric_product[e321] * self[e25])
                    + (geometric_product[e315] * self[e45])
                    + (geometric_product[e125] * self[e23])
                    + (geometric_product[e125] * self[e4235])
                    + (geometric_product[e12345] * self[e25]),
                (geometric_product[e321] * self[e35])
                    + (geometric_product[e235] * self[e31])
                    + (geometric_product[e235] * self[e4315])
                    + (geometric_product[e125] * self[e45])
                    + (geometric_product[e12345] * self[e35]),
                -(geometric_product[e235] * self[e23])
                    - (geometric_product[e235] * self[e4235])
                    - (geometric_product[e315] * self[e31])
                    - (geometric_product[e315] * self[e4315])
                    - (geometric_product[e125] * self[e12])
                    - (geometric_product[e125] * self[e4125]),
            ]) + (geometric_product.group1().xyxw() * self.group3().ww().with_zw(self[e25], self[e3215]))
                + (self.group2().zx().with_zw(self[e3215], self[e3215]) * geometric_product.group1().yzz().with_w(geometric_product[e12345]))
                - (geometric_product.group1().zxyx() * self.group2().yzxx())
                - (geometric_product.group2().zxy() * self.group1().yzx()).with_w(geometric_product[e425] * self[e25])
                - (geometric_product.group2().zxy() * self.group3().yzx()).with_w(geometric_product[e435] * self[e35]),
            // e1, e2, e3, e4
            Simd32x4::from([
                geometric_product[e235] * self[e1234],
                geometric_product[e315] * self[e1234],
                geometric_product[e125] * self[e1234],
                geometric_product[e321] * self[e1234] * -1.0,
            ]) + (self.group3().yzxz() * geometric_product.group1().zxy().with_w(geometric_product[e412]))
                + (geometric_product.group0().zxy() * self.group2().yzx()).with_w(geometric_product[e423] * self[e4235])
                + (self.group0().zxy() * geometric_product.group2().yzx()).with_w(geometric_product[e431] * self[e4315])
                + (geometric_product.group1().www() * self.group1().xyz()).with_w(geometric_product[e12345] * self[e1234])
                - (self.group1().ww().with_zw(self[e4315], geometric_product[e415]) * geometric_product.group1().xyx().with_w(self[e41]))
                - (self.group2().zx().with_zw(self[e3215], self[e31]) * geometric_product.group0().yzz().with_w(geometric_product[e431]))
                - (self.group3().zx().with_zw(self[e45], geometric_product[e425]) * geometric_product.group1().yzz().with_w(self[e42]))
                - (self.group3().ww().with_zw(self[e25], self[e23]) * geometric_product.group0().xyx().with_w(geometric_product[e423]))
                - (self.group0().yzx() * geometric_product.group2().zxy()).with_w(geometric_product[e412] * self[e12])
                - (geometric_product.group2().www() * self.group3().xyz()).with_w(geometric_product[e435] * self[e43]),
        );
    }
}
impl GeometricQuotient<Dipole> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       72        0
    //    simd3        0       12        0
    //    simd4       23       17        0
    // Totals...
    // yes simd       71      101        0
    //  no simd      140      176        0
    fn geometric_quotient(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let reverse = Dipole::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35
            other.group2() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2),
        );
        let geometric_product = Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35
            Simd32x3::from(other_2[scalar]) * reverse.group2(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (geometric_product[e43] * self[e4315]) + (geometric_product[e23] * self[e1234]) + (geometric_product[e31] * self[e43]) + (geometric_product[e45] * self[e41]),
                (geometric_product[e43] * self[e23]) + (geometric_product[e31] * self[e1234]) + (geometric_product[e12] * self[e41]) + (geometric_product[e45] * self[e42]),
                (geometric_product[e42] * self[e4235]) + (geometric_product[e23] * self[e42]) + (geometric_product[e12] * self[e1234]) + (geometric_product[e45] * self[e43]),
                -(geometric_product[e23] * self[e23])
                    - (geometric_product[e31] * self[e31])
                    - (geometric_product[e12] * self[e12])
                    - (geometric_product[e25] * self[e42])
                    - (geometric_product[e35] * self[e43]),
            ]) + (Simd32x4::from([self[e12], self[e4125], self[e31], self[e45]]) * geometric_product.group0().yxx().with_w(geometric_product[e45]))
                - (Simd32x4::from(geometric_product[e41]) * self.group1().wz().with_zw(self[e4315], self[e15]))
                - (Simd32x4::from(geometric_product[e42]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(geometric_product[e43]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]]))
                - (self.group0().yzx() * geometric_product.group1().zxy()).with_w(geometric_product[e15] * self[e41]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (geometric_product[e31] * self[e12]) + (geometric_product[e45] * self[e4235]) + (geometric_product[e25] * self[e43]),
                (geometric_product[e12] * self[e23]) + (geometric_product[e45] * self[e4315]) + (geometric_product[e35] * self[e41]),
                (geometric_product[e23] * self[e31]) + (geometric_product[e45] * self[e4125]) + (geometric_product[e35] * self[e1234]),
                -(geometric_product[e23] * self[e4235]) - (geometric_product[e31] * self[e4315]) - (geometric_product[e12] * self[e4125]),
            ]) + (self.group2().zx().with_zw(self[e3215], self[e42]) * geometric_product.group0().yzz().with_w(geometric_product[e25]))
                + (self.group2().ww().with_zw(self[e42], self[e43]) * geometric_product.group2().xyx().with_w(geometric_product[e35]))
                + (self.group3().ww().with_zw(self[e25], self[e41]) * geometric_product.group0().xyx().with_w(geometric_product[e15]))
                - (self.group2().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e41]))
                - (geometric_product.group2().zxy() * self.group0().yzx()).with_w(geometric_product[e42] * self[e25])
                - (geometric_product.group1().zxy() * self.group1().yzx()).with_w(geometric_product[e43] * self[e35]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                geometric_product[e31] * self[e35],
                geometric_product[e12] * self[e15],
                geometric_product[e12] * self[e3215],
                -(geometric_product[e31] * self[e42]) - (geometric_product[e12] * self[e43]),
            ]) + (geometric_product.group1().xyxw() * self.group3().ww().with_zw(self[e25], self[e1234]))
                + (self.group1().zx().with_zw(self[e4315], self[e4315]) * geometric_product.group2().yzx().with_w(geometric_product[e42]))
                + (self.group3().zx().with_zw(self[e45], self[e4125]) * geometric_product.group2().yzz().with_w(geometric_product[e43]))
                + (geometric_product.group2().xyx() * self.group1().wwy()).with_w(geometric_product[e41] * self[e4235])
                - (self.group1().yzxx() * geometric_product.group2().zxy().with_w(geometric_product[e41]))
                - (geometric_product.group2().zxy() * self.group3().yzx()).with_w(geometric_product[e42] * self[e31])
                - (geometric_product.group1().zxy() * self.group2().yzx()).with_w(geometric_product[e43] * self[e12])
                - (geometric_product.group1().www() * self.group2().xyz()).with_w(geometric_product[e23] * self[e41]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (geometric_product[e41] * self[e3215])
                    + (geometric_product[e42] * self[e35])
                    + (geometric_product[e23] * self[e45])
                    + (geometric_product[e31] * self[e4125])
                    + (geometric_product[e45] * self[e23])
                    + (geometric_product[e35] * self[e42]),
                (geometric_product[e42] * self[e3215])
                    + (geometric_product[e43] * self[e15])
                    + (geometric_product[e31] * self[e45])
                    + (geometric_product[e12] * self[e4235])
                    + (geometric_product[e45] * self[e31])
                    + (geometric_product[e15] * self[e43]),
                (geometric_product[e41] * self[e25])
                    + (geometric_product[e43] * self[e3215])
                    + (geometric_product[e23] * self[e4315])
                    + (geometric_product[e12] * self[e45])
                    + (geometric_product[e45] * self[e12])
                    + (geometric_product[e25] * self[e41]),
                -(geometric_product[e23] * self[e15])
                    - (geometric_product[e31] * self[e25])
                    - (geometric_product[e12] * self[e35])
                    - (geometric_product[e45] * self[e3215])
                    - (geometric_product[e35] * self[e12])
                    - (geometric_product[e35] * self[e4125]),
            ]) - (self.group3().yzxy() * geometric_product.group1().zxy().with_w(geometric_product[e25]))
                - (self.group0().zx().with_zw(self[e1234], self[e31]) * geometric_product.group2().yzz().with_w(geometric_product[e25]))
                - (self.group2().ww().with_zw(self[e42], self[e4235]) * geometric_product.group2().xyx().with_w(geometric_product[e15]))
                - (geometric_product.group0().zxy() * self.group2().yzx()).with_w(geometric_product[e15] * self[e23]),
        );
    }
}
impl GeometricQuotient<DipoleInversion> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       71       97        0
    //    simd3        0       14        0
    //    simd4       37       30        0
    // Totals...
    // yes simd      108      141        0
    //  no simd      219      259        0
    fn geometric_quotient(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let reverse = DipoleInversion::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + 2.0 * (other[e1234] * other[e3215])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2),
        );
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (geometric_product[e23] * self[e1234])
                    + (geometric_product[e31] * self[e43])
                    + (geometric_product[e1234] * self[e23])
                    + (geometric_product[e4235] * self[e1234])
                    + (geometric_product[e4315] * self[e43]),
                (geometric_product[e31] * self[e1234])
                    + (geometric_product[e45] * self[e42])
                    + (geometric_product[e1234] * self[e31])
                    + (geometric_product[e4315] * self[e1234])
                    + (geometric_product[e4125] * self[e41]),
                (geometric_product[e12] * self[e1234])
                    + (geometric_product[e45] * self[e43])
                    + (geometric_product[e1234] * self[e12])
                    + (geometric_product[e4235] * self[e42])
                    + (geometric_product[e4125] * self[e1234]),
                -(geometric_product[e23] * self[e23])
                    - (geometric_product[e31] * self[e31])
                    - (geometric_product[e12] * self[e12])
                    - (geometric_product[e4235] * self[e4235])
                    - (geometric_product[e4315] * self[e4315])
                    - (geometric_product[e4125] * self[e4125]),
            ]) + (Simd32x4::from([self[e12], self[e4125], self[e31], self[e45]]) * geometric_product.group0().yxx().with_w(geometric_product[e45]))
                + (Simd32x4::from([self[e4315], self[e23], self[e4235], self[e3215]]) * geometric_product.group0().zzy().with_w(geometric_product[e1234]))
                + (self.group0().xxy() * geometric_product.group1().wzx()).with_w(geometric_product[e3215] * self[e1234])
                - (Simd32x4::from(geometric_product[e41]) * self.group1().wz().with_zw(self[e4315], self[e15]))
                - (Simd32x4::from(geometric_product[e42]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(geometric_product[e43]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]]))
                - (self.group0().yzx() * geometric_product.group1().zxy()).with_w(geometric_product[e15] * self[e41])
                - (self.group0().yzx() * geometric_product.group3().zxy()).with_w(geometric_product[e25] * self[e42])
                - (geometric_product.group2().www() * self.group3().xyz()).with_w(geometric_product[e35] * self[e43]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (geometric_product[e31] * self[e12])
                    + (geometric_product[e45] * self[e4235])
                    + (geometric_product[e15] * self[e1234])
                    + (geometric_product[e1234] * self[e15])
                    + (geometric_product[e4235] * self[e45])
                    + (geometric_product[e4315] * self[e4125]),
                (geometric_product[e12] * self[e23])
                    + (geometric_product[e45] * self[e4315])
                    + (geometric_product[e25] * self[e1234])
                    + (geometric_product[e1234] * self[e25])
                    + (geometric_product[e4315] * self[e45])
                    + (geometric_product[e4125] * self[e4235]),
                (geometric_product[e23] * self[e31])
                    + (geometric_product[e45] * self[e4125])
                    + (geometric_product[e35] * self[e1234])
                    + (geometric_product[e1234] * self[e35])
                    + (geometric_product[e4235] * self[e4315])
                    + (geometric_product[e4125] * self[e45]),
                -(geometric_product[e31] * self[e4315])
                    - (geometric_product[e12] * self[e4125])
                    - (geometric_product[e4235] * self[e23])
                    - (geometric_product[e4315] * self[e31])
                    - (geometric_product[e4125] * self[e12])
                    - (geometric_product[e3215] * self[e1234]),
            ]) + (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], self[e3215]]) * self.group0().zyz().with_w(geometric_product[e1234]))
                + (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e35]]) * self.group0().xxy().with_w(self[e43]))
                + (self.group2().zx().with_zw(self[e3215], geometric_product[e25]) * geometric_product.group0().yzz().with_w(self[e42]))
                + (self.group3().ww().with_zw(self[e25], geometric_product[e15]) * geometric_product.group0().xyx().with_w(self[e41]))
                - (self.group2().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e41]))
                - (self.group3().yzxx() * geometric_product.group3().zxy().with_w(geometric_product[e23]))
                - (self.group0().yzx() * geometric_product.group2().zxy()).with_w(geometric_product[e42] * self[e25])
                - (geometric_product.group1().zxy() * self.group1().yzx()).with_w(geometric_product[e43] * self[e35]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (geometric_product[e25] * self[e4125]) + (geometric_product[e4125] * self[e25]) + (geometric_product[e3215] * self[e23]) + (geometric_product[e3215] * self[e4235]),
                (geometric_product[e35] * self[e4235]) + (geometric_product[e4235] * self[e35]) + (geometric_product[e3215] * self[e31]) + (geometric_product[e3215] * self[e4315]),
                (geometric_product[e35] * self[e45]) + (geometric_product[e4315] * self[e15]) + (geometric_product[e3215] * self[e12]) + (geometric_product[e3215] * self[e4125]),
                -(geometric_product[e12] * self[e43]) - (geometric_product[e1234] * self[e45]) - (geometric_product[e4315] * self[e42]) - (geometric_product[e4125] * self[e43]),
            ]) + (self.group1().zx().with_zw(self[e4315], self[e1234]) * geometric_product.group2().yzx().with_w(geometric_product[e45]))
                + (self.group2().zx().with_zw(self[e3215], self[e4315]) * geometric_product.group1().yzz().with_w(geometric_product[e42]))
                + (self.group3().ww().with_zw(self[e25], self[e4235]) * geometric_product.group1().xyx().with_w(geometric_product[e41]))
                + (geometric_product.group2().xyx() * self.group1().wwy()).with_w(geometric_product[e43] * self[e4125])
                - (self.group1().yzxz() * geometric_product.group2().zxy().with_w(geometric_product[e43]))
                - (self.group2().zx().with_zw(self[e3215], geometric_product[e31]) * geometric_product.group3().yzz().with_w(self[e42]))
                - (self.group3().ww().with_zw(self[e25], geometric_product[e4235]) * geometric_product.group3().xyx().with_w(self[e41]))
                - (geometric_product.group1().zxy() * self.group2().yzx()).with_w(geometric_product[e41] * self[e23])
                - (geometric_product.group1().www() * self.group2().xyz()).with_w(geometric_product[e42] * self[e31])
                - (geometric_product.group2().zxy() * self.group3().yzx()).with_w(geometric_product[e23] * self[e41]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (geometric_product[e31] * self[e4125]) + (geometric_product[e45] * self[e23]) + (geometric_product[e1234] * self[e15]) + (geometric_product[e4315] * self[e12]),
                (geometric_product[e12] * self[e4235]) + (geometric_product[e45] * self[e31]) + (geometric_product[e1234] * self[e25]) + (geometric_product[e4125] * self[e23]),
                (geometric_product[e12] * self[e45]) + (geometric_product[e45] * self[e12]) + (geometric_product[e1234] * self[e35]) + (geometric_product[e4235] * self[e31]),
                -(geometric_product[e25] * self[e31]) - (geometric_product[e25] * self[e4315]) - (geometric_product[e35] * self[e12]) - (geometric_product[e35] * self[e4125]),
            ]) + (self.group1().ww().with_zw(self[e4315], self[e45]) * geometric_product.group1().xyx().with_w(geometric_product[e3215]))
                + (self.group2().zx().with_zw(self[e3215], self[e25]) * geometric_product.group0().yzz().with_w(geometric_product[e4315]))
                + (self.group3().ww().with_zw(self[e25], self[e15]) * geometric_product.group0().xyx().with_w(geometric_product[e4235]))
                + (self.group0().yzx() * geometric_product.group2().zxy()).with_w(geometric_product[e4125] * self[e35])
                - (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], self[e35]]) * self.group0().zyz().with_w(geometric_product[e12]))
                - (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], self[e25]]) * self.group0().xxy().with_w(geometric_product[e31]))
                - (geometric_product.group1().zxyw() * self.group3().yzxw())
                - (geometric_product.group2().xyzx() * self.group2().www().with_w(self[e23]))
                - (self.group2().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e23]))
                - (geometric_product.group3().zxy() * self.group1().yzx()).with_w(geometric_product[e15] * self[e4235]),
        );
    }
}
impl GeometricQuotient<DualNum> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0       10        0
    //    simd2        0        1        0
    //    simd3        1        2        0
    //    simd4        3        4        0
    // Totals...
    // yes simd        4       17        0
    //  no simd       15       34        0
    fn geometric_quotient(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DualNum::from_groups(/* e5, e12345 */ Simd32x2::from(f32::powi(other[e12345], -2) * -1.0) * other.group0());
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            geometric_product.group0().yy().with_zw(geometric_product[e12345], geometric_product[e5]) * self.group0().with_w(self[e1234]),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e23] * geometric_product[e12345],
                self[e31] * geometric_product[e12345],
                self[e12] * geometric_product[e12345],
                self[e45] * geometric_product[e12345] * -1.0,
            ]) + (Simd32x4::from(geometric_product[e5]) * self.group0().with_w(self[e1234])),
            // e235, e315, e125, e5
            Simd32x4::from([self[e15] * geometric_product[e12345], self[e25] * geometric_product[e12345], self[e35] * geometric_product[e12345], 0.0])
                + (Simd32x4::from(geometric_product[e5]) * self.group1())
                + (self.group3() * geometric_product.group0().xx().with_zw(geometric_product[e5], geometric_product[e12345])),
            // e1, e2, e3, e4
            ((Simd32x3::from(geometric_product[e5]) * self.group0()) - (Simd32x3::from(geometric_product[e12345]) * self.group3().xyz()))
                .with_w(self[e1234] * geometric_product[e12345]),
        );
    }
}
impl GeometricQuotient<FlatPoint> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       27        0
    //    simd3        5        7        0
    //    simd4        5        6        0
    // Totals...
    // yes simd       20       40        0
    //  no simd       45       72        0
    fn geometric_quotient(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = FlatPoint::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(f32::powi(other[e45], -2) * -1.0) * Simd32x4::from([other[e15] * -1.0, other[e25] * -1.0, other[e35] * -1.0, other[e45] * -1.0]),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x3::from(geometric_product[e45]) * self.group0())
                .with_w((self[e45] * geometric_product[e45]) - (self[e41] * geometric_product[e15]) - (self[e42] * geometric_product[e25]) - (self[e43] * geometric_product[e35])),
            // e23, e31, e12, e45
            Simd32x4::from([
                self[e42] * geometric_product[e35] * -1.0,
                self[e43] * geometric_product[e15] * -1.0,
                self[e41] * geometric_product[e25] * -1.0,
                0.0,
            ]) + (geometric_product.group0().xyzy() * self.group2().www().with_w(self[e42]))
                + (geometric_product.group0().yzxx() * self.group0().zxy().with_w(self[e41]))
                + (geometric_product.group0().wwwz() * self.group3().xyz().with_w(self[e43])),
            // e15, e25, e35, e1234
            ((Simd32x3::from(self[e45]) * geometric_product.group0().xyz())
                + (self.group1().zxy() * geometric_product.group0().yzx())
                + (self.group3().zxy() * geometric_product.group0().yzx())
                - (Simd32x3::from(geometric_product[e45]) * self.group2().xyz())
                - (self.group1().yzx() * geometric_product.group0().zxy())
                - (self.group3().yzx() * geometric_product.group0().zxy()))
            .with_w(self[e1234] * geometric_product[e45]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e42] * geometric_product[e35]) + (self[e23] * geometric_product[e45]),
                (self[e43] * geometric_product[e15]) + (self[e31] * geometric_product[e45]),
                (self[e41] * geometric_product[e25]) + (self[e12] * geometric_product[e45]),
                -(self[e12] * geometric_product[e35])
                    - (self[e4235] * geometric_product[e15])
                    - (self[e4315] * geometric_product[e25])
                    - (self[e4125] * geometric_product[e35])
                    - (self[e3215] * geometric_product[e45]),
            ]) - (geometric_product.group0().xyzy() * self.group2().www().with_w(self[e31]))
                - (geometric_product.group0().yzxx() * self.group0().zxy().with_w(self[e23])),
        );
    }
}
impl GeometricQuotient<Flector> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       35       49        0
    //    simd3        0        5        0
    //    simd4       19       17        0
    // Totals...
    // yes simd       54       71        0
    //  no simd      111      132        0
    fn geometric_quotient(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let reverse = Flector::from_groups(
            // e15, e25, e35, e45
            other.group0() * Simd32x4::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group1(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            -f32::powi(other[e45], 2) - f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2),
        );
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e1234] * geometric_product[e4235],
                self[e1234] * geometric_product[e4315],
                self[e1234] * geometric_product[e4125],
                -(self[e42] * geometric_product[e25])
                    - (self[e43] * geometric_product[e35])
                    - (self[e4235] * geometric_product[e4235])
                    - (self[e4315] * geometric_product[e4315])
                    - (self[e4125] * geometric_product[e4125]),
            ]) + (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], geometric_product[e45]]) * self.group0().xxy().with_w(self[e45]))
                + (Simd32x4::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45], geometric_product[e3215]]) * self.group0().zyz().with_w(self[e1234]))
                - (self.group0().yzx() * geometric_product.group1().zxy()).with_w(self[e41] * geometric_product[e15]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e1234] * geometric_product[e15]) + (self[e4235] * geometric_product[e45]) + (self[e4125] * geometric_product[e4315]),
                (self[e1234] * geometric_product[e25]) + (self[e4235] * geometric_product[e4125]) + (self[e4315] * geometric_product[e45]),
                (self[e1234] * geometric_product[e35]) + (self[e4315] * geometric_product[e4235]) + (self[e4125] * geometric_product[e45]),
                -(self[e12] * geometric_product[e4125]) - (self[e1234] * geometric_product[e3215]),
            ]) + (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], geometric_product[e25]]) * self.group0().zyz().with_w(self[e42]))
                + (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e15]]) * self.group0().xxy().with_w(self[e41]))
                + (self.group1().www() * geometric_product.group1().xyz()).with_w(self[e43] * geometric_product[e35])
                - (geometric_product.group1().zxyy() * self.group3().yzx().with_w(self[e31]))
                - (self.group0().yzx() * geometric_product.group0().zxy()).with_w(self[e23] * geometric_product[e4235]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e12] * geometric_product[e25])
                    + (self[e45] * geometric_product[e15])
                    + (self[e25] * geometric_product[e4125])
                    + (self[e4235] * geometric_product[e3215])
                    + (self[e4125] * geometric_product[e25])
                    - (self[e4315] * geometric_product[e35])
                    - (self[e3215] * geometric_product[e4235]),
                (self[e31] * geometric_product[e3215])
                    + (self[e45] * geometric_product[e25])
                    + (self[e35] * geometric_product[e4235])
                    + (self[e4235] * geometric_product[e35])
                    + (self[e4315] * geometric_product[e3215])
                    - (self[e4125] * geometric_product[e15])
                    - (self[e3215] * geometric_product[e4315]),
                (self[e12] * geometric_product[e3215])
                    + (self[e45] * geometric_product[e35])
                    + (self[e15] * geometric_product[e4315])
                    + (self[e4315] * geometric_product[e15])
                    + (self[e4125] * geometric_product[e3215])
                    - (self[e4235] * geometric_product[e25])
                    - (self[e3215] * geometric_product[e4125]),
                0.0,
            ]) + (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e45]]) * self.group1().xxy().with_w(self[e1234]))
                - (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], geometric_product[e4315]]) * self.group2().xxy().with_w(self[e42]))
                - (Simd32x4::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45], geometric_product[e4125]]) * self.group2().zyz().with_w(self[e43]))
                - (self.group1().yzx() * geometric_product.group0().zxy()).with_w(self[e41] * geometric_product[e4235]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], geometric_product[e4235]]) * self.group1().xxy().with_w(self[e15]))
                + (Simd32x4::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45], geometric_product[e4315]]) * self.group1().zyz().with_w(self[e25]))
                + Simd32x3::from(0.0).with_w(
                    (self[e35] * geometric_product[e4125])
                        - (self[e4315] * geometric_product[e25])
                        - (self[e4125] * geometric_product[e35])
                        - (self[e3215] * geometric_product[e45]),
                )
                + (self.group0().yzx() * geometric_product.group0().zxy()).with_w(self[e45] * geometric_product[e3215])
                - (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], geometric_product[e25]]) * self.group0().zyz().with_w(self[e31]))
                - (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e15]]) * self.group0().xxy().with_w(self[e23]))
                - (self.group1().yzxz() * geometric_product.group1().zxy().with_w(geometric_product[e35]))
                - (geometric_product.group0().xyzx() * self.group2().www().with_w(self[e4235])),
        );
    }
}
impl GeometricQuotient<Line> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       52        0
    //    simd3        0       13        0
    //    simd4       12        3        0
    // Totals...
    // yes simd       44       68        0
    //  no simd       80      103        0
    fn geometric_quotient(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let reverse = Line::from_groups(
            // e415, e425, e435
            other.group0() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group1() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(/* scalar */ -f32::powi(other[e415], 2) - f32::powi(other[e425], 2) - f32::powi(other[e435], 2));
        let geometric_product = Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group1(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e43] * geometric_product[e425]) + (self[e1234] * geometric_product[e415]),
                (self[e41] * geometric_product[e435]) + (self[e1234] * geometric_product[e425]),
                (self[e42] * geometric_product[e415]) + (self[e1234] * geometric_product[e435]),
                -(self[e42] * geometric_product[e315])
                    - (self[e43] * geometric_product[e125])
                    - (self[e23] * geometric_product[e415])
                    - (self[e31] * geometric_product[e425])
                    - (self[e12] * geometric_product[e435]),
            ]) - (self.group0().yzx() * geometric_product.group0().zxy()).with_w(self[e41] * geometric_product[e235]),
            // e415, e425, e435, e321
            Simd32x3::from(0.0).with_w(self[e43] * geometric_product[e125] * -1.0)
                + (geometric_product.group1() * self.group2().www()).with_w(self[e4125] * geometric_product[e435])
                + (self.group0().zxy() * geometric_product.group1().yzx()).with_w(self[e4235] * geometric_product[e415])
                + (geometric_product.group0().yzx() * self.group1().zxy()).with_w(self[e4315] * geometric_product[e425])
                - (self.group0().yzx() * geometric_product.group1().zxy()).with_w(self[e41] * geometric_product[e235])
                - (geometric_product.group0().zxy() * self.group1().yzx()).with_w(self[e42] * geometric_product[e315]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * geometric_product[e315])
                    + (self[e45] * geometric_product[e235])
                    + (self[e35] * geometric_product[e425])
                    + (self[e4125] * geometric_product[e315])
                    + (self[e3215] * geometric_product[e415]),
                (self[e23] * geometric_product[e125])
                    + (self[e45] * geometric_product[e315])
                    + (self[e15] * geometric_product[e435])
                    + (self[e4235] * geometric_product[e125])
                    + (self[e3215] * geometric_product[e425]),
                (self[e31] * geometric_product[e235])
                    + (self[e45] * geometric_product[e125])
                    + (self[e25] * geometric_product[e415])
                    + (self[e4315] * geometric_product[e235])
                    + (self[e3215] * geometric_product[e435]),
                -(self[e23] * geometric_product[e235])
                    - (self[e31] * geometric_product[e315])
                    - (self[e12] * geometric_product[e125])
                    - (self[e4235] * geometric_product[e235])
                    - (self[e4315] * geometric_product[e315])
                    - (self[e4125] * geometric_product[e125]),
            ]) - (self.group2().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e415]))
                - (geometric_product.group1().zxy() * self.group1().yzx()).with_w(self[e25] * geometric_product[e425])
                - (geometric_product.group1().zxy() * self.group3().yzx()).with_w(self[e35] * geometric_product[e435]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e43] * geometric_product[e315]) + (self[e1234] * geometric_product[e235]) + (self[e4315] * geometric_product[e435]),
                (self[e41] * geometric_product[e125]) + (self[e1234] * geometric_product[e315]) + (self[e4125] * geometric_product[e415]),
                (self[e42] * geometric_product[e235]) + (self[e1234] * geometric_product[e125]) + (self[e4235] * geometric_product[e425]),
                0.0,
            ]) - (self.group1().ww().with_zw(self[e4315], geometric_product[e425]) * geometric_product.group0().xyx().with_w(self[e42]))
                - (self.group3().zx().with_zw(self[e45], geometric_product[e435]) * geometric_product.group0().yzz().with_w(self[e43]))
                - (self.group0().yzx() * geometric_product.group1().zxy()).with_w(self[e41] * geometric_product[e415]),
        );
    }
}
impl GeometricQuotient<Motor> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       60        0
    //    simd3        0        8        0
    //    simd4       17       13        0
    // Totals...
    // yes simd       57       81        0
    //  no simd      108      136        0
    fn geometric_quotient(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let reverse = Motor::from_groups(
            // e415, e425, e435, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            -f32::powi(other[e415], 2) - f32::powi(other[e425], 2) - f32::powi(other[e435], 2) - f32::powi(other[e12345], 2),
        );
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e235, e315, e125, e5
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e43] * geometric_product[e425]) + (self[e1234] * geometric_product[e415]),
                (self[e42] * geometric_product[e12345]) + (self[e1234] * geometric_product[e425]),
                (self[e43] * geometric_product[e12345]) + (self[e1234] * geometric_product[e435]),
                -(self[e42] * geometric_product[e315])
                    - (self[e43] * geometric_product[e125])
                    - (self[e23] * geometric_product[e415])
                    - (self[e31] * geometric_product[e425])
                    - (self[e12] * geometric_product[e435]),
            ]) + (self.group0().xxy() * geometric_product.group0().wzx()).with_w(self[e1234] * geometric_product[e5])
                - (self.group0().yzx() * geometric_product.group0().zxy()).with_w(self[e41] * geometric_product[e235]),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e1234] * geometric_product[e235],
                self[e1234] * geometric_product[e315],
                self[e1234] * geometric_product[e125],
                -(self[e43] * geometric_product[e125]) - (self[e45] * geometric_product[e12345]),
            ]) + (geometric_product.group0().ywwz() * self.group1().zyz().with_w(self[e4125]))
                + (geometric_product.group0().wzxy() * self.group1().xxy().with_w(self[e4315]))
                + (geometric_product.group1().wzxw() * self.group0().xxy().with_w(self[e1234]))
                + (self.group0().zyz() * geometric_product.group1().yww()).with_w(self[e4235] * geometric_product[e415])
                - (geometric_product.group1().zxyx() * self.group0().yzx().with_w(self[e41]))
                - (self.group1().yzx() * geometric_product.group0().zxy()).with_w(self[e42] * geometric_product[e315]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e45] * geometric_product[e235])
                    + (self[e15] * geometric_product[e12345])
                    + (self[e35] * geometric_product[e425])
                    + (self[e4235] * geometric_product[e5])
                    + (self[e4125] * geometric_product[e315])
                    + (self[e3215] * geometric_product[e415]),
                (self[e45] * geometric_product[e315])
                    + (self[e15] * geometric_product[e435])
                    + (self[e25] * geometric_product[e12345])
                    + (self[e4235] * geometric_product[e125])
                    + (self[e4315] * geometric_product[e5])
                    + (self[e3215] * geometric_product[e425]),
                (self[e45] * geometric_product[e125])
                    + (self[e25] * geometric_product[e415])
                    + (self[e35] * geometric_product[e12345])
                    + (self[e4315] * geometric_product[e235])
                    + (self[e4125] * geometric_product[e5])
                    + (self[e3215] * geometric_product[e435]),
                -(self[e15] * geometric_product[e415])
                    - (self[e25] * geometric_product[e425])
                    - (self[e35] * geometric_product[e435])
                    - (self[e4235] * geometric_product[e235])
                    - (self[e4315] * geometric_product[e315])
                    - (self[e4125] * geometric_product[e125]),
            ]) + (self.group1().xxyw() * geometric_product.group1().wzxw())
                + (self.group1().zyz() * geometric_product.group1().yww()).with_w(self[e3215] * geometric_product[e12345])
                - (self.group1().yzxx() * geometric_product.group1().zxyx())
                - (geometric_product.group1().zxyz() * self.group3().yzx().with_w(self[e12]))
                - (self.group2().yzx() * geometric_product.group0().zxy()).with_w(self[e31] * geometric_product[e315]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e43] * geometric_product[e315]) + (self[e1234] * geometric_product[e235]) + (self[e4315] * geometric_product[e435]) - (self[e4125] * geometric_product[e425]),
                (self[e42] * geometric_product[e5]) + (self[e1234] * geometric_product[e315]) + (self[e4125] * geometric_product[e415]) - (self[e4315] * geometric_product[e12345]),
                (self[e43] * geometric_product[e5]) + (self[e1234] * geometric_product[e125]) + (self[e4235] * geometric_product[e425]) - (self[e4125] * geometric_product[e12345]),
                0.0,
            ]) + (self.group0().xxy() * geometric_product.group1().wzx()).with_w(self[e1234] * geometric_product[e12345])
                - (geometric_product.group0().xyzy() * self.group1().www().with_w(self[e42]))
                - (geometric_product.group0().wzxz() * self.group3().xxy().with_w(self[e43]))
                - (self.group0().yzx() * geometric_product.group1().zxy()).with_w(self[e41] * geometric_product[e415]),
        );
    }
}
impl GeometricQuotient<MultiVector> for DipoleInversion {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       85      112        0
    //    simd2       11       12        0
    //    simd3       56       84        0
    //    simd4       49       40        0
    // Totals...
    // yes simd      201      248        0
    //  no simd      471      548        0
    fn geometric_quotient(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let reverse = MultiVector::from_groups(
            // scalar, e12345
            other.group0(),
            // e1, e2, e3, e4
            other.group1(),
            // e5
            other[e5],
            // e15, e25, e35, e45
            other.group3() * Simd32x4::from(-1.0),
            // e41, e42, e43
            other.group4() * Simd32x3::from(-1.0),
            // e23, e31, e12
            other.group5() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group6() * Simd32x4::from(-1.0),
            // e423, e431, e412
            other.group7() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group8() * Simd32x3::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group9(),
            // e1234
            other[e1234],
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e15] * other[e41])
                + 2.0 * (other[e25] * other[e42])
                + 2.0 * (other[e35] * other[e43])
                + 2.0 * (other[e3215] * other[e1234])
                + f32::powi(other[scalar], 2)
                + f32::powi(other[e1], 2)
                + f32::powi(other[e2], 2)
                + f32::powi(other[e3], 2)
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                + f32::powi(other[e321], 2)
                - f32::powi(other[e12345], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2)
                - 2.0 * (other[e4] * other[e5])
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(other_2[scalar]) * reverse.group0(),
            // e1, e2, e3, e4
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e5
            reverse[e5] * other_2[scalar],
            // e15, e25, e35, e45
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group4(),
            // e23, e31, e12
            Simd32x3::from(other_2[scalar]) * reverse.group5(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group6(),
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group7(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group8(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group9(),
            // e1234
            reverse[e1234] * other_2[scalar],
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e45] * geometric_product[e45])
                    - (self[e4235] * geometric_product[e4235])
                    - (self[e4315] * geometric_product[e4315])
                    - (self[e4125] * geometric_product[e4125]),
                (self[e4315] * geometric_product[e2]) + (self[e4125] * geometric_product[e3]) + (self[e3215] * geometric_product[e4]) - (self[e45] * geometric_product[e321]),
            ]) + (Simd32x2::from(self[e1234]) * Simd32x2::from([geometric_product[e3215], geometric_product[e5]]))
                + (Simd32x2::from([geometric_product[e1234], geometric_product[e1]]) * self.group3().wx())
                - (Simd32x2::from(self[e41]) * Simd32x2::from([geometric_product[e15], geometric_product[e235]]))
                - (Simd32x2::from(self[e42]) * Simd32x2::from([geometric_product[e25], geometric_product[e315]]))
                - (Simd32x2::from(self[e43]) * Simd32x2::from([geometric_product[e35], geometric_product[e125]]))
                - (Simd32x2::from(self[e23]) * Simd32x2::from([geometric_product[e23], geometric_product[e415]]))
                - (Simd32x2::from(self[e31]) * Simd32x2::from([geometric_product[e31], geometric_product[e425]]))
                - (Simd32x2::from(self[e12]) * Simd32x2::from([geometric_product[e12], geometric_product[e435]]))
                - (Simd32x2::from(self[e15]) * Simd32x2::from([geometric_product[e41], geometric_product[e423]]))
                - (Simd32x2::from(self[e25]) * Simd32x2::from([geometric_product[e42], geometric_product[e431]]))
                - (Simd32x2::from(self[e35]) * Simd32x2::from([geometric_product[e43], geometric_product[e412]])),
            // e1, e2, e3, e4
            (Simd32x4::from([geometric_product[e2], geometric_product[e321], geometric_product[e321], self[e4315]]) * self.group1().zyz().with_w(geometric_product[e431]))
                + (Simd32x4::from([geometric_product[e5], geometric_product[e125], geometric_product[e235], self[e1234]]) * self.group0().xxy().with_w(geometric_product[e12345]))
                + (Simd32x4::from([geometric_product[e321], geometric_product[e3], geometric_product[e1], self[e4235]]) * self.group1().xxy().with_w(geometric_product[e423]))
                + (Simd32x4::from([geometric_product[e315], geometric_product[e5], geometric_product[e5], geometric_product[e1]]) * self.group0().zyz().with_w(self[e41]))
                + (geometric_product.group8() * self.group2().www()).with_w(self[e43] * geometric_product[e3])
                + (geometric_product.group7().zxy() * self.group2().yzx()).with_w(self[e42] * geometric_product[e2])
                + (self.group3().yzx() * geometric_product.group6().zxy()).with_w(self[e4125] * geometric_product[e412])
                - (Simd32x4::from(geometric_product[e4]) * self.group2().xyz().with_w(self[e45]))
                - (geometric_product.group6().yzxw() * self.group3().zxy().with_w(self[e1234]))
                - (geometric_product.group0().yy().with_zw(geometric_product[e12345], self[e41]) * self.group3().xyz().with_w(geometric_product[e415]))
                - (self.group2().zx().with_zw(self[e3215], self[e23]) * geometric_product.group7().yzz().with_w(geometric_product[e423]))
                - (self.group3().ww().with_zw(self[e25], geometric_product[e435]) * geometric_product.group7().xyx().with_w(self[e43]))
                - (self.group0().yzx() * geometric_product.group8().zxy()).with_w(self[e42] * geometric_product[e425])
                - (self.group1().yzx() * geometric_product.group1().zxy()).with_w(self[e31] * geometric_product[e431])
                - (self.group1().www() * geometric_product.group6().xyz()).with_w(self[e12] * geometric_product[e412]),
            // e5
            (self[e45] * geometric_product[e5]) + (self[e3215] * geometric_product[e12345]) + (self[e3215] * geometric_product[e321])
                - (self[e23] * geometric_product[e235])
                - (self[e31] * geometric_product[e315])
                - (self[e12] * geometric_product[e125])
                - (self[e15] * geometric_product[e1])
                - (self[e15] * geometric_product[e415])
                - (self[e25] * geometric_product[e2])
                - (self[e25] * geometric_product[e425])
                - (self[e35] * geometric_product[e3])
                - (self[e35] * geometric_product[e435])
                - (self[e4235] * geometric_product[e235])
                - (self[e4315] * geometric_product[e315])
                - (self[e4125] * geometric_product[e125]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e45] * geometric_product[e15]) + (self[e25] * geometric_product[e4125]) + (self[e4235] * geometric_product[e3215]) + (self[e4125] * geometric_product[e25]),
                (self[e45] * geometric_product[e25]) + (self[e35] * geometric_product[e4235]) + (self[e4235] * geometric_product[e35]) + (self[e4315] * geometric_product[e3215]),
                (self[e45] * geometric_product[e35]) + (self[e15] * geometric_product[e4315]) + (self[e4315] * geometric_product[e15]) + (self[e4125] * geometric_product[e3215]),
                -(self[e23] * geometric_product[e4235])
                    - (self[e31] * geometric_product[e4315])
                    - (self[e12] * geometric_product[e4125])
                    - (self[e1234] * geometric_product[e3215]),
            ]) + (Simd32x4::from(geometric_product[scalar]) * self.group2().xyz().with_w(self[e45]))
                + (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], geometric_product[e1234]])
                    * self.group1().zyz().with_w(self[e3215]))
                + (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e35]]) * self.group1().xxy().with_w(self[e43]))
                + (self.group2().zx().with_zw(self[e3215], geometric_product[e25]) * geometric_product.group5().yzz().with_w(self[e42]))
                + (self.group3().ww().with_zw(self[e25], geometric_product[e15]) * geometric_product.group5().xyx().with_w(self[e41]))
                - (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], self[e35]]) * self.group2().xxy().with_w(geometric_product[e43]))
                - (Simd32x4::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45], self[e4235]]) * self.group2().zyz().with_w(geometric_product[e23]))
                - (self.group2().yzxx() * geometric_product.group5().zxy().with_w(geometric_product[e41]))
                - (self.group1().yzx() * geometric_product.group3().zxy()).with_w(self[e25] * geometric_product[e42])
                - (self.group3().yzx() * geometric_product.group3().zxy()).with_w(self[e4315] * geometric_product[e31])
                - (self.group3().www() * geometric_product.group9().xyz()).with_w(self[e4125] * geometric_product[e12]),
            // e41, e42, e43
            (Simd32x3::from(self[e1234]) * geometric_product.group5())
                + (Simd32x3::from(self[e1234]) * geometric_product.group9().xyz())
                + (Simd32x3::from(geometric_product[scalar]) * self.group0())
                + (Simd32x3::from(geometric_product[e1234]) * self.group1().xyz())
                + (Simd32x3::from([self[e12], self[e4125], self[e31]]) * geometric_product.group4().yxx())
                + (Simd32x3::from([self[e4315], self[e23], self[e4235]]) * geometric_product.group4().zzy())
                + (Simd32x3::from([geometric_product[e45], geometric_product[e12], geometric_product[e23]]) * self.group0().xxy())
                + (Simd32x3::from([geometric_product[e31], geometric_product[e4125], geometric_product[e4235]]) * self.group0().zxy())
                + (Simd32x3::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45]]) * self.group0().zyz())
                - (Simd32x3::from(geometric_product[e41]) * Simd32x3::from([self[e45], self[e12], self[e4315]]))
                - (Simd32x3::from(geometric_product[e42]) * Simd32x3::from([self[e4125], self[e45], self[e23]]))
                - (Simd32x3::from(geometric_product[e43]) * Simd32x3::from([self[e31], self[e4235], self[e45]]))
                - (Simd32x3::from(geometric_product[e1234]) * self.group3().xyz())
                - (self.group0().yzx() * geometric_product.group5().zxy())
                - (self.group0().yzx() * geometric_product.group9().zxy()),
            // e23, e31, e12
            (Simd32x3::from(self[e45]) * geometric_product.group9().xyz())
                + (Simd32x3::from(self[e1234]) * geometric_product.group3().xyz())
                + (Simd32x3::from(geometric_product[scalar]) * self.group1().xyz())
                + (Simd32x3::from(geometric_product[e1234]) * self.group2().xyz())
                + (Simd32x3::from([self[e35], self[e15], self[e3215]]) * geometric_product.group4().yzz())
                + (Simd32x3::from([self[e3215], self[e3215], self[e25]]) * geometric_product.group4().xyx())
                + (Simd32x3::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215]]) * self.group0().zyz())
                + (Simd32x3::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235]]) * self.group3().xxy())
                + (Simd32x3::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45]]) * self.group3().zyz())
                + (Simd32x3::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15]]) * self.group0().xxy())
                + (geometric_product.group5().yzx() * self.group1().zxy())
                - (self.group0().yzx() * geometric_product.group3().zxy())
                - (geometric_product.group4().zxy() * self.group2().yzx())
                - (geometric_product.group5().zxy() * self.group1().yzx())
                - (self.group3().yzx() * geometric_product.group9().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e15] * geometric_product[e4]) + (self[e4315] * geometric_product[e3]),
                (self[e25] * geometric_product[e4]) + (self[e4125] * geometric_product[e1]),
                (self[e35] * geometric_product[e4]) + (self[e4235] * geometric_product[e2]),
                -(self[e12] * geometric_product[e3]) - (self[e3215] * geometric_product[e4]),
            ]) + (Simd32x4::from([geometric_product[e5], geometric_product[e125], geometric_product[e235], self[e25]]) * self.group0().xxy().with_w(geometric_product[e431]))
                + (Simd32x4::from([geometric_product[e315], geometric_product[e5], geometric_product[e5], self[e35]]) * self.group0().zyz().with_w(geometric_product[e412]))
                + (geometric_product.group6().yzxz() * self.group1().zxy().with_w(self[e4125]))
                + (geometric_product.group0().yy().with_zw(geometric_product[e12345], geometric_product[e423]) * self.group1().xyz().with_w(self[e15]))
                + (self.group2().zx().with_zw(self[e3215], geometric_product[e415]) * geometric_product.group7().yzz().with_w(self[e4235]))
                + (self.group3().ww().with_zw(self[e25], geometric_product[e5]) * geometric_product.group7().xyx().with_w(self[e1234]))
                + (geometric_product.group8() * self.group2().www()).with_w(self[e4315] * geometric_product[e425])
                - (Simd32x4::from([geometric_product[e2], geometric_product[e321], geometric_product[e321], geometric_product[e2]]) * self.group3().zyz().with_w(self[e31]))
                - (Simd32x4::from([geometric_product[e321], geometric_product[e3], geometric_product[e1], geometric_product[e1]]) * self.group3().xxy().with_w(self[e23]))
                - (self.group0().yzx() * geometric_product.group8().zxy()).with_w(self[e45] * geometric_product[e12345])
                - (geometric_product.group7().zxy() * self.group2().yzx()).with_w(self[e41] * geometric_product[e235])
                - (self.group1().yzx() * geometric_product.group6().zxy()).with_w(self[e42] * geometric_product[e315])
                - (self.group1().www() * geometric_product.group1().xyz()).with_w(self[e43] * geometric_product[e125]),
            // e423, e431, e412
            (Simd32x3::from(self[e1234]) * geometric_product.group6().xyz())
                + (Simd32x3::from(geometric_product[e12345]) * self.group0())
                + (Simd32x3::from(geometric_product[e4]) * self.group1().xyz())
                + (Simd32x3::from([self[e12], self[e4125], self[e31]]) * geometric_product.group7().yxx())
                + (Simd32x3::from([self[e4315], self[e23], self[e4235]]) * geometric_product.group7().zzy())
                + (Simd32x3::from([geometric_product[e3], geometric_product[e435], geometric_product[e2]]) * self.group0().yxx())
                + (Simd32x3::from([geometric_product[e425], geometric_product[e1], geometric_product[e415]]) * self.group0().zzy())
                - (Simd32x3::from(self[e41]) * Simd32x3::from([geometric_product[e321], geometric_product[e3], geometric_product[e425]]))
                - (Simd32x3::from(self[e42]) * Simd32x3::from([geometric_product[e435], geometric_product[e321], geometric_product[e1]]))
                - (Simd32x3::from(self[e43]) * Simd32x3::from([geometric_product[e2], geometric_product[e415], geometric_product[e321]]))
                - (Simd32x3::from(self[e1234]) * geometric_product.group1().xyz())
                - (Simd32x3::from(geometric_product[e4]) * self.group3().xyz())
                - (Simd32x3::from(geometric_product[e423]) * Simd32x3::from([self[e45], self[e12], self[e4315]]))
                - (Simd32x3::from(geometric_product[e431]) * Simd32x3::from([self[e4125], self[e45], self[e23]]))
                - (Simd32x3::from(geometric_product[e412]) * Simd32x3::from([self[e31], self[e4235], self[e45]])),
            // e235, e315, e125
            (Simd32x3::from(self[e3215]) * geometric_product.group1().xyz())
                + (Simd32x3::from(self[e3215]) * geometric_product.group6().xyz())
                + (Simd32x3::from(geometric_product[e12345]) * self.group2().xyz())
                + (Simd32x3::from(geometric_product[e5]) * self.group1().xyz())
                + (Simd32x3::from(geometric_product[e5]) * self.group3().xyz())
                + (Simd32x3::from([self[e12], self[e23], self[e4315]]) * geometric_product.group8().yzx())
                + (Simd32x3::from([self[e4125], self[e4235], self[e45]]) * geometric_product.group8().yzz())
                + (Simd32x3::from([geometric_product[e2], geometric_product[e435], geometric_product[e415]]) * self.group2().zxy())
                + (Simd32x3::from([geometric_product[e321], geometric_product[e3], geometric_product[e1]]) * self.group2().xxy())
                + (geometric_product.group8().xyx() * self.group1().wwy())
                + (self.group2().zyz() * geometric_product.group6().yww())
                - (geometric_product.group8().zxy() * self.group1().yzx())
                - (geometric_product.group8().zxy() * self.group3().yzx())
                - (self.group2().yzx() * geometric_product.group1().zxy())
                - (self.group2().yzx() * geometric_product.group6().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e23] * geometric_product[e45]) + (self[e12] * geometric_product[e4315]) + (self[e15] * geometric_product[e1234]) + (self[e4125] * geometric_product[e31]),
                (self[e23] * geometric_product[e4125]) + (self[e31] * geometric_product[e45]) + (self[e25] * geometric_product[e1234]) + (self[e4235] * geometric_product[e12]),
                (self[e31] * geometric_product[e4235]) + (self[e12] * geometric_product[e45]) + (self[e45] * geometric_product[e12]) + (self[e35] * geometric_product[e1234]),
                -(self[e4235] * geometric_product[e15]) - (self[e4315] * geometric_product[e25]) - (self[e4125] * geometric_product[e35]) - (self[e3215] * geometric_product[e45]),
            ]) + (Simd32x4::from(geometric_product[scalar]) * self.group3())
                + (self.group1().ww().with_zw(self[e4315], geometric_product[e4125]) * geometric_product.group5().xyx().with_w(self[e35]))
                + (self.group2().zx().with_zw(self[e3215], geometric_product[e4315]) * geometric_product.group4().yzz().with_w(self[e25]))
                + (self.group3().ww().with_zw(self[e25], geometric_product[e4235]) * geometric_product.group4().xyx().with_w(self[e15]))
                + (self.group0().yzx() * geometric_product.group3().zxy()).with_w(self[e45] * geometric_product[e3215])
                - (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], self[e25]]) * self.group0().zyz().with_w(geometric_product[e31]))
                - (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], self[e15]]) * self.group0().xxy().with_w(geometric_product[e23]))
                - (self.group1().yzxy() * geometric_product.group9().zxy().with_w(geometric_product[e25]))
                - (self.group2().yzxz() * geometric_product.group4().zxy().with_w(geometric_product[e12]))
                - (geometric_product.group3().xyzz() * self.group2().www().with_w(self[e12]))
                - (geometric_product.group5().zxy() * self.group3().yzx()).with_w(self[e23] * geometric_product[e15]),
            // e1234
            (self[e1234] * geometric_product[scalar])
                + (self[e1234] * geometric_product[e45])
                + (self[e4235] * geometric_product[e41])
                + (self[e4315] * geometric_product[e42])
                + (self[e4125] * geometric_product[e43])
                - (self[e41] * geometric_product[e23])
                - (self[e41] * geometric_product[e4235])
                - (self[e42] * geometric_product[e31])
                - (self[e42] * geometric_product[e4315])
                - (self[e43] * geometric_product[e12])
                - (self[e43] * geometric_product[e4125])
                - (self[e23] * geometric_product[e41])
                - (self[e31] * geometric_product[e42])
                - (self[e12] * geometric_product[e43])
                - (self[e45] * geometric_product[e1234]),
        );
    }
}
impl GeometricQuotient<Plane> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       22       37        0
    //    simd4        6        7        0
    // Totals...
    // yes simd       28       44        0
    //  no simd       46       65        0
    fn geometric_quotient(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Plane::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(-f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2)) * other.group0(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e1234] * geometric_product[e4235],
                self[e1234] * geometric_product[e4315],
                self[e1234] * geometric_product[e4125],
                -(self[e4315] * geometric_product[e4315]) - (self[e4125] * geometric_product[e4125]),
            ]) + (geometric_product.group0().yzxw() * self.group0().zxy().with_w(self[e1234]))
                - (geometric_product.group0().zxyx() * self.group0().yzx().with_w(self[e4235])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e41] * geometric_product[e3215]) + (self[e45] * geometric_product[e4235]) + (self[e4125] * geometric_product[e4315]),
                (self[e42] * geometric_product[e3215]) + (self[e45] * geometric_product[e4315]) + (self[e4235] * geometric_product[e4125]),
                (self[e43] * geometric_product[e3215]) + (self[e45] * geometric_product[e4125]) + (self[e4315] * geometric_product[e4235]),
                -(self[e31] * geometric_product[e4315]) - (self[e12] * geometric_product[e4125]) - (self[e1234] * geometric_product[e3215]),
            ]) - (geometric_product.group0().zxyx() * self.group3().yzx().with_w(self[e23])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * geometric_product[e3215]) + (self[e25] * geometric_product[e4125]) + (self[e4235] * geometric_product[e3215]),
                (self[e31] * geometric_product[e3215]) + (self[e35] * geometric_product[e4235]) + (self[e4315] * geometric_product[e3215]),
                (self[e12] * geometric_product[e3215]) + (self[e15] * geometric_product[e4315]) + (self[e4125] * geometric_product[e3215]),
                self[e43] * geometric_product[e4125] * -1.0,
            ]) - (geometric_product.group0().xyzy() * self.group3().www().with_w(self[e42]))
                - (geometric_product.group0().yzxx() * self.group2().zxy().with_w(self[e41])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(self[e41] * geometric_product[e3215]) - (self[e31] * geometric_product[e4125]),
                -(self[e42] * geometric_product[e3215]) - (self[e12] * geometric_product[e4235]),
                -(self[e43] * geometric_product[e3215]) - (self[e23] * geometric_product[e4315]),
                (self[e15] * geometric_product[e4235]) + (self[e25] * geometric_product[e4315]) + (self[e35] * geometric_product[e4125]),
            ]) + (self.group1().zxyw() * geometric_product.group0().yzxw()),
        );
    }
}
impl GeometricQuotient<RoundPoint> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       22       43        0
    //    simd3        0        2        0
    //    simd4       10        9        0
    // Totals...
    // yes simd       32       54        0
    //  no simd       62       85        0
    fn geometric_quotient(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2) - 2.0 * (other[e4] * other[e5]),
        );
        let geometric_product = RoundPoint::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from(other_2[scalar]) * other.group0(), /* e5 */ other[e5] * other_2[scalar]);
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                -(self[e43] * geometric_product[e2]) - (self[e1234] * geometric_product[e1]) - (self[e4235] * geometric_product[e4]),
                -(self[e41] * geometric_product[e3]) - (self[e1234] * geometric_product[e2]) - (self[e4315] * geometric_product[e4]),
                -(self[e42] * geometric_product[e1]) - (self[e1234] * geometric_product[e3]) - (self[e4125] * geometric_product[e4]),
                (self[e4315] * geometric_product[e2]) + (self[e4125] * geometric_product[e3]) + (self[e3215] * geometric_product[e4]),
            ]) + (geometric_product.group0().wwwx() * self.group1().xyz().with_w(self[e4235]))
                + (self.group0().yzx() * geometric_product.group0().zxy()).with_w(self[e1234] * geometric_product[e5]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e15] * geometric_product[e4]) + (self[e4315] * geometric_product[e3]),
                (self[e25] * geometric_product[e4]) + (self[e4125] * geometric_product[e1]),
                (self[e35] * geometric_product[e4]) + (self[e4235] * geometric_product[e2]),
                -(self[e12] * geometric_product[e3]) - (self[e3215] * geometric_product[e4]),
            ]) + (Simd32x4::from(geometric_product[e5]) * self.group0().with_w(self[e1234]))
                - (self.group1().wwwx() * geometric_product.group0().xyzx())
                - (geometric_product.group0().yzxy() * self.group3().zxy().with_w(self[e31])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e35] * geometric_product[e2]) + (self[e4235] * geometric_product[e5]) + (self[e3215] * geometric_product[e1]),
                (self[e15] * geometric_product[e3]) + (self[e4315] * geometric_product[e5]) + (self[e3215] * geometric_product[e2]),
                (self[e25] * geometric_product[e1]) + (self[e4125] * geometric_product[e5]) + (self[e3215] * geometric_product[e3]),
                -(self[e25] * geometric_product[e2]) - (self[e35] * geometric_product[e3]),
            ]) + (Simd32x4::from(geometric_product[e5]) * self.group1())
                - (self.group2().yzxx() * geometric_product.group0().zxyx()),
            // e1, e2, e3, e4
            Simd32x4::from([
                self[e15] * geometric_product[e4] * -1.0,
                self[e25] * geometric_product[e4] * -1.0,
                self[e35] * geometric_product[e4] * -1.0,
                self[e43] * geometric_product[e3],
            ]) + (geometric_product.group0().yzxy() * self.group1().zxy().with_w(self[e42]))
                + (Simd32x3::from(geometric_product[e5]) * self.group0()).with_w(self[e41] * geometric_product[e1])
                - (self.group1().yzxw() * geometric_product.group0().zxyw()),
        );
    }
}
impl GeometricQuotient<Scalar> for DipoleInversion {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        0        1
    //    simd3        0        1        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        0        4        1
    //  no simd        0       15        1
    fn geometric_quotient(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Scalar::from_groups(/* scalar */ 1.0 / other[scalar]);
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(geometric_product[scalar]) * self.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(geometric_product[scalar]) * self.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(geometric_product[scalar]) * self.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(geometric_product[scalar]) * self.group3(),
        );
    }
}
impl GeometricQuotient<Sphere> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       22       40        0
    //    simd3        0        1        0
    //    simd4       10       10        0
    // Totals...
    // yes simd       32       51        0
    //  no simd       62       83        0
    fn geometric_quotient(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e3215] * other[e1234]) - f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2),
        );
        let geometric_product = Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * other.group0(),
            // e1234
            other_2[scalar] * other[e1234],
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e1234] * geometric_product[e4235],
                self[e1234] * geometric_product[e4315],
                self[e1234] * geometric_product[e4125],
                self[e4125] * geometric_product[e4125] * -1.0,
            ]) + (Simd32x4::from(geometric_product[e1234]) * self.group1().xyz().with_w(self[e3215]))
                + (geometric_product.group0().yzxw() * self.group0().zxy().with_w(self[e1234]))
                - (self.group3().xyzy() * Simd32x3::from(geometric_product[e1234]).with_w(geometric_product[e4315]))
                - (geometric_product.group0().zxyx() * self.group0().yzx().with_w(self[e4235])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e45] * geometric_product[e4235]) + (self[e15] * geometric_product[e1234]) + (self[e4125] * geometric_product[e4315]),
                (self[e45] * geometric_product[e4315]) + (self[e25] * geometric_product[e1234]) + (self[e4235] * geometric_product[e4125]),
                (self[e45] * geometric_product[e4125]) + (self[e35] * geometric_product[e1234]) + (self[e4315] * geometric_product[e4235]),
                -(self[e31] * geometric_product[e4315]) - (self[e12] * geometric_product[e4125]) - (self[e1234] * geometric_product[e3215]),
            ]) + (self.group0() * geometric_product.group0().www()).with_w(self[e3215] * geometric_product[e1234])
                - (geometric_product.group0().zxyx() * self.group3().yzx().with_w(self[e23])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * geometric_product[e3215]) + (self[e25] * geometric_product[e4125]) + (self[e4235] * geometric_product[e3215]),
                (self[e31] * geometric_product[e3215]) + (self[e35] * geometric_product[e4235]) + (self[e4315] * geometric_product[e3215]),
                (self[e12] * geometric_product[e3215]) + (self[e15] * geometric_product[e4315]) + (self[e4125] * geometric_product[e3215]),
                -(self[e43] * geometric_product[e4125]) - (self[e45] * geometric_product[e1234]),
            ]) - (geometric_product.group0().xyzy() * self.group3().www().with_w(self[e42]))
                - (geometric_product.group0().yzxx() * self.group2().zxy().with_w(self[e41])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(self[e41] * geometric_product[e3215]) - (self[e31] * geometric_product[e4125]),
                -(self[e42] * geometric_product[e3215]) - (self[e12] * geometric_product[e4235]),
                -(self[e43] * geometric_product[e3215]) - (self[e23] * geometric_product[e4315]),
                (self[e25] * geometric_product[e4315]) + (self[e35] * geometric_product[e4125]),
            ]) + (self.group1().zxyw() * geometric_product.group0().yzxw())
                + (self.group2().xyzx() * Simd32x3::from(geometric_product[e1234]).with_w(geometric_product[e4235])),
        );
    }
}
impl GeometricQuotient<VersorEven> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       47       74        0
    //    simd3        0       18        0
    //    simd4       47       37        0
    // Totals...
    // yes simd       94      129        0
    //  no simd      235      276        0
    fn geometric_quotient(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let reverse = VersorEven::from_groups(
            // e423, e431, e412, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e5
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e4
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)
                - f32::powi(other[e12345], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125])
                - 2.0 * (other[e5] * other[e4]),
        );
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e5
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e1, e2, e3, e4
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e1234] * geometric_product[e415]) + (self[e4315] * geometric_product[e412]),
                (self[e1234] * geometric_product[e425]) + (self[e4125] * geometric_product[e423]),
                (self[e1234] * geometric_product[e435]) + (self[e4235] * geometric_product[e431]),
                -(self[e25] * geometric_product[e431]) - (self[e35] * geometric_product[e412]),
            ]) + (Simd32x4::from([geometric_product[e431], geometric_product[e4], geometric_product[e4], geometric_product[e4]]) * self.group1().zyz().with_w(self[e3215]))
                + (Simd32x4::from([geometric_product[e12345], geometric_product[e435], geometric_product[e2], geometric_product[e5]]) * self.group0().xxx().with_w(self[e1234]))
                + (Simd32x4::from([geometric_product[e425], geometric_product[e1], geometric_product[e12345], geometric_product[e2]]) * self.group0().zzz().with_w(self[e4315]))
                + (Simd32x4::from([geometric_product[e3], geometric_product[e12345], geometric_product[e415], geometric_product[e1]]) * self.group0().yyy().with_w(self[e4235]))
                + (Simd32x4::from([geometric_product[e4], geometric_product[e412], geometric_product[e423], geometric_product[e3]]) * self.group1().xxy().with_w(self[e4125]))
                - (Simd32x4::from(self[e41]) * Simd32x4::from([geometric_product[e321], geometric_product[e3], geometric_product[e425], geometric_product[e235]]))
                - (Simd32x4::from(self[e42]) * geometric_product.group1().zw().with_zw(geometric_product[e1], geometric_product[e315]))
                - (Simd32x4::from(self[e43]) * Simd32x4::from([geometric_product[e2], geometric_product[e415], geometric_product[e321], geometric_product[e125]]))
                - (Simd32x4::from([geometric_product[e431], geometric_product[e4], geometric_product[e4], geometric_product[e423]]) * self.group3().zyz().with_w(self[e15]))
                - (Simd32x4::from([geometric_product[e4], geometric_product[e412], geometric_product[e423], geometric_product[e321]]) * self.group3().xxy().with_w(self[e45]))
                - (self.group1().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e415]))
                - (self.group1().wwwy() * geometric_product.group0().xyz().with_w(geometric_product[e425]))
                - (self.group2().www() * geometric_product.group3().xyz()).with_w(self[e12] * geometric_product[e435]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e4315] * geometric_product[e3]) + (self[e3215] * geometric_product[e423]),
                (self[e4125] * geometric_product[e1]) + (self[e3215] * geometric_product[e431]),
                (self[e4235] * geometric_product[e2]) + (self[e3215] * geometric_product[e412]),
                -(self[e45] * geometric_product[e12345]) - (self[e3215] * geometric_product[e4]),
            ]) + (Simd32x4::from([geometric_product[e431], geometric_product[e4], geometric_product[e4], geometric_product[e425]]) * self.group2().zyz().with_w(self[e4315]))
                + (Simd32x4::from([geometric_product[e12345], geometric_product[e435], geometric_product[e415], geometric_product[e412]]) * self.group1().xxy().with_w(self[e35]))
                + (Simd32x4::from([geometric_product[e425], geometric_product[e12345], geometric_product[e12345], geometric_product[e5]])
                    * self.group1().zyz().with_w(self[e1234]))
                + (Simd32x4::from([geometric_product[e4], geometric_product[e412], geometric_product[e423], geometric_product[e415]]) * self.group2().xxy().with_w(self[e4235]))
                + (self.group0().xxy() * geometric_product.group2().wzx()).with_w(self[e15] * geometric_product[e423])
                + (self.group0().zyz() * geometric_product.group2().yww()).with_w(self[e25] * geometric_product[e431])
                + (self.group2().www() * geometric_product.group2().xyz()).with_w(self[e4125] * geometric_product[e435])
                - (Simd32x4::from([geometric_product[e321], geometric_product[e3], geometric_product[e1], geometric_product[e2]]) * self.group3().xxy().with_w(self[e31]))
                - (Simd32x4::from([geometric_product[e2], geometric_product[e321], geometric_product[e321], geometric_product[e3]]) * self.group3().zyz().with_w(self[e12]))
                - (geometric_product.group2().zxyx() * self.group0().yzx().with_w(self[e41]))
                - (self.group1().yzx() * geometric_product.group1().zxy()).with_w(self[e42] * geometric_product[e315])
                - (self.group1().www() * geometric_product.group3().xyz()).with_w(self[e43] * geometric_product[e125])
                - (self.group2().yzx() * geometric_product.group0().zxy()).with_w(self[e23] * geometric_product[e1]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e15] * geometric_product[e12345])
                    + (self[e15] * geometric_product[e321])
                    + (self[e35] * geometric_product[e425])
                    + (self[e35] * geometric_product[e2])
                    + (self[e4235] * geometric_product[e5])
                    + (self[e4125] * geometric_product[e315])
                    + (self[e3215] * geometric_product[e415])
                    + (self[e3215] * geometric_product[e1]),
                (self[e15] * geometric_product[e435])
                    + (self[e15] * geometric_product[e3])
                    + (self[e25] * geometric_product[e12345])
                    + (self[e25] * geometric_product[e321])
                    + (self[e4235] * geometric_product[e125])
                    + (self[e4315] * geometric_product[e5])
                    + (self[e3215] * geometric_product[e425])
                    + (self[e3215] * geometric_product[e2]),
                (self[e25] * geometric_product[e415])
                    + (self[e25] * geometric_product[e1])
                    + (self[e35] * geometric_product[e12345])
                    + (self[e35] * geometric_product[e321])
                    + (self[e4315] * geometric_product[e235])
                    + (self[e4125] * geometric_product[e5])
                    + (self[e3215] * geometric_product[e435])
                    + (self[e3215] * geometric_product[e3]),
                -(self[e15] * geometric_product[e1])
                    - (self[e25] * geometric_product[e425])
                    - (self[e25] * geometric_product[e2])
                    - (self[e35] * geometric_product[e435])
                    - (self[e35] * geometric_product[e3])
                    - (self[e4235] * geometric_product[e235])
                    - (self[e4315] * geometric_product[e315])
                    - (self[e4125] * geometric_product[e125]),
            ]) + (self.group1().xxyw() * geometric_product.group2().wzxw())
                + (self.group1().zyz() * geometric_product.group2().yww()).with_w(self[e3215] * geometric_product[e12345])
                + (self.group1().www() * geometric_product.group2().xyz()).with_w(self[e3215] * geometric_product[e321])
                - (self.group1().yzxx() * geometric_product.group2().zxyx())
                - (self.group2().yzx() * geometric_product.group1().zxy()).with_w(self[e31] * geometric_product[e315])
                - (self.group2().yzx() * geometric_product.group3().zxy()).with_w(self[e12] * geometric_product[e125])
                - (self.group3().yzx() * geometric_product.group2().zxy()).with_w(self[e15] * geometric_product[e415]),
            // e1, e2, e3, e4
            (Simd32x4::from([geometric_product[e321], geometric_product[e3], geometric_product[e1], geometric_product[e3]]) * self.group1().xxy().with_w(self[e43]))
                + (Simd32x4::from([geometric_product[e2], geometric_product[e321], geometric_product[e321], geometric_product[e12345]]) * self.group1().zyz().with_w(self[e1234]))
                + (self.group3().yzxz() * geometric_product.group1().zxy().with_w(geometric_product[e412]))
                + (geometric_product.group0().zxyx() * self.group2().yzx().with_w(self[e4235]))
                + (self.group0().xxy() * geometric_product.group2().wzx()).with_w(self[e41] * geometric_product[e1])
                + (self.group0().zyz() * geometric_product.group2().yww()).with_w(self[e42] * geometric_product[e2])
                + (self.group2().www() * geometric_product.group2().xyz()).with_w(self[e4315] * geometric_product[e431])
                - (Simd32x4::from([geometric_product[e431], geometric_product[e4], geometric_product[e4], geometric_product[e431]]) * self.group2().zyz().with_w(self[e31]))
                - (Simd32x4::from([geometric_product[e12345], geometric_product[e435], geometric_product[e415], geometric_product[e412]]) * self.group3().xxy().with_w(self[e12]))
                - (Simd32x4::from([geometric_product[e425], geometric_product[e12345], geometric_product[e12345], geometric_product[e4]]) * self.group3().zyz().with_w(self[e45]))
                - (Simd32x4::from([geometric_product[e4], geometric_product[e412], geometric_product[e423], geometric_product[e423]]) * self.group2().xxy().with_w(self[e23]))
                - (geometric_product.group1().xyzz() * self.group1().www().with_w(self[e43]))
                - (self.group0().yzx() * geometric_product.group2().zxy()).with_w(self[e41] * geometric_product[e415])
                - (self.group1().yzx() * geometric_product.group3().zxy()).with_w(self[e42] * geometric_product[e425])
                - (self.group3().www() * geometric_product.group0().xyz()).with_w(self[e1234] * geometric_product[e321]),
        );
    }
}
impl GeometricQuotient<VersorOdd> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       75      100        0
    //    simd3        0       12        0
    //    simd4       40       35        0
    // Totals...
    // yes simd      115      147        0
    //  no simd      235      276        0
    fn geometric_quotient(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let reverse = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + 2.0 * (other[e1234] * other[e3215])
                + f32::powi(other[scalar], 2)
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2),
        );
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e43] * geometric_product[e4315])
                    + (self[e23] * geometric_product[e1234])
                    + (self[e12] * geometric_product[e42])
                    + (self[e1234] * geometric_product[e23])
                    + (self[e1234] * geometric_product[e4235])
                    + (self[e4315] * geometric_product[e43]),
                (self[e42] * geometric_product[e45])
                    + (self[e23] * geometric_product[e43])
                    + (self[e31] * geometric_product[e1234])
                    + (self[e1234] * geometric_product[e31])
                    + (self[e1234] * geometric_product[e4315])
                    + (self[e4125] * geometric_product[e41]),
                (self[e43] * geometric_product[e45])
                    + (self[e31] * geometric_product[e41])
                    + (self[e12] * geometric_product[e1234])
                    + (self[e1234] * geometric_product[e12])
                    + (self[e1234] * geometric_product[e4125])
                    + (self[e4235] * geometric_product[e42]),
                -(self[e15] * geometric_product[e41])
                    - (self[e25] * geometric_product[e42])
                    - (self[e35] * geometric_product[e43])
                    - (self[e4235] * geometric_product[e4235])
                    - (self[e4315] * geometric_product[e4315])
                    - (self[e4125] * geometric_product[e4125]),
            ]) + (Simd32x4::from([geometric_product[scalar], geometric_product[e12], geometric_product[e23], geometric_product[e45]]) * self.group0().xxy().with_w(self[e45]))
                + (Simd32x4::from([geometric_product[e31], geometric_product[scalar], geometric_product[scalar], geometric_product[e1234]])
                    * self.group0().zyz().with_w(self[e3215]))
                + (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], geometric_product[e3215]])
                    * self.group0().xxy().with_w(self[e1234]))
                - (Simd32x4::from([geometric_product[e42], geometric_product[e1234], geometric_product[e1234], geometric_product[e12]]) * self.group3().zyz().with_w(self[e12]))
                - (Simd32x4::from([geometric_product[e1234], geometric_product[e43], geometric_product[e41], geometric_product[e31]]) * self.group3().xxy().with_w(self[e31]))
                - (self.group1().wwwx() * geometric_product.group0().xyz().with_w(geometric_product[e23]))
                - (self.group0().yzx() * geometric_product.group1().zxy()).with_w(self[e41] * geometric_product[e15])
                - (self.group0().yzx() * geometric_product.group3().zxy()).with_w(self[e42] * geometric_product[e25])
                - (self.group1().yzx() * geometric_product.group0().zxy()).with_w(self[e43] * geometric_product[e35]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e15] * geometric_product[e1234])
                    + (self[e35] * geometric_product[e42])
                    + (self[e1234] * geometric_product[e15])
                    + (self[e4235] * geometric_product[e45])
                    + (self[e4125] * geometric_product[e4315])
                    + (self[e3215] * geometric_product[e41]),
                (self[e15] * geometric_product[e43])
                    + (self[e25] * geometric_product[e1234])
                    + (self[e1234] * geometric_product[e25])
                    + (self[e4235] * geometric_product[e4125])
                    + (self[e4315] * geometric_product[e45])
                    + (self[e3215] * geometric_product[e42]),
                (self[e25] * geometric_product[e41])
                    + (self[e35] * geometric_product[e1234])
                    + (self[e1234] * geometric_product[e35])
                    + (self[e4315] * geometric_product[e4235])
                    + (self[e4125] * geometric_product[e45])
                    + (self[e3215] * geometric_product[e43]),
                -(self[e25] * geometric_product[e42])
                    - (self[e35] * geometric_product[e43])
                    - (self[e1234] * geometric_product[e3215])
                    - (self[e4235] * geometric_product[e23])
                    - (self[e4315] * geometric_product[e31])
                    - (self[e4125] * geometric_product[e12]),
            ]) + (Simd32x4::from([geometric_product[scalar], geometric_product[e12], geometric_product[e23], geometric_product[e35]]) * self.group1().xxy().with_w(self[e43]))
                + (Simd32x4::from([geometric_product[e31], geometric_product[scalar], geometric_product[scalar], geometric_product[scalar]]) * self.group1().zyzw())
                + (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], geometric_product[e25]]) * self.group0().zyz().with_w(self[e42]))
                + (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e15]]) * self.group0().xxy().with_w(self[e41]))
                + (self.group1().www() * geometric_product.group3().xyz()).with_w(self[e3215] * geometric_product[e1234])
                - (self.group1().yzxy() * geometric_product.group1().zxy().with_w(geometric_product[e4315]))
                - (self.group0().yzx() * geometric_product.group2().zxy()).with_w(self[e23] * geometric_product[e4235])
                - (self.group2().yzx() * geometric_product.group0().zxy()).with_w(self[e12] * geometric_product[e4125])
                - (self.group3().yzx() * geometric_product.group3().zxy()).with_w(self[e15] * geometric_product[e41]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e35] * geometric_product[e31]) + (self[e4235] * geometric_product[e3215]) + (self[e4125] * geometric_product[e25]) + (self[e3215] * geometric_product[e23]),
                (self[e35] * geometric_product[e4235]) + (self[e4235] * geometric_product[e35]) + (self[e4315] * geometric_product[e3215]) + (self[e3215] * geometric_product[e31]),
                (self[e35] * geometric_product[scalar])
                    + (self[e4315] * geometric_product[e15])
                    + (self[e4125] * geometric_product[e3215])
                    + (self[e3215] * geometric_product[e12]),
                -(self[e23] * geometric_product[e41]) - (self[e31] * geometric_product[e42]) - (self[e12] * geometric_product[e43]) - (self[e45] * geometric_product[e1234]),
            ]) + (Simd32x4::from([geometric_product[scalar], geometric_product[e12], geometric_product[e4315], geometric_product[e42]]) * self.group2().xxx().with_w(self[e4315]))
                + (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], geometric_product[e45]]) * self.group1().zyz().with_w(self[e1234]))
                + (Simd32x4::from([geometric_product[e4125], geometric_product[scalar], geometric_product[e23], geometric_product[e43]]) * self.group2().yyy().with_w(self[e4125]))
                + (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[scalar]]) * self.group1().xxy().with_w(self[e1234]))
                + (self.group1().www() * geometric_product.group2().xyz()).with_w(self[e4235] * geometric_product[e41])
                - (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e31], geometric_product[e4235]]) * self.group2().xxx().with_w(self[e41]))
                - (Simd32x4::from([geometric_product[e4315], geometric_product[e23], geometric_product[e45], geometric_product[e4315]]) * self.group2().zzz().with_w(self[e42]))
                - (geometric_product.group3().xyzz() * self.group3().www().with_w(self[e43]))
                - (geometric_product.group1().zw().with_zw(geometric_product[e4235], geometric_product[e31]) * self.group2().yyy().with_w(self[e42]))
                - (self.group1().yzx() * geometric_product.group2().zxy()).with_w(self[e41] * geometric_product[e23])
                - (self.group3().yzx() * geometric_product.group2().zxy()).with_w(self[e43] * geometric_product[e12]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e35] * geometric_product[e42]) + (self[e4235] * geometric_product[scalar]) + (self[e4125] * geometric_product[e31]) + (self[e3215] * geometric_product[e41]),
                (self[e25] * geometric_product[e1234])
                    + (self[e4235] * geometric_product[e12])
                    + (self[e4315] * geometric_product[scalar])
                    + (self[e3215] * geometric_product[e42]),
                (self[e35] * geometric_product[e1234])
                    + (self[e4315] * geometric_product[e23])
                    + (self[e4125] * geometric_product[scalar])
                    + (self[e3215] * geometric_product[e43]),
                -(self[e4235] * geometric_product[e15]) - (self[e4315] * geometric_product[e25]) - (self[e4125] * geometric_product[e35]) - (self[e3215] * geometric_product[e45]),
            ]) + (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], geometric_product[e4235]]) * self.group1().xxy().with_w(self[e15]))
                + (Simd32x4::from([geometric_product[e1234], geometric_product[e43], geometric_product[e41], geometric_product[scalar]]) * self.group2().xxy().with_w(self[e3215]))
                + (Simd32x4::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45], geometric_product[e4315]]) * self.group1().zyz().with_w(self[e25]))
                + (self.group0().yzx() * geometric_product.group2().zxy()).with_w(self[e45] * geometric_product[e3215])
                + (self.group1().www() * geometric_product.group1().xyz()).with_w(self[e35] * geometric_product[e4125])
                - (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], geometric_product[e25]]) * self.group0().zyz().with_w(self[e31]))
                - (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e15]]) * self.group0().xxy().with_w(self[e23]))
                - (self.group1().yzxz() * geometric_product.group3().zxy().with_w(geometric_product[e35]))
                - (self.group2().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e23]))
                - (self.group2().wwwy() * geometric_product.group2().xyz().with_w(geometric_product[e31]))
                - (geometric_product.group1().zxyz() * self.group3().yzx().with_w(self[e35])),
        );
    }
}
impl std::ops::Div<GeometricQuotientInfix> for DualNum {
    type Output = GeometricQuotientInfixPartial<DualNum>;
    fn div(self, _rhs: GeometricQuotientInfix) -> Self::Output {
        GeometricQuotientInfixPartial(self)
    }
}
impl GeometricQuotient<AntiCircleRotor> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       13        0
    //    simd3        1        4        0
    //    simd4        1        9        0
    // Totals...
    // yes simd        9       26        0
    //  no simd       14       61        0
    fn geometric_quotient(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiCircleRotor::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, scalar
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                + f32::powi(other[scalar], 2)
                - f32::powi(other[e45], 2),
        );
        let geometric_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(self[e12345]) * geometric_product.group0().with_w(geometric_product[scalar]),
            // e415, e425, e435, e321
            ((Simd32x3::from(self[e5]) * geometric_product.group0()) + (Simd32x3::from(self[e12345]) * geometric_product.group1().xyz()))
                .with_w(geometric_product[e45] * self[e12345] * -1.0),
            // e235, e315, e125, e5
            Simd32x4::from([
                geometric_product[e15] * self[e12345],
                geometric_product[e25] * self[e12345],
                geometric_product[e35] * self[e12345],
                geometric_product[e45] * self[e5] * -1.0,
            ]) + (Simd32x4::from(self[e5]) * geometric_product.group1().xyz().with_w(geometric_product[scalar])),
            // e1, e2, e3, e4
            self.group0().xx().with_zw(self[e5], 0.0) * Simd32x3::from(1.0).with_w(0.0) * geometric_product.group0().with_w(0.0) * Simd32x4::from([-1.0, -1.0, -1.0, 0.0]),
        );
    }
}
impl GeometricQuotient<AntiDipoleInversion> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       22        0
    //    simd3        2        5        0
    //    simd4        2        9        0
    // Totals...
    // yes simd       14       36        0
    //  no simd       24       73        0
    fn geometric_quotient(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e4
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125])
                - 2.0 * (other[e4] * other[e5]),
        );
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e4
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e1, e2, e3, e5
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            self.group0().yy().with_zw(self[e12345], self[e5]) * geometric_product.group0().with_w(geometric_product[e4]) * Simd32x4::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                geometric_product[e415] * self[e12345] * -1.0,
                geometric_product[e425] * self[e12345] * -1.0,
                geometric_product[e435] * self[e12345] * -1.0,
                geometric_product[e321] * self[e12345],
            ]) - (Simd32x4::from(self[e5]) * geometric_product.group0().with_w(geometric_product[e4])),
            // e15, e25, e35, e1234
            (-(Simd32x3::from(self[e5]) * geometric_product.group1().xyz())
                - (Simd32x3::from(self[e5]) * geometric_product.group3().xyz())
                - (Simd32x3::from(self[e12345]) * geometric_product.group2().xyz()))
            .with_w(geometric_product[e4] * self[e12345] * -1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                geometric_product[e1] * self[e12345],
                geometric_product[e2] * self[e12345],
                geometric_product[e3] * self[e12345],
                geometric_product[e5] * self[e12345] * -1.0,
            ]) - (Simd32x4::from(self[e5]) * geometric_product.group0().with_w(geometric_product[e321])),
        );
    }
}
impl GeometricQuotient<AntiDualNum> for DualNum {
    type Output = DualNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        3        0
    //    simd2        0        1        0
    // Totals...
    // yes simd        1        4        0
    //  no simd        1        5        0
    fn geometric_quotient(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDualNum::from_groups(/* e3215, scalar */ Simd32x2::from(f32::powi(other[scalar], -2)) * other.group0());
        return DualNum::from_groups(/* e5, e12345 */ Simd32x2::from([
            (geometric_product[e3215] * self[e12345]) + (geometric_product[scalar] * self[e5]),
            geometric_product[scalar] * self[e12345],
        ]));
    }
}
impl GeometricQuotient<AntiFlatPoint> for DualNum {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        6        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        0        9        0
    //  no simd        0       18        0
    fn geometric_quotient(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlatPoint::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(f32::powi(other[e321], -2)) * Simd32x4::from([other[e235] * -1.0, other[e315] * -1.0, other[e125] * -1.0, other[e321] * -1.0]),
        );
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(self[e12345]) * geometric_product.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            Simd32x3::from(0.0).with_w(geometric_product[e321] * self[e5] * -1.0),
        );
    }
}
impl GeometricQuotient<AntiFlector> for DualNum {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        3        0
    //    simd3        1        2        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        5        9        0
    //  no simd        7       25        0
    fn geometric_quotient(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiFlector::from_groups(/* e235, e315, e125, e321 */ other.group0() * Simd32x4::from(-1.0), /* e1, e2, e3, e5 */ other.group1());
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2),
        );
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e1, e2, e3, e5
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return Flector::from_groups(
            // e15, e25, e35, e45
            (-(Simd32x3::from(self[e5]) * geometric_product.group1().xyz()) - (Simd32x3::from(self[e12345]) * geometric_product.group0().xyz()))
                .with_w(geometric_product[e321] * self[e12345]),
            // e4235, e4315, e4125, e3215
            self.group0().yy().with_zw(self[e12345], -(geometric_product[e321] * self[e5]) - (geometric_product[e5] * self[e12345])) * geometric_product.group1().xyz().with_w(1.0),
        );
    }
}
impl GeometricQuotient<AntiLine> for DualNum {
    type Output = Line;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        0        0
    //    simd3        1        7        0
    // Totals...
    // yes simd        3        7        0
    //  no simd        5       21        0
    fn geometric_quotient(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiLine::from_groups(
            // e23, e31, e12
            other.group0() * Simd32x3::from(-1.0),
            // e15, e25, e35
            other.group1() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(/* scalar */ f32::powi(other[e23], 2) + f32::powi(other[e31], 2) + f32::powi(other[e12], 2));
        let geometric_product = AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e15, e25, e35
            Simd32x3::from(other_2[scalar]) * reverse.group1(),
        );
        return Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(self[e12345]) * geometric_product.group0(),
            // e235, e315, e125
            (Simd32x3::from(self[e5]) * geometric_product.group0()) + (Simd32x3::from(self[e12345]) * geometric_product.group1()),
        );
    }
}
impl GeometricQuotient<AntiMotor> for DualNum {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        0        0
    //    simd4        1        7        0
    // Totals...
    // yes simd        4        7        0
    //  no simd        7       28        0
    fn geometric_quotient(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, e3215
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e23], 2) + f32::powi(other[e31], 2) + f32::powi(other[e12], 2) + f32::powi(other[scalar], 2),
        );
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e15, e25, e35, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(self[e12345]) * geometric_product.group0(),
            // e235, e315, e125, e5
            (Simd32x4::from(self[e5]) * geometric_product.group0()) + (Simd32x4::from(self[e12345]) * geometric_product.group1()),
        );
    }
}
impl GeometricQuotient<AntiPlane> for DualNum {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        0        0
    //    simd4        0        6        0
    // Totals...
    // yes simd        2        6        0
    //  no simd        2       24        0
    fn geometric_quotient(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiPlane::from_groups(
            // e1, e2, e3, e5
            Simd32x4::from(f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)) * other.group0(),
        );
        return Flector::from_groups(
            // e15, e25, e35, e45
            self.group0().xx().with_zw(self[e5], 0.0) * Simd32x3::from(1.0).with_w(0.0) * geometric_product.group0().xyz().with_w(0.0) * Simd32x4::from([-1.0, -1.0, -1.0, 0.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * geometric_product.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
    }
}
impl GeometricQuotient<AntiScalar> for DualNum {
    type Output = AntiDualNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        1
    //    simd2        0        2        0
    // Totals...
    // yes simd        0        3        1
    //  no simd        0        5        1
    fn geometric_quotient(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiDualNum::from_groups(/* e3215, scalar */ Simd32x2::from(1.0 / other[e12345] * -1.0) * self.group0() * Simd32x2::from(-1.0));
    }
}
impl GeometricQuotient<Circle> for DualNum {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6        7        0
    //    simd3        2       10        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        8       21        0
    //  no simd       12       53        0
    fn geometric_quotient(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let reverse = Circle::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125
            other.group2() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group2(),
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[e12345]) * geometric_product.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            (-(Simd32x3::from(self[e5]) * geometric_product.group0()) - (Simd32x3::from(self[e12345]) * geometric_product.group1().xyz()))
                .with_w(geometric_product[e321] * self[e12345]),
            // e15, e25, e35, e1234
            (-(Simd32x3::from(self[e5]) * geometric_product.group1().xyz()) - (Simd32x3::from(self[e12345]) * geometric_product.group2())).with_w(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e5]) * geometric_product.group0().with_w(geometric_product[e321]) * Simd32x4::from(-1.0),
        );
    }
}
impl GeometricQuotient<CircleRotor> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8        9        0
    //    simd3        2        6        0
    //    simd4        0        8        0
    // Totals...
    // yes simd       10       23        0
    //  no simd       14       59        0
    fn geometric_quotient(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let reverse = CircleRotor::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e12345
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - f32::powi(other[e12345], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(self[e12345]) * geometric_product.group0().with_w(geometric_product[e12345]) * Simd32x4::from(-1.0),
            // e23, e31, e12, e45
            (-(Simd32x3::from(self[e5]) * geometric_product.group0()) - (Simd32x3::from(self[e12345]) * geometric_product.group1().xyz()))
                .with_w(geometric_product[e321] * self[e12345]),
            // e15, e25, e35, e1234
            (-(Simd32x3::from(self[e5]) * geometric_product.group1().xyz()) - (Simd32x3::from(self[e12345]) * geometric_product.group2().xyz())).with_w(0.0),
            // e4235, e4315, e4125, e3215
            self.group0().xx().with_zw(self[e5], -(geometric_product[e321] * self[e5]) - (geometric_product[e12345] * self[e5]))
                * geometric_product.group0().with_w(1.0)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricQuotient<Dipole> for DualNum {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6        8        0
    //    simd3        2        9        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        8       21        0
    //  no simd       12       51        0
    fn geometric_quotient(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let reverse = Dipole::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35
            other.group2() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2),
        );
        let geometric_product = Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35
            Simd32x3::from(other_2[scalar]) * reverse.group2(),
        );
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[e12345]) * geometric_product.group0(),
            // e415, e425, e435, e321
            ((Simd32x3::from(self[e5]) * geometric_product.group0()) + (Simd32x3::from(self[e12345]) * geometric_product.group1().xyz()))
                .with_w(geometric_product[e45] * self[e12345] * -1.0),
            // e235, e315, e125, e4
            ((Simd32x3::from(self[e5]) * geometric_product.group1().xyz()) + (Simd32x3::from(self[e12345]) * geometric_product.group2())).with_w(0.0),
            // e1, e2, e3, e5
            Simd32x4::from(self[e5]) * geometric_product.group0().with_w(geometric_product[e45]) * Simd32x4::from(-1.0),
        );
    }
}
impl GeometricQuotient<DipoleInversion> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       20        0
    //    simd3        1        4        0
    //    simd4        2        8        0
    // Totals...
    // yes simd       17       32        0
    //  no simd       25       64        0
    fn geometric_quotient(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let reverse = DipoleInversion::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + 2.0 * (other[e1234] * other[e3215])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2),
        );
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            self.group0().yy().with_zw(self[e12345], self[e5]) * geometric_product.group0().with_w(geometric_product[e1234]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (geometric_product[e41] * self[e5]) + (geometric_product[e23] * self[e12345]),
                (geometric_product[e42] * self[e5]) + (geometric_product[e31] * self[e12345]),
                (geometric_product[e43] * self[e5]) + (geometric_product[e12] * self[e12345]),
                -(geometric_product[e45] * self[e12345]) - (geometric_product[e1234] * self[e5]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([geometric_product[e15] * self[e12345], geometric_product[e25] * self[e12345], geometric_product[e35] * self[e12345], 0.0])
                + (self.group0().xx().with_zw(self[e5], self[e12345]) * geometric_product.group1().xyz().with_w(geometric_product[e3215]))
                - (Simd32x4::from(self[e5]) * geometric_product.group3().xyz().with_w(geometric_product[e45])),
            // e1, e2, e3, e4
            (-(Simd32x3::from(self[e5]) * geometric_product.group0()) - (Simd32x3::from(self[e12345]) * geometric_product.group3().xyz()))
                .with_w(geometric_product[e1234] * self[e12345]),
        );
    }
}
impl GeometricQuotient<DualNum> for DualNum {
    type Output = AntiDualNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        4        0
    //    simd2        0        2        0
    // Totals...
    // yes simd        1        6        0
    //  no simd        1        8        0
    fn geometric_quotient(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DualNum::from_groups(/* e5, e12345 */ Simd32x2::from(f32::powi(other[e12345], -2) * -1.0) * other.group0());
        return AntiDualNum::from_groups(
            // e3215, scalar
            Simd32x2::from([
                -(geometric_product[e5] * self[e12345]) - (geometric_product[e12345] * self[e5]),
                geometric_product[e12345] * self[e12345],
            ]) * Simd32x2::from([1.0, -1.0]),
        );
    }
}
impl GeometricQuotient<FlatPoint> for DualNum {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        7        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        0       10        0
    //  no simd        0       19        0
    fn geometric_quotient(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = FlatPoint::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(f32::powi(other[e45], -2) * -1.0) * Simd32x4::from([other[e15] * -1.0, other[e25] * -1.0, other[e35] * -1.0, other[e45] * -1.0]),
        );
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(self[e12345]) * geometric_product.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1, e2, e3, e5
            Simd32x3::from(0.0).with_w(self[e5] * geometric_product[e45] * -1.0),
        );
    }
}
impl GeometricQuotient<Flector> for DualNum {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        4        0
    //    simd3        1        2        0
    //    simd4        0        5        0
    // Totals...
    // yes simd        5       11        0
    //  no simd        7       30        0
    fn geometric_quotient(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let reverse = Flector::from_groups(
            // e15, e25, e35, e45
            other.group0() * Simd32x4::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group1(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            -f32::powi(other[e45], 2) - f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2),
        );
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            ((Simd32x3::from(self[e12345]) * geometric_product.group0().xyz()) - (Simd32x3::from(self[e5]) * geometric_product.group1().xyz()))
                .with_w(self[e12345] * geometric_product[e45] * -1.0),
            // e1, e2, e3, e5
            self.group0()
                .yy()
                .with_zw(self[e12345], (self[e12345] * geometric_product[e3215]) - (self[e5] * geometric_product[e45]))
                * geometric_product.group1().xyz().with_w(1.0)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricQuotient<Line> for DualNum {
    type Output = AntiLine;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        0        0
    //    simd3        1        8        0
    // Totals...
    // yes simd        3        8        0
    //  no simd        5       24        0
    fn geometric_quotient(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let reverse = Line::from_groups(
            // e415, e425, e435
            other.group0() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group1() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(/* scalar */ -f32::powi(other[e415], 2) - f32::powi(other[e425], 2) - f32::powi(other[e435], 2));
        let geometric_product = Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group1(),
        );
        return AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(self[e12345]) * geometric_product.group0() * Simd32x3::from(-1.0),
            // e15, e25, e35
            -(Simd32x3::from(self[e5]) * geometric_product.group0()) - (Simd32x3::from(self[e12345]) * geometric_product.group1()),
        );
    }
}
impl GeometricQuotient<Motor> for DualNum {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        0        0
    //    simd4        1        8        0
    // Totals...
    // yes simd        4        8        0
    //  no simd        7       32        0
    fn geometric_quotient(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let reverse = Motor::from_groups(
            // e415, e425, e435, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            -f32::powi(other[e415], 2) - f32::powi(other[e425], 2) - f32::powi(other[e435], 2) - f32::powi(other[e12345], 2),
        );
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e235, e315, e125, e5
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(self[e12345]) * geometric_product.group0() * Simd32x4::from(-1.0),
            // e15, e25, e35, e3215
            -(Simd32x4::from(self[e5]) * geometric_product.group0()) - (Simd32x4::from(self[e12345]) * geometric_product.group1()),
        );
    }
}
impl GeometricQuotient<MultiVector> for DualNum {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       35       48        0
    //    simd2        0        1        0
    //    simd3        4       18        0
    //    simd4        2        8        0
    // Totals...
    // yes simd       41       75        0
    //  no simd       55      136        0
    fn geometric_quotient(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let reverse = MultiVector::from_groups(
            // scalar, e12345
            other.group0(),
            // e1, e2, e3, e4
            other.group1(),
            // e5
            other[e5],
            // e15, e25, e35, e45
            other.group3() * Simd32x4::from(-1.0),
            // e41, e42, e43
            other.group4() * Simd32x3::from(-1.0),
            // e23, e31, e12
            other.group5() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group6() * Simd32x4::from(-1.0),
            // e423, e431, e412
            other.group7() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group8() * Simd32x3::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group9(),
            // e1234
            other[e1234],
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e15] * other[e41])
                + 2.0 * (other[e25] * other[e42])
                + 2.0 * (other[e35] * other[e43])
                + 2.0 * (other[e3215] * other[e1234])
                + f32::powi(other[scalar], 2)
                + f32::powi(other[e1], 2)
                + f32::powi(other[e2], 2)
                + f32::powi(other[e3], 2)
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                + f32::powi(other[e321], 2)
                - f32::powi(other[e12345], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2)
                - 2.0 * (other[e4] * other[e5])
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(other_2[scalar]) * reverse.group0(),
            // e1, e2, e3, e4
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e5
            reverse[e5] * other_2[scalar],
            // e15, e25, e35, e45
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group4(),
            // e23, e31, e12
            Simd32x3::from(other_2[scalar]) * reverse.group5(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group6(),
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group7(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group8(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group9(),
            // e1234
            reverse[e1234] * other_2[scalar],
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                -(self[e5] * geometric_product[e4]) - (self[e12345] * geometric_product[e12345]),
                (self[e5] * geometric_product[e1234]) + (self[e12345] * geometric_product[scalar]),
            ]),
            // e1, e2, e3, e4
            (-(Simd32x3::from(self[e5]) * geometric_product.group4()) - (Simd32x3::from(self[e12345]) * geometric_product.group9().xyz()))
                .with_w(self[e12345] * geometric_product[e1234]),
            // e5
            (self[e5] * geometric_product[scalar]) + (self[e12345] * geometric_product[e3215]) - (self[e5] * geometric_product[e45]),
            // e15, e25, e35, e45
            Simd32x4::from([
                -(self[e5] * geometric_product[e415]) - (self[e12345] * geometric_product[e235]),
                -(self[e5] * geometric_product[e425]) - (self[e12345] * geometric_product[e315]),
                -(self[e5] * geometric_product[e435]) - (self[e12345] * geometric_product[e125]),
                self[e12345] * geometric_product[e321],
            ]) - (Simd32x4::from(self[e5]) * geometric_product.group1()),
            // e41, e42, e43
            Simd32x3::from(self[e12345]) * geometric_product.group7() * Simd32x3::from(-1.0),
            // e23, e31, e12
            -(Simd32x3::from(self[e5]) * geometric_product.group7()) - (Simd32x3::from(self[e12345]) * geometric_product.group6().xyz()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e5] * geometric_product[e41]) + (self[e12345] * geometric_product[e23]),
                (self[e5] * geometric_product[e42]) + (self[e12345] * geometric_product[e31]),
                (self[e5] * geometric_product[e43]) + (self[e12345] * geometric_product[e12]),
                -(self[e5] * geometric_product[e1234]) - (self[e12345] * geometric_product[e45]),
            ]),
            // e423, e431, e412
            Simd32x3::from(self[e12345]) * geometric_product.group4(),
            // e235, e315, e125
            (Simd32x3::from(self[e5]) * geometric_product.group5()) + (Simd32x3::from(self[e12345]) * geometric_product.group3().xyz())
                - (Simd32x3::from(self[e5]) * geometric_product.group9().xyz()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e12345] * geometric_product[e1],
                self[e12345] * geometric_product[e2],
                self[e12345] * geometric_product[e3],
                -(self[e5] * geometric_product[e321]) - (self[e12345] * geometric_product[e5]),
            ]) - (Simd32x4::from(self[e5]) * geometric_product.group7().with_w(geometric_product[e12345])),
            // e1234
            self[e12345] * geometric_product[e4] * -1.0,
        );
    }
}
impl GeometricQuotient<Plane> for DualNum {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        0        0
    //    simd4        0        6        0
    // Totals...
    // yes simd        2        6        0
    //  no simd        2       24        0
    fn geometric_quotient(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Plane::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(-f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2)) * other.group0(),
        );
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            self.group0().xx().with_zw(self[e5], 0.0) * Simd32x3::from(1.0).with_w(0.0) * geometric_product.group0().xyz().with_w(0.0) * Simd32x4::from([-1.0, -1.0, -1.0, 0.0]),
            // e1, e2, e3, e5
            Simd32x4::from(self[e12345]) * geometric_product.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricQuotient<RoundPoint> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        7        0
    //    simd4        0        5        0
    // Totals...
    // yes simd        3       12        0
    //  no simd        3       27        0
    fn geometric_quotient(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2) - 2.0 * (other[e4] * other[e5]),
        );
        let geometric_product = RoundPoint::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from(other_2[scalar]) * other.group0(), /* e5 */ other[e5] * other_2[scalar]);
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x3::from(0.0).with_w(self[e5] * geometric_product[e4] * -1.0),
            // e23, e31, e12, e45
            Simd32x3::from(0.0).with_w(self[e5] * geometric_product[e4] * -1.0),
            // e15, e25, e35, e1234
            geometric_product.group0() * self.group0().xx().with_zw(self[e5], self[e12345]) * Simd32x4::from(-1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * geometric_product.group0().xyz().with_w(geometric_product[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
    }
}
impl GeometricQuotient<Scalar> for DualNum {
    type Output = DualNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        0        1
    //    simd2        0        1        0
    // Totals...
    // yes simd        0        1        1
    //  no simd        0        2        1
    fn geometric_quotient(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return DualNum::from_groups(/* e5, e12345 */ Simd32x2::from(1.0 / other[scalar]) * self.group0());
    }
}
impl GeometricQuotient<Sphere> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        6        0
    //    simd4        0        5        0
    // Totals...
    // yes simd        3       11        0
    //  no simd        3       26        0
    fn geometric_quotient(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e3215] * other[e1234]) - f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2),
        );
        let geometric_product = Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * other.group0(),
            // e1234
            other_2[scalar] * other[e1234],
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x3::from(0.0).with_w(self[e5] * geometric_product[e1234]),
            // e415, e425, e435, e321
            Simd32x3::from(0.0).with_w(self[e5] * geometric_product[e1234] * -1.0),
            // e235, e315, e125, e5
            geometric_product.group0() * self.group0().xx().with_zw(self[e5], self[e12345]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e4
            Simd32x4::from(self[e12345]) * geometric_product.group0().xyz().with_w(geometric_product[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricQuotient<VersorEven> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       24        0
    //    simd3        2        3        0
    //    simd4        2       11        0
    // Totals...
    // yes simd       17       38        0
    //  no simd       27       77        0
    fn geometric_quotient(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let reverse = VersorEven::from_groups(
            // e423, e431, e412, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e5
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e4
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)
                - f32::powi(other[e12345], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125])
                - 2.0 * (other[e5] * other[e4]),
        );
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e5
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e1, e2, e3, e4
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            self.group0()
                .yy()
                .with_zw(self[e12345], -(self[e5] * geometric_product[e4]) - (self[e12345] * geometric_product[e12345]))
                * geometric_product.group0().xyz().with_w(1.0)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            Simd32x4::from([
                self[e12345] * geometric_product[e415] * -1.0,
                self[e12345] * geometric_product[e425] * -1.0,
                self[e12345] * geometric_product[e435] * -1.0,
                self[e12345] * geometric_product[e321],
            ]) - (Simd32x4::from(self[e5]) * geometric_product.group0().xyz().with_w(geometric_product[e4])),
            // e15, e25, e35, e1234
            (-(Simd32x3::from(self[e5]) * geometric_product.group1().xyz())
                - (Simd32x3::from(self[e5]) * geometric_product.group3().xyz())
                - (Simd32x3::from(self[e12345]) * geometric_product.group2().xyz()))
            .with_w(self[e12345] * geometric_product[e4] * -1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e12345] * geometric_product[e1],
                self[e12345] * geometric_product[e2],
                self[e12345] * geometric_product[e3],
                -(self[e5] * geometric_product[e321]) - (self[e12345] * geometric_product[e5]),
            ]) - (Simd32x4::from(self[e5]) * geometric_product.group0()),
        );
    }
}
impl GeometricQuotient<VersorOdd> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       19        0
    //    simd3        1        2        0
    //    simd4        2       11        0
    // Totals...
    // yes simd       19       32        0
    //  no simd       27       69        0
    fn geometric_quotient(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let reverse = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + 2.0 * (other[e1234] * other[e3215])
                + f32::powi(other[scalar], 2)
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2),
        );
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            self.group0()
                .yy()
                .with_zw(self[e12345], (self[e5] * geometric_product[e1234]) + (self[e12345] * geometric_product[scalar]))
                * geometric_product.group0().xyz().with_w(1.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e5] * geometric_product[e41]) + (self[e12345] * geometric_product[e23]),
                (self[e5] * geometric_product[e42]) + (self[e12345] * geometric_product[e31]),
                (self[e5] * geometric_product[e43]) + (self[e12345] * geometric_product[e12]),
                -(self[e5] * geometric_product[e1234]) - (self[e12345] * geometric_product[e45]),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from(self[e5]) * geometric_product.group1().xyz().with_w(geometric_product[scalar]))
                + (Simd32x4::from(self[e12345]) * geometric_product.group2().xyz().with_w(geometric_product[e3215]))
                - (Simd32x4::from(self[e5]) * geometric_product.group3().xyz().with_w(geometric_product[e45])),
            // e1, e2, e3, e4
            (-(Simd32x3::from(self[e5]) * geometric_product.group0().xyz()) - (Simd32x3::from(self[e12345]) * geometric_product.group3().xyz()))
                .with_w(self[e12345] * geometric_product[e1234]),
        );
    }
}
impl std::ops::Div<GeometricQuotientInfix> for FlatPoint {
    type Output = GeometricQuotientInfixPartial<FlatPoint>;
    fn div(self, _rhs: GeometricQuotientInfix) -> Self::Output {
        GeometricQuotientInfixPartial(self)
    }
}
impl GeometricQuotient<AntiCircleRotor> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       20        0
    //    simd3        0        9        0
    //    simd4        7        7        0
    // Totals...
    // yes simd       22       36        0
    //  no simd       43       75        0
    fn geometric_quotient(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiCircleRotor::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, scalar
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                + f32::powi(other[scalar], 2)
                - f32::powi(other[e45], 2),
        );
        let geometric_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x3::from(self[e45]) * geometric_product.group0() * Simd32x3::from(-1.0))
                .with_w((geometric_product[e45] * self[e45]) - (geometric_product[e41] * self[e15]) - (geometric_product[e42] * self[e25]) - (geometric_product[e43] * self[e35])),
            // e23, e31, e12, e45
            (self.group0().zxyw() * geometric_product.group0().yzx().with_w(geometric_product[scalar]))
                + Simd32x3::from(0.0).with_w(-(geometric_product[e42] * self[e25]) - (geometric_product[e43] * self[e35]))
                - (self.group0().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e41])),
            // e15, e25, e35, e1234
            (Simd32x3::from(geometric_product[scalar]) * self.group0().xyz()).with_w(0.0)
                + (Simd32x3::from(self[e45]) * geometric_product.group2().xyz()).with_w(0.0)
                + (geometric_product.group1().yzx() * self.group0().zxy()).with_w(0.0)
                - (Simd32x3::from(geometric_product[e45]) * self.group0().xyz()).with_w(0.0)
                - (geometric_product.group1().zxy() * self.group0().yzx()).with_w(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (geometric_product[e42] * self[e35]) + (geometric_product[e23] * self[e45]),
                (geometric_product[e43] * self[e15]) + (geometric_product[e31] * self[e45]),
                (geometric_product[e41] * self[e25]) + (geometric_product[e12] * self[e45]),
                -(geometric_product[e31] * self[e25]) - (geometric_product[e12] * self[e35]),
            ]) - (self.group0().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e23])),
        );
    }
}
impl GeometricQuotient<AntiDipoleInversion> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       25       34        0
    //    simd3        3        8        0
    //    simd4        5       10        0
    // Totals...
    // yes simd       33       52        0
    //  no simd       54       98        0
    fn geometric_quotient(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e4
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125])
                - 2.0 * (other[e4] * other[e5]),
        );
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e4
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e1, e2, e3, e5
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x3::from(self[e45]) * geometric_product.group0() * Simd32x3::from(-1.0)).with_w(
                -(geometric_product[e423] * self[e15]) - (geometric_product[e431] * self[e25]) - (geometric_product[e412] * self[e35]) - (geometric_product[e321] * self[e45]),
            ),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(geometric_product[e412] * self[e25]) - (geometric_product[e1] * self[e45]),
                -(geometric_product[e423] * self[e35]) - (geometric_product[e2] * self[e45]),
                -(geometric_product[e431] * self[e15]) - (geometric_product[e3] * self[e45]),
                geometric_product[e412] * self[e35],
            ]) + (self.group0().xyzy() * geometric_product.group2().www().with_w(geometric_product[e431]))
                + (self.group0().zxyx() * geometric_product.group0().yzx().with_w(geometric_product[e423])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (geometric_product[e321] * self[e15]) + (geometric_product[e235] * self[e45]) + (geometric_product[e2] * self[e35]),
                (geometric_product[e321] * self[e25]) + (geometric_product[e315] * self[e45]) + (geometric_product[e3] * self[e15]),
                (geometric_product[e321] * self[e35]) + (geometric_product[e125] * self[e45]) + (geometric_product[e1] * self[e25]),
                -(geometric_product[e435] * self[e35]) - (geometric_product[e1] * self[e15]) - (geometric_product[e2] * self[e25]) - (geometric_product[e3] * self[e35]),
            ]) + (self.group0().zxyw() * geometric_product.group1().yzx().with_w(geometric_product[e5]))
                - (geometric_product.group1().zxyx() * self.group0().yzxx())
                - (self.group0().yzxy() * geometric_product.group3().zxy().with_w(geometric_product[e425])),
            // e1, e2, e3, e4
            ((geometric_product.group0().zxy() * self.group0().yzx())
                - (Simd32x3::from(geometric_product[e4]) * self.group0().xyz())
                - (Simd32x3::from(self[e45]) * geometric_product.group1().xyz())
                - (geometric_product.group0().yzx() * self.group0().zxy()))
            .with_w(geometric_product[e4] * self[e45] * -1.0),
        );
    }
}
impl GeometricQuotient<AntiDualNum> for FlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd2        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0        7        0
    fn geometric_quotient(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDualNum::from_groups(/* e3215, scalar */ Simd32x2::from(f32::powi(other[scalar], -2)) * other.group0());
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(geometric_product[scalar]) * self.group0(),
            // e4235, e4315, e4125, e3215
            Simd32x3::from(0.0).with_w(geometric_product[e3215] * self[e45]),
        );
    }
}
impl GeometricQuotient<AntiFlatPoint> for FlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        6        0
    //    simd3        1        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        1        9        0
    //  no simd        3       16        0
    fn geometric_quotient(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlatPoint::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(f32::powi(other[e321], -2)) * Simd32x4::from([other[e235] * -1.0, other[e315] * -1.0, other[e125] * -1.0, other[e321] * -1.0]),
        );
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x3::from(0.0).with_w(geometric_product[e321] * self[e45] * -1.0),
            // e235, e315, e125, e5
            ((Simd32x3::from(geometric_product[e321]) * self.group0().xyz()) + (Simd32x3::from(self[e45]) * geometric_product.group0().xyz())).with_w(0.0),
        );
    }
}
impl GeometricQuotient<AntiFlector> for FlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7        8        0
    //    simd4        2        7        0
    // Totals...
    // yes simd        9       15        0
    //  no simd       15       36        0
    fn geometric_quotient(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiFlector::from_groups(/* e235, e315, e125, e321 */ other.group0() * Simd32x4::from(-1.0), /* e1, e2, e3, e5 */ other.group1());
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2),
        );
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e1, e2, e3, e5
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(self[e45]) * geometric_product.group1().xyz().with_w(geometric_product[e321]) * Simd32x4::from(-1.0),
            // e235, e315, e125, e5
            Simd32x4::from([
                (geometric_product[e321] * self[e15]) + (geometric_product[e2] * self[e35]),
                (geometric_product[e321] * self[e25]) + (geometric_product[e3] * self[e15]),
                (geometric_product[e321] * self[e35]) + (geometric_product[e1] * self[e25]),
                -(geometric_product[e2] * self[e25]) - (geometric_product[e3] * self[e35]),
            ]) + (Simd32x4::from(self[e45]) * geometric_product.group0().xyz().with_w(geometric_product[e5]))
                - (geometric_product.group1().zxyx() * self.group0().yzxx()),
        );
    }
}
impl GeometricQuotient<AntiLine> for FlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        3        0
    //    simd3        0        8        0
    //    simd4        2        0        0
    // Totals...
    // yes simd        6       11        0
    //  no simd       12       27        0
    fn geometric_quotient(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiLine::from_groups(
            // e23, e31, e12
            other.group0() * Simd32x3::from(-1.0),
            // e15, e25, e35
            other.group1() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(/* scalar */ f32::powi(other[e23], 2) + f32::powi(other[e31], 2) + f32::powi(other[e12], 2));
        let geometric_product = AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e15, e25, e35
            Simd32x3::from(other_2[scalar]) * reverse.group1(),
        );
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x3::from(self[e45]) * geometric_product.group1()).with_w(0.0) + (geometric_product.group0().yzx() * self.group0().zxy()).with_w(0.0)
                - (geometric_product.group0().zxy() * self.group0().yzx()).with_w(0.0),
            // e4235, e4315, e4125, e3215
            (Simd32x3::from(self[e45]) * geometric_product.group0())
                .with_w(-(geometric_product[e23] * self[e15]) - (geometric_product[e31] * self[e25]) - (geometric_product[e12] * self[e35])),
        );
    }
}
impl GeometricQuotient<AntiMotor> for FlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6        5        0
    //    simd3        3        5        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        9       14        0
    //  no simd       15       36        0
    fn geometric_quotient(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, e3215
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e23], 2) + f32::powi(other[e31], 2) + f32::powi(other[e12], 2) + f32::powi(other[scalar], 2),
        );
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e15, e25, e35, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return Flector::from_groups(
            // e15, e25, e35, e45
            ((Simd32x3::from(geometric_product[scalar]) * self.group0().xyz())
                + (Simd32x3::from(self[e45]) * geometric_product.group1().xyz())
                + (geometric_product.group0().yzx() * self.group0().zxy())
                - (geometric_product.group0().zxy() * self.group0().yzx()))
            .with_w(geometric_product[scalar] * self[e45]),
            // e4235, e4315, e4125, e3215
            (Simd32x3::from(self[e45]) * geometric_product.group0().xyz()).with_w(
                (geometric_product[e3215] * self[e45]) - (geometric_product[e23] * self[e15]) - (geometric_product[e31] * self[e25]) - (geometric_product[e12] * self[e35]),
            ),
        );
    }
}
impl GeometricQuotient<AntiPlane> for FlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        2        0
    //    simd4        2        6        0
    // Totals...
    // yes simd        5        8        0
    //  no simd       11       26        0
    fn geometric_quotient(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiPlane::from_groups(
            // e1, e2, e3, e5
            Simd32x4::from(f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)) * other.group0(),
        );
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x3::from(1.0).with_w(0.0) * self.group0().www().with_w(0.0) * geometric_product.group0().xyz().with_w(0.0) * Simd32x4::from([-1.0, -1.0, -1.0, 0.0]),
            // e235, e315, e125, e5
            (geometric_product.group0().yzxw() * self.group0().zxyw()) + Simd32x3::from(0.0).with_w(-(geometric_product[e2] * self[e25]) - (geometric_product[e3] * self[e35]))
                - (geometric_product.group0().zxyx() * self.group0().yzxx()),
        );
    }
}
impl GeometricQuotient<AntiScalar> for FlatPoint {
    type Output = AntiFlatPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        1
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        3        1
    //  no simd        0        9        1
    fn geometric_quotient(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiFlatPoint::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(1.0 / other[e12345] * -1.0) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
    }
}
impl GeometricQuotient<Circle> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       29        0
    //    simd3        0        9        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       21       42        0
    //  no simd       33       72        0
    fn geometric_quotient(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let reverse = Circle::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125
            other.group2() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group2(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x3::from(self[e45]) * geometric_product.group0() * Simd32x3::from(-1.0)).with_w(
                -(geometric_product[e423] * self[e15]) - (geometric_product[e431] * self[e25]) - (geometric_product[e412] * self[e35]) - (geometric_product[e321] * self[e45]),
            ),
            // e415, e425, e435, e321
            Simd32x4::from([
                geometric_product[e412] * self[e25] * -1.0,
                geometric_product[e423] * self[e35] * -1.0,
                geometric_product[e431] * self[e15] * -1.0,
                (geometric_product[e431] * self[e25]) + (geometric_product[e412] * self[e35]),
            ]) + (self.group0().zxyx() * geometric_product.group0().yzx().with_w(geometric_product[e423])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (geometric_product[e425] * self[e35]) + (geometric_product[e321] * self[e15]) + (geometric_product[e235] * self[e45]),
                (geometric_product[e435] * self[e15]) + (geometric_product[e321] * self[e25]) + (geometric_product[e315] * self[e45]),
                (geometric_product[e415] * self[e25]) + (geometric_product[e321] * self[e35]) + (geometric_product[e125] * self[e45]),
                -(geometric_product[e425] * self[e25]) - (geometric_product[e435] * self[e35]),
            ]) - (geometric_product.group1().zxyx() * self.group0().yzxx()),
            // e1, e2, e3, e4
            (geometric_product.group0().zxy() * self.group0().yzx()).with_w(0.0)
                - (Simd32x3::from(self[e45]) * geometric_product.group1().xyz()).with_w(0.0)
                - (geometric_product.group0().yzx() * self.group0().zxy()).with_w(0.0),
        );
    }
}
impl GeometricQuotient<CircleRotor> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       21       26        0
    //    simd3        0        7        0
    //    simd4        5        7        0
    // Totals...
    // yes simd       26       40        0
    //  no simd       41       75        0
    fn geometric_quotient(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let reverse = CircleRotor::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e12345
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - f32::powi(other[e12345], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x3::from(self[e45]) * geometric_product.group0() * Simd32x3::from(-1.0)).with_w(
                -(geometric_product[e423] * self[e15]) - (geometric_product[e431] * self[e25]) - (geometric_product[e412] * self[e35]) - (geometric_product[e321] * self[e45]),
            ),
            // e415, e425, e435, e321
            (self.group0().zxyx() * geometric_product.group0().yzx().with_w(geometric_product[e423]))
                + Simd32x3::from(0.0).with_w((geometric_product[e431] * self[e25]) + (geometric_product[e412] * self[e35]))
                - (self.group0().yzxw() * geometric_product.group0().zxy().with_w(geometric_product[e12345])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (geometric_product[e425] * self[e35]) + (geometric_product[e321] * self[e15]) + (geometric_product[e235] * self[e45]) + (geometric_product[e12345] * self[e15]),
                (geometric_product[e435] * self[e15]) + (geometric_product[e321] * self[e25]) + (geometric_product[e315] * self[e45]) + (geometric_product[e12345] * self[e25]),
                (geometric_product[e415] * self[e25]) + (geometric_product[e321] * self[e35]) + (geometric_product[e125] * self[e45]) + (geometric_product[e12345] * self[e35]),
                -(geometric_product[e425] * self[e25]) - (geometric_product[e435] * self[e35]),
            ]) - (geometric_product.group1().zxyx() * self.group0().yzxx()),
            // e1, e2, e3, e4
            (geometric_product.group0().zxy() * self.group0().yzx()).with_w(0.0)
                - (Simd32x3::from(self[e45]) * geometric_product.group1().xyz()).with_w(0.0)
                - (geometric_product.group0().yzx() * self.group0().zxy()).with_w(0.0),
        );
    }
}
impl GeometricQuotient<Dipole> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       23        0
    //    simd3        0       10        0
    //    simd4        5        4        0
    // Totals...
    // yes simd       19       37        0
    //  no simd       34       69        0
    fn geometric_quotient(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let reverse = Dipole::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35
            other.group2() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2),
        );
        let geometric_product = Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35
            Simd32x3::from(other_2[scalar]) * reverse.group2(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x3::from(self[e45]) * geometric_product.group0() * Simd32x3::from(-1.0))
                .with_w((geometric_product[e45] * self[e45]) - (geometric_product[e41] * self[e15]) - (geometric_product[e42] * self[e25]) - (geometric_product[e43] * self[e35])),
            // e23, e31, e12, e45
            Simd32x4::from([
                geometric_product[e42] * self[e35],
                geometric_product[e43] * self[e15],
                geometric_product[e41] * self[e25],
                -(geometric_product[e42] * self[e25]) - (geometric_product[e43] * self[e35]),
            ]) - (self.group0().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e41])),
            // e15, e25, e35, e1234
            (Simd32x3::from(self[e45]) * geometric_product.group2()).with_w(0.0) + (geometric_product.group1().yzx() * self.group0().zxy()).with_w(0.0)
                - (Simd32x3::from(geometric_product[e45]) * self.group0().xyz()).with_w(0.0)
                - (geometric_product.group1().zxy() * self.group0().yzx()).with_w(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (geometric_product[e42] * self[e35]) + (geometric_product[e23] * self[e45]),
                (geometric_product[e43] * self[e15]) + (geometric_product[e31] * self[e45]),
                (geometric_product[e41] * self[e25]) + (geometric_product[e12] * self[e45]),
                -(geometric_product[e31] * self[e25]) - (geometric_product[e12] * self[e35]),
            ]) - (self.group0().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e23])),
        );
    }
}
impl GeometricQuotient<DipoleInversion> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       22       28        0
    //    simd3        5       10        0
    //    simd4        5       10        0
    // Totals...
    // yes simd       32       48        0
    //  no simd       57       98        0
    fn geometric_quotient(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let reverse = DipoleInversion::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + 2.0 * (other[e1234] * other[e3215])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2),
        );
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x3::from(self[e45]) * geometric_product.group0() * Simd32x3::from(-1.0))
                .with_w((geometric_product[e45] * self[e45]) - (geometric_product[e41] * self[e15]) - (geometric_product[e42] * self[e25]) - (geometric_product[e43] * self[e35])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (geometric_product[e42] * self[e35]) + (geometric_product[e1234] * self[e15]) + (geometric_product[e4235] * self[e45]),
                (geometric_product[e43] * self[e15]) + (geometric_product[e1234] * self[e25]) + (geometric_product[e4315] * self[e45]),
                (geometric_product[e41] * self[e25]) + (geometric_product[e1234] * self[e35]) + (geometric_product[e4125] * self[e45]),
                -(geometric_product[e42] * self[e25]) - (geometric_product[e43] * self[e35]),
            ]) - (self.group0().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e41])),
            // e15, e25, e35, e1234
            ((Simd32x3::from(self[e45]) * geometric_product.group2().xyz())
                + (geometric_product.group1().yzx() * self.group0().zxy())
                + (geometric_product.group3().zxy() * self.group0().yzx())
                - (Simd32x3::from(geometric_product[e45]) * self.group0().xyz())
                - (geometric_product.group1().zxy() * self.group0().yzx())
                - (geometric_product.group3().yzx() * self.group0().zxy()))
            .with_w(geometric_product[e1234] * self[e45] * -1.0),
            // e4235, e4315, e4125, e3215
            (self.group0().xyzz() * geometric_product.group2().www().with_w(geometric_product[e4125]))
                + (self.group0().zxyx() * geometric_product.group0().yzx().with_w(geometric_product[e4235]))
                + (self.group0().wwwy() * geometric_product.group1().xyz().with_w(geometric_product[e4315]))
                + Simd32x3::from(0.0).with_w((geometric_product[e3215] * self[e45]) - (geometric_product[e31] * self[e25]) - (geometric_product[e12] * self[e35]))
                - (self.group0().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e23])),
        );
    }
}
impl GeometricQuotient<DualNum> for FlatPoint {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd2        0        1        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        5        0
    //  no simd        0       12        0
    fn geometric_quotient(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DualNum::from_groups(/* e5, e12345 */ Simd32x2::from(f32::powi(other[e12345], -2) * -1.0) * other.group0());
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(geometric_product[e12345]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1, e2, e3, e5
            Simd32x3::from(0.0).with_w(geometric_product[e5] * self[e45]),
        );
    }
}
impl GeometricQuotient<FlatPoint> for FlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        6        0
    //    simd3        1        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        1        9        0
    //  no simd        3       16        0
    fn geometric_quotient(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = FlatPoint::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(f32::powi(other[e45], -2) * -1.0) * Simd32x4::from([other[e15] * -1.0, other[e25] * -1.0, other[e35] * -1.0, other[e45] * -1.0]),
        );
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x3::from(0.0).with_w(geometric_product[e45] * self[e45]),
            // e15, e25, e35, e3215
            ((Simd32x3::from(self[e45]) * geometric_product.group0().xyz()) - (Simd32x3::from(geometric_product[e45]) * self.group0().xyz())).with_w(0.0),
        );
    }
}
impl GeometricQuotient<Flector> for FlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7        8        0
    //    simd4        2        6        0
    // Totals...
    // yes simd        9       14        0
    //  no simd       15       32        0
    fn geometric_quotient(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let reverse = Flector::from_groups(
            // e15, e25, e35, e45
            other.group0() * Simd32x4::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group1(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            -f32::powi(other[e45], 2) - f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2),
        );
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(self[e45]) * geometric_product.group1().xyz().with_w(geometric_product[e45]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                -(self[e15] * geometric_product[e45]) - (self[e35] * geometric_product[e4315]),
                -(self[e15] * geometric_product[e4125]) - (self[e25] * geometric_product[e45]),
                -(self[e25] * geometric_product[e4235]) - (self[e35] * geometric_product[e45]),
                (self[e35] * geometric_product[e4125]) + (self[e45] * geometric_product[e3215]),
            ]) + (self.group0().yzxx() * geometric_product.group1().zxyx())
                + (self.group0().wwwy() * geometric_product.group0().xyz().with_w(geometric_product[e4315])),
        );
    }
}
impl GeometricQuotient<Line> for FlatPoint {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        3        0
    //    simd3        0        9        0
    //    simd4        2        0        0
    // Totals...
    // yes simd        6       12        0
    //  no simd       12       30        0
    fn geometric_quotient(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let reverse = Line::from_groups(
            // e415, e425, e435
            other.group0() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group1() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(/* scalar */ -f32::powi(other[e415], 2) - f32::powi(other[e425], 2) - f32::powi(other[e435], 2));
        let geometric_product = Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group1(),
        );
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x3::from(self[e45]) * geometric_product.group1()).with_w(0.0) + (geometric_product.group0().yzx() * self.group0().zxy()).with_w(0.0)
                - (geometric_product.group0().zxy() * self.group0().yzx()).with_w(0.0),
            // e1, e2, e3, e5
            (Simd32x3::from(self[e45]) * geometric_product.group0() * Simd32x3::from(-1.0))
                .with_w(-(self[e15] * geometric_product[e415]) - (self[e25] * geometric_product[e425]) - (self[e35] * geometric_product[e435])),
        );
    }
}
impl GeometricQuotient<Motor> for FlatPoint {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6        6        0
    //    simd3        3        6        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        9       16        0
    //  no simd       15       40        0
    fn geometric_quotient(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let reverse = Motor::from_groups(
            // e415, e425, e435, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            -f32::powi(other[e415], 2) - f32::powi(other[e425], 2) - f32::powi(other[e435], 2) - f32::powi(other[e12345], 2),
        );
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e235, e315, e125, e5
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            ((Simd32x3::from(self[e45]) * geometric_product.group1().xyz())
                + (self.group0().xxy() * geometric_product.group0().wzx())
                + (self.group0().zyz() * geometric_product.group0().yww())
                - (self.group0().yzx() * geometric_product.group0().zxy()))
            .with_w(self[e45] * geometric_product[e12345] * -1.0),
            // e1, e2, e3, e5
            (self.group0().www() * geometric_product.group0().xyz() * Simd32x3::from(-1.0)).with_w(
                (self[e45] * geometric_product[e5]) - (self[e15] * geometric_product[e415]) - (self[e25] * geometric_product[e425]) - (self[e35] * geometric_product[e435]),
            ),
        );
    }
}
impl GeometricQuotient<MultiVector> for FlatPoint {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       37       54        0
    //    simd2        3        4        0
    //    simd3       12       30        0
    //    simd4       11       14        0
    // Totals...
    // yes simd       63      102        0
    //  no simd      123      208        0
    fn geometric_quotient(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let reverse = MultiVector::from_groups(
            // scalar, e12345
            other.group0(),
            // e1, e2, e3, e4
            other.group1(),
            // e5
            other[e5],
            // e15, e25, e35, e45
            other.group3() * Simd32x4::from(-1.0),
            // e41, e42, e43
            other.group4() * Simd32x3::from(-1.0),
            // e23, e31, e12
            other.group5() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group6() * Simd32x4::from(-1.0),
            // e423, e431, e412
            other.group7() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group8() * Simd32x3::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group9(),
            // e1234
            other[e1234],
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e15] * other[e41])
                + 2.0 * (other[e25] * other[e42])
                + 2.0 * (other[e35] * other[e43])
                + 2.0 * (other[e3215] * other[e1234])
                + f32::powi(other[scalar], 2)
                + f32::powi(other[e1], 2)
                + f32::powi(other[e2], 2)
                + f32::powi(other[e3], 2)
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                + f32::powi(other[e321], 2)
                - f32::powi(other[e12345], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2)
                - 2.0 * (other[e4] * other[e5])
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(other_2[scalar]) * reverse.group0(),
            // e1, e2, e3, e4
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e5
            reverse[e5] * other_2[scalar],
            // e15, e25, e35, e45
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group4(),
            // e23, e31, e12
            Simd32x3::from(other_2[scalar]) * reverse.group5(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group6(),
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group7(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group8(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group9(),
            // e1234
            reverse[e1234] * other_2[scalar],
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([self[e45] * geometric_product[e45], self[e45] * geometric_product[e321] * -1.0])
                - (Simd32x2::from(self[e15]) * Simd32x2::from([geometric_product[e41], geometric_product[e423]]))
                - (Simd32x2::from(self[e25]) * Simd32x2::from([geometric_product[e42], geometric_product[e431]]))
                - (Simd32x2::from(self[e35]) * Simd32x2::from([geometric_product[e43], geometric_product[e412]])),
            // e1, e2, e3, e4
            ((geometric_product.group7().zxy() * self.group0().yzx())
                - (Simd32x3::from(self[e45]) * geometric_product.group6().xyz())
                - (Simd32x3::from(geometric_product[e4]) * self.group0().xyz())
                - (geometric_product.group7().yzx() * self.group0().zxy()))
            .with_w(self[e45] * geometric_product[e4] * -1.0),
            // e5
            (self[e45] * geometric_product[e5])
                - (self[e15] * geometric_product[e1])
                - (self[e15] * geometric_product[e415])
                - (self[e25] * geometric_product[e2])
                - (self[e25] * geometric_product[e425])
                - (self[e35] * geometric_product[e3])
                - (self[e35] * geometric_product[e435]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e25] * geometric_product[e4125]) + (self[e35] * geometric_product[e31]) + (self[e45] * geometric_product[e15]),
                (self[e15] * geometric_product[e12]) + (self[e35] * geometric_product[e4235]) + (self[e45] * geometric_product[e25]),
                (self[e15] * geometric_product[e4315]) + (self[e25] * geometric_product[e23]) + (self[e45] * geometric_product[e35]),
                0.0,
            ]) + (Simd32x4::from(geometric_product[scalar]) * self.group0())
                - (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], self[e25]]) * self.group0().xxy().with_w(geometric_product[e42]))
                - (Simd32x4::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45], self[e35]]) * self.group0().zyz().with_w(geometric_product[e43]))
                - (self.group0().yzxx() * geometric_product.group5().zxy().with_w(geometric_product[e41])),
            // e41, e42, e43
            Simd32x3::from(self[e45]) * geometric_product.group4() * Simd32x3::from(-1.0),
            // e23, e31, e12
            (Simd32x3::from(self[e45]) * geometric_product.group9().xyz())
                + (Simd32x3::from(geometric_product[e1234]) * self.group0().xyz())
                + (geometric_product.group4().yzx() * self.group0().zxy())
                - (geometric_product.group4().zxy() * self.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e45] * geometric_product[e1] * -1.0,
                self[e45] * geometric_product[e2] * -1.0,
                self[e45] * geometric_product[e3] * -1.0,
                self[e35] * geometric_product[e412],
            ]) + (self.group0().zxyx() * geometric_product.group7().yzx().with_w(geometric_product[e423]))
                + (geometric_product.group1().www() * self.group0().xyz()).with_w(self[e25] * geometric_product[e431])
                - (self.group0().yzxw() * geometric_product.group7().zxy().with_w(geometric_product[e12345])),
            // e423, e431, e412
            Simd32x3::from(self[e45]) * geometric_product.group7() * Simd32x3::from(-1.0),
            // e235, e315, e125
            (Simd32x3::from(self[e45]) * geometric_product.group8())
                + (Simd32x3::from(geometric_product[e12345]) * self.group0().xyz())
                + (Simd32x3::from([geometric_product[e2], geometric_product[e435], geometric_product[e415]]) * self.group0().zxy())
                + (Simd32x3::from([geometric_product[e321], geometric_product[e3], geometric_product[e1]]) * self.group0().xxy())
                + (self.group0().zyz() * geometric_product.group6().yww())
                - (self.group0().yzx() * geometric_product.group1().zxy())
                - (self.group0().yzx() * geometric_product.group6().zxy()),
            // e4235, e4315, e4125, e3215
            (self.group0().xyzz() * Simd32x3::from(geometric_product[e1234]).with_w(geometric_product[e4125]))
                + Simd32x3::from(0.0).with_w((self[e45] * geometric_product[e3215]) - (self[e25] * geometric_product[e31]) - (self[e35] * geometric_product[e12]))
                + (geometric_product.group5() * self.group0().www()).with_w(self[e25] * geometric_product[e4315])
                + (geometric_product.group4().yzx() * self.group0().zxy()).with_w(self[e15] * geometric_product[e4235])
                - (self.group0().yzxx() * geometric_product.group4().zxy().with_w(geometric_product[e23])),
            // e1234
            self[e45] * geometric_product[e1234] * -1.0,
        );
    }
}
impl GeometricQuotient<Plane> for FlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        9        0
    //    simd4        1        5        0
    // Totals...
    // yes simd        5       14        0
    //  no simd        8       29        0
    fn geometric_quotient(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Plane::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(-f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2)) * other.group0(),
        );
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x3::from(1.0).with_w(0.0) * self.group0().www().with_w(0.0) * geometric_product.group0().xyz().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                self[e35] * geometric_product[e4315] * -1.0,
                self[e15] * geometric_product[e4125] * -1.0,
                self[e25] * geometric_product[e4235] * -1.0,
                (self[e25] * geometric_product[e4315]) + (self[e35] * geometric_product[e4125]) + (self[e45] * geometric_product[e3215]),
            ]) + (self.group0().yzxx() * geometric_product.group0().zxyx()),
        );
    }
}
impl GeometricQuotient<RoundPoint> for FlatPoint {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6        9        0
    //    simd3        2        6        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        8       16        0
    //  no simd       12       31        0
    fn geometric_quotient(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2) - 2.0 * (other[e4] * other[e5]),
        );
        let geometric_product = RoundPoint::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from(other_2[scalar]) * other.group0(), /* e5 */ other[e5] * other_2[scalar]);
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            ((Simd32x3::from(geometric_product[e4]) * self.group0().xyz()) - (Simd32x3::from(self[e45]) * geometric_product.group0().xyz())).with_w(0.0),
            // e235, e315, e125, e4
            ((self.group0().zxy() * geometric_product.group0().yzx()) - (self.group0().yzx() * geometric_product.group0().zxy())).with_w(self[e45] * geometric_product[e4] * -1.0),
            // e1, e2, e3, e5
            (Simd32x3::from(geometric_product[e4]) * self.group0().xyz() * Simd32x3::from(-1.0))
                .with_w((self[e45] * geometric_product[e5]) - (self[e15] * geometric_product[e1]) - (self[e25] * geometric_product[e2]) - (self[e35] * geometric_product[e3])),
        );
    }
}
impl GeometricQuotient<Scalar> for FlatPoint {
    type Output = FlatPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        0        1
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        1        1
    //  no simd        0        4        1
    fn geometric_quotient(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return FlatPoint::from_groups(/* e15, e25, e35, e45 */ Simd32x4::from(1.0 / other[scalar]) * self.group0());
    }
}
impl GeometricQuotient<Sphere> for FlatPoint {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6        9        0
    //    simd3        2        5        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        8       15        0
    //  no simd       12       28        0
    fn geometric_quotient(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e3215] * other[e1234]) - f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2),
        );
        let geometric_product = Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * other.group0(),
            // e1234
            other_2[scalar] * other[e1234],
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            ((Simd32x3::from(self[e45]) * geometric_product.group0().xyz()) + (Simd32x3::from(geometric_product[e1234]) * self.group0().xyz())).with_w(0.0),
            // e15, e25, e35, e1234
            ((self.group0().yzx() * geometric_product.group0().zxy()) - (self.group0().zxy() * geometric_product.group0().yzx()))
                .with_w(self[e45] * geometric_product[e1234] * -1.0),
            // e4235, e4315, e4125, e3215
            (Simd32x3::from(geometric_product[e1234]) * self.group0().xyz()).with_w(
                (self[e15] * geometric_product[e4235]) + (self[e25] * geometric_product[e4315]) + (self[e35] * geometric_product[e4125]) + (self[e45] * geometric_product[e3215]),
            ),
        );
    }
}
impl GeometricQuotient<VersorEven> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       26       37        0
    //    simd3        3        6        0
    //    simd4        6       13        0
    // Totals...
    // yes simd       35       56        0
    //  no simd       59      107        0
    fn geometric_quotient(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let reverse = VersorEven::from_groups(
            // e423, e431, e412, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e5
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e4
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)
                - f32::powi(other[e12345], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125])
                - 2.0 * (other[e5] * other[e4]),
        );
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e5
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e1, e2, e3, e4
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (self.group0().www() * geometric_product.group0().xyz() * Simd32x3::from(-1.0)).with_w(
                -(self[e15] * geometric_product[e423]) - (self[e25] * geometric_product[e431]) - (self[e35] * geometric_product[e412]) - (self[e45] * geometric_product[e321]),
            ),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e45] * geometric_product[e1] * -1.0,
                self[e45] * geometric_product[e2] * -1.0,
                self[e45] * geometric_product[e3] * -1.0,
                self[e35] * geometric_product[e412],
            ]) + (Simd32x4::from([geometric_product[e431], geometric_product[e4], geometric_product[e4], geometric_product[e431]]) * self.group0().zyzy())
                + (Simd32x4::from([geometric_product[e4], geometric_product[e412], geometric_product[e423], geometric_product[e423]]) * self.group0().xxyx())
                - (self.group0().yzxw() * geometric_product.group0().zxyw()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e15] * geometric_product[e321]) + (self[e35] * geometric_product[e425]) + (self[e35] * geometric_product[e2]) + (self[e45] * geometric_product[e235]),
                (self[e15] * geometric_product[e3]) + (self[e25] * geometric_product[e12345]) + (self[e25] * geometric_product[e321]) + (self[e45] * geometric_product[e315]),
                (self[e25] * geometric_product[e1]) + (self[e35] * geometric_product[e12345]) + (self[e35] * geometric_product[e321]) + (self[e45] * geometric_product[e125]),
                -(self[e25] * geometric_product[e425]) - (self[e25] * geometric_product[e2]) - (self[e35] * geometric_product[e435]) - (self[e35] * geometric_product[e3]),
            ]) + (Simd32x4::from([geometric_product[e12345], geometric_product[e435], geometric_product[e415], geometric_product[e5]]) * self.group0().xxyw())
                - (self.group0().yzxx() * geometric_product.group1().zxyx())
                - (self.group0().yzxx() * geometric_product.group3().zxyx()),
            // e1, e2, e3, e4
            ((self.group0().yzx() * geometric_product.group0().zxy())
                - (Simd32x3::from(self[e45]) * geometric_product.group1().xyz())
                - (Simd32x3::from([geometric_product[e431], geometric_product[e4], geometric_product[e4]]) * self.group0().zyz())
                - (Simd32x3::from([geometric_product[e4], geometric_product[e412], geometric_product[e423]]) * self.group0().xxy()))
            .with_w(self[e45] * geometric_product[e4] * -1.0),
        );
    }
}
impl GeometricQuotient<VersorOdd> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       25        0
    //    simd3        6        9        0
    //    simd4        6       13        0
    // Totals...
    // yes simd       32       47        0
    //  no simd       62      104        0
    fn geometric_quotient(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let reverse = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + 2.0 * (other[e1234] * other[e3215])
                + f32::powi(other[scalar], 2)
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2),
        );
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (self.group0().www() * geometric_product.group0().xyz() * Simd32x3::from(-1.0))
                .with_w((self[e45] * geometric_product[e45]) - (self[e15] * geometric_product[e41]) - (self[e25] * geometric_product[e42]) - (self[e35] * geometric_product[e43])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e35] * geometric_product[e42]) + (self[e45] * geometric_product[e4235]),
                (self[e25] * geometric_product[e1234]) + (self[e45] * geometric_product[e4315]),
                (self[e35] * geometric_product[e1234]) + (self[e45] * geometric_product[e4125]),
                -(self[e25] * geometric_product[e42]) - (self[e35] * geometric_product[e43]),
            ]) + (Simd32x4::from([geometric_product[e1234], geometric_product[e43], geometric_product[e41], geometric_product[scalar]]) * self.group0().xxyw())
                - (self.group0().yzxx() * geometric_product.group0().zxyx()),
            // e15, e25, e35, e1234
            ((Simd32x3::from(self[e15]) * Simd32x3::from([geometric_product[scalar], geometric_product[e12], geometric_product[e4315]]))
                + (Simd32x3::from(self[e25]) * Simd32x3::from([geometric_product[e4125], geometric_product[scalar], geometric_product[e23]]))
                + (Simd32x3::from(self[e35]) * Simd32x3::from([geometric_product[e31], geometric_product[e4235], geometric_product[scalar]]))
                + (Simd32x3::from(self[e45]) * geometric_product.group2().xyz())
                - (Simd32x3::from(self[e15]) * Simd32x3::from([geometric_product[e45], geometric_product[e4125], geometric_product[e31]]))
                - (Simd32x3::from(self[e25]) * Simd32x3::from([geometric_product[e12], geometric_product[e45], geometric_product[e4235]]))
                - (Simd32x3::from(self[e35]) * Simd32x3::from([geometric_product[e4315], geometric_product[e23], geometric_product[e45]])))
            .with_w(self[e45] * geometric_product[e1234] * -1.0),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([geometric_product[e42], geometric_product[e1234], geometric_product[e1234], geometric_product[e4315]]) * self.group0().zyzy())
                + (Simd32x4::from([geometric_product[e1234], geometric_product[e43], geometric_product[e41], geometric_product[e4235]]) * self.group0().xxyx())
                + (self.group0().wwwz() * geometric_product.group1().xyz().with_w(geometric_product[e4125]))
                + Simd32x3::from(0.0).with_w((self[e45] * geometric_product[e3215]) - (self[e25] * geometric_product[e31]) - (self[e35] * geometric_product[e12]))
                - (self.group0().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e23])),
        );
    }
}
impl std::ops::Div<GeometricQuotientInfix> for Flector {
    type Output = GeometricQuotientInfixPartial<Flector>;
    fn div(self, _rhs: GeometricQuotientInfix) -> Self::Output {
        GeometricQuotientInfixPartial(self)
    }
}
impl GeometricQuotient<AntiCircleRotor> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       39       52        0
    //    simd3        0        3        0
    //    simd4       11       14        0
    // Totals...
    // yes simd       50       69        0
    //  no simd       83      117        0
    fn geometric_quotient(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiCircleRotor::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, scalar
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                + f32::powi(other[scalar], 2)
                - f32::powi(other[e45], 2),
        );
        let geometric_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x3::from(0.0).with_w(geometric_product[e43] * self[e35] * -1.0)
                + (geometric_product.group0().zxy() * self.group1().yzx()).with_w(geometric_product[e45] * self[e45])
                - (self.group0().ww().with_zw(self[e4315], self[e15]) * geometric_product.group0().xyx().with_w(geometric_product[e41]))
                - (self.group1().zx().with_zw(self[e45], self[e25]) * geometric_product.group0().yzz().with_w(geometric_product[e42])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (geometric_product[e42] * self[e35]) + (geometric_product[e45] * self[e4235]),
                (geometric_product[e43] * self[e15]) + (geometric_product[e45] * self[e4315]),
                (geometric_product[e43] * self[e3215]) + (geometric_product[e45] * self[e4125]),
                -(geometric_product[e42] * self[e25])
                    - (geometric_product[e43] * self[e35])
                    - (geometric_product[e23] * self[e4235])
                    - (geometric_product[e31] * self[e4315])
                    - (geometric_product[e12] * self[e4125]),
            ]) + (self.group1().ww().with_zw(self[e25], self[e45]) * geometric_product.group0().xyx().with_w(geometric_product[scalar]))
                - (self.group0().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e41])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (geometric_product[e25] * self[e4125]) + (geometric_product[scalar] * self[e15])
                    - (geometric_product[e12] * self[e25])
                    - (geometric_product[e45] * self[e15])
                    - (geometric_product[e35] * self[e4315]),
                (geometric_product[e35] * self[e4235]) + (geometric_product[scalar] * self[e25])
                    - (geometric_product[e23] * self[e35])
                    - (geometric_product[e45] * self[e25])
                    - (geometric_product[e15] * self[e4125]),
                (geometric_product[e35] * self[e45]) + (geometric_product[scalar] * self[e35])
                    - (geometric_product[e31] * self[e15])
                    - (geometric_product[e45] * self[e35])
                    - (geometric_product[e25] * self[e4235]),
                0.0,
            ]) + (self.group0().zx().with_zw(self[e3215], self[e4315]) * geometric_product.group1().yzz().with_w(geometric_product[e42]))
                + (self.group0().ww().with_zw(self[e4315], self[e4125]) * geometric_product.group2().xyx().with_w(geometric_product[e43]))
                + (self.group1().ww().with_zw(self[e25], self[e4235]) * geometric_product.group1().xyx().with_w(geometric_product[e41])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (geometric_product[e42] * self[e35]) + (geometric_product[e23] * self[e45]) + (geometric_product[e31] * self[e4125]) + (geometric_product[scalar] * self[e4235]),
                (geometric_product[e43] * self[e15]) + (geometric_product[e31] * self[e45]) + (geometric_product[e12] * self[e4235]) + (geometric_product[scalar] * self[e4315]),
                (geometric_product[e43] * self[e3215]) + (geometric_product[e23] * self[e4315]) + (geometric_product[e12] * self[e45]) + (geometric_product[scalar] * self[e4125]),
                -(geometric_product[e12] * self[e35])
                    - (geometric_product[e45] * self[e3215])
                    - (geometric_product[e15] * self[e4235])
                    - (geometric_product[e25] * self[e4315])
                    - (geometric_product[e35] * self[e4125]),
            ]) + (self.group1().ww().with_zw(self[e25], self[e3215]) * geometric_product.group0().xyx().with_w(geometric_product[scalar]))
                - (geometric_product.group1().zxyy() * self.group1().yzx().with_w(self[e25]))
                - (self.group0().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e23])),
        );
    }
}
impl GeometricQuotient<AntiDipoleInversion> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       49       64        0
    //    simd3        0        6        0
    //    simd4       17       18        0
    // Totals...
    // yes simd       66       88        0
    //  no simd      117      154        0
    fn geometric_quotient(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e4
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125])
                - 2.0 * (other[e4] * other[e5]),
        );
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e4
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e1, e2, e3, e5
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (self.group1().yzxw() * geometric_product.group0().zxy().with_w(geometric_product[e4]))
                + Simd32x3::from(0.0).with_w(
                    (geometric_product[e1] * self[e4235]) + (geometric_product[e2] * self[e4315]) + (geometric_product[e3] * self[e4125]) - (geometric_product[e321] * self[e45]),
                )
                - (self.group0().ww().with_zw(self[e4315], self[e15]) * geometric_product.group0().xyx().with_w(geometric_product[e423]))
                - (self.group1().zx().with_zw(self[e45], self[e25]) * geometric_product.group0().yzz().with_w(geometric_product[e431]))
                - (geometric_product.group2().www() * self.group1().xyz()).with_w(geometric_product[e412] * self[e35]),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(geometric_product[e321] * self[e4235]) - (geometric_product[e1] * self[e45]) - (geometric_product[e2] * self[e4125]),
                -(geometric_product[e321] * self[e4315]) - (geometric_product[e2] * self[e45]) - (geometric_product[e3] * self[e4235]),
                -(geometric_product[e321] * self[e4125]) - (geometric_product[e1] * self[e4315]) - (geometric_product[e3] * self[e45]),
                (geometric_product[e425] * self[e4315]) + (geometric_product[e435] * self[e4125]),
            ]) + (self.group0().xyzz() * geometric_product.group2().www().with_w(geometric_product[e412]))
                + (self.group1().yzxx() * geometric_product.group3().zxy().with_w(geometric_product[e415]))
                + (self.group0().zx().with_zw(self[e3215], self[e25]) * geometric_product.group0().yzz().with_w(geometric_product[e431]))
                + (self.group1().ww().with_zw(self[e25], self[e15]) * geometric_product.group0().xyx().with_w(geometric_product[e423]))
                - (geometric_product.group0().zxy() * self.group0().yzx()).with_w(geometric_product[e4] * self[e3215]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (geometric_product[e321] * self[e15])
                    + (geometric_product[e235] * self[e45])
                    + (geometric_product[e315] * self[e4125])
                    + (geometric_product[e1] * self[e3215])
                    + (geometric_product[e2] * self[e35])
                    + (geometric_product[e5] * self[e4235]),
                (geometric_product[e321] * self[e25])
                    + (geometric_product[e315] * self[e45])
                    + (geometric_product[e125] * self[e4235])
                    + (geometric_product[e2] * self[e3215])
                    + (geometric_product[e3] * self[e15])
                    + (geometric_product[e5] * self[e4315]),
                (geometric_product[e321] * self[e35])
                    + (geometric_product[e235] * self[e4315])
                    + (geometric_product[e125] * self[e45])
                    + (geometric_product[e1] * self[e25])
                    + (geometric_product[e3] * self[e3215])
                    + (geometric_product[e5] * self[e4125]),
                -(geometric_product[e235] * self[e4235])
                    - (geometric_product[e315] * self[e4315])
                    - (geometric_product[e125] * self[e4125])
                    - (geometric_product[e1] * self[e15])
                    - (geometric_product[e2] * self[e25])
                    - (geometric_product[e3] * self[e35]),
            ]) + (geometric_product.group1().xyxw() * self.group1().ww().with_zw(self[e25], self[e3215]))
                + (self.group0().zx().with_zw(self[e3215], self[e45]) * geometric_product.group1().yzz().with_w(geometric_product[e5]))
                - (geometric_product.group1().zxyx() * self.group0().yzxx())
                - (self.group0().yzxz() * geometric_product.group3().zxy().with_w(geometric_product[e435]))
                - (geometric_product.group2().zxy() * self.group1().yzx()).with_w(geometric_product[e425] * self[e25]),
            // e1, e2, e3, e4
            Simd32x4::from([
                -(geometric_product[e431] * self[e35]) - (geometric_product[e415] * self[e45]) - (geometric_product[e425] * self[e4125]) - (geometric_product[e4] * self[e15]),
                -(geometric_product[e412] * self[e15]) - (geometric_product[e425] * self[e45]) - (geometric_product[e435] * self[e4235]) - (geometric_product[e4] * self[e25]),
                -(geometric_product[e412] * self[e3215]) - (geometric_product[e415] * self[e4315]) - (geometric_product[e435] * self[e45]) - (geometric_product[e4] * self[e35]),
                geometric_product[e412] * self[e4125],
            ]) + (self.group1().yzxy() * geometric_product.group1().zxy().with_w(geometric_product[e431]))
                + (geometric_product.group0().zxy() * self.group0().yzx()).with_w(geometric_product[e423] * self[e4235])
                - (self.group1().ww().with_zw(self[e25], self[e45]) * geometric_product.group0().xyx().with_w(geometric_product[e4])),
        );
    }
}
impl GeometricQuotient<AntiDualNum> for Flector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        3        0
    //    simd2        0        1        0
    //    simd3        1        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        2        7        0
    //  no simd        4       15        0
    fn geometric_quotient(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDualNum::from_groups(/* e3215, scalar */ Simd32x2::from(f32::powi(other[scalar], -2)) * other.group0());
        return Flector::from_groups(
            // e15, e25, e35, e45
            ((Simd32x3::from(geometric_product[e3215]) * self.group1().xyz()) + (Simd32x3::from(geometric_product[scalar]) * self.group0().xyz()))
                .with_w(geometric_product[scalar] * self[e45]),
            // e4235, e4315, e4125, e3215
            geometric_product
                .group0()
                .yy()
                .with_zw(geometric_product[scalar], (geometric_product[e3215] * self[e45]) + (geometric_product[scalar] * self[e3215]))
                * self.group1().xyz().with_w(1.0),
        );
    }
}
impl GeometricQuotient<AntiFlatPoint> for Flector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       12        0
    //    simd4        2        5        0
    // Totals...
    // yes simd        6       17        0
    //  no simd       12       32        0
    fn geometric_quotient(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlatPoint::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(f32::powi(other[e321], -2)) * Simd32x4::from([other[e235] * -1.0, other[e315] * -1.0, other[e125] * -1.0, other[e321] * -1.0]),
        );
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(geometric_product[e321]) * self.group1().xyz().with_w(self[e45]) * Simd32x4::from(-1.0),
            // e235, e315, e125, e5
            Simd32x4::from([
                (geometric_product[e315] * self[e4125]) + (geometric_product[e321] * self[e15]),
                (geometric_product[e125] * self[e4235]) + (geometric_product[e321] * self[e25]),
                (geometric_product[e125] * self[e45]) + (geometric_product[e321] * self[e35]),
                -(geometric_product[e315] * self[e4315]) - (geometric_product[e125] * self[e4125]),
            ]) + (geometric_product.group0().xyxw() * self.group0().ww().with_zw(self[e4315], self[e3215]))
                - (geometric_product.group0().zxyx() * self.group1().yzxx()),
        );
    }
}
impl GeometricQuotient<AntiFlector> for Flector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       25        0
    //    simd3        0        1        0
    //    simd4        6        8        0
    // Totals...
    // yes simd       25       34        0
    //  no simd       43       60        0
    fn geometric_quotient(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiFlector::from_groups(/* e235, e315, e125, e321 */ other.group0() * Simd32x4::from(-1.0), /* e1, e2, e3, e5 */ other.group1());
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2),
        );
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e1, e2, e3, e5
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                -(geometric_product[e1] * self[e45]) - (geometric_product[e2] * self[e4125]),
                -(geometric_product[e2] * self[e45]) - (geometric_product[e3] * self[e4235]),
                -(geometric_product[e1] * self[e4315]) - (geometric_product[e3] * self[e45]),
                (geometric_product[e2] * self[e4315]) + (geometric_product[e3] * self[e4125]),
            ]) + (geometric_product.group1().zxyx() * self.group1().yzxx())
                - (Simd32x4::from(geometric_product[e321]) * self.group1().xyz().with_w(self[e45])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (geometric_product[e321] * self[e15]) + (geometric_product[e1] * self[e3215]) + (geometric_product[e2] * self[e35]) + (geometric_product[e5] * self[e4235]),
                (geometric_product[e321] * self[e25]) + (geometric_product[e2] * self[e3215]) + (geometric_product[e3] * self[e15]) + (geometric_product[e5] * self[e4315]),
                (geometric_product[e321] * self[e35]) + (geometric_product[e1] * self[e25]) + (geometric_product[e3] * self[e3215]) + (geometric_product[e5] * self[e4125]),
                -(geometric_product[e125] * self[e4125]) - (geometric_product[e1] * self[e15]) - (geometric_product[e2] * self[e25]) - (geometric_product[e3] * self[e35]),
            ]) + (geometric_product.group0().xyxw() * self.group0().ww().with_zw(self[e4315], self[e3215]))
                + (self.group1().zx().with_zw(self[e45], self[e45]) * geometric_product.group0().yzz().with_w(geometric_product[e5]))
                - (geometric_product.group0().zxyx() * self.group1().yzxx())
                - (geometric_product.group1().zxy() * self.group0().yzx()).with_w(geometric_product[e315] * self[e4315]),
        );
    }
}
impl GeometricQuotient<AntiLine> for Flector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       27        0
    //    simd3        0        6        0
    //    simd4        3        1        0
    // Totals...
    // yes simd       21       34        0
    //  no simd       30       49        0
    fn geometric_quotient(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiLine::from_groups(
            // e23, e31, e12
            other.group0() * Simd32x3::from(-1.0),
            // e15, e25, e35
            other.group1() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(/* scalar */ f32::powi(other[e23], 2) + f32::powi(other[e31], 2) + f32::powi(other[e12], 2));
        let geometric_product = AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e15, e25, e35
            Simd32x3::from(other_2[scalar]) * reverse.group1(),
        );
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (geometric_product[e23] * self[e3215]) + (geometric_product[e31] * self[e35]) + (geometric_product[e15] * self[e45]) + (geometric_product[e25] * self[e4125]),
                (geometric_product[e31] * self[e3215]) + (geometric_product[e12] * self[e15]) + (geometric_product[e25] * self[e45]) + (geometric_product[e35] * self[e4235]),
                (geometric_product[e23] * self[e25]) + (geometric_product[e12] * self[e3215]) + (geometric_product[e15] * self[e4315]) + (geometric_product[e35] * self[e45]),
                geometric_product[e12] * self[e4125] * -1.0,
            ]) - (self.group1().yzxy() * geometric_product.group1().zxy().with_w(geometric_product[e31]))
                - (geometric_product.group0().zxy() * self.group0().yzx()).with_w(geometric_product[e23] * self[e4235]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (geometric_product[e23] * self[e45]) + (geometric_product[e31] * self[e4125]),
                (geometric_product[e31] * self[e45]) + (geometric_product[e12] * self[e4235]),
                (geometric_product[e23] * self[e4315]) + (geometric_product[e12] * self[e45]),
                -(geometric_product[e31] * self[e25])
                    - (geometric_product[e12] * self[e35])
                    - (geometric_product[e15] * self[e4235])
                    - (geometric_product[e25] * self[e4315])
                    - (geometric_product[e35] * self[e4125]),
            ]) - (geometric_product.group0().zxy() * self.group1().yzx()).with_w(geometric_product[e23] * self[e15]),
        );
    }
}
impl GeometricQuotient<AntiMotor> for Flector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       25        0
    //    simd4        6       10        0
    // Totals...
    // yes simd       25       35        0
    //  no simd       43       65        0
    fn geometric_quotient(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, e3215
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e23], 2) + f32::powi(other[e31], 2) + f32::powi(other[e12], 2) + f32::powi(other[scalar], 2),
        );
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e15, e25, e35, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (geometric_product[e31] * self[e35])
                    + (geometric_product[scalar] * self[e15])
                    + (geometric_product[e15] * self[e45])
                    + (geometric_product[e25] * self[e4125])
                    + (geometric_product[e3215] * self[e4235]),
                (geometric_product[e12] * self[e15])
                    + (geometric_product[scalar] * self[e25])
                    + (geometric_product[e25] * self[e45])
                    + (geometric_product[e35] * self[e4235])
                    + (geometric_product[e3215] * self[e4315]),
                (geometric_product[e12] * self[e3215])
                    + (geometric_product[scalar] * self[e35])
                    + (geometric_product[e15] * self[e4315])
                    + (geometric_product[e35] * self[e45])
                    + (geometric_product[e3215] * self[e4125]),
                geometric_product[e12] * self[e4125] * -1.0,
            ]) + (geometric_product.group0().xyxw() * self.group1().ww().with_zw(self[e25], self[e45]))
                - (geometric_product.group0().zxyx() * self.group0().yzx().with_w(self[e4235]))
                - (self.group1().yzxy() * geometric_product.group1().zxy().with_w(geometric_product[e31])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                geometric_product[scalar] * self[e4235],
                geometric_product[scalar] * self[e4315],
                geometric_product[scalar] * self[e4125],
                -(geometric_product[e31] * self[e25])
                    - (geometric_product[e12] * self[e35])
                    - (geometric_product[e15] * self[e4235])
                    - (geometric_product[e25] * self[e4315])
                    - (geometric_product[e35] * self[e4125]),
            ]) + (geometric_product.group0().xyxw() * self.group0().ww().with_zw(self[e4315], self[e3215]))
                + (self.group1().zx().with_zw(self[e45], self[e45]) * geometric_product.group0().yzz().with_w(geometric_product[e3215]))
                - (geometric_product.group0().zxyx() * self.group1().yzx().with_w(self[e15])),
        );
    }
}
impl GeometricQuotient<AntiPlane> for Flector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       16        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       13       20        0
    //  no simd       22       32        0
    fn geometric_quotient(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiPlane::from_groups(
            // e1, e2, e3, e5
            Simd32x4::from(f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)) * other.group0(),
        );
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                -(geometric_product[e1] * self[e45]) - (geometric_product[e2] * self[e4125]),
                -(geometric_product[e2] * self[e45]) - (geometric_product[e3] * self[e4235]),
                -(geometric_product[e1] * self[e4315]) - (geometric_product[e3] * self[e45]),
                (geometric_product[e2] * self[e4315]) + (geometric_product[e3] * self[e4125]),
            ]) + (geometric_product.group0().zxyx() * self.group1().yzxx()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (geometric_product[e2] * self[e35]) + (geometric_product[e5] * self[e4235]),
                (geometric_product[e3] * self[e15]) + (geometric_product[e5] * self[e4315]),
                (geometric_product[e3] * self[e3215]) + (geometric_product[e5] * self[e4125]),
                -(geometric_product[e2] * self[e25]) - (geometric_product[e3] * self[e35]),
            ]) + (geometric_product.group0().xyxw() * self.group1().ww().with_zw(self[e25], self[e45]))
                - (geometric_product.group0().zxyx() * self.group0().yzxx()),
        );
    }
}
impl GeometricQuotient<AntiScalar> for Flector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        1
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        5        1
    //  no simd        0       17        1
    fn geometric_quotient(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiScalar::from_groups(/* e12345 */ 1.0 / other[e12345] * -1.0);
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(geometric_product[e12345]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1, e2, e3, e5
            Simd32x4::from(geometric_product[e12345]) * self.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricQuotient<Circle> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       34       52        0
    //    simd3        0        6        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       43       67        0
    //  no simd       70      106        0
    fn geometric_quotient(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let reverse = Circle::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125
            other.group2() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group2(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                geometric_product[e412] * self[e4315],
                geometric_product[e423] * self[e4125],
                geometric_product[e431] * self[e4235],
                -(geometric_product[e412] * self[e35]) - (geometric_product[e321] * self[e45]),
            ]) - (self.group0().ww().with_zw(self[e4315], self[e15]) * geometric_product.group0().xyx().with_w(geometric_product[e423]))
                - (self.group1().zx().with_zw(self[e45], self[e25]) * geometric_product.group0().yzz().with_w(geometric_product[e431])),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(geometric_product[e412] * self[e25]) - (geometric_product[e321] * self[e4235]),
                -(geometric_product[e423] * self[e35]) - (geometric_product[e321] * self[e4315]),
                -(geometric_product[e431] * self[e15]) - (geometric_product[e321] * self[e4125]),
                (geometric_product[e412] * self[e35]) + (geometric_product[e415] * self[e4235]) + (geometric_product[e425] * self[e4315]) + (geometric_product[e435] * self[e4125]),
            ]) + (self.group0().zx().with_zw(self[e3215], self[e25]) * geometric_product.group0().yzz().with_w(geometric_product[e431]))
                + (self.group1().ww().with_zw(self[e25], self[e15]) * geometric_product.group0().xyx().with_w(geometric_product[e423])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (geometric_product[e415] * self[e3215]) + (geometric_product[e425] * self[e35]) + (geometric_product[e321] * self[e15]) + (geometric_product[e315] * self[e4125]),
                (geometric_product[e425] * self[e3215]) + (geometric_product[e435] * self[e15]) + (geometric_product[e321] * self[e25]) + (geometric_product[e125] * self[e4235]),
                (geometric_product[e415] * self[e25]) + (geometric_product[e435] * self[e3215]) + (geometric_product[e321] * self[e35]) + (geometric_product[e125] * self[e45]),
                -(geometric_product[e415] * self[e15]) - (geometric_product[e425] * self[e25]) - (geometric_product[e435] * self[e35]) - (geometric_product[e125] * self[e4125]),
            ]) + (self.group0().ww().with_zw(self[e4315], self[e3215]) * geometric_product.group2().xyx().with_w(geometric_product[e321]))
                - (self.group1().yzxx() * geometric_product.group2().zxy().with_w(geometric_product[e235]))
                - (geometric_product.group1().zxy() * self.group0().yzx()).with_w(geometric_product[e315] * self[e4315]),
            // e1, e2, e3, e4
            Simd32x4::from([
                -(geometric_product[e423] * self[e3215]) - (geometric_product[e431] * self[e35]) - (geometric_product[e415] * self[e45]) - (geometric_product[e425] * self[e4125]),
                -(geometric_product[e431] * self[e3215]) - (geometric_product[e412] * self[e15]) - (geometric_product[e425] * self[e45]) - (geometric_product[e435] * self[e4235]),
                -(geometric_product[e423] * self[e25]) - (geometric_product[e412] * self[e3215]) - (geometric_product[e415] * self[e4315]) - (geometric_product[e435] * self[e45]),
                geometric_product[e412] * self[e4125],
            ]) + (self.group1().yzxy() * geometric_product.group1().zxy().with_w(geometric_product[e431]))
                + (geometric_product.group0().zxy() * self.group0().yzx()).with_w(geometric_product[e423] * self[e4235]),
        );
    }
}
impl GeometricQuotient<CircleRotor> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       35       55        0
    //    simd3        0        4        0
    //    simd4       11       13        0
    // Totals...
    // yes simd       46       72        0
    //  no simd       79      119        0
    fn geometric_quotient(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let reverse = CircleRotor::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e12345
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - f32::powi(other[e12345], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                geometric_product[e412] * self[e4315],
                geometric_product[e423] * self[e4125],
                geometric_product[e431] * self[e4235],
                -(geometric_product[e412] * self[e35]) - (geometric_product[e321] * self[e45]),
            ]) - (self.group0().ww().with_zw(self[e4315], self[e15]) * geometric_product.group0().xyx().with_w(geometric_product[e423]))
                - (self.group1().zx().with_zw(self[e45], self[e25]) * geometric_product.group0().yzz().with_w(geometric_product[e431])),
            // e415, e425, e435, e321
            Simd32x4::from([
                geometric_product[e321] * self[e4235] * -1.0,
                geometric_product[e321] * self[e4315] * -1.0,
                geometric_product[e321] * self[e4125] * -1.0,
                (geometric_product[e412] * self[e35]) + (geometric_product[e415] * self[e4235]) + (geometric_product[e425] * self[e4315]) + (geometric_product[e435] * self[e4125]),
            ]) + (self.group0().zx().with_zw(self[e3215], self[e25]) * geometric_product.group0().yzz().with_w(geometric_product[e431]))
                + (self.group1().ww().with_zw(self[e25], self[e15]) * geometric_product.group0().xyx().with_w(geometric_product[e423]))
                - (self.group0().yzxw() * geometric_product.group0().zxy().with_w(geometric_product[e12345])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (geometric_product[e321] * self[e15]) + (geometric_product[e235] * self[e45]) + (geometric_product[e315] * self[e4125]) + (geometric_product[e12345] * self[e15]),
                (geometric_product[e321] * self[e25]) + (geometric_product[e315] * self[e45]) + (geometric_product[e125] * self[e4235]) + (geometric_product[e12345] * self[e25]),
                (geometric_product[e321] * self[e35]) + (geometric_product[e235] * self[e4315]) + (geometric_product[e125] * self[e45]) + (geometric_product[e12345] * self[e35]),
                -(geometric_product[e435] * self[e35])
                    - (geometric_product[e235] * self[e4235])
                    - (geometric_product[e315] * self[e4315])
                    - (geometric_product[e125] * self[e4125]),
            ]) + (geometric_product.group1().xyxw() * self.group1().ww().with_zw(self[e25], self[e3215]))
                + (self.group0().zx().with_zw(self[e3215], self[e3215]) * geometric_product.group1().yzz().with_w(geometric_product[e12345]))
                - (geometric_product.group1().zxyx() * self.group0().yzxx())
                - (geometric_product.group2().zxy() * self.group1().yzx()).with_w(geometric_product[e425] * self[e25]),
            // e1, e2, e3, e4
            Simd32x4::from([
                -(geometric_product[e423] * self[e3215])
                    - (geometric_product[e431] * self[e35])
                    - (geometric_product[e415] * self[e45])
                    - (geometric_product[e425] * self[e4125])
                    - (geometric_product[e12345] * self[e4235]),
                -(geometric_product[e431] * self[e3215])
                    - (geometric_product[e412] * self[e15])
                    - (geometric_product[e425] * self[e45])
                    - (geometric_product[e435] * self[e4235])
                    - (geometric_product[e12345] * self[e4315]),
                -(geometric_product[e423] * self[e25])
                    - (geometric_product[e412] * self[e3215])
                    - (geometric_product[e415] * self[e4315])
                    - (geometric_product[e435] * self[e45])
                    - (geometric_product[e12345] * self[e4125]),
                geometric_product[e412] * self[e4125],
            ]) + (self.group1().yzxy() * geometric_product.group1().zxy().with_w(geometric_product[e431]))
                + (geometric_product.group0().zxy() * self.group0().yzx()).with_w(geometric_product[e423] * self[e4235]),
        );
    }
}
impl GeometricQuotient<Dipole> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       38       53        0
    //    simd3        0        6        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       47       68        0
    //  no simd       74      107        0
    fn geometric_quotient(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let reverse = Dipole::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35
            other.group2() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2),
        );
        let geometric_product = Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35
            Simd32x3::from(other_2[scalar]) * reverse.group2(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x3::from(0.0).with_w(geometric_product[e43] * self[e35] * -1.0)
                + (geometric_product.group0().zxy() * self.group1().yzx()).with_w(geometric_product[e45] * self[e45])
                - (self.group0().ww().with_zw(self[e4315], self[e15]) * geometric_product.group0().xyx().with_w(geometric_product[e41]))
                - (self.group1().zx().with_zw(self[e45], self[e25]) * geometric_product.group0().yzz().with_w(geometric_product[e42])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (geometric_product[e41] * self[e3215]) + (geometric_product[e42] * self[e35]) + (geometric_product[e45] * self[e4235]),
                (geometric_product[e42] * self[e3215]) + (geometric_product[e43] * self[e15]) + (geometric_product[e45] * self[e4315]),
                (geometric_product[e41] * self[e25]) + (geometric_product[e43] * self[e3215]) + (geometric_product[e45] * self[e4125]),
                -(geometric_product[e42] * self[e25])
                    - (geometric_product[e43] * self[e35])
                    - (geometric_product[e23] * self[e4235])
                    - (geometric_product[e31] * self[e4315])
                    - (geometric_product[e12] * self[e4125]),
            ]) - (self.group0().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e41])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (geometric_product[e31] * self[e35]) - (geometric_product[e12] * self[e25]) - (geometric_product[e45] * self[e15]) - (geometric_product[e35] * self[e4315]),
                (geometric_product[e12] * self[e15]) - (geometric_product[e23] * self[e35]) - (geometric_product[e45] * self[e25]) - (geometric_product[e15] * self[e4125]),
                (geometric_product[e12] * self[e3215]) - (geometric_product[e31] * self[e15]) - (geometric_product[e45] * self[e35]) - (geometric_product[e25] * self[e4235]),
                0.0,
            ]) + (self.group0().ww().with_zw(self[e4315], self[e4235]) * geometric_product.group2().xyx().with_w(geometric_product[e41]))
                + (self.group1().zx().with_zw(self[e45], self[e4315]) * geometric_product.group2().yzz().with_w(geometric_product[e42]))
                + (self.group1().ww().with_zw(self[e25], self[e4125]) * geometric_product.group1().xyx().with_w(geometric_product[e43])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (geometric_product[e41] * self[e3215]) + (geometric_product[e42] * self[e35]) + (geometric_product[e23] * self[e45]) + (geometric_product[e31] * self[e4125]),
                (geometric_product[e42] * self[e3215]) + (geometric_product[e43] * self[e15]) + (geometric_product[e31] * self[e45]) + (geometric_product[e12] * self[e4235]),
                (geometric_product[e41] * self[e25]) + (geometric_product[e43] * self[e3215]) + (geometric_product[e23] * self[e4315]) + (geometric_product[e12] * self[e45]),
                -(geometric_product[e23] * self[e15])
                    - (geometric_product[e31] * self[e25])
                    - (geometric_product[e12] * self[e35])
                    - (geometric_product[e45] * self[e3215])
                    - (geometric_product[e35] * self[e4125]),
            ]) - (self.group1().yzxy() * geometric_product.group1().zxy().with_w(geometric_product[e25]))
                - (geometric_product.group0().zxy() * self.group0().yzx()).with_w(geometric_product[e15] * self[e4235]),
        );
    }
}
impl GeometricQuotient<DipoleInversion> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       50       63        0
    //    simd3        0        5        0
    //    simd4       17       19        0
    // Totals...
    // yes simd       67       87        0
    //  no simd      118      154        0
    fn geometric_quotient(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let reverse = DipoleInversion::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + 2.0 * (other[e1234] * other[e3215])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2),
        );
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x3::from(0.0).with_w(
                (geometric_product[e1234] * self[e3215])
                    - (geometric_product[e4235] * self[e4235])
                    - (geometric_product[e4315] * self[e4315])
                    - (geometric_product[e4125] * self[e4125]),
            ) + (geometric_product.group0().zxy() * self.group1().yzx()).with_w(geometric_product[e45] * self[e45])
                - (self.group0().ww().with_zw(self[e4315], self[e15]) * geometric_product.group0().xyx().with_w(geometric_product[e41]))
                - (self.group1().zx().with_zw(self[e45], self[e25]) * geometric_product.group0().yzz().with_w(geometric_product[e42]))
                - (geometric_product.group2().www() * self.group1().xyz()).with_w(geometric_product[e43] * self[e35]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (geometric_product[e42] * self[e35])
                    + (geometric_product[e45] * self[e4235])
                    + (geometric_product[e1234] * self[e15])
                    + (geometric_product[e4235] * self[e45])
                    + (geometric_product[e4315] * self[e4125]),
                (geometric_product[e43] * self[e15])
                    + (geometric_product[e45] * self[e4315])
                    + (geometric_product[e1234] * self[e25])
                    + (geometric_product[e4315] * self[e45])
                    + (geometric_product[e4125] * self[e4235]),
                (geometric_product[e43] * self[e3215])
                    + (geometric_product[e45] * self[e4125])
                    + (geometric_product[e1234] * self[e35])
                    + (geometric_product[e4235] * self[e4315])
                    + (geometric_product[e4125] * self[e45]),
                -(geometric_product[e43] * self[e35]) - (geometric_product[e23] * self[e4235]) - (geometric_product[e31] * self[e4315]) - (geometric_product[e12] * self[e4125]),
            ]) + (self.group1().ww().with_zw(self[e25], self[e3215]) * geometric_product.group0().xyx().with_w(geometric_product[e1234]))
                - (self.group0().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e41]))
                - (geometric_product.group3().zxy() * self.group1().yzx()).with_w(geometric_product[e42] * self[e25]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (geometric_product[e25] * self[e4125]) + (geometric_product[e4125] * self[e25]) + (geometric_product[e3215] * self[e4235])
                    - (geometric_product[e45] * self[e15])
                    - (geometric_product[e35] * self[e4315])
                    - (geometric_product[e4235] * self[e3215])
                    - (geometric_product[e4315] * self[e35]),
                (geometric_product[e35] * self[e4235]) + (geometric_product[e4235] * self[e35]) + (geometric_product[e3215] * self[e4315])
                    - (geometric_product[e45] * self[e25])
                    - (geometric_product[e15] * self[e4125])
                    - (geometric_product[e4315] * self[e3215])
                    - (geometric_product[e4125] * self[e15]),
                (geometric_product[e35] * self[e45]) + (geometric_product[e4315] * self[e15]) + (geometric_product[e3215] * self[e4125])
                    - (geometric_product[e45] * self[e35])
                    - (geometric_product[e25] * self[e4235])
                    - (geometric_product[e4235] * self[e25])
                    - (geometric_product[e4125] * self[e3215]),
                0.0,
            ]) + (self.group0().zx().with_zw(self[e3215], self[e4315]) * geometric_product.group1().yzz().with_w(geometric_product[e42]))
                + (self.group0().ww().with_zw(self[e4315], self[e4125]) * geometric_product.group2().xyx().with_w(geometric_product[e43]))
                + (self.group1().ww().with_zw(self[e25], self[e4235]) * geometric_product.group1().xyx().with_w(geometric_product[e41]))
                - (self.group0().yzxw() * geometric_product.group1().zxy().with_w(geometric_product[e1234])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                geometric_product[e1234] * self[e15],
                geometric_product[e1234] * self[e25],
                geometric_product[e1234] * self[e35],
                -(geometric_product[e12] * self[e35])
                    - (geometric_product[e45] * self[e3215])
                    - (geometric_product[e15] * self[e4235])
                    - (geometric_product[e25] * self[e4315])
                    - (geometric_product[e35] * self[e4125]),
            ]) + (self.group0().zx().with_zw(self[e3215], self[e25]) * geometric_product.group0().yzz().with_w(geometric_product[e4315]))
                + (self.group0().ww().with_zw(self[e4315], self[e35]) * geometric_product.group1().xyx().with_w(geometric_product[e4125]))
                + (self.group1().zx().with_zw(self[e45], self[e45]) * geometric_product.group1().yzz().with_w(geometric_product[e3215]))
                + (self.group1().ww().with_zw(self[e25], self[e15]) * geometric_product.group0().xyx().with_w(geometric_product[e4235]))
                - (geometric_product.group1().zxyy() * self.group1().yzx().with_w(self[e25]))
                - (self.group0().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e23])),
        );
    }
}
impl GeometricQuotient<DualNum> for Flector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd2        0        1        0
    //    simd3        1        2        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        2       10        0
    //  no simd        4       21        0
    fn geometric_quotient(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DualNum::from_groups(/* e5, e12345 */ Simd32x2::from(f32::powi(other[e12345], -2) * -1.0) * other.group0());
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            ((Simd32x3::from(geometric_product[e5]) * self.group1().xyz()) + (Simd32x3::from(geometric_product[e12345]) * self.group0().xyz()))
                .with_w(geometric_product[e12345] * self[e45] * -1.0),
            // e1, e2, e3, e5
            geometric_product
                .group0()
                .yy()
                .with_zw(geometric_product[e12345], (geometric_product[e5] * self[e45]) + (geometric_product[e12345] * self[e3215]))
                * self.group1().xyz().with_w(1.0)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricQuotient<FlatPoint> for Flector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       13        0
    //    simd4        2        4        0
    // Totals...
    // yes simd        6       17        0
    //  no simd       12       29        0
    fn geometric_quotient(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = FlatPoint::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(f32::powi(other[e45], -2) * -1.0) * Simd32x4::from([other[e15] * -1.0, other[e25] * -1.0, other[e35] * -1.0, other[e45] * -1.0]),
        );
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(geometric_product[e45]) * self.group1().xyz().with_w(self[e45]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (geometric_product[e15] * self[e45]) + (geometric_product[e25] * self[e4125]),
                (geometric_product[e25] * self[e45]) + (geometric_product[e35] * self[e4235]),
                (geometric_product[e15] * self[e4315]) + (geometric_product[e35] * self[e45]),
                -(geometric_product[e35] * self[e4125]) - (geometric_product[e45] * self[e3215]),
            ]) - (geometric_product.group0().zxyx() * self.group1().yzxx())
                - (geometric_product.group0().wwwy() * self.group0().xyz().with_w(self[e4315])),
        );
    }
}
impl GeometricQuotient<Flector> for Flector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7        8        0
    //    simd4        9       13        0
    // Totals...
    // yes simd       16       21        0
    //  no simd       43       60        0
    fn geometric_quotient(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let reverse = Flector::from_groups(
            // e15, e25, e35, e45
            other.group0() * Simd32x4::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group1(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            -f32::powi(other[e45], 2) - f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2),
        );
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (geometric_product[e4235] * self[e45]) + (geometric_product[e4315] * self[e4125]),
                (geometric_product[e4315] * self[e45]) + (geometric_product[e4125] * self[e4235]),
                (geometric_product[e4235] * self[e4315]) + (geometric_product[e4125] * self[e45]),
                -(geometric_product[e4315] * self[e4315]) - (geometric_product[e4125] * self[e4125]),
            ]) + (Simd32x4::from(geometric_product[e45]) * self.group1().xyz().with_w(self[e45]))
                - (geometric_product.group1().zxyx() * self.group1().yzxx()),
            // e15, e25, e35, e3215
            (Simd32x4::from(geometric_product[e3215]) * self.group1().xyz().with_w(self[e45]))
                + (geometric_product.group1().zxyz() * self.group0().yzxz())
                + (self.group0().ww().with_zw(self[e4315], self[e15]) * geometric_product.group0().xyx().with_w(geometric_product[e4235]))
                + (self.group1().zx().with_zw(self[e45], self[e25]) * geometric_product.group0().yzz().with_w(geometric_product[e4315]))
                - (geometric_product.group0().zxyx() * self.group1().yzxx())
                - (geometric_product.group0().wwwy() * self.group0().xyz().with_w(self[e4315]))
                - (self.group0().zx().with_zw(self[e3215], self[e3215]) * geometric_product.group1().yzz().with_w(geometric_product[e45]))
                - (self.group1().ww().with_zw(self[e25], self[e4125]) * geometric_product.group1().xyx().with_w(geometric_product[e35])),
        );
    }
}
impl GeometricQuotient<Line> for Flector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       16        0
    //    simd3        0        4        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       16       25        0
    //  no simd       31       48        0
    fn geometric_quotient(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let reverse = Line::from_groups(
            // e415, e425, e435
            other.group0() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group1() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(/* scalar */ -f32::powi(other[e415], 2) - f32::powi(other[e425], 2) - f32::powi(other[e435], 2));
        let geometric_product = Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group1(),
        );
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (self[e4125] * geometric_product[e315]) - (self[e25] * geometric_product[e435]) - (self[e4315] * geometric_product[e125]),
                (self[e4235] * geometric_product[e125]) - (self[e35] * geometric_product[e415]) - (self[e4125] * geometric_product[e235]),
                (self[e45] * geometric_product[e125]) - (self[e15] * geometric_product[e425]) - (self[e4235] * geometric_product[e315]),
                0.0,
            ]) + (self.group0().zx().with_zw(self[e3215], self[e4315]) * geometric_product.group0().yzz().with_w(geometric_product[e425]))
                + (self.group0().ww().with_zw(self[e4315], self[e4125]) * geometric_product.group1().xyx().with_w(geometric_product[e435]))
                + (self.group1().ww().with_zw(self[e25], self[e4235]) * geometric_product.group0().xyx().with_w(geometric_product[e415])),
            // e1, e2, e3, e5
            Simd32x4::from([
                self[e4315] * geometric_product[e435],
                self[e4125] * geometric_product[e415],
                self[e4235] * geometric_product[e425],
                -(self[e35] * geometric_product[e435])
                    - (self[e4235] * geometric_product[e235])
                    - (self[e4315] * geometric_product[e315])
                    - (self[e4125] * geometric_product[e125]),
            ]) - (self.group0().ww().with_zw(self[e4315], self[e15]) * geometric_product.group0().xyx().with_w(geometric_product[e415]))
                - (self.group1().zx().with_zw(self[e45], self[e25]) * geometric_product.group0().yzz().with_w(geometric_product[e425])),
        );
    }
}
impl GeometricQuotient<Motor> for Flector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       18        0
    //    simd3        0        2        0
    //    simd4        8       10        0
    // Totals...
    // yes simd       23       30        0
    //  no simd       47       64        0
    fn geometric_quotient(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let reverse = Motor::from_groups(
            // e415, e425, e435, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            -f32::powi(other[e415], 2) - f32::powi(other[e425], 2) - f32::powi(other[e435], 2) - f32::powi(other[e12345], 2),
        );
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e235, e315, e125, e5
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (self[e4235] * geometric_product[e5]) + (self[e4125] * geometric_product[e315]) + (self[e3215] * geometric_product[e415]) - (self[e4315] * geometric_product[e125]),
                (self[e4235] * geometric_product[e125]) + (self[e4315] * geometric_product[e5]) + (self[e3215] * geometric_product[e425]) - (self[e4125] * geometric_product[e235]),
                (self[e4315] * geometric_product[e235]) + (self[e4125] * geometric_product[e5]) + (self[e3215] * geometric_product[e435]) - (self[e4235] * geometric_product[e315]),
                0.0,
            ]) + (geometric_product.group0().ywwy() * self.group0().zyz().with_w(self[e4315]))
                + (geometric_product.group0().wzxx() * self.group0().xxy().with_w(self[e4235]))
                + (self.group0().www() * geometric_product.group1().xyz()).with_w(self[e4125] * geometric_product[e435])
                - (self.group0().yzxw() * geometric_product.group0().zxyw()),
            // e1, e2, e3, e5
            Simd32x3::from(0.0).with_w(
                (self[e3215] * geometric_product[e12345])
                    - (self[e4235] * geometric_product[e235])
                    - (self[e4315] * geometric_product[e315])
                    - (self[e4125] * geometric_product[e125]),
            ) + (self.group1().yzx() * geometric_product.group0().zxy()).with_w(self[e45] * geometric_product[e5])
                - (self.group0().wwwx() * geometric_product.group0().xyzx())
                - (geometric_product.group0().ywwz() * self.group1().zyz().with_w(self[e35]))
                - (geometric_product.group0().wzxy() * self.group1().xxy().with_w(self[e25])),
        );
    }
}
impl GeometricQuotient<MultiVector> for Flector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       75       97        0
    //    simd2        4        5        0
    //    simd3       24       42        0
    //    simd4       23       23        0
    // Totals...
    // yes simd      126      167        0
    //  no simd      247      325        0
    fn geometric_quotient(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let reverse = MultiVector::from_groups(
            // scalar, e12345
            other.group0(),
            // e1, e2, e3, e4
            other.group1(),
            // e5
            other[e5],
            // e15, e25, e35, e45
            other.group3() * Simd32x4::from(-1.0),
            // e41, e42, e43
            other.group4() * Simd32x3::from(-1.0),
            // e23, e31, e12
            other.group5() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group6() * Simd32x4::from(-1.0),
            // e423, e431, e412
            other.group7() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group8() * Simd32x3::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group9(),
            // e1234
            other[e1234],
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e15] * other[e41])
                + 2.0 * (other[e25] * other[e42])
                + 2.0 * (other[e35] * other[e43])
                + 2.0 * (other[e3215] * other[e1234])
                + f32::powi(other[scalar], 2)
                + f32::powi(other[e1], 2)
                + f32::powi(other[e2], 2)
                + f32::powi(other[e3], 2)
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                + f32::powi(other[e321], 2)
                - f32::powi(other[e12345], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2)
                - 2.0 * (other[e4] * other[e5])
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(other_2[scalar]) * reverse.group0(),
            // e1, e2, e3, e4
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e5
            reverse[e5] * other_2[scalar],
            // e15, e25, e35, e45
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group4(),
            // e23, e31, e12
            Simd32x3::from(other_2[scalar]) * reverse.group5(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group6(),
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group7(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group8(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group9(),
            // e1234
            reverse[e1234] * other_2[scalar],
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e45] * geometric_product[e45])
                    - (self[e4235] * geometric_product[e4235])
                    - (self[e4315] * geometric_product[e4315])
                    - (self[e4125] * geometric_product[e4125]),
                (self[e4315] * geometric_product[e2]) + (self[e4125] * geometric_product[e3]) + (self[e3215] * geometric_product[e4]) - (self[e45] * geometric_product[e321]),
            ]) + (Simd32x2::from([geometric_product[e1234], geometric_product[e1]]) * self.group1().wx())
                - (Simd32x2::from(self[e15]) * Simd32x2::from([geometric_product[e41], geometric_product[e423]]))
                - (Simd32x2::from(self[e25]) * Simd32x2::from([geometric_product[e42], geometric_product[e431]]))
                - (Simd32x2::from(self[e35]) * Simd32x2::from([geometric_product[e43], geometric_product[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                -(self[e15] * geometric_product[e4])
                    - (self[e35] * geometric_product[e431])
                    - (self[e45] * geometric_product[e415])
                    - (self[e4125] * geometric_product[e425])
                    - (self[e3215] * geometric_product[e423]),
                -(self[e15] * geometric_product[e412])
                    - (self[e25] * geometric_product[e4])
                    - (self[e45] * geometric_product[e425])
                    - (self[e4235] * geometric_product[e435])
                    - (self[e3215] * geometric_product[e431]),
                -(self[e25] * geometric_product[e423])
                    - (self[e35] * geometric_product[e4])
                    - (self[e45] * geometric_product[e435])
                    - (self[e4315] * geometric_product[e415])
                    - (self[e3215] * geometric_product[e412]),
                self[e4125] * geometric_product[e412],
            ]) + (geometric_product.group7().zxy() * self.group0().yzx()).with_w(self[e4235] * geometric_product[e423])
                + (self.group1().yzx() * geometric_product.group6().zxy()).with_w(self[e4315] * geometric_product[e431])
                - (geometric_product.group0().yy().with_zw(geometric_product[e12345], self[e45]) * self.group1().xyz().with_w(geometric_product[e4])),
            // e5
            (self[e45] * geometric_product[e5]) + (self[e3215] * geometric_product[e12345]) + (self[e3215] * geometric_product[e321])
                - (self[e15] * geometric_product[e1])
                - (self[e15] * geometric_product[e415])
                - (self[e25] * geometric_product[e2])
                - (self[e25] * geometric_product[e425])
                - (self[e35] * geometric_product[e3])
                - (self[e35] * geometric_product[e435])
                - (self[e4235] * geometric_product[e235])
                - (self[e4315] * geometric_product[e315])
                - (self[e4125] * geometric_product[e125]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e25] * geometric_product[e4125])
                    + (self[e35] * geometric_product[e31])
                    + (self[e45] * geometric_product[e15])
                    + (self[e4235] * geometric_product[e3215])
                    + (self[e4125] * geometric_product[e25]),
                (self[e15] * geometric_product[e12])
                    + (self[e35] * geometric_product[e4235])
                    + (self[e45] * geometric_product[e25])
                    + (self[e4235] * geometric_product[e35])
                    + (self[e4315] * geometric_product[e3215]),
                (self[e15] * geometric_product[e4315])
                    + (self[e45] * geometric_product[e35])
                    + (self[e4315] * geometric_product[e15])
                    + (self[e4125] * geometric_product[e3215])
                    + (self[e3215] * geometric_product[e12]),
                self[e4125] * geometric_product[e12] * -1.0,
            ]) + (Simd32x4::from(geometric_product[scalar]) * self.group0())
                + (self.group1().ww().with_zw(self[e25], geometric_product[e1234]) * geometric_product.group5().xyx().with_w(self[e3215]))
                - (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], self[e25]]) * self.group0().xxy().with_w(geometric_product[e42]))
                - (Simd32x4::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45], self[e35]]) * self.group0().zyz().with_w(geometric_product[e43]))
                - (self.group0().yzxx() * geometric_product.group5().zxy().with_w(geometric_product[e41]))
                - (self.group1().yzx() * geometric_product.group3().zxy()).with_w(self[e4235] * geometric_product[e23])
                - (self.group1().www() * geometric_product.group9().xyz()).with_w(self[e4315] * geometric_product[e31]),
            // e41, e42, e43
            (geometric_product.group4().zxy() * self.group1().yzx())
                - (Simd32x3::from(geometric_product[e1234]) * self.group1().xyz())
                - (Simd32x3::from([self[e45], self[e45], self[e4315]]) * geometric_product.group4().xyx())
                - (Simd32x3::from([self[e4125], self[e4235], self[e45]]) * geometric_product.group4().yzz()),
            // e23, e31, e12
            (Simd32x3::from(self[e45]) * geometric_product.group9().xyz())
                + (Simd32x3::from(geometric_product[e1234]) * self.group0().xyz())
                + (Simd32x3::from([self[e35], self[e15], self[e3215]]) * geometric_product.group4().yzz())
                + (Simd32x3::from([self[e3215], self[e3215], self[e25]]) * geometric_product.group4().xyx())
                + (Simd32x3::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235]]) * self.group1().xxy())
                + (Simd32x3::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45]]) * self.group1().zyz())
                - (geometric_product.group4().zxy() * self.group0().yzx())
                - (self.group1().yzx() * geometric_product.group9().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(self[e4235] * geometric_product[e321]) - (self[e4125] * geometric_product[e2]),
                -(self[e4235] * geometric_product[e3]) - (self[e4315] * geometric_product[e321]),
                -(self[e4315] * geometric_product[e1]) - (self[e4125] * geometric_product[e321]),
                (self[e4315] * geometric_product[e425]) + (self[e4125] * geometric_product[e435]),
            ]) + (self.group1().yzxx() * geometric_product.group1().zxy().with_w(geometric_product[e415]))
                + (self.group0().zx().with_zw(self[e3215], self[e25]) * geometric_product.group7().yzz().with_w(geometric_product[e431]))
                + (self.group1().ww().with_zw(self[e25], self[e15]) * geometric_product.group7().xyx().with_w(geometric_product[e423]))
                + (geometric_product.group1().www() * self.group0().xyz()).with_w(self[e35] * geometric_product[e412])
                - (geometric_product.group1() * self.group0().www().with_w(self[e3215]))
                - (self.group0().yzxw() * geometric_product.group7().zxy().with_w(geometric_product[e12345])),
            // e423, e431, e412
            (geometric_product.group7().zxy() * self.group1().yzx())
                - (Simd32x3::from(geometric_product[e4]) * self.group1().xyz())
                - (Simd32x3::from([self[e45], self[e45], self[e4315]]) * geometric_product.group7().xyx())
                - (Simd32x3::from([self[e4125], self[e4235], self[e45]]) * geometric_product.group7().yzz()),
            // e235, e315, e125
            (Simd32x3::from(self[e3215]) * geometric_product.group1().xyz())
                + (Simd32x3::from(self[e3215]) * geometric_product.group6().xyz())
                + (Simd32x3::from(geometric_product[e12345]) * self.group0().xyz())
                + (Simd32x3::from(geometric_product[e5]) * self.group1().xyz())
                + (Simd32x3::from([self[e45], self[e45], self[e4315]]) * geometric_product.group8().xyx())
                + (Simd32x3::from([self[e4125], self[e4235], self[e45]]) * geometric_product.group8().yzz())
                + (Simd32x3::from([geometric_product[e2], geometric_product[e435], geometric_product[e415]]) * self.group0().zxy())
                + (Simd32x3::from([geometric_product[e321], geometric_product[e3], geometric_product[e1]]) * self.group0().xxy())
                + (self.group0().zyz() * geometric_product.group6().yww())
                - (geometric_product.group8().zxy() * self.group1().yzx())
                - (self.group0().yzx() * geometric_product.group1().zxy())
                - (self.group0().yzx() * geometric_product.group6().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e15] * geometric_product[e1234],
                self[e25] * geometric_product[e1234],
                self[e35] * geometric_product[e1234],
                -(self[e35] * geometric_product[e12])
                    - (self[e4235] * geometric_product[e15])
                    - (self[e4315] * geometric_product[e25])
                    - (self[e4125] * geometric_product[e35])
                    - (self[e3215] * geometric_product[e45]),
            ]) + (Simd32x4::from(geometric_product[scalar]) * self.group1())
                + (self.group0().zx().with_zw(self[e3215], geometric_product[e4315]) * geometric_product.group4().yzz().with_w(self[e25]))
                + (self.group0().ww().with_zw(self[e4315], geometric_product[e4125]) * geometric_product.group5().xyx().with_w(self[e35]))
                + (self.group1().zx().with_zw(self[e45], geometric_product[e3215]) * geometric_product.group5().yzz().with_w(self[e45]))
                + (self.group1().ww().with_zw(self[e25], geometric_product[e4235]) * geometric_product.group4().xyx().with_w(self[e15]))
                - (self.group0().yzxx() * geometric_product.group4().zxy().with_w(geometric_product[e23]))
                - (geometric_product.group5().zxy() * self.group1().yzx()).with_w(self[e25] * geometric_product[e31]),
            // e1234
            (self[e4235] * geometric_product[e41]) + (self[e4315] * geometric_product[e42]) + (self[e4125] * geometric_product[e43]) - (self[e45] * geometric_product[e1234]),
        );
    }
}
impl GeometricQuotient<Plane> for Flector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       16        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       13       20        0
    //  no simd       22       32        0
    fn geometric_quotient(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Plane::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(-f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2)) * other.group0(),
        );
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self[e45] * geometric_product[e4235]) + (self[e4125] * geometric_product[e4315]),
                (self[e45] * geometric_product[e4315]) + (self[e4235] * geometric_product[e4125]),
                (self[e45] * geometric_product[e4125]) + (self[e4315] * geometric_product[e4235]),
                -(self[e4315] * geometric_product[e4315]) - (self[e4125] * geometric_product[e4125]),
            ]) - (self.group1().yzxx() * geometric_product.group0().zxyx()),
            // e15, e25, e35, e3215
            Simd32x4::from([
                -(self[e35] * geometric_product[e4315]) - (self[e3215] * geometric_product[e4235]),
                -(self[e15] * geometric_product[e4125]) - (self[e3215] * geometric_product[e4315]),
                -(self[e25] * geometric_product[e4235]) - (self[e3215] * geometric_product[e4125]),
                (self[e35] * geometric_product[e4125]) + (self[e45] * geometric_product[e3215]),
            ]) + (self.group0().yzxx() * geometric_product.group0().zxyx())
                + (geometric_product.group0().wwwy() * self.group1().xyz().with_w(self[e25])),
        );
    }
}
impl GeometricQuotient<RoundPoint> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       17        0
    //    simd3        3        6        0
    //    simd4        2        5        0
    // Totals...
    // yes simd       15       28        0
    //  no simd       27       55        0
    fn geometric_quotient(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2) - 2.0 * (other[e4] * other[e5]),
        );
        let geometric_product = RoundPoint::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from(other_2[scalar]) * other.group0(), /* e5 */ other[e5] * other_2[scalar]);
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x3::from(geometric_product[e4]) * self.group1().xyz() * Simd32x3::from(-1.0)).with_w(
                (self[e4235] * geometric_product[e1]) + (self[e4315] * geometric_product[e2]) + (self[e4125] * geometric_product[e3]) + (self[e3215] * geometric_product[e4]),
            ),
            // e415, e425, e435, e321
            ((Simd32x3::from(geometric_product[e4]) * self.group0().xyz()) + (self.group1().yzx() * geometric_product.group0().zxy())
                - (Simd32x3::from(self[e45]) * geometric_product.group0().xyz())
                - (self.group1().zxy() * geometric_product.group0().yzx()))
            .with_w(self[e3215] * geometric_product[e4] * -1.0),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e4235] * geometric_product[e5]) + (self[e3215] * geometric_product[e1]),
                (self[e4315] * geometric_product[e5]) + (self[e3215] * geometric_product[e2]),
                (self[e4125] * geometric_product[e5]) + (self[e3215] * geometric_product[e3]),
                -(self[e25] * geometric_product[e2]) - (self[e35] * geometric_product[e3]),
            ]) + (self.group0().zxyw() * geometric_product.group0().yzx().with_w(geometric_product[e5]))
                - (self.group0().yzxx() * geometric_product.group0().zxyx()),
            // e1, e2, e3, e4
            Simd32x4::from(geometric_product[e4]) * self.group0() * Simd32x4::from(-1.0),
        );
    }
}
impl GeometricQuotient<Scalar> for Flector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        0        1
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        2        1
    //  no simd        0        8        1
    fn geometric_quotient(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Scalar::from_groups(/* scalar */ 1.0 / other[scalar]);
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(geometric_product[scalar]) * self.group0(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(geometric_product[scalar]) * self.group1(),
        );
    }
}
impl GeometricQuotient<Sphere> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       14        0
    //    simd3        6       11        0
    //    simd4        0        1        0
    // Totals...
    // yes simd       15       26        0
    //  no simd       27       51        0
    fn geometric_quotient(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e3215] * other[e1234]) - f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2),
        );
        let geometric_product = Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * other.group0(),
            // e1234
            other_2[scalar] * other[e1234],
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x3::from(geometric_product[e1234]) * self.group1().xyz() * Simd32x3::from(-1.0)).with_w(
                (self[e3215] * geometric_product[e1234])
                    - (self[e4235] * geometric_product[e4235])
                    - (self[e4315] * geometric_product[e4315])
                    - (self[e4125] * geometric_product[e4125]),
            ),
            // e23, e31, e12, e45
            ((Simd32x3::from(self[e45]) * geometric_product.group0().xyz())
                + (Simd32x3::from(geometric_product[e1234]) * self.group0().xyz())
                + (self.group1().zxy() * geometric_product.group0().yzx())
                - (self.group1().yzx() * geometric_product.group0().zxy()))
            .with_w(self[e3215] * geometric_product[e1234]),
            // e15, e25, e35, e1234
            ((Simd32x3::from(geometric_product[e3215]) * self.group1().xyz()) + (self.group0().yzx() * geometric_product.group0().zxy())
                - (Simd32x3::from(self[e3215]) * geometric_product.group0().xyz())
                - (self.group0().zxy() * geometric_product.group0().yzx()))
            .with_w(self[e45] * geometric_product[e1234] * -1.0),
            // e4235, e4315, e4125, e3215
            (Simd32x3::from(geometric_product[e1234]) * self.group0().xyz()).with_w(
                (self[e15] * geometric_product[e4235]) + (self[e25] * geometric_product[e4315]) + (self[e35] * geometric_product[e4125]) + (self[e45] * geometric_product[e3215]),
            ),
        );
    }
}
impl GeometricQuotient<VersorEven> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       50       62        0
    //    simd3        0        2        0
    //    simd4       19       24        0
    // Totals...
    // yes simd       69       88        0
    //  no simd      126      164        0
    fn geometric_quotient(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let reverse = VersorEven::from_groups(
            // e423, e431, e412, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e5
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e4
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)
                - f32::powi(other[e12345], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125])
                - 2.0 * (other[e5] * other[e4]),
        );
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e5
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e1, e2, e3, e4
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (self.group1().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e1]))
                + Simd32x3::from(0.0).with_w(
                    (self[e4315] * geometric_product[e2]) + (self[e4125] * geometric_product[e3]) + (self[e3215] * geometric_product[e4]) - (self[e45] * geometric_product[e321]),
                )
                - (Simd32x4::from([geometric_product[e431], geometric_product[e4], geometric_product[e4], geometric_product[e412]]) * self.group1().zyz().with_w(self[e35]))
                - (Simd32x4::from([geometric_product[e4], geometric_product[e412], geometric_product[e423], geometric_product[e431]]) * self.group1().xxy().with_w(self[e25]))
                - (self.group0().wwwx() * geometric_product.group0().xyzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(self[e4235] * geometric_product[e321]) - (self[e4125] * geometric_product[e2]),
                -(self[e4235] * geometric_product[e3]) - (self[e4315] * geometric_product[e321]),
                -(self[e4315] * geometric_product[e1]) - (self[e4125] * geometric_product[e321]),
                (self[e4315] * geometric_product[e425]) + (self[e4125] * geometric_product[e435]),
            ]) + (Simd32x4::from([geometric_product[e431], geometric_product[e4], geometric_product[e4], geometric_product[e431]]) * self.group0().zyzy())
                + (Simd32x4::from([geometric_product[e4], geometric_product[e412], geometric_product[e423], geometric_product[e423]]) * self.group0().xxyx())
                + (self.group1().wwwx() * geometric_product.group0().xyz().with_w(geometric_product[e415]))
                + (self.group1().yzx() * geometric_product.group3().zxy()).with_w(self[e35] * geometric_product[e412])
                - (geometric_product.group3() * self.group0().www().with_w(self[e3215]))
                - (self.group0().yzxw() * geometric_product.group0().zxyw()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e35] * geometric_product[e2])
                    + (self[e45] * geometric_product[e235])
                    + (self[e4235] * geometric_product[e5])
                    + (self[e4125] * geometric_product[e315])
                    + (self[e3215] * geometric_product[e415])
                    + (self[e3215] * geometric_product[e1]),
                (self[e25] * geometric_product[e321])
                    + (self[e45] * geometric_product[e315])
                    + (self[e4235] * geometric_product[e125])
                    + (self[e4315] * geometric_product[e5])
                    + (self[e3215] * geometric_product[e425])
                    + (self[e3215] * geometric_product[e2]),
                (self[e35] * geometric_product[e321])
                    + (self[e45] * geometric_product[e125])
                    + (self[e4315] * geometric_product[e235])
                    + (self[e4125] * geometric_product[e5])
                    + (self[e3215] * geometric_product[e435])
                    + (self[e3215] * geometric_product[e3]),
                -(self[e25] * geometric_product[e2])
                    - (self[e35] * geometric_product[e435])
                    - (self[e35] * geometric_product[e3])
                    - (self[e4235] * geometric_product[e235])
                    - (self[e4315] * geometric_product[e315])
                    - (self[e4125] * geometric_product[e125]),
            ]) + (Simd32x4::from([geometric_product[e12345], geometric_product[e435], geometric_product[e415], geometric_product[e5]]) * self.group0().xxyw())
                + (Simd32x4::from([geometric_product[e425], geometric_product[e12345], geometric_product[e12345], geometric_product[e321]])
                    * self.group0().zyz().with_w(self[e3215]))
                + (Simd32x4::from([geometric_product[e321], geometric_product[e3], geometric_product[e1], geometric_product[e12345]]) * self.group0().xxy().with_w(self[e3215]))
                - (self.group0().yzxx() * geometric_product.group1().zxyx())
                - (self.group0().yzxx() * geometric_product.group3().zxyx())
                - (self.group1().yzx() * geometric_product.group2().zxy()).with_w(self[e25] * geometric_product[e425]),
            // e1, e2, e3, e4
            Simd32x4::from([
                -(self[e35] * geometric_product[e431])
                    - (self[e45] * geometric_product[e415])
                    - (self[e4235] * geometric_product[e12345])
                    - (self[e4125] * geometric_product[e425])
                    - (self[e3215] * geometric_product[e423]),
                -(self[e25] * geometric_product[e4])
                    - (self[e45] * geometric_product[e425])
                    - (self[e4235] * geometric_product[e435])
                    - (self[e4315] * geometric_product[e12345])
                    - (self[e3215] * geometric_product[e431]),
                -(self[e35] * geometric_product[e4])
                    - (self[e45] * geometric_product[e435])
                    - (self[e4315] * geometric_product[e415])
                    - (self[e4125] * geometric_product[e12345])
                    - (self[e3215] * geometric_product[e412]),
                self[e4125] * geometric_product[e412],
            ]) + (self.group1().yzxy() * geometric_product.group1().zxy().with_w(geometric_product[e431]))
                + (geometric_product.group0().zxyx() * self.group0().yzx().with_w(self[e4235]))
                - (Simd32x4::from([geometric_product[e4], geometric_product[e412], geometric_product[e423], geometric_product[e4]]) * self.group0().xxyw()),
        );
    }
}
impl GeometricQuotient<VersorOdd> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       51       62        0
    //    simd3        0        2        0
    //    simd4       19       24        0
    // Totals...
    // yes simd       70       88        0
    //  no simd      127      164        0
    fn geometric_quotient(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let reverse = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + 2.0 * (other[e1234] * other[e3215])
                + f32::powi(other[scalar], 2)
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2),
        );
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x3::from(0.0).with_w(
                (self[e3215] * geometric_product[e1234])
                    - (self[e4235] * geometric_product[e4235])
                    - (self[e4315] * geometric_product[e4315])
                    - (self[e4125] * geometric_product[e4125]),
            ) + (self.group1().yzx() * geometric_product.group0().zxy()).with_w(self[e45] * geometric_product[e45])
                - (Simd32x4::from([geometric_product[e42], geometric_product[e1234], geometric_product[e1234], geometric_product[e43]]) * self.group1().zyz().with_w(self[e35]))
                - (Simd32x4::from([geometric_product[e1234], geometric_product[e43], geometric_product[e41], geometric_product[e42]]) * self.group1().xxy().with_w(self[e25]))
                - (self.group0().wwwx() * geometric_product.group0().xyzx()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e45] * geometric_product[e4235]) + (self[e4235] * geometric_product[e45]) + (self[e4125] * geometric_product[e4315]) + (self[e3215] * geometric_product[e41]),
                (self[e45] * geometric_product[e4315]) + (self[e4235] * geometric_product[e4125]) + (self[e4315] * geometric_product[e45]) + (self[e3215] * geometric_product[e42]),
                (self[e45] * geometric_product[e4125]) + (self[e4315] * geometric_product[e4235]) + (self[e4125] * geometric_product[e45]) + (self[e3215] * geometric_product[e43]),
                -(self[e35] * geometric_product[e43]) - (self[e4235] * geometric_product[e23]) - (self[e4315] * geometric_product[e31]) - (self[e4125] * geometric_product[e12]),
            ]) + (Simd32x4::from([geometric_product[e42], geometric_product[e1234], geometric_product[e1234], geometric_product[e1234]]) * self.group0().zyz().with_w(self[e3215]))
                + (Simd32x4::from([geometric_product[e1234], geometric_product[e43], geometric_product[e41], geometric_product[scalar]]) * self.group0().xxyw())
                - (self.group0().yzxx() * geometric_product.group0().zxyx())
                - (self.group1().yzx() * geometric_product.group3().zxy()).with_w(self[e25] * geometric_product[e42]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e45] * geometric_product[e15]) + (self[e4235] * geometric_product[e3215]) + (self[e4125] * geometric_product[e25]) + (self[e3215] * geometric_product[e23])
                    - (self[e25] * geometric_product[e12])
                    - (self[e35] * geometric_product[e4315])
                    - (self[e4315] * geometric_product[e35])
                    - (self[e3215] * geometric_product[e4235]),
                (self[e45] * geometric_product[e25]) + (self[e4235] * geometric_product[e35]) + (self[e4315] * geometric_product[e3215]) + (self[e3215] * geometric_product[e31])
                    - (self[e25] * geometric_product[e45])
                    - (self[e35] * geometric_product[e23])
                    - (self[e4125] * geometric_product[e15])
                    - (self[e3215] * geometric_product[e4315]),
                (self[e45] * geometric_product[e35]) + (self[e4315] * geometric_product[e15]) + (self[e4125] * geometric_product[e3215]) + (self[e3215] * geometric_product[e12])
                    - (self[e25] * geometric_product[e4235])
                    - (self[e35] * geometric_product[e45])
                    - (self[e4235] * geometric_product[e25])
                    - (self[e3215] * geometric_product[e4125]),
                0.0,
            ]) + (Simd32x4::from([geometric_product[scalar], geometric_product[e12], geometric_product[e4315], geometric_product[e41]]) * self.group0().xxx().with_w(self[e4235]))
                + (Simd32x4::from([geometric_product[e31], geometric_product[e4235], geometric_product[scalar], geometric_product[e43]]) * self.group0().zzz().with_w(self[e4125]))
                + (Simd32x4::from([geometric_product[e4125], geometric_product[scalar], geometric_product[e23], geometric_product[e42]]) * self.group0().yyy().with_w(self[e4315]))
                - (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e31], geometric_product[e1234]]) * self.group0().xxxw()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e3215] * geometric_product[e41],
                self[e3215] * geometric_product[e42],
                self[e3215] * geometric_product[e43],
                -(self[e35] * geometric_product[e12])
                    - (self[e4235] * geometric_product[e15])
                    - (self[e4315] * geometric_product[e25])
                    - (self[e4125] * geometric_product[e35])
                    - (self[e3215] * geometric_product[e45]),
            ]) + (Simd32x4::from([geometric_product[e42], geometric_product[e1234], geometric_product[e1234], geometric_product[e4315]]) * self.group0().zyzy())
                + (Simd32x4::from([geometric_product[scalar], geometric_product[e12], geometric_product[e23], geometric_product[e3215]]) * self.group1().xxy().with_w(self[e45]))
                + (Simd32x4::from([geometric_product[e31], geometric_product[scalar], geometric_product[scalar], geometric_product[scalar]]) * self.group1().zyzw())
                + (Simd32x4::from([geometric_product[e1234], geometric_product[e43], geometric_product[e41], geometric_product[e4235]]) * self.group0().xxyx())
                + (self.group0().wwwz() * geometric_product.group1().xyz().with_w(geometric_product[e4125]))
                - (self.group0().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e23]))
                - (geometric_product.group1().zxyy() * self.group1().yzx().with_w(self[e25])),
        );
    }
}
impl std::ops::Div<GeometricQuotientInfix> for Line {
    type Output = GeometricQuotientInfixPartial<Line>;
    fn div(self, _rhs: GeometricQuotientInfix) -> Self::Output {
        GeometricQuotientInfixPartial(self)
    }
}
impl GeometricQuotient<AntiCircleRotor> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       22       43        0
    //    simd3        0        8        0
    //    simd4        9        7        0
    // Totals...
    // yes simd       31       58        0
    //  no simd       58       95        0
    fn geometric_quotient(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiCircleRotor::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, scalar
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                + f32::powi(other[scalar], 2)
                - f32::powi(other[e45], 2),
        );
        let geometric_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                geometric_product[e42] * self[e435],
                geometric_product[e43] * self[e415],
                geometric_product[e41] * self[e425],
                -(geometric_product[e42] * self[e315])
                    - (geometric_product[e43] * self[e125])
                    - (geometric_product[e23] * self[e415])
                    - (geometric_product[e31] * self[e425])
                    - (geometric_product[e12] * self[e435]),
            ]) - (geometric_product.group0().zxy() * self.group0().yzx()).with_w(geometric_product[e41] * self[e235]),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(geometric_product[e43] * self[e315]) - (geometric_product[e12] * self[e425]),
                -(geometric_product[e41] * self[e125]) - (geometric_product[e23] * self[e435]),
                -(geometric_product[e42] * self[e235]) - (geometric_product[e31] * self[e415]),
                0.0,
            ]) + (Simd32x4::from([geometric_product[e31], geometric_product[scalar], geometric_product[scalar], self[e125]]) * self.group0().zyz().with_w(geometric_product[e43]))
                + (Simd32x4::from([geometric_product[scalar], geometric_product[e12], geometric_product[e23], self[e315]]) * self.group0().xxy().with_w(geometric_product[e42]))
                + (geometric_product.group0().yzx() * self.group1().zxy()).with_w(geometric_product[e41] * self[e235]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (geometric_product[e31] * self[e125]) + (geometric_product[e25] * self[e435]) + (geometric_product[scalar] * self[e235]),
                (geometric_product[e12] * self[e235]) + (geometric_product[e35] * self[e415]) + (geometric_product[scalar] * self[e315]),
                (geometric_product[e23] * self[e315]) + (geometric_product[e15] * self[e425]) + (geometric_product[scalar] * self[e125]),
                -(geometric_product[e23] * self[e235]) - (geometric_product[e31] * self[e315]) - (geometric_product[e12] * self[e125]),
            ]) - (geometric_product.group2().zxyx() * self.group0().yzx().with_w(self[e415]))
                - (self.group1().xyx() * geometric_product.group1().wwy()).with_w(geometric_product[e25] * self[e425])
                - (self.group1().yzz() * geometric_product.group1().zxw()).with_w(geometric_product[e35] * self[e435]),
            // e1, e2, e3, e4
            Simd32x4::from([
                geometric_product[e43] * self[e315],
                geometric_product[e41] * self[e125],
                geometric_product[e42] * self[e235],
                geometric_product[e43] * self[e435] * -1.0,
            ]) - (self.group0() * geometric_product.group1().www()).with_w(geometric_product[e42] * self[e425])
                - (geometric_product.group0().yzx() * self.group1().zxy()).with_w(geometric_product[e41] * self[e415]),
        );
    }
}
impl GeometricQuotient<AntiDipoleInversion> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       60        0
    //    simd3        0       12        0
    //    simd4       12        7        0
    // Totals...
    // yes simd       52       79        0
    //  no simd       88      124        0
    fn geometric_quotient(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e4
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125])
                - 2.0 * (other[e4] * other[e5]),
        );
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e4
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e1, e2, e3, e5
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(geometric_product[e431] * self[e435]) - (geometric_product[e4] * self[e415]),
                -(geometric_product[e412] * self[e415]) - (geometric_product[e4] * self[e425]),
                -(geometric_product[e423] * self[e425]) - (geometric_product[e4] * self[e435]),
                (geometric_product[e431] * self[e315])
                    + (geometric_product[e412] * self[e125])
                    + (geometric_product[e415] * self[e415])
                    + (geometric_product[e425] * self[e425])
                    + (geometric_product[e435] * self[e435]),
            ]) + (geometric_product.group0().zxy() * self.group0().yzx()).with_w(geometric_product[e423] * self[e235]),
            // e23, e31, e12, e45
            Simd32x3::from(0.0).with_w(geometric_product[e412] * self[e125])
                + (geometric_product.group0().zxy() * self.group1().yzx()).with_w(geometric_product[e423] * self[e235])
                + (self.group0().yzx() * geometric_product.group1().zxy()).with_w(geometric_product[e431] * self[e315])
                - (self.group1() * geometric_product.group2().www()).with_w(geometric_product[e3] * self[e435])
                - (geometric_product.group0().yzx() * self.group1().zxy()).with_w(geometric_product[e1] * self[e415])
                - (self.group0().zxy() * geometric_product.group1().yzx()).with_w(geometric_product[e2] * self[e425]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(geometric_product[e425] * self[e125])
                    - (geometric_product[e321] * self[e235])
                    - (geometric_product[e315] * self[e435])
                    - (geometric_product[e2] * self[e125])
                    - (geometric_product[e5] * self[e415]),
                -(geometric_product[e435] * self[e235])
                    - (geometric_product[e321] * self[e315])
                    - (geometric_product[e125] * self[e415])
                    - (geometric_product[e3] * self[e235])
                    - (geometric_product[e5] * self[e425]),
                -(geometric_product[e415] * self[e315])
                    - (geometric_product[e321] * self[e125])
                    - (geometric_product[e235] * self[e425])
                    - (geometric_product[e1] * self[e315])
                    - (geometric_product[e5] * self[e435]),
                0.0,
            ]) + (self.group0().yzx() * geometric_product.group2().zxy()).with_w(geometric_product[e423] * self[e415])
                + (self.group1().yzx() * geometric_product.group1().zxy()).with_w(geometric_product[e431] * self[e425])
                + (self.group1().yzx() * geometric_product.group3().zxy()).with_w(geometric_product[e412] * self[e435]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(geometric_product[e431] * self[e125]) - (geometric_product[e4] * self[e235]) - (geometric_product[e3] * self[e425]),
                -(geometric_product[e412] * self[e235]) - (geometric_product[e4] * self[e315]) - (geometric_product[e1] * self[e435]),
                -(geometric_product[e423] * self[e315]) - (geometric_product[e4] * self[e125]) - (geometric_product[e2] * self[e415]),
                (geometric_product[e415] * self[e235])
                    + (geometric_product[e425] * self[e315])
                    + (geometric_product[e435] * self[e125])
                    + (geometric_product[e1] * self[e235])
                    + (geometric_product[e2] * self[e315])
                    + (geometric_product[e3] * self[e125]),
            ]) + (Simd32x4::from([geometric_product[e321], geometric_product[e3], geometric_product[e1], geometric_product[e315]]) * self.group0().xxy().with_w(self[e425]))
                + (Simd32x4::from([geometric_product[e2], geometric_product[e321], geometric_product[e321], geometric_product[e125]]) * self.group0().zyz().with_w(self[e435]))
                + (geometric_product.group0().zxy() * self.group1().yzx()).with_w(geometric_product[e235] * self[e415]),
        );
    }
}
impl GeometricQuotient<AntiDualNum> for Line {
    type Output = Line;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd2        0        1        0
    //    simd3        1        3        0
    // Totals...
    // yes simd        1        4        0
    //  no simd        3       11        0
    fn geometric_quotient(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDualNum::from_groups(/* e3215, scalar */ Simd32x2::from(f32::powi(other[scalar], -2)) * other.group0());
        return Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(geometric_product[scalar]) * self.group0(),
            // e235, e315, e125
            (Simd32x3::from(geometric_product[e3215]) * self.group0()) + (Simd32x3::from(geometric_product[scalar]) * self.group1()),
        );
    }
}
impl GeometricQuotient<AntiFlatPoint> for Line {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        7        0
    //    simd3        0        4        0
    //    simd4        2        1        0
    // Totals...
    // yes simd        4       12        0
    //  no simd       10       23        0
    fn geometric_quotient(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlatPoint::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(f32::powi(other[e321], -2)) * Simd32x4::from([other[e235] * -1.0, other[e315] * -1.0, other[e125] * -1.0, other[e321] * -1.0]),
        );
        return Flector::from_groups(
            // e15, e25, e35, e45
            (self.group0().yzx() * geometric_product.group0().zxy()).with_w(0.0)
                - (Simd32x3::from(geometric_product[e321]) * self.group1()).with_w(0.0)
                - (self.group0().zxy() * geometric_product.group0().yzx()).with_w(0.0),
            // e4235, e4315, e4125, e3215
            (Simd32x3::from(geometric_product[e321]) * self.group0())
                .with_w((geometric_product[e235] * self[e415]) + (geometric_product[e315] * self[e425]) + (geometric_product[e125] * self[e435])),
        );
    }
}
impl GeometricQuotient<AntiFlector> for Line {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       19        0
    //    simd4        5        8        0
    // Totals...
    // yes simd       17       27        0
    //  no simd       32       51        0
    fn geometric_quotient(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiFlector::from_groups(/* e235, e315, e125, e321 */ other.group0() * Simd32x4::from(-1.0), /* e1, e2, e3, e5 */ other.group1());
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2),
        );
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e1, e2, e3, e5
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (geometric_product[e125] * self[e425]) + (geometric_product[e3] * self[e315]) - (geometric_product[e2] * self[e125]),
                (geometric_product[e235] * self[e435]) + (geometric_product[e1] * self[e125]) - (geometric_product[e321] * self[e315]),
                (geometric_product[e315] * self[e415]) + (geometric_product[e2] * self[e235]) - (geometric_product[e321] * self[e125]),
                0.0,
            ]) - (Simd32x4::from([geometric_product[e315], geometric_product[e5], geometric_product[e5], geometric_product[e2]]) * self.group0().zyz().with_w(self[e425]))
                - (Simd32x4::from([geometric_product[e321], geometric_product[e3], geometric_product[e1], geometric_product[e3]]) * self.group1().xxy().with_w(self[e435]))
                - (Simd32x4::from([geometric_product[e5], geometric_product[e125], geometric_product[e235], geometric_product[e1]]) * self.group0().xxy().with_w(self[e415])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                geometric_product[e3] * self[e425] * -1.0,
                geometric_product[e1] * self[e435] * -1.0,
                geometric_product[e2] * self[e415] * -1.0,
                (geometric_product[e125] * self[e435]) + (geometric_product[e1] * self[e235]) + (geometric_product[e2] * self[e315]) + (geometric_product[e3] * self[e125]),
            ]) + (Simd32x4::from([geometric_product[e321], geometric_product[e3], geometric_product[e1], geometric_product[e235]]) * self.group0().xxy().with_w(self[e415]))
                + (Simd32x4::from([geometric_product[e2], geometric_product[e321], geometric_product[e321], geometric_product[e315]]) * self.group0().zyz().with_w(self[e425])),
        );
    }
}
impl GeometricQuotient<AntiLine> for Line {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       18        0
    //    simd3        0        7        0
    //    simd4        3        0        0
    // Totals...
    // yes simd       12       25        0
    //  no simd       21       39        0
    fn geometric_quotient(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiLine::from_groups(
            // e23, e31, e12
            other.group0() * Simd32x3::from(-1.0),
            // e15, e25, e35
            other.group1() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(/* scalar */ f32::powi(other[e23], 2) + f32::powi(other[e31], 2) + f32::powi(other[e12], 2));
        let geometric_product = AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e15, e25, e35
            Simd32x3::from(other_2[scalar]) * reverse.group1(),
        );
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                geometric_product[e31] * self[e435],
                geometric_product[e12] * self[e415],
                geometric_product[e23] * self[e425],
                -(geometric_product[e31] * self[e425]) - (geometric_product[e12] * self[e435]),
            ]) - (geometric_product.group0().zxy() * self.group0().yzx()).with_w(geometric_product[e23] * self[e415]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (geometric_product[e31] * self[e125]) + (geometric_product[e25] * self[e435]),
                (geometric_product[e12] * self[e235]) + (geometric_product[e35] * self[e415]),
                (geometric_product[e23] * self[e315]) + (geometric_product[e15] * self[e425]),
                -(geometric_product[e12] * self[e125]) - (geometric_product[e15] * self[e415]) - (geometric_product[e25] * self[e425]) - (geometric_product[e35] * self[e435]),
            ]) - (geometric_product.group0().zxy() * self.group1().yzx()).with_w(geometric_product[e23] * self[e235])
                - (geometric_product.group1().zxy() * self.group0().yzx()).with_w(geometric_product[e31] * self[e315]),
        );
    }
}
impl GeometricQuotient<AntiMotor> for Line {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       25        0
    //    simd3        0        1        0
    //    simd4        3        6        0
    // Totals...
    // yes simd       22       32        0
    //  no simd       31       52        0
    fn geometric_quotient(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, e3215
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e23], 2) + f32::powi(other[e31], 2) + f32::powi(other[e12], 2) + f32::powi(other[scalar], 2),
        );
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e15, e25, e35, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (geometric_product[e31] * self[e435]) + (geometric_product[scalar] * self[e415]),
                (geometric_product[e12] * self[e415]) + (geometric_product[scalar] * self[e425]),
                (geometric_product[e23] * self[e425]) + (geometric_product[scalar] * self[e435]),
                -(geometric_product[e31] * self[e425]) - (geometric_product[e12] * self[e435]),
            ]) - (geometric_product.group0().zxyx() * self.group0().yzx().with_w(self[e415])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (geometric_product[e31] * self[e125]) + (geometric_product[scalar] * self[e235]) + (geometric_product[e25] * self[e435]) + (geometric_product[e3215] * self[e415]),
                (geometric_product[e12] * self[e235]) + (geometric_product[scalar] * self[e315]) + (geometric_product[e35] * self[e415]) + (geometric_product[e3215] * self[e425]),
                (geometric_product[e23] * self[e315]) + (geometric_product[scalar] * self[e125]) + (geometric_product[e15] * self[e425]) + (geometric_product[e3215] * self[e435]),
                -(geometric_product[e23] * self[e235]) - (geometric_product[e31] * self[e315]) - (geometric_product[e12] * self[e125]) - (geometric_product[e35] * self[e435]),
            ]) - (geometric_product.group1().zxyx() * self.group0().yzx().with_w(self[e415]))
                - (self.group1().yzx() * geometric_product.group0().zxy()).with_w(geometric_product[e25] * self[e425]),
        );
    }
}
impl GeometricQuotient<AntiPlane> for Line {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       13        0
    //    simd4        3        4        0
    // Totals...
    // yes simd        6       17        0
    //  no simd       15       29        0
    fn geometric_quotient(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiPlane::from_groups(
            // e1, e2, e3, e5
            Simd32x4::from(f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)) * other.group0(),
        );
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                geometric_product[e3] * self[e315],
                geometric_product[e1] * self[e125],
                geometric_product[e2] * self[e235],
                geometric_product[e3] * self[e435] * -1.0,
            ]) - (geometric_product.group0().yzxy() * self.group1().zxy().with_w(self[e425]))
                - (geometric_product.group0().wwwx() * self.group0().with_w(self[e415])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                geometric_product[e3] * self[e425] * -1.0,
                geometric_product[e1] * self[e435] * -1.0,
                geometric_product[e2] * self[e415] * -1.0,
                (geometric_product[e2] * self[e315]) + (geometric_product[e3] * self[e125]),
            ]) + (geometric_product.group0().yzxx() * self.group0().zxy().with_w(self[e235])),
        );
    }
}
impl GeometricQuotient<AntiScalar> for Line {
    type Output = AntiLine;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        1
    //    simd3        0        4        0
    // Totals...
    // yes simd        0        5        1
    //  no simd        0       13        1
    fn geometric_quotient(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiScalar::from_groups(/* e12345 */ 1.0 / other[e12345] * -1.0);
        return AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(geometric_product[e12345]) * self.group0() * Simd32x3::from(-1.0),
            // e15, e25, e35
            Simd32x3::from(geometric_product[e12345]) * self.group1() * Simd32x3::from(-1.0),
        );
    }
}
impl GeometricQuotient<Circle> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       22       51        0
    //    simd3        0       11        0
    //    simd4        7        2        0
    // Totals...
    // yes simd       29       64        0
    //  no simd       50       92        0
    fn geometric_quotient(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let reverse = Circle::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125
            other.group2() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group2(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                geometric_product[e431] * self[e435] * -1.0,
                geometric_product[e412] * self[e415] * -1.0,
                geometric_product[e423] * self[e425] * -1.0,
                (geometric_product[e431] * self[e315])
                    + (geometric_product[e412] * self[e125])
                    + (geometric_product[e415] * self[e415])
                    + (geometric_product[e425] * self[e425])
                    + (geometric_product[e435] * self[e435]),
            ]) + (geometric_product.group0().zxy() * self.group0().yzx()).with_w(geometric_product[e423] * self[e235]),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(geometric_product[e431] * self[e125]) - (geometric_product[e425] * self[e435]),
                -(geometric_product[e412] * self[e235]) - (geometric_product[e435] * self[e415]),
                -(geometric_product[e423] * self[e315]) - (geometric_product[e415] * self[e425]),
                geometric_product[e412] * self[e125],
            ]) + (geometric_product.group0().zxy() * self.group1().yzx()).with_w(geometric_product[e423] * self[e235])
                + (self.group0().yzx() * geometric_product.group1().zxy()).with_w(geometric_product[e431] * self[e315]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(geometric_product[e425] * self[e125]) - (geometric_product[e321] * self[e235]) - (geometric_product[e315] * self[e435]),
                -(geometric_product[e435] * self[e235]) - (geometric_product[e321] * self[e315]) - (geometric_product[e125] * self[e415]),
                -(geometric_product[e415] * self[e315]) - (geometric_product[e321] * self[e125]) - (geometric_product[e235] * self[e425]),
                geometric_product[e412] * self[e435],
            ]) + (geometric_product.group2().zxy() * self.group0().yzx()).with_w(geometric_product[e423] * self[e415])
                + (self.group1().yzx() * geometric_product.group1().zxy()).with_w(geometric_product[e431] * self[e425]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                geometric_product[e431] * self[e125] * -1.0,
                geometric_product[e412] * self[e235] * -1.0,
                geometric_product[e423] * self[e315] * -1.0,
                (geometric_product[e415] * self[e235]) + (geometric_product[e425] * self[e315]) + (geometric_product[e435] * self[e125]) + (geometric_product[e125] * self[e435]),
            ]) + (self.group0() * geometric_product.group1().www()).with_w(geometric_product[e315] * self[e425])
                + (geometric_product.group0().zxy() * self.group1().yzx()).with_w(geometric_product[e235] * self[e415]),
        );
    }
}
impl GeometricQuotient<CircleRotor> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       29       57        0
    //    simd3        0        9        0
    //    simd4        7        4        0
    // Totals...
    // yes simd       36       70        0
    //  no simd       57      100        0
    fn geometric_quotient(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let reverse = CircleRotor::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e12345
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - f32::powi(other[e12345], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                geometric_product[e431] * self[e435] * -1.0,
                geometric_product[e412] * self[e415] * -1.0,
                geometric_product[e423] * self[e425] * -1.0,
                (geometric_product[e431] * self[e315])
                    + (geometric_product[e412] * self[e125])
                    + (geometric_product[e415] * self[e415])
                    + (geometric_product[e425] * self[e425])
                    + (geometric_product[e435] * self[e435]),
            ]) + (geometric_product.group0().zxy() * self.group0().yzx()).with_w(geometric_product[e423] * self[e235]),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(geometric_product[e431] * self[e125]) - (geometric_product[e425] * self[e435]) - (geometric_product[e12345] * self[e415]),
                -(geometric_product[e412] * self[e235]) - (geometric_product[e435] * self[e415]) - (geometric_product[e12345] * self[e425]),
                -(geometric_product[e423] * self[e315]) - (geometric_product[e415] * self[e425]) - (geometric_product[e12345] * self[e435]),
                geometric_product[e412] * self[e125],
            ]) + (geometric_product.group0().zxy() * self.group1().yzx()).with_w(geometric_product[e423] * self[e235])
                + (self.group0().yzx() * geometric_product.group1().zxy()).with_w(geometric_product[e431] * self[e315]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(geometric_product[e425] * self[e125])
                    - (geometric_product[e321] * self[e235])
                    - (geometric_product[e315] * self[e435])
                    - (geometric_product[e12345] * self[e235]),
                -(geometric_product[e435] * self[e235])
                    - (geometric_product[e321] * self[e315])
                    - (geometric_product[e125] * self[e415])
                    - (geometric_product[e12345] * self[e315]),
                -(geometric_product[e415] * self[e315])
                    - (geometric_product[e321] * self[e125])
                    - (geometric_product[e235] * self[e425])
                    - (geometric_product[e12345] * self[e125]),
                geometric_product[e412] * self[e435],
            ]) + (self.group0().yzx() * geometric_product.group2().zxy()).with_w(geometric_product[e423] * self[e415])
                + (self.group1().yzx() * geometric_product.group1().zxy()).with_w(geometric_product[e431] * self[e425]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                geometric_product[e431] * self[e125] * -1.0,
                geometric_product[e412] * self[e235] * -1.0,
                geometric_product[e423] * self[e315] * -1.0,
                (geometric_product[e415] * self[e235]) + (geometric_product[e425] * self[e315]) + (geometric_product[e435] * self[e125]) + (geometric_product[e125] * self[e435]),
            ]) + (self.group0() * geometric_product.group1().www()).with_w(geometric_product[e315] * self[e425])
                + (geometric_product.group0().zxy() * self.group1().yzx()).with_w(geometric_product[e235] * self[e415]),
        );
    }
}
impl GeometricQuotient<Dipole> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       43        0
    //    simd3        0       12        0
    //    simd4        8        2        0
    // Totals...
    // yes simd       26       57        0
    //  no simd       50       87        0
    fn geometric_quotient(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let reverse = Dipole::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35
            other.group2() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2),
        );
        let geometric_product = Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35
            Simd32x3::from(other_2[scalar]) * reverse.group2(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                geometric_product[e42] * self[e435],
                geometric_product[e43] * self[e415],
                geometric_product[e41] * self[e425],
                -(geometric_product[e42] * self[e315])
                    - (geometric_product[e43] * self[e125])
                    - (geometric_product[e23] * self[e415])
                    - (geometric_product[e31] * self[e425])
                    - (geometric_product[e12] * self[e435]),
            ]) - (geometric_product.group0().zxy() * self.group0().yzx()).with_w(geometric_product[e41] * self[e235]),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(geometric_product[e43] * self[e315]) - (geometric_product[e12] * self[e425]),
                -(geometric_product[e41] * self[e125]) - (geometric_product[e23] * self[e435]),
                -(geometric_product[e42] * self[e235]) - (geometric_product[e31] * self[e415]),
                geometric_product[e43] * self[e125],
            ]) + (geometric_product.group0().yzx() * self.group1().zxy()).with_w(geometric_product[e41] * self[e235])
                + (self.group0().zxy() * geometric_product.group1().yzx()).with_w(geometric_product[e42] * self[e315]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (geometric_product[e31] * self[e125]) + (geometric_product[e25] * self[e435]),
                (geometric_product[e12] * self[e235]) + (geometric_product[e35] * self[e415]),
                (geometric_product[e23] * self[e315]) + (geometric_product[e15] * self[e425]),
                -(geometric_product[e23] * self[e235]) - (geometric_product[e31] * self[e315]) - (geometric_product[e12] * self[e125]),
            ]) - (geometric_product.group2().zxy() * self.group0().yzx()).with_w(geometric_product[e15] * self[e415])
                - (self.group1().xyx() * geometric_product.group1().wwy()).with_w(geometric_product[e25] * self[e425])
                - (self.group1().yzz() * geometric_product.group1().zxw()).with_w(geometric_product[e35] * self[e435]),
            // e1, e2, e3, e4
            Simd32x4::from([
                geometric_product[e43] * self[e315],
                geometric_product[e41] * self[e125],
                geometric_product[e42] * self[e235],
                geometric_product[e43] * self[e435] * -1.0,
            ]) - (self.group0() * geometric_product.group1().www()).with_w(geometric_product[e42] * self[e425])
                - (geometric_product.group0().yzx() * self.group1().zxy()).with_w(geometric_product[e41] * self[e415]),
        );
    }
}
impl GeometricQuotient<DipoleInversion> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       29       47        0
    //    simd3        0        7        0
    //    simd4       14       14        0
    // Totals...
    // yes simd       43       68        0
    //  no simd       85      124        0
    fn geometric_quotient(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let reverse = DipoleInversion::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + 2.0 * (other[e1234] * other[e3215])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2),
        );
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (geometric_product[e42] * self[e435]) + (geometric_product[e1234] * self[e415]),
                (geometric_product[e43] * self[e415]) + (geometric_product[e1234] * self[e425]),
                (geometric_product[e41] * self[e425]) + (geometric_product[e1234] * self[e435]),
                -(geometric_product[e42] * self[e315])
                    - (geometric_product[e43] * self[e125])
                    - (geometric_product[e23] * self[e415])
                    - (geometric_product[e31] * self[e425])
                    - (geometric_product[e12] * self[e435]),
            ]) - (geometric_product.group0().zxy() * self.group0().yzx()).with_w(geometric_product[e41] * self[e235]),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(geometric_product[e43] * self[e315]) - (geometric_product[e12] * self[e425]),
                -(geometric_product[e41] * self[e125]) - (geometric_product[e23] * self[e435]),
                -(geometric_product[e42] * self[e235]) - (geometric_product[e31] * self[e415]),
                (geometric_product[e4235] * self[e415]) + (geometric_product[e4315] * self[e425]) + (geometric_product[e4125] * self[e435]),
            ]) + (self.group1() * geometric_product.group2().www()).with_w(geometric_product[e43] * self[e125])
                + (geometric_product.group0().yzx() * self.group1().zxy()).with_w(geometric_product[e41] * self[e235])
                + (self.group0().zxy() * geometric_product.group1().yzx()).with_w(geometric_product[e42] * self[e315]),
            // e235, e315, e125, e5
            Simd32x4::from([
                geometric_product[e31] * self[e125],
                geometric_product[e4235] * self[e125],
                geometric_product[e23] * self[e315],
                -(geometric_product[e31] * self[e315]) - (geometric_product[e12] * self[e125]),
            ]) + (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], geometric_product[e4315]]) * self.group0().zyz().with_w(self[e315]))
                + (Simd32x4::from([geometric_product[e4125], geometric_product[e12], geometric_product[e4315], geometric_product[e4125]]) * self.group1().yxx().with_w(self[e125]))
                + (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e4235]]) * self.group0().xxy().with_w(self[e235]))
                - (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e31], geometric_product[e25]]) * self.group1().xxx().with_w(self[e425]))
                - (Simd32x4::from([geometric_product[e4315], geometric_product[e23], geometric_product[e45], geometric_product[e23]]) * self.group1().zzz().with_w(self[e235]))
                - (geometric_product.group2().zxyx() * self.group0().yzx().with_w(self[e415]))
                - (geometric_product.group1().zw().with_zw(geometric_product[e4235], geometric_product[e35]) * self.group1().yyy().with_w(self[e435])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (geometric_product[e43] * self[e315]) + (geometric_product[e4125] * self[e425]) - (geometric_product[e1234] * self[e235]),
                (geometric_product[e41] * self[e125]) + (geometric_product[e4235] * self[e435]) - (geometric_product[e1234] * self[e315]),
                (geometric_product[e42] * self[e235]) + (geometric_product[e4315] * self[e415]) - (geometric_product[e1234] * self[e125]),
                0.0,
            ]) - (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], self[e425]]) * self.group0().xxy().with_w(geometric_product[e42]))
                - (Simd32x4::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45], self[e435]]) * self.group0().zyz().with_w(geometric_product[e43]))
                - (geometric_product.group0().yzx() * self.group1().zxy()).with_w(geometric_product[e41] * self[e415]),
        );
    }
}
impl GeometricQuotient<DualNum> for Line {
    type Output = AntiLine;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd2        0        1        0
    //    simd3        1        4        0
    // Totals...
    // yes simd        1        6        0
    //  no simd        3       15        0
    fn geometric_quotient(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DualNum::from_groups(/* e5, e12345 */ Simd32x2::from(f32::powi(other[e12345], -2) * -1.0) * other.group0());
        return AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(geometric_product[e12345]) * self.group0() * Simd32x3::from(-1.0),
            // e15, e25, e35
            -(Simd32x3::from(geometric_product[e5]) * self.group0()) - (Simd32x3::from(geometric_product[e12345]) * self.group1()),
        );
    }
}
impl GeometricQuotient<FlatPoint> for Line {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        8        0
    //    simd3        0        5        0
    //    simd4        2        1        0
    // Totals...
    // yes simd        4       14        0
    //  no simd       10       27        0
    fn geometric_quotient(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = FlatPoint::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(f32::powi(other[e45], -2) * -1.0) * Simd32x4::from([other[e15] * -1.0, other[e25] * -1.0, other[e35] * -1.0, other[e45] * -1.0]),
        );
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            (self.group0().zxy() * geometric_product.group0().yzx()).with_w(0.0)
                - (Simd32x3::from(geometric_product[e45]) * self.group1()).with_w(0.0)
                - (self.group0().yzx() * geometric_product.group0().zxy()).with_w(0.0),
            // e1, e2, e3, e5
            (Simd32x3::from(geometric_product[e45]) * self.group0() * Simd32x3::from(-1.0))
                .with_w(-(geometric_product[e15] * self[e415]) - (geometric_product[e25] * self[e425]) - (geometric_product[e35] * self[e435])),
        );
    }
}
impl GeometricQuotient<Flector> for Line {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       12        0
    //    simd4        6        9        0
    // Totals...
    // yes simd       17       21        0
    //  no simd       35       48        0
    fn geometric_quotient(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let reverse = Flector::from_groups(
            // e15, e25, e35, e45
            other.group0() * Simd32x4::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group1(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            -f32::powi(other[e45], 2) - f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2),
        );
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                -(geometric_product[e35] * self[e425]) - (geometric_product[e45] * self[e235]) - (geometric_product[e4315] * self[e125]),
                -(geometric_product[e15] * self[e435]) - (geometric_product[e45] * self[e315]) - (geometric_product[e4125] * self[e235]),
                -(geometric_product[e25] * self[e415]) - (geometric_product[e45] * self[e125]) - (geometric_product[e4235] * self[e315]),
                0.0,
            ]) + (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], geometric_product[e4315]]) * self.group0().zyz().with_w(self[e425]))
                + (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e4235]]) * self.group0().xxy().with_w(self[e415]))
                + (geometric_product.group1().zxyz() * self.group1().yzx().with_w(self[e435])),
            // e1, e2, e3, e5
            (geometric_product.group1().zxyx() * self.group0().yzx().with_w(self[e235]))
                + Simd32x3::from(0.0).with_w((geometric_product[e4315] * self[e315]) + (geometric_product[e4125] * self[e125]) - (geometric_product[e35] * self[e435]))
                - (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], geometric_product[e15]]) * self.group0().xxy().with_w(self[e415]))
                - (Simd32x4::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45], geometric_product[e25]]) * self.group0().zyz().with_w(self[e425])),
        );
    }
}
impl GeometricQuotient<Line> for Line {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       21        0
    //    simd3        0        7        0
    //    simd4        3        0        0
    // Totals...
    // yes simd       12       28        0
    //  no simd       21       42        0
    fn geometric_quotient(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let reverse = Line::from_groups(
            // e415, e425, e435
            other.group0() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group1() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(/* scalar */ -f32::powi(other[e415], 2) - f32::powi(other[e425], 2) - f32::powi(other[e435], 2));
        let geometric_product = Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group1(),
        );
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                geometric_product[e425] * self[e435] * -1.0,
                geometric_product[e435] * self[e415] * -1.0,
                geometric_product[e415] * self[e425] * -1.0,
                (geometric_product[e425] * self[e425]) + (geometric_product[e435] * self[e435]),
            ]) + (geometric_product.group0().zxy() * self.group0().yzx()).with_w(geometric_product[e415] * self[e415]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                -(geometric_product[e425] * self[e125]) - (geometric_product[e315] * self[e435]),
                -(geometric_product[e435] * self[e235]) - (geometric_product[e125] * self[e415]),
                -(geometric_product[e415] * self[e315]) - (geometric_product[e235] * self[e425]),
                (geometric_product[e435] * self[e125]) + (geometric_product[e235] * self[e415]) + (geometric_product[e315] * self[e425]) + (geometric_product[e125] * self[e435]),
            ]) + (geometric_product.group0().zxy() * self.group1().yzx()).with_w(geometric_product[e415] * self[e235])
                + (geometric_product.group1().zxy() * self.group0().yzx()).with_w(geometric_product[e425] * self[e315]),
        );
    }
}
impl GeometricQuotient<Motor> for Line {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       25        0
    //    simd3        0        1        0
    //    simd4        3        6        0
    // Totals...
    // yes simd       22       32        0
    //  no simd       31       52        0
    fn geometric_quotient(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let reverse = Motor::from_groups(
            // e415, e425, e435, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            -f32::powi(other[e415], 2) - f32::powi(other[e425], 2) - f32::powi(other[e435], 2) - f32::powi(other[e12345], 2),
        );
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e235, e315, e125, e5
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                -(self[e415] * geometric_product[e12345]) - (self[e435] * geometric_product[e425]),
                -(self[e415] * geometric_product[e435]) - (self[e425] * geometric_product[e12345]),
                -(self[e425] * geometric_product[e415]) - (self[e435] * geometric_product[e12345]),
                (self[e425] * geometric_product[e425]) + (self[e435] * geometric_product[e435]),
            ]) + (geometric_product.group0().zxyx() * self.group0().yzx().with_w(self[e415])),
            // e15, e25, e35, e3215
            Simd32x4::from([
                -(self[e415] * geometric_product[e5]) - (self[e435] * geometric_product[e315]) - (self[e235] * geometric_product[e12345]) - (self[e125] * geometric_product[e425]),
                -(self[e415] * geometric_product[e125]) - (self[e425] * geometric_product[e5]) - (self[e235] * geometric_product[e435]) - (self[e315] * geometric_product[e12345]),
                -(self[e425] * geometric_product[e235]) - (self[e435] * geometric_product[e5]) - (self[e315] * geometric_product[e415]) - (self[e125] * geometric_product[e12345]),
                (self[e435] * geometric_product[e125]) + (self[e235] * geometric_product[e415]) + (self[e315] * geometric_product[e425]) + (self[e125] * geometric_product[e435]),
            ]) + (geometric_product.group1().zxyx() * self.group0().yzx().with_w(self[e415]))
                + (self.group1().yzx() * geometric_product.group0().zxy()).with_w(self[e425] * geometric_product[e315]),
        );
    }
}
impl GeometricQuotient<MultiVector> for Line {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       70       88        0
    //    simd2        0        1        0
    //    simd3       17       34        0
    //    simd4       16       17        0
    // Totals...
    // yes simd      103      140        0
    //  no simd      185      260        0
    fn geometric_quotient(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let reverse = MultiVector::from_groups(
            // scalar, e12345
            other.group0(),
            // e1, e2, e3, e4
            other.group1(),
            // e5
            other[e5],
            // e15, e25, e35, e45
            other.group3() * Simd32x4::from(-1.0),
            // e41, e42, e43
            other.group4() * Simd32x3::from(-1.0),
            // e23, e31, e12
            other.group5() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group6() * Simd32x4::from(-1.0),
            // e423, e431, e412
            other.group7() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group8() * Simd32x3::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group9(),
            // e1234
            other[e1234],
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e15] * other[e41])
                + 2.0 * (other[e25] * other[e42])
                + 2.0 * (other[e35] * other[e43])
                + 2.0 * (other[e3215] * other[e1234])
                + f32::powi(other[scalar], 2)
                + f32::powi(other[e1], 2)
                + f32::powi(other[e2], 2)
                + f32::powi(other[e3], 2)
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                + f32::powi(other[e321], 2)
                - f32::powi(other[e12345], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2)
                - 2.0 * (other[e4] * other[e5])
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(other_2[scalar]) * reverse.group0(),
            // e1, e2, e3, e4
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e5
            reverse[e5] * other_2[scalar],
            // e15, e25, e35, e45
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group4(),
            // e23, e31, e12
            Simd32x3::from(other_2[scalar]) * reverse.group5(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group6(),
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group7(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group8(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group9(),
            // e1234
            reverse[e1234] * other_2[scalar],
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e415] * geometric_product[e415])
                    + (self[e425] * geometric_product[e425])
                    + (self[e435] * geometric_product[e435])
                    + (self[e235] * geometric_product[e423])
                    + (self[e315] * geometric_product[e431])
                    + (self[e125] * geometric_product[e412]),
                -(self[e415] * geometric_product[e23])
                    - (self[e425] * geometric_product[e31])
                    - (self[e435] * geometric_product[e12])
                    - (self[e235] * geometric_product[e41])
                    - (self[e315] * geometric_product[e42])
                    - (self[e125] * geometric_product[e43]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e425] * geometric_product[e4125]) + (self[e315] * geometric_product[e43]) - (self[e125] * geometric_product[e42]),
                (self[e435] * geometric_product[e4235]) + (self[e125] * geometric_product[e41]) - (self[e315] * geometric_product[e1234]),
                (self[e415] * geometric_product[e4315]) + (self[e235] * geometric_product[e42]) - (self[e125] * geometric_product[e1234]),
                0.0,
            ]) - (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], geometric_product[e41]]) * self.group0().xxy().with_w(self[e415]))
                - (Simd32x4::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45], geometric_product[e42]]) * self.group0().zyz().with_w(self[e425]))
                - (Simd32x4::from([geometric_product[e1234], geometric_product[e43], geometric_product[e41], geometric_product[e43]]) * self.group1().xxy().with_w(self[e435])),
            // e5
            (self[e235] * geometric_product[e4235]) + (self[e315] * geometric_product[e4315]) + (self[e125] * geometric_product[e4125])
                - (self[e415] * geometric_product[e15])
                - (self[e425] * geometric_product[e25])
                - (self[e435] * geometric_product[e35])
                - (self[e235] * geometric_product[e23])
                - (self[e315] * geometric_product[e31])
                - (self[e125] * geometric_product[e12]),
            // e15, e25, e35, e45
            Simd32x4::from([
                -(self[e235] * geometric_product[e321]) - (self[e125] * geometric_product[e2]) - (self[e125] * geometric_product[e425]),
                -(self[e235] * geometric_product[e3]) - (self[e235] * geometric_product[e435]) - (self[e315] * geometric_product[e321]),
                -(self[e315] * geometric_product[e1]) - (self[e315] * geometric_product[e415]) - (self[e125] * geometric_product[e321]),
                0.0,
            ]) + (self.group0().yzx() * geometric_product.group8().zxy()).with_w(self[e235] * geometric_product[e423])
                + (self.group1().yzx() * geometric_product.group1().zxy()).with_w(self[e315] * geometric_product[e431])
                + (self.group1().yzx() * geometric_product.group6().zxy()).with_w(self[e125] * geometric_product[e412])
                - (Simd32x4::from([geometric_product[e5], geometric_product[e125], geometric_product[e235], geometric_product[e2]]) * self.group0().xxy().with_w(self[e425]))
                - (Simd32x4::from([geometric_product[e315], geometric_product[e5], geometric_product[e5], geometric_product[e3]]) * self.group0().zyz().with_w(self[e435]))
                - (geometric_product.group0().yy().with_zw(geometric_product[e12345], self[e415]) * self.group1().with_w(geometric_product[e1])),
            // e41, e42, e43
            (self.group0().yzx() * geometric_product.group7().zxy())
                - (Simd32x3::from([geometric_product[e4], geometric_product[e412], geometric_product[e423]]) * self.group0().xxy())
                - (Simd32x3::from([geometric_product[e431], geometric_product[e4], geometric_product[e4]]) * self.group0().zyz()),
            // e23, e31, e12
            (self.group0().yzx() * geometric_product.group6().zxy()) + (self.group1().yzx() * geometric_product.group7().zxy())
                - (Simd32x3::from(geometric_product[e12345]) * self.group0())
                - (Simd32x3::from([geometric_product[e4], geometric_product[e412], geometric_product[e423]]) * self.group1().xxy())
                - (Simd32x3::from([geometric_product[e431], geometric_product[e4], geometric_product[e4]]) * self.group1().zyz())
                - (self.group0().zxy() * geometric_product.group6().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(self[e425] * geometric_product[e12]) - (self[e315] * geometric_product[e43]),
                -(self[e435] * geometric_product[e23]) - (self[e125] * geometric_product[e41]),
                -(self[e415] * geometric_product[e31]) - (self[e235] * geometric_product[e42]),
                (self[e315] * geometric_product[e42]) + (self[e125] * geometric_product[e43]),
            ]) + (Simd32x4::from([geometric_product[e42], geometric_product[e1234], geometric_product[e1234], geometric_product[e41]]) * self.group1().zyz().with_w(self[e235]))
                + (Simd32x4::from([geometric_product[e1234], geometric_product[e43], geometric_product[e41], geometric_product[e4125]]) * self.group1().xxy().with_w(self[e435]))
                + (geometric_product.group0().xx().with_zw(geometric_product[scalar], self[e415]) * self.group0().with_w(geometric_product[e4235]))
                + (self.group0().zxy() * geometric_product.group5().yzx()).with_w(self[e425] * geometric_product[e4315]),
            // e423, e431, e412
            (Simd32x3::from([geometric_product[e42], geometric_product[e1234], geometric_product[e1234]]) * self.group0().zyz())
                + (Simd32x3::from([geometric_product[e1234], geometric_product[e43], geometric_product[e41]]) * self.group0().xxy())
                - (self.group0().yzx() * geometric_product.group4().zxy()),
            // e235, e315, e125
            (Simd32x3::from(geometric_product[scalar]) * self.group1())
                + (Simd32x3::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215]]) * self.group0().zyz())
                + (Simd32x3::from([geometric_product[e31], geometric_product[e4235], geometric_product[e23]]) * self.group1().zzy())
                + (Simd32x3::from([geometric_product[e4125], geometric_product[e12], geometric_product[e4315]]) * self.group1().yxx())
                + (Simd32x3::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15]]) * self.group0().xxy())
                - (Simd32x3::from(self[e235]) * Simd32x3::from([geometric_product[e45], geometric_product[e4125], geometric_product[e31]]))
                - (Simd32x3::from(self[e315]) * Simd32x3::from([geometric_product[e12], geometric_product[e45], geometric_product[e4235]]))
                - (Simd32x3::from(self[e125]) * Simd32x3::from([geometric_product[e4315], geometric_product[e23], geometric_product[e45]]))
                - (self.group0().yzx() * geometric_product.group3().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(self[e425] * geometric_product[e3]) - (self[e235] * geometric_product[e4]) - (self[e125] * geometric_product[e431]),
                -(self[e435] * geometric_product[e1]) - (self[e235] * geometric_product[e412]) - (self[e315] * geometric_product[e4]),
                -(self[e415] * geometric_product[e2]) - (self[e315] * geometric_product[e423]) - (self[e125] * geometric_product[e4]),
                (self[e235] * geometric_product[e1])
                    + (self[e235] * geometric_product[e415])
                    + (self[e315] * geometric_product[e2])
                    + (self[e315] * geometric_product[e425])
                    + (self[e125] * geometric_product[e3])
                    + (self[e125] * geometric_product[e435]),
            ]) + (Simd32x4::from([geometric_product[e2], geometric_product[e321], geometric_product[e321], geometric_product[e315]]) * self.group0().zyz().with_w(self[e425]))
                + (Simd32x4::from([geometric_product[e321], geometric_product[e3], geometric_product[e1], geometric_product[e235]]) * self.group0().xxy().with_w(self[e415]))
                + (self.group1().yzx() * geometric_product.group7().zxy()).with_w(self[e435] * geometric_product[e125]),
            // e1234
            (self[e415] * geometric_product[e423]) + (self[e425] * geometric_product[e431]) + (self[e435] * geometric_product[e412]),
        );
    }
}
impl GeometricQuotient<Plane> for Line {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       15        0
    //    simd4        3        4        0
    // Totals...
    // yes simd        6       19        0
    //  no simd       15       31        0
    fn geometric_quotient(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Plane::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(-f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2)) * other.group0(),
        );
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                self[e125] * geometric_product[e4315] * -1.0,
                self[e235] * geometric_product[e4125] * -1.0,
                self[e315] * geometric_product[e4235] * -1.0,
                self[e435] * geometric_product[e4125],
            ]) + (geometric_product.group0().zxyy() * self.group1().yzx().with_w(self[e425]))
                + (geometric_product.group0().wwwx() * self.group0().with_w(self[e415])),
            // e1, e2, e3, e5
            Simd32x4::from([
                self[e435] * geometric_product[e4315] * -1.0,
                self[e415] * geometric_product[e4125] * -1.0,
                self[e425] * geometric_product[e4235] * -1.0,
                (self[e315] * geometric_product[e4315]) + (self[e125] * geometric_product[e4125]),
            ]) + (geometric_product.group0().zxyx() * self.group0().yzx().with_w(self[e235])),
        );
    }
}
impl GeometricQuotient<RoundPoint> for Line {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       14        0
    //    simd3        0        7        0
    //    simd4        3        2        0
    // Totals...
    // yes simd       12       23        0
    //  no simd       21       43        0
    fn geometric_quotient(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2) - 2.0 * (other[e4] * other[e5]),
        );
        let geometric_product = RoundPoint::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from(other_2[scalar]) * other.group0(), /* e5 */ other[e5] * other_2[scalar]);
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(geometric_product[e4]) * self.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            (Simd32x3::from(geometric_product[e4]) * self.group1() * Simd32x3::from(-1.0))
                .with_w(-(self[e415] * geometric_product[e1]) - (self[e425] * geometric_product[e2]) - (self[e435] * geometric_product[e3])),
            // e15, e25, e35, e1234
            (self.group1().yzx() * geometric_product.group0().zxy()).with_w(0.0)
                - (Simd32x3::from(geometric_product[e5]) * self.group0()).with_w(0.0)
                - (self.group1().zxy() * geometric_product.group0().yzx()).with_w(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(self[e425] * geometric_product[e3]) - (self[e235] * geometric_product[e4]),
                -(self[e435] * geometric_product[e1]) - (self[e315] * geometric_product[e4]),
                -(self[e415] * geometric_product[e2]) - (self[e125] * geometric_product[e4]),
                (self[e315] * geometric_product[e2]) + (self[e125] * geometric_product[e3]),
            ]) + (geometric_product.group0().yzxx() * self.group0().zxy().with_w(self[e235])),
        );
    }
}
impl GeometricQuotient<Scalar> for Line {
    type Output = Line;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        0        1
    //    simd3        0        2        0
    // Totals...
    // yes simd        0        2        1
    //  no simd        0        6        1
    fn geometric_quotient(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Scalar::from_groups(/* scalar */ 1.0 / other[scalar]);
        return Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(geometric_product[scalar]) * self.group0(),
            // e235, e315, e125
            Simd32x3::from(geometric_product[scalar]) * self.group1(),
        );
    }
}
impl GeometricQuotient<Sphere> for Line {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       14        0
    //    simd3        0        5        0
    //    simd4        3        2        0
    // Totals...
    // yes simd       12       21        0
    //  no simd       21       37        0
    fn geometric_quotient(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e3215] * other[e1234]) - f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2),
        );
        let geometric_product = Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * other.group0(),
            // e1234
            other_2[scalar] * other[e1234],
        );
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(geometric_product[e1234]) * self.group0(),
            // e415, e425, e435, e321
            (Simd32x3::from(geometric_product[e1234]) * self.group1())
                .with_w((self[e415] * geometric_product[e4235]) + (self[e425] * geometric_product[e4315]) + (self[e435] * geometric_product[e4125])),
            // e235, e315, e125, e4
            (Simd32x3::from(geometric_product[e3215]) * self.group0()).with_w(0.0) + (self.group1().yzx() * geometric_product.group0().zxy()).with_w(0.0)
                - (self.group1().zxy() * geometric_product.group0().yzx()).with_w(0.0),
            // e1, e2, e3, e5
            Simd32x4::from([
                -(self[e435] * geometric_product[e4315]) - (self[e235] * geometric_product[e1234]),
                -(self[e415] * geometric_product[e4125]) - (self[e315] * geometric_product[e1234]),
                -(self[e425] * geometric_product[e4235]) - (self[e125] * geometric_product[e1234]),
                (self[e315] * geometric_product[e4315]) + (self[e125] * geometric_product[e4125]),
            ]) + (geometric_product.group0().zxyx() * self.group0().yzx().with_w(self[e235])),
        );
    }
}
impl GeometricQuotient<VersorEven> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44       65        0
    //    simd3        0        6        0
    //    simd4       12       13        0
    // Totals...
    // yes simd       56       84        0
    //  no simd       92      135        0
    fn geometric_quotient(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let reverse = VersorEven::from_groups(
            // e423, e431, e412, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e5
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e4
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)
                - f32::powi(other[e12345], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125])
                - 2.0 * (other[e5] * other[e4]),
        );
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e5
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e1, e2, e3, e4
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(self[e415] * geometric_product[e4]) - (self[e435] * geometric_product[e431]),
                -(self[e415] * geometric_product[e412]) - (self[e425] * geometric_product[e4]),
                -(self[e425] * geometric_product[e423]) - (self[e435] * geometric_product[e4]),
                (self[e425] * geometric_product[e425])
                    + (self[e435] * geometric_product[e435])
                    + (self[e235] * geometric_product[e423])
                    + (self[e315] * geometric_product[e431])
                    + (self[e125] * geometric_product[e412]),
            ]) + (self.group0().yzx() * geometric_product.group0().zxy()).with_w(self[e415] * geometric_product[e415]),
            // e23, e31, e12, e45
            Simd32x4::from([
                self[e125] * geometric_product[e431] * -1.0,
                self[e315] * geometric_product[e4] * -1.0,
                self[e125] * geometric_product[e4] * -1.0,
                self[e125] * geometric_product[e412],
            ]) + (geometric_product.group0().zxyy() * self.group1().yzx().with_w(self[e315]))
                + (self.group0().yzx() * geometric_product.group1().zxy()).with_w(self[e235] * geometric_product[e423])
                - (Simd32x4::from([geometric_product[e12345], geometric_product[e435], geometric_product[e415], geometric_product[e1]]) * self.group0().xxy().with_w(self[e415]))
                - (Simd32x4::from([geometric_product[e425], geometric_product[e12345], geometric_product[e12345], geometric_product[e2]]) * self.group0().zyz().with_w(self[e425]))
                - (Simd32x4::from([geometric_product[e4], geometric_product[e412], geometric_product[e423], geometric_product[e3]]) * self.group1().xxy().with_w(self[e435])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(self[e415] * geometric_product[e5])
                    - (self[e435] * geometric_product[e315])
                    - (self[e235] * geometric_product[e12345])
                    - (self[e235] * geometric_product[e321])
                    - (self[e125] * geometric_product[e425])
                    - (self[e125] * geometric_product[e2]),
                -(self[e415] * geometric_product[e125])
                    - (self[e425] * geometric_product[e5])
                    - (self[e235] * geometric_product[e435])
                    - (self[e235] * geometric_product[e3])
                    - (self[e315] * geometric_product[e12345])
                    - (self[e315] * geometric_product[e321]),
                -(self[e425] * geometric_product[e235])
                    - (self[e435] * geometric_product[e5])
                    - (self[e315] * geometric_product[e415])
                    - (self[e315] * geometric_product[e1])
                    - (self[e125] * geometric_product[e12345])
                    - (self[e125] * geometric_product[e321]),
                0.0,
            ]) + (self.group0().yzx() * geometric_product.group2().zxy()).with_w(self[e415] * geometric_product[e423])
                + (self.group1().yzx() * geometric_product.group1().zxy()).with_w(self[e425] * geometric_product[e431])
                + (self.group1().yzx() * geometric_product.group3().zxy()).with_w(self[e435] * geometric_product[e412]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(self[e425] * geometric_product[e3]) - (self[e235] * geometric_product[e4]) - (self[e125] * geometric_product[e431]),
                -(self[e435] * geometric_product[e1]) - (self[e235] * geometric_product[e412]) - (self[e315] * geometric_product[e4]),
                -(self[e415] * geometric_product[e2]) - (self[e315] * geometric_product[e423]) - (self[e125] * geometric_product[e4]),
                (self[e235] * geometric_product[e415])
                    + (self[e235] * geometric_product[e1])
                    + (self[e315] * geometric_product[e425])
                    + (self[e315] * geometric_product[e2])
                    + (self[e125] * geometric_product[e435])
                    + (self[e125] * geometric_product[e3]),
            ]) + (Simd32x4::from([geometric_product[e321], geometric_product[e3], geometric_product[e1], geometric_product[e235]]) * self.group0().xxy().with_w(self[e415]))
                + (Simd32x4::from([geometric_product[e2], geometric_product[e321], geometric_product[e321], geometric_product[e315]]) * self.group0().zyz().with_w(self[e425]))
                + (self.group1().yzx() * geometric_product.group0().zxy()).with_w(self[e435] * geometric_product[e125]),
        );
    }
}
impl GeometricQuotient<VersorOdd> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       45        0
    //    simd3        0        1        0
    //    simd4       15       21        0
    // Totals...
    // yes simd       47       67        0
    //  no simd       92      132        0
    fn geometric_quotient(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let reverse = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + 2.0 * (other[e1234] * other[e3215])
                + f32::powi(other[scalar], 2)
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2),
        );
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e415] * geometric_product[e1234]) + (self[e435] * geometric_product[e42]),
                (self[e415] * geometric_product[e43]) + (self[e425] * geometric_product[e1234]),
                (self[e425] * geometric_product[e41]) + (self[e435] * geometric_product[e1234]),
                -(self[e425] * geometric_product[e31])
                    - (self[e435] * geometric_product[e12])
                    - (self[e235] * geometric_product[e41])
                    - (self[e315] * geometric_product[e42])
                    - (self[e125] * geometric_product[e43]),
            ]) - (self.group0().yzx() * geometric_product.group0().zxy()).with_w(self[e415] * geometric_product[e23]),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(self[e425] * geometric_product[e12]) - (self[e315] * geometric_product[e43]),
                -(self[e435] * geometric_product[e23]) - (self[e125] * geometric_product[e41]),
                -(self[e415] * geometric_product[e31]) - (self[e235] * geometric_product[e42]),
                (self[e315] * geometric_product[e42]) + (self[e125] * geometric_product[e43]),
            ]) + (Simd32x4::from([geometric_product[e42], geometric_product[e1234], geometric_product[e1234], geometric_product[e41]]) * self.group1().zyz().with_w(self[e235]))
                + (Simd32x4::from([geometric_product[scalar], geometric_product[e12], geometric_product[e23], geometric_product[e4235]]) * self.group0().xxy().with_w(self[e415]))
                + (Simd32x4::from([geometric_product[e31], geometric_product[scalar], geometric_product[scalar], geometric_product[e4315]])
                    * self.group0().zyz().with_w(self[e425]))
                + (Simd32x4::from([geometric_product[e1234], geometric_product[e43], geometric_product[e41], geometric_product[e4125]]) * self.group1().xxy().with_w(self[e435])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e315] * geometric_product[e4125]) + (self[e125] * geometric_product[e31]),
                (self[e315] * geometric_product[scalar]) + (self[e125] * geometric_product[e4235]),
                (self[e315] * geometric_product[e23]) + (self[e125] * geometric_product[scalar]),
                -(self[e315] * geometric_product[e31]) - (self[e125] * geometric_product[e12]),
            ]) + (Simd32x4::from([geometric_product[scalar], geometric_product[e12], geometric_product[e4315], geometric_product[e4125]]) * self.group1().xxx().with_w(self[e125]))
                + (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], geometric_product[e4315]]) * self.group0().zyz().with_w(self[e315]))
                + (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e4235]]) * self.group0().xxy().with_w(self[e235]))
                - (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e31], geometric_product[e25]]) * self.group1().xxx().with_w(self[e425]))
                - (Simd32x4::from([geometric_product[e4315], geometric_product[e23], geometric_product[e45], geometric_product[e23]]) * self.group1().zzz().with_w(self[e235]))
                - (geometric_product.group2().zxyx() * self.group0().yzx().with_w(self[e415]))
                - (geometric_product.group1().zw().with_zw(geometric_product[e4235], geometric_product[e35]) * self.group1().yyy().with_w(self[e435])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e425] * geometric_product[e4125]) + (self[e315] * geometric_product[e43]) - (self[e125] * geometric_product[e42]),
                (self[e435] * geometric_product[e4235]) + (self[e125] * geometric_product[e41]) - (self[e315] * geometric_product[e1234]),
                (self[e415] * geometric_product[e4315]) + (self[e235] * geometric_product[e42]) - (self[e125] * geometric_product[e1234]),
                0.0,
            ]) - (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], geometric_product[e41]]) * self.group0().xxy().with_w(self[e415]))
                - (Simd32x4::from([geometric_product[e1234], geometric_product[e43], geometric_product[e41], geometric_product[e43]]) * self.group1().xxy().with_w(self[e435]))
                - (Simd32x4::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45], geometric_product[e42]]) * self.group0().zyz().with_w(self[e425])),
        );
    }
}
impl std::ops::Div<GeometricQuotientInfix> for Motor {
    type Output = GeometricQuotientInfixPartial<Motor>;
    fn div(self, _rhs: GeometricQuotientInfix) -> Self::Output {
        GeometricQuotientInfixPartial(self)
    }
}
impl GeometricQuotient<AntiCircleRotor> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       29       48        0
    //    simd3        0        8        0
    //    simd4       13       11        0
    // Totals...
    // yes simd       42       67        0
    //  no simd       81      116        0
    fn geometric_quotient(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiCircleRotor::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, scalar
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                + f32::powi(other[scalar], 2)
                - f32::powi(other[e45], 2),
        );
        let geometric_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                geometric_product[e42] * self[e435],
                geometric_product[e43] * self[e415],
                geometric_product[e43] * self[e12345],
                -(geometric_product[e42] * self[e315])
                    - (geometric_product[e43] * self[e125])
                    - (geometric_product[e23] * self[e415])
                    - (geometric_product[e31] * self[e425])
                    - (geometric_product[e12] * self[e435]),
            ]) + (self.group0().wwyw() * geometric_product.group0().xyx().with_w(geometric_product[scalar]))
                - (geometric_product.group0().zxy() * self.group0().yzx()).with_w(geometric_product[e41] * self[e235]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (geometric_product[e31] * self[e435]) + (geometric_product[scalar] * self[e415]) - (geometric_product[e12] * self[e425]),
                (geometric_product[e12] * self[e415]) + (geometric_product[scalar] * self[e425]) - (geometric_product[e23] * self[e435]),
                (geometric_product[e12] * self[e12345]) + (geometric_product[scalar] * self[e435]) - (geometric_product[e31] * self[e415]),
                0.0,
            ]) + (self.group1().zxwy() * geometric_product.group0().yzz().with_w(geometric_product[e42]))
                + (self.group1().wwyx() * geometric_product.group0().xyx().with_w(geometric_product[e41]))
                + (geometric_product.group1().xyx() * self.group0().wwy()).with_w(geometric_product[e43] * self[e125])
                - (geometric_product.group0().zxy() * self.group1().yzx()).with_w(geometric_product[e45] * self[e12345]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (geometric_product[e31] * self[e125]) + (geometric_product[e15] * self[e12345]) + (geometric_product[e25] * self[e435]) + (geometric_product[scalar] * self[e235]),
                (geometric_product[e12] * self[e235]) + (geometric_product[e25] * self[e12345]) + (geometric_product[e35] * self[e415]) + (geometric_product[scalar] * self[e315]),
                (geometric_product[e12] * self[e5]) + (geometric_product[e15] * self[e425]) + (geometric_product[e35] * self[e12345]) + (geometric_product[scalar] * self[e125]),
                -(geometric_product[e45] * self[e5]) - (geometric_product[e15] * self[e415]) - (geometric_product[e25] * self[e425]) - (geometric_product[e35] * self[e435]),
            ]) + (self.group1().wwyw() * geometric_product.group1().xyx().with_w(geometric_product[scalar]))
                - (geometric_product.group1().zxyx() * self.group1().yzxx())
                - (geometric_product.group1().wwwy() * self.group1().xyzy())
                - (geometric_product.group2().zxy() * self.group0().yzx()).with_w(geometric_product[e12] * self[e125]),
            // e1, e2, e3, e4
            Simd32x4::from([geometric_product[e43] * self[e315], geometric_product[e41] * self[e125], geometric_product[e42] * self[e235], 0.0])
                - (self.group0().xyzz() * geometric_product.group1().www().with_w(geometric_product[e43]))
                - (geometric_product.group0().xyx() * self.group1().wwy()).with_w(geometric_product[e41] * self[e415])
                - (geometric_product.group0().yzz() * self.group1().zxw()).with_w(geometric_product[e42] * self[e425]),
        );
    }
}
impl GeometricQuotient<AntiDipoleInversion> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       43       68        0
    //    simd3        0       11        0
    //    simd4       18       14        0
    // Totals...
    // yes simd       61       93        0
    //  no simd      115      157        0
    fn geometric_quotient(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e4
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125])
                - 2.0 * (other[e4] * other[e5]),
        );
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e4
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e1, e2, e3, e5
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(geometric_product[e431] * self[e435]) - (geometric_product[e4] * self[e415]),
                -(geometric_product[e412] * self[e415]) - (geometric_product[e4] * self[e425]),
                -(geometric_product[e412] * self[e12345]) - (geometric_product[e4] * self[e435]),
                (geometric_product[e431] * self[e315])
                    + (geometric_product[e412] * self[e125])
                    + (geometric_product[e415] * self[e415])
                    + (geometric_product[e425] * self[e425])
                    + (geometric_product[e435] * self[e435]),
            ]) + (geometric_product.group0().zxy() * self.group0().yzx()).with_w(geometric_product[e423] * self[e235])
                - (geometric_product.group0().xyx() * self.group0().wwy()).with_w(geometric_product[e4] * self[e5]),
            // e23, e31, e12, e45
            Simd32x4::from([
                geometric_product[e4] * self[e235] * -1.0,
                geometric_product[e4] * self[e315] * -1.0,
                geometric_product[e4] * self[e125] * -1.0,
                (geometric_product[e412] * self[e125]) + (geometric_product[e321] * self[e12345]),
            ]) + (self.group1().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e423]))
                + (geometric_product.group1().zxy() * self.group0().yzx()).with_w(geometric_product[e431] * self[e315])
                - (self.group0().zxwz() * geometric_product.group1().yzz().with_w(geometric_product[e3]))
                - (self.group0().wwyy() * geometric_product.group1().xyx().with_w(geometric_product[e2]))
                - (self.group1().wwyw() * geometric_product.group0().xyx().with_w(geometric_product[e4]))
                - (geometric_product.group0().yzz() * self.group1().zxw()).with_w(geometric_product[e1] * self[e415]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(geometric_product[e425] * self[e125])
                    - (geometric_product[e321] * self[e235])
                    - (geometric_product[e235] * self[e12345])
                    - (geometric_product[e315] * self[e435])
                    - (geometric_product[e1] * self[e5])
                    - (geometric_product[e2] * self[e125])
                    - (geometric_product[e5] * self[e415]),
                -(geometric_product[e435] * self[e235])
                    - (geometric_product[e321] * self[e315])
                    - (geometric_product[e315] * self[e12345])
                    - (geometric_product[e125] * self[e415])
                    - (geometric_product[e2] * self[e5])
                    - (geometric_product[e3] * self[e235])
                    - (geometric_product[e5] * self[e425]),
                -(geometric_product[e435] * self[e5])
                    - (geometric_product[e321] * self[e125])
                    - (geometric_product[e235] * self[e425])
                    - (geometric_product[e125] * self[e12345])
                    - (geometric_product[e1] * self[e315])
                    - (geometric_product[e3] * self[e5])
                    - (geometric_product[e5] * self[e435]),
                0.0,
            ]) + (self.group0().yzxy() * geometric_product.group2().zxy().with_w(geometric_product[e431]))
                + (geometric_product.group1().zxy() * self.group1().yzx()).with_w(geometric_product[e423] * self[e415])
                + (geometric_product.group3().zxy() * self.group1().yzx()).with_w(geometric_product[e412] * self[e435])
                - (geometric_product.group1().xyx() * self.group1().wwy()).with_w(geometric_product[e4] * self[e12345]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(geometric_product[e4] * self[e235]) - (geometric_product[e3] * self[e425]),
                -(geometric_product[e4] * self[e315]) - (geometric_product[e1] * self[e435]),
                -(geometric_product[e4] * self[e125]) - (geometric_product[e2] * self[e415]),
                (geometric_product[e315] * self[e425])
                    + (geometric_product[e125] * self[e435])
                    + (geometric_product[e1] * self[e235])
                    + (geometric_product[e2] * self[e315])
                    + (geometric_product[e3] * self[e125]),
            ]) + (geometric_product.group1().wwwy() * self.group0().xyz().with_w(self[e315]))
                + (self.group0().zxwx() * geometric_product.group3().yzz().with_w(geometric_product[e235]))
                + (self.group1().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e415]))
                + (geometric_product.group3().xyx() * self.group0().wwy()).with_w(geometric_product[e435] * self[e125])
                - (self.group1().wwyw() * geometric_product.group0().xyx().with_w(geometric_product[e321]))
                - (geometric_product.group0().yzz() * self.group1().zxw()).with_w(geometric_product[e5] * self[e12345]),
        );
    }
}
impl GeometricQuotient<AntiDualNum> for Motor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd2        0        1        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        1        4        0
    //  no simd        4       14        0
    fn geometric_quotient(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDualNum::from_groups(/* e3215, scalar */ Simd32x2::from(f32::powi(other[scalar], -2)) * other.group0());
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(geometric_product[scalar]) * self.group0(),
            // e235, e315, e125, e5
            (Simd32x4::from(geometric_product[e3215]) * self.group0()) + (Simd32x4::from(geometric_product[scalar]) * self.group1()),
        );
    }
}
impl GeometricQuotient<AntiFlatPoint> for Motor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        9        0
    //    simd3        3        5        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        6       15        0
    //  no simd       12       28        0
    fn geometric_quotient(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlatPoint::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(f32::powi(other[e321], -2)) * Simd32x4::from([other[e235] * -1.0, other[e315] * -1.0, other[e125] * -1.0, other[e321] * -1.0]),
        );
        return Flector::from_groups(
            // e15, e25, e35, e45
            ((geometric_product.group0().zxy() * self.group0().yzx())
                - (Simd32x3::from(geometric_product[e321]) * self.group1().xyz())
                - (geometric_product.group0().xyx() * self.group0().wwy())
                - (geometric_product.group0().yzz() * self.group0().zxw()))
            .with_w(geometric_product[e321] * self[e12345]),
            // e4235, e4315, e4125, e3215
            (geometric_product.group0().www() * self.group0().xyz()).with_w(
                (geometric_product[e235] * self[e415]) + (geometric_product[e315] * self[e425]) + (geometric_product[e125] * self[e435]) - (geometric_product[e321] * self[e5]),
            ),
        );
    }
}
impl GeometricQuotient<AntiFlector> for Motor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       18        0
    //    simd3        0        2        0
    //    simd4        8        9        0
    // Totals...
    // yes simd       23       29        0
    //  no simd       47       60        0
    fn geometric_quotient(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiFlector::from_groups(/* e235, e315, e125, e321 */ other.group0() * Simd32x4::from(-1.0), /* e1, e2, e3, e5 */ other.group1());
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2),
        );
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e1, e2, e3, e5
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (geometric_product[e3] * self[e315]) - (geometric_product[e1] * self[e5]) - (geometric_product[e2] * self[e125]) - (geometric_product[e5] * self[e415]),
                (geometric_product[e1] * self[e125]) - (geometric_product[e2] * self[e5]) - (geometric_product[e3] * self[e235]) - (geometric_product[e5] * self[e425]),
                (geometric_product[e2] * self[e235]) - (geometric_product[e1] * self[e315]) - (geometric_product[e3] * self[e5]) - (geometric_product[e5] * self[e435]),
                0.0,
            ]) + (geometric_product.group0().zxyw() * self.group0().yzxw())
                - (self.group0().zxwy() * geometric_product.group0().yzz().with_w(geometric_product[e2]))
                - (self.group0().wwyx() * geometric_product.group0().xyx().with_w(geometric_product[e1]))
                - (geometric_product.group0().www() * self.group1().xyz()).with_w(geometric_product[e3] * self[e435]),
            // e4235, e4315, e4125, e3215
            (geometric_product.group0().wwwx() * self.group0().xyzx())
                + (self.group0().zxwz() * geometric_product.group1().yzz().with_w(geometric_product[e125]))
                + (self.group0().wwyy() * geometric_product.group1().xyx().with_w(geometric_product[e315]))
                + Simd32x3::from(0.0).with_w(
                    (geometric_product[e1] * self[e235]) + (geometric_product[e2] * self[e315]) + (geometric_product[e3] * self[e125]) - (geometric_product[e5] * self[e12345]),
                )
                - (geometric_product.group1().zxy() * self.group0().yzx()).with_w(geometric_product[e321] * self[e5]),
        );
    }
}
impl GeometricQuotient<AntiLine> for Motor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       25        0
    //    simd3        0        5        0
    //    simd4        3        2        0
    // Totals...
    // yes simd       21       32        0
    //  no simd       30       48        0
    fn geometric_quotient(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiLine::from_groups(
            // e23, e31, e12
            other.group0() * Simd32x3::from(-1.0),
            // e15, e25, e35
            other.group1() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(/* scalar */ f32::powi(other[e23], 2) + f32::powi(other[e31], 2) + f32::powi(other[e12], 2));
        let geometric_product = AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e15, e25, e35
            Simd32x3::from(other_2[scalar]) * reverse.group1(),
        );
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (geometric_product[e23] * self[e12345]) + (geometric_product[e31] * self[e435]),
                (geometric_product[e31] * self[e12345]) + (geometric_product[e12] * self[e415]),
                (geometric_product[e23] * self[e425]) + (geometric_product[e12] * self[e12345]),
                -(geometric_product[e31] * self[e425]) - (geometric_product[e12] * self[e435]),
            ]) - (self.group0().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e23])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (geometric_product[e23] * self[e5]) + (geometric_product[e31] * self[e125]) + (geometric_product[e15] * self[e12345]) + (geometric_product[e25] * self[e435]),
                (geometric_product[e31] * self[e5]) + (geometric_product[e12] * self[e235]) + (geometric_product[e25] * self[e12345]) + (geometric_product[e35] * self[e415]),
                (geometric_product[e23] * self[e315]) + (geometric_product[e12] * self[e5]) + (geometric_product[e15] * self[e425]) + (geometric_product[e35] * self[e12345]),
                -(geometric_product[e12] * self[e125]) - (geometric_product[e15] * self[e415]) - (geometric_product[e25] * self[e425]) - (geometric_product[e35] * self[e435]),
            ]) - (self.group1().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e23]))
                - (geometric_product.group1().zxy() * self.group0().yzx()).with_w(geometric_product[e31] * self[e315]),
        );
    }
}
impl GeometricQuotient<AntiMotor> for Motor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       26        0
    //    simd3        0        2        0
    //    simd4        6        8        0
    // Totals...
    // yes simd       25       36        0
    //  no simd       43       64        0
    fn geometric_quotient(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, e3215
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e23], 2) + f32::powi(other[e31], 2) + f32::powi(other[e12], 2) + f32::powi(other[scalar], 2),
        );
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e15, e25, e35, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (geometric_product[e31] * self[e435]) + (geometric_product[scalar] * self[e415]),
                (geometric_product[e12] * self[e415]) + (geometric_product[scalar] * self[e425]),
                (geometric_product[e12] * self[e12345]) + (geometric_product[scalar] * self[e435]),
                -(geometric_product[e31] * self[e425]) - (geometric_product[e12] * self[e435]),
            ]) + (geometric_product.group0().xyxw() * self.group0().wwyw())
                - (geometric_product.group0().zxyx() * self.group0().yzxx()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (geometric_product[scalar] * self[e235])
                    + (geometric_product[e15] * self[e12345])
                    + (geometric_product[e25] * self[e435])
                    + (geometric_product[e3215] * self[e415]),
                (geometric_product[scalar] * self[e315])
                    + (geometric_product[e25] * self[e12345])
                    + (geometric_product[e35] * self[e415])
                    + (geometric_product[e3215] * self[e425]),
                (geometric_product[scalar] * self[e125])
                    + (geometric_product[e15] * self[e425])
                    + (geometric_product[e35] * self[e12345])
                    + (geometric_product[e3215] * self[e435]),
                -(geometric_product[e12] * self[e125]) - (geometric_product[e15] * self[e415]) - (geometric_product[e25] * self[e425]) - (geometric_product[e35] * self[e435]),
            ]) + (geometric_product.group0().xyxw() * self.group1().wwyw())
                + (geometric_product.group0().yzz() * self.group1().zxw()).with_w(geometric_product[e3215] * self[e12345])
                - (geometric_product.group0().zxyx() * self.group1().yzxx())
                - (geometric_product.group1().zxy() * self.group0().yzx()).with_w(geometric_product[e31] * self[e315]),
        );
    }
}
impl GeometricQuotient<AntiPlane> for Motor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        4        0
    //    simd4        6        7        0
    // Totals...
    // yes simd        8       11        0
    //  no simd       26       32        0
    fn geometric_quotient(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiPlane::from_groups(
            // e1, e2, e3, e5
            Simd32x4::from(f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)) * other.group0(),
        );
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([geometric_product[e3] * self[e315], geometric_product[e1] * self[e125], geometric_product[e2] * self[e235], 0.0])
                - (geometric_product.group0().xyxx() * self.group1().wwy().with_w(self[e415]))
                - (geometric_product.group0().yzzy() * self.group1().zxw().with_w(self[e425]))
                - (geometric_product.group0().wwwz() * self.group0().xyzz()),
            // e4235, e4315, e4125, e3215
            (geometric_product.group0().xyxx() * self.group0().wwy().with_w(self[e235]))
                + (geometric_product.group0().yzzy() * self.group0().zxw().with_w(self[e315]))
                + Simd32x3::from(0.0).with_w(geometric_product[e3] * self[e125])
                - (geometric_product.group0().zxyw() * self.group0().yzxw()),
        );
    }
}
impl GeometricQuotient<AntiScalar> for Motor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        1
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        5        1
    //  no simd        0       17        1
    fn geometric_quotient(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiScalar::from_groups(/* e12345 */ 1.0 / other[e12345] * -1.0);
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(geometric_product[e12345]) * self.group0() * Simd32x4::from(-1.0),
            // e15, e25, e35, e3215
            Simd32x4::from(geometric_product[e12345]) * self.group1() * Simd32x4::from(-1.0),
        );
    }
}
impl GeometricQuotient<Circle> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       38       61        0
    //    simd3        0        8        0
    //    simd4        8        6        0
    // Totals...
    // yes simd       46       75        0
    //  no simd       70      109        0
    fn geometric_quotient(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let reverse = Circle::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125
            other.group2() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group2(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(geometric_product[e423] * self[e12345]) - (geometric_product[e431] * self[e435]),
                -(geometric_product[e431] * self[e12345]) - (geometric_product[e412] * self[e415]),
                -(geometric_product[e423] * self[e425]) - (geometric_product[e412] * self[e12345]),
                (geometric_product[e431] * self[e315])
                    + (geometric_product[e412] * self[e125])
                    + (geometric_product[e415] * self[e415])
                    + (geometric_product[e425] * self[e425])
                    + (geometric_product[e435] * self[e435]),
            ]) + (geometric_product.group0().zxy() * self.group0().yzx()).with_w(geometric_product[e423] * self[e235]),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(geometric_product[e423] * self[e5]) - (geometric_product[e431] * self[e125]) - (geometric_product[e415] * self[e12345]) - (geometric_product[e425] * self[e435]),
                -(geometric_product[e431] * self[e5]) - (geometric_product[e412] * self[e235]) - (geometric_product[e425] * self[e12345]) - (geometric_product[e435] * self[e415]),
                -(geometric_product[e423] * self[e315]) - (geometric_product[e412] * self[e5]) - (geometric_product[e415] * self[e425]) - (geometric_product[e435] * self[e12345]),
                (geometric_product[e412] * self[e125]) + (geometric_product[e321] * self[e12345]),
            ]) + (self.group1().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e423]))
                + (geometric_product.group1().zxy() * self.group0().yzx()).with_w(geometric_product[e431] * self[e315]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(geometric_product[e415] * self[e5])
                    - (geometric_product[e425] * self[e125])
                    - (geometric_product[e321] * self[e235])
                    - (geometric_product[e235] * self[e12345])
                    - (geometric_product[e315] * self[e435]),
                -(geometric_product[e425] * self[e5])
                    - (geometric_product[e435] * self[e235])
                    - (geometric_product[e321] * self[e315])
                    - (geometric_product[e315] * self[e12345])
                    - (geometric_product[e125] * self[e415]),
                -(geometric_product[e415] * self[e315])
                    - (geometric_product[e435] * self[e5])
                    - (geometric_product[e321] * self[e125])
                    - (geometric_product[e235] * self[e425])
                    - (geometric_product[e125] * self[e12345]),
                geometric_product[e412] * self[e435],
            ]) + (self.group0().yzxx() * geometric_product.group2().zxy().with_w(geometric_product[e423]))
                + (geometric_product.group1().zxy() * self.group1().yzx()).with_w(geometric_product[e431] * self[e425]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                geometric_product[e431] * self[e125] * -1.0,
                geometric_product[e412] * self[e235] * -1.0,
                geometric_product[e412] * self[e5] * -1.0,
                (geometric_product[e415] * self[e235]) + (geometric_product[e425] * self[e315]) + (geometric_product[e435] * self[e125]) + (geometric_product[e125] * self[e435]),
            ]) + (self.group0().xyzy() * geometric_product.group1().www().with_w(geometric_product[e315]))
                + (geometric_product.group0().zxy() * self.group1().yzx()).with_w(geometric_product[e235] * self[e415])
                - (self.group1().wwyw() * geometric_product.group0().xyx().with_w(geometric_product[e321])),
        );
    }
}
impl GeometricQuotient<CircleRotor> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       42       60        0
    //    simd3        0        5        0
    //    simd4       10       11        0
    // Totals...
    // yes simd       52       76        0
    //  no simd       82      119        0
    fn geometric_quotient(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let reverse = CircleRotor::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e12345
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - f32::powi(other[e12345], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                geometric_product[e431] * self[e435] * -1.0,
                geometric_product[e412] * self[e415] * -1.0,
                geometric_product[e412] * self[e12345] * -1.0,
                (geometric_product[e431] * self[e315])
                    + (geometric_product[e412] * self[e125])
                    + (geometric_product[e415] * self[e415])
                    + (geometric_product[e425] * self[e425])
                    + (geometric_product[e435] * self[e435]),
            ]) + (geometric_product.group0().zxy() * self.group0().yzx()).with_w(geometric_product[e423] * self[e235])
                - (self.group0().wwyw() * geometric_product.group0().xyx().with_w(geometric_product[e12345])),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(geometric_product[e423] * self[e5])
                    - (geometric_product[e431] * self[e125])
                    - (geometric_product[e415] * self[e12345])
                    - (geometric_product[e425] * self[e435])
                    - (geometric_product[e12345] * self[e415]),
                -(geometric_product[e431] * self[e5])
                    - (geometric_product[e412] * self[e235])
                    - (geometric_product[e425] * self[e12345])
                    - (geometric_product[e435] * self[e415])
                    - (geometric_product[e12345] * self[e425]),
                -(geometric_product[e423] * self[e315])
                    - (geometric_product[e412] * self[e5])
                    - (geometric_product[e415] * self[e425])
                    - (geometric_product[e435] * self[e12345])
                    - (geometric_product[e12345] * self[e435]),
                (geometric_product[e412] * self[e125]) + (geometric_product[e321] * self[e12345]),
            ]) + (self.group1().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e423]))
                + (geometric_product.group1().zxy() * self.group0().yzx()).with_w(geometric_product[e431] * self[e315]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(geometric_product[e415] * self[e5])
                    - (geometric_product[e425] * self[e125])
                    - (geometric_product[e321] * self[e235])
                    - (geometric_product[e235] * self[e12345])
                    - (geometric_product[e315] * self[e435])
                    - (geometric_product[e12345] * self[e235]),
                -(geometric_product[e425] * self[e5])
                    - (geometric_product[e435] * self[e235])
                    - (geometric_product[e321] * self[e315])
                    - (geometric_product[e315] * self[e12345])
                    - (geometric_product[e125] * self[e415])
                    - (geometric_product[e12345] * self[e315]),
                -(geometric_product[e415] * self[e315])
                    - (geometric_product[e435] * self[e5])
                    - (geometric_product[e321] * self[e125])
                    - (geometric_product[e235] * self[e425])
                    - (geometric_product[e125] * self[e12345])
                    - (geometric_product[e12345] * self[e125]),
                geometric_product[e412] * self[e435],
            ]) + (self.group0().yzxy() * geometric_product.group2().zxy().with_w(geometric_product[e431]))
                + (geometric_product.group1().zxy() * self.group1().yzx()).with_w(geometric_product[e423] * self[e415]),
            // e4235, e4315, e4125, e3215
            (geometric_product.group1().wwwy() * self.group0().xyz().with_w(self[e315]))
                + (self.group1().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e415]))
                + Simd32x3::from(0.0).with_w(
                    (geometric_product[e435] * self[e125])
                        + (geometric_product[e235] * self[e415])
                        + (geometric_product[e315] * self[e425])
                        + (geometric_product[e125] * self[e435]),
                )
                - (self.group1().zxww() * geometric_product.group0().yzz().with_w(geometric_product[e12345]))
                - (self.group1().wwyw() * geometric_product.group0().xyx().with_w(geometric_product[e321])),
        );
    }
}
impl GeometricQuotient<Dipole> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       49        0
    //    simd3        0       11        0
    //    simd4       11        6        0
    // Totals...
    // yes simd       39       66        0
    //  no simd       72      106        0
    fn geometric_quotient(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let reverse = Dipole::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35
            other.group2() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2),
        );
        let geometric_product = Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35
            Simd32x3::from(other_2[scalar]) * reverse.group2(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (geometric_product[e41] * self[e12345]) + (geometric_product[e42] * self[e435]),
                (geometric_product[e42] * self[e12345]) + (geometric_product[e43] * self[e415]),
                (geometric_product[e41] * self[e425]) + (geometric_product[e43] * self[e12345]),
                -(geometric_product[e42] * self[e315])
                    - (geometric_product[e43] * self[e125])
                    - (geometric_product[e23] * self[e415])
                    - (geometric_product[e31] * self[e425])
                    - (geometric_product[e12] * self[e435]),
            ]) - (geometric_product.group0().zxy() * self.group0().yzx()).with_w(geometric_product[e41] * self[e235]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (geometric_product[e31] * self[e435]) - (geometric_product[e12] * self[e425]),
                (geometric_product[e12] * self[e415]) - (geometric_product[e23] * self[e435]),
                (geometric_product[e12] * self[e12345]) - (geometric_product[e31] * self[e415]),
                0.0,
            ]) + (self.group1().zxwy() * geometric_product.group0().yzz().with_w(geometric_product[e42]))
                + (self.group1().wwyx() * geometric_product.group0().xyx().with_w(geometric_product[e41]))
                + (geometric_product.group1().xyx() * self.group0().wwy()).with_w(geometric_product[e43] * self[e125])
                - (geometric_product.group0().zxy() * self.group1().yzx()).with_w(geometric_product[e45] * self[e12345]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (geometric_product[e23] * self[e5]) + (geometric_product[e31] * self[e125]) + (geometric_product[e15] * self[e12345]) + (geometric_product[e25] * self[e435]),
                (geometric_product[e31] * self[e5]) + (geometric_product[e12] * self[e235]) + (geometric_product[e25] * self[e12345]) + (geometric_product[e35] * self[e415]),
                (geometric_product[e23] * self[e315]) + (geometric_product[e12] * self[e5]) + (geometric_product[e15] * self[e425]) + (geometric_product[e35] * self[e12345]),
                -(geometric_product[e23] * self[e235]) - (geometric_product[e31] * self[e315]) - (geometric_product[e12] * self[e125]) - (geometric_product[e45] * self[e5]),
            ]) - (self.group0().yzxx() * geometric_product.group2().zxy().with_w(geometric_product[e15]))
                - (geometric_product.group1().zxy() * self.group1().yzx()).with_w(geometric_product[e25] * self[e425])
                - (geometric_product.group1().www() * self.group1().xyz()).with_w(geometric_product[e35] * self[e435]),
            // e1, e2, e3, e4
            Simd32x4::from([geometric_product[e43] * self[e315], geometric_product[e41] * self[e125], geometric_product[e42] * self[e235], 0.0])
                - (self.group0().xyzz() * geometric_product.group1().www().with_w(geometric_product[e43]))
                - (geometric_product.group0().xyx() * self.group1().wwy()).with_w(geometric_product[e41] * self[e415])
                - (geometric_product.group0().yzz() * self.group1().zxw()).with_w(geometric_product[e42] * self[e425]),
        );
    }
}
impl GeometricQuotient<DipoleInversion> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       30       52        0
    //    simd3        0       14        0
    //    simd4       22       15        0
    // Totals...
    // yes simd       52       81        0
    //  no simd      118      154        0
    fn geometric_quotient(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let reverse = DipoleInversion::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + 2.0 * (other[e1234] * other[e3215])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2),
        );
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (geometric_product[e42] * self[e435]) + (geometric_product[e1234] * self[e415]),
                (geometric_product[e43] * self[e415]) + (geometric_product[e1234] * self[e425]),
                (geometric_product[e43] * self[e12345]) + (geometric_product[e1234] * self[e435]),
                -(geometric_product[e42] * self[e315])
                    - (geometric_product[e43] * self[e125])
                    - (geometric_product[e23] * self[e415])
                    - (geometric_product[e31] * self[e425])
                    - (geometric_product[e12] * self[e435]),
            ]) + (geometric_product.group0().xyx() * self.group0().wwy()).with_w(geometric_product[e1234] * self[e5])
                - (geometric_product.group0().zxy() * self.group0().yzx()).with_w(geometric_product[e41] * self[e235]),
            // e415, e425, e435, e321
            (self.group0().zxwx() * geometric_product.group1().yzz().with_w(geometric_product[e4235]))
                + (self.group1().zxwy() * geometric_product.group0().yzz().with_w(geometric_product[e42]))
                + (self.group1().wwyx() * geometric_product.group0().xyx().with_w(geometric_product[e41]))
                + Simd32x3::from(0.0).with_w(geometric_product[e4125] * self[e435])
                + (geometric_product.group1().xyx() * self.group0().wwy()).with_w(geometric_product[e43] * self[e125])
                + (geometric_product.group2().www() * self.group1().xyz()).with_w(geometric_product[e4315] * self[e425])
                - (geometric_product.group0().zxy() * self.group1().yzx()).with_w(geometric_product[e45] * self[e12345])
                - (geometric_product.group1().zxy() * self.group0().yzx()).with_w(geometric_product[e1234] * self[e5]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (geometric_product[e4125] * self[e315]) + (geometric_product[e3215] * self[e415]),
                (geometric_product[e4235] * self[e125]) + (geometric_product[e3215] * self[e425]),
                (geometric_product[e4315] * self[e235]) + (geometric_product[e3215] * self[e435]),
                -(geometric_product[e25] * self[e425]) - (geometric_product[e35] * self[e435]),
            ]) + (self.group0().zxww() * geometric_product.group2().yzz().with_w(geometric_product[e3215]))
                + (self.group1().zxwy() * geometric_product.group1().yzz().with_w(geometric_product[e4315]))
                + (self.group1().wwyx() * geometric_product.group1().xyx().with_w(geometric_product[e4235]))
                + (geometric_product.group2().xyx() * self.group0().wwy()).with_w(geometric_product[e4125] * self[e125])
                - (geometric_product.group1().zxyx() * self.group1().yzxx())
                - (geometric_product.group1().wwwy() * self.group1().xyzy())
                - (self.group1().wwyw() * geometric_product.group3().xyx().with_w(geometric_product[e45]))
                - (geometric_product.group2().zxy() * self.group0().yzx()).with_w(geometric_product[e12] * self[e125])
                - (geometric_product.group3().yzz() * self.group1().zxw()).with_w(geometric_product[e15] * self[e415]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (geometric_product[e4125] * self[e425])
                    - (geometric_product[e1234] * self[e235])
                    - (geometric_product[e4235] * self[e12345])
                    - (geometric_product[e4315] * self[e435]),
                (geometric_product[e4235] * self[e435])
                    - (geometric_product[e1234] * self[e315])
                    - (geometric_product[e4315] * self[e12345])
                    - (geometric_product[e4125] * self[e415]),
                (geometric_product[e4315] * self[e415])
                    - (geometric_product[e1234] * self[e125])
                    - (geometric_product[e4235] * self[e425])
                    - (geometric_product[e4125] * self[e12345]),
                0.0,
            ]) + (geometric_product.group0().zxy() * self.group1().yzx()).with_w(geometric_product[e1234] * self[e12345])
                - (self.group0().xyzz() * geometric_product.group1().www().with_w(geometric_product[e43]))
                - (geometric_product.group0().xyx() * self.group1().wwy()).with_w(geometric_product[e41] * self[e415])
                - (geometric_product.group0().yzz() * self.group1().zxw()).with_w(geometric_product[e42] * self[e425]),
        );
    }
}
impl GeometricQuotient<DualNum> for Motor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd2        0        1        0
    //    simd4        1        4        0
    // Totals...
    // yes simd        1        6        0
    //  no simd        4       19        0
    fn geometric_quotient(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DualNum::from_groups(/* e5, e12345 */ Simd32x2::from(f32::powi(other[e12345], -2) * -1.0) * other.group0());
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(geometric_product[e12345]) * self.group0() * Simd32x4::from(-1.0),
            // e15, e25, e35, e3215
            -(Simd32x4::from(geometric_product[e5]) * self.group0()) - (Simd32x4::from(geometric_product[e12345]) * self.group1()),
        );
    }
}
impl GeometricQuotient<FlatPoint> for Motor {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       11        0
    //    simd3        3        6        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        6       18        0
    //  no simd       12       33        0
    fn geometric_quotient(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = FlatPoint::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(f32::powi(other[e45], -2) * -1.0) * Simd32x4::from([other[e15] * -1.0, other[e25] * -1.0, other[e35] * -1.0, other[e45] * -1.0]),
        );
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            ((geometric_product.group0().xyx() * self.group0().wwy()) + (geometric_product.group0().yzz() * self.group0().zxw())
                - (Simd32x3::from(geometric_product[e45]) * self.group1().xyz())
                - (geometric_product.group0().zxy() * self.group0().yzx()))
            .with_w(geometric_product[e45] * self[e12345] * -1.0),
            // e1, e2, e3, e5
            (geometric_product.group0().www() * self.group0().xyz() * Simd32x3::from(-1.0)).with_w(
                -(geometric_product[e15] * self[e415]) - (geometric_product[e25] * self[e425]) - (geometric_product[e35] * self[e435]) - (geometric_product[e45] * self[e5]),
            ),
        );
    }
}
impl GeometricQuotient<Flector> for Motor {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       16        0
    //    simd4        8       11        0
    // Totals...
    // yes simd       23       27        0
    //  no simd       47       60        0
    fn geometric_quotient(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let reverse = Flector::from_groups(
            // e15, e25, e35, e45
            other.group0() * Simd32x4::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group1(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            -f32::powi(other[e45], 2) - f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2),
        );
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (geometric_product[e3215] * self[e415]) - (geometric_product[e45] * self[e235]) - (geometric_product[e4235] * self[e5]) - (geometric_product[e4315] * self[e125]),
                (geometric_product[e3215] * self[e425]) - (geometric_product[e45] * self[e315]) - (geometric_product[e4315] * self[e5]) - (geometric_product[e4125] * self[e235]),
                (geometric_product[e3215] * self[e435]) - (geometric_product[e45] * self[e125]) - (geometric_product[e4235] * self[e315]) - (geometric_product[e4125] * self[e5]),
                0.0,
            ]) + (geometric_product.group1().zxyz() * self.group1().yzx().with_w(self[e435]))
                + (self.group0().zxwy() * geometric_product.group0().yzz().with_w(geometric_product[e4315]))
                + (self.group0().wwyx() * geometric_product.group0().xyx().with_w(geometric_product[e4235]))
                - (geometric_product.group0().zxyw() * self.group0().yzxw()),
            // e1, e2, e3, e5
            (geometric_product.group1().zxyx() * self.group0().yzx().with_w(self[e235]))
                + Simd32x3::from(0.0).with_w(
                    (geometric_product[e4315] * self[e315]) + (geometric_product[e4125] * self[e125]) + (geometric_product[e3215] * self[e12345])
                        - (geometric_product[e45] * self[e5]),
                )
                - (geometric_product.group0().wwwx() * self.group0().xyzx())
                - (self.group0().zxwz() * geometric_product.group1().yzz().with_w(geometric_product[e35]))
                - (self.group0().wwyy() * geometric_product.group1().xyx().with_w(geometric_product[e25])),
        );
    }
}
impl GeometricQuotient<Line> for Motor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       25        0
    //    simd3        0        5        0
    //    simd4        3        2        0
    // Totals...
    // yes simd       21       32        0
    //  no simd       30       48        0
    fn geometric_quotient(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let reverse = Line::from_groups(
            // e415, e425, e435
            other.group0() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group1() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(/* scalar */ -f32::powi(other[e415], 2) - f32::powi(other[e425], 2) - f32::powi(other[e435], 2));
        let geometric_product = Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group1(),
        );
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                -(geometric_product[e415] * self[e12345]) - (geometric_product[e425] * self[e435]),
                -(geometric_product[e425] * self[e12345]) - (geometric_product[e435] * self[e415]),
                -(geometric_product[e415] * self[e425]) - (geometric_product[e435] * self[e12345]),
                (geometric_product[e425] * self[e425]) + (geometric_product[e435] * self[e435]),
            ]) + (self.group0().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e415])),
            // e15, e25, e35, e3215
            Simd32x4::from([
                -(geometric_product[e415] * self[e5]) - (geometric_product[e425] * self[e125]) - (geometric_product[e235] * self[e12345]) - (geometric_product[e315] * self[e435]),
                -(geometric_product[e425] * self[e5]) - (geometric_product[e435] * self[e235]) - (geometric_product[e315] * self[e12345]) - (geometric_product[e125] * self[e415]),
                -(geometric_product[e415] * self[e315]) - (geometric_product[e435] * self[e5]) - (geometric_product[e235] * self[e425]) - (geometric_product[e125] * self[e12345]),
                (geometric_product[e435] * self[e125]) + (geometric_product[e235] * self[e415]) + (geometric_product[e315] * self[e425]) + (geometric_product[e125] * self[e435]),
            ]) + (self.group1().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e415]))
                + (geometric_product.group1().zxy() * self.group0().yzx()).with_w(geometric_product[e425] * self[e315]),
        );
    }
}
impl GeometricQuotient<Motor> for Motor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       26        0
    //    simd3        0        2        0
    //    simd4        6        8        0
    // Totals...
    // yes simd       25       36        0
    //  no simd       43       64        0
    fn geometric_quotient(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let reverse = Motor::from_groups(
            // e415, e425, e435, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            -f32::powi(other[e415], 2) - f32::powi(other[e425], 2) - f32::powi(other[e435], 2) - f32::powi(other[e12345], 2),
        );
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e235, e315, e125, e5
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                -(geometric_product[e425] * self[e435]) - (geometric_product[e12345] * self[e415]),
                -(geometric_product[e435] * self[e415]) - (geometric_product[e12345] * self[e425]),
                -(geometric_product[e435] * self[e12345]) - (geometric_product[e12345] * self[e435]),
                (geometric_product[e425] * self[e425]) + (geometric_product[e435] * self[e435]),
            ]) + (geometric_product.group0().zxyx() * self.group0().yzxx())
                - (geometric_product.group0().xyxw() * self.group0().wwyw()),
            // e15, e25, e35, e3215
            Simd32x4::from([
                -(geometric_product[e12345] * self[e235])
                    - (geometric_product[e235] * self[e12345])
                    - (geometric_product[e315] * self[e435])
                    - (geometric_product[e5] * self[e415]),
                -(geometric_product[e12345] * self[e315])
                    - (geometric_product[e315] * self[e12345])
                    - (geometric_product[e125] * self[e415])
                    - (geometric_product[e5] * self[e425]),
                -(geometric_product[e12345] * self[e125])
                    - (geometric_product[e235] * self[e425])
                    - (geometric_product[e125] * self[e12345])
                    - (geometric_product[e5] * self[e435]),
                (geometric_product[e435] * self[e125]) + (geometric_product[e235] * self[e415]) + (geometric_product[e315] * self[e425]) + (geometric_product[e125] * self[e435]),
            ]) + (geometric_product.group0().zxyx() * self.group1().yzxx())
                + (geometric_product.group1().zxy() * self.group0().yzx()).with_w(geometric_product[e425] * self[e315])
                - (geometric_product.group0().xyxw() * self.group1().wwyw())
                - (geometric_product.group0().yzz() * self.group1().zxw()).with_w(geometric_product[e5] * self[e12345]),
        );
    }
}
impl GeometricQuotient<MultiVector> for Motor {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       68       98        0
    //    simd2        4        5        0
    //    simd3       24       53        0
    //    simd4       25       15        0
    // Totals...
    // yes simd      121      171        0
    //  no simd      248      327        0
    fn geometric_quotient(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let reverse = MultiVector::from_groups(
            // scalar, e12345
            other.group0(),
            // e1, e2, e3, e4
            other.group1(),
            // e5
            other[e5],
            // e15, e25, e35, e45
            other.group3() * Simd32x4::from(-1.0),
            // e41, e42, e43
            other.group4() * Simd32x3::from(-1.0),
            // e23, e31, e12
            other.group5() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group6() * Simd32x4::from(-1.0),
            // e423, e431, e412
            other.group7() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group8() * Simd32x3::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group9(),
            // e1234
            other[e1234],
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e15] * other[e41])
                + 2.0 * (other[e25] * other[e42])
                + 2.0 * (other[e35] * other[e43])
                + 2.0 * (other[e3215] * other[e1234])
                + f32::powi(other[scalar], 2)
                + f32::powi(other[e1], 2)
                + f32::powi(other[e2], 2)
                + f32::powi(other[e3], 2)
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                + f32::powi(other[e321], 2)
                - f32::powi(other[e12345], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2)
                - 2.0 * (other[e4] * other[e5])
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(other_2[scalar]) * reverse.group0(),
            // e1, e2, e3, e4
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e5
            reverse[e5] * other_2[scalar],
            // e15, e25, e35, e45
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group4(),
            // e23, e31, e12
            Simd32x3::from(other_2[scalar]) * reverse.group5(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group6(),
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group7(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group8(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group9(),
            // e1234
            reverse[e1234] * other_2[scalar],
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e425] * geometric_product[e425]) + (self[e435] * geometric_product[e435]) + (self[e315] * geometric_product[e431]) + (self[e125] * geometric_product[e412]),
                -(self[e425] * geometric_product[e31]) - (self[e435] * geometric_product[e12]) - (self[e315] * geometric_product[e42]) - (self[e125] * geometric_product[e43]),
            ]) + (Simd32x2::from([geometric_product[e415], geometric_product[scalar]]) * self.group0().xw())
                + (Simd32x2::from([geometric_product[e423], geometric_product[e1234]]) * self.group1().xw())
                - (Simd32x2::from([geometric_product[e12345], geometric_product[e23]]) * self.group0().wx())
                - (Simd32x2::from([geometric_product[e4], geometric_product[e41]]) * self.group1().wx()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e425] * geometric_product[e4125])
                    - (self[e435] * geometric_product[e4315])
                    - (self[e12345] * geometric_product[e4235])
                    - (self[e235] * geometric_product[e1234]),
                (self[e435] * geometric_product[e4235])
                    - (self[e425] * geometric_product[e45])
                    - (self[e12345] * geometric_product[e4315])
                    - (self[e315] * geometric_product[e1234]),
                (self[e415] * geometric_product[e4315])
                    - (self[e435] * geometric_product[e45])
                    - (self[e12345] * geometric_product[e4125])
                    - (self[e125] * geometric_product[e1234]),
                0.0,
            ]) + (geometric_product.group4().zxy() * self.group1().yzx()).with_w(self[e12345] * geometric_product[e1234])
                - (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], self[e435]]) * self.group0().xxy().with_w(geometric_product[e43]))
                - (geometric_product.group4().xyx() * self.group1().wwy()).with_w(self[e415] * geometric_product[e41])
                - (geometric_product.group4().yzz() * self.group1().zxw()).with_w(self[e425] * geometric_product[e42]),
            // e5
            (self[e12345] * geometric_product[e3215])
                + (self[e235] * geometric_product[e4235])
                + (self[e315] * geometric_product[e4315])
                + (self[e125] * geometric_product[e4125])
                + (self[e5] * geometric_product[scalar])
                - (self[e415] * geometric_product[e15])
                - (self[e425] * geometric_product[e25])
                - (self[e435] * geometric_product[e35])
                - (self[e235] * geometric_product[e23])
                - (self[e315] * geometric_product[e31])
                - (self[e125] * geometric_product[e12])
                - (self[e5] * geometric_product[e45]),
            // e15, e25, e35, e45
            Simd32x4::from([
                -(self[e235] * geometric_product[e321])
                    - (self[e125] * geometric_product[e2])
                    - (self[e125] * geometric_product[e425])
                    - (self[e5] * geometric_product[e1])
                    - (self[e5] * geometric_product[e415]),
                -(self[e235] * geometric_product[e3])
                    - (self[e235] * geometric_product[e435])
                    - (self[e315] * geometric_product[e321])
                    - (self[e5] * geometric_product[e2])
                    - (self[e5] * geometric_product[e425]),
                -(self[e315] * geometric_product[e1])
                    - (self[e315] * geometric_product[e415])
                    - (self[e125] * geometric_product[e321])
                    - (self[e5] * geometric_product[e3])
                    - (self[e5] * geometric_product[e435]),
                self[e12345] * geometric_product[e321],
            ]) + (geometric_product.group8().zxy() * self.group0().yzx()).with_w(self[e235] * geometric_product[e423])
                + (self.group1().yzx() * geometric_product.group1().zxy()).with_w(self[e315] * geometric_product[e431])
                + (self.group1().yzx() * geometric_product.group6().zxy()).with_w(self[e125] * geometric_product[e412])
                - (geometric_product.group0().yy().with_zw(geometric_product[e12345], self[e415]) * self.group1().xyz().with_w(geometric_product[e1]))
                - (Simd32x3::from(geometric_product[e5]) * self.group0().xyz()).with_w(self[e5] * geometric_product[e4])
                - (geometric_product.group8().xyx() * self.group0().wwy()).with_w(self[e425] * geometric_product[e2])
                - (geometric_product.group8().yzz() * self.group0().zxw()).with_w(self[e435] * geometric_product[e3]),
            // e41, e42, e43
            (geometric_product.group7().zxy() * self.group0().yzx())
                - (Simd32x3::from(geometric_product[e4]) * self.group0().xyz())
                - (geometric_product.group7().xyx() * self.group0().wwy())
                - (geometric_product.group7().yzz() * self.group0().zxw()),
            // e23, e31, e12
            (geometric_product.group7().zxy() * self.group1().yzx()) + (self.group0().yzx() * geometric_product.group6().zxy())
                - (Simd32x3::from(self[e12345]) * geometric_product.group6().xyz())
                - (Simd32x3::from(geometric_product[e12345]) * self.group0().xyz())
                - (Simd32x3::from(geometric_product[e4]) * self.group1().xyz())
                - (geometric_product.group7().xyx() * self.group1().wwy())
                - (geometric_product.group7().yzz() * self.group1().zxw())
                - (self.group0().zxy() * geometric_product.group6().yzx()),
            // e415, e425, e435, e321
            (self.group1().zxwz() * geometric_product.group4().yzz().with_w(geometric_product[e43]))
                + (self.group1().wwyy() * geometric_product.group4().xyx().with_w(geometric_product[e42]))
                + (geometric_product.group0().xx().with_zw(geometric_product[scalar], geometric_product[e41]) * self.group0().xyz().with_w(self[e235]))
                + (Simd32x3::from(geometric_product[e1234]) * self.group1().xyz()).with_w(self[e435] * geometric_product[e4125])
                + (geometric_product.group5().xyx() * self.group0().wwy()).with_w(self[e415] * geometric_product[e4235])
                + (geometric_product.group5().yzz() * self.group0().zxw()).with_w(self[e425] * geometric_product[e4315])
                - (geometric_product.group4().zxy() * self.group1().yzx()).with_w(self[e12345] * geometric_product[e45])
                - (geometric_product.group5().zxy() * self.group0().yzx()).with_w(self[e5] * geometric_product[e1234]),
            // e423, e431, e412
            (Simd32x3::from(geometric_product[e1234]) * self.group0().xyz())
                + (geometric_product.group4().xyx() * self.group0().wwy())
                + (geometric_product.group4().yzz() * self.group0().zxw())
                - (geometric_product.group4().zxy() * self.group0().yzx()),
            // e235, e315, e125
            (Simd32x3::from(self[e12345]) * geometric_product.group3().xyz())
                + (Simd32x3::from(geometric_product[scalar]) * self.group1().xyz())
                + (Simd32x3::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215]]) * self.group0().zyz())
                + (Simd32x3::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15]]) * self.group0().xxy())
                + (geometric_product.group5().xyx() * self.group1().wwy())
                + (geometric_product.group5().yzz() * self.group1().zxw())
                + (self.group1().yzx() * geometric_product.group9().zxy())
                - (Simd32x3::from(self[e5]) * geometric_product.group9().xyz())
                - (Simd32x3::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235]]) * self.group1().xxy())
                - (Simd32x3::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45]]) * self.group1().zyz())
                - (geometric_product.group5().zxy() * self.group1().yzx())
                - (self.group0().yzx() * geometric_product.group3().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e235] * geometric_product[e4] * -1.0,
                self[e315] * geometric_product[e4] * -1.0,
                self[e125] * geometric_product[e4] * -1.0,
                (self[e235] * geometric_product[e415])
                    + (self[e315] * geometric_product[e2])
                    + (self[e315] * geometric_product[e425])
                    + (self[e125] * geometric_product[e3])
                    + (self[e125] * geometric_product[e435]),
            ]) + (Simd32x4::from([geometric_product[e2], geometric_product[e321], geometric_product[e321], self[e435]]) * self.group0().zyz().with_w(geometric_product[e125]))
                + (Simd32x4::from([geometric_product[e321], geometric_product[e3], geometric_product[e1], self[e425]]) * self.group0().xxy().with_w(geometric_product[e315]))
                + (geometric_product.group1().xyzx() * self.group0().www().with_w(self[e235]))
                + (geometric_product.group7().zxy() * self.group1().yzx()).with_w(self[e415] * geometric_product[e235])
                - (self.group1().wwyw() * geometric_product.group7().xyx().with_w(geometric_product[e12345]))
                - (geometric_product.group7().yzz() * self.group1().zxw()).with_w(self[e12345] * geometric_product[e5])
                - (self.group0().yzx() * geometric_product.group1().zxy()).with_w(self[e5] * geometric_product[e321]),
            // e1234
            (self[e415] * geometric_product[e423]) + (self[e425] * geometric_product[e431]) + (self[e435] * geometric_product[e412]) - (self[e12345] * geometric_product[e4]),
        );
    }
}
impl GeometricQuotient<Plane> for Motor {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       16        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       13       20        0
    //  no simd       22       32        0
    fn geometric_quotient(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Plane::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(-f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2)) * other.group0(),
        );
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                -(self[e125] * geometric_product[e4315]) - (self[e5] * geometric_product[e4235]),
                -(self[e235] * geometric_product[e4125]) - (self[e5] * geometric_product[e4315]),
                -(self[e315] * geometric_product[e4235]) - (self[e5] * geometric_product[e4125]),
                self[e435] * geometric_product[e4125],
            ]) + (self.group0().xyzx() * geometric_product.group0().wwwx())
                + (geometric_product.group0().zxyy() * self.group1().yzx().with_w(self[e425])),
            // e1, e2, e3, e5
            Simd32x4::from([
                -(self[e435] * geometric_product[e4315]) - (self[e12345] * geometric_product[e4235]),
                -(self[e415] * geometric_product[e4125]) - (self[e12345] * geometric_product[e4315]),
                -(self[e425] * geometric_product[e4235]) - (self[e12345] * geometric_product[e4125]),
                (self[e235] * geometric_product[e4235]) + (self[e315] * geometric_product[e4315]) + (self[e125] * geometric_product[e4125]),
            ]) + (self.group0().yzxw() * geometric_product.group0().zxyw()),
        );
    }
}
impl GeometricQuotient<RoundPoint> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       16        0
    //    simd3        3        6        0
    //    simd4        3        6        0
    // Totals...
    // yes simd       12       28        0
    //  no simd       27       58        0
    fn geometric_quotient(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2) - 2.0 * (other[e4] * other[e5]),
        );
        let geometric_product = RoundPoint::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from(other_2[scalar]) * other.group0(), /* e5 */ other[e5] * other_2[scalar]);
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(geometric_product[e4]) * self.group0().xyz().with_w(self[e5]) * Simd32x4::from(-1.0),
            // e23, e31, e12, e45
            (Simd32x3::from(geometric_product[e4]) * self.group1().xyz() * Simd32x3::from(-1.0))
                .with_w(-(self[e415] * geometric_product[e1]) - (self[e425] * geometric_product[e2]) - (self[e435] * geometric_product[e3]) - (self[e5] * geometric_product[e4])),
            // e15, e25, e35, e1234
            ((self.group1().yzx() * geometric_product.group0().zxy())
                - (Simd32x3::from(self[e5]) * geometric_product.group0().xyz())
                - (Simd32x3::from(geometric_product[e5]) * self.group0().xyz())
                - (self.group1().zxy() * geometric_product.group0().yzx()))
            .with_w(self[e12345] * geometric_product[e4] * -1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e235] * geometric_product[e4] * -1.0,
                self[e315] * geometric_product[e4] * -1.0,
                self[e125] * geometric_product[e4] * -1.0,
                self[e125] * geometric_product[e3],
            ]) + (geometric_product.group0().xyzy() * self.group0().www().with_w(self[e315]))
                + (geometric_product.group0().yzxx() * self.group0().zxy().with_w(self[e235]))
                - (self.group0().yzxw() * geometric_product.group0().zxy().with_w(geometric_product[e5])),
        );
    }
}
impl GeometricQuotient<Scalar> for Motor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        0        1
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        2        1
    //  no simd        0        8        1
    fn geometric_quotient(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Scalar::from_groups(/* scalar */ 1.0 / other[scalar]);
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(geometric_product[scalar]) * self.group0(),
            // e235, e315, e125, e5
            Simd32x4::from(geometric_product[scalar]) * self.group1(),
        );
    }
}
impl GeometricQuotient<Sphere> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       16        0
    //    simd3        3        5        0
    //    simd4        2        4        0
    // Totals...
    // yes simd       15       25        0
    //  no simd       27       47        0
    fn geometric_quotient(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e3215] * other[e1234]) - f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2),
        );
        let geometric_product = Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * other.group0(),
            // e1234
            other_2[scalar] * other[e1234],
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(geometric_product[e1234]) * self.group0().xyz().with_w(self[e5]),
            // e415, e425, e435, e321
            (Simd32x3::from(geometric_product[e1234]) * self.group1().xyz()).with_w(
                (self[e415] * geometric_product[e4235]) + (self[e425] * geometric_product[e4315]) + (self[e435] * geometric_product[e4125]) - (self[e5] * geometric_product[e1234]),
            ),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e125] * geometric_product[e4315]) - (self[e5] * geometric_product[e4235]),
                -(self[e235] * geometric_product[e4125]) - (self[e5] * geometric_product[e4315]),
                -(self[e315] * geometric_product[e4235]) - (self[e5] * geometric_product[e4125]),
                (self[e315] * geometric_product[e4315]) + (self[e125] * geometric_product[e4125]),
            ]) + (Simd32x4::from(geometric_product[e3215]) * self.group0())
                + (self.group1().yzxx() * geometric_product.group0().zxyx()),
            // e1, e2, e3, e4
            ((self.group0().yzx() * geometric_product.group0().zxy())
                - (Simd32x3::from(self[e12345]) * geometric_product.group0().xyz())
                - (Simd32x3::from(geometric_product[e1234]) * self.group1().xyz())
                - (self.group0().zxy() * geometric_product.group0().yzx()))
            .with_w(self[e12345] * geometric_product[e1234]),
        );
    }
}
impl GeometricQuotient<VersorEven> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44       64        0
    //    simd3        0        2        0
    //    simd4       20       25        0
    // Totals...
    // yes simd       64       91        0
    //  no simd      124      170        0
    fn geometric_quotient(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let reverse = VersorEven::from_groups(
            // e423, e431, e412, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e5
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e4
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)
                - f32::powi(other[e12345], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125])
                - 2.0 * (other[e5] * other[e4]),
        );
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e5
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e1, e2, e3, e4
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e12345] * geometric_product[e423] * -1.0,
                self[e12345] * geometric_product[e431] * -1.0,
                self[e12345] * geometric_product[e412] * -1.0,
                (self[e425] * geometric_product[e425])
                    + (self[e435] * geometric_product[e435])
                    + (self[e235] * geometric_product[e423])
                    + (self[e315] * geometric_product[e431])
                    + (self[e125] * geometric_product[e412]),
            ]) + (self.group0().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e415]))
                - (Simd32x4::from([geometric_product[e431], geometric_product[e4], geometric_product[e4], geometric_product[e4]]) * self.group0().zyz().with_w(self[e5]))
                - (Simd32x4::from([geometric_product[e4], geometric_product[e412], geometric_product[e423], geometric_product[e12345]]) * self.group0().xxyw()),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(self[e125] * geometric_product[e431]) - (self[e5] * geometric_product[e423]),
                -(self[e315] * geometric_product[e4]) - (self[e5] * geometric_product[e431]),
                -(self[e125] * geometric_product[e4]) - (self[e5] * geometric_product[e412]),
                (self[e315] * geometric_product[e431]) + (self[e125] * geometric_product[e412]),
            ]) + (self.group0().yzxw() * geometric_product.group1().zxyw())
                + (self.group1().yzxx() * geometric_product.group0().zxyx())
                - (Simd32x4::from([geometric_product[e12345], geometric_product[e435], geometric_product[e415], geometric_product[e1]]) * self.group0().xxyx())
                - (Simd32x4::from([geometric_product[e425], geometric_product[e12345], geometric_product[e12345], geometric_product[e2]]) * self.group0().zyzy())
                - (Simd32x4::from([geometric_product[e4], geometric_product[e412], geometric_product[e423], geometric_product[e4]]) * self.group1().xxyw())
                - (self.group0().wwwz() * geometric_product.group1().xyz().with_w(geometric_product[e3])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(self[e435] * geometric_product[e315])
                    - (self[e12345] * geometric_product[e235])
                    - (self[e235] * geometric_product[e12345])
                    - (self[e235] * geometric_product[e321])
                    - (self[e125] * geometric_product[e425])
                    - (self[e125] * geometric_product[e2])
                    - (self[e5] * geometric_product[e415])
                    - (self[e5] * geometric_product[e1]),
                -(self[e425] * geometric_product[e5])
                    - (self[e12345] * geometric_product[e315])
                    - (self[e235] * geometric_product[e435])
                    - (self[e235] * geometric_product[e3])
                    - (self[e315] * geometric_product[e12345])
                    - (self[e315] * geometric_product[e321])
                    - (self[e5] * geometric_product[e425])
                    - (self[e5] * geometric_product[e2]),
                -(self[e435] * geometric_product[e5])
                    - (self[e12345] * geometric_product[e125])
                    - (self[e315] * geometric_product[e415])
                    - (self[e315] * geometric_product[e1])
                    - (self[e125] * geometric_product[e12345])
                    - (self[e125] * geometric_product[e321])
                    - (self[e5] * geometric_product[e435])
                    - (self[e5] * geometric_product[e3]),
                0.0,
            ]) + (self.group0().yzxx() * geometric_product.group2().zxy().with_w(geometric_product[e423]))
                + (self.group1().yzx() * geometric_product.group1().zxy()).with_w(self[e425] * geometric_product[e431])
                + (self.group1().yzx() * geometric_product.group3().zxy()).with_w(self[e435] * geometric_product[e412])
                - (self.group0().xxyw() * geometric_product.group2().wzx().with_w(geometric_product[e4])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e5] * geometric_product[e423] * -1.0,
                self[e5] * geometric_product[e431] * -1.0,
                self[e5] * geometric_product[e412] * -1.0,
                (self[e235] * geometric_product[e1])
                    + (self[e315] * geometric_product[e425])
                    + (self[e315] * geometric_product[e2])
                    + (self[e125] * geometric_product[e435])
                    + (self[e125] * geometric_product[e3]),
            ]) + (Simd32x4::from([geometric_product[e321], geometric_product[e3], geometric_product[e1], geometric_product[e235]]) * self.group0().xxyx())
                + (Simd32x4::from([geometric_product[e2], geometric_product[e321], geometric_product[e321], geometric_product[e315]]) * self.group0().zyzy())
                + (self.group0().wwwz() * geometric_product.group3().xyz().with_w(geometric_product[e125]))
                + (self.group1().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e415]))
                - (Simd32x4::from([geometric_product[e431], geometric_product[e4], geometric_product[e4], geometric_product[e321]]) * self.group1().zyzw())
                - (Simd32x4::from([geometric_product[e4], geometric_product[e412], geometric_product[e423], geometric_product[e12345]]) * self.group1().xxyw())
                - (self.group0().yzxw() * geometric_product.group3().zxy().with_w(geometric_product[e5])),
        );
    }
}
impl GeometricQuotient<VersorOdd> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       37        0
    //    simd3        0        1        0
    //    simd4       24       31        0
    // Totals...
    // yes simd       52       69        0
    //  no simd      124      164        0
    fn geometric_quotient(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let reverse = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + 2.0 * (other[e1234] * other[e3215])
                + f32::powi(other[scalar], 2)
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2),
        );
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e12345] * geometric_product[e41],
                self[e12345] * geometric_product[e42],
                self[e12345] * geometric_product[e43],
                -(self[e425] * geometric_product[e31])
                    - (self[e435] * geometric_product[e12])
                    - (self[e235] * geometric_product[e41])
                    - (self[e315] * geometric_product[e42])
                    - (self[e125] * geometric_product[e43]),
            ]) + (Simd32x4::from([geometric_product[e42], geometric_product[e1234], geometric_product[e1234], geometric_product[e1234]]) * self.group0().zyz().with_w(self[e5]))
                + (Simd32x4::from([geometric_product[e1234], geometric_product[e43], geometric_product[e41], geometric_product[scalar]]) * self.group0().xxyw())
                - (self.group0().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e23])),
            // e415, e425, e435, e321
            (Simd32x4::from([geometric_product[e42], geometric_product[e1234], geometric_product[e1234], geometric_product[e42]]) * self.group1().zyzy())
                + (Simd32x4::from([geometric_product[scalar], geometric_product[e12], geometric_product[e23], geometric_product[e4235]]) * self.group0().xxyx())
                + (Simd32x4::from([geometric_product[e31], geometric_product[scalar], geometric_product[scalar], geometric_product[e4315]]) * self.group0().zyzy())
                + (Simd32x4::from([geometric_product[e1234], geometric_product[e43], geometric_product[e41], geometric_product[e41]]) * self.group1().xxyx())
                + (self.group0().wwwz() * geometric_product.group1().xyz().with_w(geometric_product[e4125]))
                + (self.group1().wwwz() * geometric_product.group0().xyzz())
                - (self.group0().yzxw() * geometric_product.group1().zxyw())
                - (self.group1().yzxw() * geometric_product.group0().zxy().with_w(geometric_product[e1234])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e125] * geometric_product[e31]) + (self[e5] * geometric_product[e23]),
                (self[e125] * geometric_product[e4235]) + (self[e5] * geometric_product[e31]),
                (self[e125] * geometric_product[scalar]) + (self[e5] * geometric_product[e12]),
                -(self[e125] * geometric_product[e12]) - (self[e5] * geometric_product[e45]),
            ]) + (Simd32x4::from([geometric_product[scalar], geometric_product[e12], geometric_product[e4315], geometric_product[e4125]]) * self.group1().xxxz())
                + (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], geometric_product[e4235]]) * self.group0().zyz().with_w(self[e235]))
                + (Simd32x4::from([geometric_product[e4125], geometric_product[scalar], geometric_product[e23], geometric_product[scalar]]) * self.group1().yyyw())
                + (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e3215]]) * self.group0().xxyw())
                + (self.group0().www() * geometric_product.group2().xyz()).with_w(self[e315] * geometric_product[e4315])
                - (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e31], geometric_product[e25]]) * self.group1().xxx().with_w(self[e425]))
                - (Simd32x4::from([geometric_product[e4315], geometric_product[e23], geometric_product[e45], geometric_product[e23]]) * self.group1().zzzx())
                - (self.group0().yzxx() * geometric_product.group2().zxyx())
                - (self.group1().wwwy() * geometric_product.group3().xyz().with_w(geometric_product[e31]))
                - (geometric_product.group1().zw().with_zw(geometric_product[e4235], geometric_product[e35]) * self.group1().yyy().with_w(self[e435])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e315] * geometric_product[e43]) - (self[e235] * geometric_product[e1234]) - (self[e125] * geometric_product[e42]) - (self[e5] * geometric_product[e41]),
                (self[e125] * geometric_product[e41]) - (self[e235] * geometric_product[e43]) - (self[e315] * geometric_product[e1234]) - (self[e5] * geometric_product[e42]),
                (self[e235] * geometric_product[e42]) - (self[e315] * geometric_product[e41]) - (self[e125] * geometric_product[e1234]) - (self[e5] * geometric_product[e43]),
                0.0,
            ]) + (self.group0().yzxw() * geometric_product.group3().zxy().with_w(geometric_product[e1234]))
                - (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], geometric_product[e41]]) * self.group0().xxyx())
                - (Simd32x4::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45], geometric_product[e42]]) * self.group0().zyzy())
                - (self.group0().wwwz() * geometric_product.group3().xyz().with_w(geometric_product[e43])),
        );
    }
}
impl std::ops::Div<GeometricQuotientInfix> for MultiVector {
    type Output = GeometricQuotientInfixPartial<MultiVector>;
    fn div(self, _rhs: GeometricQuotientInfix) -> Self::Output {
        GeometricQuotientInfixPartial(self)
    }
}
impl GeometricQuotient<AntiCircleRotor> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       71      104        0
    //    simd2       10       10        0
    //    simd3       40       59        0
    //    simd4       29       20        0
    // Totals...
    // yes simd      150      193        0
    //  no simd      327      381        0
    fn geometric_quotient(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiCircleRotor::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, scalar
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                + f32::powi(other[scalar], 2)
                - f32::powi(other[e45], 2),
        );
        let geometric_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([geometric_product[e45] * self[e45], geometric_product[e45] * self[e321] * -1.0]) + (Simd32x2::from(geometric_product[scalar]) * self.group0())
                - (Simd32x2::from(geometric_product[e41]) * Simd32x2::from([self[e15], self[e235]]))
                - (Simd32x2::from(geometric_product[e42]) * Simd32x2::from([self[e25], self[e315]]))
                - (Simd32x2::from(geometric_product[e43]) * Simd32x2::from([self[e35], self[e125]]))
                - (Simd32x2::from(geometric_product[e23]) * Simd32x2::from([self[e23], self[e415]]))
                - (Simd32x2::from(geometric_product[e31]) * Simd32x2::from([self[e31], self[e425]]))
                - (Simd32x2::from(geometric_product[e12]) * Simd32x2::from([self[e12], self[e435]]))
                - (Simd32x2::from(geometric_product[e15]) * Simd32x2::from([self[e41], self[e423]]))
                - (Simd32x2::from(geometric_product[e25]) * Simd32x2::from([self[e42], self[e431]]))
                - (Simd32x2::from(geometric_product[e35]) * Simd32x2::from([self[e43], self[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (geometric_product[e23] * self[e321]) + (geometric_product[e31] * self[e3]) + (geometric_product[e15] * self[e4]) + (geometric_product[scalar] * self[e1]),
                (geometric_product[e31] * self[e321]) + (geometric_product[e12] * self[e1]) + (geometric_product[e25] * self[e4]) + (geometric_product[scalar] * self[e2]),
                (geometric_product[e23] * self[e2]) + (geometric_product[e12] * self[e321]) + (geometric_product[e35] * self[e4]) + (geometric_product[scalar] * self[e3]),
                -(geometric_product[e43] * self[e435]) - (geometric_product[e23] * self[e423]) - (geometric_product[e31] * self[e431]) - (geometric_product[e12] * self[e412]),
            ]) + (geometric_product.group0().zxy() * self.group8().yzx()).with_w(geometric_product[e45] * self[e4])
                + (self.group7().zxy() * geometric_product.group2().yzx()).with_w(geometric_product[scalar] * self[e4])
                - (Simd32x2::from(self[e5]).with_zw(self[e315], self[e1]) * geometric_product.group0().xyx().with_w(geometric_product[e41]))
                - (self.group8().zx().with_zw(self[e5], self[e415]) * geometric_product.group0().yzz().with_w(geometric_product[e41]))
                - (self.group7().yzx() * geometric_product.group2().zxy()).with_w(geometric_product[e42] * self[e2])
                - (geometric_product.group1().zxy() * self.group1().yzx()).with_w(geometric_product[e42] * self[e425])
                - (geometric_product.group1().www() * self.group6().xyz()).with_w(geometric_product[e43] * self[e3]),
            // e5
            (geometric_product[e15] * self[e1]) + (geometric_product[e25] * self[e2]) + (geometric_product[e35] * self[e3]) + (geometric_product[scalar] * self[e5])
                - (geometric_product[e23] * self[e235])
                - (geometric_product[e31] * self[e315])
                - (geometric_product[e12] * self[e125])
                - (geometric_product[e45] * self[e5])
                - (geometric_product[e15] * self[e415])
                - (geometric_product[e25] * self[e425])
                - (geometric_product[e35] * self[e435]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (geometric_product[e25] * self[e4125]) + (geometric_product[scalar] * self[e15]),
                (geometric_product[e35] * self[e4235]) + (geometric_product[scalar] * self[e25]),
                (geometric_product[e35] * self[e45]) + (geometric_product[scalar] * self[e35]),
                -(geometric_product[e31] * self[e4315]) - (geometric_product[e12] * self[e4125]),
            ]) + (Simd32x4::from(self[scalar]) * geometric_product.group2().xyz().with_w(geometric_product[e45]))
                + (geometric_product.group2().xyxw() * self.group3().ww().with_zw(self[e4315], self[e45]))
                + (geometric_product.group2().yzxx() * self.group5().zxy().with_w(self[e41]))
                + (self.group3().zx().with_zw(self[e3215], geometric_product[e35]) * geometric_product.group1().yzz().with_w(self[e43]))
                + (self.group9().ww().with_zw(self[e25], geometric_product[e25]) * geometric_product.group1().xyx().with_w(self[e42]))
                - (self.group3().xyzz() * geometric_product.group1().www().with_w(geometric_product[e43]))
                - (self.group3().yzxy() * geometric_product.group1().zxy().with_w(geometric_product[e42]))
                - (self.group9().yzxx() * geometric_product.group2().zxy().with_w(geometric_product[e23]))
                - (self.group5().yzx() * geometric_product.group2().zxy()).with_w(geometric_product[e41] * self[e15]),
            // e41, e42, e43
            (Simd32x3::from(self[scalar]) * geometric_product.group0())
                + (Simd32x3::from(self[e1234]) * geometric_product.group1().xyz())
                + (Simd32x3::from([geometric_product[e31], geometric_product[scalar], geometric_product[scalar]]) * self.group4().zyz())
                + (Simd32x3::from([geometric_product[scalar], geometric_product[e45], geometric_product[e45]]) * self.group4())
                + (Simd32x3::from([self[e12], self[e4125], self[e31]]) * geometric_product.group0().yxx())
                + (Simd32x3::from([self[e4315], self[e23], self[e4235]]) * geometric_product.group0().zzy())
                + (self.group4().xxy() * geometric_product.group1().wzx())
                - (Simd32x3::from(geometric_product[e41]) * Simd32x3::from([self[e45], self[e12], self[e4315]]))
                - (Simd32x3::from(geometric_product[e42]) * Simd32x3::from([self[e4125], self[e45], self[e23]]))
                - (Simd32x3::from(geometric_product[e43]) * Simd32x3::from([self[e31], self[e4235], self[e45]]))
                - (self.group4().yzx() * geometric_product.group1().zxy()),
            // e23, e31, e12
            (Simd32x3::from(geometric_product[e45]) * self.group9().xyz())
                + (Simd32x3::from(self[scalar]) * geometric_product.group1().xyz())
                + (Simd32x3::from(self[e1234]) * geometric_product.group2().xyz())
                + (Simd32x3::from([geometric_product[e31], geometric_product[scalar], geometric_product[scalar]]) * self.group5().zyz())
                + (Simd32x3::from([geometric_product[scalar], geometric_product[e12], geometric_product[e23]]) * self.group5().xxy())
                + (Simd32x3::from([self[e35], self[e15], self[e3215]]) * geometric_product.group0().yzz())
                + (Simd32x3::from([self[e3215], self[e3215], self[e25]]) * geometric_product.group0().xyx())
                + (self.group4().zxy() * geometric_product.group2().yzx())
                - (geometric_product.group0().zxy() * self.group3().yzx())
                - (self.group4().yzx() * geometric_product.group2().zxy())
                - (self.group5().yzx() * geometric_product.group1().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (geometric_product[e31] * self[e435]) + (geometric_product[e15] * self[e4]) + (geometric_product[scalar] * self[e415]),
                (geometric_product[e12] * self[e415]) + (geometric_product[e25] * self[e4]) + (geometric_product[scalar] * self[e425]),
                (geometric_product[e23] * self[e425]) + (geometric_product[e35] * self[e4]) + (geometric_product[scalar] * self[e435]),
                -(geometric_product[e23] * self[e1]) - (geometric_product[e31] * self[e2]) - (geometric_product[e12] * self[e3]),
            ]) + (Simd32x2::from(self[e5]).with_zw(self[e315], self[e315]) * geometric_product.group0().xyx().with_w(geometric_product[e42]))
                + (self.group0().yy().with_zw(self[e12345], geometric_product[e41]) * geometric_product.group1().xyz().with_w(self[e235]))
                + (self.group8().zx().with_zw(self[e5], self[e125]) * geometric_product.group0().yzz().with_w(geometric_product[e43]))
                + (self.group7().zxy() * geometric_product.group2().yzx()).with_w(geometric_product[scalar] * self[e321])
                - (geometric_product.group2().zxyx() * self.group7().yzx().with_w(self[e423]))
                - (geometric_product.group0().zxy() * self.group8().yzx()).with_w(geometric_product[e45] * self[e12345])
                - (geometric_product.group1().zxy() * self.group6().yzx()).with_w(geometric_product[e25] * self[e431])
                - (geometric_product.group1().www() * self.group1().xyz()).with_w(geometric_product[e35] * self[e412]),
            // e423, e431, e412
            (Simd32x3::from(self[e12345]) * geometric_product.group0())
                + (Simd32x3::from(self[e4]) * geometric_product.group1().xyz())
                + (Simd32x3::from([geometric_product[e31], geometric_product[scalar], geometric_product[scalar]]) * self.group7().zyz())
                + (Simd32x3::from([geometric_product[scalar], geometric_product[e45], geometric_product[e45]]) * self.group7())
                + (Simd32x3::from([self[e3], self[e1], self[e425]]) * geometric_product.group0().yzx())
                + (Simd32x3::from([self[e321], self[e321], self[e2]]) * geometric_product.group0().xyx())
                + (geometric_product.group0().yzz() * self.group6().zxw())
                + (self.group7().xxy() * geometric_product.group1().wzx())
                - (geometric_product.group0().zxy() * self.group1().yzx())
                - (geometric_product.group0().zxy() * self.group6().yzx())
                - (self.group7().yzx() * geometric_product.group1().zxy()),
            // e235, e315, e125
            (Simd32x3::from(self[e12345]) * geometric_product.group2().xyz())
                + (Simd32x3::from(self[e5]) * geometric_product.group1().xyz())
                + (Simd32x3::from([geometric_product[e31], geometric_product[scalar], geometric_product[scalar]]) * self.group8().zyz())
                + (Simd32x3::from([geometric_product[scalar], geometric_product[e12], geometric_product[e23]]) * self.group8().xxy())
                + (Simd32x3::from([self[e2], self[e415], self[e1]]) * geometric_product.group2().zzy())
                + (Simd32x3::from([self[e435], self[e3], self[e425]]) * geometric_product.group2().yxx())
                - (Simd32x3::from(geometric_product[e15]) * Simd32x3::from([self[e321], self[e435], self[e2]]))
                - (Simd32x3::from(geometric_product[e25]) * Simd32x3::from([self[e3], self[e321], self[e415]]))
                - (Simd32x3::from(geometric_product[e35]) * Simd32x3::from([self[e425], self[e1], self[e321]]))
                - (self.group8().xyx() * geometric_product.group1().wwy())
                - (self.group8().yzz() * geometric_product.group1().zxw()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (geometric_product[e42] * self[e35])
                    + (geometric_product[e23] * self[e45])
                    + (geometric_product[e31] * self[e4125])
                    + (geometric_product[e45] * self[e23])
                    + (geometric_product[e35] * self[e42])
                    + (geometric_product[scalar] * self[e4235]),
                (geometric_product[e43] * self[e15])
                    + (geometric_product[e31] * self[e45])
                    + (geometric_product[e12] * self[e4235])
                    + (geometric_product[e45] * self[e31])
                    + (geometric_product[e15] * self[e43])
                    + (geometric_product[scalar] * self[e4315]),
                (geometric_product[e43] * self[e3215])
                    + (geometric_product[e23] * self[e4315])
                    + (geometric_product[e12] * self[e45])
                    + (geometric_product[e45] * self[e12])
                    + (geometric_product[e25] * self[e41])
                    + (geometric_product[scalar] * self[e4125]),
                -(geometric_product[e31] * self[e25])
                    - (geometric_product[e12] * self[e35])
                    - (geometric_product[e45] * self[e3215])
                    - (geometric_product[e15] * self[e4235])
                    - (geometric_product[e25] * self[e4315])
                    - (geometric_product[e35] * self[e4125]),
            ]) + (self.group9().ww().with_zw(self[e25], self[e3215]) * geometric_product.group0().xyx().with_w(geometric_product[scalar]))
                - (geometric_product.group2().yzxy() * self.group4().zxy().with_w(self[e31]))
                - (Simd32x3::from(self[e1234]) * geometric_product.group2().xyz()).with_w(geometric_product[e23] * self[e15])
                - (geometric_product.group0().zxy() * self.group3().yzx()).with_w(geometric_product[e15] * self[e23])
                - (geometric_product.group1().zxy() * self.group9().yzx()).with_w(geometric_product[e35] * self[e12]),
            // e1234
            (geometric_product[e41] * self[e4235])
                + (geometric_product[e42] * self[e4315])
                + (geometric_product[e43] * self[e4125])
                + (geometric_product[e45] * self[e1234])
                + (geometric_product[scalar] * self[e1234])
                - (geometric_product[e41] * self[e23])
                - (geometric_product[e42] * self[e31])
                - (geometric_product[e43] * self[e12])
                - (geometric_product[e23] * self[e41])
                - (geometric_product[e31] * self[e42])
                - (geometric_product[e12] * self[e43]),
        );
    }
}
impl GeometricQuotient<AntiDipoleInversion> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       54       94        0
    //    simd2        6        6        0
    //    simd3       56       78        0
    //    simd4       56       45        0
    // Totals...
    // yes simd      172      223        0
    //  no simd      458      520        0
    fn geometric_quotient(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e4
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125])
                - 2.0 * (other[e4] * other[e5]),
        );
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e4
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e1, e2, e3, e5
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (geometric_product[e423] * self[e235])
                    + (geometric_product[e431] * self[e315])
                    + (geometric_product[e412] * self[e125])
                    + (geometric_product[e415] * self[e415])
                    + (geometric_product[e425] * self[e425])
                    + (geometric_product[e435] * self[e435])
                    + (geometric_product[e315] * self[e431])
                    + (geometric_product[e125] * self[e412])
                    - (geometric_product[e5] * self[e4]),
                (geometric_product[e5] * self[e1234])
                    - (geometric_product[e423] * self[e15])
                    - (geometric_product[e431] * self[e25])
                    - (geometric_product[e412] * self[e35])
                    - (geometric_product[e425] * self[e31])
                    - (geometric_product[e435] * self[e12])
                    - (geometric_product[e321] * self[e45])
                    - (geometric_product[e315] * self[e42])
                    - (geometric_product[e125] * self[e43]),
            ]) + (Simd32x2::from(geometric_product[e1]) * Simd32x2::from([self[e1], self[e4235]]))
                + (Simd32x2::from(geometric_product[e2]) * Simd32x2::from([self[e2], self[e4315]]))
                + (Simd32x2::from(geometric_product[e3]) * Simd32x2::from([self[e3], self[e4125]]))
                + (Simd32x2::from([self[e423], self[e3215]]) * geometric_product.group2().xw())
                - (Simd32x2::from([self[e5], self[e41]]) * geometric_product.group2().wx())
                - (Simd32x2::from([self[e321], self[e23]]) * geometric_product.group1().wx()),
            // e1, e2, e3, e4
            Simd32x4::from([
                geometric_product[e235] * self[e1234],
                geometric_product[e315] * self[e1234],
                geometric_product[e125] * self[e1234],
                geometric_product[e4] * self[e45] * -1.0,
            ]) + (Simd32x4::from(self[scalar]) * geometric_product.group3().xyz().with_w(geometric_product[e4]))
                + (Simd32x4::from([geometric_product[e321], geometric_product[e3], geometric_product[e1], geometric_product[e1]]) * self.group5().xxy().with_w(self[e41]))
                + (Simd32x4::from([geometric_product[e315], geometric_product[e5], geometric_product[e5], self[e4125]]) * self.group4().zyz().with_w(geometric_product[e412]))
                + (Simd32x4::from([geometric_product[e2], geometric_product[e321], geometric_product[e321], geometric_product[e2]]) * self.group5().zyz().with_w(self[e42]))
                + (Simd32x4::from([geometric_product[e5], geometric_product[e125], geometric_product[e235], self[e4315]]) * self.group4().xxy().with_w(geometric_product[e431]))
                + (geometric_product.group0().zxy() * self.group3().yzx()).with_w(geometric_product[e423] * self[e4235])
                + (geometric_product.group1().zxy() * self.group9().yzx()).with_w(geometric_product[e3] * self[e43])
                - (self.group3().zx().with_zw(self[e3215], self[e31]) * geometric_product.group0().yzz().with_w(geometric_product[e431]))
                - (self.group3().ww().with_zw(self[e4315], geometric_product[e425]) * geometric_product.group1().xyx().with_w(self[e42]))
                - (self.group9().zx().with_zw(self[e45], geometric_product[e435]) * geometric_product.group1().yzz().with_w(self[e43]))
                - (self.group9().ww().with_zw(self[e25], self[e23]) * geometric_product.group0().xyx().with_w(geometric_product[e423]))
                - (self.group4().yzx() * geometric_product.group2().zxy()).with_w(geometric_product[e412] * self[e12])
                - (self.group5().yzx() * geometric_product.group3().zxy()).with_w(geometric_product[e415] * self[e41])
                - (geometric_product.group2().www() * self.group3().xyz()).with_w(geometric_product[e321] * self[e1234]),
            // e5
            (geometric_product[e321] * self[e3215]) + (geometric_product[e5] * self[scalar]) + (geometric_product[e5] * self[e45])
                - (geometric_product[e415] * self[e15])
                - (geometric_product[e425] * self[e25])
                - (geometric_product[e435] * self[e35])
                - (geometric_product[e235] * self[e23])
                - (geometric_product[e235] * self[e4235])
                - (geometric_product[e315] * self[e31])
                - (geometric_product[e315] * self[e4315])
                - (geometric_product[e125] * self[e12])
                - (geometric_product[e125] * self[e4125])
                - (geometric_product[e1] * self[e15])
                - (geometric_product[e2] * self[e25])
                - (geometric_product[e3] * self[e35]),
            // e15, e25, e35, e45
            Simd32x4::from([
                geometric_product[e5] * self[e1],
                geometric_product[e5] * self[e2],
                geometric_product[e5] * self[e3],
                geometric_product[e3] * self[e435] * -1.0,
            ]) + (Simd32x4::from([self[e3], self[e321], self[e415], self[e125]]) * geometric_product.group2().yyy().with_w(geometric_product[e412]))
                + (Simd32x4::from([self[e425], self[e1], self[e321], self[e4]]) * geometric_product.group2().zzz().with_w(geometric_product[e5]))
                + (geometric_product.group1().zxyw() * self.group8().yzx().with_w(self[e12345]))
                + (self.group6().wz().with_zw(self[e2], self[e315]) * geometric_product.group2().xxx().with_w(geometric_product[e431]))
                + (self.group8().yzx() * geometric_product.group3().zxy()).with_w(geometric_product[e423] * self[e235])
                - (Simd32x4::from([geometric_product[e425], geometric_product[e3], geometric_product[e1], geometric_product[e125]]) * self.group8().zxy().with_w(self[e412]))
                - (Simd32x4::from([geometric_product[e2], geometric_product[e321], geometric_product[e321], self[e1]]) * self.group8().zyz().with_w(geometric_product[e415]))
                - (Simd32x4::from([self[e2], self[e415], self[e1], self[e5]]) * geometric_product.group2().zzyw())
                - (Simd32x4::from([self[e435], self[e3], self[e425], self[e3]]) * geometric_product.group2().yxx().with_w(geometric_product[e435]))
                - (geometric_product.group1().xyzy() * Simd32x3::from(self[e5]).with_w(self[e2]))
                - (geometric_product.group2().xyzx() * self.group0().yy().with_zw(self[e12345], self[e423]))
                - (geometric_product.group3().xyzx() * Simd32x3::from(self[e5]).with_w(self[e415]))
                - (geometric_product.group3().wwwy() * self.group6().xyzy())
                - (self.group8().xxy() * geometric_product.group1().wzx()).with_w(geometric_product[e315] * self[e431]),
            // e41, e42, e43
            (Simd32x3::from(self[e4]) * geometric_product.group3().xyz())
                + (Simd32x3::from(self[e423]) * Simd32x3::from([geometric_product[e321], geometric_product[e3], geometric_product[e425]]))
                + (Simd32x3::from(self[e431]) * Simd32x3::from([geometric_product[e435], geometric_product[e321], geometric_product[e1]]))
                + (Simd32x3::from(self[e412]) * Simd32x3::from([geometric_product[e2], geometric_product[e415], geometric_product[e321]]))
                + (geometric_product.group0().zxy() * self.group1().yzx())
                + (geometric_product.group0().zxy() * self.group6().yzx())
                - (Simd32x3::from(geometric_product[e4]) * self.group1().xyz())
                - (Simd32x3::from(geometric_product[e4]) * self.group6().xyz())
                - (Simd32x3::from(self[e12345]) * geometric_product.group0())
                - (Simd32x3::from(self[e4]) * geometric_product.group1().xyz())
                - (Simd32x3::from([geometric_product[e425], geometric_product[e1], geometric_product[e415]]) * self.group7().zzy())
                - (Simd32x3::from([geometric_product[e3], geometric_product[e435], geometric_product[e2]]) * self.group7().yxx())
                - (Simd32x3::from([self[e3], self[e1], self[e425]]) * geometric_product.group0().yzx())
                - (Simd32x3::from([self[e321], self[e321], self[e2]]) * geometric_product.group0().xyx())
                - (geometric_product.group0().yzz() * self.group6().zxw()),
            // e23, e31, e12
            (geometric_product.group0().zxy() * self.group8().yzx())
                + (self.group7().yzx() * geometric_product.group2().zxy())
                + (geometric_product.group1().zxy() * self.group6().yzx())
                + (geometric_product.group3().zxy() * self.group1().yzx())
                - (Simd32x3::from(geometric_product[e321]) * self.group1().xyz())
                - (Simd32x3::from(geometric_product[e4]) * self.group8())
                - (Simd32x3::from(self[e12345]) * geometric_product.group1().xyz())
                - (Simd32x3::from(self[e4]) * geometric_product.group2().xyz())
                - (Simd32x3::from([geometric_product[e315], geometric_product[e5], geometric_product[e5]]) * self.group7().zyz())
                - (Simd32x3::from([geometric_product[e5], geometric_product[e125], geometric_product[e235]]) * self.group7().xxy())
                - (Simd32x3::from([self[e3], self[e1], self[e321]]) * geometric_product.group3().yzz())
                - (Simd32x3::from([self[e321], self[e321], self[e2]]) * geometric_product.group3().xyx())
                - (geometric_product.group0().xyx() * Simd32x2::from(self[e5]).with_z(self[e315]))
                - (geometric_product.group0().yzz() * self.group8().zx().with_z(self[e5]))
                - (geometric_product.group1().yzx() * self.group6().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                geometric_product[e3] * self[e4315],
                geometric_product[e1] * self[e4125],
                geometric_product[e2] * self[e4235],
                geometric_product[e4] * self[e3215] * -1.0,
            ]) + (Simd32x4::from(self[scalar]) * geometric_product.group1())
                + (Simd32x4::from([geometric_product[e315], geometric_product[e5], geometric_product[e5], self[e4235]]) * self.group4().zyz().with_w(geometric_product[e415]))
                + (Simd32x4::from([geometric_product[e5], geometric_product[e125], geometric_product[e235], self[e35]]) * self.group4().xxy().with_w(geometric_product[e412]))
                + (self.group3().zx().with_zw(self[e3215], self[e25]) * geometric_product.group0().yzz().with_w(geometric_product[e431]))
                + (self.group9().ww().with_zw(self[e25], self[e15]) * geometric_product.group0().xyx().with_w(geometric_product[e423]))
                + (Simd32x3::from(self[e1234]) * geometric_product.group2().xyz()).with_w(geometric_product[e435] * self[e4125])
                + (self.group5().zxy() * geometric_product.group1().yzx()).with_w(geometric_product[e425] * self[e4315])
                + (geometric_product.group2().www() * self.group3().xyz()).with_w(geometric_product[e5] * self[e1234])
                - (geometric_product.group2().zxyy() * self.group4().yzx().with_w(self[e42]))
                - (self.group3().ww().with_zw(self[e4315], geometric_product[e2]) * geometric_product.group3().xyx().with_w(self[e31]))
                - (self.group9().zx().with_zw(self[e45], geometric_product[e3]) * geometric_product.group3().yzz().with_w(self[e12]))
                - (geometric_product.group0().zxy() * self.group3().yzx()).with_w(geometric_product[e235] * self[e41])
                - (self.group5().yzx() * geometric_product.group1().zxy()).with_w(geometric_product[e125] * self[e43])
                - (geometric_product.group1().www() * self.group9().xyz()).with_w(geometric_product[e1] * self[e23]),
            // e423, e431, e412
            (Simd32x3::from(geometric_product[e4]) * self.group5())
                + (Simd32x3::from(self[scalar]) * geometric_product.group0())
                + (Simd32x3::from(self[e1234]) * geometric_product.group1().xyz())
                + (Simd32x3::from([geometric_product[e425], geometric_product[e1], geometric_product[e415]]) * self.group4().zzy())
                + (Simd32x3::from([geometric_product[e3], geometric_product[e435], geometric_product[e2]]) * self.group4().yxx())
                + (Simd32x3::from([self[e12], self[e4125], self[e31]]) * geometric_product.group0().yxx())
                + (Simd32x3::from([self[e4315], self[e23], self[e4235]]) * geometric_product.group0().zzy())
                - (Simd32x3::from(geometric_product[e423]) * Simd32x3::from([self[e45], self[e12], self[e4315]]))
                - (Simd32x3::from(geometric_product[e431]) * Simd32x3::from([self[e4125], self[e45], self[e23]]))
                - (Simd32x3::from(geometric_product[e412]) * Simd32x3::from([self[e31], self[e4235], self[e45]]))
                - (Simd32x3::from(geometric_product[e4]) * self.group9().xyz())
                - (Simd32x3::from(self[e41]) * Simd32x3::from([geometric_product[e321], geometric_product[e3], geometric_product[e425]]))
                - (Simd32x3::from(self[e42]) * Simd32x3::from([geometric_product[e435], geometric_product[e321], geometric_product[e1]]))
                - (Simd32x3::from(self[e43]) * Simd32x3::from([geometric_product[e2], geometric_product[e415], geometric_product[e321]]))
                - (Simd32x3::from(self[e1234]) * geometric_product.group3().xyz()),
            // e235, e315, e125
            (Simd32x3::from(geometric_product[e321]) * self.group3().xyz())
                + (Simd32x3::from(geometric_product[e5]) * self.group9().xyz())
                + (Simd32x3::from(self[scalar]) * geometric_product.group2().xyz())
                + (Simd32x3::from([geometric_product[e315], geometric_product[e5], geometric_product[e5]]) * self.group5().zyz())
                + (Simd32x3::from([geometric_product[e5], geometric_product[e125], geometric_product[e235]]) * self.group5().xxy())
                + (Simd32x3::from([self[e35], self[e15], self[e3215]]) * geometric_product.group1().yzz())
                + (Simd32x3::from([self[e35], self[e15], self[e3215]]) * geometric_product.group3().yzz())
                + (Simd32x3::from([self[e45], self[e45], self[e4315]]) * geometric_product.group2().xyx())
                + (Simd32x3::from([self[e4125], self[e4235], self[e45]]) * geometric_product.group2().yzz())
                + (Simd32x3::from([self[e3215], self[e3215], self[e25]]) * geometric_product.group1().xyx())
                + (Simd32x3::from([self[e3215], self[e3215], self[e25]]) * geometric_product.group3().xyx())
                - (self.group5().yzx() * geometric_product.group2().zxy())
                - (geometric_product.group1().zxy() * self.group3().yzx())
                - (geometric_product.group2().zxy() * self.group9().yzx())
                - (geometric_product.group3().zxy() * self.group3().yzx()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                geometric_product[e3] * self[e425] * -1.0,
                geometric_product[e1] * self[e435] * -1.0,
                geometric_product[e2] * self[e415] * -1.0,
                geometric_product[e5] * self[e321],
            ]) + (Simd32x4::from([geometric_product[e315], geometric_product[e5], geometric_product[e5], geometric_product[e2]]) * self.group7().zyz().with_w(self[e315]))
                + (Simd32x4::from([geometric_product[e5], geometric_product[e125], geometric_product[e235], geometric_product[e425]]) * self.group7().xxy().with_w(self[e315]))
                + (geometric_product.group2().xyzy() * self.group1().www().with_w(self[e425]))
                + (self.group6().xyzx() * geometric_product.group1().www().with_w(geometric_product[e235]))
                + (self.group6().zxyz() * geometric_product.group3().yzx().with_w(geometric_product[e125]))
                + (self.group0().yy().with_zw(self[e12345], self[e235]) * geometric_product.group3().xyz().with_w(geometric_product[e415]))
                + (self.group1().zx().with_zw(self[e321], geometric_product[e3]) * geometric_product.group1().yzz().with_w(self[e125]))
                + (self.group6().ww().with_zw(self[e2], geometric_product[e435]) * geometric_product.group1().xyx().with_w(self[e125]))
                + (geometric_product.group0().zxy() * self.group8().yzx()).with_w(geometric_product[e1] * self[e235])
                - (self.group1().yzxz() * geometric_product.group1().zxy().with_w(geometric_product[e125]))
                - (Simd32x2::from(self[e5]).with_zw(self[e315], geometric_product[e5]) * geometric_product.group0().xyx().with_w(self[e12345]))
                - (self.group8().zx().with_zw(self[e5], self[e5]) * geometric_product.group0().yzz().with_w(geometric_product[e321]))
                - (self.group8() * geometric_product.group2().www()).with_w(geometric_product[e315] * self[e2])
                - (self.group7().yzx() * geometric_product.group2().zxy()).with_w(geometric_product[e235] * self[e1]),
            // e1234
            (geometric_product[e423] * self[e1])
                + (geometric_product[e423] * self[e415])
                + (geometric_product[e431] * self[e2])
                + (geometric_product[e431] * self[e425])
                + (geometric_product[e412] * self[e3])
                + (geometric_product[e412] * self[e435])
                + (geometric_product[e415] * self[e423])
                + (geometric_product[e425] * self[e431])
                + (geometric_product[e435] * self[e412])
                + (geometric_product[e321] * self[e4])
                - (geometric_product[e4] * self[e12345])
                - (geometric_product[e4] * self[e321])
                - (geometric_product[e1] * self[e423])
                - (geometric_product[e2] * self[e431])
                - (geometric_product[e3] * self[e412]),
        );
    }
}
impl GeometricQuotient<AntiDualNum> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       21        0
    //    simd2        1        3        0
    //    simd3        4        9        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       14       37        0
    //  no simd       32       70        0
    fn geometric_quotient(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDualNum::from_groups(/* e3215, scalar */ Simd32x2::from(f32::powi(other[scalar], -2)) * other.group0());
        return MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from(geometric_product[e3215]) * Simd32x2::from([self[e1234], self[e4]])) + (Simd32x2::from(geometric_product[scalar]) * self.group0()),
            // e1, e2, e3, e4
            ((Simd32x3::from(geometric_product[e3215]) * self.group7()) + (Simd32x3::from(geometric_product[scalar]) * self.group1().xyz()))
                .with_w(geometric_product[scalar] * self[e4]),
            // e5
            (geometric_product[e3215] * self[e12345]) + (geometric_product[scalar] * self[e5]) - (geometric_product[e3215] * self[e321]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (geometric_product[e3215] * self[e4235]) + (geometric_product[scalar] * self[e15]),
                (geometric_product[e3215] * self[e4315]) + (geometric_product[scalar] * self[e25]),
                (geometric_product[e3215] * self[e4125]) + (geometric_product[scalar] * self[e35]),
                geometric_product[e3215] * self[e1234] * -1.0,
            ]) + (geometric_product.group0().xx().with_zw(geometric_product[e3215], geometric_product[scalar]) * self.group5().with_w(self[e45])),
            // e41, e42, e43
            Simd32x3::from(geometric_product[scalar]) * self.group4(),
            // e23, e31, e12
            (Simd32x3::from(geometric_product[e3215]) * self.group4()) + (Simd32x3::from(geometric_product[scalar]) * self.group5()),
            // e415, e425, e435, e321
            (Simd32x4::from(geometric_product[e3215]) * self.group7().with_w(self[e4])) + (Simd32x4::from(geometric_product[scalar]) * self.group6()),
            // e423, e431, e412
            Simd32x3::from(geometric_product[scalar]) * self.group7(),
            // e235, e315, e125
            (Simd32x3::from(geometric_product[e3215]) * self.group6().xyz()) + (Simd32x3::from(geometric_product[scalar]) * self.group8())
                - (Simd32x3::from(geometric_product[e3215]) * self.group1().xyz()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                geometric_product[e3215] * self[e41] * -1.0,
                geometric_product[e3215] * self[e42] * -1.0,
                geometric_product[e3215] * self[e43] * -1.0,
                (geometric_product[e3215] * self[e45]) + (geometric_product[scalar] * self[e3215]),
            ]) + (geometric_product.group0().yy().with_zw(geometric_product[scalar], geometric_product[e3215]) * self.group9().xyz().with_w(self[scalar])),
            // e1234
            geometric_product[scalar] * self[e1234],
        );
    }
}
impl GeometricQuotient<AntiFlatPoint> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       40        0
    //    simd2        1        1        0
    //    simd3       12       21        0
    //    simd4       11        9        0
    // Totals...
    // yes simd       42       71        0
    //  no simd      100      141        0
    fn geometric_quotient(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlatPoint::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(f32::powi(other[e321], -2)) * Simd32x4::from([other[e235] * -1.0, other[e315] * -1.0, other[e125] * -1.0, other[e321] * -1.0]),
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (geometric_product[e235] * self[e423]) + (geometric_product[e315] * self[e431]) + (geometric_product[e125] * self[e412]),
                -(geometric_product[e315] * self[e42]) - (geometric_product[e125] * self[e43]) - (geometric_product[e321] * self[e45]),
            ]) - (Simd32x2::from([self[e321], self[e41]]) * geometric_product.group0().wx()),
            // e1, e2, e3, e4
            ((Simd32x3::from(geometric_product[e321]) * self.group5())
                + (Simd32x3::from(self[e1234]) * geometric_product.group0().xyz())
                + (self.group4().zxy() * geometric_product.group0().yzx())
                - (self.group4().yzx() * geometric_product.group0().zxy()))
            .with_w(geometric_product[e321] * self[e1234] * -1.0),
            // e5
            (geometric_product[e321] * self[e3215])
                - (geometric_product[e235] * self[e23])
                - (geometric_product[e235] * self[e4235])
                - (geometric_product[e315] * self[e31])
                - (geometric_product[e315] * self[e4315])
                - (geometric_product[e125] * self[e12])
                - (geometric_product[e125] * self[e4125]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (geometric_product[e315] * self[e3]) + (geometric_product[e125] * self[e425]) - (geometric_product[e125] * self[e2]),
                (geometric_product[e315] * self[e321]) + (geometric_product[e125] * self[e1]) - (geometric_product[e125] * self[e415]),
                (geometric_product[e315] * self[e415]) + (geometric_product[e125] * self[e321]) - (geometric_product[e315] * self[e1]),
                0.0,
            ]) + (self.group6().wz().with_zw(self[e2], geometric_product[e321]) * geometric_product.group0().xxx().with_w(self[e12345]))
                - (Simd32x4::from([self[e435], self[e3], self[e425], geometric_product[e125]]) * geometric_product.group0().yxx().with_w(self[e412]))
                - (geometric_product.group0().xyzx() * self.group0().yy().with_zw(self[e12345], self[e423]))
                - (geometric_product.group0().wwwy() * self.group8().with_w(self[e431])),
            // e41, e42, e43
            Simd32x3::from(geometric_product[e321]) * self.group7(),
            // e23, e31, e12
            (self.group7().yzx() * geometric_product.group0().zxy())
                - (Simd32x3::from(geometric_product[e321]) * self.group1().xyz())
                - (Simd32x3::from(self[e4]) * geometric_product.group0().xyz())
                - (self.group7().zxy() * geometric_product.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                geometric_product[e235] * self[e1234],
                geometric_product[e315] * self[e1234],
                geometric_product[e125] * self[e1234],
                geometric_product[e125] * self[e43] * -1.0,
            ]) + (geometric_product.group0().yzxw() * self.group4().zxy().with_w(self[scalar]))
                - (geometric_product.group0().zxyx() * self.group4().yzx().with_w(self[e41]))
                - (geometric_product.group0().www() * self.group9().xyz()).with_w(geometric_product[e315] * self[e42]),
            // e423, e431, e412
            Simd32x3::from(geometric_product[e321]) * self.group4() * Simd32x3::from(-1.0),
            // e235, e315, e125
            (Simd32x3::from(geometric_product[e321]) * self.group3().xyz())
                + (Simd32x3::from(self[scalar]) * geometric_product.group0().xyz())
                + (Simd32x3::from([self[e45], self[e45], self[e4315]]) * geometric_product.group0().xyx())
                + (Simd32x3::from([self[e4125], self[e4235], self[e45]]) * geometric_product.group0().yzz())
                + (self.group5().zxy() * geometric_product.group0().yzx())
                - (self.group5().yzx() * geometric_product.group0().zxy())
                - (geometric_product.group0().zxy() * self.group9().yzx()),
            // e4235, e4315, e4125, e3215
            (geometric_product.group0().xyzy() * self.group1().www().with_w(self[e425]))
                + (geometric_product.group0().wwwz() * self.group6().xyzz())
                + Simd32x3::from(0.0).with_w(-(geometric_product[e315] * self[e2]) - (geometric_product[e125] * self[e3]) - (geometric_product[e321] * self[e5]))
                + (self.group7().zxy() * geometric_product.group0().yzx()).with_w(geometric_product[e235] * self[e415])
                - (self.group7().yzx() * geometric_product.group0().zxy()).with_w(geometric_product[e235] * self[e1]),
            // e1234
            geometric_product[e321] * self[e4],
        );
    }
}
impl GeometricQuotient<AntiFlector> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       65        0
    //    simd2        4        4        0
    //    simd3       24       33        0
    //    simd4       26       24        0
    // Totals...
    // yes simd      102      126        0
    //  no simd      232      268        0
    fn geometric_quotient(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiFlector::from_groups(/* e235, e315, e125, e321 */ other.group0() * Simd32x4::from(-1.0), /* e1, e2, e3, e5 */ other.group1());
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2),
        );
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e1, e2, e3, e5
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (geometric_product[e235] * self[e423]) + (geometric_product[e315] * self[e431]) + (geometric_product[e125] * self[e412]) - (geometric_product[e5] * self[e4]),
                (geometric_product[e5] * self[e1234]) - (geometric_product[e315] * self[e42]) - (geometric_product[e125] * self[e43]) - (geometric_product[e321] * self[e45]),
            ]) + (Simd32x2::from(geometric_product[e1]) * Simd32x2::from([self[e1], self[e4235]]))
                + (Simd32x2::from(geometric_product[e2]) * Simd32x2::from([self[e2], self[e4315]]))
                + (Simd32x2::from(geometric_product[e3]) * Simd32x2::from([self[e3], self[e4125]]))
                - (Simd32x2::from([self[e321], self[e41]]) * geometric_product.group0().wx()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (geometric_product[e235] * self[e1234]) + (geometric_product[e321] * self[e23]) + (geometric_product[e2] * self[e12]) - (geometric_product[e3] * self[e31]),
                (geometric_product[e315] * self[e1234]) + (geometric_product[e321] * self[e31]) + (geometric_product[e3] * self[e23]) - (geometric_product[e1] * self[e12]),
                (geometric_product[e125] * self[e1234]) + (geometric_product[e321] * self[e12]) + (geometric_product[e1] * self[e31]) - (geometric_product[e2] * self[e23]),
                0.0,
            ]) + (Simd32x4::from([geometric_product[e315], geometric_product[e5], geometric_product[e5], geometric_product[e3]]) * self.group4().zyz().with_w(self[e43]))
                + (Simd32x4::from([geometric_product[e5], geometric_product[e125], geometric_product[e235], geometric_product[e2]]) * self.group4().xxy().with_w(self[e42]))
                + (geometric_product.group1().xyzx() * self.group0().xx().with_zw(self[scalar], self[e41]))
                - (self.group4().yzx() * geometric_product.group0().zxy()).with_w(geometric_product[e321] * self[e1234]),
            // e5
            (geometric_product[e321] * self[e3215]) + (geometric_product[e5] * self[scalar]) + (geometric_product[e5] * self[e45])
                - (geometric_product[e235] * self[e23])
                - (geometric_product[e235] * self[e4235])
                - (geometric_product[e315] * self[e31])
                - (geometric_product[e315] * self[e4315])
                - (geometric_product[e125] * self[e12])
                - (geometric_product[e125] * self[e4125])
                - (geometric_product[e1] * self[e15])
                - (geometric_product[e2] * self[e25])
                - (geometric_product[e3] * self[e35]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (geometric_product[e315] * self[e3]) + (geometric_product[e125] * self[e425]) + (geometric_product[e5] * self[e1]) - (geometric_product[e5] * self[e415]),
                (geometric_product[e315] * self[e321]) + (geometric_product[e125] * self[e1]) + (geometric_product[e5] * self[e2]) - (geometric_product[e5] * self[e425]),
                (geometric_product[e315] * self[e415]) + (geometric_product[e125] * self[e321]) + (geometric_product[e5] * self[e3]) - (geometric_product[e5] * self[e435]),
                0.0,
            ]) + (self.group6().wz().with_zw(self[e2], self[e4]) * geometric_product.group0().xxx().with_w(geometric_product[e5]))
                + (self.group8().yzx() * geometric_product.group1().zxy()).with_w(geometric_product[e321] * self[e12345])
                - (Simd32x4::from([geometric_product[e321], geometric_product[e3], geometric_product[e1], geometric_product[e315]]) * self.group8().xxy().with_w(self[e431]))
                - (Simd32x4::from([geometric_product[e2], geometric_product[e321], geometric_product[e321], geometric_product[e125]]) * self.group8().zyz().with_w(self[e412]))
                - (Simd32x4::from([self[e2], self[e415], self[e1], self[e425]]) * geometric_product.group0().zzy().with_w(geometric_product[e2]))
                - (Simd32x4::from([self[e435], self[e3], self[e425], self[e415]]) * geometric_product.group0().yxx().with_w(geometric_product[e1]))
                - (geometric_product.group0().xyzx() * self.group0().yy().with_zw(self[e12345], self[e423]))
                - (geometric_product.group1().xyzz() * Simd32x3::from(self[e5]).with_w(self[e435])),
            // e41, e42, e43
            (Simd32x3::from(self[e4]) * geometric_product.group1().xyz())
                + (Simd32x3::from([geometric_product[e321], geometric_product[e3], geometric_product[e1]]) * self.group7().xxy())
                + (Simd32x3::from([geometric_product[e2], geometric_product[e321], geometric_product[e321]]) * self.group7().zyz())
                - (self.group7().yzx() * geometric_product.group1().zxy()),
            // e23, e31, e12
            (self.group7().yzx() * geometric_product.group0().zxy()) + (geometric_product.group1().zxy() * self.group1().yzx())
                - (Simd32x3::from(geometric_product[e321]) * self.group1().xyz())
                - (Simd32x3::from(self[e4]) * geometric_product.group0().xyz())
                - (Simd32x3::from([geometric_product[e315], geometric_product[e5], geometric_product[e5]]) * self.group7().zyz())
                - (Simd32x3::from([geometric_product[e5], geometric_product[e125], geometric_product[e235]]) * self.group7().xxy())
                - (Simd32x3::from([self[e3], self[e1], self[e321]]) * geometric_product.group1().yzz())
                - (Simd32x3::from([self[e321], self[e321], self[e2]]) * geometric_product.group1().xyx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (geometric_product[e235] * self[e1234]) + (geometric_product[e3] * self[e4315]),
                (geometric_product[e315] * self[e1234]) + (geometric_product[e1] * self[e4125]),
                (geometric_product[e125] * self[e1234]) + (geometric_product[e2] * self[e4235]),
                -(geometric_product[e2] * self[e31]) - (geometric_product[e3] * self[e12]),
            ]) + (Simd32x4::from([geometric_product[e315], geometric_product[e5], geometric_product[e5], self[e1234]]) * self.group4().zyz().with_w(geometric_product[e5]))
                + (Simd32x4::from([geometric_product[e5], geometric_product[e125], geometric_product[e235], geometric_product[e321]]) * self.group4().xxy().with_w(self[scalar]))
                - (geometric_product.group0().zxyx() * self.group4().yzx().with_w(self[e41]))
                - (self.group3().ww().with_zw(self[e4315], geometric_product[e125]) * geometric_product.group1().xyx().with_w(self[e43]))
                - (self.group9().zx().with_zw(self[e45], geometric_product[e1]) * geometric_product.group1().yzz().with_w(self[e23]))
                - (geometric_product.group0().www() * self.group9().xyz()).with_w(geometric_product[e315] * self[e42]),
            // e423, e431, e412
            (self.group4().yzx() * geometric_product.group1().zxy())
                - (Simd32x3::from(self[e1234]) * geometric_product.group1().xyz())
                - (Simd32x3::from([geometric_product[e321], geometric_product[e3], geometric_product[e1]]) * self.group4().xxy())
                - (Simd32x3::from([geometric_product[e2], geometric_product[e321], geometric_product[e321]]) * self.group4().zyz()),
            // e235, e315, e125
            (Simd32x3::from(geometric_product[e321]) * self.group3().xyz())
                + (Simd32x3::from(geometric_product[e5]) * self.group9().xyz())
                + (Simd32x3::from(self[scalar]) * geometric_product.group0().xyz())
                + (Simd32x3::from([geometric_product[e315], geometric_product[e5], geometric_product[e5]]) * self.group5().zyz())
                + (Simd32x3::from([geometric_product[e5], geometric_product[e125], geometric_product[e235]]) * self.group5().xxy())
                + (Simd32x3::from([self[e35], self[e15], self[e3215]]) * geometric_product.group1().yzz())
                + (Simd32x3::from([self[e45], self[e45], self[e4315]]) * geometric_product.group0().xyx())
                + (Simd32x3::from([self[e4125], self[e4235], self[e45]]) * geometric_product.group0().yzz())
                + (Simd32x3::from([self[e3215], self[e3215], self[e25]]) * geometric_product.group1().xyx())
                - (self.group5().yzx() * geometric_product.group0().zxy())
                - (geometric_product.group0().zxy() * self.group9().yzx())
                - (geometric_product.group1().zxy() * self.group3().yzx()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([geometric_product[e315], geometric_product[e5], geometric_product[e5], geometric_product[e3]]) * self.group7().zyz().with_w(self[e125]))
                + (Simd32x4::from([geometric_product[e5], geometric_product[e125], geometric_product[e235], geometric_product[e2]]) * self.group7().xxy().with_w(self[e315]))
                + (geometric_product.group0().xyzx() * self.group1().www().with_w(self[e415]))
                + (geometric_product.group0().wwwy() * self.group6().xyzy())
                + (geometric_product.group1().xyzx() * self.group0().yy().with_zw(self[e12345], self[e235]))
                + (self.group6().zxyz() * geometric_product.group1().yzx().with_w(geometric_product[e125]))
                + Simd32x3::from(0.0).with_w(
                    (geometric_product[e5] * self[e321]) - (geometric_product[e315] * self[e2]) - (geometric_product[e125] * self[e3]) - (geometric_product[e321] * self[e5]),
                )
                - (self.group7().yzx() * geometric_product.group0().zxy()).with_w(geometric_product[e5] * self[e12345])
                - (geometric_product.group1().zxy() * self.group6().yzx()).with_w(geometric_product[e235] * self[e1]),
            // e1234
            (geometric_product[e321] * self[e4]) - (geometric_product[e1] * self[e423]) - (geometric_product[e2] * self[e431]) - (geometric_product[e3] * self[e412]),
        );
    }
}
impl GeometricQuotient<AntiLine> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       50       73        0
    //    simd2        5        6        0
    //    simd3       17       32        0
    //    simd4       13        6        0
    // Totals...
    // yes simd       85      117        0
    //  no simd      163      205        0
    fn geometric_quotient(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiLine::from_groups(
            // e23, e31, e12
            other.group0() * Simd32x3::from(-1.0),
            // e15, e25, e35
            other.group1() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(/* scalar */ f32::powi(other[e23], 2) + f32::powi(other[e31], 2) + f32::powi(other[e12], 2));
        let geometric_product = AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e15, e25, e35
            Simd32x3::from(other_2[scalar]) * reverse.group1(),
        );
        return MultiVector::from_groups(
            // scalar, e12345
            -(Simd32x2::from(geometric_product[e23]) * Simd32x2::from([self[e23], self[e415]]))
                - (Simd32x2::from(geometric_product[e31]) * Simd32x2::from([self[e31], self[e425]]))
                - (Simd32x2::from(geometric_product[e12]) * Simd32x2::from([self[e12], self[e435]]))
                - (Simd32x2::from(geometric_product[e15]) * Simd32x2::from([self[e41], self[e423]]))
                - (Simd32x2::from(geometric_product[e25]) * Simd32x2::from([self[e42], self[e431]]))
                - (Simd32x2::from(geometric_product[e35]) * Simd32x2::from([self[e43], self[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (geometric_product[e23] * self[e321]) + (geometric_product[e31] * self[e3]) + (geometric_product[e15] * self[e4]) + (geometric_product[e25] * self[e412]),
                (geometric_product[e31] * self[e321]) + (geometric_product[e12] * self[e1]) + (geometric_product[e25] * self[e4]) + (geometric_product[e35] * self[e423]),
                (geometric_product[e23] * self[e2]) + (geometric_product[e12] * self[e321]) + (geometric_product[e15] * self[e431]) + (geometric_product[e35] * self[e4]),
                geometric_product[e12] * self[e412] * -1.0,
            ]) - (geometric_product.group0().zxy() * self.group1().yzx()).with_w(geometric_product[e23] * self[e423])
                - (geometric_product.group1().zxy() * self.group7().yzx()).with_w(geometric_product[e31] * self[e431]),
            // e5
            (geometric_product[e15] * self[e1]) + (geometric_product[e25] * self[e2]) + (geometric_product[e35] * self[e3])
                - (geometric_product[e23] * self[e235])
                - (geometric_product[e31] * self[e315])
                - (geometric_product[e12] * self[e125])
                - (geometric_product[e15] * self[e415])
                - (geometric_product[e25] * self[e425])
                - (geometric_product[e35] * self[e435]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (geometric_product[e15] * self[e45]) + (geometric_product[e25] * self[e12]) + (geometric_product[e25] * self[e4125]),
                (geometric_product[e25] * self[e45]) + (geometric_product[e35] * self[e23]) + (geometric_product[e35] * self[e4235]),
                (geometric_product[e15] * self[e31]) + (geometric_product[e15] * self[e4315]) + (geometric_product[e35] * self[e45]),
                0.0,
            ]) + (self.group0().xx().with_zw(self[scalar], geometric_product[e15]) * geometric_product.group1().with_w(self[e41]))
                + (self.group3().zx().with_zw(self[e3215], self[e43]) * geometric_product.group0().yzz().with_w(geometric_product[e35]))
                + (self.group9().ww().with_zw(self[e25], self[e42]) * geometric_product.group0().xyx().with_w(geometric_product[e25]))
                - (self.group9().yzxz() * geometric_product.group1().zxy().with_w(geometric_product[e12]))
                - (geometric_product.group0().zxy() * self.group3().yzx()).with_w(geometric_product[e23] * self[e4235])
                - (geometric_product.group1().zxy() * self.group5().yzx()).with_w(geometric_product[e31] * self[e4315]),
            // e41, e42, e43
            (geometric_product.group0().xyx() * Simd32x2::from(self[e1234]).with_z(self[e42])) + (geometric_product.group0().yzz() * self.group4().zx().with_z(self[e1234]))
                - (geometric_product.group0().zxy() * self.group4().yzx()),
            // e23, e31, e12
            (Simd32x3::from(self[scalar]) * geometric_product.group0())
                + (geometric_product.group0().yzx() * self.group5().zxy())
                + (geometric_product.group1().xyx() * Simd32x2::from(self[e1234]).with_z(self[e42]))
                + (geometric_product.group1().yzz() * self.group4().zx().with_z(self[e1234]))
                - (geometric_product.group0().zxy() * self.group5().yzx())
                - (geometric_product.group1().zxy() * self.group4().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (geometric_product[e23] * self[e12345]) + (geometric_product[e31] * self[e435]) + (geometric_product[e15] * self[e4]) + (geometric_product[e25] * self[e412]),
                (geometric_product[e31] * self[e12345]) + (geometric_product[e12] * self[e415]) + (geometric_product[e25] * self[e4]) + (geometric_product[e35] * self[e423]),
                (geometric_product[e23] * self[e425]) + (geometric_product[e12] * self[e12345]) + (geometric_product[e15] * self[e431]) + (geometric_product[e35] * self[e4]),
                -(geometric_product[e12] * self[e3]) - (geometric_product[e15] * self[e423]) - (geometric_product[e25] * self[e431]) - (geometric_product[e35] * self[e412]),
            ]) - (geometric_product.group0().zxy() * self.group6().yzx()).with_w(geometric_product[e23] * self[e1])
                - (geometric_product.group1().zxy() * self.group7().yzx()).with_w(geometric_product[e31] * self[e2]),
            // e423, e431, e412
            (geometric_product.group0().xyx() * Simd32x2::from(self[e4]).with_z(self[e431])) + (geometric_product.group0().yzz() * self.group7().zx().with_z(self[e4]))
                - (geometric_product.group0().zxy() * self.group7().yzx()),
            // e235, e315, e125
            (Simd32x3::from(self[e12345]) * geometric_product.group1())
                + (Simd32x3::from([self[e2], self[e415], self[e1]]) * geometric_product.group1().zzy())
                + (Simd32x3::from([self[e435], self[e3], self[e425]]) * geometric_product.group1().yxx())
                + (geometric_product.group0().xyx() * Simd32x2::from(self[e5]).with_z(self[e315]))
                + (geometric_product.group0().yzz() * self.group8().zx().with_z(self[e5]))
                - (Simd32x3::from(geometric_product[e15]) * Simd32x3::from([self[e321], self[e435], self[e2]]))
                - (Simd32x3::from(geometric_product[e25]) * Simd32x3::from([self[e3], self[e321], self[e415]]))
                - (Simd32x3::from(geometric_product[e35]) * Simd32x3::from([self[e425], self[e1], self[e321]]))
                - (geometric_product.group0().zxy() * self.group8().yzx()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (geometric_product[e23] * self[e45]) + (geometric_product[e31] * self[e4125]) + (geometric_product[e35] * self[e42]),
                (geometric_product[e31] * self[e45]) + (geometric_product[e12] * self[e4235]) + (geometric_product[e15] * self[e43]),
                (geometric_product[e23] * self[e4315]) + (geometric_product[e12] * self[e45]) + (geometric_product[e25] * self[e41]),
                -(geometric_product[e15] * self[e23])
                    - (geometric_product[e15] * self[e4235])
                    - (geometric_product[e25] * self[e31])
                    - (geometric_product[e25] * self[e4315])
                    - (geometric_product[e35] * self[e12])
                    - (geometric_product[e35] * self[e4125]),
            ]) - (Simd32x2::from(self[e1234]).with_zw(self[e42], self[e25]) * geometric_product.group1().xyx().with_w(geometric_product[e31]))
                - (self.group4().zx().with_zw(self[e1234], self[e35]) * geometric_product.group1().yzz().with_w(geometric_product[e12]))
                - (geometric_product.group0().zxy() * self.group9().yzx()).with_w(geometric_product[e23] * self[e15]),
            // e1234
            -(geometric_product[e23] * self[e41]) - (geometric_product[e31] * self[e42]) - (geometric_product[e12] * self[e43]),
        );
    }
}
impl GeometricQuotient<AntiMotor> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       57       82        0
    //    simd2        7        8        0
    //    simd3       24       36        0
    //    simd4       21       17        0
    // Totals...
    // yes simd      109      143        0
    //  no simd      227      274        0
    fn geometric_quotient(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, e3215
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e23], 2) + f32::powi(other[e31], 2) + f32::powi(other[e12], 2) + f32::powi(other[scalar], 2),
        );
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e15, e25, e35, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from(geometric_product[scalar]) * self.group0()) + (Simd32x2::from(geometric_product[e3215]) * Simd32x2::from([self[e1234], self[e4]]))
                - (Simd32x2::from(geometric_product[e23]) * Simd32x2::from([self[e23], self[e415]]))
                - (Simd32x2::from(geometric_product[e31]) * Simd32x2::from([self[e31], self[e425]]))
                - (Simd32x2::from(geometric_product[e12]) * Simd32x2::from([self[e12], self[e435]]))
                - (Simd32x2::from(geometric_product[e15]) * Simd32x2::from([self[e41], self[e423]]))
                - (Simd32x2::from(geometric_product[e25]) * Simd32x2::from([self[e42], self[e431]]))
                - (Simd32x2::from(geometric_product[e35]) * Simd32x2::from([self[e43], self[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (geometric_product[e23] * self[e321])
                    + (geometric_product[e31] * self[e3])
                    + (geometric_product[scalar] * self[e1])
                    + (geometric_product[e15] * self[e4])
                    + (geometric_product[e25] * self[e412]),
                (geometric_product[e31] * self[e321])
                    + (geometric_product[e12] * self[e1])
                    + (geometric_product[scalar] * self[e2])
                    + (geometric_product[e25] * self[e4])
                    + (geometric_product[e3215] * self[e431]),
                (geometric_product[e23] * self[e2])
                    + (geometric_product[e12] * self[e321])
                    + (geometric_product[scalar] * self[e3])
                    + (geometric_product[e35] * self[e4])
                    + (geometric_product[e3215] * self[e412]),
                geometric_product[e12] * self[e412] * -1.0,
            ]) + (self.group7().xxy() * geometric_product.group1().wzx()).with_w(geometric_product[scalar] * self[e4])
                - (self.group7().yzx() * geometric_product.group1().zxy()).with_w(geometric_product[e23] * self[e423])
                - (geometric_product.group0().zxy() * self.group1().yzx()).with_w(geometric_product[e31] * self[e431]),
            // e5
            (geometric_product[scalar] * self[e5])
                + (geometric_product[e15] * self[e1])
                + (geometric_product[e25] * self[e2])
                + (geometric_product[e35] * self[e3])
                + (geometric_product[e3215] * self[e12345])
                - (geometric_product[e23] * self[e235])
                - (geometric_product[e31] * self[e315])
                - (geometric_product[e12] * self[e125])
                - (geometric_product[e15] * self[e415])
                - (geometric_product[e25] * self[e425])
                - (geometric_product[e35] * self[e435])
                - (geometric_product[e3215] * self[e321]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (geometric_product[e31] * self[e35])
                    + (geometric_product[scalar] * self[e15])
                    + (geometric_product[e15] * self[e45])
                    + (geometric_product[e25] * self[e4125])
                    + (geometric_product[e3215] * self[e4235]),
                (geometric_product[e12] * self[e15])
                    + (geometric_product[scalar] * self[e25])
                    + (geometric_product[e25] * self[e45])
                    + (geometric_product[e35] * self[e4235])
                    + (geometric_product[e3215] * self[e4315]),
                (geometric_product[e12] * self[e3215])
                    + (geometric_product[scalar] * self[e35])
                    + (geometric_product[e15] * self[e4315])
                    + (geometric_product[e35] * self[e45])
                    + (geometric_product[e3215] * self[e4125]),
                geometric_product[e3215] * self[e1234] * -1.0,
            ]) + (geometric_product.group0().xyxw() * self.group9().ww().with_zw(self[e25], self[e45]))
                + (geometric_product.group1().xyzx() * self.group0().xx().with_zw(self[scalar], self[e41]))
                + (geometric_product.group1().ywwz() * self.group5().zyz().with_w(self[e43]))
                + (geometric_product.group1().wzxy() * self.group5().xxy().with_w(self[e42]))
                - (geometric_product.group0().zxyy() * self.group3().yzx().with_w(self[e4315]))
                - (self.group9().yzxz() * geometric_product.group1().zxy().with_w(geometric_product[e12]))
                - (self.group5().yzx() * geometric_product.group1().zxy()).with_w(geometric_product[e23] * self[e4235]),
            // e41, e42, e43
            (Simd32x3::from(self[e1234]) * geometric_product.group0().xyz())
                + (self.group4().xxy() * geometric_product.group0().wzx())
                + (self.group4().zyz() * geometric_product.group0().yww())
                - (self.group4().yzx() * geometric_product.group0().zxy()),
            // e23, e31, e12
            (Simd32x3::from(self[scalar]) * geometric_product.group0().xyz())
                + (Simd32x3::from(self[e1234]) * geometric_product.group1().xyz())
                + (self.group4().xxy() * geometric_product.group1().wzx())
                + (self.group4().zyz() * geometric_product.group1().yww())
                + (self.group5().xxy() * geometric_product.group0().wzx())
                + (self.group5().zyz() * geometric_product.group0().yww())
                - (self.group4().yzx() * geometric_product.group1().zxy())
                - (self.group5().yzx() * geometric_product.group0().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (geometric_product[e31] * self[e435]) + (geometric_product[scalar] * self[e415]) + (geometric_product[e15] * self[e4]) + (geometric_product[e25] * self[e412]),
                (geometric_product[e12] * self[e415]) + (geometric_product[scalar] * self[e425]) + (geometric_product[e25] * self[e4]) + (geometric_product[e3215] * self[e431]),
                (geometric_product[e23] * self[e425]) + (geometric_product[scalar] * self[e435]) + (geometric_product[e35] * self[e4]) + (geometric_product[e3215] * self[e412]),
                -(geometric_product[e23] * self[e1]) - (geometric_product[e31] * self[e2]) - (geometric_product[e12] * self[e3]) - (geometric_product[e35] * self[e412]),
            ]) + (self.group0().yy().with_zw(self[e12345], geometric_product[scalar]) * geometric_product.group0().xyz().with_w(self[e321]))
                + (self.group7().xxy() * geometric_product.group1().wzx()).with_w(geometric_product[e3215] * self[e4])
                - (geometric_product.group1().zxyx() * self.group7().yzx().with_w(self[e423]))
                - (geometric_product.group0().zxy() * self.group6().yzx()).with_w(geometric_product[e25] * self[e431]),
            // e423, e431, e412
            (Simd32x3::from(self[e4]) * geometric_product.group0().xyz())
                + (self.group7().xxy() * geometric_product.group0().wzx())
                + (self.group7().zyz() * geometric_product.group0().yww())
                - (self.group7().yzx() * geometric_product.group0().zxy()),
            // e235, e315, e125
            (Simd32x3::from(geometric_product[e3215]) * self.group6().xyz())
                + (Simd32x3::from(self[e12345]) * geometric_product.group1().xyz())
                + (Simd32x3::from(self[e5]) * geometric_product.group0().xyz())
                + (Simd32x3::from([self[e2], self[e415], self[e1]]) * geometric_product.group1().zzy())
                + (Simd32x3::from([self[e435], self[e3], self[e425]]) * geometric_product.group1().yxx())
                + (self.group8().xxy() * geometric_product.group0().wzx())
                + (self.group8().zyz() * geometric_product.group0().yww())
                - (Simd32x3::from(geometric_product[e15]) * Simd32x3::from([self[e321], self[e435], self[e2]]))
                - (Simd32x3::from(geometric_product[e25]) * Simd32x3::from([self[e3], self[e321], self[e415]]))
                - (Simd32x3::from(geometric_product[e35]) * Simd32x3::from([self[e425], self[e1], self[e321]]))
                - (Simd32x3::from(geometric_product[e3215]) * self.group1().xyz())
                - (self.group8().yzx() * geometric_product.group0().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                geometric_product[scalar] * self[e4235],
                geometric_product[scalar] * self[e4315],
                geometric_product[scalar] * self[e4125],
                -(geometric_product[e31] * self[e25])
                    - (geometric_product[e12] * self[e35])
                    - (geometric_product[e15] * self[e4235])
                    - (geometric_product[e25] * self[e4315])
                    - (geometric_product[e35] * self[e4125]),
            ]) + (geometric_product.group0().xyxw() * self.group3().ww().with_zw(self[e4315], self[e3215]))
                + (geometric_product.group1().zxyw() * self.group4().yzx().with_w(self[scalar]))
                + (self.group9().zx().with_zw(self[e45], self[e45]) * geometric_product.group0().yzz().with_w(geometric_product[e3215]))
                - (geometric_product.group1().ywwy() * self.group4().zyz().with_w(self[e31]))
                - (geometric_product.group1().wzxx() * self.group4().xxy().with_w(self[e23]))
                - (Simd32x3::from(self[e1234]) * geometric_product.group1().xyz()).with_w(geometric_product[e23] * self[e15])
                - (geometric_product.group0().zxy() * self.group9().yzx()).with_w(geometric_product[e35] * self[e12]),
            // e1234
            (geometric_product[scalar] * self[e1234]) - (geometric_product[e23] * self[e41]) - (geometric_product[e31] * self[e42]) - (geometric_product[e12] * self[e43]),
        );
    }
}
impl GeometricQuotient<AntiPlane> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       31        0
    //    simd2        3        3        0
    //    simd3       11       20        0
    //    simd4       14       10        0
    // Totals...
    // yes simd       36       64        0
    //  no simd      103      137        0
    fn geometric_quotient(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiPlane::from_groups(
            // e1, e2, e3, e5
            Simd32x4::from(f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)) * other.group0(),
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([geometric_product[e5] * self[e4] * -1.0, geometric_product[e5] * self[e1234]])
                + (Simd32x2::from(geometric_product[e1]) * Simd32x2::from([self[e1], self[e4235]]))
                + (Simd32x2::from(geometric_product[e2]) * Simd32x2::from([self[e2], self[e4315]]))
                + (Simd32x2::from(geometric_product[e3]) * Simd32x2::from([self[e3], self[e4125]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                geometric_product[e3] * self[e31] * -1.0,
                geometric_product[e1] * self[e12] * -1.0,
                geometric_product[e2] * self[e23] * -1.0,
                0.0,
            ]) + (geometric_product.group0().xyzx() * self.group0().xx().with_zw(self[scalar], self[e41]))
                + (geometric_product.group0().yzxz() * self.group5().zxy().with_w(self[e43]))
                + (geometric_product.group0().wwwy() * self.group4().with_w(self[e42])),
            // e5
            (geometric_product[e5] * self[scalar]) + (geometric_product[e5] * self[e45])
                - (geometric_product[e1] * self[e15])
                - (geometric_product[e2] * self[e25])
                - (geometric_product[e3] * self[e35]),
            // e15, e25, e35, e45
            Simd32x4::from([geometric_product[e5] * self[e1], geometric_product[e5] * self[e2], geometric_product[e5] * self[e3], 0.0])
                + (self.group8().yzx() * geometric_product.group0().zxy()).with_w(geometric_product[e5] * self[e4])
                - (geometric_product.group0().xyzy() * Simd32x3::from(self[e5]).with_w(self[e425]))
                - (geometric_product.group0().wwwz() * self.group6().xyzz())
                - (self.group8().zxy() * geometric_product.group0().yzx()).with_w(geometric_product[e1] * self[e415]),
            // e41, e42, e43
            (Simd32x3::from(self[e4]) * geometric_product.group0().xyz()) + (self.group7().zxy() * geometric_product.group0().yzx())
                - (self.group7().yzx() * geometric_product.group0().zxy()),
            // e23, e31, e12
            (geometric_product.group0().zxy() * self.group1().yzx())
                - (Simd32x3::from(geometric_product[e5]) * self.group7())
                - (Simd32x3::from([self[e3], self[e1], self[e321]]) * geometric_product.group0().yzz())
                - (Simd32x3::from([self[e321], self[e321], self[e2]]) * geometric_product.group0().xyx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                geometric_product[e3] * self[e4315],
                geometric_product[e1] * self[e4125],
                geometric_product[e2] * self[e4235],
                geometric_product[e3] * self[e12] * -1.0,
            ]) + (self.group4() * geometric_product.group0().www()).with_w(geometric_product[e5] * self[e1234])
                - (self.group3().ww().with_zw(self[e4315], geometric_product[e1]) * geometric_product.group0().xyx().with_w(self[e23]))
                - (self.group9().zx().with_zw(self[e45], geometric_product[e2]) * geometric_product.group0().yzz().with_w(self[e31])),
            // e423, e431, e412
            (self.group4().yzx() * geometric_product.group0().zxy())
                - (Simd32x3::from(self[e1234]) * geometric_product.group0().xyz())
                - (self.group4().zxy() * geometric_product.group0().yzx()),
            // e235, e315, e125
            (Simd32x3::from(geometric_product[e5]) * self.group5())
                + (Simd32x3::from(geometric_product[e5]) * self.group9().xyz())
                + (Simd32x3::from([self[e35], self[e15], self[e3215]]) * geometric_product.group0().yzz())
                + (Simd32x3::from([self[e3215], self[e3215], self[e25]]) * geometric_product.group0().xyx())
                - (geometric_product.group0().zxy() * self.group3().yzx()),
            // e4235, e4315, e4125, e3215
            (geometric_product.group0().xyzx() * self.group0().yy().with_zw(self[e12345], self[e235]))
                + (geometric_product.group0().wwwy() * self.group7().with_w(self[e315]))
                + Simd32x3::from(0.0).with_w(geometric_product[e5] * self[e321])
                + (geometric_product.group0().yzx() * self.group6().zxy()).with_w(geometric_product[e3] * self[e125])
                - (geometric_product.group0().zxy() * self.group6().yzx()).with_w(geometric_product[e5] * self[e12345]),
            // e1234
            -(geometric_product[e1] * self[e423]) - (geometric_product[e2] * self[e431]) - (geometric_product[e3] * self[e412]),
        );
    }
}
impl GeometricQuotient<AntiScalar> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        7        1
    //    simd2        0        2        0
    //    simd3        0        9        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0       22        1
    //  no simd        0       54        1
    fn geometric_quotient(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiScalar::from_groups(/* e12345 */ 1.0 / other[e12345] * -1.0);
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(geometric_product[e12345]) * self.group0().yx() * Simd32x2::from([-1.0, 1.0]),
            // e1, e2, e3, e4
            (Simd32x3::from(geometric_product[e12345]) * self.group9().xyz() * Simd32x3::from(-1.0)).with_w(geometric_product[e12345] * self[e1234]),
            // e5
            geometric_product[e12345] * self[e3215],
            // e15, e25, e35, e45
            Simd32x4::from(geometric_product[e12345]) * self.group8().with_w(self[e321]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e41, e42, e43
            Simd32x3::from(geometric_product[e12345]) * self.group7() * Simd32x3::from(-1.0),
            // e23, e31, e12
            Simd32x3::from(geometric_product[e12345]) * self.group6().xyz() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            Simd32x4::from(geometric_product[e12345]) * self.group5().with_w(self[e45]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e423, e431, e412
            Simd32x3::from(geometric_product[e12345]) * self.group4(),
            // e235, e315, e125
            Simd32x3::from(geometric_product[e12345]) * self.group3().xyz(),
            // e4235, e4315, e4125, e3215
            (Simd32x3::from(geometric_product[e12345]) * self.group1().xyz()).with_w(geometric_product[e12345] * self[e5] * -1.0),
            // e1234
            geometric_product[e12345] * self[e4] * -1.0,
        );
    }
}
impl GeometricQuotient<Circle> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44       71        0
    //    simd2        1        1        0
    //    simd3       36       56        0
    //    simd4       35       27        0
    // Totals...
    // yes simd      116      155        0
    //  no simd      294      349        0
    fn geometric_quotient(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let reverse = Circle::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125
            other.group2() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group2(),
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (geometric_product[e423] * self[e235])
                    + (geometric_product[e431] * self[e315])
                    + (geometric_product[e412] * self[e125])
                    + (geometric_product[e415] * self[e415])
                    + (geometric_product[e425] * self[e425])
                    + (geometric_product[e435] * self[e435])
                    + (geometric_product[e235] * self[e423])
                    + (geometric_product[e315] * self[e431])
                    + (geometric_product[e125] * self[e412]),
                -(geometric_product[e423] * self[e15])
                    - (geometric_product[e431] * self[e25])
                    - (geometric_product[e412] * self[e35])
                    - (geometric_product[e425] * self[e31])
                    - (geometric_product[e435] * self[e12])
                    - (geometric_product[e321] * self[e45])
                    - (geometric_product[e235] * self[e41])
                    - (geometric_product[e315] * self[e42])
                    - (geometric_product[e125] * self[e43]),
            ]) - (Simd32x2::from([self[e321], self[e23]]) * geometric_product.group1().wx()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (geometric_product[e435] * self[e4315]) + (geometric_product[e321] * self[e23]),
                (geometric_product[e415] * self[e4125]) + (geometric_product[e321] * self[e31]),
                (geometric_product[e425] * self[e4235]) + (geometric_product[e321] * self[e12]),
                -(geometric_product[e435] * self[e43]) - (geometric_product[e321] * self[e1234]),
            ]) + (Simd32x2::from(self[e1234]).with_zw(self[e42], self[e4315]) * geometric_product.group2().xyx().with_w(geometric_product[e431]))
                + (self.group4().zx().with_zw(self[e1234], self[e4125]) * geometric_product.group2().yzz().with_w(geometric_product[e412]))
                + (geometric_product.group0().zxy() * self.group3().yzx()).with_w(geometric_product[e423] * self[e4235])
                - (self.group3().zx().with_zw(self[e3215], self[e31]) * geometric_product.group0().yzz().with_w(geometric_product[e431]))
                - (self.group3().ww().with_zw(self[e4315], geometric_product[e415]) * geometric_product.group1().xyx().with_w(self[e41]))
                - (self.group9().zx().with_zw(self[e45], geometric_product[e425]) * geometric_product.group1().yzz().with_w(self[e42]))
                - (self.group9().ww().with_zw(self[e25], self[e23]) * geometric_product.group0().xyx().with_w(geometric_product[e423]))
                - (geometric_product.group2().zxy() * self.group4().yzx()).with_w(geometric_product[e412] * self[e12]),
            // e5
            (geometric_product[e321] * self[e3215])
                - (geometric_product[e415] * self[e15])
                - (geometric_product[e425] * self[e25])
                - (geometric_product[e435] * self[e35])
                - (geometric_product[e235] * self[e23])
                - (geometric_product[e235] * self[e4235])
                - (geometric_product[e315] * self[e31])
                - (geometric_product[e315] * self[e4315])
                - (geometric_product[e125] * self[e12])
                - (geometric_product[e125] * self[e4125]),
            // e15, e25, e35, e45
            (Simd32x4::from([self[e3], self[e321], self[e415], self[e235]]) * geometric_product.group2().yyy().with_w(geometric_product[e423]))
                + (Simd32x4::from([self[e425], self[e1], self[e321], self[e315]]) * geometric_product.group2().zzz().with_w(geometric_product[e431]))
                + (self.group6().wz().with_zw(self[e2], geometric_product[e321]) * geometric_product.group2().xxx().with_w(self[e12345]))
                + (self.group8().yzx() * geometric_product.group1().zxy()).with_w(geometric_product[e412] * self[e125])
                - (Simd32x4::from([self[e2], self[e415], self[e1], self[e412]]) * geometric_product.group2().zzy().with_w(geometric_product[e125]))
                - (Simd32x4::from([self[e435], self[e3], self[e425], self[e431]]) * geometric_product.group2().yxx().with_w(geometric_product[e315]))
                - (geometric_product.group1().xyzz() * Simd32x3::from(self[e5]).with_w(self[e3]))
                - (self.group0().yy().with_zw(self[e12345], geometric_product[e235]) * geometric_product.group2().with_w(self[e423]))
                - (self.group8().xxy() * geometric_product.group1().wzx()).with_w(geometric_product[e415] * self[e1])
                - (self.group8().zyz() * geometric_product.group1().yww()).with_w(geometric_product[e425] * self[e2]),
            // e41, e42, e43
            (geometric_product.group0().zxy() * self.group1().yzx())
                + (geometric_product.group0().zxy() * self.group6().yzx())
                + (self.group7().xyx() * geometric_product.group1().wwy())
                + (self.group7().yzz() * geometric_product.group1().zxw())
                - (Simd32x3::from(self[e12345]) * geometric_product.group0())
                - (Simd32x3::from(self[e4]) * geometric_product.group1().xyz())
                - (Simd32x3::from([self[e3], self[e1], self[e425]]) * geometric_product.group0().yzx())
                - (Simd32x3::from([self[e321], self[e321], self[e2]]) * geometric_product.group0().xyx())
                - (geometric_product.group0().yzz() * self.group6().zxw())
                - (self.group7().zxy() * geometric_product.group1().yzx()),
            // e23, e31, e12
            (geometric_product.group0().zxy() * self.group8().yzx())
                + (geometric_product.group2().zxy() * self.group7().yzx())
                + (geometric_product.group1().zxy() * self.group6().yzx())
                - (Simd32x3::from(geometric_product[e321]) * self.group1().xyz())
                - (Simd32x3::from(self[e12345]) * geometric_product.group1().xyz())
                - (geometric_product.group0().xyx() * Simd32x2::from(self[e5]).with_z(self[e315]))
                - (geometric_product.group0().yzz() * self.group8().zx().with_z(self[e5]))
                - (geometric_product.group2().xyx() * Simd32x2::from(self[e4]).with_z(self[e431]))
                - (geometric_product.group2().yzz() * self.group7().zx().with_z(self[e4]))
                - (geometric_product.group1().yzx() * self.group6().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                geometric_product[e321] * self[e4235] * -1.0,
                geometric_product[e321] * self[e4315] * -1.0,
                geometric_product[e321] * self[e4125] * -1.0,
                geometric_product[e435] * self[e4125],
            ]) + (Simd32x4::from(self[scalar]) * geometric_product.group1())
                + (Simd32x2::from(self[e1234]).with_zw(self[e42], self[e35]) * geometric_product.group2().xyx().with_w(geometric_product[e412]))
                + (self.group4().zx().with_zw(self[e1234], self[e4235]) * geometric_product.group2().yzz().with_w(geometric_product[e415]))
                + (self.group3().zx().with_zw(self[e3215], self[e25]) * geometric_product.group0().yzz().with_w(geometric_product[e431]))
                + (self.group9().ww().with_zw(self[e25], self[e15]) * geometric_product.group0().xyx().with_w(geometric_product[e423]))
                + (self.group5().zxy() * geometric_product.group1().yzx()).with_w(geometric_product[e425] * self[e4315])
                - (geometric_product.group0().zxy() * self.group3().yzx()).with_w(geometric_product[e235] * self[e41])
                - (geometric_product.group2().zxy() * self.group4().yzx()).with_w(geometric_product[e315] * self[e42])
                - (self.group5().yzx() * geometric_product.group1().zxy()).with_w(geometric_product[e125] * self[e43]),
            // e423, e431, e412
            (Simd32x3::from(self[scalar]) * geometric_product.group0())
                + (Simd32x3::from(self[e1234]) * geometric_product.group1().xyz())
                + (Simd32x3::from([self[e12], self[e4125], self[e31]]) * geometric_product.group0().yxx())
                + (Simd32x3::from([self[e4315], self[e23], self[e4235]]) * geometric_product.group0().zzy())
                + (self.group4().zxy() * geometric_product.group1().yzx())
                - (Simd32x3::from(geometric_product[e423]) * Simd32x3::from([self[e45], self[e12], self[e4315]]))
                - (Simd32x3::from(geometric_product[e431]) * Simd32x3::from([self[e4125], self[e45], self[e23]]))
                - (Simd32x3::from(geometric_product[e412]) * Simd32x3::from([self[e31], self[e4235], self[e45]]))
                - (self.group4().xyx() * geometric_product.group1().wwy())
                - (self.group4().yzz() * geometric_product.group1().zxw()),
            // e235, e315, e125
            (Simd32x3::from(geometric_product[e321]) * self.group3().xyz())
                + (Simd32x3::from(self[scalar]) * geometric_product.group2())
                + (Simd32x3::from([self[e35], self[e15], self[e3215]]) * geometric_product.group1().yzz())
                + (Simd32x3::from([self[e4125], self[e4235], self[e45]]) * geometric_product.group2().yzz())
                + (Simd32x3::from([self[e3215], self[e3215], self[e25]]) * geometric_product.group1().xyx())
                + (geometric_product.group2().xyx() * Simd32x2::from(self[e45]).with_z(self[e31]))
                + (geometric_product.group2().yzx() * self.group5().zx().with_z(self[e4315]))
                - (geometric_product.group2().zxy() * self.group5().yzx())
                - (geometric_product.group2().zxy() * self.group9().yzx())
                - (geometric_product.group1().zxy() * self.group3().yzx()),
            // e4235, e4315, e4125, e3215
            (self.group7().zx().with_zw(self[e4], self[e435]) * geometric_product.group2().yzz().with_w(geometric_product[e125]))
                + (self.group1().zx().with_zw(self[e321], geometric_product[e425]) * geometric_product.group1().yzz().with_w(self[e315]))
                + (self.group1().ww().with_zw(self[e431], self[e425]) * geometric_product.group2().xyx().with_w(geometric_product[e315]))
                + (self.group6().ww().with_zw(self[e2], geometric_product[e415]) * geometric_product.group1().xyx().with_w(self[e235]))
                + (geometric_product.group0().zxy() * self.group8().yzx()).with_w(geometric_product[e235] * self[e415])
                + (geometric_product.group1().www() * self.group6().xyz()).with_w(geometric_product[e435] * self[e125])
                - (geometric_product.group1().zxyw() * self.group1().yzx().with_w(self[e5]))
                - (Simd32x2::from(self[e5]).with_zw(self[e315], self[e1]) * geometric_product.group0().xyx().with_w(geometric_product[e235]))
                - (self.group8().zx().with_zw(self[e5], self[e2]) * geometric_product.group0().yzz().with_w(geometric_product[e315]))
                - (geometric_product.group2().zxy() * self.group7().yzx()).with_w(geometric_product[e125] * self[e3]),
            // e1234
            (geometric_product[e423] * self[e1])
                + (geometric_product[e423] * self[e415])
                + (geometric_product[e431] * self[e2])
                + (geometric_product[e431] * self[e425])
                + (geometric_product[e412] * self[e3])
                + (geometric_product[e412] * self[e435])
                + (geometric_product[e415] * self[e423])
                + (geometric_product[e425] * self[e431])
                + (geometric_product[e435] * self[e412])
                + (geometric_product[e321] * self[e4]),
        );
    }
}
impl GeometricQuotient<CircleRotor> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       41       76        0
    //    simd2        3        3        0
    //    simd3       40       61        0
    //    simd4       40       30        0
    // Totals...
    // yes simd      124      170        0
    //  no simd      327      385        0
    fn geometric_quotient(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let reverse = CircleRotor::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e12345
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - f32::powi(other[e12345], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (geometric_product[e423] * self[e235])
                    + (geometric_product[e431] * self[e315])
                    + (geometric_product[e412] * self[e125])
                    + (geometric_product[e415] * self[e415])
                    + (geometric_product[e425] * self[e425])
                    + (geometric_product[e435] * self[e435])
                    + (geometric_product[e315] * self[e431])
                    + (geometric_product[e125] * self[e412]),
                -(geometric_product[e423] * self[e15])
                    - (geometric_product[e431] * self[e25])
                    - (geometric_product[e412] * self[e35])
                    - (geometric_product[e425] * self[e31])
                    - (geometric_product[e435] * self[e12])
                    - (geometric_product[e321] * self[e45])
                    - (geometric_product[e315] * self[e42])
                    - (geometric_product[e125] * self[e43]),
            ]) + (Simd32x2::from([self[e423], self[scalar]]) * geometric_product.group2().xw())
                - (Simd32x2::from([self[e12345], self[e41]]) * geometric_product.group2().wx())
                - (Simd32x2::from([self[e321], self[e23]]) * geometric_product.group1().wx()),
            // e1, e2, e3, e4
            Simd32x4::from([
                geometric_product[e235] * self[e1234],
                geometric_product[e315] * self[e1234],
                geometric_product[e125] * self[e1234],
                geometric_product[e321] * self[e1234] * -1.0,
            ]) + (self.group5() * geometric_product.group1().www()).with_w(geometric_product[e412] * self[e4125])
                + (geometric_product.group0().zxy() * self.group3().yzx()).with_w(geometric_product[e423] * self[e4235])
                + (self.group4().zxy() * geometric_product.group2().yzx()).with_w(geometric_product[e431] * self[e4315])
                + (geometric_product.group1().zxy() * self.group9().yzx()).with_w(geometric_product[e12345] * self[e1234])
                - (self.group3().zx().with_zw(self[e3215], self[e31]) * geometric_product.group0().yzz().with_w(geometric_product[e431]))
                - (self.group3().ww().with_zw(self[e4315], geometric_product[e415]) * geometric_product.group1().xyx().with_w(self[e41]))
                - (self.group9().zx().with_zw(self[e45], geometric_product[e425]) * geometric_product.group1().yzz().with_w(self[e42]))
                - (self.group9().ww().with_zw(self[e25], self[e23]) * geometric_product.group0().xyx().with_w(geometric_product[e423]))
                - (self.group4().yzx() * geometric_product.group2().zxy()).with_w(geometric_product[e412] * self[e12])
                - (geometric_product.group2().www() * self.group9().xyz()).with_w(geometric_product[e435] * self[e43]),
            // e5
            (geometric_product[e321] * self[e3215]) + (geometric_product[e12345] * self[e3215])
                - (geometric_product[e415] * self[e15])
                - (geometric_product[e425] * self[e25])
                - (geometric_product[e435] * self[e35])
                - (geometric_product[e235] * self[e23])
                - (geometric_product[e235] * self[e4235])
                - (geometric_product[e315] * self[e31])
                - (geometric_product[e315] * self[e4315])
                - (geometric_product[e125] * self[e12])
                - (geometric_product[e125] * self[e4125]),
            // e15, e25, e35, e45
            Simd32x4::from([
                geometric_product[e125] * self[e2] * -1.0,
                geometric_product[e125] * self[e415] * -1.0,
                geometric_product[e315] * self[e1] * -1.0,
                geometric_product[e12345] * self[e321],
            ]) + (Simd32x4::from([self[e3], self[e321], self[e415], self[e315]]) * geometric_product.group2().yyy().with_w(geometric_product[e431]))
                + (Simd32x4::from([self[e425], self[e1], self[e321], self[e125]]) * geometric_product.group2().zzz().with_w(geometric_product[e412]))
                + (geometric_product.group1().zxyw() * self.group8().yzx().with_w(self[e12345]))
                + (self.group6().wz().with_zw(self[e2], self[e235]) * geometric_product.group2().xxx().with_w(geometric_product[e423]))
                - (Simd32x4::from([geometric_product[e425], geometric_product[e12345], geometric_product[e12345], self[e1]]) * self.group8().zyz().with_w(geometric_product[e415]))
                - (Simd32x4::from([geometric_product[e12345], geometric_product[e321], geometric_product[e321], geometric_product[e125]]) * self.group8().with_w(self[e412]))
                - (Simd32x4::from([self[e435], self[e3], self[e425], self[e3]]) * geometric_product.group2().yxx().with_w(geometric_product[e435]))
                - (geometric_product.group1().xyzy() * Simd32x3::from(self[e5]).with_w(self[e2]))
                - (geometric_product.group2().xyzx() * self.group0().yy().with_zw(self[e12345], self[e423]))
                - (self.group8().xxy() * geometric_product.group1().wzx()).with_w(geometric_product[e315] * self[e431]),
            // e41, e42, e43
            (geometric_product.group0().zxy() * self.group1().yzx())
                + (geometric_product.group0().zxy() * self.group6().yzx())
                + (self.group7().xyx() * geometric_product.group1().wwy())
                + (self.group7().yzz() * geometric_product.group1().zxw())
                - (Simd32x3::from(self[e12345]) * geometric_product.group0())
                - (Simd32x3::from(self[e4]) * geometric_product.group1().xyz())
                - (Simd32x3::from([geometric_product[e425], geometric_product[e12345], geometric_product[e12345]]) * self.group7().zyz())
                - (Simd32x3::from([geometric_product[e12345], geometric_product[e435], geometric_product[e415]]) * self.group7().xxy())
                - (Simd32x3::from([self[e3], self[e1], self[e425]]) * geometric_product.group0().yzx())
                - (Simd32x3::from([self[e321], self[e321], self[e2]]) * geometric_product.group0().xyx())
                - (geometric_product.group0().yzz() * self.group6().zxw()),
            // e23, e31, e12
            (geometric_product.group0().zxy() * self.group8().yzx())
                + (self.group7().yzx() * geometric_product.group2().zxy())
                + (geometric_product.group1().zxy() * self.group6().yzx())
                - (Simd32x3::from(geometric_product[e321]) * self.group1().xyz())
                - (Simd32x3::from(geometric_product[e12345]) * self.group6().xyz())
                - (Simd32x3::from(self[e12345]) * geometric_product.group1().xyz())
                - (Simd32x3::from(self[e4]) * geometric_product.group2().xyz())
                - (geometric_product.group0().xyx() * Simd32x2::from(self[e5]).with_z(self[e315]))
                - (geometric_product.group0().yzz() * self.group8().zx().with_z(self[e5]))
                - (self.group7().zxy() * geometric_product.group2().yzx())
                - (geometric_product.group1().yzx() * self.group6().zxy()),
            // e415, e425, e435, e321
            (Simd32x4::from(self[scalar]) * geometric_product.group1())
                + (Simd32x4::from([geometric_product[e425], geometric_product[e12345], geometric_product[e12345], self[e4315]])
                    * self.group5().zyz().with_w(geometric_product[e425]))
                + (Simd32x4::from([geometric_product[e12345], geometric_product[e435], geometric_product[e415], self[e4235]])
                    * self.group5().xxy().with_w(geometric_product[e415]))
                + (self.group3().zx().with_zw(self[e3215], self[e25]) * geometric_product.group0().yzz().with_w(geometric_product[e431]))
                + (self.group9().ww().with_zw(self[e25], self[e15]) * geometric_product.group0().xyx().with_w(geometric_product[e423]))
                + (Simd32x3::from(self[e1234]) * geometric_product.group2().xyz()).with_w(geometric_product[e435] * self[e4125])
                + (self.group4().zxy() * geometric_product.group2().yzx()).with_w(geometric_product[e412] * self[e35])
                - (geometric_product.group2().zxyy() * self.group4().yzx().with_w(self[e42]))
                - (geometric_product.group0().zxy() * self.group3().yzx()).with_w(geometric_product[e235] * self[e41])
                - (self.group5().yzx() * geometric_product.group1().zxy()).with_w(geometric_product[e125] * self[e43])
                - (geometric_product.group1().www() * self.group9().xyz()).with_w(geometric_product[e12345] * self[e45]),
            // e423, e431, e412
            (Simd32x3::from(self[scalar]) * geometric_product.group0())
                + (Simd32x3::from(self[e1234]) * geometric_product.group1().xyz())
                + (Simd32x3::from([geometric_product[e425], geometric_product[e12345], geometric_product[e12345]]) * self.group4().zyz())
                + (Simd32x3::from([geometric_product[e12345], geometric_product[e435], geometric_product[e415]]) * self.group4().xxy())
                + (Simd32x3::from([self[e12], self[e4125], self[e31]]) * geometric_product.group0().yxx())
                + (Simd32x3::from([self[e4315], self[e23], self[e4235]]) * geometric_product.group0().zzy())
                - (Simd32x3::from(geometric_product[e423]) * Simd32x3::from([self[e45], self[e12], self[e4315]]))
                - (Simd32x3::from(geometric_product[e431]) * Simd32x3::from([self[e4125], self[e45], self[e23]]))
                - (Simd32x3::from(geometric_product[e412]) * Simd32x3::from([self[e31], self[e4235], self[e45]]))
                - (self.group4().xyx() * geometric_product.group1().wwy())
                - (self.group4().yzz() * geometric_product.group1().zxw()),
            // e235, e315, e125
            (Simd32x3::from(geometric_product[e321]) * self.group3().xyz())
                + (Simd32x3::from(geometric_product[e12345]) * self.group3().xyz())
                + (Simd32x3::from(self[scalar]) * geometric_product.group2().xyz())
                + (Simd32x3::from([self[e35], self[e15], self[e3215]]) * geometric_product.group1().yzz())
                + (Simd32x3::from([self[e45], self[e45], self[e4315]]) * geometric_product.group2().xyx())
                + (Simd32x3::from([self[e4125], self[e4235], self[e45]]) * geometric_product.group2().yzz())
                + (Simd32x3::from([self[e3215], self[e3215], self[e25]]) * geometric_product.group1().xyx())
                + (self.group5().zxy() * geometric_product.group2().yzx())
                - (self.group5().yzx() * geometric_product.group2().zxy())
                - (geometric_product.group1().zxy() * self.group3().yzx())
                - (geometric_product.group2().zxy() * self.group9().yzx()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                geometric_product[e12345] * self[e1],
                geometric_product[e12345] * self[e2],
                geometric_product[e12345] * self[e3],
                geometric_product[e12345] * self[e5] * -1.0,
            ]) + (geometric_product.group2().xyzz() * self.group1().www().with_w(self[e435]))
                + (self.group6().xyzy() * geometric_product.group1().www().with_w(geometric_product[e315]))
                + (self.group1().zx().with_zw(self[e321], self[e415]) * geometric_product.group1().yzz().with_w(geometric_product[e235]))
                + (self.group6().ww().with_zw(self[e2], geometric_product[e435]) * geometric_product.group1().xyx().with_w(self[e125]))
                + (geometric_product.group0().zxy() * self.group8().yzx()).with_w(geometric_product[e415] * self[e235])
                + (self.group7().zxy() * geometric_product.group2().yzx()).with_w(geometric_product[e425] * self[e315])
                - (self.group1().yzxz() * geometric_product.group1().zxy().with_w(geometric_product[e125]))
                - (Simd32x2::from(self[e5]).with_zw(self[e315], self[e5]) * geometric_product.group0().xyx().with_w(geometric_product[e321]))
                - (self.group8().zx().with_zw(self[e5], self[e1]) * geometric_product.group0().yzz().with_w(geometric_product[e235]))
                - (self.group7().yzx() * geometric_product.group2().zxy()).with_w(geometric_product[e315] * self[e2]),
            // e1234
            (geometric_product[e423] * self[e1])
                + (geometric_product[e423] * self[e415])
                + (geometric_product[e431] * self[e2])
                + (geometric_product[e431] * self[e425])
                + (geometric_product[e412] * self[e3])
                + (geometric_product[e412] * self[e435])
                + (geometric_product[e415] * self[e423])
                + (geometric_product[e425] * self[e431])
                + (geometric_product[e435] * self[e412])
                + (geometric_product[e321] * self[e4])
                - (geometric_product[e12345] * self[e4]),
        );
    }
}
impl GeometricQuotient<Dipole> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       68      100        0
    //    simd2        9        9        0
    //    simd3       36       55        0
    //    simd4       25       16        0
    // Totals...
    // yes simd      138      180        0
    //  no simd      294      347        0
    fn geometric_quotient(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let reverse = Dipole::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35
            other.group2() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2),
        );
        let geometric_product = Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35
            Simd32x3::from(other_2[scalar]) * reverse.group2(),
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([geometric_product[e45] * self[e45], geometric_product[e45] * self[e321] * -1.0])
                - (Simd32x2::from(geometric_product[e41]) * Simd32x2::from([self[e15], self[e235]]))
                - (Simd32x2::from(geometric_product[e42]) * Simd32x2::from([self[e25], self[e315]]))
                - (Simd32x2::from(geometric_product[e43]) * Simd32x2::from([self[e35], self[e125]]))
                - (Simd32x2::from(geometric_product[e23]) * Simd32x2::from([self[e23], self[e415]]))
                - (Simd32x2::from(geometric_product[e31]) * Simd32x2::from([self[e31], self[e425]]))
                - (Simd32x2::from(geometric_product[e12]) * Simd32x2::from([self[e12], self[e435]]))
                - (Simd32x2::from(geometric_product[e15]) * Simd32x2::from([self[e41], self[e423]]))
                - (Simd32x2::from(geometric_product[e25]) * Simd32x2::from([self[e42], self[e431]]))
                - (Simd32x2::from(geometric_product[e35]) * Simd32x2::from([self[e43], self[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (geometric_product[e23] * self[e321]) + (geometric_product[e31] * self[e3]) + (geometric_product[e15] * self[e4]) + (geometric_product[e25] * self[e412]),
                (geometric_product[e31] * self[e321]) + (geometric_product[e12] * self[e1]) + (geometric_product[e25] * self[e4]) + (geometric_product[e35] * self[e423]),
                (geometric_product[e23] * self[e2]) + (geometric_product[e12] * self[e321]) + (geometric_product[e15] * self[e431]) + (geometric_product[e35] * self[e4]),
                -(geometric_product[e43] * self[e435]) - (geometric_product[e23] * self[e423]) - (geometric_product[e31] * self[e431]) - (geometric_product[e12] * self[e412]),
            ]) + (geometric_product.group0().zxy() * self.group8().yzx()).with_w(geometric_product[e45] * self[e4])
                - (Simd32x2::from(self[e5]).with_zw(self[e315], self[e1]) * geometric_product.group0().xyx().with_w(geometric_product[e41]))
                - (self.group8().zx().with_zw(self[e5], self[e415]) * geometric_product.group0().yzz().with_w(geometric_product[e41]))
                - (geometric_product.group2().zxy() * self.group7().yzx()).with_w(geometric_product[e42] * self[e2])
                - (geometric_product.group1().zxy() * self.group1().yzx()).with_w(geometric_product[e42] * self[e425])
                - (geometric_product.group1().www() * self.group6().xyz()).with_w(geometric_product[e43] * self[e3]),
            // e5
            (geometric_product[e15] * self[e1]) + (geometric_product[e25] * self[e2]) + (geometric_product[e35] * self[e3])
                - (geometric_product[e23] * self[e235])
                - (geometric_product[e31] * self[e315])
                - (geometric_product[e12] * self[e125])
                - (geometric_product[e45] * self[e5])
                - (geometric_product[e15] * self[e415])
                - (geometric_product[e25] * self[e425])
                - (geometric_product[e35] * self[e435]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (geometric_product[e23] * self[e3215]) + (geometric_product[e31] * self[e35]),
                (geometric_product[e31] * self[e3215]) + (geometric_product[e12] * self[e15]),
                (geometric_product[e23] * self[e25]) + (geometric_product[e12] * self[e3215]),
                -(geometric_product[e31] * self[e4315]) - (geometric_product[e12] * self[e4125]),
            ]) + (Simd32x4::from(self[scalar]) * geometric_product.group2().with_w(geometric_product[e45]))
                + (self.group5().zx().with_zw(self[e4315], self[e42]) * geometric_product.group2().yzx().with_w(geometric_product[e25]))
                + (self.group3().ww().with_zw(self[e31], self[e41]) * geometric_product.group2().xyx().with_w(geometric_product[e15]))
                + (self.group9().zx().with_zw(self[e45], self[e43]) * geometric_product.group2().yzz().with_w(geometric_product[e35]))
                - (geometric_product.group1().wwwx() * self.group3().xyz().with_w(self[e4235]))
                - (self.group3().yzxz() * geometric_product.group1().zxy().with_w(geometric_product[e43]))
                - (geometric_product.group2().zxy() * self.group5().yzx()).with_w(geometric_product[e41] * self[e15])
                - (geometric_product.group2().zxy() * self.group9().yzx()).with_w(geometric_product[e42] * self[e25]),
            // e41, e42, e43
            (Simd32x3::from(self[scalar]) * geometric_product.group0())
                + (Simd32x3::from(self[e1234]) * geometric_product.group1().xyz())
                + (Simd32x3::from([self[e12], self[e4125], self[e31]]) * geometric_product.group0().yxx())
                + (Simd32x3::from([self[e4315], self[e23], self[e4235]]) * geometric_product.group0().zzy())
                + (self.group4().xxy() * geometric_product.group1().wzx())
                + (self.group4().zyz() * geometric_product.group1().yww())
                - (Simd32x3::from(geometric_product[e41]) * Simd32x3::from([self[e45], self[e12], self[e4315]]))
                - (Simd32x3::from(geometric_product[e42]) * Simd32x3::from([self[e4125], self[e45], self[e23]]))
                - (Simd32x3::from(geometric_product[e43]) * Simd32x3::from([self[e31], self[e4235], self[e45]]))
                - (self.group4().yzx() * geometric_product.group1().zxy()),
            // e23, e31, e12
            (Simd32x3::from(geometric_product[e45]) * self.group9().xyz())
                + (Simd32x3::from(self[scalar]) * geometric_product.group1().xyz())
                + (Simd32x3::from([self[e35], self[e15], self[e3215]]) * geometric_product.group0().yzz())
                + (Simd32x3::from([self[e3215], self[e3215], self[e25]]) * geometric_product.group0().xyx())
                + (geometric_product.group2().xyx() * Simd32x2::from(self[e1234]).with_z(self[e42]))
                + (geometric_product.group2().yzz() * self.group4().zx().with_z(self[e1234]))
                + (self.group5().zxy() * geometric_product.group1().yzx())
                - (geometric_product.group0().zxy() * self.group3().yzx())
                - (geometric_product.group2().zxy() * self.group4().yzx())
                - (self.group5().yzx() * geometric_product.group1().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (geometric_product[e31] * self[e435]) + (geometric_product[e15] * self[e4]) + (geometric_product[e25] * self[e412]),
                (geometric_product[e12] * self[e415]) + (geometric_product[e25] * self[e4]) + (geometric_product[e35] * self[e423]),
                (geometric_product[e23] * self[e425]) + (geometric_product[e15] * self[e431]) + (geometric_product[e35] * self[e4]),
                -(geometric_product[e23] * self[e1]) - (geometric_product[e31] * self[e2]) - (geometric_product[e12] * self[e3]),
            ]) + (Simd32x2::from(self[e5]).with_zw(self[e315], self[e315]) * geometric_product.group0().xyx().with_w(geometric_product[e42]))
                + (self.group0().yy().with_zw(self[e12345], geometric_product[e41]) * geometric_product.group1().xyz().with_w(self[e235]))
                + (self.group8().zx().with_zw(self[e5], self[e125]) * geometric_product.group0().yzz().with_w(geometric_product[e43]))
                - (geometric_product.group0().zxy() * self.group8().yzx()).with_w(geometric_product[e45] * self[e12345])
                - (geometric_product.group2().zxy() * self.group7().yzx()).with_w(geometric_product[e15] * self[e423])
                - (geometric_product.group1().zxy() * self.group6().yzx()).with_w(geometric_product[e25] * self[e431])
                - (geometric_product.group1().www() * self.group1().xyz()).with_w(geometric_product[e35] * self[e412]),
            // e423, e431, e412
            (Simd32x3::from(self[e12345]) * geometric_product.group0())
                + (Simd32x3::from(self[e4]) * geometric_product.group1().xyz())
                + (Simd32x3::from([self[e3], self[e1], self[e425]]) * geometric_product.group0().yzx())
                + (Simd32x3::from([self[e321], self[e321], self[e2]]) * geometric_product.group0().xyx())
                + (geometric_product.group0().yzz() * self.group6().zxw())
                + (self.group7().xxy() * geometric_product.group1().wzx())
                + (self.group7().zyz() * geometric_product.group1().yww())
                - (geometric_product.group0().zxy() * self.group1().yzx())
                - (geometric_product.group0().zxy() * self.group6().yzx())
                - (self.group7().yzx() * geometric_product.group1().zxy()),
            // e235, e315, e125
            (Simd32x3::from(self[e12345]) * geometric_product.group2())
                + (Simd32x3::from(self[e5]) * geometric_product.group1().xyz())
                + (Simd32x3::from([self[e2], self[e415], self[e1]]) * geometric_product.group2().zzy())
                + (Simd32x3::from([self[e435], self[e3], self[e425]]) * geometric_product.group2().yxx())
                + (self.group8().zxy() * geometric_product.group1().yzx())
                - (Simd32x3::from(geometric_product[e15]) * Simd32x3::from([self[e321], self[e435], self[e2]]))
                - (Simd32x3::from(geometric_product[e25]) * Simd32x3::from([self[e3], self[e321], self[e415]]))
                - (Simd32x3::from(geometric_product[e35]) * Simd32x3::from([self[e425], self[e1], self[e321]]))
                - (self.group8().xyx() * geometric_product.group1().wwy())
                - (self.group8().yzz() * geometric_product.group1().zxw()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (geometric_product[e41] * self[e3215])
                    + (geometric_product[e42] * self[e35])
                    + (geometric_product[e23] * self[e45])
                    + (geometric_product[e31] * self[e4125])
                    + (geometric_product[e45] * self[e23])
                    + (geometric_product[e35] * self[e42]),
                (geometric_product[e42] * self[e3215])
                    + (geometric_product[e43] * self[e15])
                    + (geometric_product[e31] * self[e45])
                    + (geometric_product[e12] * self[e4235])
                    + (geometric_product[e45] * self[e31])
                    + (geometric_product[e15] * self[e43]),
                (geometric_product[e41] * self[e25])
                    + (geometric_product[e43] * self[e3215])
                    + (geometric_product[e23] * self[e4315])
                    + (geometric_product[e12] * self[e45])
                    + (geometric_product[e45] * self[e12])
                    + (geometric_product[e25] * self[e41]),
                -(geometric_product[e23] * self[e15])
                    - (geometric_product[e31] * self[e25])
                    - (geometric_product[e12] * self[e35])
                    - (geometric_product[e45] * self[e3215])
                    - (geometric_product[e35] * self[e12])
                    - (geometric_product[e35] * self[e4125]),
            ]) - (self.group9().yzxy() * geometric_product.group1().zxy().with_w(geometric_product[e25]))
                - (Simd32x2::from(self[e1234]).with_zw(self[e42], self[e4235]) * geometric_product.group2().xyx().with_w(geometric_product[e15]))
                - (self.group4().zx().with_zw(self[e1234], self[e31]) * geometric_product.group2().yzz().with_w(geometric_product[e25]))
                - (geometric_product.group0().zxy() * self.group3().yzx()).with_w(geometric_product[e15] * self[e23]),
            // e1234
            (geometric_product[e41] * self[e4235]) + (geometric_product[e42] * self[e4315]) + (geometric_product[e43] * self[e4125]) + (geometric_product[e45] * self[e1234])
                - (geometric_product[e41] * self[e23])
                - (geometric_product[e42] * self[e31])
                - (geometric_product[e43] * self[e12])
                - (geometric_product[e23] * self[e41])
                - (geometric_product[e31] * self[e42])
                - (geometric_product[e12] * self[e43]),
        );
    }
}
impl GeometricQuotient<DipoleInversion> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       84      119        0
    //    simd2       11       11        0
    //    simd3       56       79        0
    //    simd4       46       34        0
    // Totals...
    // yes simd      197      243        0
    //  no simd      458      514        0
    fn geometric_quotient(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let reverse = DipoleInversion::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + 2.0 * (other[e1234] * other[e3215])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2),
        );
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (geometric_product[e45] * self[e45])
                    - (geometric_product[e4235] * self[e4235])
                    - (geometric_product[e4315] * self[e4315])
                    - (geometric_product[e4125] * self[e4125]),
                (geometric_product[e4315] * self[e2]) + (geometric_product[e4125] * self[e3]) + (geometric_product[e3215] * self[e4]) - (geometric_product[e45] * self[e321]),
            ]) + (Simd32x2::from(geometric_product[e1234]) * Simd32x2::from([self[e3215], self[e5]]))
                + (Simd32x2::from([self[e1234], self[e1]]) * geometric_product.group3().wx())
                - (Simd32x2::from(geometric_product[e41]) * Simd32x2::from([self[e15], self[e235]]))
                - (Simd32x2::from(geometric_product[e42]) * Simd32x2::from([self[e25], self[e315]]))
                - (Simd32x2::from(geometric_product[e43]) * Simd32x2::from([self[e35], self[e125]]))
                - (Simd32x2::from(geometric_product[e23]) * Simd32x2::from([self[e23], self[e415]]))
                - (Simd32x2::from(geometric_product[e31]) * Simd32x2::from([self[e31], self[e425]]))
                - (Simd32x2::from(geometric_product[e12]) * Simd32x2::from([self[e12], self[e435]]))
                - (Simd32x2::from(geometric_product[e15]) * Simd32x2::from([self[e41], self[e423]]))
                - (Simd32x2::from(geometric_product[e25]) * Simd32x2::from([self[e42], self[e431]]))
                - (Simd32x2::from(geometric_product[e35]) * Simd32x2::from([self[e43], self[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (geometric_product[e23] * self[e321]) + (geometric_product[e31] * self[e3]) + (geometric_product[e15] * self[e4]) + (geometric_product[e4125] * self[e425]),
                (geometric_product[e31] * self[e321]) + (geometric_product[e12] * self[e1]) + (geometric_product[e25] * self[e4]) + (geometric_product[e4235] * self[e435]),
                (geometric_product[e23] * self[e2]) + (geometric_product[e12] * self[e321]) + (geometric_product[e35] * self[e4]) + (geometric_product[e4315] * self[e415]),
                -(geometric_product[e31] * self[e431]) - (geometric_product[e12] * self[e412]) - (geometric_product[e4315] * self[e431]) - (geometric_product[e4125] * self[e412]),
            ]) + (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], self[e321]]) * self.group7().zyz().with_w(geometric_product[e1234]))
                + (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], self[e4]]) * self.group7().xxy().with_w(geometric_product[e45]))
                + (geometric_product.group0().zxy() * self.group8().yzx()).with_w(geometric_product[e1234] * self[e12345])
                - (Simd32x2::from(self[e5]).with_zw(self[e315], self[e415]) * geometric_product.group0().xyx().with_w(geometric_product[e41]))
                - (self.group0().yy().with_zw(self[e12345], geometric_product[e41]) * geometric_product.group3().xyz().with_w(self[e1]))
                - (self.group8().zx().with_zw(self[e5], self[e2]) * geometric_product.group0().yzz().with_w(geometric_product[e42]))
                - (self.group8() * geometric_product.group2().www()).with_w(geometric_product[e43] * self[e3])
                - (self.group7().yzx() * geometric_product.group2().zxy()).with_w(geometric_product[e42] * self[e425])
                - (geometric_product.group1().zxy() * self.group1().yzx()).with_w(geometric_product[e43] * self[e435])
                - (geometric_product.group1().www() * self.group6().xyz()).with_w(geometric_product[e23] * self[e423])
                - (geometric_product.group3().yzx() * self.group6().zxy()).with_w(geometric_product[e4235] * self[e423]),
            // e5
            (geometric_product[e15] * self[e1])
                + (geometric_product[e25] * self[e2])
                + (geometric_product[e35] * self[e3])
                + (geometric_product[e4235] * self[e235])
                + (geometric_product[e4315] * self[e315])
                + (geometric_product[e4125] * self[e125])
                + (geometric_product[e3215] * self[e12345])
                - (geometric_product[e23] * self[e235])
                - (geometric_product[e31] * self[e315])
                - (geometric_product[e12] * self[e125])
                - (geometric_product[e45] * self[e5])
                - (geometric_product[e15] * self[e415])
                - (geometric_product[e25] * self[e425])
                - (geometric_product[e35] * self[e435])
                - (geometric_product[e3215] * self[e321]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (geometric_product[e15] * self[e45]) + (geometric_product[e25] * self[e4125]) + (geometric_product[e4125] * self[e25]) + (geometric_product[e3215] * self[e4235]),
                (geometric_product[e25] * self[e45]) + (geometric_product[e35] * self[e4235]) + (geometric_product[e4235] * self[e35]) + (geometric_product[e3215] * self[e4315]),
                (geometric_product[e15] * self[e4315]) + (geometric_product[e35] * self[e45]) + (geometric_product[e4315] * self[e15]) + (geometric_product[e3215] * self[e4125]),
                -(geometric_product[e23] * self[e4235])
                    - (geometric_product[e31] * self[e4315])
                    - (geometric_product[e12] * self[e4125])
                    - (geometric_product[e3215] * self[e1234]),
            ]) + (Simd32x4::from(self[scalar]) * geometric_product.group2().xyz().with_w(geometric_product[e45]))
                + (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], geometric_product[e25]]) * self.group5().zyz().with_w(self[e42]))
                + (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e15]]) * self.group5().xxy().with_w(self[e41]))
                + (self.group3().zx().with_zw(self[e3215], self[e3215]) * geometric_product.group1().yzz().with_w(geometric_product[e1234]))
                + (self.group9().ww().with_zw(self[e25], geometric_product[e35]) * geometric_product.group1().xyx().with_w(self[e43]))
                - (self.group3().xyzz() * geometric_product.group1().www().with_w(geometric_product[e43]))
                - (self.group3().yzxy() * geometric_product.group1().zxy().with_w(geometric_product[e42]))
                - (self.group3().zx().with_zw(self[e3215], geometric_product[e4125]) * geometric_product.group3().yzz().with_w(self[e12]))
                - (self.group9().ww().with_zw(self[e25], geometric_product[e4315]) * geometric_product.group3().xyx().with_w(self[e31]))
                - (self.group5().yzx() * geometric_product.group2().zxy()).with_w(geometric_product[e41] * self[e15])
                - (geometric_product.group2().zxy() * self.group9().yzx()).with_w(geometric_product[e4235] * self[e23]),
            // e41, e42, e43
            (Simd32x3::from(geometric_product[e1234]) * self.group5())
                + (Simd32x3::from(self[scalar]) * geometric_product.group0())
                + (Simd32x3::from(self[e1234]) * geometric_product.group1().xyz())
                + (Simd32x3::from(self[e1234]) * geometric_product.group3().xyz())
                + (Simd32x3::from([geometric_product[e31], geometric_product[e4125], geometric_product[e4235]]) * self.group4().zxy())
                + (Simd32x3::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45]]) * self.group4().zyz())
                + (Simd32x3::from([self[e12], self[e4125], self[e31]]) * geometric_product.group0().yxx())
                + (Simd32x3::from([self[e4315], self[e23], self[e4235]]) * geometric_product.group0().zzy())
                + (self.group4().xxy() * geometric_product.group1().wzx())
                - (Simd32x3::from(geometric_product[e41]) * Simd32x3::from([self[e45], self[e12], self[e4315]]))
                - (Simd32x3::from(geometric_product[e42]) * Simd32x3::from([self[e4125], self[e45], self[e23]]))
                - (Simd32x3::from(geometric_product[e43]) * Simd32x3::from([self[e31], self[e4235], self[e45]]))
                - (Simd32x3::from(geometric_product[e1234]) * self.group9().xyz())
                - (self.group4().yzx() * geometric_product.group1().zxy())
                - (self.group4().yzx() * geometric_product.group3().zxy()),
            // e23, e31, e12
            (Simd32x3::from(geometric_product[e45]) * self.group9().xyz())
                + (Simd32x3::from(geometric_product[e1234]) * self.group3().xyz())
                + (Simd32x3::from(self[scalar]) * geometric_product.group1().xyz())
                + (Simd32x3::from(self[e1234]) * geometric_product.group2().xyz())
                + (Simd32x3::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215]]) * self.group4().zyz())
                + (Simd32x3::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15]]) * self.group4().xxy())
                + (Simd32x3::from([self[e35], self[e15], self[e3215]]) * geometric_product.group0().yzz())
                + (Simd32x3::from([self[e45], self[e45], self[e4315]]) * geometric_product.group3().xyx())
                + (Simd32x3::from([self[e4125], self[e4235], self[e45]]) * geometric_product.group3().yzz())
                + (Simd32x3::from([self[e3215], self[e3215], self[e25]]) * geometric_product.group0().xyx())
                + (self.group5().zxy() * geometric_product.group1().yzx())
                - (geometric_product.group0().zxy() * self.group3().yzx())
                - (self.group4().yzx() * geometric_product.group2().zxy())
                - (self.group5().yzx() * geometric_product.group1().zxy())
                - (geometric_product.group3().zxy() * self.group9().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (geometric_product[e15] * self[e4]) + (geometric_product[e4125] * self[e2]),
                (geometric_product[e25] * self[e4]) + (geometric_product[e4235] * self[e3]),
                (geometric_product[e35] * self[e4]) + (geometric_product[e4315] * self[e1]),
                -(geometric_product[e12] * self[e3]) - (geometric_product[e1234] * self[e5]),
            ]) + (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], self[e425]]) * self.group7().zyz().with_w(geometric_product[e4315]))
                + (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], self[e415]]) * self.group7().xxy().with_w(geometric_product[e4235]))
                + (Simd32x2::from(self[e5]).with_zw(self[e315], self[e315]) * geometric_product.group0().xyx().with_w(geometric_product[e42]))
                + (self.group0().yy().with_zw(self[e12345], geometric_product[e41]) * geometric_product.group1().xyz().with_w(self[e235]))
                + (self.group8().zx().with_zw(self[e5], self[e125]) * geometric_product.group0().yzz().with_w(geometric_product[e43]))
                + (self.group8() * geometric_product.group2().www()).with_w(geometric_product[e4125] * self[e435])
                + (geometric_product.group1().yzx() * self.group6().zxy()).with_w(geometric_product[e3215] * self[e4])
                - (geometric_product.group2().zxyx() * self.group7().yzx().with_w(self[e423]))
                - (self.group1().zx().with_zw(self[e321], self[e2]) * geometric_product.group3().yzz().with_w(geometric_product[e31]))
                - (self.group6().ww().with_zw(self[e2], self[e1]) * geometric_product.group3().xyx().with_w(geometric_product[e23]))
                - (geometric_product.group0().zxy() * self.group8().yzx()).with_w(geometric_product[e45] * self[e12345])
                - (geometric_product.group1().zxy() * self.group6().yzx()).with_w(geometric_product[e25] * self[e431])
                - (geometric_product.group1().www() * self.group1().xyz()).with_w(geometric_product[e35] * self[e412]),
            // e423, e431, e412
            (Simd32x3::from(geometric_product[e1234]) * self.group1().xyz())
                + (Simd32x3::from(geometric_product[e1234]) * self.group6().xyz())
                + (Simd32x3::from(self[e12345]) * geometric_product.group0())
                + (Simd32x3::from(self[e4]) * geometric_product.group1().xyz())
                + (Simd32x3::from(self[e4]) * geometric_product.group3().xyz())
                + (Simd32x3::from([geometric_product[e31], geometric_product[e4125], geometric_product[e4235]]) * self.group7().zxy())
                + (Simd32x3::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45]]) * self.group7().zyz())
                + (Simd32x3::from([self[e3], self[e1], self[e425]]) * geometric_product.group0().yzx())
                + (Simd32x3::from([self[e321], self[e321], self[e2]]) * geometric_product.group0().xyx())
                + (geometric_product.group0().yzz() * self.group6().zxw())
                + (self.group7().xxy() * geometric_product.group1().wzx())
                - (geometric_product.group0().zxy() * self.group1().yzx())
                - (geometric_product.group0().zxy() * self.group6().yzx())
                - (self.group7().yzx() * geometric_product.group1().zxy())
                - (self.group7().yzx() * geometric_product.group3().zxy()),
            // e235, e315, e125
            (Simd32x3::from(geometric_product[e3215]) * self.group6().xyz())
                + (Simd32x3::from(self[e12345]) * geometric_product.group2().xyz())
                + (Simd32x3::from(self[e5]) * geometric_product.group1().xyz())
                + (Simd32x3::from([geometric_product[e31], geometric_product[e4235], geometric_product[e23]]) * self.group8().zzy())
                + (Simd32x3::from([geometric_product[e4125], geometric_product[e12], geometric_product[e4315]]) * self.group8().yxx())
                + (Simd32x3::from([self[e2], self[e415], self[e1]]) * geometric_product.group2().zzy())
                + (Simd32x3::from([self[e435], self[e3], self[e425]]) * geometric_product.group2().yxx())
                - (Simd32x3::from(geometric_product[e15]) * Simd32x3::from([self[e321], self[e435], self[e2]]))
                - (Simd32x3::from(geometric_product[e25]) * Simd32x3::from([self[e3], self[e321], self[e415]]))
                - (Simd32x3::from(geometric_product[e35]) * Simd32x3::from([self[e425], self[e1], self[e321]]))
                - (Simd32x3::from(geometric_product[e3215]) * self.group1().xyz())
                - (Simd32x3::from(self[e5]) * geometric_product.group3().xyz())
                - (Simd32x3::from(self[e235]) * Simd32x3::from([geometric_product[e45], geometric_product[e4125], geometric_product[e31]]))
                - (Simd32x3::from(self[e315]) * Simd32x3::from([geometric_product[e12], geometric_product[e45], geometric_product[e4235]]))
                - (Simd32x3::from(self[e125]) * Simd32x3::from([geometric_product[e4315], geometric_product[e23], geometric_product[e45]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (geometric_product[e23] * self[e45]) + (geometric_product[e31] * self[e4125]) + (geometric_product[e1234] * self[e15]) + (geometric_product[e4315] * self[e12]),
                (geometric_product[e31] * self[e45]) + (geometric_product[e12] * self[e4235]) + (geometric_product[e45] * self[e31]) + (geometric_product[e1234] * self[e25]),
                (geometric_product[e23] * self[e4315]) + (geometric_product[e12] * self[e45]) + (geometric_product[e45] * self[e12]) + (geometric_product[e1234] * self[e35]),
                -(geometric_product[e45] * self[e3215]) - (geometric_product[e15] * self[e4235]) - (geometric_product[e25] * self[e4315]) - (geometric_product[e35] * self[e4125]),
            ]) + (Simd32x4::from(self[scalar]) * geometric_product.group3())
                + (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], self[e45]]) * self.group5().xxy().with_w(geometric_product[e3215]))
                + (self.group3().zx().with_zw(self[e3215], self[e25]) * geometric_product.group0().yzz().with_w(geometric_product[e4315]))
                + (self.group9().ww().with_zw(self[e25], self[e15]) * geometric_product.group0().xyx().with_w(geometric_product[e4235]))
                + (self.group4().yzx() * geometric_product.group2().zxy()).with_w(geometric_product[e4125] * self[e35])
                - (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], geometric_product[e35]]) * self.group4().zyz().with_w(self[e12]))
                - (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e25]]) * self.group4().xxy().with_w(self[e31]))
                - (geometric_product.group1().zxyy() * self.group9().yzx().with_w(self[e25]))
                - (Simd32x3::from(self[e1234]) * geometric_product.group2().xyz()).with_w(geometric_product[e12] * self[e35])
                - (geometric_product.group0().zxy() * self.group3().yzx()).with_w(geometric_product[e15] * self[e23])
                - (self.group5().yzx() * geometric_product.group3().zxy()).with_w(geometric_product[e23] * self[e15]),
            // e1234
            (geometric_product[e41] * self[e4235])
                + (geometric_product[e42] * self[e4315])
                + (geometric_product[e43] * self[e4125])
                + (geometric_product[e45] * self[e1234])
                + (geometric_product[e1234] * self[scalar])
                - (geometric_product[e41] * self[e23])
                - (geometric_product[e42] * self[e31])
                - (geometric_product[e43] * self[e12])
                - (geometric_product[e23] * self[e41])
                - (geometric_product[e31] * self[e42])
                - (geometric_product[e12] * self[e43])
                - (geometric_product[e1234] * self[e45])
                - (geometric_product[e4235] * self[e41])
                - (geometric_product[e4315] * self[e42])
                - (geometric_product[e4125] * self[e43]),
        );
    }
}
impl GeometricQuotient<DualNum> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       28        0
    //    simd2        0        1        0
    //    simd3        4       10        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       15       42        0
    //  no simd       32       72        0
    fn geometric_quotient(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DualNum::from_groups(/* e5, e12345 */ Simd32x2::from(f32::powi(other[e12345], -2) * -1.0) * other.group0());
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                -(geometric_product[e5] * self[e4]) - (geometric_product[e12345] * self[e12345]),
                (geometric_product[e5] * self[e1234]) + (geometric_product[e12345] * self[scalar]),
            ]),
            // e1, e2, e3, e4
            ((Simd32x3::from(geometric_product[e5]) * self.group4()) - (Simd32x3::from(geometric_product[e12345]) * self.group9().xyz()))
                .with_w(geometric_product[e12345] * self[e1234]),
            // e5
            (geometric_product[e5] * self[scalar]) + (geometric_product[e5] * self[e45]) + (geometric_product[e12345] * self[e3215]),
            // e15, e25, e35, e45
            Simd32x4::from([
                -(geometric_product[e5] * self[e415]) - (geometric_product[e12345] * self[e235]),
                -(geometric_product[e5] * self[e425]) - (geometric_product[e12345] * self[e315]),
                -(geometric_product[e5] * self[e435]) - (geometric_product[e12345] * self[e125]),
                geometric_product[e12345] * self[e321],
            ]) + (Simd32x4::from(geometric_product[e5]) * self.group1()),
            // e41, e42, e43
            Simd32x3::from(geometric_product[e12345]) * self.group7() * Simd32x3::from(-1.0),
            // e23, e31, e12
            -(Simd32x3::from(geometric_product[e5]) * self.group7()) - (Simd32x3::from(geometric_product[e12345]) * self.group6().xyz()),
            // e415, e425, e435, e321
            Simd32x4::from([
                geometric_product[e12345] * self[e23],
                geometric_product[e12345] * self[e31],
                geometric_product[e12345] * self[e12],
                geometric_product[e12345] * self[e45] * -1.0,
            ]) + (Simd32x4::from(geometric_product[e5]) * self.group4().with_w(self[e1234])),
            // e423, e431, e412
            Simd32x3::from(geometric_product[e12345]) * self.group4(),
            // e235, e315, e125
            (Simd32x3::from(geometric_product[e5]) * self.group5())
                + (Simd32x3::from(geometric_product[e5]) * self.group9().xyz())
                + (Simd32x3::from(geometric_product[e12345]) * self.group3().xyz()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                geometric_product[e12345] * self[e1],
                geometric_product[e12345] * self[e2],
                geometric_product[e12345] * self[e3],
                -(geometric_product[e5] * self[e12345]) - (geometric_product[e12345] * self[e5]),
            ]) + (Simd32x4::from(geometric_product[e5]) * self.group7().with_w(self[e321])),
            // e1234
            geometric_product[e12345] * self[e4] * -1.0,
        );
    }
}
impl GeometricQuotient<FlatPoint> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       23       47        0
    //    simd2        3        3        0
    //    simd3       12       19        0
    //    simd4        8        7        0
    // Totals...
    // yes simd       46       76        0
    //  no simd       97      138        0
    fn geometric_quotient(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = FlatPoint::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(f32::powi(other[e45], -2) * -1.0) * Simd32x4::from([other[e15] * -1.0, other[e25] * -1.0, other[e35] * -1.0, other[e45] * -1.0]),
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([geometric_product[e45] * self[e45], geometric_product[e45] * self[e321] * -1.0])
                - (Simd32x2::from(geometric_product[e15]) * Simd32x2::from([self[e41], self[e423]]))
                - (Simd32x2::from(geometric_product[e25]) * Simd32x2::from([self[e42], self[e431]]))
                - (Simd32x2::from(geometric_product[e35]) * Simd32x2::from([self[e43], self[e412]])),
            // e1, e2, e3, e4
            ((Simd32x3::from(self[e4]) * geometric_product.group0().xyz()) + (self.group7().zxy() * geometric_product.group0().yzx())
                - (Simd32x3::from(geometric_product[e45]) * self.group6().xyz())
                - (self.group7().yzx() * geometric_product.group0().zxy()))
            .with_w(geometric_product[e45] * self[e4]),
            // e5
            (geometric_product[e15] * self[e1]) + (geometric_product[e25] * self[e2]) + (geometric_product[e35] * self[e3])
                - (geometric_product[e15] * self[e415])
                - (geometric_product[e25] * self[e425])
                - (geometric_product[e35] * self[e435])
                - (geometric_product[e45] * self[e5]),
            // e15, e25, e35, e45
            Simd32x4::from([
                -(geometric_product[e35] * self[e31]) - (geometric_product[e35] * self[e4315]) - (geometric_product[e45] * self[e15]),
                -(geometric_product[e15] * self[e12]) - (geometric_product[e15] * self[e4125]) - (geometric_product[e45] * self[e25]),
                -(geometric_product[e25] * self[e23]) - (geometric_product[e25] * self[e4235]) - (geometric_product[e45] * self[e35]),
                0.0,
            ]) + (Simd32x4::from(self[scalar]) * geometric_product.group0())
                + (geometric_product.group0().yzxx() * self.group5().zxy().with_w(self[e41]))
                + (self.group3().ww().with_zw(self[e4315], geometric_product[e25]) * geometric_product.group0().xyx().with_w(self[e42]))
                + (self.group9().zx().with_zw(self[e45], geometric_product[e35]) * geometric_product.group0().yzz().with_w(self[e43])),
            // e41, e42, e43
            Simd32x3::from(geometric_product[e45]) * self.group4(),
            // e23, e31, e12
            (Simd32x3::from(geometric_product[e45]) * self.group9().xyz())
                + (Simd32x3::from(self[e1234]) * geometric_product.group0().xyz())
                + (self.group4().zxy() * geometric_product.group0().yzx())
                - (self.group4().yzx() * geometric_product.group0().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (geometric_product[e15] * self[e4]) + (geometric_product[e25] * self[e412]),
                (geometric_product[e25] * self[e4]) + (geometric_product[e35] * self[e423]),
                (geometric_product[e15] * self[e431]) + (geometric_product[e35] * self[e4]),
                -(geometric_product[e25] * self[e431]) - (geometric_product[e35] * self[e412]),
            ]) - (geometric_product.group0().zxyw() * self.group7().yzx().with_w(self[e12345]))
                - (geometric_product.group0().www() * self.group1().xyz()).with_w(geometric_product[e15] * self[e423]),
            // e423, e431, e412
            Simd32x3::from(geometric_product[e45]) * self.group7(),
            // e235, e315, e125
            (Simd32x3::from(self[e12345]) * geometric_product.group0().xyz())
                + (Simd32x3::from([self[e2], self[e415], self[e1]]) * geometric_product.group0().zzy())
                + (Simd32x3::from([self[e435], self[e3], self[e425]]) * geometric_product.group0().yxx())
                - (Simd32x3::from(geometric_product[e15]) * Simd32x3::from([self[e321], self[e435], self[e2]]))
                - (Simd32x3::from(geometric_product[e25]) * Simd32x3::from([self[e3], self[e321], self[e415]]))
                - (Simd32x3::from(geometric_product[e35]) * Simd32x3::from([self[e425], self[e1], self[e321]]))
                - (Simd32x3::from(geometric_product[e45]) * self.group8()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (geometric_product[e35] * self[e42]) + (geometric_product[e45] * self[e23]),
                (geometric_product[e15] * self[e43]) + (geometric_product[e45] * self[e31]),
                (geometric_product[e25] * self[e41]) + (geometric_product[e45] * self[e12]),
                -(geometric_product[e15] * self[e4235])
                    - (geometric_product[e25] * self[e4315])
                    - (geometric_product[e35] * self[e12])
                    - (geometric_product[e35] * self[e4125])
                    - (geometric_product[e45] * self[e3215]),
            ]) - (geometric_product.group0().yzxx() * self.group4().zxy().with_w(self[e23]))
                - (Simd32x3::from(self[e1234]) * geometric_product.group0().xyz()).with_w(geometric_product[e25] * self[e31]),
            // e1234
            geometric_product[e45] * self[e1234],
        );
    }
}
impl GeometricQuotient<Flector> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44       61        0
    //    simd2        4        4        0
    //    simd3       24       37        0
    //    simd4       27       22        0
    // Totals...
    // yes simd       99      124        0
    //  no simd      232      268        0
    fn geometric_quotient(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let reverse = Flector::from_groups(
            // e15, e25, e35, e45
            other.group0() * Simd32x4::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group1(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            -f32::powi(other[e45], 2) - f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2),
        );
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (geometric_product[e45] * self[e45])
                    - (geometric_product[e4235] * self[e4235])
                    - (geometric_product[e4315] * self[e4315])
                    - (geometric_product[e4125] * self[e4125]),
                (geometric_product[e4315] * self[e2]) + (geometric_product[e4125] * self[e3]) + (geometric_product[e3215] * self[e4]) - (geometric_product[e45] * self[e321]),
            ]) + (Simd32x2::from([self[e1234], self[e1]]) * geometric_product.group1().wx())
                - (Simd32x2::from(geometric_product[e15]) * Simd32x2::from([self[e41], self[e423]]))
                - (Simd32x2::from(geometric_product[e25]) * Simd32x2::from([self[e42], self[e431]]))
                - (Simd32x2::from(geometric_product[e35]) * Simd32x2::from([self[e43], self[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (geometric_product[e15] * self[e4]) + (geometric_product[e25] * self[e412]) + (geometric_product[e4125] * self[e425]) - (geometric_product[e4315] * self[e435]),
                (geometric_product[e25] * self[e4]) + (geometric_product[e4235] * self[e435]) + (geometric_product[e3215] * self[e431]) - (geometric_product[e4125] * self[e415]),
                (geometric_product[e35] * self[e4]) + (geometric_product[e4315] * self[e415]) + (geometric_product[e3215] * self[e412]) - (geometric_product[e4235] * self[e425]),
                0.0,
            ]) + (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], self[e4]]) * self.group7().xxy().with_w(geometric_product[e45]))
                - (geometric_product.group1().xyzx() * self.group0().yy().with_zw(self[e12345], self[e423]))
                - (self.group7().yzx() * geometric_product.group0().zxy()).with_w(geometric_product[e4315] * self[e431])
                - (geometric_product.group0().www() * self.group6().xyz()).with_w(geometric_product[e4125] * self[e412]),
            // e5
            (geometric_product[e15] * self[e1])
                + (geometric_product[e25] * self[e2])
                + (geometric_product[e35] * self[e3])
                + (geometric_product[e4235] * self[e235])
                + (geometric_product[e4315] * self[e315])
                + (geometric_product[e4125] * self[e125])
                + (geometric_product[e3215] * self[e12345])
                - (geometric_product[e15] * self[e415])
                - (geometric_product[e25] * self[e425])
                - (geometric_product[e35] * self[e435])
                - (geometric_product[e45] * self[e5])
                - (geometric_product[e3215] * self[e321]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (geometric_product[e25] * self[e4125]) + (geometric_product[e4125] * self[e25]) + (geometric_product[e3215] * self[e4235]) - (geometric_product[e4315] * self[e35]),
                (geometric_product[e35] * self[e4235]) + (geometric_product[e4235] * self[e35]) + (geometric_product[e3215] * self[e4315]) - (geometric_product[e4125] * self[e15]),
                (geometric_product[e35] * self[e45]) + (geometric_product[e4315] * self[e15]) + (geometric_product[e3215] * self[e4125]) - (geometric_product[e4125] * self[e3215]),
                0.0,
            ]) + (Simd32x4::from(self[scalar]) * geometric_product.group0())
                + (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], geometric_product[e25]]) * self.group5().zyz().with_w(self[e42]))
                + (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e15]]) * self.group5().xxy().with_w(self[e41]))
                + (self.group3().ww().with_zw(self[e4315], geometric_product[e35]) * geometric_product.group0().xyx().with_w(self[e43]))
                - (geometric_product.group1().xyxw() * self.group9().ww().with_zw(self[e25], self[e1234]))
                - (self.group5().yzx() * geometric_product.group0().zxy()).with_w(geometric_product[e4235] * self[e23])
                - (geometric_product.group0().zxy() * self.group9().yzx()).with_w(geometric_product[e4315] * self[e31])
                - (geometric_product.group0().www() * self.group3().xyz()).with_w(geometric_product[e4125] * self[e12]),
            // e41, e42, e43
            (Simd32x3::from(self[e1234]) * geometric_product.group1().xyz())
                + (Simd32x3::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235]]) * self.group4().xxy())
                + (Simd32x3::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45]]) * self.group4().zyz())
                - (self.group4().yzx() * geometric_product.group1().zxy()),
            // e23, e31, e12
            (Simd32x3::from(geometric_product[e45]) * self.group9().xyz())
                + (Simd32x3::from(self[e1234]) * geometric_product.group0().xyz())
                + (Simd32x3::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215]]) * self.group4().zyz())
                + (Simd32x3::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15]]) * self.group4().xxy())
                + (Simd32x3::from([self[e45], self[e45], self[e4315]]) * geometric_product.group1().xyx())
                + (Simd32x3::from([self[e4125], self[e4235], self[e45]]) * geometric_product.group1().yzz())
                - (self.group4().yzx() * geometric_product.group0().zxy())
                - (geometric_product.group1().zxy() * self.group9().yzx()),
            // e415, e425, e435, e321
            (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], self[e425]]) * self.group7().zyz().with_w(geometric_product[e4315]))
                + (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], self[e415]]) * self.group7().xxy().with_w(geometric_product[e4235]))
                + (geometric_product.group1().zxyw() * self.group1().yzxw())
                + (self.group1().www() * geometric_product.group0().xyz()).with_w(geometric_product[e4125] * self[e435])
                - (geometric_product.group0().zxyw() * self.group7().yzx().with_w(self[e12345]))
                - (self.group1().zx().with_zw(self[e321], geometric_product[e35]) * geometric_product.group1().yzz().with_w(self[e412]))
                - (self.group6().ww().with_zw(self[e2], geometric_product[e25]) * geometric_product.group1().xyx().with_w(self[e431]))
                - (geometric_product.group0().www() * self.group1().xyz()).with_w(geometric_product[e15] * self[e423]),
            // e423, e431, e412
            (Simd32x3::from(self[e4]) * geometric_product.group1().xyz())
                + (Simd32x3::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235]]) * self.group7().xxy())
                + (Simd32x3::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45]]) * self.group7().zyz())
                - (self.group7().yzx() * geometric_product.group1().zxy()),
            // e235, e315, e125
            (Simd32x3::from(geometric_product[e3215]) * self.group6().xyz())
                + (Simd32x3::from(self[e12345]) * geometric_product.group0().xyz())
                + (Simd32x3::from([self[e2], self[e415], self[e1]]) * geometric_product.group0().zzy())
                + (Simd32x3::from([self[e435], self[e3], self[e425]]) * geometric_product.group0().yxx())
                + (self.group8().yzx() * geometric_product.group1().zxy())
                - (Simd32x3::from(geometric_product[e15]) * Simd32x3::from([self[e321], self[e435], self[e2]]))
                - (Simd32x3::from(geometric_product[e25]) * Simd32x3::from([self[e3], self[e321], self[e415]]))
                - (Simd32x3::from(geometric_product[e35]) * Simd32x3::from([self[e425], self[e1], self[e321]]))
                - (Simd32x3::from(geometric_product[e3215]) * self.group1().xyz())
                - (Simd32x3::from(self[e5]) * geometric_product.group1().xyz())
                - (Simd32x3::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235]]) * self.group8().xxy())
                - (Simd32x3::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45]]) * self.group8().zyz()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[scalar]) * geometric_product.group1())
                + (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], self[e25]]) * self.group5().xxy().with_w(geometric_product[e4315]))
                + (Simd32x4::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45], self[e35]]) * self.group5().zyz().with_w(geometric_product[e4125]))
                + Simd32x3::from(0.0).with_w(
                    (geometric_product[e3215] * self[e45])
                        - (geometric_product[e25] * self[e4315])
                        - (geometric_product[e35] * self[e4125])
                        - (geometric_product[e45] * self[e3215]),
                )
                + (self.group4().yzx() * geometric_product.group0().zxy()).with_w(geometric_product[e4235] * self[e15])
                - (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], geometric_product[e25]]) * self.group4().zyz().with_w(self[e31]))
                - (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e15]]) * self.group4().xxy().with_w(self[e23]))
                - (geometric_product.group0().xyzx() * Simd32x3::from(self[e1234]).with_w(self[e4235]))
                - (self.group5().yzx() * geometric_product.group1().zxy()).with_w(geometric_product[e35] * self[e12]),
            // e1234
            (geometric_product[e45] * self[e1234]) - (geometric_product[e4235] * self[e41]) - (geometric_product[e4315] * self[e42]) - (geometric_product[e4125] * self[e43]),
        );
    }
}
impl GeometricQuotient<Line> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       39       60        0
    //    simd3       17       30        0
    //    simd4       19       14        0
    // Totals...
    // yes simd       75      104        0
    //  no simd      166      206        0
    fn geometric_quotient(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let reverse = Line::from_groups(
            // e415, e425, e435
            other.group0() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group1() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(/* scalar */ -f32::powi(other[e415], 2) - f32::powi(other[e425], 2) - f32::powi(other[e435], 2));
        let geometric_product = Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group1(),
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (geometric_product[e415] * self[e415])
                    + (geometric_product[e425] * self[e425])
                    + (geometric_product[e435] * self[e435])
                    + (geometric_product[e235] * self[e423])
                    + (geometric_product[e315] * self[e431])
                    + (geometric_product[e125] * self[e412]),
                -(geometric_product[e415] * self[e23])
                    - (geometric_product[e425] * self[e31])
                    - (geometric_product[e435] * self[e12])
                    - (geometric_product[e235] * self[e41])
                    - (geometric_product[e315] * self[e42])
                    - (geometric_product[e125] * self[e43]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (geometric_product[e435] * self[e4315]) + (geometric_product[e235] * self[e1234]) + (geometric_product[e315] * self[e43]),
                (geometric_product[e415] * self[e4125]) + (geometric_product[e315] * self[e1234]) + (geometric_product[e125] * self[e41]),
                (geometric_product[e425] * self[e4235]) + (geometric_product[e235] * self[e42]) + (geometric_product[e125] * self[e1234]),
                0.0,
            ]) - (self.group3().ww().with_zw(self[e4315], self[e41]) * geometric_product.group0().xyx().with_w(geometric_product[e415]))
                - (self.group9().zx().with_zw(self[e45], self[e42]) * geometric_product.group0().yzz().with_w(geometric_product[e425]))
                - (geometric_product.group1().zxy() * self.group4().yzx()).with_w(geometric_product[e435] * self[e43]),
            // e5
            -(geometric_product[e415] * self[e15])
                - (geometric_product[e425] * self[e25])
                - (geometric_product[e435] * self[e35])
                - (geometric_product[e235] * self[e23])
                - (geometric_product[e235] * self[e4235])
                - (geometric_product[e315] * self[e31])
                - (geometric_product[e315] * self[e4315])
                - (geometric_product[e125] * self[e12])
                - (geometric_product[e125] * self[e4125]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (geometric_product[e435] * self[e315]) + (geometric_product[e235] * self[e321]) + (geometric_product[e315] * self[e3]) + (geometric_product[e125] * self[e425]),
                (geometric_product[e415] * self[e125]) + (geometric_product[e235] * self[e435]) + (geometric_product[e315] * self[e321]) + (geometric_product[e125] * self[e1]),
                (geometric_product[e425] * self[e235]) + (geometric_product[e235] * self[e2]) + (geometric_product[e315] * self[e415]) + (geometric_product[e125] * self[e321]),
                geometric_product[e125] * self[e412] * -1.0,
            ]) - (Simd32x4::from([self[e2], self[e415], self[e1], self[e431]]) * geometric_product.group1().zzy().with_w(geometric_product[e315]))
                - (Simd32x4::from([self[e435], self[e3], self[e425], self[e423]]) * geometric_product.group1().yxx().with_w(geometric_product[e235]))
                - (Simd32x2::from(self[e5]).with_zw(self[e315], self[e2]) * geometric_product.group0().xyx().with_w(geometric_product[e425]))
                - (self.group0().yy().with_zw(self[e12345], geometric_product[e415]) * geometric_product.group1().with_w(self[e1]))
                - (self.group8().zx().with_zw(self[e5], self[e3]) * geometric_product.group0().yzz().with_w(geometric_product[e435])),
            // e41, e42, e43
            (geometric_product.group0().zxy() * self.group7().yzx())
                - (geometric_product.group0().xyx() * Simd32x2::from(self[e4]).with_z(self[e431]))
                - (geometric_product.group0().yzz() * self.group7().zx().with_z(self[e4])),
            // e23, e31, e12
            (geometric_product.group0().zxy() * self.group6().yzx()) + (geometric_product.group1().zxy() * self.group7().yzx())
                - (Simd32x3::from(self[e12345]) * geometric_product.group0())
                - (geometric_product.group0().yzx() * self.group6().zxy())
                - (geometric_product.group1().xyx() * Simd32x2::from(self[e4]).with_z(self[e431]))
                - (geometric_product.group1().yzz() * self.group7().zx().with_z(self[e4])),
            // e415, e425, e435, e321
            Simd32x4::from([
                geometric_product[e315] * self[e43],
                geometric_product[e125] * self[e41],
                geometric_product[e125] * self[e1234],
                geometric_product[e125] * self[e43] * -1.0,
            ]) + (Simd32x2::from(self[e1234]).with_zw(self[e42], self[e4125]) * geometric_product.group1().xyx().with_w(geometric_product[e435]))
                + (self.group0().xx().with_zw(self[scalar], geometric_product[e415]) * geometric_product.group0().with_w(self[e4235]))
                + (geometric_product.group0().yzx() * self.group5().zxy()).with_w(geometric_product[e425] * self[e4315])
                - (geometric_product.group0().zxy() * self.group5().yzx()).with_w(geometric_product[e235] * self[e41])
                - (geometric_product.group1().zxy() * self.group4().yzx()).with_w(geometric_product[e315] * self[e42]),
            // e423, e431, e412
            (geometric_product.group0().xyx() * Simd32x2::from(self[e1234]).with_z(self[e42])) + (geometric_product.group0().yzz() * self.group4().zx().with_z(self[e1234]))
                - (geometric_product.group0().zxy() * self.group4().yzx()),
            // e235, e315, e125
            (Simd32x3::from(self[scalar]) * geometric_product.group1())
                + (Simd32x3::from([self[e35], self[e15], self[e3215]]) * geometric_product.group0().yzz())
                + (Simd32x3::from([self[e4125], self[e4235], self[e45]]) * geometric_product.group1().yzz())
                + (Simd32x3::from([self[e3215], self[e3215], self[e25]]) * geometric_product.group0().xyx())
                + (geometric_product.group1().xyx() * Simd32x2::from(self[e45]).with_z(self[e31]))
                + (geometric_product.group1().yzx() * self.group5().zx().with_z(self[e4315]))
                - (geometric_product.group0().zxy() * self.group3().yzx())
                - (geometric_product.group1().zxy() * self.group5().yzx())
                - (geometric_product.group1().zxy() * self.group9().yzx()),
            // e4235, e4315, e4125, e3215
            (self.group7().zx().with_zw(self[e4], self[e415]) * geometric_product.group1().yzz().with_w(geometric_product[e235]))
                + (self.group1().zx().with_zw(self[e321], self[e315]) * geometric_product.group0().yzz().with_w(geometric_product[e425]))
                + (self.group1().ww().with_zw(self[e431], self[e125]) * geometric_product.group1().xyx().with_w(geometric_product[e435]))
                + (self.group6().ww().with_zw(self[e2], self[e235]) * geometric_product.group0().xyx().with_w(geometric_product[e415]))
                + Simd32x3::from(0.0).with_w((geometric_product[e315] * self[e425]) + (geometric_product[e125] * self[e435]) - (geometric_product[e125] * self[e3]))
                - (self.group1().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e235]))
                - (geometric_product.group1().zxy() * self.group7().yzx()).with_w(geometric_product[e315] * self[e2]),
            // e1234
            (geometric_product[e415] * self[e423]) + (geometric_product[e425] * self[e431]) + (geometric_product[e435] * self[e412]),
        );
    }
}
impl GeometricQuotient<Motor> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       72        0
    //    simd2        4        4        0
    //    simd3       24       40        0
    //    simd4       26       18        0
    // Totals...
    // yes simd      102      134        0
    //  no simd      232      272        0
    fn geometric_quotient(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let reverse = Motor::from_groups(
            // e415, e425, e435, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            -f32::powi(other[e415], 2) - f32::powi(other[e425], 2) - f32::powi(other[e435], 2) - f32::powi(other[e12345], 2),
        );
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e235, e315, e125, e5
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (geometric_product[e425] * self[e425]) + (geometric_product[e435] * self[e435]) + (geometric_product[e315] * self[e431]) + (geometric_product[e125] * self[e412]),
                -(geometric_product[e425] * self[e31]) - (geometric_product[e435] * self[e12]) - (geometric_product[e315] * self[e42]) - (geometric_product[e125] * self[e43]),
            ]) + (Simd32x2::from([self[e415], self[scalar]]) * geometric_product.group0().xw())
                + (Simd32x2::from([self[e423], self[e1234]]) * geometric_product.group1().xw())
                - (Simd32x2::from([self[e12345], self[e23]]) * geometric_product.group0().wx())
                - (Simd32x2::from([self[e4], self[e41]]) * geometric_product.group1().wx()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (geometric_product[e435] * self[e4315]) + (geometric_product[e235] * self[e1234]) + (geometric_product[e315] * self[e43])
                    - (geometric_product[e12345] * self[e4235]),
                (geometric_product[e415] * self[e4125]) + (geometric_product[e315] * self[e1234]) + (geometric_product[e5] * self[e42]) - (geometric_product[e12345] * self[e4315]),
                (geometric_product[e425] * self[e4235]) + (geometric_product[e125] * self[e1234]) + (geometric_product[e5] * self[e43]) - (geometric_product[e12345] * self[e4125]),
                0.0,
            ]) + (self.group4().xxy() * geometric_product.group1().wzx()).with_w(geometric_product[e12345] * self[e1234])
                - (self.group3().ww().with_zw(self[e4315], geometric_product[e425]) * geometric_product.group0().xyx().with_w(self[e42]))
                - (self.group9().zx().with_zw(self[e45], geometric_product[e435]) * geometric_product.group0().yzz().with_w(self[e43]))
                - (self.group4().yzx() * geometric_product.group1().zxy()).with_w(geometric_product[e415] * self[e41]),
            // e5
            (geometric_product[e12345] * self[e3215]) + (geometric_product[e5] * self[scalar]) + (geometric_product[e5] * self[e45])
                - (geometric_product[e415] * self[e15])
                - (geometric_product[e425] * self[e25])
                - (geometric_product[e435] * self[e35])
                - (geometric_product[e235] * self[e23])
                - (geometric_product[e235] * self[e4235])
                - (geometric_product[e315] * self[e31])
                - (geometric_product[e315] * self[e4315])
                - (geometric_product[e125] * self[e12])
                - (geometric_product[e125] * self[e4125]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (geometric_product[e315] * self[e3]) + (geometric_product[e125] * self[e425]) + (geometric_product[e5] * self[e1]) - (geometric_product[e5] * self[e415]),
                (geometric_product[e315] * self[e321]) + (geometric_product[e125] * self[e1]) + (geometric_product[e5] * self[e2]) - (geometric_product[e5] * self[e425]),
                (geometric_product[e315] * self[e415]) + (geometric_product[e125] * self[e321]) + (geometric_product[e5] * self[e3]) - (geometric_product[e5] * self[e435]),
                0.0,
            ]) + (geometric_product.group1().xxxw() * self.group6().wz().with_zw(self[e2], self[e4]))
                + (self.group8().yzx() * geometric_product.group0().zxy()).with_w(geometric_product[e12345] * self[e321])
                - (Simd32x4::from([self[e2], self[e415], self[e1], self[e3]]) * geometric_product.group1().zzy().with_w(geometric_product[e435]))
                - (Simd32x4::from([self[e435], self[e3], self[e425], self[e2]]) * geometric_product.group1().yxx().with_w(geometric_product[e425]))
                - (geometric_product.group0().xyzx() * Simd32x3::from(self[e5]).with_w(self[e1]))
                - (geometric_product.group1().xyzx() * self.group0().yy().with_zw(self[e12345], self[e423]))
                - (self.group8().xxy() * geometric_product.group0().wzx()).with_w(geometric_product[e315] * self[e431])
                - (self.group8().zyz() * geometric_product.group0().yww()).with_w(geometric_product[e125] * self[e412]),
            // e41, e42, e43
            (self.group7().yzx() * geometric_product.group0().zxy())
                - (Simd32x3::from(self[e4]) * geometric_product.group0().xyz())
                - (self.group7().xxy() * geometric_product.group0().wzx())
                - (self.group7().zyz() * geometric_product.group0().yww()),
            // e23, e31, e12
            (self.group7().yzx() * geometric_product.group1().zxy()) + (geometric_product.group0().zxy() * self.group6().yzx())
                - (Simd32x3::from(geometric_product[e12345]) * self.group6().xyz())
                - (Simd32x3::from(self[e12345]) * geometric_product.group0().xyz())
                - (Simd32x3::from(self[e4]) * geometric_product.group1().xyz())
                - (self.group7().xxy() * geometric_product.group1().wzx())
                - (self.group7().zyz() * geometric_product.group1().yww())
                - (geometric_product.group0().yzx() * self.group6().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (geometric_product[e425] * self[e12]) + (geometric_product[e235] * self[e1234]),
                (geometric_product[e12345] * self[e31]) + (geometric_product[e315] * self[e1234]),
                (geometric_product[e12345] * self[e12]) + (geometric_product[e125] * self[e1234]),
                -(geometric_product[e12345] * self[e45]) - (geometric_product[e125] * self[e43]),
            ]) + (self.group0().xx().with_zw(self[scalar], geometric_product[e415]) * geometric_product.group0().xyz().with_w(self[e4235]))
                + (self.group4().xxy() * geometric_product.group1().wzx()).with_w(geometric_product[e425] * self[e4315])
                + (self.group4().zyz() * geometric_product.group1().yww()).with_w(geometric_product[e435] * self[e4125])
                + (self.group5().xxy() * geometric_product.group0().wzx()).with_w(geometric_product[e5] * self[e1234])
                - (geometric_product.group1().zxyx() * self.group4().yzx().with_w(self[e41]))
                - (self.group5().yzx() * geometric_product.group0().zxy()).with_w(geometric_product[e315] * self[e42]),
            // e423, e431, e412
            (Simd32x3::from(self[e1234]) * geometric_product.group0().xyz())
                + (self.group4().xxy() * geometric_product.group0().wzx())
                + (self.group4().zyz() * geometric_product.group0().yww())
                - (self.group4().yzx() * geometric_product.group0().zxy()),
            // e235, e315, e125
            (Simd32x3::from(geometric_product[e12345]) * self.group3().xyz())
                + (Simd32x3::from(geometric_product[e5]) * self.group9().xyz())
                + (Simd32x3::from(self[scalar]) * geometric_product.group1().xyz())
                + (Simd32x3::from([self[e35], self[e15], self[e3215]]) * geometric_product.group0().yzz())
                + (Simd32x3::from([self[e45], self[e45], self[e4315]]) * geometric_product.group1().xyx())
                + (Simd32x3::from([self[e4125], self[e4235], self[e45]]) * geometric_product.group1().yzz())
                + (Simd32x3::from([self[e3215], self[e3215], self[e25]]) * geometric_product.group0().xyx())
                + (self.group5().xxy() * geometric_product.group1().wzx())
                + (self.group5().zyz() * geometric_product.group1().yww())
                - (self.group5().yzx() * geometric_product.group1().zxy())
                - (geometric_product.group0().zxy() * self.group3().yzx())
                - (geometric_product.group1().zxy() * self.group9().yzx()),
            // e4235, e4315, e4125, e3215
            (geometric_product.group1().xyzz() * self.group1().www().with_w(self[e435]))
                + (self.group1().zx().with_zw(self[e321], self[e415]) * geometric_product.group0().yzz().with_w(geometric_product[e235]))
                + (self.group6().ww().with_zw(self[e2], geometric_product[e435]) * geometric_product.group0().xyx().with_w(self[e125]))
                + Simd32x3::from(0.0).with_w(
                    (geometric_product[e5] * self[e321]) - (geometric_product[e235] * self[e1]) - (geometric_product[e315] * self[e2]) - (geometric_product[e125] * self[e3]),
                )
                + (self.group7().xxy() * geometric_product.group1().wzx()).with_w(geometric_product[e415] * self[e235])
                + (self.group7().zyz() * geometric_product.group1().yww()).with_w(geometric_product[e425] * self[e315])
                + (geometric_product.group0().www() * self.group1().xyz()).with_w(geometric_product[e315] * self[e425])
                - (geometric_product.group0().zxyw() * self.group1().yzx().with_w(self[e5]))
                - (geometric_product.group1().zxyw() * self.group7().yzx().with_w(self[e12345])),
            // e1234
            (geometric_product[e415] * self[e423]) + (geometric_product[e425] * self[e431]) + (geometric_product[e435] * self[e412]) - (geometric_product[e12345] * self[e4]),
        );
    }
}
impl GeometricQuotient<MultiVector> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      163      221        0
    //    simd2       16       17        0
    //    simd3      124      179        0
    //    simd4      112       75        0
    // Totals...
    // yes simd      415      492        0
    //  no simd     1015     1092        0
    fn geometric_quotient(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let reverse = MultiVector::from_groups(
            // scalar, e12345
            other.group0(),
            // e1, e2, e3, e4
            other.group1(),
            // e5
            other[e5],
            // e15, e25, e35, e45
            other.group3() * Simd32x4::from(-1.0),
            // e41, e42, e43
            other.group4() * Simd32x3::from(-1.0),
            // e23, e31, e12
            other.group5() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group6() * Simd32x4::from(-1.0),
            // e423, e431, e412
            other.group7() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group8() * Simd32x3::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group9(),
            // e1234
            other[e1234],
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e15] * other[e41])
                + 2.0 * (other[e25] * other[e42])
                + 2.0 * (other[e35] * other[e43])
                + 2.0 * (other[e3215] * other[e1234])
                + f32::powi(other[scalar], 2)
                + f32::powi(other[e1], 2)
                + f32::powi(other[e2], 2)
                + f32::powi(other[e3], 2)
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                + f32::powi(other[e321], 2)
                - f32::powi(other[e12345], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2)
                - 2.0 * (other[e4] * other[e5])
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(other_2[scalar]) * reverse.group0(),
            // e1, e2, e3, e4
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e5
            reverse[e5] * other_2[scalar],
            // e15, e25, e35, e45
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group4(),
            // e23, e31, e12
            Simd32x3::from(other_2[scalar]) * reverse.group5(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group6(),
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group7(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group8(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group9(),
            // e1234
            reverse[e1234] * other_2[scalar],
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (geometric_product[e45] * self[e45])
                    + (geometric_product[e415] * self[e415])
                    + (geometric_product[e425] * self[e425])
                    + (geometric_product[e435] * self[e435])
                    + (geometric_product[e423] * self[e235])
                    + (geometric_product[e431] * self[e315])
                    + (geometric_product[e412] * self[e125])
                    + (geometric_product[e235] * self[e423])
                    + (geometric_product[e315] * self[e431])
                    + (geometric_product[e125] * self[e412])
                    - (geometric_product[e12345] * self[e12345])
                    - (geometric_product[e4] * self[e5])
                    - (geometric_product[e5] * self[e4])
                    - (geometric_product[e4235] * self[e4235])
                    - (geometric_product[e4315] * self[e4315])
                    - (geometric_product[e4125] * self[e4125]),
                (geometric_product[e12345] * self[scalar])
                    + (geometric_product[e5] * self[e1234])
                    + (geometric_product[e4315] * self[e2])
                    + (geometric_product[e4125] * self[e3])
                    + (geometric_product[e3215] * self[e4])
                    + (geometric_product[e1234] * self[e5])
                    - (geometric_product[e15] * self[e423])
                    - (geometric_product[e25] * self[e431])
                    - (geometric_product[e35] * self[e412])
                    - (geometric_product[e45] * self[e321])
                    - (geometric_product[e425] * self[e31])
                    - (geometric_product[e435] * self[e12])
                    - (geometric_product[e321] * self[e45])
                    - (geometric_product[e423] * self[e15])
                    - (geometric_product[e431] * self[e25])
                    - (geometric_product[e412] * self[e35]),
            ]) + (Simd32x2::from(geometric_product[scalar]) * self.group0())
                + (Simd32x2::from(geometric_product[e1]) * Simd32x2::from([self[e1], self[e4235]]))
                + (Simd32x2::from(geometric_product[e2]) * Simd32x2::from([self[e2], self[e4315]]))
                + (Simd32x2::from(geometric_product[e3]) * Simd32x2::from([self[e3], self[e4125]]))
                + (Simd32x2::from(self[e3215]) * Simd32x2::from([geometric_product[e1234], geometric_product[e4]]))
                + (Simd32x2::from([self[e1234], self[e1]]) * geometric_product.group9().wx())
                - (Simd32x2::from(geometric_product[e41]) * Simd32x2::from([self[e15], self[e235]]))
                - (Simd32x2::from(geometric_product[e42]) * Simd32x2::from([self[e25], self[e315]]))
                - (Simd32x2::from(geometric_product[e43]) * Simd32x2::from([self[e35], self[e125]]))
                - (Simd32x2::from(geometric_product[e23]) * Simd32x2::from([self[e23], self[e415]]))
                - (Simd32x2::from(geometric_product[e31]) * Simd32x2::from([self[e31], self[e425]]))
                - (Simd32x2::from(geometric_product[e12]) * Simd32x2::from([self[e12], self[e435]]))
                - (Simd32x2::from(self[e41]) * Simd32x2::from([geometric_product[e15], geometric_product[e235]]))
                - (Simd32x2::from(self[e42]) * Simd32x2::from([geometric_product[e25], geometric_product[e315]]))
                - (Simd32x2::from(self[e43]) * Simd32x2::from([geometric_product[e35], geometric_product[e125]]))
                - (Simd32x2::from([self[e321], self[e23]]) * geometric_product.group6().wx()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (geometric_product[e15] * self[e4]) + (geometric_product[e25] * self[e412]) + (geometric_product[e435] * self[e4315]) + (geometric_product[e4125] * self[e425]),
                (geometric_product[e25] * self[e4]) + (geometric_product[e415] * self[e4125]) + (geometric_product[e4235] * self[e435]) + (geometric_product[e3215] * self[e431]),
                (geometric_product[e35] * self[e4]) + (geometric_product[e425] * self[e4235]) + (geometric_product[e4315] * self[e415]) + (geometric_product[e3215] * self[e412]),
                -(geometric_product[e4] * self[e45]) - (geometric_product[e321] * self[e1234]) - (geometric_product[e4315] * self[e431]) - (geometric_product[e4125] * self[e412]),
            ]) + (Simd32x4::from(geometric_product[scalar]) * self.group1())
                + (Simd32x4::from([geometric_product[e2], geometric_product[e321], geometric_product[e321], self[e4]]) * self.group5().zyz().with_w(geometric_product[e45]))
                + (Simd32x4::from([geometric_product[e321], geometric_product[e3], geometric_product[e1], geometric_product[e3]]) * self.group5().xxy().with_w(self[e43]))
                + (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e1234]]) * self.group7().xxy().with_w(self[e321]))
                + (Simd32x2::from(self[e1234]).with_zw(self[e42], self[e4125]) * geometric_product.group8().xyx().with_w(geometric_product[e412]))
                + (self.group0().xx().with_zw(self[scalar], geometric_product[e12345]) * geometric_product.group1().xyz().with_w(self[e1234]))
                + (self.group4().zx().with_zw(self[e1234], geometric_product[e1]) * geometric_product.group8().yzz().with_w(self[e41]))
                + (self.group1().zx().with_zw(self[e321], self[e4235]) * geometric_product.group5().yzz().with_w(geometric_product[e423]))
                + (self.group6().ww().with_zw(self[e2], geometric_product[e1234]) * geometric_product.group5().xyx().with_w(self[e12345]))
                + (Simd32x3::from(geometric_product[e5]) * self.group4()).with_w(geometric_product[e2] * self[e42])
                + (geometric_product.group4().zxy() * self.group8().yzx()).with_w(geometric_product[e4] * self[scalar])
                + (geometric_product.group7().zxy() * self.group3().yzx()).with_w(geometric_product[e431] * self[e4315])
                - (self.group1().yzxz() * geometric_product.group5().zxy().with_w(geometric_product[e43]))
                - (Simd32x2::from(self[e5]).with_zw(self[e315], self[e2]) * geometric_product.group4().xyx().with_w(geometric_product[e42]))
                - (geometric_product.group0().yy().with_zw(geometric_product[e12345], geometric_product[e41]) * self.group9().xyz().with_w(self[e1]))
                - (self.group0().yy().with_zw(self[e12345], geometric_product[e41]) * geometric_product.group9().xyz().with_w(self[e415]))
                - (self.group8().zx().with_zw(self[e5], self[e425]) * geometric_product.group4().yzz().with_w(geometric_product[e42]))
                - (self.group3().zx().with_zw(self[e3215], self[e423]) * geometric_product.group7().yzz().with_w(geometric_product[e23]))
                - (self.group3().ww().with_zw(self[e4315], geometric_product[e425]) * geometric_product.group6().xyx().with_w(self[e42]))
                - (self.group9().zx().with_zw(self[e45], geometric_product[e435]) * geometric_product.group6().yzz().with_w(self[e43]))
                - (self.group9().ww().with_zw(self[e25], self[e435]) * geometric_product.group7().xyx().with_w(geometric_product[e43]))
                - (Simd32x3::from(geometric_product[e1234]) * self.group8()).with_w(geometric_product[e431] * self[e31])
                - (geometric_product.group8().zxy() * self.group4().yzx()).with_w(geometric_product[e31] * self[e431])
                - (self.group5().yzx() * geometric_product.group1().zxy()).with_w(geometric_product[e12] * self[e412])
                - (self.group7().yzx() * geometric_product.group3().zxy()).with_w(geometric_product[e423] * self[e23])
                - (geometric_product.group1().www() * self.group3().xyz()).with_w(geometric_product[e412] * self[e12])
                - (geometric_product.group3().www() * self.group6().xyz()).with_w(geometric_product[e415] * self[e41])
                - (geometric_product.group9().yzx() * self.group6().zxy()).with_w(geometric_product[e4235] * self[e423]),
            // e5
            (geometric_product[scalar] * self[e5])
                + (geometric_product[e12345] * self[e3215])
                + (geometric_product[e5] * self[scalar])
                + (geometric_product[e5] * self[e45])
                + (geometric_product[e15] * self[e1])
                + (geometric_product[e25] * self[e2])
                + (geometric_product[e35] * self[e3])
                + (geometric_product[e321] * self[e3215])
                + (geometric_product[e4235] * self[e235])
                + (geometric_product[e4315] * self[e315])
                + (geometric_product[e4125] * self[e125])
                + (geometric_product[e3215] * self[e12345])
                - (geometric_product[e1] * self[e15])
                - (geometric_product[e2] * self[e25])
                - (geometric_product[e3] * self[e35])
                - (geometric_product[e15] * self[e415])
                - (geometric_product[e25] * self[e425])
                - (geometric_product[e35] * self[e435])
                - (geometric_product[e45] * self[e5])
                - (geometric_product[e23] * self[e235])
                - (geometric_product[e31] * self[e315])
                - (geometric_product[e12] * self[e125])
                - (geometric_product[e415] * self[e15])
                - (geometric_product[e425] * self[e25])
                - (geometric_product[e435] * self[e35])
                - (geometric_product[e235] * self[e23])
                - (geometric_product[e235] * self[e4235])
                - (geometric_product[e315] * self[e31])
                - (geometric_product[e315] * self[e4315])
                - (geometric_product[e125] * self[e12])
                - (geometric_product[e125] * self[e4125])
                - (geometric_product[e3215] * self[e321]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (geometric_product[e5] * self[e1]) + (geometric_product[e25] * self[e4125]) + (geometric_product[e4125] * self[e25]) + (geometric_product[e3215] * self[e4235]),
                (geometric_product[e5] * self[e2]) + (geometric_product[e35] * self[e4235]) + (geometric_product[e4235] * self[e35]) + (geometric_product[e3215] * self[e4315]),
                (geometric_product[e5] * self[e3]) + (geometric_product[e35] * self[e45]) + (geometric_product[e4315] * self[e15]) + (geometric_product[e3215] * self[e4125]),
                -(geometric_product[e415] * self[e1]) - (geometric_product[e425] * self[e2]) - (geometric_product[e435] * self[e3]) - (geometric_product[e3215] * self[e1234]),
            ]) + (Simd32x4::from(geometric_product[scalar]) * self.group3())
                + (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], geometric_product[e25]]) * self.group5().zyz().with_w(self[e42]))
                + (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e15]]) * self.group5().xxy().with_w(self[e41]))
                + (Simd32x4::from([self[e3], self[e321], self[e415], self[e315]]) * geometric_product.group8().yyy().with_w(geometric_product[e431]))
                + (Simd32x4::from([self[e425], self[e1], self[e321], self[e125]]) * geometric_product.group8().zzz().with_w(geometric_product[e412]))
                + (self.group0().xx().with_zw(self[scalar], geometric_product[e12345]) * geometric_product.group3().xyz().with_w(self[e321]))
                + (self.group3().zx().with_zw(self[e3215], geometric_product[e321]) * geometric_product.group5().yzz().with_w(self[e12345]))
                + (self.group3().ww().with_zw(self[e4315], geometric_product[e1234]) * geometric_product.group3().xyx().with_w(self[e3215]))
                + (self.group6().wz().with_zw(self[e2], self[e235]) * geometric_product.group8().xxx().with_w(geometric_product[e423]))
                + (self.group9().ww().with_zw(self[e25], geometric_product[e45]) * geometric_product.group5().xyx().with_w(self[scalar]))
                + (self.group8().yzx() * geometric_product.group1().zxy()).with_w(geometric_product[e35] * self[e43])
                + (self.group8().yzx() * geometric_product.group6().zxy()).with_w(geometric_product[e5] * self[e4])
                - (Simd32x4::from([geometric_product[e2], geometric_product[e435], geometric_product[e415], self[e431]]) * self.group8().zxy().with_w(geometric_product[e315]))
                - (Simd32x4::from([geometric_product[e321], geometric_product[e3], geometric_product[e1], self[e423]]) * self.group8().xxy().with_w(geometric_product[e235]))
                - (Simd32x4::from([self[e2], self[e415], self[e1], self[e4315]]) * geometric_product.group8().zzy().with_w(geometric_product[e31]))
                - (Simd32x4::from([self[e435], self[e3], self[e425], self[e4235]]) * geometric_product.group8().yxx().with_w(geometric_product[e23]))
                - (self.group3().yzxz() * geometric_product.group5().zxy().with_w(geometric_product[e43]))
                - (geometric_product.group0().yy().with_zw(geometric_product[e12345], geometric_product[e41]) * self.group8().with_w(self[e15]))
                - (self.group0().yy().with_zw(self[e12345], geometric_product[e42]) * geometric_product.group8().with_w(self[e25]))
                - (self.group3().zx().with_zw(self[e3215], self[e435]) * geometric_product.group9().yzz().with_w(geometric_product[e3]))
                - (self.group9().ww().with_zw(self[e25], self[e425]) * geometric_product.group9().xyx().with_w(geometric_product[e2]))
                - (Simd32x3::from(geometric_product[e5]) * self.group6().xyz()).with_w(geometric_product[e4] * self[e5])
                - (Simd32x3::from(self[e5]) * geometric_product.group1().xyz()).with_w(geometric_product[e4235] * self[e23])
                - (Simd32x3::from(self[e5]) * geometric_product.group6().xyz()).with_w(geometric_product[e1] * self[e415])
                - (self.group5().yzx() * geometric_product.group3().zxy()).with_w(geometric_product[e12] * self[e4125])
                - (self.group8().zyz() * geometric_product.group6().yww()).with_w(geometric_product[e125] * self[e412])
                - (geometric_product.group3().zxy() * self.group9().yzx()).with_w(geometric_product[e4315] * self[e31])
                - (geometric_product.group3().www() * self.group3().xyz()).with_w(geometric_product[e4125] * self[e12]),
            // e41, e42, e43
            (Simd32x3::from(geometric_product[scalar]) * self.group4())
                + (Simd32x3::from(geometric_product[e1234]) * self.group5())
                + (Simd32x3::from(self[scalar]) * geometric_product.group4())
                + (Simd32x3::from(self[e4]) * geometric_product.group1().xyz())
                + (Simd32x3::from(self[e423]) * Simd32x3::from([geometric_product[e321], geometric_product[e3], geometric_product[e425]]))
                + (Simd32x3::from(self[e431]) * Simd32x3::from([geometric_product[e435], geometric_product[e321], geometric_product[e1]]))
                + (Simd32x3::from(self[e412]) * Simd32x3::from([geometric_product[e2], geometric_product[e415], geometric_product[e321]]))
                + (Simd32x3::from(self[e1234]) * geometric_product.group9().xyz())
                + (Simd32x3::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235]]) * self.group4().xxy())
                + (Simd32x3::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45]]) * self.group4().zyz())
                + (Simd32x3::from([self[e12], self[e4125], self[e31]]) * geometric_product.group4().yxx())
                + (Simd32x3::from([self[e4315], self[e23], self[e4235]]) * geometric_product.group4().zzy())
                + (geometric_product.group5().xyx() * Simd32x2::from(self[e1234]).with_z(self[e42]))
                + (geometric_product.group5().yzz() * self.group4().zx().with_z(self[e1234]))
                + (geometric_product.group7().zxy() * self.group1().yzx())
                + (geometric_product.group7().zxy() * self.group6().yzx())
                - (Simd32x3::from(geometric_product[e12345]) * self.group7())
                - (Simd32x3::from(geometric_product[e4]) * self.group1().xyz())
                - (Simd32x3::from(geometric_product[e4]) * self.group6().xyz())
                - (Simd32x3::from(geometric_product[e41]) * Simd32x3::from([self[e45], self[e12], self[e4315]]))
                - (Simd32x3::from(geometric_product[e42]) * Simd32x3::from([self[e4125], self[e45], self[e23]]))
                - (Simd32x3::from(geometric_product[e43]) * Simd32x3::from([self[e31], self[e4235], self[e45]]))
                - (Simd32x3::from(geometric_product[e1234]) * self.group9().xyz())
                - (Simd32x3::from(self[e12345]) * geometric_product.group7())
                - (Simd32x3::from(self[e4]) * geometric_product.group6().xyz())
                - (Simd32x3::from([geometric_product[e3], geometric_product[e435], geometric_product[e2]]) * self.group7().yxx())
                - (Simd32x3::from([geometric_product[e425], geometric_product[e1], geometric_product[e415]]) * self.group7().zzy())
                - (Simd32x3::from([self[e3], self[e1], self[e425]]) * geometric_product.group7().yzx())
                - (Simd32x3::from([self[e321], self[e321], self[e2]]) * geometric_product.group7().xyx())
                - (geometric_product.group5().zxy() * self.group4().yzx())
                - (geometric_product.group7().yzz() * self.group6().zxw())
                - (self.group4().yzx() * geometric_product.group9().zxy()),
            // e23, e31, e12
            (Simd32x3::from(geometric_product[scalar]) * self.group5())
                + (Simd32x3::from(geometric_product[e45]) * self.group9().xyz())
                + (Simd32x3::from(geometric_product[e1234]) * self.group3().xyz())
                + (Simd32x3::from(self[scalar]) * geometric_product.group5())
                + (Simd32x3::from(self[e1234]) * geometric_product.group3().xyz())
                + (Simd32x3::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215]]) * self.group4().zyz())
                + (Simd32x3::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15]]) * self.group4().xxy())
                + (Simd32x3::from([self[e35], self[e15], self[e3215]]) * geometric_product.group4().yzz())
                + (Simd32x3::from([self[e45], self[e45], self[e4315]]) * geometric_product.group9().xyx())
                + (Simd32x3::from([self[e4125], self[e4235], self[e45]]) * geometric_product.group9().yzz())
                + (Simd32x3::from([self[e3215], self[e3215], self[e25]]) * geometric_product.group4().xyx())
                + (geometric_product.group5().yzx() * self.group5().zxy())
                + (geometric_product.group7().zxy() * self.group8().yzx())
                + (geometric_product.group8().zxy() * self.group7().yzx())
                + (geometric_product.group1().zxy() * self.group1().yzx())
                + (geometric_product.group6().zxy() * self.group6().yzx())
                - (Simd32x3::from(geometric_product[e12345]) * self.group6().xyz())
                - (Simd32x3::from(geometric_product[e4]) * self.group8())
                - (Simd32x3::from(geometric_product[e5]) * self.group7())
                - (Simd32x3::from(geometric_product[e321]) * self.group1().xyz())
                - (Simd32x3::from(self[e12345]) * geometric_product.group6().xyz())
                - (Simd32x3::from([self[e3], self[e1], self[e321]]) * geometric_product.group1().yzz())
                - (Simd32x3::from([self[e321], self[e321], self[e2]]) * geometric_product.group1().xyx())
                - (geometric_product.group4().zxy() * self.group3().yzx())
                - (geometric_product.group5().zxy() * self.group5().yzx())
                - (geometric_product.group7().xyx() * Simd32x2::from(self[e5]).with_z(self[e315]))
                - (geometric_product.group7().yzz() * self.group8().zx().with_z(self[e5]))
                - (geometric_product.group8().xyx() * Simd32x2::from(self[e4]).with_z(self[e431]))
                - (geometric_product.group8().yzz() * self.group7().zx().with_z(self[e4]))
                - (self.group4().yzx() * geometric_product.group3().zxy())
                - (geometric_product.group6().yzx() * self.group6().zxy())
                - (geometric_product.group9().zxy() * self.group9().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (geometric_product[e3] * self[e4315]) + (geometric_product[e4] * self[e15]) + (geometric_product[e15] * self[e4]) + (geometric_product[e4125] * self[e2]),
                (geometric_product[e1] * self[e4125]) + (geometric_product[e4] * self[e25]) + (geometric_product[e25] * self[e4]) + (geometric_product[e4235] * self[e3]),
                (geometric_product[e2] * self[e4235]) + (geometric_product[e4] * self[e35]) + (geometric_product[e35] * self[e4]) + (geometric_product[e4315] * self[e1]),
                -(geometric_product[e4] * self[e3215]) - (geometric_product[e25] * self[e431]) - (geometric_product[e35] * self[e412]) - (geometric_product[e1234] * self[e5]),
            ]) + (Simd32x4::from(geometric_product[scalar]) * self.group6())
                + (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], self[e4]]) * self.group7().zyz().with_w(geometric_product[e3215]))
                + (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], self[e435]]) * self.group7().xxy().with_w(geometric_product[e4125]))
                + (Simd32x2::from(self[e5]).with_zw(self[e315], self[e125]) * geometric_product.group4().xyx().with_w(geometric_product[e43]))
                + (Simd32x2::from(self[e1234]).with_zw(self[e42], self[e4315]) * geometric_product.group8().xyx().with_w(geometric_product[e425]))
                + (geometric_product.group0().yy().with_zw(geometric_product[e12345], self[scalar]) * self.group5().with_w(geometric_product[e321]))
                + (self.group0().xx().with_zw(self[scalar], geometric_product[e41]) * geometric_product.group6().xyz().with_w(self[e235]))
                + (self.group0().yy().with_zw(self[e12345], geometric_product[e42]) * geometric_product.group5().with_w(self[e315]))
                + (self.group4().zx().with_zw(self[e1234], self[e4125]) * geometric_product.group8().yzz().with_w(geometric_product[e435]))
                + (self.group8().zx().with_zw(self[e5], self[e15]) * geometric_product.group4().yzz().with_w(geometric_product[e423]))
                + (self.group3().zx().with_zw(self[e3215], self[e4235]) * geometric_product.group7().yzz().with_w(geometric_product[e415]))
                + (self.group9().ww().with_zw(self[e25], self[e35]) * geometric_product.group7().xyx().with_w(geometric_product[e412]))
                + (Simd32x3::from(geometric_product[e5]) * self.group4()).with_w(geometric_product[e4235] * self[e415])
                + (Simd32x3::from(geometric_product[e1234]) * self.group8()).with_w(geometric_product[e5] * self[e1234])
                + (geometric_product.group5().yzx() * self.group6().zxy()).with_w(geometric_product[e431] * self[e25])
                + (self.group5().zxy() * geometric_product.group6().yzx()).with_w(geometric_product[e4315] * self[e425])
                - (self.group1().zx().with_zw(self[e321], geometric_product[e15]) * geometric_product.group9().yzz().with_w(self[e423]))
                - (self.group3().ww().with_zw(self[e4315], self[e42]) * geometric_product.group1().xyx().with_w(geometric_product[e315]))
                - (self.group6().ww().with_zw(self[e2], geometric_product[e3]) * geometric_product.group9().xyx().with_w(self[e12]))
                - (self.group9().zx().with_zw(self[e45], self[e43]) * geometric_product.group1().yzz().with_w(geometric_product[e125]))
                - (geometric_product.group4().zxy() * self.group8().yzx()).with_w(geometric_product[e12345] * self[e45])
                - (geometric_product.group5().zxy() * self.group6().yzx()).with_w(geometric_product[e45] * self[e12345])
                - (geometric_product.group7().zxy() * self.group3().yzx()).with_w(geometric_product[e23] * self[e1])
                - (geometric_product.group8().zxy() * self.group4().yzx()).with_w(geometric_product[e31] * self[e2])
                - (self.group5().yzx() * geometric_product.group6().zxy()).with_w(geometric_product[e12] * self[e3])
                - (self.group7().yzx() * geometric_product.group3().zxy()).with_w(geometric_product[e235] * self[e41])
                - (geometric_product.group3().www() * self.group1().xyz()).with_w(geometric_product[e1] * self[e23])
                - (geometric_product.group6().www() * self.group9().xyz()).with_w(geometric_product[e2] * self[e31]),
            // e423, e431, e412
            (Simd32x3::from(geometric_product[scalar]) * self.group7())
                + (Simd32x3::from(geometric_product[e12345]) * self.group4())
                + (Simd32x3::from(geometric_product[e4]) * self.group5())
                + (Simd32x3::from(geometric_product[e1234]) * self.group1().xyz())
                + (Simd32x3::from(geometric_product[e1234]) * self.group6().xyz())
                + (Simd32x3::from(self[scalar]) * geometric_product.group7())
                + (Simd32x3::from(self[e12345]) * geometric_product.group4())
                + (Simd32x3::from(self[e4]) * geometric_product.group9().xyz())
                + (Simd32x3::from(self[e1234]) * geometric_product.group6().xyz())
                + (Simd32x3::from([geometric_product[e3], geometric_product[e435], geometric_product[e2]]) * self.group4().yxx())
                + (Simd32x3::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235]]) * self.group7().xxy())
                + (Simd32x3::from([geometric_product[e425], geometric_product[e1], geometric_product[e415]]) * self.group4().zzy())
                + (Simd32x3::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45]]) * self.group7().zyz())
                + (Simd32x3::from([self[e3], self[e1], self[e425]]) * geometric_product.group4().yzx())
                + (Simd32x3::from([self[e12], self[e4125], self[e31]]) * geometric_product.group7().yxx())
                + (Simd32x3::from([self[e321], self[e321], self[e2]]) * geometric_product.group4().xyx())
                + (Simd32x3::from([self[e4315], self[e23], self[e4235]]) * geometric_product.group7().zzy())
                + (geometric_product.group4().yzz() * self.group6().zxw())
                + (geometric_product.group5().xyx() * Simd32x2::from(self[e4]).with_z(self[e431]))
                + (geometric_product.group5().yzz() * self.group7().zx().with_z(self[e4]))
                - (Simd32x3::from(geometric_product[e4]) * self.group9().xyz())
                - (Simd32x3::from(geometric_product[e423]) * Simd32x3::from([self[e45], self[e12], self[e4315]]))
                - (Simd32x3::from(geometric_product[e431]) * Simd32x3::from([self[e4125], self[e45], self[e23]]))
                - (Simd32x3::from(geometric_product[e412]) * Simd32x3::from([self[e31], self[e4235], self[e45]]))
                - (Simd32x3::from(self[e41]) * Simd32x3::from([geometric_product[e321], geometric_product[e3], geometric_product[e425]]))
                - (Simd32x3::from(self[e42]) * Simd32x3::from([geometric_product[e435], geometric_product[e321], geometric_product[e1]]))
                - (Simd32x3::from(self[e43]) * Simd32x3::from([geometric_product[e2], geometric_product[e415], geometric_product[e321]]))
                - (Simd32x3::from(self[e1234]) * geometric_product.group1().xyz())
                - (geometric_product.group4().zxy() * self.group1().yzx())
                - (geometric_product.group4().zxy() * self.group6().yzx())
                - (geometric_product.group5().zxy() * self.group7().yzx())
                - (self.group7().yzx() * geometric_product.group9().zxy()),
            // e235, e315, e125
            (Simd32x3::from(geometric_product[scalar]) * self.group8())
                + (Simd32x3::from(geometric_product[e12345]) * self.group3().xyz())
                + (Simd32x3::from(geometric_product[e5]) * self.group5())
                + (Simd32x3::from(geometric_product[e5]) * self.group9().xyz())
                + (Simd32x3::from(geometric_product[e321]) * self.group3().xyz())
                + (Simd32x3::from(geometric_product[e3215]) * self.group6().xyz())
                + (Simd32x3::from(self[scalar]) * geometric_product.group8())
                + (Simd32x3::from(self[e12345]) * geometric_product.group3().xyz())
                + (Simd32x3::from([self[e2], self[e415], self[e1]]) * geometric_product.group3().zzy())
                + (Simd32x3::from([self[e35], self[e15], self[e3215]]) * geometric_product.group1().yzz())
                + (Simd32x3::from([self[e35], self[e15], self[e3215]]) * geometric_product.group6().yzz())
                + (Simd32x3::from([self[e435], self[e3], self[e425]]) * geometric_product.group3().yxx())
                + (Simd32x3::from([self[e4125], self[e4235], self[e45]]) * geometric_product.group8().yzz())
                + (Simd32x3::from([self[e3215], self[e3215], self[e25]]) * geometric_product.group1().xyx())
                + (Simd32x3::from([self[e3215], self[e3215], self[e25]]) * geometric_product.group6().xyx())
                + (geometric_product.group5().xyx() * Simd32x2::from(self[e5]).with_z(self[e315]))
                + (geometric_product.group5().yzz() * self.group8().zx().with_z(self[e5]))
                + (geometric_product.group8().xyx() * Simd32x2::from(self[e45]).with_z(self[e31]))
                + (geometric_product.group8().yzx() * self.group5().zx().with_z(self[e4315]))
                + (self.group8().yzx() * geometric_product.group9().zxy())
                - (Simd32x3::from(geometric_product[e15]) * Simd32x3::from([self[e321], self[e435], self[e2]]))
                - (Simd32x3::from(geometric_product[e25]) * Simd32x3::from([self[e3], self[e321], self[e415]]))
                - (Simd32x3::from(geometric_product[e35]) * Simd32x3::from([self[e425], self[e1], self[e321]]))
                - (Simd32x3::from(geometric_product[e3215]) * self.group1().xyz())
                - (Simd32x3::from(self[e5]) * geometric_product.group9().xyz())
                - (Simd32x3::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235]]) * self.group8().xxy())
                - (Simd32x3::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45]]) * self.group8().zyz())
                - (geometric_product.group5().zxy() * self.group8().yzx())
                - (geometric_product.group8().zxy() * self.group5().yzx())
                - (geometric_product.group8().zxy() * self.group9().yzx())
                - (geometric_product.group1().zxy() * self.group3().yzx())
                - (geometric_product.group6().zxy() * self.group3().yzx()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (geometric_product[e415] * self[e321]) + (geometric_product[e425] * self[e3]) + (geometric_product[e321] * self[e415]) + (geometric_product[e1234] * self[e15]),
                (geometric_product[e425] * self[e321]) + (geometric_product[e435] * self[e1]) + (geometric_product[e321] * self[e425]) + (geometric_product[e1234] * self[e25]),
                (geometric_product[e415] * self[e2]) + (geometric_product[e435] * self[e321]) + (geometric_product[e321] * self[e435]) + (geometric_product[e1234] * self[e35]),
                -(geometric_product[e25] * self[e4315]) - (geometric_product[e35] * self[e4125]) - (geometric_product[e45] * self[e3215]) - (geometric_product[e321] * self[e5]),
            ]) + (Simd32x4::from(geometric_product[scalar]) * self.group9())
                + (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], self[e25]]) * self.group5().xxy().with_w(geometric_product[e4315]))
                + (Simd32x4::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45], self[e35]]) * self.group5().zyz().with_w(geometric_product[e4125]))
                + (geometric_product.group0().yy().with_zw(geometric_product[e12345], self[scalar]) * self.group1().xyz().with_w(geometric_product[e3215]))
                + (self.group0().xx().with_zw(self[scalar], geometric_product[e235]) * geometric_product.group9().xyz().with_w(self[e415]))
                + (self.group0().yy().with_zw(self[e12345], geometric_product[e315]) * geometric_product.group1().xyz().with_w(self[e425]))
                + (self.group7().zx().with_zw(self[e4], geometric_product[e435]) * geometric_product.group8().yzz().with_w(self[e125]))
                + (self.group1().ww().with_zw(self[e431], geometric_product[e3]) * geometric_product.group8().xyx().with_w(self[e125]))
                + (self.group3().zx().with_zw(self[e3215], geometric_product[e1]) * geometric_product.group4().yzz().with_w(self[e235]))
                + (self.group3().ww().with_zw(self[e4315], geometric_product[e415]) * geometric_product.group5().xyx().with_w(self[e235]))
                + (self.group9().zx().with_zw(self[e45], geometric_product[e2]) * geometric_product.group5().yzz().with_w(self[e315]))
                + (self.group9().ww().with_zw(self[e25], self[e435]) * geometric_product.group4().xyx().with_w(geometric_product[e125]))
                + (Simd32x3::from(geometric_product[e5]) * self.group7()).with_w(geometric_product[e3215] * self[e45])
                + (geometric_product.group7().zxy() * self.group8().yzx()).with_w(geometric_product[e425] * self[e315])
                + (self.group4().yzx() * geometric_product.group3().zxy()).with_w(geometric_product[e4235] * self[e15])
                + (geometric_product.group1().yzx() * self.group6().zxy()).with_w(geometric_product[e5] * self[e321])
                - (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], self[e2]]) * self.group4().zyz().with_w(geometric_product[e315]))
                - (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], self[e1]]) * self.group4().xxy().with_w(geometric_product[e235]))
                - (Simd32x2::from(self[e5]).with_zw(self[e315], self[e15]) * geometric_product.group7().xyx().with_w(geometric_product[e23]))
                - (self.group8().zx().with_zw(self[e5], self[e25]) * geometric_product.group7().yzz().with_w(geometric_product[e31]))
                - (Simd32x3::from(self[e1234]) * geometric_product.group3().xyz()).with_w(geometric_product[e35] * self[e12])
                - (self.group8() * geometric_product.group1().www()).with_w(geometric_product[e15] * self[e23])
                - (geometric_product.group4().zxy() * self.group3().yzx()).with_w(geometric_product[e12345] * self[e5])
                - (geometric_product.group5().zxy() * self.group9().yzx()).with_w(geometric_product[e5] * self[e12345])
                - (geometric_product.group8().zxy() * self.group7().yzx()).with_w(geometric_product[e12] * self[e35])
                - (self.group5().yzx() * geometric_product.group9().zxy()).with_w(geometric_product[e125] * self[e3])
                - (geometric_product.group1().zxy() * self.group6().yzx()).with_w(geometric_product[e25] * self[e31])
                - (geometric_product.group6().zxy() * self.group1().yzx()).with_w(geometric_product[e15] * self[e4235]),
            // e1234
            (geometric_product[scalar] * self[e1234])
                + (geometric_product[e45] * self[e1234])
                + (geometric_product[e41] * self[e4235])
                + (geometric_product[e42] * self[e4315])
                + (geometric_product[e43] * self[e4125])
                + (geometric_product[e415] * self[e423])
                + (geometric_product[e425] * self[e431])
                + (geometric_product[e435] * self[e412])
                + (geometric_product[e321] * self[e4])
                + (geometric_product[e423] * self[e1])
                + (geometric_product[e423] * self[e415])
                + (geometric_product[e431] * self[e2])
                + (geometric_product[e431] * self[e425])
                + (geometric_product[e412] * self[e3])
                + (geometric_product[e412] * self[e435])
                + (geometric_product[e1234] * self[scalar])
                - (geometric_product[e12345] * self[e4])
                - (geometric_product[e1] * self[e423])
                - (geometric_product[e2] * self[e431])
                - (geometric_product[e3] * self[e412])
                - (geometric_product[e4] * self[e12345])
                - (geometric_product[e4] * self[e321])
                - (geometric_product[e41] * self[e23])
                - (geometric_product[e42] * self[e31])
                - (geometric_product[e43] * self[e12])
                - (geometric_product[e23] * self[e41])
                - (geometric_product[e31] * self[e42])
                - (geometric_product[e12] * self[e43])
                - (geometric_product[e4235] * self[e41])
                - (geometric_product[e4315] * self[e42])
                - (geometric_product[e4125] * self[e43])
                - (geometric_product[e1234] * self[e45]),
        );
    }
}
impl GeometricQuotient<Plane> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       31       50        0
    //    simd2        1        1        0
    //    simd3       11       15        0
    //    simd4        8        9        0
    // Totals...
    // yes simd       51       75        0
    //  no simd       98      133        0
    fn geometric_quotient(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Plane::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(-f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2)) * other.group0(),
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                -(self[e4235] * geometric_product[e4235]) - (self[e4315] * geometric_product[e4315]) - (self[e4125] * geometric_product[e4125]),
                (self[e2] * geometric_product[e4315]) + (self[e3] * geometric_product[e4125]) + (self[e4] * geometric_product[e3215]),
            ]) + (Simd32x2::from([self[e1234], self[e1]]) * geometric_product.group0().wx()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e425] * geometric_product[e4125]) + (self[e423] * geometric_product[e3215]),
                (self[e435] * geometric_product[e4235]) + (self[e431] * geometric_product[e3215]),
                (self[e415] * geometric_product[e4315]) + (self[e412] * geometric_product[e3215]),
                self[e412] * geometric_product[e4125] * -1.0,
            ]) - (geometric_product.group0().xyzx() * self.group0().yy().with_zw(self[e12345], self[e423]))
                - (geometric_product.group0().yzxy() * self.group6().zxy().with_w(self[e431])),
            // e5
            (self[e12345] * geometric_product[e3215]) + (self[e235] * geometric_product[e4235]) + (self[e315] * geometric_product[e4315]) + (self[e125] * geometric_product[e4125])
                - (self[e321] * geometric_product[e3215]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e25] * geometric_product[e4125]) + (self[e23] * geometric_product[e3215]) + (self[e4235] * geometric_product[e3215]),
                (self[e35] * geometric_product[e4235]) + (self[e31] * geometric_product[e3215]) + (self[e4315] * geometric_product[e3215]),
                (self[e15] * geometric_product[e4315]) + (self[e12] * geometric_product[e3215]) + (self[e4125] * geometric_product[e3215]),
                -(self[e12] * geometric_product[e4125]) - (self[e1234] * geometric_product[e3215]),
            ]) - (geometric_product.group0().xyzy() * self.group9().www().with_w(self[e31]))
                - (geometric_product.group0().yzxx() * self.group3().zxy().with_w(self[e23])),
            // e41, e42, e43
            (Simd32x3::from(self[e1234]) * geometric_product.group0().xyz()) + (self.group4().zxy() * geometric_product.group0().yzx())
                - (self.group4().yzx() * geometric_product.group0().zxy()),
            // e23, e31, e12
            (Simd32x3::from(self[e45]) * geometric_product.group0().xyz())
                + (Simd32x3::from(geometric_product[e3215]) * self.group4())
                + (self.group9().zxy() * geometric_product.group0().yzx())
                - (self.group9().yzx() * geometric_product.group0().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(self[e3] * geometric_product[e4315]) - (self[e321] * geometric_product[e4235]),
                -(self[e1] * geometric_product[e4125]) - (self[e321] * geometric_product[e4315]),
                -(self[e2] * geometric_product[e4235]) - (self[e321] * geometric_product[e4125]),
                (self[e425] * geometric_product[e4315]) + (self[e435] * geometric_product[e4125]),
            ]) + (Simd32x4::from(geometric_product[e3215]) * self.group7().with_w(self[e4]))
                + (geometric_product.group0().zxyx() * self.group1().yzx().with_w(self[e415])),
            // e423, e431, e412
            (Simd32x3::from(self[e4]) * geometric_product.group0().xyz()) + (self.group7().zxy() * geometric_product.group0().yzx())
                - (self.group7().yzx() * geometric_product.group0().zxy()),
            // e235, e315, e125
            (Simd32x3::from(geometric_product[e3215]) * self.group6().xyz()) + (self.group8().yzx() * geometric_product.group0().zxy())
                - (Simd32x3::from(self[e5]) * geometric_product.group0().xyz())
                - (Simd32x3::from(geometric_product[e3215]) * self.group1().xyz())
                - (self.group8().zxy() * geometric_product.group0().yzx()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(self[e41] * geometric_product[e3215]) - (self[e31] * geometric_product[e4125]),
                -(self[e42] * geometric_product[e3215]) - (self[e12] * geometric_product[e4235]),
                -(self[e43] * geometric_product[e3215]) - (self[e23] * geometric_product[e4315]),
                (self[e25] * geometric_product[e4315]) + (self[e35] * geometric_product[e4125]) + (self[e45] * geometric_product[e3215]),
            ]) + (Simd32x4::from(self[scalar]) * geometric_product.group0())
                + (geometric_product.group0().yzxx() * self.group5().zxy().with_w(self[e15])),
            // e1234
            -(self[e41] * geometric_product[e4235]) - (self[e42] * geometric_product[e4315]) - (self[e43] * geometric_product[e4125]),
        );
    }
}
impl GeometricQuotient<RoundPoint> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       49        0
    //    simd2        3        3        0
    //    simd3       16       25        0
    //    simd4       15       11        0
    // Totals...
    // yes simd       51       88        0
    //  no simd      131      174        0
    fn geometric_quotient(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2) - 2.0 * (other[e4] * other[e5]),
        );
        let geometric_product = RoundPoint::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from(other_2[scalar]) * other.group0(), /* e5 */ other[e5] * other_2[scalar]);
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                -(self[e4] * geometric_product[e5]) - (self[e5] * geometric_product[e4]),
                (self[e3215] * geometric_product[e4]) + (self[e1234] * geometric_product[e5]),
            ]) + (Simd32x2::from(geometric_product[e1]) * Simd32x2::from([self[e1], self[e4235]]))
                + (Simd32x2::from(geometric_product[e2]) * Simd32x2::from([self[e2], self[e4315]]))
                + (Simd32x2::from(geometric_product[e3]) * Simd32x2::from([self[e3], self[e4125]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                self[e15] * geometric_product[e4] * -1.0,
                self[e25] * geometric_product[e4] * -1.0,
                self[e35] * geometric_product[e4] * -1.0,
                self[e43] * geometric_product[e3],
            ]) + (Simd32x4::from(self[scalar]) * geometric_product.group0())
                + (geometric_product.group0().yzxy() * self.group5().zxy().with_w(self[e42]))
                + (Simd32x3::from(geometric_product[e5]) * self.group4()).with_w(self[e41] * geometric_product[e1])
                - (geometric_product.group0().zxyw() * self.group5().yzx().with_w(self[e45])),
            // e5
            (self[scalar] * geometric_product[e5]) + (self[e45] * geometric_product[e5])
                - (self[e15] * geometric_product[e1])
                - (self[e25] * geometric_product[e2])
                - (self[e35] * geometric_product[e3]),
            // e15, e25, e35, e45
            Simd32x4::from([
                self[e1] * geometric_product[e5],
                self[e2] * geometric_product[e5],
                self[e3] * geometric_product[e5],
                self[e5] * geometric_product[e4] * -1.0,
            ]) + (self.group8().yzx() * geometric_product.group0().zxy()).with_w(self[e4] * geometric_product[e5])
                - (self.group6().xyzy() * Simd32x3::from(geometric_product[e5]).with_w(geometric_product[e2]))
                - (geometric_product.group0().yzxx() * self.group8().zxy().with_w(self[e415]))
                - (Simd32x3::from(self[e5]) * geometric_product.group0().xyz()).with_w(self[e435] * geometric_product[e3]),
            // e41, e42, e43
            (Simd32x3::from(self[e4]) * geometric_product.group0().xyz()) + (self.group7().zxy() * geometric_product.group0().yzx())
                - (Simd32x3::from(geometric_product[e4]) * self.group1().xyz())
                - (Simd32x3::from(geometric_product[e4]) * self.group6().xyz())
                - (self.group7().yzx() * geometric_product.group0().zxy()),
            // e23, e31, e12
            (self.group1().yzx() * geometric_product.group0().zxy())
                - (Simd32x3::from(self[e321]) * geometric_product.group0().xyz())
                - (Simd32x3::from(geometric_product[e4]) * self.group8())
                - (Simd32x3::from(geometric_product[e5]) * self.group7())
                - (self.group1().zxy() * geometric_product.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e15] * geometric_product[e4]) + (self[e4315] * geometric_product[e3]),
                (self[e25] * geometric_product[e4]) + (self[e4125] * geometric_product[e1]),
                (self[e35] * geometric_product[e4]) + (self[e4235] * geometric_product[e2]),
                -(self[e12] * geometric_product[e3]) - (self[e3215] * geometric_product[e4]),
            ]) + (Simd32x4::from(geometric_product[e5]) * self.group4().with_w(self[e1234]))
                - (geometric_product.group0().xyzx() * self.group3().www().with_w(self[e23]))
                - (geometric_product.group0().yzxy() * self.group9().zxy().with_w(self[e31])),
            // e423, e431, e412
            (Simd32x3::from(geometric_product[e4]) * self.group5()) + (self.group4().yzx() * geometric_product.group0().zxy())
                - (Simd32x3::from(self[e1234]) * geometric_product.group0().xyz())
                - (Simd32x3::from(geometric_product[e4]) * self.group9().xyz())
                - (self.group4().zxy() * geometric_product.group0().yzx()),
            // e235, e315, e125
            (Simd32x3::from(self[e3215]) * geometric_product.group0().xyz())
                + (Simd32x3::from(geometric_product[e5]) * self.group5())
                + (Simd32x3::from(geometric_product[e5]) * self.group9().xyz())
                + (self.group3().zxy() * geometric_product.group0().yzx())
                - (self.group3().yzx() * geometric_product.group0().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e425] * geometric_product[e3] * -1.0,
                self[e435] * geometric_product[e1] * -1.0,
                self[e415] * geometric_product[e2] * -1.0,
                self[e321] * geometric_product[e5],
            ]) + (geometric_product.group0().xyzx() * self.group0().yy().with_zw(self[e12345], self[e235]))
                + (geometric_product.group0().yzxz() * self.group6().zxy().with_w(self[e125]))
                + (Simd32x3::from(geometric_product[e5]) * self.group7()).with_w(self[e315] * geometric_product[e2])
                - (self.group8() * geometric_product.group0().www()).with_w(self[e12345] * geometric_product[e5]),
            // e1234
            -(self[e12345] * geometric_product[e4])
                - (self[e321] * geometric_product[e4])
                - (self[e423] * geometric_product[e1])
                - (self[e431] * geometric_product[e2])
                - (self[e412] * geometric_product[e3]),
        );
    }
}
impl GeometricQuotient<Scalar> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        1
    //    simd2        0        1        0
    //    simd3        0        4        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0       11        1
    //  no simd        0       32        1
    fn geometric_quotient(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Scalar::from_groups(/* scalar */ 1.0 / other[scalar]);
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(geometric_product[scalar]) * self.group0(),
            // e1, e2, e3, e4
            Simd32x4::from(geometric_product[scalar]) * self.group1(),
            // e5
            self[e5] * geometric_product[scalar],
            // e15, e25, e35, e45
            Simd32x4::from(geometric_product[scalar]) * self.group3(),
            // e41, e42, e43
            Simd32x3::from(geometric_product[scalar]) * self.group4(),
            // e23, e31, e12
            Simd32x3::from(geometric_product[scalar]) * self.group5(),
            // e415, e425, e435, e321
            Simd32x4::from(geometric_product[scalar]) * self.group6(),
            // e423, e431, e412
            Simd32x3::from(geometric_product[scalar]) * self.group7(),
            // e235, e315, e125
            Simd32x3::from(geometric_product[scalar]) * self.group8(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(geometric_product[scalar]) * self.group9(),
            // e1234
            self[e1234] * geometric_product[scalar],
        );
    }
}
impl GeometricQuotient<Sphere> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       23       47        0
    //    simd2        2        2        0
    //    simd3       16       25        0
    //    simd4       14       11        0
    // Totals...
    // yes simd       55       85        0
    //  no simd      131      170        0
    fn geometric_quotient(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e3215] * other[e1234]) - f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2),
        );
        let geometric_product = Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * other.group0(),
            // e1234
            other_2[scalar] * other[e1234],
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                -(self[e4235] * geometric_product[e4235]) - (self[e4315] * geometric_product[e4315]) - (self[e4125] * geometric_product[e4125]),
                (self[e2] * geometric_product[e4315]) + (self[e3] * geometric_product[e4125]) + (self[e4] * geometric_product[e3215]),
            ]) + (Simd32x2::from(geometric_product[e1234]) * Simd32x2::from([self[e3215], self[e5]]))
                + (Simd32x2::from([self[e1234], self[e1]]) * geometric_product.group0().wx()),
            // e1, e2, e3, e4
            (self.group6().yzxw() * geometric_product.group0().zxy().with_w(geometric_product[e1234]))
                + (self.group7() * geometric_product.group0().www()).with_w(self[e12345] * geometric_product[e1234])
                - (geometric_product.group0().xyzx() * self.group0().yy().with_zw(self[e12345], self[e423]))
                - (geometric_product.group0().yzxz() * self.group6().zxy().with_w(self[e412]))
                - (Simd32x3::from(geometric_product[e1234]) * self.group8()).with_w(self[e431] * geometric_product[e4315]),
            // e5
            (self[e12345] * geometric_product[e3215]) + (self[e235] * geometric_product[e4235]) + (self[e315] * geometric_product[e4315]) + (self[e125] * geometric_product[e4125])
                - (self[e321] * geometric_product[e3215]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e25] * geometric_product[e4125]) + (self[e4235] * geometric_product[e3215]),
                (self[e35] * geometric_product[e4235]) + (self[e4315] * geometric_product[e3215]),
                (self[e15] * geometric_product[e4315]) + (self[e4125] * geometric_product[e3215]),
                -(self[e12] * geometric_product[e4125]) - (self[e1234] * geometric_product[e3215]),
            ]) + (self.group5() * geometric_product.group0().www()).with_w(self[e3215] * geometric_product[e1234])
                - (geometric_product.group0().xyzy() * self.group9().www().with_w(self[e31]))
                - (geometric_product.group0().yzxx() * self.group3().zxy().with_w(self[e23])),
            // e41, e42, e43
            (Simd32x3::from(self[e1234]) * geometric_product.group0().xyz())
                + (Simd32x3::from(geometric_product[e1234]) * self.group5())
                + (self.group4().zxy() * geometric_product.group0().yzx())
                - (Simd32x3::from(geometric_product[e1234]) * self.group9().xyz())
                - (self.group4().yzx() * geometric_product.group0().zxy()),
            // e23, e31, e12
            (Simd32x3::from(self[e45]) * geometric_product.group0().xyz())
                + (Simd32x3::from(geometric_product[e3215]) * self.group4())
                + (Simd32x3::from(geometric_product[e1234]) * self.group3().xyz())
                + (self.group9().zxy() * geometric_product.group0().yzx())
                - (self.group9().yzx() * geometric_product.group0().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e321] * geometric_product[e4235] * -1.0,
                self[e321] * geometric_product[e4315] * -1.0,
                self[e321] * geometric_product[e4125] * -1.0,
                self[e435] * geometric_product[e4125],
            ]) + (Simd32x4::from(geometric_product[e3215]) * self.group7().with_w(self[e4]))
                + (geometric_product.group0().zxyy() * self.group1().yzx().with_w(self[e425]))
                + (Simd32x3::from(geometric_product[e1234]) * self.group8()).with_w(self[e415] * geometric_product[e4235])
                - (self.group1().zxy() * geometric_product.group0().yzx()).with_w(self[e5] * geometric_product[e1234]),
            // e423, e431, e412
            (Simd32x3::from(self[e4]) * geometric_product.group0().xyz())
                + (Simd32x3::from(geometric_product[e1234]) * self.group1().xyz())
                + (Simd32x3::from(geometric_product[e1234]) * self.group6().xyz())
                + (self.group7().zxy() * geometric_product.group0().yzx())
                - (self.group7().yzx() * geometric_product.group0().zxy()),
            // e235, e315, e125
            (Simd32x3::from(geometric_product[e3215]) * self.group6().xyz()) + (self.group8().yzx() * geometric_product.group0().zxy())
                - (Simd32x3::from(self[e5]) * geometric_product.group0().xyz())
                - (Simd32x3::from(geometric_product[e3215]) * self.group1().xyz())
                - (self.group8().zxy() * geometric_product.group0().yzx()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(self[e41] * geometric_product[e3215]) - (self[e31] * geometric_product[e4125]),
                -(self[e42] * geometric_product[e3215]) - (self[e12] * geometric_product[e4235]),
                -(self[e43] * geometric_product[e3215]) - (self[e23] * geometric_product[e4315]),
                (self[e35] * geometric_product[e4125]) + (self[e45] * geometric_product[e3215]),
            ]) + (Simd32x4::from(self[scalar]) * geometric_product.group0())
                + (self.group3().xyzy() * Simd32x3::from(geometric_product[e1234]).with_w(geometric_product[e4315]))
                + (geometric_product.group0().yzxx() * self.group5().zxy().with_w(self[e15])),
            // e1234
            (self[scalar] * geometric_product[e1234])
                - (self[e45] * geometric_product[e1234])
                - (self[e41] * geometric_product[e4235])
                - (self[e42] * geometric_product[e4315])
                - (self[e43] * geometric_product[e4125]),
        );
    }
}
impl GeometricQuotient<VersorEven> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       59       83        0
    //    simd2        8        8        0
    //    simd3       60       83        0
    //    simd4       59       50        0
    // Totals...
    // yes simd      186      224        0
    //  no simd      491      548        0
    fn geometric_quotient(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let reverse = VersorEven::from_groups(
            // e423, e431, e412, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e5
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e4
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)
                - f32::powi(other[e12345], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125])
                - 2.0 * (other[e5] * other[e4]),
        );
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e5
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e1, e2, e3, e4
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e415] * geometric_product[e415])
                    + (self[e425] * geometric_product[e425])
                    + (self[e435] * geometric_product[e435])
                    + (self[e431] * geometric_product[e315])
                    + (self[e412] * geometric_product[e125])
                    + (self[e315] * geometric_product[e431])
                    + (self[e125] * geometric_product[e412])
                    - (self[e5] * geometric_product[e4]),
                (self[e3215] * geometric_product[e4])
                    - (self[e25] * geometric_product[e431])
                    - (self[e35] * geometric_product[e412])
                    - (self[e45] * geometric_product[e321])
                    - (self[e42] * geometric_product[e315])
                    - (self[e43] * geometric_product[e125])
                    - (self[e31] * geometric_product[e425])
                    - (self[e12] * geometric_product[e435]),
            ]) + (Simd32x2::from(geometric_product[e1]) * Simd32x2::from([self[e1], self[e4235]]))
                + (Simd32x2::from(geometric_product[e2]) * Simd32x2::from([self[e2], self[e4315]]))
                + (Simd32x2::from(geometric_product[e3]) * Simd32x2::from([self[e3], self[e4125]]))
                + (Simd32x2::from([self[e423], self[e1234]]) * geometric_product.group2().xw())
                + (Simd32x2::from([self[e235], self[scalar]]) * geometric_product.group0().xw())
                - (Simd32x2::from([self[e12345], self[e15]]) * geometric_product.group0().wx())
                - (Simd32x2::from([self[e4], self[e41]]) * geometric_product.group2().wx())
                - (Simd32x2::from([self[e321], self[e23]]) * geometric_product.group1().wx()),
            // e1, e2, e3, e4
            (Simd32x4::from(self[scalar]) * geometric_product.group3())
                + (Simd32x4::from(self[e1234]) * geometric_product.group2().xyz().with_w(geometric_product[e12345]))
                + (Simd32x4::from([geometric_product[e321], geometric_product[e3], geometric_product[e1], geometric_product[e3]]) * self.group5().xxy().with_w(self[e43]))
                + (Simd32x4::from([geometric_product[e2], geometric_product[e321], geometric_product[e321], geometric_product[e423]]) * self.group5().zyz().with_w(self[e4235]))
                + (self.group9().yzxz() * geometric_product.group1().zxy().with_w(geometric_product[e412]))
                + (geometric_product.group0().zxyy() * self.group3().yzx().with_w(self[e4315]))
                + (self.group4().xxy() * geometric_product.group2().wzx()).with_w(self[e41] * geometric_product[e1])
                + (self.group4().zyz() * geometric_product.group2().yww()).with_w(self[e42] * geometric_product[e2])
                - (Simd32x4::from([geometric_product[e431], geometric_product[e4], geometric_product[e4], geometric_product[e423]]) * self.group3().zyz().with_w(self[e23]))
                - (Simd32x4::from([geometric_product[e12345], geometric_product[e435], geometric_product[e415], geometric_product[e412]]) * self.group9().xxy().with_w(self[e12]))
                - (Simd32x4::from([geometric_product[e425], geometric_product[e12345], geometric_product[e12345], geometric_product[e4]]) * self.group9().zyz().with_w(self[e45]))
                - (Simd32x4::from([geometric_product[e4], geometric_product[e412], geometric_product[e423], geometric_product[e435]]) * self.group3().xxy().with_w(self[e43]))
                - (self.group4().yzx() * geometric_product.group2().zxy()).with_w(self[e41] * geometric_product[e415])
                - (self.group5().yzx() * geometric_product.group3().zxy()).with_w(self[e42] * geometric_product[e425])
                - (self.group3().www() * geometric_product.group1().xyz()).with_w(self[e31] * geometric_product[e431])
                - (self.group9().www() * geometric_product.group0().xyz()).with_w(self[e1234] * geometric_product[e321]),
            // e5
            (self[scalar] * geometric_product[e5]) + (self[e45] * geometric_product[e5]) + (self[e3215] * geometric_product[e12345]) + (self[e3215] * geometric_product[e321])
                - (self[e15] * geometric_product[e415])
                - (self[e15] * geometric_product[e1])
                - (self[e25] * geometric_product[e425])
                - (self[e25] * geometric_product[e2])
                - (self[e35] * geometric_product[e435])
                - (self[e35] * geometric_product[e3])
                - (self[e23] * geometric_product[e235])
                - (self[e31] * geometric_product[e315])
                - (self[e12] * geometric_product[e125])
                - (self[e4235] * geometric_product[e235])
                - (self[e4315] * geometric_product[e315])
                - (self[e4125] * geometric_product[e125]),
            // e15, e25, e35, e45
            (Simd32x4::from(self[e321]) * geometric_product.group2().xyz().with_w(geometric_product[e12345]))
                + (geometric_product.group1().zxyw() * self.group8().yzx().with_w(self[e12345]))
                + (geometric_product.group2().zxyw() * self.group6().yzx().with_w(self[e4]))
                + (self.group8().yzx() * geometric_product.group3().zxy()).with_w(self[e235] * geometric_product[e423])
                + (self.group1().xxy() * geometric_product.group2().wzx()).with_w(self[e315] * geometric_product[e431])
                + (self.group1().zyz() * geometric_product.group2().yww()).with_w(self[e125] * geometric_product[e412])
                - (Simd32x4::from(self[e5]) * geometric_product.group3())
                - (Simd32x4::from([geometric_product[e12345], geometric_product[e435], geometric_product[e415], geometric_product[e315]]) * self.group8().xxy().with_w(self[e431]))
                - (Simd32x4::from([geometric_product[e425], geometric_product[e12345], geometric_product[e12345], geometric_product[e415]]) * self.group8().zyz().with_w(self[e1]))
                - (Simd32x4::from([geometric_product[e321], geometric_product[e3], geometric_product[e1], geometric_product[e125]]) * self.group8().xxy().with_w(self[e412]))
                - (Simd32x4::from([geometric_product[e2], geometric_product[e321], geometric_product[e321], geometric_product[e425]]) * self.group8().zyz().with_w(self[e2]))
                - (self.group1().yzxz() * geometric_product.group2().zxy().with_w(geometric_product[e435]))
                - (self.group6().xxyx() * geometric_product.group2().wzx().with_w(geometric_product[e1]))
                - (self.group6().zyzy() * geometric_product.group2().yww().with_w(geometric_product[e2]))
                - (geometric_product.group2().xyzx() * self.group0().yy().with_zw(self[e12345], self[e423]))
                - (Simd32x3::from(self[e5]) * geometric_product.group1().xyz()).with_w(self[e435] * geometric_product[e3]),
            // e41, e42, e43
            (Simd32x3::from(self[e4]) * geometric_product.group3().xyz())
                + (Simd32x3::from(self[e423]) * Simd32x3::from([geometric_product[e321], geometric_product[e3], geometric_product[e425]]))
                + (Simd32x3::from(self[e431]) * Simd32x3::from([geometric_product[e435], geometric_product[e321], geometric_product[e1]]))
                + (Simd32x3::from(self[e412]) * Simd32x3::from([geometric_product[e2], geometric_product[e415], geometric_product[e321]]))
                + (self.group1().yzx() * geometric_product.group0().zxy())
                + (self.group6().yzx() * geometric_product.group0().zxy())
                - (Simd32x3::from(self[e12345]) * geometric_product.group0().xyz())
                - (Simd32x3::from(self[e4]) * geometric_product.group1().xyz())
                - (Simd32x3::from(self[e321]) * geometric_product.group0().xyz())
                - (Simd32x3::from(self[e423]) * Simd32x3::from([geometric_product[e12345], geometric_product[e435], geometric_product[e2]]))
                - (Simd32x3::from(self[e431]) * Simd32x3::from([geometric_product[e3], geometric_product[e12345], geometric_product[e415]]))
                - (Simd32x3::from(self[e412]) * Simd32x3::from([geometric_product[e425], geometric_product[e1], geometric_product[e12345]]))
                - (Simd32x3::from([geometric_product[e431], geometric_product[e4], geometric_product[e4]]) * self.group1().zyz())
                - (Simd32x3::from([geometric_product[e431], geometric_product[e4], geometric_product[e4]]) * self.group6().zyz())
                - (Simd32x3::from([geometric_product[e4], geometric_product[e412], geometric_product[e423]]) * self.group1().xxy())
                - (Simd32x3::from([geometric_product[e4], geometric_product[e412], geometric_product[e423]]) * self.group6().xxy()),
            // e23, e31, e12
            (self.group7().yzx() * geometric_product.group2().zxy())
                + (self.group8().yzx() * geometric_product.group0().zxy())
                + (self.group1().yzx() * geometric_product.group3().zxy())
                + (self.group6().yzx() * geometric_product.group1().zxy())
                - (Simd32x3::from(self[e12345]) * geometric_product.group1().xyz())
                - (Simd32x3::from(self[e4]) * geometric_product.group2().xyz())
                - (Simd32x3::from(self[e5]) * geometric_product.group0().xyz())
                - (Simd32x3::from(self[e321]) * geometric_product.group3().xyz())
                - (Simd32x3::from([geometric_product[e431], geometric_product[e4], geometric_product[e4]]) * self.group8().zyz())
                - (Simd32x3::from([geometric_product[e12345], geometric_product[e435], geometric_product[e415]]) * self.group6().xxy())
                - (Simd32x3::from([geometric_product[e425], geometric_product[e12345], geometric_product[e12345]]) * self.group6().zyz())
                - (Simd32x3::from([geometric_product[e321], geometric_product[e3], geometric_product[e1]]) * self.group1().xxy())
                - (Simd32x3::from([geometric_product[e2], geometric_product[e321], geometric_product[e321]]) * self.group1().zyz())
                - (Simd32x3::from([geometric_product[e4], geometric_product[e412], geometric_product[e423]]) * self.group8().xxy())
                - (self.group7().xxy() * geometric_product.group2().wzx())
                - (self.group7().zyz() * geometric_product.group2().yww()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e3215] * geometric_product[e423]) + (self[e1234] * geometric_product[e235]),
                (self[e3215] * geometric_product[e431]) + (self[e1234] * geometric_product[e315]),
                (self[e3215] * geometric_product[e412]) + (self[e1234] * geometric_product[e125]),
                -(self[e45] * geometric_product[e12345]) - (self[e3215] * geometric_product[e4]),
            ]) + (Simd32x4::from(self[scalar]) * geometric_product.group1())
                + (Simd32x4::from([geometric_product[e431], geometric_product[e4], geometric_product[e4], geometric_product[e435]]) * self.group3().zyz().with_w(self[e4125]))
                + (Simd32x4::from([geometric_product[e12345], geometric_product[e435], geometric_product[e415], geometric_product[e412]]) * self.group5().xxy().with_w(self[e35]))
                + (Simd32x4::from([geometric_product[e425], geometric_product[e12345], geometric_product[e12345], geometric_product[e415]])
                    * self.group5().zyz().with_w(self[e4235]))
                + (Simd32x4::from([geometric_product[e4], geometric_product[e412], geometric_product[e423], geometric_product[e425]]) * self.group3().xxy().with_w(self[e4315]))
                + (self.group4().xxy() * geometric_product.group2().wzx()).with_w(self[e15] * geometric_product[e423])
                + (self.group4().zyz() * geometric_product.group2().yww()).with_w(self[e25] * geometric_product[e431])
                + (self.group9().yzx() * geometric_product.group3().zxy()).with_w(self[e1234] * geometric_product[e5])
                - (Simd32x4::from([geometric_product[e321], geometric_product[e3], geometric_product[e1], geometric_product[e2]]) * self.group9().xxy().with_w(self[e31]))
                - (Simd32x4::from([geometric_product[e2], geometric_product[e321], geometric_product[e321], geometric_product[e3]]) * self.group9().zyz().with_w(self[e12]))
                - (geometric_product.group2().zxyx() * self.group4().yzx().with_w(self[e41]))
                - (geometric_product.group3().xyzx() * self.group3().www().with_w(self[e23]))
                - (self.group5().yzx() * geometric_product.group1().zxy()).with_w(self[e42] * geometric_product[e315])
                - (self.group3().yzx() * geometric_product.group0().zxy()).with_w(self[e43] * geometric_product[e125]),
            // e423, e431, e412
            (Simd32x3::from(self[scalar]) * geometric_product.group0().xyz())
                + (Simd32x3::from(self[e41]) * Simd32x3::from([geometric_product[e12345], geometric_product[e435], geometric_product[e2]]))
                + (Simd32x3::from(self[e42]) * Simd32x3::from([geometric_product[e3], geometric_product[e12345], geometric_product[e415]]))
                + (Simd32x3::from(self[e43]) * Simd32x3::from([geometric_product[e425], geometric_product[e1], geometric_product[e12345]]))
                + (Simd32x3::from(self[e1234]) * geometric_product.group1().xyz())
                + (Simd32x3::from([geometric_product[e431], geometric_product[e4], geometric_product[e4]]) * self.group5().zyz())
                + (Simd32x3::from([geometric_product[e4], geometric_product[e412], geometric_product[e423]]) * self.group5().xxy())
                + (self.group9().yzx() * geometric_product.group0().zxy())
                - (Simd32x3::from(self[e45]) * geometric_product.group0().xyz())
                - (Simd32x3::from(self[e41]) * Simd32x3::from([geometric_product[e321], geometric_product[e3], geometric_product[e425]]))
                - (Simd32x3::from(self[e42]) * Simd32x3::from([geometric_product[e435], geometric_product[e321], geometric_product[e1]]))
                - (Simd32x3::from(self[e43]) * Simd32x3::from([geometric_product[e2], geometric_product[e415], geometric_product[e321]]))
                - (Simd32x3::from(self[e1234]) * geometric_product.group3().xyz())
                - (Simd32x3::from([geometric_product[e431], geometric_product[e4], geometric_product[e4]]) * self.group9().zyz())
                - (Simd32x3::from([geometric_product[e4], geometric_product[e412], geometric_product[e423]]) * self.group9().xxy())
                - (self.group5().yzx() * geometric_product.group0().zxy()),
            // e235, e315, e125
            (Simd32x3::from(self[scalar]) * geometric_product.group2().xyz())
                + (Simd32x3::from(self[e45]) * geometric_product.group2().xyz())
                + (Simd32x3::from(self[e3215]) * geometric_product.group1().xyz())
                + (Simd32x3::from(self[e3215]) * geometric_product.group3().xyz())
                + (Simd32x3::from([geometric_product[e12345], geometric_product[e435], geometric_product[e415]]) * self.group3().xxy())
                + (Simd32x3::from([geometric_product[e425], geometric_product[e12345], geometric_product[e12345]]) * self.group3().zyz())
                + (Simd32x3::from([geometric_product[e321], geometric_product[e3], geometric_product[e1]]) * self.group3().xxy())
                + (Simd32x3::from([geometric_product[e2], geometric_product[e321], geometric_product[e321]]) * self.group3().zyz())
                + (self.group5().xxy() * geometric_product.group2().wzx())
                + (self.group5().zyz() * geometric_product.group2().yww())
                + (self.group9().xxy() * geometric_product.group2().wzx())
                + (self.group9().zyz() * geometric_product.group2().yww())
                - (self.group5().yzx() * geometric_product.group2().zxy())
                - (self.group3().yzx() * geometric_product.group1().zxy())
                - (self.group3().yzx() * geometric_product.group3().zxy())
                - (self.group9().yzx() * geometric_product.group2().zxy()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[e321]) * geometric_product.group1().xyz().with_w(geometric_product[e5]))
                + (Simd32x4::from([geometric_product[e12345], geometric_product[e435], geometric_product[e415], geometric_product[e435]]) * self.group1().xxy().with_w(self[e125]))
                + (Simd32x4::from([geometric_product[e425], geometric_product[e12345], geometric_product[e12345], geometric_product[e3]]) * self.group1().zyz().with_w(self[e125]))
                + (Simd32x4::from([geometric_product[e321], geometric_product[e3], geometric_product[e1], geometric_product[e315]]) * self.group6().xxyy())
                + (Simd32x4::from([geometric_product[e2], geometric_product[e321], geometric_product[e321], geometric_product[e125]]) * self.group6().zyzz())
                + (geometric_product.group2().xyzx() * self.group1().www().with_w(self[e415]))
                + (self.group0().yy().with_zw(self[e12345], self[e235]) * geometric_product.group3().xyz().with_w(geometric_product[e415]))
                + (self.group7().xxy() * geometric_product.group2().wzx()).with_w(self[e235] * geometric_product[e1])
                + (self.group7().zyz() * geometric_product.group2().yww()).with_w(self[e315] * geometric_product[e425])
                + (self.group8().yzx() * geometric_product.group0().zxy()).with_w(self[e315] * geometric_product[e2])
                - (Simd32x4::from(self[e5]) * geometric_product.group0().xyz().with_w(geometric_product[e321]))
                - (Simd32x4::from([geometric_product[e431], geometric_product[e4], geometric_product[e4], geometric_product[e315]]) * self.group8().zyz().with_w(self[e2]))
                - (Simd32x4::from([geometric_product[e4], geometric_product[e412], geometric_product[e423], geometric_product[e235]]) * self.group8().xxy().with_w(self[e1]))
                - (self.group1().yzxz() * geometric_product.group1().zxy().with_w(geometric_product[e125]))
                - (geometric_product.group2().zxyw() * self.group7().yzx().with_w(self[e12345]))
                - (self.group6().yzx() * geometric_product.group3().zxy()).with_w(self[e5] * geometric_product[e12345]),
            // e1234
            (self[e1] * geometric_product[e423])
                + (self[e2] * geometric_product[e431])
                + (self[e3] * geometric_product[e412])
                + (self[e4] * geometric_product[e321])
                + (self[e415] * geometric_product[e423])
                + (self[e425] * geometric_product[e431])
                + (self[e435] * geometric_product[e412])
                + (self[e423] * geometric_product[e415])
                + (self[e431] * geometric_product[e425])
                + (self[e412] * geometric_product[e435])
                - (self[e12345] * geometric_product[e4])
                - (self[e4] * geometric_product[e12345])
                - (self[e321] * geometric_product[e4])
                - (self[e423] * geometric_product[e1])
                - (self[e431] * geometric_product[e2])
                - (self[e412] * geometric_product[e3]),
        );
    }
}
impl GeometricQuotient<VersorOdd> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       87      117        0
    //    simd2       12       12        0
    //    simd3       60       77        0
    //    simd4       50       44        0
    // Totals...
    // yes simd      209      250        0
    //  no simd      491      548        0
    fn geometric_quotient(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let reverse = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + 2.0 * (other[e1234] * other[e3215])
                + f32::powi(other[scalar], 2)
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2),
        );
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e45] * geometric_product[e45])
                    - (self[e4235] * geometric_product[e4235])
                    - (self[e4315] * geometric_product[e4315])
                    - (self[e4125] * geometric_product[e4125]),
                (self[e2] * geometric_product[e4315]) + (self[e3] * geometric_product[e4125]) + (self[e4] * geometric_product[e3215]) - (self[e321] * geometric_product[e45]),
            ]) + (Simd32x2::from(geometric_product[scalar]) * self.group0())
                + (Simd32x2::from(geometric_product[e1234]) * Simd32x2::from([self[e3215], self[e5]]))
                + (Simd32x2::from([self[e1234], self[e1]]) * geometric_product.group3().wx())
                - (Simd32x2::from(geometric_product[e41]) * Simd32x2::from([self[e15], self[e235]]))
                - (Simd32x2::from(geometric_product[e42]) * Simd32x2::from([self[e25], self[e315]]))
                - (Simd32x2::from(geometric_product[e43]) * Simd32x2::from([self[e35], self[e125]]))
                - (Simd32x2::from(geometric_product[e23]) * Simd32x2::from([self[e23], self[e415]]))
                - (Simd32x2::from(geometric_product[e31]) * Simd32x2::from([self[e31], self[e425]]))
                - (Simd32x2::from(geometric_product[e12]) * Simd32x2::from([self[e12], self[e435]]))
                - (Simd32x2::from(geometric_product[e15]) * Simd32x2::from([self[e41], self[e423]]))
                - (Simd32x2::from(geometric_product[e25]) * Simd32x2::from([self[e42], self[e431]]))
                - (Simd32x2::from(geometric_product[e35]) * Simd32x2::from([self[e43], self[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e3] * geometric_product[e31]) + (self[e4] * geometric_product[e15]) + (self[e425] * geometric_product[e4125]) + (self[e321] * geometric_product[e23]),
                (self[e2] * geometric_product[scalar]) + (self[e4] * geometric_product[e25]) + (self[e435] * geometric_product[e4235]) + (self[e321] * geometric_product[e31]),
                (self[e3] * geometric_product[scalar]) + (self[e4] * geometric_product[e35]) + (self[e415] * geometric_product[e4315]) + (self[e321] * geometric_product[e12]),
                -(self[e3] * geometric_product[e43]) - (self[e415] * geometric_product[e41]) - (self[e425] * geometric_product[e42]) - (self[e435] * geometric_product[e43]),
            ]) + (Simd32x4::from([geometric_product[scalar], geometric_product[e12], geometric_product[e23], geometric_product[e1234]]) * self.group1().xxy().with_w(self[e321]))
                + (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], geometric_product[scalar]]) * self.group7().zyz().with_w(self[e4]))
                + (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e1234]]) * self.group7().xxy().with_w(self[e12345]))
                + (self.group8().yzx() * geometric_product.group0().zxy()).with_w(self[e4] * geometric_product[e45])
                - (Simd32x4::from([geometric_product[e42], geometric_product[e1234], geometric_product[e1234], geometric_product[e4315]]) * self.group8().zyz().with_w(self[e431]))
                - (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], geometric_product[e4125]]) * self.group6().xxy().with_w(self[e412]))
                - (Simd32x4::from([geometric_product[e1234], geometric_product[e43], geometric_product[e41], geometric_product[e31]]) * self.group8().xxy().with_w(self[e431]))
                - (Simd32x4::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45], geometric_product[e41]]) * self.group6().zyz().with_w(self[e1]))
                - (geometric_product.group1().zxyz() * self.group1().yzx().with_w(self[e412]))
                - (self.group0().yy().with_zw(self[e12345], self[e423]) * geometric_product.group3().xyz().with_w(geometric_product[e23]))
                - (Simd32x3::from(self[e5]) * geometric_product.group0().xyz()).with_w(self[e2] * geometric_product[e42])
                - (self.group7().yzx() * geometric_product.group2().zxy()).with_w(self[e423] * geometric_product[e4235]),
            // e5
            (self[e12345] * geometric_product[e3215])
                + (self[e1] * geometric_product[e15])
                + (self[e2] * geometric_product[e25])
                + (self[e3] * geometric_product[e35])
                + (self[e5] * geometric_product[scalar])
                + (self[e235] * geometric_product[e4235])
                + (self[e315] * geometric_product[e4315])
                + (self[e125] * geometric_product[e4125])
                - (self[e5] * geometric_product[e45])
                - (self[e415] * geometric_product[e15])
                - (self[e425] * geometric_product[e25])
                - (self[e435] * geometric_product[e35])
                - (self[e321] * geometric_product[e3215])
                - (self[e235] * geometric_product[e23])
                - (self[e315] * geometric_product[e31])
                - (self[e125] * geometric_product[e12]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e45] * geometric_product[e15]) + (self[e4235] * geometric_product[e3215]) + (self[e4125] * geometric_product[e25]) + (self[e3215] * geometric_product[e23]),
                (self[e45] * geometric_product[e25]) + (self[e4235] * geometric_product[e35]) + (self[e4315] * geometric_product[e3215]) + (self[e3215] * geometric_product[e31]),
                (self[e45] * geometric_product[e35]) + (self[e4315] * geometric_product[e15]) + (self[e4125] * geometric_product[e3215]) + (self[e3215] * geometric_product[e12]),
                -(self[e4235] * geometric_product[e23])
                    - (self[e4315] * geometric_product[e31])
                    - (self[e4125] * geometric_product[e12])
                    - (self[e1234] * geometric_product[e3215]),
            ]) + (Simd32x4::from(self[scalar]) * geometric_product.group2().xyz().with_w(geometric_product[e45]))
                + (Simd32x4::from([geometric_product[scalar], geometric_product[e12], geometric_product[e4315], geometric_product[e35]]) * self.group3().xxx().with_w(self[e43]))
                + (Simd32x4::from([geometric_product[e31], geometric_product[e4235], geometric_product[scalar], geometric_product[e1234]])
                    * self.group3().zzz().with_w(self[e3215]))
                + (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], geometric_product[e25]]) * self.group5().zyz().with_w(self[e42]))
                + (Simd32x4::from([geometric_product[e4125], geometric_product[scalar], geometric_product[e23], geometric_product[scalar]]) * self.group3().yyyw())
                + (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e15]]) * self.group5().xxy().with_w(self[e41]))
                - (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e31], geometric_product[e4315]]) * self.group3().xxx().with_w(self[e31]))
                - (Simd32x4::from([geometric_product[e4315], geometric_product[e23], geometric_product[e45], geometric_product[e41]]) * self.group3().zzzx())
                - (geometric_product.group1().zw().with_zw(geometric_product[e4235], geometric_product[e4125]) * self.group3().yyy().with_w(self[e12]))
                - (self.group5().yzx() * geometric_product.group2().zxy()).with_w(self[e23] * geometric_product[e4235])
                - (self.group9().yzx() * geometric_product.group2().zxy()).with_w(self[e25] * geometric_product[e42])
                - (self.group9().www() * geometric_product.group3().xyz()).with_w(self[e35] * geometric_product[e43]),
            // e41, e42, e43
            (Simd32x3::from(self[scalar]) * geometric_product.group0().xyz())
                + (Simd32x3::from(self[e1234]) * geometric_product.group1().xyz())
                + (Simd32x3::from(self[e1234]) * geometric_product.group3().xyz())
                + (Simd32x3::from([geometric_product[e42], geometric_product[e1234], geometric_product[e1234]]) * self.group5().zyz())
                + (Simd32x3::from([geometric_product[scalar], geometric_product[e12], geometric_product[e23]]) * self.group4().xxy())
                + (Simd32x3::from([geometric_product[e31], geometric_product[scalar], geometric_product[scalar]]) * self.group4().zyz())
                + (Simd32x3::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235]]) * self.group4().xxy())
                + (Simd32x3::from([geometric_product[e1234], geometric_product[e43], geometric_product[e41]]) * self.group5().xxy())
                + (Simd32x3::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45]]) * self.group4().zyz())
                + (self.group9().yzx() * geometric_product.group0().zxy())
                - (Simd32x3::from(self[e45]) * geometric_product.group0().xyz())
                - (Simd32x3::from([geometric_product[e42], geometric_product[e1234], geometric_product[e1234]]) * self.group9().zyz())
                - (Simd32x3::from([geometric_product[e1234], geometric_product[e43], geometric_product[e41]]) * self.group9().xxy())
                - (self.group4().yzx() * geometric_product.group1().zxy())
                - (self.group4().yzx() * geometric_product.group3().zxy())
                - (self.group5().yzx() * geometric_product.group0().zxy()),
            // e23, e31, e12
            (Simd32x3::from(self[scalar]) * geometric_product.group1().xyz())
                + (Simd32x3::from(self[e45]) * geometric_product.group3().xyz())
                + (Simd32x3::from(self[e3215]) * geometric_product.group0().xyz())
                + (Simd32x3::from(self[e1234]) * geometric_product.group2().xyz())
                + (Simd32x3::from([geometric_product[e42], geometric_product[e1234], geometric_product[e1234]]) * self.group3().zyz())
                + (Simd32x3::from([geometric_product[scalar], geometric_product[e12], geometric_product[e23]]) * self.group5().xxy())
                + (Simd32x3::from([geometric_product[e31], geometric_product[scalar], geometric_product[scalar]]) * self.group5().zyz())
                + (Simd32x3::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235]]) * self.group9().xxy())
                + (Simd32x3::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215]]) * self.group4().zyz())
                + (Simd32x3::from([geometric_product[e1234], geometric_product[e43], geometric_product[e41]]) * self.group3().xxy())
                + (Simd32x3::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45]]) * self.group9().zyz())
                + (Simd32x3::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15]]) * self.group4().xxy())
                - (self.group4().yzx() * geometric_product.group2().zxy())
                - (self.group5().yzx() * geometric_product.group1().zxy())
                - (self.group3().yzx() * geometric_product.group0().zxy())
                - (self.group9().yzx() * geometric_product.group3().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e5] * geometric_product[e41]) + (self[e435] * geometric_product[e31]),
                (self[e5] * geometric_product[e42]) + (self[e425] * geometric_product[scalar]),
                (self[e5] * geometric_product[e43]) + (self[e435] * geometric_product[scalar]),
                -(self[e3] * geometric_product[e12]) - (self[e5] * geometric_product[e1234]),
            ]) + (Simd32x4::from([geometric_product[e42], geometric_product[e1234], geometric_product[e1234], geometric_product[e4235]]) * self.group8().zyz().with_w(self[e415]))
                + (Simd32x4::from([geometric_product[scalar], geometric_product[e12], geometric_product[e23], geometric_product[scalar]]) * self.group6().xxyw())
                + (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], geometric_product[e43]]) * self.group7().zyz().with_w(self[e125]))
                + (Simd32x4::from([geometric_product[e1234], geometric_product[e43], geometric_product[e41], geometric_product[e3215]]) * self.group8().xxy().with_w(self[e4]))
                + (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e42]]) * self.group7().xxy().with_w(self[e315]))
                + (geometric_product.group3().zxyy() * self.group1().yzx().with_w(self[e425]))
                + (self.group0().yy().with_zw(self[e12345], self[e235]) * geometric_product.group1().xyz().with_w(geometric_product[e41]))
                + (self.group1().www() * geometric_product.group2().xyz()).with_w(self[e435] * geometric_product[e4125])
                - (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], geometric_product[e25]]) * self.group1().xxy().with_w(self[e431]))
                - (Simd32x4::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45], geometric_product[e35]]) * self.group1().zyz().with_w(self[e412]))
                - (geometric_product.group1().zxyx() * self.group6().yzx().with_w(self[e1]))
                - (self.group7().yzx() * geometric_product.group2().zxy()).with_w(self[e12345] * geometric_product[e45])
                - (self.group8().yzx() * geometric_product.group0().zxy()).with_w(self[e423] * geometric_product[e15])
                - (self.group6().www() * geometric_product.group3().xyz()).with_w(self[e2] * geometric_product[e31]),
            // e423, e431, e412
            (Simd32x3::from(self[e12345]) * geometric_product.group0().xyz())
                + (Simd32x3::from(self[e4]) * geometric_product.group1().xyz())
                + (Simd32x3::from(self[e4]) * geometric_product.group3().xyz())
                + (Simd32x3::from(self[e321]) * geometric_product.group0().xyz())
                + (Simd32x3::from([geometric_product[e42], geometric_product[e1234], geometric_product[e1234]]) * self.group1().zyz())
                + (Simd32x3::from([geometric_product[e42], geometric_product[e1234], geometric_product[e1234]]) * self.group6().zyz())
                + (Simd32x3::from([geometric_product[scalar], geometric_product[e12], geometric_product[e23]]) * self.group7().xxy())
                + (Simd32x3::from([geometric_product[e31], geometric_product[scalar], geometric_product[scalar]]) * self.group7().zyz())
                + (Simd32x3::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235]]) * self.group7().xxy())
                + (Simd32x3::from([geometric_product[e1234], geometric_product[e43], geometric_product[e41]]) * self.group1().xxy())
                + (Simd32x3::from([geometric_product[e1234], geometric_product[e43], geometric_product[e41]]) * self.group6().xxy())
                + (Simd32x3::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45]]) * self.group7().zyz())
                - (self.group7().yzx() * geometric_product.group1().zxy())
                - (self.group7().yzx() * geometric_product.group3().zxy())
                - (self.group1().yzx() * geometric_product.group0().zxy())
                - (self.group6().yzx() * geometric_product.group0().zxy()),
            // e235, e315, e125
            (Simd32x3::from(self[e12345]) * geometric_product.group2().xyz())
                + (Simd32x3::from(self[e5]) * geometric_product.group1().xyz())
                + (Simd32x3::from(self[e235]) * Simd32x3::from([geometric_product[scalar], geometric_product[e12], geometric_product[e4315]]))
                + (Simd32x3::from(self[e315]) * Simd32x3::from([geometric_product[e4125], geometric_product[scalar], geometric_product[e23]]))
                + (Simd32x3::from(self[e125]) * Simd32x3::from([geometric_product[e31], geometric_product[e4235], geometric_product[scalar]]))
                + (Simd32x3::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215]]) * self.group6().zyz())
                + (Simd32x3::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15]]) * self.group6().xxy())
                + (self.group1().yzx() * geometric_product.group2().zxy())
                - (Simd32x3::from(self[e5]) * geometric_product.group3().xyz())
                - (Simd32x3::from(self[e321]) * geometric_product.group2().xyz())
                - (Simd32x3::from(self[e235]) * Simd32x3::from([geometric_product[e45], geometric_product[e4125], geometric_product[e31]]))
                - (Simd32x3::from(self[e315]) * Simd32x3::from([geometric_product[e12], geometric_product[e45], geometric_product[e4235]]))
                - (Simd32x3::from(self[e125]) * Simd32x3::from([geometric_product[e4315], geometric_product[e23], geometric_product[e45]]))
                - (Simd32x3::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215]]) * self.group1().zyz())
                - (Simd32x3::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15]]) * self.group1().xxy())
                - (self.group6().yzx() * geometric_product.group2().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e45] * geometric_product[e23]) + (self[e4235] * geometric_product[scalar]) + (self[e4125] * geometric_product[e31]) + (self[e3215] * geometric_product[e41]),
                (self[e45] * geometric_product[e31]) + (self[e4235] * geometric_product[e12]) + (self[e4315] * geometric_product[scalar]) + (self[e3215] * geometric_product[e42]),
                (self[e45] * geometric_product[e12]) + (self[e4315] * geometric_product[e23]) + (self[e4125] * geometric_product[scalar]) + (self[e3215] * geometric_product[e43]),
                -(self[e4235] * geometric_product[e15]) - (self[e4315] * geometric_product[e25]) - (self[e4125] * geometric_product[e35]) - (self[e3215] * geometric_product[e45]),
            ]) + (Simd32x4::from(self[scalar]) * geometric_product.group3())
                + (Simd32x4::from([geometric_product[e42], geometric_product[e1234], geometric_product[e1234], geometric_product[scalar]])
                    * self.group3().zyz().with_w(self[e3215]))
                + (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], geometric_product[e4315]]) * self.group5().xxy().with_w(self[e25]))
                + (Simd32x4::from([geometric_product[e1234], geometric_product[e43], geometric_product[e41], geometric_product[e3215]]) * self.group3().xxyw())
                + (Simd32x4::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45], geometric_product[e4125]]) * self.group5().zyz().with_w(self[e35]))
                + (self.group4().yzx() * geometric_product.group2().zxy()).with_w(self[e15] * geometric_product[e4235])
                - (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], geometric_product[e25]]) * self.group4().zyz().with_w(self[e31]))
                - (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e15]]) * self.group4().xxy().with_w(self[e23]))
                - (self.group3().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e23]))
                - (geometric_product.group1().zxyy() * self.group9().yzx().with_w(self[e25]))
                - (Simd32x3::from(self[e1234]) * geometric_product.group2().xyz()).with_w(self[e35] * geometric_product[e12])
                - (self.group5().yzx() * geometric_product.group3().zxy()).with_w(self[e12] * geometric_product[e35]),
            // e1234
            (self[scalar] * geometric_product[e1234])
                + (self[e4235] * geometric_product[e41])
                + (self[e4315] * geometric_product[e42])
                + (self[e4125] * geometric_product[e43])
                + (self[e1234] * geometric_product[scalar])
                + (self[e1234] * geometric_product[e45])
                - (self[e45] * geometric_product[e1234])
                - (self[e41] * geometric_product[e23])
                - (self[e41] * geometric_product[e4235])
                - (self[e42] * geometric_product[e31])
                - (self[e42] * geometric_product[e4315])
                - (self[e43] * geometric_product[e12])
                - (self[e43] * geometric_product[e4125])
                - (self[e23] * geometric_product[e41])
                - (self[e31] * geometric_product[e42])
                - (self[e12] * geometric_product[e43]),
        );
    }
}
impl std::ops::Div<GeometricQuotientInfix> for Plane {
    type Output = GeometricQuotientInfixPartial<Plane>;
    fn div(self, _rhs: GeometricQuotientInfix) -> Self::Output {
        GeometricQuotientInfixPartial(self)
    }
}
impl GeometricQuotient<AntiCircleRotor> for Plane {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       31        0
    //    simd3        1        4        0
    //    simd4        4        8        0
    // Totals...
    // yes simd       22       43        0
    //  no simd       36       75        0
    fn geometric_quotient(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiCircleRotor::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, scalar
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                + f32::powi(other[scalar], 2)
                - f32::powi(other[e45], 2),
        );
        let geometric_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (geometric_product.group0().zxy() * self.group0().yzx()) - (geometric_product.group0().yzx() * self.group0().zxy()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (geometric_product[e41] * self[e3215]) + (geometric_product[e45] * self[e4235]),
                (geometric_product[e42] * self[e3215]) + (geometric_product[e45] * self[e4315]),
                (geometric_product[e43] * self[e3215]) + (geometric_product[e45] * self[e4125]),
                -(geometric_product[e23] * self[e4235]) - (geometric_product[e31] * self[e4315]) - (geometric_product[e12] * self[e4125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                geometric_product[e35] * self[e4315] * -1.0,
                geometric_product[e15] * self[e4125] * -1.0,
                geometric_product[e25] * self[e4235] * -1.0,
                geometric_product[e43] * self[e4125],
            ]) + (self.group0().zxyy() * geometric_product.group2().yzx().with_w(geometric_product[e42]))
                + (self.group0().wwwx() * geometric_product.group1().xyz().with_w(geometric_product[e41])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (geometric_product[e31] * self[e4125]) + (geometric_product[scalar] * self[e4235]),
                (geometric_product[e12] * self[e4235]) + (geometric_product[scalar] * self[e4315]),
                (geometric_product[e23] * self[e4315]) + (geometric_product[scalar] * self[e4125]),
                -(geometric_product[e15] * self[e4235]) - (geometric_product[e25] * self[e4315]) - (geometric_product[e35] * self[e4125]),
            ]) + (Simd32x4::from(self[e3215]) * geometric_product.group0().with_w(geometric_product[scalar]))
                - (geometric_product.group1().zxyw() * self.group0().yzxw()),
        );
    }
}
impl GeometricQuotient<AntiDipoleInversion> for Plane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       26       43        0
    //    simd3        0        2        0
    //    simd4        7       12        0
    // Totals...
    // yes simd       33       57        0
    //  no simd       54       97        0
    fn geometric_quotient(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e4
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125])
                - 2.0 * (other[e4] * other[e5]),
        );
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e4
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e1, e2, e3, e5
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                -(geometric_product[e431] * self[e4125]) - (geometric_product[e4] * self[e4235]),
                -(geometric_product[e412] * self[e4235]) - (geometric_product[e4] * self[e4315]),
                -(geometric_product[e423] * self[e4315]) - (geometric_product[e4] * self[e4125]),
                (geometric_product[e1] * self[e4235]) + (geometric_product[e2] * self[e4315]) + (geometric_product[e3] * self[e4125]),
            ]) + (self.group0().yzxw() * geometric_product.group0().zxy().with_w(geometric_product[e4])),
            // e415, e425, e435, e321
            Simd32x4::from([
                geometric_product[e2] * self[e4125] * -1.0,
                geometric_product[e3] * self[e4235] * -1.0,
                geometric_product[e1] * self[e4315] * -1.0,
                geometric_product[e435] * self[e4125],
            ]) + (self.group0().yzxy() * geometric_product.group3().zxy().with_w(geometric_product[e425]))
                + (self.group0().wwwx() * geometric_product.group0().with_w(geometric_product[e415]))
                - (self.group0() * geometric_product.group1().www().with_w(geometric_product[e4])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (geometric_product[e315] * self[e4125]) + (geometric_product[e1] * self[e3215]) + (geometric_product[e5] * self[e4235]),
                (geometric_product[e125] * self[e4235]) + (geometric_product[e2] * self[e3215]) + (geometric_product[e5] * self[e4315]),
                (geometric_product[e235] * self[e4315]) + (geometric_product[e3] * self[e3215]) + (geometric_product[e5] * self[e4125]),
                -(geometric_product[e315] * self[e4315]) - (geometric_product[e125] * self[e4125]),
            ]) + (Simd32x4::from(self[e3215]) * geometric_product.group1())
                - (geometric_product.group2().zxyx() * self.group0().yzxx()),
            // e1, e2, e3, e4
            Simd32x4::from([
                -(geometric_product[e423] * self[e3215]) - (geometric_product[e425] * self[e4125]),
                -(geometric_product[e431] * self[e3215]) - (geometric_product[e435] * self[e4235]),
                -(geometric_product[e412] * self[e3215]) - (geometric_product[e415] * self[e4315]),
                (geometric_product[e431] * self[e4315]) + (geometric_product[e412] * self[e4125]),
            ]) + (self.group0().yzxx() * geometric_product.group1().zxy().with_w(geometric_product[e423])),
        );
    }
}
impl GeometricQuotient<AntiDualNum> for Plane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd2        0        1        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        5        0
    //  no simd        0       18        0
    fn geometric_quotient(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDualNum::from_groups(/* e3215, scalar */ Simd32x2::from(f32::powi(other[scalar], -2)) * other.group0());
        return Flector::from_groups(
            // e15, e25, e35, e45
            geometric_product.group0().xx().with_zw(geometric_product[e3215], 0.0)
                * Simd32x3::from(1.0).with_w(0.0)
                * self.group0().xyz().with_w(0.0)
                * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(geometric_product[scalar]) * self.group0(),
        );
    }
}
impl GeometricQuotient<AntiFlatPoint> for Plane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        6        0
    //    simd4        2        6        0
    // Totals...
    // yes simd        3       12        0
    //  no simd        9       30        0
    fn geometric_quotient(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlatPoint::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(f32::powi(other[e321], -2)) * Simd32x4::from([other[e235] * -1.0, other[e315] * -1.0, other[e125] * -1.0, other[e321] * -1.0]),
        );
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x3::from(1.0).with_w(0.0) * geometric_product.group0().www().with_w(0.0) * self.group0().xyz().with_w(0.0) * Simd32x4::from([-1.0, -1.0, -1.0, 0.0]),
            // e235, e315, e125, e5
            (geometric_product.group0().yzxw() * self.group0().zxyw())
                + Simd32x3::from(0.0).with_w(-(geometric_product[e315] * self[e4315]) - (geometric_product[e125] * self[e4125]))
                - (geometric_product.group0().zxyx() * self.group0().yzxx()),
        );
    }
}
impl GeometricQuotient<AntiFlector> for Plane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       16        0
    //    simd4        3        6        0
    // Totals...
    // yes simd       14       22        0
    //  no simd       23       40        0
    fn geometric_quotient(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiFlector::from_groups(/* e235, e315, e125, e321 */ other.group0() * Simd32x4::from(-1.0), /* e1, e2, e3, e5 */ other.group1());
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2),
        );
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e1, e2, e3, e5
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                -(geometric_product[e321] * self[e4235]) - (geometric_product[e2] * self[e4125]),
                -(geometric_product[e321] * self[e4315]) - (geometric_product[e3] * self[e4235]),
                -(geometric_product[e321] * self[e4125]) - (geometric_product[e1] * self[e4315]),
                (geometric_product[e2] * self[e4315]) + (geometric_product[e3] * self[e4125]),
            ]) + (geometric_product.group1().zxyx() * self.group0().yzxx()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (geometric_product[e1] * self[e3215]) + (geometric_product[e5] * self[e4235]),
                (geometric_product[e2] * self[e3215]) + (geometric_product[e5] * self[e4315]),
                (geometric_product[e3] * self[e3215]) + (geometric_product[e5] * self[e4125]),
                -(geometric_product[e315] * self[e4315]) - (geometric_product[e125] * self[e4125]),
            ]) + (geometric_product.group0().yzxw() * self.group0().zxyw())
                - (geometric_product.group0().zxyx() * self.group0().yzxx()),
        );
    }
}
impl GeometricQuotient<AntiLine> for Plane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       13        0
    //    simd3        0        4        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        9       19        0
    //  no simd       15       33        0
    fn geometric_quotient(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiLine::from_groups(
            // e23, e31, e12
            other.group0() * Simd32x3::from(-1.0),
            // e15, e25, e35
            other.group1() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(/* scalar */ f32::powi(other[e23], 2) + f32::powi(other[e31], 2) + f32::powi(other[e12], 2));
        let geometric_product = AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e15, e25, e35
            Simd32x3::from(other_2[scalar]) * reverse.group1(),
        );
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (geometric_product[e23] * self[e3215]) + (geometric_product[e25] * self[e4125]),
                (geometric_product[e31] * self[e3215]) + (geometric_product[e35] * self[e4235]),
                (geometric_product[e12] * self[e3215]) + (geometric_product[e15] * self[e4315]),
                -(geometric_product[e31] * self[e4315]) - (geometric_product[e12] * self[e4125]),
            ]) - (self.group0().yzxx() * geometric_product.group1().zxy().with_w(geometric_product[e23])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                geometric_product[e31] * self[e4125],
                geometric_product[e12] * self[e4235],
                geometric_product[e23] * self[e4315],
                -(geometric_product[e25] * self[e4315]) - (geometric_product[e35] * self[e4125]),
            ]) - (self.group0().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e15])),
        );
    }
}
impl GeometricQuotient<AntiMotor> for Plane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       16        0
    //    simd4        3        7        0
    // Totals...
    // yes simd       14       23        0
    //  no simd       23       44        0
    fn geometric_quotient(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, e3215
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e23], 2) + f32::powi(other[e31], 2) + f32::powi(other[e12], 2) + f32::powi(other[scalar], 2),
        );
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e15, e25, e35, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (geometric_product[e23] * self[e3215]) + (geometric_product[e25] * self[e4125]) + (geometric_product[e3215] * self[e4235]),
                (geometric_product[e31] * self[e3215]) + (geometric_product[e35] * self[e4235]) + (geometric_product[e3215] * self[e4315]),
                (geometric_product[e12] * self[e3215]) + (geometric_product[e15] * self[e4315]) + (geometric_product[e3215] * self[e4125]),
                -(geometric_product[e31] * self[e4315]) - (geometric_product[e12] * self[e4125]),
            ]) - (self.group0().yzxx() * geometric_product.group1().zxy().with_w(geometric_product[e23])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                geometric_product[scalar] * self[e4235],
                geometric_product[scalar] * self[e4315],
                geometric_product[scalar] * self[e4125],
                -(geometric_product[e25] * self[e4315]) - (geometric_product[e35] * self[e4125]),
            ]) + (geometric_product.group0().yzxw() * self.group0().zxyw())
                - (self.group0().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e15])),
        );
    }
}
impl GeometricQuotient<AntiPlane> for Plane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        8        0
    //    simd3        1        2        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        5       12        0
    //  no simd       10       22        0
    fn geometric_quotient(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiPlane::from_groups(
            // e1, e2, e3, e5
            Simd32x4::from(f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)) * other.group0(),
        );
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                geometric_product[e2] * self[e4125] * -1.0,
                geometric_product[e3] * self[e4235] * -1.0,
                geometric_product[e1] * self[e4315] * -1.0,
                (geometric_product[e2] * self[e4315]) + (geometric_product[e3] * self[e4125]),
            ]) + (geometric_product.group0().zxyx() * self.group0().yzxx()),
            // e235, e315, e125, e5
            ((Simd32x3::from(geometric_product[e5]) * self.group0().xyz()) + (Simd32x3::from(self[e3215]) * geometric_product.group0().xyz())).with_w(0.0),
        );
    }
}
impl GeometricQuotient<AntiScalar> for Plane {
    type Output = AntiPlane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        1
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        3        1
    //  no simd        0        9        1
    fn geometric_quotient(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiPlane::from_groups(
            // e1, e2, e3, e5
            Simd32x4::from(1.0 / other[e12345] * -1.0) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricQuotient<Circle> for Plane {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       23        0
    //    simd3        1        6        0
    //    simd4        6        8        0
    // Totals...
    // yes simd       14       37        0
    //  no simd       34       73        0
    fn geometric_quotient(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let reverse = Circle::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125
            other.group2() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group2(),
        );
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (geometric_product.group0().zxy() * self.group0().yzx()) - (geometric_product.group0().yzx() * self.group0().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                geometric_product[e321] * self[e4235] * -1.0,
                geometric_product[e321] * self[e4315] * -1.0,
                geometric_product[e321] * self[e4125] * -1.0,
                (geometric_product[e425] * self[e4315]) + (geometric_product[e435] * self[e4125]),
            ]) + (self.group0().wwwx() * geometric_product.group0().with_w(geometric_product[e415])),
            // e235, e315, e125, e4
            Simd32x4::from([
                geometric_product[e125] * self[e4315] * -1.0,
                geometric_product[e235] * self[e4125] * -1.0,
                geometric_product[e315] * self[e4235] * -1.0,
                geometric_product[e412] * self[e4125],
            ]) + (self.group0().zxyx() * geometric_product.group2().yzx().with_w(geometric_product[e423]))
                + (self.group0().wwwy() * geometric_product.group1().xyz().with_w(geometric_product[e431])),
            // e1, e2, e3, e5
            (geometric_product.group1().zxyw() * self.group0().yzxw()) + Simd32x3::from(0.0).with_w(geometric_product[e125] * self[e4125] * -1.0)
                - (self.group0().zxyy() * geometric_product.group1().yzx().with_w(geometric_product[e315]))
                - (self.group0().wwwx() * geometric_product.group0().with_w(geometric_product[e235])),
        );
    }
}
impl GeometricQuotient<CircleRotor> for Plane {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       22        0
    //    simd3        1        4        0
    //    simd4        7       11        0
    // Totals...
    // yes simd       16       37        0
    //  no simd       39       78        0
    fn geometric_quotient(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let reverse = CircleRotor::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e12345
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - f32::powi(other[e12345], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
        );
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (geometric_product.group0().zxy() * self.group0().yzx()) - (geometric_product.group0().yzx() * self.group0().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                geometric_product[e321] * self[e4235] * -1.0,
                geometric_product[e321] * self[e4315] * -1.0,
                geometric_product[e321] * self[e4125] * -1.0,
                (geometric_product[e425] * self[e4315]) + (geometric_product[e435] * self[e4125]),
            ]) + (self.group0().wwwx() * geometric_product.group0().with_w(geometric_product[e415])),
            // e235, e315, e125, e4
            Simd32x4::from([
                geometric_product[e125] * self[e4315] * -1.0,
                geometric_product[e235] * self[e4125] * -1.0,
                geometric_product[e315] * self[e4235] * -1.0,
                geometric_product[e412] * self[e4125],
            ]) + (self.group0().zxyy() * geometric_product.group2().yzx().with_w(geometric_product[e431]))
                + (self.group0().wwwx() * geometric_product.group1().xyz().with_w(geometric_product[e423])),
            // e1, e2, e3, e5
            (geometric_product.group1().zxyw() * self.group0().yzxw()) + Simd32x3::from(0.0).with_w(geometric_product[e12345] * self[e3215])
                - (geometric_product.group2().wwwz() * self.group0().xyzz())
                - (self.group0().zxyy() * geometric_product.group1().yzx().with_w(geometric_product[e315]))
                - (self.group0().wwwx() * geometric_product.group0().with_w(geometric_product[e235])),
        );
    }
}
impl GeometricQuotient<Dipole> for Plane {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       31        0
    //    simd3        1        6        0
    //    simd4        3        5        0
    // Totals...
    // yes simd       20       42        0
    //  no simd       31       69        0
    fn geometric_quotient(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let reverse = Dipole::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35
            other.group2() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2),
        );
        let geometric_product = Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35
            Simd32x3::from(other_2[scalar]) * reverse.group2(),
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (geometric_product.group0().zxy() * self.group0().yzx()) - (geometric_product.group0().yzx() * self.group0().zxy()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (geometric_product[e41] * self[e3215]) + (geometric_product[e45] * self[e4235]),
                (geometric_product[e42] * self[e3215]) + (geometric_product[e45] * self[e4315]),
                (geometric_product[e43] * self[e3215]) + (geometric_product[e45] * self[e4125]),
                -(geometric_product[e23] * self[e4235]) - (geometric_product[e31] * self[e4315]) - (geometric_product[e12] * self[e4125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                geometric_product[e35] * self[e4315] * -1.0,
                geometric_product[e15] * self[e4125] * -1.0,
                geometric_product[e25] * self[e4235] * -1.0,
                geometric_product[e43] * self[e4125],
            ]) + (self.group0().zxyx() * geometric_product.group2().yzx().with_w(geometric_product[e41]))
                + (self.group0().wwwy() * geometric_product.group1().xyz().with_w(geometric_product[e42])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (geometric_product[e41] * self[e3215]) + (geometric_product[e31] * self[e4125]),
                (geometric_product[e42] * self[e3215]) + (geometric_product[e12] * self[e4235]),
                (geometric_product[e43] * self[e3215]) + (geometric_product[e23] * self[e4315]),
                -(geometric_product[e45] * self[e3215]) - (geometric_product[e25] * self[e4315]) - (geometric_product[e35] * self[e4125]),
            ]) - (self.group0().yzxx() * geometric_product.group1().zxy().with_w(geometric_product[e15])),
        );
    }
}
impl GeometricQuotient<DipoleInversion> for Plane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       22       33        0
    //    simd3        0        2        0
    //    simd4        9       14        0
    // Totals...
    // yes simd       31       49        0
    //  no simd       58       95        0
    fn geometric_quotient(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let reverse = DipoleInversion::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + 2.0 * (other[e1234] * other[e3215])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2),
        );
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (self.group0().yzxw() * geometric_product.group0().zxy().with_w(geometric_product[e1234])) + Simd32x3::from(0.0).with_w(geometric_product[e4125] * self[e4125] * -1.0)
                - (self.group0().xyzy() * geometric_product.group2().www().with_w(geometric_product[e4315]))
                - (self.group0().zxyx() * geometric_product.group0().yzx().with_w(geometric_product[e4235])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (geometric_product[e45] * self[e4235]) + (geometric_product[e4315] * self[e4125]),
                (geometric_product[e45] * self[e4315]) + (geometric_product[e4125] * self[e4235]),
                (geometric_product[e45] * self[e4125]) + (geometric_product[e4235] * self[e4315]),
                -(geometric_product[e31] * self[e4315]) - (geometric_product[e12] * self[e4125]),
            ]) + (Simd32x4::from(self[e3215]) * geometric_product.group0().with_w(geometric_product[e1234]))
                - (self.group0().yzxx() * geometric_product.group3().zxy().with_w(geometric_product[e23])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(geometric_product[e35] * self[e4315]) - (geometric_product[e4235] * self[e3215]),
                -(geometric_product[e15] * self[e4125]) - (geometric_product[e4315] * self[e3215]),
                -(geometric_product[e25] * self[e4235]) - (geometric_product[e4125] * self[e3215]),
                0.0,
            ]) + (self.group0().xyzz() * geometric_product.group3().www().with_w(geometric_product[e43]))
                + (self.group0().zxyy() * geometric_product.group2().yzx().with_w(geometric_product[e42]))
                + (self.group0().wwwx() * geometric_product.group1().xyz().with_w(geometric_product[e41])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (geometric_product[e41] * self[e3215]) + (geometric_product[e31] * self[e4125]),
                (geometric_product[e42] * self[e3215]) + (geometric_product[e12] * self[e4235]),
                (geometric_product[e43] * self[e3215]) + (geometric_product[e23] * self[e4315]),
                -(geometric_product[e15] * self[e4235]) - (geometric_product[e25] * self[e4315]) - (geometric_product[e35] * self[e4125]),
            ]) - (geometric_product.group1().zxyw() * self.group0().yzxw()),
        );
    }
}
impl GeometricQuotient<DualNum> for Plane {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd2        0        1        0
    //    simd4        0        5        0
    // Totals...
    // yes simd        0        7        0
    //  no simd        0       23        0
    fn geometric_quotient(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DualNum::from_groups(/* e5, e12345 */ Simd32x2::from(f32::powi(other[e12345], -2) * -1.0) * other.group0());
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            geometric_product.group0().xx().with_zw(geometric_product[e5], 0.0)
                * Simd32x3::from(1.0).with_w(0.0)
                * self.group0().xyz().with_w(0.0)
                * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
            // e1, e2, e3, e5
            Simd32x4::from(geometric_product[e12345]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricQuotient<FlatPoint> for Plane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2       11        0
    //    simd4        1        5        0
    // Totals...
    // yes simd        3       16        0
    //  no simd        6       31        0
    fn geometric_quotient(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = FlatPoint::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(f32::powi(other[e45], -2) * -1.0) * Simd32x4::from([other[e15] * -1.0, other[e25] * -1.0, other[e35] * -1.0, other[e45] * -1.0]),
        );
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x3::from(1.0).with_w(0.0) * geometric_product.group0().www().with_w(0.0) * self.group0().xyz().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                geometric_product[e25] * self[e4125],
                geometric_product[e35] * self[e4235],
                geometric_product[e15] * self[e4315],
                -(geometric_product[e25] * self[e4315]) - (geometric_product[e35] * self[e4125]) - (geometric_product[e45] * self[e3215]),
            ]) - (geometric_product.group0().zxyx() * self.group0().yzxx()),
        );
    }
}
impl GeometricQuotient<Flector> for Plane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       16        0
    //    simd4        3        6        0
    // Totals...
    // yes simd       14       22        0
    //  no simd       23       40        0
    fn geometric_quotient(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let reverse = Flector::from_groups(
            // e15, e25, e35, e45
            other.group0() * Simd32x4::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group1(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            -f32::powi(other[e45], 2) - f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2),
        );
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (geometric_product[e45] * self[e4235]) + (geometric_product[e4315] * self[e4125]),
                (geometric_product[e45] * self[e4315]) + (geometric_product[e4125] * self[e4235]),
                (geometric_product[e45] * self[e4125]) + (geometric_product[e4235] * self[e4315]),
                -(geometric_product[e4315] * self[e4315]) - (geometric_product[e4125] * self[e4125]),
            ]) - (geometric_product.group1().zxyx() * self.group0().yzxx()),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (geometric_product[e25] * self[e4125]) + (geometric_product[e3215] * self[e4235]),
                (geometric_product[e35] * self[e4235]) + (geometric_product[e3215] * self[e4315]),
                (geometric_product[e15] * self[e4315]) + (geometric_product[e3215] * self[e4125]),
                -(geometric_product[e35] * self[e4125]) - (geometric_product[e45] * self[e3215]),
            ]) - (geometric_product.group0().zxyx() * self.group0().yzxx())
                - (self.group0().wwwy() * geometric_product.group1().xyz().with_w(geometric_product[e25])),
        );
    }
}
impl GeometricQuotient<Line> for Plane {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       12        0
    //    simd3        0        4        0
    //    simd4        3        3        0
    // Totals...
    // yes simd        6       19        0
    //  no simd       15       36        0
    fn geometric_quotient(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let reverse = Line::from_groups(
            // e415, e425, e435
            other.group0() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group1() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(/* scalar */ -f32::powi(other[e415], 2) - f32::powi(other[e425], 2) - f32::powi(other[e435], 2));
        let geometric_product = Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group1(),
        );
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                geometric_product[e125] * self[e4315] * -1.0,
                geometric_product[e235] * self[e4125] * -1.0,
                geometric_product[e315] * self[e4235] * -1.0,
                geometric_product[e435] * self[e4125],
            ]) + (self.group0().zxyy() * geometric_product.group1().yzx().with_w(geometric_product[e425]))
                + (self.group0().wwwx() * geometric_product.group0().with_w(geometric_product[e415])),
            // e1, e2, e3, e5
            Simd32x4::from([
                geometric_product[e435] * self[e4315],
                geometric_product[e415] * self[e4125],
                geometric_product[e425] * self[e4235],
                -(geometric_product[e315] * self[e4315]) - (geometric_product[e125] * self[e4125]),
            ]) - (self.group0().zxyx() * geometric_product.group0().yzx().with_w(geometric_product[e235])),
        );
    }
}
impl GeometricQuotient<Motor> for Plane {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        8        0
    //    simd4        6       10        0
    // Totals...
    // yes simd        9       18        0
    //  no simd       27       48        0
    fn geometric_quotient(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let reverse = Motor::from_groups(
            // e415, e425, e435, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            -f32::powi(other[e415], 2) - f32::powi(other[e425], 2) - f32::powi(other[e435], 2) - f32::powi(other[e12345], 2),
        );
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e235, e315, e125, e5
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                geometric_product[e125] * self[e4315] * -1.0,
                geometric_product[e235] * self[e4125] * -1.0,
                geometric_product[e315] * self[e4235] * -1.0,
                0.0,
            ]) + (geometric_product.group0().xyzx() * self.group0().wwwx())
                + (self.group0().xyzz() * geometric_product.group1().www().with_w(geometric_product[e435]))
                + (self.group0().zxyy() * geometric_product.group1().yzx().with_w(geometric_product[e425])),
            // e1, e2, e3, e5
            (geometric_product.group0().zxyw() * self.group0().yzxw()) + Simd32x3::from(0.0).with_w(geometric_product[e125] * self[e4125] * -1.0)
                - (self.group0().xyzy() * geometric_product.group0().www().with_w(geometric_product[e315]))
                - (self.group0().zxyx() * geometric_product.group0().yzx().with_w(geometric_product[e235])),
        );
    }
}
impl GeometricQuotient<MultiVector> for Plane {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       68        0
    //    simd2        1        2        0
    //    simd3       11       24        0
    //    simd4        9       14        0
    // Totals...
    // yes simd       69      108        0
    //  no simd      119      200        0
    fn geometric_quotient(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let reverse = MultiVector::from_groups(
            // scalar, e12345
            other.group0(),
            // e1, e2, e3, e4
            other.group1(),
            // e5
            other[e5],
            // e15, e25, e35, e45
            other.group3() * Simd32x4::from(-1.0),
            // e41, e42, e43
            other.group4() * Simd32x3::from(-1.0),
            // e23, e31, e12
            other.group5() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group6() * Simd32x4::from(-1.0),
            // e423, e431, e412
            other.group7() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group8() * Simd32x3::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group9(),
            // e1234
            other[e1234],
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e15] * other[e41])
                + 2.0 * (other[e25] * other[e42])
                + 2.0 * (other[e35] * other[e43])
                + 2.0 * (other[e3215] * other[e1234])
                + f32::powi(other[scalar], 2)
                + f32::powi(other[e1], 2)
                + f32::powi(other[e2], 2)
                + f32::powi(other[e3], 2)
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                + f32::powi(other[e321], 2)
                - f32::powi(other[e12345], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2)
                - 2.0 * (other[e4] * other[e5])
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(other_2[scalar]) * reverse.group0(),
            // e1, e2, e3, e4
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e5
            reverse[e5] * other_2[scalar],
            // e15, e25, e35, e45
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group4(),
            // e23, e31, e12
            Simd32x3::from(other_2[scalar]) * reverse.group5(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group6(),
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group7(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group8(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group9(),
            // e1234
            reverse[e1234] * other_2[scalar],
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                -(geometric_product[e4235] * self[e4235]) - (geometric_product[e4315] * self[e4315]) - (geometric_product[e4125] * self[e4125]),
                (geometric_product[e2] * self[e4315]) + (geometric_product[e3] * self[e4125]) + (geometric_product[e4] * self[e3215]),
            ]) + (Simd32x2::from([geometric_product[e1234], geometric_product[e1]]) * self.group0().wx()),
            // e1, e2, e3, e4
            Simd32x4::from([
                -(geometric_product[e12345] * self[e4235]) - (geometric_product[e425] * self[e4125]) - (geometric_product[e423] * self[e3215]),
                -(geometric_product[e12345] * self[e4315]) - (geometric_product[e435] * self[e4235]) - (geometric_product[e431] * self[e3215]),
                -(geometric_product[e12345] * self[e4125]) - (geometric_product[e415] * self[e4315]) - (geometric_product[e412] * self[e3215]),
                (geometric_product[e431] * self[e4315]) + (geometric_product[e412] * self[e4125]),
            ]) + (self.group0().yzxx() * geometric_product.group6().zxy().with_w(geometric_product[e423])),
            // e5
            (geometric_product[e12345] * self[e3215]) + (geometric_product[e321] * self[e3215])
                - (geometric_product[e235] * self[e4235])
                - (geometric_product[e315] * self[e4315])
                - (geometric_product[e125] * self[e4125]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (geometric_product[e25] * self[e4125]) + (geometric_product[e3215] * self[e4235]),
                (geometric_product[e35] * self[e4235]) + (geometric_product[e3215] * self[e4315]),
                (geometric_product[e15] * self[e4315]) + (geometric_product[e3215] * self[e4125]),
                geometric_product[e12] * self[e4125] * -1.0,
            ]) + (geometric_product.group5() * self.group0().www()).with_w(geometric_product[e1234] * self[e3215])
                - (self.group0().yzxx() * geometric_product.group3().zxy().with_w(geometric_product[e23]))
                - (self.group0().wwwy() * geometric_product.group9().xyz().with_w(geometric_product[e31])),
            // e41, e42, e43
            (geometric_product.group4().zxy() * self.group0().yzx())
                - (Simd32x3::from(geometric_product[e1234]) * self.group0().xyz())
                - (geometric_product.group4().yzx() * self.group0().zxy()),
            // e23, e31, e12
            (Simd32x3::from(geometric_product[e45]) * self.group0().xyz())
                + (Simd32x3::from(self[e3215]) * geometric_product.group4())
                + (geometric_product.group9().yzx() * self.group0().zxy())
                - (geometric_product.group9().zxy() * self.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                geometric_product[e321] * self[e4235] * -1.0,
                geometric_product[e321] * self[e4315] * -1.0,
                geometric_product[e321] * self[e4125] * -1.0,
                geometric_product[e435] * self[e4125],
            ]) + (self.group0().yzxy() * geometric_product.group1().zxy().with_w(geometric_product[e425]))
                + (self.group0().wwwx() * geometric_product.group7().with_w(geometric_product[e415]))
                - (geometric_product.group1().yzxw() * self.group0().zxyw()),
            // e423, e431, e412
            (geometric_product.group7().zxy() * self.group0().yzx())
                - (Simd32x3::from(geometric_product[e4]) * self.group0().xyz())
                - (geometric_product.group7().yzx() * self.group0().zxy()),
            // e235, e315, e125
            (Simd32x3::from(geometric_product[e5]) * self.group0().xyz())
                + (Simd32x3::from(self[e3215]) * geometric_product.group1().xyz())
                + (Simd32x3::from(self[e3215]) * geometric_product.group6().xyz())
                + (geometric_product.group8().yzx() * self.group0().zxy())
                - (geometric_product.group8().zxy() * self.group0().yzx()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (geometric_product[e41] * self[e3215]) + (geometric_product[e31] * self[e4125]),
                (geometric_product[e42] * self[e3215]) + (geometric_product[e12] * self[e4235]),
                (geometric_product[e43] * self[e3215]) + (geometric_product[e23] * self[e4315]),
                -(geometric_product[e25] * self[e4315]) - (geometric_product[e35] * self[e4125]) - (geometric_product[e45] * self[e3215]),
            ]) + (Simd32x4::from(geometric_product[scalar]) * self.group0())
                - (self.group0().yzxx() * geometric_product.group5().zxy().with_w(geometric_product[e15])),
            // e1234
            (geometric_product[e41] * self[e4235]) + (geometric_product[e42] * self[e4315]) + (geometric_product[e43] * self[e4125]),
        );
    }
}
impl GeometricQuotient<Plane> for Plane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        5        0
    //    simd3        1        2        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        5        9        0
    //  no simd       10       19        0
    fn geometric_quotient(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Plane::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(-f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2)) * other.group0(),
        );
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                geometric_product[e4315] * self[e4125],
                geometric_product[e4125] * self[e4235],
                geometric_product[e4235] * self[e4315],
                -(geometric_product[e4315] * self[e4315]) - (geometric_product[e4125] * self[e4125]),
            ]) - (geometric_product.group0().zxyx() * self.group0().yzxx()),
            // e15, e25, e35, e3215
            ((Simd32x3::from(geometric_product[e3215]) * self.group0().xyz()) - (Simd32x3::from(self[e3215]) * geometric_product.group0().xyz())).with_w(0.0),
        );
    }
}
impl GeometricQuotient<RoundPoint> for Plane {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        7        0
    //    simd3        1        4        0
    //    simd4        2        3        0
    // Totals...
    // yes simd        7       14        0
    //  no simd       15       31        0
    fn geometric_quotient(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2) - 2.0 * (other[e4] * other[e5]),
        );
        let geometric_product = RoundPoint::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from(other_2[scalar]) * other.group0(), /* e5 */ other[e5] * other_2[scalar]);
        return CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(geometric_product[e4]) * self.group0().xyz() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            ((self.group0().yzx() * geometric_product.group0().zxy()) - (self.group0().zxy() * geometric_product.group0().yzx()))
                .with_w(self[e3215] * geometric_product[e4] * -1.0),
            // e235, e315, e125, e12345
            (self.group0().xyzx() * Simd32x3::from(geometric_product[e5]).with_w(geometric_product[e1]))
                + (self.group0().wwwy() * geometric_product.group0().xyzy())
                + Simd32x3::from(0.0).with_w((self[e4125] * geometric_product[e3]) + (self[e3215] * geometric_product[e4])),
        );
    }
}
impl GeometricQuotient<Scalar> for Plane {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        0        1
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        1        1
    //  no simd        0        4        1
    fn geometric_quotient(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from(1.0 / other[scalar]) * self.group0());
    }
}
impl GeometricQuotient<Sphere> for Plane {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        6        0
    //    simd3        1        4        0
    //    simd4        2        3        0
    // Totals...
    // yes simd        7       13        0
    //  no simd       15       30        0
    fn geometric_quotient(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e3215] * other[e1234]) - f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2),
        );
        let geometric_product = Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * other.group0(),
            // e1234
            other_2[scalar] * other[e1234],
        );
        return AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(geometric_product[e1234]) * self.group0().xyz() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            ((self.group0().zxy() * geometric_product.group0().yzx()) - (self.group0().yzx() * geometric_product.group0().zxy())).with_w(self[e3215] * geometric_product[e1234]),
            // e15, e25, e35, scalar
            (self.group0() * geometric_product.group0().www().with_w(geometric_product[e1234]))
                + Simd32x3::from(0.0).with_w(-(self[e4315] * geometric_product[e4315]) - (self[e4125] * geometric_product[e4125]))
                - (self.group0().wwwx() * geometric_product.group0().xyzx()),
        );
    }
}
impl GeometricQuotient<VersorEven> for Plane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       27       43        0
    //    simd4        8       15        0
    // Totals...
    // yes simd       35       58        0
    //  no simd       59      103        0
    fn geometric_quotient(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let reverse = VersorEven::from_groups(
            // e423, e431, e412, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e5
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e4
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)
                - f32::powi(other[e12345], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125])
                - 2.0 * (other[e5] * other[e4]),
        );
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e5
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e1, e2, e3, e4
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                -(self[e4235] * geometric_product[e4]) - (self[e4125] * geometric_product[e431]),
                -(self[e4235] * geometric_product[e412]) - (self[e4315] * geometric_product[e4]),
                -(self[e4315] * geometric_product[e423]) - (self[e4125] * geometric_product[e4]),
                (self[e4315] * geometric_product[e2]) + (self[e4125] * geometric_product[e3]) + (self[e3215] * geometric_product[e4]),
            ]) + (self.group0().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e1])),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e4125] * geometric_product[e2] * -1.0,
                self[e4315] * geometric_product[e321] * -1.0,
                self[e4125] * geometric_product[e321] * -1.0,
                self[e4125] * geometric_product[e435],
            ]) + (self.group0().yzxx() * geometric_product.group3().zxy().with_w(geometric_product[e415]))
                + (self.group0().wwwy() * geometric_product.group0().xyz().with_w(geometric_product[e425]))
                - (Simd32x4::from([geometric_product[e321], geometric_product[e3], geometric_product[e1], geometric_product[e4]]) * self.group0().xxyw()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e3215] * geometric_product[e415]) + (self[e3215] * geometric_product[e1]),
                (self[e3215] * geometric_product[e425]) + (self[e3215] * geometric_product[e2]),
                (self[e3215] * geometric_product[e435]) + (self[e3215] * geometric_product[e3]),
                -(self[e4315] * geometric_product[e315]) - (self[e4125] * geometric_product[e125]),
            ]) + (self.group0().xxyw() * geometric_product.group2().wzx().with_w(geometric_product[e12345]))
                + (self.group0().zyzw() * geometric_product.group2().yww().with_w(geometric_product[e321]))
                - (self.group0().yzxx() * geometric_product.group2().zxyx()),
            // e1, e2, e3, e4
            Simd32x4::from([
                -(self[e4235] * geometric_product[e12345]) - (self[e4125] * geometric_product[e425]) - (self[e3215] * geometric_product[e423]),
                -(self[e4235] * geometric_product[e435]) - (self[e4315] * geometric_product[e12345]) - (self[e3215] * geometric_product[e431]),
                -(self[e4315] * geometric_product[e415]) - (self[e4125] * geometric_product[e12345]) - (self[e3215] * geometric_product[e412]),
                (self[e4315] * geometric_product[e431]) + (self[e4125] * geometric_product[e412]),
            ]) + (self.group0().yzxx() * geometric_product.group1().zxy().with_w(geometric_product[e423])),
        );
    }
}
impl GeometricQuotient<VersorOdd> for Plane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       23       33        0
    //    simd4       10       17        0
    // Totals...
    // yes simd       33       50        0
    //  no simd       63      101        0
    fn geometric_quotient(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let reverse = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + 2.0 * (other[e1234] * other[e3215])
                + f32::powi(other[scalar], 2)
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2),
        );
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (self.group0().yzxw() * geometric_product.group0().zxy().with_w(geometric_product[e1234])) + Simd32x3::from(0.0).with_w(self[e4125] * geometric_product[e4125] * -1.0)
                - (Simd32x4::from([geometric_product[e42], geometric_product[e1234], geometric_product[e1234], geometric_product[e4315]]) * self.group0().zyzy())
                - (Simd32x4::from([geometric_product[e1234], geometric_product[e43], geometric_product[e41], geometric_product[e4235]]) * self.group0().xxyx()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e4125] * geometric_product[e4315]) + (self[e3215] * geometric_product[e41]),
                (self[e4315] * geometric_product[e45]) + (self[e3215] * geometric_product[e42]),
                (self[e4125] * geometric_product[e45]) + (self[e3215] * geometric_product[e43]),
                -(self[e4315] * geometric_product[e31]) - (self[e4125] * geometric_product[e12]),
            ]) + (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], geometric_product[e1234]]) * self.group0().xxyw())
                - (self.group0().yzxx() * geometric_product.group3().zxy().with_w(geometric_product[e23])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(self[e4315] * geometric_product[e35]) - (self[e3215] * geometric_product[e4235]),
                -(self[e4125] * geometric_product[e15]) - (self[e3215] * geometric_product[e4315]),
                -(self[e4235] * geometric_product[e25]) - (self[e3215] * geometric_product[e4125]),
                0.0,
            ]) + (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], geometric_product[e42]]) * self.group0().zyzy())
                + (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e41]]) * self.group0().xxyx())
                + (self.group0().wwwz() * geometric_product.group1().xyz().with_w(geometric_product[e43])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e4125] * geometric_product[e31]) + (self[e3215] * geometric_product[e41]),
                (self[e4315] * geometric_product[scalar]) + (self[e3215] * geometric_product[e42]),
                (self[e4125] * geometric_product[scalar]) + (self[e3215] * geometric_product[e43]),
                -(self[e4315] * geometric_product[e25]) - (self[e4125] * geometric_product[e35]) - (self[e3215] * geometric_product[e45]),
            ]) + (Simd32x4::from([geometric_product[scalar], geometric_product[e12], geometric_product[e23], geometric_product[scalar]]) * self.group0().xxyw())
                - (self.group0().yzxx() * geometric_product.group1().zxy().with_w(geometric_product[e15])),
        );
    }
}
impl std::ops::Div<GeometricQuotientInfix> for RoundPoint {
    type Output = GeometricQuotientInfixPartial<RoundPoint>;
    fn div(self, _rhs: GeometricQuotientInfix) -> Self::Output {
        GeometricQuotientInfixPartial(self)
    }
}
impl GeometricQuotient<AntiCircleRotor> for RoundPoint {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       23        0
    //    simd3        2        5        0
    //    simd4        8       12        0
    // Totals...
    // yes simd       22       40        0
    //  no simd       50       86        0
    fn geometric_quotient(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiCircleRotor::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, scalar
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                + f32::powi(other[scalar], 2)
                - f32::powi(other[e45], 2),
        );
        let geometric_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
        );
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[e4]) * geometric_product.group1().xyz()) + (geometric_product.group0().yzx() * self.group0().zxy())
                - (geometric_product.group0().zxy() * self.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (geometric_product[e41] * self[e5]) + (geometric_product[e15] * self[e4]),
                (geometric_product[e42] * self[e5]) + (geometric_product[e25] * self[e4]),
                (geometric_product[e43] * self[e5]) + (geometric_product[e35] * self[e4]),
                -(geometric_product[e31] * self[e2]) - (geometric_product[e12] * self[e3]),
            ]) - (geometric_product.group1().wwwx() * self.group0().xyzx()),
            // e235, e315, e125, e4
            (geometric_product.group1() * Simd32x3::from(self[e5]).with_w(self[e4]))
                + (geometric_product.group2().zxyw() * self.group0().yzxw())
                + Simd32x3::from(0.0).with_w(-(geometric_product[e42] * self[e2]) - (geometric_product[e43] * self[e3]))
                - (self.group0().zxyx() * geometric_product.group2().yzx().with_w(geometric_product[e41])),
            // e1, e2, e3, e5
            Simd32x4::from([
                geometric_product[e12] * self[e2] * -1.0,
                geometric_product[e23] * self[e3] * -1.0,
                geometric_product[e31] * self[e1] * -1.0,
                geometric_product[scalar] * self[e5],
            ]) + (geometric_product.group2().xyzy() * self.group0().wwwy())
                + (geometric_product.group2().wwwz() * self.group0().xyzz())
                + (self.group0().zxyx() * geometric_product.group1().yzx().with_w(geometric_product[e15]))
                - (Simd32x4::from(self[e5]) * geometric_product.group0().with_w(geometric_product[e45])),
        );
    }
}
impl GeometricQuotient<AntiDipoleInversion> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       21       37        0
    //    simd3        0        5        0
    //    simd4       12       15        0
    // Totals...
    // yes simd       33       57        0
    //  no simd       69      112        0
    fn geometric_quotient(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e4
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125])
                - 2.0 * (other[e4] * other[e5]),
        );
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e4
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e1, e2, e3, e5
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                geometric_product[e4] * self[e1] * -1.0,
                geometric_product[e4] * self[e2] * -1.0,
                geometric_product[e4] * self[e3] * -1.0,
                geometric_product[e3] * self[e3],
            ]) + (geometric_product.group3().xyzy() * self.group0().wwwy())
                + (self.group0().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e1]))
                - (Simd32x4::from(self[e4]) * geometric_product.group1().xyz().with_w(geometric_product[e5]))
                - (geometric_product.group0().yzx() * self.group0().zxy()).with_w(geometric_product[e4] * self[e5]),
            // e23, e31, e12, e45
            (geometric_product.group3().zxyw() * self.group0().yzxw())
                - (geometric_product.group1().wwwy() * self.group0().xyzy())
                - (self.group0().wwwz() * geometric_product.group2().xyz().with_w(geometric_product[e435]))
                - (Simd32x3::from(self[e5]) * geometric_product.group0()).with_w(geometric_product[e415] * self[e1])
                - (geometric_product.group3().yzx() * self.group0().zxy()).with_w(geometric_product[e4] * self[e5]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(geometric_product[e415] * self[e5]) - (geometric_product[e125] * self[e2]) - (geometric_product[e1] * self[e5]),
                -(geometric_product[e425] * self[e5]) - (geometric_product[e235] * self[e3]) - (geometric_product[e2] * self[e5]),
                -(geometric_product[e435] * self[e5]) - (geometric_product[e315] * self[e1]) - (geometric_product[e3] * self[e5]),
                (geometric_product[e412] * self[e3]) + (geometric_product[e321] * self[e4]),
            ]) + (self.group0().xyzy() * geometric_product.group3().www().with_w(geometric_product[e431]))
                + (self.group0().zxyx() * geometric_product.group2().yzx().with_w(geometric_product[e423])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (geometric_product[e425] * self[e3]) + (geometric_product[e235] * self[e4]),
                (geometric_product[e435] * self[e1]) + (geometric_product[e315] * self[e4]),
                (geometric_product[e415] * self[e2]) + (geometric_product[e125] * self[e4]),
                -(geometric_product[e315] * self[e2]) - (geometric_product[e125] * self[e3]),
            ]) - (Simd32x4::from(self[e5]) * geometric_product.group0().with_w(geometric_product[e321]))
                - (self.group0().yzxx() * geometric_product.group1().zxy().with_w(geometric_product[e235])),
        );
    }
}
impl GeometricQuotient<AntiDualNum> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd2        0        1        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0       16        0
    fn geometric_quotient(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDualNum::from_groups(/* e3215, scalar */ Simd32x2::from(f32::powi(other[scalar], -2)) * other.group0());
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x3::from(0.0).with_w(geometric_product[e3215] * self[e4]),
            // e415, e425, e435, e321
            Simd32x3::from(0.0).with_w(geometric_product[e3215] * self[e4]),
            // e235, e315, e125, e5
            geometric_product.group0().xx().with_zw(geometric_product[e3215], geometric_product[scalar])
                * self.group0().xyz().with_w(self[e5])
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e4
            Simd32x4::from(geometric_product[scalar]) * self.group0(),
        );
    }
}
impl GeometricQuotient<AntiFlatPoint> for RoundPoint {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        9        0
    //    simd3        2        5        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        5       15        0
    //  no simd        9       28        0
    fn geometric_quotient(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlatPoint::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(f32::powi(other[e321], -2)) * Simd32x4::from([other[e235] * -1.0, other[e315] * -1.0, other[e125] * -1.0, other[e321] * -1.0]),
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            (-(Simd32x3::from(geometric_product[e321]) * self.group0().xyz()) - (Simd32x3::from(self[e4]) * geometric_product.group0().xyz())).with_w(0.0),
            // e15, e25, e35, e1234
            ((geometric_product.group0().yzx() * self.group0().zxy()) - (geometric_product.group0().zxy() * self.group0().yzx())).with_w(geometric_product[e321] * self[e4]),
            // e4235, e4315, e4125, e3215
            (Simd32x3::from(self[e4]) * geometric_product.group0().xyz())
                .with_w(-(geometric_product[e235] * self[e1]) - (geometric_product[e315] * self[e2]) - (geometric_product[e125] * self[e3]) - (geometric_product[e321] * self[e5])),
        );
    }
}
impl GeometricQuotient<AntiFlector> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       10        0
    //    simd3        6       10        0
    //    simd4        0        3        0
    // Totals...
    // yes simd       15       23        0
    //  no simd       27       52        0
    fn geometric_quotient(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiFlector::from_groups(/* e235, e315, e125, e321 */ other.group0() * Simd32x4::from(-1.0), /* e1, e2, e3, e5 */ other.group1());
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2),
        );
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e1, e2, e3, e5
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x3::from(self[e4]) * geometric_product.group1().xyz())
                .with_w((geometric_product[e1] * self[e1]) + (geometric_product[e2] * self[e2]) + (geometric_product[e3] * self[e3]) - (geometric_product[e5] * self[e4])),
            // e23, e31, e12, e45
            ((geometric_product.group1().zxy() * self.group0().yzx())
                - (Simd32x3::from(geometric_product[e321]) * self.group0().xyz())
                - (Simd32x3::from(self[e4]) * geometric_product.group0().xyz())
                - (geometric_product.group1().yzx() * self.group0().zxy()))
            .with_w(geometric_product[e5] * self[e4]),
            // e15, e25, e35, e1234
            ((Simd32x3::from(geometric_product[e5]) * self.group0().xyz()) + (geometric_product.group0().yzx() * self.group0().zxy())
                - (Simd32x3::from(self[e5]) * geometric_product.group1().xyz())
                - (geometric_product.group0().zxy() * self.group0().yzx()))
            .with_w(geometric_product[e321] * self[e4]),
            // e4235, e4315, e4125, e3215
            (Simd32x3::from(self[e4]) * geometric_product.group0().xyz())
                .with_w(-(geometric_product[e235] * self[e1]) - (geometric_product[e315] * self[e2]) - (geometric_product[e125] * self[e3]) - (geometric_product[e321] * self[e5])),
        );
    }
}
impl GeometricQuotient<AntiLine> for RoundPoint {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       10        0
    //    simd3        0        9        0
    //    simd4        4        2        0
    // Totals...
    // yes simd        8       21        0
    //  no simd       20       45        0
    fn geometric_quotient(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiLine::from_groups(
            // e23, e31, e12
            other.group0() * Simd32x3::from(-1.0),
            // e15, e25, e35
            other.group1() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(/* scalar */ f32::powi(other[e23], 2) + f32::powi(other[e31], 2) + f32::powi(other[e12], 2));
        let geometric_product = AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e15, e25, e35
            Simd32x3::from(other_2[scalar]) * reverse.group1(),
        );
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[e4]) * geometric_product.group0(),
            // e415, e425, e435, e321
            (Simd32x3::from(self[e4]) * geometric_product.group1())
                .with_w(-(geometric_product[e23] * self[e1]) - (geometric_product[e31] * self[e2]) - (geometric_product[e12] * self[e3])),
            // e235, e315, e125, e4
            (Simd32x3::from(self[e5]) * geometric_product.group0()).with_w(0.0) + (geometric_product.group1().zxy() * self.group0().yzx()).with_w(0.0)
                - (geometric_product.group1().yzx() * self.group0().zxy()).with_w(0.0),
            // e1, e2, e3, e5
            Simd32x4::from([
                geometric_product[e12] * self[e2] * -1.0,
                geometric_product[e23] * self[e3] * -1.0,
                geometric_product[e31] * self[e1] * -1.0,
                geometric_product[e35] * self[e3],
            ]) + (self.group0().zxyx() * geometric_product.group0().yzx().with_w(geometric_product[e15]))
                + (self.group0().wwwy() * geometric_product.group1().with_w(geometric_product[e25])),
        );
    }
}
impl GeometricQuotient<AntiMotor> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       13        0
    //    simd3        3        5        0
    //    simd4        2        7        0
    // Totals...
    // yes simd       15       25        0
    //  no simd       27       56        0
    fn geometric_quotient(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, e3215
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e23], 2) + f32::powi(other[e31], 2) + f32::powi(other[e12], 2) + f32::powi(other[scalar], 2),
        );
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e15, e25, e35, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(self[e4]) * geometric_product.group0().xyz().with_w(geometric_product[e3215]),
            // e415, e425, e435, e321
            (Simd32x3::from(self[e4]) * geometric_product.group1().xyz())
                .with_w((geometric_product[e3215] * self[e4]) - (geometric_product[e23] * self[e1]) - (geometric_product[e31] * self[e2]) - (geometric_product[e12] * self[e3])),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(geometric_product[e25] * self[e3]) - (geometric_product[e3215] * self[e1]),
                -(geometric_product[e35] * self[e1]) - (geometric_product[e3215] * self[e2]),
                -(geometric_product[e15] * self[e2]) - (geometric_product[e3215] * self[e3]),
                (geometric_product[e25] * self[e2]) + (geometric_product[e35] * self[e3]),
            ]) + (Simd32x4::from(self[e5]) * geometric_product.group0())
                + (geometric_product.group1().zxyx() * self.group0().yzxx()),
            // e1, e2, e3, e4
            ((Simd32x3::from(geometric_product[scalar]) * self.group0().xyz())
                + (Simd32x3::from(self[e4]) * geometric_product.group1().xyz())
                + (geometric_product.group0().yzx() * self.group0().zxy())
                - (geometric_product.group0().zxy() * self.group0().yzx()))
            .with_w(geometric_product[scalar] * self[e4]),
        );
    }
}
impl GeometricQuotient<AntiPlane> for RoundPoint {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        3        0
    //    simd3        1        3        0
    //    simd4        2        3        0
    // Totals...
    // yes simd        6        9        0
    //  no simd       14       24        0
    fn geometric_quotient(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiPlane::from_groups(
            // e1, e2, e3, e5
            Simd32x4::from(f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)) * other.group0(),
        );
        return AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[e4]) * geometric_product.group0().xyz(),
            // e23, e31, e12, e45
            ((geometric_product.group0().zxy() * self.group0().yzx()) - (geometric_product.group0().yzx() * self.group0().zxy())).with_w(geometric_product[e5] * self[e4]),
            // e15, e25, e35, scalar
            (geometric_product.group0().wwwx() * self.group0().xyzx()) + Simd32x3::from(0.0).with_w((geometric_product[e2] * self[e2]) + (geometric_product[e3] * self[e3]))
                - (geometric_product.group0() * Simd32x3::from(self[e5]).with_w(self[e4])),
        );
    }
}
impl GeometricQuotient<AntiScalar> for RoundPoint {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        5        1
    //    simd3        0        1        0
    // Totals...
    // yes simd        0        6        1
    //  no simd        0        8        1
    fn geometric_quotient(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiScalar::from_groups(/* e12345 */ 1.0 / other[e12345] * -1.0);
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x3::from(geometric_product[e12345]) * self.group0().xyz()).with_w(geometric_product[e12345] * self[e5] * -1.0),
            // e1234
            geometric_product[e12345] * self[e4] * -1.0,
        );
    }
}
impl GeometricQuotient<Circle> for RoundPoint {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       25        0
    //    simd3        2        9        0
    //    simd4        5        6        0
    // Totals...
    // yes simd       22       40        0
    //  no simd       41       76        0
    fn geometric_quotient(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let reverse = Circle::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125
            other.group2() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group2(),
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (geometric_product.group0().zxy() * self.group0().yzx())
                - (Simd32x3::from(self[e4]) * geometric_product.group1().xyz())
                - (geometric_product.group0().yzx() * self.group0().zxy()),
            // e23, e31, e12, e45
            -(geometric_product.group1().wwwz() * self.group0().xyzz())
                - (self.group0().wwwy() * geometric_product.group2().with_w(geometric_product[e425]))
                - (Simd32x3::from(self[e5]) * geometric_product.group0()).with_w(geometric_product[e415] * self[e1]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(geometric_product[e415] * self[e5]) - (geometric_product[e125] * self[e2]),
                -(geometric_product[e425] * self[e5]) - (geometric_product[e235] * self[e3]),
                -(geometric_product[e435] * self[e5]) - (geometric_product[e315] * self[e1]),
                (geometric_product[e431] * self[e2]) + (geometric_product[e412] * self[e3]) + (geometric_product[e321] * self[e4]),
            ]) + (self.group0().zxyx() * geometric_product.group2().yzx().with_w(geometric_product[e423])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (geometric_product[e425] * self[e3]) + (geometric_product[e235] * self[e4]),
                (geometric_product[e435] * self[e1]) + (geometric_product[e315] * self[e4]),
                (geometric_product[e415] * self[e2]) + (geometric_product[e125] * self[e4]),
                -(geometric_product[e321] * self[e5]) - (geometric_product[e125] * self[e3]),
            ]) - (self.group0().yzxy() * geometric_product.group1().zxy().with_w(geometric_product[e315]))
                - (Simd32x3::from(self[e5]) * geometric_product.group0()).with_w(geometric_product[e235] * self[e1]),
        );
    }
}
impl GeometricQuotient<CircleRotor> for RoundPoint {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       29        0
    //    simd3        2        7        0
    //    simd4        6        9        0
    // Totals...
    // yes simd       25       45        0
    //  no simd       47       86        0
    fn geometric_quotient(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let reverse = CircleRotor::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e12345
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - f32::powi(other[e12345], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (geometric_product.group0().zxy() * self.group0().yzx())
                - (Simd32x3::from(self[e4]) * geometric_product.group1().xyz())
                - (geometric_product.group0().yzx() * self.group0().zxy()),
            // e23, e31, e12, e45
            -(geometric_product.group1().wwwy() * self.group0().xyzy())
                - (self.group0().wwwz() * geometric_product.group2().xyz().with_w(geometric_product[e435]))
                - (Simd32x3::from(self[e5]) * geometric_product.group0()).with_w(geometric_product[e415] * self[e1]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                geometric_product[e125] * self[e2] * -1.0,
                geometric_product[e235] * self[e3] * -1.0,
                geometric_product[e315] * self[e1] * -1.0,
                (geometric_product[e431] * self[e2]) + (geometric_product[e412] * self[e3]) + (geometric_product[e321] * self[e4]),
            ]) + (self.group0().zxyx() * geometric_product.group2().yzx().with_w(geometric_product[e423]))
                - (Simd32x3::from(self[e5]) * geometric_product.group1().xyz()).with_w(geometric_product[e12345] * self[e4]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (geometric_product[e425] * self[e3]) + (geometric_product[e235] * self[e4]) + (geometric_product[e12345] * self[e1]),
                (geometric_product[e435] * self[e1]) + (geometric_product[e315] * self[e4]) + (geometric_product[e12345] * self[e2]),
                (geometric_product[e415] * self[e2]) + (geometric_product[e125] * self[e4]) + (geometric_product[e12345] * self[e3]),
                -(geometric_product[e315] * self[e2]) - (geometric_product[e125] * self[e3]) - (geometric_product[e12345] * self[e5]),
            ]) - (Simd32x4::from(self[e5]) * geometric_product.group0().with_w(geometric_product[e321]))
                - (self.group0().yzxx() * geometric_product.group1().zxy().with_w(geometric_product[e235])),
        );
    }
}
impl GeometricQuotient<Dipole> for RoundPoint {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       26        0
    //    simd3        2        7        0
    //    simd4        6        8        0
    // Totals...
    // yes simd       19       41        0
    //  no simd       41       79        0
    fn geometric_quotient(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let reverse = Dipole::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35
            other.group2() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2),
        );
        let geometric_product = Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35
            Simd32x3::from(other_2[scalar]) * reverse.group2(),
        );
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[e4]) * geometric_product.group1().xyz()) + (geometric_product.group0().yzx() * self.group0().zxy())
                - (geometric_product.group0().zxy() * self.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (geometric_product[e41] * self[e5]) + (geometric_product[e15] * self[e4]),
                (geometric_product[e42] * self[e5]) + (geometric_product[e25] * self[e4]),
                (geometric_product[e43] * self[e5]) + (geometric_product[e35] * self[e4]),
                -(geometric_product[e31] * self[e2]) - (geometric_product[e12] * self[e3]),
            ]) - (geometric_product.group1().wwwx() * self.group0().xyzx()),
            // e235, e315, e125, e4
            Simd32x4::from([
                geometric_product[e23] * self[e5],
                geometric_product[e31] * self[e5],
                geometric_product[e12] * self[e5],
                -(geometric_product[e42] * self[e2]) - (geometric_product[e43] * self[e3]),
            ]) + (self.group0().yzxw() * geometric_product.group2().zxy().with_w(geometric_product[e45]))
                - (self.group0().zxyx() * geometric_product.group2().yzx().with_w(geometric_product[e41])),
            // e1, e2, e3, e5
            Simd32x4::from([
                geometric_product[e12] * self[e2] * -1.0,
                geometric_product[e23] * self[e3] * -1.0,
                geometric_product[e31] * self[e1] * -1.0,
                geometric_product[e35] * self[e3],
            ]) + (self.group0().zxyy() * geometric_product.group1().yzx().with_w(geometric_product[e25]))
                + (self.group0().wwwx() * geometric_product.group2().with_w(geometric_product[e15]))
                - (Simd32x4::from(self[e5]) * geometric_product.group0().with_w(geometric_product[e45])),
        );
    }
}
impl GeometricQuotient<DipoleInversion> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       40        0
    //    simd3        0        7        0
    //    simd4       13       13        0
    // Totals...
    // yes simd       30       60        0
    //  no simd       69      113        0
    fn geometric_quotient(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let reverse = DipoleInversion::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + 2.0 * (other[e1234] * other[e3215])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2),
        );
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                geometric_product[e43] * self[e2] * -1.0,
                geometric_product[e41] * self[e3] * -1.0,
                geometric_product[e42] * self[e1] * -1.0,
                geometric_product[e3215] * self[e4],
            ]) + (geometric_product.group3().xyzz() * self.group0().wwwz())
                + (self.group0().xyzy() * geometric_product.group2().www().with_w(geometric_product[e4315]))
                + (self.group0().wwwx() * geometric_product.group1().xyz().with_w(geometric_product[e4235]))
                + (geometric_product.group0().yzx() * self.group0().zxy()).with_w(geometric_product[e1234] * self[e5]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (geometric_product[e15] * self[e4]) + (geometric_product[e4125] * self[e2]),
                (geometric_product[e25] * self[e4]) + (geometric_product[e4235] * self[e3]),
                (geometric_product[e35] * self[e4]) + (geometric_product[e4315] * self[e1]),
                -(geometric_product[e12] * self[e3]) - (geometric_product[e1234] * self[e5]),
            ]) + (Simd32x3::from(self[e5]) * geometric_product.group0()).with_w(geometric_product[e3215] * self[e4])
                - (geometric_product.group1().wwwx() * self.group0().xyzx())
                - (self.group0().zxyy() * geometric_product.group3().yzx().with_w(geometric_product[e31])),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(geometric_product[e4235] * self[e5]) - (geometric_product[e3215] * self[e1]),
                -(geometric_product[e4315] * self[e5]) - (geometric_product[e3215] * self[e2]),
                -(geometric_product[e4125] * self[e5]) - (geometric_product[e3215] * self[e3]),
                geometric_product[e35] * self[e3],
            ]) + (geometric_product.group2().zxyy() * self.group0().yzxy())
                + (Simd32x3::from(self[e5]) * geometric_product.group1().xyz()).with_w(geometric_product[e15] * self[e1])
                - (geometric_product.group2().yzx() * self.group0().zxy()).with_w(geometric_product[e45] * self[e5]),
            // e1, e2, e3, e4
            Simd32x4::from([
                geometric_product[e15] * self[e4],
                geometric_product[e25] * self[e4],
                geometric_product[e35] * self[e4],
                geometric_product[e43] * self[e3] * -1.0,
            ]) + (geometric_product.group1().yzxw() * self.group0().zxyw())
                - (self.group0().yzxy() * geometric_product.group1().zxy().with_w(geometric_product[e42]))
                - (Simd32x3::from(self[e5]) * geometric_product.group0()).with_w(geometric_product[e41] * self[e1]),
        );
    }
}
impl GeometricQuotient<DualNum> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        4        0
    //    simd2        0        1        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        9        0
    //  no simd        0       22        0
    fn geometric_quotient(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DualNum::from_groups(/* e5, e12345 */ Simd32x2::from(f32::powi(other[e12345], -2) * -1.0) * other.group0());
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x3::from(0.0).with_w(geometric_product[e5] * self[e4] * -1.0),
            // e23, e31, e12, e45
            Simd32x3::from(0.0).with_w(geometric_product[e5] * self[e4]),
            // e15, e25, e35, e1234
            self.group0() * geometric_product.group0().xx().with_zw(geometric_product[e5], geometric_product[e12345]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(geometric_product[e12345]) * self.group0().xyz().with_w(self[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
    }
}
impl GeometricQuotient<FlatPoint> for RoundPoint {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       10        0
    //    simd3        2        5        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        5       16        0
    //  no simd        9       29        0
    fn geometric_quotient(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = FlatPoint::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(f32::powi(other[e45], -2) * -1.0) * Simd32x4::from([other[e15] * -1.0, other[e25] * -1.0, other[e35] * -1.0, other[e45] * -1.0]),
        );
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            ((Simd32x3::from(self[e4]) * geometric_product.group0().xyz()) - (Simd32x3::from(geometric_product[e45]) * self.group0().xyz())).with_w(0.0),
            // e235, e315, e125, e4
            ((geometric_product.group0().zxy() * self.group0().yzx()) - (geometric_product.group0().yzx() * self.group0().zxy())).with_w(geometric_product[e45] * self[e4]),
            // e1, e2, e3, e5
            (Simd32x3::from(self[e4]) * geometric_product.group0().xyz())
                .with_w((geometric_product[e15] * self[e1]) + (geometric_product[e25] * self[e2]) + (geometric_product[e35] * self[e3]) - (geometric_product[e45] * self[e5])),
        );
    }
}
impl GeometricQuotient<Flector> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       13        0
    //    simd3        3        5        0
    //    simd4        2        6        0
    // Totals...
    // yes simd       15       24        0
    //  no simd       27       52        0
    fn geometric_quotient(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let reverse = Flector::from_groups(
            // e15, e25, e35, e45
            other.group0() * Simd32x4::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group1(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            -f32::powi(other[e45], 2) - f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2),
        );
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x3::from(self[e4]) * geometric_product.group1().xyz()).with_w(
                (geometric_product[e4235] * self[e1]) + (geometric_product[e4315] * self[e2]) + (geometric_product[e4125] * self[e3]) + (geometric_product[e3215] * self[e4]),
            ),
            // e415, e425, e435, e321
            ((Simd32x3::from(self[e4]) * geometric_product.group0().xyz()) + (geometric_product.group1().zxy() * self.group0().yzx())
                - (Simd32x3::from(geometric_product[e45]) * self.group0().xyz())
                - (geometric_product.group1().yzx() * self.group0().zxy()))
            .with_w(geometric_product[e3215] * self[e4]),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(geometric_product[e4235] * self[e5]) - (geometric_product[e3215] * self[e1]),
                -(geometric_product[e4315] * self[e5]) - (geometric_product[e3215] * self[e2]),
                -(geometric_product[e4125] * self[e5]) - (geometric_product[e3215] * self[e3]),
                (geometric_product[e25] * self[e2]) + (geometric_product[e35] * self[e3]),
            ]) + (geometric_product.group0().zxyx() * self.group0().yzxx())
                - (geometric_product.group0().yzxw() * self.group0().zxy().with_w(self[e5])),
            // e1, e2, e3, e4
            Simd32x4::from(self[e4]) * geometric_product.group0(),
        );
    }
}
impl GeometricQuotient<Line> for RoundPoint {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       11        0
    //    simd3        0       11        0
    //    simd4        3        1        0
    // Totals...
    // yes simd       11       23        0
    //  no simd       20       48        0
    fn geometric_quotient(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let reverse = Line::from_groups(
            // e415, e425, e435
            other.group0() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group1() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(/* scalar */ -f32::powi(other[e415], 2) - f32::powi(other[e425], 2) - f32::powi(other[e435], 2));
        let geometric_product = Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group1(),
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[e4]) * geometric_product.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            (Simd32x3::from(self[e4]) * geometric_product.group1() * Simd32x3::from(-1.0))
                .with_w(-(geometric_product[e415] * self[e1]) - (geometric_product[e425] * self[e2]) - (geometric_product[e435] * self[e3])),
            // e15, e25, e35, e1234
            (geometric_product.group1().yzx() * self.group0().zxy()).with_w(0.0)
                - (Simd32x3::from(self[e5]) * geometric_product.group0()).with_w(0.0)
                - (geometric_product.group1().zxy() * self.group0().yzx()).with_w(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (geometric_product[e425] * self[e3]) + (geometric_product[e235] * self[e4]),
                (geometric_product[e435] * self[e1]) + (geometric_product[e315] * self[e4]),
                (geometric_product[e415] * self[e2]) + (geometric_product[e125] * self[e4]),
                -(geometric_product[e315] * self[e2]) - (geometric_product[e125] * self[e3]),
            ]) - (self.group0().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e235])),
        );
    }
}
impl GeometricQuotient<Motor> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       18        0
    //    simd3        3        6        0
    //    simd4        1        7        0
    // Totals...
    // yes simd       18       31        0
    //  no simd       27       64        0
    fn geometric_quotient(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let reverse = Motor::from_groups(
            // e415, e425, e435, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            -f32::powi(other[e415], 2) - f32::powi(other[e425], 2) - f32::powi(other[e435], 2) - f32::powi(other[e12345], 2),
        );
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e235, e315, e125, e5
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(self[e4]) * geometric_product.group0().xyz().with_w(geometric_product[e5]) * Simd32x4::from(-1.0),
            // e23, e31, e12, e45
            (Simd32x3::from(self[e4]) * geometric_product.group1().xyz() * Simd32x3::from(-1.0))
                .with_w((geometric_product[e5] * self[e4]) - (geometric_product[e415] * self[e1]) - (geometric_product[e425] * self[e2]) - (geometric_product[e435] * self[e3])),
            // e15, e25, e35, e1234
            ((Simd32x3::from(geometric_product[e5]) * self.group0().xyz()) + (geometric_product.group1().yzx() * self.group0().zxy())
                - (Simd32x3::from(self[e5]) * geometric_product.group0().xyz())
                - (geometric_product.group1().zxy() * self.group0().yzx()))
            .with_w(geometric_product[e12345] * self[e4] * -1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (geometric_product[e425] * self[e3]) + (geometric_product[e12345] * self[e1]) + (geometric_product[e235] * self[e4]),
                (geometric_product[e435] * self[e1]) + (geometric_product[e12345] * self[e2]) + (geometric_product[e315] * self[e4]),
                (geometric_product[e415] * self[e2]) + (geometric_product[e12345] * self[e3]) + (geometric_product[e125] * self[e4]),
                -(geometric_product[e235] * self[e1]) - (geometric_product[e315] * self[e2]) - (geometric_product[e125] * self[e3]),
            ]) - (geometric_product.group0().zxyw() * self.group0().yzx().with_w(self[e5])),
        );
    }
}
impl GeometricQuotient<MultiVector> for RoundPoint {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       45       67        0
    //    simd2        3        4        0
    //    simd3       16       33        0
    //    simd4       13       14        0
    // Totals...
    // yes simd       77      118        0
    //  no simd      151      230        0
    fn geometric_quotient(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let reverse = MultiVector::from_groups(
            // scalar, e12345
            other.group0(),
            // e1, e2, e3, e4
            other.group1(),
            // e5
            other[e5],
            // e15, e25, e35, e45
            other.group3() * Simd32x4::from(-1.0),
            // e41, e42, e43
            other.group4() * Simd32x3::from(-1.0),
            // e23, e31, e12
            other.group5() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group6() * Simd32x4::from(-1.0),
            // e423, e431, e412
            other.group7() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group8() * Simd32x3::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group9(),
            // e1234
            other[e1234],
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e15] * other[e41])
                + 2.0 * (other[e25] * other[e42])
                + 2.0 * (other[e35] * other[e43])
                + 2.0 * (other[e3215] * other[e1234])
                + f32::powi(other[scalar], 2)
                + f32::powi(other[e1], 2)
                + f32::powi(other[e2], 2)
                + f32::powi(other[e3], 2)
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                + f32::powi(other[e321], 2)
                - f32::powi(other[e12345], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2)
                - 2.0 * (other[e4] * other[e5])
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(other_2[scalar]) * reverse.group0(),
            // e1, e2, e3, e4
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e5
            reverse[e5] * other_2[scalar],
            // e15, e25, e35, e45
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group4(),
            // e23, e31, e12
            Simd32x3::from(other_2[scalar]) * reverse.group5(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group6(),
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group7(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group8(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group9(),
            // e1234
            reverse[e1234] * other_2[scalar],
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                -(geometric_product[e4] * self[e5]) - (geometric_product[e5] * self[e4]),
                (geometric_product[e3215] * self[e4]) + (geometric_product[e1234] * self[e5]),
            ]) + (Simd32x2::from(self[e1]) * Simd32x2::from([geometric_product[e1], geometric_product[e4235]]))
                + (Simd32x2::from(self[e2]) * Simd32x2::from([geometric_product[e2], geometric_product[e4315]]))
                + (Simd32x2::from(self[e3]) * Simd32x2::from([geometric_product[e3], geometric_product[e4125]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                geometric_product[e15] * self[e4],
                geometric_product[e25] * self[e4],
                geometric_product[e35] * self[e4],
                geometric_product[e43] * self[e3] * -1.0,
            ]) + (Simd32x4::from(geometric_product[scalar]) * self.group0())
                + (self.group0().zxyw() * geometric_product.group5().yzx().with_w(geometric_product[e45]))
                - (self.group0().yzxy() * geometric_product.group5().zxy().with_w(geometric_product[e42]))
                - (Simd32x3::from(self[e5]) * geometric_product.group4()).with_w(geometric_product[e41] * self[e1]),
            // e5
            (geometric_product[scalar] * self[e5]) + (geometric_product[e15] * self[e1]) + (geometric_product[e25] * self[e2]) + (geometric_product[e35] * self[e3])
                - (geometric_product[e45] * self[e5]),
            // e15, e25, e35, e45
            Simd32x4::from([
                geometric_product[e5] * self[e1],
                geometric_product[e5] * self[e2],
                geometric_product[e5] * self[e3],
                geometric_product[e435] * self[e3] * -1.0,
            ]) + (geometric_product.group8().yzx() * self.group0().zxy()).with_w(geometric_product[e5] * self[e4])
                - (geometric_product.group6().xyzy() * Simd32x3::from(self[e5]).with_w(self[e2]))
                - (Simd32x3::from(self[e5]) * geometric_product.group1().xyz()).with_w(geometric_product[e415] * self[e1])
                - (geometric_product.group8().zxy() * self.group0().yzx()).with_w(geometric_product[e4] * self[e5]),
            // e41, e42, e43
            (Simd32x3::from(self[e4]) * geometric_product.group1().xyz()) + (geometric_product.group7().zxy() * self.group0().yzx())
                - (Simd32x3::from(geometric_product[e4]) * self.group0().xyz())
                - (Simd32x3::from(self[e4]) * geometric_product.group6().xyz())
                - (geometric_product.group7().yzx() * self.group0().zxy()),
            // e23, e31, e12
            (geometric_product.group1().zxy() * self.group0().yzx())
                - (Simd32x3::from(geometric_product[e321]) * self.group0().xyz())
                - (Simd32x3::from(self[e4]) * geometric_product.group8())
                - (Simd32x3::from(self[e5]) * geometric_product.group7())
                - (geometric_product.group1().yzx() * self.group0().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (geometric_product[e15] * self[e4]) + (geometric_product[e4125] * self[e2]),
                (geometric_product[e25] * self[e4]) + (geometric_product[e4235] * self[e3]),
                (geometric_product[e35] * self[e4]) + (geometric_product[e4315] * self[e1]),
                -(geometric_product[e12] * self[e3]) - (geometric_product[e1234] * self[e5]),
            ]) + (Simd32x3::from(self[e5]) * geometric_product.group4()).with_w(geometric_product[e3215] * self[e4])
                - (self.group0().xyzx() * geometric_product.group3().www().with_w(geometric_product[e23]))
                - (self.group0().zxyy() * geometric_product.group9().yzx().with_w(geometric_product[e31])),
            // e423, e431, e412
            (Simd32x3::from(geometric_product[e1234]) * self.group0().xyz())
                + (Simd32x3::from(self[e4]) * geometric_product.group5())
                + (Simd32x3::from(self[e4]) * geometric_product.group9().xyz())
                + (geometric_product.group4().yzx() * self.group0().zxy())
                - (geometric_product.group4().zxy() * self.group0().yzx()),
            // e235, e315, e125
            (Simd32x3::from(self[e5]) * geometric_product.group5()) + (geometric_product.group3().zxy() * self.group0().yzx())
                - (Simd32x3::from(geometric_product[e3215]) * self.group0().xyz())
                - (Simd32x3::from(self[e5]) * geometric_product.group9().xyz())
                - (geometric_product.group3().yzx() * self.group0().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (geometric_product[e12345] * self[e1]) + (geometric_product[e425] * self[e3]) + (geometric_product[e235] * self[e4]),
                (geometric_product[e12345] * self[e2]) + (geometric_product[e435] * self[e1]) + (geometric_product[e315] * self[e4]),
                (geometric_product[e12345] * self[e3]) + (geometric_product[e415] * self[e2]) + (geometric_product[e125] * self[e4]),
                -(geometric_product[e321] * self[e5]) - (geometric_product[e315] * self[e2]) - (geometric_product[e125] * self[e3]),
            ]) - (Simd32x4::from(self[e5]) * geometric_product.group7().with_w(geometric_product[e12345]))
                - (self.group0().yzxx() * geometric_product.group6().zxy().with_w(geometric_product[e235])),
            // e1234
            (geometric_product[e321] * self[e4]) + (geometric_product[e423] * self[e1]) + (geometric_product[e431] * self[e2]) + (geometric_product[e412] * self[e3])
                - (geometric_product[e12345] * self[e4]),
        );
    }
}
impl GeometricQuotient<Plane> for RoundPoint {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       11        0
    //    simd3        1        3        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        9       15        0
    //  no simd       11       24        0
    fn geometric_quotient(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Plane::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(-f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2)) * other.group0(),
        );
        return CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[e4]) * geometric_product.group0().xyz(),
            // e415, e425, e435, e321
            ((geometric_product.group0().zxy() * self.group0().yzx()) - (geometric_product.group0().yzx() * self.group0().zxy())).with_w(geometric_product[e3215] * self[e4]),
            // e235, e315, e125, e12345
            Simd32x4::from([
                -(geometric_product[e4235] * self[e5]) - (geometric_product[e3215] * self[e1]),
                -(geometric_product[e4315] * self[e5]) - (geometric_product[e3215] * self[e2]),
                -(geometric_product[e4125] * self[e5]) - (geometric_product[e3215] * self[e3]),
                (geometric_product[e4235] * self[e1]) + (geometric_product[e4315] * self[e2]) + (geometric_product[e4125] * self[e3]) + (geometric_product[e3215] * self[e4]),
            ]),
        );
    }
}
impl GeometricQuotient<RoundPoint> for RoundPoint {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5        8        0
    //    simd3        1        4        0
    //    simd4        3        3        0
    // Totals...
    // yes simd        9       15        0
    //  no simd       20       32        0
    fn geometric_quotient(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2) - 2.0 * (other[e4] * other[e5]),
        );
        let geometric_product = RoundPoint::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from(other_2[scalar]) * other.group0(), /* e5 */ other[e5] * other_2[scalar]);
        return AntiCircleRotor::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[e4]) * geometric_product.group0().xyz()) - (Simd32x3::from(geometric_product[e4]) * self.group0().xyz()),
            // e23, e31, e12, e45
            (geometric_product.group0().zxy() * self.group0().yzx()).with_w(geometric_product[e5] * self[e4])
                - (geometric_product.group0().yzxw() * self.group0().zxy().with_w(self[e5])),
            // e15, e25, e35, scalar
            Simd32x3::from(0.0).with_w((geometric_product[e2] * self[e2]) + (geometric_product[e3] * self[e3]) - (geometric_product[e5] * self[e4]))
                + (Simd32x3::from(geometric_product[e5]) * self.group0().xyz()).with_w(geometric_product[e1] * self[e1])
                - (Simd32x4::from(self[e5]) * geometric_product.group0()),
        );
    }
}
impl GeometricQuotient<Scalar> for RoundPoint {
    type Output = RoundPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        1
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        1
    //  no simd        0        5        1
    fn geometric_quotient(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Scalar::from_groups(/* scalar */ 1.0 / other[scalar]);
        return RoundPoint::from_groups(
            // e1, e2, e3, e4
            Simd32x4::from(geometric_product[scalar]) * self.group0(),
            // e5
            self[e5] * geometric_product[scalar],
        );
    }
}
impl GeometricQuotient<Sphere> for RoundPoint {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       15        0
    //    simd3        1        3        0
    //    simd4        1        2        0
    // Totals...
    // yes simd       12       20        0
    //  no simd       17       32        0
    fn geometric_quotient(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e3215] * other[e1234]) - f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2),
        );
        let geometric_product = Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * other.group0(),
            // e1234
            other_2[scalar] * other[e1234],
        );
        return CircleRotor::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[e4]) * geometric_product.group0().xyz()) + (Simd32x3::from(geometric_product[e1234]) * self.group0().xyz()),
            // e415, e425, e435, e321
            (self.group0().yzxw() * geometric_product.group0().zxyw()) - (self.group0().zxy() * geometric_product.group0().yzx()).with_w(self[e5] * geometric_product[e1234]),
            // e235, e315, e125, e12345
            Simd32x4::from([
                -(self[e1] * geometric_product[e3215]) - (self[e5] * geometric_product[e4235]),
                -(self[e2] * geometric_product[e3215]) - (self[e5] * geometric_product[e4315]),
                -(self[e3] * geometric_product[e3215]) - (self[e5] * geometric_product[e4125]),
                (self[e1] * geometric_product[e4235])
                    + (self[e2] * geometric_product[e4315])
                    + (self[e3] * geometric_product[e4125])
                    + (self[e4] * geometric_product[e3215])
                    + (self[e5] * geometric_product[e1234]),
            ]),
        );
    }
}
impl GeometricQuotient<VersorEven> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       23       36        0
    //    simd3        0        1        0
    //    simd4       13       20        0
    // Totals...
    // yes simd       36       57        0
    //  no simd       75      119        0
    fn geometric_quotient(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let reverse = VersorEven::from_groups(
            // e423, e431, e412, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e5
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e4
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)
                - f32::powi(other[e12345], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125])
                - 2.0 * (other[e5] * other[e4]),
        );
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e5
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e1, e2, e3, e4
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e4] * geometric_product[e415] * -1.0,
                self[e4] * geometric_product[e425] * -1.0,
                self[e4] * geometric_product[e435] * -1.0,
                self[e3] * geometric_product[e3],
            ]) + (self.group0().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e1]))
                + (self.group0().wwwy() * geometric_product.group3().xyzy())
                - (Simd32x4::from([geometric_product[e431], geometric_product[e4], geometric_product[e4], self[e5]]) * self.group0().zyz().with_w(geometric_product[e4]))
                - (Simd32x4::from([geometric_product[e4], geometric_product[e412], geometric_product[e423], geometric_product[e5]]) * self.group0().xxyw()),
            // e23, e31, e12, e45
            (self.group0().yzxw() * geometric_product.group3().zxy().with_w(geometric_product[e5]))
                - (Simd32x4::from(self[e5]) * geometric_product.group0().xyz().with_w(geometric_product[e4]))
                - (Simd32x4::from([geometric_product[e321], geometric_product[e3], geometric_product[e1], geometric_product[e415]]) * self.group0().xxyx())
                - (Simd32x4::from([geometric_product[e2], geometric_product[e321], geometric_product[e321], geometric_product[e425]]) * self.group0().zyzy())
                - (self.group0().wwwz() * geometric_product.group2().xyz().with_w(geometric_product[e435])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(self[e5] * geometric_product[e415]) - (self[e5] * geometric_product[e1]),
                -(self[e5] * geometric_product[e425]) - (self[e5] * geometric_product[e2]),
                -(self[e5] * geometric_product[e435]) - (self[e5] * geometric_product[e3]),
                (self[e3] * geometric_product[e412]) + (self[e4] * geometric_product[e321]),
            ]) + (self.group0().xxyx() * geometric_product.group2().wzx().with_w(geometric_product[e423]))
                + (self.group0().zyzy() * geometric_product.group2().yww().with_w(geometric_product[e431]))
                - (self.group0().yzxw() * geometric_product.group2().zxy().with_w(geometric_product[e12345])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e1] * geometric_product[e12345]) + (self[e3] * geometric_product[e425]) + (self[e4] * geometric_product[e235]),
                (self[e1] * geometric_product[e435]) + (self[e2] * geometric_product[e12345]) + (self[e4] * geometric_product[e315]),
                (self[e2] * geometric_product[e415]) + (self[e3] * geometric_product[e12345]) + (self[e4] * geometric_product[e125]),
                -(self[e3] * geometric_product[e125]) - (self[e5] * geometric_product[e12345]) - (self[e5] * geometric_product[e321]),
            ]) - (self.group0().yzxx() * geometric_product.group1().zxy().with_w(geometric_product[e235]))
                - (Simd32x3::from(self[e5]) * geometric_product.group0().xyz()).with_w(self[e2] * geometric_product[e315]),
        );
    }
}
impl GeometricQuotient<VersorOdd> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       38        0
    //    simd3        0        2        0
    //    simd4       14       19        0
    // Totals...
    // yes simd       33       59        0
    //  no simd       75      120        0
    fn geometric_quotient(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let reverse = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + 2.0 * (other[e1234] * other[e3215])
                + f32::powi(other[scalar], 2)
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2),
        );
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e2] * geometric_product[e43] * -1.0,
                self[e3] * geometric_product[e41] * -1.0,
                self[e1] * geometric_product[e42] * -1.0,
                self[e5] * geometric_product[e1234],
            ]) + (Simd32x4::from(self[e4]) * geometric_product.group3())
                + (Simd32x4::from([geometric_product[e42], geometric_product[e1234], geometric_product[e1234], geometric_product[e4315]]) * self.group0().zyzy())
                + (Simd32x4::from([geometric_product[e1234], geometric_product[e43], geometric_product[e41], geometric_product[e4235]]) * self.group0().xxyx())
                + (self.group0().wwwz() * geometric_product.group1().xyz().with_w(geometric_product[e4125])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e4] * geometric_product[e15]) + (self[e5] * geometric_product[e41]),
                (self[e4] * geometric_product[e25]) + (self[e5] * geometric_product[e42]),
                (self[e4] * geometric_product[e35]) + (self[e5] * geometric_product[e43]),
                -(self[e3] * geometric_product[e12]) - (self[e5] * geometric_product[e1234]),
            ]) + (self.group0().yzxw() * geometric_product.group3().zxyw())
                - (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], geometric_product[e23]]) * self.group0().xxyx())
                - (Simd32x4::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45], geometric_product[e31]]) * self.group0().zyzy()),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e3] * geometric_product[e25]) - (self[e5] * geometric_product[e4235]),
                -(self[e2] * geometric_product[e3215]) - (self[e5] * geometric_product[e4315]),
                -(self[e3] * geometric_product[e3215]) - (self[e5] * geometric_product[e4125]),
                (self[e3] * geometric_product[e35]) + (self[e5] * geometric_product[scalar]),
            ]) + (self.group0().yzxx() * geometric_product.group2().zxyx())
                + (Simd32x3::from(self[e5]) * geometric_product.group1().xyz()).with_w(self[e2] * geometric_product[e25])
                - (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], self[e5]]) * self.group0().xxy().with_w(geometric_product[e45])),
            // e1, e2, e3, e4
            Simd32x4::from([
                self[e4] * geometric_product[e15],
                self[e4] * geometric_product[e25],
                self[e4] * geometric_product[e35],
                self[e3] * geometric_product[e43] * -1.0,
            ]) + (Simd32x4::from([geometric_product[scalar], geometric_product[e12], geometric_product[e23], geometric_product[scalar]]) * self.group0().xxyw())
                + (Simd32x4::from([geometric_product[e31], geometric_product[scalar], geometric_product[scalar], geometric_product[e45]]) * self.group0().zyzw())
                - (self.group0().yzxx() * geometric_product.group1().zxy().with_w(geometric_product[e41]))
                - (Simd32x3::from(self[e5]) * geometric_product.group0().xyz()).with_w(self[e2] * geometric_product[e42]),
        );
    }
}
impl std::ops::Div<GeometricQuotientInfix> for Scalar {
    type Output = GeometricQuotientInfixPartial<Scalar>;
    fn div(self, _rhs: GeometricQuotientInfix) -> Self::Output {
        GeometricQuotientInfixPartial(self)
    }
}
impl GeometricQuotient<AntiCircleRotor> for Scalar {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7        6        0
    //    simd3        0        3        0
    //    simd4        0        6        0
    // Totals...
    // yes simd        7       15        0
    //  no simd        7       39        0
    fn geometric_quotient(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiCircleRotor::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, scalar
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                + f32::powi(other[scalar], 2)
                - f32::powi(other[e45], 2),
        );
        let geometric_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
        );
        return AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[scalar]) * geometric_product.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(self[scalar]) * geometric_product.group1(),
            // e15, e25, e35, scalar
            Simd32x4::from(self[scalar]) * geometric_product.group2(),
        );
    }
}
impl GeometricQuotient<AntiDipoleInversion> for Scalar {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10        8        0
    //    simd3        0        3        0
    //    simd4        0        8        0
    // Totals...
    // yes simd       10       19        0
    //  no simd       10       49        0
    fn geometric_quotient(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e4
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125])
                - 2.0 * (other[e4] * other[e5]),
        );
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e4
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e1, e2, e3, e5
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[scalar]) * geometric_product.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(self[scalar]) * geometric_product.group1(),
            // e235, e315, e125, e4
            Simd32x4::from(self[scalar]) * geometric_product.group2(),
            // e1, e2, e3, e5
            Simd32x4::from(self[scalar]) * geometric_product.group3(),
        );
    }
}
impl GeometricQuotient<AntiDualNum> for Scalar {
    type Output = AntiDualNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd2        0        1        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0        4        0
    fn geometric_quotient(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let other_2 = Scalar::from_groups(/* scalar */ f32::powi(other[scalar], -2));
        return AntiDualNum::from_groups(
            // e3215, scalar
            Simd32x2::from(self[scalar]) * Simd32x2::from([other[e3215] * other_2[scalar], other[scalar] * other_2[scalar]]),
        );
    }
}
impl GeometricQuotient<AntiFlatPoint> for Scalar {
    type Output = AntiFlatPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        4        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0       12        0
    fn geometric_quotient(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ other.group0() * Simd32x4::from(-1.0));
        let other_2 = Scalar::from_groups(/* scalar */ f32::powi(other[e321], -2));
        return AntiFlatPoint::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(self[scalar])
                * Simd32x4::from([
                    reverse[e235] * other_2[scalar],
                    reverse[e315] * other_2[scalar],
                    reverse[e125] * other_2[scalar],
                    reverse[e321] * other_2[scalar],
                ]),
        );
    }
}
impl GeometricQuotient<AntiFlector> for Scalar {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        0        0
    //    simd4        0        5        0
    // Totals...
    // yes simd        3        5        0
    //  no simd        3       20        0
    fn geometric_quotient(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiFlector::from_groups(/* e235, e315, e125, e321 */ other.group0() * Simd32x4::from(-1.0), /* e1, e2, e3, e5 */ other.group1());
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2),
        );
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e1, e2, e3, e5
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(self[scalar]) * geometric_product.group0(),
            // e1, e2, e3, e5
            Simd32x4::from(self[scalar]) * geometric_product.group1(),
        );
    }
}
impl GeometricQuotient<AntiLine> for Scalar {
    type Output = AntiLine;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        0        0
    //    simd3        0        6        0
    // Totals...
    // yes simd        2        6        0
    //  no simd        2       18        0
    fn geometric_quotient(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiLine::from_groups(
            // e23, e31, e12
            other.group0() * Simd32x3::from(-1.0),
            // e15, e25, e35
            other.group1() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(/* scalar */ f32::powi(other[e23], 2) + f32::powi(other[e31], 2) + f32::powi(other[e12], 2));
        let geometric_product = AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e15, e25, e35
            Simd32x3::from(other_2[scalar]) * reverse.group1(),
        );
        return AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(self[scalar]) * geometric_product.group0(),
            // e15, e25, e35
            Simd32x3::from(self[scalar]) * geometric_product.group1(),
        );
    }
}
impl GeometricQuotient<AntiMotor> for Scalar {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        0        0
    //    simd4        0        6        0
    // Totals...
    // yes simd        3        6        0
    //  no simd        3       24        0
    fn geometric_quotient(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, e3215
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e23], 2) + f32::powi(other[e31], 2) + f32::powi(other[e12], 2) + f32::powi(other[scalar], 2),
        );
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e15, e25, e35, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(self[scalar]) * geometric_product.group0(),
            // e15, e25, e35, e3215
            Simd32x4::from(self[scalar]) * geometric_product.group1(),
        );
    }
}
impl GeometricQuotient<AntiPlane> for Scalar {
    type Output = AntiPlane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        4        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        2        5        0
    //  no simd        2        8        0
    fn geometric_quotient(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let other_2 = Scalar::from_groups(/* scalar */ f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2));
        return AntiPlane::from_groups(
            // e1, e2, e3, e5
            Simd32x4::from(self[scalar]) * Simd32x4::from([other[e1] * other_2[scalar], other[e2] * other_2[scalar], other[e3] * other_2[scalar], other[e5] * other_2[scalar]]),
        );
    }
}
impl GeometricQuotient<AntiScalar> for Scalar {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        1
    fn geometric_quotient(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ self[scalar] / (other[e12345]) * -1.0);
    }
}
impl GeometricQuotient<Circle> for Scalar {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6        6        0
    //    simd3        0        6        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        6       15        0
    //  no simd        6       36        0
    fn geometric_quotient(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let reverse = Circle::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125
            other.group2() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group2(),
        );
        return Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[scalar]) * geometric_product.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(self[scalar]) * geometric_product.group1(),
            // e235, e315, e125
            Simd32x3::from(self[scalar]) * geometric_product.group2(),
        );
    }
}
impl GeometricQuotient<CircleRotor> for Scalar {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7        6        0
    //    simd3        0        3        0
    //    simd4        0        6        0
    // Totals...
    // yes simd        7       15        0
    //  no simd        7       39        0
    fn geometric_quotient(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let reverse = CircleRotor::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e12345
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - f32::powi(other[e12345], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
        );
        return CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[scalar]) * geometric_product.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(self[scalar]) * geometric_product.group1(),
            // e235, e315, e125, e12345
            Simd32x4::from(self[scalar]) * geometric_product.group2(),
        );
    }
}
impl GeometricQuotient<Dipole> for Scalar {
    type Output = Dipole;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6        6        0
    //    simd3        0        6        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        6       15        0
    //  no simd        6       36        0
    fn geometric_quotient(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let reverse = Dipole::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35
            other.group2() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2),
        );
        let geometric_product = Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35
            Simd32x3::from(other_2[scalar]) * reverse.group2(),
        );
        return Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[scalar]) * geometric_product.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(self[scalar]) * geometric_product.group1(),
            // e15, e25, e35
            Simd32x3::from(self[scalar]) * geometric_product.group2(),
        );
    }
}
impl GeometricQuotient<DipoleInversion> for Scalar {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10        8        0
    //    simd3        0        3        0
    //    simd4        0        8        0
    // Totals...
    // yes simd       10       19        0
    //  no simd       10       49        0
    fn geometric_quotient(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let reverse = DipoleInversion::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + 2.0 * (other[e1234] * other[e3215])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2),
        );
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[scalar]) * geometric_product.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(self[scalar]) * geometric_product.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(self[scalar]) * geometric_product.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[scalar]) * geometric_product.group3(),
        );
    }
}
impl GeometricQuotient<DualNum> for Scalar {
    type Output = DualNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd2        0        1        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0        5        0
    fn geometric_quotient(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let other_2 = Scalar::from_groups(/* scalar */ f32::powi(other[e12345], -2) * -1.0);
        return DualNum::from_groups(
            // e5, e12345
            Simd32x2::from(self[scalar]) * Simd32x2::from([other[e5] * other_2[scalar], other[e12345] * other_2[scalar]]),
        );
    }
}
impl GeometricQuotient<FlatPoint> for Scalar {
    type Output = FlatPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        5        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        7        0
    //  no simd        0       13        0
    fn geometric_quotient(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let reverse = FlatPoint::from_groups(/* e15, e25, e35, e45 */ other.group0() * Simd32x4::from(-1.0));
        let other_2 = Scalar::from_groups(/* scalar */ f32::powi(other[e45], -2) * -1.0);
        return FlatPoint::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(self[scalar])
                * Simd32x4::from([
                    reverse[e15] * other_2[scalar],
                    reverse[e25] * other_2[scalar],
                    reverse[e35] * other_2[scalar],
                    reverse[e45] * other_2[scalar],
                ]),
        );
    }
}
impl GeometricQuotient<Flector> for Scalar {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        0        0
    //    simd4        0        5        0
    // Totals...
    // yes simd        3        5        0
    //  no simd        3       20        0
    fn geometric_quotient(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let reverse = Flector::from_groups(
            // e15, e25, e35, e45
            other.group0() * Simd32x4::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group1(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            -f32::powi(other[e45], 2) - f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2),
        );
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(self[scalar]) * geometric_product.group0(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[scalar]) * geometric_product.group1(),
        );
    }
}
impl GeometricQuotient<Line> for Scalar {
    type Output = Line;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        0        0
    //    simd3        0        6        0
    // Totals...
    // yes simd        2        6        0
    //  no simd        2       18        0
    fn geometric_quotient(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let reverse = Line::from_groups(
            // e415, e425, e435
            other.group0() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group1() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(/* scalar */ -f32::powi(other[e415], 2) - f32::powi(other[e425], 2) - f32::powi(other[e435], 2));
        let geometric_product = Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group1(),
        );
        return Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(self[scalar]) * geometric_product.group0(),
            // e235, e315, e125
            Simd32x3::from(self[scalar]) * geometric_product.group1(),
        );
    }
}
impl GeometricQuotient<Motor> for Scalar {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        0        0
    //    simd4        0        6        0
    // Totals...
    // yes simd        3        6        0
    //  no simd        3       24        0
    fn geometric_quotient(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let reverse = Motor::from_groups(
            // e415, e425, e435, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            -f32::powi(other[e415], 2) - f32::powi(other[e425], 2) - f32::powi(other[e435], 2) - f32::powi(other[e12345], 2),
        );
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e235, e315, e125, e5
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(self[scalar]) * geometric_product.group0(),
            // e235, e315, e125, e5
            Simd32x4::from(self[scalar]) * geometric_product.group1(),
        );
    }
}
impl GeometricQuotient<MultiVector> for Scalar {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       23       20        0
    //    simd2        0        2        0
    //    simd3        0       12        0
    //    simd4        0       10        0
    // Totals...
    // yes simd       23       44        0
    //  no simd       23      100        0
    fn geometric_quotient(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let reverse = MultiVector::from_groups(
            // scalar, e12345
            other.group0(),
            // e1, e2, e3, e4
            other.group1(),
            // e5
            other[e5],
            // e15, e25, e35, e45
            other.group3() * Simd32x4::from(-1.0),
            // e41, e42, e43
            other.group4() * Simd32x3::from(-1.0),
            // e23, e31, e12
            other.group5() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group6() * Simd32x4::from(-1.0),
            // e423, e431, e412
            other.group7() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group8() * Simd32x3::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group9(),
            // e1234
            other[e1234],
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e15] * other[e41])
                + 2.0 * (other[e25] * other[e42])
                + 2.0 * (other[e35] * other[e43])
                + 2.0 * (other[e3215] * other[e1234])
                + f32::powi(other[scalar], 2)
                + f32::powi(other[e1], 2)
                + f32::powi(other[e2], 2)
                + f32::powi(other[e3], 2)
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                + f32::powi(other[e321], 2)
                - f32::powi(other[e12345], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2)
                - 2.0 * (other[e4] * other[e5])
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(other_2[scalar]) * reverse.group0(),
            // e1, e2, e3, e4
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e5
            reverse[e5] * other_2[scalar],
            // e15, e25, e35, e45
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group4(),
            // e23, e31, e12
            Simd32x3::from(other_2[scalar]) * reverse.group5(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group6(),
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group7(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group8(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group9(),
            // e1234
            reverse[e1234] * other_2[scalar],
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(self[scalar]) * geometric_product.group0(),
            // e1, e2, e3, e4
            Simd32x4::from(self[scalar]) * geometric_product.group1(),
            // e5
            geometric_product[e5] * self[scalar],
            // e15, e25, e35, e45
            Simd32x4::from(self[scalar]) * geometric_product.group3(),
            // e41, e42, e43
            Simd32x3::from(self[scalar]) * geometric_product.group4(),
            // e23, e31, e12
            Simd32x3::from(self[scalar]) * geometric_product.group5(),
            // e415, e425, e435, e321
            Simd32x4::from(self[scalar]) * geometric_product.group6(),
            // e423, e431, e412
            Simd32x3::from(self[scalar]) * geometric_product.group7(),
            // e235, e315, e125
            Simd32x3::from(self[scalar]) * geometric_product.group8(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[scalar]) * geometric_product.group9(),
            // e1234
            geometric_product[e1234] * self[scalar],
        );
    }
}
impl GeometricQuotient<Plane> for Scalar {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        4        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        2        5        0
    //  no simd        2        8        0
    fn geometric_quotient(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let other_2 = Scalar::from_groups(/* scalar */ -f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2));
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[scalar])
                * Simd32x4::from([
                    other[e4235] * other_2[scalar],
                    other[e4315] * other_2[scalar],
                    other[e4125] * other_2[scalar],
                    other[e3215] * other_2[scalar],
                ]),
        );
    }
}
impl GeometricQuotient<RoundPoint> for Scalar {
    type Output = RoundPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        4        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        3        6        0
    //  no simd        3       12        0
    fn geometric_quotient(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2) - 2.0 * (other[e4] * other[e5]),
        );
        let geometric_product = RoundPoint::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from(other_2[scalar]) * other.group0(), /* e5 */ other[e5] * other_2[scalar]);
        return RoundPoint::from_groups(
            // e1, e2, e3, e4
            Simd32x4::from(self[scalar]) * geometric_product.group0(),
            // e5
            geometric_product[e5] * self[scalar],
        );
    }
}
impl GeometricQuotient<Scalar> for Scalar {
    type Output = Scalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        0        1
    fn geometric_quotient(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ self[scalar] / (other[scalar]));
    }
}
impl GeometricQuotient<Sphere> for Scalar {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        4        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        3        6        0
    //  no simd        3       12        0
    fn geometric_quotient(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e3215] * other[e1234]) - f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2),
        );
        let geometric_product = Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * other.group0(),
            // e1234
            other_2[scalar] * other[e1234],
        );
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[scalar]) * geometric_product.group0(),
            // e1234
            self[scalar] * geometric_product[e1234],
        );
    }
}
impl GeometricQuotient<VersorEven> for Scalar {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11        8        0
    //    simd4        0       11        0
    // Totals...
    // yes simd       11       19        0
    //  no simd       11       52        0
    fn geometric_quotient(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let reverse = VersorEven::from_groups(
            // e423, e431, e412, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e5
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e4
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)
                - f32::powi(other[e12345], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125])
                - 2.0 * (other[e5] * other[e4]),
        );
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e5
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e1, e2, e3, e4
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(self[scalar]) * geometric_product.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(self[scalar]) * geometric_product.group1(),
            // e235, e315, e125, e5
            Simd32x4::from(self[scalar]) * geometric_product.group2(),
            // e1, e2, e3, e4
            Simd32x4::from(self[scalar]) * geometric_product.group3(),
        );
    }
}
impl GeometricQuotient<VersorOdd> for Scalar {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11        8        0
    //    simd4        0       11        0
    // Totals...
    // yes simd       11       19        0
    //  no simd       11       52        0
    fn geometric_quotient(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let reverse = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + 2.0 * (other[e1234] * other[e3215])
                + f32::powi(other[scalar], 2)
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2),
        );
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(self[scalar]) * geometric_product.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(self[scalar]) * geometric_product.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(self[scalar]) * geometric_product.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[scalar]) * geometric_product.group3(),
        );
    }
}
impl std::ops::Div<GeometricQuotientInfix> for Sphere {
    type Output = GeometricQuotientInfixPartial<Sphere>;
    fn div(self, _rhs: GeometricQuotientInfix) -> Self::Output {
        GeometricQuotientInfixPartial(self)
    }
}
impl GeometricQuotient<AntiCircleRotor> for Sphere {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       21       35        0
    //    simd3        2        5        0
    //    simd4        5        9        0
    // Totals...
    // yes simd       28       49        0
    //  no simd       47       86        0
    fn geometric_quotient(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiCircleRotor::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, scalar
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                + f32::powi(other[scalar], 2)
                - f32::powi(other[e45], 2),
        );
        let geometric_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[e1234]) * geometric_product.group1().xyz()) + (geometric_product.group0().zxy() * self.group0().yzx())
                - (geometric_product.group0().yzx() * self.group0().zxy()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (geometric_product[e41] * self[e3215]) + (geometric_product[e45] * self[e4235]) + (geometric_product[e15] * self[e1234]),
                (geometric_product[e42] * self[e3215]) + (geometric_product[e45] * self[e4315]) + (geometric_product[e25] * self[e1234]),
                (geometric_product[e43] * self[e3215]) + (geometric_product[e45] * self[e4125]) + (geometric_product[e35] * self[e1234]),
                -(geometric_product[e23] * self[e4235]) - (geometric_product[e31] * self[e4315]) - (geometric_product[e12] * self[e4125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                geometric_product[e35] * self[e4315] * -1.0,
                geometric_product[e15] * self[e4125] * -1.0,
                geometric_product[e25] * self[e4235] * -1.0,
                (geometric_product[e43] * self[e4125]) + (geometric_product[e45] * self[e1234]) + (geometric_product[scalar] * self[e1234]),
            ]) + (self.group0().zxyy() * geometric_product.group2().yzx().with_w(geometric_product[e42]))
                + (self.group0().wwwx() * geometric_product.group1().xyz().with_w(geometric_product[e41])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (geometric_product[e31] * self[e4125]) + (geometric_product[scalar] * self[e4235]),
                (geometric_product[e12] * self[e4235]) + (geometric_product[scalar] * self[e4315]),
                (geometric_product[e23] * self[e4315]) + (geometric_product[scalar] * self[e4125]),
                -(geometric_product[e25] * self[e4315]) - (geometric_product[e35] * self[e4125]),
            ]) + (Simd32x4::from(self[e3215]) * geometric_product.group0().with_w(geometric_product[scalar]))
                - (geometric_product.group1().zxyw() * self.group0().yzxw())
                - (geometric_product.group2().xyzx() * Simd32x3::from(self[e1234]).with_w(self[e4235])),
        );
    }
}
impl GeometricQuotient<AntiDipoleInversion> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       25       49        0
    //    simd3        0        6        0
    //    simd4       11       12        0
    // Totals...
    // yes simd       36       67        0
    //  no simd       69      115        0
    fn geometric_quotient(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e4
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125])
                - 2.0 * (other[e4] * other[e5]),
        );
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e4
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e1, e2, e3, e5
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                -(geometric_product[e431] * self[e4125]) - (geometric_product[e4] * self[e4235]) - (geometric_product[e1] * self[e1234]),
                -(geometric_product[e412] * self[e4235]) - (geometric_product[e4] * self[e4315]) - (geometric_product[e2] * self[e1234]),
                -(geometric_product[e423] * self[e4315]) - (geometric_product[e4] * self[e4125]) - (geometric_product[e3] * self[e1234]),
                (geometric_product[e2] * self[e4315]) + (geometric_product[e3] * self[e4125]) + (geometric_product[e5] * self[e1234]),
            ]) + (self.group0().yzxw() * geometric_product.group0().zxy().with_w(geometric_product[e4]))
                + (Simd32x3::from(self[e1234]) * geometric_product.group1().xyz()).with_w(geometric_product[e1] * self[e4235]),
            // e415, e425, e435, e321
            Simd32x4::from([
                geometric_product[e2] * self[e4125] * -1.0,
                geometric_product[e3] * self[e4235] * -1.0,
                geometric_product[e1] * self[e4315] * -1.0,
                geometric_product[e5] * self[e1234],
            ]) + (self.group0().yzxz() * geometric_product.group3().zxy().with_w(geometric_product[e435]))
                + (self.group0().wwwx() * geometric_product.group0().with_w(geometric_product[e415]))
                + (Simd32x3::from(self[e1234]) * geometric_product.group2().xyz()).with_w(geometric_product[e425] * self[e4315])
                - (self.group0() * geometric_product.group1().www().with_w(geometric_product[e4])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (geometric_product[e315] * self[e4125]) + (geometric_product[e1] * self[e3215]) + (geometric_product[e5] * self[e4235]),
                (geometric_product[e125] * self[e4235]) + (geometric_product[e2] * self[e3215]) + (geometric_product[e5] * self[e4315]),
                (geometric_product[e235] * self[e4315]) + (geometric_product[e3] * self[e3215]) + (geometric_product[e5] * self[e4125]),
                -(geometric_product[e315] * self[e4315]) - (geometric_product[e125] * self[e4125]),
            ]) + (Simd32x4::from(self[e3215]) * geometric_product.group1())
                - (geometric_product.group2().zxyx() * self.group0().yzxx()),
            // e1, e2, e3, e4
            Simd32x4::from([
                geometric_product[e425] * self[e4125] * -1.0,
                geometric_product[e435] * self[e4235] * -1.0,
                geometric_product[e415] * self[e4315] * -1.0,
                geometric_product[e412] * self[e4125],
            ]) + (self.group0().yzxx() * geometric_product.group1().zxy().with_w(geometric_product[e423]))
                + (Simd32x3::from(self[e1234]) * geometric_product.group2().xyz()).with_w(geometric_product[e431] * self[e4315])
                - (geometric_product.group0() * self.group0().www()).with_w(geometric_product[e321] * self[e1234]),
        );
    }
}
impl GeometricQuotient<AntiDualNum> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd2        0        1        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0       13        0
    fn geometric_quotient(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDualNum::from_groups(/* e3215, scalar */ Simd32x2::from(f32::powi(other[scalar], -2)) * other.group0());
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x3::from(0.0).with_w(geometric_product[e3215] * self[e1234]),
            // e23, e31, e12, e45
            Simd32x3::from(0.0).with_w(geometric_product[e3215] * self[e1234] * -1.0),
            // e15, e25, e35, e1234
            geometric_product.group0().xx().with_zw(geometric_product[e3215], geometric_product[scalar]) * self.group0().xyz().with_w(self[e1234]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(geometric_product[scalar]) * self.group0(),
        );
    }
}
impl GeometricQuotient<AntiFlatPoint> for Sphere {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       10        0
    //    simd3        2        5        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        5       16        0
    //  no simd        9       29        0
    fn geometric_quotient(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlatPoint::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(f32::powi(other[e321], -2)) * Simd32x4::from([other[e235] * -1.0, other[e315] * -1.0, other[e125] * -1.0, other[e321] * -1.0]),
        );
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            ((Simd32x3::from(self[e1234]) * geometric_product.group0().xyz()) - (Simd32x3::from(geometric_product[e321]) * self.group0().xyz())).with_w(0.0),
            // e235, e315, e125, e4
            ((geometric_product.group0().yzx() * self.group0().zxy()) - (geometric_product.group0().zxy() * self.group0().yzx()))
                .with_w(geometric_product[e321] * self[e1234] * -1.0),
            // e1, e2, e3, e5
            (Simd32x3::from(self[e1234]) * geometric_product.group0().xyz()).with_w(
                (geometric_product[e321] * self[e3215])
                    - (geometric_product[e235] * self[e4235])
                    - (geometric_product[e315] * self[e4315])
                    - (geometric_product[e125] * self[e4125]),
            ),
        );
    }
}
impl GeometricQuotient<AntiFlector> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       13        0
    //    simd3        3        6        0
    //    simd4        2        7        0
    // Totals...
    // yes simd       15       26        0
    //  no simd       27       59        0
    fn geometric_quotient(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiFlector::from_groups(/* e235, e315, e125, e321 */ other.group0() * Simd32x4::from(-1.0), /* e1, e2, e3, e5 */ other.group1());
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2),
        );
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e1, e2, e3, e5
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x3::from(self[e1234]) * geometric_product.group1().xyz() * Simd32x3::from(-1.0)).with_w(
                (geometric_product[e1] * self[e4235]) + (geometric_product[e2] * self[e4315]) + (geometric_product[e3] * self[e4125]) + (geometric_product[e5] * self[e1234]),
            ),
            // e415, e425, e435, e321
            ((Simd32x3::from(self[e1234]) * geometric_product.group0().xyz()) + (geometric_product.group1().zxy() * self.group0().yzx())
                - (Simd32x3::from(geometric_product[e321]) * self.group0().xyz())
                - (geometric_product.group1().yzx() * self.group0().zxy()))
            .with_w(geometric_product[e5] * self[e1234]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (geometric_product[e1] * self[e3215]) + (geometric_product[e5] * self[e4235]),
                (geometric_product[e2] * self[e3215]) + (geometric_product[e5] * self[e4315]),
                (geometric_product[e3] * self[e3215]) + (geometric_product[e5] * self[e4125]),
                -(geometric_product[e315] * self[e4315]) - (geometric_product[e125] * self[e4125]),
            ]) + (geometric_product.group0().yzxw() * self.group0().zxyw())
                - (geometric_product.group0().zxyx() * self.group0().yzxx()),
            // e1, e2, e3, e4
            Simd32x4::from(self[e1234]) * geometric_product.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
    }
}
impl GeometricQuotient<AntiLine> for Sphere {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        9        0
    //    simd3        0       10        0
    //    simd4        4        1        0
    // Totals...
    // yes simd        8       20        0
    //  no simd       20       43        0
    fn geometric_quotient(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiLine::from_groups(
            // e23, e31, e12
            other.group0() * Simd32x3::from(-1.0),
            // e15, e25, e35
            other.group1() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(/* scalar */ f32::powi(other[e23], 2) + f32::powi(other[e31], 2) + f32::powi(other[e12], 2));
        let geometric_product = AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e15, e25, e35
            Simd32x3::from(other_2[scalar]) * reverse.group1(),
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[e1234]) * geometric_product.group0(),
            // e23, e31, e12, e45
            (Simd32x3::from(self[e1234]) * geometric_product.group1())
                .with_w(-(geometric_product[e23] * self[e4235]) - (geometric_product[e31] * self[e4315]) - (geometric_product[e12] * self[e4125])),
            // e15, e25, e35, e1234
            (Simd32x3::from(self[e3215]) * geometric_product.group0()).with_w(0.0) + (geometric_product.group1().yzx() * self.group0().zxy()).with_w(0.0)
                - (geometric_product.group1().zxy() * self.group0().yzx()).with_w(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                geometric_product[e31] * self[e4125],
                geometric_product[e12] * self[e4235],
                geometric_product[e23] * self[e4315],
                geometric_product[e35] * self[e4125] * -1.0,
            ]) - (self.group0().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e15]))
                - (Simd32x3::from(self[e1234]) * geometric_product.group1()).with_w(geometric_product[e25] * self[e4315]),
        );
    }
}
impl GeometricQuotient<AntiMotor> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       10        0
    //    simd3        3        5        0
    //    simd4        3        8        0
    // Totals...
    // yes simd       12       23        0
    //  no simd       27       57        0
    fn geometric_quotient(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, e3215
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e23], 2) + f32::powi(other[e31], 2) + f32::powi(other[e12], 2) + f32::powi(other[scalar], 2),
        );
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e15, e25, e35, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(self[e1234]) * geometric_product.group0().xyz().with_w(geometric_product[e3215]),
            // e23, e31, e12, e45
            (Simd32x3::from(self[e1234]) * geometric_product.group1().xyz()).with_w(
                -(geometric_product[e23] * self[e4235])
                    - (geometric_product[e31] * self[e4315])
                    - (geometric_product[e12] * self[e4125])
                    - (geometric_product[e3215] * self[e1234]),
            ),
            // e15, e25, e35, e1234
            ((Simd32x3::from(geometric_product[e3215]) * self.group0().xyz())
                + (Simd32x3::from(self[e3215]) * geometric_product.group0().xyz())
                + (geometric_product.group1().yzx() * self.group0().zxy())
                - (geometric_product.group1().zxy() * self.group0().yzx()))
            .with_w(geometric_product[scalar] * self[e1234]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                geometric_product[scalar] * self[e4235],
                geometric_product[scalar] * self[e4315],
                geometric_product[scalar] * self[e4125],
                geometric_product[e35] * self[e4125] * -1.0,
            ]) + (geometric_product.group0().yzxw() * self.group0().zxyw())
                - (geometric_product.group1().xyzy() * Simd32x3::from(self[e1234]).with_w(self[e4315]))
                - (self.group0().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e15])),
        );
    }
}
impl GeometricQuotient<AntiPlane> for Sphere {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        3        0
    //    simd3        1        4        0
    //    simd4        2        3        0
    // Totals...
    // yes simd        6       10        0
    //  no simd       14       27        0
    fn geometric_quotient(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiPlane::from_groups(
            // e1, e2, e3, e5
            Simd32x4::from(f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)) * other.group0(),
        );
        return CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[e1234]) * geometric_product.group0().xyz() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            ((geometric_product.group0().zxy() * self.group0().yzx()) - (geometric_product.group0().yzx() * self.group0().zxy())).with_w(geometric_product[e5] * self[e1234]),
            // e235, e315, e125, e12345
            (geometric_product.group0().xyzx() * self.group0().wwwx())
                + (geometric_product.group0().wwwy() * self.group0().xyzy())
                + Simd32x3::from(0.0).with_w((geometric_product[e3] * self[e4125]) + (geometric_product[e5] * self[e1234])),
        );
    }
}
impl GeometricQuotient<AntiScalar> for Sphere {
    type Output = RoundPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        1
    //    simd3        0        2        0
    // Totals...
    // yes simd        0        5        1
    //  no simd        0        9        1
    fn geometric_quotient(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiScalar::from_groups(/* e12345 */ 1.0 / other[e12345] * -1.0);
        return RoundPoint::from_groups(
            // e1, e2, e3, e4
            (Simd32x3::from(geometric_product[e12345]) * self.group0().xyz() * Simd32x3::from(-1.0)).with_w(geometric_product[e12345] * self[e1234]),
            // e5
            geometric_product[e12345] * self[e3215],
        );
    }
}
impl GeometricQuotient<Circle> for Sphere {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       22        0
    //    simd3        2       10        0
    //    simd4        8        7        0
    // Totals...
    // yes simd       16       39        0
    //  no simd       44       80        0
    fn geometric_quotient(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let reverse = Circle::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125
            other.group2() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group2(),
        );
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[e1234]) * geometric_product.group1().xyz()) + (geometric_product.group0().zxy() * self.group0().yzx())
                - (geometric_product.group0().yzx() * self.group0().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                geometric_product[e321] * self[e4235] * -1.0,
                geometric_product[e321] * self[e4315] * -1.0,
                geometric_product[e321] * self[e4125] * -1.0,
                geometric_product[e435] * self[e4125],
            ]) + (self.group0().wwwx() * geometric_product.group0().with_w(geometric_product[e415]))
                + (Simd32x3::from(self[e1234]) * geometric_product.group2()).with_w(geometric_product[e425] * self[e4315]),
            // e235, e315, e125, e4
            (self.group0().zxyx() * geometric_product.group2().yzx().with_w(geometric_product[e423]))
                + (self.group0().wwwy() * geometric_product.group1().xyz().with_w(geometric_product[e431]))
                + Simd32x3::from(0.0).with_w(geometric_product[e412] * self[e4125])
                - (geometric_product.group2().zxy() * self.group0().yzx()).with_w(geometric_product[e321] * self[e1234]),
            // e1, e2, e3, e5
            Simd32x4::from([
                geometric_product[e435] * self[e4315],
                geometric_product[e415] * self[e4125],
                geometric_product[e425] * self[e4235],
                geometric_product[e125] * self[e4125] * -1.0,
            ]) + (Simd32x3::from(self[e1234]) * geometric_product.group2()).with_w(geometric_product[e321] * self[e3215])
                - (self.group0().zxyy() * geometric_product.group1().yzx().with_w(geometric_product[e315]))
                - (self.group0().wwwx() * geometric_product.group0().with_w(geometric_product[e235])),
        );
    }
}
impl GeometricQuotient<CircleRotor> for Sphere {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       17        0
    //    simd3        2        7        0
    //    simd4        9       12        0
    // Totals...
    // yes simd       19       36        0
    //  no simd       50       86        0
    fn geometric_quotient(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let reverse = CircleRotor::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e12345
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - f32::powi(other[e12345], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
        );
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[e1234]) * geometric_product.group1().xyz()) + (geometric_product.group0().zxy() * self.group0().yzx())
                - (geometric_product.group0().yzx() * self.group0().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                geometric_product[e321] * self[e4235] * -1.0,
                geometric_product[e321] * self[e4315] * -1.0,
                geometric_product[e321] * self[e4125] * -1.0,
                geometric_product[e435] * self[e4125],
            ]) + (self.group0().wwwx() * geometric_product.group0().with_w(geometric_product[e415]))
                + (Simd32x3::from(self[e1234]) * geometric_product.group2().xyz()).with_w(geometric_product[e425] * self[e4315]),
            // e235, e315, e125, e4
            (self.group0().zxyy() * geometric_product.group2().yzx().with_w(geometric_product[e431]))
                + (self.group0().wwwx() * geometric_product.group1().xyz().with_w(geometric_product[e423]))
                + Simd32x3::from(0.0).with_w((geometric_product[e412] * self[e4125]) + (geometric_product[e12345] * self[e1234]))
                - (geometric_product.group2().zxy() * self.group0().yzx()).with_w(geometric_product[e321] * self[e1234]),
            // e1, e2, e3, e5
            (geometric_product.group2() * Simd32x3::from(self[e1234]).with_w(self[e3215])) + (geometric_product.group1().zxyw() * self.group0().yzxw())
                - (geometric_product.group2().wwwz() * self.group0().xyzz())
                - (self.group0().zxyy() * geometric_product.group1().yzx().with_w(geometric_product[e315]))
                - (self.group0().wwwx() * geometric_product.group0().with_w(geometric_product[e235])),
        );
    }
}
impl GeometricQuotient<Dipole> for Sphere {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       35        0
    //    simd3        2        8        0
    //    simd4        4        5        0
    // Totals...
    // yes simd       25       48        0
    //  no simd       41       79        0
    fn geometric_quotient(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let reverse = Dipole::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35
            other.group2() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2),
        );
        let geometric_product = Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35
            Simd32x3::from(other_2[scalar]) * reverse.group2(),
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[e1234]) * geometric_product.group1().xyz()) + (geometric_product.group0().zxy() * self.group0().yzx())
                - (geometric_product.group0().yzx() * self.group0().zxy()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (geometric_product[e41] * self[e3215]) + (geometric_product[e45] * self[e4235]) + (geometric_product[e15] * self[e1234]),
                (geometric_product[e42] * self[e3215]) + (geometric_product[e45] * self[e4315]) + (geometric_product[e25] * self[e1234]),
                (geometric_product[e43] * self[e3215]) + (geometric_product[e45] * self[e4125]) + (geometric_product[e35] * self[e1234]),
                -(geometric_product[e23] * self[e4235]) - (geometric_product[e31] * self[e4315]) - (geometric_product[e12] * self[e4125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                geometric_product[e35] * self[e4315] * -1.0,
                geometric_product[e15] * self[e4125] * -1.0,
                geometric_product[e25] * self[e4235] * -1.0,
                (geometric_product[e43] * self[e4125]) + (geometric_product[e45] * self[e1234]),
            ]) + (self.group0().zxyx() * geometric_product.group2().yzx().with_w(geometric_product[e41]))
                + (self.group0().wwwy() * geometric_product.group1().xyz().with_w(geometric_product[e42])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (geometric_product[e41] * self[e3215]) + (geometric_product[e31] * self[e4125]),
                (geometric_product[e42] * self[e3215]) + (geometric_product[e12] * self[e4235]),
                (geometric_product[e43] * self[e3215]) + (geometric_product[e23] * self[e4315]),
                -(geometric_product[e45] * self[e3215]) - (geometric_product[e35] * self[e4125]),
            ]) - (self.group0().yzxy() * geometric_product.group1().zxy().with_w(geometric_product[e25]))
                - (Simd32x3::from(self[e1234]) * geometric_product.group2()).with_w(geometric_product[e15] * self[e4235]),
        );
    }
}
impl GeometricQuotient<DipoleInversion> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       25       40        0
    //    simd3        0        2        0
    //    simd4       11       16        0
    // Totals...
    // yes simd       36       58        0
    //  no simd       69      110        0
    fn geometric_quotient(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let reverse = DipoleInversion::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + 2.0 * (other[e1234] * other[e3215])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2),
        );
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                geometric_product[e4235] * self[e1234],
                geometric_product[e4315] * self[e1234],
                geometric_product[e4125] * self[e1234],
                geometric_product[e4125] * self[e4125] * -1.0,
            ]) + (Simd32x4::from(self[e1234]) * geometric_product.group1().xyz().with_w(geometric_product[e3215]))
                + (self.group0().yzxw() * geometric_product.group0().zxy().with_w(geometric_product[e1234]))
                - (self.group0().xyzy() * geometric_product.group2().www().with_w(geometric_product[e4315]))
                - (self.group0().zxyx() * geometric_product.group0().yzx().with_w(geometric_product[e4235])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (geometric_product[e45] * self[e4235]) + (geometric_product[e15] * self[e1234]) + (geometric_product[e4315] * self[e4125]),
                (geometric_product[e45] * self[e4315]) + (geometric_product[e25] * self[e1234]) + (geometric_product[e4125] * self[e4235]),
                (geometric_product[e45] * self[e4125]) + (geometric_product[e35] * self[e1234]) + (geometric_product[e4235] * self[e4315]),
                -(geometric_product[e31] * self[e4315]) - (geometric_product[e12] * self[e4125]) - (geometric_product[e3215] * self[e1234]),
            ]) + (Simd32x4::from(self[e3215]) * geometric_product.group0().with_w(geometric_product[e1234]))
                - (self.group0().yzxx() * geometric_product.group3().zxy().with_w(geometric_product[e23])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(geometric_product[e35] * self[e4315]) - (geometric_product[e4235] * self[e3215]),
                -(geometric_product[e15] * self[e4125]) - (geometric_product[e4315] * self[e3215]),
                -(geometric_product[e25] * self[e4235]) - (geometric_product[e4125] * self[e3215]),
                geometric_product[e45] * self[e1234],
            ]) + (self.group0().xyzz() * geometric_product.group3().www().with_w(geometric_product[e43]))
                + (self.group0().zxyy() * geometric_product.group2().yzx().with_w(geometric_product[e42]))
                + (self.group0().wwwx() * geometric_product.group1().xyz().with_w(geometric_product[e41])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (geometric_product[e41] * self[e3215]) + (geometric_product[e31] * self[e4125]),
                (geometric_product[e42] * self[e3215]) + (geometric_product[e12] * self[e4235]),
                (geometric_product[e43] * self[e3215]) + (geometric_product[e23] * self[e4315]),
                -(geometric_product[e25] * self[e4315]) - (geometric_product[e35] * self[e4125]),
            ]) - (geometric_product.group1().zxyw() * self.group0().yzxw())
                - (geometric_product.group2().xyzx() * Simd32x3::from(self[e1234]).with_w(self[e4235])),
        );
    }
}
impl GeometricQuotient<DualNum> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd2        0        1        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        0        7        0
    //  no simd        0       17        0
    fn geometric_quotient(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DualNum::from_groups(/* e5, e12345 */ Simd32x2::from(f32::powi(other[e12345], -2) * -1.0) * other.group0());
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x3::from(0.0).with_w(geometric_product[e5] * self[e1234]),
            // e415, e425, e435, e321
            Simd32x3::from(0.0).with_w(geometric_product[e5] * self[e1234]),
            // e235, e315, e125, e5
            self.group0() * geometric_product.group0().xx().with_zw(geometric_product[e5], geometric_product[e12345]),
            // e1, e2, e3, e4
            Simd32x4::from(geometric_product[e12345]) * self.group0().xyz().with_w(self[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricQuotient<FlatPoint> for Sphere {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       10        0
    //    simd3        2        6        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        5       17        0
    //  no simd        9       32        0
    fn geometric_quotient(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = FlatPoint::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(f32::powi(other[e45], -2) * -1.0) * Simd32x4::from([other[e15] * -1.0, other[e25] * -1.0, other[e35] * -1.0, other[e45] * -1.0]),
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            ((Simd32x3::from(geometric_product[e45]) * self.group0().xyz()) + (Simd32x3::from(self[e1234]) * geometric_product.group0().xyz())).with_w(0.0),
            // e15, e25, e35, e1234
            ((geometric_product.group0().yzx() * self.group0().zxy()) - (geometric_product.group0().zxy() * self.group0().yzx())).with_w(geometric_product[e45] * self[e1234]),
            // e4235, e4315, e4125, e3215
            (Simd32x3::from(self[e1234]) * geometric_product.group0().xyz() * Simd32x3::from(-1.0)).with_w(
                -(geometric_product[e15] * self[e4235]) - (geometric_product[e25] * self[e4315]) - (geometric_product[e35] * self[e4125]) - (geometric_product[e45] * self[e3215]),
            ),
        );
    }
}
impl GeometricQuotient<Flector> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       11        0
    //    simd3        6       11        0
    //    simd4        0        3        0
    // Totals...
    // yes simd       15       25        0
    //  no simd       27       56        0
    fn geometric_quotient(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let reverse = Flector::from_groups(
            // e15, e25, e35, e45
            other.group0() * Simd32x4::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group1(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            -f32::powi(other[e45], 2) - f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2),
        );
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x3::from(self[e1234]) * geometric_product.group1().xyz()).with_w(
                (geometric_product[e3215] * self[e1234])
                    - (geometric_product[e4235] * self[e4235])
                    - (geometric_product[e4315] * self[e4315])
                    - (geometric_product[e4125] * self[e4125]),
            ),
            // e23, e31, e12, e45
            ((Simd32x3::from(geometric_product[e45]) * self.group0().xyz())
                + (Simd32x3::from(self[e1234]) * geometric_product.group0().xyz())
                + (geometric_product.group1().yzx() * self.group0().zxy())
                - (geometric_product.group1().zxy() * self.group0().yzx()))
            .with_w(geometric_product[e3215] * self[e1234] * -1.0),
            // e15, e25, e35, e1234
            ((Simd32x3::from(geometric_product[e3215]) * self.group0().xyz()) + (geometric_product.group0().yzx() * self.group0().zxy())
                - (Simd32x3::from(self[e3215]) * geometric_product.group1().xyz())
                - (geometric_product.group0().zxy() * self.group0().yzx()))
            .with_w(geometric_product[e45] * self[e1234]),
            // e4235, e4315, e4125, e3215
            (Simd32x3::from(self[e1234]) * geometric_product.group0().xyz() * Simd32x3::from(-1.0)).with_w(
                -(geometric_product[e15] * self[e4235]) - (geometric_product[e25] * self[e4315]) - (geometric_product[e35] * self[e4125]) - (geometric_product[e45] * self[e3215]),
            ),
        );
    }
}
impl GeometricQuotient<Line> for Sphere {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       11        0
    //    simd3        0        9        0
    //    simd4        3        1        0
    // Totals...
    // yes simd       11       21        0
    //  no simd       20       42        0
    fn geometric_quotient(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let reverse = Line::from_groups(
            // e415, e425, e435
            other.group0() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group1() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(/* scalar */ -f32::powi(other[e415], 2) - f32::powi(other[e425], 2) - f32::powi(other[e435], 2));
        let geometric_product = Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group1(),
        );
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[e1234]) * geometric_product.group0(),
            // e415, e425, e435, e321
            (Simd32x3::from(self[e1234]) * geometric_product.group1())
                .with_w((geometric_product[e415] * self[e4235]) + (geometric_product[e425] * self[e4315]) + (geometric_product[e435] * self[e4125])),
            // e235, e315, e125, e4
            (Simd32x3::from(self[e3215]) * geometric_product.group0()).with_w(0.0) + (geometric_product.group1().yzx() * self.group0().zxy()).with_w(0.0)
                - (geometric_product.group1().zxy() * self.group0().yzx()).with_w(0.0),
            // e1, e2, e3, e5
            Simd32x4::from([
                (geometric_product[e435] * self[e4315]) + (geometric_product[e235] * self[e1234]),
                (geometric_product[e415] * self[e4125]) + (geometric_product[e315] * self[e1234]),
                (geometric_product[e425] * self[e4235]) + (geometric_product[e125] * self[e1234]),
                -(geometric_product[e315] * self[e4315]) - (geometric_product[e125] * self[e4125]),
            ]) - (self.group0().zxyx() * geometric_product.group0().yzx().with_w(geometric_product[e235])),
        );
    }
}
impl GeometricQuotient<Motor> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       13        0
    //    simd3        3        5        0
    //    simd4        2        7        0
    // Totals...
    // yes simd       15       25        0
    //  no simd       27       56        0
    fn geometric_quotient(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let reverse = Motor::from_groups(
            // e415, e425, e435, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            -f32::powi(other[e415], 2) - f32::powi(other[e425], 2) - f32::powi(other[e435], 2) - f32::powi(other[e12345], 2),
        );
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e235, e315, e125, e5
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(self[e1234]) * geometric_product.group0().xyz().with_w(geometric_product[e5]),
            // e415, e425, e435, e321
            (Simd32x3::from(self[e1234]) * geometric_product.group1().xyz()).with_w(
                (geometric_product[e415] * self[e4235]) + (geometric_product[e425] * self[e4315]) + (geometric_product[e435] * self[e4125]) + (geometric_product[e5] * self[e1234]),
            ),
            // e235, e315, e125, e5
            Simd32x4::from([
                (geometric_product[e315] * self[e4125]) + (geometric_product[e5] * self[e4235]),
                (geometric_product[e125] * self[e4235]) + (geometric_product[e5] * self[e4315]),
                (geometric_product[e235] * self[e4315]) + (geometric_product[e5] * self[e4125]),
                -(geometric_product[e315] * self[e4315]) - (geometric_product[e125] * self[e4125]),
            ]) + (Simd32x4::from(self[e3215]) * geometric_product.group0())
                - (geometric_product.group1().zxyx() * self.group0().yzxx()),
            // e1, e2, e3, e4
            ((Simd32x3::from(self[e1234]) * geometric_product.group1().xyz()) + (geometric_product.group0().zxy() * self.group0().yzx())
                - (Simd32x3::from(geometric_product[e12345]) * self.group0().xyz())
                - (geometric_product.group0().yzx() * self.group0().zxy()))
            .with_w(geometric_product[e12345] * self[e1234]),
        );
    }
}
impl GeometricQuotient<MultiVector> for Sphere {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       47       67        0
    //    simd2        2        3        0
    //    simd3       16       30        0
    //    simd4       13       17        0
    // Totals...
    // yes simd       78      117        0
    //  no simd      151      231        0
    fn geometric_quotient(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let reverse = MultiVector::from_groups(
            // scalar, e12345
            other.group0(),
            // e1, e2, e3, e4
            other.group1(),
            // e5
            other[e5],
            // e15, e25, e35, e45
            other.group3() * Simd32x4::from(-1.0),
            // e41, e42, e43
            other.group4() * Simd32x3::from(-1.0),
            // e23, e31, e12
            other.group5() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group6() * Simd32x4::from(-1.0),
            // e423, e431, e412
            other.group7() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group8() * Simd32x3::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group9(),
            // e1234
            other[e1234],
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e15] * other[e41])
                + 2.0 * (other[e25] * other[e42])
                + 2.0 * (other[e35] * other[e43])
                + 2.0 * (other[e3215] * other[e1234])
                + f32::powi(other[scalar], 2)
                + f32::powi(other[e1], 2)
                + f32::powi(other[e2], 2)
                + f32::powi(other[e3], 2)
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                + f32::powi(other[e321], 2)
                - f32::powi(other[e12345], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2)
                - 2.0 * (other[e4] * other[e5])
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(other_2[scalar]) * reverse.group0(),
            // e1, e2, e3, e4
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e5
            reverse[e5] * other_2[scalar],
            // e15, e25, e35, e45
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group4(),
            // e23, e31, e12
            Simd32x3::from(other_2[scalar]) * reverse.group5(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group6(),
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group7(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group8(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group9(),
            // e1234
            reverse[e1234] * other_2[scalar],
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                -(geometric_product[e4235] * self[e4235]) - (geometric_product[e4315] * self[e4315]) - (geometric_product[e4125] * self[e4125]),
                (geometric_product[e2] * self[e4315]) + (geometric_product[e3] * self[e4125]) + (geometric_product[e4] * self[e3215]),
            ]) + (Simd32x2::from(self[e1234]) * Simd32x2::from([geometric_product[e3215], geometric_product[e5]]))
                + (Simd32x2::from([geometric_product[e1234], geometric_product[e1]]) * self.group0().wx()),
            // e1, e2, e3, e4
            Simd32x4::from([
                -(geometric_product[e425] * self[e4125]) - (geometric_product[e423] * self[e3215]),
                -(geometric_product[e435] * self[e4235]) - (geometric_product[e431] * self[e3215]),
                -(geometric_product[e415] * self[e4315]) - (geometric_product[e412] * self[e3215]),
                (geometric_product[e431] * self[e4315]) + (geometric_product[e412] * self[e4125]),
            ]) + (Simd32x4::from(self[e1234]) * geometric_product.group8().with_w(geometric_product[e12345]))
                + (self.group0().yzxx() * geometric_product.group6().zxy().with_w(geometric_product[e423]))
                - (geometric_product.group0().yy().with_zw(geometric_product[e12345], geometric_product[e321]) * self.group0().xyz().with_w(self[e1234])),
            // e5
            (geometric_product[e12345] * self[e3215]) + (geometric_product[e321] * self[e3215])
                - (geometric_product[e235] * self[e4235])
                - (geometric_product[e315] * self[e4315])
                - (geometric_product[e125] * self[e4125]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (geometric_product[e25] * self[e4125]) + (geometric_product[e3215] * self[e4235]),
                (geometric_product[e35] * self[e4235]) + (geometric_product[e3215] * self[e4315]),
                (geometric_product[e15] * self[e4315]) + (geometric_product[e3215] * self[e4125]),
                -(geometric_product[e12] * self[e4125]) - (geometric_product[e3215] * self[e1234]),
            ]) + (geometric_product.group5() * self.group0().www()).with_w(geometric_product[e1234] * self[e3215])
                - (self.group0().yzxx() * geometric_product.group3().zxy().with_w(geometric_product[e23]))
                - (self.group0().wwwy() * geometric_product.group9().xyz().with_w(geometric_product[e31])),
            // e41, e42, e43
            (Simd32x3::from(self[e1234]) * geometric_product.group5())
                + (Simd32x3::from(self[e1234]) * geometric_product.group9().xyz())
                + (geometric_product.group4().zxy() * self.group0().yzx())
                - (Simd32x3::from(geometric_product[e1234]) * self.group0().xyz())
                - (geometric_product.group4().yzx() * self.group0().zxy()),
            // e23, e31, e12
            (Simd32x3::from(geometric_product[e45]) * self.group0().xyz())
                + (Simd32x3::from(self[e3215]) * geometric_product.group4())
                + (Simd32x3::from(self[e1234]) * geometric_product.group3().xyz())
                + (geometric_product.group9().yzx() * self.group0().zxy())
                - (geometric_product.group9().zxy() * self.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                geometric_product[e321] * self[e4235] * -1.0,
                geometric_product[e321] * self[e4315] * -1.0,
                geometric_product[e321] * self[e4125] * -1.0,
                geometric_product[e5] * self[e1234],
            ]) + (self.group0().yzxz() * geometric_product.group1().zxy().with_w(geometric_product[e435]))
                + (self.group0().wwwx() * geometric_product.group7().with_w(geometric_product[e415]))
                + (Simd32x3::from(self[e1234]) * geometric_product.group8()).with_w(geometric_product[e425] * self[e4315])
                - (geometric_product.group1().yzxw() * self.group0().zxyw()),
            // e423, e431, e412
            (Simd32x3::from(self[e1234]) * geometric_product.group6().xyz()) + (geometric_product.group7().zxy() * self.group0().yzx())
                - (Simd32x3::from(geometric_product[e4]) * self.group0().xyz())
                - (Simd32x3::from(self[e1234]) * geometric_product.group1().xyz())
                - (geometric_product.group7().yzx() * self.group0().zxy()),
            // e235, e315, e125
            (Simd32x3::from(geometric_product[e5]) * self.group0().xyz())
                + (Simd32x3::from(self[e3215]) * geometric_product.group1().xyz())
                + (Simd32x3::from(self[e3215]) * geometric_product.group6().xyz())
                + (geometric_product.group8().yzx() * self.group0().zxy())
                - (geometric_product.group8().zxy() * self.group0().yzx()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (geometric_product[e41] * self[e3215]) + (geometric_product[e31] * self[e4125]),
                (geometric_product[e42] * self[e3215]) + (geometric_product[e12] * self[e4235]),
                (geometric_product[e43] * self[e3215]) + (geometric_product[e23] * self[e4315]),
                -(geometric_product[e35] * self[e4125]) - (geometric_product[e45] * self[e3215]),
            ]) + (Simd32x4::from(geometric_product[scalar]) * self.group0())
                - (geometric_product.group3().xyzy() * Simd32x3::from(self[e1234]).with_w(self[e4315]))
                - (self.group0().yzxx() * geometric_product.group5().zxy().with_w(geometric_product[e15])),
            // e1234
            (geometric_product[scalar] * self[e1234])
                + (geometric_product[e45] * self[e1234])
                + (geometric_product[e41] * self[e4235])
                + (geometric_product[e42] * self[e4315])
                + (geometric_product[e43] * self[e4125]),
        );
    }
}
impl GeometricQuotient<Plane> for Sphere {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        4        0
    //    simd3        1        3        0
    //    simd4        2        3        0
    // Totals...
    // yes simd        6       10        0
    //  no simd       14       25        0
    fn geometric_quotient(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Plane::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(-f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2)) * other.group0(),
        );
        return AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[e1234]) * geometric_product.group0().xyz(),
            // e23, e31, e12, e45
            ((geometric_product.group0().yzx() * self.group0().zxy()) - (geometric_product.group0().zxy() * self.group0().yzx()))
                .with_w(geometric_product[e3215] * self[e1234] * -1.0),
            // e15, e25, e35, scalar
            (Simd32x4::from(geometric_product[e3215]) * self.group0().xyz().with_w(self[e1234]))
                + Simd32x3::from(0.0).with_w(-(geometric_product[e4315] * self[e4315]) - (geometric_product[e4125] * self[e4125]))
                - (geometric_product.group0().xyzx() * self.group0().wwwx()),
        );
    }
}
impl GeometricQuotient<RoundPoint> for Sphere {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5        8        0
    //    simd3        1        4        0
    //    simd4        3        3        0
    // Totals...
    // yes simd        9       15        0
    //  no simd       20       32        0
    fn geometric_quotient(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2) - 2.0 * (other[e4] * other[e5]),
        );
        let geometric_product = RoundPoint::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from(other_2[scalar]) * other.group0(), /* e5 */ other[e5] * other_2[scalar]);
        return CircleRotor::from_groups(
            // e423, e431, e412
            -(Simd32x3::from(geometric_product[e4]) * self.group0().xyz()) - (Simd32x3::from(self[e1234]) * geometric_product.group0().xyz()),
            // e415, e425, e435, e321
            (geometric_product.group0().zxy() * self.group0().yzx()).with_w(geometric_product[e5] * self[e1234]) - (geometric_product.group0().yzxw() * self.group0().zxyw()),
            // e235, e315, e125, e12345
            (geometric_product.group0().xyzx() * self.group0().wwwx())
                + Simd32x3::from(0.0).with_w((geometric_product[e3] * self[e4125]) + (geometric_product[e4] * self[e3215]) + (geometric_product[e5] * self[e1234]))
                + (Simd32x3::from(geometric_product[e5]) * self.group0().xyz()).with_w(geometric_product[e2] * self[e4315]),
        );
    }
}
impl GeometricQuotient<Scalar> for Sphere {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        1
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        1
    //  no simd        0        5        1
    fn geometric_quotient(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Scalar::from_groups(/* scalar */ 1.0 / other[scalar]);
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(geometric_product[scalar]) * self.group0(),
            // e1234
            geometric_product[scalar] * self[e1234],
        );
    }
}
impl GeometricQuotient<Sphere> for Sphere {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5        7        0
    //    simd3        1        3        0
    //    simd4        3        4        0
    // Totals...
    // yes simd        9       14        0
    //  no simd       20       32        0
    fn geometric_quotient(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e3215] * other[e1234]) - f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2),
        );
        let geometric_product = Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * other.group0(),
            // e1234
            other_2[scalar] * other[e1234],
        );
        return AntiCircleRotor::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[e1234]) * geometric_product.group0().xyz()) - (Simd32x3::from(geometric_product[e1234]) * self.group0().xyz()),
            // e23, e31, e12, e45
            (geometric_product.group0().yzx() * self.group0().zxy()).with_w(geometric_product[e1234] * self[e3215])
                - (geometric_product.group0().zxyw() * self.group0().yzx().with_w(self[e1234])),
            // e15, e25, e35, scalar
            (Simd32x4::from(geometric_product[e3215]) * self.group0().xyz().with_w(self[e1234]))
                + Simd32x3::from(0.0).with_w((geometric_product[e1234] * self[e3215]) - (geometric_product[e4315] * self[e4315]) - (geometric_product[e4125] * self[e4125]))
                - (geometric_product.group0().xyzx() * self.group0().wwwx()),
        );
    }
}
impl GeometricQuotient<VersorEven> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       27       46        0
    //    simd3        0        3        0
    //    simd4       12       16        0
    // Totals...
    // yes simd       39       65        0
    //  no simd       75      119        0
    fn geometric_quotient(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let reverse = VersorEven::from_groups(
            // e423, e431, e412, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e5
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e4
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)
                - f32::powi(other[e12345], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125])
                - 2.0 * (other[e5] * other[e4]),
        );
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e5
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e1, e2, e3, e4
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                -(self[e4235] * geometric_product[e4]) - (self[e4125] * geometric_product[e431]) - (self[e1234] * geometric_product[e1]),
                -(self[e4235] * geometric_product[e412]) - (self[e4315] * geometric_product[e4]) - (self[e1234] * geometric_product[e2]),
                -(self[e4315] * geometric_product[e423]) - (self[e4125] * geometric_product[e4]) - (self[e1234] * geometric_product[e3]),
                (self[e4125] * geometric_product[e3]) + (self[e3215] * geometric_product[e4]) + (self[e1234] * geometric_product[e5]),
            ]) + (self.group0().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e1]))
                + (Simd32x3::from(self[e1234]) * geometric_product.group1().xyz()).with_w(self[e4315] * geometric_product[e2]),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e4125] * geometric_product[e2] * -1.0,
                self[e4315] * geometric_product[e321] * -1.0,
                self[e4125] * geometric_product[e321] * -1.0,
                self[e1234] * geometric_product[e5],
            ]) + (self.group0().yzxx() * geometric_product.group3().zxy().with_w(geometric_product[e415]))
                + (self.group0().wwwy() * geometric_product.group0().xyz().with_w(geometric_product[e425]))
                + (Simd32x3::from(self[e1234]) * geometric_product.group2().xyz()).with_w(self[e4125] * geometric_product[e435])
                - (Simd32x4::from([geometric_product[e321], geometric_product[e3], geometric_product[e1], geometric_product[e4]]) * self.group0().xxyw()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e3215] * geometric_product[e415]) + (self[e3215] * geometric_product[e1]),
                (self[e3215] * geometric_product[e425]) + (self[e3215] * geometric_product[e2]),
                (self[e3215] * geometric_product[e435]) + (self[e3215] * geometric_product[e3]),
                -(self[e4315] * geometric_product[e315]) - (self[e4125] * geometric_product[e125]),
            ]) + (self.group0().xxyw() * geometric_product.group2().wzx().with_w(geometric_product[e12345]))
                + (self.group0().zyzw() * geometric_product.group2().yww().with_w(geometric_product[e321]))
                - (self.group0().yzxx() * geometric_product.group2().zxyx()),
            // e1, e2, e3, e4
            Simd32x4::from([
                -(self[e4125] * geometric_product[e425]) - (self[e3215] * geometric_product[e423]),
                -(self[e4315] * geometric_product[e12345]) - (self[e3215] * geometric_product[e431]),
                -(self[e4125] * geometric_product[e12345]) - (self[e3215] * geometric_product[e412]),
                (self[e4125] * geometric_product[e412]) + (self[e1234] * geometric_product[e12345]),
            ]) + (self.group0().yzxx() * geometric_product.group1().zxy().with_w(geometric_product[e423]))
                + (Simd32x3::from(self[e1234]) * geometric_product.group2().xyz()).with_w(self[e4315] * geometric_product[e431])
                - (Simd32x4::from([geometric_product[e12345], geometric_product[e435], geometric_product[e415], self[e1234]])
                    * self.group0().xxy().with_w(geometric_product[e321])),
        );
    }
}
impl GeometricQuotient<VersorOdd> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       27       42        0
    //    simd3        0        1        0
    //    simd4       12       18        0
    // Totals...
    // yes simd       39       61        0
    //  no simd       75      117        0
    fn geometric_quotient(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let reverse = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + 2.0 * (other[e1234] * other[e3215])
                + f32::powi(other[scalar], 2)
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2),
        );
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e1234] * geometric_product[e4235],
                self[e1234] * geometric_product[e4315],
                self[e1234] * geometric_product[e4125],
                self[e4125] * geometric_product[e4125] * -1.0,
            ]) + (Simd32x4::from(self[e1234]) * geometric_product.group1().xyz().with_w(geometric_product[e3215]))
                + (self.group0().yzxw() * geometric_product.group0().zxy().with_w(geometric_product[e1234]))
                - (Simd32x4::from([geometric_product[e42], geometric_product[e1234], geometric_product[e1234], geometric_product[e4315]]) * self.group0().zyzy())
                - (Simd32x4::from([geometric_product[e1234], geometric_product[e43], geometric_product[e41], geometric_product[e4235]]) * self.group0().xxyx()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e4125] * geometric_product[e4315]) + (self[e3215] * geometric_product[e41]) + (self[e1234] * geometric_product[e15]),
                (self[e4315] * geometric_product[e45]) + (self[e3215] * geometric_product[e42]) + (self[e1234] * geometric_product[e25]),
                (self[e4125] * geometric_product[e45]) + (self[e3215] * geometric_product[e43]) + (self[e1234] * geometric_product[e35]),
                -(self[e4315] * geometric_product[e31]) - (self[e4125] * geometric_product[e12]) - (self[e1234] * geometric_product[e3215]),
            ]) + (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], geometric_product[e1234]]) * self.group0().xxyw())
                - (self.group0().yzxx() * geometric_product.group3().zxy().with_w(geometric_product[e23])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(self[e4315] * geometric_product[e35]) - (self[e3215] * geometric_product[e4235]),
                -(self[e4125] * geometric_product[e15]) - (self[e3215] * geometric_product[e4315]),
                -(self[e4235] * geometric_product[e25]) - (self[e3215] * geometric_product[e4125]),
                (self[e1234] * geometric_product[scalar]) + (self[e1234] * geometric_product[e45]),
            ]) + (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], geometric_product[e42]]) * self.group0().zyzy())
                + (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e41]]) * self.group0().xxyx())
                + (self.group0().wwwz() * geometric_product.group1().xyz().with_w(geometric_product[e43])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e4125] * geometric_product[e31]) + (self[e3215] * geometric_product[e41]),
                (self[e4315] * geometric_product[scalar]) + (self[e3215] * geometric_product[e42]),
                (self[e4125] * geometric_product[scalar]) + (self[e3215] * geometric_product[e43]),
                -(self[e4125] * geometric_product[e35]) - (self[e3215] * geometric_product[e45]),
            ]) + (Simd32x4::from([geometric_product[scalar], geometric_product[e12], geometric_product[e23], geometric_product[scalar]]) * self.group0().xxyw())
                - (self.group0().yzxx() * geometric_product.group1().zxy().with_w(geometric_product[e15]))
                - (Simd32x3::from(self[e1234]) * geometric_product.group2().xyz()).with_w(self[e4315] * geometric_product[e25]),
        );
    }
}
impl std::ops::Div<GeometricQuotientInfix> for VersorEven {
    type Output = GeometricQuotientInfixPartial<VersorEven>;
    fn div(self, _rhs: GeometricQuotientInfix) -> Self::Output {
        GeometricQuotientInfixPartial(self)
    }
}
impl GeometricQuotient<AntiCircleRotor> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       55       82        0
    //    simd3        0       14        0
    //    simd4       28       20        0
    // Totals...
    // yes simd       83      116        0
    //  no simd      167      204        0
    fn geometric_quotient(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiCircleRotor::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, scalar
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                + f32::powi(other[scalar], 2)
                - f32::powi(other[e45], 2),
        );
        let geometric_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (geometric_product[e41] * self[e321])
                    + (geometric_product[e42] * self[e435])
                    + (geometric_product[e42] * self[e3])
                    + (geometric_product[e23] * self[e4])
                    + (geometric_product[e31] * self[e412])
                    + (geometric_product[e45] * self[e423])
                    + (geometric_product[scalar] * self[e423]),
                (geometric_product[e42] * self[e321])
                    + (geometric_product[e43] * self[e415])
                    + (geometric_product[e43] * self[e1])
                    + (geometric_product[e31] * self[e4])
                    + (geometric_product[e12] * self[e423])
                    + (geometric_product[e45] * self[e431])
                    + (geometric_product[scalar] * self[e431]),
                (geometric_product[e41] * self[e2])
                    + (geometric_product[e43] * self[e12345])
                    + (geometric_product[e43] * self[e321])
                    + (geometric_product[e23] * self[e431])
                    + (geometric_product[e12] * self[e4])
                    + (geometric_product[e45] * self[e412])
                    + (geometric_product[scalar] * self[e412]),
                -(geometric_product[e23] * self[e415])
                    - (geometric_product[e31] * self[e425])
                    - (geometric_product[e12] * self[e435])
                    - (geometric_product[e45] * self[e321])
                    - (geometric_product[e15] * self[e423])
                    - (geometric_product[e25] * self[e431])
                    - (geometric_product[e35] * self[e412]),
            ]) + (self.group0().ww().with_zw(self[e425], self[e12345]) * geometric_product.group0().xyx().with_w(geometric_product[scalar]))
                - (geometric_product.group0().zxy() * self.group1().yzx()).with_w(geometric_product[e41] * self[e235])
                - (geometric_product.group0().zxy() * self.group3().yzx()).with_w(geometric_product[e42] * self[e315])
                - (geometric_product.group1().zxy() * self.group0().yzx()).with_w(geometric_product[e43] * self[e125]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (geometric_product[e15] * self[e4]) + (geometric_product[e25] * self[e412]) + (geometric_product[scalar] * self[e415]),
                (geometric_product[e25] * self[e4]) + (geometric_product[e35] * self[e423]) + (geometric_product[scalar] * self[e425]),
                (geometric_product[e15] * self[e431]) + (geometric_product[e35] * self[e4]) + (geometric_product[scalar] * self[e435]),
                -(geometric_product[e15] * self[e423]) - (geometric_product[e25] * self[e431]) - (geometric_product[e35] * self[e412]),
            ]) + (self.group2().zxwy() * geometric_product.group0().yzz().with_w(geometric_product[e42]))
                + (self.group2().wwyx() * geometric_product.group0().xyx().with_w(geometric_product[e41]))
                + (self.group0().ww().with_zw(self[e425], self[e125]) * geometric_product.group1().xyx().with_w(geometric_product[e43]))
                + (self.group1().zx().with_zw(self[e12345], self[e321]) * geometric_product.group1().yzz().with_w(geometric_product[scalar]))
                - (geometric_product.group1().zxyy() * self.group1().yzx().with_w(self[e2]))
                - (geometric_product.group1().wwwz() * self.group3().xyzz())
                - (self.group0().yzxw() * geometric_product.group2().zxy().with_w(geometric_product[e45]))
                - (geometric_product.group0().zxy() * self.group2().yzx()).with_w(geometric_product[e23] * self[e1]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (geometric_product[e35] * self[e2]) + (geometric_product[scalar] * self[e235]),
                (geometric_product[e35] * self[e415]) + (geometric_product[scalar] * self[e315]),
                (geometric_product[e35] * self[e12345]) + (geometric_product[scalar] * self[e125]),
                -(geometric_product[e25] * self[e425]) - (geometric_product[e35] * self[e435]),
            ]) + (Simd32x4::from([self[e12345], self[e3], self[e425], self[e3]]) * geometric_product.group2().xxxz())
                + (Simd32x4::from([self[e435], self[e12345], self[e1], self[e5]]) * geometric_product.group2().yyyw())
                + (geometric_product.group1().xyx() * self.group2().wwy()).with_w(geometric_product[e15] * self[e1])
                + (geometric_product.group1().yzz() * self.group2().zxw()).with_w(geometric_product[e25] * self[e2])
                - (Simd32x4::from([self[e425], self[e1], self[e321], self[e415]]) * geometric_product.group2().zzzx())
                - (Simd32x4::from([self[e3], self[e321], self[e415], self[e5]]) * geometric_product.group2().yyy().with_w(geometric_product[e45]))
                - (geometric_product.group1().zxyx() * self.group2().yzxx())
                - (geometric_product.group1().wwwy() * self.group2().xyzy())
                - (self.group1().wz().with_zw(self[e2], self[e125]) * geometric_product.group2().xxx().with_w(geometric_product[e12])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (geometric_product[e31] * self[e3]) + (geometric_product[e15] * self[e4]) + (geometric_product[e25] * self[e412]) + (geometric_product[scalar] * self[e1]),
                (geometric_product[e12] * self[e1]) + (geometric_product[e25] * self[e4]) + (geometric_product[e35] * self[e423]) + (geometric_product[scalar] * self[e2]),
                (geometric_product[e12] * self[e321]) + (geometric_product[e15] * self[e431]) + (geometric_product[e35] * self[e4]) + (geometric_product[scalar] * self[e3]),
                -(geometric_product[e43] * self[e3]) - (geometric_product[e23] * self[e423]) - (geometric_product[e31] * self[e431]) - (geometric_product[e12] * self[e412]),
            ]) + (self.group1().ww().with_zw(self[e2], self[e4]) * geometric_product.group1().xyx().with_w(geometric_product[scalar]))
                + (geometric_product.group0().zxy() * self.group2().yzx()).with_w(geometric_product[e45] * self[e4])
                - (geometric_product.group0().xyx() * self.group2().wwy()).with_w(geometric_product[e41] * self[e415])
                - (geometric_product.group0().yzz() * self.group2().zxw()).with_w(geometric_product[e41] * self[e1])
                - (geometric_product.group1().zxy() * self.group3().yzx()).with_w(geometric_product[e42] * self[e425])
                - (geometric_product.group1().www() * self.group1().xyz()).with_w(geometric_product[e42] * self[e2])
                - (geometric_product.group2().zxy() * self.group0().yzx()).with_w(geometric_product[e43] * self[e435]),
        );
    }
}
impl GeometricQuotient<AntiDipoleInversion> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       42       79        0
    //    simd3        0       19        0
    //    simd4       48       36        0
    // Totals...
    // yes simd       90      134        0
    //  no simd      234      280        0
    fn geometric_quotient(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e4
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125])
                - 2.0 * (other[e4] * other[e5]),
        );
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e4
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e1, e2, e3, e5
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(geometric_product[e431] * self[e3])
                    - (geometric_product[e415] * self[e4])
                    - (geometric_product[e425] * self[e412])
                    - (geometric_product[e4] * self[e415])
                    - (geometric_product[e4] * self[e1])
                    - (geometric_product[e3] * self[e431]),
                -(geometric_product[e412] * self[e1])
                    - (geometric_product[e425] * self[e4])
                    - (geometric_product[e435] * self[e423])
                    - (geometric_product[e4] * self[e425])
                    - (geometric_product[e4] * self[e2])
                    - (geometric_product[e1] * self[e412]),
                -(geometric_product[e412] * self[e321])
                    - (geometric_product[e415] * self[e431])
                    - (geometric_product[e435] * self[e4])
                    - (geometric_product[e4] * self[e435])
                    - (geometric_product[e4] * self[e3])
                    - (geometric_product[e2] * self[e423]),
                (geometric_product[e235] * self[e423])
                    + (geometric_product[e315] * self[e431])
                    + (geometric_product[e125] * self[e412])
                    + (geometric_product[e1] * self[e1])
                    + (geometric_product[e2] * self[e2])
                    + (geometric_product[e3] * self[e3]),
            ]) + (geometric_product.group1().wwwx() * self.group0().xyz().with_w(self[e415]))
                + (self.group0().zx().with_zw(self[e4], self[e435]) * geometric_product.group3().yzz().with_w(geometric_product[e435]))
                + (self.group3().ww().with_zw(self[e431], self[e425]) * geometric_product.group3().xyx().with_w(geometric_product[e425]))
                + (geometric_product.group0().zxy() * self.group1().yzx()).with_w(geometric_product[e423] * self[e235])
                + (geometric_product.group0().zxy() * self.group3().yzx()).with_w(geometric_product[e431] * self[e315])
                + (geometric_product.group1().zxy() * self.group0().yzx()).with_w(geometric_product[e412] * self[e125])
                - (self.group0().ww().with_zw(self[e425], self[e321]) * geometric_product.group0().xyx().with_w(geometric_product[e321]))
                - (self.group1().zx().with_zw(self[e12345], self[e4]) * geometric_product.group0().yzz().with_w(geometric_product[e5]))
                - (self.group1().ww().with_zw(self[e2], self[e5]) * geometric_product.group0().xyx().with_w(geometric_product[e4])),
            // e23, e31, e12, e45
            Simd32x4::from([
                geometric_product[e5] * self[e423] * -1.0,
                geometric_product[e5] * self[e431] * -1.0,
                geometric_product[e5] * self[e412] * -1.0,
                geometric_product[e5] * self[e4],
            ]) + (self.group2().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e423]))
                + (geometric_product.group1().zxy() * self.group1().yzx()).with_w(geometric_product[e431] * self[e315])
                + (geometric_product.group2().zxy() * self.group0().yzx()).with_w(geometric_product[e412] * self[e125])
                + (geometric_product.group3().zxy() * self.group3().yzx()).with_w(geometric_product[e321] * self[e12345])
                - (geometric_product.group1().xyxz() * self.group0().ww().with_zw(self[e425], self[e3]))
                - (geometric_product.group2().xyxz() * self.group3().ww().with_zw(self[e431], self[e412]))
                - (geometric_product.group2().yzzw() * self.group0().zx().with_zw(self[e4], self[e5]))
                - (geometric_product.group3().xyxy() * self.group1().ww().with_zw(self[e2], self[e425]))
                - (geometric_product.group3().yzzz() * self.group3().zx().with_zw(self[e321], self[e435]))
                - (self.group1().zx().with_zw(self[e12345], self[e423]) * geometric_product.group1().yzz().with_w(geometric_product[e235]))
                - (geometric_product.group0().xyx() * self.group2().wwy()).with_w(geometric_product[e415] * self[e1])
                - (geometric_product.group0().yzz() * self.group2().zxw()).with_w(geometric_product[e425] * self[e2])
                - (geometric_product.group1().www() * self.group3().xyz()).with_w(geometric_product[e315] * self[e431])
                - (geometric_product.group2().www() * self.group2().xyz()).with_w(geometric_product[e1] * self[e415]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(geometric_product[e125] * self[e2]) - (geometric_product[e1] * self[e5]) - (geometric_product[e2] * self[e125]) - (geometric_product[e5] * self[e415]),
                -(geometric_product[e125] * self[e415]) - (geometric_product[e2] * self[e5]) - (geometric_product[e3] * self[e235]) - (geometric_product[e5] * self[e425]),
                -(geometric_product[e125] * self[e12345]) - (geometric_product[e1] * self[e315]) - (geometric_product[e3] * self[e5]) - (geometric_product[e5] * self[e435]),
                (geometric_product[e415] * self[e423]) + (geometric_product[e425] * self[e431]) + (geometric_product[e435] * self[e412]) + (geometric_product[e321] * self[e4]),
            ]) + (Simd32x4::from([self[e425], self[e1], self[e321], self[e2]]) * geometric_product.group2().zzz().with_w(geometric_product[e431]))
                + (Simd32x4::from([self[e3], self[e321], self[e415], self[e425]]) * geometric_product.group2().yyy().with_w(geometric_product[e431]))
                + (self.group3().xyzz() * geometric_product.group3().www().with_w(geometric_product[e412]))
                + (self.group1().wz().with_zw(self[e2], self[e1]) * geometric_product.group2().xxx().with_w(geometric_product[e423]))
                + (geometric_product.group1().zxy() * self.group2().yzx()).with_w(geometric_product[e423] * self[e415])
                + (geometric_product.group3().zxy() * self.group2().yzx()).with_w(geometric_product[e412] * self[e435])
                - (Simd32x4::from([self[e12345], self[e3], self[e425], self[e431]]) * geometric_product.group2().xxx().with_w(geometric_product[e2]))
                - (Simd32x4::from([self[e435], self[e12345], self[e1], self[e412]]) * geometric_product.group2().yyy().with_w(geometric_product[e3]))
                - (geometric_product.group1().xyx() * self.group2().wwy()).with_w(geometric_product[e4] * self[e12345])
                - (geometric_product.group1().yzz() * self.group2().zxw()).with_w(geometric_product[e4] * self[e321])
                - (geometric_product.group1().www() * self.group2().xyz()).with_w(geometric_product[e1] * self[e423]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                geometric_product[e3] * self[e425] * -1.0,
                geometric_product[e1] * self[e435] * -1.0,
                geometric_product[e2] * self[e415] * -1.0,
                geometric_product[e5] * self[e321],
            ]) + (geometric_product.group1().xyxy() * self.group1().ww().with_zw(self[e2], self[e315]))
                + (geometric_product.group1().yzzz() * self.group3().zx().with_zw(self[e321], self[e125]))
                + (geometric_product.group2().xyxy() * self.group3().ww().with_zw(self[e431], self[e425]))
                + (geometric_product.group2().yzzz() * self.group0().zx().with_zw(self[e4], self[e435]))
                + (geometric_product.group3().xyxx() * self.group0().ww().with_zw(self[e425], self[e235]))
                + (geometric_product.group3().yzzy() * self.group1().zx().with_zw(self[e12345], self[e315]))
                + (geometric_product.group3().wwwz() * self.group0().xyz().with_w(self[e125]))
                + (self.group1().xyzx() * geometric_product.group1().www().with_w(geometric_product[e235]))
                + (self.group2().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e415]))
                - (geometric_product.group2().zxyz() * self.group0().yzx().with_w(self[e3]))
                - (self.group2().wwyw() * geometric_product.group0().xyx().with_w(geometric_product[e321]))
                - (self.group3().yzxy() * geometric_product.group1().zxy().with_w(geometric_product[e315]))
                - (geometric_product.group0().yzz() * self.group2().zxw()).with_w(geometric_product[e235] * self[e1])
                - (geometric_product.group2().www() * self.group2().xyz()).with_w(geometric_product[e5] * self[e12345]),
        );
    }
}
impl GeometricQuotient<AntiDualNum> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        3        0
    //    simd2        0        1        0
    //    simd3        1        2        0
    //    simd4        3        6        0
    // Totals...
    // yes simd        5       12        0
    //  no simd       16       35        0
    fn geometric_quotient(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDualNum::from_groups(/* e3215, scalar */ Simd32x2::from(f32::powi(other[scalar], -2)) * other.group0());
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            geometric_product
                .group0()
                .yy()
                .with_zw(geometric_product[scalar], (geometric_product[e3215] * self[e4]) + (geometric_product[scalar] * self[e12345]))
                * self.group0().xyz().with_w(1.0),
            // e415, e425, e435, e321
            (Simd32x4::from(geometric_product[e3215]) * self.group0().xyz().with_w(self[e4])) + (Simd32x4::from(geometric_product[scalar]) * self.group1()),
            // e235, e315, e125, e5
            (Simd32x4::from(geometric_product[e3215]) * self.group1().xyz().with_w(self[e12345])) + (Simd32x4::from(geometric_product[scalar]) * self.group2())
                - (Simd32x4::from(geometric_product[e3215]) * self.group3().xyz().with_w(self[e321])),
            // e1, e2, e3, e4
            ((Simd32x3::from(geometric_product[e3215]) * self.group0().xyz()) + (Simd32x3::from(geometric_product[scalar]) * self.group3().xyz()))
                .with_w(geometric_product[scalar] * self[e4]),
        );
    }
}
impl GeometricQuotient<AntiFlatPoint> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       12        0
    //    simd3        6        8        0
    //    simd4        7        9        0
    // Totals...
    // yes simd       18       29        0
    //  no simd       51       72        0
    fn geometric_quotient(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlatPoint::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(f32::powi(other[e321], -2)) * Simd32x4::from([other[e235] * -1.0, other[e315] * -1.0, other[e125] * -1.0, other[e321] * -1.0]),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (geometric_product.group0().www() * self.group0().xyz()).with_w(
                (geometric_product[e235] * self[e423]) + (geometric_product[e315] * self[e431]) + (geometric_product[e125] * self[e412]) - (geometric_product[e321] * self[e321]),
            ),
            // e23, e31, e12, e45
            (geometric_product.group0().zxyw() * self.group0().yzxw())
                - (geometric_product.group0().xyxx() * self.group3().ww().with_zw(self[e431], self[e423]))
                - (geometric_product.group0().yzzy() * self.group0().zx().with_zw(self[e4], self[e431]))
                - (geometric_product.group0().wwwz() * self.group3().xyz().with_w(self[e412])),
            // e15, e25, e35, e1234
            ((Simd32x3::from(geometric_product[e235]) * Simd32x3::from([self[e321], self[e435], self[e2]]))
                + (Simd32x3::from(geometric_product[e315]) * Simd32x3::from([self[e3], self[e321], self[e415]]))
                + (Simd32x3::from(geometric_product[e125]) * Simd32x3::from([self[e425], self[e1], self[e321]]))
                - (Simd32x3::from(geometric_product[e235]) * Simd32x3::from([self[e12345], self[e3], self[e425]]))
                - (Simd32x3::from(geometric_product[e315]) * Simd32x3::from([self[e435], self[e12345], self[e1]]))
                - (Simd32x3::from(geometric_product[e125]) * Simd32x3::from([self[e2], self[e415], self[e12345]]))
                - (Simd32x3::from(geometric_product[e321]) * self.group2().xyz()))
            .with_w(geometric_product[e321] * self[e4]),
            // e4235, e4315, e4125, e3215
            (geometric_product.group0().xyxx() * self.group3().ww().with_zw(self[e431], self[e415]))
                + (geometric_product.group0().yzzy() * self.group0().zx().with_zw(self[e4], self[e425]))
                + (geometric_product.group0().wwwz() * self.group1().xyzz())
                + Simd32x3::from(0.0).with_w(-(geometric_product[e315] * self[e2]) - (geometric_product[e125] * self[e3]) - (geometric_product[e321] * self[e5]))
                - (geometric_product.group0().zxyx() * self.group0().yzx().with_w(self[e1])),
        );
    }
}
impl GeometricQuotient<AntiFlector> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       30       34        0
    //    simd3        0        2        0
    //    simd4       23       25        0
    // Totals...
    // yes simd       53       61        0
    //  no simd      122      140        0
    fn geometric_quotient(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiFlector::from_groups(/* e235, e315, e125, e321 */ other.group0() * Simd32x4::from(-1.0), /* e1, e2, e3, e5 */ other.group1());
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2),
        );
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e1, e2, e3, e5
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (geometric_product.group0().wwwx() * self.group0().xyzx())
                + (self.group0().zx().with_zw(self[e4], self[e412]) * geometric_product.group1().yzz().with_w(geometric_product[e125]))
                + (self.group3().ww().with_zw(self[e431], self[e431]) * geometric_product.group1().xyx().with_w(geometric_product[e315]))
                + Simd32x3::from(0.0)
                    .with_w((geometric_product[e1] * self[e1]) + (geometric_product[e2] * self[e2]) + (geometric_product[e3] * self[e3]) - (geometric_product[e5] * self[e4]))
                - (geometric_product.group1().zxy() * self.group0().yzx()).with_w(geometric_product[e321] * self[e321]),
            // e23, e31, e12, e45
            (geometric_product.group0().zxyw() * self.group0().yzxw()) + (geometric_product.group1().zxyw() * self.group3().yzxw())
                - (geometric_product.group0().xyxx() * self.group3().ww().with_zw(self[e431], self[e423]))
                - (geometric_product.group0().yzzy() * self.group0().zx().with_zw(self[e4], self[e431]))
                - (geometric_product.group0().wwwz() * self.group3().xyz().with_w(self[e412]))
                - (geometric_product.group1().xyxx() * self.group1().ww().with_zw(self[e2], self[e415]))
                - (geometric_product.group1().yzzy() * self.group3().zx().with_zw(self[e321], self[e425]))
                - (geometric_product.group1().wwwz() * self.group0().xyz().with_w(self[e435])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (geometric_product[e315] * self[e3]) + (geometric_product[e125] * self[e425]) + (geometric_product[e3] * self[e315]) + (geometric_product[e5] * self[e1])
                    - (geometric_product[e321] * self[e235])
                    - (geometric_product[e1] * self[e5])
                    - (geometric_product[e2] * self[e125])
                    - (geometric_product[e5] * self[e415]),
                (geometric_product[e315] * self[e321]) + (geometric_product[e125] * self[e1]) + (geometric_product[e1] * self[e125]) + (geometric_product[e5] * self[e2])
                    - (geometric_product[e321] * self[e315])
                    - (geometric_product[e2] * self[e5])
                    - (geometric_product[e3] * self[e235])
                    - (geometric_product[e5] * self[e425]),
                (geometric_product[e315] * self[e415]) + (geometric_product[e125] * self[e321]) + (geometric_product[e2] * self[e235]) + (geometric_product[e5] * self[e3])
                    - (geometric_product[e321] * self[e125])
                    - (geometric_product[e1] * self[e315])
                    - (geometric_product[e3] * self[e5])
                    - (geometric_product[e5] * self[e435]),
                0.0,
            ]) + (geometric_product.group0().xxxw() * self.group1().wz().with_zw(self[e2], self[e4]))
                - (Simd32x4::from([self[e12345], self[e3], self[e425], self[e423]]) * geometric_product.group0().xxx().with_w(geometric_product[e1]))
                - (Simd32x4::from([self[e435], self[e12345], self[e1], self[e431]]) * geometric_product.group0().yyy().with_w(geometric_product[e2]))
                - (Simd32x4::from([self[e2], self[e415], self[e12345], self[e412]]) * geometric_product.group0().zzz().with_w(geometric_product[e3])),
            // e4235, e4315, e4125, e3215
            (geometric_product.group0().xyxx() * self.group3().ww().with_zw(self[e431], self[e415]))
                + (geometric_product.group0().yzzy() * self.group0().zx().with_zw(self[e4], self[e425]))
                + (geometric_product.group0().wwwz() * self.group1().xyzz())
                + (geometric_product.group1().xyxx() * self.group0().ww().with_zw(self[e425], self[e235]))
                + (geometric_product.group1().yzzy() * self.group1().zx().with_zw(self[e12345], self[e315]))
                + (geometric_product.group1().wwwz() * self.group0().xyz().with_w(self[e125]))
                + Simd32x3::from(0.0).with_w(
                    (geometric_product[e5] * self[e321]) - (geometric_product[e125] * self[e3]) - (geometric_product[e321] * self[e5]) - (geometric_product[e5] * self[e12345]),
                )
                - (geometric_product.group0().zxyx() * self.group0().yzx().with_w(self[e1]))
                - (geometric_product.group1().zxy() * self.group1().yzx()).with_w(geometric_product[e315] * self[e2]),
        );
    }
}
impl GeometricQuotient<AntiLine> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       34       55        0
    //    simd3        0       10        0
    //    simd4       12        6        0
    // Totals...
    // yes simd       46       71        0
    //  no simd       82      109        0
    fn geometric_quotient(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiLine::from_groups(
            // e23, e31, e12
            other.group0() * Simd32x3::from(-1.0),
            // e15, e25, e35
            other.group1() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(/* scalar */ f32::powi(other[e23], 2) + f32::powi(other[e31], 2) + f32::powi(other[e12], 2));
        let geometric_product = AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e15, e25, e35
            Simd32x3::from(other_2[scalar]) * reverse.group1(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (geometric_product[e23] * self[e4]) + (geometric_product[e31] * self[e412]),
                (geometric_product[e31] * self[e4]) + (geometric_product[e12] * self[e423]),
                (geometric_product[e23] * self[e431]) + (geometric_product[e12] * self[e4]),
                -(geometric_product[e31] * self[e425])
                    - (geometric_product[e12] * self[e435])
                    - (geometric_product[e15] * self[e423])
                    - (geometric_product[e25] * self[e431])
                    - (geometric_product[e35] * self[e412]),
            ]) - (geometric_product.group0().zxy() * self.group0().yzx()).with_w(geometric_product[e23] * self[e415]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (geometric_product[e23] * self[e12345]) + (geometric_product[e31] * self[e435]) + (geometric_product[e15] * self[e4]) + (geometric_product[e25] * self[e412]),
                (geometric_product[e31] * self[e12345]) + (geometric_product[e12] * self[e415]) + (geometric_product[e25] * self[e4]) + (geometric_product[e35] * self[e423]),
                (geometric_product[e23] * self[e425]) + (geometric_product[e12] * self[e12345]) + (geometric_product[e15] * self[e431]) + (geometric_product[e35] * self[e4]),
                -(geometric_product[e12] * self[e3]) - (geometric_product[e15] * self[e423]) - (geometric_product[e25] * self[e431]) - (geometric_product[e35] * self[e412]),
            ]) - (geometric_product.group0().zxy() * self.group1().yzx()).with_w(geometric_product[e23] * self[e1])
                - (geometric_product.group1().zxy() * self.group0().yzx()).with_w(geometric_product[e31] * self[e2]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (geometric_product[e25] * self[e435]) + (geometric_product[e35] * self[e2]),
                (geometric_product[e25] * self[e12345]) + (geometric_product[e35] * self[e415]),
                (geometric_product[e25] * self[e1]) + (geometric_product[e35] * self[e12345]),
                -(geometric_product[e25] * self[e425]) - (geometric_product[e35] * self[e435]),
            ]) + (Simd32x4::from([self[e12345], self[e3], self[e425], self[e3]]) * geometric_product.group1().xxx().with_w(geometric_product[e35]))
                + (geometric_product.group0().xyx() * self.group2().wwy()).with_w(geometric_product[e15] * self[e1])
                + (geometric_product.group0().yzz() * self.group2().zxw()).with_w(geometric_product[e25] * self[e2])
                - (Simd32x4::from([self[e425], self[e1], self[e321], self[e415]]) * geometric_product.group1().zzz().with_w(geometric_product[e15]))
                - (Simd32x4::from([self[e3], self[e321], self[e415], self[e125]]) * geometric_product.group1().yyy().with_w(geometric_product[e12]))
                - (self.group2().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e23]))
                - (self.group1().wz().with_zw(self[e2], self[e315]) * geometric_product.group1().xxx().with_w(geometric_product[e31])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (geometric_product[e23] * self[e321]) + (geometric_product[e31] * self[e3]) + (geometric_product[e15] * self[e4]) + (geometric_product[e25] * self[e412]),
                (geometric_product[e31] * self[e321]) + (geometric_product[e12] * self[e1]) + (geometric_product[e25] * self[e4]) + (geometric_product[e35] * self[e423]),
                (geometric_product[e23] * self[e2]) + (geometric_product[e12] * self[e321]) + (geometric_product[e15] * self[e431]) + (geometric_product[e35] * self[e4]),
                geometric_product[e12] * self[e412] * -1.0,
            ]) - (self.group0().yzxy() * geometric_product.group1().zxy().with_w(geometric_product[e31]))
                - (geometric_product.group0().zxy() * self.group3().yzx()).with_w(geometric_product[e23] * self[e423]),
        );
    }
}
impl GeometricQuotient<AntiMotor> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       35       52        0
    //    simd3        0        3        0
    //    simd4       20       21        0
    // Totals...
    // yes simd       55       76        0
    //  no simd      115      145        0
    fn geometric_quotient(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, e3215
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e23], 2) + f32::powi(other[e31], 2) + f32::powi(other[e12], 2) + f32::powi(other[scalar], 2),
        );
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e15, e25, e35, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                geometric_product[scalar] * self[e423],
                geometric_product[scalar] * self[e431],
                geometric_product[scalar] * self[e412],
                -(geometric_product[e31] * self[e425])
                    - (geometric_product[e12] * self[e435])
                    - (geometric_product[e15] * self[e423])
                    - (geometric_product[e25] * self[e431])
                    - (geometric_product[e35] * self[e412]),
            ]) + (geometric_product.group0().xyxw() * self.group3().ww().with_zw(self[e431], self[e12345]))
                + (self.group0().zx().with_zw(self[e4], self[e4]) * geometric_product.group0().yzz().with_w(geometric_product[e3215]))
                - (geometric_product.group0().zxyx() * self.group0().yzx().with_w(self[e415])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (geometric_product[scalar] * self[e415]) + (geometric_product[e15] * self[e4]) + (geometric_product[e25] * self[e412]) + (geometric_product[e3215] * self[e423]),
                (geometric_product[scalar] * self[e425]) + (geometric_product[e25] * self[e4]) + (geometric_product[e35] * self[e423]) + (geometric_product[e3215] * self[e431]),
                (geometric_product[scalar] * self[e435]) + (geometric_product[e15] * self[e431]) + (geometric_product[e35] * self[e4]) + (geometric_product[e3215] * self[e412]),
                -(geometric_product[e12] * self[e3]) - (geometric_product[e15] * self[e423]) - (geometric_product[e25] * self[e431]) - (geometric_product[e35] * self[e412]),
            ]) + (geometric_product.group0().xyxw() * self.group0().ww().with_zw(self[e425], self[e321]))
                + (self.group1().zx().with_zw(self[e12345], self[e4]) * geometric_product.group0().yzz().with_w(geometric_product[e3215]))
                - (geometric_product.group0().zxyx() * self.group1().yzx().with_w(self[e1]))
                - (geometric_product.group1().zxy() * self.group0().yzx()).with_w(geometric_product[e31] * self[e2]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (geometric_product[e35] * self[e2]) + (geometric_product[e3215] * self[e415]),
                (geometric_product[e35] * self[e415]) + (geometric_product[e3215] * self[e425]),
                (geometric_product[e35] * self[e12345]) + (geometric_product[e3215] * self[e435]),
                -(geometric_product[e35] * self[e435]) - (geometric_product[e3215] * self[e321]),
            ]) + (Simd32x4::from([self[e12345], self[e3], self[e425], self[e3]]) * geometric_product.group1().xxxz())
                + (Simd32x4::from([self[e435], self[e12345], self[e1], self[e12345]]) * geometric_product.group1().yyyw())
                + (geometric_product.group0().xyxw() * self.group2().wwyw())
                + (geometric_product.group0().yzz() * self.group2().zxw()).with_w(geometric_product[e15] * self[e1])
                + (geometric_product.group0().www() * self.group2().xyz()).with_w(geometric_product[e25] * self[e2])
                - (Simd32x4::from([self[e425], self[e1], self[e321], self[e415]]) * geometric_product.group1().zzzx())
                - (Simd32x4::from([self[e3], self[e321], self[e415], self[e125]]) * geometric_product.group1().yyy().with_w(geometric_product[e12]))
                - (geometric_product.group0().zxyx() * self.group2().yzxx())
                - (geometric_product.group1().wwwy() * self.group3().xyz().with_w(self[e425]))
                - (self.group1().wz().with_zw(self[e2], self[e315]) * geometric_product.group1().xxx().with_w(geometric_product[e31])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (geometric_product[e31] * self[e3])
                    + (geometric_product[scalar] * self[e1])
                    + (geometric_product[e15] * self[e4])
                    + (geometric_product[e25] * self[e412])
                    + (geometric_product[e3215] * self[e423]),
                (geometric_product[e12] * self[e1])
                    + (geometric_product[scalar] * self[e2])
                    + (geometric_product[e25] * self[e4])
                    + (geometric_product[e35] * self[e423])
                    + (geometric_product[e3215] * self[e431]),
                (geometric_product[e12] * self[e321])
                    + (geometric_product[scalar] * self[e3])
                    + (geometric_product[e15] * self[e431])
                    + (geometric_product[e35] * self[e4])
                    + (geometric_product[e3215] * self[e412]),
                geometric_product[e12] * self[e412] * -1.0,
            ]) + (geometric_product.group0().xyxw() * self.group1().ww().with_zw(self[e2], self[e4]))
                - (geometric_product.group0().zxyx() * self.group3().yzx().with_w(self[e423]))
                - (self.group0().yzxy() * geometric_product.group1().zxy().with_w(geometric_product[e31])),
        );
    }
}
impl GeometricQuotient<AntiPlane> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5        8        0
    //    simd4       13       15        0
    // Totals...
    // yes simd       18       23        0
    //  no simd       57       68        0
    fn geometric_quotient(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiPlane::from_groups(
            // e1, e2, e3, e5
            Simd32x4::from(f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)) * other.group0(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (geometric_product.group0().xyxx() * self.group3().ww().with_zw(self[e431], self[e1]))
                + (geometric_product.group0().yzzy() * self.group0().zx().with_zw(self[e4], self[e2]))
                + Simd32x3::from(0.0).with_w(geometric_product[e3] * self[e3])
                - (geometric_product.group0().zxyw() * self.group0().yzx().with_w(self[e4])),
            // e23, e31, e12, e45
            (geometric_product.group0().zxyw() * self.group3().yzxw())
                - (geometric_product.group0().xyxx() * self.group1().ww().with_zw(self[e2], self[e415]))
                - (geometric_product.group0().yzzy() * self.group3().zx().with_zw(self[e321], self[e425]))
                - (geometric_product.group0().wwwz() * self.group0().xyz().with_w(self[e435])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (geometric_product[e3] * self[e315]) + (geometric_product[e5] * self[e1]),
                (geometric_product[e1] * self[e125]) + (geometric_product[e5] * self[e2]),
                (geometric_product[e2] * self[e235]) + (geometric_product[e5] * self[e3]),
                0.0,
            ]) - (geometric_product.group0().xyxx() * self.group2().wwy().with_w(self[e423]))
                - (geometric_product.group0().yzzy() * self.group2().zxw().with_w(self[e431]))
                - (geometric_product.group0().wwwz() * self.group1().xyz().with_w(self[e412])),
            // e4235, e4315, e4125, e3215
            (geometric_product.group0().xyxx() * self.group0().ww().with_zw(self[e425], self[e235]))
                + (geometric_product.group0().yzzy() * self.group1().zx().with_zw(self[e12345], self[e315]))
                + (geometric_product.group0().wwwz() * self.group0().xyz().with_w(self[e125]))
                + Simd32x3::from(0.0).with_w(geometric_product[e5] * self[e321])
                - (geometric_product.group0().zxyw() * self.group1().yzx().with_w(self[e12345])),
        );
    }
}
impl GeometricQuotient<AntiScalar> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        1
    //    simd4        0        8        0
    // Totals...
    // yes simd        0        9        1
    //  no simd        0       33        1
    fn geometric_quotient(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiScalar::from_groups(/* e12345 */ 1.0 / other[e12345] * -1.0);
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(geometric_product[e12345]) * self.group0() * Simd32x4::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from(geometric_product[e12345]) * self.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, e1234
            Simd32x4::from(geometric_product[e12345]) * self.group2().xyz().with_w(self[e4]) * Simd32x4::from(-1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(geometric_product[e12345]) * self.group3().xyz().with_w(self[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
    }
}
impl GeometricQuotient<Circle> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       42       69        0
    //    simd3        0       16        0
    //    simd4       27       18        0
    // Totals...
    // yes simd       69      103        0
    //  no simd      150      189        0
    fn geometric_quotient(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let reverse = Circle::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125
            other.group2() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group2(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(geometric_product[e423] * self[e321])
                    - (geometric_product[e431] * self[e435])
                    - (geometric_product[e431] * self[e3])
                    - (geometric_product[e415] * self[e4])
                    - (geometric_product[e425] * self[e412]),
                -(geometric_product[e431] * self[e321])
                    - (geometric_product[e412] * self[e415])
                    - (geometric_product[e412] * self[e1])
                    - (geometric_product[e425] * self[e4])
                    - (geometric_product[e435] * self[e423]),
                -(geometric_product[e423] * self[e2])
                    - (geometric_product[e412] * self[e12345])
                    - (geometric_product[e412] * self[e321])
                    - (geometric_product[e415] * self[e431])
                    - (geometric_product[e435] * self[e4]),
                (geometric_product[e415] * self[e415])
                    + (geometric_product[e425] * self[e425])
                    + (geometric_product[e435] * self[e435])
                    + (geometric_product[e315] * self[e431])
                    + (geometric_product[e125] * self[e412]),
            ]) + (self.group0().xyzx() * geometric_product.group1().www().with_w(geometric_product[e235]))
                + (geometric_product.group0().zxy() * self.group1().yzx()).with_w(geometric_product[e423] * self[e235])
                + (geometric_product.group0().zxy() * self.group3().yzx()).with_w(geometric_product[e431] * self[e315])
                + (geometric_product.group1().zxy() * self.group0().yzx()).with_w(geometric_product[e412] * self[e125])
                - (self.group0().ww().with_zw(self[e425], self[e321]) * geometric_product.group0().xyx().with_w(geometric_product[e321])),
            // e23, e31, e12, e45
            Simd32x4::from([
                geometric_product[e321] * self[e1] * -1.0,
                geometric_product[e321] * self[e2] * -1.0,
                geometric_product[e321] * self[e3] * -1.0,
                geometric_product[e321] * self[e12345],
            ]) + (self.group2().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e423]))
                + (geometric_product.group2().zxy() * self.group0().yzx()).with_w(geometric_product[e431] * self[e315])
                + (geometric_product.group1().zxy() * self.group1().yzx()).with_w(geometric_product[e412] * self[e125])
                - (geometric_product.group1().xyxy() * self.group0().ww().with_zw(self[e425], self[e2]))
                - (geometric_product.group1().yzzz() * self.group1().zx().with_zw(self[e12345], self[e3]))
                - (self.group0().zx().with_zw(self[e4], self[e1]) * geometric_product.group2().yzz().with_w(geometric_product[e415]))
                - (self.group3().ww().with_zw(self[e431], self[e412]) * geometric_product.group2().xyx().with_w(geometric_product[e125]))
                - (geometric_product.group0().xyx() * self.group2().wwy()).with_w(geometric_product[e235] * self[e423])
                - (geometric_product.group0().yzz() * self.group2().zxw()).with_w(geometric_product[e315] * self[e431]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(geometric_product[e415] * self[e5])
                    - (geometric_product[e425] * self[e125])
                    - (geometric_product[e321] * self[e235])
                    - (geometric_product[e235] * self[e12345])
                    - (geometric_product[e315] * self[e435])
                    - (geometric_product[e125] * self[e2]),
                -(geometric_product[e425] * self[e5])
                    - (geometric_product[e435] * self[e235])
                    - (geometric_product[e321] * self[e315])
                    - (geometric_product[e235] * self[e3])
                    - (geometric_product[e315] * self[e12345])
                    - (geometric_product[e125] * self[e415]),
                -(geometric_product[e415] * self[e315])
                    - (geometric_product[e435] * self[e5])
                    - (geometric_product[e321] * self[e125])
                    - (geometric_product[e235] * self[e425])
                    - (geometric_product[e315] * self[e1])
                    - (geometric_product[e125] * self[e12345]),
                (geometric_product[e412] * self[e435])
                    + (geometric_product[e412] * self[e3])
                    + (geometric_product[e415] * self[e423])
                    + (geometric_product[e425] * self[e431])
                    + (geometric_product[e435] * self[e412])
                    + (geometric_product[e321] * self[e4]),
            ]) + (Simd32x4::from([self[e425], self[e1], self[e321], self[e425]]) * geometric_product.group2().zzz().with_w(geometric_product[e431]))
                + (Simd32x4::from([self[e3], self[e321], self[e415], self[e1]]) * geometric_product.group2().yyy().with_w(geometric_product[e423]))
                + (self.group1().wz().with_zw(self[e2], self[e415]) * geometric_product.group2().xxx().with_w(geometric_product[e423]))
                + (geometric_product.group1().zxy() * self.group2().yzx()).with_w(geometric_product[e431] * self[e2]),
            // e4235, e4315, e4125, e3215
            (geometric_product.group1().xyxx() * self.group1().ww().with_zw(self[e2], self[e235]))
                + (geometric_product.group1().yzzy() * self.group3().zx().with_zw(self[e321], self[e315]))
                + (geometric_product.group1().wwwz() * self.group1().xyz().with_w(self[e125]))
                + (self.group0().zx().with_zw(self[e4], self[e435]) * geometric_product.group2().yzz().with_w(geometric_product[e125]))
                + (self.group3().ww().with_zw(self[e431], self[e425]) * geometric_product.group2().xyx().with_w(geometric_product[e315]))
                + (geometric_product.group0().zxy() * self.group2().yzx()).with_w(geometric_product[e235] * self[e415])
                - (geometric_product.group1().zxyw() * self.group3().yzx().with_w(self[e5]))
                - (geometric_product.group0().xyx() * self.group2().wwy()).with_w(geometric_product[e235] * self[e1])
                - (geometric_product.group0().yzz() * self.group2().zxw()).with_w(geometric_product[e315] * self[e2])
                - (geometric_product.group2().zxy() * self.group0().yzx()).with_w(geometric_product[e125] * self[e3]),
        );
    }
}
impl GeometricQuotient<CircleRotor> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       47       74        0
    //    simd3        0       13        0
    //    simd4       30       23        0
    // Totals...
    // yes simd       77      110        0
    //  no simd      167      205        0
    fn geometric_quotient(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let reverse = CircleRotor::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e12345
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - f32::powi(other[e12345], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(geometric_product[e431] * self[e435])
                    - (geometric_product[e431] * self[e3])
                    - (geometric_product[e415] * self[e4])
                    - (geometric_product[e425] * self[e412])
                    - (geometric_product[e12345] * self[e423]),
                -(geometric_product[e412] * self[e415])
                    - (geometric_product[e412] * self[e1])
                    - (geometric_product[e425] * self[e4])
                    - (geometric_product[e435] * self[e423])
                    - (geometric_product[e12345] * self[e431]),
                -(geometric_product[e412] * self[e12345])
                    - (geometric_product[e412] * self[e321])
                    - (geometric_product[e415] * self[e431])
                    - (geometric_product[e435] * self[e4])
                    - (geometric_product[e12345] * self[e412]),
                (geometric_product[e425] * self[e425])
                    + (geometric_product[e435] * self[e435])
                    + (geometric_product[e235] * self[e423])
                    + (geometric_product[e315] * self[e431])
                    + (geometric_product[e125] * self[e412]),
            ]) + (geometric_product.group1().wwwx() * self.group0().xyz().with_w(self[e415]))
                + (geometric_product.group0().zxy() * self.group1().yzx()).with_w(geometric_product[e423] * self[e235])
                + (geometric_product.group0().zxy() * self.group3().yzx()).with_w(geometric_product[e431] * self[e315])
                + (geometric_product.group1().zxy() * self.group0().yzx()).with_w(geometric_product[e412] * self[e125])
                - (self.group0().ww().with_zw(self[e425], self[e321]) * geometric_product.group0().xyx().with_w(geometric_product[e321]))
                - (self.group1().ww().with_zw(self[e2], self[e12345]) * geometric_product.group0().xyx().with_w(geometric_product[e12345])),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(geometric_product[e315] * self[e412]) - (geometric_product[e12345] * self[e415]),
                -(geometric_product[e125] * self[e423]) - (geometric_product[e12345] * self[e425]),
                -(geometric_product[e125] * self[e4]) - (geometric_product[e12345] * self[e435]),
                (geometric_product[e321] * self[e12345]) + (geometric_product[e12345] * self[e321]),
            ]) + (self.group2().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e423]))
                + (geometric_product.group1().zxy() * self.group1().yzx()).with_w(geometric_product[e431] * self[e315])
                + (geometric_product.group2().zxy() * self.group0().yzx()).with_w(geometric_product[e412] * self[e125])
                - (geometric_product.group1().xyxz() * self.group0().ww().with_zw(self[e425], self[e3]))
                - (geometric_product.group2().xyxz() * self.group3().ww().with_zw(self[e431], self[e412]))
                - (self.group1().zx().with_zw(self[e12345], self[e423]) * geometric_product.group1().yzz().with_w(geometric_product[e235]))
                - (geometric_product.group0().xyx() * self.group2().wwy()).with_w(geometric_product[e415] * self[e1])
                - (geometric_product.group0().yzz() * self.group2().zxw()).with_w(geometric_product[e425] * self[e2])
                - (geometric_product.group1().www() * self.group3().xyz()).with_w(geometric_product[e315] * self[e431]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(geometric_product[e425] * self[e125])
                    - (geometric_product[e321] * self[e235])
                    - (geometric_product[e235] * self[e12345])
                    - (geometric_product[e315] * self[e435])
                    - (geometric_product[e125] * self[e2])
                    - (geometric_product[e12345] * self[e235]),
                -(geometric_product[e435] * self[e235])
                    - (geometric_product[e321] * self[e315])
                    - (geometric_product[e235] * self[e3])
                    - (geometric_product[e315] * self[e12345])
                    - (geometric_product[e125] * self[e415])
                    - (geometric_product[e12345] * self[e315]),
                -(geometric_product[e435] * self[e5])
                    - (geometric_product[e321] * self[e125])
                    - (geometric_product[e235] * self[e425])
                    - (geometric_product[e315] * self[e1])
                    - (geometric_product[e125] * self[e12345])
                    - (geometric_product[e12345] * self[e125]),
                (geometric_product[e412] * self[e435])
                    + (geometric_product[e412] * self[e3])
                    + (geometric_product[e415] * self[e423])
                    + (geometric_product[e425] * self[e431])
                    + (geometric_product[e435] * self[e412])
                    + (geometric_product[e321] * self[e4]),
            ]) + (Simd32x4::from([self[e425], self[e1], self[e321], self[e2]]) * geometric_product.group2().zzz().with_w(geometric_product[e431]))
                + (Simd32x4::from([self[e3], self[e321], self[e415], self[e425]]) * geometric_product.group2().yyy().with_w(geometric_product[e431]))
                + (self.group1().wz().with_zw(self[e2], self[e1]) * geometric_product.group2().xxx().with_w(geometric_product[e423]))
                + (geometric_product.group1().zxy() * self.group2().yzx()).with_w(geometric_product[e423] * self[e415])
                - (geometric_product.group1().xyx() * self.group2().wwy()).with_w(geometric_product[e12345] * self[e4]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                geometric_product[e12345] * self[e1],
                geometric_product[e12345] * self[e2],
                geometric_product[e12345] * self[e3],
                geometric_product[e12345] * self[e5] * -1.0,
            ]) + (geometric_product.group1().xyxy() * self.group1().ww().with_zw(self[e2], self[e315]))
                + (geometric_product.group1().yzzz() * self.group3().zx().with_zw(self[e321], self[e125]))
                + (geometric_product.group2().xyxy() * self.group3().ww().with_zw(self[e431], self[e425]))
                + (geometric_product.group2().yzzz() * self.group0().zx().with_zw(self[e4], self[e435]))
                + (self.group1().xyzx() * geometric_product.group1().www().with_w(geometric_product[e235]))
                + (self.group2().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e415]))
                - (geometric_product.group2().zxyz() * self.group0().yzx().with_w(self[e3]))
                - (self.group2().wwyw() * geometric_product.group0().xyx().with_w(geometric_product[e321]))
                - (self.group3().yzxy() * geometric_product.group1().zxy().with_w(geometric_product[e315]))
                - (geometric_product.group0().yzz() * self.group2().zxw()).with_w(geometric_product[e235] * self[e1]),
        );
    }
}
impl GeometricQuotient<Dipole> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       54       79        0
    //    simd3        0       13        0
    //    simd4       24       17        0
    // Totals...
    // yes simd       78      109        0
    //  no simd      150      186        0
    fn geometric_quotient(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let reverse = Dipole::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35
            other.group2() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2),
        );
        let geometric_product = Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35
            Simd32x3::from(other_2[scalar]) * reverse.group2(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (geometric_product[e41] * self[e12345])
                    + (geometric_product[e41] * self[e321])
                    + (geometric_product[e42] * self[e435])
                    + (geometric_product[e42] * self[e3])
                    + (geometric_product[e23] * self[e4])
                    + (geometric_product[e31] * self[e412])
                    + (geometric_product[e45] * self[e423]),
                (geometric_product[e42] * self[e12345])
                    + (geometric_product[e42] * self[e321])
                    + (geometric_product[e43] * self[e415])
                    + (geometric_product[e43] * self[e1])
                    + (geometric_product[e31] * self[e4])
                    + (geometric_product[e12] * self[e423])
                    + (geometric_product[e45] * self[e431]),
                (geometric_product[e41] * self[e425])
                    + (geometric_product[e41] * self[e2])
                    + (geometric_product[e43] * self[e12345])
                    + (geometric_product[e43] * self[e321])
                    + (geometric_product[e23] * self[e431])
                    + (geometric_product[e12] * self[e4])
                    + (geometric_product[e45] * self[e412]),
                -(geometric_product[e23] * self[e415])
                    - (geometric_product[e31] * self[e425])
                    - (geometric_product[e12] * self[e435])
                    - (geometric_product[e45] * self[e321])
                    - (geometric_product[e15] * self[e423])
                    - (geometric_product[e25] * self[e431])
                    - (geometric_product[e35] * self[e412]),
            ]) - (geometric_product.group0().zxy() * self.group1().yzx()).with_w(geometric_product[e41] * self[e235])
                - (geometric_product.group0().zxy() * self.group3().yzx()).with_w(geometric_product[e42] * self[e315])
                - (geometric_product.group1().zxy() * self.group0().yzx()).with_w(geometric_product[e43] * self[e125]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (geometric_product[e23] * self[e12345]) + (geometric_product[e31] * self[e435]) + (geometric_product[e25] * self[e412]),
                (geometric_product[e31] * self[e12345]) + (geometric_product[e12] * self[e415]) + (geometric_product[e35] * self[e423]),
                (geometric_product[e23] * self[e425]) + (geometric_product[e12] * self[e12345]) + (geometric_product[e35] * self[e4]),
                -(geometric_product[e31] * self[e2]) - (geometric_product[e12] * self[e3]) - (geometric_product[e45] * self[e12345]),
            ]) + (self.group2().zxwy() * geometric_product.group0().yzz().with_w(geometric_product[e42]))
                + (self.group2().wwyx() * geometric_product.group0().xyx().with_w(geometric_product[e41]))
                + (self.group3().ww().with_zw(self[e431], self[e125]) * geometric_product.group2().xyx().with_w(geometric_product[e43]))
                - (geometric_product.group1().wwwx() * self.group3().xyzx())
                - (self.group0().yzxy() * geometric_product.group2().zxy().with_w(geometric_product[e25]))
                - (geometric_product.group0().zxy() * self.group2().yzx()).with_w(geometric_product[e15] * self[e423])
                - (geometric_product.group1().zxy() * self.group1().yzx()).with_w(geometric_product[e35] * self[e412]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (geometric_product[e23] * self[e5]) + (geometric_product[e31] * self[e125]),
                (geometric_product[e31] * self[e5]) + (geometric_product[e12] * self[e235]),
                (geometric_product[e23] * self[e315]) + (geometric_product[e12] * self[e5]),
                -(geometric_product[e12] * self[e125]) - (geometric_product[e45] * self[e5]),
            ]) + (Simd32x4::from(geometric_product[e15]) * Simd32x4::from([self[e12345], self[e3], self[e425], self[e1]]))
                + (Simd32x4::from(geometric_product[e25]) * Simd32x4::from([self[e435], self[e12345], self[e1], self[e2]]))
                + (Simd32x4::from(geometric_product[e35]) * Simd32x4::from([self[e2], self[e415], self[e12345], self[e3]]))
                - (Simd32x4::from(geometric_product[e15]) * self.group1().wz().with_zw(self[e2], self[e415]))
                - (Simd32x4::from(geometric_product[e25]) * Simd32x4::from([self[e3], self[e321], self[e415], self[e425]]))
                - (Simd32x4::from(geometric_product[e35]) * Simd32x4::from([self[e425], self[e1], self[e321], self[e435]]))
                - (geometric_product.group1().zxyx() * self.group2().yzxx())
                - (geometric_product.group1().wwwy() * self.group2().xyzy()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (geometric_product[e23] * self[e321]) + (geometric_product[e31] * self[e3]) + (geometric_product[e15] * self[e4]) + (geometric_product[e25] * self[e412]),
                (geometric_product[e31] * self[e321]) + (geometric_product[e12] * self[e1]) + (geometric_product[e25] * self[e4]) + (geometric_product[e35] * self[e423]),
                (geometric_product[e23] * self[e2]) + (geometric_product[e12] * self[e321]) + (geometric_product[e15] * self[e431]) + (geometric_product[e35] * self[e4]),
                -(geometric_product[e43] * self[e3]) - (geometric_product[e23] * self[e423]) - (geometric_product[e31] * self[e431]) - (geometric_product[e12] * self[e412]),
            ]) + (geometric_product.group0().zxy() * self.group2().yzx()).with_w(geometric_product[e45] * self[e4])
                - (self.group1().xyzz() * geometric_product.group1().www().with_w(geometric_product[e43]))
                - (self.group3().yzxy() * geometric_product.group1().zxy().with_w(geometric_product[e42]))
                - (geometric_product.group0().xyx() * self.group2().wwy()).with_w(geometric_product[e41] * self[e415])
                - (geometric_product.group0().yzz() * self.group2().zxw()).with_w(geometric_product[e41] * self[e1])
                - (geometric_product.group2().zxy() * self.group0().yzx()).with_w(geometric_product[e42] * self[e425]),
        );
    }
}
impl GeometricQuotient<DipoleInversion> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       46       73        0
    //    simd3        0       19        0
    //    simd4       47       36        0
    // Totals...
    // yes simd       93      128        0
    //  no simd      234      274        0
    fn geometric_quotient(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let reverse = DipoleInversion::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + 2.0 * (other[e1234] * other[e3215])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2),
        );
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (geometric_product[e31] * self[e412])
                    + (geometric_product[e45] * self[e423])
                    + (geometric_product[e1234] * self[e415])
                    + (geometric_product[e1234] * self[e1])
                    + (geometric_product[e4235] * self[e4])
                    + (geometric_product[e4315] * self[e412]),
                (geometric_product[e12] * self[e423])
                    + (geometric_product[e45] * self[e431])
                    + (geometric_product[e1234] * self[e425])
                    + (geometric_product[e1234] * self[e2])
                    + (geometric_product[e4315] * self[e4])
                    + (geometric_product[e4125] * self[e423]),
                (geometric_product[e12] * self[e4])
                    + (geometric_product[e45] * self[e412])
                    + (geometric_product[e1234] * self[e435])
                    + (geometric_product[e1234] * self[e3])
                    + (geometric_product[e4235] * self[e431])
                    + (geometric_product[e4125] * self[e4]),
                -(geometric_product[e31] * self[e425])
                    - (geometric_product[e12] * self[e435])
                    - (geometric_product[e45] * self[e321])
                    - (geometric_product[e15] * self[e423])
                    - (geometric_product[e25] * self[e431])
                    - (geometric_product[e35] * self[e412]),
            ]) + (self.group0().ww().with_zw(self[e425], self[e5]) * geometric_product.group0().xyx().with_w(geometric_product[e1234]))
                + (self.group1().zx().with_zw(self[e12345], self[e2]) * geometric_product.group0().yzz().with_w(geometric_product[e4315]))
                + (self.group1().ww().with_zw(self[e2], self[e1]) * geometric_product.group0().xyx().with_w(geometric_product[e4235]))
                + (self.group3().zx().with_zw(self[e321], self[e3]) * geometric_product.group0().yzz().with_w(geometric_product[e4125]))
                + (self.group3().ww().with_zw(self[e431], self[e4]) * geometric_product.group1().xyx().with_w(geometric_product[e3215]))
                - (geometric_product.group0().zxy() * self.group1().yzx()).with_w(geometric_product[e41] * self[e235])
                - (geometric_product.group0().zxy() * self.group3().yzx()).with_w(geometric_product[e42] * self[e315])
                - (geometric_product.group1().zxy() * self.group0().yzx()).with_w(geometric_product[e43] * self[e125])
                - (geometric_product.group3().zxy() * self.group0().yzx()).with_w(geometric_product[e23] * self[e415]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (geometric_product[e4125] * self[e2]) + (geometric_product[e3215] * self[e423]),
                (geometric_product[e4235] * self[e3]) + (geometric_product[e3215] * self[e431]),
                (geometric_product[e4315] * self[e1]) + (geometric_product[e3215] * self[e412]),
                -(geometric_product[e35] * self[e412]) - (geometric_product[e1234] * self[e5]),
            ]) + (self.group2().zxwy() * geometric_product.group0().yzz().with_w(geometric_product[e42]))
                + (self.group2().wwyx() * geometric_product.group0().xyx().with_w(geometric_product[e41]))
                + (self.group0().zx().with_zw(self[e4], self[e435]) * geometric_product.group2().yzz().with_w(geometric_product[e4125]))
                + (self.group0().ww().with_zw(self[e425], self[e125]) * geometric_product.group1().xyx().with_w(geometric_product[e43]))
                + (self.group1().zx().with_zw(self[e12345], self[e415]) * geometric_product.group1().yzz().with_w(geometric_product[e4235]))
                + (self.group3().ww().with_zw(self[e431], self[e425]) * geometric_product.group2().xyx().with_w(geometric_product[e4315]))
                + (geometric_product.group2().www() * self.group2().xyz()).with_w(geometric_product[e3215] * self[e4])
                - (geometric_product.group1().zxyy() * self.group1().yzx().with_w(self[e2]))
                - (geometric_product.group1().wwwz() * self.group3().xyzz())
                - (self.group0().yzxw() * geometric_product.group2().zxy().with_w(geometric_product[e45]))
                - (self.group1().ww().with_zw(self[e2], self[e423]) * geometric_product.group3().xyx().with_w(geometric_product[e15]))
                - (self.group3().zx().with_zw(self[e321], self[e431]) * geometric_product.group3().yzz().with_w(geometric_product[e25]))
                - (geometric_product.group0().zxy() * self.group2().yzx()).with_w(geometric_product[e23] * self[e1]),
            // e235, e315, e125, e5
            (Simd32x4::from(geometric_product[e3215]) * self.group1().xyz().with_w(self[e12345]))
                + (Simd32x4::from([self[e12345], self[e3], self[e425], self[e3]]) * geometric_product.group2().xxxz())
                + (Simd32x4::from([self[e435], self[e12345], self[e1], self[e235]]) * geometric_product.group2().yyy().with_w(geometric_product[e4235]))
                + (Simd32x4::from([self[e2], self[e415], self[e12345], self[e315]]) * geometric_product.group2().zzz().with_w(geometric_product[e4315]))
                + (geometric_product.group3().zxyz() * self.group2().yzxz())
                + (geometric_product.group1().xyx() * self.group2().wwy()).with_w(geometric_product[e15] * self[e1])
                + (geometric_product.group1().yzz() * self.group2().zxw()).with_w(geometric_product[e25] * self[e2])
                - (Simd32x4::from(geometric_product[e3215]) * self.group3().xyz().with_w(self[e321]))
                - (Simd32x4::from([self[e425], self[e1], self[e321], self[e415]]) * geometric_product.group2().zzzx())
                - (Simd32x4::from([self[e3], self[e321], self[e415], self[e5]]) * geometric_product.group2().yyy().with_w(geometric_product[e45]))
                - (geometric_product.group1().zxyx() * self.group2().yzxx())
                - (geometric_product.group1().wwwy() * self.group2().xyzy())
                - (self.group1().wz().with_zw(self[e2], self[e125]) * geometric_product.group2().xxx().with_w(geometric_product[e12]))
                - (geometric_product.group3().xyx() * self.group2().wwy()).with_w(geometric_product[e25] * self[e425])
                - (geometric_product.group3().yzz() * self.group2().zxw()).with_w(geometric_product[e35] * self[e435]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (geometric_product[e15] * self[e4]) + (geometric_product[e25] * self[e412]) + (geometric_product[e4125] * self[e425]) + (geometric_product[e3215] * self[e423]),
                (geometric_product[e25] * self[e4]) + (geometric_product[e35] * self[e423]) + (geometric_product[e4235] * self[e435]) + (geometric_product[e3215] * self[e431]),
                (geometric_product[e15] * self[e431]) + (geometric_product[e35] * self[e4]) + (geometric_product[e4315] * self[e415]) + (geometric_product[e3215] * self[e412]),
                -(geometric_product[e12] * self[e412])
                    - (geometric_product[e4235] * self[e423])
                    - (geometric_product[e4315] * self[e431])
                    - (geometric_product[e4125] * self[e412]),
            ]) + (self.group1().ww().with_zw(self[e2], self[e12345]) * geometric_product.group1().xyx().with_w(geometric_product[e1234]))
                + (self.group3().zx().with_zw(self[e321], self[e321]) * geometric_product.group1().yzz().with_w(geometric_product[e1234]))
                + (geometric_product.group0().zxy() * self.group2().yzx()).with_w(geometric_product[e45] * self[e4])
                - (self.group0().ww().with_zw(self[e425], self[e423]) * geometric_product.group3().xyx().with_w(geometric_product[e23]))
                - (self.group1().zx().with_zw(self[e12345], self[e431]) * geometric_product.group3().yzz().with_w(geometric_product[e31]))
                - (geometric_product.group0().xyx() * self.group2().wwy()).with_w(geometric_product[e41] * self[e415])
                - (geometric_product.group0().yzz() * self.group2().zxw()).with_w(geometric_product[e41] * self[e1])
                - (geometric_product.group1().zxy() * self.group3().yzx()).with_w(geometric_product[e42] * self[e425])
                - (geometric_product.group1().www() * self.group1().xyz()).with_w(geometric_product[e42] * self[e2])
                - (geometric_product.group2().zxy() * self.group0().yzx()).with_w(geometric_product[e43] * self[e435])
                - (geometric_product.group2().www() * self.group2().xyz()).with_w(geometric_product[e43] * self[e3]),
        );
    }
}
impl GeometricQuotient<DualNum> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       18        0
    //    simd2        0        1        0
    //    simd3        2        3        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        9       25        0
    //  no simd       16       41        0
    fn geometric_quotient(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DualNum::from_groups(/* e5, e12345 */ Simd32x2::from(f32::powi(other[e12345], -2) * -1.0) * other.group0());
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            geometric_product
                .group0()
                .yy()
                .with_zw(geometric_product[e12345], -(geometric_product[e5] * self[e4]) - (geometric_product[e12345] * self[e12345]))
                * self.group0().xyz().with_w(1.0)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(geometric_product[e5] * self[e423]) - (geometric_product[e12345] * self[e415]),
                -(geometric_product[e5] * self[e431]) - (geometric_product[e12345] * self[e425]),
                -(geometric_product[e5] * self[e412]) - (geometric_product[e12345] * self[e435]),
                (geometric_product[e5] * self[e4]) + (geometric_product[e12345] * self[e321]),
            ]),
            // e15, e25, e35, e1234
            ((Simd32x3::from(geometric_product[e5]) * self.group3().xyz())
                - (Simd32x3::from(geometric_product[e5]) * self.group1().xyz())
                - (Simd32x3::from(geometric_product[e12345]) * self.group2().xyz()))
            .with_w(geometric_product[e12345] * self[e4] * -1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                geometric_product[e12345] * self[e1],
                geometric_product[e12345] * self[e2],
                geometric_product[e12345] * self[e3],
                -(geometric_product[e5] * self[e12345]) - (geometric_product[e12345] * self[e5]),
            ]) + (Simd32x4::from(geometric_product[e5]) * self.group0().xyz().with_w(self[e321])),
        );
    }
}
impl GeometricQuotient<FlatPoint> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       18        0
    //    simd3        3        5        0
    //    simd4        8       10        0
    // Totals...
    // yes simd       18       33        0
    //  no simd       48       73        0
    fn geometric_quotient(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = FlatPoint::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(f32::powi(other[e45], -2) * -1.0) * Simd32x4::from([other[e15] * -1.0, other[e25] * -1.0, other[e35] * -1.0, other[e45] * -1.0]),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (geometric_product.group0().www() * self.group0().xyz()).with_w(
                -(geometric_product[e15] * self[e423]) - (geometric_product[e25] * self[e431]) - (geometric_product[e35] * self[e412]) - (geometric_product[e45] * self[e321]),
            ),
            // e415, e425, e435, e321
            Simd32x4::from([
                (geometric_product[e15] * self[e4]) + (geometric_product[e25] * self[e412]),
                (geometric_product[e25] * self[e4]) + (geometric_product[e35] * self[e423]),
                (geometric_product[e15] * self[e431]) + (geometric_product[e35] * self[e4]),
                -(geometric_product[e35] * self[e412]) - (geometric_product[e45] * self[e12345]),
            ]) - (geometric_product.group0().zxyx() * self.group0().yzxx())
                - (geometric_product.group0().wwwy() * self.group3().xyz().with_w(self[e431])),
            // e235, e315, e125, e5
            (Simd32x4::from(geometric_product[e15]) * Simd32x4::from([self[e12345], self[e3], self[e425], self[e1]]))
                + (Simd32x4::from(geometric_product[e25]) * Simd32x4::from([self[e435], self[e12345], self[e1], self[e2]]))
                + (Simd32x4::from(geometric_product[e35]) * Simd32x4::from([self[e2], self[e415], self[e12345], self[e3]]))
                - (Simd32x4::from(geometric_product[e15]) * self.group1().wz().with_zw(self[e2], self[e415]))
                - (Simd32x4::from(geometric_product[e25]) * Simd32x4::from([self[e3], self[e321], self[e415], self[e425]]))
                - (Simd32x4::from(geometric_product[e35]) * Simd32x4::from([self[e425], self[e1], self[e321], self[e435]]))
                - (Simd32x4::from(geometric_product[e45]) * self.group2()),
            // e1, e2, e3, e4
            ((Simd32x3::from([self[e412], self[e423], self[e4]]) * geometric_product.group0().yzz())
                + (Simd32x3::from([self[e4], self[e4], self[e431]]) * geometric_product.group0().xyx())
                - (Simd32x3::from(geometric_product[e45]) * self.group1().xyz())
                - (geometric_product.group0().zxy() * self.group0().yzx()))
            .with_w(geometric_product[e45] * self[e4]),
        );
    }
}
impl GeometricQuotient<Flector> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       26        0
    //    simd3        0        2        0
    //    simd4       25       27        0
    // Totals...
    // yes simd       44       55        0
    //  no simd      119      140        0
    fn geometric_quotient(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let reverse = Flector::from_groups(
            // e15, e25, e35, e45
            other.group0() * Simd32x4::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group1(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            -f32::powi(other[e45], 2) - f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2),
        );
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (geometric_product.group1().xyxy() * self.group3().ww().with_zw(self[e431], self[e2]))
                + (geometric_product.group1().yzzz() * self.group0().zx().with_zw(self[e4], self[e3]))
                + Simd32x3::from(0.0).with_w(
                    (geometric_product[e3215] * self[e4]) - (geometric_product[e25] * self[e431]) - (geometric_product[e35] * self[e412]) - (geometric_product[e45] * self[e321]),
                )
                + (geometric_product.group0().www() * self.group0().xyz()).with_w(geometric_product[e4235] * self[e1])
                - (self.group0().yzxx() * geometric_product.group1().zxy().with_w(geometric_product[e15])),
            // e415, e425, e435, e321
            (Simd32x4::from(geometric_product[e3215]) * self.group0().xyz().with_w(self[e4]))
                + (geometric_product.group1().zxyz() * self.group3().yzx().with_w(self[e435]))
                + (self.group0().zx().with_zw(self[e4], self[e425]) * geometric_product.group0().yzz().with_w(geometric_product[e4315]))
                + (self.group3().ww().with_zw(self[e431], self[e415]) * geometric_product.group0().xyx().with_w(geometric_product[e4235]))
                - (geometric_product.group0().zxyx() * self.group0().yzxx())
                - (geometric_product.group0().wwwy() * self.group3().xyz().with_w(self[e431]))
                - (self.group1().ww().with_zw(self[e2], self[e412]) * geometric_product.group1().xyx().with_w(geometric_product[e35]))
                - (self.group3().zx().with_zw(self[e321], self[e12345]) * geometric_product.group1().yzz().with_w(geometric_product[e45])),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(geometric_product[e4315] * self[e125]) - (geometric_product[e3215] * self[e1]),
                -(geometric_product[e4125] * self[e235]) - (geometric_product[e3215] * self[e2]),
                -(geometric_product[e4125] * self[e5]) - (geometric_product[e3215] * self[e3]),
                (geometric_product[e4125] * self[e125]) + (geometric_product[e3215] * self[e12345]),
            ]) + (Simd32x4::from(geometric_product[e15]) * Simd32x4::from([self[e12345], self[e3], self[e425], self[e1]]))
                + (Simd32x4::from(geometric_product[e25]) * Simd32x4::from([self[e435], self[e12345], self[e1], self[e2]]))
                + (Simd32x4::from(geometric_product[e35]) * Simd32x4::from([self[e2], self[e415], self[e12345], self[e3]]))
                + (geometric_product.group1().zxyx() * self.group2().yzxx())
                + (geometric_product.group1().wwwy() * self.group1().xyz().with_w(self[e315]))
                - (Simd32x4::from(geometric_product[e15]) * self.group1().wz().with_zw(self[e2], self[e415]))
                - (Simd32x4::from(geometric_product[e25]) * Simd32x4::from([self[e3], self[e321], self[e415], self[e425]]))
                - (Simd32x4::from(geometric_product[e35]) * Simd32x4::from([self[e425], self[e1], self[e321], self[e435]]))
                - (Simd32x4::from(geometric_product[e45]) * self.group2())
                - (geometric_product.group1().xyxw() * self.group2().wwy().with_w(self[e321])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (geometric_product[e25] * self[e412]) + (geometric_product[e4125] * self[e425]) + (geometric_product[e3215] * self[e423]) - (geometric_product[e4315] * self[e435]),
                (geometric_product[e35] * self[e423]) + (geometric_product[e4235] * self[e435]) + (geometric_product[e3215] * self[e431]) - (geometric_product[e4125] * self[e415]),
                (geometric_product[e35] * self[e4]) + (geometric_product[e4315] * self[e415]) + (geometric_product[e3215] * self[e412]) - (geometric_product[e4125] * self[e12345]),
                0.0,
            ]) + (geometric_product.group0().xyxw() * self.group3().ww().with_zw(self[e431], self[e4]))
                - (geometric_product.group1().xyxz() * self.group0().ww().with_zw(self[e425], self[e412]))
                - (self.group0().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e4235]))
                - (geometric_product.group0().www() * self.group1().xyz()).with_w(geometric_product[e4315] * self[e431]),
        );
    }
}
impl GeometricQuotient<Line> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       30       43        0
    //    simd3        0        7        0
    //    simd4       14       11        0
    // Totals...
    // yes simd       44       61        0
    //  no simd       86      108        0
    fn geometric_quotient(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let reverse = Line::from_groups(
            // e415, e425, e435
            other.group0() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group1() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(/* scalar */ -f32::powi(other[e415], 2) - f32::powi(other[e425], 2) - f32::powi(other[e435], 2));
        let geometric_product = Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group1(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(geometric_product[e415] * self[e4]) - (geometric_product[e425] * self[e412]),
                -(geometric_product[e425] * self[e4]) - (geometric_product[e435] * self[e423]),
                -(geometric_product[e415] * self[e431]) - (geometric_product[e435] * self[e4]),
                (geometric_product[e425] * self[e425])
                    + (geometric_product[e435] * self[e435])
                    + (geometric_product[e235] * self[e423])
                    + (geometric_product[e315] * self[e431])
                    + (geometric_product[e125] * self[e412]),
            ]) + (geometric_product.group0().zxy() * self.group0().yzx()).with_w(geometric_product[e415] * self[e415]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (geometric_product[e435] * self[e425]) + (geometric_product[e125] * self[e431]),
                (geometric_product[e415] * self[e435]) + (geometric_product[e235] * self[e412]),
                (geometric_product[e425] * self[e415]) + (geometric_product[e315] * self[e423]),
                -(geometric_product[e315] * self[e431]) - (geometric_product[e125] * self[e412]),
            ]) - (self.group0().zx().with_zw(self[e4], self[e423]) * geometric_product.group1().yzz().with_w(geometric_product[e235]))
                - (self.group0().ww().with_zw(self[e425], self[e1]) * geometric_product.group0().xyx().with_w(geometric_product[e415]))
                - (self.group1().zx().with_zw(self[e12345], self[e2]) * geometric_product.group0().yzz().with_w(geometric_product[e425]))
                - (self.group3().ww().with_zw(self[e431], self[e3]) * geometric_product.group1().xyx().with_w(geometric_product[e435])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (geometric_product[e125] * self[e425])
                    - (geometric_product[e415] * self[e5])
                    - (geometric_product[e425] * self[e125])
                    - (geometric_product[e235] * self[e12345])
                    - (geometric_product[e315] * self[e435])
                    - (geometric_product[e125] * self[e2]),
                (geometric_product[e125] * self[e1])
                    - (geometric_product[e425] * self[e5])
                    - (geometric_product[e435] * self[e235])
                    - (geometric_product[e235] * self[e3])
                    - (geometric_product[e315] * self[e12345])
                    - (geometric_product[e125] * self[e415]),
                (geometric_product[e125] * self[e321])
                    - (geometric_product[e415] * self[e315])
                    - (geometric_product[e435] * self[e5])
                    - (geometric_product[e235] * self[e425])
                    - (geometric_product[e315] * self[e1])
                    - (geometric_product[e125] * self[e12345]),
                0.0,
            ]) + (Simd32x4::from([self[e3], self[e321], self[e415], self[e412]]) * geometric_product.group1().yyy().with_w(geometric_product[e435]))
                + (self.group1().wz().with_zw(self[e2], self[e431]) * geometric_product.group1().xxx().with_w(geometric_product[e425]))
                + (geometric_product.group0().zxy() * self.group2().yzx()).with_w(geometric_product[e415] * self[e423]),
            // e4235, e4315, e4125, e3215
            (self.group0().zx().with_zw(self[e4], self[e415]) * geometric_product.group1().yzz().with_w(geometric_product[e235]))
                + (self.group1().ww().with_zw(self[e2], self[e235]) * geometric_product.group0().xyx().with_w(geometric_product[e415]))
                + (self.group3().zx().with_zw(self[e321], self[e315]) * geometric_product.group0().yzz().with_w(geometric_product[e425]))
                + (self.group3().ww().with_zw(self[e431], self[e125]) * geometric_product.group1().xyx().with_w(geometric_product[e435]))
                + Simd32x3::from(0.0).with_w((geometric_product[e315] * self[e425]) + (geometric_product[e125] * self[e435]) - (geometric_product[e125] * self[e3]))
                - (self.group3().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e235]))
                - (geometric_product.group1().zxy() * self.group0().yzx()).with_w(geometric_product[e315] * self[e2]),
        );
    }
}
impl GeometricQuotient<Motor> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       31       39        0
    //    simd4       22       27        0
    // Totals...
    // yes simd       53       66        0
    //  no simd      119      147        0
    fn geometric_quotient(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let reverse = Motor::from_groups(
            // e415, e425, e435, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            -f32::powi(other[e415], 2) - f32::powi(other[e425], 2) - f32::powi(other[e435], 2) - f32::powi(other[e12345], 2),
        );
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e235, e315, e125, e5
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                geometric_product[e12345] * self[e423] * -1.0,
                geometric_product[e12345] * self[e431] * -1.0,
                geometric_product[e12345] * self[e412] * -1.0,
                (geometric_product[e425] * self[e425])
                    + (geometric_product[e435] * self[e435])
                    + (geometric_product[e235] * self[e423])
                    + (geometric_product[e315] * self[e431])
                    + (geometric_product[e125] * self[e412]),
            ]) + (geometric_product.group0().zxyx() * self.group0().yzx().with_w(self[e415]))
                - (geometric_product.group0().xyxw() * self.group3().ww().with_zw(self[e431], self[e12345]))
                - (self.group0().zx().with_zw(self[e4], self[e4]) * geometric_product.group0().yzz().with_w(geometric_product[e5])),
            // e23, e31, e12, e45
            (geometric_product.group0().zxyw() * self.group1().yzxw()) + (geometric_product.group1().zxyw() * self.group0().yzx().with_w(self[e4]))
                - (geometric_product.group0().xyxx() * self.group0().ww().with_zw(self[e425], self[e1]))
                - (geometric_product.group0().yzzy() * self.group1().zx().with_zw(self[e12345], self[e2]))
                - (geometric_product.group0().wwwz() * self.group1().xyz().with_w(self[e3]))
                - (geometric_product.group1().xyxx() * self.group3().ww().with_zw(self[e431], self[e423]))
                - (geometric_product.group1().yzzy() * self.group0().zx().with_zw(self[e4], self[e431]))
                - (geometric_product.group1().wwwz() * self.group0().xyzz()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (geometric_product[e125] * self[e425]) + (geometric_product[e5] * self[e1])
                    - (geometric_product[e425] * self[e125])
                    - (geometric_product[e12345] * self[e235])
                    - (geometric_product[e235] * self[e12345])
                    - (geometric_product[e315] * self[e435])
                    - (geometric_product[e125] * self[e2])
                    - (geometric_product[e5] * self[e415]),
                (geometric_product[e125] * self[e1]) + (geometric_product[e5] * self[e2])
                    - (geometric_product[e435] * self[e235])
                    - (geometric_product[e12345] * self[e315])
                    - (geometric_product[e235] * self[e3])
                    - (geometric_product[e315] * self[e12345])
                    - (geometric_product[e125] * self[e415])
                    - (geometric_product[e5] * self[e425]),
                (geometric_product[e125] * self[e321]) + (geometric_product[e5] * self[e3])
                    - (geometric_product[e435] * self[e5])
                    - (geometric_product[e12345] * self[e125])
                    - (geometric_product[e235] * self[e425])
                    - (geometric_product[e315] * self[e1])
                    - (geometric_product[e125] * self[e12345])
                    - (geometric_product[e5] * self[e435]),
                0.0,
            ]) + (Simd32x4::from([self[e3], self[e321], self[e415], self[e412]]) * geometric_product.group1().yyy().with_w(geometric_product[e435]))
                + (geometric_product.group0().zxyx() * self.group2().yzx().with_w(self[e423]))
                + (self.group1().wz().with_zw(self[e2], self[e431]) * geometric_product.group1().xxx().with_w(geometric_product[e425]))
                - (geometric_product.group0().xyxw() * self.group2().wwy().with_w(self[e4])),
            // e4235, e4315, e4125, e3215
            (geometric_product.group0().xyxx() * self.group1().ww().with_zw(self[e2], self[e235]))
                + (geometric_product.group0().yzzy() * self.group3().zx().with_zw(self[e321], self[e315]))
                + (geometric_product.group0().wwwz() * self.group3().xyz().with_w(self[e125]))
                + (geometric_product.group1().xyxx() * self.group3().ww().with_zw(self[e431], self[e415]))
                + (geometric_product.group1().yzzy() * self.group0().zx().with_zw(self[e4], self[e425]))
                + (geometric_product.group1().wwwz() * self.group0().xyz().with_w(self[e435]))
                + Simd32x3::from(0.0).with_w(
                    (geometric_product[e5] * self[e321]) - (geometric_product[e315] * self[e2]) - (geometric_product[e125] * self[e3]) - (geometric_product[e5] * self[e12345]),
                )
                - (geometric_product.group0().zxyw() * self.group3().yzx().with_w(self[e5]))
                - (geometric_product.group1().zxyx() * self.group0().yzx().with_w(self[e1])),
        );
    }
}
impl GeometricQuotient<MultiVector> for VersorEven {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       83      105        0
    //    simd2        8        9        0
    //    simd3       60       87        0
    //    simd4       56       49        0
    // Totals...
    // yes simd      207      250        0
    //  no simd      503      580        0
    fn geometric_quotient(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let reverse = MultiVector::from_groups(
            // scalar, e12345
            other.group0(),
            // e1, e2, e3, e4
            other.group1(),
            // e5
            other[e5],
            // e15, e25, e35, e45
            other.group3() * Simd32x4::from(-1.0),
            // e41, e42, e43
            other.group4() * Simd32x3::from(-1.0),
            // e23, e31, e12
            other.group5() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group6() * Simd32x4::from(-1.0),
            // e423, e431, e412
            other.group7() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group8() * Simd32x3::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group9(),
            // e1234
            other[e1234],
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e15] * other[e41])
                + 2.0 * (other[e25] * other[e42])
                + 2.0 * (other[e35] * other[e43])
                + 2.0 * (other[e3215] * other[e1234])
                + f32::powi(other[scalar], 2)
                + f32::powi(other[e1], 2)
                + f32::powi(other[e2], 2)
                + f32::powi(other[e3], 2)
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                + f32::powi(other[e321], 2)
                - f32::powi(other[e12345], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2)
                - 2.0 * (other[e4] * other[e5])
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(other_2[scalar]) * reverse.group0(),
            // e1, e2, e3, e4
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e5
            reverse[e5] * other_2[scalar],
            // e15, e25, e35, e45
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group4(),
            // e23, e31, e12
            Simd32x3::from(other_2[scalar]) * reverse.group5(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group6(),
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group7(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group8(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group9(),
            // e1234
            reverse[e1234] * other_2[scalar],
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (geometric_product[e415] * self[e415])
                    + (geometric_product[e425] * self[e425])
                    + (geometric_product[e435] * self[e435])
                    + (geometric_product[e431] * self[e315])
                    + (geometric_product[e412] * self[e125])
                    + (geometric_product[e315] * self[e431])
                    + (geometric_product[e125] * self[e412])
                    - (geometric_product[e5] * self[e4]),
                (geometric_product[e3215] * self[e4])
                    - (geometric_product[e25] * self[e431])
                    - (geometric_product[e35] * self[e412])
                    - (geometric_product[e45] * self[e321])
                    - (geometric_product[e42] * self[e315])
                    - (geometric_product[e43] * self[e125])
                    - (geometric_product[e31] * self[e425])
                    - (geometric_product[e12] * self[e435]),
            ]) + (Simd32x2::from(self[e1]) * Simd32x2::from([geometric_product[e1], geometric_product[e4235]]))
                + (Simd32x2::from(self[e2]) * Simd32x2::from([geometric_product[e2], geometric_product[e4315]]))
                + (Simd32x2::from(self[e3]) * Simd32x2::from([geometric_product[e3], geometric_product[e4125]]))
                + (Simd32x2::from([geometric_product[e423], geometric_product[e1234]]) * self.group2().xw())
                + (Simd32x2::from([geometric_product[e235], geometric_product[scalar]]) * self.group0().xw())
                - (Simd32x2::from([geometric_product[e12345], geometric_product[e15]]) * self.group0().wx())
                - (Simd32x2::from([geometric_product[e4], geometric_product[e41]]) * self.group2().wx())
                - (Simd32x2::from([geometric_product[e321], geometric_product[e23]]) * self.group1().wx()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (geometric_product[e15] * self[e4]) + (geometric_product[e25] * self[e412]) + (geometric_product[e4125] * self[e425]) + (geometric_product[e3215] * self[e423]),
                (geometric_product[e25] * self[e4]) + (geometric_product[e35] * self[e423]) + (geometric_product[e4235] * self[e435]) + (geometric_product[e3215] * self[e431]),
                (geometric_product[e15] * self[e431]) + (geometric_product[e35] * self[e4]) + (geometric_product[e4315] * self[e415]) + (geometric_product[e3215] * self[e412]),
                -(geometric_product[e12] * self[e412])
                    - (geometric_product[e4235] * self[e423])
                    - (geometric_product[e4315] * self[e431])
                    - (geometric_product[e4125] * self[e412]),
            ]) + (Simd32x4::from(geometric_product[scalar]) * self.group3())
                + (self.group1().ww().with_zw(self[e2], geometric_product[e1234]) * geometric_product.group5().xyx().with_w(self[e12345]))
                + (self.group3().zx().with_zw(self[e321], geometric_product[e1234]) * geometric_product.group5().yzz().with_w(self[e321]))
                + (geometric_product.group4().zxy() * self.group2().yzx()).with_w(geometric_product[e45] * self[e4])
                - (self.group1().xyzz() * geometric_product.group3().www().with_w(geometric_product[e43]))
                - (self.group0().ww().with_zw(self[e425], self[e3]) * geometric_product.group9().xyx().with_w(geometric_product[e43]))
                - (self.group1().zx().with_zw(self[e12345], self[e423]) * geometric_product.group9().yzz().with_w(geometric_product[e23]))
                - (Simd32x3::from(geometric_product[e1234]) * self.group2().xyz()).with_w(geometric_product[e31] * self[e431])
                - (geometric_product.group4().xyx() * self.group2().wwy()).with_w(geometric_product[e41] * self[e415])
                - (geometric_product.group4().yzz() * self.group2().zxw()).with_w(geometric_product[e41] * self[e1])
                - (geometric_product.group5().zxy() * self.group3().yzx()).with_w(geometric_product[e42] * self[e425])
                - (geometric_product.group3().zxy() * self.group0().yzx()).with_w(geometric_product[e42] * self[e2]),
            // e5
            (geometric_product[scalar] * self[e5])
                + (geometric_product[e15] * self[e1])
                + (geometric_product[e25] * self[e2])
                + (geometric_product[e35] * self[e3])
                + (geometric_product[e4235] * self[e235])
                + (geometric_product[e4315] * self[e315])
                + (geometric_product[e4125] * self[e125])
                + (geometric_product[e3215] * self[e12345])
                - (geometric_product[e15] * self[e415])
                - (geometric_product[e25] * self[e425])
                - (geometric_product[e35] * self[e435])
                - (geometric_product[e45] * self[e5])
                - (geometric_product[e23] * self[e235])
                - (geometric_product[e31] * self[e315])
                - (geometric_product[e12] * self[e125])
                - (geometric_product[e3215] * self[e321]),
            // e15, e25, e35, e45
            (Simd32x4::from(geometric_product[e5]) * self.group3())
                + (Simd32x4::from([self[e425], self[e1], self[e321], self[e315]]) * geometric_product.group8().zzz().with_w(geometric_product[e431]))
                + (Simd32x4::from([self[e3], self[e321], self[e415], self[e235]]) * geometric_product.group8().yyy().with_w(geometric_product[e423]))
                + (geometric_product.group6().zxyw() * self.group2().yzx().with_w(self[e12345]))
                + (self.group2().yzxz() * geometric_product.group1().zxy().with_w(geometric_product[e412]))
                + (self.group1().wz().with_zw(self[e2], self[e321]) * geometric_product.group8().xxx().with_w(geometric_product[e12345]))
                - (Simd32x4::from([self[e12345], self[e3], self[e425], self[e431]]) * geometric_product.group8().xxx().with_w(geometric_product[e315]))
                - (Simd32x4::from([self[e435], self[e12345], self[e1], self[e412]]) * geometric_product.group8().yyy().with_w(geometric_product[e125]))
                - (Simd32x4::from([self[e2], self[e415], self[e12345], self[e415]]) * geometric_product.group8().zzz().with_w(geometric_product[e1]))
                - (geometric_product.group1().xyxy() * self.group2().wwy().with_w(self[e425]))
                - (geometric_product.group1().yzzz() * self.group2().zxw().with_w(self[e435]))
                - (geometric_product.group6().yzzx() * self.group2().zxw().with_w(self[e1]))
                - (geometric_product.group6().wwwy() * self.group2().xyz().with_w(self[e2]))
                - (self.group2().wwyw() * geometric_product.group6().xyx().with_w(geometric_product[e4]))
                - (geometric_product.group0().yy().with_zw(geometric_product[e12345], geometric_product[e235]) * self.group2().xyz().with_w(self[e423]))
                - (Simd32x3::from(geometric_product[e5]) * self.group1().xyz()).with_w(geometric_product[e435] * self[e3]),
            // e41, e42, e43
            (Simd32x3::from(geometric_product[e321]) * self.group0().xyz())
                + (Simd32x3::from([self[e412], self[e423], self[e4]]) * geometric_product.group1().yzz())
                + (Simd32x3::from([self[e4], self[e4], self[e431]]) * geometric_product.group1().xyx())
                + (geometric_product.group7().zxy() * self.group1().yzx())
                + (geometric_product.group7().zxy() * self.group3().yzx())
                + (geometric_product.group6().zxy() * self.group0().yzx())
                - (Simd32x3::from(geometric_product[e12345]) * self.group0().xyz())
                - (Simd32x3::from(geometric_product[e4]) * self.group1().xyz())
                - (Simd32x3::from(geometric_product[e4]) * self.group3().xyz())
                - (Simd32x3::from([self[e412], self[e423], self[e4]]) * geometric_product.group6().yzz())
                - (Simd32x3::from([self[e12345], self[e12345], self[e425]]) * geometric_product.group7().xyx())
                - (Simd32x3::from([self[e435], self[e415], self[e12345]]) * geometric_product.group7().yzz())
                - (Simd32x3::from([self[e321], self[e321], self[e2]]) * geometric_product.group7().xyx())
                - (Simd32x3::from([self[e3], self[e1], self[e321]]) * geometric_product.group7().yzz())
                - (Simd32x3::from([self[e4], self[e4], self[e431]]) * geometric_product.group6().xyx())
                - (geometric_product.group1().zxy() * self.group0().yzx()),
            // e23, e31, e12
            (geometric_product.group7().zxy() * self.group2().yzx())
                + (geometric_product.group8().zxy() * self.group0().yzx())
                + (geometric_product.group1().zxy() * self.group3().yzx())
                + (geometric_product.group6().zxy() * self.group1().yzx())
                - (Simd32x3::from(geometric_product[e12345]) * self.group1().xyz())
                - (Simd32x3::from(geometric_product[e4]) * self.group2().xyz())
                - (Simd32x3::from(geometric_product[e5]) * self.group0().xyz())
                - (Simd32x3::from(geometric_product[e321]) * self.group3().xyz())
                - (Simd32x3::from([self[e412], self[e423], self[e4]]) * geometric_product.group8().yzz())
                - (Simd32x3::from([self[e12345], self[e12345], self[e425]]) * geometric_product.group6().xyx())
                - (Simd32x3::from([self[e435], self[e415], self[e12345]]) * geometric_product.group6().yzz())
                - (Simd32x3::from([self[e321], self[e321], self[e2]]) * geometric_product.group1().xyx())
                - (Simd32x3::from([self[e3], self[e1], self[e321]]) * geometric_product.group1().yzz())
                - (Simd32x3::from([self[e4], self[e4], self[e431]]) * geometric_product.group8().xyx())
                - (geometric_product.group7().xyx() * self.group2().wwy())
                - (geometric_product.group7().yzz() * self.group2().zxw()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (geometric_product[e3215] * self[e423]) + (geometric_product[e1234] * self[e235]),
                (geometric_product[e3215] * self[e431]) + (geometric_product[e1234] * self[e315]),
                (geometric_product[e3215] * self[e412]) + (geometric_product[e1234] * self[e125]),
                -(geometric_product[e45] * self[e12345]) - (geometric_product[e1234] * self[e5]),
            ]) + (Simd32x4::from(geometric_product[scalar]) * self.group1())
                + (geometric_product.group9().zxyw() * self.group3().yzxw())
                + (self.group2().zxwy() * geometric_product.group4().yzz().with_w(geometric_product[e42]))
                + (self.group2().wwyx() * geometric_product.group4().xyx().with_w(geometric_product[e41]))
                + (self.group0().zx().with_zw(self[e4], self[e435]) * geometric_product.group3().yzz().with_w(geometric_product[e4125]))
                + (self.group0().ww().with_zw(self[e425], self[e125]) * geometric_product.group5().xyx().with_w(geometric_product[e43]))
                + (self.group1().zx().with_zw(self[e12345], self[e415]) * geometric_product.group5().yzz().with_w(geometric_product[e4235]))
                + (self.group3().ww().with_zw(self[e431], self[e425]) * geometric_product.group3().xyx().with_w(geometric_product[e4315]))
                - (geometric_product.group3().wwwx() * self.group3().xyz().with_w(self[e423]))
                - (self.group1().ww().with_zw(self[e2], self[e431]) * geometric_product.group9().xyx().with_w(geometric_product[e25]))
                - (self.group3().zx().with_zw(self[e321], self[e412]) * geometric_product.group9().yzz().with_w(geometric_product[e35]))
                - (geometric_product.group4().zxy() * self.group2().yzx()).with_w(geometric_product[e23] * self[e1])
                - (geometric_product.group5().zxy() * self.group1().yzx()).with_w(geometric_product[e31] * self[e2])
                - (geometric_product.group3().zxy() * self.group0().yzx()).with_w(geometric_product[e12] * self[e3]),
            // e423, e431, e412
            (Simd32x3::from(geometric_product[scalar]) * self.group0().xyz())
                + (Simd32x3::from(geometric_product[e45]) * self.group0().xyz())
                + (Simd32x3::from(geometric_product[e1234]) * self.group1().xyz())
                + (Simd32x3::from(geometric_product[e1234]) * self.group3().xyz())
                + (Simd32x3::from([self[e412], self[e423], self[e4]]) * geometric_product.group5().yzz())
                + (Simd32x3::from([self[e412], self[e423], self[e4]]) * geometric_product.group9().yzz())
                + (Simd32x3::from([self[e12345], self[e12345], self[e425]]) * geometric_product.group4().xyx())
                + (Simd32x3::from([self[e435], self[e415], self[e12345]]) * geometric_product.group4().yzz())
                + (Simd32x3::from([self[e321], self[e321], self[e2]]) * geometric_product.group4().xyx())
                + (Simd32x3::from([self[e3], self[e1], self[e321]]) * geometric_product.group4().yzz())
                + (Simd32x3::from([self[e4], self[e4], self[e431]]) * geometric_product.group5().xyx())
                + (Simd32x3::from([self[e4], self[e4], self[e431]]) * geometric_product.group9().xyx())
                - (geometric_product.group4().zxy() * self.group1().yzx())
                - (geometric_product.group4().zxy() * self.group3().yzx())
                - (geometric_product.group5().zxy() * self.group0().yzx())
                - (geometric_product.group9().zxy() * self.group0().yzx()),
            // e235, e315, e125
            (Simd32x3::from(geometric_product[scalar]) * self.group2().xyz())
                + (Simd32x3::from(geometric_product[e15]) * Simd32x3::from([self[e12345], self[e3], self[e425]]))
                + (Simd32x3::from(geometric_product[e25]) * Simd32x3::from([self[e435], self[e12345], self[e1]]))
                + (Simd32x3::from(geometric_product[e35]) * Simd32x3::from([self[e2], self[e415], self[e12345]]))
                + (Simd32x3::from(geometric_product[e3215]) * self.group1().xyz())
                + (geometric_product.group5().xyx() * self.group2().wwy())
                + (geometric_product.group5().yzz() * self.group2().zxw())
                + (geometric_product.group9().zxy() * self.group2().yzx())
                - (Simd32x3::from(geometric_product[e15]) * Simd32x3::from([self[e321], self[e435], self[e2]]))
                - (Simd32x3::from(geometric_product[e25]) * Simd32x3::from([self[e3], self[e321], self[e415]]))
                - (Simd32x3::from(geometric_product[e35]) * Simd32x3::from([self[e425], self[e1], self[e321]]))
                - (Simd32x3::from(geometric_product[e45]) * self.group2().xyz())
                - (Simd32x3::from(geometric_product[e3215]) * self.group3().xyz())
                - (geometric_product.group5().zxy() * self.group2().yzx())
                - (geometric_product.group9().xyx() * self.group2().wwy())
                - (geometric_product.group9().yzz() * self.group2().zxw()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(geometric_product[e5]) * self.group0().xyz().with_w(self[e321]))
                + (geometric_product.group1().xyxy() * self.group0().ww().with_zw(self[e425], self[e315]))
                + (geometric_product.group1().yzzz() * self.group1().zx().with_zw(self[e12345], self[e125]))
                + (geometric_product.group6().xyxx() * self.group1().ww().with_zw(self[e2], self[e235]))
                + (geometric_product.group6().yzzy() * self.group3().zx().with_zw(self[e321], self[e315]))
                + (geometric_product.group6().wwwz() * self.group1().xyz().with_w(self[e125]))
                + (geometric_product.group0().yy().with_zw(geometric_product[e12345], geometric_product[e235]) * self.group3().xyz().with_w(self[e415]))
                + (self.group0().zx().with_zw(self[e4], self[e235]) * geometric_product.group8().yzz().with_w(geometric_product[e1]))
                + (self.group3().ww().with_zw(self[e431], self[e435]) * geometric_product.group8().xyx().with_w(geometric_product[e125]))
                + (geometric_product.group7().zxy() * self.group2().yzx()).with_w(geometric_product[e315] * self[e425])
                - (self.group2() * geometric_product.group1().www().with_w(geometric_product[e321]))
                - (self.group2().wwyw() * geometric_product.group7().xyx().with_w(geometric_product[e12345]))
                - (geometric_product.group7().yzz() * self.group2().zxw()).with_w(geometric_product[e235] * self[e1])
                - (geometric_product.group8().zxy() * self.group0().yzx()).with_w(geometric_product[e315] * self[e2])
                - (geometric_product.group1().zxy() * self.group1().yzx()).with_w(geometric_product[e125] * self[e3])
                - (geometric_product.group6().zxy() * self.group3().yzx()).with_w(geometric_product[e5] * self[e12345]),
            // e1234
            (geometric_product[e415] * self[e423])
                + (geometric_product[e425] * self[e431])
                + (geometric_product[e435] * self[e412])
                + (geometric_product[e321] * self[e4])
                + (geometric_product[e423] * self[e415])
                + (geometric_product[e423] * self[e1])
                + (geometric_product[e431] * self[e425])
                + (geometric_product[e431] * self[e2])
                + (geometric_product[e412] * self[e435])
                + (geometric_product[e412] * self[e3])
                - (geometric_product[e12345] * self[e4])
                - (geometric_product[e1] * self[e423])
                - (geometric_product[e2] * self[e431])
                - (geometric_product[e3] * self[e412])
                - (geometric_product[e4] * self[e12345])
                - (geometric_product[e4] * self[e321]),
        );
    }
}
impl GeometricQuotient<Plane> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       32        0
    //    simd4        9       10        0
    // Totals...
    // yes simd       23       42        0
    //  no simd       50       72        0
    fn geometric_quotient(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Plane::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(-f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2)) * other.group0(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                geometric_product[e4125] * self[e431] * -1.0,
                geometric_product[e4235] * self[e412] * -1.0,
                geometric_product[e4315] * self[e423] * -1.0,
                (geometric_product[e4125] * self[e3]) + (geometric_product[e3215] * self[e4]),
            ]) + (geometric_product.group0().xyxx() * self.group3().ww().with_zw(self[e431], self[e1]))
                + (geometric_product.group0().yzzy() * self.group0().zx().with_zw(self[e4], self[e2])),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(geometric_product[e4235] * self[e321]) - (geometric_product[e4315] * self[e3]),
                -(geometric_product[e4315] * self[e321]) - (geometric_product[e4125] * self[e1]),
                -(geometric_product[e4235] * self[e2]) - (geometric_product[e4125] * self[e321]),
                (geometric_product[e4125] * self[e435]) + (geometric_product[e3215] * self[e4]),
            ]) + (geometric_product.group0().zxyx() * self.group3().yzx().with_w(self[e415]))
                + (geometric_product.group0().wwwy() * self.group0().xyz().with_w(self[e425])),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(geometric_product[e4315] * self[e125]) - (geometric_product[e3215] * self[e1]),
                -(geometric_product[e4125] * self[e235]) - (geometric_product[e3215] * self[e2]),
                -(geometric_product[e4125] * self[e5]) - (geometric_product[e3215] * self[e3]),
                (geometric_product[e4125] * self[e125]) + (geometric_product[e3215] * self[e12345]),
            ]) + (geometric_product.group0().zxyx() * self.group2().yzxx())
                + (geometric_product.group0().wwwy() * self.group1().xyz().with_w(self[e315]))
                - (geometric_product.group0().xyxw() * self.group2().wwy().with_w(self[e321])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (geometric_product[e4125] * self[e425]) + (geometric_product[e3215] * self[e423]),
                (geometric_product[e4235] * self[e435]) + (geometric_product[e3215] * self[e431]),
                (geometric_product[e4315] * self[e415]) + (geometric_product[e3215] * self[e412]),
                geometric_product[e4125] * self[e412] * -1.0,
            ]) - (geometric_product.group0().xyxx() * self.group0().ww().with_zw(self[e425], self[e423]))
                - (geometric_product.group0().yzzy() * self.group1().zx().with_zw(self[e12345], self[e431])),
        );
    }
}
impl GeometricQuotient<RoundPoint> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       31        0
    //    simd3        0        6        0
    //    simd4       15       11        0
    // Totals...
    // yes simd       22       48        0
    //  no simd       67       93        0
    fn geometric_quotient(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2) - 2.0 * (other[e4] * other[e5]),
        );
        let geometric_product = RoundPoint::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from(other_2[scalar]) * other.group0(), /* e5 */ other[e5] * other_2[scalar]);
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                geometric_product[e4] * self[e1] * -1.0,
                geometric_product[e4] * self[e2] * -1.0,
                geometric_product[e4] * self[e3] * -1.0,
                geometric_product[e3] * self[e3],
            ]) + (geometric_product.group0().xyxx() * self.group3().ww().with_zw(self[e431], self[e1]))
                + (geometric_product.group0().yzzy() * self.group0().zx().with_zw(self[e4], self[e2]))
                - (geometric_product.group0().zxyw() * self.group0().yzx().with_w(self[e5]))
                - (geometric_product.group0().www() * self.group1().xyz()).with_w(geometric_product[e5] * self[e4]),
            // e23, e31, e12, e45
            (geometric_product.group0().zxy() * self.group3().yzx()).with_w(geometric_product[e5] * self[e4])
                - (geometric_product.group0().xyxx() * self.group1().ww().with_zw(self[e2], self[e415]))
                - (geometric_product.group0().yzzy() * self.group3().zx().with_zw(self[e321], self[e425]))
                - (geometric_product.group0().wwwz() * self.group2().xyz().with_w(self[e435]))
                - (Simd32x3::from(geometric_product[e5]) * self.group0().xyz()).with_w(geometric_product[e4] * self[e5]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (geometric_product[e3] * self[e315]) + (geometric_product[e5] * self[e1]),
                (geometric_product[e1] * self[e125]) + (geometric_product[e5] * self[e2]),
                (geometric_product[e2] * self[e235]) + (geometric_product[e5] * self[e3]),
                -(geometric_product[e4] * self[e12345]) - (geometric_product[e4] * self[e321]),
            ]) - (geometric_product.group0().xyxx() * self.group2().wwy().with_w(self[e423]))
                - (geometric_product.group0().yzzy() * self.group2().zxw().with_w(self[e431]))
                - (Simd32x3::from(geometric_product[e5]) * self.group1().xyz()).with_w(geometric_product[e3] * self[e412]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                geometric_product[e4] * self[e235] * -1.0,
                geometric_product[e4] * self[e315] * -1.0,
                geometric_product[e4] * self[e125] * -1.0,
                geometric_product[e5] * self[e321],
            ]) + (geometric_product.group0().xyxx() * self.group0().ww().with_zw(self[e425], self[e235]))
                + (geometric_product.group0().yzzy() * self.group1().zx().with_zw(self[e12345], self[e315]))
                + (Simd32x3::from(geometric_product[e5]) * self.group0().xyz()).with_w(geometric_product[e3] * self[e125])
                - (geometric_product.group0().zxy() * self.group1().yzx()).with_w(geometric_product[e5] * self[e12345]),
        );
    }
}
impl GeometricQuotient<Scalar> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        0        1
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        4        1
    //  no simd        0       16        1
    fn geometric_quotient(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Scalar::from_groups(/* scalar */ 1.0 / other[scalar]);
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(geometric_product[scalar]) * self.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(geometric_product[scalar]) * self.group1(),
            // e235, e315, e125, e5
            Simd32x4::from(geometric_product[scalar]) * self.group2(),
            // e1, e2, e3, e4
            Simd32x4::from(geometric_product[scalar]) * self.group3(),
        );
    }
}
impl GeometricQuotient<Sphere> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       31        0
    //    simd3        0        6        0
    //    simd4       15       11        0
    // Totals...
    // yes simd       22       48        0
    //  no simd       67       93        0
    fn geometric_quotient(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e3215] * other[e1234]) - f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2),
        );
        let geometric_product = Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * other.group0(),
            // e1234
            other_2[scalar] * other[e1234],
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                geometric_product[e4125] * self[e431] * -1.0,
                geometric_product[e4235] * self[e412] * -1.0,
                geometric_product[e4315] * self[e423] * -1.0,
                geometric_product[e1234] * self[e5],
            ]) + (geometric_product.group0().xyxx() * self.group3().ww().with_zw(self[e431], self[e1]))
                + (geometric_product.group0().yzzy() * self.group0().zx().with_zw(self[e4], self[e2]))
                + (Simd32x3::from(geometric_product[e1234]) * self.group1().xyz()).with_w(geometric_product[e4125] * self[e3])
                + (Simd32x3::from(geometric_product[e1234]) * self.group3().xyz()).with_w(geometric_product[e3215] * self[e4]),
            // e415, e425, e435, e321
            Simd32x4::from([
                geometric_product[e4315] * self[e3] * -1.0,
                geometric_product[e4125] * self[e1] * -1.0,
                geometric_product[e4125] * self[e321] * -1.0,
                geometric_product[e3215] * self[e4],
            ]) + (geometric_product.group0().zxyx() * self.group3().yzx().with_w(self[e415]))
                + (geometric_product.group0().wwwy() * self.group0().xyz().with_w(self[e425]))
                + (Simd32x3::from(geometric_product[e1234]) * self.group2().xyz()).with_w(geometric_product[e4125] * self[e435])
                - (self.group1().ww().with_zw(self[e2], geometric_product[e1234]) * geometric_product.group0().xyx().with_w(self[e5])),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(geometric_product[e4315] * self[e125]) - (geometric_product[e3215] * self[e1]),
                -(geometric_product[e4125] * self[e235]) - (geometric_product[e3215] * self[e2]),
                -(geometric_product[e4125] * self[e5]) - (geometric_product[e3215] * self[e3]),
                (geometric_product[e4125] * self[e125]) + (geometric_product[e3215] * self[e12345]),
            ]) + (geometric_product.group0().zxyx() * self.group2().yzxx())
                + (geometric_product.group0().wwwy() * self.group1().xyz().with_w(self[e315]))
                - (geometric_product.group0().xyxw() * self.group2().wwy().with_w(self[e321])),
            // e1, e2, e3, e4
            (geometric_product.group0().zxy() * self.group1().yzx()).with_w(geometric_product[e1234] * self[e12345])
                + (geometric_product.group0().www() * self.group0().xyz()).with_w(geometric_product[e1234] * self[e321])
                - (geometric_product.group0().xyxx() * self.group0().ww().with_zw(self[e425], self[e423]))
                - (geometric_product.group0().yzzy() * self.group1().zx().with_zw(self[e12345], self[e431]))
                - (Simd32x3::from(geometric_product[e1234]) * self.group2().xyz()).with_w(geometric_product[e4125] * self[e412]),
        );
    }
}
impl GeometricQuotient<VersorEven> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       47       75        0
    //    simd3        0       19        0
    //    simd4       51       40        0
    // Totals...
    // yes simd       98      134        0
    //  no simd      251      292        0
    fn geometric_quotient(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let reverse = VersorEven::from_groups(
            // e423, e431, e412, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e5
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e4
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)
                - f32::powi(other[e12345], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125])
                - 2.0 * (other[e5] * other[e4]),
        );
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e5
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e1, e2, e3, e4
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(geometric_product[e12345] * self[e423])
                    - (geometric_product[e415] * self[e4])
                    - (geometric_product[e425] * self[e412])
                    - (geometric_product[e3] * self[e431])
                    - (geometric_product[e4] * self[e415])
                    - (geometric_product[e4] * self[e1]),
                -(geometric_product[e12345] * self[e431])
                    - (geometric_product[e425] * self[e4])
                    - (geometric_product[e435] * self[e423])
                    - (geometric_product[e1] * self[e412])
                    - (geometric_product[e4] * self[e425])
                    - (geometric_product[e4] * self[e2]),
                -(geometric_product[e12345] * self[e412])
                    - (geometric_product[e415] * self[e431])
                    - (geometric_product[e435] * self[e4])
                    - (geometric_product[e2] * self[e423])
                    - (geometric_product[e4] * self[e435])
                    - (geometric_product[e4] * self[e3]),
                (geometric_product[e235] * self[e423])
                    + (geometric_product[e315] * self[e431])
                    + (geometric_product[e125] * self[e412])
                    + (geometric_product[e1] * self[e1])
                    + (geometric_product[e2] * self[e2])
                    + (geometric_product[e3] * self[e3]),
            ]) + (geometric_product.group0().zxyx() * self.group1().yzx().with_w(self[e235]))
                + (geometric_product.group0().zxyy() * self.group3().yzx().with_w(self[e315]))
                + (geometric_product.group1().wwwx() * self.group0().xyz().with_w(self[e415]))
                + (self.group0().zx().with_zw(self[e4], self[e435]) * geometric_product.group3().yzz().with_w(geometric_product[e435]))
                + (self.group3().ww().with_zw(self[e431], self[e425]) * geometric_product.group3().xyx().with_w(geometric_product[e425]))
                + (geometric_product.group1().zxy() * self.group0().yzx()).with_w(geometric_product[e412] * self[e125])
                - (geometric_product.group0().xyxw() * self.group0().ww().with_zw(self[e425], self[e12345]))
                - (self.group1().zx().with_zw(self[e12345], self[e4]) * geometric_product.group0().yzz().with_w(geometric_product[e5]))
                - (self.group1().ww().with_zw(self[e2], self[e321]) * geometric_product.group0().xyx().with_w(geometric_product[e321]))
                - (self.group3().zx().with_zw(self[e321], self[e5]) * geometric_product.group0().yzz().with_w(geometric_product[e4])),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(geometric_product[e2] * self[e3]) - (geometric_product[e4] * self[e235]),
                -(geometric_product[e3] * self[e1]) - (geometric_product[e4] * self[e315]),
                -(geometric_product[e3] * self[e321]) - (geometric_product[e4] * self[e125]),
                (geometric_product[e321] * self[e12345]) + (geometric_product[e5] * self[e4]),
            ]) + (geometric_product.group0().zxyx() * self.group2().yzxx())
                + (geometric_product.group1().zxy() * self.group1().yzx()).with_w(geometric_product[e431] * self[e315])
                + (geometric_product.group2().zxy() * self.group0().yzx()).with_w(geometric_product[e412] * self[e125])
                + (geometric_product.group3().zxy() * self.group3().yzx()).with_w(geometric_product[e12345] * self[e321])
                - (geometric_product.group3().xyxw() * self.group1().ww().with_zw(self[e2], self[e5]))
                - (self.group0().zx().with_zw(self[e4], self[e425]) * geometric_product.group2().yzz().with_w(geometric_product[e2]))
                - (self.group0().ww().with_zw(self[e425], self[e423]) * geometric_product.group1().xyx().with_w(geometric_product[e235]))
                - (self.group1().zx().with_zw(self[e12345], self[e431]) * geometric_product.group1().yzz().with_w(geometric_product[e315]))
                - (self.group3().ww().with_zw(self[e431], self[e415]) * geometric_product.group2().xyx().with_w(geometric_product[e1]))
                - (geometric_product.group0().xyx() * self.group2().wwy()).with_w(geometric_product[e415] * self[e1])
                - (geometric_product.group0().yzz() * self.group2().zxw()).with_w(geometric_product[e425] * self[e2])
                - (geometric_product.group0().www() * self.group1().xyz()).with_w(geometric_product[e435] * self[e3])
                - (geometric_product.group1().www() * self.group3().xyz()).with_w(geometric_product[e125] * self[e412])
                - (geometric_product.group2().www() * self.group0().xyz()).with_w(geometric_product[e3] * self[e435]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(geometric_product[e125] * self[e2]) - (geometric_product[e5] * self[e415]) - (geometric_product[e1] * self[e5]) - (geometric_product[e2] * self[e125]),
                -(geometric_product[e125] * self[e415]) - (geometric_product[e5] * self[e425]) - (geometric_product[e2] * self[e5]) - (geometric_product[e3] * self[e235]),
                -(geometric_product[e125] * self[e12345]) - (geometric_product[e5] * self[e435]) - (geometric_product[e1] * self[e315]) - (geometric_product[e3] * self[e5]),
                (geometric_product[e415] * self[e423]) + (geometric_product[e425] * self[e431]) + (geometric_product[e435] * self[e412]) + (geometric_product[e321] * self[e4]),
            ]) + (Simd32x4::from([self[e425], self[e1], self[e321], self[e2]]) * geometric_product.group2().zzz().with_w(geometric_product[e431]))
                + (Simd32x4::from([self[e3], self[e321], self[e415], self[e425]]) * geometric_product.group2().yyy().with_w(geometric_product[e431]))
                + (self.group1().wz().with_zw(self[e2], self[e1]) * geometric_product.group2().xxx().with_w(geometric_product[e423]))
                + (geometric_product.group1().zxy() * self.group2().yzx()).with_w(geometric_product[e423] * self[e415])
                + (geometric_product.group2().www() * self.group3().xyz()).with_w(geometric_product[e412] * self[e435])
                + (geometric_product.group3().zxy() * self.group2().yzx()).with_w(geometric_product[e412] * self[e3])
                - (Simd32x4::from(geometric_product[e12345]) * self.group2().xyz().with_w(self[e4]))
                - (Simd32x4::from([self[e12345], self[e3], self[e425], self[e12345]]) * geometric_product.group2().xxx().with_w(geometric_product[e4]))
                - (Simd32x4::from([self[e435], self[e12345], self[e1], self[e321]]) * geometric_product.group2().yyy().with_w(geometric_product[e4]))
                - (geometric_product.group1().xyx() * self.group2().wwy()).with_w(geometric_product[e1] * self[e423])
                - (geometric_product.group1().yzz() * self.group2().zxw()).with_w(geometric_product[e2] * self[e431])
                - (geometric_product.group1().www() * self.group2().xyz()).with_w(geometric_product[e3] * self[e412]),
            // e4235, e4315, e4125, e3215
            (geometric_product.group1().xyxz() * self.group1().ww().with_zw(self[e2], self[e125]))
                + (geometric_product.group2().xyxz() * self.group3().ww().with_zw(self[e431], self[e435]))
                + (geometric_product.group2().yzzw() * self.group0().zx().with_zw(self[e4], self[e321]))
                + (geometric_product.group3().xyxy() * self.group0().ww().with_zw(self[e425], self[e315]))
                + (geometric_product.group3().yzzz() * self.group1().zx().with_zw(self[e12345], self[e125]))
                + (self.group1().xyzy() * geometric_product.group1().www().with_w(geometric_product[e315]))
                + (self.group2().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e415]))
                + (self.group3().zx().with_zw(self[e321], self[e415]) * geometric_product.group1().yzz().with_w(geometric_product[e235]))
                + (geometric_product.group0().www() * self.group3().xyz()).with_w(geometric_product[e425] * self[e315])
                + (geometric_product.group2().www() * self.group0().xyz()).with_w(geometric_product[e1] * self[e235])
                - (geometric_product.group0().xyxw() * self.group2().wwyw())
                - (geometric_product.group2().zxyy() * self.group0().yzx().with_w(self[e2]))
                - (self.group2().zxww() * geometric_product.group0().yzz().with_w(geometric_product[e321]))
                - (self.group3().yzxx() * geometric_product.group1().zxy().with_w(geometric_product[e235]))
                - (geometric_product.group3().zxy() * self.group1().yzx()).with_w(geometric_product[e125] * self[e3])
                - (geometric_product.group3().www() * self.group2().xyz()).with_w(geometric_product[e5] * self[e12345]),
        );
    }
}
impl GeometricQuotient<VersorOdd> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       47       67        0
    //    simd3        0       11        0
    //    simd4       51       48        0
    // Totals...
    // yes simd       98      126        0
    //  no simd      251      292        0
    fn geometric_quotient(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let reverse = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + 2.0 * (other[e1234] * other[e3215])
                + f32::powi(other[scalar], 2)
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2),
        );
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e435] * geometric_product[e42])
                    + (self[e321] * geometric_product[e41])
                    + (self[e1] * geometric_product[e1234])
                    + (self[e3] * geometric_product[e42])
                    + (self[e4] * geometric_product[e23])
                    + (self[e4] * geometric_product[e4235]),
                (self[e425] * geometric_product[e1234])
                    + (self[e321] * geometric_product[e42])
                    + (self[e1] * geometric_product[e43])
                    + (self[e2] * geometric_product[e1234])
                    + (self[e4] * geometric_product[e31])
                    + (self[e4] * geometric_product[e4315]),
                (self[e435] * geometric_product[e1234])
                    + (self[e321] * geometric_product[e43])
                    + (self[e2] * geometric_product[e41])
                    + (self[e3] * geometric_product[e1234])
                    + (self[e4] * geometric_product[e12])
                    + (self[e4] * geometric_product[e4125]),
                -(self[e425] * geometric_product[e31])
                    - (self[e435] * geometric_product[e12])
                    - (self[e321] * geometric_product[e45])
                    - (self[e235] * geometric_product[e41])
                    - (self[e315] * geometric_product[e42])
                    - (self[e125] * geometric_product[e43]),
            ]) + (Simd32x4::from([geometric_product[scalar], geometric_product[e12], geometric_product[e23], geometric_product[scalar]]) * self.group0().xxyw())
                + (Simd32x4::from([geometric_product[e31], geometric_product[scalar], geometric_product[scalar], geometric_product[e4235]]) * self.group0().zyz().with_w(self[e1]))
                + (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], geometric_product[e1234]]) * self.group0().xxy().with_w(self[e5]))
                + (Simd32x4::from([geometric_product[e1234], geometric_product[e43], geometric_product[e41], geometric_product[e3215]]) * self.group1().xxy().with_w(self[e4]))
                + (Simd32x4::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45], geometric_product[e4315]]) * self.group0().zyz().with_w(self[e2]))
                + (self.group0().www() * geometric_product.group0().xyz()).with_w(self[e3] * geometric_product[e4125])
                - (self.group0().yzxx() * geometric_product.group1().zxy().with_w(geometric_product[e15]))
                - (self.group0().yzxy() * geometric_product.group3().zxy().with_w(geometric_product[e25]))
                - (self.group1().yzx() * geometric_product.group0().zxy()).with_w(self[e412] * geometric_product[e35])
                - (self.group3().yzx() * geometric_product.group0().zxy()).with_w(self[e415] * geometric_product[e23]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e2] * geometric_product[e4125]) + (self[e4] * geometric_product[e15]),
                (self[e3] * geometric_product[e4235]) + (self[e4] * geometric_product[e25]),
                (self[e1] * geometric_product[e4315]) + (self[e4] * geometric_product[e35]),
                -(self[e2] * geometric_product[e31]) - (self[e3] * geometric_product[e12]),
            ]) + (Simd32x4::from([geometric_product[e42], geometric_product[e1234], geometric_product[e1234], geometric_product[e43]]) * self.group2().zyzz())
                + (Simd32x4::from([geometric_product[scalar], geometric_product[e12], geometric_product[e23], geometric_product[scalar]]) * self.group1().xxyw())
                + (Simd32x4::from([geometric_product[e31], geometric_product[scalar], geometric_product[scalar], geometric_product[e41]]) * self.group1().zyz().with_w(self[e235]))
                + (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], geometric_product[e4315]]) * self.group0().zyz().with_w(self[e425]))
                + (Simd32x4::from([geometric_product[e1234], geometric_product[e43], geometric_product[e41], geometric_product[e42]]) * self.group2().xxyy())
                + (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e4235]]) * self.group0().xxy().with_w(self[e415]))
                + (self.group0().www() * geometric_product.group1().xyz()).with_w(self[e435] * geometric_product[e4125])
                + (self.group2().www() * geometric_product.group0().xyz()).with_w(self[e4] * geometric_product[e3215])
                - (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], geometric_product[e1234]]) * self.group3().xxy().with_w(self[e5]))
                - (Simd32x4::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45], geometric_product[e23]]) * self.group3().zyzx())
                - (self.group0().yzxx() * geometric_product.group2().zxyx())
                - (self.group1().yzx() * geometric_product.group1().zxy()).with_w(self[e431] * geometric_product[e25])
                - (self.group1().www() * geometric_product.group3().xyz()).with_w(self[e412] * geometric_product[e35])
                - (self.group2().yzx() * geometric_product.group0().zxy()).with_w(self[e12345] * geometric_product[e45]),
            // e235, e315, e125, e5
            (Simd32x4::from(self[e12345]) * geometric_product.group2().xyz().with_w(geometric_product[e3215]))
                + (Simd32x4::from([geometric_product[scalar], geometric_product[e12], geometric_product[e4315], geometric_product[e4125]]) * self.group2().xxxz())
                + (Simd32x4::from([geometric_product[e31], geometric_product[e4235], geometric_product[scalar], geometric_product[e15]]) * self.group2().zzz().with_w(self[e1]))
                + (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], geometric_product[e4315]]) * self.group1().zyz().with_w(self[e315]))
                + (Simd32x4::from([geometric_product[e4125], geometric_product[scalar], geometric_product[e23], geometric_product[scalar]]) * self.group2().yyyw())
                + (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e4235]]) * self.group1().xxy().with_w(self[e235]))
                + (self.group3().yzxz() * geometric_product.group2().zxyz())
                + (self.group2().www() * geometric_product.group1().xyz()).with_w(self[e2] * geometric_product[e25])
                - (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e31], geometric_product[e35]]) * self.group2().xxx().with_w(self[e435]))
                - (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], geometric_product[e45]]) * self.group3().zyz().with_w(self[e5]))
                - (Simd32x4::from([geometric_product[e4315], geometric_product[e23], geometric_product[e45], geometric_product[e23]]) * self.group2().zzzx())
                - (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e12]]) * self.group3().xxy().with_w(self[e125]))
                - (self.group1().yzxx() * geometric_product.group2().zxyx())
                - (self.group1().wwwy() * geometric_product.group2().xyzy())
                - (self.group2().wwwy() * geometric_product.group3().xyz().with_w(geometric_product[e31]))
                - (geometric_product.group1().zw().with_zw(geometric_product[e4235], geometric_product[e3215]) * self.group2().yyy().with_w(self[e321])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e315] * geometric_product[e43]) + (self[e1] * geometric_product[scalar]) + (self[e3] * geometric_product[e31]) + (self[e4] * geometric_product[e15]),
                (self[e125] * geometric_product[e41]) + (self[e1] * geometric_product[e12]) + (self[e2] * geometric_product[scalar]) + (self[e4] * geometric_product[e25]),
                (self[e235] * geometric_product[e42]) + (self[e2] * geometric_product[e23]) + (self[e3] * geometric_product[scalar]) + (self[e4] * geometric_product[e35]),
                -(self[e435] * geometric_product[e43]) - (self[e1] * geometric_product[e41]) - (self[e2] * geometric_product[e42]) - (self[e3] * geometric_product[e43]),
            ]) + (Simd32x4::from([geometric_product[e25], geometric_product[e3215], geometric_product[e3215], geometric_product[e1234]]) * self.group0().zyz().with_w(self[e321]))
                + (Simd32x4::from([geometric_product[e3215], geometric_product[e35], geometric_product[e15], geometric_product[e1234]]) * self.group0().xxyw())
                + (geometric_product.group1() * self.group1().www().with_w(self[e4]))
                + (self.group1().yzx() * geometric_product.group3().zxy()).with_w(self[e4] * geometric_product[scalar])
                - (Simd32x4::from([geometric_product[e42], geometric_product[e1234], geometric_product[e1234], geometric_product[e4125]]) * self.group2().zyz().with_w(self[e412]))
                - (Simd32x4::from([geometric_product[e45], geometric_product[e4125], geometric_product[e4235], geometric_product[e31]]) * self.group1().xxy().with_w(self[e431]))
                - (Simd32x4::from([geometric_product[e1234], geometric_product[e43], geometric_product[e41], geometric_product[e12]]) * self.group2().xxy().with_w(self[e412]))
                - (Simd32x4::from([geometric_product[e4315], geometric_product[e45], geometric_product[e45], geometric_product[e4315]]) * self.group1().zyz().with_w(self[e431]))
                - (self.group0().yzxx() * geometric_product.group2().zxy().with_w(geometric_product[e23]))
                - (self.group0().wwwx() * geometric_product.group3().xyzx())
                - (geometric_product.group0().xyzx() * self.group2().www().with_w(self[e415]))
                - (self.group3().yzx() * geometric_product.group1().zxy()).with_w(self[e425] * geometric_product[e42]),
        );
    }
}
impl std::ops::Div<GeometricQuotientInfix> for VersorOdd {
    type Output = GeometricQuotientInfixPartial<VersorOdd>;
    fn div(self, _rhs: GeometricQuotientInfix) -> Self::Output {
        GeometricQuotientInfixPartial(self)
    }
}
impl GeometricQuotient<AntiCircleRotor> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       55       76        0
    //    simd3        0        8        0
    //    simd4       28       26        0
    // Totals...
    // yes simd       83      110        0
    //  no simd      167      204        0
    fn geometric_quotient(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiCircleRotor::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, scalar
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                + f32::powi(other[scalar], 2)
                - f32::powi(other[e45], 2),
        );
        let geometric_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (geometric_product[e43] * self[e4315])
                    + (geometric_product[e23] * self[e1234])
                    + (geometric_product[e31] * self[e43])
                    + (geometric_product[e45] * self[e41])
                    + (geometric_product[scalar] * self[e41]),
                (geometric_product[e43] * self[e23])
                    + (geometric_product[e31] * self[e1234])
                    + (geometric_product[e12] * self[e41])
                    + (geometric_product[e45] * self[e42])
                    + (geometric_product[scalar] * self[e42]),
                (geometric_product[e43] * self[scalar])
                    + (geometric_product[e23] * self[e42])
                    + (geometric_product[e12] * self[e1234])
                    + (geometric_product[e45] * self[e43])
                    + (geometric_product[scalar] * self[e43]),
                -(geometric_product[e31] * self[e31])
                    - (geometric_product[e12] * self[e12])
                    - (geometric_product[e15] * self[e41])
                    - (geometric_product[e25] * self[e42])
                    - (geometric_product[e35] * self[e43]),
            ]) + (Simd32x4::from([self[scalar], self[e4125], self[e31], self[e45]]) * geometric_product.group0().xxx().with_w(geometric_product[e45]))
                + (Simd32x4::from([self[e12], self[scalar], self[e4235], self[scalar]]) * geometric_product.group0().yyy().with_w(geometric_product[scalar]))
                - (Simd32x4::from(geometric_product[e41]) * self.group1().wz().with_zw(self[e4315], self[e15]))
                - (Simd32x4::from(geometric_product[e42]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(geometric_product[e43]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]]))
                - (geometric_product.group1().zxyx() * self.group0().yzx().with_w(self[e23])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (geometric_product[e15] * self[e1234]) + (geometric_product[e25] * self[e43]) + (geometric_product[scalar] * self[e23]),
                (geometric_product[e25] * self[e1234]) + (geometric_product[e35] * self[e41]) + (geometric_product[scalar] * self[e31]),
                (geometric_product[e15] * self[e42]) + (geometric_product[e35] * self[e1234]) + (geometric_product[scalar] * self[e12]),
                -(geometric_product[e23] * self[e4235]) - (geometric_product[e31] * self[e4315]) - (geometric_product[e12] * self[e4125]),
            ]) + (self.group0().ww().with_zw(self[e31], self[e42]) * geometric_product.group1().xyx().with_w(geometric_product[e25]))
                + (self.group1().zx().with_zw(self[scalar], self[e43]) * geometric_product.group1().yzz().with_w(geometric_product[e35]))
                + (self.group2().zx().with_zw(self[e3215], self[e41]) * geometric_product.group0().yzz().with_w(geometric_product[e15]))
                + (self.group3().ww().with_zw(self[e25], self[scalar]) * geometric_product.group0().xyx().with_w(geometric_product[e45]))
                + (geometric_product.group1().www() * self.group3().xyz()).with_w(geometric_product[scalar] * self[e45])
                - (self.group2().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e41]))
                - (geometric_product.group1().zxy() * self.group1().yzx()).with_w(geometric_product[e42] * self[e25])
                - (geometric_product.group2().zxy() * self.group0().yzx()).with_w(geometric_product[e43] * self[e35]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (geometric_product[e25] * self[e4125]) + (geometric_product[scalar] * self[e15]),
                (geometric_product[e35] * self[e4235]) + (geometric_product[scalar] * self[e25]),
                (geometric_product[e35] * self[e45]) + (geometric_product[scalar] * self[e35]),
                -(geometric_product[e31] * self[e42]) - (geometric_product[e12] * self[e43]),
            ]) + (geometric_product.group2().yzzw() * self.group1().zx().with_zw(self[scalar], self[e1234]))
                + (self.group0().ww().with_zw(self[e31], self[e4125]) * geometric_product.group2().xyx().with_w(geometric_product[e43]))
                + (self.group1().ww().with_zw(self[e4315], self[e1234]) * geometric_product.group2().xyx().with_w(geometric_product[e45]))
                + (self.group2().zx().with_zw(self[e3215], self[e4315]) * geometric_product.group1().yzz().with_w(geometric_product[e42]))
                + (self.group3().ww().with_zw(self[e25], self[e4235]) * geometric_product.group1().xyx().with_w(geometric_product[e41]))
                - (self.group1().yzxz() * geometric_product.group2().zxy().with_w(geometric_product[e43]))
                - (geometric_product.group1().zxy() * self.group2().yzx()).with_w(geometric_product[e41] * self[e23])
                - (geometric_product.group1().www() * self.group2().xyz()).with_w(geometric_product[e42] * self[e31])
                - (geometric_product.group2().zxy() * self.group3().yzx()).with_w(geometric_product[e23] * self[e41]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (geometric_product[e42] * self[e35])
                    + (geometric_product[e23] * self[e45])
                    + (geometric_product[e31] * self[e4125])
                    + (geometric_product[e45] * self[e23])
                    + (geometric_product[e35] * self[e42])
                    + (geometric_product[scalar] * self[e4235]),
                (geometric_product[e43] * self[e15])
                    + (geometric_product[e31] * self[e45])
                    + (geometric_product[e12] * self[e4235])
                    + (geometric_product[e45] * self[e31])
                    + (geometric_product[e15] * self[e43])
                    + (geometric_product[scalar] * self[e4315]),
                (geometric_product[e43] * self[e3215])
                    + (geometric_product[e23] * self[e4315])
                    + (geometric_product[e12] * self[e45])
                    + (geometric_product[e45] * self[e12])
                    + (geometric_product[e25] * self[e41])
                    + (geometric_product[scalar] * self[e4125]),
                -(geometric_product[e15] * self[e23])
                    - (geometric_product[e15] * self[e4235])
                    - (geometric_product[e25] * self[e31])
                    - (geometric_product[e25] * self[e4315])
                    - (geometric_product[e35] * self[e12])
                    - (geometric_product[e35] * self[e4125]),
            ]) + (self.group3().ww().with_zw(self[e25], self[e3215]) * geometric_product.group0().xyx().with_w(geometric_product[scalar]))
                - (geometric_product.group1().zxyy() * self.group3().yzx().with_w(self[e25]))
                - (self.group2().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e23]))
                - (self.group0().zx().with_zw(self[e1234], self[e3215]) * geometric_product.group2().yzz().with_w(geometric_product[e45]))
                - (self.group2().ww().with_zw(self[e42], self[e35]) * geometric_product.group2().xyx().with_w(geometric_product[e12])),
        );
    }
}
impl GeometricQuotient<AntiDipoleInversion> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       42       71        0
    //    simd3        0       15        0
    //    simd4       48       40        0
    // Totals...
    // yes simd       90      126        0
    //  no simd      234      276        0
    fn geometric_quotient(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e4
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125])
                - 2.0 * (other[e4] * other[e5]),
        );
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e4
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e1, e2, e3, e5
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (geometric_product[e4] * self[e23]) + (geometric_product[e3] * self[e42]),
                (geometric_product[e4] * self[e31]) + (geometric_product[e1] * self[e43]),
                (geometric_product[e4] * self[e12]) + (geometric_product[e2] * self[e41]),
                -(geometric_product[e315] * self[e42]) - (geometric_product[e125] * self[e43]),
            ]) + (Simd32x4::from([self[scalar], self[e4125], self[e31], self[e3215]]) * geometric_product.group0().xxx().with_w(geometric_product[e4]))
                + (Simd32x4::from([self[e12], self[scalar], self[e4235], self[e4235]]) * geometric_product.group0().yyy().with_w(geometric_product[e1]))
                + (Simd32x4::from([self[e4315], self[e23], self[scalar], self[e4315]]) * geometric_product.group0().zzz().with_w(geometric_product[e2]))
                + (self.group0().zx().with_zw(self[e1234], self[e1234]) * geometric_product.group1().yzz().with_w(geometric_product[e5]))
                + (self.group2().ww().with_zw(self[e42], self[e4125]) * geometric_product.group1().xyx().with_w(geometric_product[e3]))
                - (Simd32x4::from(geometric_product[e423]) * self.group1().wz().with_zw(self[e4315], self[e15]))
                - (Simd32x4::from(geometric_product[e431]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(geometric_product[e412]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]]))
                - (geometric_product.group1().zxyx() * self.group0().yzx().with_w(self[e23]))
                - (geometric_product.group1().wwwy() * self.group0().xyz().with_w(self[e31]))
                - (self.group0().zx().with_zw(self[e1234], self[e41]) * geometric_product.group3().yzz().with_w(geometric_product[e235]))
                - (self.group2().ww().with_zw(self[e42], self[e45]) * geometric_product.group3().xyx().with_w(geometric_product[e321]))
                - (geometric_product.group2().www() * self.group3().xyz()).with_w(geometric_product[e435] * self[e12]),
            // e415, e425, e435, e321
            Simd32x4::from([
                geometric_product[e5] * self[e41],
                geometric_product[e5] * self[e42],
                geometric_product[e5] * self[e43],
                geometric_product[e3] * self[e12] * -1.0,
            ]) + (geometric_product.group1().yzzx() * self.group1().zx().with_zw(self[scalar], self[e4235]))
                + (geometric_product.group3().zxyw() * self.group3().yzx().with_w(self[e1234]))
                + (self.group0().zx().with_zw(self[e1234], self[e4125]) * geometric_product.group2().yzz().with_w(geometric_product[e435]))
                + (self.group0().ww().with_zw(self[e31], self[e35]) * geometric_product.group1().xyx().with_w(geometric_product[e412]))
                + (self.group2().zx().with_zw(self[e3215], self[e25]) * geometric_product.group0().yzz().with_w(geometric_product[e431]))
                + (self.group2().ww().with_zw(self[e42], self[e4315]) * geometric_product.group2().xyx().with_w(geometric_product[e425]))
                + (self.group3().ww().with_zw(self[e25], self[e15]) * geometric_product.group0().xyx().with_w(geometric_product[e423]))
                + (geometric_product.group2().www() * self.group2().xyz()).with_w(geometric_product[e321] * self[scalar])
                - (geometric_product.group2().zxyw() * self.group0().yzx().with_w(self[e3215]))
                - (geometric_product.group3().xyxx() * self.group1().ww().with_zw(self[e4315], self[e23]))
                - (geometric_product.group3().yzzy() * self.group3().zx().with_zw(self[e45], self[e31]))
                - (geometric_product.group0().zxy() * self.group2().yzx()).with_w(geometric_product[e235] * self[e41])
                - (geometric_product.group1().zxy() * self.group1().yzx()).with_w(geometric_product[e315] * self[e42])
                - (geometric_product.group1().www() * self.group3().xyz()).with_w(geometric_product[e125] * self[e43]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (geometric_product[e235] * self[scalar])
                    + (geometric_product[e235] * self[e45])
                    + (geometric_product[e315] * self[e12])
                    + (geometric_product[e315] * self[e4125])
                    + (geometric_product[e1] * self[e3215])
                    + (geometric_product[e2] * self[e35])
                    + (geometric_product[e5] * self[e23])
                    + (geometric_product[e5] * self[e4235]),
                (geometric_product[e315] * self[scalar])
                    + (geometric_product[e315] * self[e45])
                    + (geometric_product[e125] * self[e23])
                    + (geometric_product[e125] * self[e4235])
                    + (geometric_product[e2] * self[e3215])
                    + (geometric_product[e3] * self[e15])
                    + (geometric_product[e5] * self[e31])
                    + (geometric_product[e5] * self[e4315]),
                (geometric_product[e235] * self[e31])
                    + (geometric_product[e235] * self[e4315])
                    + (geometric_product[e125] * self[scalar])
                    + (geometric_product[e125] * self[e45])
                    + (geometric_product[e1] * self[e25])
                    + (geometric_product[e3] * self[e3215])
                    + (geometric_product[e5] * self[e12])
                    + (geometric_product[e5] * self[e4125]),
                -(geometric_product[e235] * self[e4235])
                    - (geometric_product[e315] * self[e31])
                    - (geometric_product[e315] * self[e4315])
                    - (geometric_product[e125] * self[e12])
                    - (geometric_product[e125] * self[e4125])
                    - (geometric_product[e1] * self[e15])
                    - (geometric_product[e2] * self[e25])
                    - (geometric_product[e3] * self[e35]),
            ]) + (geometric_product.group1().xyxw() * self.group3().ww().with_zw(self[e25], self[e3215]))
                + (self.group2().zx().with_zw(self[e3215], self[scalar]) * geometric_product.group1().yzz().with_w(geometric_product[e5]))
                + (geometric_product.group1().www() * self.group2().xyz()).with_w(geometric_product[e5] * self[e45])
                - (geometric_product.group1().zxyx() * self.group2().yzxx())
                - (geometric_product.group2().zxy() * self.group1().yzx()).with_w(geometric_product[e425] * self[e25])
                - (geometric_product.group2().zxy() * self.group3().yzx()).with_w(geometric_product[e435] * self[e35])
                - (geometric_product.group3().zxy() * self.group2().yzx()).with_w(geometric_product[e235] * self[e23]),
            // e1, e2, e3, e4
            Simd32x4::from([
                geometric_product[e5] * self[e41],
                geometric_product[e5] * self[e42],
                geometric_product[e5] * self[e43],
                geometric_product[e4] * self[e45] * -1.0,
            ]) + (geometric_product.group2().xyxw() * self.group2().ww().with_zw(self[e42], self[scalar]))
                + (geometric_product.group3().xyxy() * self.group0().ww().with_zw(self[e31], self[e42]))
                + (geometric_product.group3().yzzz() * self.group1().zx().with_zw(self[scalar], self[e43]))
                + (self.group3().yzxy() * geometric_product.group1().zxy().with_w(geometric_product[e431]))
                + (self.group0().zx().with_zw(self[e1234], self[e41]) * geometric_product.group2().yzz().with_w(geometric_product[e1]))
                + (geometric_product.group0().zxy() * self.group2().yzx()).with_w(geometric_product[e423] * self[e4235])
                + (geometric_product.group1().www() * self.group1().xyz()).with_w(geometric_product[e412] * self[e4125])
                - (geometric_product.group1().yzzx() * self.group3().zx().with_zw(self[e45], self[e41]))
                - (self.group0().yzxy() * geometric_product.group2().zxy().with_w(geometric_product[e425]))
                - (self.group1().ww().with_zw(self[e4315], self[e12]) * geometric_product.group1().xyx().with_w(geometric_product[e412]))
                - (self.group2().zx().with_zw(self[e3215], self[e31]) * geometric_product.group0().yzz().with_w(geometric_product[e431]))
                - (self.group3().ww().with_zw(self[e25], self[e23]) * geometric_product.group0().xyx().with_w(geometric_product[e423]))
                - (geometric_product.group2().www() * self.group2().xyz()).with_w(geometric_product[e435] * self[e43])
                - (geometric_product.group3().zxy() * self.group1().yzx()).with_w(geometric_product[e321] * self[e1234]),
        );
    }
}
impl GeometricQuotient<AntiDualNum> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2       16        0
    //    simd2        0        1        0
    //    simd3        2        3        0
    //    simd4        2        3        0
    // Totals...
    // yes simd        6       23        0
    //  no simd       16       39        0
    fn geometric_quotient(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDualNum::from_groups(/* e3215, scalar */ Simd32x2::from(f32::powi(other[scalar], -2)) * other.group0());
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            geometric_product
                .group0()
                .yy()
                .with_zw(geometric_product[scalar], (geometric_product[e3215] * self[e1234]) + (geometric_product[scalar] * self[scalar]))
                * self.group0().xyz().with_w(1.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                geometric_product[scalar] * self[e23],
                geometric_product[scalar] * self[e31],
                geometric_product[scalar] * self[e12],
                geometric_product[e3215] * self[e1234] * -1.0,
            ]) + (geometric_product.group0().xx().with_zw(geometric_product[e3215], geometric_product[scalar]) * self.group0().xyz().with_w(self[e45])),
            // e15, e25, e35, e1234
            ((Simd32x3::from(geometric_product[e3215]) * self.group1().xyz())
                + (Simd32x3::from(geometric_product[e3215]) * self.group3().xyz())
                + (Simd32x3::from(geometric_product[scalar]) * self.group2().xyz()))
            .with_w(geometric_product[scalar] * self[e1234]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                geometric_product[e3215] * self[e41] * -1.0,
                geometric_product[e3215] * self[e42] * -1.0,
                geometric_product[e3215] * self[e43] * -1.0,
                (geometric_product[e3215] * self[e45]) + (geometric_product[scalar] * self[e3215]),
            ]) + (geometric_product.group0().yy().with_zw(geometric_product[scalar], geometric_product[e3215]) * self.group3().xyz().with_w(self[scalar])),
        );
    }
}
impl GeometricQuotient<AntiFlatPoint> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       31        0
    //    simd3        3        6        0
    //    simd4        6        7        0
    // Totals...
    // yes simd       24       44        0
    //  no simd       48       77        0
    fn geometric_quotient(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlatPoint::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(f32::powi(other[e321], -2)) * Simd32x4::from([other[e235] * -1.0, other[e315] * -1.0, other[e125] * -1.0, other[e321] * -1.0]),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (geometric_product.group0().www() * self.group0().xyz() * Simd32x3::from(-1.0)).with_w(
                -(geometric_product[e235] * self[e41]) - (geometric_product[e315] * self[e42]) - (geometric_product[e125] * self[e43]) - (geometric_product[e321] * self[e45]),
            ),
            // e415, e425, e435, e321
            Simd32x4::from([
                geometric_product[e315] * self[e43],
                geometric_product[e125] * self[e41],
                geometric_product[e125] * self[e1234],
                geometric_product[e125] * self[e43] * -1.0,
            ]) + (geometric_product.group0().xyxw() * self.group2().ww().with_zw(self[e42], self[scalar]))
                - (geometric_product.group0().zxyx() * self.group0().yzxx())
                - (geometric_product.group0().wwwy() * self.group3().xyz().with_w(self[e42])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (geometric_product[e235] * self[e45]) + (geometric_product[e315] * self[e12]) + (geometric_product[e315] * self[e4125]) + (geometric_product[e321] * self[e15]),
                (geometric_product[e315] * self[e45]) + (geometric_product[e125] * self[e23]) + (geometric_product[e125] * self[e4235]) + (geometric_product[e321] * self[e25]),
                (geometric_product[e235] * self[e4315]) + (geometric_product[e125] * self[scalar]) + (geometric_product[e125] * self[e45]) + (geometric_product[e321] * self[e35]),
                -(geometric_product[e315] * self[e31]) - (geometric_product[e315] * self[e4315]) - (geometric_product[e125] * self[e12]) - (geometric_product[e125] * self[e4125]),
            ]) + (geometric_product.group0().xyxw() * self.group0().ww().with_zw(self[e31], self[e3215]))
                - (geometric_product.group0().zxyx() * self.group1().yzxx())
                - (geometric_product.group0().zxyx() * self.group3().yzxx()),
            // e1, e2, e3, e4
            ((Simd32x3::from(geometric_product[e321]) * self.group1().xyz())
                + (Simd32x3::from([self[e43], self[e41], self[e1234]]) * geometric_product.group0().yzz())
                + (Simd32x3::from([self[e1234], self[e1234], self[e42]]) * geometric_product.group0().xyx())
                - (geometric_product.group0().zxy() * self.group0().yzx()))
            .with_w(geometric_product[e321] * self[e1234] * -1.0),
        );
    }
}
impl GeometricQuotient<AntiFlector> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       39       50        0
    //    simd3        0        2        0
    //    simd4       20       21        0
    // Totals...
    // yes simd       59       73        0
    //  no simd      119      140        0
    fn geometric_quotient(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiFlector::from_groups(/* e235, e315, e125, e321 */ other.group0() * Simd32x4::from(-1.0), /* e1, e2, e3, e5 */ other.group1());
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2),
        );
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e1, e2, e3, e5
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (geometric_product.group1().zxyx() * self.group0().yzx().with_w(self[e4235]))
                + Simd32x3::from(0.0).with_w(
                    (geometric_product[e2] * self[e4315]) + (geometric_product[e3] * self[e4125]) + (geometric_product[e5] * self[e1234]) - (geometric_product[e321] * self[e45]),
                )
                - (geometric_product.group0().wwwx() * self.group0().xyzx())
                - (self.group0().zx().with_zw(self[e1234], self[e43]) * geometric_product.group1().yzz().with_w(geometric_product[e125]))
                - (self.group2().ww().with_zw(self[e42], self[e42]) * geometric_product.group1().xyx().with_w(geometric_product[e315])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (geometric_product[e3] * self[e4315]) + (geometric_product[e5] * self[e41]),
                (geometric_product[e1] * self[e4125]) + (geometric_product[e5] * self[e42]),
                (geometric_product[e2] * self[e4235]) + (geometric_product[e5] * self[e43]),
                -(geometric_product[e2] * self[e31]) - (geometric_product[e3] * self[e12]),
            ]) + (geometric_product.group0().xyxw() * self.group2().ww().with_zw(self[e42], self[scalar]))
                + (self.group0().zx().with_zw(self[e1234], self[e1234]) * geometric_product.group0().yzz().with_w(geometric_product[e5]))
                - (geometric_product.group0().zxyx() * self.group0().yzxx())
                - (geometric_product.group0().wwwy() * self.group3().xyz().with_w(self[e42]))
                - (geometric_product.group1().yzzx() * self.group3().zx().with_zw(self[e45], self[e23]))
                - (self.group1().ww().with_zw(self[e4315], self[e43]) * geometric_product.group1().xyx().with_w(geometric_product[e125])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (geometric_product[e315] * self[e4125])
                    + (geometric_product[e321] * self[e15])
                    + (geometric_product[e1] * self[e3215])
                    + (geometric_product[e2] * self[e35])
                    + (geometric_product[e5] * self[e23])
                    + (geometric_product[e5] * self[e4235]),
                (geometric_product[e125] * self[e4235])
                    + (geometric_product[e321] * self[e25])
                    + (geometric_product[e2] * self[e3215])
                    + (geometric_product[e3] * self[e15])
                    + (geometric_product[e5] * self[e31])
                    + (geometric_product[e5] * self[e4315]),
                (geometric_product[e125] * self[e45])
                    + (geometric_product[e321] * self[e35])
                    + (geometric_product[e1] * self[e25])
                    + (geometric_product[e3] * self[e3215])
                    + (geometric_product[e5] * self[e12])
                    + (geometric_product[e5] * self[e4125]),
                -(geometric_product[e315] * self[e4315])
                    - (geometric_product[e125] * self[e12])
                    - (geometric_product[e125] * self[e4125])
                    - (geometric_product[e1] * self[e15])
                    - (geometric_product[e2] * self[e25])
                    - (geometric_product[e3] * self[e35]),
            ]) + (geometric_product.group0().xyxw() * self.group0().ww().with_zw(self[e31], self[e3215]))
                + (self.group1().zx().with_zw(self[scalar], self[e45]) * geometric_product.group0().yzz().with_w(geometric_product[e5]))
                + (self.group1().ww().with_zw(self[e4315], self[scalar]) * geometric_product.group0().xyx().with_w(geometric_product[e5]))
                - (geometric_product.group0().zxyx() * self.group1().yzxx())
                - (geometric_product.group0().zxyx() * self.group3().yzxx())
                - (geometric_product.group1().zxy() * self.group2().yzx()).with_w(geometric_product[e315] * self[e31]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (geometric_product[e1] * self[scalar]) + (geometric_product[e2] * self[e12]) + (geometric_product[e5] * self[e41]) - (geometric_product[e3] * self[e31]),
                (geometric_product[e2] * self[scalar]) + (geometric_product[e3] * self[e23]) + (geometric_product[e5] * self[e42]) - (geometric_product[e1] * self[e12]),
                (geometric_product[e1] * self[e31]) + (geometric_product[e3] * self[scalar]) + (geometric_product[e5] * self[e43]) - (geometric_product[e2] * self[e23]),
                0.0,
            ]) + (self.group0().zx().with_zw(self[e1234], self[e42]) * geometric_product.group0().yzz().with_w(geometric_product[e2]))
                + (self.group2().ww().with_zw(self[e42], self[e41]) * geometric_product.group0().xyx().with_w(geometric_product[e1]))
                + (geometric_product.group0().www() * self.group1().xyz()).with_w(geometric_product[e3] * self[e43])
                - (geometric_product.group0().zxyw() * self.group0().yzx().with_w(self[e1234])),
        );
    }
}
impl GeometricQuotient<AntiLine> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       35       56        0
    //    simd3        0       11        0
    //    simd4       12        5        0
    // Totals...
    // yes simd       47       72        0
    //  no simd       83      109        0
    fn geometric_quotient(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiLine::from_groups(
            // e23, e31, e12
            other.group0() * Simd32x3::from(-1.0),
            // e15, e25, e35
            other.group1() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(/* scalar */ f32::powi(other[e23], 2) + f32::powi(other[e31], 2) + f32::powi(other[e12], 2));
        let geometric_product = AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e15, e25, e35
            Simd32x3::from(other_2[scalar]) * reverse.group1(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (geometric_product[e23] * self[e1234]) + (geometric_product[e31] * self[e43]),
                (geometric_product[e31] * self[e1234]) + (geometric_product[e12] * self[e41]),
                (geometric_product[e23] * self[e42]) + (geometric_product[e12] * self[e1234]),
                -(geometric_product[e31] * self[e31])
                    - (geometric_product[e12] * self[e12])
                    - (geometric_product[e15] * self[e41])
                    - (geometric_product[e25] * self[e42])
                    - (geometric_product[e35] * self[e43]),
            ]) - (geometric_product.group0().zxy() * self.group0().yzx()).with_w(geometric_product[e23] * self[e23]),
            // e23, e31, e12, e45
            Simd32x4::from([
                geometric_product[e25] * self[e43],
                geometric_product[e35] * self[e41],
                geometric_product[e35] * self[e1234],
                geometric_product[e12] * self[e4125] * -1.0,
            ]) + (self.group0().ww().with_zw(self[e31], self[e41]) * geometric_product.group0().xyx().with_w(geometric_product[e15]))
                + (self.group1().zx().with_zw(self[scalar], self[e42]) * geometric_product.group0().yzz().with_w(geometric_product[e25]))
                + (self.group2().ww().with_zw(self[e42], self[e43]) * geometric_product.group1().xyx().with_w(geometric_product[e35]))
                - (geometric_product.group0().zxy() * self.group1().yzx()).with_w(geometric_product[e23] * self[e4235])
                - (geometric_product.group1().zxy() * self.group0().yzx()).with_w(geometric_product[e31] * self[e4315]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (geometric_product[e23] * self[e3215])
                    + (geometric_product[e31] * self[e35])
                    + (geometric_product[e15] * self[scalar])
                    + (geometric_product[e15] * self[e45])
                    + (geometric_product[e25] * self[e12])
                    + (geometric_product[e25] * self[e4125]),
                (geometric_product[e31] * self[e3215])
                    + (geometric_product[e12] * self[e15])
                    + (geometric_product[e25] * self[scalar])
                    + (geometric_product[e25] * self[e45])
                    + (geometric_product[e35] * self[e23])
                    + (geometric_product[e35] * self[e4235]),
                (geometric_product[e23] * self[e25])
                    + (geometric_product[e12] * self[e3215])
                    + (geometric_product[e15] * self[e31])
                    + (geometric_product[e15] * self[e4315])
                    + (geometric_product[e35] * self[scalar])
                    + (geometric_product[e35] * self[e45]),
                0.0,
            ]) - (geometric_product.group0().zxy() * self.group2().yzx()).with_w(geometric_product[e23] * self[e41])
                - (geometric_product.group1().zxy() * self.group1().yzx()).with_w(geometric_product[e31] * self[e42])
                - (geometric_product.group1().zxy() * self.group3().yzx()).with_w(geometric_product[e12] * self[e43]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (geometric_product[e23] * self[e45]) + (geometric_product[e31] * self[e4125]) + (geometric_product[e35] * self[e42]),
                (geometric_product[e31] * self[e45]) + (geometric_product[e12] * self[e4235]) + (geometric_product[e15] * self[e43]),
                (geometric_product[e23] * self[e4315]) + (geometric_product[e12] * self[e45]) + (geometric_product[e25] * self[e41]),
                -(geometric_product[e15] * self[e23])
                    - (geometric_product[e15] * self[e4235])
                    - (geometric_product[e25] * self[e31])
                    - (geometric_product[e25] * self[e4315])
                    - (geometric_product[e35] * self[e12])
                    - (geometric_product[e35] * self[e4125]),
            ]) - (self.group0().zx().with_zw(self[e1234], self[e35]) * geometric_product.group1().yzz().with_w(geometric_product[e12]))
                - (self.group2().ww().with_zw(self[e42], self[e25]) * geometric_product.group1().xyx().with_w(geometric_product[e31]))
                - (geometric_product.group0().zxy() * self.group3().yzx()).with_w(geometric_product[e23] * self[e15]),
        );
    }
}
impl GeometricQuotient<AntiMotor> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       53        0
    //    simd3        0        5        0
    //    simd4       20       19        0
    // Totals...
    // yes simd       56       77        0
    //  no simd      116      144        0
    fn geometric_quotient(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let reverse = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, e3215
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e23], 2) + f32::powi(other[e31], 2) + f32::powi(other[e12], 2) + f32::powi(other[scalar], 2),
        );
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e15, e25, e35, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                geometric_product[scalar] * self[e41],
                geometric_product[scalar] * self[e42],
                geometric_product[scalar] * self[e43],
                -(geometric_product[e31] * self[e31])
                    - (geometric_product[e12] * self[e12])
                    - (geometric_product[e15] * self[e41])
                    - (geometric_product[e25] * self[e42])
                    - (geometric_product[e35] * self[e43]),
            ]) + (geometric_product.group0().xyxw() * self.group2().ww().with_zw(self[e42], self[scalar]))
                + (self.group0().zx().with_zw(self[e1234], self[e1234]) * geometric_product.group0().yzz().with_w(geometric_product[e3215]))
                - (geometric_product.group0().zxyx() * self.group0().yzx().with_w(self[e23])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (geometric_product[e25] * self[e43]) + (geometric_product[e3215] * self[e41]),
                (geometric_product[e35] * self[e41]) + (geometric_product[e3215] * self[e42]),
                (geometric_product[e35] * self[e1234]) + (geometric_product[e3215] * self[e43]),
                -(geometric_product[e12] * self[e4125]) - (geometric_product[e3215] * self[e1234]),
            ]) + (geometric_product.group0().xyxw() * self.group0().ww().with_zw(self[e31], self[e45]))
                + (geometric_product.group1().xyxz() * self.group2().ww().with_zw(self[e42], self[e43]))
                + (self.group1().zx().with_zw(self[scalar], self[e41]) * geometric_product.group0().yzz().with_w(geometric_product[e15]))
                + (geometric_product.group0().www() * self.group1().xyz()).with_w(geometric_product[e25] * self[e42])
                - (geometric_product.group0().zxyx() * self.group1().yzx().with_w(self[e4235]))
                - (geometric_product.group1().zxy() * self.group0().yzx()).with_w(geometric_product[e31] * self[e4315]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (geometric_product[e31] * self[e35])
                    + (geometric_product[scalar] * self[e15])
                    + (geometric_product[e15] * self[scalar])
                    + (geometric_product[e15] * self[e45])
                    + (geometric_product[e25] * self[e12])
                    + (geometric_product[e25] * self[e4125])
                    + (geometric_product[e3215] * self[e23])
                    + (geometric_product[e3215] * self[e4235]),
                (geometric_product[e12] * self[e15])
                    + (geometric_product[scalar] * self[e25])
                    + (geometric_product[e25] * self[scalar])
                    + (geometric_product[e25] * self[e45])
                    + (geometric_product[e35] * self[e23])
                    + (geometric_product[e35] * self[e4235])
                    + (geometric_product[e3215] * self[e31])
                    + (geometric_product[e3215] * self[e4315]),
                (geometric_product[e12] * self[e3215])
                    + (geometric_product[scalar] * self[e35])
                    + (geometric_product[e15] * self[e31])
                    + (geometric_product[e15] * self[e4315])
                    + (geometric_product[e35] * self[scalar])
                    + (geometric_product[e35] * self[e45])
                    + (geometric_product[e3215] * self[e12])
                    + (geometric_product[e3215] * self[e4125]),
                0.0,
            ]) + (geometric_product.group0().xyxw() * self.group3().ww().with_zw(self[e25], self[e1234]))
                - (geometric_product.group0().zxyx() * self.group2().yzx().with_w(self[e41]))
                - (geometric_product.group1().zxy() * self.group1().yzx()).with_w(geometric_product[e31] * self[e42])
                - (geometric_product.group1().zxy() * self.group3().yzx()).with_w(geometric_product[e12] * self[e43]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                geometric_product[e35] * self[e42],
                geometric_product[e15] * self[e43],
                geometric_product[e25] * self[e41],
                -(geometric_product[e15] * self[e4235])
                    - (geometric_product[e25] * self[e31])
                    - (geometric_product[e25] * self[e4315])
                    - (geometric_product[e35] * self[e12])
                    - (geometric_product[e35] * self[e4125]),
            ]) + (geometric_product.group0().xyxw() * self.group1().ww().with_zw(self[e4315], self[e3215]))
                + (self.group3().zx().with_zw(self[e45], self[scalar]) * geometric_product.group0().yzz().with_w(geometric_product[e3215]))
                + (geometric_product.group0().www() * self.group3().xyz()).with_w(geometric_product[e3215] * self[e45])
                - (geometric_product.group0().zxyx() * self.group3().yzx().with_w(self[e15]))
                - (geometric_product.group1().wwwx() * self.group0().xyz().with_w(self[e23]))
                - (self.group0().zx().with_zw(self[e1234], self[e35]) * geometric_product.group1().yzz().with_w(geometric_product[e12]))
                - (self.group2().ww().with_zw(self[e42], self[e25]) * geometric_product.group1().xyx().with_w(geometric_product[e31])),
        );
    }
}
impl GeometricQuotient<AntiPlane> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       28        0
    //    simd4       10       11        0
    // Totals...
    // yes simd       21       39        0
    //  no simd       51       72        0
    fn geometric_quotient(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiPlane::from_groups(
            // e1, e2, e3, e5
            Simd32x4::from(f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)) * other.group0(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                -(geometric_product[e1] * self[e1234]) - (geometric_product[e2] * self[e43]),
                -(geometric_product[e2] * self[e1234]) - (geometric_product[e3] * self[e41]),
                -(geometric_product[e1] * self[e42]) - (geometric_product[e3] * self[e1234]),
                (geometric_product[e2] * self[e4315]) + (geometric_product[e3] * self[e4125]) + (geometric_product[e5] * self[e1234]),
            ]) + (geometric_product.group0().zxyx() * self.group0().yzx().with_w(self[e4235])),
            // e415, e425, e435, e321
            Simd32x4::from([
                geometric_product[e5] * self[e41],
                geometric_product[e5] * self[e42],
                geometric_product[e5] * self[e43],
                geometric_product[e3] * self[e12] * -1.0,
            ]) + (geometric_product.group0().zxyw() * self.group3().yzx().with_w(self[e1234]))
                - (geometric_product.group0().xyxx() * self.group1().ww().with_zw(self[e4315], self[e23]))
                - (geometric_product.group0().yzzy() * self.group3().zx().with_zw(self[e45], self[e31])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (geometric_product[e5] * self[e23]) + (geometric_product[e5] * self[e4235]),
                (geometric_product[e5] * self[e31]) + (geometric_product[e5] * self[e4315]),
                (geometric_product[e5] * self[e12]) + (geometric_product[e5] * self[e4125]),
                -(geometric_product[e2] * self[e25]) - (geometric_product[e3] * self[e35]),
            ]) + (geometric_product.group0().xyxw() * self.group3().ww().with_zw(self[e25], self[scalar]))
                + (geometric_product.group0().yzzw() * self.group2().zx().with_zw(self[e3215], self[e45]))
                - (geometric_product.group0().zxyx() * self.group2().yzxx()),
            // e1, e2, e3, e4
            Simd32x4::from([
                geometric_product[e3] * self[e31] * -1.0,
                geometric_product[e1] * self[e12] * -1.0,
                geometric_product[e2] * self[e23] * -1.0,
                0.0,
            ]) + (geometric_product.group0().xyxx() * self.group0().ww().with_zw(self[e31], self[e41]))
                + (geometric_product.group0().yzzy() * self.group1().zx().with_zw(self[scalar], self[e42]))
                + (geometric_product.group0().wwwz() * self.group0().xyzz()),
        );
    }
}
impl GeometricQuotient<AntiScalar> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        1
    //    simd4        0        6        0
    // Totals...
    // yes simd        0        7        1
    //  no simd        0       25        1
    fn geometric_quotient(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiScalar::from_groups(/* e12345 */ 1.0 / other[e12345] * -1.0);
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(geometric_product[e12345]) * self.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(geometric_product[e12345]) * self.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e235, e315, e125, e5
            Simd32x4::from(geometric_product[e12345]) * self.group2().xyz().with_w(self[e3215]),
            // e1, e2, e3, e4
            Simd32x4::from(geometric_product[e12345]) * self.group3().xyz().with_w(self[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl GeometricQuotient<Circle> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       46       70        0
    //    simd3        0        9        0
    //    simd4       26       23        0
    // Totals...
    // yes simd       72      102        0
    //  no simd      150      189        0
    fn geometric_quotient(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let reverse = Circle::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125
            other.group2() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group2(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (geometric_product[e423] * self[scalar])
                    + (geometric_product[e431] * self[e12])
                    + (geometric_product[e412] * self[e4315])
                    + (geometric_product[e415] * self[e1234])
                    + (geometric_product[e425] * self[e43]),
                (geometric_product[e423] * self[e4125])
                    + (geometric_product[e431] * self[scalar])
                    + (geometric_product[e412] * self[e23])
                    + (geometric_product[e425] * self[e1234])
                    + (geometric_product[e435] * self[e41]),
                (geometric_product[e423] * self[e31])
                    + (geometric_product[e431] * self[e4235])
                    + (geometric_product[e412] * self[scalar])
                    + (geometric_product[e415] * self[e42])
                    + (geometric_product[e435] * self[e1234]),
                -(geometric_product[e415] * self[e23])
                    - (geometric_product[e425] * self[e31])
                    - (geometric_product[e435] * self[e12])
                    - (geometric_product[e321] * self[e45])
                    - (geometric_product[e125] * self[e43]),
            ]) - (Simd32x4::from(geometric_product[e423]) * self.group1().wz().with_zw(self[e4315], self[e15]))
                - (Simd32x4::from(geometric_product[e431]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(geometric_product[e412]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]]))
                - (self.group0().xyzy() * geometric_product.group1().www().with_w(geometric_product[e315]))
                - (self.group0().yzxx() * geometric_product.group1().zxy().with_w(geometric_product[e235])),
            // e415, e425, e435, e321
            Simd32x4::from([
                geometric_product[e321] * self[e4235] * -1.0,
                geometric_product[e321] * self[e4315] * -1.0,
                geometric_product[e321] * self[e4125] * -1.0,
                geometric_product[e321] * self[scalar],
            ]) + (geometric_product.group1().xyxy() * self.group0().ww().with_zw(self[e31], self[e4315]))
                + (geometric_product.group1().yzzz() * self.group1().zx().with_zw(self[scalar], self[e4125]))
                + (self.group0().zx().with_zw(self[e1234], self[e4235]) * geometric_product.group2().yzz().with_w(geometric_product[e415]))
                + (self.group2().zx().with_zw(self[e3215], self[e25]) * geometric_product.group0().yzz().with_w(geometric_product[e431]))
                + (self.group2().ww().with_zw(self[e42], self[e35]) * geometric_product.group2().xyx().with_w(geometric_product[e412]))
                + (self.group3().ww().with_zw(self[e25], self[e15]) * geometric_product.group0().xyx().with_w(geometric_product[e423]))
                - (self.group0().yzxy() * geometric_product.group2().zxy().with_w(geometric_product[e315]))
                - (geometric_product.group0().zxy() * self.group2().yzx()).with_w(geometric_product[e235] * self[e41])
                - (geometric_product.group1().zxy() * self.group1().yzx()).with_w(geometric_product[e125] * self[e43]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (geometric_product[e415] * self[e3215])
                    + (geometric_product[e425] * self[e35])
                    + (geometric_product[e321] * self[e15])
                    + (geometric_product[e235] * self[e45])
                    + (geometric_product[e315] * self[e12])
                    + (geometric_product[e315] * self[e4125]),
                (geometric_product[e425] * self[e3215])
                    + (geometric_product[e435] * self[e15])
                    + (geometric_product[e321] * self[e25])
                    + (geometric_product[e315] * self[e45])
                    + (geometric_product[e125] * self[e23])
                    + (geometric_product[e125] * self[e4235]),
                (geometric_product[e415] * self[e25])
                    + (geometric_product[e435] * self[e3215])
                    + (geometric_product[e321] * self[e35])
                    + (geometric_product[e235] * self[e4315])
                    + (geometric_product[e125] * self[scalar])
                    + (geometric_product[e125] * self[e45]),
                -(geometric_product[e415] * self[e15])
                    - (geometric_product[e425] * self[e25])
                    - (geometric_product[e435] * self[e35])
                    - (geometric_product[e315] * self[e4315])
                    - (geometric_product[e125] * self[e12])
                    - (geometric_product[e125] * self[e4125]),
            ]) + (self.group0().ww().with_zw(self[e31], self[e3215]) * geometric_product.group2().xyx().with_w(geometric_product[e321]))
                - (self.group1().yzxx() * geometric_product.group2().zxy().with_w(geometric_product[e235]))
                - (self.group3().yzxx() * geometric_product.group2().zxy().with_w(geometric_product[e235]))
                - (geometric_product.group1().zxy() * self.group2().yzx()).with_w(geometric_product[e315] * self[e31]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (geometric_product[e435] * self[e4315]) + (geometric_product[e321] * self[e23]),
                (geometric_product[e415] * self[e4125]) + (geometric_product[e321] * self[e31]),
                (geometric_product[e425] * self[e4235]) + (geometric_product[e321] * self[e12]),
                -(geometric_product[e435] * self[e43]) - (geometric_product[e321] * self[e1234]),
            ]) + (self.group0().zx().with_zw(self[e1234], self[e4125]) * geometric_product.group2().yzz().with_w(geometric_product[e412]))
                + (self.group2().ww().with_zw(self[e42], self[e4315]) * geometric_product.group2().xyx().with_w(geometric_product[e431]))
                + (geometric_product.group0().zxy() * self.group2().yzx()).with_w(geometric_product[e423] * self[e4235])
                - (geometric_product.group1().xyxx() * self.group1().ww().with_zw(self[e4315], self[e41]))
                - (geometric_product.group1().yzzy() * self.group3().zx().with_zw(self[e45], self[e42]))
                - (self.group2().zx().with_zw(self[e3215], self[e31]) * geometric_product.group0().yzz().with_w(geometric_product[e431]))
                - (self.group3().ww().with_zw(self[e25], self[e23]) * geometric_product.group0().xyx().with_w(geometric_product[e423]))
                - (geometric_product.group2().zxy() * self.group0().yzx()).with_w(geometric_product[e412] * self[e12]),
        );
    }
}
impl GeometricQuotient<CircleRotor> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       43       64        0
    //    simd3        0       11        0
    //    simd4       31       27        0
    // Totals...
    // yes simd       74      102        0
    //  no simd      167      205        0
    fn geometric_quotient(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let reverse = CircleRotor::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e12345
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - f32::powi(other[e12345], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (geometric_product[e431] * self[e12])
                    + (geometric_product[e412] * self[e4315])
                    + (geometric_product[e415] * self[e1234])
                    + (geometric_product[e425] * self[e43])
                    + (geometric_product[e12345] * self[e41]),
                (geometric_product[e431] * self[scalar])
                    + (geometric_product[e412] * self[e23])
                    + (geometric_product[e425] * self[e1234])
                    + (geometric_product[e435] * self[e41])
                    + (geometric_product[e12345] * self[e42]),
                (geometric_product[e431] * self[e4235])
                    + (geometric_product[e412] * self[scalar])
                    + (geometric_product[e415] * self[e42])
                    + (geometric_product[e435] * self[e1234])
                    + (geometric_product[e12345] * self[e43]),
                -(geometric_product[e435] * self[e12])
                    - (geometric_product[e321] * self[e45])
                    - (geometric_product[e235] * self[e41])
                    - (geometric_product[e315] * self[e42])
                    - (geometric_product[e125] * self[e43]),
            ]) + (Simd32x4::from([self[scalar], self[e4125], self[e31], self[scalar]]) * geometric_product.group0().xxx().with_w(geometric_product[e12345]))
                - (Simd32x4::from(geometric_product[e423]) * self.group1().wz().with_zw(self[e4315], self[e15]))
                - (Simd32x4::from(geometric_product[e431]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(geometric_product[e412]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]]))
                - (geometric_product.group1().zxyx() * self.group0().yzx().with_w(self[e23]))
                - (geometric_product.group1().wwwy() * self.group0().xyz().with_w(self[e31])),
            // e415, e425, e435, e321
            (geometric_product.group1().yzzx() * self.group1().zx().with_zw(self[scalar], self[e4235]))
                + (self.group0().zx().with_zw(self[e1234], self[e4125]) * geometric_product.group2().yzz().with_w(geometric_product[e435]))
                + (self.group0().ww().with_zw(self[e31], self[e35]) * geometric_product.group1().xyx().with_w(geometric_product[e412]))
                + (self.group2().zx().with_zw(self[e3215], self[e25]) * geometric_product.group0().yzz().with_w(geometric_product[e431]))
                + (self.group2().ww().with_zw(self[e42], self[e4315]) * geometric_product.group2().xyx().with_w(geometric_product[e425]))
                + (self.group3().ww().with_zw(self[e25], self[e15]) * geometric_product.group0().xyx().with_w(geometric_product[e423]))
                + (geometric_product.group2().www() * self.group1().xyz()).with_w(geometric_product[e321] * self[scalar])
                - (geometric_product.group2().zxyw() * self.group0().yzx().with_w(self[e45]))
                - (geometric_product.group0().zxy() * self.group2().yzx()).with_w(geometric_product[e235] * self[e41])
                - (geometric_product.group1().zxy() * self.group1().yzx()).with_w(geometric_product[e315] * self[e42])
                - (geometric_product.group1().www() * self.group3().xyz()).with_w(geometric_product[e125] * self[e43]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (geometric_product[e321] * self[e15])
                    + (geometric_product[e235] * self[scalar])
                    + (geometric_product[e235] * self[e45])
                    + (geometric_product[e315] * self[e12])
                    + (geometric_product[e315] * self[e4125])
                    + (geometric_product[e12345] * self[e15]),
                (geometric_product[e321] * self[e25])
                    + (geometric_product[e315] * self[scalar])
                    + (geometric_product[e315] * self[e45])
                    + (geometric_product[e125] * self[e23])
                    + (geometric_product[e125] * self[e4235])
                    + (geometric_product[e12345] * self[e25]),
                (geometric_product[e321] * self[e35])
                    + (geometric_product[e235] * self[e31])
                    + (geometric_product[e235] * self[e4315])
                    + (geometric_product[e125] * self[scalar])
                    + (geometric_product[e125] * self[e45])
                    + (geometric_product[e12345] * self[e35]),
                -(geometric_product[e235] * self[e23])
                    - (geometric_product[e235] * self[e4235])
                    - (geometric_product[e315] * self[e31])
                    - (geometric_product[e315] * self[e4315])
                    - (geometric_product[e125] * self[e12])
                    - (geometric_product[e125] * self[e4125]),
            ]) + (geometric_product.group1().xyxw() * self.group3().ww().with_zw(self[e25], self[e3215]))
                + (self.group2().zx().with_zw(self[e3215], self[e3215]) * geometric_product.group1().yzz().with_w(geometric_product[e12345]))
                - (geometric_product.group1().zxyx() * self.group2().yzxx())
                - (geometric_product.group2().zxy() * self.group1().yzx()).with_w(geometric_product[e425] * self[e25])
                - (geometric_product.group2().zxy() * self.group3().yzx()).with_w(geometric_product[e435] * self[e35]),
            // e1, e2, e3, e4
            Simd32x4::from([
                geometric_product[e315] * self[e43],
                geometric_product[e125] * self[e41],
                geometric_product[e125] * self[e1234],
                geometric_product[e321] * self[e1234] * -1.0,
            ]) + (geometric_product.group2().xyxw() * self.group2().ww().with_zw(self[e42], self[e1234]))
                + (self.group3().yzxy() * geometric_product.group1().zxy().with_w(geometric_product[e431]))
                + (geometric_product.group0().zxy() * self.group2().yzx()).with_w(geometric_product[e423] * self[e4235])
                + (geometric_product.group1().www() * self.group1().xyz()).with_w(geometric_product[e412] * self[e4125])
                - (geometric_product.group1().yzzx() * self.group3().zx().with_zw(self[e45], self[e41]))
                - (self.group0().yzxy() * geometric_product.group2().zxy().with_w(geometric_product[e425]))
                - (self.group1().ww().with_zw(self[e4315], self[e12]) * geometric_product.group1().xyx().with_w(geometric_product[e412]))
                - (self.group2().zx().with_zw(self[e3215], self[e31]) * geometric_product.group0().yzz().with_w(geometric_product[e431]))
                - (self.group3().ww().with_zw(self[e25], self[e23]) * geometric_product.group0().xyx().with_w(geometric_product[e423]))
                - (geometric_product.group2().www() * self.group3().xyz()).with_w(geometric_product[e435] * self[e43]),
        );
    }
}
impl GeometricQuotient<Dipole> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       54       75        0
    //    simd3        0        9        0
    //    simd4       24       21        0
    // Totals...
    // yes simd       78      105        0
    //  no simd      150      186        0
    fn geometric_quotient(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let reverse = Dipole::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35
            other.group2() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2),
        );
        let geometric_product = Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35
            Simd32x3::from(other_2[scalar]) * reverse.group2(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (geometric_product[e42] * self[e12])
                    + (geometric_product[e43] * self[e4315])
                    + (geometric_product[e23] * self[e1234])
                    + (geometric_product[e31] * self[e43])
                    + (geometric_product[e45] * self[e41]),
                (geometric_product[e42] * self[scalar])
                    + (geometric_product[e43] * self[e23])
                    + (geometric_product[e31] * self[e1234])
                    + (geometric_product[e12] * self[e41])
                    + (geometric_product[e45] * self[e42]),
                (geometric_product[e42] * self[e4235])
                    + (geometric_product[e43] * self[scalar])
                    + (geometric_product[e23] * self[e42])
                    + (geometric_product[e12] * self[e1234])
                    + (geometric_product[e45] * self[e43]),
                -(geometric_product[e23] * self[e23])
                    - (geometric_product[e31] * self[e31])
                    - (geometric_product[e12] * self[e12])
                    - (geometric_product[e25] * self[e42])
                    - (geometric_product[e35] * self[e43]),
            ]) + (Simd32x4::from([self[scalar], self[e4125], self[e31], self[e45]]) * geometric_product.group0().xxx().with_w(geometric_product[e45]))
                - (Simd32x4::from(geometric_product[e41]) * self.group1().wz().with_zw(self[e4315], self[e15]))
                - (Simd32x4::from(geometric_product[e42]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(geometric_product[e43]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]]))
                - (self.group0().yzxx() * geometric_product.group1().zxy().with_w(geometric_product[e15])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (geometric_product[e23] * self[scalar]) + (geometric_product[e31] * self[e12]) + (geometric_product[e45] * self[e4235]),
                (geometric_product[e31] * self[scalar]) + (geometric_product[e12] * self[e23]) + (geometric_product[e45] * self[e4315]),
                (geometric_product[e23] * self[e31]) + (geometric_product[e12] * self[scalar]) + (geometric_product[e45] * self[e4125]),
                -(geometric_product[e23] * self[e4235]) - (geometric_product[e31] * self[e4315]) - (geometric_product[e12] * self[e4125]),
            ]) + (self.group0().zx().with_zw(self[e1234], self[scalar]) * geometric_product.group2().yzz().with_w(geometric_product[e45]))
                + (self.group2().zx().with_zw(self[e3215], self[e42]) * geometric_product.group0().yzz().with_w(geometric_product[e25]))
                + (self.group2().ww().with_zw(self[e42], self[e43]) * geometric_product.group2().xyx().with_w(geometric_product[e35]))
                + (self.group3().ww().with_zw(self[e25], self[e41]) * geometric_product.group0().xyx().with_w(geometric_product[e15]))
                - (self.group2().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e41]))
                - (geometric_product.group2().zxy() * self.group0().yzx()).with_w(geometric_product[e42] * self[e25])
                - (geometric_product.group1().zxy() * self.group1().yzx()).with_w(geometric_product[e43] * self[e35]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (geometric_product[e23] * self[e3215]) + (geometric_product[e31] * self[e35]),
                (geometric_product[e31] * self[e3215]) + (geometric_product[e12] * self[e15]),
                (geometric_product[e23] * self[e25]) + (geometric_product[e12] * self[e3215]),
                -(geometric_product[e31] * self[e42]) - (geometric_product[e12] * self[e43]),
            ]) + (self.group0().ww().with_zw(self[e31], self[e4235]) * geometric_product.group2().xyx().with_w(geometric_product[e41]))
                + (self.group1().zx().with_zw(self[scalar], self[e4125]) * geometric_product.group2().yzz().with_w(geometric_product[e43]))
                + (self.group1().ww().with_zw(self[e4315], self[e4315]) * geometric_product.group2().xyx().with_w(geometric_product[e42]))
                + (self.group3().zx().with_zw(self[e45], self[e1234]) * geometric_product.group2().yzz().with_w(geometric_product[e45]))
                - (geometric_product.group1().wwwx() * self.group2().xyz().with_w(self[e41]))
                - (self.group1().yzxx() * geometric_product.group2().zxy().with_w(geometric_product[e41]))
                - (geometric_product.group2().zxy() * self.group3().yzx()).with_w(geometric_product[e42] * self[e31])
                - (geometric_product.group1().zxy() * self.group2().yzx()).with_w(geometric_product[e43] * self[e12]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (geometric_product[e41] * self[e3215])
                    + (geometric_product[e42] * self[e35])
                    + (geometric_product[e23] * self[e45])
                    + (geometric_product[e31] * self[e4125])
                    + (geometric_product[e45] * self[e23])
                    + (geometric_product[e35] * self[e42]),
                (geometric_product[e42] * self[e3215])
                    + (geometric_product[e43] * self[e15])
                    + (geometric_product[e31] * self[e45])
                    + (geometric_product[e12] * self[e4235])
                    + (geometric_product[e45] * self[e31])
                    + (geometric_product[e15] * self[e43]),
                (geometric_product[e41] * self[e25])
                    + (geometric_product[e43] * self[e3215])
                    + (geometric_product[e23] * self[e4315])
                    + (geometric_product[e12] * self[e45])
                    + (geometric_product[e45] * self[e12])
                    + (geometric_product[e25] * self[e41]),
                -(geometric_product[e23] * self[e15])
                    - (geometric_product[e31] * self[e25])
                    - (geometric_product[e12] * self[e35])
                    - (geometric_product[e45] * self[e3215])
                    - (geometric_product[e35] * self[e12])
                    - (geometric_product[e35] * self[e4125]),
            ]) - (self.group3().yzxy() * geometric_product.group1().zxy().with_w(geometric_product[e25]))
                - (self.group0().zx().with_zw(self[e1234], self[e31]) * geometric_product.group2().yzz().with_w(geometric_product[e25]))
                - (self.group2().ww().with_zw(self[e42], self[e4235]) * geometric_product.group2().xyx().with_w(geometric_product[e15]))
                - (geometric_product.group0().zxy() * self.group2().yzx()).with_w(geometric_product[e15] * self[e23]),
        );
    }
}
impl GeometricQuotient<DipoleInversion> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       74       96        0
    //    simd3        0       10        0
    //    simd4       40       37        0
    // Totals...
    // yes simd      114      143        0
    //  no simd      234      274        0
    fn geometric_quotient(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let reverse = DipoleInversion::from_groups(
            // e41, e42, e43
            other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + 2.0 * (other[e1234] * other[e3215])
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2),
        );
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (geometric_product[e23] * self[e1234])
                    + (geometric_product[e31] * self[e43])
                    + (geometric_product[e45] * self[e41])
                    + (geometric_product[e1234] * self[e23])
                    + (geometric_product[e4235] * self[e1234])
                    + (geometric_product[e4315] * self[e43]),
                (geometric_product[e31] * self[e1234])
                    + (geometric_product[e12] * self[e41])
                    + (geometric_product[e45] * self[e42])
                    + (geometric_product[e1234] * self[e31])
                    + (geometric_product[e4315] * self[e1234])
                    + (geometric_product[e4125] * self[e41]),
                (geometric_product[e23] * self[e42])
                    + (geometric_product[e12] * self[e1234])
                    + (geometric_product[e45] * self[e43])
                    + (geometric_product[e1234] * self[e12])
                    + (geometric_product[e4235] * self[e42])
                    + (geometric_product[e4125] * self[e1234]),
                -(geometric_product[e15] * self[e41])
                    - (geometric_product[e25] * self[e42])
                    - (geometric_product[e35] * self[e43])
                    - (geometric_product[e4235] * self[e4235])
                    - (geometric_product[e4315] * self[e4315])
                    - (geometric_product[e4125] * self[e4125]),
            ]) + (Simd32x4::from([self[scalar], self[e4125], self[e31], self[e45]]) * geometric_product.group0().xxx().with_w(geometric_product[e45]))
                + (Simd32x4::from([self[e12], self[scalar], self[e4235], self[e3215]]) * geometric_product.group0().yyy().with_w(geometric_product[e1234]))
                + (Simd32x4::from([self[e4315], self[e23], self[scalar], self[e1234]]) * geometric_product.group0().zzz().with_w(geometric_product[e3215]))
                - (Simd32x4::from(geometric_product[e41]) * self.group1().wz().with_zw(self[e4315], self[e15]))
                - (Simd32x4::from(geometric_product[e42]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(geometric_product[e43]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]]))
                - (geometric_product.group1().zxyx() * self.group0().yzx().with_w(self[e23]))
                - (geometric_product.group2().www() * self.group3().xyz()).with_w(geometric_product[e31] * self[e31])
                - (geometric_product.group3().zxy() * self.group0().yzx()).with_w(geometric_product[e12] * self[e12]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (geometric_product[e15] * self[e1234])
                    + (geometric_product[e25] * self[e43])
                    + (geometric_product[e1234] * self[e15])
                    + (geometric_product[e4235] * self[e45])
                    + (geometric_product[e4315] * self[e4125])
                    + (geometric_product[e3215] * self[e41]),
                (geometric_product[e25] * self[e1234])
                    + (geometric_product[e35] * self[e41])
                    + (geometric_product[e1234] * self[e25])
                    + (geometric_product[e4315] * self[e45])
                    + (geometric_product[e4125] * self[e4235])
                    + (geometric_product[e3215] * self[e42]),
                (geometric_product[e15] * self[e42])
                    + (geometric_product[e35] * self[e1234])
                    + (geometric_product[e1234] * self[e35])
                    + (geometric_product[e4235] * self[e4315])
                    + (geometric_product[e4125] * self[e45])
                    + (geometric_product[e3215] * self[e43]),
                -(geometric_product[e31] * self[e4315])
                    - (geometric_product[e12] * self[e4125])
                    - (geometric_product[e4235] * self[e23])
                    - (geometric_product[e4315] * self[e31])
                    - (geometric_product[e4125] * self[e12])
                    - (geometric_product[e3215] * self[e1234]),
            ]) + (self.group3() * geometric_product.group1().www().with_w(geometric_product[e1234]))
                + (self.group0().ww().with_zw(self[e31], self[e42]) * geometric_product.group1().xyx().with_w(geometric_product[e25]))
                + (self.group1().zx().with_zw(self[scalar], self[e43]) * geometric_product.group1().yzz().with_w(geometric_product[e35]))
                + (self.group2().zx().with_zw(self[e3215], self[e41]) * geometric_product.group0().yzz().with_w(geometric_product[e15]))
                + (self.group3().ww().with_zw(self[e25], self[scalar]) * geometric_product.group0().xyx().with_w(geometric_product[e45]))
                - (self.group2().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e41]))
                - (self.group3().yzxx() * geometric_product.group3().zxy().with_w(geometric_product[e23]))
                - (geometric_product.group1().zxy() * self.group1().yzx()).with_w(geometric_product[e42] * self[e25])
                - (geometric_product.group2().zxy() * self.group0().yzx()).with_w(geometric_product[e43] * self[e35]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (geometric_product[e25] * self[e4125]) + (geometric_product[e4125] * self[e25]) + (geometric_product[e3215] * self[e23]) + (geometric_product[e3215] * self[e4235]),
                (geometric_product[e35] * self[e4235]) + (geometric_product[e4235] * self[e35]) + (geometric_product[e3215] * self[e31]) + (geometric_product[e3215] * self[e4315]),
                (geometric_product[e35] * self[e45]) + (geometric_product[e4315] * self[e15]) + (geometric_product[e3215] * self[e12]) + (geometric_product[e3215] * self[e4125]),
                -(geometric_product[e1234] * self[e45]) - (geometric_product[e4235] * self[e41]) - (geometric_product[e4315] * self[e42]) - (geometric_product[e4125] * self[e43]),
            ]) + (geometric_product.group2().yzzw() * self.group1().zx().with_zw(self[scalar], self[scalar]))
                + (self.group0().ww().with_zw(self[e31], self[e4125]) * geometric_product.group2().xyx().with_w(geometric_product[e43]))
                + (self.group1().ww().with_zw(self[e4315], self[e1234]) * geometric_product.group2().xyx().with_w(geometric_product[e45]))
                + (self.group2().zx().with_zw(self[e3215], self[e4315]) * geometric_product.group1().yzz().with_w(geometric_product[e42]))
                + (self.group3().ww().with_zw(self[e25], self[e4235]) * geometric_product.group1().xyx().with_w(geometric_product[e41]))
                - (self.group1().yzxz() * geometric_product.group2().zxy().with_w(geometric_product[e43]))
                - (self.group2().zx().with_zw(self[e3215], self[e43]) * geometric_product.group3().yzz().with_w(geometric_product[e12]))
                - (self.group3().ww().with_zw(self[e25], self[e42]) * geometric_product.group3().xyx().with_w(geometric_product[e31]))
                - (geometric_product.group1().zxy() * self.group2().yzx()).with_w(geometric_product[e41] * self[e23])
                - (geometric_product.group1().www() * self.group2().xyz()).with_w(geometric_product[e42] * self[e31])
                - (geometric_product.group2().zxy() * self.group3().yzx()).with_w(geometric_product[e23] * self[e41]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (geometric_product[e35] * self[e42]) + (geometric_product[e1234] * self[e15]) + (geometric_product[e4235] * self[scalar]) + (geometric_product[e4315] * self[e12]),
                (geometric_product[e15] * self[e43]) + (geometric_product[e1234] * self[e25]) + (geometric_product[e4315] * self[scalar]) + (geometric_product[e4125] * self[e23]),
                (geometric_product[e25] * self[e41]) + (geometric_product[e1234] * self[e35]) + (geometric_product[e4235] * self[e31]) + (geometric_product[e4125] * self[scalar]),
                -(geometric_product[e25] * self[e31]) - (geometric_product[e25] * self[e4315]) - (geometric_product[e35] * self[e12]) - (geometric_product[e35] * self[e4125]),
            ]) + (self.group1() * geometric_product.group1().www().with_w(geometric_product[e3215]))
                + (self.group1().ww().with_zw(self[e4315], self[e35]) * geometric_product.group1().xyx().with_w(geometric_product[e4125]))
                + (self.group2().zx().with_zw(self[e3215], self[e25]) * geometric_product.group0().yzz().with_w(geometric_product[e4315]))
                + (self.group3().zx().with_zw(self[e45], self[scalar]) * geometric_product.group1().yzz().with_w(geometric_product[e3215]))
                + (self.group3().ww().with_zw(self[e25], self[e15]) * geometric_product.group0().xyx().with_w(geometric_product[e4235]))
                - (geometric_product.group1().zxyy() * self.group3().yzx().with_w(self[e25]))
                - (self.group1().yzxx() * geometric_product.group3().zxy().with_w(geometric_product[e15]))
                - (self.group2().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e23]))
                - (self.group0().zx().with_zw(self[e1234], self[e3215]) * geometric_product.group2().yzz().with_w(geometric_product[e45]))
                - (self.group2().ww().with_zw(self[e42], self[e35]) * geometric_product.group2().xyx().with_w(geometric_product[e12]))
                - (geometric_product.group3().www() * self.group0().xyz()).with_w(geometric_product[e15] * self[e4235]),
        );
    }
}
impl GeometricQuotient<DualNum> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        9        0
    //    simd2        0        1        0
    //    simd3        1        2        0
    //    simd4        3        5        0
    // Totals...
    // yes simd        5       17        0
    //  no simd       16       37        0
    fn geometric_quotient(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DualNum::from_groups(/* e5, e12345 */ Simd32x2::from(f32::powi(other[e12345], -2) * -1.0) * other.group0());
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            geometric_product
                .group0()
                .yy()
                .with_zw(geometric_product[e12345], (geometric_product[e5] * self[e1234]) + (geometric_product[e12345] * self[scalar]))
                * self.group0().xyz().with_w(1.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                geometric_product[e12345] * self[e23],
                geometric_product[e12345] * self[e31],
                geometric_product[e12345] * self[e12],
                geometric_product[e12345] * self[e45] * -1.0,
            ]) + (Simd32x4::from(geometric_product[e5]) * self.group0().xyz().with_w(self[e1234])),
            // e235, e315, e125, e5
            (Simd32x4::from(geometric_product[e5]) * self.group1().xyz().with_w(self[scalar]))
                + (Simd32x4::from(geometric_product[e5]) * self.group3().xyz().with_w(self[e45]))
                + (Simd32x4::from(geometric_product[e12345]) * self.group2().xyz().with_w(self[e3215])),
            // e1, e2, e3, e4
            ((Simd32x3::from(geometric_product[e5]) * self.group0().xyz()) - (Simd32x3::from(geometric_product[e12345]) * self.group3().xyz()))
                .with_w(geometric_product[e12345] * self[e1234]),
        );
    }
}
impl GeometricQuotient<FlatPoint> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       28        0
    //    simd3        6        8        0
    //    simd4        5        6        0
    // Totals...
    // yes simd       21       42        0
    //  no simd       48       76        0
    fn geometric_quotient(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = FlatPoint::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(f32::powi(other[e45], -2) * -1.0) * Simd32x4::from([other[e15] * -1.0, other[e25] * -1.0, other[e35] * -1.0, other[e45] * -1.0]),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (geometric_product.group0().www() * self.group0().xyz())
                .with_w((geometric_product[e45] * self[e45]) - (geometric_product[e15] * self[e41]) - (geometric_product[e25] * self[e42]) - (geometric_product[e35] * self[e43])),
            // e23, e31, e12, e45
            Simd32x4::from([
                geometric_product[e35] * self[e42] * -1.0,
                geometric_product[e15] * self[e43] * -1.0,
                geometric_product[e25] * self[e41] * -1.0,
                geometric_product[e45] * self[scalar],
            ]) + (geometric_product.group0().xyxx() * self.group2().ww().with_zw(self[e42], self[e41]))
                + (geometric_product.group0().yzzy() * self.group0().zx().with_zw(self[e1234], self[e42]))
                + (geometric_product.group0().wwwz() * self.group3().xyz().with_w(self[e43])),
            // e15, e25, e35, e1234
            ((Simd32x3::from([self[scalar], self[scalar], self[e31]]) * geometric_product.group0().xyx())
                + (Simd32x3::from([self[e12], self[e23], self[scalar]]) * geometric_product.group0().yzz())
                + (Simd32x3::from([self[e45], self[e45], self[e4315]]) * geometric_product.group0().xyx())
                + (Simd32x3::from([self[e4125], self[e4235], self[e45]]) * geometric_product.group0().yzz())
                - (Simd32x3::from(geometric_product[e45]) * self.group2().xyz())
                - (geometric_product.group0().zxy() * self.group1().yzx())
                - (geometric_product.group0().zxy() * self.group3().yzx()))
            .with_w(geometric_product[e45] * self[e1234]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (geometric_product[e35] * self[e42]) + (geometric_product[e45] * self[e23]),
                (geometric_product[e15] * self[e43]) + (geometric_product[e45] * self[e31]),
                (geometric_product[e25] * self[e41]) + (geometric_product[e45] * self[e12]),
                -(geometric_product[e25] * self[e31])
                    - (geometric_product[e25] * self[e4315])
                    - (geometric_product[e35] * self[e12])
                    - (geometric_product[e35] * self[e4125])
                    - (geometric_product[e45] * self[e3215]),
            ]) - (geometric_product.group0().xyxx() * self.group2().ww().with_zw(self[e42], self[e23]))
                - (geometric_product.group0().yzzx() * self.group0().zx().with_zw(self[e1234], self[e4235])),
        );
    }
}
impl GeometricQuotient<Flector> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       35       51        0
    //    simd3        0        7        0
    //    simd4       21       17        0
    // Totals...
    // yes simd       56       75        0
    //  no simd      119      140        0
    fn geometric_quotient(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let reverse = Flector::from_groups(
            // e15, e25, e35, e45
            other.group0() * Simd32x4::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group1(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            -f32::powi(other[e45], 2) - f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2),
        );
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                geometric_product[e4315] * self[e43],
                geometric_product[e4125] * self[e41],
                geometric_product[e4125] * self[e1234],
                -(geometric_product[e25] * self[e42])
                    - (geometric_product[e35] * self[e43])
                    - (geometric_product[e4235] * self[e4235])
                    - (geometric_product[e4315] * self[e4315])
                    - (geometric_product[e4125] * self[e4125]),
            ]) + (Simd32x4::from(geometric_product[e45]) * self.group0().xyz().with_w(self[e45]))
                + (geometric_product.group1().xyxw() * self.group2().ww().with_zw(self[e42], self[e1234]))
                - (self.group0().yzxx() * geometric_product.group1().zxy().with_w(geometric_product[e15])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (geometric_product[e4315] * self[e4125]) + (geometric_product[e3215] * self[e41]),
                (geometric_product[e4125] * self[e4235]) + (geometric_product[e3215] * self[e42]),
                (geometric_product[e4125] * self[e45]) + (geometric_product[e3215] * self[e43]),
                -(geometric_product[e4125] * self[e12]) - (geometric_product[e3215] * self[e1234]),
            ]) + (geometric_product.group0().xyxx() * self.group2().ww().with_zw(self[e42], self[e41]))
                + (geometric_product.group0().yzzy() * self.group0().zx().with_zw(self[e1234], self[e42]))
                + (geometric_product.group0().wwwz() * self.group3().xyz().with_w(self[e43]))
                + (self.group1().ww().with_zw(self[e4315], self[scalar]) * geometric_product.group1().xyx().with_w(geometric_product[e45]))
                - (geometric_product.group1().zxyy() * self.group3().yzx().with_w(self[e31]))
                - (geometric_product.group0().zxy() * self.group0().yzx()).with_w(geometric_product[e4235] * self[e23]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (geometric_product[e15] * self[e45])
                    + (geometric_product[e25] * self[e12])
                    + (geometric_product[e25] * self[e4125])
                    + (geometric_product[e4125] * self[e25])
                    + (geometric_product[e3215] * self[e23])
                    + (geometric_product[e3215] * self[e4235])
                    - (geometric_product[e4235] * self[e3215])
                    - (geometric_product[e4315] * self[e35]),
                (geometric_product[e25] * self[e45])
                    + (geometric_product[e35] * self[e23])
                    + (geometric_product[e35] * self[e4235])
                    + (geometric_product[e4235] * self[e35])
                    + (geometric_product[e3215] * self[e31])
                    + (geometric_product[e3215] * self[e4315])
                    - (geometric_product[e4315] * self[e3215])
                    - (geometric_product[e4125] * self[e15]),
                (geometric_product[e15] * self[e4315])
                    + (geometric_product[e35] * self[scalar])
                    + (geometric_product[e35] * self[e45])
                    + (geometric_product[e4315] * self[e15])
                    + (geometric_product[e3215] * self[e12])
                    + (geometric_product[e3215] * self[e4125])
                    - (geometric_product[e4235] * self[e25])
                    - (geometric_product[e4125] * self[e3215]),
                0.0,
            ]) + (geometric_product.group0().xyxw() * self.group0().ww().with_zw(self[e31], self[e1234]))
                - (geometric_product.group0().zxy() * self.group1().yzx()).with_w(geometric_product[e4235] * self[e41])
                - (geometric_product.group0().zxy() * self.group3().yzx()).with_w(geometric_product[e4315] * self[e42])
                - (geometric_product.group0().www() * self.group2().xyz()).with_w(geometric_product[e4125] * self[e43]),
            // e4235, e4315, e4125, e3215
            (geometric_product.group1().xyxz() * self.group0().ww().with_zw(self[e31], self[e35]))
                + (geometric_product.group1().yzzw() * self.group1().zx().with_zw(self[scalar], self[scalar]))
                + Simd32x3::from(0.0).with_w(
                    (geometric_product[e3215] * self[e45]) - (geometric_product[e35] * self[e12]) - (geometric_product[e35] * self[e4125]) - (geometric_product[e45] * self[e3215]),
                )
                + (geometric_product.group0().zxy() * self.group0().yzx()).with_w(geometric_product[e4235] * self[e15])
                + (geometric_product.group0().www() * self.group1().xyz()).with_w(geometric_product[e4315] * self[e25])
                - (geometric_product.group0().xyxx() * self.group2().ww().with_zw(self[e42], self[e23]))
                - (geometric_product.group0().yzzx() * self.group0().zx().with_zw(self[e1234], self[e4235]))
                - (self.group1().yzxy() * geometric_product.group1().zxy().with_w(geometric_product[e25]))
                - (geometric_product.group1().www() * self.group0().xyz()).with_w(geometric_product[e25] * self[e4315]),
        );
    }
}
impl GeometricQuotient<Line> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       35       53        0
    //    simd3        0        8        0
    //    simd4       12        8        0
    // Totals...
    // yes simd       47       69        0
    //  no simd       83      109        0
    fn geometric_quotient(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let reverse = Line::from_groups(
            // e415, e425, e435
            other.group0() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group1() * Simd32x3::from(-1.0),
        );
        let other_2 = Scalar::from_groups(/* scalar */ -f32::powi(other[e415], 2) - f32::powi(other[e425], 2) - f32::powi(other[e435], 2));
        let geometric_product = Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(other_2[scalar]) * reverse.group0(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group1(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (geometric_product[e415] * self[e1234]) + (geometric_product[e425] * self[e43]),
                (geometric_product[e425] * self[e1234]) + (geometric_product[e435] * self[e41]),
                (geometric_product[e415] * self[e42]) + (geometric_product[e435] * self[e1234]),
                -(geometric_product[e425] * self[e31])
                    - (geometric_product[e435] * self[e12])
                    - (geometric_product[e235] * self[e41])
                    - (geometric_product[e315] * self[e42])
                    - (geometric_product[e125] * self[e43]),
            ]) - (geometric_product.group0().zxy() * self.group0().yzx()).with_w(geometric_product[e415] * self[e23]),
            // e415, e425, e435, e321
            Simd32x4::from([
                geometric_product[e315] * self[e43],
                geometric_product[e125] * self[e41],
                geometric_product[e125] * self[e1234],
                geometric_product[e125] * self[e43] * -1.0,
            ]) + (self.group0().ww().with_zw(self[e31], self[e4235]) * geometric_product.group0().xyx().with_w(geometric_product[e415]))
                + (self.group1().zx().with_zw(self[scalar], self[e4315]) * geometric_product.group0().yzz().with_w(geometric_product[e425]))
                + (self.group2().ww().with_zw(self[e42], self[e4125]) * geometric_product.group1().xyx().with_w(geometric_product[e435]))
                - (self.group0().yzxy() * geometric_product.group1().zxy().with_w(geometric_product[e315]))
                - (geometric_product.group0().zxy() * self.group1().yzx()).with_w(geometric_product[e235] * self[e41]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (geometric_product[e415] * self[e3215])
                    + (geometric_product[e425] * self[e35])
                    + (geometric_product[e235] * self[scalar])
                    + (geometric_product[e235] * self[e45])
                    + (geometric_product[e315] * self[e12])
                    + (geometric_product[e315] * self[e4125]),
                (geometric_product[e425] * self[e3215])
                    + (geometric_product[e435] * self[e15])
                    + (geometric_product[e315] * self[scalar])
                    + (geometric_product[e315] * self[e45])
                    + (geometric_product[e125] * self[e23])
                    + (geometric_product[e125] * self[e4235]),
                (geometric_product[e415] * self[e25])
                    + (geometric_product[e435] * self[e3215])
                    + (geometric_product[e235] * self[e31])
                    + (geometric_product[e235] * self[e4315])
                    + (geometric_product[e125] * self[scalar])
                    + (geometric_product[e125] * self[e45]),
                -(geometric_product[e235] * self[e23])
                    - (geometric_product[e235] * self[e4235])
                    - (geometric_product[e315] * self[e31])
                    - (geometric_product[e315] * self[e4315])
                    - (geometric_product[e125] * self[e12])
                    - (geometric_product[e125] * self[e4125]),
            ]) - (self.group2().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e415]))
                - (geometric_product.group1().zxy() * self.group1().yzx()).with_w(geometric_product[e425] * self[e25])
                - (geometric_product.group1().zxy() * self.group3().yzx()).with_w(geometric_product[e435] * self[e35]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (geometric_product[e435] * self[e4315]) + (geometric_product[e235] * self[e1234]) + (geometric_product[e315] * self[e43]),
                (geometric_product[e415] * self[e4125]) + (geometric_product[e315] * self[e1234]) + (geometric_product[e125] * self[e41]),
                (geometric_product[e425] * self[e4235]) + (geometric_product[e235] * self[e42]) + (geometric_product[e125] * self[e1234]),
                0.0,
            ]) - (self.group0().yzxz() * geometric_product.group1().zxy().with_w(geometric_product[e435]))
                - (self.group1().ww().with_zw(self[e4315], self[e41]) * geometric_product.group0().xyx().with_w(geometric_product[e415]))
                - (self.group3().zx().with_zw(self[e45], self[e42]) * geometric_product.group0().yzz().with_w(geometric_product[e425])),
        );
    }
}
impl GeometricQuotient<Motor> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       55        0
    //    simd3        0        3        0
    //    simd4       19       20        0
    // Totals...
    // yes simd       59       78        0
    //  no simd      116      144        0
    fn geometric_quotient(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let reverse = Motor::from_groups(
            // e415, e425, e435, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            -f32::powi(other[e415], 2) - f32::powi(other[e425], 2) - f32::powi(other[e435], 2) - f32::powi(other[e12345], 2),
        );
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e235, e315, e125, e5
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                geometric_product[e12345] * self[e41],
                geometric_product[e12345] * self[e42],
                geometric_product[e12345] * self[e43],
                -(geometric_product[e425] * self[e31])
                    - (geometric_product[e435] * self[e12])
                    - (geometric_product[e235] * self[e41])
                    - (geometric_product[e315] * self[e42])
                    - (geometric_product[e125] * self[e43]),
            ]) + (geometric_product.group0().xyxw() * self.group2().ww().with_zw(self[e42], self[scalar]))
                + (self.group0().zx().with_zw(self[e1234], self[e1234]) * geometric_product.group0().yzz().with_w(geometric_product[e5]))
                - (geometric_product.group0().zxyx() * self.group0().yzx().with_w(self[e23])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (geometric_product[e315] * self[e43]) + (geometric_product[e5] * self[e41]),
                (geometric_product[e125] * self[e41]) + (geometric_product[e5] * self[e42]),
                (geometric_product[e125] * self[e1234]) + (geometric_product[e5] * self[e43]),
                -(geometric_product[e315] * self[e42]) - (geometric_product[e125] * self[e43]),
            ]) + (geometric_product.group0().xyxx() * self.group0().ww().with_zw(self[e31], self[e4235]))
                + (geometric_product.group0().yzzy() * self.group1().zx().with_zw(self[scalar], self[e4315]))
                + (geometric_product.group0().wwwz() * self.group1().xyz().with_w(self[e4125]))
                + (geometric_product.group1().xyxw() * self.group2().ww().with_zw(self[e42], self[e1234]))
                - (geometric_product.group0().zxyw() * self.group1().yzxw())
                - (geometric_product.group1().zxyx() * self.group0().yzxx()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (geometric_product[e235] * self[scalar])
                    + (geometric_product[e235] * self[e45])
                    + (geometric_product[e315] * self[e12])
                    + (geometric_product[e315] * self[e4125])
                    + (geometric_product[e5] * self[e23])
                    + (geometric_product[e5] * self[e4235]),
                (geometric_product[e315] * self[scalar])
                    + (geometric_product[e315] * self[e45])
                    + (geometric_product[e125] * self[e23])
                    + (geometric_product[e125] * self[e4235])
                    + (geometric_product[e5] * self[e31])
                    + (geometric_product[e5] * self[e4315]),
                (geometric_product[e235] * self[e31])
                    + (geometric_product[e235] * self[e4315])
                    + (geometric_product[e125] * self[scalar])
                    + (geometric_product[e125] * self[e45])
                    + (geometric_product[e5] * self[e12])
                    + (geometric_product[e5] * self[e4125]),
                -(geometric_product[e235] * self[e23])
                    - (geometric_product[e235] * self[e4235])
                    - (geometric_product[e315] * self[e31])
                    - (geometric_product[e315] * self[e4315])
                    - (geometric_product[e125] * self[e12])
                    - (geometric_product[e125] * self[e4125]),
            ]) + (geometric_product.group0().xyxw() * self.group3().ww().with_zw(self[e25], self[e3215]))
                + (self.group2().zx().with_zw(self[e3215], self[scalar]) * geometric_product.group0().yzz().with_w(geometric_product[e5]))
                + (geometric_product.group0().www() * self.group2().xyz()).with_w(geometric_product[e5] * self[e45])
                - (geometric_product.group0().zxyx() * self.group2().yzxx())
                - (geometric_product.group1().zxy() * self.group1().yzx()).with_w(geometric_product[e425] * self[e25])
                - (geometric_product.group1().zxy() * self.group3().yzx()).with_w(geometric_product[e435] * self[e35]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (geometric_product[e235] * self[e1234]) + (geometric_product[e315] * self[e43]) + (geometric_product[e5] * self[e41]) - (geometric_product[e125] * self[e42]),
                (geometric_product[e315] * self[e1234]) + (geometric_product[e125] * self[e41]) + (geometric_product[e5] * self[e42]) - (geometric_product[e235] * self[e43]),
                (geometric_product[e235] * self[e42]) + (geometric_product[e125] * self[e1234]) + (geometric_product[e5] * self[e43]) - (geometric_product[e315] * self[e41]),
                0.0,
            ]) + (geometric_product.group0().zxyw() * self.group3().yzx().with_w(self[e1234]))
                - (geometric_product.group0().xyxx() * self.group1().ww().with_zw(self[e4315], self[e41]))
                - (geometric_product.group0().yzzy() * self.group3().zx().with_zw(self[e45], self[e42]))
                - (geometric_product.group0().wwwz() * self.group3().xyz().with_w(self[e43])),
        );
    }
}
impl GeometricQuotient<MultiVector> for VersorOdd {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       87      114        0
    //    simd2       12       13        0
    //    simd3       60       88        0
    //    simd4       53       44        0
    // Totals...
    // yes simd      212      259        0
    //  no simd      503      580        0
    fn geometric_quotient(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let reverse = MultiVector::from_groups(
            // scalar, e12345
            other.group0(),
            // e1, e2, e3, e4
            other.group1(),
            // e5
            other[e5],
            // e15, e25, e35, e45
            other.group3() * Simd32x4::from(-1.0),
            // e41, e42, e43
            other.group4() * Simd32x3::from(-1.0),
            // e23, e31, e12
            other.group5() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group6() * Simd32x4::from(-1.0),
            // e423, e431, e412
            other.group7() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group8() * Simd32x3::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group9(),
            // e1234
            other[e1234],
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e15] * other[e41])
                + 2.0 * (other[e25] * other[e42])
                + 2.0 * (other[e35] * other[e43])
                + 2.0 * (other[e3215] * other[e1234])
                + f32::powi(other[scalar], 2)
                + f32::powi(other[e1], 2)
                + f32::powi(other[e2], 2)
                + f32::powi(other[e3], 2)
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                + f32::powi(other[e321], 2)
                - f32::powi(other[e12345], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2)
                - 2.0 * (other[e4] * other[e5])
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125]),
        );
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(other_2[scalar]) * reverse.group0(),
            // e1, e2, e3, e4
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e5
            reverse[e5] * other_2[scalar],
            // e15, e25, e35, e45
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
            // e41, e42, e43
            Simd32x3::from(other_2[scalar]) * reverse.group4(),
            // e23, e31, e12
            Simd32x3::from(other_2[scalar]) * reverse.group5(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group6(),
            // e423, e431, e412
            Simd32x3::from(other_2[scalar]) * reverse.group7(),
            // e235, e315, e125
            Simd32x3::from(other_2[scalar]) * reverse.group8(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group9(),
            // e1234
            reverse[e1234] * other_2[scalar],
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (geometric_product[e45] * self[e45])
                    - (geometric_product[e4235] * self[e4235])
                    - (geometric_product[e4315] * self[e4315])
                    - (geometric_product[e4125] * self[e4125]),
                (geometric_product[e2] * self[e4315]) + (geometric_product[e3] * self[e4125]) + (geometric_product[e4] * self[e3215]) - (geometric_product[e321] * self[e45]),
            ]) + (Simd32x2::from(self[scalar]) * geometric_product.group0())
                + (Simd32x2::from(self[e1234]) * Simd32x2::from([geometric_product[e3215], geometric_product[e5]]))
                + (Simd32x2::from([geometric_product[e1234], geometric_product[e1]]) * self.group3().wx())
                - (Simd32x2::from(self[e41]) * Simd32x2::from([geometric_product[e15], geometric_product[e235]]))
                - (Simd32x2::from(self[e42]) * Simd32x2::from([geometric_product[e25], geometric_product[e315]]))
                - (Simd32x2::from(self[e43]) * Simd32x2::from([geometric_product[e35], geometric_product[e125]]))
                - (Simd32x2::from(self[e23]) * Simd32x2::from([geometric_product[e23], geometric_product[e415]]))
                - (Simd32x2::from(self[e31]) * Simd32x2::from([geometric_product[e31], geometric_product[e425]]))
                - (Simd32x2::from(self[e12]) * Simd32x2::from([geometric_product[e12], geometric_product[e435]]))
                - (Simd32x2::from(self[e15]) * Simd32x2::from([geometric_product[e41], geometric_product[e423]]))
                - (Simd32x2::from(self[e25]) * Simd32x2::from([geometric_product[e42], geometric_product[e431]]))
                - (Simd32x2::from(self[e35]) * Simd32x2::from([geometric_product[e43], geometric_product[e412]])),
            // e1, e2, e3, e4
            (geometric_product.group1().yzzx() * self.group1().zx().with_zw(self[scalar], self[e41]))
                + (self.group2().yzxw() * geometric_product.group7().zxy().with_w(geometric_product[e12345]))
                + (self.group0().zx().with_zw(self[e1234], self[e4315]) * geometric_product.group8().yzz().with_w(geometric_product[e431]))
                + (self.group0().ww().with_zw(self[e31], self[e4125]) * geometric_product.group1().xyx().with_w(geometric_product[e412]))
                + (self.group2().ww().with_zw(self[e42], self[e4235]) * geometric_product.group8().xyx().with_w(geometric_product[e423]))
                + (Simd32x3::from(geometric_product[e5]) * self.group0().xyz()).with_w(geometric_product[e4] * self[scalar])
                + (geometric_product.group6().zxy() * self.group3().yzx()).with_w(geometric_product[e2] * self[e42])
                + (geometric_product.group6().www() * self.group1().xyz()).with_w(geometric_product[e3] * self[e43])
                - (geometric_product.group6().xyxz() * self.group1().ww().with_zw(self[e4315], self[e43]))
                - (geometric_product.group6().yzzw() * self.group3().zx().with_zw(self[e45], self[e1234]))
                - (geometric_product.group0().yy().with_zw(geometric_product[e12345], geometric_product[e423]) * self.group3().xyz().with_w(self[e23]))
                - (self.group2().zx().with_zw(self[e3215], self[e12]) * geometric_product.group7().yzz().with_w(geometric_product[e412]))
                - (self.group3().ww().with_zw(self[e25], self[e31]) * geometric_product.group7().xyx().with_w(geometric_product[e431]))
                - (geometric_product.group8().zxy() * self.group0().yzx()).with_w(geometric_product[e4] * self[e45])
                - (geometric_product.group1().zxy() * self.group1().yzx()).with_w(geometric_product[e415] * self[e41])
                - (geometric_product.group1().www() * self.group2().xyz()).with_w(geometric_product[e425] * self[e42]),
            // e5
            (geometric_product[e12345] * self[e3215]) + (geometric_product[e5] * self[scalar]) + (geometric_product[e5] * self[e45]) + (geometric_product[e321] * self[e3215])
                - (geometric_product[e1] * self[e15])
                - (geometric_product[e2] * self[e25])
                - (geometric_product[e3] * self[e35])
                - (geometric_product[e415] * self[e15])
                - (geometric_product[e425] * self[e25])
                - (geometric_product[e435] * self[e35])
                - (geometric_product[e235] * self[e23])
                - (geometric_product[e235] * self[e4235])
                - (geometric_product[e315] * self[e31])
                - (geometric_product[e315] * self[e4315])
                - (geometric_product[e125] * self[e12])
                - (geometric_product[e125] * self[e4125]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (geometric_product[e25] * self[e4125]) + (geometric_product[e4125] * self[e25]) + (geometric_product[e3215] * self[e23]) + (geometric_product[e3215] * self[e4235]),
                (geometric_product[e35] * self[e4235]) + (geometric_product[e4235] * self[e35]) + (geometric_product[e3215] * self[e31]) + (geometric_product[e3215] * self[e4315]),
                (geometric_product[e35] * self[e45]) + (geometric_product[e4315] * self[e15]) + (geometric_product[e3215] * self[e12]) + (geometric_product[e3215] * self[e4125]),
                -(geometric_product[e4235] * self[e23])
                    - (geometric_product[e4315] * self[e31])
                    - (geometric_product[e4125] * self[e12])
                    - (geometric_product[e3215] * self[e1234]),
            ]) + (Simd32x4::from(geometric_product[scalar]) * self.group2().xyz().with_w(self[e45]))
                + (geometric_product.group3().xyxz() * self.group0().ww().with_zw(self[e31], self[e43]))
                + (geometric_product.group3().xyxw() * self.group1().ww().with_zw(self[e4315], self[scalar]))
                + (self.group1().zx().with_zw(self[scalar], geometric_product[e1234]) * geometric_product.group3().yzz().with_w(self[e3215]))
                + (self.group2().zx().with_zw(self[e3215], self[e42]) * geometric_product.group5().yzz().with_w(geometric_product[e25]))
                + (self.group3().ww().with_zw(self[e25], self[e41]) * geometric_product.group5().xyx().with_w(geometric_product[e15]))
                - (self.group2().yzxx() * geometric_product.group5().zxy().with_w(geometric_product[e41]))
                - (self.group2().zx().with_zw(self[e3215], self[e4125]) * geometric_product.group9().yzz().with_w(geometric_product[e12]))
                - (self.group3().ww().with_zw(self[e25], self[e4315]) * geometric_product.group9().xyx().with_w(geometric_product[e31]))
                - (geometric_product.group3().zxy() * self.group1().yzx()).with_w(geometric_product[e42] * self[e25])
                - (geometric_product.group3().zxy() * self.group3().yzx()).with_w(geometric_product[e43] * self[e35])
                - (geometric_product.group3().www() * self.group2().xyz()).with_w(geometric_product[e23] * self[e4235]),
            // e41, e42, e43
            (Simd32x3::from(geometric_product[scalar]) * self.group0().xyz())
                + (Simd32x3::from(geometric_product[e45]) * self.group0().xyz())
                + (Simd32x3::from(geometric_product[e41]) * Simd32x3::from([self[scalar], self[e4125], self[e31]]))
                + (Simd32x3::from(geometric_product[e42]) * Simd32x3::from([self[e12], self[scalar], self[e4235]]))
                + (Simd32x3::from(geometric_product[e43]) * Simd32x3::from([self[e4315], self[e23], self[scalar]]))
                + (Simd32x3::from(geometric_product[e1234]) * self.group1().xyz())
                + (Simd32x3::from([self[e43], self[e41], self[e1234]]) * geometric_product.group5().yzz())
                + (Simd32x3::from([self[e43], self[e41], self[e1234]]) * geometric_product.group9().yzz())
                + (Simd32x3::from([self[e1234], self[e1234], self[e42]]) * geometric_product.group5().xyx())
                + (Simd32x3::from([self[e1234], self[e1234], self[e42]]) * geometric_product.group9().xyx())
                - (Simd32x3::from(geometric_product[e41]) * Simd32x3::from([self[e45], self[e12], self[e4315]]))
                - (Simd32x3::from(geometric_product[e42]) * Simd32x3::from([self[e4125], self[e45], self[e23]]))
                - (Simd32x3::from(geometric_product[e43]) * Simd32x3::from([self[e31], self[e4235], self[e45]]))
                - (Simd32x3::from(geometric_product[e1234]) * self.group3().xyz())
                - (geometric_product.group5().zxy() * self.group0().yzx())
                - (geometric_product.group9().zxy() * self.group0().yzx()),
            // e23, e31, e12
            (Simd32x3::from(geometric_product[scalar]) * self.group1().xyz())
                + (Simd32x3::from(geometric_product[e45]) * self.group3().xyz())
                + (Simd32x3::from(geometric_product[e3215]) * self.group0().xyz())
                + (Simd32x3::from(geometric_product[e1234]) * self.group2().xyz())
                + (Simd32x3::from([self[e43], self[e41], self[e1234]]) * geometric_product.group3().yzz())
                + (Simd32x3::from([self[scalar], self[scalar], self[e31]]) * geometric_product.group5().xyx())
                + (Simd32x3::from([self[e12], self[e23], self[scalar]]) * geometric_product.group5().yzz())
                + (Simd32x3::from([self[e45], self[e45], self[e4315]]) * geometric_product.group9().xyx())
                + (Simd32x3::from([self[e35], self[e15], self[e3215]]) * geometric_product.group4().yzz())
                + (Simd32x3::from([self[e1234], self[e1234], self[e42]]) * geometric_product.group3().xyx())
                + (Simd32x3::from([self[e4125], self[e4235], self[e45]]) * geometric_product.group9().yzz())
                + (Simd32x3::from([self[e3215], self[e3215], self[e25]]) * geometric_product.group4().xyx())
                - (geometric_product.group4().zxy() * self.group2().yzx())
                - (geometric_product.group5().zxy() * self.group1().yzx())
                - (geometric_product.group3().zxy() * self.group0().yzx())
                - (geometric_product.group9().zxy() * self.group3().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (geometric_product[e5] * self[e41]) + (geometric_product[e425] * self[e12]),
                (geometric_product[e5] * self[e42]) + (geometric_product[e435] * self[e23]),
                (geometric_product[e5] * self[e43]) + (geometric_product[e435] * self[scalar]),
                -(geometric_product[e3] * self[e12]) - (geometric_product[e4] * self[e3215]),
            ]) + (self.group3().yzxz() * geometric_product.group1().zxy().with_w(geometric_product[e435]))
                + (geometric_product.group0().yy().with_zw(geometric_product[e12345], geometric_product[e423]) * self.group1().xyz().with_w(self[e15]))
                + (self.group0().zx().with_zw(self[e1234], self[e4315]) * geometric_product.group8().yzz().with_w(geometric_product[e425]))
                + (self.group0().ww().with_zw(self[e31], geometric_product[e5]) * geometric_product.group6().xyx().with_w(self[e1234]))
                + (self.group2().zx().with_zw(self[e3215], self[e35]) * geometric_product.group7().yzz().with_w(geometric_product[e412]))
                + (self.group2().ww().with_zw(self[e42], self[e4235]) * geometric_product.group8().xyx().with_w(geometric_product[e415]))
                + (self.group3().ww().with_zw(self[e25], self[e25]) * geometric_product.group7().xyx().with_w(geometric_product[e431]))
                + (geometric_product.group1().www() * self.group2().xyz()).with_w(geometric_product[e321] * self[scalar])
                - (self.group0().yzxx() * geometric_product.group8().zxy().with_w(geometric_product[e235]))
                - (self.group1().yzxx() * geometric_product.group6().zxy().with_w(geometric_product[e1]))
                - (self.group1().ww().with_zw(self[e4315], self[e42]) * geometric_product.group1().xyx().with_w(geometric_product[e315]))
                - (self.group3().zx().with_zw(self[e45], self[e43]) * geometric_product.group1().yzz().with_w(geometric_product[e125]))
                - (geometric_product.group7().zxy() * self.group2().yzx()).with_w(geometric_product[e12345] * self[e45])
                - (geometric_product.group6().www() * self.group3().xyz()).with_w(geometric_product[e2] * self[e31]),
            // e423, e431, e412
            (Simd32x3::from(geometric_product[e12345]) * self.group0().xyz())
                + (Simd32x3::from(geometric_product[e4]) * self.group1().xyz())
                + (Simd32x3::from(geometric_product[e423]) * Simd32x3::from([self[scalar], self[e4125], self[e31]]))
                + (Simd32x3::from(geometric_product[e431]) * Simd32x3::from([self[e12], self[scalar], self[e4235]]))
                + (Simd32x3::from(geometric_product[e412]) * Simd32x3::from([self[e4315], self[e23], self[scalar]]))
                + (Simd32x3::from([self[e43], self[e41], self[e1234]]) * geometric_product.group6().yzz())
                + (Simd32x3::from([self[e1234], self[e1234], self[e42]]) * geometric_product.group6().xyx())
                + (geometric_product.group1().zxy() * self.group0().yzx())
                - (Simd32x3::from(geometric_product[e4]) * self.group3().xyz())
                - (Simd32x3::from(geometric_product[e321]) * self.group0().xyz())
                - (Simd32x3::from(geometric_product[e423]) * Simd32x3::from([self[e45], self[e12], self[e4315]]))
                - (Simd32x3::from(geometric_product[e431]) * Simd32x3::from([self[e4125], self[e45], self[e23]]))
                - (Simd32x3::from(geometric_product[e412]) * Simd32x3::from([self[e31], self[e4235], self[e45]]))
                - (Simd32x3::from([self[e43], self[e41], self[e1234]]) * geometric_product.group1().yzz())
                - (Simd32x3::from([self[e1234], self[e1234], self[e42]]) * geometric_product.group1().xyx())
                - (geometric_product.group6().zxy() * self.group0().yzx()),
            // e235, e315, e125
            (Simd32x3::from(geometric_product[e12345]) * self.group2().xyz())
                + (Simd32x3::from(geometric_product[e5]) * self.group1().xyz())
                + (Simd32x3::from(geometric_product[e5]) * self.group3().xyz())
                + (Simd32x3::from(geometric_product[e321]) * self.group2().xyz())
                + (Simd32x3::from([self[scalar], self[scalar], self[e31]]) * geometric_product.group8().xyx())
                + (Simd32x3::from([self[e12], self[e23], self[scalar]]) * geometric_product.group8().yzz())
                + (Simd32x3::from([self[e45], self[e45], self[e4315]]) * geometric_product.group8().xyx())
                + (Simd32x3::from([self[e35], self[e15], self[e3215]]) * geometric_product.group1().yzz())
                + (Simd32x3::from([self[e35], self[e15], self[e3215]]) * geometric_product.group6().yzz())
                + (Simd32x3::from([self[e4125], self[e4235], self[e45]]) * geometric_product.group8().yzz())
                + (Simd32x3::from([self[e3215], self[e3215], self[e25]]) * geometric_product.group1().xyx())
                + (Simd32x3::from([self[e3215], self[e3215], self[e25]]) * geometric_product.group6().xyx())
                - (geometric_product.group8().zxy() * self.group1().yzx())
                - (geometric_product.group8().zxy() * self.group3().yzx())
                - (geometric_product.group1().zxy() * self.group2().yzx())
                - (geometric_product.group6().zxy() * self.group2().yzx()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (geometric_product[e45] * self[e23]) + (geometric_product[e4235] * self[scalar]) + (geometric_product[e4315] * self[e12]) + (geometric_product[e1234] * self[e15]),
                (geometric_product[e45] * self[e31]) + (geometric_product[e4315] * self[scalar]) + (geometric_product[e4125] * self[e23]) + (geometric_product[e1234] * self[e25]),
                (geometric_product[e45] * self[e12]) + (geometric_product[e4235] * self[e31]) + (geometric_product[e4125] * self[scalar]) + (geometric_product[e1234] * self[e35]),
                -(geometric_product[e25] * self[e4315]) - (geometric_product[e35] * self[e12]) - (geometric_product[e35] * self[e4125]) - (geometric_product[e45] * self[e3215]),
            ]) + (Simd32x4::from(geometric_product[scalar]) * self.group3())
                + (self.group1().ww().with_zw(self[e4315], self[e35]) * geometric_product.group5().xyx().with_w(geometric_product[e4125]))
                + (self.group2().zx().with_zw(self[e3215], self[e25]) * geometric_product.group4().yzz().with_w(geometric_product[e4315]))
                + (self.group3().zx().with_zw(self[e45], self[scalar]) * geometric_product.group5().yzz().with_w(geometric_product[e3215]))
                + (self.group3().ww().with_zw(self[e25], self[e15]) * geometric_product.group4().xyx().with_w(geometric_product[e4235]))
                + (geometric_product.group3().zxy() * self.group0().yzx()).with_w(geometric_product[e3215] * self[e45])
                - (geometric_product.group3().yzzx() * self.group0().zx().with_zw(self[e1234], self[e23]))
                - (self.group2().yzxx() * geometric_product.group4().zxy().with_w(geometric_product[e23]))
                - (self.group2().ww().with_zw(self[e42], self[e35]) * geometric_product.group3().xyx().with_w(geometric_product[e12]))
                - (geometric_product.group5().zxy() * self.group3().yzx()).with_w(geometric_product[e31] * self[e25])
                - (geometric_product.group9().zxy() * self.group1().yzx()).with_w(geometric_product[e15] * self[e4235])
                - (geometric_product.group9().www() * self.group0().xyz()).with_w(geometric_product[e25] * self[e31]),
            // e1234
            (geometric_product[scalar] * self[e1234])
                + (geometric_product[e45] * self[e1234])
                + (geometric_product[e41] * self[e4235])
                + (geometric_product[e42] * self[e4315])
                + (geometric_product[e43] * self[e4125])
                + (geometric_product[e1234] * self[scalar])
                - (geometric_product[e41] * self[e23])
                - (geometric_product[e42] * self[e31])
                - (geometric_product[e43] * self[e12])
                - (geometric_product[e23] * self[e41])
                - (geometric_product[e31] * self[e42])
                - (geometric_product[e12] * self[e43])
                - (geometric_product[e4235] * self[e41])
                - (geometric_product[e4315] * self[e42])
                - (geometric_product[e4125] * self[e43])
                - (geometric_product[e1234] * self[e45]),
        );
    }
}
impl GeometricQuotient<Plane> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       22       37        0
    //    simd4        7        8        0
    // Totals...
    // yes simd       29       45        0
    //  no simd       50       69        0
    fn geometric_quotient(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Plane::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(-f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2)) * other.group0(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                geometric_product[e4315] * self[e43],
                geometric_product[e4125] * self[e41],
                geometric_product[e4125] * self[e1234],
                -(geometric_product[e4315] * self[e4315]) - (geometric_product[e4125] * self[e4125]),
            ]) + (geometric_product.group0().xyxw() * self.group2().ww().with_zw(self[e42], self[e1234]))
                - (geometric_product.group0().zxyx() * self.group0().yzx().with_w(self[e4235])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (geometric_product[e4235] * self[e45]) + (geometric_product[e4315] * self[e4125]) + (geometric_product[e3215] * self[e41]),
                (geometric_product[e4315] * self[e45]) + (geometric_product[e4125] * self[e4235]) + (geometric_product[e3215] * self[e42]),
                (geometric_product[e4235] * self[e4315]) + (geometric_product[e4125] * self[e45]) + (geometric_product[e3215] * self[e43]),
                -(geometric_product[e4315] * self[e31]) - (geometric_product[e4125] * self[e12]) - (geometric_product[e3215] * self[e1234]),
            ]) - (geometric_product.group0().zxyx() * self.group3().yzx().with_w(self[e23])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (geometric_product[e4125] * self[e25]) + (geometric_product[e3215] * self[e23]) + (geometric_product[e3215] * self[e4235]),
                (geometric_product[e4235] * self[e35]) + (geometric_product[e3215] * self[e31]) + (geometric_product[e3215] * self[e4315]),
                (geometric_product[e4315] * self[e15]) + (geometric_product[e3215] * self[e12]) + (geometric_product[e3215] * self[e4125]),
                geometric_product[e4125] * self[e43] * -1.0,
            ]) - (geometric_product.group0().xyxx() * self.group3().ww().with_zw(self[e25], self[e41]))
                - (geometric_product.group0().yzzy() * self.group2().zx().with_zw(self[e3215], self[e42])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(geometric_product[e4125] * self[e31]) - (geometric_product[e3215] * self[e41]),
                -(geometric_product[e4235] * self[e12]) - (geometric_product[e3215] * self[e42]),
                -(geometric_product[e4315] * self[e23]) - (geometric_product[e3215] * self[e43]),
                (geometric_product[e4125] * self[e35]) + (geometric_product[e3215] * self[scalar]) + (geometric_product[e3215] * self[e45]),
            ]) + (geometric_product.group0().xyxx() * self.group0().ww().with_zw(self[e31], self[e15]))
                + (geometric_product.group0().yzzy() * self.group1().zx().with_zw(self[scalar], self[e25])),
        );
    }
}
impl GeometricQuotient<RoundPoint> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       40        0
    //    simd3        0        2        0
    //    simd4       12       11        0
    // Totals...
    // yes simd       31       53        0
    //  no simd       67       90        0
    fn geometric_quotient(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2) - 2.0 * (other[e4] * other[e5]),
        );
        let geometric_product = RoundPoint::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from(other_2[scalar]) * other.group0(), /* e5 */ other[e5] * other_2[scalar]);
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                -(geometric_product[e1] * self[e1234]) - (geometric_product[e2] * self[e43]) - (geometric_product[e4] * self[e4235]),
                -(geometric_product[e2] * self[e1234]) - (geometric_product[e3] * self[e41]) - (geometric_product[e4] * self[e4315]),
                -(geometric_product[e1] * self[e42]) - (geometric_product[e3] * self[e1234]) - (geometric_product[e4] * self[e4125]),
                (geometric_product[e3] * self[e4125]) + (geometric_product[e4] * self[e3215]) + (geometric_product[e5] * self[e1234]),
            ]) + (geometric_product.group0().zxyx() * self.group0().yzx().with_w(self[e4235]))
                + (geometric_product.group0().wwwy() * self.group1().xyz().with_w(self[e4315])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (geometric_product[e4] * self[e15]) + (geometric_product[e5] * self[e41]),
                (geometric_product[e4] * self[e25]) + (geometric_product[e5] * self[e42]),
                (geometric_product[e4] * self[e35]) + (geometric_product[e5] * self[e43]),
                -(geometric_product[e3] * self[e12]) - (geometric_product[e4] * self[e3215]),
            ]) + (geometric_product.group0().zxy() * self.group3().yzx()).with_w(geometric_product[e5] * self[e1234])
                - (geometric_product.group0().xyxx() * self.group1().ww().with_zw(self[e4315], self[e23]))
                - (geometric_product.group0().yzzy() * self.group3().zx().with_zw(self[e45], self[e31])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (geometric_product[e5] * self[e23]) + (geometric_product[e5] * self[e4235]),
                (geometric_product[e5] * self[e31]) + (geometric_product[e5] * self[e4315]),
                (geometric_product[e5] * self[e12]) + (geometric_product[e5] * self[e4125]),
                -(geometric_product[e2] * self[e25]) - (geometric_product[e3] * self[e35]),
            ]) + (self.group2().zx().with_zw(self[e3215], geometric_product[e5]) * geometric_product.group0().yzz().with_w(self[e45]))
                + (self.group3().ww().with_zw(self[e25], geometric_product[e5]) * geometric_product.group0().xyx().with_w(self[scalar]))
                - (geometric_product.group0().zxyx() * self.group2().yzxx()),
            // e1, e2, e3, e4
            Simd32x4::from([
                geometric_product[e4] * self[e15] * -1.0,
                geometric_product[e4] * self[e25] * -1.0,
                geometric_product[e4] * self[e35] * -1.0,
                geometric_product[e4] * self[scalar],
            ]) + (geometric_product.group0().xyxx() * self.group0().ww().with_zw(self[e31], self[e41]))
                + (geometric_product.group0().yzzy() * self.group1().zx().with_zw(self[scalar], self[e42]))
                + (Simd32x3::from(geometric_product[e5]) * self.group0().xyz()).with_w(geometric_product[e3] * self[e43])
                - (geometric_product.group0().zxyw() * self.group1().yzxw()),
        );
    }
}
impl GeometricQuotient<Scalar> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        0        1
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        4        1
    //  no simd        0       16        1
    fn geometric_quotient(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Scalar::from_groups(/* scalar */ 1.0 / other[scalar]);
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(geometric_product[scalar]) * self.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(geometric_product[scalar]) * self.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(geometric_product[scalar]) * self.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(geometric_product[scalar]) * self.group3(),
        );
    }
}
impl GeometricQuotient<Sphere> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       39        0
    //    simd3        0        3        0
    //    simd4       12       10        0
    // Totals...
    // yes simd       31       52        0
    //  no simd       67       88        0
    fn geometric_quotient(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e3215] * other[e1234]) - f32::powi(other[e4235], 2) - f32::powi(other[e4315], 2) - f32::powi(other[e4125], 2),
        );
        let geometric_product = Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * other.group0(),
            // e1234
            other_2[scalar] * other[e1234],
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                geometric_product[e1234] * self[e23],
                geometric_product[e1234] * self[e31],
                geometric_product[e1234] * self[e12],
                geometric_product[e4125] * self[e4125] * -1.0,
            ]) + (geometric_product.group0().xyxw() * self.group2().ww().with_zw(self[e42], self[e1234]))
                + (self.group0().zx().with_zw(self[e1234], geometric_product[e1234]) * geometric_product.group0().yzz().with_w(self[e3215]))
                - (geometric_product.group0().zxyx() * self.group0().yzx().with_w(self[e4235]))
                - (Simd32x3::from(geometric_product[e1234]) * self.group3().xyz()).with_w(geometric_product[e4315] * self[e4315]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (geometric_product[e4315] * self[e4125]) + (geometric_product[e3215] * self[e41]) + (geometric_product[e1234] * self[e15]),
                (geometric_product[e4125] * self[e4235]) + (geometric_product[e3215] * self[e42]) + (geometric_product[e1234] * self[e25]),
                (geometric_product[e4125] * self[e45]) + (geometric_product[e3215] * self[e43]) + (geometric_product[e1234] * self[e35]),
                -(geometric_product[e4315] * self[e31]) - (geometric_product[e4125] * self[e12]) - (geometric_product[e3215] * self[e1234]),
            ]) + (self.group1().ww().with_zw(self[e4315], geometric_product[e1234]) * geometric_product.group0().xyx().with_w(self[e3215]))
                - (geometric_product.group0().zxyx() * self.group3().yzx().with_w(self[e23])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (geometric_product[e3215] * self[e23]) + (geometric_product[e3215] * self[e4235]),
                (geometric_product[e3215] * self[e31]) + (geometric_product[e3215] * self[e4315]),
                (geometric_product[e3215] * self[e12]) + (geometric_product[e3215] * self[e4125]),
                -(geometric_product[e4125] * self[e43]) - (geometric_product[e1234] * self[e45]),
            ]) + (geometric_product.group0().zxy() * self.group2().yzx()).with_w(geometric_product[e1234] * self[scalar])
                - (geometric_product.group0().xyxx() * self.group3().ww().with_zw(self[e25], self[e41]))
                - (geometric_product.group0().yzzy() * self.group2().zx().with_zw(self[e3215], self[e42])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(geometric_product[e4125] * self[e31]) - (geometric_product[e3215] * self[e41]),
                -(geometric_product[e4235] * self[e12]) - (geometric_product[e3215] * self[e42]),
                -(geometric_product[e4315] * self[e23]) - (geometric_product[e3215] * self[e43]),
                (geometric_product[e3215] * self[scalar]) + (geometric_product[e3215] * self[e45]),
            ]) + (geometric_product.group0().xyxx() * self.group0().ww().with_zw(self[e31], self[e15]))
                + (geometric_product.group0().yzzy() * self.group1().zx().with_zw(self[scalar], self[e25]))
                + (Simd32x3::from(geometric_product[e1234]) * self.group2().xyz()).with_w(geometric_product[e4125] * self[e35]),
        );
    }
}
impl GeometricQuotient<VersorEven> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       47       66        0
    //    simd3        0       10        0
    //    simd4       51       49        0
    // Totals...
    // yes simd       98      125        0
    //  no simd      251      292        0
    fn geometric_quotient(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let reverse = VersorEven::from_groups(
            // e423, e431, e412, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from(-1.0),
            // e235, e315, e125, e5
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e4
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            f32::powi(other[e321], 2) + f32::powi(other[e1], 2) + f32::powi(other[e2], 2) + f32::powi(other[e3], 2)
                - f32::powi(other[e12345], 2)
                - f32::powi(other[e415], 2)
                - f32::powi(other[e425], 2)
                - f32::powi(other[e435], 2)
                - 2.0 * (other[e423] * other[e235])
                - 2.0 * (other[e431] * other[e315])
                - 2.0 * (other[e412] * other[e125])
                - 2.0 * (other[e5] * other[e4]),
        );
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e235, e315, e125, e5
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e1, e2, e3, e4
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (geometric_product[e3] * self[e42]) + (geometric_product[e4] * self[e23]),
                (geometric_product[e1] * self[e43]) + (geometric_product[e4] * self[e31]),
                (geometric_product[e2] * self[e41]) + (geometric_product[e4] * self[e12]),
                -(geometric_product[e315] * self[e42]) - (geometric_product[e125] * self[e43]),
            ]) + (Simd32x4::from([self[scalar], self[e4125], self[e31], self[scalar]]) * geometric_product.group0().xxxw())
                + (Simd32x4::from([self[e12], self[scalar], self[e4235], self[e1234]]) * geometric_product.group0().yyy().with_w(geometric_product[e5]))
                + (Simd32x4::from([self[e4315], self[e23], self[scalar], self[e4235]]) * geometric_product.group0().zzz().with_w(geometric_product[e1]))
                + (self.group0().zx().with_zw(self[e1234], self[e3215]) * geometric_product.group1().yzz().with_w(geometric_product[e4]))
                + (self.group2().ww().with_zw(self[e42], self[e4125]) * geometric_product.group1().xyx().with_w(geometric_product[e3]))
                + (geometric_product.group0().www() * self.group0().xyz()).with_w(geometric_product[e2] * self[e4315])
                - (Simd32x4::from(geometric_product[e423]) * self.group1().wz().with_zw(self[e4315], self[e15]))
                - (Simd32x4::from(geometric_product[e431]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(geometric_product[e412]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]]))
                - (geometric_product.group1().zxyx() * self.group0().yzx().with_w(self[e23]))
                - (geometric_product.group1().wwwy() * self.group0().xyz().with_w(self[e31]))
                - (self.group0().zx().with_zw(self[e1234], self[e45]) * geometric_product.group3().yzz().with_w(geometric_product[e321]))
                - (self.group2().ww().with_zw(self[e42], self[e12]) * geometric_product.group3().xyx().with_w(geometric_product[e435]))
                - (geometric_product.group3().www() * self.group3().xyz()).with_w(geometric_product[e235] * self[e41]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (geometric_product[e3] * self[e4315]) + (geometric_product[e4] * self[e15]),
                (geometric_product[e1] * self[e4125]) + (geometric_product[e4] * self[e25]),
                (geometric_product[e2] * self[e4235]) + (geometric_product[e4] * self[e35]),
                -(geometric_product[e3] * self[e12]) - (geometric_product[e4] * self[e3215]),
            ]) + (Simd32x4::from(geometric_product[e5]) * self.group0().xyz().with_w(self[e1234]))
                + (geometric_product.group0().xyxx() * self.group3().ww().with_zw(self[e25], self[e15]))
                + (geometric_product.group0().yzzy() * self.group2().zx().with_zw(self[e3215], self[e25]))
                + (geometric_product.group0().wwwz() * self.group1().xyz().with_w(self[e35]))
                + (geometric_product.group1().xyxx() * self.group0().ww().with_zw(self[e31], self[e4235]))
                + (geometric_product.group1().yzzy() * self.group1().zx().with_zw(self[scalar], self[e4315]))
                + (self.group0().zx().with_zw(self[e1234], self[scalar]) * geometric_product.group2().yzz().with_w(geometric_product[e321]))
                + (self.group2().ww().with_zw(self[e42], self[e4125]) * geometric_product.group2().xyx().with_w(geometric_product[e435]))
                - (geometric_product.group0().zxyw() * self.group2().yzx().with_w(self[e45]))
                - (geometric_product.group2().zxyz() * self.group0().yzxz())
                - (geometric_product.group3().xyxx() * self.group1().ww().with_zw(self[e4315], self[e23]))
                - (geometric_product.group3().yzzy() * self.group3().zx().with_zw(self[e45], self[e31]))
                - (geometric_product.group1().zxy() * self.group1().yzx()).with_w(geometric_product[e235] * self[e41])
                - (geometric_product.group1().www() * self.group3().xyz()).with_w(geometric_product[e315] * self[e42]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (geometric_product[e235] * self[scalar])
                    + (geometric_product[e235] * self[e45])
                    + (geometric_product[e315] * self[e12])
                    + (geometric_product[e315] * self[e4125])
                    + (geometric_product[e5] * self[e23])
                    + (geometric_product[e5] * self[e4235])
                    + (geometric_product[e1] * self[e3215])
                    + (geometric_product[e2] * self[e35]),
                (geometric_product[e315] * self[scalar])
                    + (geometric_product[e315] * self[e45])
                    + (geometric_product[e125] * self[e23])
                    + (geometric_product[e125] * self[e4235])
                    + (geometric_product[e5] * self[e31])
                    + (geometric_product[e5] * self[e4315])
                    + (geometric_product[e2] * self[e3215])
                    + (geometric_product[e3] * self[e15]),
                (geometric_product[e235] * self[e31])
                    + (geometric_product[e235] * self[e4315])
                    + (geometric_product[e125] * self[scalar])
                    + (geometric_product[e125] * self[e45])
                    + (geometric_product[e5] * self[e12])
                    + (geometric_product[e5] * self[e4125])
                    + (geometric_product[e1] * self[e25])
                    + (geometric_product[e3] * self[e3215]),
                -(geometric_product[e235] * self[e4235])
                    - (geometric_product[e315] * self[e31])
                    - (geometric_product[e315] * self[e4315])
                    - (geometric_product[e125] * self[e12])
                    - (geometric_product[e125] * self[e4125])
                    - (geometric_product[e1] * self[e15])
                    - (geometric_product[e2] * self[e25])
                    - (geometric_product[e3] * self[e35]),
            ]) + (Simd32x4::from(geometric_product[e12345]) * self.group2().xyz().with_w(self[e3215]))
                + (geometric_product.group1().xyxw() * self.group3().ww().with_zw(self[e25], self[e3215]))
                + (self.group2().zx().with_zw(self[e3215], self[scalar]) * geometric_product.group1().yzz().with_w(geometric_product[e5]))
                + (geometric_product.group1().www() * self.group2().xyz()).with_w(geometric_product[e5] * self[e45])
                - (geometric_product.group1().zxyx() * self.group2().yzxx())
                - (geometric_product.group2().zxy() * self.group1().yzx()).with_w(geometric_product[e425] * self[e25])
                - (geometric_product.group2().zxy() * self.group3().yzx()).with_w(geometric_product[e435] * self[e35])
                - (geometric_product.group3().zxy() * self.group2().yzx()).with_w(geometric_product[e235] * self[e23]),
            // e1, e2, e3, e4
            (geometric_product.group0().zxyx() * self.group2().yzx().with_w(self[e4235]))
                + (geometric_product.group3().xyxz() * self.group0().ww().with_zw(self[e31], self[e43]))
                + (geometric_product.group3().yzzw() * self.group1().zx().with_zw(self[scalar], self[scalar]))
                + (self.group0().xyzy() * geometric_product.group2().www().with_w(geometric_product[e2]))
                + (self.group3().yzxy() * geometric_product.group1().zxy().with_w(geometric_product[e431]))
                + (self.group0().zx().with_zw(self[e1234], self[e41]) * geometric_product.group2().yzz().with_w(geometric_product[e1]))
                + (self.group2().ww().with_zw(self[e42], self[e1234]) * geometric_product.group2().xyx().with_w(geometric_product[e12345]))
                + (geometric_product.group1().www() * self.group1().xyz()).with_w(geometric_product[e412] * self[e4125])
                - (Simd32x4::from(geometric_product[e4]) * self.group2().xyz().with_w(self[e45]))
                - (geometric_product.group0().xyxx() * self.group3().ww().with_zw(self[e25], self[e23]))
                - (geometric_product.group0().yzzy() * self.group2().zx().with_zw(self[e3215], self[e31]))
                - (geometric_product.group0().wwwz() * self.group3().xyz().with_w(self[e12]))
                - (geometric_product.group1().xyxx() * self.group1().ww().with_zw(self[e4315], self[e41]))
                - (geometric_product.group1().yzzy() * self.group3().zx().with_zw(self[e45], self[e42]))
                - (self.group0().yzxz() * geometric_product.group2().zxy().with_w(geometric_product[e435]))
                - (geometric_product.group3().zxy() * self.group1().yzx()).with_w(geometric_product[e321] * self[e1234]),
        );
    }
}
impl GeometricQuotient<VersorOdd> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       75       99        0
    //    simd3        0       11        0
    //    simd4       44       40        0
    // Totals...
    // yes simd      119      150        0
    //  no simd      251      292        0
    fn geometric_quotient(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let reverse = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from(-1.0),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            other.group3(),
        );
        let other_2 = Scalar::from_groups(
            // scalar
            2.0 * (other[e41] * other[e15])
                + 2.0 * (other[e42] * other[e25])
                + 2.0 * (other[e43] * other[e35])
                + 2.0 * (other[e1234] * other[e3215])
                + f32::powi(other[scalar], 2)
                + f32::powi(other[e23], 2)
                + f32::powi(other[e31], 2)
                + f32::powi(other[e12], 2)
                - f32::powi(other[e45], 2)
                - f32::powi(other[e4235], 2)
                - f32::powi(other[e4315], 2)
                - f32::powi(other[e4125], 2),
        );
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(other_2[scalar]) * reverse.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other_2[scalar]) * reverse.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(other_2[scalar]) * reverse.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other_2[scalar]) * reverse.group3(),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (geometric_product[e23] * self[e1234])
                    + (geometric_product[e31] * self[e43])
                    + (geometric_product[e45] * self[e41])
                    + (geometric_product[e1234] * self[e23])
                    + (geometric_product[e4235] * self[e1234])
                    + (geometric_product[e4315] * self[e43]),
                (geometric_product[e31] * self[e1234])
                    + (geometric_product[e12] * self[e41])
                    + (geometric_product[e45] * self[e42])
                    + (geometric_product[e1234] * self[e31])
                    + (geometric_product[e4315] * self[e1234])
                    + (geometric_product[e4125] * self[e41]),
                (geometric_product[e23] * self[e42])
                    + (geometric_product[e12] * self[e1234])
                    + (geometric_product[e45] * self[e43])
                    + (geometric_product[e1234] * self[e12])
                    + (geometric_product[e4235] * self[e42])
                    + (geometric_product[e4125] * self[e1234]),
                -(geometric_product[e15] * self[e41])
                    - (geometric_product[e25] * self[e42])
                    - (geometric_product[e35] * self[e43])
                    - (geometric_product[e4235] * self[e4235])
                    - (geometric_product[e4315] * self[e4315])
                    - (geometric_product[e4125] * self[e4125]),
            ]) + (Simd32x4::from([self[scalar], self[e4125], self[e31], self[scalar]]) * geometric_product.group0().xxxw())
                + (Simd32x4::from([self[e12], self[scalar], self[e4235], self[e45]]) * geometric_product.group0().yyy().with_w(geometric_product[e45]))
                + (Simd32x4::from([self[e4315], self[e23], self[scalar], self[e3215]]) * geometric_product.group0().zzz().with_w(geometric_product[e1234]))
                + (geometric_product.group0().www() * self.group0().xyz()).with_w(geometric_product[e3215] * self[e1234])
                - (Simd32x4::from(geometric_product[e41]) * self.group1().wz().with_zw(self[e4315], self[e15]))
                - (Simd32x4::from(geometric_product[e42]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(geometric_product[e43]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]]))
                - (geometric_product.group1().zxyx() * self.group0().yzx().with_w(self[e23]))
                - (geometric_product.group2().www() * self.group3().xyz()).with_w(geometric_product[e31] * self[e31])
                - (geometric_product.group3().zxy() * self.group0().yzx()).with_w(geometric_product[e12] * self[e12]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (geometric_product[e15] * self[e1234])
                    + (geometric_product[e25] * self[e43])
                    + (geometric_product[e1234] * self[e15])
                    + (geometric_product[e4235] * self[e45])
                    + (geometric_product[e4315] * self[e4125])
                    + (geometric_product[e3215] * self[e41]),
                (geometric_product[e25] * self[e1234])
                    + (geometric_product[e35] * self[e41])
                    + (geometric_product[e1234] * self[e25])
                    + (geometric_product[e4315] * self[e45])
                    + (geometric_product[e4125] * self[e4235])
                    + (geometric_product[e3215] * self[e42]),
                (geometric_product[e15] * self[e42])
                    + (geometric_product[e35] * self[e1234])
                    + (geometric_product[e1234] * self[e35])
                    + (geometric_product[e4235] * self[e4315])
                    + (geometric_product[e4125] * self[e45])
                    + (geometric_product[e3215] * self[e43]),
                -(geometric_product[e31] * self[e4315])
                    - (geometric_product[e12] * self[e4125])
                    - (geometric_product[e4235] * self[e23])
                    - (geometric_product[e4315] * self[e31])
                    - (geometric_product[e4125] * self[e12])
                    - (geometric_product[e3215] * self[e1234]),
            ]) + (self.group3() * geometric_product.group1().www().with_w(geometric_product[e1234]))
                + (geometric_product.group0().xyxw() * self.group3().ww().with_zw(self[e25], self[e45]))
                + (self.group0().ww().with_zw(self[e31], self[e42]) * geometric_product.group1().xyx().with_w(geometric_product[e25]))
                + (self.group1().zx().with_zw(self[scalar], self[e43]) * geometric_product.group1().yzz().with_w(geometric_product[e35]))
                + (self.group2().zx().with_zw(self[e3215], self[scalar]) * geometric_product.group0().yzz().with_w(geometric_product[e45]))
                + (geometric_product.group0().www() * self.group1().xyz()).with_w(geometric_product[e15] * self[e41])
                - (geometric_product.group0().zxyx() * self.group2().yzxx())
                - (self.group3().yzxx() * geometric_product.group3().zxy().with_w(geometric_product[e23]))
                - (geometric_product.group1().zxy() * self.group1().yzx()).with_w(geometric_product[e42] * self[e25])
                - (geometric_product.group2().zxy() * self.group0().yzx()).with_w(geometric_product[e43] * self[e35]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (geometric_product[e25] * self[e4125]) + (geometric_product[e4125] * self[e25]) + (geometric_product[e3215] * self[e23]) + (geometric_product[e3215] * self[e4235]),
                (geometric_product[e35] * self[e4235]) + (geometric_product[e4235] * self[e35]) + (geometric_product[e3215] * self[e31]) + (geometric_product[e3215] * self[e4315]),
                (geometric_product[e35] * self[e45]) + (geometric_product[e4315] * self[e15]) + (geometric_product[e3215] * self[e12]) + (geometric_product[e3215] * self[e4125]),
                -(geometric_product[e1234] * self[e45]) - (geometric_product[e4235] * self[e41]) - (geometric_product[e4315] * self[e42]) - (geometric_product[e4125] * self[e43]),
            ]) + (geometric_product.group0().wwwx() * self.group2().xyz().with_w(self[e4235]))
                + (geometric_product.group2().yzzw() * self.group1().zx().with_zw(self[scalar], self[scalar]))
                + (self.group0().ww().with_zw(self[e31], self[e1234]) * geometric_product.group2().xyx().with_w(geometric_product[scalar]))
                + (self.group1().ww().with_zw(self[e4315], self[e1234]) * geometric_product.group2().xyx().with_w(geometric_product[e45]))
                + (self.group2().zx().with_zw(self[e3215], self[e4125]) * geometric_product.group1().yzz().with_w(geometric_product[e43]))
                + (self.group3().ww().with_zw(self[e25], self[e4315]) * geometric_product.group1().xyx().with_w(geometric_product[e42]))
                - (self.group1().yzxz() * geometric_product.group2().zxy().with_w(geometric_product[e43]))
                - (self.group2().zx().with_zw(self[e3215], self[e43]) * geometric_product.group3().yzz().with_w(geometric_product[e12]))
                - (self.group3().ww().with_zw(self[e25], self[e42]) * geometric_product.group3().xyx().with_w(geometric_product[e31]))
                - (geometric_product.group1().zxy() * self.group2().yzx()).with_w(geometric_product[e41] * self[e23])
                - (geometric_product.group1().www() * self.group2().xyz()).with_w(geometric_product[e42] * self[e31])
                - (geometric_product.group2().zxy() * self.group3().yzx()).with_w(geometric_product[e23] * self[e41]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (geometric_product[e35] * self[e42]) + (geometric_product[e1234] * self[e15]) + (geometric_product[e4235] * self[scalar]) + (geometric_product[e4315] * self[e12]),
                (geometric_product[e15] * self[e43]) + (geometric_product[e1234] * self[e25]) + (geometric_product[e4315] * self[scalar]) + (geometric_product[e4125] * self[e23]),
                (geometric_product[e25] * self[e41]) + (geometric_product[e1234] * self[e35]) + (geometric_product[e4235] * self[e31]) + (geometric_product[e4125] * self[scalar]),
                -(geometric_product[e25] * self[e31]) - (geometric_product[e25] * self[e4315]) - (geometric_product[e35] * self[e12]) - (geometric_product[e35] * self[e4125]),
            ]) + (self.group1() * geometric_product.group1().www().with_w(geometric_product[e3215]))
                + (geometric_product.group0().xyxw() * self.group3().ww().with_zw(self[e25], self[e3215]))
                + (self.group1().ww().with_zw(self[e4315], self[e35]) * geometric_product.group1().xyx().with_w(geometric_product[e4125]))
                + (self.group2().zx().with_zw(self[e3215], self[e15]) * geometric_product.group0().yzz().with_w(geometric_product[e4235]))
                + (self.group3().zx().with_zw(self[e45], self[scalar]) * geometric_product.group1().yzz().with_w(geometric_product[e3215]))
                + (geometric_product.group0().www() * self.group3().xyz()).with_w(geometric_product[e4315] * self[e25])
                - (geometric_product.group1().zxyy() * self.group3().yzx().with_w(self[e25]))
                - (self.group1().yzxx() * geometric_product.group3().zxy().with_w(geometric_product[e15]))
                - (self.group2().yzxx() * geometric_product.group0().zxy().with_w(geometric_product[e23]))
                - (self.group0().zx().with_zw(self[e1234], self[e3215]) * geometric_product.group2().yzz().with_w(geometric_product[e45]))
                - (self.group2().ww().with_zw(self[e42], self[e35]) * geometric_product.group2().xyx().with_w(geometric_product[e12]))
                - (geometric_product.group3().www() * self.group0().xyz()).with_w(geometric_product[e15] * self[e4235]),
        );
    }
}
