// Note on Operative Statistics:
// Operative Statistics are not a precise predictor of performance or performance comparisons.
// This is due to varying hardware capabilities and compiler optimizations.
// As always, where performance is a concern, there is no substitute for
// real measurements on real work-loads on real hardware.
// Disclaimer aside, enjoy the fun information =)
//
// Total Implementations: 499
//
// Yes SIMD:   add/sub     mul     div
//  Minimum:         0       0       0
//   Median:         9      20       0
//  Average:        19      33       0
//  Maximum:       222     283       0
//
//  No SIMD:   add/sub     mul     div
//  Minimum:         0       0       0
//   Median:        14      42       0
//  Average:        35      64       0
//  Maximum:       422     508       0
impl std::ops::Div<reject_orthogonally_from> for AntiCircleRotor {
    type Output = reject_orthogonally_from_partial<AntiCircleRotor>;
    fn div(self, _rhs: reject_orthogonally_from) -> Self::Output {
        reject_orthogonally_from_partial(self)
    }
}
impl RejectOrthogonallyFrom<AntiDipoleInversion> for AntiCircleRotor {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       10        0
    //    simd3        0        1        0
    //    simd4        0        6        0
    // Totals...
    // yes simd        9       17        0
    //  no simd        9       37        0
    fn reject_orthogonally_from(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Scalar::from_groups(
            // scalar
            -(self[e41] * other[e235])
                - (self[e42] * other[e315])
                - (self[e43] * other[e125])
                - (self[e23] * other[e415])
                - (self[e31] * other[e425])
                - (self[e12] * other[e435])
                - (self[e45] * other[e321])
                - (self[e15] * other[e423])
                - (self[e25] * other[e431])
                - (self[e35] * other[e412]),
        );
        let right_anti_dual = DipoleInversion::from_groups(
            // e41, e42, e43
            other.group0(),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            other.group3() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group3(),
        );
    }
}
impl RejectOrthogonallyFrom<AntiDualNum> for AntiCircleRotor {
    type Output = FlatPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        4        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        0        7        0
    //  no simd        0       16        0
    fn reject_orthogonally_from(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let right_anti_dual = DualNum::from_groups(/* e5, e12345 */ other.group0());
        return FlatPoint::from_groups(
            // e15, e25, e35, e45
            right_anti_dual.group0().xx().with_zw(right_anti_dual[e5], 0.0)
                * Simd32x3::from(1.0).with_w(0.0)
                * Simd32x4::from([self[e41] * other[e3215], self[e42] * other[e3215], self[e43] * other[e3215], self[e45] * other[e3215]])
                    .xyz()
                    .with_w(0.0)
                * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
        );
    }
}
impl RejectOrthogonallyFrom<AntiFlatPoint> for AntiCircleRotor {
    type Output = FlatPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        5        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        3        6        0
    //  no simd        3        9        0
    fn reject_orthogonally_from(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return FlatPoint::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(-(self[e41] * other[e235]) - (self[e42] * other[e315]) - (self[e43] * other[e125]) - (self[e45] * other[e321]))
                * Simd32x4::from([other[e235], other[e315], other[e125], other[e321] * -1.0]),
        );
    }
}
impl RejectOrthogonallyFrom<AntiFlector> for AntiCircleRotor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        4        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        3        8        0
    //  no simd        3       20        0
    fn reject_orthogonally_from(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Scalar::from_groups(
            // scalar
            -(self[e41] * other[e235]) - (self[e42] * other[e315]) - (self[e43] * other[e125]) - (self[e45] * other[e321]),
        );
        let right_anti_dual = Flector::from_groups(
            // e15, e25, e35, e45
            other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1(),
        );
    }
}
impl RejectOrthogonallyFrom<AntiMotor> for AntiCircleRotor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        1        7        0
    // Totals...
    // yes simd        2       12        0
    //  no simd        5       33        0
    fn reject_orthogonally_from(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from(other[e3215]) * self.group0().with_w(self[e45]));
        let right_anti_dual = Motor::from_groups(
            // e415, e425, e435, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x3::from(1.0).with_w(0.0) * right_anti_dual.group1().www().with_w(0.0) * anti_wedge.group0().xyz().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                anti_wedge[e3] * right_anti_dual[e425],
                anti_wedge[e1] * right_anti_dual[e435],
                anti_wedge[e2] * right_anti_dual[e415],
                -(anti_wedge[e2] * right_anti_dual[e315]) - (anti_wedge[e3] * right_anti_dual[e125]),
            ]) - (anti_wedge.group0().yzxx() * right_anti_dual.group0().zxy().with_w(right_anti_dual[e235])),
        );
    }
}
impl RejectOrthogonallyFrom<AntiScalar> for AntiCircleRotor {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd3        0        2        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        7        0
    //  no simd        0       23        0
    fn reject_orthogonally_from(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[e12345]) * self.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other[e12345]) * self.group1(),
            // e15, e25, e35, scalar
            Simd32x4::from(other[e12345]) * self.group2(),
        );
        let right_anti_dual = Scalar::from_groups(/* scalar */ other[e12345] * -1.0);
        return AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1(),
            // e15, e25, e35, scalar
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group2(),
        );
    }
}
impl RejectOrthogonallyFrom<Circle> for AntiCircleRotor {
    type Output = Dipole;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       10        0
    //    simd3        0        2        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        9       14        0
    //  no simd        9       24        0
    fn reject_orthogonally_from(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Scalar::from_groups(
            // scalar
            -(self[e41] * other[e235])
                - (self[e42] * other[e315])
                - (self[e43] * other[e125])
                - (self[e23] * other[e415])
                - (self[e31] * other[e425])
                - (self[e12] * other[e435])
                - (self[e45] * other[e321])
                - (self[e15] * other[e423])
                - (self[e25] * other[e431])
                - (self[e35] * other[e412]),
        );
        let right_anti_dual = Dipole::from_groups(
            // e41, e42, e43
            other.group0(),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35
            other.group2(),
        );
        return Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1(),
            // e15, e25, e35
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group2(),
        );
    }
}
impl RejectOrthogonallyFrom<CircleRotor> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       30       41        0
    //    simd3        1        4        0
    //    simd4        3        7        0
    // Totals...
    // yes simd       34       52        0
    //  no simd       45       81        0
    fn reject_orthogonally_from(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[e12345]) * self.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other[e12345]) * self.group1(),
            // e15, e25, e35, scalar
            Simd32x4::from([other[e12345], other[e12345], other[e12345], 1.0])
                * self.group2().xyz().with_w(
                    (self[scalar] * other[e12345])
                        - (self[e41] * other[e235])
                        - (self[e42] * other[e315])
                        - (self[e43] * other[e125])
                        - (self[e23] * other[e415])
                        - (self[e31] * other[e425])
                        - (self[e12] * other[e435])
                        - (self[e45] * other[e321])
                        - (self[e15] * other[e423])
                        - (self[e25] * other[e431])
                        - (self[e35] * other[e412]),
                ),
        );
        let right_anti_dual = AntiCircleRotor::from_groups(
            // e41, e42, e43
            other.group0(),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, scalar
            other.group2() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0()) + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group0()))
                .with_w(anti_wedge[scalar] * right_anti_dual[scalar]),
            // e23, e31, e12, e45
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1()) + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (anti_wedge[e15] * right_anti_dual[scalar]) + (anti_wedge[scalar] * right_anti_dual[e15]),
                (anti_wedge[e25] * right_anti_dual[scalar]) + (anti_wedge[scalar] * right_anti_dual[e25]),
                (anti_wedge[e35] * right_anti_dual[scalar]) + (anti_wedge[scalar] * right_anti_dual[e35]),
                -(anti_wedge[e41] * right_anti_dual[e23])
                    - (anti_wedge[e42] * right_anti_dual[e31])
                    - (anti_wedge[e43] * right_anti_dual[e12])
                    - (anti_wedge[e23] * right_anti_dual[e41])
                    - (anti_wedge[e31] * right_anti_dual[e42])
                    - (anti_wedge[e12] * right_anti_dual[e43]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (anti_wedge[e42] * right_anti_dual[e35])
                    + (anti_wedge[e23] * right_anti_dual[e45])
                    + (anti_wedge[e45] * right_anti_dual[e23])
                    + (anti_wedge[e35] * right_anti_dual[e42]),
                (anti_wedge[e43] * right_anti_dual[e15])
                    + (anti_wedge[e31] * right_anti_dual[e45])
                    + (anti_wedge[e45] * right_anti_dual[e31])
                    + (anti_wedge[e15] * right_anti_dual[e43]),
                (anti_wedge[e41] * right_anti_dual[e25])
                    + (anti_wedge[e12] * right_anti_dual[e45])
                    + (anti_wedge[e45] * right_anti_dual[e12])
                    + (anti_wedge[e25] * right_anti_dual[e41]),
                -(anti_wedge[e12] * right_anti_dual[e35])
                    - (anti_wedge[e15] * right_anti_dual[e23])
                    - (anti_wedge[e25] * right_anti_dual[e31])
                    - (anti_wedge[e35] * right_anti_dual[e12]),
            ]) - (right_anti_dual.group2().yzxx() * anti_wedge.group0().zxy().with_w(anti_wedge[e23]))
                - (right_anti_dual.group0().zxy() * anti_wedge.group2().yzx()).with_w(anti_wedge[e31] * right_anti_dual[e25]),
        );
    }
}
impl RejectOrthogonallyFrom<DipoleInversion> for AntiCircleRotor {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       31        0
    //    simd3        1        5        0
    //    simd4        6        8        0
    // Totals...
    // yes simd       20       44        0
    //  no simd       40       78        0
    fn reject_orthogonally_from(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = RoundPoint::from_groups(
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e41] * other[e3215]) + (self[e31] * other[e4125]),
                (self[e42] * other[e3215]) + (self[e12] * other[e4235]),
                (self[e43] * other[e3215]) + (self[e23] * other[e4315]),
                -(self[e43] * other[e4125]) - (self[e45] * other[e1234]),
            ]) - (other.group3().yzxx() * self.group1().zxy().with_w(self[e41]))
                - (other.group2().www() * self.group2().xyz()).with_w(self[e42] * other[e4315]),
            // e5
            (self[e45] * other[e3215]) + (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]),
        );
        let right_anti_dual = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e4
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group3() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group3().xyz()) - (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group0().xyz()),
            // e23, e31, e12, e45
            (right_anti_dual.group3().zxyw() * anti_wedge.group0().yzxw())
                - (right_anti_dual.group3().yzx() * anti_wedge.group0().zxy()).with_w(right_anti_dual[e4] * anti_wedge[e5]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                right_anti_dual[e1] * anti_wedge[e5] * -1.0,
                right_anti_dual[e2] * anti_wedge[e5] * -1.0,
                right_anti_dual[e3] * anti_wedge[e5] * -1.0,
                (right_anti_dual[e431] * anti_wedge[e2]) + (right_anti_dual[e412] * anti_wedge[e3]) + (right_anti_dual[e321] * anti_wedge[e4]),
            ]) + (anti_wedge.group0().xyzx() * right_anti_dual.group3().www().with_w(right_anti_dual[e423])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (right_anti_dual[e425] * anti_wedge[e3]) + (right_anti_dual[e235] * anti_wedge[e4]),
                (right_anti_dual[e435] * anti_wedge[e1]) + (right_anti_dual[e315] * anti_wedge[e4]),
                (right_anti_dual[e415] * anti_wedge[e2]) + (right_anti_dual[e125] * anti_wedge[e4]),
                -(right_anti_dual[e315] * anti_wedge[e2]) - (right_anti_dual[e125] * anti_wedge[e3]),
            ]) - (Simd32x4::from(anti_wedge[e5]) * right_anti_dual.group0().with_w(right_anti_dual[e321]))
                - (anti_wedge.group0().yzxx() * right_anti_dual.group1().zxy().with_w(right_anti_dual[e235])),
        );
    }
}
impl RejectOrthogonallyFrom<DualNum> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd2        0        1        0
    //    simd3        0        1        0
    //    simd4        0        7        0
    // Totals...
    // yes simd        0       10        0
    //  no simd        0       34        0
    fn reject_orthogonally_from(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[e12345]) * self.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other[e12345]) * self.group1(),
            // e15, e25, e35, scalar
            Simd32x4::from(other[e12345]) * self.group2(),
        );
        let right_anti_dual = AntiDualNum::from_groups(/* e3215, scalar */ other.group0() * Simd32x2::from(-1.0));
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group0().with_w(anti_wedge[scalar]),
            // e23, e31, e12, e45
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1(),
            // e15, e25, e35, e1234
            right_anti_dual.group0().yy().with_zw(right_anti_dual[scalar], 0.0)
                * Simd32x3::from(1.0).with_w(0.0)
                * anti_wedge.group2().xyz().with_w(0.0)
                * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
            // e4235, e4315, e4125, e3215
            Simd32x3::from(0.0).with_w(anti_wedge[scalar] * right_anti_dual[e3215]),
        );
    }
}
impl RejectOrthogonallyFrom<Flector> for AntiCircleRotor {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       18        0
    //    simd3        2        5        0
    //    simd4        1        4        0
    // Totals...
    // yes simd       13       27        0
    //  no simd       20       49        0
    fn reject_orthogonally_from(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = RoundPoint::from_groups(
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e41] * other[e3215]) + (self[e31] * other[e4125]),
                (self[e42] * other[e3215]) + (self[e12] * other[e4235]),
                (self[e43] * other[e3215]) + (self[e23] * other[e4315]),
                -(self[e42] * other[e4315]) - (self[e43] * other[e4125]),
            ]) - (other.group1().yzxx() * self.group1().zxy().with_w(self[e41])),
            // e5
            (self[e45] * other[e3215]) + (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]),
        );
        let right_anti_dual = AntiFlector::from_groups(
            // e235, e315, e125, e321
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group1().xyz(),
            // e23, e31, e12, e45
            ((right_anti_dual.group1().zxy() * anti_wedge.group0().yzx()) - (right_anti_dual.group1().yzx() * anti_wedge.group0().zxy()))
                .with_w(right_anti_dual[e5] * anti_wedge[e4]),
            // e15, e25, e35, e1234
            ((Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group0().xyz()) - (Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group1().xyz()))
                .with_w(right_anti_dual[e321] * anti_wedge[e4]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([anti_wedge[e4], anti_wedge[e4], anti_wedge[e4], 1.0])
                * right_anti_dual.group0().xyz().with_w(
                    -(right_anti_dual[e235] * anti_wedge[e1])
                        - (right_anti_dual[e315] * anti_wedge[e2])
                        - (right_anti_dual[e125] * anti_wedge[e3])
                        - (right_anti_dual[e321] * anti_wedge[e5]),
                ),
        );
    }
}
impl RejectOrthogonallyFrom<Line> for AntiCircleRotor {
    type Output = AntiLine;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5        6        0
    //    simd3        0        2        0
    // Totals...
    // yes simd        5        8        0
    //  no simd        5       12        0
    fn reject_orthogonally_from(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Scalar::from_groups(
            // scalar
            -(self[e41] * other[e235]) - (self[e42] * other[e315]) - (self[e43] * other[e125]) - (self[e23] * other[e415]) - (self[e31] * other[e425]) - (self[e12] * other[e435]),
        );
        let right_anti_dual = AntiLine::from_groups(/* e23, e31, e12 */ other.group0(), /* e15, e25, e35 */ other.group1());
        return AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e15, e25, e35
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group1(),
        );
    }
}
impl RejectOrthogonallyFrom<Motor> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       25        0
    //    simd3        1        3        0
    //    simd4        2        7        0
    // Totals...
    // yes simd       18       35        0
    //  no simd       26       62        0
    fn reject_orthogonally_from(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[e12345]) * self.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other[e12345]) * self.group1(),
            // e15, e25, e35, scalar
            Simd32x4::from([other[e12345], other[e12345], other[e12345], 1.0])
                * self.group2().xyz().with_w(
                    (self[scalar] * other[e12345])
                        - (self[e41] * other[e235])
                        - (self[e42] * other[e315])
                        - (self[e43] * other[e125])
                        - (self[e23] * other[e415])
                        - (self[e31] * other[e425])
                        - (self[e12] * other[e435]),
                ),
        );
        let right_anti_dual = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e3215
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group0().with_w(anti_wedge[scalar]),
            // e23, e31, e12, e45
            ((Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0().xyz()) + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group1().xyz()))
                .with_w(anti_wedge[e45] * right_anti_dual[scalar]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (anti_wedge[e15] * right_anti_dual[scalar]) + (anti_wedge[scalar] * right_anti_dual[e15]),
                (anti_wedge[e25] * right_anti_dual[scalar]) + (anti_wedge[scalar] * right_anti_dual[e25]),
                (anti_wedge[e35] * right_anti_dual[scalar]) + (anti_wedge[scalar] * right_anti_dual[e35]),
                -(anti_wedge[e41] * right_anti_dual[e23]) - (anti_wedge[e42] * right_anti_dual[e31]) - (anti_wedge[e43] * right_anti_dual[e12]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                anti_wedge[e45] * right_anti_dual[e23],
                anti_wedge[e45] * right_anti_dual[e31],
                anti_wedge[e45] * right_anti_dual[e12],
                -(anti_wedge[e31] * right_anti_dual[e25])
                    - (anti_wedge[e12] * right_anti_dual[e35])
                    - (anti_wedge[e15] * right_anti_dual[e23])
                    - (anti_wedge[e25] * right_anti_dual[e31])
                    - (anti_wedge[e35] * right_anti_dual[e12]),
            ]) + (right_anti_dual.group1().zxyw() * anti_wedge.group0().yzx().with_w(anti_wedge[scalar]))
                - (right_anti_dual.group1().yzxx() * anti_wedge.group0().zxy().with_w(anti_wedge[e23])),
        );
    }
}
impl RejectOrthogonallyFrom<MultiVector> for AntiCircleRotor {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       88      116        0
    //    simd2        0        1        0
    //    simd3       20       36        0
    //    simd4       22       20        0
    // Totals...
    // yes simd      130      173        0
    //  no simd      236      306        0
    fn reject_orthogonally_from(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[scalar] * other[e12345])
                    - (self[e41] * other[e235])
                    - (self[e42] * other[e315])
                    - (self[e43] * other[e125])
                    - (self[e23] * other[e415])
                    - (self[e31] * other[e425])
                    - (self[e12] * other[e435])
                    - (self[e45] * other[e321])
                    - (self[e15] * other[e423])
                    - (self[e25] * other[e431])
                    - (self[e35] * other[e412]),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e41] * other[e3215]) + (self[e31] * other[e4125]),
                (self[e42] * other[e3215]) + (self[e12] * other[e4235]),
                (self[e43] * other[e3215]) + (self[e23] * other[e4315]),
                -(self[e43] * other[e4125]) - (self[e45] * other[e1234]),
            ]) - (Simd32x4::from([other[e1234], other[e1234], other[e1234], other[e4315]]) * self.group2().xyz().with_w(self[e42]))
                - (other.group9().yzxx() * self.group1().zxy().with_w(self[e41])),
            // e5
            (self[e45] * other[e3215]) + (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]),
            // e15, e25, e35, e45
            Simd32x4::from(other[e12345]) * self.group2().xyz().with_w(self[e45]),
            // e41, e42, e43
            Simd32x3::from(other[e12345]) * self.group0(),
            // e23, e31, e12
            Simd32x3::from(other[e12345]) * self.group1().xyz(),
            // e415, e425, e435, e321
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(0.0),
            // e1234
            0.0,
        );
        let right_anti_dual = MultiVector::from_groups(
            // scalar, e12345
            other.group0().yx() * Simd32x2::from([-1.0, 1.0]),
            // e1, e2, e3, e4
            other.group9().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e5
            other[e3215],
            // e15, e25, e35, e45
            other.group8().with_w(other[e321] * -1.0),
            // e41, e42, e43
            other.group7(),
            // e23, e31, e12
            other.group6().xyz(),
            // e415, e425, e435, e321
            other.group5().with_w(other[e45]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e423, e431, e412
            other.group4() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group3().xyz() * Simd32x3::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group1().xyz().with_w(other[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1234
            other[e4] * -1.0,
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                anti_wedge[scalar] * right_anti_dual[scalar],
                (anti_wedge[scalar] * right_anti_dual[e12345])
                    + (anti_wedge[e12345] * right_anti_dual[scalar])
                    + (anti_wedge[e1] * right_anti_dual[e4235])
                    + (anti_wedge[e2] * right_anti_dual[e4315])
                    + (anti_wedge[e3] * right_anti_dual[e4125])
                    + (anti_wedge[e4] * right_anti_dual[e3215])
                    + (anti_wedge[e5] * right_anti_dual[e1234])
                    + (anti_wedge[e4235] * right_anti_dual[e1])
                    + (anti_wedge[e4315] * right_anti_dual[e2])
                    + (anti_wedge[e4125] * right_anti_dual[e3])
                    + (anti_wedge[e3215] * right_anti_dual[e4])
                    + (anti_wedge[e1234] * right_anti_dual[e5])
                    - (anti_wedge[e15] * right_anti_dual[e423])
                    - (anti_wedge[e25] * right_anti_dual[e431])
                    - (anti_wedge[e35] * right_anti_dual[e412])
                    - (anti_wedge[e45] * right_anti_dual[e321])
                    - (anti_wedge[e41] * right_anti_dual[e235])
                    - (anti_wedge[e42] * right_anti_dual[e315])
                    - (anti_wedge[e43] * right_anti_dual[e125])
                    - (anti_wedge[e23] * right_anti_dual[e415])
                    - (anti_wedge[e31] * right_anti_dual[e425])
                    - (anti_wedge[e12] * right_anti_dual[e435])
                    - (anti_wedge[e415] * right_anti_dual[e23])
                    - (anti_wedge[e425] * right_anti_dual[e31])
                    - (anti_wedge[e435] * right_anti_dual[e12])
                    - (anti_wedge[e321] * right_anti_dual[e45])
                    - (anti_wedge[e423] * right_anti_dual[e15])
                    - (anti_wedge[e431] * right_anti_dual[e25])
                    - (anti_wedge[e412] * right_anti_dual[e35])
                    - (anti_wedge[e235] * right_anti_dual[e41])
                    - (anti_wedge[e315] * right_anti_dual[e42])
                    - (anti_wedge[e125] * right_anti_dual[e43]),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1()) + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1()),
            // e5
            (anti_wedge[scalar] * right_anti_dual[e5]) + (anti_wedge[e5] * right_anti_dual[scalar]),
            // e15, e25, e35, e45
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group3())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group3())
                + (Simd32x4::from(right_anti_dual[e5]) * anti_wedge.group1())
                - (Simd32x4::from(anti_wedge[e5]) * right_anti_dual.group1()),
            // e41, e42, e43
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group4())
                + (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group1().xyz())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group4())
                - (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group1().xyz()),
            // e23, e31, e12
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group5())
                + (anti_wedge.group1().yzx() * right_anti_dual.group1().zxy())
                - (anti_wedge.group1().zxy() * right_anti_dual.group1().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (anti_wedge[e4] * right_anti_dual[e15])
                    + (anti_wedge[e5] * right_anti_dual[e41])
                    + (anti_wedge[e15] * right_anti_dual[e4])
                    + (anti_wedge[e41] * right_anti_dual[e5]),
                (anti_wedge[e4] * right_anti_dual[e25])
                    + (anti_wedge[e5] * right_anti_dual[e42])
                    + (anti_wedge[e25] * right_anti_dual[e4])
                    + (anti_wedge[e42] * right_anti_dual[e5]),
                (anti_wedge[e4] * right_anti_dual[e35])
                    + (anti_wedge[e5] * right_anti_dual[e43])
                    + (anti_wedge[e35] * right_anti_dual[e4])
                    + (anti_wedge[e43] * right_anti_dual[e5]),
                -(anti_wedge[e1] * right_anti_dual[e23])
                    - (anti_wedge[e2] * right_anti_dual[e31])
                    - (anti_wedge[e3] * right_anti_dual[e12])
                    - (anti_wedge[e12] * right_anti_dual[e3]),
            ]) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group6())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group6())
                - (right_anti_dual.group1().xyzy() * anti_wedge.group3().www().with_w(anti_wedge[e31]))
                - (right_anti_dual.group3().www() * anti_wedge.group1().xyz()).with_w(anti_wedge[e23] * right_anti_dual[e1]),
            // e423, e431, e412
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group7())
                + (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group7())
                + (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group5())
                + (anti_wedge.group4().yzx() * right_anti_dual.group1().zxy())
                + (right_anti_dual.group4().yzx() * anti_wedge.group1().zxy())
                - (anti_wedge.group4().zxy() * right_anti_dual.group1().yzx())
                - (right_anti_dual.group4().zxy() * anti_wedge.group1().yzx()),
            // e235, e315, e125
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group8())
                + (Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group8())
                + (Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group5())
                + (anti_wedge.group1().yzx() * right_anti_dual.group3().zxy())
                + (anti_wedge.group3().zxy() * right_anti_dual.group1().yzx())
                - (anti_wedge.group1().zxy() * right_anti_dual.group3().yzx())
                - (anti_wedge.group3().yzx() * right_anti_dual.group1().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (anti_wedge[e3] * right_anti_dual[e425])
                    + (anti_wedge[e4] * right_anti_dual[e235])
                    + (anti_wedge[e45] * right_anti_dual[e23])
                    + (anti_wedge[e435] * right_anti_dual[e2]),
                (anti_wedge[e1] * right_anti_dual[e435])
                    + (anti_wedge[e4] * right_anti_dual[e315])
                    + (anti_wedge[e45] * right_anti_dual[e31])
                    + (anti_wedge[e415] * right_anti_dual[e3]),
                (anti_wedge[e2] * right_anti_dual[e415])
                    + (anti_wedge[e4] * right_anti_dual[e125])
                    + (anti_wedge[e45] * right_anti_dual[e12])
                    + (anti_wedge[e425] * right_anti_dual[e1]),
                -(anti_wedge[e1] * right_anti_dual[e235])
                    - (anti_wedge[e2] * right_anti_dual[e315])
                    - (anti_wedge[e3] * right_anti_dual[e125])
                    - (anti_wedge[e5] * right_anti_dual[e321]),
            ]) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group9())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group9())
                + (Simd32x4::from([right_anti_dual[e5], right_anti_dual[e5], right_anti_dual[e5], right_anti_dual[e3]]) * anti_wedge.group7().with_w(anti_wedge[e125]))
                + (anti_wedge.group5() * right_anti_dual.group3().www()).with_w(anti_wedge[e315] * right_anti_dual[e2])
                + (anti_wedge.group4().yzx() * right_anti_dual.group3().zxy()).with_w(anti_wedge[e235] * right_anti_dual[e1])
                + (right_anti_dual.group4().yzx() * anti_wedge.group3().zxy()).with_w(anti_wedge[e321] * right_anti_dual[e5])
                - (Simd32x4::from([anti_wedge[e5], anti_wedge[e5], anti_wedge[e5], anti_wedge[e15]]) * right_anti_dual.group7().with_w(right_anti_dual[e23]))
                - (right_anti_dual.group3().yzxx() * anti_wedge.group4().zxy().with_w(anti_wedge[e23]))
                - (anti_wedge.group8() * right_anti_dual.group1().www()).with_w(anti_wedge[e31] * right_anti_dual[e25])
                - (right_anti_dual.group4().zxy() * anti_wedge.group3().yzx()).with_w(anti_wedge[e12] * right_anti_dual[e35])
                - (anti_wedge.group1().yzx() * right_anti_dual.group6().zxy()).with_w(anti_wedge[e25] * right_anti_dual[e31])
                - (anti_wedge.group6().yzx() * right_anti_dual.group1().zxy()).with_w(anti_wedge[e35] * right_anti_dual[e12]),
            // e1234
            (anti_wedge[scalar] * right_anti_dual[e1234])
                + (anti_wedge[e1] * right_anti_dual[e423])
                + (anti_wedge[e2] * right_anti_dual[e431])
                + (anti_wedge[e3] * right_anti_dual[e412])
                + (anti_wedge[e4] * right_anti_dual[e321])
                + (anti_wedge[e1234] * right_anti_dual[scalar])
                - (anti_wedge[e41] * right_anti_dual[e23])
                - (anti_wedge[e42] * right_anti_dual[e31])
                - (anti_wedge[e43] * right_anti_dual[e12])
                - (anti_wedge[e23] * right_anti_dual[e41])
                - (anti_wedge[e31] * right_anti_dual[e42])
                - (anti_wedge[e12] * right_anti_dual[e43])
                - (anti_wedge[e321] * right_anti_dual[e4])
                - (anti_wedge[e423] * right_anti_dual[e1])
                - (anti_wedge[e431] * right_anti_dual[e2])
                - (anti_wedge[e412] * right_anti_dual[e3]),
        );
    }
}
impl RejectOrthogonallyFrom<Plane> for AntiCircleRotor {
    type Output = Dipole;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       13        0
    //    simd3        2        5        0
    //    simd4        1        2        0
    // Totals...
    // yes simd       10       20        0
    //  no simd       17       36        0
    fn reject_orthogonally_from(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = RoundPoint::from_groups(
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e41] * other[e3215]) + (self[e31] * other[e4125]),
                (self[e42] * other[e3215]) + (self[e12] * other[e4235]),
                (self[e43] * other[e3215]) + (self[e23] * other[e4315]),
                -(self[e42] * other[e4315]) - (self[e43] * other[e4125]),
            ]) - (other.group0().yzxx() * self.group1().zxy().with_w(self[e41])),
            // e5
            (self[e45] * other[e3215]) + (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]),
        );
        let right_anti_dual = AntiPlane::from_groups(/* e1, e2, e3, e5 */ other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]));
        return Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group0().xyz(),
            // e23, e31, e12, e45
            ((right_anti_dual.group0().zxy() * anti_wedge.group0().yzx()) - (right_anti_dual.group0().yzx() * anti_wedge.group0().zxy()))
                .with_w(right_anti_dual[e5] * anti_wedge[e4]),
            // e15, e25, e35
            (Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group0().xyz()) - (Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group0().xyz()),
        );
    }
}
impl RejectOrthogonallyFrom<Sphere> for AntiCircleRotor {
    type Output = Dipole;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       13        0
    //    simd3        2        5        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       12       22        0
    //  no simd       25       44        0
    fn reject_orthogonally_from(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = RoundPoint::from_groups(
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e41] * other[e3215]) + (self[e31] * other[e4125]),
                (self[e42] * other[e3215]) + (self[e12] * other[e4235]),
                (self[e43] * other[e3215]) + (self[e23] * other[e4315]),
                -(self[e43] * other[e4125]) - (self[e45] * other[e1234]),
            ]) - (Simd32x4::from([other[e1234], other[e1234], other[e1234], other[e4315]]) * self.group2().xyz().with_w(self[e42]))
                - (other.group0().yzxx() * self.group1().zxy().with_w(self[e41])),
            // e5
            (self[e45] * other[e3215]) + (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]),
        );
        let right_anti_dual = RoundPoint::from_groups(
            // e1, e2, e3, e4
            other.group0().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e5
            other[e3215],
        );
        return Dipole::from_groups(
            // e41, e42, e43
            (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group0().xyz()) - (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group0().xyz()),
            // e23, e31, e12, e45
            (anti_wedge.group0().yzxw() * right_anti_dual.group0().zxy().with_w(right_anti_dual[e5]))
                - (anti_wedge.group0().zxy() * right_anti_dual.group0().yzx()).with_w(anti_wedge[e5] * right_anti_dual[e4]),
            // e15, e25, e35
            (Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group0().xyz()) - (Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group0().xyz()),
        );
    }
}
impl RejectOrthogonallyFrom<VersorEven> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       27       39        0
    //    simd3        1        5        0
    //    simd4        5       10        0
    // Totals...
    // yes simd       33       54        0
    //  no simd       50       94        0
    fn reject_orthogonally_from(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[e12345]) * self.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other[e12345]) * self.group1(),
            // e15, e25, e35, scalar
            Simd32x4::from([other[e12345], other[e12345], other[e12345], 1.0])
                * self.group2().xyz().with_w(
                    (self[scalar] * other[e12345])
                        - (self[e41] * other[e235])
                        - (self[e42] * other[e315])
                        - (self[e43] * other[e125])
                        - (self[e23] * other[e415])
                        - (self[e31] * other[e425])
                        - (self[e12] * other[e435])
                        - (self[e45] * other[e321])
                        - (self[e15] * other[e423])
                        - (self[e25] * other[e431])
                        - (self[e35] * other[e412]),
                ),
        );
        let right_anti_dual = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e1234
            other.group2().xyz().with_w(other[e4]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            other.group3().xyz().with_w(other[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0().xyz()) + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group0()))
                .with_w(anti_wedge[scalar] * right_anti_dual[scalar]),
            // e23, e31, e12, e45
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1()) + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                anti_wedge[scalar] * right_anti_dual[e15],
                anti_wedge[scalar] * right_anti_dual[e25],
                anti_wedge[scalar] * right_anti_dual[e35],
                -(anti_wedge[e41] * right_anti_dual[e23])
                    - (anti_wedge[e42] * right_anti_dual[e31])
                    - (anti_wedge[e43] * right_anti_dual[e12])
                    - (anti_wedge[e23] * right_anti_dual[e41])
                    - (anti_wedge[e31] * right_anti_dual[e42])
                    - (anti_wedge[e12] * right_anti_dual[e43]),
            ]) + (anti_wedge.group2() * right_anti_dual.group0().www().with_w(right_anti_dual[e1234])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (anti_wedge[e23] * right_anti_dual[e45])
                    + (anti_wedge[e45] * right_anti_dual[e23])
                    + (anti_wedge[e35] * right_anti_dual[e42])
                    + (anti_wedge[scalar] * right_anti_dual[e4235]),
                (anti_wedge[e31] * right_anti_dual[e45])
                    + (anti_wedge[e45] * right_anti_dual[e31])
                    + (anti_wedge[e15] * right_anti_dual[e43])
                    + (anti_wedge[scalar] * right_anti_dual[e4315]),
                (anti_wedge[e12] * right_anti_dual[e45])
                    + (anti_wedge[e45] * right_anti_dual[e12])
                    + (anti_wedge[e25] * right_anti_dual[e41])
                    + (anti_wedge[scalar] * right_anti_dual[e4125]),
                -(anti_wedge[e12] * right_anti_dual[e35])
                    - (anti_wedge[e15] * right_anti_dual[e23])
                    - (anti_wedge[e25] * right_anti_dual[e31])
                    - (anti_wedge[e35] * right_anti_dual[e12]),
            ]) + (anti_wedge.group0().yzx() * right_anti_dual.group2().zxy()).with_w(anti_wedge[scalar] * right_anti_dual[e3215])
                - (right_anti_dual.group2().yzxx() * anti_wedge.group0().zxy().with_w(anti_wedge[e23]))
                - (anti_wedge.group2().yzx() * right_anti_dual.group0().zxy()).with_w(anti_wedge[e31] * right_anti_dual[e25]),
        );
    }
}
impl RejectOrthogonallyFrom<VersorOdd> for AntiCircleRotor {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       31        0
    //    simd3        1        4        0
    //    simd4        6        9        0
    // Totals...
    // yes simd       20       44        0
    //  no simd       40       79        0
    fn reject_orthogonally_from(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = RoundPoint::from_groups(
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e41] * other[e3215]) + (self[e31] * other[e4125]),
                (self[e42] * other[e3215]) + (self[e12] * other[e4235]),
                (self[e43] * other[e3215]) + (self[e23] * other[e4315]),
                -(self[e43] * other[e4125]) - (self[e45] * other[e1234]),
            ]) - (other.group3().yzxx() * self.group1().zxy().with_w(self[e41]))
                - (other.group2().www() * self.group2().xyz()).with_w(self[e42] * other[e4315]),
            // e5
            (self[e45] * other[e3215]) + (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]),
        );
        let right_anti_dual = VersorEven::from_groups(
            // e423, e431, e412, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            other.group2().xyz().with_w(other[e3215]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e4
            other.group3().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group3().xyz()) - (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group0().xyz()),
            // e23, e31, e12, e45
            (anti_wedge.group0().yzxw() * right_anti_dual.group3().zxy().with_w(right_anti_dual[e5]))
                - (anti_wedge.group0().zxy() * right_anti_dual.group3().yzx()).with_w(anti_wedge[e5] * right_anti_dual[e4]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                anti_wedge[e5] * right_anti_dual[e1] * -1.0,
                anti_wedge[e5] * right_anti_dual[e2] * -1.0,
                anti_wedge[e5] * right_anti_dual[e3] * -1.0,
                (anti_wedge[e2] * right_anti_dual[e431]) + (anti_wedge[e3] * right_anti_dual[e412]) + (anti_wedge[e4] * right_anti_dual[e321]),
            ]) + (anti_wedge.group0().xyzx() * right_anti_dual.group2().www().with_w(right_anti_dual[e423])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (anti_wedge[e3] * right_anti_dual[e425]) + (anti_wedge[e4] * right_anti_dual[e235]),
                (anti_wedge[e1] * right_anti_dual[e435]) + (anti_wedge[e4] * right_anti_dual[e315]),
                (anti_wedge[e2] * right_anti_dual[e415]) + (anti_wedge[e4] * right_anti_dual[e125]),
                -(anti_wedge[e3] * right_anti_dual[e125]) - (anti_wedge[e5] * right_anti_dual[e321]),
            ]) - (Simd32x4::from([anti_wedge[e5], anti_wedge[e5], anti_wedge[e5], right_anti_dual[e315]]) * right_anti_dual.group0().xyz().with_w(anti_wedge[e2]))
                - (anti_wedge.group0().yzxx() * right_anti_dual.group1().zxy().with_w(right_anti_dual[e235])),
        );
    }
}
impl std::ops::Div<reject_orthogonally_from> for AntiDipoleInversion {
    type Output = reject_orthogonally_from_partial<AntiDipoleInversion>;
    fn div(self, _rhs: reject_orthogonally_from) -> Self::Output {
        reject_orthogonally_from_partial(self)
    }
}
impl RejectOrthogonallyFrom<AntiCircleRotor> for AntiDipoleInversion {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       10        0
    //    simd3        0        2        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        9       16        0
    //  no simd        9       32        0
    fn reject_orthogonally_from(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Scalar::from_groups(
            // scalar
            -(other[e41] * self[e235])
                - (other[e42] * self[e315])
                - (other[e43] * self[e125])
                - (other[e23] * self[e415])
                - (other[e31] * self[e425])
                - (other[e12] * self[e435])
                - (other[e45] * self[e321])
                - (other[e15] * self[e423])
                - (other[e25] * self[e431])
                - (other[e35] * self[e412]),
        );
        let right_anti_dual = CircleRotor::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e12345
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1(),
            // e235, e315, e125, e12345
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group2(),
        );
    }
}
impl RejectOrthogonallyFrom<AntiDipoleInversion> for AntiDipoleInversion {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       23       41        0
    //    simd3        2        5        0
    //    simd4        5        6        0
    // Totals...
    // yes simd       30       52        0
    //  no simd       49       80        0
    fn reject_orthogonally_from(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = RoundPoint::from_groups(
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e415] * self[e321]) + (other[e321] * self[e415]) + (other[e315] * self[e412]),
                (other[e423] * self[e125]) + (other[e425] * self[e321]) + (other[e321] * self[e425]) + (other[e125] * self[e423]),
                (other[e431] * self[e235]) + (other[e435] * self[e321]) + (other[e321] * self[e435]) + (other[e235] * self[e431]),
                -(other[e412] * self[e435]) - (other[e415] * self[e423]) - (other[e425] * self[e431]) - (other[e435] * self[e412]),
            ]) - (other.group0().yzx() * self.group2().zxy()).with_w(other[e423] * self[e415])
                - (self.group0().yzx() * other.group2().zxy()).with_w(other[e431] * self[e425]),
            // e5
            -(other[e415] * self[e235])
                - (other[e425] * self[e315])
                - (other[e435] * self[e125])
                - (other[e235] * self[e415])
                - (other[e315] * self[e425])
                - (other[e125] * self[e435]),
        );
        let right_anti_dual = DipoleInversion::from_groups(
            // e41, e42, e43
            other.group0(),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            other.group3() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return CircleRotor::from_groups(
            // e423, e431, e412
            (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group1().xyz()) + (right_anti_dual.group0().yzx() * anti_wedge.group0().zxy())
                - (right_anti_dual.group0().zxy() * anti_wedge.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (right_anti_dual[e41] * anti_wedge[e5]) + (right_anti_dual[e15] * anti_wedge[e4]),
                (right_anti_dual[e42] * anti_wedge[e5]) + (right_anti_dual[e25] * anti_wedge[e4]),
                (right_anti_dual[e43] * anti_wedge[e5]) + (right_anti_dual[e35] * anti_wedge[e4]),
                -(right_anti_dual[e31] * anti_wedge[e2]) - (right_anti_dual[e12] * anti_wedge[e3]),
            ]) - (right_anti_dual.group1().wwwx() * anti_wedge.group0().xyzx()),
            // e235, e315, e125, e12345
            Simd32x4::from([
                right_anti_dual[e25] * anti_wedge[e3] * -1.0,
                right_anti_dual[e35] * anti_wedge[e1] * -1.0,
                right_anti_dual[e15] * anti_wedge[e2] * -1.0,
                (right_anti_dual[e4315] * anti_wedge[e2]) + (right_anti_dual[e4125] * anti_wedge[e3]) + (right_anti_dual[e3215] * anti_wedge[e4]),
            ]) + (Simd32x4::from(anti_wedge[e5]) * right_anti_dual.group1().xyz().with_w(right_anti_dual[e1234]))
                + (anti_wedge.group0().yzxx() * right_anti_dual.group2().zxy().with_w(right_anti_dual[e4235])),
        );
    }
}
impl RejectOrthogonallyFrom<AntiDualNum> for AntiDipoleInversion {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        5        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0       21        0
    fn reject_orthogonally_from(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(other[e3215]) * self.group0().with_w(self[e4]),
            // e15, e25, e35, e3215
            other.group0().xx().with_zw(other[e3215], 0.0) * Simd32x3::from(1.0).with_w(0.0) * self.group1().xyz().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
        );
        let right_anti_dual = DualNum::from_groups(/* e5, e12345 */ other.group0());
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x3::from(0.0).with_w(anti_wedge[scalar] * right_anti_dual[e12345]),
            // e235, e315, e125, e5
            Simd32x4::from(right_anti_dual[e5]) * anti_wedge.group0(),
        );
    }
}
impl RejectOrthogonallyFrom<AntiFlatPoint> for AntiDipoleInversion {
    type Output = Line;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd3        1        4        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        6       14        0
    //  no simd       11       28        0
    fn reject_orthogonally_from(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiPlane::from_groups(
            // e1, e2, e3, e5
            Simd32x4::from([
                (self[e412] * other[e315]) + (self[e415] * other[e321]),
                (self[e423] * other[e125]) + (self[e425] * other[e321]),
                (self[e431] * other[e235]) + (self[e435] * other[e321]),
                -(self[e425] * other[e315]) - (self[e435] * other[e125]),
            ]) - (other.group0().zxyx() * self.group0().yzx().with_w(self[e415])),
        );
        let right_anti_dual = FlatPoint::from_groups(/* e15, e25, e35, e45 */ other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]));
        return Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(right_anti_dual[e45]) * anti_wedge.group0().xyz() * Simd32x3::from(-1.0),
            // e235, e315, e125
            (anti_wedge.group0().yzx() * right_anti_dual.group0().zxy()) - (anti_wedge.group0().zxy() * right_anti_dual.group0().yzx()),
        );
    }
}
impl RejectOrthogonallyFrom<AntiFlector> for AntiDipoleInversion {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       11        0
    //    simd3        1        2        0
    //    simd4        1        5        0
    // Totals...
    // yes simd        8       18        0
    //  no simd       13       37        0
    fn reject_orthogonally_from(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiPlane::from_groups(
            // e1, e2, e3, e5
            Simd32x4::from([
                (self[e412] * other[e315]) + (self[e415] * other[e321]),
                (self[e423] * other[e125]) + (self[e425] * other[e321]),
                (self[e431] * other[e235]) + (self[e435] * other[e321]),
                -(self[e425] * other[e315]) - (self[e435] * other[e125]),
            ]) - (other.group0().zxyx() * self.group0().yzx().with_w(self[e415])),
        );
        let right_anti_dual = Flector::from_groups(
            // e15, e25, e35, e45
            other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([right_anti_dual[e45], right_anti_dual[e45], right_anti_dual[e45], 1.0])
                * anti_wedge
                    .group0()
                    .xyz()
                    .with_w((anti_wedge[e1] * right_anti_dual[e4235]) + (anti_wedge[e2] * right_anti_dual[e4315]) + (anti_wedge[e3] * right_anti_dual[e4125]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            ((anti_wedge.group0().yzx() * right_anti_dual.group0().zxy()) - (anti_wedge.group0().zxy() * right_anti_dual.group0().yzx())).with_w(0.0),
        );
    }
}
impl RejectOrthogonallyFrom<AntiLine> for AntiDipoleInversion {
    type Output = Line;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5        6        0
    //    simd3        0        4        0
    // Totals...
    // yes simd        5       10        0
    //  no simd        5       18        0
    fn reject_orthogonally_from(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Scalar::from_groups(
            // scalar
            -(self[e423] * other[e15]) - (self[e431] * other[e25]) - (self[e412] * other[e35]) - (self[e415] * other[e23]) - (self[e425] * other[e31]) - (self[e435] * other[e12]),
        );
        let right_anti_dual = Line::from_groups(
            // e415, e425, e435
            other.group0() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group1() * Simd32x3::from(-1.0),
        );
        return Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e235, e315, e125
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group1(),
        );
    }
}
impl RejectOrthogonallyFrom<AntiMotor> for AntiDipoleInversion {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       12        0
    //    simd3        1        2        0
    //    simd4        0        7        0
    // Totals...
    // yes simd       10       21        0
    //  no simd       12       46        0
    fn reject_orthogonally_from(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([other[e3215], other[e3215], other[e3215], 1.0])
                * self.group0().with_w(
                    (self[e4] * other[e3215])
                        - (self[e423] * other[e15])
                        - (self[e431] * other[e25])
                        - (self[e412] * other[e35])
                        - (self[e415] * other[e23])
                        - (self[e425] * other[e31])
                        - (self[e435] * other[e12]),
                ),
            // e15, e25, e35, e3215
            Simd32x3::from(1.0).with_w(0.0) * other.group1().www().with_w(0.0) * self.group1().xyz().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
        );
        let right_anti_dual = Motor::from_groups(
            // e415, e425, e435, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([right_anti_dual[e415], right_anti_dual[e425], right_anti_dual[e435], 1.0])
                * anti_wedge.group0().www().with_w(
                    (anti_wedge[scalar] * right_anti_dual[e12345])
                        - (anti_wedge[e23] * right_anti_dual[e415])
                        - (anti_wedge[e31] * right_anti_dual[e425])
                        - (anti_wedge[e12] * right_anti_dual[e435]),
                ),
            // e235, e315, e125, e5
            ((Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group1().xyz()) + (Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group0().xyz()))
                .with_w(anti_wedge[scalar] * right_anti_dual[e5]),
        );
    }
}
impl RejectOrthogonallyFrom<AntiScalar> for AntiDipoleInversion {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd3        0        2        0
    //    simd4        0        6        0
    // Totals...
    // yes simd        0        9        0
    //  no simd        0       31        0
    fn reject_orthogonally_from(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[e12345]) * self.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other[e12345]) * self.group1(),
            // e235, e315, e125, e4
            Simd32x4::from(other[e12345]) * self.group2(),
            // e1, e2, e3, e5
            Simd32x4::from(other[e12345]) * self.group3(),
        );
        let right_anti_dual = Scalar::from_groups(/* scalar */ other[e12345] * -1.0);
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1(),
            // e235, e315, e125, e4
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group2(),
            // e1, e2, e3, e5
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group3(),
        );
    }
}
impl RejectOrthogonallyFrom<Circle> for AntiDipoleInversion {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       21       32        0
    //    simd3        4        8        0
    //    simd4        3        2        0
    // Totals...
    // yes simd       28       42        0
    //  no simd       45       64        0
    fn reject_orthogonally_from(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = RoundPoint::from_groups(
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e412] * other[e315]) + (self[e415] * other[e321]) + (self[e321] * other[e415]) + (self[e315] * other[e412]),
                (self[e423] * other[e125]) + (self[e425] * other[e321]) + (self[e321] * other[e425]) + (self[e125] * other[e423]),
                (self[e431] * other[e235]) + (self[e435] * other[e321]) + (self[e321] * other[e435]) + (self[e235] * other[e431]),
                -(self[e412] * other[e435]) - (self[e415] * other[e423]) - (self[e425] * other[e431]) - (self[e435] * other[e412]),
            ]) - (self.group0().yzx() * other.group2().zxy()).with_w(self[e423] * other[e415])
                - (other.group0().yzx() * self.group2().zxy()).with_w(self[e431] * other[e425]),
            // e5
            -(self[e415] * other[e235])
                - (self[e425] * other[e315])
                - (self[e435] * other[e125])
                - (self[e235] * other[e415])
                - (self[e315] * other[e425])
                - (self[e125] * other[e435]),
        );
        let right_anti_dual = Dipole::from_groups(
            // e41, e42, e43
            other.group0(),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35
            other.group2(),
        );
        return Circle::from_groups(
            // e423, e431, e412
            (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group1().xyz()) + (right_anti_dual.group0().yzx() * anti_wedge.group0().zxy())
                - (right_anti_dual.group0().zxy() * anti_wedge.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (right_anti_dual[e41] * anti_wedge[e5]) + (right_anti_dual[e15] * anti_wedge[e4]),
                (right_anti_dual[e42] * anti_wedge[e5]) + (right_anti_dual[e25] * anti_wedge[e4]),
                (right_anti_dual[e43] * anti_wedge[e5]) + (right_anti_dual[e35] * anti_wedge[e4]),
                -(right_anti_dual[e31] * anti_wedge[e2]) - (right_anti_dual[e12] * anti_wedge[e3]),
            ]) - (right_anti_dual.group1().wwwx() * anti_wedge.group0().xyzx()),
            // e235, e315, e125
            (Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group1().xyz()) + (right_anti_dual.group2().zxy() * anti_wedge.group0().yzx())
                - (right_anti_dual.group2().yzx() * anti_wedge.group0().zxy()),
        );
    }
}
impl RejectOrthogonallyFrom<CircleRotor> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       53        0
    //    simd3        3        8        0
    //    simd4        6        8        0
    // Totals...
    // yes simd       45       69        0
    //  no simd       69      109        0
    fn reject_orthogonally_from(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[e12345]) * self.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other[e12345]) * self.group1(),
            // e235, e315, e125, e4
            Simd32x4::from([other[e12345], other[e12345], other[e12345], 1.0])
                * self.group2().xyz().with_w(
                    (self[e4] * other[e12345])
                        - (self[e423] * other[e415])
                        - (self[e431] * other[e425])
                        - (self[e412] * other[e435])
                        - (self[e415] * other[e423])
                        - (self[e425] * other[e431])
                        - (self[e435] * other[e412]),
                ),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self[e415] * other[e321]) + (self[e321] * other[e415]) + (self[e315] * other[e412]) + (self[e1] * other[e12345]),
                (self[e425] * other[e321]) + (self[e321] * other[e425]) + (self[e125] * other[e423]) + (self[e2] * other[e12345]),
                (self[e435] * other[e321]) + (self[e321] * other[e435]) + (self[e235] * other[e431]) + (self[e3] * other[e12345]),
                -(self[e435] * other[e125]) - (self[e235] * other[e415]) - (self[e315] * other[e425]) - (self[e125] * other[e435]),
            ]) + (other.group2().yzxw() * self.group0().zxy().with_w(self[e5]))
                - (other.group2().zxyx() * self.group0().yzx().with_w(self[e415]))
                - (other.group0().yzx() * self.group2().zxy()).with_w(self[e425] * other[e315]),
        );
        let right_anti_dual = AntiCircleRotor::from_groups(
            // e41, e42, e43
            other.group0(),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, scalar
            other.group2() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (right_anti_dual[e42] * anti_wedge[e3]) + (right_anti_dual[e23] * anti_wedge[e4]) + (right_anti_dual[scalar] * anti_wedge[e423]),
                (right_anti_dual[e43] * anti_wedge[e1]) + (right_anti_dual[e31] * anti_wedge[e4]) + (right_anti_dual[scalar] * anti_wedge[e431]),
                (right_anti_dual[e41] * anti_wedge[e2]) + (right_anti_dual[e12] * anti_wedge[e4]) + (right_anti_dual[scalar] * anti_wedge[e412]),
                -(right_anti_dual[e42] * anti_wedge[e315])
                    - (right_anti_dual[e43] * anti_wedge[e125])
                    - (right_anti_dual[e23] * anti_wedge[e415])
                    - (right_anti_dual[e31] * anti_wedge[e425])
                    - (right_anti_dual[e12] * anti_wedge[e435])
                    - (right_anti_dual[e45] * anti_wedge[e321])
                    - (right_anti_dual[e15] * anti_wedge[e423])
                    - (right_anti_dual[e25] * anti_wedge[e431])
                    - (right_anti_dual[e35] * anti_wedge[e412]),
            ]) - (right_anti_dual.group0().zxy() * anti_wedge.group3().yzx()).with_w(right_anti_dual[e41] * anti_wedge[e235]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (right_anti_dual[e15] * anti_wedge[e4]) + (right_anti_dual[scalar] * anti_wedge[e415]),
                (right_anti_dual[e25] * anti_wedge[e4]) + (right_anti_dual[scalar] * anti_wedge[e425]),
                (right_anti_dual[e35] * anti_wedge[e4]) + (right_anti_dual[scalar] * anti_wedge[e435]),
                -(right_anti_dual[e31] * anti_wedge[e2]) - (right_anti_dual[e12] * anti_wedge[e3]),
            ]) + (right_anti_dual.group0() * anti_wedge.group3().www()).with_w(right_anti_dual[scalar] * anti_wedge[e321])
                - (right_anti_dual.group1().wwwx() * anti_wedge.group3().xyzx()),
            // e235, e315, e125, e5
            ((Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group2().xyz())
                + (Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group1().xyz())
                + (right_anti_dual.group2().zxy() * anti_wedge.group3().yzx())
                - (right_anti_dual.group2().yzx() * anti_wedge.group3().zxy()))
            .with_w(right_anti_dual[scalar] * anti_wedge[e5]),
            // e1, e2, e3, e4
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group3().xyz().with_w(anti_wedge[e4]),
        );
    }
}
impl RejectOrthogonallyFrom<Dipole> for AntiDipoleInversion {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       10        0
    //    simd3        0        4        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        9       16        0
    //  no simd        9       30        0
    fn reject_orthogonally_from(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Scalar::from_groups(
            // scalar
            -(self[e423] * other[e15])
                - (self[e431] * other[e25])
                - (self[e412] * other[e35])
                - (self[e415] * other[e23])
                - (self[e425] * other[e31])
                - (self[e435] * other[e12])
                - (self[e321] * other[e45])
                - (self[e235] * other[e41])
                - (self[e315] * other[e42])
                - (self[e125] * other[e43]),
        );
        let right_anti_dual = Circle::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125
            other.group2() * Simd32x3::from(-1.0),
        );
        return Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1(),
            // e235, e315, e125
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group2(),
        );
    }
}
impl RejectOrthogonallyFrom<DipoleInversion> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       33       50        0
    //    simd3        5       11        0
    //    simd4        7        8        0
    // Totals...
    // yes simd       45       69        0
    //  no simd       76      115        0
    fn reject_orthogonally_from(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiCircleRotor::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other[e1234]) * self.group1().xyz()) + (self.group0().zxy() * other.group3().yzx()) - (self.group0().yzx() * other.group3().zxy()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e423] * other[e3215]) + (self[e235] * other[e1234]),
                (self[e431] * other[e3215]) + (self[e315] * other[e1234]),
                (self[e412] * other[e3215]) + (self[e125] * other[e1234]),
                -(self[e425] * other[e4315]) - (self[e435] * other[e4125]),
            ]) - (self.group1().wwwx() * other.group3().xyzx()),
            // e15, e25, e35, scalar
            (Simd32x4::from(other[e3215]) * self.group1().xyz().with_w(self[e4]))
                + (other.group3().zxyx() * self.group2().yzx().with_w(self[e1]))
                + Simd32x3::from(0.0).with_w(
                    (self[e2] * other[e4315]) + (self[e3] * other[e4125]) + (self[e5] * other[e1234])
                        - (self[e431] * other[e25])
                        - (self[e412] * other[e35])
                        - (self[e415] * other[e23])
                        - (self[e425] * other[e31])
                        - (self[e435] * other[e12])
                        - (self[e321] * other[e45])
                        - (self[e235] * other[e41])
                        - (self[e315] * other[e42])
                        - (self[e125] * other[e43]),
                )
                - (self.group2().zxy() * other.group3().yzx()).with_w(self[e423] * other[e15]),
        );
        let right_anti_dual = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e4
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group3() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (anti_wedge[e42] * right_anti_dual[e3]) + (anti_wedge[e23] * right_anti_dual[e4]) + (anti_wedge[scalar] * right_anti_dual[e423]),
                (anti_wedge[e43] * right_anti_dual[e1]) + (anti_wedge[e31] * right_anti_dual[e4]) + (anti_wedge[scalar] * right_anti_dual[e431]),
                (anti_wedge[e41] * right_anti_dual[e2]) + (anti_wedge[e12] * right_anti_dual[e4]) + (anti_wedge[scalar] * right_anti_dual[e412]),
                -(anti_wedge[e42] * right_anti_dual[e315])
                    - (anti_wedge[e43] * right_anti_dual[e125])
                    - (anti_wedge[e23] * right_anti_dual[e415])
                    - (anti_wedge[e31] * right_anti_dual[e425])
                    - (anti_wedge[e12] * right_anti_dual[e435])
                    - (anti_wedge[e45] * right_anti_dual[e321])
                    - (anti_wedge[e15] * right_anti_dual[e423])
                    - (anti_wedge[e25] * right_anti_dual[e431])
                    - (anti_wedge[e35] * right_anti_dual[e412]),
            ]) - (anti_wedge.group0().zxy() * right_anti_dual.group3().yzx()).with_w(anti_wedge[e41] * right_anti_dual[e235]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (anti_wedge[e15] * right_anti_dual[e4]) + (anti_wedge[scalar] * right_anti_dual[e415]),
                (anti_wedge[e25] * right_anti_dual[e4]) + (anti_wedge[scalar] * right_anti_dual[e425]),
                (anti_wedge[e35] * right_anti_dual[e4]) + (anti_wedge[scalar] * right_anti_dual[e435]),
                -(anti_wedge[e31] * right_anti_dual[e2]) - (anti_wedge[e12] * right_anti_dual[e3]),
            ]) + (anti_wedge.group0() * right_anti_dual.group3().www()).with_w(anti_wedge[scalar] * right_anti_dual[e321])
                - (anti_wedge.group1().wwwx() * right_anti_dual.group3().xyzx()),
            // e235, e315, e125, e5
            ((Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group2().xyz())
                + (Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group1().xyz())
                + (anti_wedge.group2().zxy() * right_anti_dual.group3().yzx())
                - (anti_wedge.group2().yzx() * right_anti_dual.group3().zxy()))
            .with_w(anti_wedge[scalar] * right_anti_dual[e5]),
            // e1, e2, e3, e4
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group3().xyz().with_w(right_anti_dual[e4]),
        );
    }
}
impl RejectOrthogonallyFrom<DualNum> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd2        0        1        0
    //    simd3        0        1        0
    //    simd4        0        7        0
    // Totals...
    // yes simd        0        9        0
    //  no simd        0       33        0
    fn reject_orthogonally_from(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[e12345]) * self.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other[e12345]) * self.group1(),
            // e235, e315, e125, e4
            Simd32x4::from(other[e12345]) * self.group2(),
            // e1, e2, e3, e5
            Simd32x4::from(other[e12345]) * self.group3(),
        );
        let right_anti_dual = AntiDualNum::from_groups(/* e3215, scalar */ other.group0() * Simd32x2::from(-1.0));
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            right_anti_dual.group0().yy().with_zw(right_anti_dual[scalar], right_anti_dual[e3215]) * anti_wedge.group0().with_w(anti_wedge[e4]),
            // e415, e425, e435, e321
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1(),
            // e235, e315, e125, e5
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group2().xyz().with_w(anti_wedge[e5]),
            // e1, e2, e3, e4
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group3().xyz().with_w(anti_wedge[e4]),
        );
    }
}
impl RejectOrthogonallyFrom<FlatPoint> for AntiDipoleInversion {
    type Output = AntiFlatPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        7        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        3        8        0
    //  no simd        3       11        0
    fn reject_orthogonally_from(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiFlatPoint::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(-(self[e423] * other[e15]) - (self[e431] * other[e25]) - (self[e412] * other[e35]) - (self[e321] * other[e45]))
                * Simd32x4::from([other[e15] * -1.0, other[e25] * -1.0, other[e35] * -1.0, other[e45]]),
        );
    }
}
impl RejectOrthogonallyFrom<Flector> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       22        0
    //    simd3        4        9        0
    //    simd4        7        9        0
    // Totals...
    // yes simd       19       40        0
    //  no simd       48       85        0
    fn reject_orthogonally_from(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiCircleRotor::from_groups(
            // e41, e42, e43
            (self.group0().zxy() * other.group1().yzx()) - (self.group0().yzx() * other.group1().zxy()),
            // e23, e31, e12, e45
            Simd32x4::from([
                self[e423] * other[e3215],
                self[e431] * other[e3215],
                self[e412] * other[e3215],
                -(self[e425] * other[e4315]) - (self[e435] * other[e4125]),
            ]) - (self.group1().wwwx() * other.group1().xyzx()),
            // e15, e25, e35, scalar
            (Simd32x4::from(other[e3215]) * self.group1().xyz().with_w(self[e4]))
                + (other.group1().zxyx() * self.group2().yzx().with_w(self[e1]))
                + Simd32x3::from(0.0)
                    .with_w((self[e2] * other[e4315]) + (self[e3] * other[e4125]) - (self[e431] * other[e25]) - (self[e412] * other[e35]) - (self[e321] * other[e45]))
                - (self.group2().zxy() * other.group1().yzx()).with_w(self[e423] * other[e15]),
        );
        let right_anti_dual = AntiFlector::from_groups(
            // e235, e315, e125, e321
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                anti_wedge[e42] * right_anti_dual[e3],
                anti_wedge[e43] * right_anti_dual[e1],
                anti_wedge[e41] * right_anti_dual[e2],
                -(anti_wedge[e42] * right_anti_dual[e315]) - (anti_wedge[e43] * right_anti_dual[e125]) - (anti_wedge[e45] * right_anti_dual[e321]),
            ]) - (anti_wedge.group0().zxy() * right_anti_dual.group1().yzx()).with_w(anti_wedge[e41] * right_anti_dual[e235]),
            // e415, e425, e435, e321
            Simd32x3::from(0.0).with_w(-(anti_wedge[e31] * right_anti_dual[e2]) - (anti_wedge[e12] * right_anti_dual[e3]))
                + (anti_wedge.group0() * right_anti_dual.group1().www()).with_w(anti_wedge[scalar] * right_anti_dual[e321])
                - (anti_wedge.group1().wwwx() * right_anti_dual.group1().xyzx()),
            // e235, e315, e125, e5
            ((Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0().xyz())
                + (Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group1().xyz())
                + (anti_wedge.group2().zxy() * right_anti_dual.group1().yzx())
                - (anti_wedge.group2().yzx() * right_anti_dual.group1().zxy()))
            .with_w(anti_wedge[scalar] * right_anti_dual[e5]),
            // e1, e2, e3, e4
            Simd32x3::from(1.0).with_w(0.0) * anti_wedge.group2().www().with_w(0.0) * right_anti_dual.group1().xyz().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
        );
    }
}
impl RejectOrthogonallyFrom<Line> for AntiDipoleInversion {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       18        0
    //    simd3        2        5        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       14       24        0
    //  no simd       21       37        0
    fn reject_orthogonally_from(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = RoundPoint::from_groups(
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e412] * other[e315]) + (self[e321] * other[e415]),
                (self[e423] * other[e125]) + (self[e321] * other[e425]),
                (self[e431] * other[e235]) + (self[e321] * other[e435]),
                -(self[e431] * other[e425]) - (self[e412] * other[e435]),
            ]) - (self.group0().yzx() * other.group1().zxy()).with_w(self[e423] * other[e415]),
            // e5
            -(self[e415] * other[e235])
                - (self[e425] * other[e315])
                - (self[e435] * other[e125])
                - (self[e235] * other[e415])
                - (self[e315] * other[e425])
                - (self[e125] * other[e435]),
        );
        let right_anti_dual = AntiLine::from_groups(/* e23, e31, e12 */ other.group0(), /* e15, e25, e35 */ other.group1());
        return Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group0(),
            // e415, e425, e435, e321
            Simd32x4::from([anti_wedge[e4], anti_wedge[e4], anti_wedge[e4], 1.0])
                * right_anti_dual
                    .group1()
                    .with_w(-(right_anti_dual[e23] * anti_wedge[e1]) - (right_anti_dual[e31] * anti_wedge[e2]) - (right_anti_dual[e12] * anti_wedge[e3])),
            // e235, e315, e125
            (Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group0()) + (right_anti_dual.group1().zxy() * anti_wedge.group0().yzx())
                - (right_anti_dual.group1().yzx() * anti_wedge.group0().zxy()),
        );
    }
}
impl RejectOrthogonallyFrom<Motor> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       33        0
    //    simd3        3        7        0
    //    simd4        4        7        0
    // Totals...
    // yes simd       24       47        0
    //  no simd       42       82        0
    fn reject_orthogonally_from(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[e12345]) * self.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other[e12345]) * self.group1(),
            // e235, e315, e125, e4
            Simd32x4::from([other[e12345], other[e12345], other[e12345], 1.0])
                * self
                    .group2()
                    .xyz()
                    .with_w((self[e4] * other[e12345]) - (self[e423] * other[e415]) - (self[e431] * other[e425]) - (self[e412] * other[e435])),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self[e321] * other[e415]) + (self[e1] * other[e12345]),
                (self[e321] * other[e425]) + (self[e2] * other[e12345]),
                (self[e321] * other[e435]) + (self[e3] * other[e12345]),
                -(self[e425] * other[e315]) - (self[e435] * other[e125]) - (self[e235] * other[e415]) - (self[e315] * other[e425]) - (self[e125] * other[e435]),
            ]) + (self.group0().zxy() * other.group1().yzx()).with_w(self[e5] * other[e12345])
                - (other.group1().zxyx() * self.group0().yzx().with_w(self[e415])),
        );
        let right_anti_dual = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e3215
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                anti_wedge[e4] * right_anti_dual[e23],
                anti_wedge[e4] * right_anti_dual[e31],
                anti_wedge[e4] * right_anti_dual[e12],
                -(anti_wedge[e423] * right_anti_dual[e15])
                    - (anti_wedge[e431] * right_anti_dual[e25])
                    - (anti_wedge[e412] * right_anti_dual[e35])
                    - (anti_wedge[e415] * right_anti_dual[e23])
                    - (anti_wedge[e425] * right_anti_dual[e31])
                    - (anti_wedge[e435] * right_anti_dual[e12]),
            ]) + (anti_wedge.group0() * right_anti_dual.group0().www()).with_w(anti_wedge[e4] * right_anti_dual[e3215]),
            // e415, e425, e435, e321
            Simd32x4::from([
                anti_wedge[e4] * right_anti_dual[e15],
                anti_wedge[e4] * right_anti_dual[e25],
                anti_wedge[e4] * right_anti_dual[e35],
                -(anti_wedge[e1] * right_anti_dual[e23]) - (anti_wedge[e2] * right_anti_dual[e31]) - (anti_wedge[e3] * right_anti_dual[e12]),
            ]) + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1()),
            // e235, e315, e125, e5
            ((Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group0().xyz())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group2().xyz())
                + (anti_wedge.group3().yzx() * right_anti_dual.group1().zxy())
                - (anti_wedge.group3().zxy() * right_anti_dual.group1().yzx()))
            .with_w(anti_wedge[e5] * right_anti_dual[scalar]),
            // e1, e2, e3, e4
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group3().xyz().with_w(anti_wedge[e4]),
        );
    }
}
impl RejectOrthogonallyFrom<MultiVector> for AntiDipoleInversion {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      107      141        0
    //    simd2        0        1        0
    //    simd3       24       44        0
    //    simd4       24       20        0
    // Totals...
    // yes simd      155      206        0
    //  no simd      275      355        0
    fn reject_orthogonally_from(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e4] * other[e3215]) + (self[e1] * other[e4235]) + (self[e2] * other[e4315]) + (self[e3] * other[e4125]) + (self[e5] * other[e1234])
                    - (self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35])
                    - (self[e415] * other[e23])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e321] * other[e45])
                    - (self[e235] * other[e41])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e412] * other[e315]) + (self[e415] * other[e321]) + (self[e321] * other[e415]) + (self[e315] * other[e412]),
                (self[e423] * other[e125]) + (self[e425] * other[e321]) + (self[e321] * other[e425]) + (self[e125] * other[e423]),
                (self[e431] * other[e235]) + (self[e435] * other[e321]) + (self[e321] * other[e435]) + (self[e235] * other[e431]),
                -(self[e412] * other[e435]) - (self[e415] * other[e423]) - (self[e425] * other[e431]) - (self[e435] * other[e412]),
            ]) + (Simd32x4::from(other[e12345]) * self.group3().xyz().with_w(self[e4]))
                - (self.group0().yzx() * other.group8().zxy()).with_w(self[e423] * other[e415])
                - (other.group7().yzx() * self.group2().zxy()).with_w(self[e431] * other[e425]),
            // e5
            (self[e5] * other[e12345])
                - (self[e415] * other[e235])
                - (self[e425] * other[e315])
                - (self[e435] * other[e125])
                - (self[e235] * other[e415])
                - (self[e315] * other[e425])
                - (self[e125] * other[e435]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e415] * other[e3215]) + (self[e315] * other[e4125]),
                (self[e425] * other[e3215]) + (self[e125] * other[e4235]),
                (self[e435] * other[e3215]) + (self[e235] * other[e4315]),
                -(self[e425] * other[e4315]) - (self[e435] * other[e4125]),
            ]) - (other.group9().yzxx() * self.group2().zxy().with_w(self[e415])),
            // e41, e42, e43
            (Simd32x3::from(other[e1234]) * self.group1().xyz()) + (self.group0().zxy() * other.group9().yzx()) - (self.group0().yzx() * other.group9().zxy()),
            // e23, e31, e12
            (Simd32x3::from(other[e3215]) * self.group0()) + (Simd32x3::from(other[e1234]) * self.group2().xyz()) - (Simd32x3::from(self[e321]) * other.group9().xyz()),
            // e415, e425, e435, e321
            Simd32x4::from(other[e12345]) * self.group1(),
            // e423, e431, e412
            Simd32x3::from(other[e12345]) * self.group0(),
            // e235, e315, e125
            Simd32x3::from(other[e12345]) * self.group2().xyz(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(0.0),
            // e1234
            0.0,
        );
        let right_anti_dual = MultiVector::from_groups(
            // scalar, e12345
            other.group0().yx() * Simd32x2::from([-1.0, 1.0]),
            // e1, e2, e3, e4
            other.group9().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e5
            other[e3215],
            // e15, e25, e35, e45
            other.group8().with_w(other[e321] * -1.0),
            // e41, e42, e43
            other.group7(),
            // e23, e31, e12
            other.group6().xyz(),
            // e415, e425, e435, e321
            other.group5().with_w(other[e45]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e423, e431, e412
            other.group4() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group3().xyz() * Simd32x3::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group1().xyz().with_w(other[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1234
            other[e4] * -1.0,
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                anti_wedge[scalar] * right_anti_dual[scalar],
                (anti_wedge[scalar] * right_anti_dual[e12345])
                    + (anti_wedge[e12345] * right_anti_dual[scalar])
                    + (anti_wedge[e1] * right_anti_dual[e4235])
                    + (anti_wedge[e2] * right_anti_dual[e4315])
                    + (anti_wedge[e3] * right_anti_dual[e4125])
                    + (anti_wedge[e4] * right_anti_dual[e3215])
                    + (anti_wedge[e5] * right_anti_dual[e1234])
                    + (anti_wedge[e4235] * right_anti_dual[e1])
                    + (anti_wedge[e4315] * right_anti_dual[e2])
                    + (anti_wedge[e4125] * right_anti_dual[e3])
                    + (anti_wedge[e3215] * right_anti_dual[e4])
                    + (anti_wedge[e1234] * right_anti_dual[e5])
                    - (anti_wedge[e15] * right_anti_dual[e423])
                    - (anti_wedge[e25] * right_anti_dual[e431])
                    - (anti_wedge[e35] * right_anti_dual[e412])
                    - (anti_wedge[e45] * right_anti_dual[e321])
                    - (anti_wedge[e41] * right_anti_dual[e235])
                    - (anti_wedge[e42] * right_anti_dual[e315])
                    - (anti_wedge[e43] * right_anti_dual[e125])
                    - (anti_wedge[e23] * right_anti_dual[e415])
                    - (anti_wedge[e31] * right_anti_dual[e425])
                    - (anti_wedge[e12] * right_anti_dual[e435])
                    - (anti_wedge[e415] * right_anti_dual[e23])
                    - (anti_wedge[e425] * right_anti_dual[e31])
                    - (anti_wedge[e435] * right_anti_dual[e12])
                    - (anti_wedge[e321] * right_anti_dual[e45])
                    - (anti_wedge[e423] * right_anti_dual[e15])
                    - (anti_wedge[e431] * right_anti_dual[e25])
                    - (anti_wedge[e412] * right_anti_dual[e35])
                    - (anti_wedge[e235] * right_anti_dual[e41])
                    - (anti_wedge[e315] * right_anti_dual[e42])
                    - (anti_wedge[e125] * right_anti_dual[e43]),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1()) + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1()),
            // e5
            (anti_wedge[scalar] * right_anti_dual[e5]) + (anti_wedge[e5] * right_anti_dual[scalar]),
            // e15, e25, e35, e45
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group3())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group3())
                + (Simd32x4::from(right_anti_dual[e5]) * anti_wedge.group1())
                - (Simd32x4::from(anti_wedge[e5]) * right_anti_dual.group1()),
            // e41, e42, e43
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group4())
                + (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group1().xyz())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group4())
                - (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group1().xyz()),
            // e23, e31, e12
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group5())
                + (anti_wedge.group1().yzx() * right_anti_dual.group1().zxy())
                - (anti_wedge.group1().zxy() * right_anti_dual.group1().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (anti_wedge[e4] * right_anti_dual[e15])
                    + (anti_wedge[e5] * right_anti_dual[e41])
                    + (anti_wedge[e15] * right_anti_dual[e4])
                    + (anti_wedge[e41] * right_anti_dual[e5]),
                (anti_wedge[e4] * right_anti_dual[e25])
                    + (anti_wedge[e5] * right_anti_dual[e42])
                    + (anti_wedge[e25] * right_anti_dual[e4])
                    + (anti_wedge[e42] * right_anti_dual[e5]),
                (anti_wedge[e4] * right_anti_dual[e35])
                    + (anti_wedge[e5] * right_anti_dual[e43])
                    + (anti_wedge[e35] * right_anti_dual[e4])
                    + (anti_wedge[e43] * right_anti_dual[e5]),
                -(anti_wedge[e1] * right_anti_dual[e23])
                    - (anti_wedge[e2] * right_anti_dual[e31])
                    - (anti_wedge[e3] * right_anti_dual[e12])
                    - (anti_wedge[e12] * right_anti_dual[e3]),
            ]) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group6())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group6())
                - (right_anti_dual.group1().xyzy() * anti_wedge.group3().www().with_w(anti_wedge[e31]))
                - (right_anti_dual.group3().www() * anti_wedge.group1().xyz()).with_w(anti_wedge[e23] * right_anti_dual[e1]),
            // e423, e431, e412
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group7())
                + (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group7())
                + (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group5())
                + (anti_wedge.group4().yzx() * right_anti_dual.group1().zxy())
                + (right_anti_dual.group4().yzx() * anti_wedge.group1().zxy())
                - (anti_wedge.group4().zxy() * right_anti_dual.group1().yzx())
                - (right_anti_dual.group4().zxy() * anti_wedge.group1().yzx()),
            // e235, e315, e125
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group8())
                + (Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group8())
                + (Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group5())
                + (anti_wedge.group1().yzx() * right_anti_dual.group3().zxy())
                + (anti_wedge.group3().zxy() * right_anti_dual.group1().yzx())
                - (anti_wedge.group1().zxy() * right_anti_dual.group3().yzx())
                - (anti_wedge.group3().yzx() * right_anti_dual.group1().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (anti_wedge[e3] * right_anti_dual[e425])
                    + (anti_wedge[e4] * right_anti_dual[e235])
                    + (anti_wedge[e45] * right_anti_dual[e23])
                    + (anti_wedge[e435] * right_anti_dual[e2]),
                (anti_wedge[e1] * right_anti_dual[e435])
                    + (anti_wedge[e4] * right_anti_dual[e315])
                    + (anti_wedge[e45] * right_anti_dual[e31])
                    + (anti_wedge[e415] * right_anti_dual[e3]),
                (anti_wedge[e2] * right_anti_dual[e415])
                    + (anti_wedge[e4] * right_anti_dual[e125])
                    + (anti_wedge[e45] * right_anti_dual[e12])
                    + (anti_wedge[e425] * right_anti_dual[e1]),
                -(anti_wedge[e1] * right_anti_dual[e235])
                    - (anti_wedge[e2] * right_anti_dual[e315])
                    - (anti_wedge[e3] * right_anti_dual[e125])
                    - (anti_wedge[e5] * right_anti_dual[e321]),
            ]) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group9())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group9())
                + (Simd32x4::from([right_anti_dual[e5], right_anti_dual[e5], right_anti_dual[e5], right_anti_dual[e3]]) * anti_wedge.group7().with_w(anti_wedge[e125]))
                + (anti_wedge.group5() * right_anti_dual.group3().www()).with_w(anti_wedge[e315] * right_anti_dual[e2])
                + (anti_wedge.group4().yzx() * right_anti_dual.group3().zxy()).with_w(anti_wedge[e235] * right_anti_dual[e1])
                + (right_anti_dual.group4().yzx() * anti_wedge.group3().zxy()).with_w(anti_wedge[e321] * right_anti_dual[e5])
                - (Simd32x4::from([anti_wedge[e5], anti_wedge[e5], anti_wedge[e5], anti_wedge[e15]]) * right_anti_dual.group7().with_w(right_anti_dual[e23]))
                - (right_anti_dual.group3().yzxx() * anti_wedge.group4().zxy().with_w(anti_wedge[e23]))
                - (anti_wedge.group8() * right_anti_dual.group1().www()).with_w(anti_wedge[e31] * right_anti_dual[e25])
                - (right_anti_dual.group4().zxy() * anti_wedge.group3().yzx()).with_w(anti_wedge[e12] * right_anti_dual[e35])
                - (anti_wedge.group1().yzx() * right_anti_dual.group6().zxy()).with_w(anti_wedge[e25] * right_anti_dual[e31])
                - (anti_wedge.group6().yzx() * right_anti_dual.group1().zxy()).with_w(anti_wedge[e35] * right_anti_dual[e12]),
            // e1234
            (anti_wedge[scalar] * right_anti_dual[e1234])
                + (anti_wedge[e1] * right_anti_dual[e423])
                + (anti_wedge[e2] * right_anti_dual[e431])
                + (anti_wedge[e3] * right_anti_dual[e412])
                + (anti_wedge[e4] * right_anti_dual[e321])
                + (anti_wedge[e1234] * right_anti_dual[scalar])
                - (anti_wedge[e41] * right_anti_dual[e23])
                - (anti_wedge[e42] * right_anti_dual[e31])
                - (anti_wedge[e43] * right_anti_dual[e12])
                - (anti_wedge[e23] * right_anti_dual[e41])
                - (anti_wedge[e31] * right_anti_dual[e42])
                - (anti_wedge[e12] * right_anti_dual[e43])
                - (anti_wedge[e321] * right_anti_dual[e4])
                - (anti_wedge[e423] * right_anti_dual[e1])
                - (anti_wedge[e431] * right_anti_dual[e2])
                - (anti_wedge[e412] * right_anti_dual[e3]),
        );
    }
}
impl RejectOrthogonallyFrom<Plane> for AntiDipoleInversion {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       18        0
    //    simd3        2        7        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       11       31        0
    //  no simd       33       63        0
    fn reject_orthogonally_from(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiCircleRotor::from_groups(
            // e41, e42, e43
            (self.group0().zxy() * other.group0().yzx()) - (self.group0().yzx() * other.group0().zxy()),
            // e23, e31, e12, e45
            Simd32x4::from([
                self[e423] * other[e3215],
                self[e431] * other[e3215],
                self[e412] * other[e3215],
                -(self[e425] * other[e4315]) - (self[e435] * other[e4125]),
            ]) - (self.group1().wwwx() * other.group0().xyzx()),
            // e15, e25, e35, scalar
            Simd32x4::from([
                self[e125] * other[e4315] * -1.0,
                self[e235] * other[e4125] * -1.0,
                self[e315] * other[e4235] * -1.0,
                (self[e2] * other[e4315]) + (self[e3] * other[e4125]),
            ]) + (Simd32x4::from(other[e3215]) * self.group1().xyz().with_w(self[e4]))
                + (other.group0().zxyx() * self.group2().yzx().with_w(self[e1])),
        );
        let right_anti_dual = AntiPlane::from_groups(/* e1, e2, e3, e5 */ other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]));
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (anti_wedge.group0().yzx() * right_anti_dual.group0().zxy()) - (anti_wedge.group0().zxy() * right_anti_dual.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                anti_wedge[e41] * right_anti_dual[e5],
                anti_wedge[e42] * right_anti_dual[e5],
                anti_wedge[e43] * right_anti_dual[e5],
                -(anti_wedge[e31] * right_anti_dual[e2]) - (anti_wedge[e12] * right_anti_dual[e3]),
            ]) - (anti_wedge.group1().wwwx() * right_anti_dual.group0().xyzx()),
            // e235, e315, e125, e4
            (Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group1().xyz()).with_w(0.0) + (anti_wedge.group2().zxy() * right_anti_dual.group0().yzx()).with_w(0.0)
                - (anti_wedge.group2().yzx() * right_anti_dual.group0().zxy()).with_w(0.0),
            // e1, e2, e3, e5
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group0(),
        );
    }
}
impl RejectOrthogonallyFrom<Sphere> for AntiDipoleInversion {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       26        0
    //    simd3        6        9        0
    //    simd4        4        6        0
    // Totals...
    // yes simd       20       41        0
    //  no simd       44       77        0
    fn reject_orthogonally_from(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiCircleRotor::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other[e1234]) * self.group1().xyz()) + (self.group0().zxy() * other.group0().yzx()) - (self.group0().yzx() * other.group0().zxy()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e423] * other[e3215]) + (self[e235] * other[e1234]),
                (self[e431] * other[e3215]) + (self[e315] * other[e1234]),
                (self[e412] * other[e3215]) + (self[e125] * other[e1234]),
                -(self[e425] * other[e4315]) - (self[e435] * other[e4125]),
            ]) - (self.group1().wwwx() * other.group0().xyzx()),
            // e15, e25, e35, scalar
            Simd32x4::from([
                self[e125] * other[e4315] * -1.0,
                self[e235] * other[e4125] * -1.0,
                self[e315] * other[e4235] * -1.0,
                (self[e2] * other[e4315]) + (self[e3] * other[e4125]) + (self[e5] * other[e1234]),
            ]) + (Simd32x4::from(other[e3215]) * self.group1().xyz().with_w(self[e4]))
                + (other.group0().zxyx() * self.group2().yzx().with_w(self[e1])),
        );
        let right_anti_dual = RoundPoint::from_groups(
            // e1, e2, e3, e4
            other.group0().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e5
            other[e3215],
        );
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group1().xyz()) + (anti_wedge.group0().yzx() * right_anti_dual.group0().zxy())
                - (anti_wedge.group0().zxy() * right_anti_dual.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (anti_wedge[e41] * right_anti_dual[e5]) + (anti_wedge[e15] * right_anti_dual[e4]),
                (anti_wedge[e42] * right_anti_dual[e5]) + (anti_wedge[e25] * right_anti_dual[e4]),
                (anti_wedge[e43] * right_anti_dual[e5]) + (anti_wedge[e35] * right_anti_dual[e4]),
                -(anti_wedge[e31] * right_anti_dual[e2]) - (anti_wedge[e12] * right_anti_dual[e3]),
            ]) - (anti_wedge.group1().wwwx() * right_anti_dual.group0().xyzx()),
            // e235, e315, e125, e4
            ((Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group1().xyz()) + (anti_wedge.group2().zxy() * right_anti_dual.group0().yzx())
                - (anti_wedge.group2().yzx() * right_anti_dual.group0().zxy()))
            .with_w(anti_wedge[scalar] * right_anti_dual[e4]),
            // e1, e2, e3, e5
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group0().xyz().with_w(right_anti_dual[e5]),
        );
    }
}
impl RejectOrthogonallyFrom<VersorEven> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       48        0
    //    simd3        3       10        0
    //    simd4        9       11        0
    // Totals...
    // yes simd       44       69        0
    //  no simd       77      122        0
    fn reject_orthogonally_from(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[e12345]) * self.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other[e12345]) * self.group1(),
            // e235, e315, e125, e4
            Simd32x4::from([other[e12345], other[e12345], other[e12345], 1.0])
                * self.group2().xyz().with_w(
                    (self[e4] * other[e12345])
                        - (self[e423] * other[e415])
                        - (self[e431] * other[e425])
                        - (self[e412] * other[e435])
                        - (self[e415] * other[e423])
                        - (self[e425] * other[e431])
                        - (self[e435] * other[e412]),
                ),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self[e415] * other[e321]) + (self[e321] * other[e415]) + (self[e315] * other[e412]) + (self[e1] * other[e12345]),
                (self[e425] * other[e321]) + (self[e321] * other[e425]) + (self[e125] * other[e423]) + (self[e2] * other[e12345]),
                (self[e435] * other[e321]) + (self[e321] * other[e435]) + (self[e235] * other[e431]) + (self[e3] * other[e12345]),
                -(self[e435] * other[e125]) - (self[e235] * other[e415]) - (self[e315] * other[e425]) - (self[e125] * other[e435]),
            ]) + (self.group0().zxy() * other.group2().yzx()).with_w(self[e5] * other[e12345])
                - (other.group2().zxyx() * self.group0().yzx().with_w(self[e415]))
                - (self.group2().zxy() * other.group0().yzx()).with_w(self[e425] * other[e315]),
        );
        let right_anti_dual = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e1234
            other.group2().xyz().with_w(other[e4]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            other.group3().xyz().with_w(other[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (anti_wedge.group3().zxyy() * right_anti_dual.group0().yzx().with_w(right_anti_dual[e4315]))
                + Simd32x3::from(0.0).with_w(
                    (anti_wedge[e3] * right_anti_dual[e4125]) + (anti_wedge[e5] * right_anti_dual[e1234])
                        - (anti_wedge[e431] * right_anti_dual[e25])
                        - (anti_wedge[e412] * right_anti_dual[e35])
                        - (anti_wedge[e415] * right_anti_dual[e23])
                        - (anti_wedge[e425] * right_anti_dual[e31])
                        - (anti_wedge[e435] * right_anti_dual[e12])
                        - (anti_wedge[e321] * right_anti_dual[e45])
                        - (anti_wedge[e235] * right_anti_dual[e41])
                        - (anti_wedge[e315] * right_anti_dual[e42])
                        - (anti_wedge[e125] * right_anti_dual[e43]),
                )
                + (anti_wedge.group0() * right_anti_dual.group0().www()).with_w(anti_wedge[e4] * right_anti_dual[e3215])
                + (anti_wedge.group2().www() * right_anti_dual.group1().xyz()).with_w(anti_wedge[e1] * right_anti_dual[e4235])
                - (anti_wedge.group3().yzx() * right_anti_dual.group0().zxy()).with_w(anti_wedge[e423] * right_anti_dual[e15]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (anti_wedge[e4] * right_anti_dual[e15]) + (anti_wedge[e5] * right_anti_dual[e41]),
                (anti_wedge[e4] * right_anti_dual[e25]) + (anti_wedge[e5] * right_anti_dual[e42]),
                (anti_wedge[e4] * right_anti_dual[e35]) + (anti_wedge[e5] * right_anti_dual[e43]),
                -(anti_wedge[e2] * right_anti_dual[e31]) - (anti_wedge[e3] * right_anti_dual[e12]),
            ]) + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1())
                - (anti_wedge.group3().xyzx() * right_anti_dual.group1().wwwx()),
            // e235, e315, e125, e5
            ((Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group1().xyz())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group2().xyz())
                + (anti_wedge.group3().yzx() * right_anti_dual.group2().zxy())
                - (anti_wedge.group3().zxy() * right_anti_dual.group2().yzx()))
            .with_w(anti_wedge[e5] * right_anti_dual[scalar]),
            // e1, e2, e3, e4
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group3().xyz().with_w(anti_wedge[e4]),
        );
    }
}
impl RejectOrthogonallyFrom<VersorOdd> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       30       48        0
    //    simd3        5       11        0
    //    simd4        8        9        0
    // Totals...
    // yes simd       43       68        0
    //  no simd       77      117        0
    fn reject_orthogonally_from(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiCircleRotor::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other[e1234]) * self.group1().xyz()) + (self.group0().zxy() * other.group3().yzx()) - (self.group0().yzx() * other.group3().zxy()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e423] * other[e3215]) + (self[e235] * other[e1234]),
                (self[e431] * other[e3215]) + (self[e315] * other[e1234]),
                (self[e412] * other[e3215]) + (self[e125] * other[e1234]),
                -(self[e425] * other[e4315]) - (self[e435] * other[e4125]),
            ]) - (self.group1().wwwx() * other.group3().xyzx()),
            // e15, e25, e35, scalar
            (Simd32x4::from(other[e3215]) * self.group1().xyz().with_w(self[e4]))
                + (other.group3().zxyx() * self.group2().yzx().with_w(self[e1]))
                + Simd32x3::from(0.0).with_w(
                    (self[e2] * other[e4315]) + (self[e3] * other[e4125]) + (self[e5] * other[e1234])
                        - (self[e431] * other[e25])
                        - (self[e412] * other[e35])
                        - (self[e415] * other[e23])
                        - (self[e425] * other[e31])
                        - (self[e435] * other[e12])
                        - (self[e321] * other[e45])
                        - (self[e235] * other[e41])
                        - (self[e315] * other[e42])
                        - (self[e125] * other[e43]),
                )
                - (self.group2().zxy() * other.group3().yzx()).with_w(self[e423] * other[e15]),
        );
        let right_anti_dual = VersorEven::from_groups(
            // e423, e431, e412, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            other.group2().xyz().with_w(other[e3215]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e4
            other.group3().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (anti_wedge[e23] * right_anti_dual[e4]) + (anti_wedge[scalar] * right_anti_dual[e423]),
                (anti_wedge[e31] * right_anti_dual[e4]) + (anti_wedge[scalar] * right_anti_dual[e431]),
                (anti_wedge[e12] * right_anti_dual[e4]) + (anti_wedge[scalar] * right_anti_dual[e412]),
                -(anti_wedge[e42] * right_anti_dual[e315])
                    - (anti_wedge[e43] * right_anti_dual[e125])
                    - (anti_wedge[e23] * right_anti_dual[e415])
                    - (anti_wedge[e31] * right_anti_dual[e425])
                    - (anti_wedge[e12] * right_anti_dual[e435])
                    - (anti_wedge[e45] * right_anti_dual[e321])
                    - (anti_wedge[e15] * right_anti_dual[e423])
                    - (anti_wedge[e25] * right_anti_dual[e431])
                    - (anti_wedge[e35] * right_anti_dual[e412]),
            ]) + (anti_wedge.group0().yzx() * right_anti_dual.group3().zxy()).with_w(anti_wedge[scalar] * right_anti_dual[e12345])
                - (anti_wedge.group0().zxy() * right_anti_dual.group3().yzx()).with_w(anti_wedge[e41] * right_anti_dual[e235]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (anti_wedge[e15] * right_anti_dual[e4]) + (anti_wedge[scalar] * right_anti_dual[e415]),
                (anti_wedge[e25] * right_anti_dual[e4]) + (anti_wedge[scalar] * right_anti_dual[e425]),
                (anti_wedge[e35] * right_anti_dual[e4]) + (anti_wedge[scalar] * right_anti_dual[e435]),
                -(anti_wedge[e31] * right_anti_dual[e2]) - (anti_wedge[e12] * right_anti_dual[e3]),
            ]) + (anti_wedge.group0() * right_anti_dual.group2().www()).with_w(anti_wedge[scalar] * right_anti_dual[e321])
                - (anti_wedge.group1().wwwx() * right_anti_dual.group3().xyzx()),
            // e235, e315, e125, e5
            ((Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group2().xyz())
                + (Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group1().xyz())
                + (anti_wedge.group2().zxy() * right_anti_dual.group3().yzx())
                - (anti_wedge.group2().yzx() * right_anti_dual.group3().zxy()))
            .with_w(anti_wedge[scalar] * right_anti_dual[e5]),
            // e1, e2, e3, e4
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group3(),
        );
    }
}
impl std::ops::Div<reject_orthogonally_from> for AntiDualNum {
    type Output = reject_orthogonally_from_partial<AntiDualNum>;
    fn div(self, _rhs: reject_orthogonally_from) -> Self::Output {
        reject_orthogonally_from_partial(self)
    }
}
impl RejectOrthogonallyFrom<AntiCircleRotor> for AntiDualNum {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        9        0
    //    simd3        0        2        0
    //    simd4        2        5        0
    // Totals...
    // yes simd        5       16        0
    //  no simd       11       35        0
    fn reject_orthogonally_from(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from(self[e3215]) * other.group0().with_w(other[e45]) * Simd32x4::from(-1.0));
        let right_anti_dual = CircleRotor::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e12345
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                anti_wedge[e3] * right_anti_dual[e425],
                anti_wedge[e1] * right_anti_dual[e435],
                anti_wedge[e2] * right_anti_dual[e415],
                -(anti_wedge[e3] * right_anti_dual[e125]) - (anti_wedge[e5] * right_anti_dual[e321]),
            ]) - (anti_wedge.group0().yzxy() * right_anti_dual.group1().zxy().with_w(right_anti_dual[e315]))
                - (right_anti_dual.group0() * anti_wedge.group0().www()).with_w(anti_wedge[e1] * right_anti_dual[e235]),
            // e1234
            (anti_wedge[e1] * right_anti_dual[e423]) + (anti_wedge[e2] * right_anti_dual[e431]) + (anti_wedge[e3] * right_anti_dual[e412]),
        );
    }
}
impl RejectOrthogonallyFrom<AntiDipoleInversion> for AntiDualNum {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       17        0
    //    simd3        0        3        0
    //    simd4        2        9        0
    // Totals...
    // yes simd       12       29        0
    //  no simd       18       62        0
    fn reject_orthogonally_from(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(self[e3215]) * other.group0().with_w(other[e4]),
            // e15, e25, e35, e3215
            self.group0().xx().with_zw(self[e3215], 0.0) * Simd32x3::from(1.0).with_w(0.0) * other.group1().xyz().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
        );
        let right_anti_dual = DipoleInversion::from_groups(
            // e41, e42, e43
            other.group0(),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            other.group3() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from([right_anti_dual[e15], right_anti_dual[e25], right_anti_dual[e35], 1.0])
                * anti_wedge.group0().www().with_w(
                    (anti_wedge[scalar] * right_anti_dual[e1234])
                        - (anti_wedge[e23] * right_anti_dual[e41])
                        - (anti_wedge[e31] * right_anti_dual[e42])
                        - (anti_wedge[e12] * right_anti_dual[e43]),
                ),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (anti_wedge[e23] * right_anti_dual[e45]) + (anti_wedge[scalar] * right_anti_dual[e4235]),
                (anti_wedge[e31] * right_anti_dual[e45]) + (anti_wedge[scalar] * right_anti_dual[e4315]),
                (anti_wedge[e12] * right_anti_dual[e45]) + (anti_wedge[scalar] * right_anti_dual[e4125]),
                -(anti_wedge[e31] * right_anti_dual[e25])
                    - (anti_wedge[e12] * right_anti_dual[e35])
                    - (anti_wedge[e15] * right_anti_dual[e23])
                    - (anti_wedge[e25] * right_anti_dual[e31])
                    - (anti_wedge[e35] * right_anti_dual[e12]),
            ]) + (right_anti_dual.group0().yzx() * anti_wedge.group1().zxy()).with_w(anti_wedge[scalar] * right_anti_dual[e3215])
                - (right_anti_dual.group0().zxy() * anti_wedge.group1().yzx()).with_w(anti_wedge[e23] * right_anti_dual[e15]),
        );
    }
}
impl RejectOrthogonallyFrom<AntiScalar> for AntiDualNum {
    type Output = AntiDualNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd2        0        1        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0        5        0
    fn reject_orthogonally_from(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiDualNum::from_groups(
            // e3215, scalar
            Simd32x2::from(other[e12345] * -1.0) * Simd32x2::from([self[e3215] * other[e12345], self[scalar] * other[e12345]]),
        );
    }
}
impl RejectOrthogonallyFrom<Circle> for AntiDualNum {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       15        0
    //    simd3        0        3        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       10       19        0
    //  no simd       13       28        0
    fn reject_orthogonally_from(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(self[e3215]) * other.group0(),
            // e15, e25, e35
            Simd32x3::from(self[e3215]) * other.group1().xyz(),
        );
        let right_anti_dual = Dipole::from_groups(
            // e41, e42, e43
            other.group0(),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35
            other.group2(),
        );
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (anti_wedge[e23] * right_anti_dual[e45]) + (anti_wedge[e35] * right_anti_dual[e42]),
                (anti_wedge[e31] * right_anti_dual[e45]) + (anti_wedge[e15] * right_anti_dual[e43]),
                (anti_wedge[e12] * right_anti_dual[e45]) + (anti_wedge[e25] * right_anti_dual[e41]),
                -(anti_wedge[e31] * right_anti_dual[e25])
                    - (anti_wedge[e12] * right_anti_dual[e35])
                    - (anti_wedge[e15] * right_anti_dual[e23])
                    - (anti_wedge[e25] * right_anti_dual[e31])
                    - (anti_wedge[e35] * right_anti_dual[e12]),
            ]) - (anti_wedge.group1().yzx() * right_anti_dual.group0().zxy()).with_w(anti_wedge[e23] * right_anti_dual[e15]),
            // e1234
            -(anti_wedge[e23] * right_anti_dual[e41]) - (anti_wedge[e31] * right_anti_dual[e42]) - (anti_wedge[e12] * right_anti_dual[e43]),
        );
    }
}
impl RejectOrthogonallyFrom<CircleRotor> for AntiDualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       18        0
    //    simd3        1        2        0
    //    simd4        2        7        0
    // Totals...
    // yes simd       12       27        0
    //  no simd       20       52        0
    fn reject_orthogonally_from(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            self.group0().xx().with_zw(self[e3215], self[scalar]) * other.group0().with_w(other[e12345]),
            // e15, e25, e35, e3215
            Simd32x4::from(self[e3215]) * other.group1().xyz().with_w(other[e12345]),
        );
        let right_anti_dual = AntiCircleRotor::from_groups(
            // e41, e42, e43
            other.group0(),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, scalar
            other.group2() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group0().with_w(right_anti_dual[scalar]),
            // e23, e31, e12, e45
            ((Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group0().xyz()) + (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group1().xyz()))
                .with_w(right_anti_dual[e45] * anti_wedge[scalar]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (right_anti_dual[e15] * anti_wedge[scalar]) + (right_anti_dual[scalar] * anti_wedge[e15]),
                (right_anti_dual[e25] * anti_wedge[scalar]) + (right_anti_dual[scalar] * anti_wedge[e25]),
                (right_anti_dual[e35] * anti_wedge[scalar]) + (right_anti_dual[scalar] * anti_wedge[e35]),
                -(right_anti_dual[e41] * anti_wedge[e23]) - (right_anti_dual[e42] * anti_wedge[e31]) - (right_anti_dual[e43] * anti_wedge[e12]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                right_anti_dual[e45] * anti_wedge[e23],
                right_anti_dual[e45] * anti_wedge[e31],
                right_anti_dual[e45] * anti_wedge[e12],
                -(right_anti_dual[e31] * anti_wedge[e25])
                    - (right_anti_dual[e12] * anti_wedge[e35])
                    - (right_anti_dual[e15] * anti_wedge[e23])
                    - (right_anti_dual[e25] * anti_wedge[e31])
                    - (right_anti_dual[e35] * anti_wedge[e12]),
            ]) + (anti_wedge.group1().zxyw() * right_anti_dual.group0().yzx().with_w(right_anti_dual[scalar]))
                - (anti_wedge.group1().yzxx() * right_anti_dual.group0().zxy().with_w(right_anti_dual[e23])),
        );
    }
}
impl RejectOrthogonallyFrom<Dipole> for AntiDualNum {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        9        0
    //    simd3        0        3        0
    //    simd4        2        4        0
    // Totals...
    // yes simd        5       16        0
    //  no simd       11       34        0
    fn reject_orthogonally_from(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from(self[e3215]) * other.group0().with_w(other[e45]) * Simd32x4::from(-1.0));
        let right_anti_dual = Circle::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125
            other.group2() * Simd32x3::from(-1.0),
        );
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                anti_wedge[e3] * right_anti_dual[e425],
                anti_wedge[e1] * right_anti_dual[e435],
                anti_wedge[e2] * right_anti_dual[e415],
                -(anti_wedge[e3] * right_anti_dual[e125]) - (anti_wedge[e5] * right_anti_dual[e321]),
            ]) - (anti_wedge.group0().wwwx() * right_anti_dual.group0().with_w(right_anti_dual[e235]))
                - (anti_wedge.group0().yzx() * right_anti_dual.group1().zxy()).with_w(anti_wedge[e2] * right_anti_dual[e315]),
            // e1234
            (anti_wedge[e1] * right_anti_dual[e423]) + (anti_wedge[e2] * right_anti_dual[e431]) + (anti_wedge[e3] * right_anti_dual[e412]),
        );
    }
}
impl RejectOrthogonallyFrom<DipoleInversion> for AntiDualNum {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       10        0
    //    simd3        1        7        0
    //    simd4        6       11        0
    // Totals...
    // yes simd       11       28        0
    //  no simd       31       75        0
    fn reject_orthogonally_from(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(self[e3215]) * other.group3().xyz().with_w(other[e1234]) * Simd32x4::from(-1.0),
            // e1, e2, e3, e5
            Simd32x4::from(self[e3215]) * other.group0().with_w(other[e45]) * Simd32x4::from(-1.0),
        );
        let right_anti_dual = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e4
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group3() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group1().xyz() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            ((right_anti_dual.group3().zxy() * anti_wedge.group1().yzx()) - (right_anti_dual.group3().yzx() * anti_wedge.group1().zxy()))
                .with_w(right_anti_dual[e4] * anti_wedge[e5] * -1.0),
            // e15, e25, e35, e1234
            (anti_wedge.group1().xyzx() * right_anti_dual.group3().www().with_w(right_anti_dual[e423]))
                + Simd32x3::from(0.0).with_w((right_anti_dual[e431] * anti_wedge[e2]) + (right_anti_dual[e412] * anti_wedge[e3]))
                - (anti_wedge.group1().www() * right_anti_dual.group3().xyz()).with_w(right_anti_dual[e4] * anti_wedge[e321]),
            // e4235, e4315, e4125, e3215
            Simd32x3::from(0.0).with_w(
                (right_anti_dual[e2] * anti_wedge[e315]) + (right_anti_dual[e3] * anti_wedge[e125]) + (right_anti_dual[e5] * anti_wedge[e321])
                    - (right_anti_dual[e125] * anti_wedge[e3]),
            ) + (right_anti_dual.group1().yzx() * anti_wedge.group1().zxy()).with_w(right_anti_dual[e1] * anti_wedge[e235])
                - (Simd32x4::from(anti_wedge[e5]) * right_anti_dual.group0().with_w(right_anti_dual[e321]))
                - (right_anti_dual.group2().wwwy() * anti_wedge.group0().xyz().with_w(anti_wedge[e2]))
                - (anti_wedge.group1().yzxx() * right_anti_dual.group1().zxy().with_w(right_anti_dual[e235])),
        );
    }
}
impl RejectOrthogonallyFrom<DualNum> for AntiDualNum {
    type Output = AntiDualNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        3        0
    //    simd2        0        2        0
    // Totals...
    // yes simd        1        5        0
    //  no simd        1        7        0
    fn reject_orthogonally_from(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiDualNum::from_groups(/* e3215, scalar */ Simd32x2::from(other[e12345]) * self.group0());
        let right_anti_dual = AntiDualNum::from_groups(/* e3215, scalar */ other.group0() * Simd32x2::from(-1.0));
        return AntiDualNum::from_groups(/* e3215, scalar */ Simd32x2::from([
            (anti_wedge[e3215] * right_anti_dual[scalar]) + (anti_wedge[scalar] * right_anti_dual[e3215]),
            anti_wedge[scalar] * right_anti_dual[scalar],
        ]));
    }
}
impl RejectOrthogonallyFrom<FlatPoint> for AntiDualNum {
    type Output = AntiDualNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd2        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        3        0
    fn reject_orthogonally_from(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiDualNum::from_groups(
            // e3215, scalar
            Simd32x2::from([self[e3215] * f32::powi(other[e45], 2) * -1.0, 1.0]) * Simd32x2::from([-1.0, 0.0]),
        );
    }
}
impl RejectOrthogonallyFrom<Flector> for AntiDualNum {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5        8        0
    //    simd3        1        2        0
    //    simd4        2        7        0
    // Totals...
    // yes simd        8       17        0
    //  no simd       16       42        0
    fn reject_orthogonally_from(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiFlector::from_groups(
            // e235, e315, e125, e321
            self.group0().xx().with_zw(self[e3215], 0.0) * Simd32x3::from(1.0).with_w(0.0) * other.group1().xyz().with_w(0.0) * Simd32x4::from([-1.0, -1.0, -1.0, 0.0]),
            // e1, e2, e3, e5
            Simd32x3::from(0.0).with_w(self[e3215] * other[e45] * -1.0),
        );
        let right_anti_dual = AntiFlector::from_groups(
            // e235, e315, e125, e321
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            ((anti_wedge.group1().yzx() * right_anti_dual.group1().zxy()) - (anti_wedge.group1().zxy() * right_anti_dual.group1().yzx())).with_w(0.0),
            // e15, e25, e35, e3215
            (right_anti_dual.group1().wwwx() * anti_wedge.group1().xyz().with_w(anti_wedge[e235]))
                + Simd32x3::from(0.0).with_w(
                    (anti_wedge[e315] * right_anti_dual[e2]) + (anti_wedge[e125] * right_anti_dual[e3]) + (anti_wedge[e321] * right_anti_dual[e5])
                        - (anti_wedge[e2] * right_anti_dual[e315])
                        - (anti_wedge[e3] * right_anti_dual[e125])
                        - (anti_wedge[e5] * right_anti_dual[e321]),
                )
                - (anti_wedge.group1().wwwx() * right_anti_dual.group1().xyz().with_w(right_anti_dual[e235])),
        );
    }
}
impl RejectOrthogonallyFrom<Line> for AntiDualNum {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        3        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        2        7        0
    //  no simd        2       19        0
    fn reject_orthogonally_from(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = FlatPoint::from_groups(
            // e15, e25, e35, e45
            self.group0().xx().with_zw(self[e3215], 0.0) * Simd32x3::from(1.0).with_w(0.0) * other.group0().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
        );
        let right_anti_dual = AntiLine::from_groups(/* e23, e31, e12 */ other.group0(), /* e15, e25, e35 */ other.group1());
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([anti_wedge[e45], anti_wedge[e45], anti_wedge[e45], 1.0])
                * right_anti_dual
                    .group0()
                    .with_w(-(right_anti_dual[e23] * anti_wedge[e15]) - (right_anti_dual[e31] * anti_wedge[e25]) - (right_anti_dual[e12] * anti_wedge[e35])),
        );
    }
}
impl RejectOrthogonallyFrom<Motor> for AntiDualNum {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5        8        0
    //    simd3        1        2        0
    //    simd4        2        5        0
    // Totals...
    // yes simd        8       15        0
    //  no simd       16       34        0
    fn reject_orthogonally_from(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x3::from(0.0).with_w(self[scalar] * other[e12345]),
            // e15, e25, e35, e3215
            Simd32x4::from(self[e3215]) * other.group0(),
        );
        let right_anti_dual = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e3215
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            ((Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0().xyz()) + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group0().xyz()))
                .with_w(anti_wedge[scalar] * right_anti_dual[scalar]),
            // e15, e25, e35, e3215
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1())
                + Simd32x3::from(0.0).with_w(
                    -(anti_wedge[e23] * right_anti_dual[e15])
                        - (anti_wedge[e31] * right_anti_dual[e25])
                        - (anti_wedge[e12] * right_anti_dual[e35])
                        - (anti_wedge[e15] * right_anti_dual[e23])
                        - (anti_wedge[e25] * right_anti_dual[e31])
                        - (anti_wedge[e35] * right_anti_dual[e12]),
                ),
        );
    }
}
impl RejectOrthogonallyFrom<MultiVector> for AntiDualNum {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       72      100        0
    //    simd2        0        1        0
    //    simd3       20       37        0
    //    simd4       20       23        0
    // Totals...
    // yes simd      112      161        0
    //  no simd      212      305        0
    fn reject_orthogonally_from(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([(self[e3215] * other[e4]) + (self[scalar] * other[e12345]), 0.0]),
            // e1, e2, e3, e4
            self.group0().xx().with_zw(self[e3215], 0.0) * Simd32x3::from(1.0).with_w(0.0) * other.group4().with_w(0.0) * Simd32x4::from([-1.0, -1.0, -1.0, 0.0]),
            // e5
            self[e3215] * other[e45] * -1.0,
            // e15, e25, e35, e45
            self.group0().xx().with_zw(self[e3215], 0.0) * Simd32x3::from(1.0).with_w(0.0) * other.group6().xyz().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(self[e3215]) * other.group7(),
            // e415, e425, e435, e321
            Simd32x3::from(0.0).with_w(self[e3215] * other[e1234] * -1.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(self[e3215]) * other.group9().xyz() * Simd32x3::from(-1.0),
            // e4235, e4315, e4125, e3215
            Simd32x3::from(0.0).with_w(self[e3215] * other[e12345]),
            // e1234
            0.0,
        );
        let right_anti_dual = MultiVector::from_groups(
            // scalar, e12345
            other.group0().yx() * Simd32x2::from([-1.0, 1.0]),
            // e1, e2, e3, e4
            other.group9().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e5
            other[e3215],
            // e15, e25, e35, e45
            other.group8().with_w(other[e321] * -1.0),
            // e41, e42, e43
            other.group7(),
            // e23, e31, e12
            other.group6().xyz(),
            // e415, e425, e435, e321
            other.group5().with_w(other[e45]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e423, e431, e412
            other.group4() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group3().xyz() * Simd32x3::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group1().xyz().with_w(other[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1234
            other[e4] * -1.0,
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                anti_wedge[scalar] * right_anti_dual[scalar],
                (anti_wedge[scalar] * right_anti_dual[e12345])
                    + (anti_wedge[e12345] * right_anti_dual[scalar])
                    + (anti_wedge[e1] * right_anti_dual[e4235])
                    + (anti_wedge[e2] * right_anti_dual[e4315])
                    + (anti_wedge[e3] * right_anti_dual[e4125])
                    + (anti_wedge[e4] * right_anti_dual[e3215])
                    + (anti_wedge[e5] * right_anti_dual[e1234])
                    + (anti_wedge[e4235] * right_anti_dual[e1])
                    + (anti_wedge[e4315] * right_anti_dual[e2])
                    + (anti_wedge[e4125] * right_anti_dual[e3])
                    + (anti_wedge[e3215] * right_anti_dual[e4])
                    + (anti_wedge[e1234] * right_anti_dual[e5])
                    - (anti_wedge[e15] * right_anti_dual[e423])
                    - (anti_wedge[e25] * right_anti_dual[e431])
                    - (anti_wedge[e35] * right_anti_dual[e412])
                    - (anti_wedge[e45] * right_anti_dual[e321])
                    - (anti_wedge[e41] * right_anti_dual[e235])
                    - (anti_wedge[e42] * right_anti_dual[e315])
                    - (anti_wedge[e43] * right_anti_dual[e125])
                    - (anti_wedge[e23] * right_anti_dual[e415])
                    - (anti_wedge[e31] * right_anti_dual[e425])
                    - (anti_wedge[e12] * right_anti_dual[e435])
                    - (anti_wedge[e415] * right_anti_dual[e23])
                    - (anti_wedge[e425] * right_anti_dual[e31])
                    - (anti_wedge[e435] * right_anti_dual[e12])
                    - (anti_wedge[e321] * right_anti_dual[e45])
                    - (anti_wedge[e423] * right_anti_dual[e15])
                    - (anti_wedge[e431] * right_anti_dual[e25])
                    - (anti_wedge[e412] * right_anti_dual[e35])
                    - (anti_wedge[e235] * right_anti_dual[e41])
                    - (anti_wedge[e315] * right_anti_dual[e42])
                    - (anti_wedge[e125] * right_anti_dual[e43]),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1()) + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1()),
            // e5
            (anti_wedge[scalar] * right_anti_dual[e5]) + (anti_wedge[e5] * right_anti_dual[scalar]),
            // e15, e25, e35, e45
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group3())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group3())
                + (Simd32x4::from(right_anti_dual[e5]) * anti_wedge.group1())
                - (Simd32x4::from(anti_wedge[e5]) * right_anti_dual.group1()),
            // e41, e42, e43
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group4())
                + (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group1().xyz())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group4())
                - (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group1().xyz()),
            // e23, e31, e12
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group5())
                + (anti_wedge.group1().yzx() * right_anti_dual.group1().zxy())
                - (anti_wedge.group1().zxy() * right_anti_dual.group1().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (anti_wedge[e4] * right_anti_dual[e15])
                    + (anti_wedge[e5] * right_anti_dual[e41])
                    + (anti_wedge[e15] * right_anti_dual[e4])
                    + (anti_wedge[e41] * right_anti_dual[e5]),
                (anti_wedge[e4] * right_anti_dual[e25])
                    + (anti_wedge[e5] * right_anti_dual[e42])
                    + (anti_wedge[e25] * right_anti_dual[e4])
                    + (anti_wedge[e42] * right_anti_dual[e5]),
                (anti_wedge[e4] * right_anti_dual[e35])
                    + (anti_wedge[e5] * right_anti_dual[e43])
                    + (anti_wedge[e35] * right_anti_dual[e4])
                    + (anti_wedge[e43] * right_anti_dual[e5]),
                -(anti_wedge[e1] * right_anti_dual[e23])
                    - (anti_wedge[e2] * right_anti_dual[e31])
                    - (anti_wedge[e3] * right_anti_dual[e12])
                    - (anti_wedge[e12] * right_anti_dual[e3]),
            ]) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group6())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group6())
                - (right_anti_dual.group1().xyzy() * anti_wedge.group3().www().with_w(anti_wedge[e31]))
                - (right_anti_dual.group3().www() * anti_wedge.group1().xyz()).with_w(anti_wedge[e23] * right_anti_dual[e1]),
            // e423, e431, e412
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group7())
                + (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group7())
                + (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group5())
                + (anti_wedge.group4().yzx() * right_anti_dual.group1().zxy())
                + (right_anti_dual.group4().yzx() * anti_wedge.group1().zxy())
                - (anti_wedge.group4().zxy() * right_anti_dual.group1().yzx())
                - (right_anti_dual.group4().zxy() * anti_wedge.group1().yzx()),
            // e235, e315, e125
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group8())
                + (Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group8())
                + (Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group5())
                + (anti_wedge.group1().yzx() * right_anti_dual.group3().zxy())
                + (anti_wedge.group3().zxy() * right_anti_dual.group1().yzx())
                - (anti_wedge.group1().zxy() * right_anti_dual.group3().yzx())
                - (anti_wedge.group3().yzx() * right_anti_dual.group1().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (anti_wedge[e3] * right_anti_dual[e425])
                    + (anti_wedge[e4] * right_anti_dual[e235])
                    + (anti_wedge[e45] * right_anti_dual[e23])
                    + (anti_wedge[e435] * right_anti_dual[e2]),
                (anti_wedge[e1] * right_anti_dual[e435])
                    + (anti_wedge[e4] * right_anti_dual[e315])
                    + (anti_wedge[e45] * right_anti_dual[e31])
                    + (anti_wedge[e415] * right_anti_dual[e3]),
                (anti_wedge[e2] * right_anti_dual[e415])
                    + (anti_wedge[e4] * right_anti_dual[e125])
                    + (anti_wedge[e45] * right_anti_dual[e12])
                    + (anti_wedge[e425] * right_anti_dual[e1]),
                -(anti_wedge[e1] * right_anti_dual[e235])
                    - (anti_wedge[e2] * right_anti_dual[e315])
                    - (anti_wedge[e3] * right_anti_dual[e125])
                    - (anti_wedge[e5] * right_anti_dual[e321]),
            ]) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group9())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group9())
                + (Simd32x4::from([right_anti_dual[e5], right_anti_dual[e5], right_anti_dual[e5], right_anti_dual[e3]]) * anti_wedge.group7().with_w(anti_wedge[e125]))
                + (anti_wedge.group5() * right_anti_dual.group3().www()).with_w(anti_wedge[e315] * right_anti_dual[e2])
                + (anti_wedge.group4().yzx() * right_anti_dual.group3().zxy()).with_w(anti_wedge[e235] * right_anti_dual[e1])
                + (right_anti_dual.group4().yzx() * anti_wedge.group3().zxy()).with_w(anti_wedge[e321] * right_anti_dual[e5])
                - (Simd32x4::from([anti_wedge[e5], anti_wedge[e5], anti_wedge[e5], anti_wedge[e15]]) * right_anti_dual.group7().with_w(right_anti_dual[e23]))
                - (right_anti_dual.group3().yzxx() * anti_wedge.group4().zxy().with_w(anti_wedge[e23]))
                - (anti_wedge.group8() * right_anti_dual.group1().www()).with_w(anti_wedge[e31] * right_anti_dual[e25])
                - (right_anti_dual.group4().zxy() * anti_wedge.group3().yzx()).with_w(anti_wedge[e12] * right_anti_dual[e35])
                - (anti_wedge.group1().yzx() * right_anti_dual.group6().zxy()).with_w(anti_wedge[e25] * right_anti_dual[e31])
                - (anti_wedge.group6().yzx() * right_anti_dual.group1().zxy()).with_w(anti_wedge[e35] * right_anti_dual[e12]),
            // e1234
            (anti_wedge[scalar] * right_anti_dual[e1234])
                + (anti_wedge[e1] * right_anti_dual[e423])
                + (anti_wedge[e2] * right_anti_dual[e431])
                + (anti_wedge[e3] * right_anti_dual[e412])
                + (anti_wedge[e4] * right_anti_dual[e321])
                + (anti_wedge[e1234] * right_anti_dual[scalar])
                - (anti_wedge[e41] * right_anti_dual[e23])
                - (anti_wedge[e42] * right_anti_dual[e31])
                - (anti_wedge[e43] * right_anti_dual[e12])
                - (anti_wedge[e23] * right_anti_dual[e41])
                - (anti_wedge[e31] * right_anti_dual[e42])
                - (anti_wedge[e12] * right_anti_dual[e43])
                - (anti_wedge[e321] * right_anti_dual[e4])
                - (anti_wedge[e423] * right_anti_dual[e1])
                - (anti_wedge[e431] * right_anti_dual[e2])
                - (anti_wedge[e412] * right_anti_dual[e3]),
        );
    }
}
impl RejectOrthogonallyFrom<Plane> for AntiDualNum {
    type Output = AntiDualNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        4        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        3        8        0
    //  no simd        3       20        0
    fn reject_orthogonally_from(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiFlatPoint::from_groups(
            // e235, e315, e125, e321
            self.group0().xx().with_zw(self[e3215], 0.0) * Simd32x3::from(1.0).with_w(0.0) * other.group0().xyz().with_w(0.0) * Simd32x4::from([-1.0, -1.0, -1.0, 0.0]),
        );
        let right_anti_dual = AntiPlane::from_groups(/* e1, e2, e3, e5 */ other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]));
        return AntiDualNum::from_groups(/* e3215, scalar */ Simd32x2::from([
            (anti_wedge[e235] * right_anti_dual[e1])
                + (anti_wedge[e315] * right_anti_dual[e2])
                + (anti_wedge[e125] * right_anti_dual[e3])
                + (anti_wedge[e321] * right_anti_dual[e5]),
            0.0,
        ]));
    }
}
impl RejectOrthogonallyFrom<RoundPoint> for AntiDualNum {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        5        0
    //  no simd        0       11        0
    fn reject_orthogonally_from(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Scalar::from_groups(/* scalar */ self[e3215] * other[e4]);
        let right_anti_dual = Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            other.group0().xyz().with_w(other[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1234
            other[e4] * -1.0,
        );
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e1234
            anti_wedge[scalar] * right_anti_dual[e1234],
        );
    }
}
impl RejectOrthogonallyFrom<Sphere> for AntiDualNum {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        6        0
    //    simd4        0        5        0
    // Totals...
    // yes simd        3       11        0
    //  no simd        3       26        0
    fn reject_orthogonally_from(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiFlatPoint::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(self[e3215]) * other.group0().xyz().with_w(other[e1234]) * Simd32x4::from(-1.0),
        );
        let right_anti_dual = RoundPoint::from_groups(
            // e1, e2, e3, e4
            other.group0().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e5
            other[e3215],
        );
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([right_anti_dual[e4], right_anti_dual[e4], right_anti_dual[e4], 1.0])
                * anti_wedge.group0().xyz().with_w(
                    (anti_wedge[e235] * right_anti_dual[e1])
                        + (anti_wedge[e315] * right_anti_dual[e2])
                        + (anti_wedge[e125] * right_anti_dual[e3])
                        + (anti_wedge[e321] * right_anti_dual[e5]),
                )
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1234
            anti_wedge[e321] * right_anti_dual[e4] * -1.0,
        );
    }
}
impl RejectOrthogonallyFrom<VersorEven> for AntiDualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       19        0
    //    simd3        1        4        0
    //    simd4        4        9        0
    // Totals...
    // yes simd       12       32        0
    //  no simd       26       67        0
    fn reject_orthogonally_from(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([other[e423], other[e431], other[e412], 1.0]) * self.group0().xx().with_zw(self[e3215], (self[e3215] * other[e4]) + (self[scalar] * other[e12345])),
            // e15, e25, e35, e3215
            Simd32x4::from(self[e3215]) * other.group1().xyz().with_w(other[e12345]),
        );
        let right_anti_dual = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e1234
            other.group2().xyz().with_w(other[e4]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            other.group3().xyz().with_w(other[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e23, e31, e12, e45
            ((Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group1().xyz()) + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group0().xyz()))
                .with_w(anti_wedge[scalar] * right_anti_dual[e45]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                anti_wedge[e15] * right_anti_dual[scalar],
                anti_wedge[e25] * right_anti_dual[scalar],
                anti_wedge[e35] * right_anti_dual[scalar],
                -(anti_wedge[e23] * right_anti_dual[e41]) - (anti_wedge[e31] * right_anti_dual[e42]) - (anti_wedge[e12] * right_anti_dual[e43]),
            ]) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group2()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                anti_wedge[e35] * right_anti_dual[e42],
                anti_wedge[e15] * right_anti_dual[e43],
                anti_wedge[e25] * right_anti_dual[e41],
                -(anti_wedge[e31] * right_anti_dual[e25])
                    - (anti_wedge[e12] * right_anti_dual[e35])
                    - (anti_wedge[e15] * right_anti_dual[e23])
                    - (anti_wedge[e25] * right_anti_dual[e31])
                    - (anti_wedge[e35] * right_anti_dual[e12]),
            ]) + (anti_wedge.group0() * right_anti_dual.group1().www().with_w(right_anti_dual[e3215]))
                + (anti_wedge.group0().www() * right_anti_dual.group3().xyz()).with_w(anti_wedge[e3215] * right_anti_dual[scalar])
                - (anti_wedge.group1().yzx() * right_anti_dual.group0().zxy()).with_w(anti_wedge[e23] * right_anti_dual[e15]),
        );
    }
}
impl RejectOrthogonallyFrom<VersorOdd> for AntiDualNum {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       10        0
    //    simd3        1        6        0
    //    simd4        6       12        0
    // Totals...
    // yes simd       11       28        0
    //  no simd       31       76        0
    fn reject_orthogonally_from(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(self[e3215]) * other.group3().xyz().with_w(other[e1234]) * Simd32x4::from(-1.0),
            // e1, e2, e3, e5
            Simd32x4::from(self[e3215]) * other.group0().xyz().with_w(other[e45]) * Simd32x4::from(-1.0),
        );
        let right_anti_dual = VersorEven::from_groups(
            // e423, e431, e412, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            other.group2().xyz().with_w(other[e3215]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e4
            other.group3().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group1().xyz() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            ((anti_wedge.group1().yzx() * right_anti_dual.group3().zxy()) - (anti_wedge.group1().zxy() * right_anti_dual.group3().yzx()))
                .with_w(anti_wedge[e5] * right_anti_dual[e4] * -1.0),
            // e15, e25, e35, e1234
            (anti_wedge.group1().xyzx() * right_anti_dual.group2().www().with_w(right_anti_dual[e423]))
                + Simd32x3::from(0.0).with_w((anti_wedge[e2] * right_anti_dual[e431]) + (anti_wedge[e3] * right_anti_dual[e412]))
                - (right_anti_dual.group3() * anti_wedge.group1().www().with_w(anti_wedge[e321])),
            // e4235, e4315, e4125, e3215
            Simd32x3::from(0.0).with_w(
                (anti_wedge[e315] * right_anti_dual[e2]) + (anti_wedge[e125] * right_anti_dual[e3]) + (anti_wedge[e321] * right_anti_dual[e5])
                    - (anti_wedge[e5] * right_anti_dual[e321]),
            ) + (anti_wedge.group1().zxy() * right_anti_dual.group1().yzx()).with_w(anti_wedge[e235] * right_anti_dual[e1])
                - (anti_wedge.group1().yzxy() * right_anti_dual.group1().zxy().with_w(right_anti_dual[e315]))
                - (anti_wedge.group1().wwwz() * right_anti_dual.group0().xyz().with_w(right_anti_dual[e125]))
                - (right_anti_dual.group3().www() * anti_wedge.group0().xyz()).with_w(anti_wedge[e1] * right_anti_dual[e235]),
        );
    }
}
impl std::ops::Div<reject_orthogonally_from> for AntiFlatPoint {
    type Output = reject_orthogonally_from_partial<AntiFlatPoint>;
    fn div(self, _rhs: reject_orthogonally_from) -> Self::Output {
        reject_orthogonally_from_partial(self)
    }
}
impl RejectOrthogonallyFrom<AntiCircleRotor> for AntiFlatPoint {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        4        0
    //    simd3        0        2        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        3       10        0
    //  no simd        3       26        0
    fn reject_orthogonally_from(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Scalar::from_groups(
            // scalar
            -(other[e41] * self[e235]) - (other[e42] * self[e315]) - (other[e43] * self[e125]) - (other[e45] * self[e321]),
        );
        let right_anti_dual = CircleRotor::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e12345
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1(),
            // e235, e315, e125, e12345
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group2(),
        );
    }
}
impl RejectOrthogonallyFrom<AntiDipoleInversion> for AntiFlatPoint {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       21        0
    //    simd3        1        2        0
    //    simd4        4        7        0
    // Totals...
    // yes simd       11       30        0
    //  no simd       25       55        0
    fn reject_orthogonally_from(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiPlane::from_groups(
            // e1, e2, e3, e5
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e415] * self[e321]),
                (other[e423] * self[e125]) + (other[e425] * self[e321]),
                (other[e431] * self[e235]) + (other[e435] * self[e321]),
                -(other[e425] * self[e315]) - (other[e435] * self[e125]),
            ]) - (self.group0().zxyx() * other.group0().yzx().with_w(other[e415])),
        );
        let right_anti_dual = DipoleInversion::from_groups(
            // e41, e42, e43
            other.group0(),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            other.group3() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return CircleRotor::from_groups(
            // e423, e431, e412
            (right_anti_dual.group0().yzx() * anti_wedge.group0().zxy()) - (right_anti_dual.group0().zxy() * anti_wedge.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                anti_wedge[e5] * right_anti_dual[e41],
                anti_wedge[e5] * right_anti_dual[e42],
                anti_wedge[e5] * right_anti_dual[e43],
                -(anti_wedge[e2] * right_anti_dual[e31]) - (anti_wedge[e3] * right_anti_dual[e12]),
            ]) - (anti_wedge.group0().xyzx() * right_anti_dual.group1().wwwx()),
            // e235, e315, e125, e12345
            Simd32x4::from([
                anti_wedge[e3] * right_anti_dual[e25] * -1.0,
                anti_wedge[e1] * right_anti_dual[e35] * -1.0,
                anti_wedge[e2] * right_anti_dual[e15] * -1.0,
                (anti_wedge[e3] * right_anti_dual[e4125]) + (anti_wedge[e5] * right_anti_dual[e1234]),
            ]) + (anti_wedge.group0().yzxx() * right_anti_dual.group2().zxy().with_w(right_anti_dual[e4235]))
                + (anti_wedge.group0().wwwy() * right_anti_dual.group1().xyz().with_w(right_anti_dual[e4315])),
        );
    }
}
impl RejectOrthogonallyFrom<AntiScalar> for AntiFlatPoint {
    type Output = AntiFlatPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        5        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0        9        0
    fn reject_orthogonally_from(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiFlatPoint::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(other[e12345] * -1.0) * Simd32x4::from([self[e235] * other[e12345], self[e315] * other[e12345], self[e125] * other[e12345], self[e321] * other[e12345]]),
        );
    }
}
impl RejectOrthogonallyFrom<Circle> for AntiFlatPoint {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       14        0
    //    simd3        3        6        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       10       22        0
    //  no simd       22       40        0
    fn reject_orthogonally_from(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiPlane::from_groups(
            // e1, e2, e3, e5
            Simd32x4::from([
                (self[e315] * other[e412]) + (self[e321] * other[e415]),
                (self[e125] * other[e423]) + (self[e321] * other[e425]),
                (self[e235] * other[e431]) + (self[e321] * other[e435]),
                -(self[e315] * other[e425]) - (self[e125] * other[e435]),
            ]) - (other.group0().yzx() * self.group0().zxy()).with_w(self[e235] * other[e415]),
        );
        let right_anti_dual = Dipole::from_groups(
            // e41, e42, e43
            other.group0(),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35
            other.group2(),
        );
        return Circle::from_groups(
            // e423, e431, e412
            (right_anti_dual.group0().yzx() * anti_wedge.group0().zxy()) - (right_anti_dual.group0().zxy() * anti_wedge.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                anti_wedge[e5] * right_anti_dual[e41],
                anti_wedge[e5] * right_anti_dual[e42],
                anti_wedge[e5] * right_anti_dual[e43],
                -(anti_wedge[e2] * right_anti_dual[e31]) - (anti_wedge[e3] * right_anti_dual[e12]),
            ]) - (anti_wedge.group0().xyzx() * right_anti_dual.group1().wwwx()),
            // e235, e315, e125
            (Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group1().xyz()) + (right_anti_dual.group2().zxy() * anti_wedge.group0().yzx())
                - (right_anti_dual.group2().yzx() * anti_wedge.group0().zxy()),
        );
    }
}
impl RejectOrthogonallyFrom<CircleRotor> for AntiFlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       20        0
    //    simd3        3        7        0
    //    simd4        4        7        0
    // Totals...
    // yes simd       14       34        0
    //  no simd       32       69        0
    fn reject_orthogonally_from(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(other[e12345]) * self.group0(),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self[e315] * other[e412]) + (self[e321] * other[e415]),
                (self[e125] * other[e423]) + (self[e321] * other[e425]),
                (self[e235] * other[e431]) + (self[e321] * other[e435]),
                -(self[e315] * other[e425]) - (self[e125] * other[e435]),
            ]) - (other.group0().yzx() * self.group0().zxy()).with_w(self[e235] * other[e415]),
        );
        let right_anti_dual = AntiCircleRotor::from_groups(
            // e41, e42, e43
            other.group0(),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, scalar
            other.group2() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                right_anti_dual[e42] * anti_wedge[e3],
                right_anti_dual[e43] * anti_wedge[e1],
                right_anti_dual[e41] * anti_wedge[e2],
                -(right_anti_dual[e42] * anti_wedge[e315]) - (right_anti_dual[e43] * anti_wedge[e125]) - (right_anti_dual[e45] * anti_wedge[e321]),
            ]) - (right_anti_dual.group0().zxy() * anti_wedge.group1().yzx()).with_w(right_anti_dual[e41] * anti_wedge[e235]),
            // e415, e425, e435, e321
            Simd32x3::from(0.0).with_w(-(right_anti_dual[e31] * anti_wedge[e2]) - (right_anti_dual[e12] * anti_wedge[e3]))
                + (right_anti_dual.group0() * anti_wedge.group1().www()).with_w(right_anti_dual[scalar] * anti_wedge[e321])
                - (right_anti_dual.group1().wwwx() * anti_wedge.group1().xyzx()),
            // e235, e315, e125, e5
            ((Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group0().xyz())
                + (Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group1().xyz())
                + (right_anti_dual.group2().zxy() * anti_wedge.group1().yzx())
                - (right_anti_dual.group2().yzx() * anti_wedge.group1().zxy()))
            .with_w(right_anti_dual[scalar] * anti_wedge[e5]),
            // e1, e2, e3, e4
            Simd32x3::from(1.0).with_w(0.0) * right_anti_dual.group2().www().with_w(0.0) * anti_wedge.group1().xyz().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
        );
    }
}
impl RejectOrthogonallyFrom<Dipole> for AntiFlatPoint {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        4        0
    //    simd3        0        4        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        3       10        0
    //  no simd        3       24        0
    fn reject_orthogonally_from(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Scalar::from_groups(
            // scalar
            -(self[e235] * other[e41]) - (self[e315] * other[e42]) - (self[e125] * other[e43]) - (self[e321] * other[e45]),
        );
        let right_anti_dual = Circle::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125
            other.group2() * Simd32x3::from(-1.0),
        );
        return Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1(),
            // e235, e315, e125
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group2(),
        );
    }
}
impl RejectOrthogonallyFrom<DipoleInversion> for AntiFlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       24        0
    //    simd3        4        9        0
    //    simd4        3        5        0
    // Totals...
    // yes simd       16       38        0
    //  no simd       33       71        0
    fn reject_orthogonally_from(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                self[e235] * other[e1234],
                self[e315] * other[e1234],
                self[e125] * other[e1234],
                -(self[e315] * other[e42]) - (self[e125] * other[e43]) - (self[e321] * other[e45]),
            ]) - (self.group0().www() * other.group3().xyz()).with_w(self[e235] * other[e41]),
            // e15, e25, e35, e3215
            ((self.group0().yzx() * other.group3().zxy()) - (self.group0().zxy() * other.group3().yzx())).with_w(0.0),
        );
        let right_anti_dual = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e4
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group3() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                right_anti_dual[e4] * anti_wedge[e23],
                right_anti_dual[e4] * anti_wedge[e31],
                right_anti_dual[e4] * anti_wedge[e12],
                -(right_anti_dual[e423] * anti_wedge[e15])
                    - (right_anti_dual[e431] * anti_wedge[e25])
                    - (right_anti_dual[e412] * anti_wedge[e35])
                    - (right_anti_dual[e415] * anti_wedge[e23])
                    - (right_anti_dual[e425] * anti_wedge[e31])
                    - (right_anti_dual[e435] * anti_wedge[e12]),
            ]) + (right_anti_dual.group0() * anti_wedge.group0().www()).with_w(right_anti_dual[e4] * anti_wedge[e3215]),
            // e415, e425, e435, e321
            Simd32x4::from([
                right_anti_dual[e4] * anti_wedge[e15],
                right_anti_dual[e4] * anti_wedge[e25],
                right_anti_dual[e4] * anti_wedge[e35],
                -(right_anti_dual[e1] * anti_wedge[e23]) - (right_anti_dual[e2] * anti_wedge[e31]) - (right_anti_dual[e3] * anti_wedge[e12]),
            ]) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1()),
            // e235, e315, e125, e5
            ((Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group0().xyz())
                + (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group2().xyz())
                + (right_anti_dual.group3().yzx() * anti_wedge.group1().zxy())
                - (right_anti_dual.group3().zxy() * anti_wedge.group1().yzx()))
            .with_w(right_anti_dual[e5] * anti_wedge[scalar]),
            // e1, e2, e3, e4
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group3().xyz().with_w(right_anti_dual[e4]),
        );
    }
}
impl RejectOrthogonallyFrom<DualNum> for AntiFlatPoint {
    type Output = AntiFlatPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        5        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0        9        0
    fn reject_orthogonally_from(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return AntiFlatPoint::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(other[e12345] * -1.0) * Simd32x4::from([self[e235] * other[e12345], self[e315] * other[e12345], self[e125] * other[e12345], self[e321] * other[e12345]]),
        );
    }
}
impl RejectOrthogonallyFrom<FlatPoint> for AntiFlatPoint {
    type Output = AntiFlatPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        5        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0        9        0
    fn reject_orthogonally_from(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiFlatPoint::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(self[e321] * other[e45] * -1.0) * Simd32x4::from([other[e15] * -1.0, other[e25] * -1.0, other[e35] * -1.0, other[e45]]),
        );
    }
}
impl RejectOrthogonallyFrom<Flector> for AntiFlatPoint {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd3        1        2        0
    //    simd4        2        7        0
    // Totals...
    // yes simd        7       17        0
    //  no simd       15       42        0
    fn reject_orthogonally_from(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(self[e321]) * other.group1().xyz().with_w(other[e45]) * Simd32x4::from(-1.0),
            // e15, e25, e35, e3215
            ((self.group0().yzx() * other.group1().zxy()) - (self.group0().zxy() * other.group1().yzx())).with_w(0.0),
        );
        let right_anti_dual = AntiFlector::from_groups(
            // e235, e315, e125, e321
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (right_anti_dual[e2] * anti_wedge[e35]) + (right_anti_dual[e5] * anti_wedge[e23]),
                (right_anti_dual[e3] * anti_wedge[e15]) + (right_anti_dual[e5] * anti_wedge[e31]),
                (right_anti_dual[e1] * anti_wedge[e25]) + (right_anti_dual[e5] * anti_wedge[e12]),
                -(right_anti_dual[e2] * anti_wedge[e31]) - (right_anti_dual[e3] * anti_wedge[e12]),
            ]) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group0())
                - (right_anti_dual.group1().zxyx() * anti_wedge.group1().yzx().with_w(anti_wedge[e23])),
            // e1, e2, e3, e5
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1(),
        );
    }
}
impl RejectOrthogonallyFrom<Line> for AntiFlatPoint {
    type Output = AntiFlatPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       11        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        7       13        0
    //  no simd       10       19        0
    fn reject_orthogonally_from(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiPlane::from_groups(
            // e1, e2, e3, e5
            Simd32x4::from([self[e321], self[e321], self[e321], 1.0])
                * other.group0().with_w(-(self[e235] * other[e415]) - (self[e315] * other[e425]) - (self[e125] * other[e435])),
        );
        let right_anti_dual = AntiLine::from_groups(/* e23, e31, e12 */ other.group0(), /* e15, e25, e35 */ other.group1());
        return AntiFlatPoint::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (right_anti_dual[e23] * anti_wedge[e5]) + (right_anti_dual[e35] * anti_wedge[e2]),
                (right_anti_dual[e31] * anti_wedge[e5]) + (right_anti_dual[e15] * anti_wedge[e3]),
                (right_anti_dual[e12] * anti_wedge[e5]) + (right_anti_dual[e25] * anti_wedge[e1]),
                -(right_anti_dual[e31] * anti_wedge[e2]) - (right_anti_dual[e12] * anti_wedge[e3]),
            ]) - (anti_wedge.group0().zxyx() * right_anti_dual.group1().yzx().with_w(right_anti_dual[e23])),
        );
    }
}
impl RejectOrthogonallyFrom<Motor> for AntiFlatPoint {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       11        0
    //    simd4        2        7        0
    // Totals...
    // yes simd        8       18        0
    //  no simd       14       39        0
    fn reject_orthogonally_from(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(other[e12345]) * self.group0(),
            // e1, e2, e3, e5
            Simd32x4::from([other[e415], other[e425], other[e435], 1.0])
                * self.group0().www().with_w(-(self[e235] * other[e415]) - (self[e315] * other[e425]) - (self[e125] * other[e435])),
        );
        let right_anti_dual = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e3215
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (anti_wedge[e2] * right_anti_dual[e35]) + (anti_wedge[e5] * right_anti_dual[e23]),
                (anti_wedge[e3] * right_anti_dual[e15]) + (anti_wedge[e5] * right_anti_dual[e31]),
                (anti_wedge[e1] * right_anti_dual[e25]) + (anti_wedge[e5] * right_anti_dual[e12]),
                -(anti_wedge[e2] * right_anti_dual[e31]) - (anti_wedge[e3] * right_anti_dual[e12]),
            ]) + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group0())
                - (anti_wedge.group1().zxyx() * right_anti_dual.group1().yzx().with_w(right_anti_dual[e23])),
            // e1, e2, e3, e5
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1(),
        );
    }
}
impl RejectOrthogonallyFrom<MultiVector> for AntiFlatPoint {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       76      101        0
    //    simd2        0        1        0
    //    simd3       22       42        0
    //    simd4       22       17        0
    // Totals...
    // yes simd      120      161        0
    //  no simd      230      297        0
    fn reject_orthogonally_from(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([-(self[e235] * other[e41]) - (self[e315] * other[e42]) - (self[e125] * other[e43]) - (self[e321] * other[e45]), 0.0]),
            // e1, e2, e3, e4
            (Simd32x3::from(self[e321]) * other.group6().xyz()).with_w(0.0) + (other.group7().zxy() * self.group0().yzx()).with_w(0.0)
                - (other.group7().yzx() * self.group0().zxy()).with_w(0.0),
            // e5
            -(self[e235] * other[e415]) - (self[e315] * other[e425]) - (self[e125] * other[e435]),
            // e15, e25, e35, e45
            ((self.group0().yzx() * other.group9().zxy()) - (self.group0().zxy() * other.group9().yzx())).with_w(0.0),
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12
            (Simd32x3::from(other[e1234]) * self.group0().xyz()) - (Simd32x3::from(self[e321]) * other.group9().xyz()),
            // e415, e425, e435, e321
            Simd32x3::from(0.0).with_w(self[e321] * other[e12345]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(other[e12345]) * self.group0().xyz(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(0.0),
            // e1234
            0.0,
        );
        let right_anti_dual = MultiVector::from_groups(
            // scalar, e12345
            other.group0().yx() * Simd32x2::from([-1.0, 1.0]),
            // e1, e2, e3, e4
            other.group9().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e5
            other[e3215],
            // e15, e25, e35, e45
            other.group8().with_w(other[e321] * -1.0),
            // e41, e42, e43
            other.group7(),
            // e23, e31, e12
            other.group6().xyz(),
            // e415, e425, e435, e321
            other.group5().with_w(other[e45]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e423, e431, e412
            other.group4() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group3().xyz() * Simd32x3::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group1().xyz().with_w(other[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1234
            other[e4] * -1.0,
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                anti_wedge[scalar] * right_anti_dual[scalar],
                (anti_wedge[scalar] * right_anti_dual[e12345])
                    + (anti_wedge[e12345] * right_anti_dual[scalar])
                    + (anti_wedge[e1] * right_anti_dual[e4235])
                    + (anti_wedge[e2] * right_anti_dual[e4315])
                    + (anti_wedge[e3] * right_anti_dual[e4125])
                    + (anti_wedge[e4] * right_anti_dual[e3215])
                    + (anti_wedge[e5] * right_anti_dual[e1234])
                    + (anti_wedge[e4235] * right_anti_dual[e1])
                    + (anti_wedge[e4315] * right_anti_dual[e2])
                    + (anti_wedge[e4125] * right_anti_dual[e3])
                    + (anti_wedge[e3215] * right_anti_dual[e4])
                    + (anti_wedge[e1234] * right_anti_dual[e5])
                    - (anti_wedge[e15] * right_anti_dual[e423])
                    - (anti_wedge[e25] * right_anti_dual[e431])
                    - (anti_wedge[e35] * right_anti_dual[e412])
                    - (anti_wedge[e45] * right_anti_dual[e321])
                    - (anti_wedge[e41] * right_anti_dual[e235])
                    - (anti_wedge[e42] * right_anti_dual[e315])
                    - (anti_wedge[e43] * right_anti_dual[e125])
                    - (anti_wedge[e23] * right_anti_dual[e415])
                    - (anti_wedge[e31] * right_anti_dual[e425])
                    - (anti_wedge[e12] * right_anti_dual[e435])
                    - (anti_wedge[e415] * right_anti_dual[e23])
                    - (anti_wedge[e425] * right_anti_dual[e31])
                    - (anti_wedge[e435] * right_anti_dual[e12])
                    - (anti_wedge[e321] * right_anti_dual[e45])
                    - (anti_wedge[e423] * right_anti_dual[e15])
                    - (anti_wedge[e431] * right_anti_dual[e25])
                    - (anti_wedge[e412] * right_anti_dual[e35])
                    - (anti_wedge[e235] * right_anti_dual[e41])
                    - (anti_wedge[e315] * right_anti_dual[e42])
                    - (anti_wedge[e125] * right_anti_dual[e43]),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1()) + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1()),
            // e5
            (anti_wedge[scalar] * right_anti_dual[e5]) + (anti_wedge[e5] * right_anti_dual[scalar]),
            // e15, e25, e35, e45
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group3())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group3())
                + (Simd32x4::from(right_anti_dual[e5]) * anti_wedge.group1())
                - (Simd32x4::from(anti_wedge[e5]) * right_anti_dual.group1()),
            // e41, e42, e43
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group4())
                + (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group1().xyz())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group4())
                - (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group1().xyz()),
            // e23, e31, e12
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group5())
                + (anti_wedge.group1().yzx() * right_anti_dual.group1().zxy())
                - (anti_wedge.group1().zxy() * right_anti_dual.group1().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (anti_wedge[e4] * right_anti_dual[e15])
                    + (anti_wedge[e5] * right_anti_dual[e41])
                    + (anti_wedge[e15] * right_anti_dual[e4])
                    + (anti_wedge[e41] * right_anti_dual[e5]),
                (anti_wedge[e4] * right_anti_dual[e25])
                    + (anti_wedge[e5] * right_anti_dual[e42])
                    + (anti_wedge[e25] * right_anti_dual[e4])
                    + (anti_wedge[e42] * right_anti_dual[e5]),
                (anti_wedge[e4] * right_anti_dual[e35])
                    + (anti_wedge[e5] * right_anti_dual[e43])
                    + (anti_wedge[e35] * right_anti_dual[e4])
                    + (anti_wedge[e43] * right_anti_dual[e5]),
                -(anti_wedge[e1] * right_anti_dual[e23])
                    - (anti_wedge[e2] * right_anti_dual[e31])
                    - (anti_wedge[e3] * right_anti_dual[e12])
                    - (anti_wedge[e12] * right_anti_dual[e3]),
            ]) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group6())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group6())
                - (right_anti_dual.group1().xyzy() * anti_wedge.group3().www().with_w(anti_wedge[e31]))
                - (right_anti_dual.group3().www() * anti_wedge.group1().xyz()).with_w(anti_wedge[e23] * right_anti_dual[e1]),
            // e423, e431, e412
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group7())
                + (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group7())
                + (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group5())
                + (anti_wedge.group4().yzx() * right_anti_dual.group1().zxy())
                + (right_anti_dual.group4().yzx() * anti_wedge.group1().zxy())
                - (anti_wedge.group4().zxy() * right_anti_dual.group1().yzx())
                - (right_anti_dual.group4().zxy() * anti_wedge.group1().yzx()),
            // e235, e315, e125
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group8())
                + (Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group8())
                + (Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group5())
                + (anti_wedge.group1().yzx() * right_anti_dual.group3().zxy())
                + (anti_wedge.group3().zxy() * right_anti_dual.group1().yzx())
                - (anti_wedge.group1().zxy() * right_anti_dual.group3().yzx())
                - (anti_wedge.group3().yzx() * right_anti_dual.group1().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (anti_wedge[e3] * right_anti_dual[e425])
                    + (anti_wedge[e4] * right_anti_dual[e235])
                    + (anti_wedge[e45] * right_anti_dual[e23])
                    + (anti_wedge[e435] * right_anti_dual[e2]),
                (anti_wedge[e1] * right_anti_dual[e435])
                    + (anti_wedge[e4] * right_anti_dual[e315])
                    + (anti_wedge[e45] * right_anti_dual[e31])
                    + (anti_wedge[e415] * right_anti_dual[e3]),
                (anti_wedge[e2] * right_anti_dual[e415])
                    + (anti_wedge[e4] * right_anti_dual[e125])
                    + (anti_wedge[e45] * right_anti_dual[e12])
                    + (anti_wedge[e425] * right_anti_dual[e1]),
                -(anti_wedge[e1] * right_anti_dual[e235])
                    - (anti_wedge[e2] * right_anti_dual[e315])
                    - (anti_wedge[e3] * right_anti_dual[e125])
                    - (anti_wedge[e5] * right_anti_dual[e321]),
            ]) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group9())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group9())
                + (Simd32x4::from([right_anti_dual[e5], right_anti_dual[e5], right_anti_dual[e5], right_anti_dual[e3]]) * anti_wedge.group7().with_w(anti_wedge[e125]))
                + (anti_wedge.group5() * right_anti_dual.group3().www()).with_w(anti_wedge[e315] * right_anti_dual[e2])
                + (anti_wedge.group4().yzx() * right_anti_dual.group3().zxy()).with_w(anti_wedge[e235] * right_anti_dual[e1])
                + (right_anti_dual.group4().yzx() * anti_wedge.group3().zxy()).with_w(anti_wedge[e321] * right_anti_dual[e5])
                - (Simd32x4::from([anti_wedge[e5], anti_wedge[e5], anti_wedge[e5], anti_wedge[e15]]) * right_anti_dual.group7().with_w(right_anti_dual[e23]))
                - (right_anti_dual.group3().yzxx() * anti_wedge.group4().zxy().with_w(anti_wedge[e23]))
                - (anti_wedge.group8() * right_anti_dual.group1().www()).with_w(anti_wedge[e31] * right_anti_dual[e25])
                - (right_anti_dual.group4().zxy() * anti_wedge.group3().yzx()).with_w(anti_wedge[e12] * right_anti_dual[e35])
                - (anti_wedge.group1().yzx() * right_anti_dual.group6().zxy()).with_w(anti_wedge[e25] * right_anti_dual[e31])
                - (anti_wedge.group6().yzx() * right_anti_dual.group1().zxy()).with_w(anti_wedge[e35] * right_anti_dual[e12]),
            // e1234
            (anti_wedge[scalar] * right_anti_dual[e1234])
                + (anti_wedge[e1] * right_anti_dual[e423])
                + (anti_wedge[e2] * right_anti_dual[e431])
                + (anti_wedge[e3] * right_anti_dual[e412])
                + (anti_wedge[e4] * right_anti_dual[e321])
                + (anti_wedge[e1234] * right_anti_dual[scalar])
                - (anti_wedge[e41] * right_anti_dual[e23])
                - (anti_wedge[e42] * right_anti_dual[e31])
                - (anti_wedge[e43] * right_anti_dual[e12])
                - (anti_wedge[e23] * right_anti_dual[e41])
                - (anti_wedge[e31] * right_anti_dual[e42])
                - (anti_wedge[e12] * right_anti_dual[e43])
                - (anti_wedge[e321] * right_anti_dual[e4])
                - (anti_wedge[e423] * right_anti_dual[e1])
                - (anti_wedge[e431] * right_anti_dual[e2])
                - (anti_wedge[e412] * right_anti_dual[e3]),
        );
    }
}
impl RejectOrthogonallyFrom<Plane> for AntiFlatPoint {
    type Output = AntiFlatPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd3        1        4        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        6       14        0
    //  no simd       11       28        0
    fn reject_orthogonally_from(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(self[e321]) * other.group0().xyz() * Simd32x3::from(-1.0),
            // e15, e25, e35
            (self.group0().yzx() * other.group0().zxy()) - (self.group0().zxy() * other.group0().yzx()),
        );
        let right_anti_dual = AntiPlane::from_groups(/* e1, e2, e3, e5 */ other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]));
        return AntiFlatPoint::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (anti_wedge[e23] * right_anti_dual[e5]) + (anti_wedge[e35] * right_anti_dual[e2]),
                (anti_wedge[e31] * right_anti_dual[e5]) + (anti_wedge[e15] * right_anti_dual[e3]),
                (anti_wedge[e12] * right_anti_dual[e5]) + (anti_wedge[e25] * right_anti_dual[e1]),
                -(anti_wedge[e31] * right_anti_dual[e2]) - (anti_wedge[e12] * right_anti_dual[e3]),
            ]) - (right_anti_dual.group0().zxyx() * anti_wedge.group1().yzx().with_w(anti_wedge[e23])),
        );
    }
}
impl RejectOrthogonallyFrom<Sphere> for AntiFlatPoint {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        3        0
    //    simd3        4        8        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        6       13        0
    //  no simd       14       35        0
    fn reject_orthogonally_from(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiLine::from_groups(
            // e23, e31, e12
            (Simd32x3::from(other[e1234]) * self.group0().xyz()) - (Simd32x3::from(self[e321]) * other.group0().xyz()),
            // e15, e25, e35
            (self.group0().yzx() * other.group0().zxy()) - (self.group0().zxy() * other.group0().yzx()),
        );
        let right_anti_dual = RoundPoint::from_groups(
            // e1, e2, e3, e4
            other.group0().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e5
            other[e3215],
        );
        return Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group0(),
            // e415, e425, e435, e321
            Simd32x4::from([right_anti_dual[e4], right_anti_dual[e4], right_anti_dual[e4], 1.0])
                * anti_wedge
                    .group1()
                    .with_w(-(anti_wedge[e23] * right_anti_dual[e1]) - (anti_wedge[e31] * right_anti_dual[e2]) - (anti_wedge[e12] * right_anti_dual[e3])),
            // e235, e315, e125
            (Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group0()) + (anti_wedge.group1().zxy() * right_anti_dual.group0().yzx())
                - (anti_wedge.group1().yzx() * right_anti_dual.group0().zxy()),
        );
    }
}
impl RejectOrthogonallyFrom<VersorEven> for AntiFlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       17        0
    //    simd3        3        4        0
    //    simd4        5       13        0
    // Totals...
    // yes simd       18       34        0
    //  no simd       39       81        0
    fn reject_orthogonally_from(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(other[e12345]) * self.group0(),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self[e315] * other[e412]) + (self[e321] * other[e415]),
                (self[e125] * other[e423]) + (self[e321] * other[e425]),
                (self[e235] * other[e431]) + (self[e321] * other[e435]),
                -(self[e315] * other[e425]) - (self[e125] * other[e435]),
            ]) - (self.group0().zxyx() * other.group0().yzx().with_w(other[e415])),
        );
        let right_anti_dual = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e1234
            other.group2().xyz().with_w(other[e4]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            other.group3().xyz().with_w(other[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (anti_wedge.group1().zxyx() * right_anti_dual.group0().yzx().with_w(right_anti_dual[e4235]))
                + Simd32x3::from(0.0).with_w(
                    (anti_wedge[e2] * right_anti_dual[e4315]) + (anti_wedge[e3] * right_anti_dual[e4125]) + (anti_wedge[e5] * right_anti_dual[e1234])
                        - (anti_wedge[e315] * right_anti_dual[e42])
                        - (anti_wedge[e125] * right_anti_dual[e43])
                        - (anti_wedge[e321] * right_anti_dual[e45]),
                )
                - (right_anti_dual.group0().zxyx() * anti_wedge.group1().yzx().with_w(anti_wedge[e235])),
            // e415, e425, e435, e321
            (right_anti_dual.group0() * anti_wedge.group1().www().with_w(anti_wedge[e321]))
                + Simd32x3::from(0.0).with_w(-(anti_wedge[e2] * right_anti_dual[e31]) - (anti_wedge[e3] * right_anti_dual[e12]))
                - (anti_wedge.group1().xyzx() * right_anti_dual.group1().wwwx()),
            // e235, e315, e125, e5
            ((Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group1().xyz())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group0().xyz())
                + (anti_wedge.group1().yzx() * right_anti_dual.group2().zxy())
                - (anti_wedge.group1().zxy() * right_anti_dual.group2().yzx()))
            .with_w(anti_wedge[e5] * right_anti_dual[scalar]),
            // e1, e2, e3, e4
            Simd32x3::from(1.0).with_w(0.0) * right_anti_dual.group0().www().with_w(0.0) * anti_wedge.group1().xyz().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
        );
    }
}
impl RejectOrthogonallyFrom<VersorOdd> for AntiFlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       20        0
    //    simd3        4        7        0
    //    simd4        4        8        0
    // Totals...
    // yes simd       17       35        0
    //  no simd       37       73        0
    fn reject_orthogonally_from(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                self[e235] * other[e1234],
                self[e315] * other[e1234],
                self[e125] * other[e1234],
                -(self[e315] * other[e42]) - (self[e125] * other[e43]) - (self[e321] * other[e45]),
            ]) - (self.group0().wwwx() * other.group3().xyz().with_w(other[e41])),
            // e15, e25, e35, e3215
            ((self.group0().yzx() * other.group3().zxy()) - (self.group0().zxy() * other.group3().yzx())).with_w(0.0),
        );
        let right_anti_dual = VersorEven::from_groups(
            // e423, e431, e412, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            other.group2().xyz().with_w(other[e3215]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e4
            other.group3().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (anti_wedge.group0() * right_anti_dual.group3().www().with_w(right_anti_dual[e12345]))
                + Simd32x3::from(0.0).with_w(
                    -(anti_wedge[e23] * right_anti_dual[e415])
                        - (anti_wedge[e31] * right_anti_dual[e425])
                        - (anti_wedge[e12] * right_anti_dual[e435])
                        - (anti_wedge[e15] * right_anti_dual[e423])
                        - (anti_wedge[e25] * right_anti_dual[e431])
                        - (anti_wedge[e35] * right_anti_dual[e412]),
                )
                + (anti_wedge.group0().www() * right_anti_dual.group0().xyz()).with_w(anti_wedge[e3215] * right_anti_dual[e4]),
            // e415, e425, e435, e321
            Simd32x4::from([
                anti_wedge[e15] * right_anti_dual[e4],
                anti_wedge[e25] * right_anti_dual[e4],
                anti_wedge[e35] * right_anti_dual[e4],
                -(anti_wedge[e23] * right_anti_dual[e1]) - (anti_wedge[e31] * right_anti_dual[e2]) - (anti_wedge[e12] * right_anti_dual[e3]),
            ]) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1()),
            // e235, e315, e125, e5
            ((Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group2().xyz())
                + (Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group0().xyz())
                + (anti_wedge.group1().zxy() * right_anti_dual.group3().yzx())
                - (anti_wedge.group1().yzx() * right_anti_dual.group3().zxy()))
            .with_w(anti_wedge[scalar] * right_anti_dual[e5]),
            // e1, e2, e3, e4
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group3(),
        );
    }
}
impl std::ops::Div<reject_orthogonally_from> for AntiFlector {
    type Output = reject_orthogonally_from_partial<AntiFlector>;
    fn div(self, _rhs: reject_orthogonally_from) -> Self::Output {
        reject_orthogonally_from_partial(self)
    }
}
impl RejectOrthogonallyFrom<AntiCircleRotor> for AntiFlector {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        4        0
    //    simd3        0        2        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        3       10        0
    //  no simd        3       26        0
    fn reject_orthogonally_from(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Scalar::from_groups(
            // scalar
            -(other[e41] * self[e235]) - (other[e42] * self[e315]) - (other[e43] * self[e125]) - (other[e45] * self[e321]),
        );
        let right_anti_dual = CircleRotor::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e12345
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1(),
            // e235, e315, e125, e12345
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group2(),
        );
    }
}
impl RejectOrthogonallyFrom<AntiDipoleInversion> for AntiFlector {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       21        0
    //    simd3        1        2        0
    //    simd4        4        7        0
    // Totals...
    // yes simd       11       30        0
    //  no simd       25       55        0
    fn reject_orthogonally_from(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiPlane::from_groups(
            // e1, e2, e3, e5
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e415] * self[e321]),
                (other[e423] * self[e125]) + (other[e425] * self[e321]),
                (other[e431] * self[e235]) + (other[e435] * self[e321]),
                -(other[e425] * self[e315]) - (other[e435] * self[e125]),
            ]) - (self.group0().zxyx() * other.group0().yzx().with_w(other[e415])),
        );
        let right_anti_dual = DipoleInversion::from_groups(
            // e41, e42, e43
            other.group0(),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            other.group3() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return CircleRotor::from_groups(
            // e423, e431, e412
            (right_anti_dual.group0().yzx() * anti_wedge.group0().zxy()) - (right_anti_dual.group0().zxy() * anti_wedge.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                anti_wedge[e5] * right_anti_dual[e41],
                anti_wedge[e5] * right_anti_dual[e42],
                anti_wedge[e5] * right_anti_dual[e43],
                -(anti_wedge[e2] * right_anti_dual[e31]) - (anti_wedge[e3] * right_anti_dual[e12]),
            ]) - (anti_wedge.group0().xyzx() * right_anti_dual.group1().wwwx()),
            // e235, e315, e125, e12345
            Simd32x4::from([
                anti_wedge[e3] * right_anti_dual[e25] * -1.0,
                anti_wedge[e1] * right_anti_dual[e35] * -1.0,
                anti_wedge[e2] * right_anti_dual[e15] * -1.0,
                (anti_wedge[e3] * right_anti_dual[e4125]) + (anti_wedge[e5] * right_anti_dual[e1234]),
            ]) + (anti_wedge.group0().yzxx() * right_anti_dual.group2().zxy().with_w(right_anti_dual[e4235]))
                + (anti_wedge.group0().wwwy() * right_anti_dual.group1().xyz().with_w(right_anti_dual[e4315])),
        );
    }
}
impl RejectOrthogonallyFrom<AntiScalar> for AntiFlector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        5        0
    //  no simd        0       17        0
    fn reject_orthogonally_from(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(other[e12345]) * self.group0(),
            // e1, e2, e3, e5
            Simd32x4::from(other[e12345]) * self.group1(),
        );
        let right_anti_dual = Scalar::from_groups(/* scalar */ other[e12345] * -1.0);
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group0(),
            // e1, e2, e3, e5
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1(),
        );
    }
}
impl RejectOrthogonallyFrom<Circle> for AntiFlector {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       14        0
    //    simd3        3        6        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       10       22        0
    //  no simd       22       40        0
    fn reject_orthogonally_from(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiPlane::from_groups(
            // e1, e2, e3, e5
            Simd32x4::from([
                (self[e315] * other[e412]) + (self[e321] * other[e415]),
                (self[e125] * other[e423]) + (self[e321] * other[e425]),
                (self[e235] * other[e431]) + (self[e321] * other[e435]),
                -(self[e315] * other[e425]) - (self[e125] * other[e435]),
            ]) - (other.group0().yzx() * self.group0().zxy()).with_w(self[e235] * other[e415]),
        );
        let right_anti_dual = Dipole::from_groups(
            // e41, e42, e43
            other.group0(),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35
            other.group2(),
        );
        return Circle::from_groups(
            // e423, e431, e412
            (right_anti_dual.group0().yzx() * anti_wedge.group0().zxy()) - (right_anti_dual.group0().zxy() * anti_wedge.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                anti_wedge[e5] * right_anti_dual[e41],
                anti_wedge[e5] * right_anti_dual[e42],
                anti_wedge[e5] * right_anti_dual[e43],
                -(anti_wedge[e2] * right_anti_dual[e31]) - (anti_wedge[e3] * right_anti_dual[e12]),
            ]) - (anti_wedge.group0().xyzx() * right_anti_dual.group1().wwwx()),
            // e235, e315, e125
            (Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group1().xyz()) + (right_anti_dual.group2().zxy() * anti_wedge.group0().yzx())
                - (right_anti_dual.group2().yzx() * anti_wedge.group0().zxy()),
        );
    }
}
impl RejectOrthogonallyFrom<CircleRotor> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       21        0
    //    simd3        3        8        0
    //    simd4        5        7        0
    // Totals...
    // yes simd       15       36        0
    //  no simd       36       73        0
    fn reject_orthogonally_from(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(other[e12345]) * self.group0(),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self[e321] * other[e415]) + (self[e1] * other[e12345]),
                (self[e321] * other[e425]) + (self[e2] * other[e12345]),
                (self[e321] * other[e435]) + (self[e3] * other[e12345]),
                -(self[e315] * other[e425]) - (self[e125] * other[e435]),
            ]) + (other.group0().zxy() * self.group0().yzx()).with_w(self[e5] * other[e12345])
                - (other.group0().yzx() * self.group0().zxy()).with_w(self[e235] * other[e415]),
        );
        let right_anti_dual = AntiCircleRotor::from_groups(
            // e41, e42, e43
            other.group0(),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, scalar
            other.group2() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                right_anti_dual[e42] * anti_wedge[e3],
                right_anti_dual[e43] * anti_wedge[e1],
                right_anti_dual[e41] * anti_wedge[e2],
                -(right_anti_dual[e42] * anti_wedge[e315]) - (right_anti_dual[e43] * anti_wedge[e125]) - (right_anti_dual[e45] * anti_wedge[e321]),
            ]) - (right_anti_dual.group0().zxy() * anti_wedge.group1().yzx()).with_w(right_anti_dual[e41] * anti_wedge[e235]),
            // e415, e425, e435, e321
            Simd32x3::from(0.0).with_w(-(right_anti_dual[e31] * anti_wedge[e2]) - (right_anti_dual[e12] * anti_wedge[e3]))
                + (right_anti_dual.group0() * anti_wedge.group1().www()).with_w(right_anti_dual[scalar] * anti_wedge[e321])
                - (right_anti_dual.group1().wwwx() * anti_wedge.group1().xyzx()),
            // e235, e315, e125, e5
            ((Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group0().xyz())
                + (Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group1().xyz())
                + (right_anti_dual.group2().zxy() * anti_wedge.group1().yzx())
                - (right_anti_dual.group2().yzx() * anti_wedge.group1().zxy()))
            .with_w(right_anti_dual[scalar] * anti_wedge[e5]),
            // e1, e2, e3, e4
            Simd32x3::from(1.0).with_w(0.0) * right_anti_dual.group2().www().with_w(0.0) * anti_wedge.group1().xyz().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
        );
    }
}
impl RejectOrthogonallyFrom<Dipole> for AntiFlector {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        4        0
    //    simd3        0        4        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        3       10        0
    //  no simd        3       24        0
    fn reject_orthogonally_from(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Scalar::from_groups(
            // scalar
            -(self[e235] * other[e41]) - (self[e315] * other[e42]) - (self[e125] * other[e43]) - (self[e321] * other[e45]),
        );
        let right_anti_dual = Circle::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125
            other.group2() * Simd32x3::from(-1.0),
        );
        return Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1(),
            // e235, e315, e125
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group2(),
        );
    }
}
impl RejectOrthogonallyFrom<DipoleInversion> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       25        0
    //    simd3        4       10        0
    //    simd4        4        5        0
    // Totals...
    // yes simd       20       40        0
    //  no simd       40       75        0
    fn reject_orthogonally_from(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x3::from(0.0).with_w(
                (self[e2] * other[e4315]) + (self[e3] * other[e4125]) + (self[e5] * other[e1234])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43])
                    - (self[e321] * other[e45]),
            ) + (other.group2().www() * self.group0().xyz()).with_w(self[e1] * other[e4235])
                - (self.group0().www() * other.group3().xyz()).with_w(self[e235] * other[e41]),
            // e15, e25, e35, e3215
            ((self.group0().yzx() * other.group3().zxy()) - (self.group0().zxy() * other.group3().yzx())).with_w(0.0),
        );
        let right_anti_dual = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e4
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group3() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                right_anti_dual[e4] * anti_wedge[e23],
                right_anti_dual[e4] * anti_wedge[e31],
                right_anti_dual[e4] * anti_wedge[e12],
                -(right_anti_dual[e423] * anti_wedge[e15])
                    - (right_anti_dual[e431] * anti_wedge[e25])
                    - (right_anti_dual[e412] * anti_wedge[e35])
                    - (right_anti_dual[e415] * anti_wedge[e23])
                    - (right_anti_dual[e425] * anti_wedge[e31])
                    - (right_anti_dual[e435] * anti_wedge[e12]),
            ]) + (right_anti_dual.group0() * anti_wedge.group0().www()).with_w(right_anti_dual[e4] * anti_wedge[e3215]),
            // e415, e425, e435, e321
            Simd32x4::from([
                right_anti_dual[e4] * anti_wedge[e15],
                right_anti_dual[e4] * anti_wedge[e25],
                right_anti_dual[e4] * anti_wedge[e35],
                -(right_anti_dual[e1] * anti_wedge[e23]) - (right_anti_dual[e2] * anti_wedge[e31]) - (right_anti_dual[e3] * anti_wedge[e12]),
            ]) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1()),
            // e235, e315, e125, e5
            ((Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group0().xyz())
                + (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group2().xyz())
                + (right_anti_dual.group3().yzx() * anti_wedge.group1().zxy())
                - (right_anti_dual.group3().zxy() * anti_wedge.group1().yzx()))
            .with_w(right_anti_dual[e5] * anti_wedge[scalar]),
            // e1, e2, e3, e4
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group3().xyz().with_w(right_anti_dual[e4]),
        );
    }
}
impl RejectOrthogonallyFrom<DualNum> for AntiFlector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd2        0        1        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        5        0
    //  no simd        0       18        0
    fn reject_orthogonally_from(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(other[e12345]) * self.group0(),
            // e1, e2, e3, e5
            Simd32x4::from(other[e12345]) * self.group1(),
        );
        let right_anti_dual = AntiDualNum::from_groups(/* e3215, scalar */ other.group0() * Simd32x2::from(-1.0));
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group0(),
            // e1, e2, e3, e5
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1(),
        );
    }
}
impl RejectOrthogonallyFrom<FlatPoint> for AntiFlector {
    type Output = AntiFlatPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        5        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0        9        0
    fn reject_orthogonally_from(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiFlatPoint::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(self[e321] * other[e45] * -1.0) * Simd32x4::from([other[e15] * -1.0, other[e25] * -1.0, other[e35] * -1.0, other[e45]]),
        );
    }
}
impl RejectOrthogonallyFrom<Flector> for AntiFlector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       12        0
    //    simd3        1        2        0
    //    simd4        2        7        0
    // Totals...
    // yes simd       10       21        0
    //  no simd       18       46        0
    fn reject_orthogonally_from(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([other[e4235], other[e4315], other[e4125], 1.0])
                * self
                    .group0()
                    .www()
                    .with_w((self[e1] * other[e4235]) + (self[e2] * other[e4315]) + (self[e3] * other[e4125]) - (self[e321] * other[e45]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, e3215
            ((self.group0().yzx() * other.group1().zxy()) - (self.group0().zxy() * other.group1().yzx())).with_w(0.0),
        );
        let right_anti_dual = AntiFlector::from_groups(
            // e235, e315, e125, e321
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (right_anti_dual[e2] * anti_wedge[e35]) + (right_anti_dual[e5] * anti_wedge[e23]),
                (right_anti_dual[e3] * anti_wedge[e15]) + (right_anti_dual[e5] * anti_wedge[e31]),
                (right_anti_dual[e1] * anti_wedge[e25]) + (right_anti_dual[e5] * anti_wedge[e12]),
                -(right_anti_dual[e2] * anti_wedge[e31]) - (right_anti_dual[e3] * anti_wedge[e12]),
            ]) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group0())
                - (right_anti_dual.group1().zxyx() * anti_wedge.group1().yzx().with_w(anti_wedge[e23])),
            // e1, e2, e3, e5
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1(),
        );
    }
}
impl RejectOrthogonallyFrom<Line> for AntiFlector {
    type Output = AntiFlatPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       11        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        7       13        0
    //  no simd       10       19        0
    fn reject_orthogonally_from(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiPlane::from_groups(
            // e1, e2, e3, e5
            Simd32x4::from([self[e321], self[e321], self[e321], 1.0])
                * other.group0().with_w(-(self[e235] * other[e415]) - (self[e315] * other[e425]) - (self[e125] * other[e435])),
        );
        let right_anti_dual = AntiLine::from_groups(/* e23, e31, e12 */ other.group0(), /* e15, e25, e35 */ other.group1());
        return AntiFlatPoint::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (right_anti_dual[e23] * anti_wedge[e5]) + (right_anti_dual[e35] * anti_wedge[e2]),
                (right_anti_dual[e31] * anti_wedge[e5]) + (right_anti_dual[e15] * anti_wedge[e3]),
                (right_anti_dual[e12] * anti_wedge[e5]) + (right_anti_dual[e25] * anti_wedge[e1]),
                -(right_anti_dual[e31] * anti_wedge[e2]) - (right_anti_dual[e12] * anti_wedge[e3]),
            ]) - (anti_wedge.group0().zxyx() * right_anti_dual.group1().yzx().with_w(right_anti_dual[e23])),
        );
    }
}
impl RejectOrthogonallyFrom<Motor> for AntiFlector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       14        0
    //    simd4        3        7        0
    // Totals...
    // yes simd        9       21        0
    //  no simd       18       42        0
    fn reject_orthogonally_from(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(other[e12345]) * self.group0(),
            // e1, e2, e3, e5
            Simd32x4::from([
                self[e1] * other[e12345],
                self[e2] * other[e12345],
                self[e3] * other[e12345],
                -(self[e235] * other[e415]) - (self[e315] * other[e425]) - (self[e125] * other[e435]),
            ]) + (other.group0() * self.group0().www().with_w(self[e5])),
        );
        let right_anti_dual = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e3215
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (anti_wedge[e2] * right_anti_dual[e35]) + (anti_wedge[e5] * right_anti_dual[e23]),
                (anti_wedge[e3] * right_anti_dual[e15]) + (anti_wedge[e5] * right_anti_dual[e31]),
                (anti_wedge[e1] * right_anti_dual[e25]) + (anti_wedge[e5] * right_anti_dual[e12]),
                -(anti_wedge[e2] * right_anti_dual[e31]) - (anti_wedge[e3] * right_anti_dual[e12]),
            ]) + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group0())
                - (anti_wedge.group1().zxyx() * right_anti_dual.group1().yzx().with_w(right_anti_dual[e23])),
            // e1, e2, e3, e5
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1(),
        );
    }
}
impl RejectOrthogonallyFrom<MultiVector> for AntiFlector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       81      106        0
    //    simd2        0        1        0
    //    simd3       22       43        0
    //    simd4       23       17        0
    // Totals...
    // yes simd      126      167        0
    //  no simd      239      305        0
    fn reject_orthogonally_from(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e1] * other[e4235]) + (self[e2] * other[e4315]) + (self[e3] * other[e4125]) + (self[e5] * other[e1234])
                    - (self[e235] * other[e41])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43])
                    - (self[e321] * other[e45]),
                0.0,
            ]),
            // e1, e2, e3, e4
            (Simd32x3::from(self[e321]) * other.group6().xyz()).with_w(0.0)
                + (Simd32x3::from(other[e12345]) * self.group1().xyz()).with_w(0.0)
                + (other.group7().zxy() * self.group0().yzx()).with_w(0.0)
                - (other.group7().yzx() * self.group0().zxy()).with_w(0.0),
            // e5
            (self[e5] * other[e12345]) - (self[e235] * other[e415]) - (self[e315] * other[e425]) - (self[e125] * other[e435]),
            // e15, e25, e35, e45
            ((self.group0().yzx() * other.group9().zxy()) - (self.group0().zxy() * other.group9().yzx())).with_w(0.0),
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12
            (Simd32x3::from(other[e1234]) * self.group0().xyz()) - (Simd32x3::from(self[e321]) * other.group9().xyz()),
            // e415, e425, e435, e321
            Simd32x3::from(0.0).with_w(self[e321] * other[e12345]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(other[e12345]) * self.group0().xyz(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(0.0),
            // e1234
            0.0,
        );
        let right_anti_dual = MultiVector::from_groups(
            // scalar, e12345
            other.group0().yx() * Simd32x2::from([-1.0, 1.0]),
            // e1, e2, e3, e4
            other.group9().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e5
            other[e3215],
            // e15, e25, e35, e45
            other.group8().with_w(other[e321] * -1.0),
            // e41, e42, e43
            other.group7(),
            // e23, e31, e12
            other.group6().xyz(),
            // e415, e425, e435, e321
            other.group5().with_w(other[e45]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e423, e431, e412
            other.group4() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group3().xyz() * Simd32x3::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group1().xyz().with_w(other[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1234
            other[e4] * -1.0,
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                anti_wedge[scalar] * right_anti_dual[scalar],
                (anti_wedge[scalar] * right_anti_dual[e12345])
                    + (anti_wedge[e12345] * right_anti_dual[scalar])
                    + (anti_wedge[e1] * right_anti_dual[e4235])
                    + (anti_wedge[e2] * right_anti_dual[e4315])
                    + (anti_wedge[e3] * right_anti_dual[e4125])
                    + (anti_wedge[e4] * right_anti_dual[e3215])
                    + (anti_wedge[e5] * right_anti_dual[e1234])
                    + (anti_wedge[e4235] * right_anti_dual[e1])
                    + (anti_wedge[e4315] * right_anti_dual[e2])
                    + (anti_wedge[e4125] * right_anti_dual[e3])
                    + (anti_wedge[e3215] * right_anti_dual[e4])
                    + (anti_wedge[e1234] * right_anti_dual[e5])
                    - (anti_wedge[e15] * right_anti_dual[e423])
                    - (anti_wedge[e25] * right_anti_dual[e431])
                    - (anti_wedge[e35] * right_anti_dual[e412])
                    - (anti_wedge[e45] * right_anti_dual[e321])
                    - (anti_wedge[e41] * right_anti_dual[e235])
                    - (anti_wedge[e42] * right_anti_dual[e315])
                    - (anti_wedge[e43] * right_anti_dual[e125])
                    - (anti_wedge[e23] * right_anti_dual[e415])
                    - (anti_wedge[e31] * right_anti_dual[e425])
                    - (anti_wedge[e12] * right_anti_dual[e435])
                    - (anti_wedge[e415] * right_anti_dual[e23])
                    - (anti_wedge[e425] * right_anti_dual[e31])
                    - (anti_wedge[e435] * right_anti_dual[e12])
                    - (anti_wedge[e321] * right_anti_dual[e45])
                    - (anti_wedge[e423] * right_anti_dual[e15])
                    - (anti_wedge[e431] * right_anti_dual[e25])
                    - (anti_wedge[e412] * right_anti_dual[e35])
                    - (anti_wedge[e235] * right_anti_dual[e41])
                    - (anti_wedge[e315] * right_anti_dual[e42])
                    - (anti_wedge[e125] * right_anti_dual[e43]),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1()) + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1()),
            // e5
            (anti_wedge[scalar] * right_anti_dual[e5]) + (anti_wedge[e5] * right_anti_dual[scalar]),
            // e15, e25, e35, e45
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group3())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group3())
                + (Simd32x4::from(right_anti_dual[e5]) * anti_wedge.group1())
                - (Simd32x4::from(anti_wedge[e5]) * right_anti_dual.group1()),
            // e41, e42, e43
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group4())
                + (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group1().xyz())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group4())
                - (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group1().xyz()),
            // e23, e31, e12
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group5())
                + (anti_wedge.group1().yzx() * right_anti_dual.group1().zxy())
                - (anti_wedge.group1().zxy() * right_anti_dual.group1().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (anti_wedge[e4] * right_anti_dual[e15])
                    + (anti_wedge[e5] * right_anti_dual[e41])
                    + (anti_wedge[e15] * right_anti_dual[e4])
                    + (anti_wedge[e41] * right_anti_dual[e5]),
                (anti_wedge[e4] * right_anti_dual[e25])
                    + (anti_wedge[e5] * right_anti_dual[e42])
                    + (anti_wedge[e25] * right_anti_dual[e4])
                    + (anti_wedge[e42] * right_anti_dual[e5]),
                (anti_wedge[e4] * right_anti_dual[e35])
                    + (anti_wedge[e5] * right_anti_dual[e43])
                    + (anti_wedge[e35] * right_anti_dual[e4])
                    + (anti_wedge[e43] * right_anti_dual[e5]),
                -(anti_wedge[e1] * right_anti_dual[e23])
                    - (anti_wedge[e2] * right_anti_dual[e31])
                    - (anti_wedge[e3] * right_anti_dual[e12])
                    - (anti_wedge[e12] * right_anti_dual[e3]),
            ]) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group6())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group6())
                - (right_anti_dual.group1().xyzy() * anti_wedge.group3().www().with_w(anti_wedge[e31]))
                - (right_anti_dual.group3().www() * anti_wedge.group1().xyz()).with_w(anti_wedge[e23] * right_anti_dual[e1]),
            // e423, e431, e412
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group7())
                + (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group7())
                + (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group5())
                + (anti_wedge.group4().yzx() * right_anti_dual.group1().zxy())
                + (right_anti_dual.group4().yzx() * anti_wedge.group1().zxy())
                - (anti_wedge.group4().zxy() * right_anti_dual.group1().yzx())
                - (right_anti_dual.group4().zxy() * anti_wedge.group1().yzx()),
            // e235, e315, e125
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group8())
                + (Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group8())
                + (Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group5())
                + (anti_wedge.group1().yzx() * right_anti_dual.group3().zxy())
                + (anti_wedge.group3().zxy() * right_anti_dual.group1().yzx())
                - (anti_wedge.group1().zxy() * right_anti_dual.group3().yzx())
                - (anti_wedge.group3().yzx() * right_anti_dual.group1().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (anti_wedge[e3] * right_anti_dual[e425])
                    + (anti_wedge[e4] * right_anti_dual[e235])
                    + (anti_wedge[e45] * right_anti_dual[e23])
                    + (anti_wedge[e435] * right_anti_dual[e2]),
                (anti_wedge[e1] * right_anti_dual[e435])
                    + (anti_wedge[e4] * right_anti_dual[e315])
                    + (anti_wedge[e45] * right_anti_dual[e31])
                    + (anti_wedge[e415] * right_anti_dual[e3]),
                (anti_wedge[e2] * right_anti_dual[e415])
                    + (anti_wedge[e4] * right_anti_dual[e125])
                    + (anti_wedge[e45] * right_anti_dual[e12])
                    + (anti_wedge[e425] * right_anti_dual[e1]),
                -(anti_wedge[e1] * right_anti_dual[e235])
                    - (anti_wedge[e2] * right_anti_dual[e315])
                    - (anti_wedge[e3] * right_anti_dual[e125])
                    - (anti_wedge[e5] * right_anti_dual[e321]),
            ]) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group9())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group9())
                + (Simd32x4::from([right_anti_dual[e5], right_anti_dual[e5], right_anti_dual[e5], right_anti_dual[e3]]) * anti_wedge.group7().with_w(anti_wedge[e125]))
                + (anti_wedge.group5() * right_anti_dual.group3().www()).with_w(anti_wedge[e315] * right_anti_dual[e2])
                + (anti_wedge.group4().yzx() * right_anti_dual.group3().zxy()).with_w(anti_wedge[e235] * right_anti_dual[e1])
                + (right_anti_dual.group4().yzx() * anti_wedge.group3().zxy()).with_w(anti_wedge[e321] * right_anti_dual[e5])
                - (Simd32x4::from([anti_wedge[e5], anti_wedge[e5], anti_wedge[e5], anti_wedge[e15]]) * right_anti_dual.group7().with_w(right_anti_dual[e23]))
                - (right_anti_dual.group3().yzxx() * anti_wedge.group4().zxy().with_w(anti_wedge[e23]))
                - (anti_wedge.group8() * right_anti_dual.group1().www()).with_w(anti_wedge[e31] * right_anti_dual[e25])
                - (right_anti_dual.group4().zxy() * anti_wedge.group3().yzx()).with_w(anti_wedge[e12] * right_anti_dual[e35])
                - (anti_wedge.group1().yzx() * right_anti_dual.group6().zxy()).with_w(anti_wedge[e25] * right_anti_dual[e31])
                - (anti_wedge.group6().yzx() * right_anti_dual.group1().zxy()).with_w(anti_wedge[e35] * right_anti_dual[e12]),
            // e1234
            (anti_wedge[scalar] * right_anti_dual[e1234])
                + (anti_wedge[e1] * right_anti_dual[e423])
                + (anti_wedge[e2] * right_anti_dual[e431])
                + (anti_wedge[e3] * right_anti_dual[e412])
                + (anti_wedge[e4] * right_anti_dual[e321])
                + (anti_wedge[e1234] * right_anti_dual[scalar])
                - (anti_wedge[e41] * right_anti_dual[e23])
                - (anti_wedge[e42] * right_anti_dual[e31])
                - (anti_wedge[e43] * right_anti_dual[e12])
                - (anti_wedge[e23] * right_anti_dual[e41])
                - (anti_wedge[e31] * right_anti_dual[e42])
                - (anti_wedge[e12] * right_anti_dual[e43])
                - (anti_wedge[e321] * right_anti_dual[e4])
                - (anti_wedge[e423] * right_anti_dual[e1])
                - (anti_wedge[e431] * right_anti_dual[e2])
                - (anti_wedge[e412] * right_anti_dual[e3]),
        );
    }
}
impl RejectOrthogonallyFrom<Plane> for AntiFlector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       11        0
    //    simd3        1        2        0
    //    simd4        1        5        0
    // Totals...
    // yes simd        8       18        0
    //  no simd       13       37        0
    fn reject_orthogonally_from(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([other[e4235], other[e4315], other[e4125], 1.0])
                * self.group0().www().with_w((self[e1] * other[e4235]) + (self[e2] * other[e4315]) + (self[e3] * other[e4125]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, e3215
            ((self.group0().yzx() * other.group0().zxy()) - (self.group0().zxy() * other.group0().yzx())).with_w(0.0),
        );
        let right_anti_dual = AntiPlane::from_groups(/* e1, e2, e3, e5 */ other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]));
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (anti_wedge[e23] * right_anti_dual[e5]) + (anti_wedge[e35] * right_anti_dual[e2]),
                (anti_wedge[e31] * right_anti_dual[e5]) + (anti_wedge[e15] * right_anti_dual[e3]),
                (anti_wedge[e12] * right_anti_dual[e5]) + (anti_wedge[e25] * right_anti_dual[e1]),
                -(anti_wedge[e31] * right_anti_dual[e2]) - (anti_wedge[e12] * right_anti_dual[e3]),
            ]) - (right_anti_dual.group0().zxyx() * anti_wedge.group1().yzx().with_w(anti_wedge[e23])),
            // e1, e2, e3, e5
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group0(),
        );
    }
}
impl RejectOrthogonallyFrom<Sphere> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       13        0
    //    simd3        3        5        0
    //    simd4        1        5        0
    // Totals...
    // yes simd        8       23        0
    //  no simd       17       48        0
    fn reject_orthogonally_from(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                self[e321] * other[e4235] * -1.0,
                self[e321] * other[e4315] * -1.0,
                self[e321] * other[e4125] * -1.0,
                (self[e2] * other[e4315]) + (self[e3] * other[e4125]) + (self[e5] * other[e1234]),
            ]) + (Simd32x4::from([other[e1234], other[e1234], other[e1234], other[e4235]]) * self.group0().xyz().with_w(self[e1])),
            // e15, e25, e35, e3215
            ((self.group0().yzx() * other.group0().zxy()) - (self.group0().zxy() * other.group0().yzx())).with_w(0.0),
        );
        let right_anti_dual = RoundPoint::from_groups(
            // e1, e2, e3, e4
            other.group0().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e5
            other[e3215],
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(right_anti_dual[e4]) * anti_wedge.group0().xyz().with_w(anti_wedge[e3215]),
            // e415, e425, e435, e321
            Simd32x4::from([right_anti_dual[e4], right_anti_dual[e4], right_anti_dual[e4], 1.0])
                * anti_wedge
                    .group1()
                    .xyz()
                    .with_w(-(anti_wedge[e23] * right_anti_dual[e1]) - (anti_wedge[e31] * right_anti_dual[e2]) - (anti_wedge[e12] * right_anti_dual[e3])),
            // e235, e315, e125, e5
            ((Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group0().xyz()) + (anti_wedge.group1().zxy() * right_anti_dual.group0().yzx())
                - (anti_wedge.group1().yzx() * right_anti_dual.group0().zxy()))
            .with_w(anti_wedge[scalar] * right_anti_dual[e5]),
            // e1, e2, e3, e4
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group0(),
        );
    }
}
impl RejectOrthogonallyFrom<VersorEven> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       17        0
    //    simd3        3        4        0
    //    simd4        6       14        0
    // Totals...
    // yes simd       19       35        0
    //  no simd       43       85        0
    fn reject_orthogonally_from(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(other[e12345]) * self.group0(),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self[e321] * other[e415]) + (self[e1] * other[e12345]),
                (self[e321] * other[e425]) + (self[e2] * other[e12345]),
                (self[e321] * other[e435]) + (self[e3] * other[e12345]),
                -(self[e315] * other[e425]) - (self[e125] * other[e435]),
            ]) + (other.group0().zxyw() * self.group0().yzx().with_w(self[e5]))
                - (self.group0().zxyx() * other.group0().yzx().with_w(other[e415])),
        );
        let right_anti_dual = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e1234
            other.group2().xyz().with_w(other[e4]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            other.group3().xyz().with_w(other[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (anti_wedge.group1().zxyx() * right_anti_dual.group0().yzx().with_w(right_anti_dual[e4235]))
                + Simd32x3::from(0.0).with_w(
                    (anti_wedge[e2] * right_anti_dual[e4315]) + (anti_wedge[e3] * right_anti_dual[e4125]) + (anti_wedge[e5] * right_anti_dual[e1234])
                        - (anti_wedge[e315] * right_anti_dual[e42])
                        - (anti_wedge[e125] * right_anti_dual[e43])
                        - (anti_wedge[e321] * right_anti_dual[e45]),
                )
                - (right_anti_dual.group0().zxyx() * anti_wedge.group1().yzx().with_w(anti_wedge[e235])),
            // e415, e425, e435, e321
            (right_anti_dual.group0() * anti_wedge.group1().www().with_w(anti_wedge[e321]))
                + Simd32x3::from(0.0).with_w(-(anti_wedge[e2] * right_anti_dual[e31]) - (anti_wedge[e3] * right_anti_dual[e12]))
                - (anti_wedge.group1().xyzx() * right_anti_dual.group1().wwwx()),
            // e235, e315, e125, e5
            ((Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group1().xyz())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group0().xyz())
                + (anti_wedge.group1().yzx() * right_anti_dual.group2().zxy())
                - (anti_wedge.group1().zxy() * right_anti_dual.group2().yzx()))
            .with_w(anti_wedge[e5] * right_anti_dual[scalar]),
            // e1, e2, e3, e4
            Simd32x3::from(1.0).with_w(0.0) * right_anti_dual.group0().www().with_w(0.0) * anti_wedge.group1().xyz().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
        );
    }
}
impl RejectOrthogonallyFrom<VersorOdd> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       21        0
    //    simd3        4        8        0
    //    simd4        5        8        0
    // Totals...
    // yes simd       21       37        0
    //  no simd       44       77        0
    fn reject_orthogonally_from(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x3::from(0.0).with_w(
                (self[e2] * other[e4315]) + (self[e3] * other[e4125]) + (self[e5] * other[e1234])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43])
                    - (self[e321] * other[e45]),
            ) + (other.group2().www() * self.group0().xyz()).with_w(self[e1] * other[e4235])
                - (self.group0().wwwx() * other.group3().xyz().with_w(other[e41])),
            // e15, e25, e35, e3215
            ((self.group0().yzx() * other.group3().zxy()) - (self.group0().zxy() * other.group3().yzx())).with_w(0.0),
        );
        let right_anti_dual = VersorEven::from_groups(
            // e423, e431, e412, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            other.group2().xyz().with_w(other[e3215]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e4
            other.group3().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (anti_wedge.group0() * right_anti_dual.group3().www().with_w(right_anti_dual[e12345]))
                + Simd32x3::from(0.0).with_w(
                    -(anti_wedge[e23] * right_anti_dual[e415])
                        - (anti_wedge[e31] * right_anti_dual[e425])
                        - (anti_wedge[e12] * right_anti_dual[e435])
                        - (anti_wedge[e15] * right_anti_dual[e423])
                        - (anti_wedge[e25] * right_anti_dual[e431])
                        - (anti_wedge[e35] * right_anti_dual[e412]),
                )
                + (anti_wedge.group0().www() * right_anti_dual.group0().xyz()).with_w(anti_wedge[e3215] * right_anti_dual[e4]),
            // e415, e425, e435, e321
            Simd32x4::from([
                anti_wedge[e15] * right_anti_dual[e4],
                anti_wedge[e25] * right_anti_dual[e4],
                anti_wedge[e35] * right_anti_dual[e4],
                -(anti_wedge[e23] * right_anti_dual[e1]) - (anti_wedge[e31] * right_anti_dual[e2]) - (anti_wedge[e12] * right_anti_dual[e3]),
            ]) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1()),
            // e235, e315, e125, e5
            ((Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group2().xyz())
                + (Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group0().xyz())
                + (anti_wedge.group1().zxy() * right_anti_dual.group3().yzx())
                - (anti_wedge.group1().yzx() * right_anti_dual.group3().zxy()))
            .with_w(anti_wedge[scalar] * right_anti_dual[e5]),
            // e1, e2, e3, e4
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group3(),
        );
    }
}
impl std::ops::Div<reject_orthogonally_from> for AntiLine {
    type Output = reject_orthogonally_from_partial<AntiLine>;
    fn div(self, _rhs: reject_orthogonally_from) -> Self::Output {
        reject_orthogonally_from_partial(self)
    }
}
impl RejectOrthogonallyFrom<AntiDipoleInversion> for AntiLine {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5        6        0
    //    simd3        0        1        0
    //    simd4        0        6        0
    // Totals...
    // yes simd        5       13        0
    //  no simd        5       33        0
    fn reject_orthogonally_from(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Scalar::from_groups(
            // scalar
            -(other[e423] * self[e15]) - (other[e431] * self[e25]) - (other[e412] * self[e35]) - (other[e415] * self[e23]) - (other[e425] * self[e31]) - (other[e435] * self[e12]),
        );
        let right_anti_dual = DipoleInversion::from_groups(
            // e41, e42, e43
            other.group0(),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            other.group3() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group3(),
        );
    }
}
impl RejectOrthogonallyFrom<AntiScalar> for AntiLine {
    type Output = AntiLine;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd3        0        4        0
    // Totals...
    // yes simd        0        5        0
    //  no simd        0       13        0
    fn reject_orthogonally_from(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(other[e12345]) * self.group0(),
            // e15, e25, e35
            Simd32x3::from(other[e12345]) * self.group1(),
        );
        let right_anti_dual = Scalar::from_groups(/* scalar */ other[e12345] * -1.0);
        return AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group0(),
            // e15, e25, e35
            Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group1(),
        );
    }
}
impl RejectOrthogonallyFrom<Circle> for AntiLine {
    type Output = Dipole;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5        6        0
    //    simd3        0        2        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        5       10        0
    //  no simd        5       20        0
    fn reject_orthogonally_from(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Scalar::from_groups(
            // scalar
            -(self[e23] * other[e415]) - (self[e31] * other[e425]) - (self[e12] * other[e435]) - (self[e15] * other[e423]) - (self[e25] * other[e431]) - (self[e35] * other[e412]),
        );
        let right_anti_dual = Dipole::from_groups(
            // e41, e42, e43
            other.group0(),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35
            other.group2(),
        );
        return Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1(),
            // e15, e25, e35
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group2(),
        );
    }
}
impl RejectOrthogonallyFrom<CircleRotor> for AntiLine {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       24        0
    //    simd3        1        2        0
    //    simd4        2        9        0
    // Totals...
    // yes simd       17       35        0
    //  no simd       25       66        0
    fn reject_orthogonally_from(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([other[e12345], other[e12345], other[e12345], 1.0])
                * self.group0().with_w(
                    -(self[e23] * other[e415])
                        - (self[e31] * other[e425])
                        - (self[e12] * other[e435])
                        - (self[e15] * other[e423])
                        - (self[e25] * other[e431])
                        - (self[e35] * other[e412]),
                ),
            // e15, e25, e35, e3215
            Simd32x3::from(1.0).with_w(0.0) * self.group1().with_w(0.0) * other.group2().www().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
        );
        let right_anti_dual = AntiCircleRotor::from_groups(
            // e41, e42, e43
            other.group0(),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, scalar
            other.group2() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group0().with_w(right_anti_dual[scalar]),
            // e23, e31, e12, e45
            ((Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group0().xyz()) + (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group1().xyz()))
                .with_w(right_anti_dual[e45] * anti_wedge[scalar]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (right_anti_dual[e15] * anti_wedge[scalar]) + (right_anti_dual[scalar] * anti_wedge[e15]),
                (right_anti_dual[e25] * anti_wedge[scalar]) + (right_anti_dual[scalar] * anti_wedge[e25]),
                (right_anti_dual[e35] * anti_wedge[scalar]) + (right_anti_dual[scalar] * anti_wedge[e35]),
                -(right_anti_dual[e41] * anti_wedge[e23]) - (right_anti_dual[e42] * anti_wedge[e31]) - (right_anti_dual[e43] * anti_wedge[e12]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                right_anti_dual[e45] * anti_wedge[e23],
                right_anti_dual[e45] * anti_wedge[e31],
                right_anti_dual[e45] * anti_wedge[e12],
                -(right_anti_dual[e31] * anti_wedge[e25])
                    - (right_anti_dual[e12] * anti_wedge[e35])
                    - (right_anti_dual[e15] * anti_wedge[e23])
                    - (right_anti_dual[e25] * anti_wedge[e31])
                    - (right_anti_dual[e35] * anti_wedge[e12]),
            ]) + (anti_wedge.group1().zxyw() * right_anti_dual.group0().yzx().with_w(right_anti_dual[scalar]))
                - (anti_wedge.group1().yzxx() * right_anti_dual.group0().zxy().with_w(right_anti_dual[e23])),
        );
    }
}
impl RejectOrthogonallyFrom<DipoleInversion> for AntiLine {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       23        0
    //    simd3        1        5        0
    //    simd4        4        7        0
    // Totals...
    // yes simd       11       35        0
    //  no simd       25       66        0
    fn reject_orthogonally_from(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiPlane::from_groups(
            // e1, e2, e3, e5
            Simd32x4::from([
                -(self[e12] * other[e4315]) - (self[e15] * other[e1234]),
                -(self[e23] * other[e4125]) - (self[e25] * other[e1234]),
                -(self[e31] * other[e4235]) - (self[e35] * other[e1234]),
                (self[e25] * other[e4315]) + (self[e35] * other[e4125]),
            ]) + (other.group3().zxyx() * self.group0().yzx().with_w(self[e15])),
        );
        let right_anti_dual = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e4
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group3() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group0().xyz() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            ((right_anti_dual.group3().zxy() * anti_wedge.group0().yzx()) - (right_anti_dual.group3().yzx() * anti_wedge.group0().zxy()))
                .with_w(right_anti_dual[e4] * anti_wedge[e5] * -1.0),
            // e15, e25, e35, e1234
            Simd32x4::from([
                right_anti_dual[e1] * anti_wedge[e5] * -1.0,
                right_anti_dual[e2] * anti_wedge[e5] * -1.0,
                right_anti_dual[e3] * anti_wedge[e5] * -1.0,
                (right_anti_dual[e431] * anti_wedge[e2]) + (right_anti_dual[e412] * anti_wedge[e3]),
            ]) + (anti_wedge.group0().xyzx() * right_anti_dual.group3().www().with_w(right_anti_dual[e423])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                right_anti_dual[e425] * anti_wedge[e3],
                right_anti_dual[e435] * anti_wedge[e1],
                right_anti_dual[e415] * anti_wedge[e2],
                -(right_anti_dual[e315] * anti_wedge[e2]) - (right_anti_dual[e125] * anti_wedge[e3]),
            ]) - (Simd32x4::from(anti_wedge[e5]) * right_anti_dual.group0().with_w(right_anti_dual[e321]))
                - (anti_wedge.group0().yzxx() * right_anti_dual.group1().zxy().with_w(right_anti_dual[e235])),
        );
    }
}
impl RejectOrthogonallyFrom<DualNum> for AntiLine {
    type Output = AntiLine;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd2        0        1        0
    //    simd3        0        4        0
    // Totals...
    // yes simd        0        5        0
    //  no simd        0       14        0
    fn reject_orthogonally_from(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(other[e12345]) * self.group0(),
            // e15, e25, e35
            Simd32x3::from(other[e12345]) * self.group1(),
        );
        let right_anti_dual = AntiDualNum::from_groups(/* e3215, scalar */ other.group0() * Simd32x2::from(-1.0));
        return AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group0(),
            // e15, e25, e35
            Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group1(),
        );
    }
}
impl RejectOrthogonallyFrom<Flector> for AntiLine {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       14        0
    //    simd3        1        2        0
    //    simd4        2        4        0
    // Totals...
    // yes simd        6       20        0
    //  no simd       14       36        0
    fn reject_orthogonally_from(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiPlane::from_groups(
            // e1, e2, e3, e5
            Simd32x4::from([
                self[e12] * other[e4315] * -1.0,
                self[e23] * other[e4125] * -1.0,
                self[e31] * other[e4235] * -1.0,
                (self[e25] * other[e4315]) + (self[e35] * other[e4125]),
            ]) + (other.group1().zxyx() * self.group0().yzx().with_w(self[e15])),
        );
        let right_anti_dual = AntiFlector::from_groups(
            // e235, e315, e125, e321
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            ((right_anti_dual.group1().zxy() * anti_wedge.group0().yzx()) - (right_anti_dual.group1().yzx() * anti_wedge.group0().zxy())).with_w(0.0),
            // e15, e25, e35, e3215
            Simd32x4::from([
                right_anti_dual[e5] * anti_wedge[e1],
                right_anti_dual[e5] * anti_wedge[e2],
                right_anti_dual[e5] * anti_wedge[e3],
                -(right_anti_dual[e315] * anti_wedge[e2]) - (right_anti_dual[e125] * anti_wedge[e3]) - (right_anti_dual[e321] * anti_wedge[e5]),
            ]) - (anti_wedge.group0().wwwx() * right_anti_dual.group1().xyz().with_w(right_anti_dual[e235])),
        );
    }
}
impl RejectOrthogonallyFrom<Line> for AntiLine {
    type Output = AntiLine;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        3        0
    //    simd3        0        2        0
    // Totals...
    // yes simd        2        5        0
    //  no simd        2        9        0
    fn reject_orthogonally_from(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Scalar::from_groups(/* scalar */ -(self[e23] * other[e415]) - (self[e31] * other[e425]) - (self[e12] * other[e435]));
        let right_anti_dual = AntiLine::from_groups(/* e23, e31, e12 */ other.group0(), /* e15, e25, e35 */ other.group1());
        return AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e15, e25, e35
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group1(),
        );
    }
}
impl RejectOrthogonallyFrom<Motor> for AntiLine {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       10        0
    //    simd3        1        2        0
    //    simd4        2        8        0
    // Totals...
    // yes simd       10       20        0
    //  no simd       18       48        0
    fn reject_orthogonally_from(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([other[e12345], other[e12345], other[e12345], 1.0])
                * self.group0().with_w(-(self[e23] * other[e415]) - (self[e31] * other[e425]) - (self[e12] * other[e435])),
            // e15, e25, e35, e3215
            Simd32x3::from(1.0).with_w(0.0) * self.group1().with_w(0.0) * other.group0().www().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
        );
        let right_anti_dual = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e3215
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            ((Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0().xyz()) + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group0().xyz()))
                .with_w(anti_wedge[scalar] * right_anti_dual[scalar]),
            // e15, e25, e35, e3215
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1())
                + Simd32x3::from(0.0).with_w(
                    -(anti_wedge[e23] * right_anti_dual[e15])
                        - (anti_wedge[e31] * right_anti_dual[e25])
                        - (anti_wedge[e12] * right_anti_dual[e35])
                        - (anti_wedge[e15] * right_anti_dual[e23])
                        - (anti_wedge[e25] * right_anti_dual[e31])
                        - (anti_wedge[e35] * right_anti_dual[e12]),
                ),
        );
    }
}
impl RejectOrthogonallyFrom<MultiVector> for AntiLine {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       78      102        0
    //    simd2        0        1        0
    //    simd3       20       38        0
    //    simd4       22       20        0
    // Totals...
    // yes simd      120      161        0
    //  no simd      226      298        0
    fn reject_orthogonally_from(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                -(self[e23] * other[e415])
                    - (self[e31] * other[e425])
                    - (self[e12] * other[e435])
                    - (self[e15] * other[e423])
                    - (self[e25] * other[e431])
                    - (self[e35] * other[e412]),
                0.0,
            ]),
            // e1, e2, e3, e4
            (self.group0().yzx() * other.group9().zxy()).with_w(0.0)
                - (Simd32x3::from(other[e1234]) * self.group1()).with_w(0.0)
                - (self.group0().zxy() * other.group9().yzx()).with_w(0.0),
            // e5
            (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]),
            // e15, e25, e35, e45
            other.group0().yy().with_zw(other[e12345], 0.0) * Simd32x3::from(1.0).with_w(0.0) * self.group1().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(other[e12345]) * self.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(0.0),
            // e1234
            0.0,
        );
        let right_anti_dual = MultiVector::from_groups(
            // scalar, e12345
            other.group0().yx() * Simd32x2::from([-1.0, 1.0]),
            // e1, e2, e3, e4
            other.group9().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e5
            other[e3215],
            // e15, e25, e35, e45
            other.group8().with_w(other[e321] * -1.0),
            // e41, e42, e43
            other.group7(),
            // e23, e31, e12
            other.group6().xyz(),
            // e415, e425, e435, e321
            other.group5().with_w(other[e45]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e423, e431, e412
            other.group4() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group3().xyz() * Simd32x3::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group1().xyz().with_w(other[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1234
            other[e4] * -1.0,
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                anti_wedge[scalar] * right_anti_dual[scalar],
                (anti_wedge[scalar] * right_anti_dual[e12345])
                    + (anti_wedge[e12345] * right_anti_dual[scalar])
                    + (anti_wedge[e1] * right_anti_dual[e4235])
                    + (anti_wedge[e2] * right_anti_dual[e4315])
                    + (anti_wedge[e3] * right_anti_dual[e4125])
                    + (anti_wedge[e4] * right_anti_dual[e3215])
                    + (anti_wedge[e5] * right_anti_dual[e1234])
                    + (anti_wedge[e4235] * right_anti_dual[e1])
                    + (anti_wedge[e4315] * right_anti_dual[e2])
                    + (anti_wedge[e4125] * right_anti_dual[e3])
                    + (anti_wedge[e3215] * right_anti_dual[e4])
                    + (anti_wedge[e1234] * right_anti_dual[e5])
                    - (anti_wedge[e15] * right_anti_dual[e423])
                    - (anti_wedge[e25] * right_anti_dual[e431])
                    - (anti_wedge[e35] * right_anti_dual[e412])
                    - (anti_wedge[e45] * right_anti_dual[e321])
                    - (anti_wedge[e41] * right_anti_dual[e235])
                    - (anti_wedge[e42] * right_anti_dual[e315])
                    - (anti_wedge[e43] * right_anti_dual[e125])
                    - (anti_wedge[e23] * right_anti_dual[e415])
                    - (anti_wedge[e31] * right_anti_dual[e425])
                    - (anti_wedge[e12] * right_anti_dual[e435])
                    - (anti_wedge[e415] * right_anti_dual[e23])
                    - (anti_wedge[e425] * right_anti_dual[e31])
                    - (anti_wedge[e435] * right_anti_dual[e12])
                    - (anti_wedge[e321] * right_anti_dual[e45])
                    - (anti_wedge[e423] * right_anti_dual[e15])
                    - (anti_wedge[e431] * right_anti_dual[e25])
                    - (anti_wedge[e412] * right_anti_dual[e35])
                    - (anti_wedge[e235] * right_anti_dual[e41])
                    - (anti_wedge[e315] * right_anti_dual[e42])
                    - (anti_wedge[e125] * right_anti_dual[e43]),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1()) + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1()),
            // e5
            (anti_wedge[scalar] * right_anti_dual[e5]) + (anti_wedge[e5] * right_anti_dual[scalar]),
            // e15, e25, e35, e45
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group3())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group3())
                + (Simd32x4::from(right_anti_dual[e5]) * anti_wedge.group1())
                - (Simd32x4::from(anti_wedge[e5]) * right_anti_dual.group1()),
            // e41, e42, e43
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group4())
                + (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group1().xyz())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group4())
                - (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group1().xyz()),
            // e23, e31, e12
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group5())
                + (anti_wedge.group1().yzx() * right_anti_dual.group1().zxy())
                - (anti_wedge.group1().zxy() * right_anti_dual.group1().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (anti_wedge[e4] * right_anti_dual[e15])
                    + (anti_wedge[e5] * right_anti_dual[e41])
                    + (anti_wedge[e15] * right_anti_dual[e4])
                    + (anti_wedge[e41] * right_anti_dual[e5]),
                (anti_wedge[e4] * right_anti_dual[e25])
                    + (anti_wedge[e5] * right_anti_dual[e42])
                    + (anti_wedge[e25] * right_anti_dual[e4])
                    + (anti_wedge[e42] * right_anti_dual[e5]),
                (anti_wedge[e4] * right_anti_dual[e35])
                    + (anti_wedge[e5] * right_anti_dual[e43])
                    + (anti_wedge[e35] * right_anti_dual[e4])
                    + (anti_wedge[e43] * right_anti_dual[e5]),
                -(anti_wedge[e1] * right_anti_dual[e23])
                    - (anti_wedge[e2] * right_anti_dual[e31])
                    - (anti_wedge[e3] * right_anti_dual[e12])
                    - (anti_wedge[e12] * right_anti_dual[e3]),
            ]) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group6())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group6())
                - (right_anti_dual.group1().xyzy() * anti_wedge.group3().www().with_w(anti_wedge[e31]))
                - (right_anti_dual.group3().www() * anti_wedge.group1().xyz()).with_w(anti_wedge[e23] * right_anti_dual[e1]),
            // e423, e431, e412
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group7())
                + (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group7())
                + (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group5())
                + (anti_wedge.group4().yzx() * right_anti_dual.group1().zxy())
                + (right_anti_dual.group4().yzx() * anti_wedge.group1().zxy())
                - (anti_wedge.group4().zxy() * right_anti_dual.group1().yzx())
                - (right_anti_dual.group4().zxy() * anti_wedge.group1().yzx()),
            // e235, e315, e125
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group8())
                + (Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group8())
                + (Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group5())
                + (anti_wedge.group1().yzx() * right_anti_dual.group3().zxy())
                + (anti_wedge.group3().zxy() * right_anti_dual.group1().yzx())
                - (anti_wedge.group1().zxy() * right_anti_dual.group3().yzx())
                - (anti_wedge.group3().yzx() * right_anti_dual.group1().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (anti_wedge[e3] * right_anti_dual[e425])
                    + (anti_wedge[e4] * right_anti_dual[e235])
                    + (anti_wedge[e45] * right_anti_dual[e23])
                    + (anti_wedge[e435] * right_anti_dual[e2]),
                (anti_wedge[e1] * right_anti_dual[e435])
                    + (anti_wedge[e4] * right_anti_dual[e315])
                    + (anti_wedge[e45] * right_anti_dual[e31])
                    + (anti_wedge[e415] * right_anti_dual[e3]),
                (anti_wedge[e2] * right_anti_dual[e415])
                    + (anti_wedge[e4] * right_anti_dual[e125])
                    + (anti_wedge[e45] * right_anti_dual[e12])
                    + (anti_wedge[e425] * right_anti_dual[e1]),
                -(anti_wedge[e1] * right_anti_dual[e235])
                    - (anti_wedge[e2] * right_anti_dual[e315])
                    - (anti_wedge[e3] * right_anti_dual[e125])
                    - (anti_wedge[e5] * right_anti_dual[e321]),
            ]) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group9())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group9())
                + (Simd32x4::from([right_anti_dual[e5], right_anti_dual[e5], right_anti_dual[e5], right_anti_dual[e3]]) * anti_wedge.group7().with_w(anti_wedge[e125]))
                + (anti_wedge.group5() * right_anti_dual.group3().www()).with_w(anti_wedge[e315] * right_anti_dual[e2])
                + (anti_wedge.group4().yzx() * right_anti_dual.group3().zxy()).with_w(anti_wedge[e235] * right_anti_dual[e1])
                + (right_anti_dual.group4().yzx() * anti_wedge.group3().zxy()).with_w(anti_wedge[e321] * right_anti_dual[e5])
                - (Simd32x4::from([anti_wedge[e5], anti_wedge[e5], anti_wedge[e5], anti_wedge[e15]]) * right_anti_dual.group7().with_w(right_anti_dual[e23]))
                - (right_anti_dual.group3().yzxx() * anti_wedge.group4().zxy().with_w(anti_wedge[e23]))
                - (anti_wedge.group8() * right_anti_dual.group1().www()).with_w(anti_wedge[e31] * right_anti_dual[e25])
                - (right_anti_dual.group4().zxy() * anti_wedge.group3().yzx()).with_w(anti_wedge[e12] * right_anti_dual[e35])
                - (anti_wedge.group1().yzx() * right_anti_dual.group6().zxy()).with_w(anti_wedge[e25] * right_anti_dual[e31])
                - (anti_wedge.group6().yzx() * right_anti_dual.group1().zxy()).with_w(anti_wedge[e35] * right_anti_dual[e12]),
            // e1234
            (anti_wedge[scalar] * right_anti_dual[e1234])
                + (anti_wedge[e1] * right_anti_dual[e423])
                + (anti_wedge[e2] * right_anti_dual[e431])
                + (anti_wedge[e3] * right_anti_dual[e412])
                + (anti_wedge[e4] * right_anti_dual[e321])
                + (anti_wedge[e1234] * right_anti_dual[scalar])
                - (anti_wedge[e41] * right_anti_dual[e23])
                - (anti_wedge[e42] * right_anti_dual[e31])
                - (anti_wedge[e43] * right_anti_dual[e12])
                - (anti_wedge[e23] * right_anti_dual[e41])
                - (anti_wedge[e31] * right_anti_dual[e42])
                - (anti_wedge[e12] * right_anti_dual[e43])
                - (anti_wedge[e321] * right_anti_dual[e4])
                - (anti_wedge[e423] * right_anti_dual[e1])
                - (anti_wedge[e431] * right_anti_dual[e2])
                - (anti_wedge[e412] * right_anti_dual[e3]),
        );
    }
}
impl RejectOrthogonallyFrom<Plane> for AntiLine {
    type Output = AntiLine;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        8        0
    //    simd3        2        4        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        4       14        0
    //  no simd       11       28        0
    fn reject_orthogonally_from(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiPlane::from_groups(
            // e1, e2, e3, e5
            Simd32x4::from([
                self[e12] * other[e4315] * -1.0,
                self[e23] * other[e4125] * -1.0,
                self[e31] * other[e4235] * -1.0,
                (self[e25] * other[e4315]) + (self[e35] * other[e4125]),
            ]) + (other.group0().zxyx() * self.group0().yzx().with_w(self[e15])),
        );
        let right_anti_dual = AntiPlane::from_groups(/* e1, e2, e3, e5 */ other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]));
        return AntiLine::from_groups(
            // e23, e31, e12
            (anti_wedge.group0().yzx() * right_anti_dual.group0().zxy()) - (anti_wedge.group0().zxy() * right_anti_dual.group0().yzx()),
            // e15, e25, e35
            (Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group0().xyz()) - (Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group0().xyz()),
        );
    }
}
impl RejectOrthogonallyFrom<Sphere> for AntiLine {
    type Output = Dipole;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       10        0
    //    simd3        2        6        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        7       18        0
    //  no simd       14       36        0
    fn reject_orthogonally_from(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiPlane::from_groups(
            // e1, e2, e3, e5
            Simd32x4::from([
                -(self[e12] * other[e4315]) - (self[e15] * other[e1234]),
                -(self[e23] * other[e4125]) - (self[e25] * other[e1234]),
                -(self[e31] * other[e4235]) - (self[e35] * other[e1234]),
                (self[e25] * other[e4315]) + (self[e35] * other[e4125]),
            ]) + (other.group0().zxyx() * self.group0().yzx().with_w(self[e15])),
        );
        let right_anti_dual = RoundPoint::from_groups(
            // e1, e2, e3, e4
            other.group0().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e5
            other[e3215],
        );
        return Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group0().xyz() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            ((anti_wedge.group0().yzx() * right_anti_dual.group0().zxy()) - (anti_wedge.group0().zxy() * right_anti_dual.group0().yzx()))
                .with_w(anti_wedge[e5] * right_anti_dual[e4] * -1.0),
            // e15, e25, e35
            (Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group0().xyz()) - (Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group0().xyz()),
        );
    }
}
impl RejectOrthogonallyFrom<VersorEven> for AntiLine {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       23        0
    //    simd3        1        4        0
    //    simd4        4       11        0
    // Totals...
    // yes simd       16       38        0
    //  no simd       30       79        0
    fn reject_orthogonally_from(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([other[e12345], other[e12345], other[e12345], 1.0])
                * self.group0().with_w(
                    -(self[e23] * other[e415])
                        - (self[e31] * other[e425])
                        - (self[e12] * other[e435])
                        - (self[e15] * other[e423])
                        - (self[e25] * other[e431])
                        - (self[e35] * other[e412]),
                ),
            // e15, e25, e35, e3215
            Simd32x3::from(1.0).with_w(0.0) * self.group1().with_w(0.0) * other.group0().www().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
        );
        let right_anti_dual = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e1234
            other.group2().xyz().with_w(other[e4]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            other.group3().xyz().with_w(other[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e23, e31, e12, e45
            ((Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group1().xyz()) + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group0().xyz()))
                .with_w(anti_wedge[scalar] * right_anti_dual[e45]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                anti_wedge[e15] * right_anti_dual[scalar],
                anti_wedge[e25] * right_anti_dual[scalar],
                anti_wedge[e35] * right_anti_dual[scalar],
                -(anti_wedge[e23] * right_anti_dual[e41]) - (anti_wedge[e31] * right_anti_dual[e42]) - (anti_wedge[e12] * right_anti_dual[e43]),
            ]) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group2()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                anti_wedge[e35] * right_anti_dual[e42],
                anti_wedge[e15] * right_anti_dual[e43],
                anti_wedge[e25] * right_anti_dual[e41],
                -(anti_wedge[e31] * right_anti_dual[e25])
                    - (anti_wedge[e12] * right_anti_dual[e35])
                    - (anti_wedge[e15] * right_anti_dual[e23])
                    - (anti_wedge[e25] * right_anti_dual[e31])
                    - (anti_wedge[e35] * right_anti_dual[e12]),
            ]) + (anti_wedge.group0() * right_anti_dual.group1().www().with_w(right_anti_dual[e3215]))
                + (anti_wedge.group0().www() * right_anti_dual.group3().xyz()).with_w(anti_wedge[e3215] * right_anti_dual[scalar])
                - (anti_wedge.group1().yzx() * right_anti_dual.group0().zxy()).with_w(anti_wedge[e23] * right_anti_dual[e15]),
        );
    }
}
impl RejectOrthogonallyFrom<VersorOdd> for AntiLine {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       23        0
    //    simd3        1        4        0
    //    simd4        4        8        0
    // Totals...
    // yes simd       11       35        0
    //  no simd       25       67        0
    fn reject_orthogonally_from(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiPlane::from_groups(
            // e1, e2, e3, e5
            Simd32x4::from([
                -(self[e12] * other[e4315]) - (self[e15] * other[e1234]),
                -(self[e23] * other[e4125]) - (self[e25] * other[e1234]),
                -(self[e31] * other[e4235]) - (self[e35] * other[e1234]),
                (self[e25] * other[e4315]) + (self[e35] * other[e4125]),
            ]) + (other.group3().zxyx() * self.group0().yzx().with_w(self[e15])),
        );
        let right_anti_dual = VersorEven::from_groups(
            // e423, e431, e412, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            other.group2().xyz().with_w(other[e3215]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e4
            other.group3().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group0().xyz() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            ((anti_wedge.group0().yzx() * right_anti_dual.group3().zxy()) - (anti_wedge.group0().zxy() * right_anti_dual.group3().yzx()))
                .with_w(anti_wedge[e5] * right_anti_dual[e4] * -1.0),
            // e15, e25, e35, e1234
            Simd32x4::from([
                anti_wedge[e5] * right_anti_dual[e1] * -1.0,
                anti_wedge[e5] * right_anti_dual[e2] * -1.0,
                anti_wedge[e5] * right_anti_dual[e3] * -1.0,
                (anti_wedge[e2] * right_anti_dual[e431]) + (anti_wedge[e3] * right_anti_dual[e412]),
            ]) + (anti_wedge.group0().xyzx() * right_anti_dual.group2().www().with_w(right_anti_dual[e423])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                anti_wedge[e3] * right_anti_dual[e425],
                anti_wedge[e1] * right_anti_dual[e435],
                anti_wedge[e2] * right_anti_dual[e415],
                -(anti_wedge[e3] * right_anti_dual[e125]) - (anti_wedge[e5] * right_anti_dual[e321]),
            ]) - (anti_wedge.group0().yzxx() * right_anti_dual.group1().zxy().with_w(right_anti_dual[e235]))
                - (anti_wedge.group0().wwwy() * right_anti_dual.group0().xyz().with_w(right_anti_dual[e315])),
        );
    }
}
impl std::ops::Div<reject_orthogonally_from> for AntiMotor {
    type Output = reject_orthogonally_from_partial<AntiMotor>;
    fn div(self, _rhs: reject_orthogonally_from) -> Self::Output {
        reject_orthogonally_from_partial(self)
    }
}
impl RejectOrthogonallyFrom<AntiCircleRotor> for AntiMotor {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        9        0
    //    simd3        0        2        0
    //    simd4        2        5        0
    // Totals...
    // yes simd        5       16        0
    //  no simd       11       35        0
    fn reject_orthogonally_from(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from(self[e3215]) * other.group0().with_w(other[e45]) * Simd32x4::from(-1.0));
        let right_anti_dual = CircleRotor::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e12345
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                anti_wedge[e3] * right_anti_dual[e425],
                anti_wedge[e1] * right_anti_dual[e435],
                anti_wedge[e2] * right_anti_dual[e415],
                -(anti_wedge[e3] * right_anti_dual[e125]) - (anti_wedge[e5] * right_anti_dual[e321]),
            ]) - (anti_wedge.group0().yzxy() * right_anti_dual.group1().zxy().with_w(right_anti_dual[e315]))
                - (right_anti_dual.group0() * anti_wedge.group0().www()).with_w(anti_wedge[e1] * right_anti_dual[e235]),
            // e1234
            (anti_wedge[e1] * right_anti_dual[e423]) + (anti_wedge[e2] * right_anti_dual[e431]) + (anti_wedge[e3] * right_anti_dual[e412]),
        );
    }
}
impl RejectOrthogonallyFrom<AntiDipoleInversion> for AntiMotor {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       24        0
    //    simd3        0        3        0
    //    simd4        2        9        0
    // Totals...
    // yes simd       18       36        0
    //  no simd       24       69        0
    fn reject_orthogonally_from(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([self[e3215], self[e3215], self[e3215], 1.0])
                * other.group0().with_w(
                    (other[e4] * self[e3215])
                        - (other[e423] * self[e15])
                        - (other[e431] * self[e25])
                        - (other[e412] * self[e35])
                        - (other[e415] * self[e23])
                        - (other[e425] * self[e31])
                        - (other[e435] * self[e12]),
                ),
            // e15, e25, e35, e3215
            Simd32x3::from(1.0).with_w(0.0) * self.group1().www().with_w(0.0) * other.group1().xyz().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
        );
        let right_anti_dual = DipoleInversion::from_groups(
            // e41, e42, e43
            other.group0(),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            other.group3() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from([right_anti_dual[e15], right_anti_dual[e25], right_anti_dual[e35], 1.0])
                * anti_wedge.group0().www().with_w(
                    (anti_wedge[scalar] * right_anti_dual[e1234])
                        - (anti_wedge[e23] * right_anti_dual[e41])
                        - (anti_wedge[e31] * right_anti_dual[e42])
                        - (anti_wedge[e12] * right_anti_dual[e43]),
                ),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (anti_wedge[e23] * right_anti_dual[e45]) + (anti_wedge[scalar] * right_anti_dual[e4235]),
                (anti_wedge[e31] * right_anti_dual[e45]) + (anti_wedge[scalar] * right_anti_dual[e4315]),
                (anti_wedge[e12] * right_anti_dual[e45]) + (anti_wedge[scalar] * right_anti_dual[e4125]),
                -(anti_wedge[e31] * right_anti_dual[e25])
                    - (anti_wedge[e12] * right_anti_dual[e35])
                    - (anti_wedge[e15] * right_anti_dual[e23])
                    - (anti_wedge[e25] * right_anti_dual[e31])
                    - (anti_wedge[e35] * right_anti_dual[e12]),
            ]) + (right_anti_dual.group0().yzx() * anti_wedge.group1().zxy()).with_w(anti_wedge[scalar] * right_anti_dual[e3215])
                - (right_anti_dual.group0().zxy() * anti_wedge.group1().yzx()).with_w(anti_wedge[e23] * right_anti_dual[e15]),
        );
    }
}
impl RejectOrthogonallyFrom<AntiScalar> for AntiMotor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        5        0
    //  no simd        0       17        0
    fn reject_orthogonally_from(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(other[e12345]) * self.group0(),
            // e15, e25, e35, e3215
            Simd32x4::from(other[e12345]) * self.group1(),
        );
        let right_anti_dual = Scalar::from_groups(/* scalar */ other[e12345] * -1.0);
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group0(),
            // e15, e25, e35, e3215
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1(),
        );
    }
}
impl RejectOrthogonallyFrom<Circle> for AntiMotor {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       21        0
    //    simd3        0        2        0
    //    simd4        1        7        0
    // Totals...
    // yes simd       15       30        0
    //  no simd       18       55        0
    fn reject_orthogonally_from(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([self[e3215], self[e3215], self[e3215], 1.0])
                * other.group0().with_w(
                    -(self[e23] * other[e415])
                        - (self[e31] * other[e425])
                        - (self[e12] * other[e435])
                        - (self[e15] * other[e423])
                        - (self[e25] * other[e431])
                        - (self[e35] * other[e412]),
                ),
            // e15, e25, e35, e3215
            Simd32x3::from(1.0).with_w(0.0) * self.group1().www().with_w(0.0) * other.group1().xyz().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
        );
        let right_anti_dual = Dipole::from_groups(
            // e41, e42, e43
            other.group0(),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35
            other.group2(),
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from([anti_wedge[scalar], anti_wedge[scalar], anti_wedge[scalar], 1.0])
                * right_anti_dual
                    .group2()
                    .with_w(-(anti_wedge[e23] * right_anti_dual[e41]) - (anti_wedge[e31] * right_anti_dual[e42]) - (anti_wedge[e12] * right_anti_dual[e43])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (anti_wedge[e23] * right_anti_dual[e45]) + (anti_wedge[e35] * right_anti_dual[e42]),
                (anti_wedge[e31] * right_anti_dual[e45]) + (anti_wedge[e15] * right_anti_dual[e43]),
                (anti_wedge[e12] * right_anti_dual[e45]) + (anti_wedge[e25] * right_anti_dual[e41]),
                -(anti_wedge[e31] * right_anti_dual[e25])
                    - (anti_wedge[e12] * right_anti_dual[e35])
                    - (anti_wedge[e15] * right_anti_dual[e23])
                    - (anti_wedge[e25] * right_anti_dual[e31])
                    - (anti_wedge[e35] * right_anti_dual[e12]),
            ]) - (right_anti_dual.group0().zxy() * anti_wedge.group1().yzx()).with_w(anti_wedge[e23] * right_anti_dual[e15]),
        );
    }
}
impl RejectOrthogonallyFrom<CircleRotor> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       29        0
    //    simd3        2        5        0
    //    simd4        3        5        0
    // Totals...
    // yes simd       19       39        0
    //  no simd       32       64        0
    fn reject_orthogonally_from(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                self[e23] * other[e12345],
                self[e31] * other[e12345],
                self[e12] * other[e12345],
                -(self[e23] * other[e415])
                    - (self[e31] * other[e425])
                    - (self[e12] * other[e435])
                    - (self[e15] * other[e423])
                    - (self[e25] * other[e431])
                    - (self[e35] * other[e412]),
            ]) + (other.group0() * self.group1().www()).with_w(self[scalar] * other[e12345]),
            // e15, e25, e35, e3215
            ((Simd32x3::from(self[e3215]) * other.group1().xyz()) + (Simd32x3::from(other[e12345]) * self.group1().xyz())).with_w(self[e3215] * other[e12345]),
        );
        let right_anti_dual = AntiCircleRotor::from_groups(
            // e41, e42, e43
            other.group0(),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, scalar
            other.group2() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group0().with_w(right_anti_dual[scalar]),
            // e23, e31, e12, e45
            ((Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group0().xyz()) + (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group1().xyz()))
                .with_w(right_anti_dual[e45] * anti_wedge[scalar]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (right_anti_dual[e15] * anti_wedge[scalar]) + (right_anti_dual[scalar] * anti_wedge[e15]),
                (right_anti_dual[e25] * anti_wedge[scalar]) + (right_anti_dual[scalar] * anti_wedge[e25]),
                (right_anti_dual[e35] * anti_wedge[scalar]) + (right_anti_dual[scalar] * anti_wedge[e35]),
                -(right_anti_dual[e41] * anti_wedge[e23]) - (right_anti_dual[e42] * anti_wedge[e31]) - (right_anti_dual[e43] * anti_wedge[e12]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                right_anti_dual[e45] * anti_wedge[e23],
                right_anti_dual[e45] * anti_wedge[e31],
                right_anti_dual[e45] * anti_wedge[e12],
                -(right_anti_dual[e31] * anti_wedge[e25])
                    - (right_anti_dual[e12] * anti_wedge[e35])
                    - (right_anti_dual[e15] * anti_wedge[e23])
                    - (right_anti_dual[e25] * anti_wedge[e31])
                    - (right_anti_dual[e35] * anti_wedge[e12]),
            ]) + (anti_wedge.group1().zxyw() * right_anti_dual.group0().yzx().with_w(right_anti_dual[scalar]))
                - (anti_wedge.group1().yzxx() * right_anti_dual.group0().zxy().with_w(right_anti_dual[e23])),
        );
    }
}
impl RejectOrthogonallyFrom<Dipole> for AntiMotor {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       11        0
    //    simd3        0        5        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        5       18        0
    //  no simd       11       34        0
    fn reject_orthogonally_from(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiPlane::from_groups(
            // e1, e2, e3, e5
            (other.group0() * self.group1().www() * Simd32x3::from(-1.0)).with_w(self[e3215] * other[e45] * -1.0),
        );
        let right_anti_dual = Circle::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125
            other.group2() * Simd32x3::from(-1.0),
        );
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                anti_wedge[e3] * right_anti_dual[e425],
                anti_wedge[e1] * right_anti_dual[e435],
                anti_wedge[e2] * right_anti_dual[e415],
                -(anti_wedge[e3] * right_anti_dual[e125]) - (anti_wedge[e5] * right_anti_dual[e321]),
            ]) - (anti_wedge.group0().wwwx() * right_anti_dual.group0().with_w(right_anti_dual[e235]))
                - (anti_wedge.group0().yzx() * right_anti_dual.group1().zxy()).with_w(anti_wedge[e2] * right_anti_dual[e315]),
            // e1234
            (anti_wedge[e1] * right_anti_dual[e423]) + (anti_wedge[e2] * right_anti_dual[e431]) + (anti_wedge[e3] * right_anti_dual[e412]),
        );
    }
}
impl RejectOrthogonallyFrom<DipoleInversion> for AntiMotor {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       19        0
    //    simd3        1        8        0
    //    simd4        8       10        0
    // Totals...
    // yes simd       17       37        0
    //  no simd       43       83        0
    fn reject_orthogonally_from(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(self[e3215]) * other.group3().xyz().with_w(other[e1234]) * Simd32x4::from(-1.0),
            // e1, e2, e3, e5
            Simd32x4::from([
                -(self[e12] * other[e4315]) - (self[e15] * other[e1234]),
                -(self[e23] * other[e4125]) - (self[e25] * other[e1234]),
                -(self[e31] * other[e4235]) - (self[e35] * other[e1234]),
                (self[e25] * other[e4315]) + (self[e35] * other[e4125]),
            ]) + (other.group3().zxyx() * self.group0().yzx().with_w(self[e15]))
                - (other.group0() * self.group1().www()).with_w(self[e3215] * other[e45]),
        );
        let right_anti_dual = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e4
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group3() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group1().xyz() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            ((right_anti_dual.group3().zxy() * anti_wedge.group1().yzx()) - (right_anti_dual.group3().yzx() * anti_wedge.group1().zxy()))
                .with_w(right_anti_dual[e4] * anti_wedge[e5] * -1.0),
            // e15, e25, e35, e1234
            (anti_wedge.group1().xyzx() * right_anti_dual.group3().www().with_w(right_anti_dual[e423]))
                + Simd32x3::from(0.0).with_w((right_anti_dual[e431] * anti_wedge[e2]) + (right_anti_dual[e412] * anti_wedge[e3]))
                - (anti_wedge.group1().www() * right_anti_dual.group3().xyz()).with_w(right_anti_dual[e4] * anti_wedge[e321]),
            // e4235, e4315, e4125, e3215
            Simd32x3::from(0.0).with_w(
                (right_anti_dual[e2] * anti_wedge[e315]) + (right_anti_dual[e3] * anti_wedge[e125]) + (right_anti_dual[e5] * anti_wedge[e321])
                    - (right_anti_dual[e125] * anti_wedge[e3]),
            ) + (right_anti_dual.group1().yzx() * anti_wedge.group1().zxy()).with_w(right_anti_dual[e1] * anti_wedge[e235])
                - (Simd32x4::from(anti_wedge[e5]) * right_anti_dual.group0().with_w(right_anti_dual[e321]))
                - (right_anti_dual.group2().wwwy() * anti_wedge.group0().xyz().with_w(anti_wedge[e2]))
                - (anti_wedge.group1().yzxx() * right_anti_dual.group1().zxy().with_w(right_anti_dual[e235])),
        );
    }
}
impl RejectOrthogonallyFrom<DualNum> for AntiMotor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        2        0
    //    simd2        0        1        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        1        7        0
    //  no simd        1       20        0
    fn reject_orthogonally_from(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(other[e12345]) * self.group0(),
            // e15, e25, e35, e3215
            Simd32x4::from(other[e12345]) * self.group1(),
        );
        let right_anti_dual = AntiDualNum::from_groups(/* e3215, scalar */ other.group0() * Simd32x2::from(-1.0));
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group0(),
            // e15, e25, e35, e3215
            Simd32x4::from([anti_wedge[e15], anti_wedge[e25], anti_wedge[e35], 1.0])
                * right_anti_dual
                    .group0()
                    .yy()
                    .with_zw(right_anti_dual[scalar], (right_anti_dual[e3215] * anti_wedge[scalar]) + (right_anti_dual[scalar] * anti_wedge[e3215])),
        );
    }
}
impl RejectOrthogonallyFrom<FlatPoint> for AntiMotor {
    type Output = AntiDualNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd2        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        3        0
    fn reject_orthogonally_from(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiDualNum::from_groups(
            // e3215, scalar
            Simd32x2::from([self[e3215] * f32::powi(other[e45], 2) * -1.0, 1.0]) * Simd32x2::from([-1.0, 0.0]),
        );
    }
}
impl RejectOrthogonallyFrom<Flector> for AntiMotor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6        9        0
    //    simd3        1        3        0
    //    simd4        4        8        0
    // Totals...
    // yes simd       11       20        0
    //  no simd       25       50        0
    fn reject_orthogonally_from(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x3::from(1.0).with_w(0.0) * self.group1().www().with_w(0.0) * other.group1().xyz().with_w(0.0) * Simd32x4::from([-1.0, -1.0, -1.0, 0.0]),
            // e1, e2, e3, e5
            (other.group1().zxyx() * self.group0().yzx().with_w(self[e15])) + Simd32x3::from(0.0).with_w((self[e25] * other[e4315]) + (self[e35] * other[e4125]))
                - (self.group0().zxy() * other.group1().yzx()).with_w(self[e3215] * other[e45]),
        );
        let right_anti_dual = AntiFlector::from_groups(
            // e235, e315, e125, e321
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            ((anti_wedge.group1().yzx() * right_anti_dual.group1().zxy()) - (anti_wedge.group1().zxy() * right_anti_dual.group1().yzx())).with_w(0.0),
            // e15, e25, e35, e3215
            (right_anti_dual.group1().wwwx() * anti_wedge.group1().xyz().with_w(anti_wedge[e235]))
                + Simd32x3::from(0.0).with_w(
                    (anti_wedge[e315] * right_anti_dual[e2]) + (anti_wedge[e125] * right_anti_dual[e3]) + (anti_wedge[e321] * right_anti_dual[e5])
                        - (anti_wedge[e2] * right_anti_dual[e315])
                        - (anti_wedge[e3] * right_anti_dual[e125])
                        - (anti_wedge[e5] * right_anti_dual[e321]),
                )
                - (anti_wedge.group1().wwwx() * right_anti_dual.group1().xyz().with_w(right_anti_dual[e235])),
        );
    }
}
impl RejectOrthogonallyFrom<Line> for AntiMotor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7        9        0
    //    simd4        0        7        0
    // Totals...
    // yes simd        7       16        0
    //  no simd        7       37        0
    fn reject_orthogonally_from(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x3::from(0.0).with_w(-(self[e23] * other[e415]) - (self[e31] * other[e425]) - (self[e12] * other[e435])),
            // e15, e25, e35, e3215
            Simd32x3::from(1.0).with_w(0.0) * other.group0().with_w(0.0) * self.group1().www().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
        );
        let right_anti_dual = AntiLine::from_groups(/* e23, e31, e12 */ other.group0(), /* e15, e25, e35 */ other.group1());
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x3::from(1.0).with_w(0.0) * right_anti_dual.group0().with_w(0.0) * anti_wedge.group0().www().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
            // e15, e25, e35, e3215
            Simd32x4::from([anti_wedge[scalar], anti_wedge[scalar], anti_wedge[scalar], 1.0])
                * right_anti_dual.group1().with_w(
                    -(right_anti_dual[e23] * anti_wedge[e15])
                        - (right_anti_dual[e31] * anti_wedge[e25])
                        - (right_anti_dual[e12] * anti_wedge[e35])
                        - (right_anti_dual[e15] * anti_wedge[e23])
                        - (right_anti_dual[e25] * anti_wedge[e31])
                        - (right_anti_dual[e35] * anti_wedge[e12]),
                ),
        );
    }
}
impl RejectOrthogonallyFrom<Motor> for AntiMotor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       12        0
    //    simd3        2        4        0
    //    simd4        2        5        0
    // Totals...
    // yes simd       12       21        0
    //  no simd       22       44        0
    fn reject_orthogonally_from(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([other[e12345], other[e12345], other[e12345], 1.0])
                * self
                    .group0()
                    .xyz()
                    .with_w((self[scalar] * other[e12345]) - (self[e23] * other[e415]) - (self[e31] * other[e425]) - (self[e12] * other[e435])),
            // e15, e25, e35, e3215
            ((Simd32x3::from(self[e3215]) * other.group0().xyz()) + (Simd32x3::from(other[e12345]) * self.group1().xyz())).with_w(self[e3215] * other[e12345]),
        );
        let right_anti_dual = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e3215
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            ((Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0().xyz()) + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group0().xyz()))
                .with_w(anti_wedge[scalar] * right_anti_dual[scalar]),
            // e15, e25, e35, e3215
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1())
                + Simd32x3::from(0.0).with_w(
                    -(anti_wedge[e23] * right_anti_dual[e15])
                        - (anti_wedge[e31] * right_anti_dual[e25])
                        - (anti_wedge[e12] * right_anti_dual[e35])
                        - (anti_wedge[e15] * right_anti_dual[e23])
                        - (anti_wedge[e25] * right_anti_dual[e31])
                        - (anti_wedge[e35] * right_anti_dual[e12]),
                ),
        );
    }
}
impl RejectOrthogonallyFrom<MultiVector> for AntiMotor {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       81      108        0
    //    simd2        0        1        0
    //    simd3       22       44        0
    //    simd4       23       17        0
    // Totals...
    // yes simd      126      170        0
    //  no simd      239      310        0
    fn reject_orthogonally_from(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[scalar] * other[e12345]) + (self[e3215] * other[e4])
                    - (self[e23] * other[e415])
                    - (self[e31] * other[e425])
                    - (self[e12] * other[e435])
                    - (self[e15] * other[e423])
                    - (self[e25] * other[e431])
                    - (self[e35] * other[e412]),
                0.0,
            ]),
            // e1, e2, e3, e4
            (self.group0().yzx() * other.group9().zxy()).with_w(0.0)
                - (Simd32x3::from(self[e3215]) * other.group4()).with_w(0.0)
                - (Simd32x3::from(other[e1234]) * self.group1().xyz()).with_w(0.0)
                - (self.group0().zxy() * other.group9().yzx()).with_w(0.0),
            // e5
            (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]) - (self[e3215] * other[e45]),
            // e15, e25, e35, e45
            ((Simd32x3::from(self[e3215]) * other.group6().xyz()) + (Simd32x3::from(other[e12345]) * self.group1().xyz())).with_w(0.0),
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12
            (Simd32x3::from(self[e3215]) * other.group7()) + (Simd32x3::from(other[e12345]) * self.group0().xyz()),
            // e415, e425, e435, e321
            Simd32x3::from(0.0).with_w(self[e3215] * other[e1234] * -1.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(self[e3215]) * other.group9().xyz() * Simd32x3::from(-1.0),
            // e4235, e4315, e4125, e3215
            Simd32x3::from(0.0).with_w(self[e3215] * other[e12345]),
            // e1234
            0.0,
        );
        let right_anti_dual = MultiVector::from_groups(
            // scalar, e12345
            other.group0().yx() * Simd32x2::from([-1.0, 1.0]),
            // e1, e2, e3, e4
            other.group9().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e5
            other[e3215],
            // e15, e25, e35, e45
            other.group8().with_w(other[e321] * -1.0),
            // e41, e42, e43
            other.group7(),
            // e23, e31, e12
            other.group6().xyz(),
            // e415, e425, e435, e321
            other.group5().with_w(other[e45]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e423, e431, e412
            other.group4() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group3().xyz() * Simd32x3::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group1().xyz().with_w(other[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1234
            other[e4] * -1.0,
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                anti_wedge[scalar] * right_anti_dual[scalar],
                (anti_wedge[scalar] * right_anti_dual[e12345])
                    + (anti_wedge[e12345] * right_anti_dual[scalar])
                    + (anti_wedge[e1] * right_anti_dual[e4235])
                    + (anti_wedge[e2] * right_anti_dual[e4315])
                    + (anti_wedge[e3] * right_anti_dual[e4125])
                    + (anti_wedge[e4] * right_anti_dual[e3215])
                    + (anti_wedge[e5] * right_anti_dual[e1234])
                    + (anti_wedge[e4235] * right_anti_dual[e1])
                    + (anti_wedge[e4315] * right_anti_dual[e2])
                    + (anti_wedge[e4125] * right_anti_dual[e3])
                    + (anti_wedge[e3215] * right_anti_dual[e4])
                    + (anti_wedge[e1234] * right_anti_dual[e5])
                    - (anti_wedge[e15] * right_anti_dual[e423])
                    - (anti_wedge[e25] * right_anti_dual[e431])
                    - (anti_wedge[e35] * right_anti_dual[e412])
                    - (anti_wedge[e45] * right_anti_dual[e321])
                    - (anti_wedge[e41] * right_anti_dual[e235])
                    - (anti_wedge[e42] * right_anti_dual[e315])
                    - (anti_wedge[e43] * right_anti_dual[e125])
                    - (anti_wedge[e23] * right_anti_dual[e415])
                    - (anti_wedge[e31] * right_anti_dual[e425])
                    - (anti_wedge[e12] * right_anti_dual[e435])
                    - (anti_wedge[e415] * right_anti_dual[e23])
                    - (anti_wedge[e425] * right_anti_dual[e31])
                    - (anti_wedge[e435] * right_anti_dual[e12])
                    - (anti_wedge[e321] * right_anti_dual[e45])
                    - (anti_wedge[e423] * right_anti_dual[e15])
                    - (anti_wedge[e431] * right_anti_dual[e25])
                    - (anti_wedge[e412] * right_anti_dual[e35])
                    - (anti_wedge[e235] * right_anti_dual[e41])
                    - (anti_wedge[e315] * right_anti_dual[e42])
                    - (anti_wedge[e125] * right_anti_dual[e43]),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1()) + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1()),
            // e5
            (anti_wedge[scalar] * right_anti_dual[e5]) + (anti_wedge[e5] * right_anti_dual[scalar]),
            // e15, e25, e35, e45
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group3())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group3())
                + (Simd32x4::from(right_anti_dual[e5]) * anti_wedge.group1())
                - (Simd32x4::from(anti_wedge[e5]) * right_anti_dual.group1()),
            // e41, e42, e43
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group4())
                + (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group1().xyz())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group4())
                - (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group1().xyz()),
            // e23, e31, e12
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group5())
                + (anti_wedge.group1().yzx() * right_anti_dual.group1().zxy())
                - (anti_wedge.group1().zxy() * right_anti_dual.group1().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (anti_wedge[e4] * right_anti_dual[e15])
                    + (anti_wedge[e5] * right_anti_dual[e41])
                    + (anti_wedge[e15] * right_anti_dual[e4])
                    + (anti_wedge[e41] * right_anti_dual[e5]),
                (anti_wedge[e4] * right_anti_dual[e25])
                    + (anti_wedge[e5] * right_anti_dual[e42])
                    + (anti_wedge[e25] * right_anti_dual[e4])
                    + (anti_wedge[e42] * right_anti_dual[e5]),
                (anti_wedge[e4] * right_anti_dual[e35])
                    + (anti_wedge[e5] * right_anti_dual[e43])
                    + (anti_wedge[e35] * right_anti_dual[e4])
                    + (anti_wedge[e43] * right_anti_dual[e5]),
                -(anti_wedge[e1] * right_anti_dual[e23])
                    - (anti_wedge[e2] * right_anti_dual[e31])
                    - (anti_wedge[e3] * right_anti_dual[e12])
                    - (anti_wedge[e12] * right_anti_dual[e3]),
            ]) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group6())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group6())
                - (right_anti_dual.group1().xyzy() * anti_wedge.group3().www().with_w(anti_wedge[e31]))
                - (right_anti_dual.group3().www() * anti_wedge.group1().xyz()).with_w(anti_wedge[e23] * right_anti_dual[e1]),
            // e423, e431, e412
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group7())
                + (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group7())
                + (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group5())
                + (anti_wedge.group4().yzx() * right_anti_dual.group1().zxy())
                + (right_anti_dual.group4().yzx() * anti_wedge.group1().zxy())
                - (anti_wedge.group4().zxy() * right_anti_dual.group1().yzx())
                - (right_anti_dual.group4().zxy() * anti_wedge.group1().yzx()),
            // e235, e315, e125
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group8())
                + (Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group8())
                + (Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group5())
                + (anti_wedge.group1().yzx() * right_anti_dual.group3().zxy())
                + (anti_wedge.group3().zxy() * right_anti_dual.group1().yzx())
                - (anti_wedge.group1().zxy() * right_anti_dual.group3().yzx())
                - (anti_wedge.group3().yzx() * right_anti_dual.group1().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (anti_wedge[e3] * right_anti_dual[e425])
                    + (anti_wedge[e4] * right_anti_dual[e235])
                    + (anti_wedge[e45] * right_anti_dual[e23])
                    + (anti_wedge[e435] * right_anti_dual[e2]),
                (anti_wedge[e1] * right_anti_dual[e435])
                    + (anti_wedge[e4] * right_anti_dual[e315])
                    + (anti_wedge[e45] * right_anti_dual[e31])
                    + (anti_wedge[e415] * right_anti_dual[e3]),
                (anti_wedge[e2] * right_anti_dual[e415])
                    + (anti_wedge[e4] * right_anti_dual[e125])
                    + (anti_wedge[e45] * right_anti_dual[e12])
                    + (anti_wedge[e425] * right_anti_dual[e1]),
                -(anti_wedge[e1] * right_anti_dual[e235])
                    - (anti_wedge[e2] * right_anti_dual[e315])
                    - (anti_wedge[e3] * right_anti_dual[e125])
                    - (anti_wedge[e5] * right_anti_dual[e321]),
            ]) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group9())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group9())
                + (Simd32x4::from([right_anti_dual[e5], right_anti_dual[e5], right_anti_dual[e5], right_anti_dual[e3]]) * anti_wedge.group7().with_w(anti_wedge[e125]))
                + (anti_wedge.group5() * right_anti_dual.group3().www()).with_w(anti_wedge[e315] * right_anti_dual[e2])
                + (anti_wedge.group4().yzx() * right_anti_dual.group3().zxy()).with_w(anti_wedge[e235] * right_anti_dual[e1])
                + (right_anti_dual.group4().yzx() * anti_wedge.group3().zxy()).with_w(anti_wedge[e321] * right_anti_dual[e5])
                - (Simd32x4::from([anti_wedge[e5], anti_wedge[e5], anti_wedge[e5], anti_wedge[e15]]) * right_anti_dual.group7().with_w(right_anti_dual[e23]))
                - (right_anti_dual.group3().yzxx() * anti_wedge.group4().zxy().with_w(anti_wedge[e23]))
                - (anti_wedge.group8() * right_anti_dual.group1().www()).with_w(anti_wedge[e31] * right_anti_dual[e25])
                - (right_anti_dual.group4().zxy() * anti_wedge.group3().yzx()).with_w(anti_wedge[e12] * right_anti_dual[e35])
                - (anti_wedge.group1().yzx() * right_anti_dual.group6().zxy()).with_w(anti_wedge[e25] * right_anti_dual[e31])
                - (anti_wedge.group6().yzx() * right_anti_dual.group1().zxy()).with_w(anti_wedge[e35] * right_anti_dual[e12]),
            // e1234
            (anti_wedge[scalar] * right_anti_dual[e1234])
                + (anti_wedge[e1] * right_anti_dual[e423])
                + (anti_wedge[e2] * right_anti_dual[e431])
                + (anti_wedge[e3] * right_anti_dual[e412])
                + (anti_wedge[e4] * right_anti_dual[e321])
                + (anti_wedge[e1234] * right_anti_dual[scalar])
                - (anti_wedge[e41] * right_anti_dual[e23])
                - (anti_wedge[e42] * right_anti_dual[e31])
                - (anti_wedge[e43] * right_anti_dual[e12])
                - (anti_wedge[e23] * right_anti_dual[e41])
                - (anti_wedge[e31] * right_anti_dual[e42])
                - (anti_wedge[e12] * right_anti_dual[e43])
                - (anti_wedge[e321] * right_anti_dual[e4])
                - (anti_wedge[e423] * right_anti_dual[e1])
                - (anti_wedge[e431] * right_anti_dual[e2])
                - (anti_wedge[e412] * right_anti_dual[e3]),
        );
    }
}
impl RejectOrthogonallyFrom<Plane> for AntiMotor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       17        0
    //    simd3        1        2        0
    //    simd4        2        6        0
    // Totals...
    // yes simd        6       25        0
    //  no simd       14       47        0
    fn reject_orthogonally_from(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x3::from(1.0).with_w(0.0) * self.group1().www().with_w(0.0) * other.group0().xyz().with_w(0.0) * Simd32x4::from([-1.0, -1.0, -1.0, 0.0]),
            // e1, e2, e3, e5
            Simd32x4::from([
                self[e12] * other[e4315] * -1.0,
                self[e23] * other[e4125] * -1.0,
                self[e31] * other[e4235] * -1.0,
                (self[e25] * other[e4315]) + (self[e35] * other[e4125]),
            ]) + (other.group0().zxyx() * self.group0().yzx().with_w(self[e15])),
        );
        let right_anti_dual = AntiPlane::from_groups(/* e1, e2, e3, e5 */ other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]));
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            ((anti_wedge.group1().yzx() * right_anti_dual.group0().zxy()) - (anti_wedge.group1().zxy() * right_anti_dual.group0().yzx())).with_w(0.0),
            // e15, e25, e35, e3215
            Simd32x4::from([
                anti_wedge[e5] * right_anti_dual[e1] * -1.0,
                anti_wedge[e5] * right_anti_dual[e2] * -1.0,
                anti_wedge[e5] * right_anti_dual[e3] * -1.0,
                (anti_wedge[e315] * right_anti_dual[e2]) + (anti_wedge[e125] * right_anti_dual[e3]) + (anti_wedge[e321] * right_anti_dual[e5]),
            ]) + (right_anti_dual.group0().wwwx() * anti_wedge.group1().xyz().with_w(anti_wedge[e235])),
        );
    }
}
impl RejectOrthogonallyFrom<RoundPoint> for AntiMotor {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        5        0
    //  no simd        0       11        0
    fn reject_orthogonally_from(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Scalar::from_groups(/* scalar */ self[e3215] * other[e4]);
        let right_anti_dual = Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            other.group0().xyz().with_w(other[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1234
            other[e4] * -1.0,
        );
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e1234
            anti_wedge[scalar] * right_anti_dual[e1234],
        );
    }
}
impl RejectOrthogonallyFrom<Sphere> for AntiMotor {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       16        0
    //    simd3        2        6        0
    //    simd4        1        6        0
    // Totals...
    // yes simd       10       28        0
    //  no simd       17       58        0
    fn reject_orthogonally_from(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(self[e3215]) * other.group0().xyz().with_w(other[e1234]) * Simd32x4::from(-1.0),
            // e1, e2, e3, e5
            Simd32x4::from([
                -(self[e12] * other[e4315]) - (self[e15] * other[e1234]),
                -(self[e23] * other[e4125]) - (self[e25] * other[e1234]),
                -(self[e31] * other[e4235]) - (self[e35] * other[e1234]),
                (self[e25] * other[e4315]) + (self[e35] * other[e4125]),
            ]) + (other.group0().zxyx() * self.group0().yzx().with_w(self[e15])),
        );
        let right_anti_dual = RoundPoint::from_groups(
            // e1, e2, e3, e4
            other.group0().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e5
            other[e3215],
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group1().xyz() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            ((anti_wedge.group1().yzx() * right_anti_dual.group0().zxy()) - (anti_wedge.group1().zxy() * right_anti_dual.group0().yzx()))
                .with_w(anti_wedge[e5] * right_anti_dual[e4] * -1.0),
            // e15, e25, e35, e1234
            ((Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group1().xyz()) - (Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group0().xyz()))
                .with_w(anti_wedge[e321] * right_anti_dual[e4] * -1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([right_anti_dual[e4], right_anti_dual[e4], right_anti_dual[e4], 1.0])
                * anti_wedge.group0().xyz().with_w(
                    (anti_wedge[e235] * right_anti_dual[e1])
                        + (anti_wedge[e315] * right_anti_dual[e2])
                        + (anti_wedge[e125] * right_anti_dual[e3])
                        + (anti_wedge[e321] * right_anti_dual[e5]),
                )
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
    }
}
impl RejectOrthogonallyFrom<VersorEven> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       24        0
    //    simd3        2        6        0
    //    simd4        6        9        0
    // Totals...
    // yes simd       19       39        0
    //  no simd       41       78        0
    fn reject_orthogonally_from(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from(self[e3215]) * other.group0().xyz().with_w(other[e4]))
                + (Simd32x4::from(other[e12345]) * self.group0())
                + Simd32x3::from(0.0).with_w(
                    -(self[e23] * other[e415])
                        - (self[e31] * other[e425])
                        - (self[e12] * other[e435])
                        - (self[e15] * other[e423])
                        - (self[e25] * other[e431])
                        - (self[e35] * other[e412]),
                ),
            // e15, e25, e35, e3215
            ((Simd32x3::from(self[e3215]) * other.group1().xyz()) + (Simd32x3::from(other[e12345]) * self.group1().xyz())).with_w(self[e3215] * other[e12345]),
        );
        let right_anti_dual = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e1234
            other.group2().xyz().with_w(other[e4]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            other.group3().xyz().with_w(other[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e23, e31, e12, e45
            ((Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group1().xyz()) + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group0().xyz()))
                .with_w(anti_wedge[scalar] * right_anti_dual[e45]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                anti_wedge[e15] * right_anti_dual[scalar],
                anti_wedge[e25] * right_anti_dual[scalar],
                anti_wedge[e35] * right_anti_dual[scalar],
                -(anti_wedge[e23] * right_anti_dual[e41]) - (anti_wedge[e31] * right_anti_dual[e42]) - (anti_wedge[e12] * right_anti_dual[e43]),
            ]) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group2()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                anti_wedge[e35] * right_anti_dual[e42],
                anti_wedge[e15] * right_anti_dual[e43],
                anti_wedge[e25] * right_anti_dual[e41],
                -(anti_wedge[e31] * right_anti_dual[e25])
                    - (anti_wedge[e12] * right_anti_dual[e35])
                    - (anti_wedge[e15] * right_anti_dual[e23])
                    - (anti_wedge[e25] * right_anti_dual[e31])
                    - (anti_wedge[e35] * right_anti_dual[e12]),
            ]) + (anti_wedge.group0() * right_anti_dual.group1().www().with_w(right_anti_dual[e3215]))
                + (anti_wedge.group0().www() * right_anti_dual.group3().xyz()).with_w(anti_wedge[e3215] * right_anti_dual[scalar])
                - (anti_wedge.group1().yzx() * right_anti_dual.group0().zxy()).with_w(anti_wedge[e23] * right_anti_dual[e15]),
        );
    }
}
impl RejectOrthogonallyFrom<VersorOdd> for AntiMotor {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       19        0
    //    simd3        1        7        0
    //    simd4        8       11        0
    // Totals...
    // yes simd       17       37        0
    //  no simd       43       84        0
    fn reject_orthogonally_from(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(self[e3215]) * other.group3().xyz().with_w(other[e1234]) * Simd32x4::from(-1.0),
            // e1, e2, e3, e5
            Simd32x4::from([
                -(self[e15] * other[e1234]) - (self[e3215] * other[e41]),
                -(self[e25] * other[e1234]) - (self[e3215] * other[e42]),
                -(self[e35] * other[e1234]) - (self[e3215] * other[e43]),
                (self[e25] * other[e4315]) + (self[e35] * other[e4125]),
            ]) + (other.group3().zxyx() * self.group0().yzx().with_w(self[e15]))
                - (self.group0().zxy() * other.group3().yzx()).with_w(self[e3215] * other[e45]),
        );
        let right_anti_dual = VersorEven::from_groups(
            // e423, e431, e412, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            other.group2().xyz().with_w(other[e3215]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e4
            other.group3().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group1().xyz() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            ((anti_wedge.group1().yzx() * right_anti_dual.group3().zxy()) - (anti_wedge.group1().zxy() * right_anti_dual.group3().yzx()))
                .with_w(anti_wedge[e5] * right_anti_dual[e4] * -1.0),
            // e15, e25, e35, e1234
            (anti_wedge.group1().xyzx() * right_anti_dual.group2().www().with_w(right_anti_dual[e423]))
                + Simd32x3::from(0.0).with_w((anti_wedge[e2] * right_anti_dual[e431]) + (anti_wedge[e3] * right_anti_dual[e412]))
                - (right_anti_dual.group3() * anti_wedge.group1().www().with_w(anti_wedge[e321])),
            // e4235, e4315, e4125, e3215
            Simd32x3::from(0.0).with_w(
                (anti_wedge[e315] * right_anti_dual[e2]) + (anti_wedge[e125] * right_anti_dual[e3]) + (anti_wedge[e321] * right_anti_dual[e5])
                    - (anti_wedge[e5] * right_anti_dual[e321]),
            ) + (anti_wedge.group1().zxy() * right_anti_dual.group1().yzx()).with_w(anti_wedge[e235] * right_anti_dual[e1])
                - (anti_wedge.group1().yzxy() * right_anti_dual.group1().zxy().with_w(right_anti_dual[e315]))
                - (anti_wedge.group1().wwwz() * right_anti_dual.group0().xyz().with_w(right_anti_dual[e125]))
                - (right_anti_dual.group3().www() * anti_wedge.group0().xyz()).with_w(anti_wedge[e1] * right_anti_dual[e235]),
        );
    }
}
impl std::ops::Div<reject_orthogonally_from> for AntiPlane {
    type Output = reject_orthogonally_from_partial<AntiPlane>;
    fn div(self, _rhs: reject_orthogonally_from) -> Self::Output {
        reject_orthogonally_from_partial(self)
    }
}
impl RejectOrthogonallyFrom<AntiScalar> for AntiPlane {
    type Output = AntiPlane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        5        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0        9        0
    fn reject_orthogonally_from(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiPlane::from_groups(
            // e1, e2, e3, e5
            Simd32x4::from(other[e12345] * -1.0) * Simd32x4::from([self[e1] * other[e12345], self[e2] * other[e12345], self[e3] * other[e12345], self[e5] * other[e12345]]),
        );
    }
}
impl RejectOrthogonallyFrom<CircleRotor> for AntiPlane {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd3        1        5        0
    //    simd4        3        5        0
    // Totals...
    // yes simd        5       15        0
    //  no simd       16       40        0
    fn reject_orthogonally_from(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from(other[e12345]) * self.group0());
        let right_anti_dual = AntiCircleRotor::from_groups(
            // e41, e42, e43
            other.group0(),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, scalar
            other.group2() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (right_anti_dual.group0().yzx() * anti_wedge.group0().zxy()) - (right_anti_dual.group0().zxy() * anti_wedge.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                right_anti_dual[e41] * anti_wedge[e5],
                right_anti_dual[e42] * anti_wedge[e5],
                right_anti_dual[e43] * anti_wedge[e5],
                -(right_anti_dual[e31] * anti_wedge[e2]) - (right_anti_dual[e12] * anti_wedge[e3]),
            ]) - (right_anti_dual.group1().wwwx() * anti_wedge.group0().xyzx()),
            // e235, e315, e125, e4
            (Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group1().xyz()).with_w(0.0) + (right_anti_dual.group2().zxy() * anti_wedge.group0().yzx()).with_w(0.0)
                - (right_anti_dual.group2().yzx() * anti_wedge.group0().zxy()).with_w(0.0),
            // e1, e2, e3, e5
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group0(),
        );
    }
}
impl RejectOrthogonallyFrom<DipoleInversion> for AntiPlane {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        4        0
    //    simd3        0        2        0
    //    simd4        0        6        0
    // Totals...
    // yes simd        3       12        0
    //  no simd        3       34        0
    fn reject_orthogonally_from(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Scalar::from_groups(
            // scalar
            (self[e1] * other[e4235]) + (self[e2] * other[e4315]) + (self[e3] * other[e4125]) + (self[e5] * other[e1234]),
        );
        let right_anti_dual = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e4
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group3() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1(),
            // e235, e315, e125, e4
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group2(),
            // e1, e2, e3, e5
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group3(),
        );
    }
}
impl RejectOrthogonallyFrom<DualNum> for AntiPlane {
    type Output = AntiPlane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        5        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0        9        0
    fn reject_orthogonally_from(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return AntiPlane::from_groups(
            // e1, e2, e3, e5
            Simd32x4::from(other[e12345] * -1.0) * Simd32x4::from([self[e1] * other[e12345], self[e2] * other[e12345], self[e3] * other[e12345], self[e5] * other[e12345]]),
        );
    }
}
impl RejectOrthogonallyFrom<Flector> for AntiPlane {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        3        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        2        7        0
    //  no simd        2       19        0
    fn reject_orthogonally_from(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Scalar::from_groups(/* scalar */ (self[e1] * other[e4235]) + (self[e2] * other[e4315]) + (self[e3] * other[e4125]));
        let right_anti_dual = AntiFlector::from_groups(
            // e235, e315, e125, e321
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e1, e2, e3, e5
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1(),
        );
    }
}
impl RejectOrthogonallyFrom<Motor> for AntiPlane {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        5        0
    // Totals...
    // yes simd        5       13        0
    //  no simd        8       28        0
    fn reject_orthogonally_from(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from(other[e12345]) * self.group0());
        let right_anti_dual = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e3215
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (right_anti_dual[e23] * anti_wedge[e5]) + (right_anti_dual[e35] * anti_wedge[e2]),
                (right_anti_dual[e31] * anti_wedge[e5]) + (right_anti_dual[e15] * anti_wedge[e3]),
                (right_anti_dual[e12] * anti_wedge[e5]) + (right_anti_dual[e25] * anti_wedge[e1]),
                -(right_anti_dual[e31] * anti_wedge[e2]) - (right_anti_dual[e12] * anti_wedge[e3]),
            ]) - (anti_wedge.group0().zxyx() * right_anti_dual.group1().yzx().with_w(right_anti_dual[e23])),
            // e1, e2, e3, e5
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group0(),
        );
    }
}
impl RejectOrthogonallyFrom<MultiVector> for AntiPlane {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       74       98        0
    //    simd2        0        1        0
    //    simd3       20       34        0
    //    simd4       20       20        0
    // Totals...
    // yes simd      114      153        0
    //  no simd      214      282        0
    fn reject_orthogonally_from(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([(self[e1] * other[e4235]) + (self[e2] * other[e4315]) + (self[e3] * other[e4125]) + (self[e5] * other[e1234]), 0.0]),
            // e1, e2, e3, e4
            other.group0().yy().with_zw(other[e12345], 0.0) * Simd32x3::from(1.0).with_w(0.0) * self.group0().xyz().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
            // e5
            self[e5] * other[e12345],
            // e15, e25, e35, e45
            Simd32x4::from(0.0),
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(0.0),
            // e1234
            0.0,
        );
        let right_anti_dual = MultiVector::from_groups(
            // scalar, e12345
            other.group0().yx() * Simd32x2::from([-1.0, 1.0]),
            // e1, e2, e3, e4
            other.group9().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e5
            other[e3215],
            // e15, e25, e35, e45
            other.group8().with_w(other[e321] * -1.0),
            // e41, e42, e43
            other.group7(),
            // e23, e31, e12
            other.group6().xyz(),
            // e415, e425, e435, e321
            other.group5().with_w(other[e45]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e423, e431, e412
            other.group4() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group3().xyz() * Simd32x3::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group1().xyz().with_w(other[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1234
            other[e4] * -1.0,
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                anti_wedge[scalar] * right_anti_dual[scalar],
                (anti_wedge[scalar] * right_anti_dual[e12345])
                    + (anti_wedge[e12345] * right_anti_dual[scalar])
                    + (anti_wedge[e1] * right_anti_dual[e4235])
                    + (anti_wedge[e2] * right_anti_dual[e4315])
                    + (anti_wedge[e3] * right_anti_dual[e4125])
                    + (anti_wedge[e4] * right_anti_dual[e3215])
                    + (anti_wedge[e5] * right_anti_dual[e1234])
                    + (anti_wedge[e4235] * right_anti_dual[e1])
                    + (anti_wedge[e4315] * right_anti_dual[e2])
                    + (anti_wedge[e4125] * right_anti_dual[e3])
                    + (anti_wedge[e3215] * right_anti_dual[e4])
                    + (anti_wedge[e1234] * right_anti_dual[e5])
                    - (anti_wedge[e15] * right_anti_dual[e423])
                    - (anti_wedge[e25] * right_anti_dual[e431])
                    - (anti_wedge[e35] * right_anti_dual[e412])
                    - (anti_wedge[e45] * right_anti_dual[e321])
                    - (anti_wedge[e41] * right_anti_dual[e235])
                    - (anti_wedge[e42] * right_anti_dual[e315])
                    - (anti_wedge[e43] * right_anti_dual[e125])
                    - (anti_wedge[e23] * right_anti_dual[e415])
                    - (anti_wedge[e31] * right_anti_dual[e425])
                    - (anti_wedge[e12] * right_anti_dual[e435])
                    - (anti_wedge[e415] * right_anti_dual[e23])
                    - (anti_wedge[e425] * right_anti_dual[e31])
                    - (anti_wedge[e435] * right_anti_dual[e12])
                    - (anti_wedge[e321] * right_anti_dual[e45])
                    - (anti_wedge[e423] * right_anti_dual[e15])
                    - (anti_wedge[e431] * right_anti_dual[e25])
                    - (anti_wedge[e412] * right_anti_dual[e35])
                    - (anti_wedge[e235] * right_anti_dual[e41])
                    - (anti_wedge[e315] * right_anti_dual[e42])
                    - (anti_wedge[e125] * right_anti_dual[e43]),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1()) + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1()),
            // e5
            (anti_wedge[scalar] * right_anti_dual[e5]) + (anti_wedge[e5] * right_anti_dual[scalar]),
            // e15, e25, e35, e45
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group3())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group3())
                + (Simd32x4::from(right_anti_dual[e5]) * anti_wedge.group1())
                - (Simd32x4::from(anti_wedge[e5]) * right_anti_dual.group1()),
            // e41, e42, e43
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group4())
                + (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group1().xyz())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group4())
                - (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group1().xyz()),
            // e23, e31, e12
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group5())
                + (anti_wedge.group1().yzx() * right_anti_dual.group1().zxy())
                - (anti_wedge.group1().zxy() * right_anti_dual.group1().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (anti_wedge[e4] * right_anti_dual[e15])
                    + (anti_wedge[e5] * right_anti_dual[e41])
                    + (anti_wedge[e15] * right_anti_dual[e4])
                    + (anti_wedge[e41] * right_anti_dual[e5]),
                (anti_wedge[e4] * right_anti_dual[e25])
                    + (anti_wedge[e5] * right_anti_dual[e42])
                    + (anti_wedge[e25] * right_anti_dual[e4])
                    + (anti_wedge[e42] * right_anti_dual[e5]),
                (anti_wedge[e4] * right_anti_dual[e35])
                    + (anti_wedge[e5] * right_anti_dual[e43])
                    + (anti_wedge[e35] * right_anti_dual[e4])
                    + (anti_wedge[e43] * right_anti_dual[e5]),
                -(anti_wedge[e1] * right_anti_dual[e23])
                    - (anti_wedge[e2] * right_anti_dual[e31])
                    - (anti_wedge[e3] * right_anti_dual[e12])
                    - (anti_wedge[e12] * right_anti_dual[e3]),
            ]) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group6())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group6())
                - (right_anti_dual.group1().xyzy() * anti_wedge.group3().www().with_w(anti_wedge[e31]))
                - (right_anti_dual.group3().www() * anti_wedge.group1().xyz()).with_w(anti_wedge[e23] * right_anti_dual[e1]),
            // e423, e431, e412
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group7())
                + (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group7())
                + (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group5())
                + (anti_wedge.group4().yzx() * right_anti_dual.group1().zxy())
                + (right_anti_dual.group4().yzx() * anti_wedge.group1().zxy())
                - (anti_wedge.group4().zxy() * right_anti_dual.group1().yzx())
                - (right_anti_dual.group4().zxy() * anti_wedge.group1().yzx()),
            // e235, e315, e125
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group8())
                + (Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group8())
                + (Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group5())
                + (anti_wedge.group1().yzx() * right_anti_dual.group3().zxy())
                + (anti_wedge.group3().zxy() * right_anti_dual.group1().yzx())
                - (anti_wedge.group1().zxy() * right_anti_dual.group3().yzx())
                - (anti_wedge.group3().yzx() * right_anti_dual.group1().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (anti_wedge[e3] * right_anti_dual[e425])
                    + (anti_wedge[e4] * right_anti_dual[e235])
                    + (anti_wedge[e45] * right_anti_dual[e23])
                    + (anti_wedge[e435] * right_anti_dual[e2]),
                (anti_wedge[e1] * right_anti_dual[e435])
                    + (anti_wedge[e4] * right_anti_dual[e315])
                    + (anti_wedge[e45] * right_anti_dual[e31])
                    + (anti_wedge[e415] * right_anti_dual[e3]),
                (anti_wedge[e2] * right_anti_dual[e415])
                    + (anti_wedge[e4] * right_anti_dual[e125])
                    + (anti_wedge[e45] * right_anti_dual[e12])
                    + (anti_wedge[e425] * right_anti_dual[e1]),
                -(anti_wedge[e1] * right_anti_dual[e235])
                    - (anti_wedge[e2] * right_anti_dual[e315])
                    - (anti_wedge[e3] * right_anti_dual[e125])
                    - (anti_wedge[e5] * right_anti_dual[e321]),
            ]) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group9())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group9())
                + (Simd32x4::from([right_anti_dual[e5], right_anti_dual[e5], right_anti_dual[e5], right_anti_dual[e3]]) * anti_wedge.group7().with_w(anti_wedge[e125]))
                + (anti_wedge.group5() * right_anti_dual.group3().www()).with_w(anti_wedge[e315] * right_anti_dual[e2])
                + (anti_wedge.group4().yzx() * right_anti_dual.group3().zxy()).with_w(anti_wedge[e235] * right_anti_dual[e1])
                + (right_anti_dual.group4().yzx() * anti_wedge.group3().zxy()).with_w(anti_wedge[e321] * right_anti_dual[e5])
                - (Simd32x4::from([anti_wedge[e5], anti_wedge[e5], anti_wedge[e5], anti_wedge[e15]]) * right_anti_dual.group7().with_w(right_anti_dual[e23]))
                - (right_anti_dual.group3().yzxx() * anti_wedge.group4().zxy().with_w(anti_wedge[e23]))
                - (anti_wedge.group8() * right_anti_dual.group1().www()).with_w(anti_wedge[e31] * right_anti_dual[e25])
                - (right_anti_dual.group4().zxy() * anti_wedge.group3().yzx()).with_w(anti_wedge[e12] * right_anti_dual[e35])
                - (anti_wedge.group1().yzx() * right_anti_dual.group6().zxy()).with_w(anti_wedge[e25] * right_anti_dual[e31])
                - (anti_wedge.group6().yzx() * right_anti_dual.group1().zxy()).with_w(anti_wedge[e35] * right_anti_dual[e12]),
            // e1234
            (anti_wedge[scalar] * right_anti_dual[e1234])
                + (anti_wedge[e1] * right_anti_dual[e423])
                + (anti_wedge[e2] * right_anti_dual[e431])
                + (anti_wedge[e3] * right_anti_dual[e412])
                + (anti_wedge[e4] * right_anti_dual[e321])
                + (anti_wedge[e1234] * right_anti_dual[scalar])
                - (anti_wedge[e41] * right_anti_dual[e23])
                - (anti_wedge[e42] * right_anti_dual[e31])
                - (anti_wedge[e43] * right_anti_dual[e12])
                - (anti_wedge[e23] * right_anti_dual[e41])
                - (anti_wedge[e31] * right_anti_dual[e42])
                - (anti_wedge[e12] * right_anti_dual[e43])
                - (anti_wedge[e321] * right_anti_dual[e4])
                - (anti_wedge[e423] * right_anti_dual[e1])
                - (anti_wedge[e431] * right_anti_dual[e2])
                - (anti_wedge[e412] * right_anti_dual[e3]),
        );
    }
}
impl RejectOrthogonallyFrom<Plane> for AntiPlane {
    type Output = AntiPlane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        2        7        0
    //  no simd        2       10        0
    fn reject_orthogonally_from(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return AntiPlane::from_groups(
            // e1, e2, e3, e5
            Simd32x4::from((self[e1] * other[e4235]) + (self[e2] * other[e4315]) + (self[e3] * other[e4125]))
                * Simd32x4::from([other[e4235] * -1.0, other[e4315] * -1.0, other[e4125] * -1.0, other[e3215]]),
        );
    }
}
impl RejectOrthogonallyFrom<Sphere> for AntiPlane {
    type Output = RoundPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        5        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        3        7        0
    //  no simd        3       13        0
    fn reject_orthogonally_from(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Scalar::from_groups(
            // scalar
            (self[e1] * other[e4235]) + (self[e2] * other[e4315]) + (self[e3] * other[e4125]) + (self[e5] * other[e1234]),
        );
        let right_anti_dual = RoundPoint::from_groups(
            // e1, e2, e3, e4
            other.group0().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e5
            other[e3215],
        );
        return RoundPoint::from_groups(
            // e1, e2, e3, e4
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e5
            right_anti_dual[e5] * anti_wedge[scalar],
        );
    }
}
impl RejectOrthogonallyFrom<VersorEven> for AntiPlane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       15        0
    //    simd3        2        3        0
    //    simd4        2       10        0
    // Totals...
    // yes simd        7       28        0
    //  no simd       17       64        0
    fn reject_orthogonally_from(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from(other[e12345]) * self.group0());
        let right_anti_dual = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e1234
            other.group2().xyz().with_w(other[e4]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            other.group3().xyz().with_w(other[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                anti_wedge[e2] * right_anti_dual[e43] * -1.0,
                anti_wedge[e3] * right_anti_dual[e41] * -1.0,
                anti_wedge[e1] * right_anti_dual[e42] * -1.0,
                (anti_wedge[e2] * right_anti_dual[e4315]) + (anti_wedge[e3] * right_anti_dual[e4125]) + (anti_wedge[e5] * right_anti_dual[e1234]),
            ]) + (anti_wedge.group0().zxyx() * right_anti_dual.group0().yzx().with_w(right_anti_dual[e4235])),
            // e415, e425, e435, e321
            Simd32x4::from([
                anti_wedge[e5] * right_anti_dual[e41],
                anti_wedge[e5] * right_anti_dual[e42],
                anti_wedge[e5] * right_anti_dual[e43],
                -(anti_wedge[e2] * right_anti_dual[e31]) - (anti_wedge[e3] * right_anti_dual[e12]),
            ]) - (anti_wedge.group0().xyzx() * right_anti_dual.group1().wwwx()),
            // e235, e315, e125, e5
            ((Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group1().xyz()) + (anti_wedge.group0().yzx() * right_anti_dual.group2().zxy())
                - (anti_wedge.group0().zxy() * right_anti_dual.group2().yzx()))
            .with_w(anti_wedge[e5] * right_anti_dual[scalar]),
            // e1, e2, e3, e4
            Simd32x3::from(1.0).with_w(0.0) * right_anti_dual.group0().www().with_w(0.0) * anti_wedge.group0().xyz().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
        );
    }
}
impl RejectOrthogonallyFrom<VersorOdd> for AntiPlane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        4        0
    //    simd4        0        8        0
    // Totals...
    // yes simd        3       12        0
    //  no simd        3       36        0
    fn reject_orthogonally_from(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Scalar::from_groups(
            // scalar
            (self[e1] * other[e4235]) + (self[e2] * other[e4315]) + (self[e3] * other[e4125]) + (self[e5] * other[e1234]),
        );
        let right_anti_dual = VersorEven::from_groups(
            // e423, e431, e412, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            other.group2().xyz().with_w(other[e3215]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e4
            other.group3().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1(),
            // e235, e315, e125, e5
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group2(),
            // e1, e2, e3, e4
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group3(),
        );
    }
}
impl std::ops::Div<reject_orthogonally_from> for AntiScalar {
    type Output = reject_orthogonally_from_partial<AntiScalar>;
    fn div(self, _rhs: reject_orthogonally_from) -> Self::Output {
        reject_orthogonally_from_partial(self)
    }
}
impl RejectOrthogonallyFrom<AntiCircleRotor> for AntiScalar {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       11        0
    //    simd3        0        3        0
    //    simd4        0        6        0
    // Totals...
    // yes simd       10       20        0
    //  no simd       10       44        0
    fn reject_orthogonally_from(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[e12345]) * other.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(self[e12345]) * other.group1(),
            // e15, e25, e35, scalar
            Simd32x4::from(self[e12345]) * other.group2(),
        );
        let right_anti_dual = CircleRotor::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e12345
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1(),
            // e235, e315, e125, e12345
            Simd32x4::from([right_anti_dual[e235], right_anti_dual[e315], right_anti_dual[e125], 1.0])
                * anti_wedge.group2().www().with_w(
                    (anti_wedge[scalar] * right_anti_dual[e12345])
                        - (anti_wedge[e41] * right_anti_dual[e235])
                        - (anti_wedge[e42] * right_anti_dual[e315])
                        - (anti_wedge[e43] * right_anti_dual[e125])
                        - (anti_wedge[e23] * right_anti_dual[e415])
                        - (anti_wedge[e31] * right_anti_dual[e425])
                        - (anti_wedge[e12] * right_anti_dual[e435])
                        - (anti_wedge[e45] * right_anti_dual[e321])
                        - (anti_wedge[e15] * right_anti_dual[e423])
                        - (anti_wedge[e25] * right_anti_dual[e431])
                        - (anti_wedge[e35] * right_anti_dual[e412]),
                ),
        );
    }
}
impl RejectOrthogonallyFrom<AntiDipoleInversion> for AntiScalar {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       21        0
    //    simd3        2        5        0
    //    simd4        4        9        0
    // Totals...
    // yes simd       21       35        0
    //  no simd       37       72        0
    fn reject_orthogonally_from(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[e12345]) * other.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(self[e12345]) * other.group1(),
            // e235, e315, e125, e4
            Simd32x4::from(self[e12345]) * other.group2(),
            // e1, e2, e3, e5
            Simd32x4::from(self[e12345]) * other.group3(),
        );
        let right_anti_dual = DipoleInversion::from_groups(
            // e41, e42, e43
            other.group0(),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            other.group3() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return CircleRotor::from_groups(
            // e423, e431, e412
            (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group1().xyz()) + (right_anti_dual.group0().yzx() * anti_wedge.group3().zxy())
                - (right_anti_dual.group0().zxy() * anti_wedge.group3().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (anti_wedge[e4] * right_anti_dual[e15]) + (anti_wedge[e5] * right_anti_dual[e41]),
                (anti_wedge[e4] * right_anti_dual[e25]) + (anti_wedge[e5] * right_anti_dual[e42]),
                (anti_wedge[e4] * right_anti_dual[e35]) + (anti_wedge[e5] * right_anti_dual[e43]),
                -(anti_wedge[e2] * right_anti_dual[e31]) - (anti_wedge[e3] * right_anti_dual[e12]),
            ]) - (anti_wedge.group3().xyzx() * right_anti_dual.group1().wwwx()),
            // e235, e315, e125, e12345
            (anti_wedge.group3().wwwx() * right_anti_dual.group1().xyz().with_w(right_anti_dual[e4235]))
                + Simd32x3::from(0.0).with_w(
                    (anti_wedge[e2] * right_anti_dual[e4315]) + (anti_wedge[e3] * right_anti_dual[e4125]) + (anti_wedge[e5] * right_anti_dual[e1234])
                        - (anti_wedge[e431] * right_anti_dual[e25])
                        - (anti_wedge[e412] * right_anti_dual[e35])
                        - (anti_wedge[e415] * right_anti_dual[e23])
                        - (anti_wedge[e425] * right_anti_dual[e31])
                        - (anti_wedge[e435] * right_anti_dual[e12])
                        - (anti_wedge[e321] * right_anti_dual[e45])
                        - (anti_wedge[e235] * right_anti_dual[e41])
                        - (anti_wedge[e315] * right_anti_dual[e42])
                        - (anti_wedge[e125] * right_anti_dual[e43]),
                )
                + (anti_wedge.group3().yzx() * right_anti_dual.group2().zxy()).with_w(anti_wedge[e4] * right_anti_dual[e3215])
                - (right_anti_dual.group2().yzxx() * anti_wedge.group3().zxy().with_w(anti_wedge[e423])),
        );
    }
}
impl RejectOrthogonallyFrom<AntiDualNum> for AntiScalar {
    type Output = DualNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd2        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        3        0
    fn reject_orthogonally_from(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return DualNum::from_groups(/* e5, e12345 */ Simd32x2::from(other[scalar] * self[e12345]) * other.group0());
    }
}
impl RejectOrthogonallyFrom<AntiFlatPoint> for AntiScalar {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn reject_orthogonally_from(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ f32::powi(other[e321], 2) * self[e12345]);
    }
}
impl RejectOrthogonallyFrom<AntiFlector> for AntiScalar {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        4        0
    //    simd3        1        2        0
    //    simd4        0        6        0
    // Totals...
    // yes simd        4       12        0
    //  no simd        6       34        0
    fn reject_orthogonally_from(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(self[e12345]) * other.group0(),
            // e1, e2, e3, e5
            Simd32x4::from(self[e12345]) * other.group1(),
        );
        let right_anti_dual = Flector::from_groups(
            // e15, e25, e35, e45
            other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([right_anti_dual[e45], right_anti_dual[e45], right_anti_dual[e45], 1.0])
                * anti_wedge.group1().xyz().with_w(
                    (anti_wedge[e1] * right_anti_dual[e4235]) + (anti_wedge[e2] * right_anti_dual[e4315]) + (anti_wedge[e3] * right_anti_dual[e4125])
                        - (anti_wedge[e321] * right_anti_dual[e45]),
                )
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            ((anti_wedge.group1().yzx() * right_anti_dual.group0().zxy()) - (anti_wedge.group1().zxy() * right_anti_dual.group0().yzx())).with_w(0.0),
        );
    }
}
impl RejectOrthogonallyFrom<AntiLine> for AntiScalar {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        3        0
    //    simd3        0        4        0
    // Totals...
    // yes simd        2        7        0
    //  no simd        2       15        0
    fn reject_orthogonally_from(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(self[e12345]) * other.group0(),
            // e15, e25, e35
            Simd32x3::from(self[e12345]) * other.group1(),
        );
        let right_anti_dual = Line::from_groups(
            // e415, e425, e435
            other.group0() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group1() * Simd32x3::from(-1.0),
        );
        return AntiScalar::from_groups(
            // e12345
            -(anti_wedge[e23] * right_anti_dual[e415]) - (anti_wedge[e31] * right_anti_dual[e425]) - (anti_wedge[e12] * right_anti_dual[e435]),
        );
    }
}
impl RejectOrthogonallyFrom<AntiMotor> for AntiScalar {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        5        0
    //    simd3        1        2        0
    //    simd4        0        5        0
    // Totals...
    // yes simd        4       12        0
    //  no simd        6       31        0
    fn reject_orthogonally_from(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(self[e12345]) * other.group0(),
            // e15, e25, e35, e3215
            Simd32x4::from(self[e12345]) * other.group1(),
        );
        let right_anti_dual = Motor::from_groups(
            // e415, e425, e435, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([right_anti_dual[e415], right_anti_dual[e425], right_anti_dual[e435], 1.0])
                * anti_wedge.group0().www().with_w(
                    (anti_wedge[scalar] * right_anti_dual[e12345])
                        - (anti_wedge[e23] * right_anti_dual[e415])
                        - (anti_wedge[e31] * right_anti_dual[e425])
                        - (anti_wedge[e12] * right_anti_dual[e435]),
                ),
            // e235, e315, e125, e5
            ((Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group1().xyz()) + (Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group0().xyz()))
                .with_w(anti_wedge[scalar] * right_anti_dual[e5]),
        );
    }
}
impl RejectOrthogonallyFrom<AntiPlane> for AntiScalar {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        3        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        2        5        0
    //  no simd        2       11        0
    fn reject_orthogonally_from(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from(self[e12345]) * other.group0());
        let right_anti_dual = Plane::from_groups(/* e4235, e4315, e4125, e3215 */ other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]));
        return AntiScalar::from_groups(
            // e12345
            (anti_wedge[e1] * right_anti_dual[e4235]) + (anti_wedge[e2] * right_anti_dual[e4315]) + (anti_wedge[e3] * right_anti_dual[e4125]),
        );
    }
}
impl RejectOrthogonallyFrom<AntiScalar> for AntiScalar {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn reject_orthogonally_from(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ f32::powi(other[e12345], 2) * self[e12345] * -1.0);
    }
}
impl RejectOrthogonallyFrom<Circle> for AntiScalar {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       10        0
    //    simd3        0        2        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        9       14        0
    //  no simd        9       24        0
    fn reject_orthogonally_from(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[e12345]) * other.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(self[e12345]) * other.group1(),
            // e235, e315, e125
            Simd32x3::from(self[e12345]) * other.group2(),
        );
        let right_anti_dual = Dipole::from_groups(
            // e41, e42, e43
            other.group0(),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35
            other.group2(),
        );
        return AntiScalar::from_groups(
            // e12345
            -(anti_wedge[e423] * right_anti_dual[e15])
                - (anti_wedge[e431] * right_anti_dual[e25])
                - (anti_wedge[e412] * right_anti_dual[e35])
                - (anti_wedge[e415] * right_anti_dual[e23])
                - (anti_wedge[e425] * right_anti_dual[e31])
                - (anti_wedge[e435] * right_anti_dual[e12])
                - (anti_wedge[e321] * right_anti_dual[e45])
                - (anti_wedge[e235] * right_anti_dual[e41])
                - (anti_wedge[e315] * right_anti_dual[e42])
                - (anti_wedge[e125] * right_anti_dual[e43]),
        );
    }
}
impl RejectOrthogonallyFrom<CircleRotor> for AntiScalar {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       11        0
    //    simd3        0        2        0
    //    simd4        0        6        0
    // Totals...
    // yes simd       10       19        0
    //  no simd       10       41        0
    fn reject_orthogonally_from(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[e12345]) * other.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(self[e12345]) * other.group1(),
            // e235, e315, e125, e12345
            Simd32x4::from(self[e12345]) * other.group2(),
        );
        let right_anti_dual = AntiCircleRotor::from_groups(
            // e41, e42, e43
            other.group0(),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, scalar
            other.group2() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1(),
            // e235, e315, e125, e12345
            Simd32x4::from([anti_wedge[e235], anti_wedge[e315], anti_wedge[e125], 1.0])
                * right_anti_dual.group2().www().with_w(
                    (right_anti_dual[scalar] * anti_wedge[e12345])
                        - (right_anti_dual[e41] * anti_wedge[e235])
                        - (right_anti_dual[e42] * anti_wedge[e315])
                        - (right_anti_dual[e43] * anti_wedge[e125])
                        - (right_anti_dual[e23] * anti_wedge[e415])
                        - (right_anti_dual[e31] * anti_wedge[e425])
                        - (right_anti_dual[e12] * anti_wedge[e435])
                        - (right_anti_dual[e45] * anti_wedge[e321])
                        - (right_anti_dual[e15] * anti_wedge[e423])
                        - (right_anti_dual[e25] * anti_wedge[e431])
                        - (right_anti_dual[e35] * anti_wedge[e412]),
                ),
        );
    }
}
impl RejectOrthogonallyFrom<Dipole> for AntiScalar {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       10        0
    //    simd3        0        4        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        9       16        0
    //  no simd        9       30        0
    fn reject_orthogonally_from(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[e12345]) * other.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(self[e12345]) * other.group1(),
            // e15, e25, e35
            Simd32x3::from(self[e12345]) * other.group2(),
        );
        let right_anti_dual = Circle::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125
            other.group2() * Simd32x3::from(-1.0),
        );
        return AntiScalar::from_groups(
            // e12345
            -(right_anti_dual[e423] * anti_wedge[e15])
                - (right_anti_dual[e431] * anti_wedge[e25])
                - (right_anti_dual[e412] * anti_wedge[e35])
                - (right_anti_dual[e415] * anti_wedge[e23])
                - (right_anti_dual[e425] * anti_wedge[e31])
                - (right_anti_dual[e435] * anti_wedge[e12])
                - (right_anti_dual[e321] * anti_wedge[e45])
                - (right_anti_dual[e235] * anti_wedge[e41])
                - (right_anti_dual[e315] * anti_wedge[e42])
                - (right_anti_dual[e125] * anti_wedge[e43]),
        );
    }
}
impl RejectOrthogonallyFrom<DipoleInversion> for AntiScalar {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       21        0
    //    simd3        2        6        0
    //    simd4        4        9        0
    // Totals...
    // yes simd       21       36        0
    //  no simd       37       75        0
    fn reject_orthogonally_from(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[e12345]) * other.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(self[e12345]) * other.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(self[e12345]) * other.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * other.group3(),
        );
        let right_anti_dual = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e4
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group3() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return CircleRotor::from_groups(
            // e423, e431, e412
            (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group1().xyz()) + (anti_wedge.group0().yzx() * right_anti_dual.group3().zxy())
                - (anti_wedge.group0().zxy() * right_anti_dual.group3().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (right_anti_dual[e4] * anti_wedge[e15]) + (right_anti_dual[e5] * anti_wedge[e41]),
                (right_anti_dual[e4] * anti_wedge[e25]) + (right_anti_dual[e5] * anti_wedge[e42]),
                (right_anti_dual[e4] * anti_wedge[e35]) + (right_anti_dual[e5] * anti_wedge[e43]),
                -(right_anti_dual[e2] * anti_wedge[e31]) - (right_anti_dual[e3] * anti_wedge[e12]),
            ]) - (right_anti_dual.group3().xyzx() * anti_wedge.group1().wwwx()),
            // e235, e315, e125, e12345
            (right_anti_dual.group3().wwwx() * anti_wedge.group1().xyz().with_w(anti_wedge[e4235]))
                + Simd32x3::from(0.0).with_w(
                    (right_anti_dual[e2] * anti_wedge[e4315]) + (right_anti_dual[e3] * anti_wedge[e4125]) + (right_anti_dual[e5] * anti_wedge[e1234])
                        - (right_anti_dual[e431] * anti_wedge[e25])
                        - (right_anti_dual[e412] * anti_wedge[e35])
                        - (right_anti_dual[e415] * anti_wedge[e23])
                        - (right_anti_dual[e425] * anti_wedge[e31])
                        - (right_anti_dual[e435] * anti_wedge[e12])
                        - (right_anti_dual[e321] * anti_wedge[e45])
                        - (right_anti_dual[e235] * anti_wedge[e41])
                        - (right_anti_dual[e315] * anti_wedge[e42])
                        - (right_anti_dual[e125] * anti_wedge[e43]),
                )
                + (right_anti_dual.group3().yzx() * anti_wedge.group2().zxy()).with_w(right_anti_dual[e4] * anti_wedge[e3215])
                - (anti_wedge.group2().yzxx() * right_anti_dual.group3().zxy().with_w(right_anti_dual[e423])),
        );
    }
}
impl RejectOrthogonallyFrom<DualNum> for AntiScalar {
    type Output = DualNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd2        0        1        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0        5        0
    fn reject_orthogonally_from(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return DualNum::from_groups(
            // e5, e12345
            Simd32x2::from(other[e12345] * -1.0) * Simd32x2::from([self[e12345] * other[e5], self[e12345] * other[e12345]]),
        );
    }
}
impl RejectOrthogonallyFrom<FlatPoint> for AntiScalar {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn reject_orthogonally_from(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ self[e12345] * f32::powi(other[e45], 2) * -1.0);
    }
}
impl RejectOrthogonallyFrom<Flector> for AntiScalar {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        4        0
    //    simd3        1        2        0
    //    simd4        0        6        0
    // Totals...
    // yes simd        4       12        0
    //  no simd        6       34        0
    fn reject_orthogonally_from(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(self[e12345]) * other.group0(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * other.group1(),
        );
        let right_anti_dual = AntiFlector::from_groups(
            // e235, e315, e125, e321
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([anti_wedge[e45], anti_wedge[e45], anti_wedge[e45], 1.0])
                * right_anti_dual.group1().xyz().with_w(
                    (right_anti_dual[e1] * anti_wedge[e4235]) + (right_anti_dual[e2] * anti_wedge[e4315]) + (right_anti_dual[e3] * anti_wedge[e4125])
                        - (right_anti_dual[e321] * anti_wedge[e45]),
                )
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            ((right_anti_dual.group1().yzx() * anti_wedge.group0().zxy()) - (right_anti_dual.group1().zxy() * anti_wedge.group0().yzx())).with_w(0.0),
        );
    }
}
impl RejectOrthogonallyFrom<Line> for AntiScalar {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        3        0
    //    simd3        0        2        0
    // Totals...
    // yes simd        2        5        0
    //  no simd        2        9        0
    fn reject_orthogonally_from(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(self[e12345]) * other.group0(),
            // e235, e315, e125
            Simd32x3::from(self[e12345]) * other.group1(),
        );
        let right_anti_dual = AntiLine::from_groups(/* e23, e31, e12 */ other.group0(), /* e15, e25, e35 */ other.group1());
        return AntiScalar::from_groups(
            // e12345
            -(right_anti_dual[e23] * anti_wedge[e415]) - (right_anti_dual[e31] * anti_wedge[e425]) - (right_anti_dual[e12] * anti_wedge[e435]),
        );
    }
}
impl RejectOrthogonallyFrom<Motor> for AntiScalar {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        5        0
    //    simd3        1        2        0
    //    simd4        0        5        0
    // Totals...
    // yes simd        4       12        0
    //  no simd        6       31        0
    fn reject_orthogonally_from(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(self[e12345]) * other.group0(),
            // e235, e315, e125, e5
            Simd32x4::from(self[e12345]) * other.group1(),
        );
        let right_anti_dual = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e3215
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([anti_wedge[e415], anti_wedge[e425], anti_wedge[e435], 1.0])
                * right_anti_dual.group0().www().with_w(
                    (right_anti_dual[scalar] * anti_wedge[e12345])
                        - (right_anti_dual[e23] * anti_wedge[e415])
                        - (right_anti_dual[e31] * anti_wedge[e425])
                        - (right_anti_dual[e12] * anti_wedge[e435]),
                ),
            // e235, e315, e125, e5
            ((Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group1().xyz()) + (Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group0().xyz()))
                .with_w(right_anti_dual[scalar] * anti_wedge[e5]),
        );
    }
}
impl RejectOrthogonallyFrom<MultiVector> for AntiScalar {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       71       95        0
    //    simd2        0        2        0
    //    simd3       20       38        0
    //    simd4       20       21        0
    // Totals...
    // yes simd      111      156        0
    //  no simd      211      297        0
    fn reject_orthogonally_from(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(self[e12345]) * other.group0(),
            // e1, e2, e3, e4
            Simd32x4::from(self[e12345]) * other.group1(),
            // e5
            self[e12345] * other[e5],
            // e15, e25, e35, e45
            Simd32x4::from(self[e12345]) * other.group3(),
            // e41, e42, e43
            Simd32x3::from(self[e12345]) * other.group4(),
            // e23, e31, e12
            Simd32x3::from(self[e12345]) * other.group5(),
            // e415, e425, e435, e321
            Simd32x4::from(self[e12345]) * other.group6(),
            // e423, e431, e412
            Simd32x3::from(self[e12345]) * other.group7(),
            // e235, e315, e125
            Simd32x3::from(self[e12345]) * other.group8(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * other.group9(),
            // e1234
            self[e12345] * other[e1234],
        );
        let right_anti_dual = MultiVector::from_groups(
            // scalar, e12345
            other.group0().yx() * Simd32x2::from([-1.0, 1.0]),
            // e1, e2, e3, e4
            other.group9().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e5
            other[e3215],
            // e15, e25, e35, e45
            other.group8().with_w(other[e321] * -1.0),
            // e41, e42, e43
            other.group7(),
            // e23, e31, e12
            other.group6().xyz(),
            // e415, e425, e435, e321
            other.group5().with_w(other[e45]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e423, e431, e412
            other.group4() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group3().xyz() * Simd32x3::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group1().xyz().with_w(other[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1234
            other[e4] * -1.0,
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                anti_wedge[scalar] * right_anti_dual[scalar],
                (anti_wedge[scalar] * right_anti_dual[e12345])
                    + (anti_wedge[e12345] * right_anti_dual[scalar])
                    + (anti_wedge[e1] * right_anti_dual[e4235])
                    + (anti_wedge[e2] * right_anti_dual[e4315])
                    + (anti_wedge[e3] * right_anti_dual[e4125])
                    + (anti_wedge[e4] * right_anti_dual[e3215])
                    + (anti_wedge[e5] * right_anti_dual[e1234])
                    + (anti_wedge[e4235] * right_anti_dual[e1])
                    + (anti_wedge[e4315] * right_anti_dual[e2])
                    + (anti_wedge[e4125] * right_anti_dual[e3])
                    + (anti_wedge[e3215] * right_anti_dual[e4])
                    + (anti_wedge[e1234] * right_anti_dual[e5])
                    - (anti_wedge[e15] * right_anti_dual[e423])
                    - (anti_wedge[e25] * right_anti_dual[e431])
                    - (anti_wedge[e35] * right_anti_dual[e412])
                    - (anti_wedge[e45] * right_anti_dual[e321])
                    - (anti_wedge[e41] * right_anti_dual[e235])
                    - (anti_wedge[e42] * right_anti_dual[e315])
                    - (anti_wedge[e43] * right_anti_dual[e125])
                    - (anti_wedge[e23] * right_anti_dual[e415])
                    - (anti_wedge[e31] * right_anti_dual[e425])
                    - (anti_wedge[e12] * right_anti_dual[e435])
                    - (anti_wedge[e415] * right_anti_dual[e23])
                    - (anti_wedge[e425] * right_anti_dual[e31])
                    - (anti_wedge[e435] * right_anti_dual[e12])
                    - (anti_wedge[e321] * right_anti_dual[e45])
                    - (anti_wedge[e423] * right_anti_dual[e15])
                    - (anti_wedge[e431] * right_anti_dual[e25])
                    - (anti_wedge[e412] * right_anti_dual[e35])
                    - (anti_wedge[e235] * right_anti_dual[e41])
                    - (anti_wedge[e315] * right_anti_dual[e42])
                    - (anti_wedge[e125] * right_anti_dual[e43]),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1()) + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1()),
            // e5
            (anti_wedge[scalar] * right_anti_dual[e5]) + (anti_wedge[e5] * right_anti_dual[scalar]),
            // e15, e25, e35, e45
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group3())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group3())
                + (Simd32x4::from(right_anti_dual[e5]) * anti_wedge.group1())
                - (Simd32x4::from(anti_wedge[e5]) * right_anti_dual.group1()),
            // e41, e42, e43
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group4())
                + (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group1().xyz())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group4())
                - (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group1().xyz()),
            // e23, e31, e12
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group5())
                + (anti_wedge.group1().yzx() * right_anti_dual.group1().zxy())
                - (anti_wedge.group1().zxy() * right_anti_dual.group1().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (anti_wedge[e4] * right_anti_dual[e15])
                    + (anti_wedge[e5] * right_anti_dual[e41])
                    + (anti_wedge[e15] * right_anti_dual[e4])
                    + (anti_wedge[e41] * right_anti_dual[e5]),
                (anti_wedge[e4] * right_anti_dual[e25])
                    + (anti_wedge[e5] * right_anti_dual[e42])
                    + (anti_wedge[e25] * right_anti_dual[e4])
                    + (anti_wedge[e42] * right_anti_dual[e5]),
                (anti_wedge[e4] * right_anti_dual[e35])
                    + (anti_wedge[e5] * right_anti_dual[e43])
                    + (anti_wedge[e35] * right_anti_dual[e4])
                    + (anti_wedge[e43] * right_anti_dual[e5]),
                -(anti_wedge[e1] * right_anti_dual[e23])
                    - (anti_wedge[e2] * right_anti_dual[e31])
                    - (anti_wedge[e3] * right_anti_dual[e12])
                    - (anti_wedge[e12] * right_anti_dual[e3]),
            ]) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group6())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group6())
                - (right_anti_dual.group1().xyzy() * anti_wedge.group3().www().with_w(anti_wedge[e31]))
                - (right_anti_dual.group3().www() * anti_wedge.group1().xyz()).with_w(anti_wedge[e23] * right_anti_dual[e1]),
            // e423, e431, e412
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group7())
                + (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group7())
                + (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group5())
                + (anti_wedge.group4().yzx() * right_anti_dual.group1().zxy())
                + (right_anti_dual.group4().yzx() * anti_wedge.group1().zxy())
                - (anti_wedge.group4().zxy() * right_anti_dual.group1().yzx())
                - (right_anti_dual.group4().zxy() * anti_wedge.group1().yzx()),
            // e235, e315, e125
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group8())
                + (Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group8())
                + (Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group5())
                + (anti_wedge.group1().yzx() * right_anti_dual.group3().zxy())
                + (anti_wedge.group3().zxy() * right_anti_dual.group1().yzx())
                - (anti_wedge.group1().zxy() * right_anti_dual.group3().yzx())
                - (anti_wedge.group3().yzx() * right_anti_dual.group1().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (anti_wedge[e3] * right_anti_dual[e425])
                    + (anti_wedge[e4] * right_anti_dual[e235])
                    + (anti_wedge[e45] * right_anti_dual[e23])
                    + (anti_wedge[e435] * right_anti_dual[e2]),
                (anti_wedge[e1] * right_anti_dual[e435])
                    + (anti_wedge[e4] * right_anti_dual[e315])
                    + (anti_wedge[e45] * right_anti_dual[e31])
                    + (anti_wedge[e415] * right_anti_dual[e3]),
                (anti_wedge[e2] * right_anti_dual[e415])
                    + (anti_wedge[e4] * right_anti_dual[e125])
                    + (anti_wedge[e45] * right_anti_dual[e12])
                    + (anti_wedge[e425] * right_anti_dual[e1]),
                -(anti_wedge[e1] * right_anti_dual[e235])
                    - (anti_wedge[e2] * right_anti_dual[e315])
                    - (anti_wedge[e3] * right_anti_dual[e125])
                    - (anti_wedge[e5] * right_anti_dual[e321]),
            ]) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group9())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group9())
                + (Simd32x4::from([right_anti_dual[e5], right_anti_dual[e5], right_anti_dual[e5], right_anti_dual[e3]]) * anti_wedge.group7().with_w(anti_wedge[e125]))
                + (anti_wedge.group5() * right_anti_dual.group3().www()).with_w(anti_wedge[e315] * right_anti_dual[e2])
                + (anti_wedge.group4().yzx() * right_anti_dual.group3().zxy()).with_w(anti_wedge[e235] * right_anti_dual[e1])
                + (right_anti_dual.group4().yzx() * anti_wedge.group3().zxy()).with_w(anti_wedge[e321] * right_anti_dual[e5])
                - (Simd32x4::from([anti_wedge[e5], anti_wedge[e5], anti_wedge[e5], anti_wedge[e15]]) * right_anti_dual.group7().with_w(right_anti_dual[e23]))
                - (right_anti_dual.group3().yzxx() * anti_wedge.group4().zxy().with_w(anti_wedge[e23]))
                - (anti_wedge.group8() * right_anti_dual.group1().www()).with_w(anti_wedge[e31] * right_anti_dual[e25])
                - (right_anti_dual.group4().zxy() * anti_wedge.group3().yzx()).with_w(anti_wedge[e12] * right_anti_dual[e35])
                - (anti_wedge.group1().yzx() * right_anti_dual.group6().zxy()).with_w(anti_wedge[e25] * right_anti_dual[e31])
                - (anti_wedge.group6().yzx() * right_anti_dual.group1().zxy()).with_w(anti_wedge[e35] * right_anti_dual[e12]),
            // e1234
            (anti_wedge[scalar] * right_anti_dual[e1234])
                + (anti_wedge[e1] * right_anti_dual[e423])
                + (anti_wedge[e2] * right_anti_dual[e431])
                + (anti_wedge[e3] * right_anti_dual[e412])
                + (anti_wedge[e4] * right_anti_dual[e321])
                + (anti_wedge[e1234] * right_anti_dual[scalar])
                - (anti_wedge[e41] * right_anti_dual[e23])
                - (anti_wedge[e42] * right_anti_dual[e31])
                - (anti_wedge[e43] * right_anti_dual[e12])
                - (anti_wedge[e23] * right_anti_dual[e41])
                - (anti_wedge[e31] * right_anti_dual[e42])
                - (anti_wedge[e12] * right_anti_dual[e43])
                - (anti_wedge[e321] * right_anti_dual[e4])
                - (anti_wedge[e423] * right_anti_dual[e1])
                - (anti_wedge[e431] * right_anti_dual[e2])
                - (anti_wedge[e412] * right_anti_dual[e3]),
        );
    }
}
impl RejectOrthogonallyFrom<Plane> for AntiScalar {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        3        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        2        5        0
    //  no simd        2       11        0
    fn reject_orthogonally_from(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from(self[e12345]) * other.group0());
        let right_anti_dual = AntiPlane::from_groups(/* e1, e2, e3, e5 */ other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]));
        return AntiScalar::from_groups(
            // e12345
            (right_anti_dual[e1] * anti_wedge[e4235]) + (right_anti_dual[e2] * anti_wedge[e4315]) + (right_anti_dual[e3] * anti_wedge[e4125]),
        );
    }
}
impl RejectOrthogonallyFrom<RoundPoint> for AntiScalar {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        7        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        4        9        0
    //  no simd        4       15        0
    fn reject_orthogonally_from(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = RoundPoint::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from(self[e12345]) * other.group0(), /* e5 */ self[e12345] * other[e5]);
        let right_anti_dual = Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            other.group0().xyz().with_w(other[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1234
            other[e4] * -1.0,
        );
        return AntiScalar::from_groups(
            // e12345
            (anti_wedge[e1] * right_anti_dual[e4235])
                + (anti_wedge[e2] * right_anti_dual[e4315])
                + (anti_wedge[e3] * right_anti_dual[e4125])
                + (anti_wedge[e4] * right_anti_dual[e3215])
                + (anti_wedge[e5] * right_anti_dual[e1234]),
        );
    }
}
impl RejectOrthogonallyFrom<Scalar> for AntiScalar {
    type Output = AntiScalar;
    fn reject_orthogonally_from(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ self[e12345] * f32::powi(other[scalar], 2));
    }
}
impl RejectOrthogonallyFrom<Sphere> for AntiScalar {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        6        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        4        8        0
    //  no simd        4       14        0
    fn reject_orthogonally_from(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * other.group0(),
            // e1234
            self[e12345] * other[e1234],
        );
        let right_anti_dual = RoundPoint::from_groups(
            // e1, e2, e3, e4
            other.group0().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e5
            other[e3215],
        );
        return AntiScalar::from_groups(
            // e12345
            (right_anti_dual[e1] * anti_wedge[e4235])
                + (right_anti_dual[e2] * anti_wedge[e4315])
                + (right_anti_dual[e3] * anti_wedge[e4125])
                + (right_anti_dual[e4] * anti_wedge[e3215])
                + (right_anti_dual[e5] * anti_wedge[e1234]),
        );
    }
}
impl RejectOrthogonallyFrom<VersorEven> for AntiScalar {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       23        0
    //    simd3        3        6        0
    //    simd4        6       13        0
    // Totals...
    // yes simd       24       42        0
    //  no simd       48       93        0
    fn reject_orthogonally_from(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(self[e12345]) * other.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(self[e12345]) * other.group1(),
            // e235, e315, e125, e5
            Simd32x4::from(self[e12345]) * other.group2(),
            // e1, e2, e3, e4
            Simd32x4::from(self[e12345]) * other.group3(),
        );
        let right_anti_dual = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e1234
            other.group2().xyz().with_w(other[e4]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            other.group3().xyz().with_w(other[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group0())
                + (anti_wedge.group3().wwwx() * right_anti_dual.group1().xyz().with_w(right_anti_dual[e4235]))
                + Simd32x3::from(0.0).with_w(
                    (anti_wedge[e2] * right_anti_dual[e4315]) + (anti_wedge[e3] * right_anti_dual[e4125]) + (anti_wedge[e4] * right_anti_dual[e3215])
                        - (anti_wedge[e431] * right_anti_dual[e25])
                        - (anti_wedge[e412] * right_anti_dual[e35])
                        - (anti_wedge[e415] * right_anti_dual[e23])
                        - (anti_wedge[e425] * right_anti_dual[e31])
                        - (anti_wedge[e435] * right_anti_dual[e12])
                        - (anti_wedge[e321] * right_anti_dual[e45])
                        - (anti_wedge[e235] * right_anti_dual[e41])
                        - (anti_wedge[e315] * right_anti_dual[e42])
                        - (anti_wedge[e125] * right_anti_dual[e43]),
                )
                + (anti_wedge.group3().zxy() * right_anti_dual.group0().yzx()).with_w(anti_wedge[e5] * right_anti_dual[e1234])
                - (anti_wedge.group3().yzx() * right_anti_dual.group0().zxy()).with_w(anti_wedge[e423] * right_anti_dual[e15]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (anti_wedge[e5] * right_anti_dual[e41]) + (anti_wedge[e4] * right_anti_dual[e15]),
                (anti_wedge[e5] * right_anti_dual[e42]) + (anti_wedge[e4] * right_anti_dual[e25]),
                (anti_wedge[e5] * right_anti_dual[e43]) + (anti_wedge[e4] * right_anti_dual[e35]),
                -(anti_wedge[e2] * right_anti_dual[e31]) - (anti_wedge[e3] * right_anti_dual[e12]),
            ]) + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1())
                - (anti_wedge.group3().xyzx() * right_anti_dual.group1().wwwx()),
            // e235, e315, e125, e5
            ((Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group1().xyz())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group2().xyz())
                + (anti_wedge.group3().yzx() * right_anti_dual.group2().zxy())
                - (anti_wedge.group3().zxy() * right_anti_dual.group2().yzx()))
            .with_w(anti_wedge[e5] * right_anti_dual[scalar]),
            // e1, e2, e3, e4
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group3(),
        );
    }
}
impl RejectOrthogonallyFrom<VersorOdd> for AntiScalar {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       23        0
    //    simd3        3        6        0
    //    simd4        6       13        0
    // Totals...
    // yes simd       24       42        0
    //  no simd       48       93        0
    fn reject_orthogonally_from(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(self[e12345]) * other.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(self[e12345]) * other.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(self[e12345]) * other.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * other.group3(),
        );
        let right_anti_dual = VersorEven::from_groups(
            // e423, e431, e412, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            other.group2().xyz().with_w(other[e3215]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e4
            other.group3().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group0())
                + (right_anti_dual.group3().wwwx() * anti_wedge.group1().xyz().with_w(anti_wedge[e4235]))
                + Simd32x3::from(0.0).with_w(
                    (right_anti_dual[e2] * anti_wedge[e4315]) + (right_anti_dual[e3] * anti_wedge[e4125]) + (right_anti_dual[e4] * anti_wedge[e3215])
                        - (right_anti_dual[e431] * anti_wedge[e25])
                        - (right_anti_dual[e412] * anti_wedge[e35])
                        - (right_anti_dual[e415] * anti_wedge[e23])
                        - (right_anti_dual[e425] * anti_wedge[e31])
                        - (right_anti_dual[e435] * anti_wedge[e12])
                        - (right_anti_dual[e321] * anti_wedge[e45])
                        - (right_anti_dual[e235] * anti_wedge[e41])
                        - (right_anti_dual[e315] * anti_wedge[e42])
                        - (right_anti_dual[e125] * anti_wedge[e43]),
                )
                + (right_anti_dual.group3().zxy() * anti_wedge.group0().yzx()).with_w(right_anti_dual[e5] * anti_wedge[e1234])
                - (right_anti_dual.group3().yzx() * anti_wedge.group0().zxy()).with_w(right_anti_dual[e423] * anti_wedge[e15]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (right_anti_dual[e5] * anti_wedge[e41]) + (right_anti_dual[e4] * anti_wedge[e15]),
                (right_anti_dual[e5] * anti_wedge[e42]) + (right_anti_dual[e4] * anti_wedge[e25]),
                (right_anti_dual[e5] * anti_wedge[e43]) + (right_anti_dual[e4] * anti_wedge[e35]),
                -(right_anti_dual[e2] * anti_wedge[e31]) - (right_anti_dual[e3] * anti_wedge[e12]),
            ]) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1())
                - (right_anti_dual.group3().xyzx() * anti_wedge.group1().wwwx()),
            // e235, e315, e125, e5
            ((Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group1().xyz())
                + (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group2().xyz())
                + (right_anti_dual.group3().yzx() * anti_wedge.group2().zxy())
                - (right_anti_dual.group3().zxy() * anti_wedge.group2().yzx()))
            .with_w(right_anti_dual[e5] * anti_wedge[scalar]),
            // e1, e2, e3, e4
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group3(),
        );
    }
}
impl std::ops::Div<reject_orthogonally_from> for Circle {
    type Output = reject_orthogonally_from_partial<Circle>;
    fn div(self, _rhs: reject_orthogonally_from) -> Self::Output {
        reject_orthogonally_from_partial(self)
    }
}
impl RejectOrthogonallyFrom<AntiCircleRotor> for Circle {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       10        0
    //    simd3        0        2        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        9       16        0
    //  no simd        9       32        0
    fn reject_orthogonally_from(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Scalar::from_groups(
            // scalar
            -(other[e41] * self[e235])
                - (other[e42] * self[e315])
                - (other[e43] * self[e125])
                - (other[e23] * self[e415])
                - (other[e31] * self[e425])
                - (other[e12] * self[e435])
                - (other[e45] * self[e321])
                - (other[e15] * self[e423])
                - (other[e25] * self[e431])
                - (other[e35] * self[e412]),
        );
        let right_anti_dual = CircleRotor::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e12345
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1(),
            // e235, e315, e125, e12345
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group2(),
        );
    }
}
impl RejectOrthogonallyFrom<AntiDipoleInversion> for Circle {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       23       41        0
    //    simd3        2        5        0
    //    simd4        5        6        0
    // Totals...
    // yes simd       30       52        0
    //  no simd       49       80        0
    fn reject_orthogonally_from(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = RoundPoint::from_groups(
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e415] * self[e321]) + (other[e321] * self[e415]) + (other[e315] * self[e412]),
                (other[e423] * self[e125]) + (other[e425] * self[e321]) + (other[e321] * self[e425]) + (other[e125] * self[e423]),
                (other[e431] * self[e235]) + (other[e435] * self[e321]) + (other[e321] * self[e435]) + (other[e235] * self[e431]),
                -(other[e412] * self[e435]) - (other[e415] * self[e423]) - (other[e425] * self[e431]) - (other[e435] * self[e412]),
            ]) - (other.group0().yzx() * self.group2().zxy()).with_w(other[e423] * self[e415])
                - (self.group0().yzx() * other.group2().zxy()).with_w(other[e431] * self[e425]),
            // e5
            -(other[e415] * self[e235])
                - (other[e425] * self[e315])
                - (other[e435] * self[e125])
                - (other[e235] * self[e415])
                - (other[e315] * self[e425])
                - (other[e125] * self[e435]),
        );
        let right_anti_dual = DipoleInversion::from_groups(
            // e41, e42, e43
            other.group0(),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            other.group3() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return CircleRotor::from_groups(
            // e423, e431, e412
            (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group1().xyz()) + (right_anti_dual.group0().yzx() * anti_wedge.group0().zxy())
                - (right_anti_dual.group0().zxy() * anti_wedge.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (right_anti_dual[e41] * anti_wedge[e5]) + (right_anti_dual[e15] * anti_wedge[e4]),
                (right_anti_dual[e42] * anti_wedge[e5]) + (right_anti_dual[e25] * anti_wedge[e4]),
                (right_anti_dual[e43] * anti_wedge[e5]) + (right_anti_dual[e35] * anti_wedge[e4]),
                -(right_anti_dual[e31] * anti_wedge[e2]) - (right_anti_dual[e12] * anti_wedge[e3]),
            ]) - (right_anti_dual.group1().wwwx() * anti_wedge.group0().xyzx()),
            // e235, e315, e125, e12345
            Simd32x4::from([
                right_anti_dual[e25] * anti_wedge[e3] * -1.0,
                right_anti_dual[e35] * anti_wedge[e1] * -1.0,
                right_anti_dual[e15] * anti_wedge[e2] * -1.0,
                (right_anti_dual[e4315] * anti_wedge[e2]) + (right_anti_dual[e4125] * anti_wedge[e3]) + (right_anti_dual[e3215] * anti_wedge[e4]),
            ]) + (Simd32x4::from(anti_wedge[e5]) * right_anti_dual.group1().xyz().with_w(right_anti_dual[e1234]))
                + (anti_wedge.group0().yzxx() * right_anti_dual.group2().zxy().with_w(right_anti_dual[e4235])),
        );
    }
}
impl RejectOrthogonallyFrom<AntiDualNum> for Circle {
    type Output = AntiFlatPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0       15        0
    fn reject_orthogonally_from(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let right_anti_dual = DualNum::from_groups(/* e5, e12345 */ other.group0());
        return AntiFlatPoint::from_groups(
            // e235, e315, e125, e321
            right_anti_dual.group0().xx().with_zw(right_anti_dual[e5], 0.0)
                * Simd32x3::from(1.0).with_w(0.0)
                * Simd32x3::from([other[e3215] * self[e423], other[e3215] * self[e431], other[e3215] * self[e412]]).with_w(0.0)
                * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
        );
    }
}
impl RejectOrthogonallyFrom<AntiFlatPoint> for Circle {
    type Output = Line;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        9        0
    //    simd3        1        5        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        6       15        0
    //  no simd       11       28        0
    fn reject_orthogonally_from(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiPlane::from_groups(
            // e1, e2, e3, e5
            Simd32x4::from([
                (other[e315] * self[e412]) + (other[e321] * self[e415]),
                (other[e125] * self[e423]) + (other[e321] * self[e425]),
                (other[e235] * self[e431]) + (other[e321] * self[e435]),
                -(other[e315] * self[e425]) - (other[e125] * self[e435]),
            ]) - (self.group0().yzx() * other.group0().zxy()).with_w(other[e235] * self[e415]),
        );
        let right_anti_dual = FlatPoint::from_groups(/* e15, e25, e35, e45 */ other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]));
        return Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(right_anti_dual[e45]) * anti_wedge.group0().xyz() * Simd32x3::from(-1.0),
            // e235, e315, e125
            (anti_wedge.group0().yzx() * right_anti_dual.group0().zxy()) - (anti_wedge.group0().zxy() * right_anti_dual.group0().yzx()),
        );
    }
}
impl RejectOrthogonallyFrom<AntiFlector> for Circle {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       12        0
    //    simd3        1        3        0
    //    simd4        1        4        0
    // Totals...
    // yes simd        8       19        0
    //  no simd       13       37        0
    fn reject_orthogonally_from(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiPlane::from_groups(
            // e1, e2, e3, e5
            Simd32x4::from([
                (other[e315] * self[e412]) + (other[e321] * self[e415]),
                (other[e125] * self[e423]) + (other[e321] * self[e425]),
                (other[e235] * self[e431]) + (other[e321] * self[e435]),
                -(other[e315] * self[e425]) - (other[e125] * self[e435]),
            ]) - (self.group0().yzx() * other.group0().zxy()).with_w(other[e235] * self[e415]),
        );
        let right_anti_dual = Flector::from_groups(
            // e15, e25, e35, e45
            other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([right_anti_dual[e45], right_anti_dual[e45], right_anti_dual[e45], 1.0])
                * anti_wedge
                    .group0()
                    .xyz()
                    .with_w((anti_wedge[e1] * right_anti_dual[e4235]) + (anti_wedge[e2] * right_anti_dual[e4315]) + (anti_wedge[e3] * right_anti_dual[e4125]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            ((anti_wedge.group0().yzx() * right_anti_dual.group0().zxy()) - (anti_wedge.group0().zxy() * right_anti_dual.group0().yzx())).with_w(0.0),
        );
    }
}
impl RejectOrthogonallyFrom<AntiLine> for Circle {
    type Output = Line;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5        6        0
    //    simd3        0        4        0
    // Totals...
    // yes simd        5       10        0
    //  no simd        5       18        0
    fn reject_orthogonally_from(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Scalar::from_groups(
            // scalar
            -(other[e23] * self[e415]) - (other[e31] * self[e425]) - (other[e12] * self[e435]) - (other[e15] * self[e423]) - (other[e25] * self[e431]) - (other[e35] * self[e412]),
        );
        let right_anti_dual = Line::from_groups(
            // e415, e425, e435
            other.group0() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group1() * Simd32x3::from(-1.0),
        );
        return Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e235, e315, e125
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group1(),
        );
    }
}
impl RejectOrthogonallyFrom<AntiMotor> for Circle {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       11        0
    //    simd3        1        2        0
    //    simd4        0        7        0
    // Totals...
    // yes simd        9       20        0
    //  no simd       11       45        0
    fn reject_orthogonally_from(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([other[e3215], other[e3215], other[e3215], 1.0])
                * self.group0().with_w(
                    -(other[e23] * self[e415])
                        - (other[e31] * self[e425])
                        - (other[e12] * self[e435])
                        - (other[e15] * self[e423])
                        - (other[e25] * self[e431])
                        - (other[e35] * self[e412]),
                ),
            // e15, e25, e35, e3215
            Simd32x3::from(1.0).with_w(0.0) * other.group1().www().with_w(0.0) * self.group1().xyz().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
        );
        let right_anti_dual = Motor::from_groups(
            // e415, e425, e435, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([right_anti_dual[e415], right_anti_dual[e425], right_anti_dual[e435], 1.0])
                * anti_wedge.group0().www().with_w(
                    (anti_wedge[scalar] * right_anti_dual[e12345])
                        - (anti_wedge[e23] * right_anti_dual[e415])
                        - (anti_wedge[e31] * right_anti_dual[e425])
                        - (anti_wedge[e12] * right_anti_dual[e435]),
                ),
            // e235, e315, e125, e5
            ((Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group1().xyz()) + (Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group0().xyz()))
                .with_w(anti_wedge[scalar] * right_anti_dual[e5]),
        );
    }
}
impl RejectOrthogonallyFrom<AntiScalar> for Circle {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd3        0        4        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        7        0
    //  no simd        0       21        0
    fn reject_orthogonally_from(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[e12345]) * self.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other[e12345]) * self.group1(),
            // e235, e315, e125
            Simd32x3::from(other[e12345]) * self.group2(),
        );
        let right_anti_dual = Scalar::from_groups(/* scalar */ other[e12345] * -1.0);
        return Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1(),
            // e235, e315, e125
            Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group2(),
        );
    }
}
impl RejectOrthogonallyFrom<Circle> for Circle {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       21       32        0
    //    simd3        4        8        0
    //    simd4        3        2        0
    // Totals...
    // yes simd       28       42        0
    //  no simd       45       64        0
    fn reject_orthogonally_from(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = RoundPoint::from_groups(
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e415] * self[e321]) + (other[e321] * self[e415]) + (other[e315] * self[e412]),
                (other[e423] * self[e125]) + (other[e425] * self[e321]) + (other[e321] * self[e425]) + (other[e125] * self[e423]),
                (other[e431] * self[e235]) + (other[e435] * self[e321]) + (other[e321] * self[e435]) + (other[e235] * self[e431]),
                -(other[e412] * self[e435]) - (other[e415] * self[e423]) - (other[e425] * self[e431]) - (other[e435] * self[e412]),
            ]) - (other.group0().yzx() * self.group2().zxy()).with_w(other[e423] * self[e415])
                - (other.group2().zxy() * self.group0().yzx()).with_w(other[e431] * self[e425]),
            // e5
            -(other[e415] * self[e235])
                - (other[e425] * self[e315])
                - (other[e435] * self[e125])
                - (other[e235] * self[e415])
                - (other[e315] * self[e425])
                - (other[e125] * self[e435]),
        );
        let right_anti_dual = Dipole::from_groups(
            // e41, e42, e43
            other.group0(),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35
            other.group2(),
        );
        return Circle::from_groups(
            // e423, e431, e412
            (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group1().xyz()) + (right_anti_dual.group0().yzx() * anti_wedge.group0().zxy())
                - (right_anti_dual.group0().zxy() * anti_wedge.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (right_anti_dual[e41] * anti_wedge[e5]) + (right_anti_dual[e15] * anti_wedge[e4]),
                (right_anti_dual[e42] * anti_wedge[e5]) + (right_anti_dual[e25] * anti_wedge[e4]),
                (right_anti_dual[e43] * anti_wedge[e5]) + (right_anti_dual[e35] * anti_wedge[e4]),
                -(right_anti_dual[e31] * anti_wedge[e2]) - (right_anti_dual[e12] * anti_wedge[e3]),
            ]) - (right_anti_dual.group1().wwwx() * anti_wedge.group0().xyzx()),
            // e235, e315, e125
            (Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group1().xyz()) + (right_anti_dual.group2().zxy() * anti_wedge.group0().yzx())
                - (right_anti_dual.group2().yzx() * anti_wedge.group0().zxy()),
        );
    }
}
impl RejectOrthogonallyFrom<CircleRotor> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       35       53        0
    //    simd3        3        9        0
    //    simd4        5        6        0
    // Totals...
    // yes simd       43       68        0
    //  no simd       64      104        0
    fn reject_orthogonally_from(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[e12345]) * self.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other[e12345]) * self.group1(),
            // e235, e315, e125, e4
            Simd32x4::from([other[e12345], other[e12345], other[e12345], 1.0])
                * self.group2().with_w(
                    -(self[e423] * other[e415])
                        - (self[e431] * other[e425])
                        - (self[e412] * other[e435])
                        - (self[e415] * other[e423])
                        - (self[e425] * other[e431])
                        - (self[e435] * other[e412]),
                ),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self[e412] * other[e315]) + (self[e415] * other[e321]) + (self[e321] * other[e415]) + (self[e315] * other[e412]),
                (self[e423] * other[e125]) + (self[e425] * other[e321]) + (self[e321] * other[e425]) + (self[e125] * other[e423]),
                (self[e431] * other[e235]) + (self[e435] * other[e321]) + (self[e321] * other[e435]) + (self[e235] * other[e431]),
                -(self[e415] * other[e235]) - (self[e425] * other[e315]) - (self[e435] * other[e125]) - (self[e125] * other[e435]),
            ]) - (self.group0().yzx() * other.group2().zxy()).with_w(self[e235] * other[e415])
                - (self.group2().zxy() * other.group0().yzx()).with_w(self[e315] * other[e425]),
        );
        let right_anti_dual = AntiCircleRotor::from_groups(
            // e41, e42, e43
            other.group0(),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, scalar
            other.group2() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (right_anti_dual[e42] * anti_wedge[e3]) + (right_anti_dual[e23] * anti_wedge[e4]) + (right_anti_dual[scalar] * anti_wedge[e423]),
                (right_anti_dual[e43] * anti_wedge[e1]) + (right_anti_dual[e31] * anti_wedge[e4]) + (right_anti_dual[scalar] * anti_wedge[e431]),
                (right_anti_dual[e41] * anti_wedge[e2]) + (right_anti_dual[e12] * anti_wedge[e4]) + (right_anti_dual[scalar] * anti_wedge[e412]),
                -(right_anti_dual[e42] * anti_wedge[e315])
                    - (right_anti_dual[e43] * anti_wedge[e125])
                    - (right_anti_dual[e23] * anti_wedge[e415])
                    - (right_anti_dual[e31] * anti_wedge[e425])
                    - (right_anti_dual[e12] * anti_wedge[e435])
                    - (right_anti_dual[e45] * anti_wedge[e321])
                    - (right_anti_dual[e15] * anti_wedge[e423])
                    - (right_anti_dual[e25] * anti_wedge[e431])
                    - (right_anti_dual[e35] * anti_wedge[e412]),
            ]) - (right_anti_dual.group0().zxy() * anti_wedge.group3().yzx()).with_w(right_anti_dual[e41] * anti_wedge[e235]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (right_anti_dual[e15] * anti_wedge[e4]) + (right_anti_dual[scalar] * anti_wedge[e415]),
                (right_anti_dual[e25] * anti_wedge[e4]) + (right_anti_dual[scalar] * anti_wedge[e425]),
                (right_anti_dual[e35] * anti_wedge[e4]) + (right_anti_dual[scalar] * anti_wedge[e435]),
                -(right_anti_dual[e31] * anti_wedge[e2]) - (right_anti_dual[e12] * anti_wedge[e3]),
            ]) + (right_anti_dual.group0() * anti_wedge.group3().www()).with_w(right_anti_dual[scalar] * anti_wedge[e321])
                - (right_anti_dual.group1().wwwx() * anti_wedge.group3().xyzx()),
            // e235, e315, e125, e5
            ((Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group2().xyz())
                + (Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group1().xyz())
                + (right_anti_dual.group2().zxy() * anti_wedge.group3().yzx())
                - (right_anti_dual.group2().yzx() * anti_wedge.group3().zxy()))
            .with_w(right_anti_dual[scalar] * anti_wedge[e5]),
            // e1, e2, e3, e4
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group3().xyz().with_w(anti_wedge[e4]),
        );
    }
}
impl RejectOrthogonallyFrom<Dipole> for Circle {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       10        0
    //    simd3        0        4        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        9       16        0
    //  no simd        9       30        0
    fn reject_orthogonally_from(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Scalar::from_groups(
            // scalar
            -(self[e423] * other[e15])
                - (self[e431] * other[e25])
                - (self[e412] * other[e35])
                - (self[e415] * other[e23])
                - (self[e425] * other[e31])
                - (self[e435] * other[e12])
                - (self[e321] * other[e45])
                - (self[e235] * other[e41])
                - (self[e315] * other[e42])
                - (self[e125] * other[e43]),
        );
        let right_anti_dual = Circle::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125
            other.group2() * Simd32x3::from(-1.0),
        );
        return Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1(),
            // e235, e315, e125
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group2(),
        );
    }
}
impl RejectOrthogonallyFrom<DipoleInversion> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       33       53        0
    //    simd3        5       11        0
    //    simd4        5        6        0
    // Totals...
    // yes simd       43       70        0
    //  no simd       68      110        0
    fn reject_orthogonally_from(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiCircleRotor::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other[e1234]) * self.group1().xyz()) + (self.group0().zxy() * other.group3().yzx()) - (self.group0().yzx() * other.group3().zxy()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e423] * other[e3215]) + (self[e235] * other[e1234]),
                (self[e431] * other[e3215]) + (self[e315] * other[e1234]),
                (self[e412] * other[e3215]) + (self[e125] * other[e1234]),
                -(self[e425] * other[e4315]) - (self[e435] * other[e4125]),
            ]) - (self.group1().wwwx() * other.group3().xyzx()),
            // e15, e25, e35, scalar
            Simd32x4::from([
                (self[e415] * other[e3215]) + (self[e315] * other[e4125]),
                (self[e425] * other[e3215]) + (self[e125] * other[e4235]),
                (self[e435] * other[e3215]) + (self[e235] * other[e4315]),
                -(self[e431] * other[e25])
                    - (self[e412] * other[e35])
                    - (self[e415] * other[e23])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e321] * other[e45])
                    - (self[e235] * other[e41])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
            ]) - (self.group2().zxy() * other.group3().yzx()).with_w(self[e423] * other[e15]),
        );
        let right_anti_dual = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e4
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group3() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (anti_wedge[e42] * right_anti_dual[e3]) + (anti_wedge[e23] * right_anti_dual[e4]) + (anti_wedge[scalar] * right_anti_dual[e423]),
                (anti_wedge[e43] * right_anti_dual[e1]) + (anti_wedge[e31] * right_anti_dual[e4]) + (anti_wedge[scalar] * right_anti_dual[e431]),
                (anti_wedge[e41] * right_anti_dual[e2]) + (anti_wedge[e12] * right_anti_dual[e4]) + (anti_wedge[scalar] * right_anti_dual[e412]),
                -(anti_wedge[e42] * right_anti_dual[e315])
                    - (anti_wedge[e43] * right_anti_dual[e125])
                    - (anti_wedge[e23] * right_anti_dual[e415])
                    - (anti_wedge[e31] * right_anti_dual[e425])
                    - (anti_wedge[e12] * right_anti_dual[e435])
                    - (anti_wedge[e45] * right_anti_dual[e321])
                    - (anti_wedge[e15] * right_anti_dual[e423])
                    - (anti_wedge[e25] * right_anti_dual[e431])
                    - (anti_wedge[e35] * right_anti_dual[e412]),
            ]) - (anti_wedge.group0().zxy() * right_anti_dual.group3().yzx()).with_w(anti_wedge[e41] * right_anti_dual[e235]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (anti_wedge[e15] * right_anti_dual[e4]) + (anti_wedge[scalar] * right_anti_dual[e415]),
                (anti_wedge[e25] * right_anti_dual[e4]) + (anti_wedge[scalar] * right_anti_dual[e425]),
                (anti_wedge[e35] * right_anti_dual[e4]) + (anti_wedge[scalar] * right_anti_dual[e435]),
                -(anti_wedge[e31] * right_anti_dual[e2]) - (anti_wedge[e12] * right_anti_dual[e3]),
            ]) + (anti_wedge.group0() * right_anti_dual.group3().www()).with_w(anti_wedge[scalar] * right_anti_dual[e321])
                - (anti_wedge.group1().wwwx() * right_anti_dual.group3().xyzx()),
            // e235, e315, e125, e5
            ((Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group2().xyz())
                + (Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group1().xyz())
                + (anti_wedge.group2().zxy() * right_anti_dual.group3().yzx())
                - (anti_wedge.group2().yzx() * right_anti_dual.group3().zxy()))
            .with_w(anti_wedge[scalar] * right_anti_dual[e5]),
            // e1, e2, e3, e4
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group3().xyz().with_w(right_anti_dual[e4]),
        );
    }
}
impl RejectOrthogonallyFrom<DualNum> for Circle {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd2        0        1        0
    //    simd3        0        4        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        7        0
    //  no simd        0       22        0
    fn reject_orthogonally_from(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[e12345]) * self.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other[e12345]) * self.group1(),
            // e235, e315, e125
            Simd32x3::from(other[e12345]) * self.group2(),
        );
        let right_anti_dual = AntiDualNum::from_groups(/* e3215, scalar */ other.group0() * Simd32x2::from(-1.0));
        return Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1(),
            // e235, e315, e125
            Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group2(),
        );
    }
}
impl RejectOrthogonallyFrom<FlatPoint> for Circle {
    type Output = AntiFlatPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        7        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        3        8        0
    //  no simd        3       11        0
    fn reject_orthogonally_from(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiFlatPoint::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(-(self[e423] * other[e15]) - (self[e431] * other[e25]) - (self[e412] * other[e35]) - (self[e321] * other[e45]))
                * Simd32x4::from([other[e15] * -1.0, other[e25] * -1.0, other[e35] * -1.0, other[e45]]),
        );
    }
}
impl RejectOrthogonallyFrom<Flector> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       26        0
    //    simd3        4        9        0
    //    simd4        5        7        0
    // Totals...
    // yes simd       18       42        0
    //  no simd       41       81        0
    fn reject_orthogonally_from(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiCircleRotor::from_groups(
            // e41, e42, e43
            (self.group0().zxy() * other.group1().yzx()) - (self.group0().yzx() * other.group1().zxy()),
            // e23, e31, e12, e45
            Simd32x4::from([
                self[e423] * other[e3215],
                self[e431] * other[e3215],
                self[e412] * other[e3215],
                -(self[e425] * other[e4315]) - (self[e435] * other[e4125]),
            ]) - (self.group1().wwwx() * other.group1().xyzx()),
            // e15, e25, e35, scalar
            Simd32x4::from([
                (self[e415] * other[e3215]) + (self[e315] * other[e4125]),
                (self[e425] * other[e3215]) + (self[e125] * other[e4235]),
                (self[e435] * other[e3215]) + (self[e235] * other[e4315]),
                -(self[e431] * other[e25]) - (self[e412] * other[e35]) - (self[e321] * other[e45]),
            ]) - (self.group2().zxy() * other.group1().yzx()).with_w(self[e423] * other[e15]),
        );
        let right_anti_dual = AntiFlector::from_groups(
            // e235, e315, e125, e321
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                anti_wedge[e42] * right_anti_dual[e3],
                anti_wedge[e43] * right_anti_dual[e1],
                anti_wedge[e41] * right_anti_dual[e2],
                -(anti_wedge[e42] * right_anti_dual[e315]) - (anti_wedge[e43] * right_anti_dual[e125]) - (anti_wedge[e45] * right_anti_dual[e321]),
            ]) - (anti_wedge.group0().zxy() * right_anti_dual.group1().yzx()).with_w(anti_wedge[e41] * right_anti_dual[e235]),
            // e415, e425, e435, e321
            Simd32x3::from(0.0).with_w(-(anti_wedge[e31] * right_anti_dual[e2]) - (anti_wedge[e12] * right_anti_dual[e3]))
                + (anti_wedge.group0() * right_anti_dual.group1().www()).with_w(anti_wedge[scalar] * right_anti_dual[e321])
                - (anti_wedge.group1().wwwx() * right_anti_dual.group1().xyzx()),
            // e235, e315, e125, e5
            ((Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0().xyz())
                + (Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group1().xyz())
                + (anti_wedge.group2().zxy() * right_anti_dual.group1().yzx())
                - (anti_wedge.group2().yzx() * right_anti_dual.group1().zxy()))
            .with_w(anti_wedge[scalar] * right_anti_dual[e5]),
            // e1, e2, e3, e4
            Simd32x3::from(1.0).with_w(0.0) * anti_wedge.group2().www().with_w(0.0) * right_anti_dual.group1().xyz().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
        );
    }
}
impl RejectOrthogonallyFrom<Line> for Circle {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       18        0
    //    simd3        2        5        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       14       24        0
    //  no simd       21       37        0
    fn reject_orthogonally_from(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = RoundPoint::from_groups(
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e412] * other[e315]) + (self[e321] * other[e415]),
                (self[e423] * other[e125]) + (self[e321] * other[e425]),
                (self[e431] * other[e235]) + (self[e321] * other[e435]),
                -(self[e431] * other[e425]) - (self[e412] * other[e435]),
            ]) - (self.group0().yzx() * other.group1().zxy()).with_w(self[e423] * other[e415]),
            // e5
            -(self[e415] * other[e235])
                - (self[e425] * other[e315])
                - (self[e435] * other[e125])
                - (self[e235] * other[e415])
                - (self[e315] * other[e425])
                - (self[e125] * other[e435]),
        );
        let right_anti_dual = AntiLine::from_groups(/* e23, e31, e12 */ other.group0(), /* e15, e25, e35 */ other.group1());
        return Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group0(),
            // e415, e425, e435, e321
            Simd32x4::from([anti_wedge[e4], anti_wedge[e4], anti_wedge[e4], 1.0])
                * right_anti_dual
                    .group1()
                    .with_w(-(right_anti_dual[e23] * anti_wedge[e1]) - (right_anti_dual[e31] * anti_wedge[e2]) - (right_anti_dual[e12] * anti_wedge[e3])),
            // e235, e315, e125
            (Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group0()) + (right_anti_dual.group1().zxy() * anti_wedge.group0().yzx())
                - (right_anti_dual.group1().yzx() * anti_wedge.group0().zxy()),
        );
    }
}
impl RejectOrthogonallyFrom<Motor> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       32        0
    //    simd3        3        7        0
    //    simd4        3        6        0
    // Totals...
    // yes simd       22       45        0
    //  no simd       37       77        0
    fn reject_orthogonally_from(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[e12345]) * self.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other[e12345]) * self.group1(),
            // e235, e315, e125, e4
            Simd32x4::from([other[e12345], other[e12345], other[e12345], 1.0])
                * self.group2().with_w(-(self[e423] * other[e415]) - (self[e431] * other[e425]) - (self[e412] * other[e435])),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self[e412] * other[e315]) + (self[e321] * other[e415]),
                (self[e423] * other[e125]) + (self[e321] * other[e425]),
                (self[e431] * other[e235]) + (self[e321] * other[e435]),
                -(self[e415] * other[e235]) - (self[e425] * other[e315]) - (self[e435] * other[e125]) - (self[e315] * other[e425]) - (self[e125] * other[e435]),
            ]) - (self.group0().yzx() * other.group1().zxy()).with_w(self[e235] * other[e415]),
        );
        let right_anti_dual = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e3215
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                anti_wedge[e4] * right_anti_dual[e23],
                anti_wedge[e4] * right_anti_dual[e31],
                anti_wedge[e4] * right_anti_dual[e12],
                -(anti_wedge[e423] * right_anti_dual[e15])
                    - (anti_wedge[e431] * right_anti_dual[e25])
                    - (anti_wedge[e412] * right_anti_dual[e35])
                    - (anti_wedge[e415] * right_anti_dual[e23])
                    - (anti_wedge[e425] * right_anti_dual[e31])
                    - (anti_wedge[e435] * right_anti_dual[e12]),
            ]) + (anti_wedge.group0() * right_anti_dual.group0().www()).with_w(anti_wedge[e4] * right_anti_dual[e3215]),
            // e415, e425, e435, e321
            Simd32x4::from([
                anti_wedge[e4] * right_anti_dual[e15],
                anti_wedge[e4] * right_anti_dual[e25],
                anti_wedge[e4] * right_anti_dual[e35],
                -(anti_wedge[e1] * right_anti_dual[e23]) - (anti_wedge[e2] * right_anti_dual[e31]) - (anti_wedge[e3] * right_anti_dual[e12]),
            ]) + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1()),
            // e235, e315, e125, e5
            ((Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group0().xyz())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group2().xyz())
                + (anti_wedge.group3().yzx() * right_anti_dual.group1().zxy())
                - (anti_wedge.group3().zxy() * right_anti_dual.group1().yzx()))
            .with_w(anti_wedge[e5] * right_anti_dual[scalar]),
            // e1, e2, e3, e4
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group3().xyz().with_w(anti_wedge[e4]),
        );
    }
}
impl RejectOrthogonallyFrom<MultiVector> for Circle {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      101      135        0
    //    simd2        0        1        0
    //    simd3       24       44        0
    //    simd4       23       19        0
    // Totals...
    // yes simd      148      199        0
    //  no simd      265      345        0
    fn reject_orthogonally_from(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                -(self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35])
                    - (self[e415] * other[e23])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e321] * other[e45])
                    - (self[e235] * other[e41])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e412] * other[e315]) + (self[e415] * other[e321]) + (self[e321] * other[e415]) + (self[e315] * other[e412]),
                (self[e423] * other[e125]) + (self[e425] * other[e321]) + (self[e321] * other[e425]) + (self[e125] * other[e423]),
                (self[e431] * other[e235]) + (self[e435] * other[e321]) + (self[e321] * other[e435]) + (self[e235] * other[e431]),
                -(self[e412] * other[e435]) - (self[e415] * other[e423]) - (self[e425] * other[e431]) - (self[e435] * other[e412]),
            ]) - (self.group0().yzx() * other.group8().zxy()).with_w(self[e423] * other[e415])
                - (self.group2().zxy() * other.group7().yzx()).with_w(self[e431] * other[e425]),
            // e5
            -(self[e415] * other[e235])
                - (self[e425] * other[e315])
                - (self[e435] * other[e125])
                - (self[e235] * other[e415])
                - (self[e315] * other[e425])
                - (self[e125] * other[e435]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e415] * other[e3215]) + (self[e315] * other[e4125]),
                (self[e425] * other[e3215]) + (self[e125] * other[e4235]),
                (self[e435] * other[e3215]) + (self[e235] * other[e4315]),
                -(self[e425] * other[e4315]) - (self[e435] * other[e4125]),
            ]) - (other.group9().yzxx() * self.group2().zxy().with_w(self[e415])),
            // e41, e42, e43
            (Simd32x3::from(other[e1234]) * self.group1().xyz()) + (self.group0().zxy() * other.group9().yzx()) - (self.group0().yzx() * other.group9().zxy()),
            // e23, e31, e12
            (Simd32x3::from(other[e3215]) * self.group0()) + (Simd32x3::from(other[e1234]) * self.group2()) - (Simd32x3::from(self[e321]) * other.group9().xyz()),
            // e415, e425, e435, e321
            Simd32x4::from(other[e12345]) * self.group1(),
            // e423, e431, e412
            Simd32x3::from(other[e12345]) * self.group0(),
            // e235, e315, e125
            Simd32x3::from(other[e12345]) * self.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(0.0),
            // e1234
            0.0,
        );
        let right_anti_dual = MultiVector::from_groups(
            // scalar, e12345
            other.group0().yx() * Simd32x2::from([-1.0, 1.0]),
            // e1, e2, e3, e4
            other.group9().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e5
            other[e3215],
            // e15, e25, e35, e45
            other.group8().with_w(other[e321] * -1.0),
            // e41, e42, e43
            other.group7(),
            // e23, e31, e12
            other.group6().xyz(),
            // e415, e425, e435, e321
            other.group5().with_w(other[e45]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e423, e431, e412
            other.group4() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group3().xyz() * Simd32x3::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group1().xyz().with_w(other[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1234
            other[e4] * -1.0,
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                anti_wedge[scalar] * right_anti_dual[scalar],
                (anti_wedge[scalar] * right_anti_dual[e12345])
                    + (anti_wedge[e12345] * right_anti_dual[scalar])
                    + (anti_wedge[e1] * right_anti_dual[e4235])
                    + (anti_wedge[e2] * right_anti_dual[e4315])
                    + (anti_wedge[e3] * right_anti_dual[e4125])
                    + (anti_wedge[e4] * right_anti_dual[e3215])
                    + (anti_wedge[e5] * right_anti_dual[e1234])
                    + (anti_wedge[e4235] * right_anti_dual[e1])
                    + (anti_wedge[e4315] * right_anti_dual[e2])
                    + (anti_wedge[e4125] * right_anti_dual[e3])
                    + (anti_wedge[e3215] * right_anti_dual[e4])
                    + (anti_wedge[e1234] * right_anti_dual[e5])
                    - (anti_wedge[e15] * right_anti_dual[e423])
                    - (anti_wedge[e25] * right_anti_dual[e431])
                    - (anti_wedge[e35] * right_anti_dual[e412])
                    - (anti_wedge[e45] * right_anti_dual[e321])
                    - (anti_wedge[e41] * right_anti_dual[e235])
                    - (anti_wedge[e42] * right_anti_dual[e315])
                    - (anti_wedge[e43] * right_anti_dual[e125])
                    - (anti_wedge[e23] * right_anti_dual[e415])
                    - (anti_wedge[e31] * right_anti_dual[e425])
                    - (anti_wedge[e12] * right_anti_dual[e435])
                    - (anti_wedge[e415] * right_anti_dual[e23])
                    - (anti_wedge[e425] * right_anti_dual[e31])
                    - (anti_wedge[e435] * right_anti_dual[e12])
                    - (anti_wedge[e321] * right_anti_dual[e45])
                    - (anti_wedge[e423] * right_anti_dual[e15])
                    - (anti_wedge[e431] * right_anti_dual[e25])
                    - (anti_wedge[e412] * right_anti_dual[e35])
                    - (anti_wedge[e235] * right_anti_dual[e41])
                    - (anti_wedge[e315] * right_anti_dual[e42])
                    - (anti_wedge[e125] * right_anti_dual[e43]),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1()) + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1()),
            // e5
            (anti_wedge[scalar] * right_anti_dual[e5]) + (anti_wedge[e5] * right_anti_dual[scalar]),
            // e15, e25, e35, e45
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group3())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group3())
                + (Simd32x4::from(right_anti_dual[e5]) * anti_wedge.group1())
                - (Simd32x4::from(anti_wedge[e5]) * right_anti_dual.group1()),
            // e41, e42, e43
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group4())
                + (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group1().xyz())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group4())
                - (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group1().xyz()),
            // e23, e31, e12
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group5())
                + (anti_wedge.group1().yzx() * right_anti_dual.group1().zxy())
                - (anti_wedge.group1().zxy() * right_anti_dual.group1().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (anti_wedge[e4] * right_anti_dual[e15])
                    + (anti_wedge[e5] * right_anti_dual[e41])
                    + (anti_wedge[e15] * right_anti_dual[e4])
                    + (anti_wedge[e41] * right_anti_dual[e5]),
                (anti_wedge[e4] * right_anti_dual[e25])
                    + (anti_wedge[e5] * right_anti_dual[e42])
                    + (anti_wedge[e25] * right_anti_dual[e4])
                    + (anti_wedge[e42] * right_anti_dual[e5]),
                (anti_wedge[e4] * right_anti_dual[e35])
                    + (anti_wedge[e5] * right_anti_dual[e43])
                    + (anti_wedge[e35] * right_anti_dual[e4])
                    + (anti_wedge[e43] * right_anti_dual[e5]),
                -(anti_wedge[e1] * right_anti_dual[e23])
                    - (anti_wedge[e2] * right_anti_dual[e31])
                    - (anti_wedge[e3] * right_anti_dual[e12])
                    - (anti_wedge[e12] * right_anti_dual[e3]),
            ]) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group6())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group6())
                - (right_anti_dual.group1().xyzy() * anti_wedge.group3().www().with_w(anti_wedge[e31]))
                - (right_anti_dual.group3().www() * anti_wedge.group1().xyz()).with_w(anti_wedge[e23] * right_anti_dual[e1]),
            // e423, e431, e412
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group7())
                + (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group7())
                + (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group5())
                + (anti_wedge.group4().yzx() * right_anti_dual.group1().zxy())
                + (right_anti_dual.group4().yzx() * anti_wedge.group1().zxy())
                - (anti_wedge.group4().zxy() * right_anti_dual.group1().yzx())
                - (right_anti_dual.group4().zxy() * anti_wedge.group1().yzx()),
            // e235, e315, e125
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group8())
                + (Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group8())
                + (Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group5())
                + (anti_wedge.group1().yzx() * right_anti_dual.group3().zxy())
                + (anti_wedge.group3().zxy() * right_anti_dual.group1().yzx())
                - (anti_wedge.group1().zxy() * right_anti_dual.group3().yzx())
                - (anti_wedge.group3().yzx() * right_anti_dual.group1().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (anti_wedge[e3] * right_anti_dual[e425])
                    + (anti_wedge[e4] * right_anti_dual[e235])
                    + (anti_wedge[e45] * right_anti_dual[e23])
                    + (anti_wedge[e435] * right_anti_dual[e2]),
                (anti_wedge[e1] * right_anti_dual[e435])
                    + (anti_wedge[e4] * right_anti_dual[e315])
                    + (anti_wedge[e45] * right_anti_dual[e31])
                    + (anti_wedge[e415] * right_anti_dual[e3]),
                (anti_wedge[e2] * right_anti_dual[e415])
                    + (anti_wedge[e4] * right_anti_dual[e125])
                    + (anti_wedge[e45] * right_anti_dual[e12])
                    + (anti_wedge[e425] * right_anti_dual[e1]),
                -(anti_wedge[e1] * right_anti_dual[e235])
                    - (anti_wedge[e2] * right_anti_dual[e315])
                    - (anti_wedge[e3] * right_anti_dual[e125])
                    - (anti_wedge[e5] * right_anti_dual[e321]),
            ]) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group9())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group9())
                + (Simd32x4::from([right_anti_dual[e5], right_anti_dual[e5], right_anti_dual[e5], right_anti_dual[e3]]) * anti_wedge.group7().with_w(anti_wedge[e125]))
                + (anti_wedge.group5() * right_anti_dual.group3().www()).with_w(anti_wedge[e315] * right_anti_dual[e2])
                + (anti_wedge.group4().yzx() * right_anti_dual.group3().zxy()).with_w(anti_wedge[e235] * right_anti_dual[e1])
                + (right_anti_dual.group4().yzx() * anti_wedge.group3().zxy()).with_w(anti_wedge[e321] * right_anti_dual[e5])
                - (Simd32x4::from([anti_wedge[e5], anti_wedge[e5], anti_wedge[e5], anti_wedge[e15]]) * right_anti_dual.group7().with_w(right_anti_dual[e23]))
                - (right_anti_dual.group3().yzxx() * anti_wedge.group4().zxy().with_w(anti_wedge[e23]))
                - (anti_wedge.group8() * right_anti_dual.group1().www()).with_w(anti_wedge[e31] * right_anti_dual[e25])
                - (right_anti_dual.group4().zxy() * anti_wedge.group3().yzx()).with_w(anti_wedge[e12] * right_anti_dual[e35])
                - (anti_wedge.group1().yzx() * right_anti_dual.group6().zxy()).with_w(anti_wedge[e25] * right_anti_dual[e31])
                - (anti_wedge.group6().yzx() * right_anti_dual.group1().zxy()).with_w(anti_wedge[e35] * right_anti_dual[e12]),
            // e1234
            (anti_wedge[scalar] * right_anti_dual[e1234])
                + (anti_wedge[e1] * right_anti_dual[e423])
                + (anti_wedge[e2] * right_anti_dual[e431])
                + (anti_wedge[e3] * right_anti_dual[e412])
                + (anti_wedge[e4] * right_anti_dual[e321])
                + (anti_wedge[e1234] * right_anti_dual[scalar])
                - (anti_wedge[e41] * right_anti_dual[e23])
                - (anti_wedge[e42] * right_anti_dual[e31])
                - (anti_wedge[e43] * right_anti_dual[e12])
                - (anti_wedge[e23] * right_anti_dual[e41])
                - (anti_wedge[e31] * right_anti_dual[e42])
                - (anti_wedge[e12] * right_anti_dual[e43])
                - (anti_wedge[e321] * right_anti_dual[e4])
                - (anti_wedge[e423] * right_anti_dual[e1])
                - (anti_wedge[e431] * right_anti_dual[e2])
                - (anti_wedge[e412] * right_anti_dual[e3]),
        );
    }
}
impl RejectOrthogonallyFrom<Plane> for Circle {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2       10        0
    //    simd3        6       10        0
    //    simd4        2        3        0
    // Totals...
    // yes simd       10       23        0
    //  no simd       28       52        0
    fn reject_orthogonally_from(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Dipole::from_groups(
            // e41, e42, e43
            (self.group0().zxy() * other.group0().yzx()) - (self.group0().yzx() * other.group0().zxy()),
            // e23, e31, e12, e45
            Simd32x4::from([
                self[e423] * other[e3215],
                self[e431] * other[e3215],
                self[e412] * other[e3215],
                -(self[e425] * other[e4315]) - (self[e435] * other[e4125]),
            ]) - (self.group1().wwwx() * other.group0().xyzx()),
            // e15, e25, e35
            (Simd32x3::from(other[e3215]) * self.group1().xyz()) + (self.group2().yzx() * other.group0().zxy()) - (self.group2().zxy() * other.group0().yzx()),
        );
        let right_anti_dual = AntiPlane::from_groups(/* e1, e2, e3, e5 */ other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]));
        return Circle::from_groups(
            // e423, e431, e412
            (anti_wedge.group0().yzx() * right_anti_dual.group0().zxy()) - (anti_wedge.group0().zxy() * right_anti_dual.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                right_anti_dual[e5] * anti_wedge[e41],
                right_anti_dual[e5] * anti_wedge[e42],
                right_anti_dual[e5] * anti_wedge[e43],
                -(right_anti_dual[e2] * anti_wedge[e31]) - (right_anti_dual[e3] * anti_wedge[e12]),
            ]) - (right_anti_dual.group0().xyzx() * anti_wedge.group1().wwwx()),
            // e235, e315, e125
            (Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group1().xyz()) + (anti_wedge.group2().zxy() * right_anti_dual.group0().yzx())
                - (anti_wedge.group2().yzx() * right_anti_dual.group0().zxy()),
        );
    }
}
impl RejectOrthogonallyFrom<Sphere> for Circle {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       16        0
    //    simd3        8       12        0
    //    simd4        2        3        0
    // Totals...
    // yes simd       18       31        0
    //  no simd       40       64        0
    fn reject_orthogonally_from(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Dipole::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other[e1234]) * self.group1().xyz()) + (self.group0().zxy() * other.group0().yzx()) - (self.group0().yzx() * other.group0().zxy()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e423] * other[e3215]) + (self[e235] * other[e1234]),
                (self[e431] * other[e3215]) + (self[e315] * other[e1234]),
                (self[e412] * other[e3215]) + (self[e125] * other[e1234]),
                -(self[e425] * other[e4315]) - (self[e435] * other[e4125]),
            ]) - (self.group1().wwwx() * other.group0().xyzx()),
            // e15, e25, e35
            (Simd32x3::from(other[e3215]) * self.group1().xyz()) + (self.group2().yzx() * other.group0().zxy()) - (self.group2().zxy() * other.group0().yzx()),
        );
        let right_anti_dual = RoundPoint::from_groups(
            // e1, e2, e3, e4
            other.group0().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e5
            other[e3215],
        );
        return Circle::from_groups(
            // e423, e431, e412
            (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group1().xyz()) + (anti_wedge.group0().yzx() * right_anti_dual.group0().zxy())
                - (anti_wedge.group0().zxy() * right_anti_dual.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (anti_wedge[e41] * right_anti_dual[e5]) + (anti_wedge[e15] * right_anti_dual[e4]),
                (anti_wedge[e42] * right_anti_dual[e5]) + (anti_wedge[e25] * right_anti_dual[e4]),
                (anti_wedge[e43] * right_anti_dual[e5]) + (anti_wedge[e35] * right_anti_dual[e4]),
                -(anti_wedge[e31] * right_anti_dual[e2]) - (anti_wedge[e12] * right_anti_dual[e3]),
            ]) - (anti_wedge.group1().wwwx() * right_anti_dual.group0().xyzx()),
            // e235, e315, e125
            (Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group1().xyz()) + (anti_wedge.group2().zxy() * right_anti_dual.group0().yzx())
                - (anti_wedge.group2().yzx() * right_anti_dual.group0().zxy()),
        );
    }
}
impl RejectOrthogonallyFrom<VersorEven> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       31       47        0
    //    simd3        3       10        0
    //    simd4        8       10        0
    // Totals...
    // yes simd       42       67        0
    //  no simd       72      117        0
    fn reject_orthogonally_from(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[e12345]) * self.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other[e12345]) * self.group1(),
            // e235, e315, e125, e4
            Simd32x4::from([other[e12345], other[e12345], other[e12345], 1.0])
                * self.group2().with_w(
                    -(self[e423] * other[e415])
                        - (self[e431] * other[e425])
                        - (self[e412] * other[e435])
                        - (self[e415] * other[e423])
                        - (self[e425] * other[e431])
                        - (self[e435] * other[e412]),
                ),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self[e412] * other[e315]) + (self[e415] * other[e321]) + (self[e321] * other[e415]) + (self[e315] * other[e412]),
                (self[e423] * other[e125]) + (self[e425] * other[e321]) + (self[e321] * other[e425]) + (self[e125] * other[e423]),
                (self[e431] * other[e235]) + (self[e435] * other[e321]) + (self[e321] * other[e435]) + (self[e235] * other[e431]),
                -(self[e415] * other[e235]) - (self[e425] * other[e315]) - (self[e435] * other[e125]) - (self[e125] * other[e435]),
            ]) - (self.group0().yzx() * other.group2().zxy()).with_w(self[e235] * other[e415])
                - (self.group2().zxy() * other.group0().yzx()).with_w(self[e315] * other[e425]),
        );
        let right_anti_dual = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e1234
            other.group2().xyz().with_w(other[e4]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            other.group3().xyz().with_w(other[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (anti_wedge.group3().zxyy() * right_anti_dual.group0().yzx().with_w(right_anti_dual[e4315]))
                + Simd32x3::from(0.0).with_w(
                    (anti_wedge[e3] * right_anti_dual[e4125]) + (anti_wedge[e5] * right_anti_dual[e1234])
                        - (anti_wedge[e431] * right_anti_dual[e25])
                        - (anti_wedge[e412] * right_anti_dual[e35])
                        - (anti_wedge[e415] * right_anti_dual[e23])
                        - (anti_wedge[e425] * right_anti_dual[e31])
                        - (anti_wedge[e435] * right_anti_dual[e12])
                        - (anti_wedge[e321] * right_anti_dual[e45])
                        - (anti_wedge[e235] * right_anti_dual[e41])
                        - (anti_wedge[e315] * right_anti_dual[e42])
                        - (anti_wedge[e125] * right_anti_dual[e43]),
                )
                + (anti_wedge.group0() * right_anti_dual.group0().www()).with_w(anti_wedge[e4] * right_anti_dual[e3215])
                + (anti_wedge.group2().www() * right_anti_dual.group1().xyz()).with_w(anti_wedge[e1] * right_anti_dual[e4235])
                - (anti_wedge.group3().yzx() * right_anti_dual.group0().zxy()).with_w(anti_wedge[e423] * right_anti_dual[e15]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (anti_wedge[e4] * right_anti_dual[e15]) + (anti_wedge[e5] * right_anti_dual[e41]),
                (anti_wedge[e4] * right_anti_dual[e25]) + (anti_wedge[e5] * right_anti_dual[e42]),
                (anti_wedge[e4] * right_anti_dual[e35]) + (anti_wedge[e5] * right_anti_dual[e43]),
                -(anti_wedge[e2] * right_anti_dual[e31]) - (anti_wedge[e3] * right_anti_dual[e12]),
            ]) + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1())
                - (anti_wedge.group3().xyzx() * right_anti_dual.group1().wwwx()),
            // e235, e315, e125, e5
            ((Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group1().xyz())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group2().xyz())
                + (anti_wedge.group3().yzx() * right_anti_dual.group2().zxy())
                - (anti_wedge.group3().zxy() * right_anti_dual.group2().yzx()))
            .with_w(anti_wedge[e5] * right_anti_dual[scalar]),
            // e1, e2, e3, e4
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group3().xyz().with_w(anti_wedge[e4]),
        );
    }
}
impl RejectOrthogonallyFrom<VersorOdd> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       30       51        0
    //    simd3        5       11        0
    //    simd4        6        7        0
    // Totals...
    // yes simd       41       69        0
    //  no simd       69      112        0
    fn reject_orthogonally_from(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiCircleRotor::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other[e1234]) * self.group1().xyz()) + (self.group0().zxy() * other.group3().yzx()) - (self.group0().yzx() * other.group3().zxy()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e423] * other[e3215]) + (self[e235] * other[e1234]),
                (self[e431] * other[e3215]) + (self[e315] * other[e1234]),
                (self[e412] * other[e3215]) + (self[e125] * other[e1234]),
                -(self[e425] * other[e4315]) - (self[e435] * other[e4125]),
            ]) - (self.group1().wwwx() * other.group3().xyzx()),
            // e15, e25, e35, scalar
            Simd32x4::from([
                (self[e415] * other[e3215]) + (self[e315] * other[e4125]),
                (self[e425] * other[e3215]) + (self[e125] * other[e4235]),
                (self[e435] * other[e3215]) + (self[e235] * other[e4315]),
                -(self[e431] * other[e25])
                    - (self[e412] * other[e35])
                    - (self[e415] * other[e23])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e321] * other[e45])
                    - (self[e235] * other[e41])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
            ]) - (self.group2().zxy() * other.group3().yzx()).with_w(self[e423] * other[e15]),
        );
        let right_anti_dual = VersorEven::from_groups(
            // e423, e431, e412, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            other.group2().xyz().with_w(other[e3215]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e4
            other.group3().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (anti_wedge[e23] * right_anti_dual[e4]) + (anti_wedge[scalar] * right_anti_dual[e423]),
                (anti_wedge[e31] * right_anti_dual[e4]) + (anti_wedge[scalar] * right_anti_dual[e431]),
                (anti_wedge[e12] * right_anti_dual[e4]) + (anti_wedge[scalar] * right_anti_dual[e412]),
                -(anti_wedge[e42] * right_anti_dual[e315])
                    - (anti_wedge[e43] * right_anti_dual[e125])
                    - (anti_wedge[e23] * right_anti_dual[e415])
                    - (anti_wedge[e31] * right_anti_dual[e425])
                    - (anti_wedge[e12] * right_anti_dual[e435])
                    - (anti_wedge[e45] * right_anti_dual[e321])
                    - (anti_wedge[e15] * right_anti_dual[e423])
                    - (anti_wedge[e25] * right_anti_dual[e431])
                    - (anti_wedge[e35] * right_anti_dual[e412]),
            ]) + (anti_wedge.group0().yzx() * right_anti_dual.group3().zxy()).with_w(anti_wedge[scalar] * right_anti_dual[e12345])
                - (anti_wedge.group0().zxy() * right_anti_dual.group3().yzx()).with_w(anti_wedge[e41] * right_anti_dual[e235]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (anti_wedge[e15] * right_anti_dual[e4]) + (anti_wedge[scalar] * right_anti_dual[e415]),
                (anti_wedge[e25] * right_anti_dual[e4]) + (anti_wedge[scalar] * right_anti_dual[e425]),
                (anti_wedge[e35] * right_anti_dual[e4]) + (anti_wedge[scalar] * right_anti_dual[e435]),
                -(anti_wedge[e31] * right_anti_dual[e2]) - (anti_wedge[e12] * right_anti_dual[e3]),
            ]) + (anti_wedge.group0() * right_anti_dual.group2().www()).with_w(anti_wedge[scalar] * right_anti_dual[e321])
                - (anti_wedge.group1().wwwx() * right_anti_dual.group3().xyzx()),
            // e235, e315, e125, e5
            ((Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group2().xyz())
                + (Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group1().xyz())
                + (anti_wedge.group2().zxy() * right_anti_dual.group3().yzx())
                - (anti_wedge.group2().yzx() * right_anti_dual.group3().zxy()))
            .with_w(anti_wedge[scalar] * right_anti_dual[e5]),
            // e1, e2, e3, e4
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group3(),
        );
    }
}
impl std::ops::Div<reject_orthogonally_from> for CircleRotor {
    type Output = reject_orthogonally_from_partial<CircleRotor>;
    fn div(self, _rhs: reject_orthogonally_from) -> Self::Output {
        reject_orthogonally_from_partial(self)
    }
}
impl RejectOrthogonallyFrom<AntiCircleRotor> for CircleRotor {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       22        0
    //    simd3        0        3        0
    //    simd4        0        6        0
    // Totals...
    // yes simd       20       31        0
    //  no simd       20       55        0
    fn reject_orthogonally_from(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[e12345]) * other.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(self[e12345]) * other.group1(),
            // e15, e25, e35, scalar
            Simd32x4::from([self[e12345], self[e12345], self[e12345], 1.0])
                * other.group2().xyz().with_w(
                    (other[scalar] * self[e12345])
                        - (other[e41] * self[e235])
                        - (other[e42] * self[e315])
                        - (other[e43] * self[e125])
                        - (other[e23] * self[e415])
                        - (other[e31] * self[e425])
                        - (other[e12] * self[e435])
                        - (other[e45] * self[e321])
                        - (other[e15] * self[e423])
                        - (other[e25] * self[e431])
                        - (other[e35] * self[e412]),
                ),
        );
        let right_anti_dual = CircleRotor::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e12345
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1(),
            // e235, e315, e125, e12345
            Simd32x4::from([right_anti_dual[e235], right_anti_dual[e315], right_anti_dual[e125], 1.0])
                * anti_wedge.group2().www().with_w(
                    (anti_wedge[scalar] * right_anti_dual[e12345])
                        - (anti_wedge[e41] * right_anti_dual[e235])
                        - (anti_wedge[e42] * right_anti_dual[e315])
                        - (anti_wedge[e43] * right_anti_dual[e125])
                        - (anti_wedge[e23] * right_anti_dual[e415])
                        - (anti_wedge[e31] * right_anti_dual[e425])
                        - (anti_wedge[e12] * right_anti_dual[e435])
                        - (anti_wedge[e45] * right_anti_dual[e321])
                        - (anti_wedge[e15] * right_anti_dual[e423])
                        - (anti_wedge[e25] * right_anti_dual[e431])
                        - (anti_wedge[e35] * right_anti_dual[e412]),
                ),
        );
    }
}
impl RejectOrthogonallyFrom<AntiDipoleInversion> for CircleRotor {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       33       45        0
    //    simd3        2        6        0
    //    simd4        7       10        0
    // Totals...
    // yes simd       42       61        0
    //  no simd       67      103        0
    fn reject_orthogonally_from(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[e12345]) * other.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(self[e12345]) * other.group1(),
            // e235, e315, e125, e4
            Simd32x4::from([self[e12345], self[e12345], self[e12345], 1.0])
                * other.group2().xyz().with_w(
                    (other[e4] * self[e12345])
                        - (other[e423] * self[e415])
                        - (other[e431] * self[e425])
                        - (other[e412] * self[e435])
                        - (other[e415] * self[e423])
                        - (other[e425] * self[e431])
                        - (other[e435] * self[e412]),
                ),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other[e415] * self[e321]) + (other[e321] * self[e415]) + (other[e315] * self[e412]) + (other[e1] * self[e12345]),
                (other[e425] * self[e321]) + (other[e321] * self[e425]) + (other[e125] * self[e423]) + (other[e2] * self[e12345]),
                (other[e435] * self[e321]) + (other[e321] * self[e435]) + (other[e235] * self[e431]) + (other[e3] * self[e12345]),
                -(other[e435] * self[e125]) - (other[e235] * self[e415]) - (other[e315] * self[e425]) - (other[e125] * self[e435]),
            ]) + (self.group2().yzxw() * other.group0().zxy().with_w(other[e5]))
                - (self.group2().zxyx() * other.group0().yzx().with_w(other[e415]))
                - (self.group0().yzx() * other.group2().zxy()).with_w(other[e425] * self[e315]),
        );
        let right_anti_dual = DipoleInversion::from_groups(
            // e41, e42, e43
            other.group0(),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            other.group3() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return CircleRotor::from_groups(
            // e423, e431, e412
            (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group1().xyz()) + (right_anti_dual.group0().yzx() * anti_wedge.group3().zxy())
                - (right_anti_dual.group0().zxy() * anti_wedge.group3().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (anti_wedge[e4] * right_anti_dual[e15]) + (anti_wedge[e5] * right_anti_dual[e41]),
                (anti_wedge[e4] * right_anti_dual[e25]) + (anti_wedge[e5] * right_anti_dual[e42]),
                (anti_wedge[e4] * right_anti_dual[e35]) + (anti_wedge[e5] * right_anti_dual[e43]),
                -(anti_wedge[e2] * right_anti_dual[e31]) - (anti_wedge[e3] * right_anti_dual[e12]),
            ]) - (anti_wedge.group3().xyzx() * right_anti_dual.group1().wwwx()),
            // e235, e315, e125, e12345
            (anti_wedge.group3().wwwx() * right_anti_dual.group1().xyz().with_w(right_anti_dual[e4235]))
                + Simd32x3::from(0.0).with_w(
                    (anti_wedge[e2] * right_anti_dual[e4315]) + (anti_wedge[e3] * right_anti_dual[e4125]) + (anti_wedge[e5] * right_anti_dual[e1234])
                        - (anti_wedge[e431] * right_anti_dual[e25])
                        - (anti_wedge[e412] * right_anti_dual[e35])
                        - (anti_wedge[e415] * right_anti_dual[e23])
                        - (anti_wedge[e425] * right_anti_dual[e31])
                        - (anti_wedge[e435] * right_anti_dual[e12])
                        - (anti_wedge[e321] * right_anti_dual[e45])
                        - (anti_wedge[e235] * right_anti_dual[e41])
                        - (anti_wedge[e315] * right_anti_dual[e42])
                        - (anti_wedge[e125] * right_anti_dual[e43]),
                )
                + (anti_wedge.group3().yzx() * right_anti_dual.group2().zxy()).with_w(anti_wedge[e4] * right_anti_dual[e3215])
                - (right_anti_dual.group2().yzxx() * anti_wedge.group3().zxy().with_w(anti_wedge[e423])),
        );
    }
}
impl RejectOrthogonallyFrom<AntiDualNum> for CircleRotor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       13        0
    fn reject_orthogonally_from(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            other.group0().xx().with_zw(other[e3215], other[scalar]) * self.group0().with_w(self[e12345]),
            // e15, e25, e35, e3215
            Simd32x4::from(other[e3215]) * self.group1().xyz().with_w(self[e12345]),
        );
        let right_anti_dual = DualNum::from_groups(/* e5, e12345 */ other.group0());
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x3::from(0.0).with_w(anti_wedge[scalar] * right_anti_dual[e12345]),
            // e235, e315, e125, e5
            Simd32x4::from(right_anti_dual[e5]) * anti_wedge.group0(),
        );
    }
}
impl RejectOrthogonallyFrom<AntiFlatPoint> for CircleRotor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        9        0
    //    simd3        1        3        0
    //    simd4        1        4        0
    // Totals...
    // yes simd        6       16        0
    //  no simd       11       34        0
    fn reject_orthogonally_from(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(self[e12345]) * other.group0(),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other[e315] * self[e412]) + (other[e321] * self[e415]),
                (other[e125] * self[e423]) + (other[e321] * self[e425]),
                (other[e235] * self[e431]) + (other[e321] * self[e435]),
                -(other[e315] * self[e425]) - (other[e125] * self[e435]),
            ]) - (self.group0().yzx() * other.group0().zxy()).with_w(other[e235] * self[e415]),
        );
        let right_anti_dual = FlatPoint::from_groups(/* e15, e25, e35, e45 */ other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]));
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(right_anti_dual[e45]) * anti_wedge.group1().xyz().with_w(anti_wedge[e321]) * Simd32x4::from(-1.0),
            // e235, e315, e125, e5
            ((anti_wedge.group1().yzx() * right_anti_dual.group0().zxy()) - (anti_wedge.group1().zxy() * right_anti_dual.group0().yzx())).with_w(0.0),
        );
    }
}
impl RejectOrthogonallyFrom<AntiFlector> for CircleRotor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       14        0
    //    simd3        1        4        0
    //    simd4        2        5        0
    // Totals...
    // yes simd       10       23        0
    //  no simd       18       46        0
    fn reject_orthogonally_from(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(self[e12345]) * other.group0(),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other[e321] * self[e415]) + (other[e1] * self[e12345]),
                (other[e321] * self[e425]) + (other[e2] * self[e12345]),
                (other[e321] * self[e435]) + (other[e3] * self[e12345]),
                -(other[e315] * self[e425]) - (other[e125] * self[e435]),
            ]) + (self.group0().zxy() * other.group0().yzx()).with_w(other[e5] * self[e12345])
                - (self.group0().yzx() * other.group0().zxy()).with_w(other[e235] * self[e415]),
        );
        let right_anti_dual = Flector::from_groups(
            // e15, e25, e35, e45
            other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([right_anti_dual[e45], right_anti_dual[e45], right_anti_dual[e45], 1.0])
                * anti_wedge.group1().xyz().with_w(
                    (anti_wedge[e1] * right_anti_dual[e4235]) + (anti_wedge[e2] * right_anti_dual[e4315]) + (anti_wedge[e3] * right_anti_dual[e4125])
                        - (anti_wedge[e321] * right_anti_dual[e45]),
                )
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            ((anti_wedge.group1().yzx() * right_anti_dual.group0().zxy()) - (anti_wedge.group1().zxy() * right_anti_dual.group0().yzx())).with_w(0.0),
        );
    }
}
impl RejectOrthogonallyFrom<AntiLine> for CircleRotor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7        9        0
    //    simd3        0        2        0
    //    simd4        0        8        0
    // Totals...
    // yes simd        7       19        0
    //  no simd        7       47        0
    fn reject_orthogonally_from(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([self[e12345], self[e12345], self[e12345], 1.0])
                * other.group0().with_w(
                    -(other[e23] * self[e415])
                        - (other[e31] * self[e425])
                        - (other[e12] * self[e435])
                        - (other[e15] * self[e423])
                        - (other[e25] * self[e431])
                        - (other[e35] * self[e412]),
                ),
            // e15, e25, e35, e3215
            Simd32x3::from(1.0).with_w(0.0) * other.group1().with_w(0.0) * self.group2().www().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
        );
        let right_anti_dual = Line::from_groups(
            // e415, e425, e435
            other.group0() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group1() * Simd32x3::from(-1.0),
        );
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([anti_wedge[scalar], anti_wedge[scalar], anti_wedge[scalar], 1.0])
                * right_anti_dual
                    .group0()
                    .with_w(-(anti_wedge[e23] * right_anti_dual[e415]) - (anti_wedge[e31] * right_anti_dual[e425]) - (anti_wedge[e12] * right_anti_dual[e435])),
            // e235, e315, e125, e5
            Simd32x3::from(1.0).with_w(0.0) * right_anti_dual.group1().with_w(0.0) * anti_wedge.group0().www().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
        );
    }
}
impl RejectOrthogonallyFrom<AntiMotor> for CircleRotor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       16        0
    //    simd3        2        5        0
    //    simd4        1        3        0
    // Totals...
    // yes simd       11       24        0
    //  no simd       18       43        0
    fn reject_orthogonally_from(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                other[e23] * self[e12345],
                other[e31] * self[e12345],
                other[e12] * self[e12345],
                -(other[e23] * self[e415])
                    - (other[e31] * self[e425])
                    - (other[e12] * self[e435])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412]),
            ]) + (self.group0() * other.group1().www()).with_w(other[scalar] * self[e12345]),
            // e15, e25, e35, e3215
            ((Simd32x3::from(other[e3215]) * self.group1().xyz()) + (Simd32x3::from(self[e12345]) * other.group1().xyz())).with_w(other[e3215] * self[e12345]),
        );
        let right_anti_dual = Motor::from_groups(
            // e415, e425, e435, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([right_anti_dual[e415], right_anti_dual[e425], right_anti_dual[e435], 1.0])
                * anti_wedge.group0().www().with_w(
                    (anti_wedge[scalar] * right_anti_dual[e12345])
                        - (anti_wedge[e23] * right_anti_dual[e415])
                        - (anti_wedge[e31] * right_anti_dual[e425])
                        - (anti_wedge[e12] * right_anti_dual[e435]),
                ),
            // e235, e315, e125, e5
            ((Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group1().xyz()) + (Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group0().xyz()))
                .with_w(anti_wedge[scalar] * right_anti_dual[e5]),
        );
    }
}
impl RejectOrthogonallyFrom<AntiPlane> for CircleRotor {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        3        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        2        5        0
    //  no simd        2       11        0
    fn reject_orthogonally_from(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from(self[e12345]) * other.group0());
        let right_anti_dual = Plane::from_groups(/* e4235, e4315, e4125, e3215 */ other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]));
        return AntiScalar::from_groups(
            // e12345
            (anti_wedge[e1] * right_anti_dual[e4235]) + (anti_wedge[e2] * right_anti_dual[e4315]) + (anti_wedge[e3] * right_anti_dual[e4125]),
        );
    }
}
impl RejectOrthogonallyFrom<AntiScalar> for CircleRotor {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd3        0        2        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        7        0
    //  no simd        0       23        0
    fn reject_orthogonally_from(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[e12345]) * self.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other[e12345]) * self.group1(),
            // e235, e315, e125, e12345
            Simd32x4::from(other[e12345]) * self.group2(),
        );
        let right_anti_dual = Scalar::from_groups(/* scalar */ other[e12345] * -1.0);
        return CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1(),
            // e235, e315, e125, e12345
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group2(),
        );
    }
}
impl RejectOrthogonallyFrom<Circle> for CircleRotor {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       48        0
    //    simd3        2        7        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       38       59        0
    //  no simd       54       85        0
    fn reject_orthogonally_from(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[e12345]) * other.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(self[e12345]) * other.group1(),
            // e235, e315, e125, e4
            Simd32x4::from([self[e12345], self[e12345], self[e12345], 1.0])
                * other.group2().with_w(
                    -(other[e423] * self[e415])
                        - (other[e431] * self[e425])
                        - (other[e412] * self[e435])
                        - (other[e415] * self[e423])
                        - (other[e425] * self[e431])
                        - (other[e435] * self[e412]),
                ),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e415] * self[e321]) + (other[e321] * self[e415]) + (other[e315] * self[e412]),
                (other[e423] * self[e125]) + (other[e425] * self[e321]) + (other[e321] * self[e425]) + (other[e125] * self[e423]),
                (other[e431] * self[e235]) + (other[e435] * self[e321]) + (other[e321] * self[e435]) + (other[e235] * self[e431]),
                -(other[e415] * self[e235]) - (other[e425] * self[e315]) - (other[e435] * self[e125]) - (other[e125] * self[e435]),
            ]) - (other.group0().yzx() * self.group2().zxy()).with_w(other[e235] * self[e415])
                - (other.group2().zxy() * self.group0().yzx()).with_w(other[e315] * self[e425]),
        );
        let right_anti_dual = Dipole::from_groups(
            // e41, e42, e43
            other.group0(),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35
            other.group2(),
        );
        return CircleRotor::from_groups(
            // e423, e431, e412
            (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group1().xyz()) + (right_anti_dual.group0().yzx() * anti_wedge.group3().zxy())
                - (right_anti_dual.group0().zxy() * anti_wedge.group3().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (anti_wedge[e4] * right_anti_dual[e15]) + (anti_wedge[e5] * right_anti_dual[e41]),
                (anti_wedge[e4] * right_anti_dual[e25]) + (anti_wedge[e5] * right_anti_dual[e42]),
                (anti_wedge[e4] * right_anti_dual[e35]) + (anti_wedge[e5] * right_anti_dual[e43]),
                -(anti_wedge[e2] * right_anti_dual[e31]) - (anti_wedge[e3] * right_anti_dual[e12]),
            ]) - (anti_wedge.group3().xyzx() * right_anti_dual.group1().wwwx()),
            // e235, e315, e125, e12345
            Simd32x4::from([
                (anti_wedge[e2] * right_anti_dual[e35]) + (anti_wedge[e5] * right_anti_dual[e23]),
                (anti_wedge[e3] * right_anti_dual[e15]) + (anti_wedge[e5] * right_anti_dual[e31]),
                (anti_wedge[e1] * right_anti_dual[e25]) + (anti_wedge[e5] * right_anti_dual[e12]),
                -(anti_wedge[e431] * right_anti_dual[e25])
                    - (anti_wedge[e412] * right_anti_dual[e35])
                    - (anti_wedge[e415] * right_anti_dual[e23])
                    - (anti_wedge[e425] * right_anti_dual[e31])
                    - (anti_wedge[e435] * right_anti_dual[e12])
                    - (anti_wedge[e321] * right_anti_dual[e45])
                    - (anti_wedge[e235] * right_anti_dual[e41])
                    - (anti_wedge[e315] * right_anti_dual[e42])
                    - (anti_wedge[e125] * right_anti_dual[e43]),
            ]) - (right_anti_dual.group2().yzx() * anti_wedge.group3().zxy()).with_w(anti_wedge[e423] * right_anti_dual[e15]),
        );
    }
}
impl RejectOrthogonallyFrom<CircleRotor> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       35       58        0
    //    simd3        4       11        0
    //    simd4        7        6        0
    // Totals...
    // yes simd       46       75        0
    //  no simd       75      115        0
    fn reject_orthogonally_from(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x3::from(other[e12345]) * self.group0()) + (Simd32x3::from(self[e12345]) * other.group0())).with_w(other[e12345] * self[e12345]),
            // e415, e425, e435, e321
            (Simd32x4::from(other[e12345]) * self.group1()) + (Simd32x4::from(self[e12345]) * other.group1()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e235] * self[e12345]) + (other[e12345] * self[e235]),
                (other[e315] * self[e12345]) + (other[e12345] * self[e315]),
                (other[e125] * self[e12345]) + (other[e12345] * self[e125]),
                -(other[e415] * self[e235])
                    - (other[e425] * self[e315])
                    - (other[e435] * self[e125])
                    - (other[e235] * self[e415])
                    - (other[e315] * self[e425])
                    - (other[e125] * self[e435]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e415] * self[e321]) + (other[e321] * self[e415]) + (other[e315] * self[e412]),
                (other[e423] * self[e125]) + (other[e425] * self[e321]) + (other[e321] * self[e425]) + (other[e125] * self[e423]),
                (other[e431] * self[e235]) + (other[e435] * self[e321]) + (other[e321] * self[e435]) + (other[e235] * self[e431]),
                -(other[e412] * self[e435]) - (other[e415] * self[e423]) - (other[e425] * self[e431]) - (other[e435] * self[e412]),
            ]) - (other.group0().yzx() * self.group2().zxy()).with_w(other[e423] * self[e415])
                - (self.group0().yzx() * other.group2().zxy()).with_w(other[e431] * self[e425]),
        );
        let right_anti_dual = AntiCircleRotor::from_groups(
            // e41, e42, e43
            other.group0(),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, scalar
            other.group2() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (right_anti_dual[e23] * anti_wedge[e4]) + (right_anti_dual[scalar] * anti_wedge[e423]),
                (right_anti_dual[e31] * anti_wedge[e4]) + (right_anti_dual[scalar] * anti_wedge[e431]),
                (right_anti_dual[e12] * anti_wedge[e4]) + (right_anti_dual[scalar] * anti_wedge[e412]),
                -(right_anti_dual[e42] * anti_wedge[e315])
                    - (right_anti_dual[e43] * anti_wedge[e125])
                    - (right_anti_dual[e23] * anti_wedge[e415])
                    - (right_anti_dual[e31] * anti_wedge[e425])
                    - (right_anti_dual[e12] * anti_wedge[e435])
                    - (right_anti_dual[e45] * anti_wedge[e321])
                    - (right_anti_dual[e15] * anti_wedge[e423])
                    - (right_anti_dual[e25] * anti_wedge[e431])
                    - (right_anti_dual[e35] * anti_wedge[e412]),
            ]) + (right_anti_dual.group0().yzx() * anti_wedge.group3().zxy()).with_w(right_anti_dual[scalar] * anti_wedge[e12345])
                - (right_anti_dual.group0().zxy() * anti_wedge.group3().yzx()).with_w(right_anti_dual[e41] * anti_wedge[e235]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (right_anti_dual[e15] * anti_wedge[e4]) + (right_anti_dual[scalar] * anti_wedge[e415]),
                (right_anti_dual[e25] * anti_wedge[e4]) + (right_anti_dual[scalar] * anti_wedge[e425]),
                (right_anti_dual[e35] * anti_wedge[e4]) + (right_anti_dual[scalar] * anti_wedge[e435]),
                -(right_anti_dual[e31] * anti_wedge[e2]) - (right_anti_dual[e12] * anti_wedge[e3]),
            ]) + (right_anti_dual.group0() * anti_wedge.group2().www()).with_w(right_anti_dual[scalar] * anti_wedge[e321])
                - (right_anti_dual.group1().wwwx() * anti_wedge.group3().xyzx()),
            // e235, e315, e125, e5
            ((Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group2().xyz())
                + (Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group1().xyz())
                + (right_anti_dual.group2().zxy() * anti_wedge.group3().yzx())
                - (right_anti_dual.group2().yzx() * anti_wedge.group3().zxy()))
            .with_w(right_anti_dual[scalar] * anti_wedge[e5]),
            // e1, e2, e3, e4
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group3(),
        );
    }
}
impl RejectOrthogonallyFrom<Dipole> for CircleRotor {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       20        0
    //    simd3        0        4        0
    //    simd4        0        5        0
    // Totals...
    // yes simd       18       29        0
    //  no simd       18       52        0
    fn reject_orthogonally_from(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[e12345]) * other.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(self[e12345]) * other.group1(),
            // e15, e25, e35, scalar
            Simd32x4::from([self[e12345], self[e12345], self[e12345], 1.0])
                * other.group2().with_w(
                    -(self[e423] * other[e15])
                        - (self[e431] * other[e25])
                        - (self[e412] * other[e35])
                        - (self[e415] * other[e23])
                        - (self[e425] * other[e31])
                        - (self[e435] * other[e12])
                        - (self[e321] * other[e45])
                        - (self[e235] * other[e41])
                        - (self[e315] * other[e42])
                        - (self[e125] * other[e43]),
                ),
        );
        let right_anti_dual = Circle::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125
            other.group2() * Simd32x3::from(-1.0),
        );
        return CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1(),
            // e235, e315, e125, e12345
            Simd32x4::from([anti_wedge[scalar], anti_wedge[scalar], anti_wedge[scalar], 1.0])
                * right_anti_dual.group2().with_w(
                    -(anti_wedge[e41] * right_anti_dual[e235])
                        - (anti_wedge[e42] * right_anti_dual[e315])
                        - (anti_wedge[e43] * right_anti_dual[e125])
                        - (anti_wedge[e23] * right_anti_dual[e415])
                        - (anti_wedge[e31] * right_anti_dual[e425])
                        - (anti_wedge[e12] * right_anti_dual[e435])
                        - (anti_wedge[e45] * right_anti_dual[e321])
                        - (anti_wedge[e15] * right_anti_dual[e423])
                        - (anti_wedge[e25] * right_anti_dual[e431])
                        - (anti_wedge[e35] * right_anti_dual[e412]),
                ),
        );
    }
}
impl RejectOrthogonallyFrom<DipoleInversion> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       52        0
    //    simd3        6       14        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       47       75        0
    //  no simd       86      130        0
    fn reject_orthogonally_from(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e412] * other[e4315]) + (self[e415] * other[e1234]) + (self[e12345] * other[e41]),
                (self[e423] * other[e4125]) + (self[e425] * other[e1234]) + (self[e12345] * other[e42]),
                (self[e431] * other[e4235]) + (self[e435] * other[e1234]) + (self[e12345] * other[e43]),
                -(self[e431] * other[e25])
                    - (self[e412] * other[e35])
                    - (self[e415] * other[e23])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e321] * other[e45])
                    - (self[e235] * other[e41])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
            ]) - (self.group0().yzx() * other.group3().zxy()).with_w(self[e423] * other[e15]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e235] * other[e1234]) + (self[e12345] * other[e23]),
                (self[e315] * other[e1234]) + (self[e12345] * other[e31]),
                (self[e125] * other[e1234]) + (self[e12345] * other[e12]),
                -(self[e425] * other[e4315]) - (self[e435] * other[e4125]),
            ]) + (self.group0() * other.group3().www()).with_w(self[e12345] * other[e45])
                - (self.group1().wwwx() * other.group3().xyzx()),
            // e15, e25, e35, e1234
            ((Simd32x3::from(self[e12345]) * other.group2().xyz()) + (Simd32x3::from(other[e3215]) * self.group1().xyz()) + (self.group2().yzx() * other.group3().zxy())
                - (self.group2().zxy() * other.group3().yzx()))
            .with_w(self[e12345] * other[e1234]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * other.group3(),
        );
        let right_anti_dual = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e4
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group3() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (right_anti_dual.group3().zxyy() * anti_wedge.group0().yzx().with_w(anti_wedge[e4315]))
                + Simd32x3::from(0.0).with_w(
                    (right_anti_dual[e3] * anti_wedge[e4125]) + (right_anti_dual[e5] * anti_wedge[e1234])
                        - (right_anti_dual[e431] * anti_wedge[e25])
                        - (right_anti_dual[e412] * anti_wedge[e35])
                        - (right_anti_dual[e415] * anti_wedge[e23])
                        - (right_anti_dual[e425] * anti_wedge[e31])
                        - (right_anti_dual[e435] * anti_wedge[e12])
                        - (right_anti_dual[e321] * anti_wedge[e45])
                        - (right_anti_dual[e235] * anti_wedge[e41])
                        - (right_anti_dual[e315] * anti_wedge[e42])
                        - (right_anti_dual[e125] * anti_wedge[e43]),
                )
                + (right_anti_dual.group0() * anti_wedge.group0().www()).with_w(right_anti_dual[e4] * anti_wedge[e3215])
                + (right_anti_dual.group2().www() * anti_wedge.group1().xyz()).with_w(right_anti_dual[e1] * anti_wedge[e4235])
                - (right_anti_dual.group3().yzx() * anti_wedge.group0().zxy()).with_w(right_anti_dual[e423] * anti_wedge[e15]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (right_anti_dual[e4] * anti_wedge[e15]) + (right_anti_dual[e5] * anti_wedge[e41]),
                (right_anti_dual[e4] * anti_wedge[e25]) + (right_anti_dual[e5] * anti_wedge[e42]),
                (right_anti_dual[e4] * anti_wedge[e35]) + (right_anti_dual[e5] * anti_wedge[e43]),
                -(right_anti_dual[e2] * anti_wedge[e31]) - (right_anti_dual[e3] * anti_wedge[e12]),
            ]) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1())
                - (right_anti_dual.group3().xyzx() * anti_wedge.group1().wwwx()),
            // e235, e315, e125, e5
            ((Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group1().xyz())
                + (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group2().xyz())
                + (right_anti_dual.group3().yzx() * anti_wedge.group2().zxy())
                - (right_anti_dual.group3().zxy() * anti_wedge.group2().yzx()))
            .with_w(right_anti_dual[e5] * anti_wedge[scalar]),
            // e1, e2, e3, e4
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group3().xyz().with_w(right_anti_dual[e4]),
        );
    }
}
impl RejectOrthogonallyFrom<DualNum> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        2        0
    //    simd2        0        1        0
    //    simd4        0        7        0
    // Totals...
    // yes simd        1       10        0
    //  no simd        1       32        0
    fn reject_orthogonally_from(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(other[e12345]) * self.group0().with_w(self[e12345]),
            // e415, e425, e435, e321
            Simd32x4::from(other[e12345]) * self.group1(),
            // e235, e315, e125, e5
            self.group2() * other.group0().yy().with_zw(other[e12345], other[e5]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
        let right_anti_dual = AntiDualNum::from_groups(/* e3215, scalar */ other.group0() * Simd32x2::from(-1.0));
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([anti_wedge[e423], anti_wedge[e431], anti_wedge[e412], 1.0])
                * right_anti_dual
                    .group0()
                    .yy()
                    .with_zw(right_anti_dual[scalar], (right_anti_dual[e3215] * anti_wedge[e4]) + (right_anti_dual[scalar] * anti_wedge[e12345])),
            // e415, e425, e435, e321
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1(),
            // e235, e315, e125, e5
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group2(),
            // e1, e2, e3, e4
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group3(),
        );
    }
}
impl RejectOrthogonallyFrom<FlatPoint> for CircleRotor {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       10        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        6       13        0
    //  no simd        6       22        0
    fn reject_orthogonally_from(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x3::from(0.0).with_w(self[e12345] * other[e45]),
            // e15, e25, e35, scalar
            Simd32x4::from([other[e15], other[e25], other[e35], 1.0])
                * self
                    .group2()
                    .www()
                    .with_w(-(self[e423] * other[e15]) - (self[e431] * other[e25]) - (self[e412] * other[e35]) - (self[e321] * other[e45])),
        );
        let right_anti_dual = AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]));
        return CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x3::from(0.0).with_w(anti_wedge[scalar] * right_anti_dual[e321]),
            // e235, e315, e125, e12345
            Simd32x4::from([right_anti_dual[e235], right_anti_dual[e315], right_anti_dual[e125], 1.0])
                * anti_wedge.group2().www().with_w(
                    -(anti_wedge[e41] * right_anti_dual[e235])
                        - (anti_wedge[e42] * right_anti_dual[e315])
                        - (anti_wedge[e43] * right_anti_dual[e125])
                        - (anti_wedge[e45] * right_anti_dual[e321]),
                ),
        );
    }
}
impl RejectOrthogonallyFrom<Flector> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       19        0
    //    simd3        3       10        0
    //    simd4       10       11        0
    // Totals...
    // yes simd       22       40        0
    //  no simd       58       93        0
    fn reject_orthogonally_from(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e412] * other[e4315],
                self[e423] * other[e4125],
                self[e431] * other[e4235],
                -(self[e431] * other[e25]) - (self[e412] * other[e35]) - (self[e321] * other[e45]),
            ]) - (self.group0().yzx() * other.group1().zxy()).with_w(self[e423] * other[e15]),
            // e23, e31, e12, e45
            Simd32x3::from(0.0).with_w(-(self[e425] * other[e4315]) - (self[e435] * other[e4125])) + (self.group0() * other.group1().www()).with_w(self[e12345] * other[e45])
                - (self.group1().wwwx() * other.group1().xyzx()),
            // e15, e25, e35, e1234
            (Simd32x3::from(self[e12345]) * other.group0().xyz()).with_w(0.0)
                + (Simd32x3::from(other[e3215]) * self.group1().xyz()).with_w(0.0)
                + (self.group2().yzx() * other.group1().zxy()).with_w(0.0)
                - (self.group2().zxy() * other.group1().yzx()).with_w(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * other.group1(),
        );
        let right_anti_dual = AntiFlector::from_groups(
            // e235, e315, e125, e321
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (right_anti_dual.group1().zxyx() * anti_wedge.group0().yzx().with_w(anti_wedge[e4235]))
                + Simd32x3::from(0.0).with_w(
                    (right_anti_dual[e2] * anti_wedge[e4315]) + (right_anti_dual[e3] * anti_wedge[e4125]) + (right_anti_dual[e5] * anti_wedge[e1234])
                        - (right_anti_dual[e315] * anti_wedge[e42])
                        - (right_anti_dual[e125] * anti_wedge[e43])
                        - (right_anti_dual[e321] * anti_wedge[e45]),
                )
                - (anti_wedge.group0().zxyx() * right_anti_dual.group1().yzx().with_w(right_anti_dual[e235])),
            // e415, e425, e435, e321
            (anti_wedge.group0() * right_anti_dual.group1().www().with_w(right_anti_dual[e321]))
                + Simd32x3::from(0.0).with_w(-(right_anti_dual[e2] * anti_wedge[e31]) - (right_anti_dual[e3] * anti_wedge[e12]))
                - (right_anti_dual.group1().xyzx() * anti_wedge.group1().wwwx()),
            // e235, e315, e125, e5
            ((Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group1().xyz())
                + (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0().xyz())
                + (right_anti_dual.group1().yzx() * anti_wedge.group2().zxy())
                - (right_anti_dual.group1().zxy() * anti_wedge.group2().yzx()))
            .with_w(right_anti_dual[e5] * anti_wedge[scalar]),
            // e1, e2, e3, e4
            Simd32x3::from(1.0).with_w(0.0) * anti_wedge.group0().www().with_w(0.0) * right_anti_dual.group1().xyz().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
        );
    }
}
impl RejectOrthogonallyFrom<Line> for CircleRotor {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       30        0
    //    simd3        0        3        0
    //    simd4        2        5        0
    // Totals...
    // yes simd       20       38        0
    //  no simd       26       59        0
    fn reject_orthogonally_from(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x3::from(1.0).with_w(0.0) * other.group0().with_w(0.0) * self.group2().www().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
            // e235, e315, e125, e4
            Simd32x4::from([self[e12345], self[e12345], self[e12345], 1.0])
                * other.group1().with_w(-(self[e423] * other[e415]) - (self[e431] * other[e425]) - (self[e412] * other[e435])),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self[e412] * other[e315]) + (self[e321] * other[e415]),
                (self[e423] * other[e125]) + (self[e321] * other[e425]),
                (self[e431] * other[e235]) + (self[e321] * other[e435]),
                -(self[e415] * other[e235]) - (self[e425] * other[e315]) - (self[e435] * other[e125]) - (self[e315] * other[e425]) - (self[e125] * other[e435]),
            ]) - (self.group0().yzx() * other.group1().zxy()).with_w(self[e235] * other[e415]),
        );
        let right_anti_dual = AntiLine::from_groups(/* e23, e31, e12 */ other.group0(), /* e15, e25, e35 */ other.group1());
        return CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group0(),
            // e415, e425, e435, e321
            Simd32x4::from([anti_wedge[e4], anti_wedge[e4], anti_wedge[e4], 1.0])
                * right_anti_dual
                    .group1()
                    .with_w(-(anti_wedge[e1] * right_anti_dual[e23]) - (anti_wedge[e2] * right_anti_dual[e31]) - (anti_wedge[e3] * right_anti_dual[e12])),
            // e235, e315, e125, e12345
            Simd32x4::from([
                (anti_wedge[e2] * right_anti_dual[e35]) + (anti_wedge[e5] * right_anti_dual[e23]),
                (anti_wedge[e3] * right_anti_dual[e15]) + (anti_wedge[e5] * right_anti_dual[e31]),
                (anti_wedge[e1] * right_anti_dual[e25]) + (anti_wedge[e5] * right_anti_dual[e12]),
                -(anti_wedge[e431] * right_anti_dual[e25])
                    - (anti_wedge[e412] * right_anti_dual[e35])
                    - (anti_wedge[e415] * right_anti_dual[e23])
                    - (anti_wedge[e425] * right_anti_dual[e31])
                    - (anti_wedge[e435] * right_anti_dual[e12]),
            ]) - (right_anti_dual.group1().yzx() * anti_wedge.group3().zxy()).with_w(anti_wedge[e423] * right_anti_dual[e15]),
        );
    }
}
impl RejectOrthogonallyFrom<Motor> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       33        0
    //    simd3        4        8        0
    //    simd4        5        7        0
    // Totals...
    // yes simd       25       48        0
    //  no simd       48       85        0
    fn reject_orthogonally_from(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(other[e12345]) * self.group0().with_w(self[e12345]),
            // e415, e425, e435, e321
            ((Simd32x3::from(self[e12345]) * other.group0().xyz()) + (Simd32x3::from(other[e12345]) * self.group1().xyz())).with_w(self[e321] * other[e12345]),
            // e235, e315, e125, e5
            Simd32x4::from([
                self[e12345] * other[e235],
                self[e12345] * other[e315],
                self[e12345] * other[e125],
                -(self[e415] * other[e235])
                    - (self[e425] * other[e315])
                    - (self[e435] * other[e125])
                    - (self[e235] * other[e415])
                    - (self[e315] * other[e425])
                    - (self[e125] * other[e435]),
            ]) + (self.group2() * other.group0().www().with_w(other[e5])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e412] * other[e315]) + (self[e321] * other[e415]),
                (self[e423] * other[e125]) + (self[e321] * other[e425]),
                (self[e431] * other[e235]) + (self[e321] * other[e435]),
                -(self[e431] * other[e425]) - (self[e412] * other[e435]),
            ]) - (self.group0().yzx() * other.group1().zxy()).with_w(self[e423] * other[e415]),
        );
        let right_anti_dual = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e3215
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (right_anti_dual.group0() * anti_wedge.group3().www().with_w(anti_wedge[e12345]))
                + Simd32x3::from(0.0).with_w(
                    -(right_anti_dual[e23] * anti_wedge[e415])
                        - (right_anti_dual[e31] * anti_wedge[e425])
                        - (right_anti_dual[e12] * anti_wedge[e435])
                        - (right_anti_dual[e15] * anti_wedge[e423])
                        - (right_anti_dual[e25] * anti_wedge[e431])
                        - (right_anti_dual[e35] * anti_wedge[e412]),
                )
                + (right_anti_dual.group0().www() * anti_wedge.group0().xyz()).with_w(right_anti_dual[e3215] * anti_wedge[e4]),
            // e415, e425, e435, e321
            Simd32x4::from([
                right_anti_dual[e15] * anti_wedge[e4],
                right_anti_dual[e25] * anti_wedge[e4],
                right_anti_dual[e35] * anti_wedge[e4],
                -(right_anti_dual[e23] * anti_wedge[e1]) - (right_anti_dual[e31] * anti_wedge[e2]) - (right_anti_dual[e12] * anti_wedge[e3]),
            ]) + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1()),
            // e235, e315, e125, e5
            ((Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group2().xyz())
                + (Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group0().xyz())
                + (right_anti_dual.group1().zxy() * anti_wedge.group3().yzx())
                - (right_anti_dual.group1().yzx() * anti_wedge.group3().zxy()))
            .with_w(right_anti_dual[scalar] * anti_wedge[e5]),
            // e1, e2, e3, e4
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group3(),
        );
    }
}
impl RejectOrthogonallyFrom<MultiVector> for CircleRotor {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      103      141        0
    //    simd2        0        1        0
    //    simd3       28       50        0
    //    simd4       26       21        0
    // Totals...
    // yes simd      157      213        0
    //  no simd      291      377        0
    fn reject_orthogonally_from(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e12345] * other[scalar])
                    - (self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35])
                    - (self[e415] * other[e23])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e321] * other[e45])
                    - (self[e235] * other[e41])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
                self[e12345] * other[e12345],
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e415] * other[e321]) + (self[e321] * other[e415]) + (self[e315] * other[e412]) + (self[e12345] * other[e1]),
                (self[e425] * other[e321]) + (self[e321] * other[e425]) + (self[e125] * other[e423]) + (self[e12345] * other[e2]),
                (self[e435] * other[e321]) + (self[e321] * other[e435]) + (self[e235] * other[e431]) + (self[e12345] * other[e3]),
                -(self[e412] * other[e435]) - (self[e415] * other[e423]) - (self[e425] * other[e431]) - (self[e435] * other[e412]),
            ]) + (self.group0().zxy() * other.group8().yzx()).with_w(self[e12345] * other[e4])
                - (self.group0().yzx() * other.group8().zxy()).with_w(self[e423] * other[e415])
                - (other.group7().yzx() * self.group2().zxy()).with_w(self[e431] * other[e425]),
            // e5
            (self[e12345] * other[e5])
                - (self[e415] * other[e235])
                - (self[e425] * other[e315])
                - (self[e435] * other[e125])
                - (self[e235] * other[e415])
                - (self[e315] * other[e425])
                - (self[e125] * other[e435]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e315] * other[e4125]) + (self[e12345] * other[e15]),
                (self[e125] * other[e4235]) + (self[e12345] * other[e25]),
                (self[e235] * other[e4315]) + (self[e12345] * other[e35]),
                -(self[e425] * other[e4315]) - (self[e435] * other[e4125]),
            ]) + (other.group9().www() * self.group1().xyz()).with_w(self[e12345] * other[e45])
                - (other.group9().yzxx() * self.group2().zxy().with_w(self[e415])),
            // e41, e42, e43
            (Simd32x3::from(self[e12345]) * other.group4()) + (Simd32x3::from(other[e1234]) * self.group1().xyz()) + (self.group0().zxy() * other.group9().yzx())
                - (self.group0().yzx() * other.group9().zxy()),
            // e23, e31, e12
            (Simd32x3::from(self[e12345]) * other.group5()) + (Simd32x3::from(other[e3215]) * self.group0()) + (Simd32x3::from(other[e1234]) * self.group2().xyz())
                - (Simd32x3::from(self[e321]) * other.group9().xyz()),
            // e415, e425, e435, e321
            (Simd32x4::from(self[e12345]) * other.group6()) + (Simd32x4::from(other[e12345]) * self.group1()),
            // e423, e431, e412
            (Simd32x3::from(self[e12345]) * other.group7()) + (Simd32x3::from(other[e12345]) * self.group0()),
            // e235, e315, e125
            (Simd32x3::from(self[e12345]) * other.group8()) + (Simd32x3::from(other[e12345]) * self.group2().xyz()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * other.group9(),
            // e1234
            self[e12345] * other[e1234],
        );
        let right_anti_dual = MultiVector::from_groups(
            // scalar, e12345
            other.group0().yx() * Simd32x2::from([-1.0, 1.0]),
            // e1, e2, e3, e4
            other.group9().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e5
            other[e3215],
            // e15, e25, e35, e45
            other.group8().with_w(other[e321] * -1.0),
            // e41, e42, e43
            other.group7(),
            // e23, e31, e12
            other.group6().xyz(),
            // e415, e425, e435, e321
            other.group5().with_w(other[e45]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e423, e431, e412
            other.group4() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group3().xyz() * Simd32x3::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group1().xyz().with_w(other[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1234
            other[e4] * -1.0,
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                anti_wedge[scalar] * right_anti_dual[scalar],
                (anti_wedge[scalar] * right_anti_dual[e12345])
                    + (anti_wedge[e12345] * right_anti_dual[scalar])
                    + (anti_wedge[e1] * right_anti_dual[e4235])
                    + (anti_wedge[e2] * right_anti_dual[e4315])
                    + (anti_wedge[e3] * right_anti_dual[e4125])
                    + (anti_wedge[e4] * right_anti_dual[e3215])
                    + (anti_wedge[e5] * right_anti_dual[e1234])
                    + (anti_wedge[e4235] * right_anti_dual[e1])
                    + (anti_wedge[e4315] * right_anti_dual[e2])
                    + (anti_wedge[e4125] * right_anti_dual[e3])
                    + (anti_wedge[e3215] * right_anti_dual[e4])
                    + (anti_wedge[e1234] * right_anti_dual[e5])
                    - (anti_wedge[e15] * right_anti_dual[e423])
                    - (anti_wedge[e25] * right_anti_dual[e431])
                    - (anti_wedge[e35] * right_anti_dual[e412])
                    - (anti_wedge[e45] * right_anti_dual[e321])
                    - (anti_wedge[e41] * right_anti_dual[e235])
                    - (anti_wedge[e42] * right_anti_dual[e315])
                    - (anti_wedge[e43] * right_anti_dual[e125])
                    - (anti_wedge[e23] * right_anti_dual[e415])
                    - (anti_wedge[e31] * right_anti_dual[e425])
                    - (anti_wedge[e12] * right_anti_dual[e435])
                    - (anti_wedge[e415] * right_anti_dual[e23])
                    - (anti_wedge[e425] * right_anti_dual[e31])
                    - (anti_wedge[e435] * right_anti_dual[e12])
                    - (anti_wedge[e321] * right_anti_dual[e45])
                    - (anti_wedge[e423] * right_anti_dual[e15])
                    - (anti_wedge[e431] * right_anti_dual[e25])
                    - (anti_wedge[e412] * right_anti_dual[e35])
                    - (anti_wedge[e235] * right_anti_dual[e41])
                    - (anti_wedge[e315] * right_anti_dual[e42])
                    - (anti_wedge[e125] * right_anti_dual[e43]),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1()) + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1()),
            // e5
            (anti_wedge[scalar] * right_anti_dual[e5]) + (anti_wedge[e5] * right_anti_dual[scalar]),
            // e15, e25, e35, e45
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group3())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group3())
                + (Simd32x4::from(right_anti_dual[e5]) * anti_wedge.group1())
                - (Simd32x4::from(anti_wedge[e5]) * right_anti_dual.group1()),
            // e41, e42, e43
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group4())
                + (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group1().xyz())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group4())
                - (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group1().xyz()),
            // e23, e31, e12
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group5())
                + (anti_wedge.group1().yzx() * right_anti_dual.group1().zxy())
                - (anti_wedge.group1().zxy() * right_anti_dual.group1().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (anti_wedge[e4] * right_anti_dual[e15])
                    + (anti_wedge[e5] * right_anti_dual[e41])
                    + (anti_wedge[e15] * right_anti_dual[e4])
                    + (anti_wedge[e41] * right_anti_dual[e5]),
                (anti_wedge[e4] * right_anti_dual[e25])
                    + (anti_wedge[e5] * right_anti_dual[e42])
                    + (anti_wedge[e25] * right_anti_dual[e4])
                    + (anti_wedge[e42] * right_anti_dual[e5]),
                (anti_wedge[e4] * right_anti_dual[e35])
                    + (anti_wedge[e5] * right_anti_dual[e43])
                    + (anti_wedge[e35] * right_anti_dual[e4])
                    + (anti_wedge[e43] * right_anti_dual[e5]),
                -(anti_wedge[e1] * right_anti_dual[e23])
                    - (anti_wedge[e2] * right_anti_dual[e31])
                    - (anti_wedge[e3] * right_anti_dual[e12])
                    - (anti_wedge[e12] * right_anti_dual[e3]),
            ]) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group6())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group6())
                - (right_anti_dual.group1().xyzy() * anti_wedge.group3().www().with_w(anti_wedge[e31]))
                - (right_anti_dual.group3().www() * anti_wedge.group1().xyz()).with_w(anti_wedge[e23] * right_anti_dual[e1]),
            // e423, e431, e412
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group7())
                + (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group7())
                + (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group5())
                + (anti_wedge.group4().yzx() * right_anti_dual.group1().zxy())
                + (right_anti_dual.group4().yzx() * anti_wedge.group1().zxy())
                - (anti_wedge.group4().zxy() * right_anti_dual.group1().yzx())
                - (right_anti_dual.group4().zxy() * anti_wedge.group1().yzx()),
            // e235, e315, e125
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group8())
                + (Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group8())
                + (Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group5())
                + (anti_wedge.group1().yzx() * right_anti_dual.group3().zxy())
                + (anti_wedge.group3().zxy() * right_anti_dual.group1().yzx())
                - (anti_wedge.group1().zxy() * right_anti_dual.group3().yzx())
                - (anti_wedge.group3().yzx() * right_anti_dual.group1().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (anti_wedge[e3] * right_anti_dual[e425])
                    + (anti_wedge[e4] * right_anti_dual[e235])
                    + (anti_wedge[e45] * right_anti_dual[e23])
                    + (anti_wedge[e435] * right_anti_dual[e2]),
                (anti_wedge[e1] * right_anti_dual[e435])
                    + (anti_wedge[e4] * right_anti_dual[e315])
                    + (anti_wedge[e45] * right_anti_dual[e31])
                    + (anti_wedge[e415] * right_anti_dual[e3]),
                (anti_wedge[e2] * right_anti_dual[e415])
                    + (anti_wedge[e4] * right_anti_dual[e125])
                    + (anti_wedge[e45] * right_anti_dual[e12])
                    + (anti_wedge[e425] * right_anti_dual[e1]),
                -(anti_wedge[e1] * right_anti_dual[e235])
                    - (anti_wedge[e2] * right_anti_dual[e315])
                    - (anti_wedge[e3] * right_anti_dual[e125])
                    - (anti_wedge[e5] * right_anti_dual[e321]),
            ]) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group9())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group9())
                + (Simd32x4::from([right_anti_dual[e5], right_anti_dual[e5], right_anti_dual[e5], right_anti_dual[e3]]) * anti_wedge.group7().with_w(anti_wedge[e125]))
                + (anti_wedge.group5() * right_anti_dual.group3().www()).with_w(anti_wedge[e315] * right_anti_dual[e2])
                + (anti_wedge.group4().yzx() * right_anti_dual.group3().zxy()).with_w(anti_wedge[e235] * right_anti_dual[e1])
                + (right_anti_dual.group4().yzx() * anti_wedge.group3().zxy()).with_w(anti_wedge[e321] * right_anti_dual[e5])
                - (Simd32x4::from([anti_wedge[e5], anti_wedge[e5], anti_wedge[e5], anti_wedge[e15]]) * right_anti_dual.group7().with_w(right_anti_dual[e23]))
                - (right_anti_dual.group3().yzxx() * anti_wedge.group4().zxy().with_w(anti_wedge[e23]))
                - (anti_wedge.group8() * right_anti_dual.group1().www()).with_w(anti_wedge[e31] * right_anti_dual[e25])
                - (right_anti_dual.group4().zxy() * anti_wedge.group3().yzx()).with_w(anti_wedge[e12] * right_anti_dual[e35])
                - (anti_wedge.group1().yzx() * right_anti_dual.group6().zxy()).with_w(anti_wedge[e25] * right_anti_dual[e31])
                - (anti_wedge.group6().yzx() * right_anti_dual.group1().zxy()).with_w(anti_wedge[e35] * right_anti_dual[e12]),
            // e1234
            (anti_wedge[scalar] * right_anti_dual[e1234])
                + (anti_wedge[e1] * right_anti_dual[e423])
                + (anti_wedge[e2] * right_anti_dual[e431])
                + (anti_wedge[e3] * right_anti_dual[e412])
                + (anti_wedge[e4] * right_anti_dual[e321])
                + (anti_wedge[e1234] * right_anti_dual[scalar])
                - (anti_wedge[e41] * right_anti_dual[e23])
                - (anti_wedge[e42] * right_anti_dual[e31])
                - (anti_wedge[e43] * right_anti_dual[e12])
                - (anti_wedge[e23] * right_anti_dual[e41])
                - (anti_wedge[e31] * right_anti_dual[e42])
                - (anti_wedge[e12] * right_anti_dual[e43])
                - (anti_wedge[e321] * right_anti_dual[e4])
                - (anti_wedge[e423] * right_anti_dual[e1])
                - (anti_wedge[e431] * right_anti_dual[e2])
                - (anti_wedge[e412] * right_anti_dual[e3]),
        );
    }
}
impl RejectOrthogonallyFrom<Plane> for CircleRotor {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       18        0
    //    simd3        2        7        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       11       31        0
    //  no simd       33       63        0
    fn reject_orthogonally_from(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = DipoleInversion::from_groups(
            // e41, e42, e43
            (self.group0().zxy() * other.group0().yzx()) - (self.group0().yzx() * other.group0().zxy()),
            // e23, e31, e12, e45
            Simd32x4::from([
                self[e423] * other[e3215],
                self[e431] * other[e3215],
                self[e412] * other[e3215],
                -(self[e425] * other[e4315]) - (self[e435] * other[e4125]),
            ]) - (self.group1().wwwx() * other.group0().xyzx()),
            // e15, e25, e35, e1234
            (Simd32x3::from(other[e3215]) * self.group1().xyz()).with_w(0.0) + (self.group2().yzx() * other.group0().zxy()).with_w(0.0)
                - (self.group2().zxy() * other.group0().yzx()).with_w(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * other.group0(),
        );
        let right_anti_dual = AntiPlane::from_groups(/* e1, e2, e3, e5 */ other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]));
        return CircleRotor::from_groups(
            // e423, e431, e412
            (anti_wedge.group0().yzx() * right_anti_dual.group0().zxy()) - (anti_wedge.group0().zxy() * right_anti_dual.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                right_anti_dual[e5] * anti_wedge[e41],
                right_anti_dual[e5] * anti_wedge[e42],
                right_anti_dual[e5] * anti_wedge[e43],
                -(right_anti_dual[e2] * anti_wedge[e31]) - (right_anti_dual[e3] * anti_wedge[e12]),
            ]) - (right_anti_dual.group0().xyzx() * anti_wedge.group1().wwwx()),
            // e235, e315, e125, e12345
            Simd32x4::from([
                right_anti_dual[e3] * anti_wedge[e25] * -1.0,
                right_anti_dual[e1] * anti_wedge[e35] * -1.0,
                right_anti_dual[e2] * anti_wedge[e15] * -1.0,
                (right_anti_dual[e3] * anti_wedge[e4125]) + (right_anti_dual[e5] * anti_wedge[e1234]),
            ]) + (right_anti_dual.group0().yzxx() * anti_wedge.group2().zxy().with_w(anti_wedge[e4235]))
                + (right_anti_dual.group0().wwwy() * anti_wedge.group1().xyz().with_w(anti_wedge[e4315])),
        );
    }
}
impl RejectOrthogonallyFrom<RoundPoint> for CircleRotor {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        7        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        4        9        0
    //  no simd        4       15        0
    fn reject_orthogonally_from(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = RoundPoint::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from(self[e12345]) * other.group0(), /* e5 */ self[e12345] * other[e5]);
        let right_anti_dual = Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            other.group0().xyz().with_w(other[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1234
            other[e4] * -1.0,
        );
        return AntiScalar::from_groups(
            // e12345
            (anti_wedge[e1] * right_anti_dual[e4235])
                + (anti_wedge[e2] * right_anti_dual[e4315])
                + (anti_wedge[e3] * right_anti_dual[e4125])
                + (anti_wedge[e4] * right_anti_dual[e3215])
                + (anti_wedge[e5] * right_anti_dual[e1234]),
        );
    }
}
impl RejectOrthogonallyFrom<Scalar> for CircleRotor {
    type Output = AntiScalar;
    fn reject_orthogonally_from(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ self[e12345] * f32::powi(other[scalar], 2));
    }
}
impl RejectOrthogonallyFrom<Sphere> for CircleRotor {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       26        0
    //    simd3        6        9        0
    //    simd4        4        6        0
    // Totals...
    // yes simd       20       41        0
    //  no simd       44       77        0
    fn reject_orthogonally_from(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other[e1234]) * self.group1().xyz()) + (self.group0().zxy() * other.group0().yzx()) - (self.group0().yzx() * other.group0().zxy()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e423] * other[e3215]) + (self[e235] * other[e1234]),
                (self[e431] * other[e3215]) + (self[e315] * other[e1234]),
                (self[e412] * other[e3215]) + (self[e125] * other[e1234]),
                -(self[e425] * other[e4315]) - (self[e435] * other[e4125]),
            ]) - (self.group1().wwwx() * other.group0().xyzx()),
            // e15, e25, e35, e1234
            ((Simd32x3::from(other[e3215]) * self.group1().xyz()) + (self.group2().yzx() * other.group0().zxy()) - (self.group2().zxy() * other.group0().yzx()))
                .with_w(self[e12345] * other[e1234]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * other.group0(),
        );
        let right_anti_dual = RoundPoint::from_groups(
            // e1, e2, e3, e4
            other.group0().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e5
            other[e3215],
        );
        return CircleRotor::from_groups(
            // e423, e431, e412
            (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group1().xyz()) + (anti_wedge.group0().yzx() * right_anti_dual.group0().zxy())
                - (anti_wedge.group0().zxy() * right_anti_dual.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (anti_wedge[e41] * right_anti_dual[e5]) + (anti_wedge[e15] * right_anti_dual[e4]),
                (anti_wedge[e42] * right_anti_dual[e5]) + (anti_wedge[e25] * right_anti_dual[e4]),
                (anti_wedge[e43] * right_anti_dual[e5]) + (anti_wedge[e35] * right_anti_dual[e4]),
                -(anti_wedge[e31] * right_anti_dual[e2]) - (anti_wedge[e12] * right_anti_dual[e3]),
            ]) - (anti_wedge.group1().wwwx() * right_anti_dual.group0().xyzx()),
            // e235, e315, e125, e12345
            Simd32x4::from([
                anti_wedge[e25] * right_anti_dual[e3] * -1.0,
                anti_wedge[e35] * right_anti_dual[e1] * -1.0,
                anti_wedge[e15] * right_anti_dual[e2] * -1.0,
                (anti_wedge[e4315] * right_anti_dual[e2]) + (anti_wedge[e4125] * right_anti_dual[e3]) + (anti_wedge[e3215] * right_anti_dual[e4]),
            ]) + (Simd32x4::from(right_anti_dual[e5]) * anti_wedge.group1().xyz().with_w(anti_wedge[e1234]))
                + (right_anti_dual.group0().yzxx() * anti_wedge.group2().zxy().with_w(anti_wedge[e4235])),
        );
    }
}
impl RejectOrthogonallyFrom<VersorEven> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       52        0
    //    simd3        4       11        0
    //    simd4       11       12        0
    // Totals...
    // yes simd       47       75        0
    //  no simd       88      133        0
    fn reject_orthogonally_from(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x3::from(self[e12345]) * other.group0().xyz()) + (Simd32x3::from(other[e12345]) * self.group0())).with_w(self[e12345] * other[e12345]),
            // e415, e425, e435, e321
            (Simd32x4::from(self[e12345]) * other.group1()) + (Simd32x4::from(other[e12345]) * self.group1()),
            // e235, e315, e125, e5
            Simd32x4::from([
                self[e12345] * other[e235],
                self[e12345] * other[e315],
                self[e12345] * other[e125],
                -(self[e415] * other[e235])
                    - (self[e425] * other[e315])
                    - (self[e435] * other[e125])
                    - (self[e235] * other[e415])
                    - (self[e315] * other[e425])
                    - (self[e125] * other[e435]),
            ]) + (self.group2() * other.group0().www().with_w(other[e5])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e415] * other[e321]) + (self[e321] * other[e415]) + (self[e315] * other[e412]) + (self[e12345] * other[e1]),
                (self[e425] * other[e321]) + (self[e321] * other[e425]) + (self[e125] * other[e423]) + (self[e12345] * other[e2]),
                (self[e435] * other[e321]) + (self[e321] * other[e435]) + (self[e235] * other[e431]) + (self[e12345] * other[e3]),
                -(self[e412] * other[e435]) - (self[e415] * other[e423]) - (self[e425] * other[e431]) - (self[e435] * other[e412]),
            ]) + (self.group0().zxy() * other.group2().yzx()).with_w(self[e12345] * other[e4])
                - (self.group0().yzx() * other.group2().zxy()).with_w(self[e423] * other[e415])
                - (self.group2().zxy() * other.group0().yzx()).with_w(self[e431] * other[e425]),
        );
        let right_anti_dual = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e1234
            other.group2().xyz().with_w(other[e4]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            other.group3().xyz().with_w(other[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group0())
                + (anti_wedge.group3().wwwx() * right_anti_dual.group1().xyz().with_w(right_anti_dual[e4235]))
                + Simd32x3::from(0.0).with_w(
                    (anti_wedge[e2] * right_anti_dual[e4315]) + (anti_wedge[e3] * right_anti_dual[e4125]) + (anti_wedge[e4] * right_anti_dual[e3215])
                        - (anti_wedge[e431] * right_anti_dual[e25])
                        - (anti_wedge[e412] * right_anti_dual[e35])
                        - (anti_wedge[e415] * right_anti_dual[e23])
                        - (anti_wedge[e425] * right_anti_dual[e31])
                        - (anti_wedge[e435] * right_anti_dual[e12])
                        - (anti_wedge[e321] * right_anti_dual[e45])
                        - (anti_wedge[e235] * right_anti_dual[e41])
                        - (anti_wedge[e315] * right_anti_dual[e42])
                        - (anti_wedge[e125] * right_anti_dual[e43]),
                )
                + (anti_wedge.group3().zxy() * right_anti_dual.group0().yzx()).with_w(anti_wedge[e5] * right_anti_dual[e1234])
                - (anti_wedge.group3().yzx() * right_anti_dual.group0().zxy()).with_w(anti_wedge[e423] * right_anti_dual[e15]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (anti_wedge[e5] * right_anti_dual[e41]) + (anti_wedge[e4] * right_anti_dual[e15]),
                (anti_wedge[e5] * right_anti_dual[e42]) + (anti_wedge[e4] * right_anti_dual[e25]),
                (anti_wedge[e5] * right_anti_dual[e43]) + (anti_wedge[e4] * right_anti_dual[e35]),
                -(anti_wedge[e2] * right_anti_dual[e31]) - (anti_wedge[e3] * right_anti_dual[e12]),
            ]) + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1())
                - (anti_wedge.group3().xyzx() * right_anti_dual.group1().wwwx()),
            // e235, e315, e125, e5
            ((Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group1().xyz())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group2().xyz())
                + (anti_wedge.group3().yzx() * right_anti_dual.group2().zxy())
                - (anti_wedge.group3().zxy() * right_anti_dual.group2().yzx()))
            .with_w(anti_wedge[e5] * right_anti_dual[scalar]),
            // e1, e2, e3, e4
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group3(),
        );
    }
}
impl RejectOrthogonallyFrom<VersorOdd> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       30       50        0
    //    simd3        6       13        0
    //    simd4       10       11        0
    // Totals...
    // yes simd       46       74        0
    //  no simd       88      133        0
    fn reject_orthogonally_from(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e415] * other[e1234]) + (self[e12345] * other[e41]),
                (self[e425] * other[e1234]) + (self[e12345] * other[e42]),
                (self[e435] * other[e1234]) + (self[e12345] * other[e43]),
                -(self[e431] * other[e25])
                    - (self[e412] * other[e35])
                    - (self[e415] * other[e23])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e321] * other[e45])
                    - (self[e235] * other[e41])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
            ]) + (self.group0().zxy() * other.group3().yzx()).with_w(self[e12345] * other[scalar])
                - (self.group0().yzx() * other.group3().zxy()).with_w(self[e423] * other[e15]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e235] * other[e1234]) + (self[e12345] * other[e23]),
                (self[e315] * other[e1234]) + (self[e12345] * other[e31]),
                (self[e125] * other[e1234]) + (self[e12345] * other[e12]),
                -(self[e425] * other[e4315]) - (self[e435] * other[e4125]),
            ]) + (self.group0() * other.group3().www()).with_w(self[e12345] * other[e45])
                - (self.group1().wwwx() * other.group3().xyzx()),
            // e15, e25, e35, e1234
            ((Simd32x3::from(self[e12345]) * other.group2().xyz()) + (Simd32x3::from(other[e3215]) * self.group1().xyz()) + (self.group2().yzx() * other.group3().zxy())
                - (self.group2().zxy() * other.group3().yzx()))
            .with_w(self[e12345] * other[e1234]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * other.group3(),
        );
        let right_anti_dual = VersorEven::from_groups(
            // e423, e431, e412, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            other.group2().xyz().with_w(other[e3215]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e4
            other.group3().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group0())
                + (right_anti_dual.group3().wwwx() * anti_wedge.group1().xyz().with_w(anti_wedge[e4235]))
                + Simd32x3::from(0.0).with_w(
                    (right_anti_dual[e2] * anti_wedge[e4315]) + (right_anti_dual[e3] * anti_wedge[e4125]) + (right_anti_dual[e4] * anti_wedge[e3215])
                        - (right_anti_dual[e431] * anti_wedge[e25])
                        - (right_anti_dual[e412] * anti_wedge[e35])
                        - (right_anti_dual[e415] * anti_wedge[e23])
                        - (right_anti_dual[e425] * anti_wedge[e31])
                        - (right_anti_dual[e435] * anti_wedge[e12])
                        - (right_anti_dual[e321] * anti_wedge[e45])
                        - (right_anti_dual[e235] * anti_wedge[e41])
                        - (right_anti_dual[e315] * anti_wedge[e42])
                        - (right_anti_dual[e125] * anti_wedge[e43]),
                )
                + (right_anti_dual.group3().zxy() * anti_wedge.group0().yzx()).with_w(right_anti_dual[e5] * anti_wedge[e1234])
                - (right_anti_dual.group3().yzx() * anti_wedge.group0().zxy()).with_w(right_anti_dual[e423] * anti_wedge[e15]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (right_anti_dual[e5] * anti_wedge[e41]) + (right_anti_dual[e4] * anti_wedge[e15]),
                (right_anti_dual[e5] * anti_wedge[e42]) + (right_anti_dual[e4] * anti_wedge[e25]),
                (right_anti_dual[e5] * anti_wedge[e43]) + (right_anti_dual[e4] * anti_wedge[e35]),
                -(right_anti_dual[e2] * anti_wedge[e31]) - (right_anti_dual[e3] * anti_wedge[e12]),
            ]) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1())
                - (right_anti_dual.group3().xyzx() * anti_wedge.group1().wwwx()),
            // e235, e315, e125, e5
            ((Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group1().xyz())
                + (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group2().xyz())
                + (right_anti_dual.group3().yzx() * anti_wedge.group2().zxy())
                - (right_anti_dual.group3().zxy() * anti_wedge.group2().yzx()))
            .with_w(right_anti_dual[e5] * anti_wedge[scalar]),
            // e1, e2, e3, e4
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group3(),
        );
    }
}
impl std::ops::Div<reject_orthogonally_from> for Dipole {
    type Output = reject_orthogonally_from_partial<Dipole>;
    fn div(self, _rhs: reject_orthogonally_from) -> Self::Output {
        reject_orthogonally_from_partial(self)
    }
}
impl RejectOrthogonallyFrom<AntiDipoleInversion> for Dipole {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       10        0
    //    simd3        0        1        0
    //    simd4        0        6        0
    // Totals...
    // yes simd        9       17        0
    //  no simd        9       37        0
    fn reject_orthogonally_from(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Scalar::from_groups(
            // scalar
            -(other[e423] * self[e15])
                - (other[e431] * self[e25])
                - (other[e412] * self[e35])
                - (other[e415] * self[e23])
                - (other[e425] * self[e31])
                - (other[e435] * self[e12])
                - (other[e321] * self[e45])
                - (other[e235] * self[e41])
                - (other[e315] * self[e42])
                - (other[e125] * self[e43]),
        );
        let right_anti_dual = DipoleInversion::from_groups(
            // e41, e42, e43
            other.group0(),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            other.group3() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group3(),
        );
    }
}
impl RejectOrthogonallyFrom<AntiDualNum> for Dipole {
    type Output = FlatPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        4        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        0        7        0
    //  no simd        0       16        0
    fn reject_orthogonally_from(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let right_anti_dual = DualNum::from_groups(/* e5, e12345 */ other.group0());
        return FlatPoint::from_groups(
            // e15, e25, e35, e45
            right_anti_dual.group0().xx().with_zw(right_anti_dual[e5], 0.0)
                * Simd32x3::from(1.0).with_w(0.0)
                * Simd32x4::from([other[e3215] * self[e41], other[e3215] * self[e42], other[e3215] * self[e43], other[e3215] * self[e45]])
                    .xyz()
                    .with_w(0.0)
                * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
        );
    }
}
impl RejectOrthogonallyFrom<AntiFlatPoint> for Dipole {
    type Output = FlatPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        5        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        3        6        0
    //  no simd        3        9        0
    fn reject_orthogonally_from(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return FlatPoint::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(-(other[e235] * self[e41]) - (other[e315] * self[e42]) - (other[e125] * self[e43]) - (other[e321] * self[e45]))
                * Simd32x4::from([other[e235], other[e315], other[e125], other[e321] * -1.0]),
        );
    }
}
impl RejectOrthogonallyFrom<AntiFlector> for Dipole {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        4        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        3        8        0
    //  no simd        3       20        0
    fn reject_orthogonally_from(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Scalar::from_groups(
            // scalar
            -(other[e235] * self[e41]) - (other[e315] * self[e42]) - (other[e125] * self[e43]) - (other[e321] * self[e45]),
        );
        let right_anti_dual = Flector::from_groups(
            // e15, e25, e35, e45
            other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1(),
        );
    }
}
impl RejectOrthogonallyFrom<AntiMotor> for Dipole {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        6        0
    //    simd3        0        1        0
    //    simd4        1        6        0
    // Totals...
    // yes simd        2       13        0
    //  no simd        5       33        0
    fn reject_orthogonally_from(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiPlane::from_groups(/* e1, e2, e3, e5 */ (self.group0() * other.group1().www()).with_w(other[e3215] * self[e45]));
        let right_anti_dual = Motor::from_groups(
            // e415, e425, e435, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x3::from(1.0).with_w(0.0) * right_anti_dual.group1().www().with_w(0.0) * anti_wedge.group0().xyz().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                anti_wedge[e3] * right_anti_dual[e425],
                anti_wedge[e1] * right_anti_dual[e435],
                anti_wedge[e2] * right_anti_dual[e415],
                -(anti_wedge[e2] * right_anti_dual[e315]) - (anti_wedge[e3] * right_anti_dual[e125]),
            ]) - (anti_wedge.group0().yzxx() * right_anti_dual.group0().zxy().with_w(right_anti_dual[e235])),
        );
    }
}
impl RejectOrthogonallyFrom<AntiScalar> for Dipole {
    type Output = Dipole;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd3        0        4        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        7        0
    //  no simd        0       21        0
    fn reject_orthogonally_from(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[e12345]) * self.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other[e12345]) * self.group1(),
            // e15, e25, e35
            Simd32x3::from(other[e12345]) * self.group2(),
        );
        let right_anti_dual = Scalar::from_groups(/* scalar */ other[e12345] * -1.0);
        return Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1(),
            // e15, e25, e35
            Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group2(),
        );
    }
}
impl RejectOrthogonallyFrom<Circle> for Dipole {
    type Output = Dipole;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       10        0
    //    simd3        0        2        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        9       14        0
    //  no simd        9       24        0
    fn reject_orthogonally_from(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Scalar::from_groups(
            // scalar
            -(other[e423] * self[e15])
                - (other[e431] * self[e25])
                - (other[e412] * self[e35])
                - (other[e415] * self[e23])
                - (other[e425] * self[e31])
                - (other[e435] * self[e12])
                - (other[e321] * self[e45])
                - (other[e235] * self[e41])
                - (other[e315] * self[e42])
                - (other[e125] * self[e43]),
        );
        let right_anti_dual = Dipole::from_groups(
            // e41, e42, e43
            other.group0(),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35
            other.group2(),
        );
        return Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1(),
            // e15, e25, e35
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group2(),
        );
    }
}
impl RejectOrthogonallyFrom<CircleRotor> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       29       40        0
    //    simd3        1        4        0
    //    simd4        3        7        0
    // Totals...
    // yes simd       33       51        0
    //  no simd       44       80        0
    fn reject_orthogonally_from(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[e12345]) * self.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other[e12345]) * self.group1(),
            // e15, e25, e35, scalar
            Simd32x4::from([other[e12345], other[e12345], other[e12345], 1.0])
                * self.group2().with_w(
                    -(other[e423] * self[e15])
                        - (other[e431] * self[e25])
                        - (other[e412] * self[e35])
                        - (other[e415] * self[e23])
                        - (other[e425] * self[e31])
                        - (other[e435] * self[e12])
                        - (other[e321] * self[e45])
                        - (other[e235] * self[e41])
                        - (other[e315] * self[e42])
                        - (other[e125] * self[e43]),
                ),
        );
        let right_anti_dual = AntiCircleRotor::from_groups(
            // e41, e42, e43
            other.group0(),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, scalar
            other.group2() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0()) + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group0()))
                .with_w(anti_wedge[scalar] * right_anti_dual[scalar]),
            // e23, e31, e12, e45
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1()) + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (anti_wedge[e15] * right_anti_dual[scalar]) + (anti_wedge[scalar] * right_anti_dual[e15]),
                (anti_wedge[e25] * right_anti_dual[scalar]) + (anti_wedge[scalar] * right_anti_dual[e25]),
                (anti_wedge[e35] * right_anti_dual[scalar]) + (anti_wedge[scalar] * right_anti_dual[e35]),
                -(anti_wedge[e41] * right_anti_dual[e23])
                    - (anti_wedge[e42] * right_anti_dual[e31])
                    - (anti_wedge[e43] * right_anti_dual[e12])
                    - (anti_wedge[e23] * right_anti_dual[e41])
                    - (anti_wedge[e31] * right_anti_dual[e42])
                    - (anti_wedge[e12] * right_anti_dual[e43]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (anti_wedge[e42] * right_anti_dual[e35])
                    + (anti_wedge[e23] * right_anti_dual[e45])
                    + (anti_wedge[e45] * right_anti_dual[e23])
                    + (anti_wedge[e35] * right_anti_dual[e42]),
                (anti_wedge[e43] * right_anti_dual[e15])
                    + (anti_wedge[e31] * right_anti_dual[e45])
                    + (anti_wedge[e45] * right_anti_dual[e31])
                    + (anti_wedge[e15] * right_anti_dual[e43]),
                (anti_wedge[e41] * right_anti_dual[e25])
                    + (anti_wedge[e12] * right_anti_dual[e45])
                    + (anti_wedge[e45] * right_anti_dual[e12])
                    + (anti_wedge[e25] * right_anti_dual[e41]),
                -(anti_wedge[e12] * right_anti_dual[e35])
                    - (anti_wedge[e15] * right_anti_dual[e23])
                    - (anti_wedge[e25] * right_anti_dual[e31])
                    - (anti_wedge[e35] * right_anti_dual[e12]),
            ]) - (right_anti_dual.group2().yzxx() * anti_wedge.group0().zxy().with_w(anti_wedge[e23]))
                - (right_anti_dual.group0().zxy() * anti_wedge.group2().yzx()).with_w(anti_wedge[e31] * right_anti_dual[e25]),
        );
    }
}
impl RejectOrthogonallyFrom<DipoleInversion> for Dipole {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       31        0
    //    simd3        1        5        0
    //    simd4        6        8        0
    // Totals...
    // yes simd       20       44        0
    //  no simd       40       78        0
    fn reject_orthogonally_from(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = RoundPoint::from_groups(
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e41] * other[e3215]) + (self[e31] * other[e4125]),
                (self[e42] * other[e3215]) + (self[e12] * other[e4235]),
                (self[e43] * other[e3215]) + (self[e23] * other[e4315]),
                -(self[e43] * other[e4125]) - (self[e45] * other[e1234]),
            ]) - (other.group3().yzxy() * self.group1().zxy().with_w(self[e42]))
                - (self.group2() * other.group2().www()).with_w(self[e41] * other[e4235]),
            // e5
            (self[e45] * other[e3215]) + (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]),
        );
        let right_anti_dual = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e4
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group3() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group3().xyz()) - (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group0().xyz()),
            // e23, e31, e12, e45
            (right_anti_dual.group3().zxyw() * anti_wedge.group0().yzxw())
                - (right_anti_dual.group3().yzx() * anti_wedge.group0().zxy()).with_w(right_anti_dual[e4] * anti_wedge[e5]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                right_anti_dual[e1] * anti_wedge[e5] * -1.0,
                right_anti_dual[e2] * anti_wedge[e5] * -1.0,
                right_anti_dual[e3] * anti_wedge[e5] * -1.0,
                (right_anti_dual[e431] * anti_wedge[e2]) + (right_anti_dual[e412] * anti_wedge[e3]) + (right_anti_dual[e321] * anti_wedge[e4]),
            ]) + (anti_wedge.group0().xyzx() * right_anti_dual.group3().www().with_w(right_anti_dual[e423])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (right_anti_dual[e425] * anti_wedge[e3]) + (right_anti_dual[e235] * anti_wedge[e4]),
                (right_anti_dual[e435] * anti_wedge[e1]) + (right_anti_dual[e315] * anti_wedge[e4]),
                (right_anti_dual[e415] * anti_wedge[e2]) + (right_anti_dual[e125] * anti_wedge[e4]),
                -(right_anti_dual[e315] * anti_wedge[e2]) - (right_anti_dual[e125] * anti_wedge[e3]),
            ]) - (Simd32x4::from(anti_wedge[e5]) * right_anti_dual.group0().with_w(right_anti_dual[e321]))
                - (anti_wedge.group0().yzxx() * right_anti_dual.group1().zxy().with_w(right_anti_dual[e235])),
        );
    }
}
impl RejectOrthogonallyFrom<DualNum> for Dipole {
    type Output = Dipole;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd2        0        1        0
    //    simd3        0        4        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        7        0
    //  no simd        0       22        0
    fn reject_orthogonally_from(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[e12345]) * self.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other[e12345]) * self.group1(),
            // e15, e25, e35
            Simd32x3::from(other[e12345]) * self.group2(),
        );
        let right_anti_dual = AntiDualNum::from_groups(/* e3215, scalar */ other.group0() * Simd32x2::from(-1.0));
        return Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1(),
            // e15, e25, e35
            Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group2(),
        );
    }
}
impl RejectOrthogonallyFrom<Flector> for Dipole {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       18        0
    //    simd3        2        5        0
    //    simd4        1        4        0
    // Totals...
    // yes simd       13       27        0
    //  no simd       20       49        0
    fn reject_orthogonally_from(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = RoundPoint::from_groups(
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e41] * other[e3215]) + (self[e31] * other[e4125]),
                (self[e42] * other[e3215]) + (self[e12] * other[e4235]),
                (self[e43] * other[e3215]) + (self[e23] * other[e4315]),
                -(self[e42] * other[e4315]) - (self[e43] * other[e4125]),
            ]) - (other.group1().yzxx() * self.group1().zxy().with_w(self[e41])),
            // e5
            (self[e45] * other[e3215]) + (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]),
        );
        let right_anti_dual = AntiFlector::from_groups(
            // e235, e315, e125, e321
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group1().xyz(),
            // e23, e31, e12, e45
            ((right_anti_dual.group1().zxy() * anti_wedge.group0().yzx()) - (right_anti_dual.group1().yzx() * anti_wedge.group0().zxy()))
                .with_w(right_anti_dual[e5] * anti_wedge[e4]),
            // e15, e25, e35, e1234
            ((Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group0().xyz()) - (Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group1().xyz()))
                .with_w(right_anti_dual[e321] * anti_wedge[e4]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([anti_wedge[e4], anti_wedge[e4], anti_wedge[e4], 1.0])
                * right_anti_dual.group0().xyz().with_w(
                    -(right_anti_dual[e235] * anti_wedge[e1])
                        - (right_anti_dual[e315] * anti_wedge[e2])
                        - (right_anti_dual[e125] * anti_wedge[e3])
                        - (right_anti_dual[e321] * anti_wedge[e5]),
                ),
        );
    }
}
impl RejectOrthogonallyFrom<Line> for Dipole {
    type Output = AntiLine;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5        6        0
    //    simd3        0        2        0
    // Totals...
    // yes simd        5        8        0
    //  no simd        5       12        0
    fn reject_orthogonally_from(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Scalar::from_groups(
            // scalar
            -(self[e41] * other[e235]) - (self[e42] * other[e315]) - (self[e43] * other[e125]) - (self[e23] * other[e415]) - (self[e31] * other[e425]) - (self[e12] * other[e435]),
        );
        let right_anti_dual = AntiLine::from_groups(/* e23, e31, e12 */ other.group0(), /* e15, e25, e35 */ other.group1());
        return AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e15, e25, e35
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group1(),
        );
    }
}
impl RejectOrthogonallyFrom<Motor> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       24        0
    //    simd3        1        3        0
    //    simd4        2        7        0
    // Totals...
    // yes simd       17       34        0
    //  no simd       25       61        0
    fn reject_orthogonally_from(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[e12345]) * self.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other[e12345]) * self.group1(),
            // e15, e25, e35, scalar
            Simd32x4::from([other[e12345], other[e12345], other[e12345], 1.0])
                * self.group2().with_w(
                    -(self[e41] * other[e235])
                        - (self[e42] * other[e315])
                        - (self[e43] * other[e125])
                        - (self[e23] * other[e415])
                        - (self[e31] * other[e425])
                        - (self[e12] * other[e435]),
                ),
        );
        let right_anti_dual = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e3215
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group0().with_w(anti_wedge[scalar]),
            // e23, e31, e12, e45
            ((Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0().xyz()) + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group1().xyz()))
                .with_w(anti_wedge[e45] * right_anti_dual[scalar]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (anti_wedge[e15] * right_anti_dual[scalar]) + (anti_wedge[scalar] * right_anti_dual[e15]),
                (anti_wedge[e25] * right_anti_dual[scalar]) + (anti_wedge[scalar] * right_anti_dual[e25]),
                (anti_wedge[e35] * right_anti_dual[scalar]) + (anti_wedge[scalar] * right_anti_dual[e35]),
                -(anti_wedge[e41] * right_anti_dual[e23]) - (anti_wedge[e42] * right_anti_dual[e31]) - (anti_wedge[e43] * right_anti_dual[e12]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                anti_wedge[e45] * right_anti_dual[e23],
                anti_wedge[e45] * right_anti_dual[e31],
                anti_wedge[e45] * right_anti_dual[e12],
                -(anti_wedge[e31] * right_anti_dual[e25])
                    - (anti_wedge[e12] * right_anti_dual[e35])
                    - (anti_wedge[e15] * right_anti_dual[e23])
                    - (anti_wedge[e25] * right_anti_dual[e31])
                    - (anti_wedge[e35] * right_anti_dual[e12]),
            ]) + (right_anti_dual.group1().zxyw() * anti_wedge.group0().yzx().with_w(anti_wedge[scalar]))
                - (right_anti_dual.group1().yzxx() * anti_wedge.group0().zxy().with_w(anti_wedge[e23])),
        );
    }
}
impl RejectOrthogonallyFrom<MultiVector> for Dipole {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       87      115        0
    //    simd2        0        1        0
    //    simd3       20       36        0
    //    simd4       22       20        0
    // Totals...
    // yes simd      129      172        0
    //  no simd      235      305        0
    fn reject_orthogonally_from(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                -(self[e41] * other[e235])
                    - (self[e42] * other[e315])
                    - (self[e43] * other[e125])
                    - (self[e23] * other[e415])
                    - (self[e31] * other[e425])
                    - (self[e12] * other[e435])
                    - (self[e45] * other[e321])
                    - (self[e15] * other[e423])
                    - (self[e25] * other[e431])
                    - (self[e35] * other[e412]),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e41] * other[e3215]) + (self[e31] * other[e4125]),
                (self[e42] * other[e3215]) + (self[e12] * other[e4235]),
                (self[e43] * other[e3215]) + (self[e23] * other[e4315]),
                -(self[e43] * other[e4125]) - (self[e45] * other[e1234]),
            ]) - (Simd32x4::from([other[e1234], other[e1234], other[e1234], other[e4235]]) * self.group2().with_w(self[e41]))
                - (other.group9().yzxy() * self.group1().zxy().with_w(self[e42])),
            // e5
            (self[e45] * other[e3215]) + (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]),
            // e15, e25, e35, e45
            Simd32x4::from(other[e12345]) * self.group2().with_w(self[e45]),
            // e41, e42, e43
            Simd32x3::from(other[e12345]) * self.group0(),
            // e23, e31, e12
            Simd32x3::from(other[e12345]) * self.group1().xyz(),
            // e415, e425, e435, e321
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(0.0),
            // e1234
            0.0,
        );
        let right_anti_dual = MultiVector::from_groups(
            // scalar, e12345
            other.group0().yx() * Simd32x2::from([-1.0, 1.0]),
            // e1, e2, e3, e4
            other.group9().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e5
            other[e3215],
            // e15, e25, e35, e45
            other.group8().with_w(other[e321] * -1.0),
            // e41, e42, e43
            other.group7(),
            // e23, e31, e12
            other.group6().xyz(),
            // e415, e425, e435, e321
            other.group5().with_w(other[e45]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e423, e431, e412
            other.group4() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group3().xyz() * Simd32x3::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group1().xyz().with_w(other[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1234
            other[e4] * -1.0,
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                anti_wedge[scalar] * right_anti_dual[scalar],
                (anti_wedge[scalar] * right_anti_dual[e12345])
                    + (anti_wedge[e12345] * right_anti_dual[scalar])
                    + (anti_wedge[e1] * right_anti_dual[e4235])
                    + (anti_wedge[e2] * right_anti_dual[e4315])
                    + (anti_wedge[e3] * right_anti_dual[e4125])
                    + (anti_wedge[e4] * right_anti_dual[e3215])
                    + (anti_wedge[e5] * right_anti_dual[e1234])
                    + (anti_wedge[e4235] * right_anti_dual[e1])
                    + (anti_wedge[e4315] * right_anti_dual[e2])
                    + (anti_wedge[e4125] * right_anti_dual[e3])
                    + (anti_wedge[e3215] * right_anti_dual[e4])
                    + (anti_wedge[e1234] * right_anti_dual[e5])
                    - (anti_wedge[e15] * right_anti_dual[e423])
                    - (anti_wedge[e25] * right_anti_dual[e431])
                    - (anti_wedge[e35] * right_anti_dual[e412])
                    - (anti_wedge[e45] * right_anti_dual[e321])
                    - (anti_wedge[e41] * right_anti_dual[e235])
                    - (anti_wedge[e42] * right_anti_dual[e315])
                    - (anti_wedge[e43] * right_anti_dual[e125])
                    - (anti_wedge[e23] * right_anti_dual[e415])
                    - (anti_wedge[e31] * right_anti_dual[e425])
                    - (anti_wedge[e12] * right_anti_dual[e435])
                    - (anti_wedge[e415] * right_anti_dual[e23])
                    - (anti_wedge[e425] * right_anti_dual[e31])
                    - (anti_wedge[e435] * right_anti_dual[e12])
                    - (anti_wedge[e321] * right_anti_dual[e45])
                    - (anti_wedge[e423] * right_anti_dual[e15])
                    - (anti_wedge[e431] * right_anti_dual[e25])
                    - (anti_wedge[e412] * right_anti_dual[e35])
                    - (anti_wedge[e235] * right_anti_dual[e41])
                    - (anti_wedge[e315] * right_anti_dual[e42])
                    - (anti_wedge[e125] * right_anti_dual[e43]),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1()) + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1()),
            // e5
            (anti_wedge[scalar] * right_anti_dual[e5]) + (anti_wedge[e5] * right_anti_dual[scalar]),
            // e15, e25, e35, e45
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group3())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group3())
                + (Simd32x4::from(right_anti_dual[e5]) * anti_wedge.group1())
                - (Simd32x4::from(anti_wedge[e5]) * right_anti_dual.group1()),
            // e41, e42, e43
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group4())
                + (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group1().xyz())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group4())
                - (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group1().xyz()),
            // e23, e31, e12
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group5())
                + (anti_wedge.group1().yzx() * right_anti_dual.group1().zxy())
                - (anti_wedge.group1().zxy() * right_anti_dual.group1().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (anti_wedge[e4] * right_anti_dual[e15])
                    + (anti_wedge[e5] * right_anti_dual[e41])
                    + (anti_wedge[e15] * right_anti_dual[e4])
                    + (anti_wedge[e41] * right_anti_dual[e5]),
                (anti_wedge[e4] * right_anti_dual[e25])
                    + (anti_wedge[e5] * right_anti_dual[e42])
                    + (anti_wedge[e25] * right_anti_dual[e4])
                    + (anti_wedge[e42] * right_anti_dual[e5]),
                (anti_wedge[e4] * right_anti_dual[e35])
                    + (anti_wedge[e5] * right_anti_dual[e43])
                    + (anti_wedge[e35] * right_anti_dual[e4])
                    + (anti_wedge[e43] * right_anti_dual[e5]),
                -(anti_wedge[e1] * right_anti_dual[e23])
                    - (anti_wedge[e2] * right_anti_dual[e31])
                    - (anti_wedge[e3] * right_anti_dual[e12])
                    - (anti_wedge[e12] * right_anti_dual[e3]),
            ]) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group6())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group6())
                - (right_anti_dual.group1().xyzy() * anti_wedge.group3().www().with_w(anti_wedge[e31]))
                - (right_anti_dual.group3().www() * anti_wedge.group1().xyz()).with_w(anti_wedge[e23] * right_anti_dual[e1]),
            // e423, e431, e412
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group7())
                + (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group7())
                + (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group5())
                + (anti_wedge.group4().yzx() * right_anti_dual.group1().zxy())
                + (right_anti_dual.group4().yzx() * anti_wedge.group1().zxy())
                - (anti_wedge.group4().zxy() * right_anti_dual.group1().yzx())
                - (right_anti_dual.group4().zxy() * anti_wedge.group1().yzx()),
            // e235, e315, e125
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group8())
                + (Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group8())
                + (Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group5())
                + (anti_wedge.group1().yzx() * right_anti_dual.group3().zxy())
                + (anti_wedge.group3().zxy() * right_anti_dual.group1().yzx())
                - (anti_wedge.group1().zxy() * right_anti_dual.group3().yzx())
                - (anti_wedge.group3().yzx() * right_anti_dual.group1().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (anti_wedge[e3] * right_anti_dual[e425])
                    + (anti_wedge[e4] * right_anti_dual[e235])
                    + (anti_wedge[e45] * right_anti_dual[e23])
                    + (anti_wedge[e435] * right_anti_dual[e2]),
                (anti_wedge[e1] * right_anti_dual[e435])
                    + (anti_wedge[e4] * right_anti_dual[e315])
                    + (anti_wedge[e45] * right_anti_dual[e31])
                    + (anti_wedge[e415] * right_anti_dual[e3]),
                (anti_wedge[e2] * right_anti_dual[e415])
                    + (anti_wedge[e4] * right_anti_dual[e125])
                    + (anti_wedge[e45] * right_anti_dual[e12])
                    + (anti_wedge[e425] * right_anti_dual[e1]),
                -(anti_wedge[e1] * right_anti_dual[e235])
                    - (anti_wedge[e2] * right_anti_dual[e315])
                    - (anti_wedge[e3] * right_anti_dual[e125])
                    - (anti_wedge[e5] * right_anti_dual[e321]),
            ]) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group9())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group9())
                + (Simd32x4::from([right_anti_dual[e5], right_anti_dual[e5], right_anti_dual[e5], right_anti_dual[e3]]) * anti_wedge.group7().with_w(anti_wedge[e125]))
                + (anti_wedge.group5() * right_anti_dual.group3().www()).with_w(anti_wedge[e315] * right_anti_dual[e2])
                + (anti_wedge.group4().yzx() * right_anti_dual.group3().zxy()).with_w(anti_wedge[e235] * right_anti_dual[e1])
                + (right_anti_dual.group4().yzx() * anti_wedge.group3().zxy()).with_w(anti_wedge[e321] * right_anti_dual[e5])
                - (Simd32x4::from([anti_wedge[e5], anti_wedge[e5], anti_wedge[e5], anti_wedge[e15]]) * right_anti_dual.group7().with_w(right_anti_dual[e23]))
                - (right_anti_dual.group3().yzxx() * anti_wedge.group4().zxy().with_w(anti_wedge[e23]))
                - (anti_wedge.group8() * right_anti_dual.group1().www()).with_w(anti_wedge[e31] * right_anti_dual[e25])
                - (right_anti_dual.group4().zxy() * anti_wedge.group3().yzx()).with_w(anti_wedge[e12] * right_anti_dual[e35])
                - (anti_wedge.group1().yzx() * right_anti_dual.group6().zxy()).with_w(anti_wedge[e25] * right_anti_dual[e31])
                - (anti_wedge.group6().yzx() * right_anti_dual.group1().zxy()).with_w(anti_wedge[e35] * right_anti_dual[e12]),
            // e1234
            (anti_wedge[scalar] * right_anti_dual[e1234])
                + (anti_wedge[e1] * right_anti_dual[e423])
                + (anti_wedge[e2] * right_anti_dual[e431])
                + (anti_wedge[e3] * right_anti_dual[e412])
                + (anti_wedge[e4] * right_anti_dual[e321])
                + (anti_wedge[e1234] * right_anti_dual[scalar])
                - (anti_wedge[e41] * right_anti_dual[e23])
                - (anti_wedge[e42] * right_anti_dual[e31])
                - (anti_wedge[e43] * right_anti_dual[e12])
                - (anti_wedge[e23] * right_anti_dual[e41])
                - (anti_wedge[e31] * right_anti_dual[e42])
                - (anti_wedge[e12] * right_anti_dual[e43])
                - (anti_wedge[e321] * right_anti_dual[e4])
                - (anti_wedge[e423] * right_anti_dual[e1])
                - (anti_wedge[e431] * right_anti_dual[e2])
                - (anti_wedge[e412] * right_anti_dual[e3]),
        );
    }
}
impl RejectOrthogonallyFrom<Plane> for Dipole {
    type Output = Dipole;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       13        0
    //    simd3        2        5        0
    //    simd4        1        2        0
    // Totals...
    // yes simd       10       20        0
    //  no simd       17       36        0
    fn reject_orthogonally_from(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = RoundPoint::from_groups(
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e41] * other[e3215]) + (self[e31] * other[e4125]),
                (self[e42] * other[e3215]) + (self[e12] * other[e4235]),
                (self[e43] * other[e3215]) + (self[e23] * other[e4315]),
                -(self[e42] * other[e4315]) - (self[e43] * other[e4125]),
            ]) - (other.group0().yzxx() * self.group1().zxy().with_w(self[e41])),
            // e5
            (self[e45] * other[e3215]) + (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]),
        );
        let right_anti_dual = AntiPlane::from_groups(/* e1, e2, e3, e5 */ other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]));
        return Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group0().xyz(),
            // e23, e31, e12, e45
            ((right_anti_dual.group0().zxy() * anti_wedge.group0().yzx()) - (right_anti_dual.group0().yzx() * anti_wedge.group0().zxy()))
                .with_w(right_anti_dual[e5] * anti_wedge[e4]),
            // e15, e25, e35
            (Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group0().xyz()) - (Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group0().xyz()),
        );
    }
}
impl RejectOrthogonallyFrom<Sphere> for Dipole {
    type Output = Dipole;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       13        0
    //    simd3        2        5        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       12       22        0
    //  no simd       25       44        0
    fn reject_orthogonally_from(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = RoundPoint::from_groups(
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e41] * other[e3215]) + (self[e31] * other[e4125]),
                (self[e42] * other[e3215]) + (self[e12] * other[e4235]),
                (self[e43] * other[e3215]) + (self[e23] * other[e4315]),
                -(self[e43] * other[e4125]) - (self[e45] * other[e1234]),
            ]) - (Simd32x4::from([other[e1234], other[e1234], other[e1234], other[e4235]]) * self.group2().with_w(self[e41]))
                - (other.group0().yzxy() * self.group1().zxy().with_w(self[e42])),
            // e5
            (self[e45] * other[e3215]) + (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]),
        );
        let right_anti_dual = RoundPoint::from_groups(
            // e1, e2, e3, e4
            other.group0().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e5
            other[e3215],
        );
        return Dipole::from_groups(
            // e41, e42, e43
            (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group0().xyz()) - (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group0().xyz()),
            // e23, e31, e12, e45
            (anti_wedge.group0().yzxw() * right_anti_dual.group0().zxy().with_w(right_anti_dual[e5]))
                - (anti_wedge.group0().zxy() * right_anti_dual.group0().yzx()).with_w(anti_wedge[e5] * right_anti_dual[e4]),
            // e15, e25, e35
            (Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group0().xyz()) - (Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group0().xyz()),
        );
    }
}
impl RejectOrthogonallyFrom<VersorEven> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       26       38        0
    //    simd3        1        5        0
    //    simd4        5       10        0
    // Totals...
    // yes simd       32       53        0
    //  no simd       49       93        0
    fn reject_orthogonally_from(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[e12345]) * self.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other[e12345]) * self.group1(),
            // e15, e25, e35, scalar
            Simd32x4::from([other[e12345], other[e12345], other[e12345], 1.0])
                * self.group2().with_w(
                    -(self[e41] * other[e235])
                        - (self[e42] * other[e315])
                        - (self[e43] * other[e125])
                        - (self[e23] * other[e415])
                        - (self[e31] * other[e425])
                        - (self[e12] * other[e435])
                        - (self[e45] * other[e321])
                        - (self[e15] * other[e423])
                        - (self[e25] * other[e431])
                        - (self[e35] * other[e412]),
                ),
        );
        let right_anti_dual = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e1234
            other.group2().xyz().with_w(other[e4]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            other.group3().xyz().with_w(other[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0().xyz()) + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group0()))
                .with_w(anti_wedge[scalar] * right_anti_dual[scalar]),
            // e23, e31, e12, e45
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1()) + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                anti_wedge[scalar] * right_anti_dual[e15],
                anti_wedge[scalar] * right_anti_dual[e25],
                anti_wedge[scalar] * right_anti_dual[e35],
                -(anti_wedge[e41] * right_anti_dual[e23])
                    - (anti_wedge[e42] * right_anti_dual[e31])
                    - (anti_wedge[e43] * right_anti_dual[e12])
                    - (anti_wedge[e23] * right_anti_dual[e41])
                    - (anti_wedge[e31] * right_anti_dual[e42])
                    - (anti_wedge[e12] * right_anti_dual[e43]),
            ]) + (anti_wedge.group2() * right_anti_dual.group0().www().with_w(right_anti_dual[e1234])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (anti_wedge[e23] * right_anti_dual[e45])
                    + (anti_wedge[e45] * right_anti_dual[e23])
                    + (anti_wedge[e35] * right_anti_dual[e42])
                    + (anti_wedge[scalar] * right_anti_dual[e4235]),
                (anti_wedge[e31] * right_anti_dual[e45])
                    + (anti_wedge[e45] * right_anti_dual[e31])
                    + (anti_wedge[e15] * right_anti_dual[e43])
                    + (anti_wedge[scalar] * right_anti_dual[e4315]),
                (anti_wedge[e12] * right_anti_dual[e45])
                    + (anti_wedge[e45] * right_anti_dual[e12])
                    + (anti_wedge[e25] * right_anti_dual[e41])
                    + (anti_wedge[scalar] * right_anti_dual[e4125]),
                -(anti_wedge[e12] * right_anti_dual[e35])
                    - (anti_wedge[e15] * right_anti_dual[e23])
                    - (anti_wedge[e25] * right_anti_dual[e31])
                    - (anti_wedge[e35] * right_anti_dual[e12]),
            ]) + (anti_wedge.group0().yzx() * right_anti_dual.group2().zxy()).with_w(anti_wedge[scalar] * right_anti_dual[e3215])
                - (right_anti_dual.group2().yzxx() * anti_wedge.group0().zxy().with_w(anti_wedge[e23]))
                - (anti_wedge.group2().yzx() * right_anti_dual.group0().zxy()).with_w(anti_wedge[e31] * right_anti_dual[e25]),
        );
    }
}
impl RejectOrthogonallyFrom<VersorOdd> for Dipole {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       31        0
    //    simd3        1        4        0
    //    simd4        6        9        0
    // Totals...
    // yes simd       20       44        0
    //  no simd       40       79        0
    fn reject_orthogonally_from(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = RoundPoint::from_groups(
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e41] * other[e3215]) + (self[e31] * other[e4125]),
                (self[e42] * other[e3215]) + (self[e12] * other[e4235]),
                (self[e43] * other[e3215]) + (self[e23] * other[e4315]),
                -(self[e43] * other[e4125]) - (self[e45] * other[e1234]),
            ]) - (other.group3().yzxy() * self.group1().zxy().with_w(self[e42]))
                - (self.group2() * other.group2().www()).with_w(self[e41] * other[e4235]),
            // e5
            (self[e45] * other[e3215]) + (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]),
        );
        let right_anti_dual = VersorEven::from_groups(
            // e423, e431, e412, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            other.group2().xyz().with_w(other[e3215]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e4
            other.group3().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group3().xyz()) - (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group0().xyz()),
            // e23, e31, e12, e45
            (anti_wedge.group0().yzxw() * right_anti_dual.group3().zxy().with_w(right_anti_dual[e5]))
                - (anti_wedge.group0().zxy() * right_anti_dual.group3().yzx()).with_w(anti_wedge[e5] * right_anti_dual[e4]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                anti_wedge[e5] * right_anti_dual[e1] * -1.0,
                anti_wedge[e5] * right_anti_dual[e2] * -1.0,
                anti_wedge[e5] * right_anti_dual[e3] * -1.0,
                (anti_wedge[e2] * right_anti_dual[e431]) + (anti_wedge[e3] * right_anti_dual[e412]) + (anti_wedge[e4] * right_anti_dual[e321]),
            ]) + (anti_wedge.group0().xyzx() * right_anti_dual.group2().www().with_w(right_anti_dual[e423])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (anti_wedge[e3] * right_anti_dual[e425]) + (anti_wedge[e4] * right_anti_dual[e235]),
                (anti_wedge[e1] * right_anti_dual[e435]) + (anti_wedge[e4] * right_anti_dual[e315]),
                (anti_wedge[e2] * right_anti_dual[e415]) + (anti_wedge[e4] * right_anti_dual[e125]),
                -(anti_wedge[e3] * right_anti_dual[e125]) - (anti_wedge[e5] * right_anti_dual[e321]),
            ]) - (Simd32x4::from([anti_wedge[e5], anti_wedge[e5], anti_wedge[e5], right_anti_dual[e315]]) * right_anti_dual.group0().xyz().with_w(anti_wedge[e2]))
                - (anti_wedge.group0().yzxx() * right_anti_dual.group1().zxy().with_w(right_anti_dual[e235])),
        );
    }
}
impl std::ops::Div<reject_orthogonally_from> for DipoleInversion {
    type Output = reject_orthogonally_from_partial<DipoleInversion>;
    fn div(self, _rhs: reject_orthogonally_from) -> Self::Output {
        reject_orthogonally_from_partial(self)
    }
}
impl RejectOrthogonallyFrom<AntiCircleRotor> for DipoleInversion {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       25        0
    //    simd3        0        2        0
    //    simd4        4        5        0
    // Totals...
    // yes simd       18       32        0
    //  no simd       30       51        0
    fn reject_orthogonally_from(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = RoundPoint::from_groups(
            // e1, e2, e3, e4
            Simd32x4::from([
                -(other[e41] * self[e3215]) - (other[e31] * self[e4125]),
                -(other[e42] * self[e3215]) - (other[e12] * self[e4235]),
                -(other[e43] * self[e3215]) - (other[e23] * self[e4315]),
                (other[e43] * self[e4125]) + (other[e45] * self[e1234]),
            ]) + (self.group3().yzxx() * other.group1().zxy().with_w(other[e41]))
                + (self.group2().www() * other.group2().xyz()).with_w(other[e42] * self[e4315]),
            // e5
            -(other[e45] * self[e3215]) - (other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]),
        );
        let right_anti_dual = CircleRotor::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e12345
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (right_anti_dual[e425] * anti_wedge[e3]) + (right_anti_dual[e235] * anti_wedge[e4]),
                (right_anti_dual[e435] * anti_wedge[e1]) + (right_anti_dual[e315] * anti_wedge[e4]),
                (right_anti_dual[e415] * anti_wedge[e2]) + (right_anti_dual[e125] * anti_wedge[e4]),
                -(right_anti_dual[e315] * anti_wedge[e2]) - (right_anti_dual[e125] * anti_wedge[e3]),
            ]) - (Simd32x4::from(anti_wedge[e5]) * right_anti_dual.group0().with_w(right_anti_dual[e321]))
                - (anti_wedge.group0().yzxx() * right_anti_dual.group1().zxy().with_w(right_anti_dual[e235])),
            // e1234
            (right_anti_dual[e423] * anti_wedge[e1])
                + (right_anti_dual[e431] * anti_wedge[e2])
                + (right_anti_dual[e412] * anti_wedge[e3])
                + (right_anti_dual[e321] * anti_wedge[e4]),
        );
    }
}
impl RejectOrthogonallyFrom<AntiDipoleInversion> for DipoleInversion {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       33       46        0
    //    simd3        2        7        0
    //    simd4        7        9        0
    // Totals...
    // yes simd       42       62        0
    //  no simd       67      103        0
    fn reject_orthogonally_from(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiCircleRotor::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[e1234]) * other.group1().xyz()) + (other.group0().zxy() * self.group3().yzx()) - (other.group0().yzx() * self.group3().zxy()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e423] * self[e3215]) + (other[e235] * self[e1234]),
                (other[e431] * self[e3215]) + (other[e315] * self[e1234]),
                (other[e412] * self[e3215]) + (other[e125] * self[e1234]),
                -(other[e425] * self[e4315]) - (other[e435] * self[e4125]),
            ]) - (other.group1().wwwx() * self.group3().xyzx()),
            // e15, e25, e35, scalar
            (Simd32x4::from(self[e3215]) * other.group1().xyz().with_w(other[e4]))
                + (self.group3().zxyx() * other.group2().yzx().with_w(other[e1]))
                + Simd32x3::from(0.0).with_w(
                    (other[e2] * self[e4315]) + (other[e3] * self[e4125]) + (other[e5] * self[e1234])
                        - (other[e431] * self[e25])
                        - (other[e412] * self[e35])
                        - (other[e415] * self[e23])
                        - (other[e425] * self[e31])
                        - (other[e435] * self[e12])
                        - (other[e321] * self[e45])
                        - (other[e235] * self[e41])
                        - (other[e315] * self[e42])
                        - (other[e125] * self[e43]),
                )
                - (other.group2().zxy() * self.group3().yzx()).with_w(other[e423] * self[e15]),
        );
        let right_anti_dual = DipoleInversion::from_groups(
            // e41, e42, e43
            other.group0(),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            other.group3() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from([right_anti_dual[e15], right_anti_dual[e25], right_anti_dual[e35], 1.0])
                * anti_wedge.group2().www().with_w(
                    (anti_wedge[scalar] * right_anti_dual[e1234])
                        - (anti_wedge[e41] * right_anti_dual[e23])
                        - (anti_wedge[e42] * right_anti_dual[e31])
                        - (anti_wedge[e43] * right_anti_dual[e12])
                        - (anti_wedge[e23] * right_anti_dual[e41])
                        - (anti_wedge[e31] * right_anti_dual[e42])
                        - (anti_wedge[e12] * right_anti_dual[e43]),
                ),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (anti_wedge[e23] * right_anti_dual[e45])
                    + (anti_wedge[e45] * right_anti_dual[e23])
                    + (anti_wedge[e35] * right_anti_dual[e42])
                    + (anti_wedge[scalar] * right_anti_dual[e4235]),
                (anti_wedge[e31] * right_anti_dual[e45])
                    + (anti_wedge[e45] * right_anti_dual[e31])
                    + (anti_wedge[e15] * right_anti_dual[e43])
                    + (anti_wedge[scalar] * right_anti_dual[e4315]),
                (anti_wedge[e12] * right_anti_dual[e45])
                    + (anti_wedge[e45] * right_anti_dual[e12])
                    + (anti_wedge[e25] * right_anti_dual[e41])
                    + (anti_wedge[scalar] * right_anti_dual[e4125]),
                -(anti_wedge[e12] * right_anti_dual[e35])
                    - (anti_wedge[e15] * right_anti_dual[e23])
                    - (anti_wedge[e25] * right_anti_dual[e31])
                    - (anti_wedge[e35] * right_anti_dual[e12]),
            ]) + (anti_wedge.group0().yzx() * right_anti_dual.group2().zxy()).with_w(anti_wedge[scalar] * right_anti_dual[e3215])
                - (right_anti_dual.group2().yzxx() * anti_wedge.group0().zxy().with_w(anti_wedge[e23]))
                - (right_anti_dual.group0().zxy() * anti_wedge.group2().yzx()).with_w(anti_wedge[e31] * right_anti_dual[e25]),
        );
    }
}
impl RejectOrthogonallyFrom<AntiDualNum> for DipoleInversion {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        5        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0       21        0
    fn reject_orthogonally_from(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(other[e3215]) * self.group3().xyz().with_w(self[e1234]),
            // e1, e2, e3, e5
            Simd32x4::from(other[e3215]) * self.group0().with_w(self[e45]),
        );
        let right_anti_dual = DualNum::from_groups(/* e5, e12345 */ other.group0());
        return Flector::from_groups(
            // e15, e25, e35, e45
            right_anti_dual.group0().xx().with_zw(right_anti_dual[e5], 0.0)
                * Simd32x3::from(1.0).with_w(0.0)
                * anti_wedge.group1().xyz().with_w(0.0)
                * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
            // e4235, e4315, e4125, e3215
            Simd32x3::from(0.0).with_w(anti_wedge[e321] * right_anti_dual[e5]),
        );
    }
}
impl RejectOrthogonallyFrom<AntiFlatPoint> for DipoleInversion {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       10        0
    //    simd3        1        3        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        6       16        0
    //  no simd       11       31        0
    fn reject_orthogonally_from(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                other[e235] * self[e1234],
                other[e315] * self[e1234],
                other[e125] * self[e1234],
                -(other[e315] * self[e42]) - (other[e125] * self[e43]) - (other[e321] * self[e45]),
            ]) - (other.group0().www() * self.group3().xyz()).with_w(other[e235] * self[e41]),
            // e15, e25, e35, e3215
            ((other.group0().yzx() * self.group3().zxy()) - (other.group0().zxy() * self.group3().yzx())).with_w(0.0),
        );
        let right_anti_dual = FlatPoint::from_groups(/* e15, e25, e35, e45 */ other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]));
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([right_anti_dual[e45], right_anti_dual[e45], right_anti_dual[e45], 1.0])
                * anti_wedge
                    .group0()
                    .xyz()
                    .with_w(-(anti_wedge[e23] * right_anti_dual[e15]) - (anti_wedge[e31] * right_anti_dual[e25]) - (anti_wedge[e12] * right_anti_dual[e35])),
        );
    }
}
impl RejectOrthogonallyFrom<AntiFlector> for DipoleInversion {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       14        0
    //    simd3        1        4        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       11       22        0
    //  no simd       22       42        0
    fn reject_orthogonally_from(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x3::from(0.0).with_w(
                (other[e2] * self[e4315]) + (other[e3] * self[e4125]) + (other[e5] * self[e1234])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43])
                    - (other[e321] * self[e45]),
            ) + (self.group2().www() * other.group0().xyz()).with_w(other[e1] * self[e4235])
                - (other.group0().www() * self.group3().xyz()).with_w(other[e235] * self[e41]),
            // e15, e25, e35, e3215
            ((other.group0().yzx() * self.group3().zxy()) - (other.group0().zxy() * self.group3().yzx())).with_w(0.0),
        );
        let right_anti_dual = Flector::from_groups(
            // e15, e25, e35, e45
            other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                anti_wedge[scalar] * right_anti_dual[e4235],
                anti_wedge[scalar] * right_anti_dual[e4315],
                anti_wedge[scalar] * right_anti_dual[e4125],
                -(anti_wedge[e23] * right_anti_dual[e15]) - (anti_wedge[e31] * right_anti_dual[e25]) - (anti_wedge[e12] * right_anti_dual[e35]),
            ]) + (anti_wedge.group0() * right_anti_dual.group0().www().with_w(right_anti_dual[e3215])),
        );
    }
}
impl RejectOrthogonallyFrom<AntiLine> for DipoleInversion {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       13        0
    //    simd3        0        2        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        7       17        0
    //  no simd       13       27        0
    fn reject_orthogonally_from(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiPlane::from_groups(
            // e1, e2, e3, e5
            Simd32x4::from([
                (other[e12] * self[e4315]) + (other[e15] * self[e1234]),
                (other[e23] * self[e4125]) + (other[e25] * self[e1234]),
                (other[e31] * self[e4235]) + (other[e35] * self[e1234]),
                -(other[e25] * self[e4315]) - (other[e35] * self[e4125]),
            ]) - (self.group3().zxyx() * other.group0().yzx().with_w(other[e15])),
        );
        let right_anti_dual = Line::from_groups(
            // e415, e425, e435
            other.group0() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group1() * Simd32x3::from(-1.0),
        );
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                anti_wedge[e3] * right_anti_dual[e425],
                anti_wedge[e1] * right_anti_dual[e435],
                anti_wedge[e2] * right_anti_dual[e415],
                -(anti_wedge[e2] * right_anti_dual[e315]) - (anti_wedge[e3] * right_anti_dual[e125]),
            ]) - (anti_wedge.group0().yzxx() * right_anti_dual.group0().zxy().with_w(right_anti_dual[e235])),
        );
    }
}
impl RejectOrthogonallyFrom<AntiMotor> for DipoleInversion {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       12        0
    //    simd3        0        2        0
    //    simd4        4        8        0
    // Totals...
    // yes simd        9       22        0
    //  no simd       21       50        0
    fn reject_orthogonally_from(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(other[e3215]) * self.group3().xyz().with_w(self[e1234]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other[e12] * self[e4315]) + (other[e15] * self[e1234]),
                (other[e23] * self[e4125]) + (other[e25] * self[e1234]),
                (other[e31] * self[e4235]) + (other[e35] * self[e1234]),
                -(other[e25] * self[e4315]) - (other[e35] * self[e4125]),
            ]) + (self.group0() * other.group1().www()).with_w(other[e3215] * self[e45])
                - (self.group3().zxyx() * other.group0().yzx().with_w(other[e15])),
        );
        let right_anti_dual = Motor::from_groups(
            // e415, e425, e435, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x3::from(1.0).with_w(0.0) * right_anti_dual.group1().www().with_w(0.0) * anti_wedge.group1().xyz().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
            // e4235, e4315, e4125, e3215
            Simd32x3::from(0.0).with_w(-(anti_wedge[e2] * right_anti_dual[e315]) - (anti_wedge[e3] * right_anti_dual[e125]))
                + (anti_wedge.group1().zxy() * right_anti_dual.group0().yzx()).with_w(anti_wedge[e321] * right_anti_dual[e5])
                - (anti_wedge.group1().yzxx() * right_anti_dual.group0().zxy().with_w(right_anti_dual[e235])),
        );
    }
}
impl RejectOrthogonallyFrom<AntiPlane> for DipoleInversion {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        5        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        3        6        0
    //  no simd        3        9        0
    fn reject_orthogonally_from(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from((other[e1] * self[e4235]) + (other[e2] * self[e4315]) + (other[e3] * self[e4125]) + (other[e5] * self[e1234]))
                * Simd32x4::from([other[e1], other[e2], other[e3], other[e5] * -1.0]),
        );
    }
}
impl RejectOrthogonallyFrom<AntiScalar> for DipoleInversion {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd3        0        2        0
    //    simd4        0        6        0
    // Totals...
    // yes simd        0        9        0
    //  no simd        0       31        0
    fn reject_orthogonally_from(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[e12345]) * self.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other[e12345]) * self.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(other[e12345]) * self.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e12345]) * self.group3(),
        );
        let right_anti_dual = Scalar::from_groups(/* scalar */ other[e12345] * -1.0);
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group3(),
        );
    }
}
impl RejectOrthogonallyFrom<Circle> for DipoleInversion {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       48        0
    //    simd3        2        7        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       38       59        0
    //  no simd       54       85        0
    fn reject_orthogonally_from(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiCircleRotor::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[e1234]) * other.group1().xyz()) + (other.group0().zxy() * self.group3().yzx()) - (other.group0().yzx() * self.group3().zxy()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e423] * self[e3215]) + (other[e235] * self[e1234]),
                (other[e431] * self[e3215]) + (other[e315] * self[e1234]),
                (other[e412] * self[e3215]) + (other[e125] * self[e1234]),
                -(other[e425] * self[e4315]) - (other[e435] * self[e4125]),
            ]) - (other.group1().wwwx() * self.group3().xyzx()),
            // e15, e25, e35, scalar
            Simd32x4::from([
                (other[e415] * self[e3215]) + (other[e315] * self[e4125]),
                (other[e425] * self[e3215]) + (other[e125] * self[e4235]),
                (other[e435] * self[e3215]) + (other[e235] * self[e4315]),
                -(other[e431] * self[e25])
                    - (other[e412] * self[e35])
                    - (other[e415] * self[e23])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12])
                    - (other[e321] * self[e45])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]) - (other.group2().zxy() * self.group3().yzx()).with_w(other[e423] * self[e15]),
        );
        let right_anti_dual = Dipole::from_groups(
            // e41, e42, e43
            other.group0(),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35
            other.group2(),
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from([anti_wedge[scalar], anti_wedge[scalar], anti_wedge[scalar], 1.0])
                * right_anti_dual.group2().with_w(
                    -(anti_wedge[e41] * right_anti_dual[e23])
                        - (anti_wedge[e42] * right_anti_dual[e31])
                        - (anti_wedge[e43] * right_anti_dual[e12])
                        - (anti_wedge[e23] * right_anti_dual[e41])
                        - (anti_wedge[e31] * right_anti_dual[e42])
                        - (anti_wedge[e12] * right_anti_dual[e43]),
                ),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (anti_wedge[e42] * right_anti_dual[e35])
                    + (anti_wedge[e23] * right_anti_dual[e45])
                    + (anti_wedge[e45] * right_anti_dual[e23])
                    + (anti_wedge[e35] * right_anti_dual[e42]),
                (anti_wedge[e43] * right_anti_dual[e15])
                    + (anti_wedge[e31] * right_anti_dual[e45])
                    + (anti_wedge[e45] * right_anti_dual[e31])
                    + (anti_wedge[e15] * right_anti_dual[e43]),
                (anti_wedge[e41] * right_anti_dual[e25])
                    + (anti_wedge[e12] * right_anti_dual[e45])
                    + (anti_wedge[e45] * right_anti_dual[e12])
                    + (anti_wedge[e25] * right_anti_dual[e41]),
                -(anti_wedge[e12] * right_anti_dual[e35])
                    - (anti_wedge[e15] * right_anti_dual[e23])
                    - (anti_wedge[e25] * right_anti_dual[e31])
                    - (anti_wedge[e35] * right_anti_dual[e12]),
            ]) - (anti_wedge.group0().zxy() * right_anti_dual.group2().yzx()).with_w(anti_wedge[e23] * right_anti_dual[e15])
                - (right_anti_dual.group0().zxy() * anti_wedge.group2().yzx()).with_w(anti_wedge[e31] * right_anti_dual[e25]),
        );
    }
}
impl RejectOrthogonallyFrom<CircleRotor> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       35       57        0
    //    simd3        4       10        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       47       75        0
    //  no simd       79      119        0
    fn reject_orthogonally_from(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e412] * self[e4315]) + (other[e415] * self[e1234]) + (other[e12345] * self[e41]),
                (other[e423] * self[e4125]) + (other[e425] * self[e1234]) + (other[e12345] * self[e42]),
                (other[e431] * self[e4235]) + (other[e435] * self[e1234]) + (other[e12345] * self[e43]),
                -(other[e431] * self[e25])
                    - (other[e412] * self[e35])
                    - (other[e415] * self[e23])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12])
                    - (other[e321] * self[e45])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]) - (other.group0().yzx() * self.group3().zxy()).with_w(other[e423] * self[e15]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e235] * self[e1234]) + (other[e12345] * self[e23]),
                (other[e315] * self[e1234]) + (other[e12345] * self[e31]),
                (other[e125] * self[e1234]) + (other[e12345] * self[e12]),
                -(other[e425] * self[e4315]) - (other[e435] * self[e4125]),
            ]) + (other.group0() * self.group3().www()).with_w(other[e12345] * self[e45])
                - (other.group1().wwwx() * self.group3().xyzx()),
            // e15, e25, e35, e1234
            ((Simd32x3::from(other[e12345]) * self.group2().xyz()) + (Simd32x3::from(self[e3215]) * other.group1().xyz()) + (other.group2().yzx() * self.group3().zxy())
                - (other.group2().zxy() * self.group3().yzx()))
            .with_w(other[e12345] * self[e1234]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e12345]) * self.group3(),
        );
        let right_anti_dual = AntiCircleRotor::from_groups(
            // e41, e42, e43
            other.group0(),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, scalar
            other.group2() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group0().xyz()) + (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0()))
                .with_w(right_anti_dual[scalar] * anti_wedge[scalar]),
            // e23, e31, e12, e45
            (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1()) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                right_anti_dual[scalar] * anti_wedge[e15],
                right_anti_dual[scalar] * anti_wedge[e25],
                right_anti_dual[scalar] * anti_wedge[e35],
                -(right_anti_dual[e41] * anti_wedge[e23])
                    - (right_anti_dual[e42] * anti_wedge[e31])
                    - (right_anti_dual[e43] * anti_wedge[e12])
                    - (right_anti_dual[e23] * anti_wedge[e41])
                    - (right_anti_dual[e31] * anti_wedge[e42])
                    - (right_anti_dual[e12] * anti_wedge[e43]),
            ]) + (right_anti_dual.group2() * anti_wedge.group0().www().with_w(anti_wedge[e1234])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (right_anti_dual[e23] * anti_wedge[e45])
                    + (right_anti_dual[e45] * anti_wedge[e23])
                    + (right_anti_dual[e35] * anti_wedge[e42])
                    + (right_anti_dual[scalar] * anti_wedge[e4235]),
                (right_anti_dual[e31] * anti_wedge[e45])
                    + (right_anti_dual[e45] * anti_wedge[e31])
                    + (right_anti_dual[e15] * anti_wedge[e43])
                    + (right_anti_dual[scalar] * anti_wedge[e4315]),
                (right_anti_dual[e12] * anti_wedge[e45])
                    + (right_anti_dual[e45] * anti_wedge[e12])
                    + (right_anti_dual[e25] * anti_wedge[e41])
                    + (right_anti_dual[scalar] * anti_wedge[e4125]),
                -(right_anti_dual[e12] * anti_wedge[e35])
                    - (right_anti_dual[e15] * anti_wedge[e23])
                    - (right_anti_dual[e25] * anti_wedge[e31])
                    - (right_anti_dual[e35] * anti_wedge[e12]),
            ]) + (right_anti_dual.group0().yzx() * anti_wedge.group2().zxy()).with_w(right_anti_dual[scalar] * anti_wedge[e3215])
                - (anti_wedge.group2().yzxx() * right_anti_dual.group0().zxy().with_w(right_anti_dual[e23]))
                - (right_anti_dual.group2().yzx() * anti_wedge.group0().zxy()).with_w(right_anti_dual[e31] * anti_wedge[e25]),
        );
    }
}
impl RejectOrthogonallyFrom<Dipole> for DipoleInversion {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       25        0
    //    simd3        0        3        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       18       32        0
    //  no simd       30       50        0
    fn reject_orthogonally_from(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = RoundPoint::from_groups(
            // e1, e2, e3, e4
            Simd32x4::from([
                -(other[e41] * self[e3215]) - (other[e31] * self[e4125]),
                -(other[e42] * self[e3215]) - (other[e12] * self[e4235]),
                -(other[e43] * self[e3215]) - (other[e23] * self[e4315]),
                (other[e43] * self[e4125]) + (other[e45] * self[e1234]),
            ]) + (self.group3().yzxy() * other.group1().zxy().with_w(other[e42]))
                + (other.group2() * self.group2().www()).with_w(other[e41] * self[e4235]),
            // e5
            -(other[e45] * self[e3215]) - (other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]),
        );
        let right_anti_dual = Circle::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125
            other.group2() * Simd32x3::from(-1.0),
        );
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (right_anti_dual[e425] * anti_wedge[e3]) + (right_anti_dual[e235] * anti_wedge[e4]),
                (right_anti_dual[e435] * anti_wedge[e1]) + (right_anti_dual[e315] * anti_wedge[e4]),
                (right_anti_dual[e415] * anti_wedge[e2]) + (right_anti_dual[e125] * anti_wedge[e4]),
                -(right_anti_dual[e321] * anti_wedge[e5]) - (right_anti_dual[e125] * anti_wedge[e3]),
            ]) - (Simd32x4::from([anti_wedge[e5], anti_wedge[e5], anti_wedge[e5], anti_wedge[e1]]) * right_anti_dual.group0().with_w(right_anti_dual[e235]))
                - (anti_wedge.group0().yzxy() * right_anti_dual.group1().zxy().with_w(right_anti_dual[e315])),
            // e1234
            (right_anti_dual[e423] * anti_wedge[e1])
                + (right_anti_dual[e431] * anti_wedge[e2])
                + (right_anti_dual[e412] * anti_wedge[e3])
                + (right_anti_dual[e321] * anti_wedge[e4]),
        );
    }
}
impl RejectOrthogonallyFrom<DipoleInversion> for DipoleInversion {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       20        0
    //    simd3        2       13        0
    //    simd4       20       19        0
    // Totals...
    // yes simd       32       52        0
    //  no simd       96      135        0
    fn reject_orthogonally_from(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[e1234]) * other.group3().xyz()) - (Simd32x3::from(other[e1234]) * self.group3().xyz()),
            // e415, e425, e435, e321
            (other.group3().yzxw() * self.group3().zxy().with_w(self[e1234])) - (self.group3().yzxw() * other.group3().zxy().with_w(other[e1234])),
            // e235, e315, e125, e4
            (self.group3().xyzx() * other.group3().www().with_w(other[e41]))
                + Simd32x3::from(0.0).with_w(
                    (other[e42] * self[e4315]) + (other[e43] * self[e4125]) + (other[e45] * self[e1234])
                        - (other[e1234] * self[e45])
                        - (other[e4315] * self[e42])
                        - (other[e4125] * self[e43]),
                )
                - (self.group3().www() * other.group3().xyz()).with_w(other[e4235] * self[e41]),
            // e1, e2, e3, e5
            (other.group3().zxyw() * self.group1().yzxw())
                + (self.group2().wwwz() * other.group2().xyz().with_w(other[e4125]))
                + (self.group0() * other.group3().www()).with_w(other[e4235] * self[e15])
                + (other.group1().zxy() * self.group3().yzx()).with_w(other[e4315] * self[e25])
                - (Simd32x4::from(self[e3215]) * other.group0().with_w(other[e45]))
                - (other.group2().wwwy() * self.group2().xyz().with_w(self[e4315]))
                - (self.group3().zxyx() * other.group1().yzx().with_w(other[e15]))
                - (other.group3().yzx() * self.group1().zxy()).with_w(other[e35] * self[e4125]),
        );
        let right_anti_dual = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e4
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group3() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group3().xyz()) - (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group3().xyz()),
            // e23, e31, e12, e45
            (right_anti_dual.group3().zxyw() * anti_wedge.group3().yzx().with_w(anti_wedge[e4]))
                - (anti_wedge.group3().zxyw() * right_anti_dual.group3().yzx().with_w(right_anti_dual[e4])),
            // e15, e25, e35, e1234
            Simd32x3::from(0.0).with_w(
                (anti_wedge[e4] * right_anti_dual[e321]) + (anti_wedge[e2] * right_anti_dual[e431]) + (anti_wedge[e3] * right_anti_dual[e412])
                    - (anti_wedge[e431] * right_anti_dual[e2])
                    - (anti_wedge[e412] * right_anti_dual[e3])
                    - (anti_wedge[e321] * right_anti_dual[e4]),
            ) + (right_anti_dual.group3().www() * anti_wedge.group3().xyz()).with_w(anti_wedge[e1] * right_anti_dual[e423])
                - (right_anti_dual.group3().xyzx() * anti_wedge.group3().www().with_w(anti_wedge[e423])),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(right_anti_dual[e5]) * anti_wedge.group0().with_w(anti_wedge[e321]))
                + (anti_wedge.group2().wwwy() * right_anti_dual.group2().xyz().with_w(right_anti_dual[e2]))
                + (right_anti_dual.group3().yzxx() * anti_wedge.group1().zxy().with_w(anti_wedge[e235]))
                + (anti_wedge.group3().zxy() * right_anti_dual.group1().yzx()).with_w(anti_wedge[e125] * right_anti_dual[e3])
                - (anti_wedge.group3().yzxw() * right_anti_dual.group1().zxyw())
                - (right_anti_dual.group2().wwwz() * anti_wedge.group2().xyz().with_w(anti_wedge[e3]))
                - (right_anti_dual.group0() * anti_wedge.group3().www()).with_w(anti_wedge[e1] * right_anti_dual[e235])
                - (anti_wedge.group1().yzx() * right_anti_dual.group3().zxy()).with_w(anti_wedge[e2] * right_anti_dual[e315]),
        );
    }
}
impl RejectOrthogonallyFrom<DualNum> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        2        0
    //    simd2        0        1        0
    //    simd4        0        8        0
    // Totals...
    // yes simd        1       11        0
    //  no simd        1       36        0
    fn reject_orthogonally_from(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            other.group0().yy().with_zw(other[e12345], other[e5]) * self.group0().with_w(self[e1234]),
            // e23, e31, e12, e45
            Simd32x4::from(other[e12345]) * self.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(other[e12345]) * self.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e12345]) * self.group3(),
        );
        let right_anti_dual = AntiDualNum::from_groups(/* e3215, scalar */ other.group0() * Simd32x2::from(-1.0));
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([anti_wedge[e4235], anti_wedge[e4315], anti_wedge[e4125], 1.0])
                * right_anti_dual
                    .group0()
                    .yy()
                    .with_zw(right_anti_dual[scalar], (right_anti_dual[e3215] * anti_wedge[scalar]) + (right_anti_dual[scalar] * anti_wedge[e3215])),
        );
    }
}
impl RejectOrthogonallyFrom<FlatPoint> for DipoleInversion {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6        9        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        6       12        0
    //  no simd        6       21        0
    fn reject_orthogonally_from(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = RoundPoint::from_groups(
            // e1, e2, e3, e4
            Simd32x4::from(self[e1234]) * other.group0(),
            // e5
            -(self[e4235] * other[e15]) - (self[e4315] * other[e25]) - (self[e4125] * other[e35]) - (self[e3215] * other[e45]),
        );
        let right_anti_dual = AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]));
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([anti_wedge[e4], anti_wedge[e4], anti_wedge[e4], 1.0])
                * right_anti_dual.group0().xyz().with_w(
                    -(right_anti_dual[e235] * anti_wedge[e1])
                        - (right_anti_dual[e315] * anti_wedge[e2])
                        - (right_anti_dual[e125] * anti_wedge[e3])
                        - (right_anti_dual[e321] * anti_wedge[e5]),
                ),
            // e1234
            right_anti_dual[e321] * anti_wedge[e4],
        );
    }
}
impl RejectOrthogonallyFrom<Flector> for DipoleInversion {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       18        0
    //    simd3        2       10        0
    //    simd4       12       10        0
    // Totals...
    // yes simd       22       38        0
    //  no simd       62       88        0
    fn reject_orthogonally_from(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[e1234]) * other.group1().xyz(),
            // e415, e425, e435, e321
            ((self.group3().zxy() * other.group1().yzx()) - (self.group3().yzx() * other.group1().zxy())).with_w(self[e1234] * other[e3215]),
            // e235, e315, e125, e4
            Simd32x3::from(0.0).with_w(-(self[e42] * other[e4315]) - (self[e43] * other[e4125])) + (other.group1().www() * self.group3().xyz()).with_w(self[e1234] * other[e45])
                - (other.group1().xyzx() * self.group3().www().with_w(self[e41])),
            // e1, e2, e3, e5
            (Simd32x4::from(other[e3215]) * self.group0().with_w(self[e45]))
                + (self.group2().wwwy() * other.group0().xyz().with_w(other[e4315]))
                + (other.group1().zxyx() * self.group1().yzx().with_w(self[e15]))
                + Simd32x3::from(0.0).with_w((self[e35] * other[e4125]) - (self[e4315] * other[e25]) - (self[e4125] * other[e35]) - (self[e3215] * other[e45]))
                - (self.group1().zxy() * other.group1().yzx()).with_w(self[e4235] * other[e15]),
        );
        let right_anti_dual = AntiFlector::from_groups(
            // e235, e315, e125, e321
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group1().xyz(),
            // e23, e31, e12, e45
            ((anti_wedge.group3().yzx() * right_anti_dual.group1().zxy()) - (anti_wedge.group3().zxy() * right_anti_dual.group1().yzx()))
                .with_w(anti_wedge[e4] * right_anti_dual[e5]),
            // e15, e25, e35, e1234
            Simd32x3::from(0.0).with_w(-(anti_wedge[e431] * right_anti_dual[e2]) - (anti_wedge[e412] * right_anti_dual[e3]))
                + (right_anti_dual.group1().www() * anti_wedge.group3().xyz()).with_w(anti_wedge[e4] * right_anti_dual[e321])
                - (right_anti_dual.group1().xyzx() * anti_wedge.group3().www().with_w(anti_wedge[e423])),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(right_anti_dual[e5]) * anti_wedge.group0().with_w(anti_wedge[e321]))
                + (anti_wedge.group2().wwwy() * right_anti_dual.group0().xyz().with_w(right_anti_dual[e2]))
                + (right_anti_dual.group1().yzxx() * anti_wedge.group1().zxy().with_w(anti_wedge[e235]))
                + Simd32x3::from(0.0).with_w(
                    (anti_wedge[e125] * right_anti_dual[e3])
                        - (anti_wedge[e2] * right_anti_dual[e315])
                        - (anti_wedge[e3] * right_anti_dual[e125])
                        - (anti_wedge[e5] * right_anti_dual[e321]),
                )
                - (anti_wedge.group1().yzx() * right_anti_dual.group1().zxy()).with_w(anti_wedge[e1] * right_anti_dual[e235]),
        );
    }
}
impl RejectOrthogonallyFrom<Line> for DipoleInversion {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       30        0
    //    simd3        0        3        0
    //    simd4        2        5        0
    // Totals...
    // yes simd       20       38        0
    //  no simd       26       59        0
    fn reject_orthogonally_from(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[e1234]) * other.group0(),
            // e23, e31, e12, e45
            Simd32x4::from([self[e1234], self[e1234], self[e1234], 1.0])
                * other.group1().with_w(-(self[e4235] * other[e415]) - (self[e4315] * other[e425]) - (self[e4125] * other[e435])),
            // e15, e25, e35, scalar
            Simd32x4::from([
                (self[e4125] * other[e315]) + (self[e3215] * other[e415]),
                (self[e4235] * other[e125]) + (self[e3215] * other[e425]),
                (self[e4315] * other[e235]) + (self[e3215] * other[e435]),
                -(self[e42] * other[e315]) - (self[e43] * other[e125]) - (self[e23] * other[e415]) - (self[e31] * other[e425]) - (self[e12] * other[e435]),
            ]) - (other.group1().zxy() * self.group3().yzx()).with_w(self[e41] * other[e235]),
        );
        let right_anti_dual = AntiLine::from_groups(/* e23, e31, e12 */ other.group0(), /* e15, e25, e35 */ other.group1());
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x3::from(1.0).with_w(0.0) * right_anti_dual.group0().with_w(0.0) * anti_wedge.group2().www().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
            // e15, e25, e35, e1234
            Simd32x4::from([anti_wedge[scalar], anti_wedge[scalar], anti_wedge[scalar], 1.0])
                * right_anti_dual
                    .group1()
                    .with_w(-(anti_wedge[e41] * right_anti_dual[e23]) - (anti_wedge[e42] * right_anti_dual[e31]) - (anti_wedge[e43] * right_anti_dual[e12])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (anti_wedge[e42] * right_anti_dual[e35]) + (anti_wedge[e45] * right_anti_dual[e23]),
                (anti_wedge[e43] * right_anti_dual[e15]) + (anti_wedge[e45] * right_anti_dual[e31]),
                (anti_wedge[e41] * right_anti_dual[e25]) + (anti_wedge[e45] * right_anti_dual[e12]),
                -(anti_wedge[e23] * right_anti_dual[e15])
                    - (anti_wedge[e31] * right_anti_dual[e25])
                    - (anti_wedge[e12] * right_anti_dual[e35])
                    - (anti_wedge[e25] * right_anti_dual[e31])
                    - (anti_wedge[e35] * right_anti_dual[e12]),
            ]) - (anti_wedge.group0().zxy() * right_anti_dual.group1().yzx()).with_w(anti_wedge[e15] * right_anti_dual[e23]),
        );
    }
}
impl RejectOrthogonallyFrom<Motor> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       34        0
    //    simd3        4        9        0
    //    simd4        6        7        0
    // Totals...
    // yes simd       23       50        0
    //  no simd       49       89        0
    fn reject_orthogonally_from(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e1234] * other[e415],
                self[e1234] * other[e425],
                self[e1234] * other[e435],
                -(self[e41] * other[e235])
                    - (self[e42] * other[e315])
                    - (self[e43] * other[e125])
                    - (self[e23] * other[e415])
                    - (self[e31] * other[e425])
                    - (self[e12] * other[e435]),
            ]) + (self.group0() * other.group0().www()).with_w(self[e1234] * other[e5]),
            // e23, e31, e12, e45
            Simd32x4::from([
                self[e1234] * other[e235],
                self[e1234] * other[e315],
                self[e1234] * other[e125],
                -(self[e4235] * other[e415]) - (self[e4315] * other[e425]) - (self[e4125] * other[e435]),
            ]) + (Simd32x4::from(other[e12345]) * self.group1()),
            // e15, e25, e35, e1234
            ((Simd32x3::from(self[e3215]) * other.group0().xyz()) + (Simd32x3::from(other[e12345]) * self.group2().xyz()) + (self.group3().zxy() * other.group1().yzx())
                - (self.group3().yzx() * other.group1().zxy()))
            .with_w(self[e1234] * other[e12345]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e12345]) * self.group3(),
        );
        let right_anti_dual = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e3215
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group0(),
            // e23, e31, e12, e45
            ((Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group1().xyz()) + (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0().xyz()))
                .with_w(right_anti_dual[scalar] * anti_wedge[e45]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                right_anti_dual[e15] * anti_wedge[scalar],
                right_anti_dual[e25] * anti_wedge[scalar],
                right_anti_dual[e35] * anti_wedge[scalar],
                -(right_anti_dual[e23] * anti_wedge[e41]) - (right_anti_dual[e31] * anti_wedge[e42]) - (right_anti_dual[e12] * anti_wedge[e43]),
            ]) + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group2()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                right_anti_dual[e35] * anti_wedge[e42],
                right_anti_dual[e15] * anti_wedge[e43],
                right_anti_dual[e25] * anti_wedge[e41],
                -(right_anti_dual[e31] * anti_wedge[e25])
                    - (right_anti_dual[e12] * anti_wedge[e35])
                    - (right_anti_dual[e15] * anti_wedge[e23])
                    - (right_anti_dual[e25] * anti_wedge[e31])
                    - (right_anti_dual[e35] * anti_wedge[e12]),
            ]) + (right_anti_dual.group0() * anti_wedge.group1().www().with_w(anti_wedge[e3215]))
                + (right_anti_dual.group0().www() * anti_wedge.group3().xyz()).with_w(right_anti_dual[e3215] * anti_wedge[scalar])
                - (right_anti_dual.group1().yzx() * anti_wedge.group0().zxy()).with_w(right_anti_dual[e23] * anti_wedge[e15]),
        );
    }
}
impl RejectOrthogonallyFrom<MultiVector> for DipoleInversion {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       96      130        0
    //    simd2        0        1        0
    //    simd3       28       51        0
    //    simd4       30       25        0
    // Totals...
    // yes simd      154      207        0
    //  no simd      300      385        0
    fn reject_orthogonally_from(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e1234] * other[e5]) + (self[e4235] * other[e1]) + (self[e4315] * other[e2]) + (self[e4125] * other[e3]) + (self[e3215] * other[e4])
                    - (self[e41] * other[e235])
                    - (self[e42] * other[e315])
                    - (self[e43] * other[e125])
                    - (self[e23] * other[e415])
                    - (self[e31] * other[e425])
                    - (self[e12] * other[e435])
                    - (self[e45] * other[e321])
                    - (self[e15] * other[e423])
                    - (self[e25] * other[e431])
                    - (self[e35] * other[e412]),
                0.0,
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(self[e1234]) * other.group3())
                + (self.group3().yzxy() * other.group5().zxy().with_w(other[e42]))
                + (self.group0() * other.group9().www()).with_w(self[e4235] * other[e41])
                + (self.group1().yzx() * other.group9().zxy()).with_w(self[e4125] * other[e43])
                - (Simd32x4::from(other[e1234]) * self.group2().xyz().with_w(self[e45]))
                - (other.group9().yzxz() * self.group1().zxy().with_w(self[e43]))
                - (other.group4() * self.group3().www()).with_w(self[e41] * other[e4235])
                - (other.group5().yzx() * self.group3().zxy()).with_w(self[e42] * other[e4315]),
            // e5
            (self[e45] * other[e3215]) + (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125])
                - (self[e4235] * other[e15])
                - (self[e4315] * other[e25])
                - (self[e4125] * other[e35])
                - (self[e3215] * other[e45]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e4125] * other[e315]) + (self[e3215] * other[e415]),
                (self[e4235] * other[e125]) + (self[e3215] * other[e425]),
                (self[e4315] * other[e235]) + (self[e3215] * other[e435]),
                -(self[e4315] * other[e425]) - (self[e4125] * other[e435]),
            ]) + (Simd32x4::from(other[e12345]) * self.group2().xyz().with_w(self[e45]))
                - (other.group8().zxy() * self.group3().yzx()).with_w(self[e4235] * other[e415]),
            // e41, e42, e43
            (Simd32x3::from(self[e1234]) * other.group6().xyz()) + (Simd32x3::from(other[e12345]) * self.group0()) + (other.group7().zxy() * self.group3().yzx())
                - (other.group7().yzx() * self.group3().zxy()),
            // e23, e31, e12
            (Simd32x3::from(self[e1234]) * other.group8()) + (Simd32x3::from(self[e3215]) * other.group7()) + (Simd32x3::from(other[e12345]) * self.group1().xyz())
                - (Simd32x3::from(other[e321]) * self.group3().xyz()),
            // e415, e425, e435, e321
            (other.group9().yzxw() * self.group3().zxy().with_w(self[e1234])) - (self.group3().yzxw() * other.group9().zxy().with_w(other[e1234])),
            // e423, e431, e412
            (Simd32x3::from(self[e1234]) * other.group9().xyz()) - (Simd32x3::from(other[e1234]) * self.group3().xyz()),
            // e235, e315, e125
            (Simd32x3::from(other[e3215]) * self.group3().xyz()) - (Simd32x3::from(self[e3215]) * other.group9().xyz()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e12345]) * self.group3(),
            // e1234
            self[e1234] * other[e12345],
        );
        let right_anti_dual = MultiVector::from_groups(
            // scalar, e12345
            other.group0().yx() * Simd32x2::from([-1.0, 1.0]),
            // e1, e2, e3, e4
            other.group9().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e5
            other[e3215],
            // e15, e25, e35, e45
            other.group8().with_w(other[e321] * -1.0),
            // e41, e42, e43
            other.group7(),
            // e23, e31, e12
            other.group6().xyz(),
            // e415, e425, e435, e321
            other.group5().with_w(other[e45]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e423, e431, e412
            other.group4() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group3().xyz() * Simd32x3::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group1().xyz().with_w(other[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1234
            other[e4] * -1.0,
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                anti_wedge[scalar] * right_anti_dual[scalar],
                (anti_wedge[scalar] * right_anti_dual[e12345])
                    + (anti_wedge[e12345] * right_anti_dual[scalar])
                    + (anti_wedge[e1] * right_anti_dual[e4235])
                    + (anti_wedge[e2] * right_anti_dual[e4315])
                    + (anti_wedge[e3] * right_anti_dual[e4125])
                    + (anti_wedge[e4] * right_anti_dual[e3215])
                    + (anti_wedge[e5] * right_anti_dual[e1234])
                    + (anti_wedge[e4235] * right_anti_dual[e1])
                    + (anti_wedge[e4315] * right_anti_dual[e2])
                    + (anti_wedge[e4125] * right_anti_dual[e3])
                    + (anti_wedge[e3215] * right_anti_dual[e4])
                    + (anti_wedge[e1234] * right_anti_dual[e5])
                    - (anti_wedge[e15] * right_anti_dual[e423])
                    - (anti_wedge[e25] * right_anti_dual[e431])
                    - (anti_wedge[e35] * right_anti_dual[e412])
                    - (anti_wedge[e45] * right_anti_dual[e321])
                    - (anti_wedge[e41] * right_anti_dual[e235])
                    - (anti_wedge[e42] * right_anti_dual[e315])
                    - (anti_wedge[e43] * right_anti_dual[e125])
                    - (anti_wedge[e23] * right_anti_dual[e415])
                    - (anti_wedge[e31] * right_anti_dual[e425])
                    - (anti_wedge[e12] * right_anti_dual[e435])
                    - (anti_wedge[e415] * right_anti_dual[e23])
                    - (anti_wedge[e425] * right_anti_dual[e31])
                    - (anti_wedge[e435] * right_anti_dual[e12])
                    - (anti_wedge[e321] * right_anti_dual[e45])
                    - (anti_wedge[e423] * right_anti_dual[e15])
                    - (anti_wedge[e431] * right_anti_dual[e25])
                    - (anti_wedge[e412] * right_anti_dual[e35])
                    - (anti_wedge[e235] * right_anti_dual[e41])
                    - (anti_wedge[e315] * right_anti_dual[e42])
                    - (anti_wedge[e125] * right_anti_dual[e43]),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1()) + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1()),
            // e5
            (anti_wedge[scalar] * right_anti_dual[e5]) + (anti_wedge[e5] * right_anti_dual[scalar]),
            // e15, e25, e35, e45
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group3())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group3())
                + (Simd32x4::from(right_anti_dual[e5]) * anti_wedge.group1())
                - (Simd32x4::from(anti_wedge[e5]) * right_anti_dual.group1()),
            // e41, e42, e43
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group4())
                + (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group1().xyz())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group4())
                - (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group1().xyz()),
            // e23, e31, e12
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group5())
                + (anti_wedge.group1().yzx() * right_anti_dual.group1().zxy())
                - (anti_wedge.group1().zxy() * right_anti_dual.group1().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (anti_wedge[e4] * right_anti_dual[e15])
                    + (anti_wedge[e5] * right_anti_dual[e41])
                    + (anti_wedge[e15] * right_anti_dual[e4])
                    + (anti_wedge[e41] * right_anti_dual[e5]),
                (anti_wedge[e4] * right_anti_dual[e25])
                    + (anti_wedge[e5] * right_anti_dual[e42])
                    + (anti_wedge[e25] * right_anti_dual[e4])
                    + (anti_wedge[e42] * right_anti_dual[e5]),
                (anti_wedge[e4] * right_anti_dual[e35])
                    + (anti_wedge[e5] * right_anti_dual[e43])
                    + (anti_wedge[e35] * right_anti_dual[e4])
                    + (anti_wedge[e43] * right_anti_dual[e5]),
                -(anti_wedge[e1] * right_anti_dual[e23])
                    - (anti_wedge[e2] * right_anti_dual[e31])
                    - (anti_wedge[e3] * right_anti_dual[e12])
                    - (anti_wedge[e12] * right_anti_dual[e3]),
            ]) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group6())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group6())
                - (right_anti_dual.group1().xyzy() * anti_wedge.group3().www().with_w(anti_wedge[e31]))
                - (right_anti_dual.group3().www() * anti_wedge.group1().xyz()).with_w(anti_wedge[e23] * right_anti_dual[e1]),
            // e423, e431, e412
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group7())
                + (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group7())
                + (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group5())
                + (anti_wedge.group4().yzx() * right_anti_dual.group1().zxy())
                + (right_anti_dual.group4().yzx() * anti_wedge.group1().zxy())
                - (anti_wedge.group4().zxy() * right_anti_dual.group1().yzx())
                - (right_anti_dual.group4().zxy() * anti_wedge.group1().yzx()),
            // e235, e315, e125
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group8())
                + (Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group8())
                + (Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group5())
                + (anti_wedge.group1().yzx() * right_anti_dual.group3().zxy())
                + (anti_wedge.group3().zxy() * right_anti_dual.group1().yzx())
                - (anti_wedge.group1().zxy() * right_anti_dual.group3().yzx())
                - (anti_wedge.group3().yzx() * right_anti_dual.group1().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (anti_wedge[e3] * right_anti_dual[e425])
                    + (anti_wedge[e4] * right_anti_dual[e235])
                    + (anti_wedge[e45] * right_anti_dual[e23])
                    + (anti_wedge[e435] * right_anti_dual[e2]),
                (anti_wedge[e1] * right_anti_dual[e435])
                    + (anti_wedge[e4] * right_anti_dual[e315])
                    + (anti_wedge[e45] * right_anti_dual[e31])
                    + (anti_wedge[e415] * right_anti_dual[e3]),
                (anti_wedge[e2] * right_anti_dual[e415])
                    + (anti_wedge[e4] * right_anti_dual[e125])
                    + (anti_wedge[e45] * right_anti_dual[e12])
                    + (anti_wedge[e425] * right_anti_dual[e1]),
                -(anti_wedge[e1] * right_anti_dual[e235])
                    - (anti_wedge[e2] * right_anti_dual[e315])
                    - (anti_wedge[e3] * right_anti_dual[e125])
                    - (anti_wedge[e5] * right_anti_dual[e321]),
            ]) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group9())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group9())
                + (Simd32x4::from([right_anti_dual[e5], right_anti_dual[e5], right_anti_dual[e5], right_anti_dual[e3]]) * anti_wedge.group7().with_w(anti_wedge[e125]))
                + (anti_wedge.group5() * right_anti_dual.group3().www()).with_w(anti_wedge[e315] * right_anti_dual[e2])
                + (anti_wedge.group4().yzx() * right_anti_dual.group3().zxy()).with_w(anti_wedge[e235] * right_anti_dual[e1])
                + (right_anti_dual.group4().yzx() * anti_wedge.group3().zxy()).with_w(anti_wedge[e321] * right_anti_dual[e5])
                - (Simd32x4::from([anti_wedge[e5], anti_wedge[e5], anti_wedge[e5], anti_wedge[e15]]) * right_anti_dual.group7().with_w(right_anti_dual[e23]))
                - (right_anti_dual.group3().yzxx() * anti_wedge.group4().zxy().with_w(anti_wedge[e23]))
                - (anti_wedge.group8() * right_anti_dual.group1().www()).with_w(anti_wedge[e31] * right_anti_dual[e25])
                - (right_anti_dual.group4().zxy() * anti_wedge.group3().yzx()).with_w(anti_wedge[e12] * right_anti_dual[e35])
                - (anti_wedge.group1().yzx() * right_anti_dual.group6().zxy()).with_w(anti_wedge[e25] * right_anti_dual[e31])
                - (anti_wedge.group6().yzx() * right_anti_dual.group1().zxy()).with_w(anti_wedge[e35] * right_anti_dual[e12]),
            // e1234
            (anti_wedge[scalar] * right_anti_dual[e1234])
                + (anti_wedge[e1] * right_anti_dual[e423])
                + (anti_wedge[e2] * right_anti_dual[e431])
                + (anti_wedge[e3] * right_anti_dual[e412])
                + (anti_wedge[e4] * right_anti_dual[e321])
                + (anti_wedge[e1234] * right_anti_dual[scalar])
                - (anti_wedge[e41] * right_anti_dual[e23])
                - (anti_wedge[e42] * right_anti_dual[e31])
                - (anti_wedge[e43] * right_anti_dual[e12])
                - (anti_wedge[e23] * right_anti_dual[e41])
                - (anti_wedge[e31] * right_anti_dual[e42])
                - (anti_wedge[e12] * right_anti_dual[e43])
                - (anti_wedge[e321] * right_anti_dual[e4])
                - (anti_wedge[e423] * right_anti_dual[e1])
                - (anti_wedge[e431] * right_anti_dual[e2])
                - (anti_wedge[e412] * right_anti_dual[e3]),
        );
    }
}
impl RejectOrthogonallyFrom<Plane> for DipoleInversion {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       28        0
    //    simd3        2        6        0
    //    simd4        6        7        0
    // Totals...
    // yes simd       12       41        0
    //  no simd       34       74        0
    fn reject_orthogonally_from(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[e1234]) * other.group0().xyz(),
            // e415, e425, e435, e321
            ((self.group3().zxy() * other.group0().yzx()) - (self.group3().yzx() * other.group0().zxy())).with_w(self[e1234] * other[e3215]),
            // e235, e315, e125, e4
            Simd32x4::from([
                self[e4235] * other[e3215],
                self[e4315] * other[e3215],
                self[e4125] * other[e3215],
                -(self[e42] * other[e4315]) - (self[e43] * other[e4125]),
            ]) - (other.group0().xyzx() * self.group3().www().with_w(self[e41])),
            // e1, e2, e3, e5
            Simd32x4::from([
                self[e12] * other[e4315] * -1.0,
                self[e23] * other[e4125] * -1.0,
                self[e31] * other[e4235] * -1.0,
                (self[e25] * other[e4315]) + (self[e35] * other[e4125]),
            ]) + (Simd32x4::from(other[e3215]) * self.group0().with_w(self[e45]))
                + (other.group0().zxyx() * self.group1().yzx().with_w(self[e15])),
        );
        let right_anti_dual = AntiPlane::from_groups(/* e1, e2, e3, e5 */ other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]));
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group0().xyz(),
            // e23, e31, e12, e45
            ((anti_wedge.group3().yzx() * right_anti_dual.group0().zxy()) - (anti_wedge.group3().zxy() * right_anti_dual.group0().yzx()))
                .with_w(anti_wedge[e4] * right_anti_dual[e5]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                anti_wedge[e1] * right_anti_dual[e5],
                anti_wedge[e2] * right_anti_dual[e5],
                anti_wedge[e3] * right_anti_dual[e5],
                -(anti_wedge[e431] * right_anti_dual[e2]) - (anti_wedge[e412] * right_anti_dual[e3]),
            ]) - (right_anti_dual.group0().xyzx() * anti_wedge.group3().www().with_w(anti_wedge[e423])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                anti_wedge[e425] * right_anti_dual[e3] * -1.0,
                anti_wedge[e435] * right_anti_dual[e1] * -1.0,
                anti_wedge[e415] * right_anti_dual[e2] * -1.0,
                (anti_wedge[e315] * right_anti_dual[e2]) + (anti_wedge[e125] * right_anti_dual[e3]),
            ]) + (Simd32x4::from(right_anti_dual[e5]) * anti_wedge.group0().with_w(anti_wedge[e321]))
                + (right_anti_dual.group0().yzxx() * anti_wedge.group1().zxy().with_w(anti_wedge[e235])),
        );
    }
}
impl RejectOrthogonallyFrom<RoundPoint> for DipoleInversion {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        7        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        4        9        0
    //  no simd        4       15        0
    fn reject_orthogonally_from(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Scalar::from_groups(
            // scalar
            (self[e1234] * other[e5]) + (self[e4235] * other[e1]) + (self[e4315] * other[e2]) + (self[e4125] * other[e3]) + (self[e3215] * other[e4]),
        );
        let right_anti_dual = Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            other.group0().xyz().with_w(other[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1234
            other[e4] * -1.0,
        );
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e1234
            anti_wedge[scalar] * right_anti_dual[e1234],
        );
    }
}
impl RejectOrthogonallyFrom<Sphere> for DipoleInversion {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       29        0
    //    simd3        2        5        0
    //    simd4        8       10        0
    // Totals...
    // yes simd       22       44        0
    //  no simd       50       84        0
    fn reject_orthogonally_from(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[e1234]) * other.group0().xyz()) - (Simd32x3::from(other[e1234]) * self.group3().xyz()),
            // e415, e425, e435, e321
            (other.group0().yzxw() * self.group3().zxy().with_w(self[e1234])) - (self.group3().yzxw() * other.group0().zxy().with_w(other[e1234])),
            // e235, e315, e125, e4
            Simd32x4::from([
                self[e4235] * other[e3215],
                self[e4315] * other[e3215],
                self[e4125] * other[e3215],
                -(self[e42] * other[e4315]) - (self[e43] * other[e4125]) - (self[e45] * other[e1234]),
            ]) - (other.group0().xyzx() * self.group3().www().with_w(self[e41])),
            // e1, e2, e3, e5
            Simd32x4::from([
                -(self[e12] * other[e4315]) - (self[e15] * other[e1234]),
                -(self[e23] * other[e4125]) - (self[e25] * other[e1234]),
                -(self[e31] * other[e4235]) - (self[e35] * other[e1234]),
                (self[e25] * other[e4315]) + (self[e35] * other[e4125]),
            ]) + (Simd32x4::from(other[e3215]) * self.group0().with_w(self[e45]))
                + (other.group0().zxyx() * self.group1().yzx().with_w(self[e15])),
        );
        let right_anti_dual = RoundPoint::from_groups(
            // e1, e2, e3, e4
            other.group0().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e5
            other[e3215],
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group0().xyz()) - (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group3().xyz()),
            // e23, e31, e12, e45
            (anti_wedge.group3().yzx() * right_anti_dual.group0().zxy()).with_w(anti_wedge[e4] * right_anti_dual[e5])
                - (anti_wedge.group3().zxyw() * right_anti_dual.group0().yzxw()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                anti_wedge[e1] * right_anti_dual[e5],
                anti_wedge[e2] * right_anti_dual[e5],
                anti_wedge[e3] * right_anti_dual[e5],
                -(anti_wedge[e431] * right_anti_dual[e2]) - (anti_wedge[e412] * right_anti_dual[e3]) - (anti_wedge[e321] * right_anti_dual[e4]),
            ]) - (right_anti_dual.group0().xyzx() * anti_wedge.group3().www().with_w(anti_wedge[e423])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(anti_wedge[e425] * right_anti_dual[e3]) - (anti_wedge[e235] * right_anti_dual[e4]),
                -(anti_wedge[e435] * right_anti_dual[e1]) - (anti_wedge[e315] * right_anti_dual[e4]),
                -(anti_wedge[e415] * right_anti_dual[e2]) - (anti_wedge[e125] * right_anti_dual[e4]),
                (anti_wedge[e315] * right_anti_dual[e2]) + (anti_wedge[e125] * right_anti_dual[e3]),
            ]) + (Simd32x4::from(right_anti_dual[e5]) * anti_wedge.group0().with_w(anti_wedge[e321]))
                + (right_anti_dual.group0().yzxx() * anti_wedge.group1().zxy().with_w(anti_wedge[e235])),
        );
    }
}
impl RejectOrthogonallyFrom<VersorEven> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       31       48        0
    //    simd3        4       11        0
    //    simd4       13       14        0
    // Totals...
    // yes simd       48       73        0
    //  no simd       95      137        0
    fn reject_orthogonally_from(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (self.group3().yzxy() * other.group0().zxy().with_w(other[e2]))
                + Simd32x3::from(0.0).with_w(
                    (self[e4125] * other[e3]) + (self[e3215] * other[e4])
                        - (self[e42] * other[e315])
                        - (self[e43] * other[e125])
                        - (self[e23] * other[e415])
                        - (self[e31] * other[e425])
                        - (self[e12] * other[e435])
                        - (self[e45] * other[e321])
                        - (self[e15] * other[e423])
                        - (self[e25] * other[e431])
                        - (self[e35] * other[e412]),
                )
                + (self.group0() * other.group0().www()).with_w(self[e1234] * other[e5])
                + (self.group2().www() * other.group1().xyz()).with_w(self[e4235] * other[e1])
                - (self.group3().zxy() * other.group0().yzx()).with_w(self[e41] * other[e235]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e1234] * other[e235]) + (self[e3215] * other[e423]),
                (self[e1234] * other[e315]) + (self[e3215] * other[e431]),
                (self[e1234] * other[e125]) + (self[e3215] * other[e412]),
                -(self[e4315] * other[e425]) - (self[e4125] * other[e435]),
            ]) + (Simd32x4::from(other[e12345]) * self.group1())
                - (self.group3().xyzx() * other.group1().wwwx()),
            // e15, e25, e35, e1234
            ((Simd32x3::from(self[e3215]) * other.group1().xyz()) + (Simd32x3::from(other[e12345]) * self.group2().xyz()) + (self.group3().zxy() * other.group2().yzx())
                - (self.group3().yzx() * other.group2().zxy()))
            .with_w(self[e1234] * other[e12345]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e12345]) * self.group3(),
        );
        let right_anti_dual = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e1234
            other.group2().xyz().with_w(other[e4]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            other.group3().xyz().with_w(other[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0().xyz()) + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group0().xyz()))
                .with_w(anti_wedge[scalar] * right_anti_dual[scalar]),
            // e23, e31, e12, e45
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1()) + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1()),
            // e15, e25, e35, e1234
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group2())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group2())
                + Simd32x3::from(0.0).with_w(
                    -(anti_wedge[e41] * right_anti_dual[e23])
                        - (anti_wedge[e42] * right_anti_dual[e31])
                        - (anti_wedge[e43] * right_anti_dual[e12])
                        - (anti_wedge[e23] * right_anti_dual[e41])
                        - (anti_wedge[e31] * right_anti_dual[e42])
                        - (anti_wedge[e12] * right_anti_dual[e43]),
                ),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (anti_wedge[e23] * right_anti_dual[e45])
                    + (anti_wedge[e45] * right_anti_dual[e23])
                    + (anti_wedge[e35] * right_anti_dual[e42])
                    + (anti_wedge[e4235] * right_anti_dual[scalar]),
                (anti_wedge[e31] * right_anti_dual[e45])
                    + (anti_wedge[e45] * right_anti_dual[e31])
                    + (anti_wedge[e15] * right_anti_dual[e43])
                    + (anti_wedge[e4315] * right_anti_dual[scalar]),
                (anti_wedge[e12] * right_anti_dual[e45])
                    + (anti_wedge[e45] * right_anti_dual[e12])
                    + (anti_wedge[e25] * right_anti_dual[e41])
                    + (anti_wedge[e4125] * right_anti_dual[scalar]),
                -(anti_wedge[e12] * right_anti_dual[e35])
                    - (anti_wedge[e15] * right_anti_dual[e23])
                    - (anti_wedge[e25] * right_anti_dual[e31])
                    - (anti_wedge[e35] * right_anti_dual[e12]),
            ]) + (anti_wedge.group0().yzxw() * right_anti_dual.group2().zxy().with_w(right_anti_dual[e3215]))
                + (anti_wedge.group0().www() * right_anti_dual.group3().xyz()).with_w(anti_wedge[e3215] * right_anti_dual[scalar])
                - (right_anti_dual.group2().yzxx() * anti_wedge.group0().zxy().with_w(anti_wedge[e23]))
                - (anti_wedge.group2().yzx() * right_anti_dual.group0().zxy()).with_w(anti_wedge[e31] * right_anti_dual[e25]),
        );
    }
}
impl RejectOrthogonallyFrom<VersorOdd> for DipoleInversion {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       20        0
    //    simd3        2       12        0
    //    simd4       20       20        0
    // Totals...
    // yes simd       32       52        0
    //  no simd       96      136        0
    fn reject_orthogonally_from(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[e1234]) * other.group3().xyz()) - (Simd32x3::from(other[e1234]) * self.group3().xyz()),
            // e415, e425, e435, e321
            (other.group3().yzxw() * self.group3().zxy().with_w(self[e1234])) - (self.group3().yzxw() * other.group3().zxy().with_w(other[e1234])),
            // e235, e315, e125, e4
            Simd32x3::from(0.0).with_w(
                (self[e4235] * other[e41]) + (self[e4315] * other[e42]) + (self[e4125] * other[e43])
                    - (self[e42] * other[e4315])
                    - (self[e43] * other[e4125])
                    - (self[e45] * other[e1234]),
            ) + (other.group3().www() * self.group3().xyz()).with_w(self[e1234] * other[e45])
                - (other.group3().xyzx() * self.group3().www().with_w(self[e41])),
            // e1, e2, e3, e5
            (Simd32x4::from(other[e3215]) * self.group0().with_w(self[e45]))
                + (self.group2().wwwy() * other.group2().xyz().with_w(other[e4315]))
                + (other.group3().zxyx() * self.group1().yzx().with_w(self[e15]))
                + (self.group3().yzx() * other.group1().zxy()).with_w(self[e35] * other[e4125])
                - (Simd32x4::from(self[e3215]) * other.group0().xyz().with_w(other[e45]))
                - (self.group3().zxyz() * other.group1().yzx().with_w(other[e35]))
                - (other.group2().wwwy() * self.group2().xyz().with_w(self[e4315]))
                - (self.group1().zxy() * other.group3().yzx()).with_w(self[e4235] * other[e15]),
        );
        let right_anti_dual = VersorEven::from_groups(
            // e423, e431, e412, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            other.group2().xyz().with_w(other[e3215]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e4
            other.group3().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group3().xyz()) - (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group3().xyz()),
            // e23, e31, e12, e45
            (anti_wedge.group3().yzx() * right_anti_dual.group3().zxy()).with_w(anti_wedge[e4] * right_anti_dual[e5])
                - (anti_wedge.group3().zxyw() * right_anti_dual.group3().yzxw()),
            // e15, e25, e35, e1234
            Simd32x3::from(0.0).with_w(
                (anti_wedge[e1] * right_anti_dual[e423]) + (anti_wedge[e2] * right_anti_dual[e431]) + (anti_wedge[e3] * right_anti_dual[e412])
                    - (anti_wedge[e431] * right_anti_dual[e2])
                    - (anti_wedge[e412] * right_anti_dual[e3])
                    - (anti_wedge[e321] * right_anti_dual[e4]),
            ) + (right_anti_dual.group2().www() * anti_wedge.group3().xyz()).with_w(anti_wedge[e4] * right_anti_dual[e321])
                - (right_anti_dual.group3().xyzx() * anti_wedge.group3().www().with_w(anti_wedge[e423])),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(right_anti_dual[e5]) * anti_wedge.group0().with_w(anti_wedge[e321]))
                + (anti_wedge.group2().wwwy() * right_anti_dual.group2().xyz().with_w(right_anti_dual[e2]))
                + (right_anti_dual.group3().yzxx() * anti_wedge.group1().zxy().with_w(anti_wedge[e235]))
                + (anti_wedge.group3().zxy() * right_anti_dual.group1().yzx()).with_w(anti_wedge[e125] * right_anti_dual[e3])
                - (Simd32x4::from(anti_wedge[e5]) * right_anti_dual.group0().xyz().with_w(right_anti_dual[e321]))
                - (anti_wedge.group3().yzxz() * right_anti_dual.group1().zxy().with_w(right_anti_dual[e125]))
                - (anti_wedge.group1().yzx() * right_anti_dual.group3().zxy()).with_w(anti_wedge[e1] * right_anti_dual[e235])
                - (right_anti_dual.group3().www() * anti_wedge.group2().xyz()).with_w(anti_wedge[e2] * right_anti_dual[e315]),
        );
    }
}
impl std::ops::Div<reject_orthogonally_from> for DualNum {
    type Output = reject_orthogonally_from_partial<DualNum>;
    fn div(self, _rhs: reject_orthogonally_from) -> Self::Output {
        reject_orthogonally_from_partial(self)
    }
}
impl RejectOrthogonallyFrom<AntiCircleRotor> for DualNum {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       11        0
    //    simd3        0        3        0
    //    simd4        0        6        0
    // Totals...
    // yes simd       10       20        0
    //  no simd       10       44        0
    fn reject_orthogonally_from(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[e12345]) * other.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(self[e12345]) * other.group1(),
            // e15, e25, e35, scalar
            Simd32x4::from(self[e12345]) * other.group2(),
        );
        let right_anti_dual = CircleRotor::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e12345
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1(),
            // e235, e315, e125, e12345
            Simd32x4::from([right_anti_dual[e235], right_anti_dual[e315], right_anti_dual[e125], 1.0])
                * anti_wedge.group2().www().with_w(
                    (anti_wedge[scalar] * right_anti_dual[e12345])
                        - (anti_wedge[e41] * right_anti_dual[e235])
                        - (anti_wedge[e42] * right_anti_dual[e315])
                        - (anti_wedge[e43] * right_anti_dual[e125])
                        - (anti_wedge[e23] * right_anti_dual[e415])
                        - (anti_wedge[e31] * right_anti_dual[e425])
                        - (anti_wedge[e12] * right_anti_dual[e435])
                        - (anti_wedge[e45] * right_anti_dual[e321])
                        - (anti_wedge[e15] * right_anti_dual[e423])
                        - (anti_wedge[e25] * right_anti_dual[e431])
                        - (anti_wedge[e35] * right_anti_dual[e412]),
                ),
        );
    }
}
impl RejectOrthogonallyFrom<AntiDipoleInversion> for DualNum {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       21        0
    //    simd3        2        5        0
    //    simd4        4        9        0
    // Totals...
    // yes simd       21       35        0
    //  no simd       37       72        0
    fn reject_orthogonally_from(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[e12345]) * other.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(self[e12345]) * other.group1(),
            // e235, e315, e125, e4
            Simd32x4::from(self[e12345]) * other.group2(),
            // e1, e2, e3, e5
            Simd32x4::from(self[e12345]) * other.group3(),
        );
        let right_anti_dual = DipoleInversion::from_groups(
            // e41, e42, e43
            other.group0(),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            other.group3() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return CircleRotor::from_groups(
            // e423, e431, e412
            (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group1().xyz()) + (right_anti_dual.group0().yzx() * anti_wedge.group3().zxy())
                - (right_anti_dual.group0().zxy() * anti_wedge.group3().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (anti_wedge[e4] * right_anti_dual[e15]) + (anti_wedge[e5] * right_anti_dual[e41]),
                (anti_wedge[e4] * right_anti_dual[e25]) + (anti_wedge[e5] * right_anti_dual[e42]),
                (anti_wedge[e4] * right_anti_dual[e35]) + (anti_wedge[e5] * right_anti_dual[e43]),
                -(anti_wedge[e2] * right_anti_dual[e31]) - (anti_wedge[e3] * right_anti_dual[e12]),
            ]) - (anti_wedge.group3().xyzx() * right_anti_dual.group1().wwwx()),
            // e235, e315, e125, e12345
            (anti_wedge.group3().wwwx() * right_anti_dual.group1().xyz().with_w(right_anti_dual[e4235]))
                + Simd32x3::from(0.0).with_w(
                    (anti_wedge[e2] * right_anti_dual[e4315]) + (anti_wedge[e3] * right_anti_dual[e4125]) + (anti_wedge[e5] * right_anti_dual[e1234])
                        - (anti_wedge[e431] * right_anti_dual[e25])
                        - (anti_wedge[e412] * right_anti_dual[e35])
                        - (anti_wedge[e415] * right_anti_dual[e23])
                        - (anti_wedge[e425] * right_anti_dual[e31])
                        - (anti_wedge[e435] * right_anti_dual[e12])
                        - (anti_wedge[e321] * right_anti_dual[e45])
                        - (anti_wedge[e235] * right_anti_dual[e41])
                        - (anti_wedge[e315] * right_anti_dual[e42])
                        - (anti_wedge[e125] * right_anti_dual[e43]),
                )
                + (anti_wedge.group3().yzx() * right_anti_dual.group2().zxy()).with_w(anti_wedge[e4] * right_anti_dual[e3215])
                - (right_anti_dual.group2().yzxx() * anti_wedge.group3().zxy().with_w(anti_wedge[e423])),
        );
    }
}
impl RejectOrthogonallyFrom<AntiDualNum> for DualNum {
    type Output = DualNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd2        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        3        0
    fn reject_orthogonally_from(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return DualNum::from_groups(/* e5, e12345 */ Simd32x2::from(other[scalar] * self[e12345]) * other.group0());
    }
}
impl RejectOrthogonallyFrom<AntiFlatPoint> for DualNum {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn reject_orthogonally_from(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ f32::powi(other[e321], 2) * self[e12345]);
    }
}
impl RejectOrthogonallyFrom<AntiFlector> for DualNum {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        4        0
    //    simd3        1        2        0
    //    simd4        0        6        0
    // Totals...
    // yes simd        4       12        0
    //  no simd        6       34        0
    fn reject_orthogonally_from(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(self[e12345]) * other.group0(),
            // e1, e2, e3, e5
            Simd32x4::from(self[e12345]) * other.group1(),
        );
        let right_anti_dual = Flector::from_groups(
            // e15, e25, e35, e45
            other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([right_anti_dual[e45], right_anti_dual[e45], right_anti_dual[e45], 1.0])
                * anti_wedge.group1().xyz().with_w(
                    (anti_wedge[e1] * right_anti_dual[e4235]) + (anti_wedge[e2] * right_anti_dual[e4315]) + (anti_wedge[e3] * right_anti_dual[e4125])
                        - (anti_wedge[e321] * right_anti_dual[e45]),
                )
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            ((anti_wedge.group1().yzx() * right_anti_dual.group0().zxy()) - (anti_wedge.group1().zxy() * right_anti_dual.group0().yzx())).with_w(0.0),
        );
    }
}
impl RejectOrthogonallyFrom<AntiLine> for DualNum {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        3        0
    //    simd3        0        4        0
    // Totals...
    // yes simd        2        7        0
    //  no simd        2       15        0
    fn reject_orthogonally_from(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(self[e12345]) * other.group0(),
            // e15, e25, e35
            Simd32x3::from(self[e12345]) * other.group1(),
        );
        let right_anti_dual = Line::from_groups(
            // e415, e425, e435
            other.group0() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group1() * Simd32x3::from(-1.0),
        );
        return AntiScalar::from_groups(
            // e12345
            -(anti_wedge[e23] * right_anti_dual[e415]) - (anti_wedge[e31] * right_anti_dual[e425]) - (anti_wedge[e12] * right_anti_dual[e435]),
        );
    }
}
impl RejectOrthogonallyFrom<AntiMotor> for DualNum {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        5        0
    //    simd3        1        2        0
    //    simd4        0        5        0
    // Totals...
    // yes simd        4       12        0
    //  no simd        6       31        0
    fn reject_orthogonally_from(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(self[e12345]) * other.group0(),
            // e15, e25, e35, e3215
            Simd32x4::from(self[e12345]) * other.group1(),
        );
        let right_anti_dual = Motor::from_groups(
            // e415, e425, e435, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([right_anti_dual[e415], right_anti_dual[e425], right_anti_dual[e435], 1.0])
                * anti_wedge.group0().www().with_w(
                    (anti_wedge[scalar] * right_anti_dual[e12345])
                        - (anti_wedge[e23] * right_anti_dual[e415])
                        - (anti_wedge[e31] * right_anti_dual[e425])
                        - (anti_wedge[e12] * right_anti_dual[e435]),
                ),
            // e235, e315, e125, e5
            ((Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group1().xyz()) + (Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group0().xyz()))
                .with_w(anti_wedge[scalar] * right_anti_dual[e5]),
        );
    }
}
impl RejectOrthogonallyFrom<AntiPlane> for DualNum {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        3        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        2        5        0
    //  no simd        2       11        0
    fn reject_orthogonally_from(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from(self[e12345]) * other.group0());
        let right_anti_dual = Plane::from_groups(/* e4235, e4315, e4125, e3215 */ other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]));
        return AntiScalar::from_groups(
            // e12345
            (anti_wedge[e1] * right_anti_dual[e4235]) + (anti_wedge[e2] * right_anti_dual[e4315]) + (anti_wedge[e3] * right_anti_dual[e4125]),
        );
    }
}
impl RejectOrthogonallyFrom<AntiScalar> for DualNum {
    type Output = DualNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd2        0        1        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0        5        0
    fn reject_orthogonally_from(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return DualNum::from_groups(
            // e5, e12345
            Simd32x2::from(other[e12345] * -1.0) * Simd32x2::from([other[e12345] * self[e5], other[e12345] * self[e12345]]),
        );
    }
}
impl RejectOrthogonallyFrom<Circle> for DualNum {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       10        0
    //    simd3        0        2        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        9       14        0
    //  no simd        9       24        0
    fn reject_orthogonally_from(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[e12345]) * other.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(self[e12345]) * other.group1(),
            // e235, e315, e125
            Simd32x3::from(self[e12345]) * other.group2(),
        );
        let right_anti_dual = Dipole::from_groups(
            // e41, e42, e43
            other.group0(),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35
            other.group2(),
        );
        return AntiScalar::from_groups(
            // e12345
            -(anti_wedge[e423] * right_anti_dual[e15])
                - (anti_wedge[e431] * right_anti_dual[e25])
                - (anti_wedge[e412] * right_anti_dual[e35])
                - (anti_wedge[e415] * right_anti_dual[e23])
                - (anti_wedge[e425] * right_anti_dual[e31])
                - (anti_wedge[e435] * right_anti_dual[e12])
                - (anti_wedge[e321] * right_anti_dual[e45])
                - (anti_wedge[e235] * right_anti_dual[e41])
                - (anti_wedge[e315] * right_anti_dual[e42])
                - (anti_wedge[e125] * right_anti_dual[e43]),
        );
    }
}
impl RejectOrthogonallyFrom<CircleRotor> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       27        0
    //    simd3        3        7        0
    //    simd4        4        7        0
    // Totals...
    // yes simd       22       41        0
    //  no simd       40       76        0
    fn reject_orthogonally_from(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(self[e12345]) * other.group0().with_w(other[e12345]),
            // e415, e425, e435, e321
            Simd32x4::from(self[e12345]) * other.group1(),
            // e235, e315, e125, e5
            other.group2() * self.group0().yy().with_zw(self[e12345], self[e5]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
        let right_anti_dual = AntiCircleRotor::from_groups(
            // e41, e42, e43
            other.group0(),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, scalar
            other.group2() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (right_anti_dual[e23] * anti_wedge[e4]) + (right_anti_dual[scalar] * anti_wedge[e423]),
                (right_anti_dual[e31] * anti_wedge[e4]) + (right_anti_dual[scalar] * anti_wedge[e431]),
                (right_anti_dual[e12] * anti_wedge[e4]) + (right_anti_dual[scalar] * anti_wedge[e412]),
                -(right_anti_dual[e42] * anti_wedge[e315])
                    - (right_anti_dual[e43] * anti_wedge[e125])
                    - (right_anti_dual[e23] * anti_wedge[e415])
                    - (right_anti_dual[e31] * anti_wedge[e425])
                    - (right_anti_dual[e12] * anti_wedge[e435])
                    - (right_anti_dual[e45] * anti_wedge[e321])
                    - (right_anti_dual[e15] * anti_wedge[e423])
                    - (right_anti_dual[e25] * anti_wedge[e431])
                    - (right_anti_dual[e35] * anti_wedge[e412]),
            ]) + (right_anti_dual.group0().yzx() * anti_wedge.group3().zxy()).with_w(right_anti_dual[scalar] * anti_wedge[e12345])
                - (right_anti_dual.group0().zxy() * anti_wedge.group3().yzx()).with_w(right_anti_dual[e41] * anti_wedge[e235]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (right_anti_dual[e15] * anti_wedge[e4]) + (right_anti_dual[scalar] * anti_wedge[e415]),
                (right_anti_dual[e25] * anti_wedge[e4]) + (right_anti_dual[scalar] * anti_wedge[e425]),
                (right_anti_dual[e35] * anti_wedge[e4]) + (right_anti_dual[scalar] * anti_wedge[e435]),
                -(right_anti_dual[e31] * anti_wedge[e2]) - (right_anti_dual[e12] * anti_wedge[e3]),
            ]) + (right_anti_dual.group0() * anti_wedge.group2().www()).with_w(right_anti_dual[scalar] * anti_wedge[e321])
                - (right_anti_dual.group1().wwwx() * anti_wedge.group3().xyzx()),
            // e235, e315, e125, e5
            ((Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group2().xyz())
                + (Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group1().xyz())
                + (right_anti_dual.group2().zxy() * anti_wedge.group3().yzx())
                - (right_anti_dual.group2().yzx() * anti_wedge.group3().zxy()))
            .with_w(right_anti_dual[scalar] * anti_wedge[e5]),
            // e1, e2, e3, e4
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group3(),
        );
    }
}
impl RejectOrthogonallyFrom<Dipole> for DualNum {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       10        0
    //    simd3        0        4        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        9       16        0
    //  no simd        9       30        0
    fn reject_orthogonally_from(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[e12345]) * other.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(self[e12345]) * other.group1(),
            // e15, e25, e35
            Simd32x3::from(self[e12345]) * other.group2(),
        );
        let right_anti_dual = Circle::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125
            other.group2() * Simd32x3::from(-1.0),
        );
        return AntiScalar::from_groups(
            // e12345
            -(right_anti_dual[e423] * anti_wedge[e15])
                - (right_anti_dual[e431] * anti_wedge[e25])
                - (right_anti_dual[e412] * anti_wedge[e35])
                - (right_anti_dual[e415] * anti_wedge[e23])
                - (right_anti_dual[e425] * anti_wedge[e31])
                - (right_anti_dual[e435] * anti_wedge[e12])
                - (right_anti_dual[e321] * anti_wedge[e45])
                - (right_anti_dual[e235] * anti_wedge[e41])
                - (right_anti_dual[e315] * anti_wedge[e42])
                - (right_anti_dual[e125] * anti_wedge[e43]),
        );
    }
}
impl RejectOrthogonallyFrom<DipoleInversion> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       23        0
    //    simd3        3        8        0
    //    simd4        6       11        0
    // Totals...
    // yes simd       23       42        0
    //  no simd       47       91        0
    fn reject_orthogonally_from(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            self.group0().yy().with_zw(self[e12345], self[e5]) * other.group0().with_w(other[e1234]),
            // e23, e31, e12, e45
            Simd32x4::from(self[e12345]) * other.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(self[e12345]) * other.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * other.group3(),
        );
        let right_anti_dual = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e4
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group3() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (right_anti_dual.group3().zxyy() * anti_wedge.group0().yzx().with_w(anti_wedge[e4315]))
                + Simd32x3::from(0.0).with_w(
                    (right_anti_dual[e3] * anti_wedge[e4125]) + (right_anti_dual[e5] * anti_wedge[e1234])
                        - (right_anti_dual[e431] * anti_wedge[e25])
                        - (right_anti_dual[e412] * anti_wedge[e35])
                        - (right_anti_dual[e415] * anti_wedge[e23])
                        - (right_anti_dual[e425] * anti_wedge[e31])
                        - (right_anti_dual[e435] * anti_wedge[e12])
                        - (right_anti_dual[e321] * anti_wedge[e45])
                        - (right_anti_dual[e235] * anti_wedge[e41])
                        - (right_anti_dual[e315] * anti_wedge[e42])
                        - (right_anti_dual[e125] * anti_wedge[e43]),
                )
                + (right_anti_dual.group0() * anti_wedge.group0().www()).with_w(right_anti_dual[e4] * anti_wedge[e3215])
                + (right_anti_dual.group2().www() * anti_wedge.group1().xyz()).with_w(right_anti_dual[e1] * anti_wedge[e4235])
                - (right_anti_dual.group3().yzx() * anti_wedge.group0().zxy()).with_w(right_anti_dual[e423] * anti_wedge[e15]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (right_anti_dual[e4] * anti_wedge[e15]) + (right_anti_dual[e5] * anti_wedge[e41]),
                (right_anti_dual[e4] * anti_wedge[e25]) + (right_anti_dual[e5] * anti_wedge[e42]),
                (right_anti_dual[e4] * anti_wedge[e35]) + (right_anti_dual[e5] * anti_wedge[e43]),
                -(right_anti_dual[e2] * anti_wedge[e31]) - (right_anti_dual[e3] * anti_wedge[e12]),
            ]) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1())
                - (right_anti_dual.group3().xyzx() * anti_wedge.group1().wwwx()),
            // e235, e315, e125, e5
            ((Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group1().xyz())
                + (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group2().xyz())
                + (right_anti_dual.group3().yzx() * anti_wedge.group2().zxy())
                - (right_anti_dual.group3().zxy() * anti_wedge.group2().yzx()))
            .with_w(right_anti_dual[e5] * anti_wedge[scalar]),
            // e1, e2, e3, e4
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group3().xyz().with_w(right_anti_dual[e4]),
        );
    }
}
impl RejectOrthogonallyFrom<DualNum> for DualNum {
    type Output = DualNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        4        0
    //    simd2        0        1        0
    // Totals...
    // yes simd        1        5        0
    //  no simd        1        6        0
    fn reject_orthogonally_from(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return DualNum::from_groups(
            // e5, e12345
            Simd32x2::from(other[e12345] * -1.0) * Simd32x2::from([(other[e5] * self[e12345]) + (other[e12345] * self[e5]), other[e12345] * self[e12345]]),
        );
    }
}
impl RejectOrthogonallyFrom<FlatPoint> for DualNum {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn reject_orthogonally_from(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ self[e12345] * f32::powi(other[e45], 2) * -1.0);
    }
}
impl RejectOrthogonallyFrom<Flector> for DualNum {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        4        0
    //    simd3        1        2        0
    //    simd4        0        6        0
    // Totals...
    // yes simd        4       12        0
    //  no simd        6       34        0
    fn reject_orthogonally_from(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(self[e12345]) * other.group0(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * other.group1(),
        );
        let right_anti_dual = AntiFlector::from_groups(
            // e235, e315, e125, e321
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([anti_wedge[e45], anti_wedge[e45], anti_wedge[e45], 1.0])
                * right_anti_dual.group1().xyz().with_w(
                    (right_anti_dual[e1] * anti_wedge[e4235]) + (right_anti_dual[e2] * anti_wedge[e4315]) + (right_anti_dual[e3] * anti_wedge[e4125])
                        - (right_anti_dual[e321] * anti_wedge[e45]),
                )
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            ((right_anti_dual.group1().yzx() * anti_wedge.group0().zxy()) - (right_anti_dual.group1().zxy() * anti_wedge.group0().yzx())).with_w(0.0),
        );
    }
}
impl RejectOrthogonallyFrom<Line> for DualNum {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        3        0
    //    simd3        0        2        0
    // Totals...
    // yes simd        2        5        0
    //  no simd        2        9        0
    fn reject_orthogonally_from(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(self[e12345]) * other.group0(),
            // e235, e315, e125
            Simd32x3::from(self[e12345]) * other.group1(),
        );
        let right_anti_dual = AntiLine::from_groups(/* e23, e31, e12 */ other.group0(), /* e15, e25, e35 */ other.group1());
        return AntiScalar::from_groups(
            // e12345
            -(right_anti_dual[e23] * anti_wedge[e415]) - (right_anti_dual[e31] * anti_wedge[e425]) - (right_anti_dual[e12] * anti_wedge[e435]),
        );
    }
}
impl RejectOrthogonallyFrom<Motor> for DualNum {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        7        0
    //    simd3        1        2        0
    //    simd4        0        5        0
    // Totals...
    // yes simd        5       14        0
    //  no simd        7       33        0
    fn reject_orthogonally_from(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(self[e12345]) * other.group0(),
            // e235, e315, e125, e5
            Simd32x4::from([other[e235], other[e315], other[e125], 1.0]) * self.group0().yy().with_zw(self[e12345], (self[e5] * other[e12345]) + (self[e12345] * other[e5])),
        );
        let right_anti_dual = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e3215
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([anti_wedge[e415], anti_wedge[e425], anti_wedge[e435], 1.0])
                * right_anti_dual.group0().www().with_w(
                    (right_anti_dual[scalar] * anti_wedge[e12345])
                        - (right_anti_dual[e23] * anti_wedge[e415])
                        - (right_anti_dual[e31] * anti_wedge[e425])
                        - (right_anti_dual[e12] * anti_wedge[e435]),
                ),
            // e235, e315, e125, e5
            ((Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group1().xyz()) + (Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group0().xyz()))
                .with_w(right_anti_dual[scalar] * anti_wedge[e5]),
        );
    }
}
impl RejectOrthogonallyFrom<MultiVector> for DualNum {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       73       99        0
    //    simd2        0        1        0
    //    simd3       20       38        0
    //    simd4       20       21        0
    // Totals...
    // yes simd      113      159        0
    //  no simd      213      299        0
    fn reject_orthogonally_from(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([(self[e5] * other[e1234]) + (self[e12345] * other[scalar]), self[e12345] * other[e12345]]),
            // e1, e2, e3, e4
            Simd32x4::from(self[e12345]) * other.group1(),
            // e5
            (self[e5] * other[e12345]) + (self[e12345] * other[e5]),
            // e15, e25, e35, e45
            Simd32x4::from(self[e12345]) * other.group3(),
            // e41, e42, e43
            Simd32x3::from(self[e12345]) * other.group4(),
            // e23, e31, e12
            Simd32x3::from(self[e12345]) * other.group5(),
            // e415, e425, e435, e321
            Simd32x4::from(self[e12345]) * other.group6(),
            // e423, e431, e412
            Simd32x3::from(self[e12345]) * other.group7(),
            // e235, e315, e125
            Simd32x3::from(self[e12345]) * other.group8(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * other.group9(),
            // e1234
            self[e12345] * other[e1234],
        );
        let right_anti_dual = MultiVector::from_groups(
            // scalar, e12345
            other.group0().yx() * Simd32x2::from([-1.0, 1.0]),
            // e1, e2, e3, e4
            other.group9().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e5
            other[e3215],
            // e15, e25, e35, e45
            other.group8().with_w(other[e321] * -1.0),
            // e41, e42, e43
            other.group7(),
            // e23, e31, e12
            other.group6().xyz(),
            // e415, e425, e435, e321
            other.group5().with_w(other[e45]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e423, e431, e412
            other.group4() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group3().xyz() * Simd32x3::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group1().xyz().with_w(other[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1234
            other[e4] * -1.0,
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                anti_wedge[scalar] * right_anti_dual[scalar],
                (anti_wedge[scalar] * right_anti_dual[e12345])
                    + (anti_wedge[e12345] * right_anti_dual[scalar])
                    + (anti_wedge[e1] * right_anti_dual[e4235])
                    + (anti_wedge[e2] * right_anti_dual[e4315])
                    + (anti_wedge[e3] * right_anti_dual[e4125])
                    + (anti_wedge[e4] * right_anti_dual[e3215])
                    + (anti_wedge[e5] * right_anti_dual[e1234])
                    + (anti_wedge[e4235] * right_anti_dual[e1])
                    + (anti_wedge[e4315] * right_anti_dual[e2])
                    + (anti_wedge[e4125] * right_anti_dual[e3])
                    + (anti_wedge[e3215] * right_anti_dual[e4])
                    + (anti_wedge[e1234] * right_anti_dual[e5])
                    - (anti_wedge[e15] * right_anti_dual[e423])
                    - (anti_wedge[e25] * right_anti_dual[e431])
                    - (anti_wedge[e35] * right_anti_dual[e412])
                    - (anti_wedge[e45] * right_anti_dual[e321])
                    - (anti_wedge[e41] * right_anti_dual[e235])
                    - (anti_wedge[e42] * right_anti_dual[e315])
                    - (anti_wedge[e43] * right_anti_dual[e125])
                    - (anti_wedge[e23] * right_anti_dual[e415])
                    - (anti_wedge[e31] * right_anti_dual[e425])
                    - (anti_wedge[e12] * right_anti_dual[e435])
                    - (anti_wedge[e415] * right_anti_dual[e23])
                    - (anti_wedge[e425] * right_anti_dual[e31])
                    - (anti_wedge[e435] * right_anti_dual[e12])
                    - (anti_wedge[e321] * right_anti_dual[e45])
                    - (anti_wedge[e423] * right_anti_dual[e15])
                    - (anti_wedge[e431] * right_anti_dual[e25])
                    - (anti_wedge[e412] * right_anti_dual[e35])
                    - (anti_wedge[e235] * right_anti_dual[e41])
                    - (anti_wedge[e315] * right_anti_dual[e42])
                    - (anti_wedge[e125] * right_anti_dual[e43]),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1()) + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1()),
            // e5
            (anti_wedge[scalar] * right_anti_dual[e5]) + (anti_wedge[e5] * right_anti_dual[scalar]),
            // e15, e25, e35, e45
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group3())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group3())
                + (Simd32x4::from(right_anti_dual[e5]) * anti_wedge.group1())
                - (Simd32x4::from(anti_wedge[e5]) * right_anti_dual.group1()),
            // e41, e42, e43
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group4())
                + (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group1().xyz())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group4())
                - (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group1().xyz()),
            // e23, e31, e12
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group5())
                + (anti_wedge.group1().yzx() * right_anti_dual.group1().zxy())
                - (anti_wedge.group1().zxy() * right_anti_dual.group1().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (anti_wedge[e4] * right_anti_dual[e15])
                    + (anti_wedge[e5] * right_anti_dual[e41])
                    + (anti_wedge[e15] * right_anti_dual[e4])
                    + (anti_wedge[e41] * right_anti_dual[e5]),
                (anti_wedge[e4] * right_anti_dual[e25])
                    + (anti_wedge[e5] * right_anti_dual[e42])
                    + (anti_wedge[e25] * right_anti_dual[e4])
                    + (anti_wedge[e42] * right_anti_dual[e5]),
                (anti_wedge[e4] * right_anti_dual[e35])
                    + (anti_wedge[e5] * right_anti_dual[e43])
                    + (anti_wedge[e35] * right_anti_dual[e4])
                    + (anti_wedge[e43] * right_anti_dual[e5]),
                -(anti_wedge[e1] * right_anti_dual[e23])
                    - (anti_wedge[e2] * right_anti_dual[e31])
                    - (anti_wedge[e3] * right_anti_dual[e12])
                    - (anti_wedge[e12] * right_anti_dual[e3]),
            ]) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group6())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group6())
                - (right_anti_dual.group1().xyzy() * anti_wedge.group3().www().with_w(anti_wedge[e31]))
                - (right_anti_dual.group3().www() * anti_wedge.group1().xyz()).with_w(anti_wedge[e23] * right_anti_dual[e1]),
            // e423, e431, e412
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group7())
                + (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group7())
                + (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group5())
                + (anti_wedge.group4().yzx() * right_anti_dual.group1().zxy())
                + (right_anti_dual.group4().yzx() * anti_wedge.group1().zxy())
                - (anti_wedge.group4().zxy() * right_anti_dual.group1().yzx())
                - (right_anti_dual.group4().zxy() * anti_wedge.group1().yzx()),
            // e235, e315, e125
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group8())
                + (Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group8())
                + (Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group5())
                + (anti_wedge.group1().yzx() * right_anti_dual.group3().zxy())
                + (anti_wedge.group3().zxy() * right_anti_dual.group1().yzx())
                - (anti_wedge.group1().zxy() * right_anti_dual.group3().yzx())
                - (anti_wedge.group3().yzx() * right_anti_dual.group1().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (anti_wedge[e3] * right_anti_dual[e425])
                    + (anti_wedge[e4] * right_anti_dual[e235])
                    + (anti_wedge[e45] * right_anti_dual[e23])
                    + (anti_wedge[e435] * right_anti_dual[e2]),
                (anti_wedge[e1] * right_anti_dual[e435])
                    + (anti_wedge[e4] * right_anti_dual[e315])
                    + (anti_wedge[e45] * right_anti_dual[e31])
                    + (anti_wedge[e415] * right_anti_dual[e3]),
                (anti_wedge[e2] * right_anti_dual[e415])
                    + (anti_wedge[e4] * right_anti_dual[e125])
                    + (anti_wedge[e45] * right_anti_dual[e12])
                    + (anti_wedge[e425] * right_anti_dual[e1]),
                -(anti_wedge[e1] * right_anti_dual[e235])
                    - (anti_wedge[e2] * right_anti_dual[e315])
                    - (anti_wedge[e3] * right_anti_dual[e125])
                    - (anti_wedge[e5] * right_anti_dual[e321]),
            ]) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group9())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group9())
                + (Simd32x4::from([right_anti_dual[e5], right_anti_dual[e5], right_anti_dual[e5], right_anti_dual[e3]]) * anti_wedge.group7().with_w(anti_wedge[e125]))
                + (anti_wedge.group5() * right_anti_dual.group3().www()).with_w(anti_wedge[e315] * right_anti_dual[e2])
                + (anti_wedge.group4().yzx() * right_anti_dual.group3().zxy()).with_w(anti_wedge[e235] * right_anti_dual[e1])
                + (right_anti_dual.group4().yzx() * anti_wedge.group3().zxy()).with_w(anti_wedge[e321] * right_anti_dual[e5])
                - (Simd32x4::from([anti_wedge[e5], anti_wedge[e5], anti_wedge[e5], anti_wedge[e15]]) * right_anti_dual.group7().with_w(right_anti_dual[e23]))
                - (right_anti_dual.group3().yzxx() * anti_wedge.group4().zxy().with_w(anti_wedge[e23]))
                - (anti_wedge.group8() * right_anti_dual.group1().www()).with_w(anti_wedge[e31] * right_anti_dual[e25])
                - (right_anti_dual.group4().zxy() * anti_wedge.group3().yzx()).with_w(anti_wedge[e12] * right_anti_dual[e35])
                - (anti_wedge.group1().yzx() * right_anti_dual.group6().zxy()).with_w(anti_wedge[e25] * right_anti_dual[e31])
                - (anti_wedge.group6().yzx() * right_anti_dual.group1().zxy()).with_w(anti_wedge[e35] * right_anti_dual[e12]),
            // e1234
            (anti_wedge[scalar] * right_anti_dual[e1234])
                + (anti_wedge[e1] * right_anti_dual[e423])
                + (anti_wedge[e2] * right_anti_dual[e431])
                + (anti_wedge[e3] * right_anti_dual[e412])
                + (anti_wedge[e4] * right_anti_dual[e321])
                + (anti_wedge[e1234] * right_anti_dual[scalar])
                - (anti_wedge[e41] * right_anti_dual[e23])
                - (anti_wedge[e42] * right_anti_dual[e31])
                - (anti_wedge[e43] * right_anti_dual[e12])
                - (anti_wedge[e23] * right_anti_dual[e41])
                - (anti_wedge[e31] * right_anti_dual[e42])
                - (anti_wedge[e12] * right_anti_dual[e43])
                - (anti_wedge[e321] * right_anti_dual[e4])
                - (anti_wedge[e423] * right_anti_dual[e1])
                - (anti_wedge[e431] * right_anti_dual[e2])
                - (anti_wedge[e412] * right_anti_dual[e3]),
        );
    }
}
impl RejectOrthogonallyFrom<Plane> for DualNum {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        3        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        2        5        0
    //  no simd        2       11        0
    fn reject_orthogonally_from(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from(self[e12345]) * other.group0());
        let right_anti_dual = AntiPlane::from_groups(/* e1, e2, e3, e5 */ other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]));
        return AntiScalar::from_groups(
            // e12345
            (right_anti_dual[e1] * anti_wedge[e4235]) + (right_anti_dual[e2] * anti_wedge[e4315]) + (right_anti_dual[e3] * anti_wedge[e4125]),
        );
    }
}
impl RejectOrthogonallyFrom<RoundPoint> for DualNum {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        7        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        4        9        0
    //  no simd        4       15        0
    fn reject_orthogonally_from(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = RoundPoint::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from(self[e12345]) * other.group0(), /* e5 */ self[e12345] * other[e5]);
        let right_anti_dual = Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            other.group0().xyz().with_w(other[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1234
            other[e4] * -1.0,
        );
        return AntiScalar::from_groups(
            // e12345
            (anti_wedge[e1] * right_anti_dual[e4235])
                + (anti_wedge[e2] * right_anti_dual[e4315])
                + (anti_wedge[e3] * right_anti_dual[e4125])
                + (anti_wedge[e4] * right_anti_dual[e3215])
                + (anti_wedge[e5] * right_anti_dual[e1234]),
        );
    }
}
impl RejectOrthogonallyFrom<Scalar> for DualNum {
    type Output = AntiScalar;
    fn reject_orthogonally_from(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ self[e12345] * f32::powi(other[scalar], 2));
    }
}
impl RejectOrthogonallyFrom<Sphere> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2       12        0
    //    simd3        2        6        0
    //    simd4        4        5        0
    // Totals...
    // yes simd        8       23        0
    //  no simd       24       50        0
    fn reject_orthogonally_from(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x3::from(0.0).with_w(self[e5] * other[e1234]),
            // e23, e31, e12, e45
            Simd32x4::from(0.0),
            // e15, e25, e35, e1234
            Simd32x3::from(0.0).with_w(self[e12345] * other[e1234]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * other.group0(),
        );
        let right_anti_dual = RoundPoint::from_groups(
            // e1, e2, e3, e4
            other.group0().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e5
            other[e3215],
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                right_anti_dual[e2] * anti_wedge[e43] * -1.0,
                right_anti_dual[e3] * anti_wedge[e41] * -1.0,
                right_anti_dual[e1] * anti_wedge[e42] * -1.0,
                (right_anti_dual[e3] * anti_wedge[e4125]) + (right_anti_dual[e4] * anti_wedge[e3215]) + (right_anti_dual[e5] * anti_wedge[e1234]),
            ]) + (right_anti_dual.group0().zxyx() * anti_wedge.group0().yzx().with_w(anti_wedge[e4235]))
                + (right_anti_dual.group0().wwwy() * anti_wedge.group1().xyz().with_w(anti_wedge[e4315])),
            // e415, e425, e435, e321
            (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group2().xyz()).with_w(0.0) + (Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group0().xyz()).with_w(0.0)
                - (Simd32x3::from(anti_wedge[e45]) * right_anti_dual.group0().xyz()).with_w(0.0),
            // e235, e315, e125, e5
            ((Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group1().xyz()) + (right_anti_dual.group0().yzx() * anti_wedge.group2().zxy())
                - (right_anti_dual.group0().zxy() * anti_wedge.group2().yzx()))
            .with_w(right_anti_dual[e5] * anti_wedge[scalar]),
            // e1, e2, e3, e4
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group0(),
        );
    }
}
impl RejectOrthogonallyFrom<VersorEven> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       25        0
    //    simd3        3        6        0
    //    simd4        6       13        0
    // Totals...
    // yes simd       25       44        0
    //  no simd       49       95        0
    fn reject_orthogonally_from(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(self[e12345]) * other.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(self[e12345]) * other.group1(),
            // e235, e315, e125, e5
            Simd32x4::from([other[e235], other[e315], other[e125], 1.0]) * self.group0().yy().with_zw(self[e12345], (self[e5] * other[e12345]) + (self[e12345] * other[e5])),
            // e1, e2, e3, e4
            Simd32x4::from(self[e12345]) * other.group3(),
        );
        let right_anti_dual = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e1234
            other.group2().xyz().with_w(other[e4]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            other.group3().xyz().with_w(other[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group0())
                + (anti_wedge.group3().wwwx() * right_anti_dual.group1().xyz().with_w(right_anti_dual[e4235]))
                + Simd32x3::from(0.0).with_w(
                    (anti_wedge[e2] * right_anti_dual[e4315]) + (anti_wedge[e3] * right_anti_dual[e4125]) + (anti_wedge[e4] * right_anti_dual[e3215])
                        - (anti_wedge[e431] * right_anti_dual[e25])
                        - (anti_wedge[e412] * right_anti_dual[e35])
                        - (anti_wedge[e415] * right_anti_dual[e23])
                        - (anti_wedge[e425] * right_anti_dual[e31])
                        - (anti_wedge[e435] * right_anti_dual[e12])
                        - (anti_wedge[e321] * right_anti_dual[e45])
                        - (anti_wedge[e235] * right_anti_dual[e41])
                        - (anti_wedge[e315] * right_anti_dual[e42])
                        - (anti_wedge[e125] * right_anti_dual[e43]),
                )
                + (anti_wedge.group3().zxy() * right_anti_dual.group0().yzx()).with_w(anti_wedge[e5] * right_anti_dual[e1234])
                - (anti_wedge.group3().yzx() * right_anti_dual.group0().zxy()).with_w(anti_wedge[e423] * right_anti_dual[e15]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (anti_wedge[e5] * right_anti_dual[e41]) + (anti_wedge[e4] * right_anti_dual[e15]),
                (anti_wedge[e5] * right_anti_dual[e42]) + (anti_wedge[e4] * right_anti_dual[e25]),
                (anti_wedge[e5] * right_anti_dual[e43]) + (anti_wedge[e4] * right_anti_dual[e35]),
                -(anti_wedge[e2] * right_anti_dual[e31]) - (anti_wedge[e3] * right_anti_dual[e12]),
            ]) + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1())
                - (anti_wedge.group3().xyzx() * right_anti_dual.group1().wwwx()),
            // e235, e315, e125, e5
            ((Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group1().xyz())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group2().xyz())
                + (anti_wedge.group3().yzx() * right_anti_dual.group2().zxy())
                - (anti_wedge.group3().zxy() * right_anti_dual.group2().yzx()))
            .with_w(anti_wedge[e5] * right_anti_dual[scalar]),
            // e1, e2, e3, e4
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group3(),
        );
    }
}
impl RejectOrthogonallyFrom<VersorOdd> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       25        0
    //    simd3        3        6        0
    //    simd4        6       13        0
    // Totals...
    // yes simd       25       44        0
    //  no simd       49       95        0
    fn reject_orthogonally_from(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([other[e41], other[e42], other[e43], 1.0]) * self.group0().yy().with_zw(self[e12345], (self[e5] * other[e1234]) + (self[e12345] * other[scalar])),
            // e23, e31, e12, e45
            Simd32x4::from(self[e12345]) * other.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(self[e12345]) * other.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * other.group3(),
        );
        let right_anti_dual = VersorEven::from_groups(
            // e423, e431, e412, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            other.group2().xyz().with_w(other[e3215]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e4
            other.group3().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group0())
                + (right_anti_dual.group3().wwwx() * anti_wedge.group1().xyz().with_w(anti_wedge[e4235]))
                + Simd32x3::from(0.0).with_w(
                    (right_anti_dual[e2] * anti_wedge[e4315]) + (right_anti_dual[e3] * anti_wedge[e4125]) + (right_anti_dual[e4] * anti_wedge[e3215])
                        - (right_anti_dual[e431] * anti_wedge[e25])
                        - (right_anti_dual[e412] * anti_wedge[e35])
                        - (right_anti_dual[e415] * anti_wedge[e23])
                        - (right_anti_dual[e425] * anti_wedge[e31])
                        - (right_anti_dual[e435] * anti_wedge[e12])
                        - (right_anti_dual[e321] * anti_wedge[e45])
                        - (right_anti_dual[e235] * anti_wedge[e41])
                        - (right_anti_dual[e315] * anti_wedge[e42])
                        - (right_anti_dual[e125] * anti_wedge[e43]),
                )
                + (right_anti_dual.group3().zxy() * anti_wedge.group0().yzx()).with_w(right_anti_dual[e5] * anti_wedge[e1234])
                - (right_anti_dual.group3().yzx() * anti_wedge.group0().zxy()).with_w(right_anti_dual[e423] * anti_wedge[e15]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (right_anti_dual[e5] * anti_wedge[e41]) + (right_anti_dual[e4] * anti_wedge[e15]),
                (right_anti_dual[e5] * anti_wedge[e42]) + (right_anti_dual[e4] * anti_wedge[e25]),
                (right_anti_dual[e5] * anti_wedge[e43]) + (right_anti_dual[e4] * anti_wedge[e35]),
                -(right_anti_dual[e2] * anti_wedge[e31]) - (right_anti_dual[e3] * anti_wedge[e12]),
            ]) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1())
                - (right_anti_dual.group3().xyzx() * anti_wedge.group1().wwwx()),
            // e235, e315, e125, e5
            ((Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group1().xyz())
                + (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group2().xyz())
                + (right_anti_dual.group3().yzx() * anti_wedge.group2().zxy())
                - (right_anti_dual.group3().zxy() * anti_wedge.group2().yzx()))
            .with_w(right_anti_dual[e5] * anti_wedge[scalar]),
            // e1, e2, e3, e4
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group3(),
        );
    }
}
impl std::ops::Div<reject_orthogonally_from> for FlatPoint {
    type Output = reject_orthogonally_from_partial<FlatPoint>;
    fn div(self, _rhs: reject_orthogonally_from) -> Self::Output {
        reject_orthogonally_from_partial(self)
    }
}
impl RejectOrthogonallyFrom<AntiDipoleInversion> for FlatPoint {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        4        0
    //    simd3        0        1        0
    //    simd4        0        6        0
    // Totals...
    // yes simd        3       11        0
    //  no simd        3       31        0
    fn reject_orthogonally_from(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Scalar::from_groups(
            // scalar
            -(other[e423] * self[e15]) - (other[e431] * self[e25]) - (other[e412] * self[e35]) - (other[e321] * self[e45]),
        );
        let right_anti_dual = DipoleInversion::from_groups(
            // e41, e42, e43
            other.group0(),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            other.group3() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group3(),
        );
    }
}
impl RejectOrthogonallyFrom<AntiFlatPoint> for FlatPoint {
    type Output = FlatPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0        7        0
    fn reject_orthogonally_from(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return FlatPoint::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(other[e321] * self[e45] * -1.0) * Simd32x4::from([other[e235], other[e315], other[e125], other[e321] * -1.0]),
        );
    }
}
impl RejectOrthogonallyFrom<AntiFlector> for FlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0       18        0
    fn reject_orthogonally_from(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Scalar::from_groups(/* scalar */ other[e321] * self[e45] * -1.0);
        let right_anti_dual = Flector::from_groups(
            // e15, e25, e35, e45
            other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1(),
        );
    }
}
impl RejectOrthogonallyFrom<AntiScalar> for FlatPoint {
    type Output = FlatPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        5        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0        9        0
    fn reject_orthogonally_from(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return FlatPoint::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(other[e12345] * -1.0) * Simd32x4::from([other[e12345] * self[e15], other[e12345] * self[e25], other[e12345] * self[e35], other[e12345] * self[e45]]),
        );
    }
}
impl RejectOrthogonallyFrom<Circle> for FlatPoint {
    type Output = Dipole;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        4        0
    //    simd3        0        2        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        3        8        0
    //  no simd        3       18        0
    fn reject_orthogonally_from(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Scalar::from_groups(
            // scalar
            -(other[e423] * self[e15]) - (other[e431] * self[e25]) - (other[e412] * self[e35]) - (other[e321] * self[e45]),
        );
        let right_anti_dual = Dipole::from_groups(
            // e41, e42, e43
            other.group0(),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35
            other.group2(),
        );
        return Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1(),
            // e15, e25, e35
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group2(),
        );
    }
}
impl RejectOrthogonallyFrom<CircleRotor> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       23       35        0
    //    simd3        1        3        0
    //    simd4        3        6        0
    // Totals...
    // yes simd       27       44        0
    //  no simd       38       68        0
    fn reject_orthogonally_from(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x3::from(0.0).with_w(other[e12345] * self[e45]),
            // e15, e25, e35, scalar
            Simd32x4::from([self[e15], self[e25], self[e35], 1.0])
                * other
                    .group2()
                    .www()
                    .with_w(-(other[e423] * self[e15]) - (other[e431] * self[e25]) - (other[e412] * self[e35]) - (other[e321] * self[e45])),
        );
        let right_anti_dual = AntiCircleRotor::from_groups(
            // e41, e42, e43
            other.group0(),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, scalar
            other.group2() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0()) + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group0()))
                .with_w(anti_wedge[scalar] * right_anti_dual[scalar]),
            // e23, e31, e12, e45
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1()) + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (anti_wedge[e15] * right_anti_dual[scalar]) + (anti_wedge[scalar] * right_anti_dual[e15]),
                (anti_wedge[e25] * right_anti_dual[scalar]) + (anti_wedge[scalar] * right_anti_dual[e25]),
                (anti_wedge[e35] * right_anti_dual[scalar]) + (anti_wedge[scalar] * right_anti_dual[e35]),
                -(anti_wedge[e41] * right_anti_dual[e23])
                    - (anti_wedge[e42] * right_anti_dual[e31])
                    - (anti_wedge[e43] * right_anti_dual[e12])
                    - (anti_wedge[e23] * right_anti_dual[e41])
                    - (anti_wedge[e31] * right_anti_dual[e42])
                    - (anti_wedge[e12] * right_anti_dual[e43]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (anti_wedge[e42] * right_anti_dual[e35])
                    + (anti_wedge[e23] * right_anti_dual[e45])
                    + (anti_wedge[e45] * right_anti_dual[e23])
                    + (anti_wedge[e35] * right_anti_dual[e42]),
                (anti_wedge[e43] * right_anti_dual[e15])
                    + (anti_wedge[e31] * right_anti_dual[e45])
                    + (anti_wedge[e45] * right_anti_dual[e31])
                    + (anti_wedge[e15] * right_anti_dual[e43]),
                (anti_wedge[e41] * right_anti_dual[e25])
                    + (anti_wedge[e12] * right_anti_dual[e45])
                    + (anti_wedge[e45] * right_anti_dual[e12])
                    + (anti_wedge[e25] * right_anti_dual[e41]),
                -(anti_wedge[e12] * right_anti_dual[e35])
                    - (anti_wedge[e15] * right_anti_dual[e23])
                    - (anti_wedge[e25] * right_anti_dual[e31])
                    - (anti_wedge[e35] * right_anti_dual[e12]),
            ]) - (right_anti_dual.group2().yzxx() * anti_wedge.group0().zxy().with_w(anti_wedge[e23]))
                - (right_anti_dual.group0().zxy() * anti_wedge.group2().yzx()).with_w(anti_wedge[e31] * right_anti_dual[e25]),
        );
    }
}
impl RejectOrthogonallyFrom<DipoleInversion> for FlatPoint {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       22        0
    //    simd3        1        4        0
    //    simd4        4        9        0
    // Totals...
    // yes simd       14       35        0
    //  no simd       28       70        0
    fn reject_orthogonally_from(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = RoundPoint::from_groups(
            // e1, e2, e3, e4
            Simd32x4::from(other[e1234]) * self.group0() * Simd32x4::from(-1.0),
            // e5
            (other[e4235] * self[e15]) + (other[e4315] * self[e25]) + (other[e4125] * self[e35]) + (other[e3215] * self[e45]),
        );
        let right_anti_dual = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e4
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group3() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group3().xyz()) - (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group0().xyz()),
            // e23, e31, e12, e45
            (right_anti_dual.group3().zxyw() * anti_wedge.group0().yzxw())
                - (right_anti_dual.group3().yzx() * anti_wedge.group0().zxy()).with_w(right_anti_dual[e4] * anti_wedge[e5]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                right_anti_dual[e1] * anti_wedge[e5] * -1.0,
                right_anti_dual[e2] * anti_wedge[e5] * -1.0,
                right_anti_dual[e3] * anti_wedge[e5] * -1.0,
                (right_anti_dual[e431] * anti_wedge[e2]) + (right_anti_dual[e412] * anti_wedge[e3]) + (right_anti_dual[e321] * anti_wedge[e4]),
            ]) + (anti_wedge.group0().xyzx() * right_anti_dual.group3().www().with_w(right_anti_dual[e423])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (right_anti_dual[e425] * anti_wedge[e3]) + (right_anti_dual[e235] * anti_wedge[e4]),
                (right_anti_dual[e435] * anti_wedge[e1]) + (right_anti_dual[e315] * anti_wedge[e4]),
                (right_anti_dual[e415] * anti_wedge[e2]) + (right_anti_dual[e125] * anti_wedge[e4]),
                -(right_anti_dual[e315] * anti_wedge[e2]) - (right_anti_dual[e125] * anti_wedge[e3]),
            ]) - (Simd32x4::from(anti_wedge[e5]) * right_anti_dual.group0().with_w(right_anti_dual[e321]))
                - (anti_wedge.group0().yzxx() * right_anti_dual.group1().zxy().with_w(right_anti_dual[e235])),
        );
    }
}
impl RejectOrthogonallyFrom<DualNum> for FlatPoint {
    type Output = FlatPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        5        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0        9        0
    fn reject_orthogonally_from(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return FlatPoint::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(other[e12345] * -1.0) * Simd32x4::from([other[e12345] * self[e15], other[e12345] * self[e25], other[e12345] * self[e35], other[e12345] * self[e45]]),
        );
    }
}
impl RejectOrthogonallyFrom<Flector> for FlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        6        0
    //    simd4        0        5        0
    // Totals...
    // yes simd        3       11        0
    //  no simd        3       26        0
    fn reject_orthogonally_from(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = DualNum::from_groups(/* e5, e12345 */ Simd32x2::from([
            (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]) + (self[e45] * other[e3215]),
            0.0,
        ]));
        let right_anti_dual = AntiFlector::from_groups(
            // e235, e315, e125, e321
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return Flector::from_groups(
            // e15, e25, e35, e45
            anti_wedge.group0().xx().with_zw(anti_wedge[e5], 0.0)
                * Simd32x3::from(1.0).with_w(0.0)
                * right_anti_dual.group1().xyz().with_w(0.0)
                * Simd32x4::from([-1.0, -1.0, -1.0, 0.0]),
            // e4235, e4315, e4125, e3215
            Simd32x3::from(0.0).with_w(right_anti_dual[e321] * anti_wedge[e5] * -1.0),
        );
    }
}
impl RejectOrthogonallyFrom<Motor> for FlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        3        0
    //    simd4        0        5        0
    // Totals...
    // yes simd        2        8        0
    //  no simd        2       23        0
    fn reject_orthogonally_from(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = FlatPoint::from_groups(/* e15, e25, e35, e45 */ Simd32x4::from(other[e12345]) * self.group0());
        let right_anti_dual = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e3215
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group0(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([anti_wedge[e45], anti_wedge[e45], anti_wedge[e45], 1.0])
                * right_anti_dual
                    .group0()
                    .xyz()
                    .with_w(-(right_anti_dual[e23] * anti_wedge[e15]) - (right_anti_dual[e31] * anti_wedge[e25]) - (right_anti_dual[e12] * anti_wedge[e35])),
        );
    }
}
impl RejectOrthogonallyFrom<MultiVector> for FlatPoint {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       77      101        0
    //    simd2        0        1        0
    //    simd3       20       34        0
    //    simd4       20       20        0
    // Totals...
    // yes simd      117      156        0
    //  no simd      217      285        0
    fn reject_orthogonally_from(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([-(self[e15] * other[e423]) - (self[e25] * other[e431]) - (self[e35] * other[e412]) - (self[e45] * other[e321]), 0.0]),
            // e1, e2, e3, e4
            Simd32x4::from(other[e1234]) * self.group0() * Simd32x4::from(-1.0),
            // e5
            (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]) + (self[e45] * other[e3215]),
            // e15, e25, e35, e45
            Simd32x4::from(other[e12345]) * self.group0(),
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(0.0),
            // e1234
            0.0,
        );
        let right_anti_dual = MultiVector::from_groups(
            // scalar, e12345
            other.group0().yx() * Simd32x2::from([-1.0, 1.0]),
            // e1, e2, e3, e4
            other.group9().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e5
            other[e3215],
            // e15, e25, e35, e45
            other.group8().with_w(other[e321] * -1.0),
            // e41, e42, e43
            other.group7(),
            // e23, e31, e12
            other.group6().xyz(),
            // e415, e425, e435, e321
            other.group5().with_w(other[e45]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e423, e431, e412
            other.group4() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group3().xyz() * Simd32x3::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group1().xyz().with_w(other[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1234
            other[e4] * -1.0,
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                anti_wedge[scalar] * right_anti_dual[scalar],
                (anti_wedge[scalar] * right_anti_dual[e12345])
                    + (anti_wedge[e12345] * right_anti_dual[scalar])
                    + (anti_wedge[e1] * right_anti_dual[e4235])
                    + (anti_wedge[e2] * right_anti_dual[e4315])
                    + (anti_wedge[e3] * right_anti_dual[e4125])
                    + (anti_wedge[e4] * right_anti_dual[e3215])
                    + (anti_wedge[e5] * right_anti_dual[e1234])
                    + (anti_wedge[e4235] * right_anti_dual[e1])
                    + (anti_wedge[e4315] * right_anti_dual[e2])
                    + (anti_wedge[e4125] * right_anti_dual[e3])
                    + (anti_wedge[e3215] * right_anti_dual[e4])
                    + (anti_wedge[e1234] * right_anti_dual[e5])
                    - (anti_wedge[e15] * right_anti_dual[e423])
                    - (anti_wedge[e25] * right_anti_dual[e431])
                    - (anti_wedge[e35] * right_anti_dual[e412])
                    - (anti_wedge[e45] * right_anti_dual[e321])
                    - (anti_wedge[e41] * right_anti_dual[e235])
                    - (anti_wedge[e42] * right_anti_dual[e315])
                    - (anti_wedge[e43] * right_anti_dual[e125])
                    - (anti_wedge[e23] * right_anti_dual[e415])
                    - (anti_wedge[e31] * right_anti_dual[e425])
                    - (anti_wedge[e12] * right_anti_dual[e435])
                    - (anti_wedge[e415] * right_anti_dual[e23])
                    - (anti_wedge[e425] * right_anti_dual[e31])
                    - (anti_wedge[e435] * right_anti_dual[e12])
                    - (anti_wedge[e321] * right_anti_dual[e45])
                    - (anti_wedge[e423] * right_anti_dual[e15])
                    - (anti_wedge[e431] * right_anti_dual[e25])
                    - (anti_wedge[e412] * right_anti_dual[e35])
                    - (anti_wedge[e235] * right_anti_dual[e41])
                    - (anti_wedge[e315] * right_anti_dual[e42])
                    - (anti_wedge[e125] * right_anti_dual[e43]),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1()) + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1()),
            // e5
            (anti_wedge[scalar] * right_anti_dual[e5]) + (anti_wedge[e5] * right_anti_dual[scalar]),
            // e15, e25, e35, e45
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group3())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group3())
                + (Simd32x4::from(right_anti_dual[e5]) * anti_wedge.group1())
                - (Simd32x4::from(anti_wedge[e5]) * right_anti_dual.group1()),
            // e41, e42, e43
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group4())
                + (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group1().xyz())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group4())
                - (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group1().xyz()),
            // e23, e31, e12
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group5())
                + (anti_wedge.group1().yzx() * right_anti_dual.group1().zxy())
                - (anti_wedge.group1().zxy() * right_anti_dual.group1().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (anti_wedge[e4] * right_anti_dual[e15])
                    + (anti_wedge[e5] * right_anti_dual[e41])
                    + (anti_wedge[e15] * right_anti_dual[e4])
                    + (anti_wedge[e41] * right_anti_dual[e5]),
                (anti_wedge[e4] * right_anti_dual[e25])
                    + (anti_wedge[e5] * right_anti_dual[e42])
                    + (anti_wedge[e25] * right_anti_dual[e4])
                    + (anti_wedge[e42] * right_anti_dual[e5]),
                (anti_wedge[e4] * right_anti_dual[e35])
                    + (anti_wedge[e5] * right_anti_dual[e43])
                    + (anti_wedge[e35] * right_anti_dual[e4])
                    + (anti_wedge[e43] * right_anti_dual[e5]),
                -(anti_wedge[e1] * right_anti_dual[e23])
                    - (anti_wedge[e2] * right_anti_dual[e31])
                    - (anti_wedge[e3] * right_anti_dual[e12])
                    - (anti_wedge[e12] * right_anti_dual[e3]),
            ]) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group6())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group6())
                - (right_anti_dual.group1().xyzy() * anti_wedge.group3().www().with_w(anti_wedge[e31]))
                - (right_anti_dual.group3().www() * anti_wedge.group1().xyz()).with_w(anti_wedge[e23] * right_anti_dual[e1]),
            // e423, e431, e412
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group7())
                + (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group7())
                + (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group5())
                + (anti_wedge.group4().yzx() * right_anti_dual.group1().zxy())
                + (right_anti_dual.group4().yzx() * anti_wedge.group1().zxy())
                - (anti_wedge.group4().zxy() * right_anti_dual.group1().yzx())
                - (right_anti_dual.group4().zxy() * anti_wedge.group1().yzx()),
            // e235, e315, e125
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group8())
                + (Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group8())
                + (Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group5())
                + (anti_wedge.group1().yzx() * right_anti_dual.group3().zxy())
                + (anti_wedge.group3().zxy() * right_anti_dual.group1().yzx())
                - (anti_wedge.group1().zxy() * right_anti_dual.group3().yzx())
                - (anti_wedge.group3().yzx() * right_anti_dual.group1().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (anti_wedge[e3] * right_anti_dual[e425])
                    + (anti_wedge[e4] * right_anti_dual[e235])
                    + (anti_wedge[e45] * right_anti_dual[e23])
                    + (anti_wedge[e435] * right_anti_dual[e2]),
                (anti_wedge[e1] * right_anti_dual[e435])
                    + (anti_wedge[e4] * right_anti_dual[e315])
                    + (anti_wedge[e45] * right_anti_dual[e31])
                    + (anti_wedge[e415] * right_anti_dual[e3]),
                (anti_wedge[e2] * right_anti_dual[e415])
                    + (anti_wedge[e4] * right_anti_dual[e125])
                    + (anti_wedge[e45] * right_anti_dual[e12])
                    + (anti_wedge[e425] * right_anti_dual[e1]),
                -(anti_wedge[e1] * right_anti_dual[e235])
                    - (anti_wedge[e2] * right_anti_dual[e315])
                    - (anti_wedge[e3] * right_anti_dual[e125])
                    - (anti_wedge[e5] * right_anti_dual[e321]),
            ]) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group9())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group9())
                + (Simd32x4::from([right_anti_dual[e5], right_anti_dual[e5], right_anti_dual[e5], right_anti_dual[e3]]) * anti_wedge.group7().with_w(anti_wedge[e125]))
                + (anti_wedge.group5() * right_anti_dual.group3().www()).with_w(anti_wedge[e315] * right_anti_dual[e2])
                + (anti_wedge.group4().yzx() * right_anti_dual.group3().zxy()).with_w(anti_wedge[e235] * right_anti_dual[e1])
                + (right_anti_dual.group4().yzx() * anti_wedge.group3().zxy()).with_w(anti_wedge[e321] * right_anti_dual[e5])
                - (Simd32x4::from([anti_wedge[e5], anti_wedge[e5], anti_wedge[e5], anti_wedge[e15]]) * right_anti_dual.group7().with_w(right_anti_dual[e23]))
                - (right_anti_dual.group3().yzxx() * anti_wedge.group4().zxy().with_w(anti_wedge[e23]))
                - (anti_wedge.group8() * right_anti_dual.group1().www()).with_w(anti_wedge[e31] * right_anti_dual[e25])
                - (right_anti_dual.group4().zxy() * anti_wedge.group3().yzx()).with_w(anti_wedge[e12] * right_anti_dual[e35])
                - (anti_wedge.group1().yzx() * right_anti_dual.group6().zxy()).with_w(anti_wedge[e25] * right_anti_dual[e31])
                - (anti_wedge.group6().yzx() * right_anti_dual.group1().zxy()).with_w(anti_wedge[e35] * right_anti_dual[e12]),
            // e1234
            (anti_wedge[scalar] * right_anti_dual[e1234])
                + (anti_wedge[e1] * right_anti_dual[e423])
                + (anti_wedge[e2] * right_anti_dual[e431])
                + (anti_wedge[e3] * right_anti_dual[e412])
                + (anti_wedge[e4] * right_anti_dual[e321])
                + (anti_wedge[e1234] * right_anti_dual[scalar])
                - (anti_wedge[e41] * right_anti_dual[e23])
                - (anti_wedge[e42] * right_anti_dual[e31])
                - (anti_wedge[e43] * right_anti_dual[e12])
                - (anti_wedge[e23] * right_anti_dual[e41])
                - (anti_wedge[e31] * right_anti_dual[e42])
                - (anti_wedge[e12] * right_anti_dual[e43])
                - (anti_wedge[e321] * right_anti_dual[e4])
                - (anti_wedge[e423] * right_anti_dual[e1])
                - (anti_wedge[e431] * right_anti_dual[e2])
                - (anti_wedge[e412] * right_anti_dual[e3]),
        );
    }
}
impl RejectOrthogonallyFrom<Plane> for FlatPoint {
    type Output = FlatPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        7        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        3       10        0
    //  no simd        3       19        0
    fn reject_orthogonally_from(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = DualNum::from_groups(/* e5, e12345 */ Simd32x2::from([
            (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]) + (self[e45] * other[e3215]),
            0.0,
        ]));
        return FlatPoint::from_groups(
            // e15, e25, e35, e45
            anti_wedge.group0().xx().with_zw(anti_wedge[e5], 0.0)
                * Simd32x3::from(1.0).with_w(0.0)
                * Simd32x4::from([other[e4235] * -1.0, other[e4315] * -1.0, other[e4125] * -1.0, other[e3215]]).xyz().with_w(0.0)
                * Simd32x4::from([-1.0, -1.0, -1.0, 0.0]),
        );
    }
}
impl RejectOrthogonallyFrom<Sphere> for FlatPoint {
    type Output = Dipole;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        5        0
    //    simd3        2        5        0
    //    simd4        1        4        0
    // Totals...
    // yes simd        6       14        0
    //  no simd       13       36        0
    fn reject_orthogonally_from(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = RoundPoint::from_groups(
            // e1, e2, e3, e4
            Simd32x4::from(other[e1234]) * self.group0() * Simd32x4::from(-1.0),
            // e5
            (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]) + (self[e45] * other[e3215]),
        );
        let right_anti_dual = RoundPoint::from_groups(
            // e1, e2, e3, e4
            other.group0().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e5
            other[e3215],
        );
        return Dipole::from_groups(
            // e41, e42, e43
            (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group0().xyz()) - (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group0().xyz()),
            // e23, e31, e12, e45
            (anti_wedge.group0().yzxw() * right_anti_dual.group0().zxy().with_w(right_anti_dual[e5]))
                - (anti_wedge.group0().zxy() * right_anti_dual.group0().yzx()).with_w(anti_wedge[e5] * right_anti_dual[e4]),
            // e15, e25, e35
            (Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group0().xyz()) - (Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group0().xyz()),
        );
    }
}
impl RejectOrthogonallyFrom<VersorEven> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       33        0
    //    simd3        1        4        0
    //    simd4        5        9        0
    // Totals...
    // yes simd       26       46        0
    //  no simd       43       81        0
    fn reject_orthogonally_from(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x3::from(0.0).with_w(self[e45] * other[e12345]),
            // e15, e25, e35, scalar
            Simd32x4::from([other[e12345], other[e12345], other[e12345], 1.0])
                * self
                    .group0()
                    .xyz()
                    .with_w(-(self[e15] * other[e423]) - (self[e25] * other[e431]) - (self[e35] * other[e412]) - (self[e45] * other[e321])),
        );
        let right_anti_dual = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e1234
            other.group2().xyz().with_w(other[e4]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            other.group3().xyz().with_w(other[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0().xyz()) + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group0()))
                .with_w(anti_wedge[scalar] * right_anti_dual[scalar]),
            // e23, e31, e12, e45
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1()) + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                anti_wedge[scalar] * right_anti_dual[e15],
                anti_wedge[scalar] * right_anti_dual[e25],
                anti_wedge[scalar] * right_anti_dual[e35],
                -(anti_wedge[e41] * right_anti_dual[e23])
                    - (anti_wedge[e42] * right_anti_dual[e31])
                    - (anti_wedge[e43] * right_anti_dual[e12])
                    - (anti_wedge[e23] * right_anti_dual[e41])
                    - (anti_wedge[e31] * right_anti_dual[e42])
                    - (anti_wedge[e12] * right_anti_dual[e43]),
            ]) + (anti_wedge.group2() * right_anti_dual.group0().www().with_w(right_anti_dual[e1234])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (anti_wedge[e23] * right_anti_dual[e45])
                    + (anti_wedge[e45] * right_anti_dual[e23])
                    + (anti_wedge[e35] * right_anti_dual[e42])
                    + (anti_wedge[scalar] * right_anti_dual[e4235]),
                (anti_wedge[e31] * right_anti_dual[e45])
                    + (anti_wedge[e45] * right_anti_dual[e31])
                    + (anti_wedge[e15] * right_anti_dual[e43])
                    + (anti_wedge[scalar] * right_anti_dual[e4315]),
                (anti_wedge[e12] * right_anti_dual[e45])
                    + (anti_wedge[e45] * right_anti_dual[e12])
                    + (anti_wedge[e25] * right_anti_dual[e41])
                    + (anti_wedge[scalar] * right_anti_dual[e4125]),
                -(anti_wedge[e12] * right_anti_dual[e35])
                    - (anti_wedge[e15] * right_anti_dual[e23])
                    - (anti_wedge[e25] * right_anti_dual[e31])
                    - (anti_wedge[e35] * right_anti_dual[e12]),
            ]) + (anti_wedge.group0().yzx() * right_anti_dual.group2().zxy()).with_w(anti_wedge[scalar] * right_anti_dual[e3215])
                - (right_anti_dual.group2().yzxx() * anti_wedge.group0().zxy().with_w(anti_wedge[e23]))
                - (anti_wedge.group2().yzx() * right_anti_dual.group0().zxy()).with_w(anti_wedge[e31] * right_anti_dual[e25]),
        );
    }
}
impl RejectOrthogonallyFrom<VersorOdd> for FlatPoint {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       22        0
    //    simd3        1        3        0
    //    simd4        4       10        0
    // Totals...
    // yes simd       14       35        0
    //  no simd       28       71        0
    fn reject_orthogonally_from(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = RoundPoint::from_groups(
            // e1, e2, e3, e4
            Simd32x4::from(other[e1234]) * self.group0() * Simd32x4::from(-1.0),
            // e5
            (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]) + (self[e45] * other[e3215]),
        );
        let right_anti_dual = VersorEven::from_groups(
            // e423, e431, e412, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            other.group2().xyz().with_w(other[e3215]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e4
            other.group3().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group3().xyz()) - (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group0().xyz()),
            // e23, e31, e12, e45
            (anti_wedge.group0().yzxw() * right_anti_dual.group3().zxy().with_w(right_anti_dual[e5]))
                - (anti_wedge.group0().zxy() * right_anti_dual.group3().yzx()).with_w(anti_wedge[e5] * right_anti_dual[e4]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                anti_wedge[e5] * right_anti_dual[e1] * -1.0,
                anti_wedge[e5] * right_anti_dual[e2] * -1.0,
                anti_wedge[e5] * right_anti_dual[e3] * -1.0,
                (anti_wedge[e2] * right_anti_dual[e431]) + (anti_wedge[e3] * right_anti_dual[e412]) + (anti_wedge[e4] * right_anti_dual[e321]),
            ]) + (anti_wedge.group0().xyzx() * right_anti_dual.group2().www().with_w(right_anti_dual[e423])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (anti_wedge[e3] * right_anti_dual[e425]) + (anti_wedge[e4] * right_anti_dual[e235]),
                (anti_wedge[e1] * right_anti_dual[e435]) + (anti_wedge[e4] * right_anti_dual[e315]),
                (anti_wedge[e2] * right_anti_dual[e415]) + (anti_wedge[e4] * right_anti_dual[e125]),
                -(anti_wedge[e3] * right_anti_dual[e125]) - (anti_wedge[e5] * right_anti_dual[e321]),
            ]) - (Simd32x4::from([anti_wedge[e5], anti_wedge[e5], anti_wedge[e5], right_anti_dual[e315]]) * right_anti_dual.group0().xyz().with_w(anti_wedge[e2]))
                - (anti_wedge.group0().yzxx() * right_anti_dual.group1().zxy().with_w(right_anti_dual[e235])),
        );
    }
}
impl std::ops::Div<reject_orthogonally_from> for Flector {
    type Output = reject_orthogonally_from_partial<Flector>;
    fn div(self, _rhs: reject_orthogonally_from) -> Self::Output {
        reject_orthogonally_from_partial(self)
    }
}
impl RejectOrthogonallyFrom<AntiCircleRotor> for Flector {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       24        0
    //    simd3        0        1        0
    //    simd4        3        5        0
    // Totals...
    // yes simd       17       30        0
    //  no simd       26       47        0
    fn reject_orthogonally_from(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = RoundPoint::from_groups(
            // e1, e2, e3, e4
            Simd32x4::from([
                -(other[e41] * self[e3215]) - (other[e31] * self[e4125]),
                -(other[e42] * self[e3215]) - (other[e12] * self[e4235]),
                -(other[e43] * self[e3215]) - (other[e23] * self[e4315]),
                (other[e42] * self[e4315]) + (other[e43] * self[e4125]),
            ]) + (self.group1().yzxx() * other.group1().zxy().with_w(other[e41])),
            // e5
            -(other[e45] * self[e3215]) - (other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]),
        );
        let right_anti_dual = CircleRotor::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e12345
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (right_anti_dual[e425] * anti_wedge[e3]) + (right_anti_dual[e235] * anti_wedge[e4]),
                (right_anti_dual[e435] * anti_wedge[e1]) + (right_anti_dual[e315] * anti_wedge[e4]),
                (right_anti_dual[e415] * anti_wedge[e2]) + (right_anti_dual[e125] * anti_wedge[e4]),
                -(right_anti_dual[e315] * anti_wedge[e2]) - (right_anti_dual[e125] * anti_wedge[e3]),
            ]) - (Simd32x4::from(anti_wedge[e5]) * right_anti_dual.group0().with_w(right_anti_dual[e321]))
                - (anti_wedge.group0().yzxx() * right_anti_dual.group1().zxy().with_w(right_anti_dual[e235])),
            // e1234
            (right_anti_dual[e423] * anti_wedge[e1])
                + (right_anti_dual[e431] * anti_wedge[e2])
                + (right_anti_dual[e412] * anti_wedge[e3])
                + (right_anti_dual[e321] * anti_wedge[e4]),
        );
    }
}
impl RejectOrthogonallyFrom<AntiDipoleInversion> for Flector {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       23       36        0
    //    simd3        1        6        0
    //    simd4        7        9        0
    // Totals...
    // yes simd       31       51        0
    //  no simd       54       90        0
    fn reject_orthogonally_from(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiCircleRotor::from_groups(
            // e41, e42, e43
            (other.group0().zxy() * self.group1().yzx()) - (other.group0().yzx() * self.group1().zxy()),
            // e23, e31, e12, e45
            Simd32x4::from([
                other[e423] * self[e3215],
                other[e431] * self[e3215],
                other[e412] * self[e3215],
                -(other[e425] * self[e4315]) - (other[e435] * self[e4125]),
            ]) - (other.group1().wwwx() * self.group1().xyzx()),
            // e15, e25, e35, scalar
            (Simd32x4::from(self[e3215]) * other.group1().xyz().with_w(other[e4]))
                + (self.group1().zxyx() * other.group2().yzx().with_w(other[e1]))
                + Simd32x3::from(0.0)
                    .with_w((other[e2] * self[e4315]) + (other[e3] * self[e4125]) - (other[e431] * self[e25]) - (other[e412] * self[e35]) - (other[e321] * self[e45]))
                - (other.group2().zxy() * self.group1().yzx()).with_w(other[e423] * self[e15]),
        );
        let right_anti_dual = DipoleInversion::from_groups(
            // e41, e42, e43
            other.group0(),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            other.group3() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from([right_anti_dual[e15], right_anti_dual[e25], right_anti_dual[e35], 1.0])
                * anti_wedge.group2().www().with_w(
                    (anti_wedge[scalar] * right_anti_dual[e1234])
                        - (anti_wedge[e41] * right_anti_dual[e23])
                        - (anti_wedge[e42] * right_anti_dual[e31])
                        - (anti_wedge[e43] * right_anti_dual[e12])
                        - (anti_wedge[e23] * right_anti_dual[e41])
                        - (anti_wedge[e31] * right_anti_dual[e42])
                        - (anti_wedge[e12] * right_anti_dual[e43]),
                ),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (anti_wedge[e23] * right_anti_dual[e45])
                    + (anti_wedge[e45] * right_anti_dual[e23])
                    + (anti_wedge[e35] * right_anti_dual[e42])
                    + (anti_wedge[scalar] * right_anti_dual[e4235]),
                (anti_wedge[e31] * right_anti_dual[e45])
                    + (anti_wedge[e45] * right_anti_dual[e31])
                    + (anti_wedge[e15] * right_anti_dual[e43])
                    + (anti_wedge[scalar] * right_anti_dual[e4315]),
                (anti_wedge[e12] * right_anti_dual[e45])
                    + (anti_wedge[e45] * right_anti_dual[e12])
                    + (anti_wedge[e25] * right_anti_dual[e41])
                    + (anti_wedge[scalar] * right_anti_dual[e4125]),
                -(anti_wedge[e12] * right_anti_dual[e35])
                    - (anti_wedge[e15] * right_anti_dual[e23])
                    - (anti_wedge[e25] * right_anti_dual[e31])
                    - (anti_wedge[e35] * right_anti_dual[e12]),
            ]) + (anti_wedge.group0().yzx() * right_anti_dual.group2().zxy()).with_w(anti_wedge[scalar] * right_anti_dual[e3215])
                - (right_anti_dual.group2().yzxx() * anti_wedge.group0().zxy().with_w(anti_wedge[e23]))
                - (right_anti_dual.group0().zxy() * anti_wedge.group2().yzx()).with_w(anti_wedge[e31] * right_anti_dual[e25]),
        );
    }
}
impl RejectOrthogonallyFrom<AntiDualNum> for Flector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd4        0        6        0
    // Totals...
    // yes simd        0        8        0
    //  no simd        0       26        0
    fn reject_orthogonally_from(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiFlector::from_groups(
            // e235, e315, e125, e321
            other.group0().xx().with_zw(other[e3215], 0.0) * Simd32x3::from(1.0).with_w(0.0) * self.group1().xyz().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
            // e1, e2, e3, e5
            Simd32x3::from(0.0).with_w(other[e3215] * self[e45]),
        );
        let right_anti_dual = DualNum::from_groups(/* e5, e12345 */ other.group0());
        return Flector::from_groups(
            // e15, e25, e35, e45
            right_anti_dual.group0().xx().with_zw(right_anti_dual[e5], 0.0)
                * Simd32x3::from(1.0).with_w(0.0)
                * anti_wedge.group1().xyz().with_w(0.0)
                * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
            // e4235, e4315, e4125, e3215
            Simd32x3::from(0.0).with_w(anti_wedge[e321] * right_anti_dual[e5]),
        );
    }
}
impl RejectOrthogonallyFrom<AntiFlatPoint> for Flector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        3        0
    //    simd3        1        2        0
    //    simd4        0        5        0
    // Totals...
    // yes simd        3       10        0
    //  no simd        5       29        0
    fn reject_orthogonally_from(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(other[e321]) * self.group1().xyz().with_w(self[e45]) * Simd32x4::from(-1.0),
            // e15, e25, e35, e3215
            ((other.group0().yzx() * self.group1().zxy()) - (other.group0().zxy() * self.group1().yzx())).with_w(0.0),
        );
        let right_anti_dual = FlatPoint::from_groups(/* e15, e25, e35, e45 */ other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]));
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([right_anti_dual[e45], right_anti_dual[e45], right_anti_dual[e45], 1.0])
                * anti_wedge
                    .group0()
                    .xyz()
                    .with_w(-(anti_wedge[e23] * right_anti_dual[e15]) - (anti_wedge[e31] * right_anti_dual[e25]) - (anti_wedge[e12] * right_anti_dual[e35])),
        );
    }
}
impl RejectOrthogonallyFrom<AntiFlector> for Flector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       10        0
    //    simd3        1        2        0
    //    simd4        1        6        0
    // Totals...
    // yes simd        7       18        0
    //  no simd       12       40        0
    fn reject_orthogonally_from(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([self[e4235], self[e4315], self[e4125], 1.0])
                * other
                    .group0()
                    .www()
                    .with_w((other[e1] * self[e4235]) + (other[e2] * self[e4315]) + (other[e3] * self[e4125]) - (other[e321] * self[e45]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, e3215
            ((other.group0().yzx() * self.group1().zxy()) - (other.group0().zxy() * self.group1().yzx())).with_w(0.0),
        );
        let right_anti_dual = Flector::from_groups(
            // e15, e25, e35, e45
            other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                anti_wedge[scalar] * right_anti_dual[e4235],
                anti_wedge[scalar] * right_anti_dual[e4315],
                anti_wedge[scalar] * right_anti_dual[e4125],
                -(anti_wedge[e23] * right_anti_dual[e15]) - (anti_wedge[e31] * right_anti_dual[e25]) - (anti_wedge[e12] * right_anti_dual[e35]),
            ]) + (anti_wedge.group0() * right_anti_dual.group0().www().with_w(right_anti_dual[e3215])),
        );
    }
}
impl RejectOrthogonallyFrom<AntiLine> for Flector {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2       10        0
    //    simd3        0        2        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        4       14        0
    //  no simd       10       24        0
    fn reject_orthogonally_from(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiPlane::from_groups(
            // e1, e2, e3, e5
            Simd32x4::from([
                other[e12] * self[e4315],
                other[e23] * self[e4125],
                other[e31] * self[e4235],
                -(other[e25] * self[e4315]) - (other[e35] * self[e4125]),
            ]) - (self.group1().zxyx() * other.group0().yzx().with_w(other[e15])),
        );
        let right_anti_dual = Line::from_groups(
            // e415, e425, e435
            other.group0() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group1() * Simd32x3::from(-1.0),
        );
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                anti_wedge[e3] * right_anti_dual[e425],
                anti_wedge[e1] * right_anti_dual[e435],
                anti_wedge[e2] * right_anti_dual[e415],
                -(anti_wedge[e2] * right_anti_dual[e315]) - (anti_wedge[e3] * right_anti_dual[e125]),
            ]) - (anti_wedge.group0().yzxx() * right_anti_dual.group0().zxy().with_w(right_anti_dual[e235])),
        );
    }
}
impl RejectOrthogonallyFrom<AntiMotor> for Flector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd3        0        2        0
    //    simd4        4       10        0
    // Totals...
    // yes simd        6       18        0
    //  no simd       18       52        0
    fn reject_orthogonally_from(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x3::from(1.0).with_w(0.0) * other.group1().www().with_w(0.0) * self.group1().xyz().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
            // e1, e2, e3, e5
            Simd32x3::from(0.0).with_w(-(other[e25] * self[e4315]) - (other[e35] * self[e4125])) + (other.group0().zxy() * self.group1().yzx()).with_w(other[e3215] * self[e45])
                - (self.group1().zxyx() * other.group0().yzx().with_w(other[e15])),
        );
        let right_anti_dual = Motor::from_groups(
            // e415, e425, e435, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x3::from(1.0).with_w(0.0) * right_anti_dual.group1().www().with_w(0.0) * anti_wedge.group1().xyz().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
            // e4235, e4315, e4125, e3215
            Simd32x3::from(0.0).with_w(-(anti_wedge[e2] * right_anti_dual[e315]) - (anti_wedge[e3] * right_anti_dual[e125]))
                + (anti_wedge.group1().zxy() * right_anti_dual.group0().yzx()).with_w(anti_wedge[e321] * right_anti_dual[e5])
                - (anti_wedge.group1().yzxx() * right_anti_dual.group0().zxy().with_w(right_anti_dual[e235])),
        );
    }
}
impl RejectOrthogonallyFrom<AntiPlane> for Flector {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        4        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        2        5        0
    //  no simd        2        8        0
    fn reject_orthogonally_from(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from((other[e1] * self[e4235]) + (other[e2] * self[e4315]) + (other[e3] * self[e4125])) * Simd32x4::from([other[e1], other[e2], other[e3], other[e5] * -1.0]),
        );
    }
}
impl RejectOrthogonallyFrom<AntiScalar> for Flector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        5        0
    //  no simd        0       17        0
    fn reject_orthogonally_from(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(other[e12345]) * self.group0(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e12345]) * self.group1(),
        );
        let right_anti_dual = Scalar::from_groups(/* scalar */ other[e12345] * -1.0);
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group0(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1(),
        );
    }
}
impl RejectOrthogonallyFrom<Circle> for Flector {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       23       39        0
    //    simd3        1        6        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       28       49        0
    //  no simd       42       73        0
    fn reject_orthogonally_from(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiCircleRotor::from_groups(
            // e41, e42, e43
            (other.group0().zxy() * self.group1().yzx()) - (other.group0().yzx() * self.group1().zxy()),
            // e23, e31, e12, e45
            Simd32x4::from([
                other[e423] * self[e3215],
                other[e431] * self[e3215],
                other[e412] * self[e3215],
                -(other[e425] * self[e4315]) - (other[e435] * self[e4125]),
            ]) - (other.group1().wwwx() * self.group1().xyzx()),
            // e15, e25, e35, scalar
            Simd32x4::from([
                (other[e415] * self[e3215]) + (other[e315] * self[e4125]),
                (other[e425] * self[e3215]) + (other[e125] * self[e4235]),
                (other[e435] * self[e3215]) + (other[e235] * self[e4315]),
                -(other[e431] * self[e25]) - (other[e412] * self[e35]) - (other[e321] * self[e45]),
            ]) - (other.group2().zxy() * self.group1().yzx()).with_w(other[e423] * self[e15]),
        );
        let right_anti_dual = Dipole::from_groups(
            // e41, e42, e43
            other.group0(),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35
            other.group2(),
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from([anti_wedge[scalar], anti_wedge[scalar], anti_wedge[scalar], 1.0])
                * right_anti_dual.group2().with_w(
                    -(anti_wedge[e41] * right_anti_dual[e23])
                        - (anti_wedge[e42] * right_anti_dual[e31])
                        - (anti_wedge[e43] * right_anti_dual[e12])
                        - (anti_wedge[e23] * right_anti_dual[e41])
                        - (anti_wedge[e31] * right_anti_dual[e42])
                        - (anti_wedge[e12] * right_anti_dual[e43]),
                ),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (anti_wedge[e42] * right_anti_dual[e35])
                    + (anti_wedge[e23] * right_anti_dual[e45])
                    + (anti_wedge[e45] * right_anti_dual[e23])
                    + (anti_wedge[e35] * right_anti_dual[e42]),
                (anti_wedge[e43] * right_anti_dual[e15])
                    + (anti_wedge[e31] * right_anti_dual[e45])
                    + (anti_wedge[e45] * right_anti_dual[e31])
                    + (anti_wedge[e15] * right_anti_dual[e43]),
                (anti_wedge[e41] * right_anti_dual[e25])
                    + (anti_wedge[e12] * right_anti_dual[e45])
                    + (anti_wedge[e45] * right_anti_dual[e12])
                    + (anti_wedge[e25] * right_anti_dual[e41]),
                -(anti_wedge[e12] * right_anti_dual[e35])
                    - (anti_wedge[e15] * right_anti_dual[e23])
                    - (anti_wedge[e25] * right_anti_dual[e31])
                    - (anti_wedge[e35] * right_anti_dual[e12]),
            ]) - (anti_wedge.group0().zxy() * right_anti_dual.group2().yzx()).with_w(anti_wedge[e23] * right_anti_dual[e15])
                - (right_anti_dual.group0().zxy() * anti_wedge.group2().yzx()).with_w(anti_wedge[e31] * right_anti_dual[e25]),
        );
    }
}
impl RejectOrthogonallyFrom<CircleRotor> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       38        0
    //    simd3        1       10        0
    //    simd4       11        8        0
    // Totals...
    // yes simd       32       56        0
    //  no simd       67      100        0
    fn reject_orthogonally_from(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                other[e412] * self[e4315],
                other[e423] * self[e4125],
                other[e431] * self[e4235],
                -(other[e431] * self[e25]) - (other[e412] * self[e35]) - (other[e321] * self[e45]),
            ]) - (other.group0().yzx() * self.group1().zxy()).with_w(other[e423] * self[e15]),
            // e23, e31, e12, e45
            Simd32x3::from(0.0).with_w(-(other[e425] * self[e4315]) - (other[e435] * self[e4125])) + (other.group0() * self.group1().www()).with_w(other[e12345] * self[e45])
                - (other.group1().wwwx() * self.group1().xyzx()),
            // e15, e25, e35, e1234
            (Simd32x3::from(other[e12345]) * self.group0().xyz()).with_w(0.0)
                + (Simd32x3::from(self[e3215]) * other.group1().xyz()).with_w(0.0)
                + (other.group2().yzx() * self.group1().zxy()).with_w(0.0)
                - (other.group2().zxy() * self.group1().yzx()).with_w(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e12345]) * self.group1(),
        );
        let right_anti_dual = AntiCircleRotor::from_groups(
            // e41, e42, e43
            other.group0(),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, scalar
            other.group2() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group0().xyz()) + (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0()))
                .with_w(right_anti_dual[scalar] * anti_wedge[scalar]),
            // e23, e31, e12, e45
            (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1()) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                right_anti_dual[scalar] * anti_wedge[e15],
                right_anti_dual[scalar] * anti_wedge[e25],
                right_anti_dual[scalar] * anti_wedge[e35],
                -(right_anti_dual[e41] * anti_wedge[e23])
                    - (right_anti_dual[e42] * anti_wedge[e31])
                    - (right_anti_dual[e43] * anti_wedge[e12])
                    - (right_anti_dual[e23] * anti_wedge[e41])
                    - (right_anti_dual[e31] * anti_wedge[e42])
                    - (right_anti_dual[e12] * anti_wedge[e43]),
            ]) + (right_anti_dual.group2() * anti_wedge.group0().www().with_w(anti_wedge[e1234])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (right_anti_dual[e23] * anti_wedge[e45])
                    + (right_anti_dual[e45] * anti_wedge[e23])
                    + (right_anti_dual[e35] * anti_wedge[e42])
                    + (right_anti_dual[scalar] * anti_wedge[e4235]),
                (right_anti_dual[e31] * anti_wedge[e45])
                    + (right_anti_dual[e45] * anti_wedge[e31])
                    + (right_anti_dual[e15] * anti_wedge[e43])
                    + (right_anti_dual[scalar] * anti_wedge[e4315]),
                (right_anti_dual[e12] * anti_wedge[e45])
                    + (right_anti_dual[e45] * anti_wedge[e12])
                    + (right_anti_dual[e25] * anti_wedge[e41])
                    + (right_anti_dual[scalar] * anti_wedge[e4125]),
                -(right_anti_dual[e12] * anti_wedge[e35])
                    - (right_anti_dual[e15] * anti_wedge[e23])
                    - (right_anti_dual[e25] * anti_wedge[e31])
                    - (right_anti_dual[e35] * anti_wedge[e12]),
            ]) + (right_anti_dual.group0().yzx() * anti_wedge.group2().zxy()).with_w(right_anti_dual[scalar] * anti_wedge[e3215])
                - (anti_wedge.group2().yzxx() * right_anti_dual.group0().zxy().with_w(right_anti_dual[e23]))
                - (right_anti_dual.group2().yzx() * anti_wedge.group0().zxy()).with_w(right_anti_dual[e31] * anti_wedge[e25]),
        );
    }
}
impl RejectOrthogonallyFrom<Dipole> for Flector {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       24        0
    //    simd3        0        2        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       17       30        0
    //  no simd       26       46        0
    fn reject_orthogonally_from(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = RoundPoint::from_groups(
            // e1, e2, e3, e4
            Simd32x4::from([
                -(other[e41] * self[e3215]) - (other[e31] * self[e4125]),
                -(other[e42] * self[e3215]) - (other[e12] * self[e4235]),
                -(other[e43] * self[e3215]) - (other[e23] * self[e4315]),
                (other[e42] * self[e4315]) + (other[e43] * self[e4125]),
            ]) + (self.group1().yzxx() * other.group1().zxy().with_w(other[e41])),
            // e5
            -(other[e45] * self[e3215]) - (other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]),
        );
        let right_anti_dual = Circle::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125
            other.group2() * Simd32x3::from(-1.0),
        );
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (right_anti_dual[e425] * anti_wedge[e3]) + (right_anti_dual[e235] * anti_wedge[e4]),
                (right_anti_dual[e435] * anti_wedge[e1]) + (right_anti_dual[e315] * anti_wedge[e4]),
                (right_anti_dual[e415] * anti_wedge[e2]) + (right_anti_dual[e125] * anti_wedge[e4]),
                -(right_anti_dual[e321] * anti_wedge[e5]) - (right_anti_dual[e125] * anti_wedge[e3]),
            ]) - (Simd32x4::from([anti_wedge[e5], anti_wedge[e5], anti_wedge[e5], anti_wedge[e1]]) * right_anti_dual.group0().with_w(right_anti_dual[e235]))
                - (anti_wedge.group0().yzxy() * right_anti_dual.group1().zxy().with_w(right_anti_dual[e315])),
            // e1234
            (right_anti_dual[e423] * anti_wedge[e1])
                + (right_anti_dual[e431] * anti_wedge[e2])
                + (right_anti_dual[e412] * anti_wedge[e3])
                + (right_anti_dual[e321] * anti_wedge[e4]),
        );
    }
}
impl RejectOrthogonallyFrom<DipoleInversion> for Flector {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       20        0
    //    simd3        2       13        0
    //    simd4       16       15        0
    // Totals...
    // yes simd       27       48        0
    //  no simd       79      119        0
    fn reject_orthogonally_from(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[e1234]) * self.group1().xyz() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            ((other.group3().yzx() * self.group1().zxy()) - (other.group3().zxy() * self.group1().yzx())).with_w(other[e1234] * self[e3215] * -1.0),
            // e235, e315, e125, e4
            (self.group1().xyzx() * other.group3().www().with_w(other[e41])) + Simd32x3::from(0.0).with_w((other[e42] * self[e4315]) + (other[e43] * self[e4125]))
                - (self.group1().www() * other.group3().xyz()).with_w(other[e1234] * self[e45]),
            // e1, e2, e3, e5
            Simd32x3::from(0.0).with_w((other[e4315] * self[e25]) + (other[e4125] * self[e35]) + (other[e3215] * self[e45]) - (other[e35] * self[e4125]))
                + (other.group1().zxy() * self.group1().yzx()).with_w(other[e4235] * self[e15])
                - (Simd32x4::from(self[e3215]) * other.group0().with_w(other[e45]))
                - (other.group2().wwwy() * self.group0().xyz().with_w(self[e4315]))
                - (self.group1().zxyx() * other.group1().yzx().with_w(other[e15])),
        );
        let right_anti_dual = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e4
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group3() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group3().xyz()) - (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group3().xyz()),
            // e23, e31, e12, e45
            (right_anti_dual.group3().zxyw() * anti_wedge.group3().yzx().with_w(anti_wedge[e4]))
                - (anti_wedge.group3().zxyw() * right_anti_dual.group3().yzx().with_w(right_anti_dual[e4])),
            // e15, e25, e35, e1234
            Simd32x3::from(0.0).with_w(
                (anti_wedge[e4] * right_anti_dual[e321]) + (anti_wedge[e2] * right_anti_dual[e431]) + (anti_wedge[e3] * right_anti_dual[e412])
                    - (anti_wedge[e431] * right_anti_dual[e2])
                    - (anti_wedge[e412] * right_anti_dual[e3])
                    - (anti_wedge[e321] * right_anti_dual[e4]),
            ) + (right_anti_dual.group3().www() * anti_wedge.group3().xyz()).with_w(anti_wedge[e1] * right_anti_dual[e423])
                - (right_anti_dual.group3().xyzx() * anti_wedge.group3().www().with_w(anti_wedge[e423])),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(right_anti_dual[e5]) * anti_wedge.group0().with_w(anti_wedge[e321]))
                + (anti_wedge.group2().wwwy() * right_anti_dual.group2().xyz().with_w(right_anti_dual[e2]))
                + (right_anti_dual.group3().yzxx() * anti_wedge.group1().zxy().with_w(anti_wedge[e235]))
                + (anti_wedge.group3().zxy() * right_anti_dual.group1().yzx()).with_w(anti_wedge[e125] * right_anti_dual[e3])
                - (anti_wedge.group3().yzxw() * right_anti_dual.group1().zxyw())
                - (right_anti_dual.group2().wwwz() * anti_wedge.group2().xyz().with_w(anti_wedge[e3]))
                - (right_anti_dual.group0() * anti_wedge.group3().www()).with_w(anti_wedge[e1] * right_anti_dual[e235])
                - (anti_wedge.group1().yzx() * right_anti_dual.group3().zxy()).with_w(anti_wedge[e2] * right_anti_dual[e315]),
        );
    }
}
impl RejectOrthogonallyFrom<DualNum> for Flector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd2        0        1        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        5        0
    //  no simd        0       18        0
    fn reject_orthogonally_from(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(other[e12345]) * self.group0(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e12345]) * self.group1(),
        );
        let right_anti_dual = AntiDualNum::from_groups(/* e3215, scalar */ other.group0() * Simd32x2::from(-1.0));
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group0(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1(),
        );
    }
}
impl RejectOrthogonallyFrom<FlatPoint> for Flector {
    type Output = AntiDualNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        7        0
    //    simd2        0        1        0
    // Totals...
    // yes simd        3        8        0
    //  no simd        3        9        0
    fn reject_orthogonally_from(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiDualNum::from_groups(
            // e3215, scalar
            Simd32x2::from([
                -(f32::powi(other[e45], 2) * self[e3215])
                    - (other[e15] * other[e45] * self[e4235])
                    - (other[e25] * other[e45] * self[e4315])
                    - (other[e35] * other[e45] * self[e4125]),
                1.0,
            ]) * Simd32x2::from([-1.0, 0.0]),
        );
    }
}
impl RejectOrthogonallyFrom<Flector> for Flector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6        9        0
    //    simd3        1        3        0
    //    simd4        4        8        0
    // Totals...
    // yes simd       11       20        0
    //  no simd       25       50        0
    fn reject_orthogonally_from(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Motor::from_groups(
            // e415, e425, e435, e12345
            ((other.group1().yzx() * self.group1().zxy()) - (other.group1().zxy() * self.group1().yzx())).with_w(0.0),
            // e235, e315, e125, e5
            (other.group1().wwwx() * self.group1().xyz().with_w(self[e15]))
                + Simd32x3::from(0.0).with_w(
                    (other[e4315] * self[e25]) + (other[e4125] * self[e35]) + (other[e3215] * self[e45])
                        - (other[e25] * self[e4315])
                        - (other[e35] * self[e4125])
                        - (other[e45] * self[e3215]),
                )
                - (self.group1().wwwx() * other.group1().xyz().with_w(other[e15])),
        );
        let right_anti_dual = AntiFlector::from_groups(
            // e235, e315, e125, e321
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x3::from(1.0).with_w(0.0) * anti_wedge.group1().www().with_w(0.0) * right_anti_dual.group1().xyz().with_w(0.0) * Simd32x4::from([-1.0, -1.0, -1.0, 0.0]),
            // e4235, e4315, e4125, e3215
            (right_anti_dual.group1().yzxx() * anti_wedge.group0().zxy().with_w(anti_wedge[e235]))
                + Simd32x3::from(0.0).with_w((right_anti_dual[e2] * anti_wedge[e315]) + (right_anti_dual[e3] * anti_wedge[e125]))
                - (right_anti_dual.group1().zxy() * anti_wedge.group0().yzx()).with_w(right_anti_dual[e321] * anti_wedge[e5]),
        );
    }
}
impl RejectOrthogonallyFrom<Line> for Flector {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       11        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        7       13        0
    //  no simd       10       19        0
    fn reject_orthogonally_from(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = FlatPoint::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e4125] * other[e315]) + (self[e3215] * other[e415]),
                (self[e4235] * other[e125]) + (self[e3215] * other[e425]),
                (self[e4315] * other[e235]) + (self[e3215] * other[e435]),
                -(self[e4315] * other[e425]) - (self[e4125] * other[e435]),
            ]) - (self.group1().yzxx() * other.group1().zxy().with_w(other[e415])),
        );
        let right_anti_dual = AntiLine::from_groups(/* e23, e31, e12 */ other.group0(), /* e15, e25, e35 */ other.group1());
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([anti_wedge[e45], anti_wedge[e45], anti_wedge[e45], 1.0])
                * right_anti_dual
                    .group0()
                    .with_w(-(right_anti_dual[e23] * anti_wedge[e15]) - (right_anti_dual[e31] * anti_wedge[e25]) - (right_anti_dual[e12] * anti_wedge[e35])),
        );
    }
}
impl RejectOrthogonallyFrom<Motor> for Flector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       14        0
    //    simd4        3        7        0
    // Totals...
    // yes simd        9       21        0
    //  no simd       18       42        0
    fn reject_orthogonally_from(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e4125] * other[e315]) + (self[e3215] * other[e415]),
                (self[e4235] * other[e125]) + (self[e3215] * other[e425]),
                (self[e4315] * other[e235]) + (self[e3215] * other[e435]),
                -(self[e4315] * other[e425]) - (self[e4125] * other[e435]),
            ]) + (Simd32x4::from(other[e12345]) * self.group0())
                - (self.group1().yzxx() * other.group1().zxy().with_w(other[e415])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e12345]) * self.group1(),
        );
        let right_anti_dual = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e3215
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group0(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                right_anti_dual[scalar] * anti_wedge[e4235],
                right_anti_dual[scalar] * anti_wedge[e4315],
                right_anti_dual[scalar] * anti_wedge[e4125],
                -(right_anti_dual[e23] * anti_wedge[e15]) - (right_anti_dual[e31] * anti_wedge[e25]) - (right_anti_dual[e12] * anti_wedge[e35]),
            ]) + (right_anti_dual.group0() * anti_wedge.group0().www().with_w(anti_wedge[e3215])),
        );
    }
}
impl RejectOrthogonallyFrom<MultiVector> for Flector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       93      129        0
    //    simd2        0        1        0
    //    simd3       24       46        0
    //    simd4       24       20        0
    // Totals...
    // yes simd      141      196        0
    //  no simd      261      349        0
    fn reject_orthogonally_from(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e4235] * other[e1]) + (self[e4315] * other[e2]) + (self[e4125] * other[e3]) + (self[e3215] * other[e4])
                    - (self[e15] * other[e423])
                    - (self[e25] * other[e431])
                    - (self[e35] * other[e412])
                    - (self[e45] * other[e321]),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                -(self[e15] * other[e1234]) - (self[e4125] * other[e31]),
                -(self[e25] * other[e1234]) - (self[e4235] * other[e12]),
                -(self[e35] * other[e1234]) - (self[e4315] * other[e23]),
                (self[e4315] * other[e42]) + (self[e4125] * other[e43]),
            ]) + (self.group1().yzxx() * other.group5().zxy().with_w(other[e41]))
                - (other.group4() * self.group1().www()).with_w(self[e45] * other[e1234]),
            // e5
            (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]) + (self[e45] * other[e3215])
                - (self[e4235] * other[e15])
                - (self[e4315] * other[e25])
                - (self[e4125] * other[e35])
                - (self[e3215] * other[e45]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e4125] * other[e315]) + (self[e3215] * other[e415]),
                (self[e4235] * other[e125]) + (self[e3215] * other[e425]),
                (self[e4315] * other[e235]) + (self[e3215] * other[e435]),
                -(self[e4315] * other[e425]) - (self[e4125] * other[e435]),
            ]) + (Simd32x4::from(other[e12345]) * self.group0())
                - (other.group8().zxy() * self.group1().yzx()).with_w(self[e4235] * other[e415]),
            // e41, e42, e43
            (other.group7().zxy() * self.group1().yzx()) - (other.group7().yzx() * self.group1().zxy()),
            // e23, e31, e12
            (Simd32x3::from(self[e3215]) * other.group7()) - (Simd32x3::from(other[e321]) * self.group1().xyz()),
            // e415, e425, e435, e321
            ((self.group1().zxy() * other.group9().yzx()) - (self.group1().yzx() * other.group9().zxy())).with_w(self[e3215] * other[e1234] * -1.0),
            // e423, e431, e412
            Simd32x3::from(other[e1234]) * self.group1().xyz() * Simd32x3::from(-1.0),
            // e235, e315, e125
            (Simd32x3::from(other[e3215]) * self.group1().xyz()) - (Simd32x3::from(self[e3215]) * other.group9().xyz()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e12345]) * self.group1(),
            // e1234
            0.0,
        );
        let right_anti_dual = MultiVector::from_groups(
            // scalar, e12345
            other.group0().yx() * Simd32x2::from([-1.0, 1.0]),
            // e1, e2, e3, e4
            other.group9().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e5
            other[e3215],
            // e15, e25, e35, e45
            other.group8().with_w(other[e321] * -1.0),
            // e41, e42, e43
            other.group7(),
            // e23, e31, e12
            other.group6().xyz(),
            // e415, e425, e435, e321
            other.group5().with_w(other[e45]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e423, e431, e412
            other.group4() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group3().xyz() * Simd32x3::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group1().xyz().with_w(other[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1234
            other[e4] * -1.0,
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                anti_wedge[scalar] * right_anti_dual[scalar],
                (anti_wedge[scalar] * right_anti_dual[e12345])
                    + (anti_wedge[e12345] * right_anti_dual[scalar])
                    + (anti_wedge[e1] * right_anti_dual[e4235])
                    + (anti_wedge[e2] * right_anti_dual[e4315])
                    + (anti_wedge[e3] * right_anti_dual[e4125])
                    + (anti_wedge[e4] * right_anti_dual[e3215])
                    + (anti_wedge[e5] * right_anti_dual[e1234])
                    + (anti_wedge[e4235] * right_anti_dual[e1])
                    + (anti_wedge[e4315] * right_anti_dual[e2])
                    + (anti_wedge[e4125] * right_anti_dual[e3])
                    + (anti_wedge[e3215] * right_anti_dual[e4])
                    + (anti_wedge[e1234] * right_anti_dual[e5])
                    - (anti_wedge[e15] * right_anti_dual[e423])
                    - (anti_wedge[e25] * right_anti_dual[e431])
                    - (anti_wedge[e35] * right_anti_dual[e412])
                    - (anti_wedge[e45] * right_anti_dual[e321])
                    - (anti_wedge[e41] * right_anti_dual[e235])
                    - (anti_wedge[e42] * right_anti_dual[e315])
                    - (anti_wedge[e43] * right_anti_dual[e125])
                    - (anti_wedge[e23] * right_anti_dual[e415])
                    - (anti_wedge[e31] * right_anti_dual[e425])
                    - (anti_wedge[e12] * right_anti_dual[e435])
                    - (anti_wedge[e415] * right_anti_dual[e23])
                    - (anti_wedge[e425] * right_anti_dual[e31])
                    - (anti_wedge[e435] * right_anti_dual[e12])
                    - (anti_wedge[e321] * right_anti_dual[e45])
                    - (anti_wedge[e423] * right_anti_dual[e15])
                    - (anti_wedge[e431] * right_anti_dual[e25])
                    - (anti_wedge[e412] * right_anti_dual[e35])
                    - (anti_wedge[e235] * right_anti_dual[e41])
                    - (anti_wedge[e315] * right_anti_dual[e42])
                    - (anti_wedge[e125] * right_anti_dual[e43]),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1()) + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1()),
            // e5
            (anti_wedge[scalar] * right_anti_dual[e5]) + (anti_wedge[e5] * right_anti_dual[scalar]),
            // e15, e25, e35, e45
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group3())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group3())
                + (Simd32x4::from(right_anti_dual[e5]) * anti_wedge.group1())
                - (Simd32x4::from(anti_wedge[e5]) * right_anti_dual.group1()),
            // e41, e42, e43
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group4())
                + (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group1().xyz())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group4())
                - (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group1().xyz()),
            // e23, e31, e12
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group5())
                + (anti_wedge.group1().yzx() * right_anti_dual.group1().zxy())
                - (anti_wedge.group1().zxy() * right_anti_dual.group1().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (anti_wedge[e4] * right_anti_dual[e15])
                    + (anti_wedge[e5] * right_anti_dual[e41])
                    + (anti_wedge[e15] * right_anti_dual[e4])
                    + (anti_wedge[e41] * right_anti_dual[e5]),
                (anti_wedge[e4] * right_anti_dual[e25])
                    + (anti_wedge[e5] * right_anti_dual[e42])
                    + (anti_wedge[e25] * right_anti_dual[e4])
                    + (anti_wedge[e42] * right_anti_dual[e5]),
                (anti_wedge[e4] * right_anti_dual[e35])
                    + (anti_wedge[e5] * right_anti_dual[e43])
                    + (anti_wedge[e35] * right_anti_dual[e4])
                    + (anti_wedge[e43] * right_anti_dual[e5]),
                -(anti_wedge[e1] * right_anti_dual[e23])
                    - (anti_wedge[e2] * right_anti_dual[e31])
                    - (anti_wedge[e3] * right_anti_dual[e12])
                    - (anti_wedge[e12] * right_anti_dual[e3]),
            ]) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group6())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group6())
                - (right_anti_dual.group1().xyzy() * anti_wedge.group3().www().with_w(anti_wedge[e31]))
                - (right_anti_dual.group3().www() * anti_wedge.group1().xyz()).with_w(anti_wedge[e23] * right_anti_dual[e1]),
            // e423, e431, e412
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group7())
                + (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group7())
                + (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group5())
                + (anti_wedge.group4().yzx() * right_anti_dual.group1().zxy())
                + (right_anti_dual.group4().yzx() * anti_wedge.group1().zxy())
                - (anti_wedge.group4().zxy() * right_anti_dual.group1().yzx())
                - (right_anti_dual.group4().zxy() * anti_wedge.group1().yzx()),
            // e235, e315, e125
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group8())
                + (Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group8())
                + (Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group5())
                + (anti_wedge.group1().yzx() * right_anti_dual.group3().zxy())
                + (anti_wedge.group3().zxy() * right_anti_dual.group1().yzx())
                - (anti_wedge.group1().zxy() * right_anti_dual.group3().yzx())
                - (anti_wedge.group3().yzx() * right_anti_dual.group1().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (anti_wedge[e3] * right_anti_dual[e425])
                    + (anti_wedge[e4] * right_anti_dual[e235])
                    + (anti_wedge[e45] * right_anti_dual[e23])
                    + (anti_wedge[e435] * right_anti_dual[e2]),
                (anti_wedge[e1] * right_anti_dual[e435])
                    + (anti_wedge[e4] * right_anti_dual[e315])
                    + (anti_wedge[e45] * right_anti_dual[e31])
                    + (anti_wedge[e415] * right_anti_dual[e3]),
                (anti_wedge[e2] * right_anti_dual[e415])
                    + (anti_wedge[e4] * right_anti_dual[e125])
                    + (anti_wedge[e45] * right_anti_dual[e12])
                    + (anti_wedge[e425] * right_anti_dual[e1]),
                -(anti_wedge[e1] * right_anti_dual[e235])
                    - (anti_wedge[e2] * right_anti_dual[e315])
                    - (anti_wedge[e3] * right_anti_dual[e125])
                    - (anti_wedge[e5] * right_anti_dual[e321]),
            ]) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group9())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group9())
                + (Simd32x4::from([right_anti_dual[e5], right_anti_dual[e5], right_anti_dual[e5], right_anti_dual[e3]]) * anti_wedge.group7().with_w(anti_wedge[e125]))
                + (anti_wedge.group5() * right_anti_dual.group3().www()).with_w(anti_wedge[e315] * right_anti_dual[e2])
                + (anti_wedge.group4().yzx() * right_anti_dual.group3().zxy()).with_w(anti_wedge[e235] * right_anti_dual[e1])
                + (right_anti_dual.group4().yzx() * anti_wedge.group3().zxy()).with_w(anti_wedge[e321] * right_anti_dual[e5])
                - (Simd32x4::from([anti_wedge[e5], anti_wedge[e5], anti_wedge[e5], anti_wedge[e15]]) * right_anti_dual.group7().with_w(right_anti_dual[e23]))
                - (right_anti_dual.group3().yzxx() * anti_wedge.group4().zxy().with_w(anti_wedge[e23]))
                - (anti_wedge.group8() * right_anti_dual.group1().www()).with_w(anti_wedge[e31] * right_anti_dual[e25])
                - (right_anti_dual.group4().zxy() * anti_wedge.group3().yzx()).with_w(anti_wedge[e12] * right_anti_dual[e35])
                - (anti_wedge.group1().yzx() * right_anti_dual.group6().zxy()).with_w(anti_wedge[e25] * right_anti_dual[e31])
                - (anti_wedge.group6().yzx() * right_anti_dual.group1().zxy()).with_w(anti_wedge[e35] * right_anti_dual[e12]),
            // e1234
            (anti_wedge[scalar] * right_anti_dual[e1234])
                + (anti_wedge[e1] * right_anti_dual[e423])
                + (anti_wedge[e2] * right_anti_dual[e431])
                + (anti_wedge[e3] * right_anti_dual[e412])
                + (anti_wedge[e4] * right_anti_dual[e321])
                + (anti_wedge[e1234] * right_anti_dual[scalar])
                - (anti_wedge[e41] * right_anti_dual[e23])
                - (anti_wedge[e42] * right_anti_dual[e31])
                - (anti_wedge[e43] * right_anti_dual[e12])
                - (anti_wedge[e23] * right_anti_dual[e41])
                - (anti_wedge[e31] * right_anti_dual[e42])
                - (anti_wedge[e12] * right_anti_dual[e43])
                - (anti_wedge[e321] * right_anti_dual[e4])
                - (anti_wedge[e423] * right_anti_dual[e1])
                - (anti_wedge[e431] * right_anti_dual[e2])
                - (anti_wedge[e412] * right_anti_dual[e3]),
        );
    }
}
impl RejectOrthogonallyFrom<Plane> for Flector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       17        0
    //    simd3        1        2        0
    //    simd4        2        6        0
    // Totals...
    // yes simd        6       25        0
    //  no simd       14       47        0
    fn reject_orthogonally_from(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Motor::from_groups(
            // e415, e425, e435, e12345
            ((self.group1().zxy() * other.group0().yzx()) - (self.group1().yzx() * other.group0().zxy())).with_w(0.0),
            // e235, e315, e125, e5
            Simd32x4::from([
                self[e3215] * other[e4235] * -1.0,
                self[e3215] * other[e4315] * -1.0,
                self[e3215] * other[e4125] * -1.0,
                (self[e25] * other[e4315]) + (self[e35] * other[e4125]) + (self[e45] * other[e3215]),
            ]) + (other.group0().wwwx() * self.group1().xyz().with_w(self[e15])),
        );
        let right_anti_dual = AntiPlane::from_groups(/* e1, e2, e3, e5 */ other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]));
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x3::from(1.0).with_w(0.0) * anti_wedge.group1().www().with_w(0.0) * right_anti_dual.group0().xyz().with_w(0.0) * Simd32x4::from([-1.0, -1.0, -1.0, 0.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                right_anti_dual[e3] * anti_wedge[e425] * -1.0,
                right_anti_dual[e1] * anti_wedge[e435] * -1.0,
                right_anti_dual[e2] * anti_wedge[e415] * -1.0,
                (right_anti_dual[e2] * anti_wedge[e315]) + (right_anti_dual[e3] * anti_wedge[e125]),
            ]) + (right_anti_dual.group0().yzxx() * anti_wedge.group0().zxy().with_w(anti_wedge[e235])),
        );
    }
}
impl RejectOrthogonallyFrom<RoundPoint> for Flector {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        6        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        3        8        0
    //  no simd        3       14        0
    fn reject_orthogonally_from(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Scalar::from_groups(
            // scalar
            (self[e4235] * other[e1]) + (self[e4315] * other[e2]) + (self[e4125] * other[e3]) + (self[e3215] * other[e4]),
        );
        let right_anti_dual = Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            other.group0().xyz().with_w(other[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1234
            other[e4] * -1.0,
        );
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e1234
            anti_wedge[scalar] * right_anti_dual[e1234],
        );
    }
}
impl RejectOrthogonallyFrom<Sphere> for Flector {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       23        0
    //    simd3        3        9        0
    //    simd4        4        7        0
    // Totals...
    // yes simd       16       39        0
    //  no simd       34       78        0
    fn reject_orthogonally_from(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[e1234]) * self.group1().xyz() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            ((self.group1().zxy() * other.group0().yzx()) - (self.group1().yzx() * other.group0().zxy())).with_w(self[e3215] * other[e1234] * -1.0),
            // e235, e315, e125, e4
            ((Simd32x3::from(other[e3215]) * self.group1().xyz()) - (Simd32x3::from(self[e3215]) * other.group0().xyz())).with_w(self[e45] * other[e1234] * -1.0),
            // e1, e2, e3, e5
            Simd32x4::from([other[e1234], other[e1234], other[e1234], 1.0])
                * self
                    .group0()
                    .xyz()
                    .with_w((self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]) + (self[e45] * other[e3215]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        let right_anti_dual = RoundPoint::from_groups(
            // e1, e2, e3, e4
            other.group0().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e5
            other[e3215],
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group0().xyz()) - (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group3().xyz()),
            // e23, e31, e12, e45
            (anti_wedge.group3().yzx() * right_anti_dual.group0().zxy()).with_w(anti_wedge[e4] * right_anti_dual[e5])
                - (anti_wedge.group3().zxyw() * right_anti_dual.group0().yzxw()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                anti_wedge[e1] * right_anti_dual[e5],
                anti_wedge[e2] * right_anti_dual[e5],
                anti_wedge[e3] * right_anti_dual[e5],
                -(anti_wedge[e431] * right_anti_dual[e2]) - (anti_wedge[e412] * right_anti_dual[e3]) - (anti_wedge[e321] * right_anti_dual[e4]),
            ]) - (right_anti_dual.group0().xyzx() * anti_wedge.group3().www().with_w(anti_wedge[e423])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(anti_wedge[e425] * right_anti_dual[e3]) - (anti_wedge[e235] * right_anti_dual[e4]),
                -(anti_wedge[e435] * right_anti_dual[e1]) - (anti_wedge[e315] * right_anti_dual[e4]),
                -(anti_wedge[e415] * right_anti_dual[e2]) - (anti_wedge[e125] * right_anti_dual[e4]),
                (anti_wedge[e315] * right_anti_dual[e2]) + (anti_wedge[e125] * right_anti_dual[e3]),
            ]) + (Simd32x4::from(right_anti_dual[e5]) * anti_wedge.group0().with_w(anti_wedge[e321]))
                + (right_anti_dual.group0().yzxx() * anti_wedge.group1().zxy().with_w(anti_wedge[e235])),
        );
    }
}
impl RejectOrthogonallyFrom<VersorEven> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       23       33        0
    //    simd3        1        8        0
    //    simd4       14       15        0
    // Totals...
    // yes simd       38       56        0
    //  no simd       82      117        0
    fn reject_orthogonally_from(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (self.group1().yzxx() * other.group0().zxy().with_w(other[e1]))
                + Simd32x3::from(0.0).with_w(
                    (self[e4315] * other[e2]) + (self[e4125] * other[e3]) + (self[e3215] * other[e4])
                        - (self[e25] * other[e431])
                        - (self[e35] * other[e412])
                        - (self[e45] * other[e321]),
                )
                - (other.group0().yzxx() * self.group1().zxy().with_w(self[e15])),
            // e23, e31, e12, e45
            (other.group0() * self.group1().www().with_w(self[e45])) + Simd32x3::from(0.0).with_w(-(self[e4315] * other[e425]) - (self[e4125] * other[e435]))
                - (self.group1().xyzx() * other.group1().wwwx()),
            // e15, e25, e35, e1234
            (Simd32x3::from(self[e3215]) * other.group1().xyz()).with_w(0.0)
                + (Simd32x3::from(other[e12345]) * self.group0().xyz()).with_w(0.0)
                + (self.group1().zxy() * other.group2().yzx()).with_w(0.0)
                - (self.group1().yzx() * other.group2().zxy()).with_w(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e12345]) * self.group1(),
        );
        let right_anti_dual = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e1234
            other.group2().xyz().with_w(other[e4]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            other.group3().xyz().with_w(other[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0().xyz()) + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group0().xyz()))
                .with_w(anti_wedge[scalar] * right_anti_dual[scalar]),
            // e23, e31, e12, e45
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1()) + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1()),
            // e15, e25, e35, e1234
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group2())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group2())
                + Simd32x3::from(0.0).with_w(
                    -(anti_wedge[e41] * right_anti_dual[e23])
                        - (anti_wedge[e42] * right_anti_dual[e31])
                        - (anti_wedge[e43] * right_anti_dual[e12])
                        - (anti_wedge[e23] * right_anti_dual[e41])
                        - (anti_wedge[e31] * right_anti_dual[e42])
                        - (anti_wedge[e12] * right_anti_dual[e43]),
                ),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (anti_wedge[e23] * right_anti_dual[e45])
                    + (anti_wedge[e45] * right_anti_dual[e23])
                    + (anti_wedge[e35] * right_anti_dual[e42])
                    + (anti_wedge[e4235] * right_anti_dual[scalar]),
                (anti_wedge[e31] * right_anti_dual[e45])
                    + (anti_wedge[e45] * right_anti_dual[e31])
                    + (anti_wedge[e15] * right_anti_dual[e43])
                    + (anti_wedge[e4315] * right_anti_dual[scalar]),
                (anti_wedge[e12] * right_anti_dual[e45])
                    + (anti_wedge[e45] * right_anti_dual[e12])
                    + (anti_wedge[e25] * right_anti_dual[e41])
                    + (anti_wedge[e4125] * right_anti_dual[scalar]),
                -(anti_wedge[e12] * right_anti_dual[e35])
                    - (anti_wedge[e15] * right_anti_dual[e23])
                    - (anti_wedge[e25] * right_anti_dual[e31])
                    - (anti_wedge[e35] * right_anti_dual[e12]),
            ]) + (anti_wedge.group0().yzxw() * right_anti_dual.group2().zxy().with_w(right_anti_dual[e3215]))
                + (anti_wedge.group0().www() * right_anti_dual.group3().xyz()).with_w(anti_wedge[e3215] * right_anti_dual[scalar])
                - (right_anti_dual.group2().yzxx() * anti_wedge.group0().zxy().with_w(anti_wedge[e23]))
                - (anti_wedge.group2().yzx() * right_anti_dual.group0().zxy()).with_w(anti_wedge[e31] * right_anti_dual[e25]),
        );
    }
}
impl RejectOrthogonallyFrom<VersorOdd> for Flector {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       21        0
    //    simd3        2       13        0
    //    simd4       16       15        0
    // Totals...
    // yes simd       27       49        0
    //  no simd       79      120        0
    fn reject_orthogonally_from(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[e1234]) * self.group1().xyz() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            ((self.group1().zxy() * other.group3().yzx()) - (self.group1().yzx() * other.group3().zxy())).with_w(self[e3215] * other[e1234] * -1.0),
            // e235, e315, e125, e4
            (self.group1().xyzx() * other.group3().www().with_w(other[e41])) + Simd32x3::from(0.0).with_w((self[e4315] * other[e42]) + (self[e4125] * other[e43]))
                - (self.group1().www() * other.group3().xyz()).with_w(self[e45] * other[e1234]),
            // e1, e2, e3, e5
            Simd32x3::from(0.0).with_w((self[e25] * other[e4315]) + (self[e35] * other[e4125]) + (self[e45] * other[e3215]) - (self[e3215] * other[e45]))
                + (self.group1().yzx() * other.group1().zxy()).with_w(self[e15] * other[e4235])
                - (self.group1().zxyy() * other.group1().yzx().with_w(other[e25]))
                - (self.group1().wwwz() * other.group0().xyz().with_w(other[e35]))
                - (other.group2().wwwx() * self.group0().xyz().with_w(self[e4235])),
        );
        let right_anti_dual = VersorEven::from_groups(
            // e423, e431, e412, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            other.group2().xyz().with_w(other[e3215]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e4
            other.group3().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group3().xyz()) - (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group3().xyz()),
            // e23, e31, e12, e45
            (anti_wedge.group3().yzx() * right_anti_dual.group3().zxy()).with_w(anti_wedge[e4] * right_anti_dual[e5])
                - (anti_wedge.group3().zxyw() * right_anti_dual.group3().yzxw()),
            // e15, e25, e35, e1234
            Simd32x3::from(0.0).with_w(
                (anti_wedge[e1] * right_anti_dual[e423]) + (anti_wedge[e2] * right_anti_dual[e431]) + (anti_wedge[e3] * right_anti_dual[e412])
                    - (anti_wedge[e431] * right_anti_dual[e2])
                    - (anti_wedge[e412] * right_anti_dual[e3])
                    - (anti_wedge[e321] * right_anti_dual[e4]),
            ) + (right_anti_dual.group2().www() * anti_wedge.group3().xyz()).with_w(anti_wedge[e4] * right_anti_dual[e321])
                - (right_anti_dual.group3().xyzx() * anti_wedge.group3().www().with_w(anti_wedge[e423])),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(right_anti_dual[e5]) * anti_wedge.group0().with_w(anti_wedge[e321]))
                + (anti_wedge.group2().wwwy() * right_anti_dual.group2().xyz().with_w(right_anti_dual[e2]))
                + (right_anti_dual.group3().yzxx() * anti_wedge.group1().zxy().with_w(anti_wedge[e235]))
                + (anti_wedge.group3().zxy() * right_anti_dual.group1().yzx()).with_w(anti_wedge[e125] * right_anti_dual[e3])
                - (Simd32x4::from(anti_wedge[e5]) * right_anti_dual.group0().xyz().with_w(right_anti_dual[e321]))
                - (anti_wedge.group3().yzxz() * right_anti_dual.group1().zxy().with_w(right_anti_dual[e125]))
                - (anti_wedge.group1().yzx() * right_anti_dual.group3().zxy()).with_w(anti_wedge[e1] * right_anti_dual[e235])
                - (right_anti_dual.group3().www() * anti_wedge.group2().xyz()).with_w(anti_wedge[e2] * right_anti_dual[e315]),
        );
    }
}
impl std::ops::Div<reject_orthogonally_from> for Line {
    type Output = reject_orthogonally_from_partial<Line>;
    fn div(self, _rhs: reject_orthogonally_from) -> Self::Output {
        reject_orthogonally_from_partial(self)
    }
}
impl RejectOrthogonallyFrom<AntiCircleRotor> for Line {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5        6        0
    //    simd3        0        2        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        5       12        0
    //  no simd        5       28        0
    fn reject_orthogonally_from(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Scalar::from_groups(
            // scalar
            -(other[e41] * self[e235]) - (other[e42] * self[e315]) - (other[e43] * self[e125]) - (other[e23] * self[e415]) - (other[e31] * self[e425]) - (other[e12] * self[e435]),
        );
        let right_anti_dual = CircleRotor::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e12345
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1(),
            // e235, e315, e125, e12345
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group2(),
        );
    }
}
impl RejectOrthogonallyFrom<AntiDipoleInversion> for Line {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       32        0
    //    simd3        2        4        0
    //    simd4        4        6        0
    // Totals...
    // yes simd       21       42        0
    //  no simd       37       68        0
    fn reject_orthogonally_from(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = RoundPoint::from_groups(
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e321] * self[e415]),
                (other[e423] * self[e125]) + (other[e321] * self[e425]),
                (other[e431] * self[e235]) + (other[e321] * self[e435]),
                -(other[e431] * self[e425]) - (other[e412] * self[e435]),
            ]) - (other.group0().yzx() * self.group1().zxy()).with_w(other[e423] * self[e415]),
            // e5
            -(other[e415] * self[e235])
                - (other[e425] * self[e315])
                - (other[e435] * self[e125])
                - (other[e235] * self[e415])
                - (other[e315] * self[e425])
                - (other[e125] * self[e435]),
        );
        let right_anti_dual = DipoleInversion::from_groups(
            // e41, e42, e43
            other.group0(),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            other.group3() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return CircleRotor::from_groups(
            // e423, e431, e412
            (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group1().xyz()) + (right_anti_dual.group0().yzx() * anti_wedge.group0().zxy())
                - (right_anti_dual.group0().zxy() * anti_wedge.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (right_anti_dual[e41] * anti_wedge[e5]) + (right_anti_dual[e15] * anti_wedge[e4]),
                (right_anti_dual[e42] * anti_wedge[e5]) + (right_anti_dual[e25] * anti_wedge[e4]),
                (right_anti_dual[e43] * anti_wedge[e5]) + (right_anti_dual[e35] * anti_wedge[e4]),
                -(right_anti_dual[e31] * anti_wedge[e2]) - (right_anti_dual[e12] * anti_wedge[e3]),
            ]) - (right_anti_dual.group1().wwwx() * anti_wedge.group0().xyzx()),
            // e235, e315, e125, e12345
            Simd32x4::from([
                right_anti_dual[e25] * anti_wedge[e3] * -1.0,
                right_anti_dual[e35] * anti_wedge[e1] * -1.0,
                right_anti_dual[e15] * anti_wedge[e2] * -1.0,
                (right_anti_dual[e4315] * anti_wedge[e2]) + (right_anti_dual[e4125] * anti_wedge[e3]) + (right_anti_dual[e3215] * anti_wedge[e4]),
            ]) + (Simd32x4::from(anti_wedge[e5]) * right_anti_dual.group1().xyz().with_w(right_anti_dual[e1234]))
                + (anti_wedge.group0().yzxx() * right_anti_dual.group2().zxy().with_w(right_anti_dual[e4235])),
        );
    }
}
impl RejectOrthogonallyFrom<AntiFlatPoint> for Line {
    type Output = Line;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        3        0
    //    simd3        1        4        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        3        9        0
    //  no simd        5       23        0
    fn reject_orthogonally_from(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiPlane::from_groups(
            // e1, e2, e3, e5
            Simd32x4::from([other[e321], other[e321], other[e321], 1.0])
                * self.group0().with_w(-(other[e235] * self[e415]) - (other[e315] * self[e425]) - (other[e125] * self[e435])),
        );
        let right_anti_dual = FlatPoint::from_groups(/* e15, e25, e35, e45 */ other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]));
        return Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(right_anti_dual[e45]) * anti_wedge.group0().xyz() * Simd32x3::from(-1.0),
            // e235, e315, e125
            (anti_wedge.group0().yzx() * right_anti_dual.group0().zxy()) - (anti_wedge.group0().zxy() * right_anti_dual.group0().yzx()),
        );
    }
}
impl RejectOrthogonallyFrom<AntiFlector> for Line {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        6        0
    //    simd3        1        2        0
    //    simd4        0        5        0
    // Totals...
    // yes simd        5       13        0
    //  no simd        7       32        0
    fn reject_orthogonally_from(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiPlane::from_groups(
            // e1, e2, e3, e5
            Simd32x4::from([other[e321], other[e321], other[e321], 1.0])
                * self.group0().with_w(-(other[e235] * self[e415]) - (other[e315] * self[e425]) - (other[e125] * self[e435])),
        );
        let right_anti_dual = Flector::from_groups(
            // e15, e25, e35, e45
            other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([right_anti_dual[e45], right_anti_dual[e45], right_anti_dual[e45], 1.0])
                * anti_wedge
                    .group0()
                    .xyz()
                    .with_w((anti_wedge[e1] * right_anti_dual[e4235]) + (anti_wedge[e2] * right_anti_dual[e4315]) + (anti_wedge[e3] * right_anti_dual[e4125]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            ((anti_wedge.group0().yzx() * right_anti_dual.group0().zxy()) - (anti_wedge.group0().zxy() * right_anti_dual.group0().yzx())).with_w(0.0),
        );
    }
}
impl RejectOrthogonallyFrom<AntiLine> for Line {
    type Output = Line;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        3        0
    //    simd3        0        4        0
    // Totals...
    // yes simd        2        7        0
    //  no simd        2       15        0
    fn reject_orthogonally_from(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Scalar::from_groups(/* scalar */ -(other[e23] * self[e415]) - (other[e31] * self[e425]) - (other[e12] * self[e435]));
        let right_anti_dual = Line::from_groups(
            // e415, e425, e435
            other.group0() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group1() * Simd32x3::from(-1.0),
        );
        return Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e235, e315, e125
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group1(),
        );
    }
}
impl RejectOrthogonallyFrom<AntiMotor> for Line {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5        8        0
    //    simd3        1        2        0
    //    simd4        0        6        0
    // Totals...
    // yes simd        6       16        0
    //  no simd        8       38        0
    fn reject_orthogonally_from(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x3::from(0.0).with_w(-(other[e23] * self[e415]) - (other[e31] * self[e425]) - (other[e12] * self[e435])),
            // e15, e25, e35, e3215
            Simd32x3::from(1.0).with_w(0.0) * self.group0().with_w(0.0) * other.group1().www().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
        );
        let right_anti_dual = Motor::from_groups(
            // e415, e425, e435, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([right_anti_dual[e415], right_anti_dual[e425], right_anti_dual[e435], 1.0])
                * anti_wedge.group0().www().with_w(
                    (anti_wedge[scalar] * right_anti_dual[e12345])
                        - (anti_wedge[e23] * right_anti_dual[e415])
                        - (anti_wedge[e31] * right_anti_dual[e425])
                        - (anti_wedge[e12] * right_anti_dual[e435]),
                ),
            // e235, e315, e125, e5
            ((Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group1().xyz()) + (Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group0().xyz()))
                .with_w(anti_wedge[scalar] * right_anti_dual[e5]),
        );
    }
}
impl RejectOrthogonallyFrom<AntiScalar> for Line {
    type Output = Line;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd3        0        4        0
    // Totals...
    // yes simd        0        5        0
    //  no simd        0       13        0
    fn reject_orthogonally_from(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(other[e12345]) * self.group0(),
            // e235, e315, e125
            Simd32x3::from(other[e12345]) * self.group1(),
        );
        let right_anti_dual = Scalar::from_groups(/* scalar */ other[e12345] * -1.0);
        return Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group0(),
            // e235, e315, e125
            Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group1(),
        );
    }
}
impl RejectOrthogonallyFrom<Circle> for Line {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       23        0
    //    simd3        4        7        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       19       32        0
    //  no simd       33       52        0
    fn reject_orthogonally_from(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = RoundPoint::from_groups(
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e321] * self[e415]),
                (other[e423] * self[e125]) + (other[e321] * self[e425]),
                (other[e431] * self[e235]) + (other[e321] * self[e435]),
                -(other[e431] * self[e425]) - (other[e412] * self[e435]),
            ]) - (other.group0().yzx() * self.group1().zxy()).with_w(other[e423] * self[e415]),
            // e5
            -(other[e415] * self[e235])
                - (other[e425] * self[e315])
                - (other[e435] * self[e125])
                - (other[e235] * self[e415])
                - (other[e315] * self[e425])
                - (other[e125] * self[e435]),
        );
        let right_anti_dual = Dipole::from_groups(
            // e41, e42, e43
            other.group0(),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35
            other.group2(),
        );
        return Circle::from_groups(
            // e423, e431, e412
            (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group1().xyz()) + (right_anti_dual.group0().yzx() * anti_wedge.group0().zxy())
                - (right_anti_dual.group0().zxy() * anti_wedge.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (right_anti_dual[e41] * anti_wedge[e5]) + (right_anti_dual[e15] * anti_wedge[e4]),
                (right_anti_dual[e42] * anti_wedge[e5]) + (right_anti_dual[e25] * anti_wedge[e4]),
                (right_anti_dual[e43] * anti_wedge[e5]) + (right_anti_dual[e35] * anti_wedge[e4]),
                -(right_anti_dual[e31] * anti_wedge[e2]) - (right_anti_dual[e12] * anti_wedge[e3]),
            ]) - (right_anti_dual.group1().wwwx() * anti_wedge.group0().xyzx()),
            // e235, e315, e125
            (Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group1().xyz()) + (right_anti_dual.group2().zxy() * anti_wedge.group0().yzx())
                - (right_anti_dual.group2().yzx() * anti_wedge.group0().zxy()),
        );
    }
}
impl RejectOrthogonallyFrom<CircleRotor> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       27       44        0
    //    simd3        3        7        0
    //    simd4        4        8        0
    // Totals...
    // yes simd       34       59        0
    //  no simd       52       97        0
    fn reject_orthogonally_from(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x3::from(1.0).with_w(0.0) * self.group0().with_w(0.0) * other.group2().www().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
            // e235, e315, e125, e4
            Simd32x4::from([other[e12345], other[e12345], other[e12345], 1.0])
                * self.group1().with_w(-(other[e423] * self[e415]) - (other[e431] * self[e425]) - (other[e412] * self[e435])),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e321] * self[e415]),
                (other[e423] * self[e125]) + (other[e321] * self[e425]),
                (other[e431] * self[e235]) + (other[e321] * self[e435]),
                -(other[e415] * self[e235]) - (other[e425] * self[e315]) - (other[e435] * self[e125]) - (other[e315] * self[e425]) - (other[e125] * self[e435]),
            ]) - (other.group0().yzx() * self.group1().zxy()).with_w(other[e235] * self[e415]),
        );
        let right_anti_dual = AntiCircleRotor::from_groups(
            // e41, e42, e43
            other.group0(),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, scalar
            other.group2() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (right_anti_dual[e42] * anti_wedge[e3]) + (right_anti_dual[e23] * anti_wedge[e4]) + (right_anti_dual[scalar] * anti_wedge[e423]),
                (right_anti_dual[e43] * anti_wedge[e1]) + (right_anti_dual[e31] * anti_wedge[e4]) + (right_anti_dual[scalar] * anti_wedge[e431]),
                (right_anti_dual[e41] * anti_wedge[e2]) + (right_anti_dual[e12] * anti_wedge[e4]) + (right_anti_dual[scalar] * anti_wedge[e412]),
                -(right_anti_dual[e42] * anti_wedge[e315])
                    - (right_anti_dual[e43] * anti_wedge[e125])
                    - (right_anti_dual[e23] * anti_wedge[e415])
                    - (right_anti_dual[e31] * anti_wedge[e425])
                    - (right_anti_dual[e12] * anti_wedge[e435])
                    - (right_anti_dual[e45] * anti_wedge[e321])
                    - (right_anti_dual[e15] * anti_wedge[e423])
                    - (right_anti_dual[e25] * anti_wedge[e431])
                    - (right_anti_dual[e35] * anti_wedge[e412]),
            ]) - (right_anti_dual.group0().zxy() * anti_wedge.group3().yzx()).with_w(right_anti_dual[e41] * anti_wedge[e235]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (right_anti_dual[e15] * anti_wedge[e4]) + (right_anti_dual[scalar] * anti_wedge[e415]),
                (right_anti_dual[e25] * anti_wedge[e4]) + (right_anti_dual[scalar] * anti_wedge[e425]),
                (right_anti_dual[e35] * anti_wedge[e4]) + (right_anti_dual[scalar] * anti_wedge[e435]),
                -(right_anti_dual[e31] * anti_wedge[e2]) - (right_anti_dual[e12] * anti_wedge[e3]),
            ]) + (right_anti_dual.group0() * anti_wedge.group3().www()).with_w(right_anti_dual[scalar] * anti_wedge[e321])
                - (right_anti_dual.group1().wwwx() * anti_wedge.group3().xyzx()),
            // e235, e315, e125, e5
            ((Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group2().xyz())
                + (Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group1().xyz())
                + (right_anti_dual.group2().zxy() * anti_wedge.group3().yzx())
                - (right_anti_dual.group2().yzx() * anti_wedge.group3().zxy()))
            .with_w(right_anti_dual[scalar] * anti_wedge[e5]),
            // e1, e2, e3, e4
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group3().xyz().with_w(anti_wedge[e4]),
        );
    }
}
impl RejectOrthogonallyFrom<Dipole> for Line {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5        6        0
    //    simd3        0        4        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        5       12        0
    //  no simd        5       26        0
    fn reject_orthogonally_from(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Scalar::from_groups(
            // scalar
            -(other[e41] * self[e235]) - (other[e42] * self[e315]) - (other[e43] * self[e125]) - (other[e23] * self[e415]) - (other[e31] * self[e425]) - (other[e12] * self[e435]),
        );
        let right_anti_dual = Circle::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125
            other.group2() * Simd32x3::from(-1.0),
        );
        return Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1(),
            // e235, e315, e125
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group2(),
        );
    }
}
impl RejectOrthogonallyFrom<DipoleInversion> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       27       44        0
    //    simd3        3        9        0
    //    simd4        4        6        0
    // Totals...
    // yes simd       34       59        0
    //  no simd       52       95        0
    fn reject_orthogonally_from(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[e1234]) * self.group0(),
            // e23, e31, e12, e45
            Simd32x4::from([other[e1234], other[e1234], other[e1234], 1.0])
                * self.group1().with_w(-(other[e4235] * self[e415]) - (other[e4315] * self[e425]) - (other[e4125] * self[e435])),
            // e15, e25, e35, scalar
            Simd32x4::from([
                (other[e4125] * self[e315]) + (other[e3215] * self[e415]),
                (other[e4235] * self[e125]) + (other[e3215] * self[e425]),
                (other[e4315] * self[e235]) + (other[e3215] * self[e435]),
                -(other[e42] * self[e315]) - (other[e43] * self[e125]) - (other[e23] * self[e415]) - (other[e31] * self[e425]) - (other[e12] * self[e435]),
            ]) - (self.group1().zxy() * other.group3().yzx()).with_w(other[e41] * self[e235]),
        );
        let right_anti_dual = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e4
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group3() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (anti_wedge[e42] * right_anti_dual[e3]) + (anti_wedge[e23] * right_anti_dual[e4]) + (anti_wedge[scalar] * right_anti_dual[e423]),
                (anti_wedge[e43] * right_anti_dual[e1]) + (anti_wedge[e31] * right_anti_dual[e4]) + (anti_wedge[scalar] * right_anti_dual[e431]),
                (anti_wedge[e41] * right_anti_dual[e2]) + (anti_wedge[e12] * right_anti_dual[e4]) + (anti_wedge[scalar] * right_anti_dual[e412]),
                -(anti_wedge[e42] * right_anti_dual[e315])
                    - (anti_wedge[e43] * right_anti_dual[e125])
                    - (anti_wedge[e23] * right_anti_dual[e415])
                    - (anti_wedge[e31] * right_anti_dual[e425])
                    - (anti_wedge[e12] * right_anti_dual[e435])
                    - (anti_wedge[e45] * right_anti_dual[e321])
                    - (anti_wedge[e15] * right_anti_dual[e423])
                    - (anti_wedge[e25] * right_anti_dual[e431])
                    - (anti_wedge[e35] * right_anti_dual[e412]),
            ]) - (anti_wedge.group0().zxy() * right_anti_dual.group3().yzx()).with_w(anti_wedge[e41] * right_anti_dual[e235]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (anti_wedge[e15] * right_anti_dual[e4]) + (anti_wedge[scalar] * right_anti_dual[e415]),
                (anti_wedge[e25] * right_anti_dual[e4]) + (anti_wedge[scalar] * right_anti_dual[e425]),
                (anti_wedge[e35] * right_anti_dual[e4]) + (anti_wedge[scalar] * right_anti_dual[e435]),
                -(anti_wedge[e31] * right_anti_dual[e2]) - (anti_wedge[e12] * right_anti_dual[e3]),
            ]) + (anti_wedge.group0() * right_anti_dual.group3().www()).with_w(anti_wedge[scalar] * right_anti_dual[e321])
                - (anti_wedge.group1().wwwx() * right_anti_dual.group3().xyzx()),
            // e235, e315, e125, e5
            ((Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group2().xyz())
                + (Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group1().xyz())
                + (anti_wedge.group2().zxy() * right_anti_dual.group3().yzx())
                - (anti_wedge.group2().yzx() * right_anti_dual.group3().zxy()))
            .with_w(anti_wedge[scalar] * right_anti_dual[e5]),
            // e1, e2, e3, e4
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group3().xyz().with_w(right_anti_dual[e4]),
        );
    }
}
impl RejectOrthogonallyFrom<DualNum> for Line {
    type Output = Line;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd2        0        1        0
    //    simd3        0        4        0
    // Totals...
    // yes simd        0        5        0
    //  no simd        0       14        0
    fn reject_orthogonally_from(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(other[e12345]) * self.group0(),
            // e235, e315, e125
            Simd32x3::from(other[e12345]) * self.group1(),
        );
        let right_anti_dual = AntiDualNum::from_groups(/* e3215, scalar */ other.group0() * Simd32x2::from(-1.0));
        return Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group0(),
            // e235, e315, e125
            Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group1(),
        );
    }
}
impl RejectOrthogonallyFrom<Flector> for Line {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd3        1        2        0
    //    simd4        1        5        0
    // Totals...
    // yes simd        6       15        0
    //  no simd       11       34        0
    fn reject_orthogonally_from(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = FlatPoint::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e4125] * self[e315]) + (other[e3215] * self[e415]),
                (other[e4235] * self[e125]) + (other[e3215] * self[e425]),
                (other[e4315] * self[e235]) + (other[e3215] * self[e435]),
                -(other[e4315] * self[e425]) - (other[e4125] * self[e435]),
            ]) - (other.group1().yzxx() * self.group1().zxy().with_w(self[e415])),
        );
        let right_anti_dual = AntiFlector::from_groups(
            // e235, e315, e125, e321
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(anti_wedge[e45]) * right_anti_dual.group1().xyz().with_w(right_anti_dual[e321]) * Simd32x4::from(-1.0),
            // e235, e315, e125, e5
            ((right_anti_dual.group1().yzx() * anti_wedge.group0().zxy()) - (right_anti_dual.group1().zxy() * anti_wedge.group0().yzx())).with_w(0.0),
        );
    }
}
impl RejectOrthogonallyFrom<Line> for Line {
    type Output = AntiFlatPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5        6        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        5        9        0
    //  no simd        5       18        0
    fn reject_orthogonally_from(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = DualNum::from_groups(/* e5, e12345 */ Simd32x2::from([
            -(other[e415] * self[e235])
                - (other[e425] * self[e315])
                - (other[e435] * self[e125])
                - (other[e235] * self[e415])
                - (other[e315] * self[e425])
                - (other[e125] * self[e435]),
            0.0,
        ]));
        return AntiFlatPoint::from_groups(
            // e235, e315, e125, e321
            anti_wedge.group0().xx().with_zw(anti_wedge[e5], 0.0) * Simd32x3::from(1.0).with_w(0.0) * other.group0().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
        );
    }
}
impl RejectOrthogonallyFrom<Motor> for Line {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       11        0
    //    simd3        1        2        0
    //    simd4        0        7        0
    // Totals...
    // yes simd        9       20        0
    //  no simd       11       45        0
    fn reject_orthogonally_from(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x3::from(1.0).with_w(0.0) * self.group0().with_w(0.0) * other.group0().www().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
            // e235, e315, e125, e5
            Simd32x4::from([other[e12345], other[e12345], other[e12345], 1.0])
                * self.group1().with_w(
                    -(self[e415] * other[e235])
                        - (self[e425] * other[e315])
                        - (self[e435] * other[e125])
                        - (self[e235] * other[e415])
                        - (self[e315] * other[e425])
                        - (self[e125] * other[e435]),
                ),
        );
        let right_anti_dual = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e3215
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([anti_wedge[e415], anti_wedge[e425], anti_wedge[e435], 1.0])
                * right_anti_dual.group0().www().with_w(
                    (right_anti_dual[scalar] * anti_wedge[e12345])
                        - (right_anti_dual[e23] * anti_wedge[e415])
                        - (right_anti_dual[e31] * anti_wedge[e425])
                        - (right_anti_dual[e12] * anti_wedge[e435]),
                ),
            // e235, e315, e125, e5
            ((Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group1().xyz()) + (Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group0().xyz()))
                .with_w(right_anti_dual[scalar] * anti_wedge[e5]),
        );
    }
}
impl RejectOrthogonallyFrom<MultiVector> for Line {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       89      122        0
    //    simd2        0        1        0
    //    simd3       20       38        0
    //    simd4       22       21        0
    // Totals...
    // yes simd      131      182        0
    //  no simd      237      322        0
    fn reject_orthogonally_from(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                -(self[e415] * other[e23])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e235] * other[e41])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e415] * other[e321]) + (self[e315] * other[e412]),
                (self[e425] * other[e321]) + (self[e125] * other[e423]),
                (self[e435] * other[e321]) + (self[e235] * other[e431]),
                -(self[e425] * other[e431]) - (self[e435] * other[e412]),
            ]) - (self.group1().zxy() * other.group7().yzx()).with_w(self[e415] * other[e423]),
            // e5
            -(self[e415] * other[e235])
                - (self[e425] * other[e315])
                - (self[e435] * other[e125])
                - (self[e235] * other[e415])
                - (self[e315] * other[e425])
                - (self[e125] * other[e435]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e415] * other[e3215]) + (self[e315] * other[e4125]),
                (self[e425] * other[e3215]) + (self[e125] * other[e4235]),
                (self[e435] * other[e3215]) + (self[e235] * other[e4315]),
                -(self[e425] * other[e4315]) - (self[e435] * other[e4125]),
            ]) - (other.group9().yzxx() * self.group1().zxy().with_w(self[e415])),
            // e41, e42, e43
            Simd32x3::from(other[e1234]) * self.group0(),
            // e23, e31, e12
            Simd32x3::from(other[e1234]) * self.group1(),
            // e415, e425, e435, e321
            other.group0().yy().with_zw(other[e12345], 0.0) * Simd32x3::from(1.0).with_w(0.0) * self.group0().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(other[e12345]) * self.group1(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(0.0),
            // e1234
            0.0,
        );
        let right_anti_dual = MultiVector::from_groups(
            // scalar, e12345
            other.group0().yx() * Simd32x2::from([-1.0, 1.0]),
            // e1, e2, e3, e4
            other.group9().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e5
            other[e3215],
            // e15, e25, e35, e45
            other.group8().with_w(other[e321] * -1.0),
            // e41, e42, e43
            other.group7(),
            // e23, e31, e12
            other.group6().xyz(),
            // e415, e425, e435, e321
            other.group5().with_w(other[e45]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e423, e431, e412
            other.group4() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group3().xyz() * Simd32x3::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group1().xyz().with_w(other[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1234
            other[e4] * -1.0,
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                anti_wedge[scalar] * right_anti_dual[scalar],
                (anti_wedge[scalar] * right_anti_dual[e12345])
                    + (anti_wedge[e12345] * right_anti_dual[scalar])
                    + (anti_wedge[e1] * right_anti_dual[e4235])
                    + (anti_wedge[e2] * right_anti_dual[e4315])
                    + (anti_wedge[e3] * right_anti_dual[e4125])
                    + (anti_wedge[e4] * right_anti_dual[e3215])
                    + (anti_wedge[e5] * right_anti_dual[e1234])
                    + (anti_wedge[e4235] * right_anti_dual[e1])
                    + (anti_wedge[e4315] * right_anti_dual[e2])
                    + (anti_wedge[e4125] * right_anti_dual[e3])
                    + (anti_wedge[e3215] * right_anti_dual[e4])
                    + (anti_wedge[e1234] * right_anti_dual[e5])
                    - (anti_wedge[e15] * right_anti_dual[e423])
                    - (anti_wedge[e25] * right_anti_dual[e431])
                    - (anti_wedge[e35] * right_anti_dual[e412])
                    - (anti_wedge[e45] * right_anti_dual[e321])
                    - (anti_wedge[e41] * right_anti_dual[e235])
                    - (anti_wedge[e42] * right_anti_dual[e315])
                    - (anti_wedge[e43] * right_anti_dual[e125])
                    - (anti_wedge[e23] * right_anti_dual[e415])
                    - (anti_wedge[e31] * right_anti_dual[e425])
                    - (anti_wedge[e12] * right_anti_dual[e435])
                    - (anti_wedge[e415] * right_anti_dual[e23])
                    - (anti_wedge[e425] * right_anti_dual[e31])
                    - (anti_wedge[e435] * right_anti_dual[e12])
                    - (anti_wedge[e321] * right_anti_dual[e45])
                    - (anti_wedge[e423] * right_anti_dual[e15])
                    - (anti_wedge[e431] * right_anti_dual[e25])
                    - (anti_wedge[e412] * right_anti_dual[e35])
                    - (anti_wedge[e235] * right_anti_dual[e41])
                    - (anti_wedge[e315] * right_anti_dual[e42])
                    - (anti_wedge[e125] * right_anti_dual[e43]),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1()) + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1()),
            // e5
            (anti_wedge[scalar] * right_anti_dual[e5]) + (anti_wedge[e5] * right_anti_dual[scalar]),
            // e15, e25, e35, e45
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group3())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group3())
                + (Simd32x4::from(right_anti_dual[e5]) * anti_wedge.group1())
                - (Simd32x4::from(anti_wedge[e5]) * right_anti_dual.group1()),
            // e41, e42, e43
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group4())
                + (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group1().xyz())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group4())
                - (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group1().xyz()),
            // e23, e31, e12
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group5())
                + (anti_wedge.group1().yzx() * right_anti_dual.group1().zxy())
                - (anti_wedge.group1().zxy() * right_anti_dual.group1().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (anti_wedge[e4] * right_anti_dual[e15])
                    + (anti_wedge[e5] * right_anti_dual[e41])
                    + (anti_wedge[e15] * right_anti_dual[e4])
                    + (anti_wedge[e41] * right_anti_dual[e5]),
                (anti_wedge[e4] * right_anti_dual[e25])
                    + (anti_wedge[e5] * right_anti_dual[e42])
                    + (anti_wedge[e25] * right_anti_dual[e4])
                    + (anti_wedge[e42] * right_anti_dual[e5]),
                (anti_wedge[e4] * right_anti_dual[e35])
                    + (anti_wedge[e5] * right_anti_dual[e43])
                    + (anti_wedge[e35] * right_anti_dual[e4])
                    + (anti_wedge[e43] * right_anti_dual[e5]),
                -(anti_wedge[e1] * right_anti_dual[e23])
                    - (anti_wedge[e2] * right_anti_dual[e31])
                    - (anti_wedge[e3] * right_anti_dual[e12])
                    - (anti_wedge[e12] * right_anti_dual[e3]),
            ]) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group6())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group6())
                - (right_anti_dual.group1().xyzy() * anti_wedge.group3().www().with_w(anti_wedge[e31]))
                - (right_anti_dual.group3().www() * anti_wedge.group1().xyz()).with_w(anti_wedge[e23] * right_anti_dual[e1]),
            // e423, e431, e412
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group7())
                + (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group7())
                + (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group5())
                + (anti_wedge.group4().yzx() * right_anti_dual.group1().zxy())
                + (right_anti_dual.group4().yzx() * anti_wedge.group1().zxy())
                - (anti_wedge.group4().zxy() * right_anti_dual.group1().yzx())
                - (right_anti_dual.group4().zxy() * anti_wedge.group1().yzx()),
            // e235, e315, e125
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group8())
                + (Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group8())
                + (Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group5())
                + (anti_wedge.group1().yzx() * right_anti_dual.group3().zxy())
                + (anti_wedge.group3().zxy() * right_anti_dual.group1().yzx())
                - (anti_wedge.group1().zxy() * right_anti_dual.group3().yzx())
                - (anti_wedge.group3().yzx() * right_anti_dual.group1().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (anti_wedge[e3] * right_anti_dual[e425])
                    + (anti_wedge[e4] * right_anti_dual[e235])
                    + (anti_wedge[e45] * right_anti_dual[e23])
                    + (anti_wedge[e435] * right_anti_dual[e2]),
                (anti_wedge[e1] * right_anti_dual[e435])
                    + (anti_wedge[e4] * right_anti_dual[e315])
                    + (anti_wedge[e45] * right_anti_dual[e31])
                    + (anti_wedge[e415] * right_anti_dual[e3]),
                (anti_wedge[e2] * right_anti_dual[e415])
                    + (anti_wedge[e4] * right_anti_dual[e125])
                    + (anti_wedge[e45] * right_anti_dual[e12])
                    + (anti_wedge[e425] * right_anti_dual[e1]),
                -(anti_wedge[e1] * right_anti_dual[e235])
                    - (anti_wedge[e2] * right_anti_dual[e315])
                    - (anti_wedge[e3] * right_anti_dual[e125])
                    - (anti_wedge[e5] * right_anti_dual[e321]),
            ]) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group9())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group9())
                + (Simd32x4::from([right_anti_dual[e5], right_anti_dual[e5], right_anti_dual[e5], right_anti_dual[e3]]) * anti_wedge.group7().with_w(anti_wedge[e125]))
                + (anti_wedge.group5() * right_anti_dual.group3().www()).with_w(anti_wedge[e315] * right_anti_dual[e2])
                + (anti_wedge.group4().yzx() * right_anti_dual.group3().zxy()).with_w(anti_wedge[e235] * right_anti_dual[e1])
                + (right_anti_dual.group4().yzx() * anti_wedge.group3().zxy()).with_w(anti_wedge[e321] * right_anti_dual[e5])
                - (Simd32x4::from([anti_wedge[e5], anti_wedge[e5], anti_wedge[e5], anti_wedge[e15]]) * right_anti_dual.group7().with_w(right_anti_dual[e23]))
                - (right_anti_dual.group3().yzxx() * anti_wedge.group4().zxy().with_w(anti_wedge[e23]))
                - (anti_wedge.group8() * right_anti_dual.group1().www()).with_w(anti_wedge[e31] * right_anti_dual[e25])
                - (right_anti_dual.group4().zxy() * anti_wedge.group3().yzx()).with_w(anti_wedge[e12] * right_anti_dual[e35])
                - (anti_wedge.group1().yzx() * right_anti_dual.group6().zxy()).with_w(anti_wedge[e25] * right_anti_dual[e31])
                - (anti_wedge.group6().yzx() * right_anti_dual.group1().zxy()).with_w(anti_wedge[e35] * right_anti_dual[e12]),
            // e1234
            (anti_wedge[scalar] * right_anti_dual[e1234])
                + (anti_wedge[e1] * right_anti_dual[e423])
                + (anti_wedge[e2] * right_anti_dual[e431])
                + (anti_wedge[e3] * right_anti_dual[e412])
                + (anti_wedge[e4] * right_anti_dual[e321])
                + (anti_wedge[e1234] * right_anti_dual[scalar])
                - (anti_wedge[e41] * right_anti_dual[e23])
                - (anti_wedge[e42] * right_anti_dual[e31])
                - (anti_wedge[e43] * right_anti_dual[e12])
                - (anti_wedge[e23] * right_anti_dual[e41])
                - (anti_wedge[e31] * right_anti_dual[e42])
                - (anti_wedge[e12] * right_anti_dual[e43])
                - (anti_wedge[e321] * right_anti_dual[e4])
                - (anti_wedge[e423] * right_anti_dual[e1])
                - (anti_wedge[e431] * right_anti_dual[e2])
                - (anti_wedge[e412] * right_anti_dual[e3]),
        );
    }
}
impl RejectOrthogonallyFrom<Plane> for Line {
    type Output = Line;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd3        1        4        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        6       14        0
    //  no simd       11       28        0
    fn reject_orthogonally_from(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = FlatPoint::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e415] * other[e3215]) + (self[e315] * other[e4125]),
                (self[e425] * other[e3215]) + (self[e125] * other[e4235]),
                (self[e435] * other[e3215]) + (self[e235] * other[e4315]),
                -(self[e425] * other[e4315]) - (self[e435] * other[e4125]),
            ]) - (other.group0().yzxx() * self.group1().zxy().with_w(self[e415])),
        );
        let right_anti_dual = AntiPlane::from_groups(/* e1, e2, e3, e5 */ other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]));
        return Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(anti_wedge[e45]) * right_anti_dual.group0().xyz() * Simd32x3::from(-1.0),
            // e235, e315, e125
            (right_anti_dual.group0().yzx() * anti_wedge.group0().zxy()) - (right_anti_dual.group0().zxy() * anti_wedge.group0().yzx()),
        );
    }
}
impl RejectOrthogonallyFrom<Sphere> for Line {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       11        0
    //    simd3        6       10        0
    //    simd4        1        3        0
    // Totals...
    // yes simd       13       24        0
    //  no simd       28       53        0
    fn reject_orthogonally_from(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[e1234]) * self.group0(),
            // e23, e31, e12, e45
            Simd32x4::from([other[e1234], other[e1234], other[e1234], 1.0])
                * self.group1().with_w(-(self[e415] * other[e4235]) - (self[e425] * other[e4315]) - (self[e435] * other[e4125])),
            // e15, e25, e35
            (Simd32x3::from(other[e3215]) * self.group0()) + (self.group1().yzx() * other.group0().zxy()) - (self.group1().zxy() * other.group0().yzx()),
        );
        let right_anti_dual = RoundPoint::from_groups(
            // e1, e2, e3, e4
            other.group0().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e5
            other[e3215],
        );
        return Circle::from_groups(
            // e423, e431, e412
            (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group1().xyz()) + (anti_wedge.group0().yzx() * right_anti_dual.group0().zxy())
                - (anti_wedge.group0().zxy() * right_anti_dual.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (anti_wedge[e41] * right_anti_dual[e5]) + (anti_wedge[e15] * right_anti_dual[e4]),
                (anti_wedge[e42] * right_anti_dual[e5]) + (anti_wedge[e25] * right_anti_dual[e4]),
                (anti_wedge[e43] * right_anti_dual[e5]) + (anti_wedge[e35] * right_anti_dual[e4]),
                -(anti_wedge[e31] * right_anti_dual[e2]) - (anti_wedge[e12] * right_anti_dual[e3]),
            ]) - (anti_wedge.group1().wwwx() * right_anti_dual.group0().xyzx()),
            // e235, e315, e125
            (Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group1().xyz()) + (anti_wedge.group2().zxy() * right_anti_dual.group0().yzx())
                - (anti_wedge.group2().yzx() * right_anti_dual.group0().zxy()),
        );
    }
}
impl RejectOrthogonallyFrom<VersorEven> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       23       38        0
    //    simd3        3        8        0
    //    simd4        7       12        0
    // Totals...
    // yes simd       33       58        0
    //  no simd       60      110        0
    fn reject_orthogonally_from(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x3::from(1.0).with_w(0.0) * self.group0().with_w(0.0) * other.group0().www().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
            // e235, e315, e125, e4
            Simd32x4::from([other[e12345], other[e12345], other[e12345], 1.0])
                * self.group1().with_w(-(self[e415] * other[e423]) - (self[e425] * other[e431]) - (self[e435] * other[e412])),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self[e415] * other[e321]) + (self[e315] * other[e412]),
                (self[e425] * other[e321]) + (self[e125] * other[e423]),
                (self[e435] * other[e321]) + (self[e235] * other[e431]),
                -(self[e425] * other[e315]) - (self[e435] * other[e125]) - (self[e235] * other[e415]) - (self[e315] * other[e425]) - (self[e125] * other[e435]),
            ]) - (self.group1().zxy() * other.group0().yzx()).with_w(self[e415] * other[e235]),
        );
        let right_anti_dual = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e1234
            other.group2().xyz().with_w(other[e4]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            other.group3().xyz().with_w(other[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (anti_wedge.group3().zxyy() * right_anti_dual.group0().yzx().with_w(right_anti_dual[e4315]))
                + Simd32x3::from(0.0).with_w(
                    (anti_wedge[e3] * right_anti_dual[e4125]) + (anti_wedge[e5] * right_anti_dual[e1234])
                        - (anti_wedge[e431] * right_anti_dual[e25])
                        - (anti_wedge[e412] * right_anti_dual[e35])
                        - (anti_wedge[e415] * right_anti_dual[e23])
                        - (anti_wedge[e425] * right_anti_dual[e31])
                        - (anti_wedge[e435] * right_anti_dual[e12])
                        - (anti_wedge[e321] * right_anti_dual[e45])
                        - (anti_wedge[e235] * right_anti_dual[e41])
                        - (anti_wedge[e315] * right_anti_dual[e42])
                        - (anti_wedge[e125] * right_anti_dual[e43]),
                )
                + (anti_wedge.group0() * right_anti_dual.group0().www()).with_w(anti_wedge[e4] * right_anti_dual[e3215])
                + (anti_wedge.group2().www() * right_anti_dual.group1().xyz()).with_w(anti_wedge[e1] * right_anti_dual[e4235])
                - (anti_wedge.group3().yzx() * right_anti_dual.group0().zxy()).with_w(anti_wedge[e423] * right_anti_dual[e15]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (anti_wedge[e4] * right_anti_dual[e15]) + (anti_wedge[e5] * right_anti_dual[e41]),
                (anti_wedge[e4] * right_anti_dual[e25]) + (anti_wedge[e5] * right_anti_dual[e42]),
                (anti_wedge[e4] * right_anti_dual[e35]) + (anti_wedge[e5] * right_anti_dual[e43]),
                -(anti_wedge[e2] * right_anti_dual[e31]) - (anti_wedge[e3] * right_anti_dual[e12]),
            ]) + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1())
                - (anti_wedge.group3().xyzx() * right_anti_dual.group1().wwwx()),
            // e235, e315, e125, e5
            ((Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group1().xyz())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group2().xyz())
                + (anti_wedge.group3().yzx() * right_anti_dual.group2().zxy())
                - (anti_wedge.group3().zxy() * right_anti_dual.group2().yzx()))
            .with_w(anti_wedge[e5] * right_anti_dual[scalar]),
            // e1, e2, e3, e4
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group3().xyz().with_w(anti_wedge[e4]),
        );
    }
}
impl RejectOrthogonallyFrom<VersorOdd> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       42        0
    //    simd3        3        9        0
    //    simd4        5        7        0
    // Totals...
    // yes simd       32       58        0
    //  no simd       53       97        0
    fn reject_orthogonally_from(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[e1234]) * self.group0(),
            // e23, e31, e12, e45
            Simd32x4::from([other[e1234], other[e1234], other[e1234], 1.0])
                * self.group1().with_w(-(self[e415] * other[e4235]) - (self[e425] * other[e4315]) - (self[e435] * other[e4125])),
            // e15, e25, e35, scalar
            Simd32x4::from([
                (self[e415] * other[e3215]) + (self[e315] * other[e4125]),
                (self[e425] * other[e3215]) + (self[e125] * other[e4235]),
                (self[e435] * other[e3215]) + (self[e235] * other[e4315]),
                -(self[e425] * other[e31]) - (self[e435] * other[e12]) - (self[e235] * other[e41]) - (self[e315] * other[e42]) - (self[e125] * other[e43]),
            ]) - (self.group1().zxy() * other.group3().yzx()).with_w(self[e415] * other[e23]),
        );
        let right_anti_dual = VersorEven::from_groups(
            // e423, e431, e412, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            other.group2().xyz().with_w(other[e3215]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e4
            other.group3().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (anti_wedge[e23] * right_anti_dual[e4]) + (anti_wedge[scalar] * right_anti_dual[e423]),
                (anti_wedge[e31] * right_anti_dual[e4]) + (anti_wedge[scalar] * right_anti_dual[e431]),
                (anti_wedge[e12] * right_anti_dual[e4]) + (anti_wedge[scalar] * right_anti_dual[e412]),
                -(anti_wedge[e42] * right_anti_dual[e315])
                    - (anti_wedge[e43] * right_anti_dual[e125])
                    - (anti_wedge[e23] * right_anti_dual[e415])
                    - (anti_wedge[e31] * right_anti_dual[e425])
                    - (anti_wedge[e12] * right_anti_dual[e435])
                    - (anti_wedge[e45] * right_anti_dual[e321])
                    - (anti_wedge[e15] * right_anti_dual[e423])
                    - (anti_wedge[e25] * right_anti_dual[e431])
                    - (anti_wedge[e35] * right_anti_dual[e412]),
            ]) + (anti_wedge.group0().yzx() * right_anti_dual.group3().zxy()).with_w(anti_wedge[scalar] * right_anti_dual[e12345])
                - (anti_wedge.group0().zxy() * right_anti_dual.group3().yzx()).with_w(anti_wedge[e41] * right_anti_dual[e235]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (anti_wedge[e15] * right_anti_dual[e4]) + (anti_wedge[scalar] * right_anti_dual[e415]),
                (anti_wedge[e25] * right_anti_dual[e4]) + (anti_wedge[scalar] * right_anti_dual[e425]),
                (anti_wedge[e35] * right_anti_dual[e4]) + (anti_wedge[scalar] * right_anti_dual[e435]),
                -(anti_wedge[e31] * right_anti_dual[e2]) - (anti_wedge[e12] * right_anti_dual[e3]),
            ]) + (anti_wedge.group0() * right_anti_dual.group2().www()).with_w(anti_wedge[scalar] * right_anti_dual[e321])
                - (anti_wedge.group1().wwwx() * right_anti_dual.group3().xyzx()),
            // e235, e315, e125, e5
            ((Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group2().xyz())
                + (Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group1().xyz())
                + (anti_wedge.group2().zxy() * right_anti_dual.group3().yzx())
                - (anti_wedge.group2().yzx() * right_anti_dual.group3().zxy()))
            .with_w(anti_wedge[scalar] * right_anti_dual[e5]),
            // e1, e2, e3, e4
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group3(),
        );
    }
}
impl std::ops::Div<reject_orthogonally_from> for Motor {
    type Output = reject_orthogonally_from_partial<Motor>;
    fn div(self, _rhs: reject_orthogonally_from) -> Self::Output {
        reject_orthogonally_from_partial(self)
    }
}
impl RejectOrthogonallyFrom<AntiCircleRotor> for Motor {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       18        0
    //    simd3        0        3        0
    //    simd4        0        6        0
    // Totals...
    // yes simd       16       27        0
    //  no simd       16       51        0
    fn reject_orthogonally_from(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[e12345]) * other.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(self[e12345]) * other.group1(),
            // e15, e25, e35, scalar
            Simd32x4::from([self[e12345], self[e12345], self[e12345], 1.0])
                * other.group2().xyz().with_w(
                    (other[scalar] * self[e12345])
                        - (other[e41] * self[e235])
                        - (other[e42] * self[e315])
                        - (other[e43] * self[e125])
                        - (other[e23] * self[e415])
                        - (other[e31] * self[e425])
                        - (other[e12] * self[e435]),
                ),
        );
        let right_anti_dual = CircleRotor::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e12345
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1(),
            // e235, e315, e125, e12345
            Simd32x4::from([right_anti_dual[e235], right_anti_dual[e315], right_anti_dual[e125], 1.0])
                * anti_wedge.group2().www().with_w(
                    (anti_wedge[scalar] * right_anti_dual[e12345])
                        - (anti_wedge[e41] * right_anti_dual[e235])
                        - (anti_wedge[e42] * right_anti_dual[e315])
                        - (anti_wedge[e43] * right_anti_dual[e125])
                        - (anti_wedge[e23] * right_anti_dual[e415])
                        - (anti_wedge[e31] * right_anti_dual[e425])
                        - (anti_wedge[e12] * right_anti_dual[e435])
                        - (anti_wedge[e45] * right_anti_dual[e321])
                        - (anti_wedge[e15] * right_anti_dual[e423])
                        - (anti_wedge[e25] * right_anti_dual[e431])
                        - (anti_wedge[e35] * right_anti_dual[e412]),
                ),
        );
    }
}
impl RejectOrthogonallyFrom<AntiDipoleInversion> for Motor {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       25       37        0
    //    simd3        2        6        0
    //    simd4        6        9        0
    // Totals...
    // yes simd       33       52        0
    //  no simd       55       91        0
    fn reject_orthogonally_from(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[e12345]) * other.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(self[e12345]) * other.group1(),
            // e235, e315, e125, e4
            Simd32x4::from([self[e12345], self[e12345], self[e12345], 1.0])
                * other
                    .group2()
                    .xyz()
                    .with_w((other[e4] * self[e12345]) - (other[e423] * self[e415]) - (other[e431] * self[e425]) - (other[e412] * self[e435])),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other[e321] * self[e415]) + (other[e1] * self[e12345]),
                (other[e321] * self[e425]) + (other[e2] * self[e12345]),
                (other[e321] * self[e435]) + (other[e3] * self[e12345]),
                -(other[e425] * self[e315]) - (other[e435] * self[e125]) - (other[e235] * self[e415]) - (other[e315] * self[e425]) - (other[e125] * self[e435]),
            ]) + (other.group0().zxy() * self.group1().yzx()).with_w(other[e5] * self[e12345])
                - (self.group1().zxyx() * other.group0().yzx().with_w(other[e415])),
        );
        let right_anti_dual = DipoleInversion::from_groups(
            // e41, e42, e43
            other.group0(),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            other.group3() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return CircleRotor::from_groups(
            // e423, e431, e412
            (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group1().xyz()) + (right_anti_dual.group0().yzx() * anti_wedge.group3().zxy())
                - (right_anti_dual.group0().zxy() * anti_wedge.group3().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (anti_wedge[e4] * right_anti_dual[e15]) + (anti_wedge[e5] * right_anti_dual[e41]),
                (anti_wedge[e4] * right_anti_dual[e25]) + (anti_wedge[e5] * right_anti_dual[e42]),
                (anti_wedge[e4] * right_anti_dual[e35]) + (anti_wedge[e5] * right_anti_dual[e43]),
                -(anti_wedge[e2] * right_anti_dual[e31]) - (anti_wedge[e3] * right_anti_dual[e12]),
            ]) - (anti_wedge.group3().xyzx() * right_anti_dual.group1().wwwx()),
            // e235, e315, e125, e12345
            (anti_wedge.group3().wwwx() * right_anti_dual.group1().xyz().with_w(right_anti_dual[e4235]))
                + Simd32x3::from(0.0).with_w(
                    (anti_wedge[e2] * right_anti_dual[e4315]) + (anti_wedge[e3] * right_anti_dual[e4125]) + (anti_wedge[e5] * right_anti_dual[e1234])
                        - (anti_wedge[e431] * right_anti_dual[e25])
                        - (anti_wedge[e412] * right_anti_dual[e35])
                        - (anti_wedge[e415] * right_anti_dual[e23])
                        - (anti_wedge[e425] * right_anti_dual[e31])
                        - (anti_wedge[e435] * right_anti_dual[e12])
                        - (anti_wedge[e321] * right_anti_dual[e45])
                        - (anti_wedge[e235] * right_anti_dual[e41])
                        - (anti_wedge[e315] * right_anti_dual[e42])
                        - (anti_wedge[e125] * right_anti_dual[e43]),
                )
                + (anti_wedge.group3().yzx() * right_anti_dual.group2().zxy()).with_w(anti_wedge[e4] * right_anti_dual[e3215])
                - (right_anti_dual.group2().yzxx() * anti_wedge.group3().zxy().with_w(anti_wedge[e423])),
        );
    }
}
impl RejectOrthogonallyFrom<AntiDualNum> for Motor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       10        0
    fn reject_orthogonally_from(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x3::from(0.0).with_w(other[scalar] * self[e12345]),
            // e15, e25, e35, e3215
            Simd32x4::from(other[e3215]) * self.group0(),
        );
        let right_anti_dual = DualNum::from_groups(/* e5, e12345 */ other.group0());
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x3::from(0.0).with_w(anti_wedge[scalar] * right_anti_dual[e12345]),
            // e235, e315, e125, e5
            Simd32x4::from(right_anti_dual[e5]) * anti_wedge.group0(),
        );
    }
}
impl RejectOrthogonallyFrom<AntiFlatPoint> for Motor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        3        0
    //    simd3        1        2        0
    //    simd4        0        5        0
    // Totals...
    // yes simd        3       10        0
    //  no simd        5       29        0
    fn reject_orthogonally_from(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(self[e12345]) * other.group0(),
            // e1, e2, e3, e5
            Simd32x4::from([self[e415], self[e425], self[e435], 1.0])
                * other.group0().www().with_w(-(other[e235] * self[e415]) - (other[e315] * self[e425]) - (other[e125] * self[e435])),
        );
        let right_anti_dual = FlatPoint::from_groups(/* e15, e25, e35, e45 */ other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]));
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(right_anti_dual[e45]) * anti_wedge.group1().xyz().with_w(anti_wedge[e321]) * Simd32x4::from(-1.0),
            // e235, e315, e125, e5
            ((anti_wedge.group1().yzx() * right_anti_dual.group0().zxy()) - (anti_wedge.group1().zxy() * right_anti_dual.group0().yzx())).with_w(0.0),
        );
    }
}
impl RejectOrthogonallyFrom<AntiFlector> for Motor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       10        0
    //    simd3        1        2        0
    //    simd4        1        6        0
    // Totals...
    // yes simd        7       18        0
    //  no simd       12       40        0
    fn reject_orthogonally_from(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(self[e12345]) * other.group0(),
            // e1, e2, e3, e5
            Simd32x4::from([
                other[e1] * self[e12345],
                other[e2] * self[e12345],
                other[e3] * self[e12345],
                -(other[e235] * self[e415]) - (other[e315] * self[e425]) - (other[e125] * self[e435]),
            ]) + (self.group0() * other.group0().www().with_w(other[e5])),
        );
        let right_anti_dual = Flector::from_groups(
            // e15, e25, e35, e45
            other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([right_anti_dual[e45], right_anti_dual[e45], right_anti_dual[e45], 1.0])
                * anti_wedge.group1().xyz().with_w(
                    (anti_wedge[e1] * right_anti_dual[e4235]) + (anti_wedge[e2] * right_anti_dual[e4315]) + (anti_wedge[e3] * right_anti_dual[e4125])
                        - (anti_wedge[e321] * right_anti_dual[e45]),
                )
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            ((anti_wedge.group1().yzx() * right_anti_dual.group0().zxy()) - (anti_wedge.group1().zxy() * right_anti_dual.group0().yzx())).with_w(0.0),
        );
    }
}
impl RejectOrthogonallyFrom<AntiLine> for Motor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        6        0
    //    simd3        0        2        0
    //    simd4        0        8        0
    // Totals...
    // yes simd        4       16        0
    //  no simd        4       44        0
    fn reject_orthogonally_from(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([self[e12345], self[e12345], self[e12345], 1.0])
                * other.group0().with_w(-(other[e23] * self[e415]) - (other[e31] * self[e425]) - (other[e12] * self[e435])),
            // e15, e25, e35, e3215
            Simd32x3::from(1.0).with_w(0.0) * other.group1().with_w(0.0) * self.group0().www().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
        );
        let right_anti_dual = Line::from_groups(
            // e415, e425, e435
            other.group0() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group1() * Simd32x3::from(-1.0),
        );
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([anti_wedge[scalar], anti_wedge[scalar], anti_wedge[scalar], 1.0])
                * right_anti_dual
                    .group0()
                    .with_w(-(anti_wedge[e23] * right_anti_dual[e415]) - (anti_wedge[e31] * right_anti_dual[e425]) - (anti_wedge[e12] * right_anti_dual[e435])),
            // e235, e315, e125, e5
            Simd32x3::from(1.0).with_w(0.0) * right_anti_dual.group1().with_w(0.0) * anti_wedge.group0().www().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
        );
    }
}
impl RejectOrthogonallyFrom<AntiMotor> for Motor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       10        0
    //    simd3        2        4        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        8       18        0
    //  no simd       12       38        0
    fn reject_orthogonally_from(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([self[e12345], self[e12345], self[e12345], 1.0])
                * other
                    .group0()
                    .xyz()
                    .with_w((other[scalar] * self[e12345]) - (other[e23] * self[e415]) - (other[e31] * self[e425]) - (other[e12] * self[e435])),
            // e15, e25, e35, e3215
            ((Simd32x3::from(other[e3215]) * self.group0().xyz()) + (Simd32x3::from(self[e12345]) * other.group1().xyz())).with_w(other[e3215] * self[e12345]),
        );
        let right_anti_dual = Motor::from_groups(
            // e415, e425, e435, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([right_anti_dual[e415], right_anti_dual[e425], right_anti_dual[e435], 1.0])
                * anti_wedge.group0().www().with_w(
                    (anti_wedge[scalar] * right_anti_dual[e12345])
                        - (anti_wedge[e23] * right_anti_dual[e415])
                        - (anti_wedge[e31] * right_anti_dual[e425])
                        - (anti_wedge[e12] * right_anti_dual[e435]),
                ),
            // e235, e315, e125, e5
            ((Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group1().xyz()) + (Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group0().xyz()))
                .with_w(anti_wedge[scalar] * right_anti_dual[e5]),
        );
    }
}
impl RejectOrthogonallyFrom<AntiPlane> for Motor {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        3        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        2        5        0
    //  no simd        2       11        0
    fn reject_orthogonally_from(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from(self[e12345]) * other.group0());
        let right_anti_dual = Plane::from_groups(/* e4235, e4315, e4125, e3215 */ other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]));
        return AntiScalar::from_groups(
            // e12345
            (anti_wedge[e1] * right_anti_dual[e4235]) + (anti_wedge[e2] * right_anti_dual[e4315]) + (anti_wedge[e3] * right_anti_dual[e4125]),
        );
    }
}
impl RejectOrthogonallyFrom<AntiScalar> for Motor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        5        0
    //  no simd        0       17        0
    fn reject_orthogonally_from(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(other[e12345]) * self.group0(),
            // e235, e315, e125, e5
            Simd32x4::from(other[e12345]) * self.group1(),
        );
        let right_anti_dual = Scalar::from_groups(/* scalar */ other[e12345] * -1.0);
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group0(),
            // e235, e315, e125, e5
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1(),
        );
    }
}
impl RejectOrthogonallyFrom<Circle> for Motor {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       39        0
    //    simd3        2        6        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       29       49        0
    //  no simd       42       73        0
    fn reject_orthogonally_from(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[e12345]) * other.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(self[e12345]) * other.group1(),
            // e235, e315, e125, e4
            Simd32x4::from([self[e12345], self[e12345], self[e12345], 1.0])
                * other.group2().with_w(-(other[e423] * self[e415]) - (other[e431] * self[e425]) - (other[e412] * self[e435])),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e321] * self[e415]),
                (other[e423] * self[e125]) + (other[e321] * self[e425]),
                (other[e431] * self[e235]) + (other[e321] * self[e435]),
                -(other[e415] * self[e235]) - (other[e425] * self[e315]) - (other[e435] * self[e125]) - (other[e315] * self[e425]) - (other[e125] * self[e435]),
            ]) - (other.group0().yzx() * self.group1().zxy()).with_w(other[e235] * self[e415]),
        );
        let right_anti_dual = Dipole::from_groups(
            // e41, e42, e43
            other.group0(),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35
            other.group2(),
        );
        return CircleRotor::from_groups(
            // e423, e431, e412
            (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group1().xyz()) + (right_anti_dual.group0().yzx() * anti_wedge.group3().zxy())
                - (right_anti_dual.group0().zxy() * anti_wedge.group3().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (anti_wedge[e4] * right_anti_dual[e15]) + (anti_wedge[e5] * right_anti_dual[e41]),
                (anti_wedge[e4] * right_anti_dual[e25]) + (anti_wedge[e5] * right_anti_dual[e42]),
                (anti_wedge[e4] * right_anti_dual[e35]) + (anti_wedge[e5] * right_anti_dual[e43]),
                -(anti_wedge[e2] * right_anti_dual[e31]) - (anti_wedge[e3] * right_anti_dual[e12]),
            ]) - (anti_wedge.group3().xyzx() * right_anti_dual.group1().wwwx()),
            // e235, e315, e125, e12345
            Simd32x4::from([
                (anti_wedge[e2] * right_anti_dual[e35]) + (anti_wedge[e5] * right_anti_dual[e23]),
                (anti_wedge[e3] * right_anti_dual[e15]) + (anti_wedge[e5] * right_anti_dual[e31]),
                (anti_wedge[e1] * right_anti_dual[e25]) + (anti_wedge[e5] * right_anti_dual[e12]),
                -(anti_wedge[e431] * right_anti_dual[e25])
                    - (anti_wedge[e412] * right_anti_dual[e35])
                    - (anti_wedge[e415] * right_anti_dual[e23])
                    - (anti_wedge[e425] * right_anti_dual[e31])
                    - (anti_wedge[e435] * right_anti_dual[e12])
                    - (anti_wedge[e321] * right_anti_dual[e45])
                    - (anti_wedge[e235] * right_anti_dual[e41])
                    - (anti_wedge[e315] * right_anti_dual[e42])
                    - (anti_wedge[e125] * right_anti_dual[e43]),
            ]) - (right_anti_dual.group2().yzx() * anti_wedge.group3().zxy()).with_w(anti_wedge[e423] * right_anti_dual[e15]),
        );
    }
}
impl RejectOrthogonallyFrom<CircleRotor> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       46        0
    //    simd3        4       10        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       34       62        0
    //  no simd       60      100        0
    fn reject_orthogonally_from(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(self[e12345]) * other.group0().with_w(other[e12345]),
            // e415, e425, e435, e321
            ((Simd32x3::from(other[e12345]) * self.group0().xyz()) + (Simd32x3::from(self[e12345]) * other.group1().xyz())).with_w(other[e321] * self[e12345]),
            // e235, e315, e125, e5
            Simd32x4::from([
                other[e12345] * self[e235],
                other[e12345] * self[e315],
                other[e12345] * self[e125],
                -(other[e415] * self[e235])
                    - (other[e425] * self[e315])
                    - (other[e435] * self[e125])
                    - (other[e235] * self[e415])
                    - (other[e315] * self[e425])
                    - (other[e125] * self[e435]),
            ]) + (other.group2() * self.group0().www().with_w(self[e5])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e321] * self[e415]),
                (other[e423] * self[e125]) + (other[e321] * self[e425]),
                (other[e431] * self[e235]) + (other[e321] * self[e435]),
                -(other[e431] * self[e425]) - (other[e412] * self[e435]),
            ]) - (other.group0().yzx() * self.group1().zxy()).with_w(other[e423] * self[e415]),
        );
        let right_anti_dual = AntiCircleRotor::from_groups(
            // e41, e42, e43
            other.group0(),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, scalar
            other.group2() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (right_anti_dual[e23] * anti_wedge[e4]) + (right_anti_dual[scalar] * anti_wedge[e423]),
                (right_anti_dual[e31] * anti_wedge[e4]) + (right_anti_dual[scalar] * anti_wedge[e431]),
                (right_anti_dual[e12] * anti_wedge[e4]) + (right_anti_dual[scalar] * anti_wedge[e412]),
                -(right_anti_dual[e42] * anti_wedge[e315])
                    - (right_anti_dual[e43] * anti_wedge[e125])
                    - (right_anti_dual[e23] * anti_wedge[e415])
                    - (right_anti_dual[e31] * anti_wedge[e425])
                    - (right_anti_dual[e12] * anti_wedge[e435])
                    - (right_anti_dual[e45] * anti_wedge[e321])
                    - (right_anti_dual[e15] * anti_wedge[e423])
                    - (right_anti_dual[e25] * anti_wedge[e431])
                    - (right_anti_dual[e35] * anti_wedge[e412]),
            ]) + (right_anti_dual.group0().yzx() * anti_wedge.group3().zxy()).with_w(right_anti_dual[scalar] * anti_wedge[e12345])
                - (right_anti_dual.group0().zxy() * anti_wedge.group3().yzx()).with_w(right_anti_dual[e41] * anti_wedge[e235]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (right_anti_dual[e15] * anti_wedge[e4]) + (right_anti_dual[scalar] * anti_wedge[e415]),
                (right_anti_dual[e25] * anti_wedge[e4]) + (right_anti_dual[scalar] * anti_wedge[e425]),
                (right_anti_dual[e35] * anti_wedge[e4]) + (right_anti_dual[scalar] * anti_wedge[e435]),
                -(right_anti_dual[e31] * anti_wedge[e2]) - (right_anti_dual[e12] * anti_wedge[e3]),
            ]) + (right_anti_dual.group0() * anti_wedge.group2().www()).with_w(right_anti_dual[scalar] * anti_wedge[e321])
                - (right_anti_dual.group1().wwwx() * anti_wedge.group3().xyzx()),
            // e235, e315, e125, e5
            ((Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group2().xyz())
                + (Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group1().xyz())
                + (right_anti_dual.group2().zxy() * anti_wedge.group3().yzx())
                - (right_anti_dual.group2().yzx() * anti_wedge.group3().zxy()))
            .with_w(right_anti_dual[scalar] * anti_wedge[e5]),
            // e1, e2, e3, e4
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group3(),
        );
    }
}
impl RejectOrthogonallyFrom<Dipole> for Motor {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       16        0
    //    simd3        0        4        0
    //    simd4        0        5        0
    // Totals...
    // yes simd       14       25        0
    //  no simd       14       48        0
    fn reject_orthogonally_from(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[e12345]) * other.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(self[e12345]) * other.group1(),
            // e15, e25, e35, scalar
            Simd32x4::from([self[e12345], self[e12345], self[e12345], 1.0])
                * other.group2().with_w(
                    -(other[e41] * self[e235])
                        - (other[e42] * self[e315])
                        - (other[e43] * self[e125])
                        - (other[e23] * self[e415])
                        - (other[e31] * self[e425])
                        - (other[e12] * self[e435]),
                ),
        );
        let right_anti_dual = Circle::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125
            other.group2() * Simd32x3::from(-1.0),
        );
        return CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1(),
            // e235, e315, e125, e12345
            Simd32x4::from([anti_wedge[scalar], anti_wedge[scalar], anti_wedge[scalar], 1.0])
                * right_anti_dual.group2().with_w(
                    -(anti_wedge[e41] * right_anti_dual[e235])
                        - (anti_wedge[e42] * right_anti_dual[e315])
                        - (anti_wedge[e43] * right_anti_dual[e125])
                        - (anti_wedge[e23] * right_anti_dual[e415])
                        - (anti_wedge[e31] * right_anti_dual[e425])
                        - (anti_wedge[e12] * right_anti_dual[e435])
                        - (anti_wedge[e45] * right_anti_dual[e321])
                        - (anti_wedge[e15] * right_anti_dual[e423])
                        - (anti_wedge[e25] * right_anti_dual[e431])
                        - (anti_wedge[e35] * right_anti_dual[e412]),
                ),
        );
    }
}
impl RejectOrthogonallyFrom<DipoleInversion> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       21       40        0
    //    simd3        6       13        0
    //    simd4        8        9        0
    // Totals...
    // yes simd       35       62        0
    //  no simd       71      115        0
    fn reject_orthogonally_from(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                other[e1234] * self[e415],
                other[e1234] * self[e425],
                other[e1234] * self[e435],
                -(other[e41] * self[e235])
                    - (other[e42] * self[e315])
                    - (other[e43] * self[e125])
                    - (other[e23] * self[e415])
                    - (other[e31] * self[e425])
                    - (other[e12] * self[e435]),
            ]) + (other.group0() * self.group0().www()).with_w(other[e1234] * self[e5]),
            // e23, e31, e12, e45
            Simd32x4::from([
                other[e1234] * self[e235],
                other[e1234] * self[e315],
                other[e1234] * self[e125],
                -(other[e4235] * self[e415]) - (other[e4315] * self[e425]) - (other[e4125] * self[e435]),
            ]) + (Simd32x4::from(self[e12345]) * other.group1()),
            // e15, e25, e35, e1234
            ((Simd32x3::from(other[e3215]) * self.group0().xyz()) + (Simd32x3::from(self[e12345]) * other.group2().xyz()) + (other.group3().zxy() * self.group1().yzx())
                - (other.group3().yzx() * self.group1().zxy()))
            .with_w(other[e1234] * self[e12345]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * other.group3(),
        );
        let right_anti_dual = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e4
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group3() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (right_anti_dual.group3().zxyy() * anti_wedge.group0().yzx().with_w(anti_wedge[e4315]))
                + Simd32x3::from(0.0).with_w(
                    (right_anti_dual[e3] * anti_wedge[e4125]) + (right_anti_dual[e5] * anti_wedge[e1234])
                        - (right_anti_dual[e431] * anti_wedge[e25])
                        - (right_anti_dual[e412] * anti_wedge[e35])
                        - (right_anti_dual[e415] * anti_wedge[e23])
                        - (right_anti_dual[e425] * anti_wedge[e31])
                        - (right_anti_dual[e435] * anti_wedge[e12])
                        - (right_anti_dual[e321] * anti_wedge[e45])
                        - (right_anti_dual[e235] * anti_wedge[e41])
                        - (right_anti_dual[e315] * anti_wedge[e42])
                        - (right_anti_dual[e125] * anti_wedge[e43]),
                )
                + (right_anti_dual.group0() * anti_wedge.group0().www()).with_w(right_anti_dual[e4] * anti_wedge[e3215])
                + (right_anti_dual.group2().www() * anti_wedge.group1().xyz()).with_w(right_anti_dual[e1] * anti_wedge[e4235])
                - (right_anti_dual.group3().yzx() * anti_wedge.group0().zxy()).with_w(right_anti_dual[e423] * anti_wedge[e15]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (right_anti_dual[e4] * anti_wedge[e15]) + (right_anti_dual[e5] * anti_wedge[e41]),
                (right_anti_dual[e4] * anti_wedge[e25]) + (right_anti_dual[e5] * anti_wedge[e42]),
                (right_anti_dual[e4] * anti_wedge[e35]) + (right_anti_dual[e5] * anti_wedge[e43]),
                -(right_anti_dual[e2] * anti_wedge[e31]) - (right_anti_dual[e3] * anti_wedge[e12]),
            ]) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1())
                - (right_anti_dual.group3().xyzx() * anti_wedge.group1().wwwx()),
            // e235, e315, e125, e5
            ((Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group1().xyz())
                + (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group2().xyz())
                + (right_anti_dual.group3().yzx() * anti_wedge.group2().zxy())
                - (right_anti_dual.group3().zxy() * anti_wedge.group2().yzx()))
            .with_w(right_anti_dual[e5] * anti_wedge[scalar]),
            // e1, e2, e3, e4
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group3().xyz().with_w(right_anti_dual[e4]),
        );
    }
}
impl RejectOrthogonallyFrom<DualNum> for Motor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        2        0
    //    simd2        0        1        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        1        7        0
    //  no simd        1       20        0
    fn reject_orthogonally_from(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(other[e12345]) * self.group0(),
            // e235, e315, e125, e5
            Simd32x4::from([self[e235], self[e315], self[e125], 1.0]) * other.group0().yy().with_zw(other[e12345], (other[e5] * self[e12345]) + (other[e12345] * self[e5])),
        );
        let right_anti_dual = AntiDualNum::from_groups(/* e3215, scalar */ other.group0() * Simd32x2::from(-1.0));
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group0(),
            // e235, e315, e125, e5
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1(),
        );
    }
}
impl RejectOrthogonallyFrom<FlatPoint> for Motor {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn reject_orthogonally_from(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ f32::powi(other[e45], 2) * self[e12345] * -1.0);
    }
}
impl RejectOrthogonallyFrom<Flector> for Motor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       12        0
    //    simd3        1        2        0
    //    simd4        2        7        0
    // Totals...
    // yes simd       10       21        0
    //  no simd       18       46        0
    fn reject_orthogonally_from(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e4125] * self[e315]) + (other[e3215] * self[e415]),
                (other[e4235] * self[e125]) + (other[e3215] * self[e425]),
                (other[e4315] * self[e235]) + (other[e3215] * self[e435]),
                -(other[e4315] * self[e425]) - (other[e4125] * self[e435]),
            ]) + (Simd32x4::from(self[e12345]) * other.group0())
                - (other.group1().yzxx() * self.group1().zxy().with_w(self[e415])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * other.group1(),
        );
        let right_anti_dual = AntiFlector::from_groups(
            // e235, e315, e125, e321
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([anti_wedge[e45], anti_wedge[e45], anti_wedge[e45], 1.0])
                * right_anti_dual.group1().xyz().with_w(
                    (right_anti_dual[e1] * anti_wedge[e4235]) + (right_anti_dual[e2] * anti_wedge[e4315]) + (right_anti_dual[e3] * anti_wedge[e4125])
                        - (right_anti_dual[e321] * anti_wedge[e45]),
                )
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            ((right_anti_dual.group1().yzx() * anti_wedge.group0().zxy()) - (right_anti_dual.group1().zxy() * anti_wedge.group0().yzx())).with_w(0.0),
        );
    }
}
impl RejectOrthogonallyFrom<Line> for Motor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7        9        0
    //    simd4        0        7        0
    // Totals...
    // yes simd        7       16        0
    //  no simd        7       37        0
    fn reject_orthogonally_from(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x3::from(1.0).with_w(0.0) * other.group0().with_w(0.0) * self.group0().www().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
            // e235, e315, e125, e5
            Simd32x4::from([self[e12345], self[e12345], self[e12345], 1.0])
                * other.group1().with_w(
                    -(other[e415] * self[e235])
                        - (other[e425] * self[e315])
                        - (other[e435] * self[e125])
                        - (other[e235] * self[e415])
                        - (other[e315] * self[e425])
                        - (other[e125] * self[e435]),
                ),
        );
        let right_anti_dual = AntiLine::from_groups(/* e23, e31, e12 */ other.group0(), /* e15, e25, e35 */ other.group1());
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x3::from(0.0).with_w(-(right_anti_dual[e23] * anti_wedge[e415]) - (right_anti_dual[e31] * anti_wedge[e425]) - (right_anti_dual[e12] * anti_wedge[e435])),
            // e235, e315, e125, e5
            Simd32x3::from(1.0).with_w(0.0) * right_anti_dual.group0().with_w(0.0) * anti_wedge.group1().www().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
        );
    }
}
impl RejectOrthogonallyFrom<Motor> for Motor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       12        0
    //    simd3        2        4        0
    //    simd4        2        5        0
    // Totals...
    // yes simd       12       21        0
    //  no simd       22       44        0
    fn reject_orthogonally_from(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Motor::from_groups(
            // e415, e425, e435, e12345
            ((Simd32x3::from(other[e12345]) * self.group0().xyz()) + (Simd32x3::from(self[e12345]) * other.group0().xyz())).with_w(other[e12345] * self[e12345]),
            // e235, e315, e125, e5
            (Simd32x4::from(other[e12345]) * self.group1())
                + (Simd32x4::from(self[e12345]) * other.group1())
                + Simd32x3::from(0.0).with_w(
                    -(other[e415] * self[e235])
                        - (other[e425] * self[e315])
                        - (other[e435] * self[e125])
                        - (other[e235] * self[e415])
                        - (other[e315] * self[e425])
                        - (other[e125] * self[e435]),
                ),
        );
        let right_anti_dual = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e3215
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([anti_wedge[e415], anti_wedge[e425], anti_wedge[e435], 1.0])
                * right_anti_dual.group0().www().with_w(
                    (right_anti_dual[scalar] * anti_wedge[e12345])
                        - (right_anti_dual[e23] * anti_wedge[e415])
                        - (right_anti_dual[e31] * anti_wedge[e425])
                        - (right_anti_dual[e12] * anti_wedge[e435]),
                ),
            // e235, e315, e125, e5
            ((Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group1().xyz()) + (Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group0().xyz()))
                .with_w(right_anti_dual[scalar] * anti_wedge[e5]),
        );
    }
}
impl RejectOrthogonallyFrom<MultiVector> for Motor {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       93      130        0
    //    simd2        0        1        0
    //    simd3       24       45        0
    //    simd4       24       20        0
    // Totals...
    // yes simd      141      196        0
    //  no simd      261      347        0
    fn reject_orthogonally_from(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e12345] * other[scalar]) + (self[e5] * other[e1234])
                    - (self[e415] * other[e23])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e235] * other[e41])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
                self[e12345] * other[e12345],
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e415] * other[e321]) + (self[e12345] * other[e1]),
                (self[e425] * other[e321]) + (self[e12345] * other[e2]),
                (self[e435] * other[e321]) + (self[e12345] * other[e3]),
                -(self[e425] * other[e431]) - (self[e435] * other[e412]),
            ]) + (other.group7().zxy() * self.group1().yzx()).with_w(self[e12345] * other[e4])
                - (other.group7().yzx() * self.group1().zxy()).with_w(self[e415] * other[e423]),
            // e5
            (self[e12345] * other[e5]) + (self[e5] * other[e12345])
                - (self[e415] * other[e235])
                - (self[e425] * other[e315])
                - (self[e435] * other[e125])
                - (self[e235] * other[e415])
                - (self[e315] * other[e425])
                - (self[e125] * other[e435]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e12345] * other[e15]) + (self[e315] * other[e4125]),
                (self[e12345] * other[e25]) + (self[e125] * other[e4235]),
                (self[e12345] * other[e35]) + (self[e235] * other[e4315]),
                -(self[e425] * other[e4315]) - (self[e435] * other[e4125]),
            ]) + (self.group0() * other.group9().www().with_w(other[e45]))
                - (other.group9().yzxx() * self.group1().zxy().with_w(self[e415])),
            // e41, e42, e43
            (Simd32x3::from(self[e12345]) * other.group4()) + (Simd32x3::from(other[e1234]) * self.group0().xyz()),
            // e23, e31, e12
            (Simd32x3::from(self[e12345]) * other.group5()) + (Simd32x3::from(other[e1234]) * self.group1().xyz()),
            // e415, e425, e435, e321
            ((Simd32x3::from(self[e12345]) * other.group6().xyz()) + (Simd32x3::from(other[e12345]) * self.group0().xyz())).with_w(self[e12345] * other[e321]),
            // e423, e431, e412
            Simd32x3::from(self[e12345]) * other.group7(),
            // e235, e315, e125
            (Simd32x3::from(self[e12345]) * other.group8()) + (Simd32x3::from(other[e12345]) * self.group1().xyz()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * other.group9(),
            // e1234
            self[e12345] * other[e1234],
        );
        let right_anti_dual = MultiVector::from_groups(
            // scalar, e12345
            other.group0().yx() * Simd32x2::from([-1.0, 1.0]),
            // e1, e2, e3, e4
            other.group9().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e5
            other[e3215],
            // e15, e25, e35, e45
            other.group8().with_w(other[e321] * -1.0),
            // e41, e42, e43
            other.group7(),
            // e23, e31, e12
            other.group6().xyz(),
            // e415, e425, e435, e321
            other.group5().with_w(other[e45]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e423, e431, e412
            other.group4() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group3().xyz() * Simd32x3::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group1().xyz().with_w(other[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1234
            other[e4] * -1.0,
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                anti_wedge[scalar] * right_anti_dual[scalar],
                (anti_wedge[scalar] * right_anti_dual[e12345])
                    + (anti_wedge[e12345] * right_anti_dual[scalar])
                    + (anti_wedge[e1] * right_anti_dual[e4235])
                    + (anti_wedge[e2] * right_anti_dual[e4315])
                    + (anti_wedge[e3] * right_anti_dual[e4125])
                    + (anti_wedge[e4] * right_anti_dual[e3215])
                    + (anti_wedge[e5] * right_anti_dual[e1234])
                    + (anti_wedge[e4235] * right_anti_dual[e1])
                    + (anti_wedge[e4315] * right_anti_dual[e2])
                    + (anti_wedge[e4125] * right_anti_dual[e3])
                    + (anti_wedge[e3215] * right_anti_dual[e4])
                    + (anti_wedge[e1234] * right_anti_dual[e5])
                    - (anti_wedge[e15] * right_anti_dual[e423])
                    - (anti_wedge[e25] * right_anti_dual[e431])
                    - (anti_wedge[e35] * right_anti_dual[e412])
                    - (anti_wedge[e45] * right_anti_dual[e321])
                    - (anti_wedge[e41] * right_anti_dual[e235])
                    - (anti_wedge[e42] * right_anti_dual[e315])
                    - (anti_wedge[e43] * right_anti_dual[e125])
                    - (anti_wedge[e23] * right_anti_dual[e415])
                    - (anti_wedge[e31] * right_anti_dual[e425])
                    - (anti_wedge[e12] * right_anti_dual[e435])
                    - (anti_wedge[e415] * right_anti_dual[e23])
                    - (anti_wedge[e425] * right_anti_dual[e31])
                    - (anti_wedge[e435] * right_anti_dual[e12])
                    - (anti_wedge[e321] * right_anti_dual[e45])
                    - (anti_wedge[e423] * right_anti_dual[e15])
                    - (anti_wedge[e431] * right_anti_dual[e25])
                    - (anti_wedge[e412] * right_anti_dual[e35])
                    - (anti_wedge[e235] * right_anti_dual[e41])
                    - (anti_wedge[e315] * right_anti_dual[e42])
                    - (anti_wedge[e125] * right_anti_dual[e43]),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1()) + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1()),
            // e5
            (anti_wedge[scalar] * right_anti_dual[e5]) + (anti_wedge[e5] * right_anti_dual[scalar]),
            // e15, e25, e35, e45
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group3())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group3())
                + (Simd32x4::from(right_anti_dual[e5]) * anti_wedge.group1())
                - (Simd32x4::from(anti_wedge[e5]) * right_anti_dual.group1()),
            // e41, e42, e43
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group4())
                + (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group1().xyz())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group4())
                - (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group1().xyz()),
            // e23, e31, e12
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group5())
                + (anti_wedge.group1().yzx() * right_anti_dual.group1().zxy())
                - (anti_wedge.group1().zxy() * right_anti_dual.group1().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (anti_wedge[e4] * right_anti_dual[e15])
                    + (anti_wedge[e5] * right_anti_dual[e41])
                    + (anti_wedge[e15] * right_anti_dual[e4])
                    + (anti_wedge[e41] * right_anti_dual[e5]),
                (anti_wedge[e4] * right_anti_dual[e25])
                    + (anti_wedge[e5] * right_anti_dual[e42])
                    + (anti_wedge[e25] * right_anti_dual[e4])
                    + (anti_wedge[e42] * right_anti_dual[e5]),
                (anti_wedge[e4] * right_anti_dual[e35])
                    + (anti_wedge[e5] * right_anti_dual[e43])
                    + (anti_wedge[e35] * right_anti_dual[e4])
                    + (anti_wedge[e43] * right_anti_dual[e5]),
                -(anti_wedge[e1] * right_anti_dual[e23])
                    - (anti_wedge[e2] * right_anti_dual[e31])
                    - (anti_wedge[e3] * right_anti_dual[e12])
                    - (anti_wedge[e12] * right_anti_dual[e3]),
            ]) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group6())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group6())
                - (right_anti_dual.group1().xyzy() * anti_wedge.group3().www().with_w(anti_wedge[e31]))
                - (right_anti_dual.group3().www() * anti_wedge.group1().xyz()).with_w(anti_wedge[e23] * right_anti_dual[e1]),
            // e423, e431, e412
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group7())
                + (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group7())
                + (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group5())
                + (anti_wedge.group4().yzx() * right_anti_dual.group1().zxy())
                + (right_anti_dual.group4().yzx() * anti_wedge.group1().zxy())
                - (anti_wedge.group4().zxy() * right_anti_dual.group1().yzx())
                - (right_anti_dual.group4().zxy() * anti_wedge.group1().yzx()),
            // e235, e315, e125
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group8())
                + (Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group8())
                + (Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group5())
                + (anti_wedge.group1().yzx() * right_anti_dual.group3().zxy())
                + (anti_wedge.group3().zxy() * right_anti_dual.group1().yzx())
                - (anti_wedge.group1().zxy() * right_anti_dual.group3().yzx())
                - (anti_wedge.group3().yzx() * right_anti_dual.group1().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (anti_wedge[e3] * right_anti_dual[e425])
                    + (anti_wedge[e4] * right_anti_dual[e235])
                    + (anti_wedge[e45] * right_anti_dual[e23])
                    + (anti_wedge[e435] * right_anti_dual[e2]),
                (anti_wedge[e1] * right_anti_dual[e435])
                    + (anti_wedge[e4] * right_anti_dual[e315])
                    + (anti_wedge[e45] * right_anti_dual[e31])
                    + (anti_wedge[e415] * right_anti_dual[e3]),
                (anti_wedge[e2] * right_anti_dual[e415])
                    + (anti_wedge[e4] * right_anti_dual[e125])
                    + (anti_wedge[e45] * right_anti_dual[e12])
                    + (anti_wedge[e425] * right_anti_dual[e1]),
                -(anti_wedge[e1] * right_anti_dual[e235])
                    - (anti_wedge[e2] * right_anti_dual[e315])
                    - (anti_wedge[e3] * right_anti_dual[e125])
                    - (anti_wedge[e5] * right_anti_dual[e321]),
            ]) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group9())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group9())
                + (Simd32x4::from([right_anti_dual[e5], right_anti_dual[e5], right_anti_dual[e5], right_anti_dual[e3]]) * anti_wedge.group7().with_w(anti_wedge[e125]))
                + (anti_wedge.group5() * right_anti_dual.group3().www()).with_w(anti_wedge[e315] * right_anti_dual[e2])
                + (anti_wedge.group4().yzx() * right_anti_dual.group3().zxy()).with_w(anti_wedge[e235] * right_anti_dual[e1])
                + (right_anti_dual.group4().yzx() * anti_wedge.group3().zxy()).with_w(anti_wedge[e321] * right_anti_dual[e5])
                - (Simd32x4::from([anti_wedge[e5], anti_wedge[e5], anti_wedge[e5], anti_wedge[e15]]) * right_anti_dual.group7().with_w(right_anti_dual[e23]))
                - (right_anti_dual.group3().yzxx() * anti_wedge.group4().zxy().with_w(anti_wedge[e23]))
                - (anti_wedge.group8() * right_anti_dual.group1().www()).with_w(anti_wedge[e31] * right_anti_dual[e25])
                - (right_anti_dual.group4().zxy() * anti_wedge.group3().yzx()).with_w(anti_wedge[e12] * right_anti_dual[e35])
                - (anti_wedge.group1().yzx() * right_anti_dual.group6().zxy()).with_w(anti_wedge[e25] * right_anti_dual[e31])
                - (anti_wedge.group6().yzx() * right_anti_dual.group1().zxy()).with_w(anti_wedge[e35] * right_anti_dual[e12]),
            // e1234
            (anti_wedge[scalar] * right_anti_dual[e1234])
                + (anti_wedge[e1] * right_anti_dual[e423])
                + (anti_wedge[e2] * right_anti_dual[e431])
                + (anti_wedge[e3] * right_anti_dual[e412])
                + (anti_wedge[e4] * right_anti_dual[e321])
                + (anti_wedge[e1234] * right_anti_dual[scalar])
                - (anti_wedge[e41] * right_anti_dual[e23])
                - (anti_wedge[e42] * right_anti_dual[e31])
                - (anti_wedge[e43] * right_anti_dual[e12])
                - (anti_wedge[e23] * right_anti_dual[e41])
                - (anti_wedge[e31] * right_anti_dual[e42])
                - (anti_wedge[e12] * right_anti_dual[e43])
                - (anti_wedge[e321] * right_anti_dual[e4])
                - (anti_wedge[e423] * right_anti_dual[e1])
                - (anti_wedge[e431] * right_anti_dual[e2])
                - (anti_wedge[e412] * right_anti_dual[e3]),
        );
    }
}
impl RejectOrthogonallyFrom<Plane> for Motor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       11        0
    //    simd3        1        2        0
    //    simd4        1        5        0
    // Totals...
    // yes simd        8       18        0
    //  no simd       13       37        0
    fn reject_orthogonally_from(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e415] * other[e3215]) + (self[e315] * other[e4125]),
                (self[e425] * other[e3215]) + (self[e125] * other[e4235]),
                (self[e435] * other[e3215]) + (self[e235] * other[e4315]),
                -(self[e425] * other[e4315]) - (self[e435] * other[e4125]),
            ]) - (other.group0().yzxx() * self.group1().zxy().with_w(self[e415])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * other.group0(),
        );
        let right_anti_dual = AntiPlane::from_groups(/* e1, e2, e3, e5 */ other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]));
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([anti_wedge[e45], anti_wedge[e45], anti_wedge[e45], 1.0])
                * right_anti_dual
                    .group0()
                    .xyz()
                    .with_w((right_anti_dual[e1] * anti_wedge[e4235]) + (right_anti_dual[e2] * anti_wedge[e4315]) + (right_anti_dual[e3] * anti_wedge[e4125]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            ((right_anti_dual.group0().yzx() * anti_wedge.group0().zxy()) - (right_anti_dual.group0().zxy() * anti_wedge.group0().yzx())).with_w(0.0),
        );
    }
}
impl RejectOrthogonallyFrom<RoundPoint> for Motor {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        7        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        4        9        0
    //  no simd        4       15        0
    fn reject_orthogonally_from(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = RoundPoint::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from(self[e12345]) * other.group0(), /* e5 */ self[e12345] * other[e5]);
        let right_anti_dual = Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            other.group0().xyz().with_w(other[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1234
            other[e4] * -1.0,
        );
        return AntiScalar::from_groups(
            // e12345
            (anti_wedge[e1] * right_anti_dual[e4235])
                + (anti_wedge[e2] * right_anti_dual[e4315])
                + (anti_wedge[e3] * right_anti_dual[e4125])
                + (anti_wedge[e4] * right_anti_dual[e3215])
                + (anti_wedge[e5] * right_anti_dual[e1234]),
        );
    }
}
impl RejectOrthogonallyFrom<Scalar> for Motor {
    type Output = AntiScalar;
    fn reject_orthogonally_from(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ self[e12345] * f32::powi(other[scalar], 2));
    }
}
impl RejectOrthogonallyFrom<Sphere> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       22        0
    //    simd3        4        6        0
    //    simd4        3        8        0
    // Totals...
    // yes simd       15       36        0
    //  no simd       32       72        0
    fn reject_orthogonally_from(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(other[e1234]) * self.group0().xyz().with_w(self[e5]),
            // e23, e31, e12, e45
            Simd32x4::from([other[e1234], other[e1234], other[e1234], 1.0])
                * self.group1().xyz().with_w(-(self[e415] * other[e4235]) - (self[e425] * other[e4315]) - (self[e435] * other[e4125])),
            // e15, e25, e35, e1234
            ((Simd32x3::from(other[e3215]) * self.group0().xyz()) + (self.group1().yzx() * other.group0().zxy()) - (self.group1().zxy() * other.group0().yzx()))
                .with_w(self[e12345] * other[e1234]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * other.group0(),
        );
        let right_anti_dual = RoundPoint::from_groups(
            // e1, e2, e3, e4
            other.group0().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e5
            other[e3215],
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                right_anti_dual[e2] * anti_wedge[e43] * -1.0,
                right_anti_dual[e3] * anti_wedge[e41] * -1.0,
                right_anti_dual[e1] * anti_wedge[e42] * -1.0,
                (right_anti_dual[e3] * anti_wedge[e4125]) + (right_anti_dual[e4] * anti_wedge[e3215]) + (right_anti_dual[e5] * anti_wedge[e1234]),
            ]) + (right_anti_dual.group0().zxyx() * anti_wedge.group0().yzx().with_w(anti_wedge[e4235]))
                + (right_anti_dual.group0().wwwy() * anti_wedge.group1().xyz().with_w(anti_wedge[e4315])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (right_anti_dual[e4] * anti_wedge[e15]) + (right_anti_dual[e5] * anti_wedge[e41]),
                (right_anti_dual[e4] * anti_wedge[e25]) + (right_anti_dual[e5] * anti_wedge[e42]),
                (right_anti_dual[e4] * anti_wedge[e35]) + (right_anti_dual[e5] * anti_wedge[e43]),
                -(right_anti_dual[e2] * anti_wedge[e31]) - (right_anti_dual[e3] * anti_wedge[e12]),
            ]) - (right_anti_dual.group0().xyzx() * anti_wedge.group1().wwwx()),
            // e235, e315, e125, e5
            ((Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group1().xyz()) + (right_anti_dual.group0().yzx() * anti_wedge.group2().zxy())
                - (right_anti_dual.group0().zxy() * anti_wedge.group2().yzx()))
            .with_w(right_anti_dual[e5] * anti_wedge[scalar]),
            // e1, e2, e3, e4
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group0(),
        );
    }
}
impl RejectOrthogonallyFrom<VersorEven> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       38        0
    //    simd3        4        8        0
    //    simd4       10       14        0
    // Totals...
    // yes simd       38       60        0
    //  no simd       76      118        0
    fn reject_orthogonally_from(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(self[e12345]) * other.group0(),
            // e415, e425, e435, e321
            ((Simd32x3::from(self[e12345]) * other.group1().xyz()) + (Simd32x3::from(other[e12345]) * self.group0().xyz())).with_w(self[e12345] * other[e321]),
            // e235, e315, e125, e5
            (Simd32x4::from(self[e12345]) * other.group2())
                + (Simd32x4::from(other[e12345]) * self.group1())
                + Simd32x3::from(0.0).with_w(
                    -(self[e415] * other[e235])
                        - (self[e425] * other[e315])
                        - (self[e435] * other[e125])
                        - (self[e235] * other[e415])
                        - (self[e315] * other[e425])
                        - (self[e125] * other[e435]),
                ),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e12345] * other[e1]) + (self[e315] * other[e412]),
                (self[e12345] * other[e2]) + (self[e125] * other[e423]),
                (self[e12345] * other[e3]) + (self[e235] * other[e431]),
                -(self[e425] * other[e431]) - (self[e435] * other[e412]),
            ]) + (self.group0() * other.group1().www().with_w(other[e4]))
                - (other.group0().yzxx() * self.group1().zxy().with_w(self[e415])),
        );
        let right_anti_dual = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e1234
            other.group2().xyz().with_w(other[e4]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            other.group3().xyz().with_w(other[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group0())
                + (anti_wedge.group3().wwwx() * right_anti_dual.group1().xyz().with_w(right_anti_dual[e4235]))
                + Simd32x3::from(0.0).with_w(
                    (anti_wedge[e2] * right_anti_dual[e4315]) + (anti_wedge[e3] * right_anti_dual[e4125]) + (anti_wedge[e4] * right_anti_dual[e3215])
                        - (anti_wedge[e431] * right_anti_dual[e25])
                        - (anti_wedge[e412] * right_anti_dual[e35])
                        - (anti_wedge[e415] * right_anti_dual[e23])
                        - (anti_wedge[e425] * right_anti_dual[e31])
                        - (anti_wedge[e435] * right_anti_dual[e12])
                        - (anti_wedge[e321] * right_anti_dual[e45])
                        - (anti_wedge[e235] * right_anti_dual[e41])
                        - (anti_wedge[e315] * right_anti_dual[e42])
                        - (anti_wedge[e125] * right_anti_dual[e43]),
                )
                + (anti_wedge.group3().zxy() * right_anti_dual.group0().yzx()).with_w(anti_wedge[e5] * right_anti_dual[e1234])
                - (anti_wedge.group3().yzx() * right_anti_dual.group0().zxy()).with_w(anti_wedge[e423] * right_anti_dual[e15]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (anti_wedge[e5] * right_anti_dual[e41]) + (anti_wedge[e4] * right_anti_dual[e15]),
                (anti_wedge[e5] * right_anti_dual[e42]) + (anti_wedge[e4] * right_anti_dual[e25]),
                (anti_wedge[e5] * right_anti_dual[e43]) + (anti_wedge[e4] * right_anti_dual[e35]),
                -(anti_wedge[e2] * right_anti_dual[e31]) - (anti_wedge[e3] * right_anti_dual[e12]),
            ]) + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1())
                - (anti_wedge.group3().xyzx() * right_anti_dual.group1().wwwx()),
            // e235, e315, e125, e5
            ((Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group1().xyz())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group2().xyz())
                + (anti_wedge.group3().yzx() * right_anti_dual.group2().zxy())
                - (anti_wedge.group3().zxy() * right_anti_dual.group2().yzx()))
            .with_w(anti_wedge[e5] * right_anti_dual[scalar]),
            // e1, e2, e3, e4
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group3(),
        );
    }
}
impl RejectOrthogonallyFrom<VersorOdd> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       22       37        0
    //    simd3        6       11        0
    //    simd4        9       12        0
    // Totals...
    // yes simd       37       60        0
    //  no simd       76      118        0
    fn reject_orthogonally_from(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (self.group0() * other.group2().www().with_w(other[scalar]))
                + Simd32x3::from(0.0).with_w(
                    -(self[e415] * other[e23])
                        - (self[e425] * other[e31])
                        - (self[e435] * other[e12])
                        - (self[e235] * other[e41])
                        - (self[e315] * other[e42])
                        - (self[e125] * other[e43]),
                )
                + (self.group0().www() * other.group0().xyz()).with_w(self[e5] * other[e1234]),
            // e23, e31, e12, e45
            Simd32x4::from([
                self[e235] * other[e1234],
                self[e315] * other[e1234],
                self[e125] * other[e1234],
                -(self[e415] * other[e4235]) - (self[e425] * other[e4315]) - (self[e435] * other[e4125]),
            ]) + (Simd32x4::from(self[e12345]) * other.group1()),
            // e15, e25, e35, e1234
            ((Simd32x3::from(self[e12345]) * other.group2().xyz()) + (Simd32x3::from(other[e3215]) * self.group0().xyz()) + (self.group1().yzx() * other.group3().zxy())
                - (self.group1().zxy() * other.group3().yzx()))
            .with_w(self[e12345] * other[e1234]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * other.group3(),
        );
        let right_anti_dual = VersorEven::from_groups(
            // e423, e431, e412, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            other.group2().xyz().with_w(other[e3215]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e4
            other.group3().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group0())
                + (right_anti_dual.group3().wwwx() * anti_wedge.group1().xyz().with_w(anti_wedge[e4235]))
                + Simd32x3::from(0.0).with_w(
                    (right_anti_dual[e2] * anti_wedge[e4315]) + (right_anti_dual[e3] * anti_wedge[e4125]) + (right_anti_dual[e4] * anti_wedge[e3215])
                        - (right_anti_dual[e431] * anti_wedge[e25])
                        - (right_anti_dual[e412] * anti_wedge[e35])
                        - (right_anti_dual[e415] * anti_wedge[e23])
                        - (right_anti_dual[e425] * anti_wedge[e31])
                        - (right_anti_dual[e435] * anti_wedge[e12])
                        - (right_anti_dual[e321] * anti_wedge[e45])
                        - (right_anti_dual[e235] * anti_wedge[e41])
                        - (right_anti_dual[e315] * anti_wedge[e42])
                        - (right_anti_dual[e125] * anti_wedge[e43]),
                )
                + (right_anti_dual.group3().zxy() * anti_wedge.group0().yzx()).with_w(right_anti_dual[e5] * anti_wedge[e1234])
                - (right_anti_dual.group3().yzx() * anti_wedge.group0().zxy()).with_w(right_anti_dual[e423] * anti_wedge[e15]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (right_anti_dual[e5] * anti_wedge[e41]) + (right_anti_dual[e4] * anti_wedge[e15]),
                (right_anti_dual[e5] * anti_wedge[e42]) + (right_anti_dual[e4] * anti_wedge[e25]),
                (right_anti_dual[e5] * anti_wedge[e43]) + (right_anti_dual[e4] * anti_wedge[e35]),
                -(right_anti_dual[e2] * anti_wedge[e31]) - (right_anti_dual[e3] * anti_wedge[e12]),
            ]) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1())
                - (right_anti_dual.group3().xyzx() * anti_wedge.group1().wwwx()),
            // e235, e315, e125, e5
            ((Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group1().xyz())
                + (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group2().xyz())
                + (right_anti_dual.group3().yzx() * anti_wedge.group2().zxy())
                - (right_anti_dual.group3().zxy() * anti_wedge.group2().yzx()))
            .with_w(right_anti_dual[e5] * anti_wedge[scalar]),
            // e1, e2, e3, e4
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group3(),
        );
    }
}
impl std::ops::Div<reject_orthogonally_from> for MultiVector {
    type Output = reject_orthogonally_from_partial<MultiVector>;
    fn div(self, _rhs: reject_orthogonally_from) -> Self::Output {
        reject_orthogonally_from_partial(self)
    }
}
impl RejectOrthogonallyFrom<AntiCircleRotor> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       34       46        0
    //    simd3        0        5        0
    //    simd4        4        8        0
    // Totals...
    // yes simd       38       59        0
    //  no simd       50       93        0
    fn reject_orthogonally_from(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (other[scalar] * self[e12345])
                    - (other[e41] * self[e235])
                    - (other[e42] * self[e315])
                    - (other[e43] * self[e125])
                    - (other[e23] * self[e415])
                    - (other[e31] * self[e425])
                    - (other[e12] * self[e435])
                    - (other[e45] * self[e321])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412]),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                -(other[e41] * self[e3215]) - (other[e31] * self[e4125]),
                -(other[e42] * self[e3215]) - (other[e12] * self[e4235]),
                -(other[e43] * self[e3215]) - (other[e23] * self[e4315]),
                (other[e43] * self[e4125]) + (other[e45] * self[e1234]),
            ]) + (Simd32x4::from([self[e1234], self[e1234], self[e1234], self[e4315]]) * other.group2().xyz().with_w(other[e42]))
                + (self.group9().yzxx() * other.group1().zxy().with_w(other[e41])),
            // e5
            -(other[e45] * self[e3215]) - (other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]),
            // e15, e25, e35, e45
            Simd32x4::from(self[e12345]) * other.group2().xyz().with_w(other[e45]),
            // e41, e42, e43
            Simd32x3::from(self[e12345]) * other.group0(),
            // e23, e31, e12
            Simd32x3::from(self[e12345]) * other.group1().xyz(),
            // e415, e425, e435, e321
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(0.0),
            // e1234
            0.0,
        );
        let right_anti_dual = CircleRotor::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e12345
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (right_anti_dual[e12345] * anti_wedge[scalar])
                    - (right_anti_dual[e423] * anti_wedge[e15])
                    - (right_anti_dual[e431] * anti_wedge[e25])
                    - (right_anti_dual[e412] * anti_wedge[e35])
                    - (right_anti_dual[e415] * anti_wedge[e23])
                    - (right_anti_dual[e425] * anti_wedge[e31])
                    - (right_anti_dual[e435] * anti_wedge[e12])
                    - (right_anti_dual[e321] * anti_wedge[e45])
                    - (right_anti_dual[e235] * anti_wedge[e41])
                    - (right_anti_dual[e315] * anti_wedge[e42])
                    - (right_anti_dual[e125] * anti_wedge[e43]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e15, e25, e35, e45
            Simd32x4::from(0.0),
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1(),
            // e423, e431, e412
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e235, e315, e125
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group2().xyz(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (right_anti_dual[e425] * anti_wedge[e3]) + (right_anti_dual[e235] * anti_wedge[e4]),
                (right_anti_dual[e435] * anti_wedge[e1]) + (right_anti_dual[e315] * anti_wedge[e4]),
                (right_anti_dual[e415] * anti_wedge[e2]) + (right_anti_dual[e125] * anti_wedge[e4]),
                -(right_anti_dual[e315] * anti_wedge[e2]) - (right_anti_dual[e125] * anti_wedge[e3]),
            ]) - (Simd32x4::from(anti_wedge[e5]) * right_anti_dual.group0().with_w(right_anti_dual[e321]))
                - (anti_wedge.group1().yzxx() * right_anti_dual.group1().zxy().with_w(right_anti_dual[e235])),
            // e1234
            (right_anti_dual[e423] * anti_wedge[e1])
                + (right_anti_dual[e431] * anti_wedge[e2])
                + (right_anti_dual[e412] * anti_wedge[e3])
                + (right_anti_dual[e321] * anti_wedge[e4]),
        );
    }
}
impl RejectOrthogonallyFrom<AntiDipoleInversion> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       72       95        0
    //    simd3        8       19        0
    //    simd4        8       10        0
    // Totals...
    // yes simd       88      124        0
    //  no simd      128      192        0
    fn reject_orthogonally_from(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (other[e4] * self[e3215]) + (other[e1] * self[e4235]) + (other[e2] * self[e4315]) + (other[e3] * self[e4125]) + (other[e5] * self[e1234])
                    - (other[e423] * self[e15])
                    - (other[e431] * self[e25])
                    - (other[e412] * self[e35])
                    - (other[e415] * self[e23])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12])
                    - (other[e321] * self[e45])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e415] * self[e321]) + (other[e321] * self[e415]) + (other[e315] * self[e412]),
                (other[e423] * self[e125]) + (other[e425] * self[e321]) + (other[e321] * self[e425]) + (other[e125] * self[e423]),
                (other[e431] * self[e235]) + (other[e435] * self[e321]) + (other[e321] * self[e435]) + (other[e235] * self[e431]),
                -(other[e412] * self[e435]) - (other[e415] * self[e423]) - (other[e425] * self[e431]) - (other[e435] * self[e412]),
            ]) + (Simd32x4::from(self[e12345]) * other.group3().xyz().with_w(other[e4]))
                - (other.group0().yzx() * self.group8().zxy()).with_w(other[e423] * self[e415])
                - (self.group7().yzx() * other.group2().zxy()).with_w(other[e431] * self[e425]),
            // e5
            (other[e5] * self[e12345])
                - (other[e415] * self[e235])
                - (other[e425] * self[e315])
                - (other[e435] * self[e125])
                - (other[e235] * self[e415])
                - (other[e315] * self[e425])
                - (other[e125] * self[e435]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e415] * self[e3215]) + (other[e315] * self[e4125]),
                (other[e425] * self[e3215]) + (other[e125] * self[e4235]),
                (other[e435] * self[e3215]) + (other[e235] * self[e4315]),
                -(other[e425] * self[e4315]) - (other[e435] * self[e4125]),
            ]) - (self.group9().yzxx() * other.group2().zxy().with_w(other[e415])),
            // e41, e42, e43
            (Simd32x3::from(self[e1234]) * other.group1().xyz()) + (other.group0().zxy() * self.group9().yzx()) - (other.group0().yzx() * self.group9().zxy()),
            // e23, e31, e12
            (Simd32x3::from(self[e3215]) * other.group0()) + (Simd32x3::from(self[e1234]) * other.group2().xyz()) - (Simd32x3::from(other[e321]) * self.group9().xyz()),
            // e415, e425, e435, e321
            Simd32x4::from(self[e12345]) * other.group1(),
            // e423, e431, e412
            Simd32x3::from(self[e12345]) * other.group0(),
            // e235, e315, e125
            Simd32x3::from(self[e12345]) * other.group2().xyz(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(0.0),
            // e1234
            0.0,
        );
        let right_anti_dual = DipoleInversion::from_groups(
            // e41, e42, e43
            other.group0(),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            other.group3() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (right_anti_dual[e1234] * anti_wedge[e5])
                    + (right_anti_dual[e4235] * anti_wedge[e1])
                    + (right_anti_dual[e4315] * anti_wedge[e2])
                    + (right_anti_dual[e4125] * anti_wedge[e3])
                    + (right_anti_dual[e3215] * anti_wedge[e4])
                    - (right_anti_dual[e41] * anti_wedge[e235])
                    - (right_anti_dual[e42] * anti_wedge[e315])
                    - (right_anti_dual[e43] * anti_wedge[e125])
                    - (right_anti_dual[e23] * anti_wedge[e415])
                    - (right_anti_dual[e31] * anti_wedge[e425])
                    - (right_anti_dual[e12] * anti_wedge[e435])
                    - (right_anti_dual[e45] * anti_wedge[e321])
                    - (right_anti_dual[e15] * anti_wedge[e423])
                    - (right_anti_dual[e25] * anti_wedge[e431])
                    - (right_anti_dual[e35] * anti_wedge[e412]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e15, e25, e35, e45
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group2().xyz().with_w(right_anti_dual[e45]),
            // e41, e42, e43
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e23, e31, e12
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group1().xyz(),
            // e415, e425, e435, e321
            Simd32x4::from([
                (right_anti_dual[e41] * anti_wedge[e5]) + (right_anti_dual[e15] * anti_wedge[e4]),
                (right_anti_dual[e42] * anti_wedge[e5]) + (right_anti_dual[e25] * anti_wedge[e4]),
                (right_anti_dual[e43] * anti_wedge[e5]) + (right_anti_dual[e35] * anti_wedge[e4]),
                -(right_anti_dual[e31] * anti_wedge[e2]) - (right_anti_dual[e12] * anti_wedge[e3]),
            ]) - (right_anti_dual.group1().wwwx() * anti_wedge.group1().xyzx()),
            // e423, e431, e412
            (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group1().xyz()) + (right_anti_dual.group0().yzx() * anti_wedge.group1().zxy())
                - (right_anti_dual.group0().zxy() * anti_wedge.group1().yzx()),
            // e235, e315, e125
            (Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group1().xyz()) + (right_anti_dual.group2().zxy() * anti_wedge.group1().yzx())
                - (right_anti_dual.group2().yzx() * anti_wedge.group1().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (right_anti_dual[e42] * anti_wedge[e35])
                    + (right_anti_dual[e23] * anti_wedge[e45])
                    + (right_anti_dual[e45] * anti_wedge[e23])
                    + (right_anti_dual[e35] * anti_wedge[e42]),
                (right_anti_dual[e43] * anti_wedge[e15])
                    + (right_anti_dual[e31] * anti_wedge[e45])
                    + (right_anti_dual[e45] * anti_wedge[e31])
                    + (right_anti_dual[e15] * anti_wedge[e43]),
                (right_anti_dual[e41] * anti_wedge[e25])
                    + (right_anti_dual[e12] * anti_wedge[e45])
                    + (right_anti_dual[e45] * anti_wedge[e12])
                    + (right_anti_dual[e25] * anti_wedge[e41]),
                -(right_anti_dual[e23] * anti_wedge[e15])
                    - (right_anti_dual[e31] * anti_wedge[e25])
                    - (right_anti_dual[e12] * anti_wedge[e35])
                    - (right_anti_dual[e35] * anti_wedge[e12]),
            ]) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group3())
                - (right_anti_dual.group2().yzxy() * anti_wedge.group4().zxy().with_w(anti_wedge[e31]))
                - (right_anti_dual.group0().zxy() * anti_wedge.group3().yzx()).with_w(right_anti_dual[e15] * anti_wedge[e23]),
            // e1234
            (right_anti_dual[e1234] * anti_wedge[scalar])
                - (right_anti_dual[e41] * anti_wedge[e23])
                - (right_anti_dual[e42] * anti_wedge[e31])
                - (right_anti_dual[e43] * anti_wedge[e12])
                - (right_anti_dual[e23] * anti_wedge[e41])
                - (right_anti_dual[e31] * anti_wedge[e42])
                - (right_anti_dual[e12] * anti_wedge[e43]),
        );
    }
}
impl RejectOrthogonallyFrom<AntiDualNum> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        8        0
    //    simd3        0        3        0
    //    simd4        0       11        0
    // Totals...
    // yes simd        2       22        0
    //  no simd        2       61        0
    fn reject_orthogonally_from(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([(other[e3215] * self[e4]) + (other[scalar] * self[e12345]), 0.0]),
            // e1, e2, e3, e4
            other.group0().xx().with_zw(other[e3215], 0.0) * Simd32x3::from(1.0).with_w(0.0) * self.group4().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
            // e5
            other[e3215] * self[e45],
            // e15, e25, e35, e45
            other.group0().xx().with_zw(other[e3215], 0.0) * Simd32x3::from(1.0).with_w(0.0) * self.group6().xyz().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(other[e3215]) * self.group7(),
            // e415, e425, e435, e321
            Simd32x3::from(0.0).with_w(other[e3215] * self[e1234]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(other[e3215]) * self.group9().xyz(),
            // e4235, e4315, e4125, e3215
            Simd32x3::from(0.0).with_w(other[e3215] * self[e12345]),
            // e1234
            0.0,
        );
        let right_anti_dual = DualNum::from_groups(/* e5, e12345 */ other.group0());
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([0.0, (right_anti_dual[e5] * anti_wedge[e1234]) + (right_anti_dual[e12345] * anti_wedge[scalar])]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            right_anti_dual[e5] * anti_wedge[scalar],
            // e15, e25, e35, e45
            Simd32x4::from(right_anti_dual[e5]) * anti_wedge.group1(),
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            right_anti_dual.group0().xx().with_zw(right_anti_dual[e5], 0.0)
                * Simd32x3::from(1.0).with_w(0.0)
                * anti_wedge.group4().with_w(0.0)
                * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group5(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(right_anti_dual[e5]) * anti_wedge.group7().with_w(anti_wedge[e321]),
            // e1234
            0.0,
        );
    }
}
impl RejectOrthogonallyFrom<AntiFlatPoint> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       20        0
    //    simd3        4       12        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       19       35        0
    //  no simd       36       68        0
    fn reject_orthogonally_from(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([-(other[e235] * self[e41]) - (other[e315] * self[e42]) - (other[e125] * self[e43]) - (other[e321] * self[e45]), 0.0]),
            // e1, e2, e3, e4
            (Simd32x3::from(other[e321]) * self.group6().xyz()).with_w(0.0) + (self.group7().zxy() * other.group0().yzx()).with_w(0.0)
                - (self.group7().yzx() * other.group0().zxy()).with_w(0.0),
            // e5
            -(other[e235] * self[e415]) - (other[e315] * self[e425]) - (other[e125] * self[e435]),
            // e15, e25, e35, e45
            ((other.group0().yzx() * self.group9().zxy()) - (other.group0().zxy() * self.group9().yzx())).with_w(0.0),
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12
            (Simd32x3::from(self[e1234]) * other.group0().xyz()) - (Simd32x3::from(other[e321]) * self.group9().xyz()),
            // e415, e425, e435, e321
            Simd32x3::from(0.0).with_w(other[e321] * self[e12345]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(self[e12345]) * other.group0().xyz(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(0.0),
            // e1234
            0.0,
        );
        let right_anti_dual = FlatPoint::from_groups(/* e15, e25, e35, e45 */ other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]));
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                -(right_anti_dual[e15] * anti_wedge[e423])
                    - (right_anti_dual[e25] * anti_wedge[e431])
                    - (right_anti_dual[e35] * anti_wedge[e412])
                    - (right_anti_dual[e45] * anti_wedge[e321]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e15, e25, e35, e45
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            ((Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group0().xyz()) - (Simd32x3::from(right_anti_dual[e45]) * anti_wedge.group1().xyz())).with_w(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            (right_anti_dual.group0().zxy() * anti_wedge.group1().yzx()) - (right_anti_dual.group0().yzx() * anti_wedge.group1().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (right_anti_dual[e35] * anti_wedge[e42]) + (right_anti_dual[e45] * anti_wedge[e23]),
                (right_anti_dual[e15] * anti_wedge[e43]) + (right_anti_dual[e45] * anti_wedge[e31]),
                (right_anti_dual[e25] * anti_wedge[e41]) + (right_anti_dual[e45] * anti_wedge[e12]),
                -(right_anti_dual[e25] * anti_wedge[e31]) - (right_anti_dual[e35] * anti_wedge[e12]),
            ]) - (right_anti_dual.group0().yzxx() * anti_wedge.group4().zxy().with_w(anti_wedge[e23])),
            // e1234
            0.0,
        );
    }
}
impl RejectOrthogonallyFrom<AntiFlector> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       21       29        0
    //    simd3        4       13        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       30       47        0
    //  no simd       53       88        0
    fn reject_orthogonally_from(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (other[e1] * self[e4235]) + (other[e2] * self[e4315]) + (other[e3] * self[e4125]) + (other[e5] * self[e1234])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43])
                    - (other[e321] * self[e45]),
                0.0,
            ]),
            // e1, e2, e3, e4
            (Simd32x3::from(other[e321]) * self.group6().xyz()).with_w(0.0)
                + (Simd32x3::from(self[e12345]) * other.group1().xyz()).with_w(0.0)
                + (self.group7().zxy() * other.group0().yzx()).with_w(0.0)
                - (self.group7().yzx() * other.group0().zxy()).with_w(0.0),
            // e5
            (other[e5] * self[e12345]) - (other[e235] * self[e415]) - (other[e315] * self[e425]) - (other[e125] * self[e435]),
            // e15, e25, e35, e45
            ((other.group0().yzx() * self.group9().zxy()) - (other.group0().zxy() * self.group9().yzx())).with_w(0.0),
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12
            (Simd32x3::from(self[e1234]) * other.group0().xyz()) - (Simd32x3::from(other[e321]) * self.group9().xyz()),
            // e415, e425, e435, e321
            Simd32x3::from(0.0).with_w(other[e321] * self[e12345]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(self[e12345]) * other.group0().xyz(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(0.0),
            // e1234
            0.0,
        );
        let right_anti_dual = Flector::from_groups(
            // e15, e25, e35, e45
            other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (right_anti_dual[e4235] * anti_wedge[e1])
                    + (right_anti_dual[e4315] * anti_wedge[e2])
                    + (right_anti_dual[e4125] * anti_wedge[e3])
                    + (right_anti_dual[e3215] * anti_wedge[e4])
                    - (right_anti_dual[e15] * anti_wedge[e423])
                    - (right_anti_dual[e25] * anti_wedge[e431])
                    - (right_anti_dual[e35] * anti_wedge[e412])
                    - (right_anti_dual[e45] * anti_wedge[e321]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e15, e25, e35, e45
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            ((Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group0().xyz()) - (Simd32x3::from(right_anti_dual[e45]) * anti_wedge.group1().xyz())).with_w(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            (right_anti_dual.group0().zxy() * anti_wedge.group1().yzx()) - (right_anti_dual.group0().yzx() * anti_wedge.group1().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (right_anti_dual[e35] * anti_wedge[e42]) + (right_anti_dual[e45] * anti_wedge[e23]),
                (right_anti_dual[e15] * anti_wedge[e43]) + (right_anti_dual[e45] * anti_wedge[e31]),
                (right_anti_dual[e25] * anti_wedge[e41]) + (right_anti_dual[e45] * anti_wedge[e12]),
                -(right_anti_dual[e25] * anti_wedge[e31]) - (right_anti_dual[e35] * anti_wedge[e12]),
            ]) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1())
                - (right_anti_dual.group0().yzxx() * anti_wedge.group4().zxy().with_w(anti_wedge[e23])),
            // e1234
            0.0,
        );
    }
}
impl RejectOrthogonallyFrom<AntiLine> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       23        0
    //    simd3        0        7        0
    //    simd4        3        7        0
    // Totals...
    // yes simd       19       37        0
    //  no simd       28       72        0
    fn reject_orthogonally_from(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                -(other[e23] * self[e415])
                    - (other[e31] * self[e425])
                    - (other[e12] * self[e435])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412]),
                0.0,
            ]),
            // e1, e2, e3, e4
            (Simd32x3::from(self[e1234]) * other.group1()).with_w(0.0) + (other.group0().zxy() * self.group9().yzx()).with_w(0.0)
                - (other.group0().yzx() * self.group9().zxy()).with_w(0.0),
            // e5
            -(other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]),
            // e15, e25, e35, e45
            self.group0().yy().with_zw(self[e12345], 0.0) * Simd32x3::from(1.0).with_w(0.0) * other.group1().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(self[e12345]) * other.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(0.0),
            // e1234
            0.0,
        );
        let right_anti_dual = Line::from_groups(
            // e415, e425, e435
            other.group0() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group1() * Simd32x3::from(-1.0),
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                -(right_anti_dual[e415] * anti_wedge[e23])
                    - (right_anti_dual[e425] * anti_wedge[e31])
                    - (right_anti_dual[e435] * anti_wedge[e12])
                    - (right_anti_dual[e235] * anti_wedge[e41])
                    - (right_anti_dual[e315] * anti_wedge[e42])
                    - (right_anti_dual[e125] * anti_wedge[e43]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e15, e25, e35, e45
            Simd32x4::from(0.0),
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            anti_wedge.group0().xx().with_zw(anti_wedge[scalar], 0.0)
                * Simd32x3::from(1.0).with_w(0.0)
                * right_anti_dual.group0().with_w(0.0)
                * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group1(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (right_anti_dual[e425] * anti_wedge[e3]) + (right_anti_dual[e235] * anti_wedge[e4]),
                (right_anti_dual[e435] * anti_wedge[e1]) + (right_anti_dual[e315] * anti_wedge[e4]),
                (right_anti_dual[e415] * anti_wedge[e2]) + (right_anti_dual[e125] * anti_wedge[e4]),
                -(right_anti_dual[e315] * anti_wedge[e2]) - (right_anti_dual[e125] * anti_wedge[e3]),
            ]) - (anti_wedge.group1().yzxx() * right_anti_dual.group0().zxy().with_w(right_anti_dual[e235])),
            // e1234
            0.0,
        );
    }
}
impl RejectOrthogonallyFrom<AntiMotor> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       21       32        0
    //    simd3        4       14        0
    //    simd4        5        4        0
    // Totals...
    // yes simd       30       50        0
    //  no simd       53       90        0
    fn reject_orthogonally_from(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (other[scalar] * self[e12345]) + (other[e3215] * self[e4])
                    - (other[e23] * self[e415])
                    - (other[e31] * self[e425])
                    - (other[e12] * self[e435])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412]),
                0.0,
            ]),
            // e1, e2, e3, e4
            (Simd32x3::from(other[e3215]) * self.group4()).with_w(0.0)
                + (Simd32x3::from(self[e1234]) * other.group1().xyz()).with_w(0.0)
                + (other.group0().zxy() * self.group9().yzx()).with_w(0.0)
                - (other.group0().yzx() * self.group9().zxy()).with_w(0.0),
            // e5
            (other[e3215] * self[e45]) - (other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]),
            // e15, e25, e35, e45
            ((Simd32x3::from(other[e3215]) * self.group6().xyz()) + (Simd32x3::from(self[e12345]) * other.group1().xyz())).with_w(0.0),
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12
            (Simd32x3::from(other[e3215]) * self.group7()) + (Simd32x3::from(self[e12345]) * other.group0().xyz()),
            // e415, e425, e435, e321
            Simd32x3::from(0.0).with_w(other[e3215] * self[e1234]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(other[e3215]) * self.group9().xyz(),
            // e4235, e4315, e4125, e3215
            Simd32x3::from(0.0).with_w(other[e3215] * self[e12345]),
            // e1234
            0.0,
        );
        let right_anti_dual = Motor::from_groups(
            // e415, e425, e435, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (right_anti_dual[e12345] * anti_wedge[scalar]) + (right_anti_dual[e5] * anti_wedge[e1234])
                    - (right_anti_dual[e415] * anti_wedge[e23])
                    - (right_anti_dual[e425] * anti_wedge[e31])
                    - (right_anti_dual[e435] * anti_wedge[e12])
                    - (right_anti_dual[e235] * anti_wedge[e41])
                    - (right_anti_dual[e315] * anti_wedge[e42])
                    - (right_anti_dual[e125] * anti_wedge[e43]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            right_anti_dual[e5] * anti_wedge[scalar],
            // e15, e25, e35, e45
            Simd32x4::from(right_anti_dual[e5]) * anti_wedge.group1(),
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            ((Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group4()) + (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0().xyz())).with_w(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            (Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group5()) + (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group1().xyz()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (right_anti_dual[e425] * anti_wedge[e3]) + (right_anti_dual[e235] * anti_wedge[e4]),
                (right_anti_dual[e435] * anti_wedge[e1]) + (right_anti_dual[e315] * anti_wedge[e4]),
                (right_anti_dual[e415] * anti_wedge[e2]) + (right_anti_dual[e125] * anti_wedge[e4]),
                -(right_anti_dual[e315] * anti_wedge[e2]) - (right_anti_dual[e125] * anti_wedge[e3]),
            ]) + (anti_wedge.group7() * right_anti_dual.group1().www()).with_w(right_anti_dual[e5] * anti_wedge[e321])
                - (anti_wedge.group1().yzxx() * right_anti_dual.group0().zxy().with_w(right_anti_dual[e235])),
            // e1234
            0.0,
        );
    }
}
impl RejectOrthogonallyFrom<AntiPlane> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6        9        0
    //    simd4        0        5        0
    // Totals...
    // yes simd        6       14        0
    //  no simd        6       29        0
    fn reject_orthogonally_from(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([(other[e1] * self[e4235]) + (other[e2] * self[e4315]) + (other[e3] * self[e4125]) + (other[e5] * self[e1234]), 0.0]),
            // e1, e2, e3, e4
            self.group0().yy().with_zw(self[e12345], 0.0) * Simd32x3::from(1.0).with_w(0.0) * other.group0().xyz().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
            // e5
            other[e5] * self[e12345],
            // e15, e25, e35, e45
            Simd32x4::from(0.0),
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(0.0),
            // e1234
            0.0,
        );
        let right_anti_dual = Plane::from_groups(/* e4235, e4315, e4125, e3215 */ other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]));
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (anti_wedge[e1] * right_anti_dual[e4235])
                    + (anti_wedge[e2] * right_anti_dual[e4315])
                    + (anti_wedge[e3] * right_anti_dual[e4125])
                    + (anti_wedge[e4] * right_anti_dual[e3215]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e15, e25, e35, e45
            Simd32x4::from(0.0),
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e1234
            0.0,
        );
    }
}
impl RejectOrthogonallyFrom<AntiScalar> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        5        0
    //    simd2        0        2        0
    //    simd3        0        8        0
    //    simd4        0        8        0
    // Totals...
    // yes simd        0       23        0
    //  no simd        0       65        0
    fn reject_orthogonally_from(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(other[e12345]) * self.group0(),
            // e1, e2, e3, e4
            Simd32x4::from(other[e12345]) * self.group1(),
            // e5
            other[e12345] * self[e5],
            // e15, e25, e35, e45
            Simd32x4::from(other[e12345]) * self.group3(),
            // e41, e42, e43
            Simd32x3::from(other[e12345]) * self.group4(),
            // e23, e31, e12
            Simd32x3::from(other[e12345]) * self.group5(),
            // e415, e425, e435, e321
            Simd32x4::from(other[e12345]) * self.group6(),
            // e423, e431, e412
            Simd32x3::from(other[e12345]) * self.group7(),
            // e235, e315, e125
            Simd32x3::from(other[e12345]) * self.group8(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e12345]) * self.group9(),
            // e1234
            other[e12345] * self[e1234],
        );
        let right_anti_dual = Scalar::from_groups(/* scalar */ other[e12345] * -1.0);
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(right_anti_dual[scalar]) * anti_wedge.group0(),
            // e1, e2, e3, e4
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1(),
            // e5
            anti_wedge[e5] * right_anti_dual[scalar],
            // e15, e25, e35, e45
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group3(),
            // e41, e42, e43
            Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group4(),
            // e23, e31, e12
            Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group5(),
            // e415, e425, e435, e321
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group6(),
            // e423, e431, e412
            Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group7(),
            // e235, e315, e125
            Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group8(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group9(),
            // e1234
            anti_wedge[e1234] * right_anti_dual[scalar],
        );
    }
}
impl RejectOrthogonallyFrom<Circle> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       60       84        0
    //    simd3        8       20        0
    //    simd4        6        5        0
    // Totals...
    // yes simd       74      109        0
    //  no simd      108      164        0
    fn reject_orthogonally_from(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                -(other[e423] * self[e15])
                    - (other[e431] * self[e25])
                    - (other[e412] * self[e35])
                    - (other[e415] * self[e23])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12])
                    - (other[e321] * self[e45])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e415] * self[e321]) + (other[e321] * self[e415]) + (other[e315] * self[e412]),
                (other[e423] * self[e125]) + (other[e425] * self[e321]) + (other[e321] * self[e425]) + (other[e125] * self[e423]),
                (other[e431] * self[e235]) + (other[e435] * self[e321]) + (other[e321] * self[e435]) + (other[e235] * self[e431]),
                -(other[e412] * self[e435]) - (other[e415] * self[e423]) - (other[e425] * self[e431]) - (other[e435] * self[e412]),
            ]) - (other.group0().yzx() * self.group8().zxy()).with_w(other[e423] * self[e415])
                - (other.group2().zxy() * self.group7().yzx()).with_w(other[e431] * self[e425]),
            // e5
            -(other[e415] * self[e235])
                - (other[e425] * self[e315])
                - (other[e435] * self[e125])
                - (other[e235] * self[e415])
                - (other[e315] * self[e425])
                - (other[e125] * self[e435]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e415] * self[e3215]) + (other[e315] * self[e4125]),
                (other[e425] * self[e3215]) + (other[e125] * self[e4235]),
                (other[e435] * self[e3215]) + (other[e235] * self[e4315]),
                -(other[e425] * self[e4315]) - (other[e435] * self[e4125]),
            ]) - (self.group9().yzxx() * other.group2().zxy().with_w(other[e415])),
            // e41, e42, e43
            (Simd32x3::from(self[e1234]) * other.group1().xyz()) + (other.group0().zxy() * self.group9().yzx()) - (other.group0().yzx() * self.group9().zxy()),
            // e23, e31, e12
            (Simd32x3::from(self[e3215]) * other.group0()) + (Simd32x3::from(self[e1234]) * other.group2()) - (Simd32x3::from(other[e321]) * self.group9().xyz()),
            // e415, e425, e435, e321
            Simd32x4::from(self[e12345]) * other.group1(),
            // e423, e431, e412
            Simd32x3::from(self[e12345]) * other.group0(),
            // e235, e315, e125
            Simd32x3::from(self[e12345]) * other.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(0.0),
            // e1234
            0.0,
        );
        let right_anti_dual = Dipole::from_groups(
            // e41, e42, e43
            other.group0(),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35
            other.group2(),
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                -(right_anti_dual[e41] * anti_wedge[e235])
                    - (right_anti_dual[e42] * anti_wedge[e315])
                    - (right_anti_dual[e43] * anti_wedge[e125])
                    - (right_anti_dual[e23] * anti_wedge[e415])
                    - (right_anti_dual[e31] * anti_wedge[e425])
                    - (right_anti_dual[e12] * anti_wedge[e435])
                    - (right_anti_dual[e45] * anti_wedge[e321])
                    - (right_anti_dual[e15] * anti_wedge[e423])
                    - (right_anti_dual[e25] * anti_wedge[e431])
                    - (right_anti_dual[e35] * anti_wedge[e412]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e15, e25, e35, e45
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group2().with_w(right_anti_dual[e45]),
            // e41, e42, e43
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e23, e31, e12
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group1().xyz(),
            // e415, e425, e435, e321
            Simd32x4::from([
                (right_anti_dual[e41] * anti_wedge[e5]) + (right_anti_dual[e15] * anti_wedge[e4]),
                (right_anti_dual[e42] * anti_wedge[e5]) + (right_anti_dual[e25] * anti_wedge[e4]),
                (right_anti_dual[e43] * anti_wedge[e5]) + (right_anti_dual[e35] * anti_wedge[e4]),
                -(right_anti_dual[e31] * anti_wedge[e2]) - (right_anti_dual[e12] * anti_wedge[e3]),
            ]) - (right_anti_dual.group1().wwwx() * anti_wedge.group1().xyzx()),
            // e423, e431, e412
            (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group1().xyz()) + (right_anti_dual.group0().yzx() * anti_wedge.group1().zxy())
                - (right_anti_dual.group0().zxy() * anti_wedge.group1().yzx()),
            // e235, e315, e125
            (Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group1().xyz()) + (right_anti_dual.group2().zxy() * anti_wedge.group1().yzx())
                - (right_anti_dual.group2().yzx() * anti_wedge.group1().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (right_anti_dual[e42] * anti_wedge[e35])
                    + (right_anti_dual[e23] * anti_wedge[e45])
                    + (right_anti_dual[e45] * anti_wedge[e23])
                    + (right_anti_dual[e35] * anti_wedge[e42]),
                (right_anti_dual[e43] * anti_wedge[e15])
                    + (right_anti_dual[e31] * anti_wedge[e45])
                    + (right_anti_dual[e45] * anti_wedge[e31])
                    + (right_anti_dual[e15] * anti_wedge[e43]),
                (right_anti_dual[e41] * anti_wedge[e25])
                    + (right_anti_dual[e12] * anti_wedge[e45])
                    + (right_anti_dual[e45] * anti_wedge[e12])
                    + (right_anti_dual[e25] * anti_wedge[e41]),
                -(right_anti_dual[e23] * anti_wedge[e15])
                    - (right_anti_dual[e31] * anti_wedge[e25])
                    - (right_anti_dual[e12] * anti_wedge[e35])
                    - (right_anti_dual[e35] * anti_wedge[e12]),
            ]) - (right_anti_dual.group0().zxy() * anti_wedge.group3().yzx()).with_w(right_anti_dual[e15] * anti_wedge[e23])
                - (right_anti_dual.group2().yzx() * anti_wedge.group4().zxy()).with_w(right_anti_dual[e25] * anti_wedge[e31]),
            // e1234
            -(right_anti_dual[e41] * anti_wedge[e23])
                - (right_anti_dual[e42] * anti_wedge[e31])
                - (right_anti_dual[e43] * anti_wedge[e12])
                - (right_anti_dual[e23] * anti_wedge[e41])
                - (right_anti_dual[e31] * anti_wedge[e42])
                - (right_anti_dual[e12] * anti_wedge[e43]),
        );
    }
}
impl RejectOrthogonallyFrom<CircleRotor> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64       94        0
    //    simd3       16       30        0
    //    simd4       12       12        0
    // Totals...
    // yes simd       92      136        0
    //  no simd      160      232        0
    fn reject_orthogonally_from(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (other[e12345] * self[scalar])
                    - (other[e423] * self[e15])
                    - (other[e431] * self[e25])
                    - (other[e412] * self[e35])
                    - (other[e415] * self[e23])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12])
                    - (other[e321] * self[e45])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
                other[e12345] * self[e12345],
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e415] * self[e321]) + (other[e321] * self[e415]) + (other[e315] * self[e412]) + (other[e12345] * self[e1]),
                (other[e425] * self[e321]) + (other[e321] * self[e425]) + (other[e125] * self[e423]) + (other[e12345] * self[e2]),
                (other[e435] * self[e321]) + (other[e321] * self[e435]) + (other[e235] * self[e431]) + (other[e12345] * self[e3]),
                -(other[e412] * self[e435]) - (other[e415] * self[e423]) - (other[e425] * self[e431]) - (other[e435] * self[e412]),
            ]) + (other.group0().zxy() * self.group8().yzx()).with_w(other[e12345] * self[e4])
                - (other.group0().yzx() * self.group8().zxy()).with_w(other[e423] * self[e415])
                - (self.group7().yzx() * other.group2().zxy()).with_w(other[e431] * self[e425]),
            // e5
            (other[e12345] * self[e5])
                - (other[e415] * self[e235])
                - (other[e425] * self[e315])
                - (other[e435] * self[e125])
                - (other[e235] * self[e415])
                - (other[e315] * self[e425])
                - (other[e125] * self[e435]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e315] * self[e4125]) + (other[e12345] * self[e15]),
                (other[e125] * self[e4235]) + (other[e12345] * self[e25]),
                (other[e235] * self[e4315]) + (other[e12345] * self[e35]),
                -(other[e425] * self[e4315]) - (other[e435] * self[e4125]),
            ]) + (self.group9().www() * other.group1().xyz()).with_w(other[e12345] * self[e45])
                - (self.group9().yzxx() * other.group2().zxy().with_w(other[e415])),
            // e41, e42, e43
            (Simd32x3::from(other[e12345]) * self.group4()) + (Simd32x3::from(self[e1234]) * other.group1().xyz()) + (other.group0().zxy() * self.group9().yzx())
                - (other.group0().yzx() * self.group9().zxy()),
            // e23, e31, e12
            (Simd32x3::from(other[e12345]) * self.group5()) + (Simd32x3::from(self[e3215]) * other.group0()) + (Simd32x3::from(self[e1234]) * other.group2().xyz())
                - (Simd32x3::from(other[e321]) * self.group9().xyz()),
            // e415, e425, e435, e321
            (Simd32x4::from(other[e12345]) * self.group6()) + (Simd32x4::from(self[e12345]) * other.group1()),
            // e423, e431, e412
            (Simd32x3::from(other[e12345]) * self.group7()) + (Simd32x3::from(self[e12345]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(other[e12345]) * self.group8()) + (Simd32x3::from(self[e12345]) * other.group2().xyz()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e12345]) * self.group9(),
            // e1234
            other[e12345] * self[e1234],
        );
        let right_anti_dual = AntiCircleRotor::from_groups(
            // e41, e42, e43
            other.group0(),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, scalar
            other.group2() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                right_anti_dual[scalar] * anti_wedge[scalar],
                (right_anti_dual[scalar] * anti_wedge[e12345])
                    - (right_anti_dual[e41] * anti_wedge[e235])
                    - (right_anti_dual[e42] * anti_wedge[e315])
                    - (right_anti_dual[e43] * anti_wedge[e125])
                    - (right_anti_dual[e23] * anti_wedge[e415])
                    - (right_anti_dual[e31] * anti_wedge[e425])
                    - (right_anti_dual[e12] * anti_wedge[e435])
                    - (right_anti_dual[e45] * anti_wedge[e321])
                    - (right_anti_dual[e15] * anti_wedge[e423])
                    - (right_anti_dual[e25] * anti_wedge[e431])
                    - (right_anti_dual[e35] * anti_wedge[e412]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1(),
            // e5
            right_anti_dual[scalar] * anti_wedge[e5],
            // e15, e25, e35, e45
            (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group3()) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group2().xyz().with_w(right_anti_dual[e45])),
            // e41, e42, e43
            (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group4()) + (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0()),
            // e23, e31, e12
            (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group5()) + (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group1().xyz()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (right_anti_dual[e15] * anti_wedge[e4]) + (right_anti_dual[scalar] * anti_wedge[e415]),
                (right_anti_dual[e25] * anti_wedge[e4]) + (right_anti_dual[scalar] * anti_wedge[e425]),
                (right_anti_dual[e35] * anti_wedge[e4]) + (right_anti_dual[scalar] * anti_wedge[e435]),
                -(right_anti_dual[e31] * anti_wedge[e2]) - (right_anti_dual[e12] * anti_wedge[e3]),
            ]) + (Simd32x4::from([anti_wedge[e5], anti_wedge[e5], anti_wedge[e5], anti_wedge[e321]]) * right_anti_dual.group0().with_w(right_anti_dual[scalar]))
                - (right_anti_dual.group1().wwwx() * anti_wedge.group1().xyzx()),
            // e423, e431, e412
            (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group7())
                + (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group1().xyz())
                + (right_anti_dual.group0().yzx() * anti_wedge.group1().zxy())
                - (right_anti_dual.group0().zxy() * anti_wedge.group1().yzx()),
            // e235, e315, e125
            (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group8())
                + (Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group1().xyz())
                + (right_anti_dual.group2().zxy() * anti_wedge.group1().yzx())
                - (right_anti_dual.group2().yzx() * anti_wedge.group1().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (right_anti_dual[e23] * anti_wedge[e45])
                    + (right_anti_dual[e45] * anti_wedge[e23])
                    + (right_anti_dual[e35] * anti_wedge[e42])
                    + (right_anti_dual[scalar] * anti_wedge[e4235]),
                (right_anti_dual[e31] * anti_wedge[e45])
                    + (right_anti_dual[e45] * anti_wedge[e31])
                    + (right_anti_dual[e15] * anti_wedge[e43])
                    + (right_anti_dual[scalar] * anti_wedge[e4315]),
                (right_anti_dual[e12] * anti_wedge[e45])
                    + (right_anti_dual[e45] * anti_wedge[e12])
                    + (right_anti_dual[e25] * anti_wedge[e41])
                    + (right_anti_dual[scalar] * anti_wedge[e4125]),
                -(right_anti_dual[e23] * anti_wedge[e15])
                    - (right_anti_dual[e31] * anti_wedge[e25])
                    - (right_anti_dual[e12] * anti_wedge[e35])
                    - (right_anti_dual[e35] * anti_wedge[e12]),
            ]) + (right_anti_dual.group0().yzx() * anti_wedge.group3().zxy()).with_w(right_anti_dual[scalar] * anti_wedge[e3215])
                - (right_anti_dual.group2().yzxy() * anti_wedge.group4().zxy().with_w(anti_wedge[e31]))
                - (right_anti_dual.group0().zxy() * anti_wedge.group3().yzx()).with_w(right_anti_dual[e15] * anti_wedge[e23]),
            // e1234
            (right_anti_dual[scalar] * anti_wedge[e1234])
                - (right_anti_dual[e41] * anti_wedge[e23])
                - (right_anti_dual[e42] * anti_wedge[e31])
                - (right_anti_dual[e43] * anti_wedge[e12])
                - (right_anti_dual[e23] * anti_wedge[e41])
                - (right_anti_dual[e31] * anti_wedge[e42])
                - (right_anti_dual[e12] * anti_wedge[e43]),
        );
    }
}
impl RejectOrthogonallyFrom<Dipole> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       44        0
    //    simd3        0        6        0
    //    simd4        4        7        0
    // Totals...
    // yes simd       36       57        0
    //  no simd       48       90        0
    fn reject_orthogonally_from(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                -(other[e41] * self[e235])
                    - (other[e42] * self[e315])
                    - (other[e43] * self[e125])
                    - (other[e23] * self[e415])
                    - (other[e31] * self[e425])
                    - (other[e12] * self[e435])
                    - (other[e45] * self[e321])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412]),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                -(other[e41] * self[e3215]) - (other[e31] * self[e4125]),
                -(other[e42] * self[e3215]) - (other[e12] * self[e4235]),
                -(other[e43] * self[e3215]) - (other[e23] * self[e4315]),
                (other[e43] * self[e4125]) + (other[e45] * self[e1234]),
            ]) + (Simd32x4::from([self[e1234], self[e1234], self[e1234], self[e4235]]) * other.group2().with_w(other[e41]))
                + (self.group9().yzxy() * other.group1().zxy().with_w(other[e42])),
            // e5
            -(other[e45] * self[e3215]) - (other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]),
            // e15, e25, e35, e45
            Simd32x4::from(self[e12345]) * other.group2().with_w(other[e45]),
            // e41, e42, e43
            Simd32x3::from(self[e12345]) * other.group0(),
            // e23, e31, e12
            Simd32x3::from(self[e12345]) * other.group1().xyz(),
            // e415, e425, e435, e321
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(0.0),
            // e1234
            0.0,
        );
        let right_anti_dual = Circle::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125
            other.group2() * Simd32x3::from(-1.0),
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                -(right_anti_dual[e423] * anti_wedge[e15])
                    - (right_anti_dual[e431] * anti_wedge[e25])
                    - (right_anti_dual[e412] * anti_wedge[e35])
                    - (right_anti_dual[e415] * anti_wedge[e23])
                    - (right_anti_dual[e425] * anti_wedge[e31])
                    - (right_anti_dual[e435] * anti_wedge[e12])
                    - (right_anti_dual[e321] * anti_wedge[e45])
                    - (right_anti_dual[e235] * anti_wedge[e41])
                    - (right_anti_dual[e315] * anti_wedge[e42])
                    - (right_anti_dual[e125] * anti_wedge[e43]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e15, e25, e35, e45
            Simd32x4::from(0.0),
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1(),
            // e423, e431, e412
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e235, e315, e125
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (right_anti_dual[e425] * anti_wedge[e3]) + (right_anti_dual[e235] * anti_wedge[e4]),
                (right_anti_dual[e435] * anti_wedge[e1]) + (right_anti_dual[e315] * anti_wedge[e4]),
                (right_anti_dual[e415] * anti_wedge[e2]) + (right_anti_dual[e125] * anti_wedge[e4]),
                -(right_anti_dual[e321] * anti_wedge[e5]) - (right_anti_dual[e125] * anti_wedge[e3]),
            ]) - (Simd32x4::from([anti_wedge[e5], anti_wedge[e5], anti_wedge[e5], anti_wedge[e1]]) * right_anti_dual.group0().with_w(right_anti_dual[e235]))
                - (anti_wedge.group1().yzxy() * right_anti_dual.group1().zxy().with_w(right_anti_dual[e315])),
            // e1234
            (right_anti_dual[e423] * anti_wedge[e1])
                + (right_anti_dual[e431] * anti_wedge[e2])
                + (right_anti_dual[e412] * anti_wedge[e3])
                + (right_anti_dual[e321] * anti_wedge[e4]),
        );
    }
}
impl RejectOrthogonallyFrom<DipoleInversion> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       50       74        0
    //    simd3       16       35        0
    //    simd4       20       19        0
    // Totals...
    // yes simd       86      128        0
    //  no simd      178      255        0
    fn reject_orthogonally_from(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (other[e1234] * self[e5]) + (other[e4235] * self[e1]) + (other[e4315] * self[e2]) + (other[e4125] * self[e3]) + (other[e3215] * self[e4])
                    - (other[e41] * self[e235])
                    - (other[e42] * self[e315])
                    - (other[e43] * self[e125])
                    - (other[e23] * self[e415])
                    - (other[e31] * self[e425])
                    - (other[e12] * self[e435])
                    - (other[e45] * self[e321])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412]),
                0.0,
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(self[e1234]) * other.group2().xyz().with_w(other[e45]))
                + (self.group9().yzxz() * other.group1().zxy().with_w(other[e43]))
                + (self.group4() * other.group3().www()).with_w(other[e41] * self[e4235])
                + (self.group5().yzx() * other.group3().zxy()).with_w(other[e42] * self[e4315])
                - (Simd32x4::from(other[e1234]) * self.group3())
                - (other.group3().yzxy() * self.group5().zxy().with_w(self[e42]))
                - (other.group0() * self.group9().www()).with_w(other[e4235] * self[e41])
                - (other.group1().yzx() * self.group9().zxy()).with_w(other[e4125] * self[e43]),
            // e5
            (other[e4235] * self[e15]) + (other[e4315] * self[e25]) + (other[e4125] * self[e35]) + (other[e3215] * self[e45])
                - (other[e45] * self[e3215])
                - (other[e15] * self[e4235])
                - (other[e25] * self[e4315])
                - (other[e35] * self[e4125]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e4125] * self[e315]) + (other[e3215] * self[e415]),
                (other[e4235] * self[e125]) + (other[e3215] * self[e425]),
                (other[e4315] * self[e235]) + (other[e3215] * self[e435]),
                -(other[e4315] * self[e425]) - (other[e4125] * self[e435]),
            ]) + (Simd32x4::from(self[e12345]) * other.group2().xyz().with_w(other[e45]))
                - (self.group8().zxy() * other.group3().yzx()).with_w(other[e4235] * self[e415]),
            // e41, e42, e43
            (Simd32x3::from(other[e1234]) * self.group6().xyz()) + (Simd32x3::from(self[e12345]) * other.group0()) + (self.group7().zxy() * other.group3().yzx())
                - (self.group7().yzx() * other.group3().zxy()),
            // e23, e31, e12
            (Simd32x3::from(other[e1234]) * self.group8()) + (Simd32x3::from(other[e3215]) * self.group7()) + (Simd32x3::from(self[e12345]) * other.group1().xyz())
                - (Simd32x3::from(self[e321]) * other.group3().xyz()),
            // e415, e425, e435, e321
            (other.group3().yzxw() * self.group9().zxy().with_w(self[e1234])) - (self.group9().yzxw() * other.group3().zxy().with_w(other[e1234])),
            // e423, e431, e412
            (Simd32x3::from(self[e1234]) * other.group3().xyz()) - (Simd32x3::from(other[e1234]) * self.group9().xyz()),
            // e235, e315, e125
            (Simd32x3::from(other[e3215]) * self.group9().xyz()) - (Simd32x3::from(self[e3215]) * other.group3().xyz()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * other.group3(),
            // e1234
            other[e1234] * self[e12345],
        );
        let right_anti_dual = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e4
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group3() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (right_anti_dual[e4] * anti_wedge[e3215])
                    + (right_anti_dual[e1] * anti_wedge[e4235])
                    + (right_anti_dual[e2] * anti_wedge[e4315])
                    + (right_anti_dual[e3] * anti_wedge[e4125])
                    + (right_anti_dual[e5] * anti_wedge[e1234])
                    - (right_anti_dual[e423] * anti_wedge[e15])
                    - (right_anti_dual[e431] * anti_wedge[e25])
                    - (right_anti_dual[e412] * anti_wedge[e35])
                    - (right_anti_dual[e415] * anti_wedge[e23])
                    - (right_anti_dual[e425] * anti_wedge[e31])
                    - (right_anti_dual[e435] * anti_wedge[e12])
                    - (right_anti_dual[e321] * anti_wedge[e45])
                    - (right_anti_dual[e235] * anti_wedge[e41])
                    - (right_anti_dual[e315] * anti_wedge[e42])
                    - (right_anti_dual[e125] * anti_wedge[e43]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group3().xyz().with_w(right_anti_dual[e4]),
            // e5
            right_anti_dual[e5] * anti_wedge[scalar],
            // e15, e25, e35, e45
            (Simd32x4::from(right_anti_dual[e5]) * anti_wedge.group1()) - (Simd32x4::from(anti_wedge[e5]) * right_anti_dual.group3().xyz().with_w(right_anti_dual[e4])),
            // e41, e42, e43
            (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group3().xyz()) - (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group1().xyz()),
            // e23, e31, e12
            (right_anti_dual.group3().zxy() * anti_wedge.group1().yzx()) - (right_anti_dual.group3().yzx() * anti_wedge.group1().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (right_anti_dual[e4] * anti_wedge[e15]) + (right_anti_dual[e5] * anti_wedge[e41]),
                (right_anti_dual[e4] * anti_wedge[e25]) + (right_anti_dual[e5] * anti_wedge[e42]),
                (right_anti_dual[e4] * anti_wedge[e35]) + (right_anti_dual[e5] * anti_wedge[e43]),
                -(right_anti_dual[e2] * anti_wedge[e31]) - (right_anti_dual[e3] * anti_wedge[e12]),
            ]) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1())
                - (anti_wedge.group3().www() * right_anti_dual.group3().xyz()).with_w(right_anti_dual[e1] * anti_wedge[e23]),
            // e423, e431, e412
            (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group5())
                + (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0())
                + (anti_wedge.group4().yzx() * right_anti_dual.group3().zxy())
                - (anti_wedge.group4().zxy() * right_anti_dual.group3().yzx()),
            // e235, e315, e125
            (Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group5())
                + (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group2().xyz())
                + (right_anti_dual.group3().yzx() * anti_wedge.group3().zxy())
                - (right_anti_dual.group3().zxy() * anti_wedge.group3().yzx()),
            // e4235, e4315, e4125, e3215
            (right_anti_dual.group3().yzxw() * anti_wedge.group6().zxyw())
                + (right_anti_dual.group3().wwwx() * anti_wedge.group7().with_w(anti_wedge[e235]))
                + (right_anti_dual.group1().yzx() * anti_wedge.group1().zxy()).with_w(right_anti_dual[e2] * anti_wedge[e315])
                + (anti_wedge.group1().www() * right_anti_dual.group2().xyz()).with_w(right_anti_dual[e3] * anti_wedge[e125])
                - (Simd32x4::from(anti_wedge[e5]) * right_anti_dual.group0().with_w(right_anti_dual[e321]))
                - (anti_wedge.group1().yzxy() * right_anti_dual.group1().zxy().with_w(right_anti_dual[e315]))
                - (anti_wedge.group8() * right_anti_dual.group2().www()).with_w(right_anti_dual[e235] * anti_wedge[e1])
                - (right_anti_dual.group3().zxy() * anti_wedge.group6().yzx()).with_w(right_anti_dual[e125] * anti_wedge[e3]),
            // e1234
            (right_anti_dual[e423] * anti_wedge[e1])
                + (right_anti_dual[e431] * anti_wedge[e2])
                + (right_anti_dual[e412] * anti_wedge[e3])
                + (right_anti_dual[e321] * anti_wedge[e4])
                - (right_anti_dual[e4] * anti_wedge[e321])
                - (right_anti_dual[e1] * anti_wedge[e423])
                - (right_anti_dual[e2] * anti_wedge[e431])
                - (right_anti_dual[e3] * anti_wedge[e412]),
        );
    }
}
impl RejectOrthogonallyFrom<DualNum> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       13        0
    //    simd2        0        1        0
    //    simd3        0        8        0
    //    simd4        0        8        0
    // Totals...
    // yes simd        4       30        0
    //  no simd        4       71        0
    fn reject_orthogonally_from(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([(other[e5] * self[e1234]) + (other[e12345] * self[scalar]), other[e12345] * self[e12345]]),
            // e1, e2, e3, e4
            Simd32x4::from(other[e12345]) * self.group1(),
            // e5
            (other[e5] * self[e12345]) + (other[e12345] * self[e5]),
            // e15, e25, e35, e45
            Simd32x4::from(other[e12345]) * self.group3(),
            // e41, e42, e43
            Simd32x3::from(other[e12345]) * self.group4(),
            // e23, e31, e12
            Simd32x3::from(other[e12345]) * self.group5(),
            // e415, e425, e435, e321
            Simd32x4::from(other[e12345]) * self.group6(),
            // e423, e431, e412
            Simd32x3::from(other[e12345]) * self.group7(),
            // e235, e315, e125
            Simd32x3::from(other[e12345]) * self.group8(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e12345]) * self.group9(),
            // e1234
            other[e12345] * self[e1234],
        );
        let right_anti_dual = AntiDualNum::from_groups(/* e3215, scalar */ other.group0() * Simd32x2::from(-1.0));
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                right_anti_dual[scalar] * anti_wedge[scalar],
                (right_anti_dual[e3215] * anti_wedge[e4]) + (right_anti_dual[scalar] * anti_wedge[e12345]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1(),
            // e5
            right_anti_dual[scalar] * anti_wedge[e5],
            // e15, e25, e35, e45
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group3(),
            // e41, e42, e43
            Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group4(),
            // e23, e31, e12
            Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group5(),
            // e415, e425, e435, e321
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group6(),
            // e423, e431, e412
            Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group7(),
            // e235, e315, e125
            Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group8(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([anti_wedge[e4235], anti_wedge[e4315], anti_wedge[e4125], 1.0])
                * right_anti_dual
                    .group0()
                    .yy()
                    .with_zw(right_anti_dual[scalar], (right_anti_dual[e3215] * anti_wedge[scalar]) + (right_anti_dual[scalar] * anti_wedge[e3215])),
            // e1234
            right_anti_dual[scalar] * anti_wedge[e1234],
        );
    }
}
impl RejectOrthogonallyFrom<FlatPoint> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       18        0
    //    simd3        0        1        0
    //    simd4        0        4        0
    // Totals...
    // yes simd       12       23        0
    //  no simd       12       37        0
    fn reject_orthogonally_from(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([-(other[e15] * self[e423]) - (other[e25] * self[e431]) - (other[e35] * self[e412]) - (other[e45] * self[e321]), 0.0]),
            // e1, e2, e3, e4
            Simd32x4::from(self[e1234]) * other.group0(),
            // e5
            -(other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]) - (other[e45] * self[e3215]),
            // e15, e25, e35, e45
            Simd32x4::from(self[e12345]) * other.group0(),
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(0.0),
            // e1234
            0.0,
        );
        let right_anti_dual = AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]));
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                -(right_anti_dual[e235] * anti_wedge[e41])
                    - (right_anti_dual[e315] * anti_wedge[e42])
                    - (right_anti_dual[e125] * anti_wedge[e43])
                    - (right_anti_dual[e321] * anti_wedge[e45]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e15, e25, e35, e45
            Simd32x4::from(0.0),
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x3::from(0.0).with_w(right_anti_dual[e321] * anti_wedge[scalar]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0().xyz(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([anti_wedge[e4], anti_wedge[e4], anti_wedge[e4], 1.0])
                * right_anti_dual.group0().xyz().with_w(
                    -(right_anti_dual[e235] * anti_wedge[e1])
                        - (right_anti_dual[e315] * anti_wedge[e2])
                        - (right_anti_dual[e125] * anti_wedge[e3])
                        - (right_anti_dual[e321] * anti_wedge[e5]),
                ),
            // e1234
            right_anti_dual[e321] * anti_wedge[e4],
        );
    }
}
impl RejectOrthogonallyFrom<Flector> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       60        0
    //    simd3       10       27        0
    //    simd4       10        9        0
    // Totals...
    // yes simd       56       96        0
    //  no simd      106      177        0
    fn reject_orthogonally_from(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (other[e4235] * self[e1]) + (other[e4315] * self[e2]) + (other[e4125] * self[e3]) + (other[e3215] * self[e4])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412])
                    - (other[e45] * self[e321]),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e15] * self[e1234]) + (other[e4125] * self[e31]),
                (other[e25] * self[e1234]) + (other[e4235] * self[e12]),
                (other[e35] * self[e1234]) + (other[e4315] * self[e23]),
                -(other[e4315] * self[e42]) - (other[e4125] * self[e43]),
            ]) + (self.group4() * other.group1().www()).with_w(other[e45] * self[e1234])
                - (other.group1().yzxx() * self.group5().zxy().with_w(self[e41])),
            // e5
            (other[e4235] * self[e15]) + (other[e4315] * self[e25]) + (other[e4125] * self[e35]) + (other[e3215] * self[e45])
                - (other[e15] * self[e4235])
                - (other[e25] * self[e4315])
                - (other[e35] * self[e4125])
                - (other[e45] * self[e3215]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e4125] * self[e315]) + (other[e3215] * self[e415]),
                (other[e4235] * self[e125]) + (other[e3215] * self[e425]),
                (other[e4315] * self[e235]) + (other[e3215] * self[e435]),
                -(other[e4315] * self[e425]) - (other[e4125] * self[e435]),
            ]) + (Simd32x4::from(self[e12345]) * other.group0())
                - (self.group8().zxy() * other.group1().yzx()).with_w(other[e4235] * self[e415]),
            // e41, e42, e43
            (self.group7().zxy() * other.group1().yzx()) - (self.group7().yzx() * other.group1().zxy()),
            // e23, e31, e12
            (Simd32x3::from(other[e3215]) * self.group7()) - (Simd32x3::from(self[e321]) * other.group1().xyz()),
            // e415, e425, e435, e321
            ((other.group1().yzx() * self.group9().zxy()) - (other.group1().zxy() * self.group9().yzx())).with_w(other[e3215] * self[e1234]),
            // e423, e431, e412
            Simd32x3::from(self[e1234]) * other.group1().xyz(),
            // e235, e315, e125
            (Simd32x3::from(other[e3215]) * self.group9().xyz()) - (Simd32x3::from(self[e3215]) * other.group1().xyz()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * other.group1(),
            // e1234
            0.0,
        );
        let right_anti_dual = AntiFlector::from_groups(
            // e235, e315, e125, e321
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (right_anti_dual[e1] * anti_wedge[e4235])
                    + (right_anti_dual[e2] * anti_wedge[e4315])
                    + (right_anti_dual[e3] * anti_wedge[e4125])
                    + (right_anti_dual[e5] * anti_wedge[e1234])
                    - (right_anti_dual[e235] * anti_wedge[e41])
                    - (right_anti_dual[e315] * anti_wedge[e42])
                    - (right_anti_dual[e125] * anti_wedge[e43])
                    - (right_anti_dual[e321] * anti_wedge[e45]),
            ]),
            // e1, e2, e3, e4
            anti_wedge.group0().xx().with_zw(anti_wedge[scalar], 0.0)
                * Simd32x3::from(1.0).with_w(0.0)
                * right_anti_dual.group1().xyz().with_w(0.0)
                * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
            // e5
            right_anti_dual[e5] * anti_wedge[scalar],
            // e15, e25, e35, e45
            ((Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group1().xyz()) - (Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group1().xyz()))
                .with_w(right_anti_dual[e5] * anti_wedge[e4]),
            // e41, e42, e43
            Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group1().xyz(),
            // e23, e31, e12
            (right_anti_dual.group1().zxy() * anti_wedge.group1().yzx()) - (right_anti_dual.group1().yzx() * anti_wedge.group1().zxy()),
            // e415, e425, e435, e321
            Simd32x3::from(0.0).with_w(-(right_anti_dual[e2] * anti_wedge[e31]) - (right_anti_dual[e3] * anti_wedge[e12]))
                + (anti_wedge.group4() * right_anti_dual.group1().www()).with_w(right_anti_dual[e321] * anti_wedge[scalar])
                - (anti_wedge.group3().www() * right_anti_dual.group1().xyz()).with_w(right_anti_dual[e1] * anti_wedge[e23]),
            // e423, e431, e412
            (anti_wedge.group4().yzx() * right_anti_dual.group1().zxy()) - (anti_wedge.group4().zxy() * right_anti_dual.group1().yzx()),
            // e235, e315, e125
            (Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group5())
                + (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0().xyz())
                + (right_anti_dual.group1().yzx() * anti_wedge.group3().zxy())
                - (right_anti_dual.group1().zxy() * anti_wedge.group3().yzx()),
            // e4235, e4315, e4125, e3215
            (right_anti_dual.group1().wwwx() * anti_wedge.group7().with_w(anti_wedge[e235]))
                + Simd32x3::from(0.0).with_w(
                    (right_anti_dual[e5] * anti_wedge[e321])
                        - (right_anti_dual[e315] * anti_wedge[e2])
                        - (right_anti_dual[e125] * anti_wedge[e3])
                        - (right_anti_dual[e321] * anti_wedge[e5]),
                )
                + (right_anti_dual.group1().yzx() * anti_wedge.group6().zxy()).with_w(right_anti_dual[e3] * anti_wedge[e125])
                + (anti_wedge.group1().www() * right_anti_dual.group0().xyz()).with_w(right_anti_dual[e2] * anti_wedge[e315])
                - (right_anti_dual.group1().zxy() * anti_wedge.group6().yzx()).with_w(right_anti_dual[e235] * anti_wedge[e1]),
            // e1234
            (right_anti_dual[e321] * anti_wedge[e4])
                - (right_anti_dual[e1] * anti_wedge[e423])
                - (right_anti_dual[e2] * anti_wedge[e431])
                - (right_anti_dual[e3] * anti_wedge[e412]),
        );
    }
}
impl RejectOrthogonallyFrom<Line> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       34       53        0
    //    simd3        2       10        0
    //    simd4        3        8        0
    // Totals...
    // yes simd       39       71        0
    //  no simd       52      115        0
    fn reject_orthogonally_from(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                -(other[e415] * self[e23])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e415] * self[e321]) + (other[e315] * self[e412]),
                (other[e425] * self[e321]) + (other[e125] * self[e423]),
                (other[e435] * self[e321]) + (other[e235] * self[e431]),
                -(other[e425] * self[e431]) - (other[e435] * self[e412]),
            ]) - (other.group1().zxy() * self.group7().yzx()).with_w(other[e415] * self[e423]),
            // e5
            -(other[e415] * self[e235])
                - (other[e425] * self[e315])
                - (other[e435] * self[e125])
                - (other[e235] * self[e415])
                - (other[e315] * self[e425])
                - (other[e125] * self[e435]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e415] * self[e3215]) + (other[e315] * self[e4125]),
                (other[e425] * self[e3215]) + (other[e125] * self[e4235]),
                (other[e435] * self[e3215]) + (other[e235] * self[e4315]),
                -(other[e425] * self[e4315]) - (other[e435] * self[e4125]),
            ]) - (self.group9().yzxx() * other.group1().zxy().with_w(other[e415])),
            // e41, e42, e43
            Simd32x3::from(self[e1234]) * other.group0(),
            // e23, e31, e12
            Simd32x3::from(self[e1234]) * other.group1(),
            // e415, e425, e435, e321
            self.group0().yy().with_zw(self[e12345], 0.0) * Simd32x3::from(1.0).with_w(0.0) * other.group0().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(self[e12345]) * other.group1(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(0.0),
            // e1234
            0.0,
        );
        let right_anti_dual = AntiLine::from_groups(/* e23, e31, e12 */ other.group0(), /* e15, e25, e35 */ other.group1());
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                -(right_anti_dual[e23] * anti_wedge[e415])
                    - (right_anti_dual[e31] * anti_wedge[e425])
                    - (right_anti_dual[e12] * anti_wedge[e435])
                    - (right_anti_dual[e15] * anti_wedge[e423])
                    - (right_anti_dual[e25] * anti_wedge[e431])
                    - (right_anti_dual[e35] * anti_wedge[e412]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e15, e25, e35, e45
            anti_wedge.group0().xx().with_zw(anti_wedge[scalar], 0.0)
                * Simd32x3::from(1.0).with_w(0.0)
                * right_anti_dual.group1().with_w(0.0)
                * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e415, e425, e435, e321
            Simd32x4::from([anti_wedge[e4], anti_wedge[e4], anti_wedge[e4], 1.0])
                * right_anti_dual
                    .group1()
                    .with_w(-(right_anti_dual[e23] * anti_wedge[e1]) - (right_anti_dual[e31] * anti_wedge[e2]) - (right_anti_dual[e12] * anti_wedge[e3])),
            // e423, e431, e412
            Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group0(),
            // e235, e315, e125
            (Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group0()) + (right_anti_dual.group1().zxy() * anti_wedge.group1().yzx())
                - (right_anti_dual.group1().yzx() * anti_wedge.group1().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (right_anti_dual[e23] * anti_wedge[e45]) + (right_anti_dual[e35] * anti_wedge[e42]),
                (right_anti_dual[e31] * anti_wedge[e45]) + (right_anti_dual[e15] * anti_wedge[e43]),
                (right_anti_dual[e12] * anti_wedge[e45]) + (right_anti_dual[e25] * anti_wedge[e41]),
                -(right_anti_dual[e31] * anti_wedge[e25])
                    - (right_anti_dual[e12] * anti_wedge[e35])
                    - (right_anti_dual[e15] * anti_wedge[e23])
                    - (right_anti_dual[e25] * anti_wedge[e31])
                    - (right_anti_dual[e35] * anti_wedge[e12]),
            ]) - (right_anti_dual.group1().yzx() * anti_wedge.group4().zxy()).with_w(right_anti_dual[e23] * anti_wedge[e15]),
            // e1234
            -(right_anti_dual[e23] * anti_wedge[e41]) - (right_anti_dual[e31] * anti_wedge[e42]) - (right_anti_dual[e12] * anti_wedge[e43]),
        );
    }
}
impl RejectOrthogonallyFrom<Motor> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       38       66        0
    //    simd3       10       22        0
    //    simd4        8       10        0
    // Totals...
    // yes simd       56       98        0
    //  no simd      100      172        0
    fn reject_orthogonally_from(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (other[e12345] * self[scalar]) + (other[e5] * self[e1234])
                    - (other[e415] * self[e23])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
                other[e12345] * self[e12345],
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e415] * self[e321]) + (other[e12345] * self[e1]),
                (other[e425] * self[e321]) + (other[e12345] * self[e2]),
                (other[e435] * self[e321]) + (other[e12345] * self[e3]),
                -(other[e425] * self[e431]) - (other[e435] * self[e412]),
            ]) + (self.group7().zxy() * other.group1().yzx()).with_w(other[e12345] * self[e4])
                - (self.group7().yzx() * other.group1().zxy()).with_w(other[e415] * self[e423]),
            // e5
            (other[e12345] * self[e5]) + (other[e5] * self[e12345])
                - (other[e415] * self[e235])
                - (other[e425] * self[e315])
                - (other[e435] * self[e125])
                - (other[e235] * self[e415])
                - (other[e315] * self[e425])
                - (other[e125] * self[e435]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e12345] * self[e15]) + (other[e315] * self[e4125]),
                (other[e12345] * self[e25]) + (other[e125] * self[e4235]),
                (other[e12345] * self[e35]) + (other[e235] * self[e4315]),
                -(other[e425] * self[e4315]) - (other[e435] * self[e4125]),
            ]) + (other.group0() * self.group9().www().with_w(self[e45]))
                - (self.group9().yzxx() * other.group1().zxy().with_w(other[e415])),
            // e41, e42, e43
            (Simd32x3::from(other[e12345]) * self.group4()) + (Simd32x3::from(self[e1234]) * other.group0().xyz()),
            // e23, e31, e12
            (Simd32x3::from(other[e12345]) * self.group5()) + (Simd32x3::from(self[e1234]) * other.group1().xyz()),
            // e415, e425, e435, e321
            ((Simd32x3::from(other[e12345]) * self.group6().xyz()) + (Simd32x3::from(self[e12345]) * other.group0().xyz())).with_w(other[e12345] * self[e321]),
            // e423, e431, e412
            Simd32x3::from(other[e12345]) * self.group7(),
            // e235, e315, e125
            (Simd32x3::from(other[e12345]) * self.group8()) + (Simd32x3::from(self[e12345]) * other.group1().xyz()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e12345]) * self.group9(),
            // e1234
            other[e12345] * self[e1234],
        );
        let right_anti_dual = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e3215
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                right_anti_dual[scalar] * anti_wedge[scalar],
                (right_anti_dual[scalar] * anti_wedge[e12345]) + (right_anti_dual[e3215] * anti_wedge[e4])
                    - (right_anti_dual[e23] * anti_wedge[e415])
                    - (right_anti_dual[e31] * anti_wedge[e425])
                    - (right_anti_dual[e12] * anti_wedge[e435])
                    - (right_anti_dual[e15] * anti_wedge[e423])
                    - (right_anti_dual[e25] * anti_wedge[e431])
                    - (right_anti_dual[e35] * anti_wedge[e412]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1(),
            // e5
            right_anti_dual[scalar] * anti_wedge[e5],
            // e15, e25, e35, e45
            ((Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group3().xyz()) + (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group1().xyz()))
                .with_w(right_anti_dual[scalar] * anti_wedge[e45]),
            // e41, e42, e43
            Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group4(),
            // e23, e31, e12
            (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group5()) + (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0().xyz()),
            // e415, e425, e435, e321
            Simd32x4::from([
                right_anti_dual[e15] * anti_wedge[e4],
                right_anti_dual[e25] * anti_wedge[e4],
                right_anti_dual[e35] * anti_wedge[e4],
                -(right_anti_dual[e23] * anti_wedge[e1]) - (right_anti_dual[e31] * anti_wedge[e2]) - (right_anti_dual[e12] * anti_wedge[e3]),
            ]) + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group6()),
            // e423, e431, e412
            (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group7()) + (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group0().xyz()),
            // e235, e315, e125
            (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group8())
                + (Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group0().xyz())
                + (right_anti_dual.group1().zxy() * anti_wedge.group1().yzx())
                - (right_anti_dual.group1().yzx() * anti_wedge.group1().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                right_anti_dual[scalar] * anti_wedge[e4235],
                right_anti_dual[scalar] * anti_wedge[e4315],
                right_anti_dual[scalar] * anti_wedge[e4125],
                -(right_anti_dual[e23] * anti_wedge[e15])
                    - (right_anti_dual[e31] * anti_wedge[e25])
                    - (right_anti_dual[e12] * anti_wedge[e35])
                    - (right_anti_dual[e25] * anti_wedge[e31])
                    - (right_anti_dual[e35] * anti_wedge[e12]),
            ]) + (right_anti_dual.group0() * anti_wedge.group3().www().with_w(anti_wedge[e3215]))
                + (right_anti_dual.group1().zxyw() * anti_wedge.group4().yzx().with_w(anti_wedge[scalar]))
                - (right_anti_dual.group1().yzxx() * anti_wedge.group4().zxy().with_w(anti_wedge[e23])),
            // e1234
            (right_anti_dual[scalar] * anti_wedge[e1234])
                - (right_anti_dual[e23] * anti_wedge[e41])
                - (right_anti_dual[e31] * anti_wedge[e42])
                - (right_anti_dual[e12] * anti_wedge[e43]),
        );
    }
}
impl RejectOrthogonallyFrom<MultiVector> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      142      185        0
    //    simd2        0        1        0
    //    simd3       40       67        0
    //    simd4       40       30        0
    // Totals...
    // yes simd      222      283        0
    //  no simd      422      508        0
    fn reject_orthogonally_from(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (other[scalar] * self[e12345])
                    + (other[e12345] * self[scalar])
                    + (other[e1] * self[e4235])
                    + (other[e2] * self[e4315])
                    + (other[e3] * self[e4125])
                    + (other[e4] * self[e3215])
                    + (other[e5] * self[e1234])
                    + (other[e4235] * self[e1])
                    + (other[e4315] * self[e2])
                    + (other[e4125] * self[e3])
                    + (other[e3215] * self[e4])
                    + (other[e1234] * self[e5])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412])
                    - (other[e45] * self[e321])
                    - (other[e41] * self[e235])
                    - (other[e42] * self[e315])
                    - (other[e43] * self[e125])
                    - (other[e23] * self[e415])
                    - (other[e31] * self[e425])
                    - (other[e12] * self[e435])
                    - (other[e415] * self[e23])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12])
                    - (other[e321] * self[e45])
                    - (other[e423] * self[e15])
                    - (other[e431] * self[e25])
                    - (other[e412] * self[e35])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
                other[e12345] * self[e12345],
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e15] * self[e1234]) + (other[e415] * self[e321]) + (other[e321] * self[e415]) + (other[e4125] * self[e31]),
                (other[e25] * self[e1234]) + (other[e425] * self[e321]) + (other[e321] * self[e425]) + (other[e4235] * self[e12]),
                (other[e35] * self[e1234]) + (other[e435] * self[e321]) + (other[e321] * self[e435]) + (other[e4315] * self[e23]),
                -(other[e415] * self[e423]) - (other[e425] * self[e431]) - (other[e435] * self[e412]) - (other[e1234] * self[e45]),
            ]) + (Simd32x4::from(other[e12345]) * self.group1())
                + (Simd32x4::from(self[e12345]) * other.group1())
                + (self.group9().yzxx() * other.group5().zxy().with_w(other[e41]))
                + (self.group4() * other.group9().www()).with_w(other[e45] * self[e1234])
                + (other.group7().zxy() * self.group8().yzx()).with_w(other[e42] * self[e4315])
                + (other.group8().yzx() * self.group7().zxy()).with_w(other[e43] * self[e4125])
                - (Simd32x4::from([other[e1234], other[e1234], other[e1234], other[e4125]]) * self.group3().xyz().with_w(self[e43]))
                - (other.group9().yzxy() * self.group5().zxy().with_w(self[e42]))
                - (other.group4() * self.group9().www()).with_w(other[e423] * self[e415])
                - (other.group5().yzx() * self.group9().zxy()).with_w(other[e431] * self[e425])
                - (other.group7().yzx() * self.group8().zxy()).with_w(other[e412] * self[e435])
                - (other.group8().zxy() * self.group7().yzx()).with_w(other[e4235] * self[e41]),
            // e5
            (other[e12345] * self[e5])
                + (other[e5] * self[e12345])
                + (other[e4235] * self[e15])
                + (other[e4315] * self[e25])
                + (other[e4125] * self[e35])
                + (other[e3215] * self[e45])
                - (other[e15] * self[e4235])
                - (other[e25] * self[e4315])
                - (other[e35] * self[e4125])
                - (other[e45] * self[e3215])
                - (other[e415] * self[e235])
                - (other[e425] * self[e315])
                - (other[e435] * self[e125])
                - (other[e235] * self[e415])
                - (other[e315] * self[e425])
                - (other[e125] * self[e435]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e415] * self[e3215]) + (other[e315] * self[e4125]) + (other[e4125] * self[e315]) + (other[e3215] * self[e415]),
                (other[e425] * self[e3215]) + (other[e125] * self[e4235]) + (other[e4235] * self[e125]) + (other[e3215] * self[e425]),
                (other[e435] * self[e3215]) + (other[e235] * self[e4315]) + (other[e4315] * self[e235]) + (other[e3215] * self[e435]),
                -(other[e435] * self[e4125]) - (other[e4235] * self[e415]) - (other[e4315] * self[e425]) - (other[e4125] * self[e435]),
            ]) + (Simd32x4::from(other[e12345]) * self.group3())
                + (Simd32x4::from(self[e12345]) * other.group3())
                - (self.group9().yzxx() * other.group8().zxy().with_w(other[e415]))
                - (self.group8().zxy() * other.group9().yzx()).with_w(other[e425] * self[e4315]),
            // e41, e42, e43
            (Simd32x3::from(other[e12345]) * self.group4())
                + (Simd32x3::from(other[e1234]) * self.group6().xyz())
                + (Simd32x3::from(self[e12345]) * other.group4())
                + (Simd32x3::from(self[e1234]) * other.group6().xyz())
                + (other.group7().zxy() * self.group9().yzx())
                + (self.group7().zxy() * other.group9().yzx())
                - (other.group7().yzx() * self.group9().zxy())
                - (self.group7().yzx() * other.group9().zxy()),
            // e23, e31, e12
            (Simd32x3::from(other[e12345]) * self.group5())
                + (Simd32x3::from(other[e3215]) * self.group7())
                + (Simd32x3::from(other[e1234]) * self.group8())
                + (Simd32x3::from(self[e12345]) * other.group5())
                + (Simd32x3::from(self[e3215]) * other.group7())
                + (Simd32x3::from(self[e1234]) * other.group8())
                - (Simd32x3::from(other[e321]) * self.group9().xyz())
                - (Simd32x3::from(self[e321]) * other.group9().xyz()),
            // e415, e425, e435, e321
            (Simd32x4::from(other[e12345]) * self.group6()) + (Simd32x4::from(self[e12345]) * other.group6()) + (other.group9().yzxw() * self.group9().zxy().with_w(self[e1234]))
                - (other.group9().zxy() * self.group9().yzx()).with_w(other[e1234] * self[e3215]),
            // e423, e431, e412
            (Simd32x3::from(other[e12345]) * self.group7()) + (Simd32x3::from(self[e12345]) * other.group7()) + (Simd32x3::from(self[e1234]) * other.group9().xyz())
                - (Simd32x3::from(other[e1234]) * self.group9().xyz()),
            // e235, e315, e125
            (Simd32x3::from(other[e12345]) * self.group8()) + (Simd32x3::from(other[e3215]) * self.group9().xyz()) + (Simd32x3::from(self[e12345]) * other.group8())
                - (Simd32x3::from(self[e3215]) * other.group9().xyz()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other[e12345]) * self.group9()) + (Simd32x4::from(self[e12345]) * other.group9()),
            // e1234
            (other[e12345] * self[e1234]) + (other[e1234] * self[e12345]),
        );
        let right_anti_dual = MultiVector::from_groups(
            // scalar, e12345
            other.group0().yx() * Simd32x2::from([-1.0, 1.0]),
            // e1, e2, e3, e4
            other.group9().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e5
            other[e3215],
            // e15, e25, e35, e45
            other.group8().with_w(other[e321] * -1.0),
            // e41, e42, e43
            other.group7(),
            // e23, e31, e12
            other.group6().xyz(),
            // e415, e425, e435, e321
            other.group5().with_w(other[e45]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e423, e431, e412
            other.group4() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group3().xyz() * Simd32x3::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group1().xyz().with_w(other[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1234
            other[e4] * -1.0,
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                anti_wedge[scalar] * right_anti_dual[scalar],
                (anti_wedge[scalar] * right_anti_dual[e12345])
                    + (anti_wedge[e12345] * right_anti_dual[scalar])
                    + (anti_wedge[e1] * right_anti_dual[e4235])
                    + (anti_wedge[e2] * right_anti_dual[e4315])
                    + (anti_wedge[e3] * right_anti_dual[e4125])
                    + (anti_wedge[e4] * right_anti_dual[e3215])
                    + (anti_wedge[e5] * right_anti_dual[e1234])
                    + (anti_wedge[e4235] * right_anti_dual[e1])
                    + (anti_wedge[e4315] * right_anti_dual[e2])
                    + (anti_wedge[e4125] * right_anti_dual[e3])
                    + (anti_wedge[e3215] * right_anti_dual[e4])
                    + (anti_wedge[e1234] * right_anti_dual[e5])
                    - (anti_wedge[e15] * right_anti_dual[e423])
                    - (anti_wedge[e25] * right_anti_dual[e431])
                    - (anti_wedge[e35] * right_anti_dual[e412])
                    - (anti_wedge[e45] * right_anti_dual[e321])
                    - (anti_wedge[e41] * right_anti_dual[e235])
                    - (anti_wedge[e42] * right_anti_dual[e315])
                    - (anti_wedge[e43] * right_anti_dual[e125])
                    - (anti_wedge[e23] * right_anti_dual[e415])
                    - (anti_wedge[e31] * right_anti_dual[e425])
                    - (anti_wedge[e12] * right_anti_dual[e435])
                    - (anti_wedge[e415] * right_anti_dual[e23])
                    - (anti_wedge[e425] * right_anti_dual[e31])
                    - (anti_wedge[e435] * right_anti_dual[e12])
                    - (anti_wedge[e321] * right_anti_dual[e45])
                    - (anti_wedge[e423] * right_anti_dual[e15])
                    - (anti_wedge[e431] * right_anti_dual[e25])
                    - (anti_wedge[e412] * right_anti_dual[e35])
                    - (anti_wedge[e235] * right_anti_dual[e41])
                    - (anti_wedge[e315] * right_anti_dual[e42])
                    - (anti_wedge[e125] * right_anti_dual[e43]),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1()) + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1()),
            // e5
            (anti_wedge[scalar] * right_anti_dual[e5]) + (anti_wedge[e5] * right_anti_dual[scalar]),
            // e15, e25, e35, e45
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group3())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group3())
                + (Simd32x4::from(right_anti_dual[e5]) * anti_wedge.group1())
                - (Simd32x4::from(anti_wedge[e5]) * right_anti_dual.group1()),
            // e41, e42, e43
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group4())
                + (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group1().xyz())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group4())
                - (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group1().xyz()),
            // e23, e31, e12
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group5())
                + (anti_wedge.group1().yzx() * right_anti_dual.group1().zxy())
                - (anti_wedge.group1().zxy() * right_anti_dual.group1().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (anti_wedge[e4] * right_anti_dual[e15])
                    + (anti_wedge[e5] * right_anti_dual[e41])
                    + (anti_wedge[e15] * right_anti_dual[e4])
                    + (anti_wedge[e41] * right_anti_dual[e5]),
                (anti_wedge[e4] * right_anti_dual[e25])
                    + (anti_wedge[e5] * right_anti_dual[e42])
                    + (anti_wedge[e25] * right_anti_dual[e4])
                    + (anti_wedge[e42] * right_anti_dual[e5]),
                (anti_wedge[e4] * right_anti_dual[e35])
                    + (anti_wedge[e5] * right_anti_dual[e43])
                    + (anti_wedge[e35] * right_anti_dual[e4])
                    + (anti_wedge[e43] * right_anti_dual[e5]),
                -(anti_wedge[e1] * right_anti_dual[e23])
                    - (anti_wedge[e2] * right_anti_dual[e31])
                    - (anti_wedge[e3] * right_anti_dual[e12])
                    - (anti_wedge[e12] * right_anti_dual[e3]),
            ]) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group6())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group6())
                - (right_anti_dual.group1().xyzy() * anti_wedge.group3().www().with_w(anti_wedge[e31]))
                - (right_anti_dual.group3().www() * anti_wedge.group1().xyz()).with_w(anti_wedge[e23] * right_anti_dual[e1]),
            // e423, e431, e412
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group7())
                + (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group7())
                + (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group5())
                + (anti_wedge.group4().yzx() * right_anti_dual.group1().zxy())
                + (right_anti_dual.group4().yzx() * anti_wedge.group1().zxy())
                - (anti_wedge.group4().zxy() * right_anti_dual.group1().yzx())
                - (right_anti_dual.group4().zxy() * anti_wedge.group1().yzx()),
            // e235, e315, e125
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group8())
                + (Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group8())
                + (Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group5())
                + (anti_wedge.group1().yzx() * right_anti_dual.group3().zxy())
                + (anti_wedge.group3().zxy() * right_anti_dual.group1().yzx())
                - (anti_wedge.group1().zxy() * right_anti_dual.group3().yzx())
                - (anti_wedge.group3().yzx() * right_anti_dual.group1().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (anti_wedge[e3] * right_anti_dual[e425])
                    + (anti_wedge[e4] * right_anti_dual[e235])
                    + (anti_wedge[e45] * right_anti_dual[e23])
                    + (anti_wedge[e435] * right_anti_dual[e2]),
                (anti_wedge[e1] * right_anti_dual[e435])
                    + (anti_wedge[e4] * right_anti_dual[e315])
                    + (anti_wedge[e45] * right_anti_dual[e31])
                    + (anti_wedge[e415] * right_anti_dual[e3]),
                (anti_wedge[e2] * right_anti_dual[e415])
                    + (anti_wedge[e4] * right_anti_dual[e125])
                    + (anti_wedge[e45] * right_anti_dual[e12])
                    + (anti_wedge[e425] * right_anti_dual[e1]),
                -(anti_wedge[e1] * right_anti_dual[e235])
                    - (anti_wedge[e2] * right_anti_dual[e315])
                    - (anti_wedge[e3] * right_anti_dual[e125])
                    - (anti_wedge[e5] * right_anti_dual[e321]),
            ]) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group9())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group9())
                + (Simd32x4::from([right_anti_dual[e5], right_anti_dual[e5], right_anti_dual[e5], right_anti_dual[e3]]) * anti_wedge.group7().with_w(anti_wedge[e125]))
                + (anti_wedge.group5() * right_anti_dual.group3().www()).with_w(anti_wedge[e315] * right_anti_dual[e2])
                + (anti_wedge.group4().yzx() * right_anti_dual.group3().zxy()).with_w(anti_wedge[e235] * right_anti_dual[e1])
                + (right_anti_dual.group4().yzx() * anti_wedge.group3().zxy()).with_w(anti_wedge[e321] * right_anti_dual[e5])
                - (Simd32x4::from([anti_wedge[e5], anti_wedge[e5], anti_wedge[e5], anti_wedge[e15]]) * right_anti_dual.group7().with_w(right_anti_dual[e23]))
                - (right_anti_dual.group3().yzxx() * anti_wedge.group4().zxy().with_w(anti_wedge[e23]))
                - (anti_wedge.group8() * right_anti_dual.group1().www()).with_w(anti_wedge[e31] * right_anti_dual[e25])
                - (right_anti_dual.group4().zxy() * anti_wedge.group3().yzx()).with_w(anti_wedge[e12] * right_anti_dual[e35])
                - (anti_wedge.group1().yzx() * right_anti_dual.group6().zxy()).with_w(anti_wedge[e25] * right_anti_dual[e31])
                - (anti_wedge.group6().yzx() * right_anti_dual.group1().zxy()).with_w(anti_wedge[e35] * right_anti_dual[e12]),
            // e1234
            (anti_wedge[scalar] * right_anti_dual[e1234])
                + (anti_wedge[e1] * right_anti_dual[e423])
                + (anti_wedge[e2] * right_anti_dual[e431])
                + (anti_wedge[e3] * right_anti_dual[e412])
                + (anti_wedge[e4] * right_anti_dual[e321])
                + (anti_wedge[e1234] * right_anti_dual[scalar])
                - (anti_wedge[e41] * right_anti_dual[e23])
                - (anti_wedge[e42] * right_anti_dual[e31])
                - (anti_wedge[e43] * right_anti_dual[e12])
                - (anti_wedge[e23] * right_anti_dual[e41])
                - (anti_wedge[e31] * right_anti_dual[e42])
                - (anti_wedge[e12] * right_anti_dual[e43])
                - (anti_wedge[e321] * right_anti_dual[e4])
                - (anti_wedge[e423] * right_anti_dual[e1])
                - (anti_wedge[e431] * right_anti_dual[e2])
                - (anti_wedge[e412] * right_anti_dual[e3]),
        );
    }
}
impl RejectOrthogonallyFrom<Plane> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       21       49        0
    //    simd3        9       21        0
    //    simd4        5        8        0
    // Totals...
    // yes simd       35       78        0
    //  no simd       68      144        0
    fn reject_orthogonally_from(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([(self[e1] * other[e4235]) + (self[e2] * other[e4315]) + (self[e3] * other[e4125]) + (self[e4] * other[e3215]), 0.0]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e41] * other[e3215]) + (self[e31] * other[e4125]),
                (self[e42] * other[e3215]) + (self[e12] * other[e4235]),
                (self[e43] * other[e3215]) + (self[e23] * other[e4315]),
                -(self[e42] * other[e4315]) - (self[e43] * other[e4125]),
            ]) - (other.group0().yzxx() * self.group5().zxy().with_w(self[e41])),
            // e5
            (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]) + (self[e45] * other[e3215]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e415] * other[e3215]) + (self[e315] * other[e4125]),
                (self[e425] * other[e3215]) + (self[e125] * other[e4235]),
                (self[e435] * other[e3215]) + (self[e235] * other[e4315]),
                -(self[e425] * other[e4315]) - (self[e435] * other[e4125]),
            ]) - (other.group0().yzxx() * self.group8().zxy().with_w(self[e415])),
            // e41, e42, e43
            (self.group7().zxy() * other.group0().yzx()) - (self.group7().yzx() * other.group0().zxy()),
            // e23, e31, e12
            (Simd32x3::from(other[e3215]) * self.group7()) - (Simd32x3::from(self[e321]) * other.group0().xyz()),
            // e415, e425, e435, e321
            ((self.group9().zxy() * other.group0().yzx()) - (self.group9().yzx() * other.group0().zxy())).with_w(self[e1234] * other[e3215]),
            // e423, e431, e412
            Simd32x3::from(self[e1234]) * other.group0().xyz(),
            // e235, e315, e125
            (Simd32x3::from(other[e3215]) * self.group9().xyz()) - (Simd32x3::from(self[e3215]) * other.group0().xyz()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * other.group0(),
            // e1234
            0.0,
        );
        let right_anti_dual = AntiPlane::from_groups(/* e1, e2, e3, e5 */ other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]));
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (right_anti_dual[e1] * anti_wedge[e4235])
                    + (right_anti_dual[e2] * anti_wedge[e4315])
                    + (right_anti_dual[e3] * anti_wedge[e4125])
                    + (right_anti_dual[e5] * anti_wedge[e1234]),
            ]),
            // e1, e2, e3, e4
            anti_wedge.group0().xx().with_zw(anti_wedge[scalar], 0.0)
                * Simd32x3::from(1.0).with_w(0.0)
                * right_anti_dual.group0().xyz().with_w(0.0)
                * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
            // e5
            right_anti_dual[e5] * anti_wedge[scalar],
            // e15, e25, e35, e45
            ((Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group1().xyz()) - (Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group0().xyz()))
                .with_w(right_anti_dual[e5] * anti_wedge[e4]),
            // e41, e42, e43
            Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group0().xyz(),
            // e23, e31, e12
            (right_anti_dual.group0().zxy() * anti_wedge.group1().yzx()) - (right_anti_dual.group0().yzx() * anti_wedge.group1().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                right_anti_dual[e5] * anti_wedge[e41],
                right_anti_dual[e5] * anti_wedge[e42],
                right_anti_dual[e5] * anti_wedge[e43],
                -(right_anti_dual[e2] * anti_wedge[e31]) - (right_anti_dual[e3] * anti_wedge[e12]),
            ]) - (anti_wedge.group3().www() * right_anti_dual.group0().xyz()).with_w(right_anti_dual[e1] * anti_wedge[e23]),
            // e423, e431, e412
            (anti_wedge.group4().yzx() * right_anti_dual.group0().zxy()) - (anti_wedge.group4().zxy() * right_anti_dual.group0().yzx()),
            // e235, e315, e125
            (Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group5()) + (right_anti_dual.group0().yzx() * anti_wedge.group3().zxy())
                - (right_anti_dual.group0().zxy() * anti_wedge.group3().yzx()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                right_anti_dual[e3] * anti_wedge[e425] * -1.0,
                right_anti_dual[e1] * anti_wedge[e435] * -1.0,
                right_anti_dual[e2] * anti_wedge[e415] * -1.0,
                (right_anti_dual[e3] * anti_wedge[e125]) + (right_anti_dual[e5] * anti_wedge[e321]),
            ]) + (right_anti_dual.group0().wwwx() * anti_wedge.group7().with_w(anti_wedge[e235]))
                + (right_anti_dual.group0().yzx() * anti_wedge.group6().zxy()).with_w(right_anti_dual[e2] * anti_wedge[e315]),
            // e1234
            -(right_anti_dual[e1] * anti_wedge[e423]) - (right_anti_dual[e2] * anti_wedge[e431]) - (right_anti_dual[e3] * anti_wedge[e412]),
        );
    }
}
impl RejectOrthogonallyFrom<RoundPoint> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       13        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        8       16        0
    //  no simd        8       25        0
    fn reject_orthogonally_from(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e4235] * other[e1]) + (self[e4315] * other[e2]) + (self[e4125] * other[e3]) + (self[e3215] * other[e4]) + (self[e1234] * other[e5]),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(self[e12345]) * other.group0(),
            // e5
            self[e12345] * other[e5],
            // e15, e25, e35, e45
            Simd32x4::from(0.0),
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(0.0),
            // e1234
            0.0,
        );
        let right_anti_dual = Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            other.group0().xyz().with_w(other[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1234
            other[e4] * -1.0,
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (anti_wedge[e1] * right_anti_dual[e4235])
                    + (anti_wedge[e2] * right_anti_dual[e4315])
                    + (anti_wedge[e3] * right_anti_dual[e4125])
                    + (anti_wedge[e4] * right_anti_dual[e3215])
                    + (anti_wedge[e5] * right_anti_dual[e1234]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e15, e25, e35, e45
            Simd32x4::from(0.0),
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e1234
            anti_wedge[scalar] * right_anti_dual[e1234],
        );
    }
}
impl RejectOrthogonallyFrom<Scalar> for MultiVector {
    type Output = AntiScalar;
    fn reject_orthogonally_from(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ self[e12345] * f32::powi(other[scalar], 2));
    }
}
impl RejectOrthogonallyFrom<Sphere> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       30       53        0
    //    simd3       12       21        0
    //    simd4        8       12        0
    // Totals...
    // yes simd       50       86        0
    //  no simd       98      164        0
    fn reject_orthogonally_from(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e1] * other[e4235]) + (self[e2] * other[e4315]) + (self[e3] * other[e4125]) + (self[e4] * other[e3215]) + (self[e5] * other[e1234]),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e41] * other[e3215]) + (self[e31] * other[e4125]),
                (self[e42] * other[e3215]) + (self[e12] * other[e4235]),
                (self[e43] * other[e3215]) + (self[e23] * other[e4315]),
                -(self[e45] * other[e1234]) - (self[e43] * other[e4125]),
            ]) - (Simd32x4::from([other[e1234], other[e1234], other[e1234], other[e4315]]) * self.group3().xyz().with_w(self[e42]))
                - (other.group0().yzxx() * self.group5().zxy().with_w(self[e41])),
            // e5
            (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]) + (self[e45] * other[e3215]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e415] * other[e3215]) + (self[e315] * other[e4125]),
                (self[e425] * other[e3215]) + (self[e125] * other[e4235]),
                (self[e435] * other[e3215]) + (self[e235] * other[e4315]),
                -(self[e425] * other[e4315]) - (self[e435] * other[e4125]),
            ]) - (other.group0().yzxx() * self.group8().zxy().with_w(self[e415])),
            // e41, e42, e43
            (Simd32x3::from(other[e1234]) * self.group6().xyz()) + (self.group7().zxy() * other.group0().yzx()) - (self.group7().yzx() * other.group0().zxy()),
            // e23, e31, e12
            (Simd32x3::from(other[e3215]) * self.group7()) + (Simd32x3::from(other[e1234]) * self.group8()) - (Simd32x3::from(self[e321]) * other.group0().xyz()),
            // e415, e425, e435, e321
            (self.group9().zxy() * other.group0().yzx()).with_w(self[e1234] * other[e3215]) - (self.group9().yzxw() * other.group0().zxy().with_w(other[e1234])),
            // e423, e431, e412
            (Simd32x3::from(self[e1234]) * other.group0().xyz()) - (Simd32x3::from(other[e1234]) * self.group9().xyz()),
            // e235, e315, e125
            (Simd32x3::from(other[e3215]) * self.group9().xyz()) - (Simd32x3::from(self[e3215]) * other.group0().xyz()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * other.group0(),
            // e1234
            self[e12345] * other[e1234],
        );
        let right_anti_dual = RoundPoint::from_groups(
            // e1, e2, e3, e4
            other.group0().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e5
            other[e3215],
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (anti_wedge[e4235] * right_anti_dual[e1])
                    + (anti_wedge[e4315] * right_anti_dual[e2])
                    + (anti_wedge[e4125] * right_anti_dual[e3])
                    + (anti_wedge[e3215] * right_anti_dual[e4])
                    + (anti_wedge[e1234] * right_anti_dual[e5]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e5
            anti_wedge[scalar] * right_anti_dual[e5],
            // e15, e25, e35, e45
            (Simd32x4::from(right_anti_dual[e5]) * anti_wedge.group1()) - (Simd32x4::from(anti_wedge[e5]) * right_anti_dual.group0()),
            // e41, e42, e43
            (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group0().xyz()) - (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group1().xyz()),
            // e23, e31, e12
            (anti_wedge.group1().yzx() * right_anti_dual.group0().zxy()) - (anti_wedge.group1().zxy() * right_anti_dual.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (anti_wedge[e15] * right_anti_dual[e4]) + (anti_wedge[e41] * right_anti_dual[e5]),
                (anti_wedge[e25] * right_anti_dual[e4]) + (anti_wedge[e42] * right_anti_dual[e5]),
                (anti_wedge[e35] * right_anti_dual[e4]) + (anti_wedge[e43] * right_anti_dual[e5]),
                -(anti_wedge[e31] * right_anti_dual[e2]) - (anti_wedge[e12] * right_anti_dual[e3]),
            ]) - (right_anti_dual.group0().xyzx() * anti_wedge.group3().www().with_w(anti_wedge[e23])),
            // e423, e431, e412
            (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group5()) + (anti_wedge.group4().yzx() * right_anti_dual.group0().zxy())
                - (anti_wedge.group4().zxy() * right_anti_dual.group0().yzx()),
            // e235, e315, e125
            (Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group5()) + (anti_wedge.group3().zxy() * right_anti_dual.group0().yzx())
                - (anti_wedge.group3().yzx() * right_anti_dual.group0().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(anti_wedge[e425] * right_anti_dual[e3]) - (anti_wedge[e235] * right_anti_dual[e4]),
                -(anti_wedge[e435] * right_anti_dual[e1]) - (anti_wedge[e315] * right_anti_dual[e4]),
                -(anti_wedge[e415] * right_anti_dual[e2]) - (anti_wedge[e125] * right_anti_dual[e4]),
                (anti_wedge[e321] * right_anti_dual[e5]) + (anti_wedge[e125] * right_anti_dual[e3]),
            ]) + (Simd32x4::from([right_anti_dual[e5], right_anti_dual[e5], right_anti_dual[e5], right_anti_dual[e1]]) * anti_wedge.group7().with_w(anti_wedge[e235]))
                + (right_anti_dual.group0().yzxy() * anti_wedge.group6().zxy().with_w(anti_wedge[e315])),
            // e1234
            -(anti_wedge[e321] * right_anti_dual[e4])
                - (anti_wedge[e423] * right_anti_dual[e1])
                - (anti_wedge[e431] * right_anti_dual[e2])
                - (anti_wedge[e412] * right_anti_dual[e3]),
        );
    }
}
impl RejectOrthogonallyFrom<VersorEven> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       76      106        0
    //    simd3       16       30        0
    //    simd4       14       16        0
    // Totals...
    // yes simd      106      152        0
    //  no simd      180      260        0
    fn reject_orthogonally_from(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[scalar] * other[e12345])
                    + (self[e4235] * other[e1])
                    + (self[e4315] * other[e2])
                    + (self[e4125] * other[e3])
                    + (self[e3215] * other[e4])
                    + (self[e1234] * other[e5])
                    - (self[e15] * other[e423])
                    - (self[e25] * other[e431])
                    - (self[e35] * other[e412])
                    - (self[e45] * other[e321])
                    - (self[e41] * other[e235])
                    - (self[e42] * other[e315])
                    - (self[e43] * other[e125])
                    - (self[e23] * other[e415])
                    - (self[e31] * other[e425])
                    - (self[e12] * other[e435]),
                self[e12345] * other[e12345],
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e1] * other[e12345]) + (self[e415] * other[e321]) + (self[e321] * other[e415]) + (self[e315] * other[e412]),
                (self[e2] * other[e12345]) + (self[e425] * other[e321]) + (self[e321] * other[e425]) + (self[e125] * other[e423]),
                (self[e3] * other[e12345]) + (self[e435] * other[e321]) + (self[e321] * other[e435]) + (self[e235] * other[e431]),
                -(self[e415] * other[e423]) - (self[e425] * other[e431]) - (self[e435] * other[e412]) - (self[e412] * other[e435]),
            ]) + (Simd32x4::from(self[e12345]) * other.group3())
                + (self.group7().zxy() * other.group2().yzx()).with_w(self[e4] * other[e12345])
                - (self.group7().yzx() * other.group2().zxy()).with_w(self[e423] * other[e415])
                - (self.group8().zxy() * other.group0().yzx()).with_w(self[e431] * other[e425]),
            // e5
            (self[e12345] * other[e5]) + (self[e5] * other[e12345])
                - (self[e415] * other[e235])
                - (self[e425] * other[e315])
                - (self[e435] * other[e125])
                - (self[e235] * other[e415])
                - (self[e315] * other[e425])
                - (self[e125] * other[e435]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e4125] * other[e315]) + (self[e3215] * other[e415]),
                (self[e4235] * other[e125]) + (self[e3215] * other[e425]),
                (self[e4315] * other[e235]) + (self[e3215] * other[e435]),
                -(self[e4315] * other[e425]) - (self[e4125] * other[e435]),
            ]) + (Simd32x4::from(other[e12345]) * self.group3())
                - (self.group9().yzxx() * other.group2().zxy().with_w(other[e415])),
            // e41, e42, e43
            (Simd32x3::from(self[e1234]) * other.group1().xyz()) + (Simd32x3::from(other[e12345]) * self.group4()) + (self.group9().yzx() * other.group0().zxy())
                - (self.group9().zxy() * other.group0().yzx()),
            // e23, e31, e12
            (Simd32x3::from(self[e3215]) * other.group0().xyz()) + (Simd32x3::from(self[e1234]) * other.group2().xyz()) + (Simd32x3::from(other[e12345]) * self.group5())
                - (Simd32x3::from(other[e321]) * self.group9().xyz()),
            // e415, e425, e435, e321
            (Simd32x4::from(self[e12345]) * other.group1()) + (Simd32x4::from(other[e12345]) * self.group6()),
            // e423, e431, e412
            (Simd32x3::from(self[e12345]) * other.group0().xyz()) + (Simd32x3::from(other[e12345]) * self.group7()),
            // e235, e315, e125
            (Simd32x3::from(self[e12345]) * other.group2().xyz()) + (Simd32x3::from(other[e12345]) * self.group8()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e12345]) * self.group9(),
            // e1234
            self[e1234] * other[e12345],
        );
        let right_anti_dual = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e1234
            other.group2().xyz().with_w(other[e4]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            other.group3().xyz().with_w(other[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                anti_wedge[scalar] * right_anti_dual[scalar],
                (anti_wedge[e12345] * right_anti_dual[scalar])
                    + (anti_wedge[e1] * right_anti_dual[e4235])
                    + (anti_wedge[e2] * right_anti_dual[e4315])
                    + (anti_wedge[e3] * right_anti_dual[e4125])
                    + (anti_wedge[e4] * right_anti_dual[e3215])
                    + (anti_wedge[e5] * right_anti_dual[e1234])
                    - (anti_wedge[e415] * right_anti_dual[e23])
                    - (anti_wedge[e425] * right_anti_dual[e31])
                    - (anti_wedge[e435] * right_anti_dual[e12])
                    - (anti_wedge[e321] * right_anti_dual[e45])
                    - (anti_wedge[e423] * right_anti_dual[e15])
                    - (anti_wedge[e431] * right_anti_dual[e25])
                    - (anti_wedge[e412] * right_anti_dual[e35])
                    - (anti_wedge[e235] * right_anti_dual[e41])
                    - (anti_wedge[e315] * right_anti_dual[e42])
                    - (anti_wedge[e125] * right_anti_dual[e43]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1(),
            // e5
            anti_wedge[e5] * right_anti_dual[scalar],
            // e15, e25, e35, e45
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group2().xyz().with_w(right_anti_dual[e45])) + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group3()),
            // e41, e42, e43
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0().xyz()) + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group4()),
            // e23, e31, e12
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group1().xyz()) + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group5()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (anti_wedge[e5] * right_anti_dual[e41]) + (anti_wedge[e415] * right_anti_dual[scalar]),
                (anti_wedge[e5] * right_anti_dual[e42]) + (anti_wedge[e425] * right_anti_dual[scalar]),
                (anti_wedge[e5] * right_anti_dual[e43]) + (anti_wedge[e435] * right_anti_dual[scalar]),
                -(anti_wedge[e2] * right_anti_dual[e31]) - (anti_wedge[e3] * right_anti_dual[e12]),
            ]) + (anti_wedge.group1().www() * right_anti_dual.group2().xyz()).with_w(anti_wedge[e321] * right_anti_dual[scalar])
                - (anti_wedge.group1().xyzx() * right_anti_dual.group1().wwwx()),
            // e423, e431, e412
            (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group1().xyz())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group7())
                + (anti_wedge.group1().zxy() * right_anti_dual.group0().yzx())
                - (anti_wedge.group1().yzx() * right_anti_dual.group0().zxy()),
            // e235, e315, e125
            (Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group1().xyz())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group8())
                + (anti_wedge.group1().yzx() * right_anti_dual.group2().zxy())
                - (anti_wedge.group1().zxy() * right_anti_dual.group2().yzx()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (anti_wedge[e35] * right_anti_dual[e42])
                    + (anti_wedge[e45] * right_anti_dual[e23])
                    + (anti_wedge[e23] * right_anti_dual[e45])
                    + (anti_wedge[e4235] * right_anti_dual[scalar]),
                (anti_wedge[e15] * right_anti_dual[e43])
                    + (anti_wedge[e45] * right_anti_dual[e31])
                    + (anti_wedge[e31] * right_anti_dual[e45])
                    + (anti_wedge[e4315] * right_anti_dual[scalar]),
                (anti_wedge[e25] * right_anti_dual[e41])
                    + (anti_wedge[e45] * right_anti_dual[e12])
                    + (anti_wedge[e12] * right_anti_dual[e45])
                    + (anti_wedge[e4125] * right_anti_dual[scalar]),
                -(anti_wedge[e15] * right_anti_dual[e23])
                    - (anti_wedge[e25] * right_anti_dual[e31])
                    - (anti_wedge[e35] * right_anti_dual[e12])
                    - (anti_wedge[e12] * right_anti_dual[e35]),
            ]) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group3())
                + (anti_wedge.group4().yzx() * right_anti_dual.group2().zxy()).with_w(anti_wedge[e3215] * right_anti_dual[scalar])
                - (right_anti_dual.group2().yzxx() * anti_wedge.group4().zxy().with_w(anti_wedge[e23]))
                - (anti_wedge.group3().yzx() * right_anti_dual.group0().zxy()).with_w(anti_wedge[e31] * right_anti_dual[e25]),
            // e1234
            (anti_wedge[scalar] * right_anti_dual[e1234]) + (anti_wedge[e1234] * right_anti_dual[scalar])
                - (anti_wedge[e41] * right_anti_dual[e23])
                - (anti_wedge[e42] * right_anti_dual[e31])
                - (anti_wedge[e43] * right_anti_dual[e12])
                - (anti_wedge[e23] * right_anti_dual[e41])
                - (anti_wedge[e31] * right_anti_dual[e42])
                - (anti_wedge[e12] * right_anti_dual[e43]),
        );
    }
}
impl RejectOrthogonallyFrom<VersorOdd> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       52       77        0
    //    simd3       16       35        0
    //    simd4       20       19        0
    // Totals...
    // yes simd       88      131        0
    //  no simd      180      258        0
    fn reject_orthogonally_from(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e12345] * other[scalar])
                    + (self[e1] * other[e4235])
                    + (self[e2] * other[e4315])
                    + (self[e3] * other[e4125])
                    + (self[e4] * other[e3215])
                    + (self[e5] * other[e1234])
                    - (self[e415] * other[e23])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e321] * other[e45])
                    - (self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35])
                    - (self[e235] * other[e41])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
                0.0,
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(self[e1234]) * other.group2().xyz().with_w(other[e45]))
                + (self.group9().yzxz() * other.group1().zxy().with_w(other[e43]))
                + (self.group4() * other.group3().www()).with_w(self[e4235] * other[e41])
                + (self.group5().yzx() * other.group3().zxy()).with_w(self[e4315] * other[e42])
                - (other.group3().yzxx() * self.group5().zxy().with_w(self[e41]))
                - (self.group9().zxy() * other.group1().yzx()).with_w(self[e43] * other[e4125])
                - (self.group9().www() * other.group0().xyz()).with_w(self[e45] * other[e1234])
                - (other.group2().www() * self.group3().xyz()).with_w(self[e42] * other[e4315]),
            // e5
            (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]) + (self[e45] * other[e3215])
                - (self[e4235] * other[e15])
                - (self[e4315] * other[e25])
                - (self[e4125] * other[e35])
                - (self[e3215] * other[e45]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e415] * other[e3215]) + (self[e315] * other[e4125]),
                (self[e425] * other[e3215]) + (self[e125] * other[e4235]),
                (self[e435] * other[e3215]) + (self[e235] * other[e4315]),
                -(self[e425] * other[e4315]) - (self[e435] * other[e4125]),
            ]) + (Simd32x4::from(self[e12345]) * other.group2().xyz().with_w(other[e45]))
                - (other.group3().yzxx() * self.group8().zxy().with_w(self[e415])),
            // e41, e42, e43
            (Simd32x3::from(self[e12345]) * other.group0().xyz()) + (Simd32x3::from(other[e1234]) * self.group6().xyz()) + (self.group7().zxy() * other.group3().yzx())
                - (self.group7().yzx() * other.group3().zxy()),
            // e23, e31, e12
            (Simd32x3::from(self[e12345]) * other.group1().xyz()) + (Simd32x3::from(other[e1234]) * self.group8()) + (Simd32x3::from(other[e3215]) * self.group7())
                - (Simd32x3::from(self[e321]) * other.group3().xyz()),
            // e415, e425, e435, e321
            (self.group9().zxy() * other.group3().yzx()).with_w(self[e1234] * other[e3215]) - (self.group9().yzxw() * other.group3().zxy().with_w(other[e1234])),
            // e423, e431, e412
            (Simd32x3::from(self[e1234]) * other.group3().xyz()) - (Simd32x3::from(other[e1234]) * self.group9().xyz()),
            // e235, e315, e125
            (Simd32x3::from(other[e3215]) * self.group9().xyz()) - (Simd32x3::from(self[e3215]) * other.group3().xyz()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * other.group3(),
            // e1234
            self[e12345] * other[e1234],
        );
        let right_anti_dual = VersorEven::from_groups(
            // e423, e431, e412, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            other.group2().xyz().with_w(other[e3215]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e4
            other.group3().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (anti_wedge[scalar] * right_anti_dual[e12345])
                    + (anti_wedge[e4235] * right_anti_dual[e1])
                    + (anti_wedge[e4315] * right_anti_dual[e2])
                    + (anti_wedge[e4125] * right_anti_dual[e3])
                    + (anti_wedge[e3215] * right_anti_dual[e4])
                    + (anti_wedge[e1234] * right_anti_dual[e5])
                    - (anti_wedge[e15] * right_anti_dual[e423])
                    - (anti_wedge[e25] * right_anti_dual[e431])
                    - (anti_wedge[e35] * right_anti_dual[e412])
                    - (anti_wedge[e45] * right_anti_dual[e321])
                    - (anti_wedge[e41] * right_anti_dual[e235])
                    - (anti_wedge[e42] * right_anti_dual[e315])
                    - (anti_wedge[e43] * right_anti_dual[e125])
                    - (anti_wedge[e23] * right_anti_dual[e415])
                    - (anti_wedge[e31] * right_anti_dual[e425])
                    - (anti_wedge[e12] * right_anti_dual[e435]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group3(),
            // e5
            anti_wedge[scalar] * right_anti_dual[e5],
            // e15, e25, e35, e45
            (Simd32x4::from(right_anti_dual[e5]) * anti_wedge.group1()) - (Simd32x4::from(anti_wedge[e5]) * right_anti_dual.group3()),
            // e41, e42, e43
            (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group3().xyz()) - (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group1().xyz()),
            // e23, e31, e12
            (anti_wedge.group1().yzx() * right_anti_dual.group3().zxy()) - (anti_wedge.group1().zxy() * right_anti_dual.group3().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (anti_wedge[e15] * right_anti_dual[e4]) + (anti_wedge[e41] * right_anti_dual[e5]),
                (anti_wedge[e25] * right_anti_dual[e4]) + (anti_wedge[e42] * right_anti_dual[e5]),
                (anti_wedge[e35] * right_anti_dual[e4]) + (anti_wedge[e43] * right_anti_dual[e5]),
                -(anti_wedge[e31] * right_anti_dual[e2]) - (anti_wedge[e12] * right_anti_dual[e3]),
            ]) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1())
                - (right_anti_dual.group3().xyzx() * anti_wedge.group3().www().with_w(anti_wedge[e23])),
            // e423, e431, e412
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0().xyz())
                + (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group5())
                + (anti_wedge.group4().yzx() * right_anti_dual.group3().zxy())
                - (anti_wedge.group4().zxy() * right_anti_dual.group3().yzx()),
            // e235, e315, e125
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group2().xyz())
                + (Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group5())
                + (anti_wedge.group3().zxy() * right_anti_dual.group3().yzx())
                - (anti_wedge.group3().yzx() * right_anti_dual.group3().zxy()),
            // e4235, e4315, e4125, e3215
            (anti_wedge.group6().zxyw() * right_anti_dual.group3().yzx().with_w(right_anti_dual[e5]))
                + (anti_wedge.group7() * right_anti_dual.group2().www()).with_w(anti_wedge[e235] * right_anti_dual[e1])
                + (anti_wedge.group1().zxy() * right_anti_dual.group1().yzx()).with_w(anti_wedge[e315] * right_anti_dual[e2])
                + (anti_wedge.group1().www() * right_anti_dual.group2().xyz()).with_w(anti_wedge[e125] * right_anti_dual[e3])
                - (Simd32x4::from(anti_wedge[e5]) * right_anti_dual.group0().xyz().with_w(right_anti_dual[e321]))
                - (anti_wedge.group1().yzxy() * right_anti_dual.group1().zxy().with_w(right_anti_dual[e315]))
                - (anti_wedge.group8() * right_anti_dual.group3().www()).with_w(anti_wedge[e1] * right_anti_dual[e235])
                - (anti_wedge.group6().yzx() * right_anti_dual.group3().zxy()).with_w(anti_wedge[e3] * right_anti_dual[e125]),
            // e1234
            (anti_wedge[e1] * right_anti_dual[e423])
                + (anti_wedge[e2] * right_anti_dual[e431])
                + (anti_wedge[e3] * right_anti_dual[e412])
                + (anti_wedge[e4] * right_anti_dual[e321])
                - (anti_wedge[e321] * right_anti_dual[e4])
                - (anti_wedge[e423] * right_anti_dual[e1])
                - (anti_wedge[e431] * right_anti_dual[e2])
                - (anti_wedge[e412] * right_anti_dual[e3]),
        );
    }
}
impl std::ops::Div<reject_orthogonally_from> for Plane {
    type Output = reject_orthogonally_from_partial<Plane>;
    fn div(self, _rhs: reject_orthogonally_from) -> Self::Output {
        reject_orthogonally_from_partial(self)
    }
}
impl RejectOrthogonallyFrom<AntiCircleRotor> for Plane {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       24        0
    //    simd3        0        1        0
    //    simd4        3        5        0
    // Totals...
    // yes simd       17       30        0
    //  no simd       26       47        0
    fn reject_orthogonally_from(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = RoundPoint::from_groups(
            // e1, e2, e3, e4
            Simd32x4::from([
                -(other[e41] * self[e3215]) - (other[e31] * self[e4125]),
                -(other[e42] * self[e3215]) - (other[e12] * self[e4235]),
                -(other[e43] * self[e3215]) - (other[e23] * self[e4315]),
                (other[e42] * self[e4315]) + (other[e43] * self[e4125]),
            ]) + (self.group0().yzxx() * other.group1().zxy().with_w(other[e41])),
            // e5
            -(other[e45] * self[e3215]) - (other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]),
        );
        let right_anti_dual = CircleRotor::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e12345
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (right_anti_dual[e425] * anti_wedge[e3]) + (right_anti_dual[e235] * anti_wedge[e4]),
                (right_anti_dual[e435] * anti_wedge[e1]) + (right_anti_dual[e315] * anti_wedge[e4]),
                (right_anti_dual[e415] * anti_wedge[e2]) + (right_anti_dual[e125] * anti_wedge[e4]),
                -(right_anti_dual[e315] * anti_wedge[e2]) - (right_anti_dual[e125] * anti_wedge[e3]),
            ]) - (Simd32x4::from(anti_wedge[e5]) * right_anti_dual.group0().with_w(right_anti_dual[e321]))
                - (anti_wedge.group0().yzxx() * right_anti_dual.group1().zxy().with_w(right_anti_dual[e235])),
            // e1234
            (right_anti_dual[e423] * anti_wedge[e1])
                + (right_anti_dual[e431] * anti_wedge[e2])
                + (right_anti_dual[e412] * anti_wedge[e3])
                + (right_anti_dual[e321] * anti_wedge[e4]),
        );
    }
}
impl RejectOrthogonallyFrom<AntiDipoleInversion> for Plane {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       38        0
    //    simd3        1        5        0
    //    simd4        6        9        0
    // Totals...
    // yes simd       27       52        0
    //  no simd       47       89        0
    fn reject_orthogonally_from(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiCircleRotor::from_groups(
            // e41, e42, e43
            (other.group0().zxy() * self.group0().yzx()) - (other.group0().yzx() * self.group0().zxy()),
            // e23, e31, e12, e45
            Simd32x4::from([
                other[e423] * self[e3215],
                other[e431] * self[e3215],
                other[e412] * self[e3215],
                -(other[e425] * self[e4315]) - (other[e435] * self[e4125]),
            ]) - (other.group1().wwwx() * self.group0().xyzx()),
            // e15, e25, e35, scalar
            Simd32x4::from([
                other[e125] * self[e4315] * -1.0,
                other[e235] * self[e4125] * -1.0,
                other[e315] * self[e4235] * -1.0,
                (other[e2] * self[e4315]) + (other[e3] * self[e4125]),
            ]) + (Simd32x4::from(self[e3215]) * other.group1().xyz().with_w(other[e4]))
                + (self.group0().zxyx() * other.group2().yzx().with_w(other[e1])),
        );
        let right_anti_dual = DipoleInversion::from_groups(
            // e41, e42, e43
            other.group0(),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            other.group3() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from([right_anti_dual[e15], right_anti_dual[e25], right_anti_dual[e35], 1.0])
                * anti_wedge.group2().www().with_w(
                    (anti_wedge[scalar] * right_anti_dual[e1234])
                        - (anti_wedge[e41] * right_anti_dual[e23])
                        - (anti_wedge[e42] * right_anti_dual[e31])
                        - (anti_wedge[e43] * right_anti_dual[e12])
                        - (anti_wedge[e23] * right_anti_dual[e41])
                        - (anti_wedge[e31] * right_anti_dual[e42])
                        - (anti_wedge[e12] * right_anti_dual[e43]),
                ),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (anti_wedge[e23] * right_anti_dual[e45])
                    + (anti_wedge[e45] * right_anti_dual[e23])
                    + (anti_wedge[e35] * right_anti_dual[e42])
                    + (anti_wedge[scalar] * right_anti_dual[e4235]),
                (anti_wedge[e31] * right_anti_dual[e45])
                    + (anti_wedge[e45] * right_anti_dual[e31])
                    + (anti_wedge[e15] * right_anti_dual[e43])
                    + (anti_wedge[scalar] * right_anti_dual[e4315]),
                (anti_wedge[e12] * right_anti_dual[e45])
                    + (anti_wedge[e45] * right_anti_dual[e12])
                    + (anti_wedge[e25] * right_anti_dual[e41])
                    + (anti_wedge[scalar] * right_anti_dual[e4125]),
                -(anti_wedge[e12] * right_anti_dual[e35])
                    - (anti_wedge[e15] * right_anti_dual[e23])
                    - (anti_wedge[e25] * right_anti_dual[e31])
                    - (anti_wedge[e35] * right_anti_dual[e12]),
            ]) + (anti_wedge.group0().yzx() * right_anti_dual.group2().zxy()).with_w(anti_wedge[scalar] * right_anti_dual[e3215])
                - (right_anti_dual.group2().yzxx() * anti_wedge.group0().zxy().with_w(anti_wedge[e23]))
                - (right_anti_dual.group0().zxy() * anti_wedge.group2().yzx()).with_w(anti_wedge[e31] * right_anti_dual[e25]),
        );
    }
}
impl RejectOrthogonallyFrom<AntiDualNum> for Plane {
    type Output = AntiDualNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd2        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        3        0
    fn reject_orthogonally_from(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return AntiDualNum::from_groups(/* e3215, scalar */ Simd32x2::from([other[e3215] * 0.0, 1.0]) * Simd32x2::from([1.0, 0.0]));
    }
}
impl RejectOrthogonallyFrom<AntiFlatPoint> for Plane {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        3        0
    //    simd3        1        4        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        3        9        0
    //  no simd        5       23        0
    fn reject_orthogonally_from(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(other[e321]) * self.group0().xyz() * Simd32x3::from(-1.0),
            // e15, e25, e35
            (other.group0().yzx() * self.group0().zxy()) - (other.group0().zxy() * self.group0().yzx()),
        );
        let right_anti_dual = FlatPoint::from_groups(/* e15, e25, e35, e45 */ other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]));
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([right_anti_dual[e45], right_anti_dual[e45], right_anti_dual[e45], 1.0])
                * anti_wedge
                    .group0()
                    .with_w(-(anti_wedge[e23] * right_anti_dual[e15]) - (anti_wedge[e31] * right_anti_dual[e25]) - (anti_wedge[e12] * right_anti_dual[e35])),
        );
    }
}
impl RejectOrthogonallyFrom<AntiFlector> for Plane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        9        0
    //    simd3        1        2        0
    //    simd4        1        6        0
    // Totals...
    // yes simd        6       17        0
    //  no simd       11       39        0
    fn reject_orthogonally_from(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([self[e4235], self[e4315], self[e4125], 1.0])
                * other.group0().www().with_w((other[e1] * self[e4235]) + (other[e2] * self[e4315]) + (other[e3] * self[e4125]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, e3215
            ((other.group0().yzx() * self.group0().zxy()) - (other.group0().zxy() * self.group0().yzx())).with_w(0.0),
        );
        let right_anti_dual = Flector::from_groups(
            // e15, e25, e35, e45
            other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                anti_wedge[scalar] * right_anti_dual[e4235],
                anti_wedge[scalar] * right_anti_dual[e4315],
                anti_wedge[scalar] * right_anti_dual[e4125],
                -(anti_wedge[e23] * right_anti_dual[e15]) - (anti_wedge[e31] * right_anti_dual[e25]) - (anti_wedge[e12] * right_anti_dual[e35]),
            ]) + (anti_wedge.group0() * right_anti_dual.group0().www().with_w(right_anti_dual[e3215])),
        );
    }
}
impl RejectOrthogonallyFrom<AntiLine> for Plane {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2       10        0
    //    simd3        0        2        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        4       14        0
    //  no simd       10       24        0
    fn reject_orthogonally_from(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiPlane::from_groups(
            // e1, e2, e3, e5
            Simd32x4::from([
                other[e12] * self[e4315],
                other[e23] * self[e4125],
                other[e31] * self[e4235],
                -(other[e25] * self[e4315]) - (other[e35] * self[e4125]),
            ]) - (self.group0().zxyx() * other.group0().yzx().with_w(other[e15])),
        );
        let right_anti_dual = Line::from_groups(
            // e415, e425, e435
            other.group0() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group1() * Simd32x3::from(-1.0),
        );
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                anti_wedge[e3] * right_anti_dual[e425],
                anti_wedge[e1] * right_anti_dual[e435],
                anti_wedge[e2] * right_anti_dual[e415],
                -(anti_wedge[e2] * right_anti_dual[e315]) - (anti_wedge[e3] * right_anti_dual[e125]),
            ]) - (anti_wedge.group0().yzxx() * right_anti_dual.group0().zxy().with_w(right_anti_dual[e235])),
        );
    }
}
impl RejectOrthogonallyFrom<AntiMotor> for Plane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        8        0
    //    simd3        0        1        0
    //    simd4        3       10        0
    // Totals...
    // yes simd        5       19        0
    //  no simd       14       51        0
    fn reject_orthogonally_from(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x3::from(1.0).with_w(0.0) * other.group1().www().with_w(0.0) * self.group0().xyz().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
            // e1, e2, e3, e5
            Simd32x4::from([
                other[e12] * self[e4315],
                other[e23] * self[e4125],
                other[e31] * self[e4235],
                -(other[e25] * self[e4315]) - (other[e35] * self[e4125]),
            ]) - (self.group0().zxyx() * other.group0().yzx().with_w(other[e15])),
        );
        let right_anti_dual = Motor::from_groups(
            // e415, e425, e435, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x3::from(1.0).with_w(0.0) * right_anti_dual.group1().www().with_w(0.0) * anti_wedge.group1().xyz().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
            // e4235, e4315, e4125, e3215
            Simd32x3::from(0.0).with_w(-(anti_wedge[e2] * right_anti_dual[e315]) - (anti_wedge[e3] * right_anti_dual[e125]))
                + (anti_wedge.group1().zxy() * right_anti_dual.group0().yzx()).with_w(anti_wedge[e321] * right_anti_dual[e5])
                - (anti_wedge.group1().yzxx() * right_anti_dual.group0().zxy().with_w(right_anti_dual[e235])),
        );
    }
}
impl RejectOrthogonallyFrom<AntiPlane> for Plane {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        4        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        2        5        0
    //  no simd        2        8        0
    fn reject_orthogonally_from(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from((other[e1] * self[e4235]) + (other[e2] * self[e4315]) + (other[e3] * self[e4125])) * Simd32x4::from([other[e1], other[e2], other[e3], other[e5] * -1.0]),
        );
    }
}
impl RejectOrthogonallyFrom<AntiScalar> for Plane {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        5        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0        9        0
    fn reject_orthogonally_from(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e12345] * -1.0)
                * Simd32x4::from([other[e12345] * self[e4235], other[e12345] * self[e4315], other[e12345] * self[e4125], other[e12345] * self[e3215]]),
        );
    }
}
impl RejectOrthogonallyFrom<Circle> for Plane {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       29        0
    //    simd3        3        7        0
    //    simd4        3        2        0
    // Totals...
    // yes simd       24       38        0
    //  no simd       39       58        0
    fn reject_orthogonally_from(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Dipole::from_groups(
            // e41, e42, e43
            (other.group0().zxy() * self.group0().yzx()) - (other.group0().yzx() * self.group0().zxy()),
            // e23, e31, e12, e45
            Simd32x4::from([
                other[e423] * self[e3215],
                other[e431] * self[e3215],
                other[e412] * self[e3215],
                -(other[e425] * self[e4315]) - (other[e435] * self[e4125]),
            ]) - (other.group1().wwwx() * self.group0().xyzx()),
            // e15, e25, e35
            (Simd32x3::from(self[e3215]) * other.group1().xyz()) + (other.group2().yzx() * self.group0().zxy()) - (other.group2().zxy() * self.group0().yzx()),
        );
        let right_anti_dual = Dipole::from_groups(
            // e41, e42, e43
            other.group0(),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35
            other.group2(),
        );
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (anti_wedge[e42] * right_anti_dual[e35])
                    + (anti_wedge[e23] * right_anti_dual[e45])
                    + (anti_wedge[e45] * right_anti_dual[e23])
                    + (anti_wedge[e35] * right_anti_dual[e42]),
                (anti_wedge[e43] * right_anti_dual[e15])
                    + (anti_wedge[e31] * right_anti_dual[e45])
                    + (anti_wedge[e45] * right_anti_dual[e31])
                    + (anti_wedge[e15] * right_anti_dual[e43]),
                (anti_wedge[e41] * right_anti_dual[e25])
                    + (anti_wedge[e12] * right_anti_dual[e45])
                    + (anti_wedge[e45] * right_anti_dual[e12])
                    + (anti_wedge[e25] * right_anti_dual[e41]),
                -(anti_wedge[e23] * right_anti_dual[e15])
                    - (anti_wedge[e31] * right_anti_dual[e25])
                    - (anti_wedge[e12] * right_anti_dual[e35])
                    - (anti_wedge[e35] * right_anti_dual[e12]),
            ]) - (anti_wedge.group0().zxy() * right_anti_dual.group2().yzx()).with_w(anti_wedge[e15] * right_anti_dual[e23])
                - (anti_wedge.group2().yzx() * right_anti_dual.group0().zxy()).with_w(anti_wedge[e25] * right_anti_dual[e31]),
            // e1234
            -(anti_wedge[e41] * right_anti_dual[e23])
                - (anti_wedge[e42] * right_anti_dual[e31])
                - (anti_wedge[e43] * right_anti_dual[e12])
                - (anti_wedge[e23] * right_anti_dual[e41])
                - (anti_wedge[e31] * right_anti_dual[e42])
                - (anti_wedge[e12] * right_anti_dual[e43]),
        );
    }
}
impl RejectOrthogonallyFrom<CircleRotor> for Plane {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       30        0
    //    simd3        1        8        0
    //    simd4        6        7        0
    // Totals...
    // yes simd       26       45        0
    //  no simd       46       82        0
    fn reject_orthogonally_from(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = DipoleInversion::from_groups(
            // e41, e42, e43
            (other.group0().zxy() * self.group0().yzx()) - (other.group0().yzx() * self.group0().zxy()),
            // e23, e31, e12, e45
            Simd32x4::from([
                other[e423] * self[e3215],
                other[e431] * self[e3215],
                other[e412] * self[e3215],
                -(other[e425] * self[e4315]) - (other[e435] * self[e4125]),
            ]) - (other.group1().wwwx() * self.group0().xyzx()),
            // e15, e25, e35, e1234
            (Simd32x3::from(self[e3215]) * other.group1().xyz()).with_w(0.0) + (other.group2().yzx() * self.group0().zxy()).with_w(0.0)
                - (other.group2().zxy() * self.group0().yzx()).with_w(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e12345]) * self.group0(),
        );
        let right_anti_dual = AntiCircleRotor::from_groups(
            // e41, e42, e43
            other.group0(),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, scalar
            other.group2() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from([anti_wedge[e15], anti_wedge[e25], anti_wedge[e35], 1.0])
                * right_anti_dual.group2().www().with_w(
                    (right_anti_dual[scalar] * anti_wedge[e1234])
                        - (right_anti_dual[e41] * anti_wedge[e23])
                        - (right_anti_dual[e42] * anti_wedge[e31])
                        - (right_anti_dual[e43] * anti_wedge[e12])
                        - (right_anti_dual[e23] * anti_wedge[e41])
                        - (right_anti_dual[e31] * anti_wedge[e42])
                        - (right_anti_dual[e12] * anti_wedge[e43]),
                ),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (right_anti_dual[e23] * anti_wedge[e45])
                    + (right_anti_dual[e45] * anti_wedge[e23])
                    + (right_anti_dual[e35] * anti_wedge[e42])
                    + (right_anti_dual[scalar] * anti_wedge[e4235]),
                (right_anti_dual[e31] * anti_wedge[e45])
                    + (right_anti_dual[e45] * anti_wedge[e31])
                    + (right_anti_dual[e15] * anti_wedge[e43])
                    + (right_anti_dual[scalar] * anti_wedge[e4315]),
                (right_anti_dual[e12] * anti_wedge[e45])
                    + (right_anti_dual[e45] * anti_wedge[e12])
                    + (right_anti_dual[e25] * anti_wedge[e41])
                    + (right_anti_dual[scalar] * anti_wedge[e4125]),
                -(right_anti_dual[e12] * anti_wedge[e35])
                    - (right_anti_dual[e15] * anti_wedge[e23])
                    - (right_anti_dual[e25] * anti_wedge[e31])
                    - (right_anti_dual[e35] * anti_wedge[e12]),
            ]) + (right_anti_dual.group0().yzx() * anti_wedge.group2().zxy()).with_w(right_anti_dual[scalar] * anti_wedge[e3215])
                - (anti_wedge.group2().yzxx() * right_anti_dual.group0().zxy().with_w(right_anti_dual[e23]))
                - (anti_wedge.group0().zxy() * right_anti_dual.group2().yzx()).with_w(right_anti_dual[e31] * anti_wedge[e25]),
        );
    }
}
impl RejectOrthogonallyFrom<Dipole> for Plane {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       24        0
    //    simd3        0        2        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       17       30        0
    //  no simd       26       46        0
    fn reject_orthogonally_from(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = RoundPoint::from_groups(
            // e1, e2, e3, e4
            Simd32x4::from([
                -(other[e41] * self[e3215]) - (other[e31] * self[e4125]),
                -(other[e42] * self[e3215]) - (other[e12] * self[e4235]),
                -(other[e43] * self[e3215]) - (other[e23] * self[e4315]),
                (other[e42] * self[e4315]) + (other[e43] * self[e4125]),
            ]) + (self.group0().yzxx() * other.group1().zxy().with_w(other[e41])),
            // e5
            -(other[e45] * self[e3215]) - (other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]),
        );
        let right_anti_dual = Circle::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125
            other.group2() * Simd32x3::from(-1.0),
        );
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (right_anti_dual[e425] * anti_wedge[e3]) + (right_anti_dual[e235] * anti_wedge[e4]),
                (right_anti_dual[e435] * anti_wedge[e1]) + (right_anti_dual[e315] * anti_wedge[e4]),
                (right_anti_dual[e415] * anti_wedge[e2]) + (right_anti_dual[e125] * anti_wedge[e4]),
                -(right_anti_dual[e321] * anti_wedge[e5]) - (right_anti_dual[e125] * anti_wedge[e3]),
            ]) - (Simd32x4::from([anti_wedge[e5], anti_wedge[e5], anti_wedge[e5], anti_wedge[e1]]) * right_anti_dual.group0().with_w(right_anti_dual[e235]))
                - (anti_wedge.group0().yzxy() * right_anti_dual.group1().zxy().with_w(right_anti_dual[e315])),
            // e1234
            (right_anti_dual[e423] * anti_wedge[e1])
                + (right_anti_dual[e431] * anti_wedge[e2])
                + (right_anti_dual[e412] * anti_wedge[e3])
                + (right_anti_dual[e321] * anti_wedge[e4]),
        );
    }
}
impl RejectOrthogonallyFrom<DipoleInversion> for Plane {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       25        0
    //    simd3        2       11        0
    //    simd4       13       14        0
    // Totals...
    // yes simd       22       50        0
    //  no simd       65      114        0
    fn reject_orthogonally_from(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[e1234]) * self.group0().xyz() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            ((other.group3().yzx() * self.group0().zxy()) - (other.group3().zxy() * self.group0().yzx())).with_w(other[e1234] * self[e3215] * -1.0),
            // e235, e315, e125, e4
            Simd32x4::from([
                other[e4235] * self[e3215] * -1.0,
                other[e4315] * self[e3215] * -1.0,
                other[e4125] * self[e3215] * -1.0,
                (other[e42] * self[e4315]) + (other[e43] * self[e4125]),
            ]) + (self.group0().xyzx() * other.group3().www().with_w(other[e41])),
            // e1, e2, e3, e5
            Simd32x4::from([
                other[e12] * self[e4315],
                other[e23] * self[e4125],
                other[e31] * self[e4235],
                -(other[e25] * self[e4315]) - (other[e35] * self[e4125]),
            ]) - (Simd32x4::from(self[e3215]) * other.group0().with_w(other[e45]))
                - (self.group0().zxyx() * other.group1().yzx().with_w(other[e15])),
        );
        let right_anti_dual = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e4
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group3() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group3().xyz()) - (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group3().xyz()),
            // e23, e31, e12, e45
            (right_anti_dual.group3().zxyw() * anti_wedge.group3().yzx().with_w(anti_wedge[e4]))
                - (anti_wedge.group3().zxyw() * right_anti_dual.group3().yzx().with_w(right_anti_dual[e4])),
            // e15, e25, e35, e1234
            Simd32x3::from(0.0).with_w(
                (anti_wedge[e4] * right_anti_dual[e321]) + (anti_wedge[e2] * right_anti_dual[e431]) + (anti_wedge[e3] * right_anti_dual[e412])
                    - (anti_wedge[e431] * right_anti_dual[e2])
                    - (anti_wedge[e412] * right_anti_dual[e3])
                    - (anti_wedge[e321] * right_anti_dual[e4]),
            ) + (right_anti_dual.group3().www() * anti_wedge.group3().xyz()).with_w(anti_wedge[e1] * right_anti_dual[e423])
                - (right_anti_dual.group3().xyzx() * anti_wedge.group3().www().with_w(anti_wedge[e423])),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(right_anti_dual[e5]) * anti_wedge.group0().with_w(anti_wedge[e321]))
                + (anti_wedge.group2().wwwy() * right_anti_dual.group2().xyz().with_w(right_anti_dual[e2]))
                + (right_anti_dual.group3().yzxx() * anti_wedge.group1().zxy().with_w(anti_wedge[e235]))
                + (anti_wedge.group3().zxy() * right_anti_dual.group1().yzx()).with_w(anti_wedge[e125] * right_anti_dual[e3])
                - (anti_wedge.group3().yzxw() * right_anti_dual.group1().zxyw())
                - (right_anti_dual.group2().wwwz() * anti_wedge.group2().xyz().with_w(anti_wedge[e3]))
                - (right_anti_dual.group0() * anti_wedge.group3().www()).with_w(anti_wedge[e1] * right_anti_dual[e235])
                - (anti_wedge.group1().yzx() * right_anti_dual.group3().zxy()).with_w(anti_wedge[e2] * right_anti_dual[e315]),
        );
    }
}
impl RejectOrthogonallyFrom<DualNum> for Plane {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        5        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0        9        0
    fn reject_orthogonally_from(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e12345] * -1.0)
                * Simd32x4::from([other[e12345] * self[e4235], other[e12345] * self[e4315], other[e12345] * self[e4125], other[e12345] * self[e3215]]),
        );
    }
}
impl RejectOrthogonallyFrom<FlatPoint> for Plane {
    type Output = AntiDualNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        7        0
    //    simd2        0        1        0
    // Totals...
    // yes simd        3        8        0
    //  no simd        3        9        0
    fn reject_orthogonally_from(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiDualNum::from_groups(
            // e3215, scalar
            Simd32x2::from([
                -(f32::powi(other[e45], 2) * self[e3215])
                    - (other[e15] * other[e45] * self[e4235])
                    - (other[e25] * other[e45] * self[e4315])
                    - (other[e35] * other[e45] * self[e4125]),
                1.0,
            ]) * Simd32x2::from([-1.0, 0.0]),
        );
    }
}
impl RejectOrthogonallyFrom<Flector> for Plane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        9        0
    //    simd3        1        3        0
    //    simd4        3        7        0
    // Totals...
    // yes simd        7       19        0
    //  no simd       18       46        0
    fn reject_orthogonally_from(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Motor::from_groups(
            // e415, e425, e435, e12345
            ((other.group1().yzx() * self.group0().zxy()) - (other.group1().zxy() * self.group0().yzx())).with_w(0.0),
            // e235, e315, e125, e5
            Simd32x4::from([
                other[e3215] * self[e4235],
                other[e3215] * self[e4315],
                other[e3215] * self[e4125],
                -(other[e25] * self[e4315]) - (other[e35] * self[e4125]) - (other[e45] * self[e3215]),
            ]) - (self.group0().wwwx() * other.group1().xyz().with_w(other[e15])),
        );
        let right_anti_dual = AntiFlector::from_groups(
            // e235, e315, e125, e321
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x3::from(1.0).with_w(0.0) * anti_wedge.group1().www().with_w(0.0) * right_anti_dual.group1().xyz().with_w(0.0) * Simd32x4::from([-1.0, -1.0, -1.0, 0.0]),
            // e4235, e4315, e4125, e3215
            (right_anti_dual.group1().yzxx() * anti_wedge.group0().zxy().with_w(anti_wedge[e235]))
                + Simd32x3::from(0.0).with_w((right_anti_dual[e2] * anti_wedge[e315]) + (right_anti_dual[e3] * anti_wedge[e125]))
                - (right_anti_dual.group1().zxy() * anti_wedge.group0().yzx()).with_w(right_anti_dual[e321] * anti_wedge[e5]),
        );
    }
}
impl RejectOrthogonallyFrom<Line> for Plane {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       11        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        7       13        0
    //  no simd       10       19        0
    fn reject_orthogonally_from(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = FlatPoint::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e415] * self[e3215]) + (other[e315] * self[e4125]),
                (other[e425] * self[e3215]) + (other[e125] * self[e4235]),
                (other[e435] * self[e3215]) + (other[e235] * self[e4315]),
                -(other[e425] * self[e4315]) - (other[e435] * self[e4125]),
            ]) - (self.group0().yzxx() * other.group1().zxy().with_w(other[e415])),
        );
        let right_anti_dual = AntiLine::from_groups(/* e23, e31, e12 */ other.group0(), /* e15, e25, e35 */ other.group1());
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([anti_wedge[e45], anti_wedge[e45], anti_wedge[e45], 1.0])
                * right_anti_dual
                    .group0()
                    .with_w(-(right_anti_dual[e23] * anti_wedge[e15]) - (right_anti_dual[e31] * anti_wedge[e25]) - (right_anti_dual[e12] * anti_wedge[e35])),
        );
    }
}
impl RejectOrthogonallyFrom<Motor> for Plane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       14        0
    //    simd4        2        6        0
    // Totals...
    // yes simd        8       20        0
    //  no simd       14       38        0
    fn reject_orthogonally_from(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e415] * self[e3215]) + (other[e315] * self[e4125]),
                (other[e425] * self[e3215]) + (other[e125] * self[e4235]),
                (other[e435] * self[e3215]) + (other[e235] * self[e4315]),
                -(other[e425] * self[e4315]) - (other[e435] * self[e4125]),
            ]) - (self.group0().yzxx() * other.group1().zxy().with_w(other[e415])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e12345]) * self.group0(),
        );
        let right_anti_dual = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e3215
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group0(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                right_anti_dual[scalar] * anti_wedge[e4235],
                right_anti_dual[scalar] * anti_wedge[e4315],
                right_anti_dual[scalar] * anti_wedge[e4125],
                -(right_anti_dual[e23] * anti_wedge[e15]) - (right_anti_dual[e31] * anti_wedge[e25]) - (right_anti_dual[e12] * anti_wedge[e35]),
            ]) + (right_anti_dual.group0() * anti_wedge.group0().www().with_w(anti_wedge[e3215])),
        );
    }
}
impl RejectOrthogonallyFrom<MultiVector> for Plane {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       85      119        0
    //    simd2        0        1        0
    //    simd3       24       44        0
    //    simd4       22       20        0
    // Totals...
    // yes simd      131      184        0
    //  no simd      245      333        0
    fn reject_orthogonally_from(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([(other[e1] * self[e4235]) + (other[e2] * self[e4315]) + (other[e3] * self[e4125]) + (other[e4] * self[e3215]), 0.0]),
            // e1, e2, e3, e4
            Simd32x4::from([
                -(other[e41] * self[e3215]) - (other[e31] * self[e4125]),
                -(other[e42] * self[e3215]) - (other[e12] * self[e4235]),
                -(other[e43] * self[e3215]) - (other[e23] * self[e4315]),
                (other[e42] * self[e4315]) + (other[e43] * self[e4125]),
            ]) + (self.group0().yzxx() * other.group5().zxy().with_w(other[e41])),
            // e5
            -(other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]) - (other[e45] * self[e3215]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e415] * self[e3215]) + (other[e315] * self[e4125]),
                (other[e425] * self[e3215]) + (other[e125] * self[e4235]),
                (other[e435] * self[e3215]) + (other[e235] * self[e4315]),
                -(other[e425] * self[e4315]) - (other[e435] * self[e4125]),
            ]) - (self.group0().yzxx() * other.group8().zxy().with_w(other[e415])),
            // e41, e42, e43
            (other.group7().zxy() * self.group0().yzx()) - (other.group7().yzx() * self.group0().zxy()),
            // e23, e31, e12
            (Simd32x3::from(self[e3215]) * other.group7()) - (Simd32x3::from(other[e321]) * self.group0().xyz()),
            // e415, e425, e435, e321
            ((other.group9().yzx() * self.group0().zxy()) - (other.group9().zxy() * self.group0().yzx())).with_w(other[e1234] * self[e3215] * -1.0),
            // e423, e431, e412
            Simd32x3::from(other[e1234]) * self.group0().xyz() * Simd32x3::from(-1.0),
            // e235, e315, e125
            (Simd32x3::from(other[e3215]) * self.group0().xyz()) - (Simd32x3::from(self[e3215]) * other.group9().xyz()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e12345]) * self.group0(),
            // e1234
            0.0,
        );
        let right_anti_dual = MultiVector::from_groups(
            // scalar, e12345
            other.group0().yx() * Simd32x2::from([-1.0, 1.0]),
            // e1, e2, e3, e4
            other.group9().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e5
            other[e3215],
            // e15, e25, e35, e45
            other.group8().with_w(other[e321] * -1.0),
            // e41, e42, e43
            other.group7(),
            // e23, e31, e12
            other.group6().xyz(),
            // e415, e425, e435, e321
            other.group5().with_w(other[e45]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e423, e431, e412
            other.group4() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group3().xyz() * Simd32x3::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group1().xyz().with_w(other[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1234
            other[e4] * -1.0,
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                anti_wedge[scalar] * right_anti_dual[scalar],
                (anti_wedge[scalar] * right_anti_dual[e12345])
                    + (anti_wedge[e12345] * right_anti_dual[scalar])
                    + (anti_wedge[e1] * right_anti_dual[e4235])
                    + (anti_wedge[e2] * right_anti_dual[e4315])
                    + (anti_wedge[e3] * right_anti_dual[e4125])
                    + (anti_wedge[e4] * right_anti_dual[e3215])
                    + (anti_wedge[e5] * right_anti_dual[e1234])
                    + (anti_wedge[e4235] * right_anti_dual[e1])
                    + (anti_wedge[e4315] * right_anti_dual[e2])
                    + (anti_wedge[e4125] * right_anti_dual[e3])
                    + (anti_wedge[e3215] * right_anti_dual[e4])
                    + (anti_wedge[e1234] * right_anti_dual[e5])
                    - (anti_wedge[e15] * right_anti_dual[e423])
                    - (anti_wedge[e25] * right_anti_dual[e431])
                    - (anti_wedge[e35] * right_anti_dual[e412])
                    - (anti_wedge[e45] * right_anti_dual[e321])
                    - (anti_wedge[e41] * right_anti_dual[e235])
                    - (anti_wedge[e42] * right_anti_dual[e315])
                    - (anti_wedge[e43] * right_anti_dual[e125])
                    - (anti_wedge[e23] * right_anti_dual[e415])
                    - (anti_wedge[e31] * right_anti_dual[e425])
                    - (anti_wedge[e12] * right_anti_dual[e435])
                    - (anti_wedge[e415] * right_anti_dual[e23])
                    - (anti_wedge[e425] * right_anti_dual[e31])
                    - (anti_wedge[e435] * right_anti_dual[e12])
                    - (anti_wedge[e321] * right_anti_dual[e45])
                    - (anti_wedge[e423] * right_anti_dual[e15])
                    - (anti_wedge[e431] * right_anti_dual[e25])
                    - (anti_wedge[e412] * right_anti_dual[e35])
                    - (anti_wedge[e235] * right_anti_dual[e41])
                    - (anti_wedge[e315] * right_anti_dual[e42])
                    - (anti_wedge[e125] * right_anti_dual[e43]),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1()) + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1()),
            // e5
            (anti_wedge[scalar] * right_anti_dual[e5]) + (anti_wedge[e5] * right_anti_dual[scalar]),
            // e15, e25, e35, e45
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group3())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group3())
                + (Simd32x4::from(right_anti_dual[e5]) * anti_wedge.group1())
                - (Simd32x4::from(anti_wedge[e5]) * right_anti_dual.group1()),
            // e41, e42, e43
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group4())
                + (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group1().xyz())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group4())
                - (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group1().xyz()),
            // e23, e31, e12
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group5())
                + (anti_wedge.group1().yzx() * right_anti_dual.group1().zxy())
                - (anti_wedge.group1().zxy() * right_anti_dual.group1().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (anti_wedge[e4] * right_anti_dual[e15])
                    + (anti_wedge[e5] * right_anti_dual[e41])
                    + (anti_wedge[e15] * right_anti_dual[e4])
                    + (anti_wedge[e41] * right_anti_dual[e5]),
                (anti_wedge[e4] * right_anti_dual[e25])
                    + (anti_wedge[e5] * right_anti_dual[e42])
                    + (anti_wedge[e25] * right_anti_dual[e4])
                    + (anti_wedge[e42] * right_anti_dual[e5]),
                (anti_wedge[e4] * right_anti_dual[e35])
                    + (anti_wedge[e5] * right_anti_dual[e43])
                    + (anti_wedge[e35] * right_anti_dual[e4])
                    + (anti_wedge[e43] * right_anti_dual[e5]),
                -(anti_wedge[e1] * right_anti_dual[e23])
                    - (anti_wedge[e2] * right_anti_dual[e31])
                    - (anti_wedge[e3] * right_anti_dual[e12])
                    - (anti_wedge[e12] * right_anti_dual[e3]),
            ]) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group6())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group6())
                - (right_anti_dual.group1().xyzy() * anti_wedge.group3().www().with_w(anti_wedge[e31]))
                - (right_anti_dual.group3().www() * anti_wedge.group1().xyz()).with_w(anti_wedge[e23] * right_anti_dual[e1]),
            // e423, e431, e412
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group7())
                + (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group7())
                + (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group5())
                + (anti_wedge.group4().yzx() * right_anti_dual.group1().zxy())
                + (right_anti_dual.group4().yzx() * anti_wedge.group1().zxy())
                - (anti_wedge.group4().zxy() * right_anti_dual.group1().yzx())
                - (right_anti_dual.group4().zxy() * anti_wedge.group1().yzx()),
            // e235, e315, e125
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group8())
                + (Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group8())
                + (Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group5())
                + (anti_wedge.group1().yzx() * right_anti_dual.group3().zxy())
                + (anti_wedge.group3().zxy() * right_anti_dual.group1().yzx())
                - (anti_wedge.group1().zxy() * right_anti_dual.group3().yzx())
                - (anti_wedge.group3().yzx() * right_anti_dual.group1().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (anti_wedge[e3] * right_anti_dual[e425])
                    + (anti_wedge[e4] * right_anti_dual[e235])
                    + (anti_wedge[e45] * right_anti_dual[e23])
                    + (anti_wedge[e435] * right_anti_dual[e2]),
                (anti_wedge[e1] * right_anti_dual[e435])
                    + (anti_wedge[e4] * right_anti_dual[e315])
                    + (anti_wedge[e45] * right_anti_dual[e31])
                    + (anti_wedge[e415] * right_anti_dual[e3]),
                (anti_wedge[e2] * right_anti_dual[e415])
                    + (anti_wedge[e4] * right_anti_dual[e125])
                    + (anti_wedge[e45] * right_anti_dual[e12])
                    + (anti_wedge[e425] * right_anti_dual[e1]),
                -(anti_wedge[e1] * right_anti_dual[e235])
                    - (anti_wedge[e2] * right_anti_dual[e315])
                    - (anti_wedge[e3] * right_anti_dual[e125])
                    - (anti_wedge[e5] * right_anti_dual[e321]),
            ]) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group9())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group9())
                + (Simd32x4::from([right_anti_dual[e5], right_anti_dual[e5], right_anti_dual[e5], right_anti_dual[e3]]) * anti_wedge.group7().with_w(anti_wedge[e125]))
                + (anti_wedge.group5() * right_anti_dual.group3().www()).with_w(anti_wedge[e315] * right_anti_dual[e2])
                + (anti_wedge.group4().yzx() * right_anti_dual.group3().zxy()).with_w(anti_wedge[e235] * right_anti_dual[e1])
                + (right_anti_dual.group4().yzx() * anti_wedge.group3().zxy()).with_w(anti_wedge[e321] * right_anti_dual[e5])
                - (Simd32x4::from([anti_wedge[e5], anti_wedge[e5], anti_wedge[e5], anti_wedge[e15]]) * right_anti_dual.group7().with_w(right_anti_dual[e23]))
                - (right_anti_dual.group3().yzxx() * anti_wedge.group4().zxy().with_w(anti_wedge[e23]))
                - (anti_wedge.group8() * right_anti_dual.group1().www()).with_w(anti_wedge[e31] * right_anti_dual[e25])
                - (right_anti_dual.group4().zxy() * anti_wedge.group3().yzx()).with_w(anti_wedge[e12] * right_anti_dual[e35])
                - (anti_wedge.group1().yzx() * right_anti_dual.group6().zxy()).with_w(anti_wedge[e25] * right_anti_dual[e31])
                - (anti_wedge.group6().yzx() * right_anti_dual.group1().zxy()).with_w(anti_wedge[e35] * right_anti_dual[e12]),
            // e1234
            (anti_wedge[scalar] * right_anti_dual[e1234])
                + (anti_wedge[e1] * right_anti_dual[e423])
                + (anti_wedge[e2] * right_anti_dual[e431])
                + (anti_wedge[e3] * right_anti_dual[e412])
                + (anti_wedge[e4] * right_anti_dual[e321])
                + (anti_wedge[e1234] * right_anti_dual[scalar])
                - (anti_wedge[e41] * right_anti_dual[e23])
                - (anti_wedge[e42] * right_anti_dual[e31])
                - (anti_wedge[e43] * right_anti_dual[e12])
                - (anti_wedge[e23] * right_anti_dual[e41])
                - (anti_wedge[e31] * right_anti_dual[e42])
                - (anti_wedge[e12] * right_anti_dual[e43])
                - (anti_wedge[e321] * right_anti_dual[e4])
                - (anti_wedge[e423] * right_anti_dual[e1])
                - (anti_wedge[e431] * right_anti_dual[e2])
                - (anti_wedge[e412] * right_anti_dual[e3]),
        );
    }
}
impl RejectOrthogonallyFrom<Plane> for Plane {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        8        0
    //    simd3        2        4        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        4       14        0
    //  no simd       11       28        0
    fn reject_orthogonally_from(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Line::from_groups(
            // e415, e425, e435
            (other.group0().yzx() * self.group0().zxy()) - (other.group0().zxy() * self.group0().yzx()),
            // e235, e315, e125
            (Simd32x3::from(other[e3215]) * self.group0().xyz()) - (Simd32x3::from(self[e3215]) * other.group0().xyz()),
        );
        let right_anti_dual = AntiPlane::from_groups(/* e1, e2, e3, e5 */ other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]));
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                right_anti_dual[e3] * anti_wedge[e425] * -1.0,
                right_anti_dual[e1] * anti_wedge[e435] * -1.0,
                right_anti_dual[e2] * anti_wedge[e415] * -1.0,
                (right_anti_dual[e2] * anti_wedge[e315]) + (right_anti_dual[e3] * anti_wedge[e125]),
            ]) + (right_anti_dual.group0().yzxx() * anti_wedge.group0().zxy().with_w(anti_wedge[e235])),
        );
    }
}
impl RejectOrthogonallyFrom<RoundPoint> for Plane {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        6        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        3        8        0
    //  no simd        3       14        0
    fn reject_orthogonally_from(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Scalar::from_groups(
            // scalar
            (self[e4235] * other[e1]) + (self[e4315] * other[e2]) + (self[e4125] * other[e3]) + (self[e3215] * other[e4]),
        );
        let right_anti_dual = Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            other.group0().xyz().with_w(other[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1234
            other[e4] * -1.0,
        );
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e1234
            anti_wedge[scalar] * right_anti_dual[e1234],
        );
    }
}
impl RejectOrthogonallyFrom<Sphere> for Plane {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       14        0
    //    simd3        2        6        0
    //    simd4        2        3        0
    // Totals...
    // yes simd       11       23        0
    //  no simd       21       44        0
    fn reject_orthogonally_from(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[e1234]) * self.group0().xyz() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            ((self.group0().zxy() * other.group0().yzx()) - (self.group0().yzx() * other.group0().zxy())).with_w(self[e3215] * other[e1234] * -1.0),
            // e235, e315, e125
            (Simd32x3::from(other[e3215]) * self.group0().xyz()) - (Simd32x3::from(self[e3215]) * other.group0().xyz()),
        );
        let right_anti_dual = RoundPoint::from_groups(
            // e1, e2, e3, e4
            other.group0().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e5
            other[e3215],
        );
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(anti_wedge[e425] * right_anti_dual[e3]) - (anti_wedge[e235] * right_anti_dual[e4]),
                -(anti_wedge[e435] * right_anti_dual[e1]) - (anti_wedge[e315] * right_anti_dual[e4]),
                -(anti_wedge[e415] * right_anti_dual[e2]) - (anti_wedge[e125] * right_anti_dual[e4]),
                (anti_wedge[e321] * right_anti_dual[e5]) + (anti_wedge[e125] * right_anti_dual[e3]),
            ]) + (Simd32x4::from([right_anti_dual[e5], right_anti_dual[e5], right_anti_dual[e5], right_anti_dual[e1]]) * anti_wedge.group0().with_w(anti_wedge[e235]))
                + (right_anti_dual.group0().yzxy() * anti_wedge.group1().zxy().with_w(anti_wedge[e315])),
            // e1234
            -(anti_wedge[e423] * right_anti_dual[e1])
                - (anti_wedge[e431] * right_anti_dual[e2])
                - (anti_wedge[e412] * right_anti_dual[e3])
                - (anti_wedge[e321] * right_anti_dual[e4]),
        );
    }
}
impl RejectOrthogonallyFrom<VersorEven> for Plane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       39        0
    //    simd3        1        7        0
    //    simd4       11       13        0
    // Totals...
    // yes simd       32       59        0
    //  no simd       67      112        0
    fn reject_orthogonally_from(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e4125] * other[e431] * -1.0,
                self[e4235] * other[e412] * -1.0,
                self[e4315] * other[e423] * -1.0,
                (self[e4315] * other[e2]) + (self[e4125] * other[e3]) + (self[e3215] * other[e4]),
            ]) + (self.group0().yzxx() * other.group0().zxy().with_w(other[e1])),
            // e23, e31, e12, e45
            Simd32x4::from([
                self[e3215] * other[e423],
                self[e3215] * other[e431],
                self[e3215] * other[e412],
                -(self[e4315] * other[e425]) - (self[e4125] * other[e435]),
            ]) - (self.group0().xyzx() * other.group1().wwwx()),
            // e15, e25, e35, e1234
            (Simd32x3::from(self[e3215]) * other.group1().xyz()).with_w(0.0) + (self.group0().zxy() * other.group2().yzx()).with_w(0.0)
                - (self.group0().yzx() * other.group2().zxy()).with_w(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e12345]) * self.group0(),
        );
        let right_anti_dual = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e1234
            other.group2().xyz().with_w(other[e4]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            other.group3().xyz().with_w(other[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0().xyz()) + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group0().xyz()))
                .with_w(anti_wedge[scalar] * right_anti_dual[scalar]),
            // e23, e31, e12, e45
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1()) + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1()),
            // e15, e25, e35, e1234
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group2())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group2())
                + Simd32x3::from(0.0).with_w(
                    -(anti_wedge[e41] * right_anti_dual[e23])
                        - (anti_wedge[e42] * right_anti_dual[e31])
                        - (anti_wedge[e43] * right_anti_dual[e12])
                        - (anti_wedge[e23] * right_anti_dual[e41])
                        - (anti_wedge[e31] * right_anti_dual[e42])
                        - (anti_wedge[e12] * right_anti_dual[e43]),
                ),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (anti_wedge[e23] * right_anti_dual[e45])
                    + (anti_wedge[e45] * right_anti_dual[e23])
                    + (anti_wedge[e35] * right_anti_dual[e42])
                    + (anti_wedge[e4235] * right_anti_dual[scalar]),
                (anti_wedge[e31] * right_anti_dual[e45])
                    + (anti_wedge[e45] * right_anti_dual[e31])
                    + (anti_wedge[e15] * right_anti_dual[e43])
                    + (anti_wedge[e4315] * right_anti_dual[scalar]),
                (anti_wedge[e12] * right_anti_dual[e45])
                    + (anti_wedge[e45] * right_anti_dual[e12])
                    + (anti_wedge[e25] * right_anti_dual[e41])
                    + (anti_wedge[e4125] * right_anti_dual[scalar]),
                -(anti_wedge[e12] * right_anti_dual[e35])
                    - (anti_wedge[e15] * right_anti_dual[e23])
                    - (anti_wedge[e25] * right_anti_dual[e31])
                    - (anti_wedge[e35] * right_anti_dual[e12]),
            ]) + (anti_wedge.group0().yzxw() * right_anti_dual.group2().zxy().with_w(right_anti_dual[e3215]))
                + (anti_wedge.group0().www() * right_anti_dual.group3().xyz()).with_w(anti_wedge[e3215] * right_anti_dual[scalar])
                - (right_anti_dual.group2().yzxx() * anti_wedge.group0().zxy().with_w(anti_wedge[e23]))
                - (anti_wedge.group2().yzx() * right_anti_dual.group0().zxy()).with_w(anti_wedge[e31] * right_anti_dual[e25]),
        );
    }
}
impl RejectOrthogonallyFrom<VersorOdd> for Plane {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       26        0
    //    simd3        2       11        0
    //    simd4       13       14        0
    // Totals...
    // yes simd       22       51        0
    //  no simd       65      115        0
    fn reject_orthogonally_from(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[e1234]) * self.group0().xyz() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            ((self.group0().zxy() * other.group3().yzx()) - (self.group0().yzx() * other.group3().zxy())).with_w(self[e3215] * other[e1234] * -1.0),
            // e235, e315, e125, e4
            Simd32x4::from([
                self[e3215] * other[e4235] * -1.0,
                self[e3215] * other[e4315] * -1.0,
                self[e3215] * other[e4125] * -1.0,
                (self[e4315] * other[e42]) + (self[e4125] * other[e43]),
            ]) + (self.group0().xyzx() * other.group3().www().with_w(other[e41])),
            // e1, e2, e3, e5
            Simd32x4::from([
                self[e4315] * other[e12],
                self[e4125] * other[e23],
                self[e4235] * other[e31],
                -(self[e4125] * other[e35]) - (self[e3215] * other[e45]),
            ]) - (self.group0().zxyx() * other.group1().yzx().with_w(other[e15]))
                - (self.group0().wwwy() * other.group0().xyz().with_w(other[e25])),
        );
        let right_anti_dual = VersorEven::from_groups(
            // e423, e431, e412, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            other.group2().xyz().with_w(other[e3215]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e4
            other.group3().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group3().xyz()) - (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group3().xyz()),
            // e23, e31, e12, e45
            (anti_wedge.group3().yzx() * right_anti_dual.group3().zxy()).with_w(anti_wedge[e4] * right_anti_dual[e5])
                - (anti_wedge.group3().zxyw() * right_anti_dual.group3().yzxw()),
            // e15, e25, e35, e1234
            Simd32x3::from(0.0).with_w(
                (anti_wedge[e1] * right_anti_dual[e423]) + (anti_wedge[e2] * right_anti_dual[e431]) + (anti_wedge[e3] * right_anti_dual[e412])
                    - (anti_wedge[e431] * right_anti_dual[e2])
                    - (anti_wedge[e412] * right_anti_dual[e3])
                    - (anti_wedge[e321] * right_anti_dual[e4]),
            ) + (right_anti_dual.group2().www() * anti_wedge.group3().xyz()).with_w(anti_wedge[e4] * right_anti_dual[e321])
                - (right_anti_dual.group3().xyzx() * anti_wedge.group3().www().with_w(anti_wedge[e423])),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(right_anti_dual[e5]) * anti_wedge.group0().with_w(anti_wedge[e321]))
                + (anti_wedge.group2().wwwy() * right_anti_dual.group2().xyz().with_w(right_anti_dual[e2]))
                + (right_anti_dual.group3().yzxx() * anti_wedge.group1().zxy().with_w(anti_wedge[e235]))
                + (anti_wedge.group3().zxy() * right_anti_dual.group1().yzx()).with_w(anti_wedge[e125] * right_anti_dual[e3])
                - (Simd32x4::from(anti_wedge[e5]) * right_anti_dual.group0().xyz().with_w(right_anti_dual[e321]))
                - (anti_wedge.group3().yzxz() * right_anti_dual.group1().zxy().with_w(right_anti_dual[e125]))
                - (anti_wedge.group1().yzx() * right_anti_dual.group3().zxy()).with_w(anti_wedge[e1] * right_anti_dual[e235])
                - (right_anti_dual.group3().www() * anti_wedge.group2().xyz()).with_w(anti_wedge[e2] * right_anti_dual[e315]),
        );
    }
}
impl std::ops::Div<reject_orthogonally_from> for RoundPoint {
    type Output = reject_orthogonally_from_partial<RoundPoint>;
    fn div(self, _rhs: reject_orthogonally_from) -> Self::Output {
        reject_orthogonally_from_partial(self)
    }
}
impl RejectOrthogonallyFrom<AntiDualNum> for RoundPoint {
    type Output = DualNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd2        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        3        0
    fn reject_orthogonally_from(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return DualNum::from_groups(/* e5, e12345 */ Simd32x2::from(other[e3215] * self[e4]) * other.group0());
    }
}
impl RejectOrthogonallyFrom<AntiMotor> for RoundPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        5        0
    //  no simd        0       17        0
    fn reject_orthogonally_from(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Scalar::from_groups(/* scalar */ other[e3215] * self[e4]);
        let right_anti_dual = Motor::from_groups(
            // e415, e425, e435, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e235, e315, e125, e5
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1(),
        );
    }
}
impl RejectOrthogonallyFrom<AntiScalar> for RoundPoint {
    type Output = RoundPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        5        0
    //  no simd        0       11        0
    fn reject_orthogonally_from(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = RoundPoint::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from(other[e12345]) * self.group0(), /* e5 */ other[e12345] * self[e5]);
        let right_anti_dual = Scalar::from_groups(/* scalar */ other[e12345] * -1.0);
        return RoundPoint::from_groups(
            // e1, e2, e3, e4
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group0(),
            // e5
            anti_wedge[e5] * right_anti_dual[scalar],
        );
    }
}
impl RejectOrthogonallyFrom<CircleRotor> for RoundPoint {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       10        0
    //    simd3        4        6        0
    //    simd4        1        5        0
    // Totals...
    // yes simd        9       21        0
    //  no simd       20       48        0
    fn reject_orthogonally_from(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = RoundPoint::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from(other[e12345]) * self.group0(), /* e5 */ other[e12345] * self[e5]);
        let right_anti_dual = AntiCircleRotor::from_groups(
            // e41, e42, e43
            other.group0(),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, scalar
            other.group2() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group1().xyz()) + (right_anti_dual.group0().yzx() * anti_wedge.group0().zxy())
                - (right_anti_dual.group0().zxy() * anti_wedge.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (right_anti_dual[e41] * anti_wedge[e5]) + (right_anti_dual[e15] * anti_wedge[e4]),
                (right_anti_dual[e42] * anti_wedge[e5]) + (right_anti_dual[e25] * anti_wedge[e4]),
                (right_anti_dual[e43] * anti_wedge[e5]) + (right_anti_dual[e35] * anti_wedge[e4]),
                -(right_anti_dual[e31] * anti_wedge[e2]) - (right_anti_dual[e12] * anti_wedge[e3]),
            ]) - (right_anti_dual.group1().wwwx() * anti_wedge.group0().xyzx()),
            // e235, e315, e125, e4
            ((Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group1().xyz()) + (right_anti_dual.group2().zxy() * anti_wedge.group0().yzx())
                - (right_anti_dual.group2().yzx() * anti_wedge.group0().zxy()))
            .with_w(right_anti_dual[scalar] * anti_wedge[e4]),
            // e1, e2, e3, e5
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group0().xyz().with_w(anti_wedge[e5]),
        );
    }
}
impl RejectOrthogonallyFrom<DipoleInversion> for RoundPoint {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        5        0
    //    simd3        0        2        0
    //    simd4        0        6        0
    // Totals...
    // yes simd        4       13        0
    //  no simd        4       35        0
    fn reject_orthogonally_from(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Scalar::from_groups(
            // scalar
            (other[e1234] * self[e5]) + (other[e4235] * self[e1]) + (other[e4315] * self[e2]) + (other[e4125] * self[e3]) + (other[e3215] * self[e4]),
        );
        let right_anti_dual = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e4
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group3() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1(),
            // e235, e315, e125, e4
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group2(),
            // e1, e2, e3, e5
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group3(),
        );
    }
}
impl RejectOrthogonallyFrom<DualNum> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd2        0        1        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0       13        0
    fn reject_orthogonally_from(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = RoundPoint::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from(other[e12345]) * self.group0(), /* e5 */ other[e12345] * self[e5]);
        let right_anti_dual = AntiDualNum::from_groups(/* e3215, scalar */ other.group0() * Simd32x2::from(-1.0));
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x3::from(0.0).with_w(right_anti_dual[e3215] * anti_wedge[e4]),
            // e415, e425, e435, e321
            Simd32x4::from(0.0),
            // e235, e315, e125, e5
            Simd32x3::from(0.0).with_w(right_anti_dual[scalar] * anti_wedge[e5]),
            // e1, e2, e3, e4
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group0(),
        );
    }
}
impl RejectOrthogonallyFrom<Flector> for RoundPoint {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        4        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        3        8        0
    //  no simd        3       20        0
    fn reject_orthogonally_from(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Scalar::from_groups(
            // scalar
            (other[e4235] * self[e1]) + (other[e4315] * self[e2]) + (other[e4125] * self[e3]) + (other[e3215] * self[e4]),
        );
        let right_anti_dual = AntiFlector::from_groups(
            // e235, e315, e125, e321
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e1, e2, e3, e5
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1(),
        );
    }
}
impl RejectOrthogonallyFrom<Motor> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        5        0
    //    simd3        2        3        0
    //    simd4        0        6        0
    // Totals...
    // yes simd        4       14        0
    //  no simd        8       38        0
    fn reject_orthogonally_from(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = RoundPoint::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from(other[e12345]) * self.group0(), /* e5 */ other[e12345] * self[e5]);
        let right_anti_dual = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e3215
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(anti_wedge[e4]) * right_anti_dual.group0().xyz().with_w(right_anti_dual[e3215]),
            // e415, e425, e435, e321
            Simd32x4::from([anti_wedge[e4], anti_wedge[e4], anti_wedge[e4], 1.0])
                * right_anti_dual
                    .group1()
                    .xyz()
                    .with_w(-(right_anti_dual[e23] * anti_wedge[e1]) - (right_anti_dual[e31] * anti_wedge[e2]) - (right_anti_dual[e12] * anti_wedge[e3])),
            // e235, e315, e125, e5
            ((Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group0().xyz()) + (right_anti_dual.group1().zxy() * anti_wedge.group0().yzx())
                - (right_anti_dual.group1().yzx() * anti_wedge.group0().zxy()))
            .with_w(right_anti_dual[scalar] * anti_wedge[e5]),
            // e1, e2, e3, e4
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group0(),
        );
    }
}
impl RejectOrthogonallyFrom<MultiVector> for RoundPoint {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       75       99        0
    //    simd2        0        1        0
    //    simd3       20       34        0
    //    simd4       20       18        0
    // Totals...
    // yes simd      115      152        0
    //  no simd      215      275        0
    fn reject_orthogonally_from(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (other[e4235] * self[e1]) + (other[e4315] * self[e2]) + (other[e4125] * self[e3]) + (other[e3215] * self[e4]) + (other[e1234] * self[e5]),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(other[e12345]) * self.group0(),
            // e5
            other[e12345] * self[e5],
            // e15, e25, e35, e45
            Simd32x4::from(0.0),
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(0.0),
            // e1234
            0.0,
        );
        let right_anti_dual = MultiVector::from_groups(
            // scalar, e12345
            other.group0().yx() * Simd32x2::from([-1.0, 1.0]),
            // e1, e2, e3, e4
            other.group9().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e5
            other[e3215],
            // e15, e25, e35, e45
            other.group8().with_w(other[e321] * -1.0),
            // e41, e42, e43
            other.group7(),
            // e23, e31, e12
            other.group6().xyz(),
            // e415, e425, e435, e321
            other.group5().with_w(other[e45]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e423, e431, e412
            other.group4() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group3().xyz() * Simd32x3::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group1().xyz().with_w(other[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1234
            other[e4] * -1.0,
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                anti_wedge[scalar] * right_anti_dual[scalar],
                (anti_wedge[scalar] * right_anti_dual[e12345])
                    + (anti_wedge[e12345] * right_anti_dual[scalar])
                    + (anti_wedge[e1] * right_anti_dual[e4235])
                    + (anti_wedge[e2] * right_anti_dual[e4315])
                    + (anti_wedge[e3] * right_anti_dual[e4125])
                    + (anti_wedge[e4] * right_anti_dual[e3215])
                    + (anti_wedge[e5] * right_anti_dual[e1234])
                    + (anti_wedge[e4235] * right_anti_dual[e1])
                    + (anti_wedge[e4315] * right_anti_dual[e2])
                    + (anti_wedge[e4125] * right_anti_dual[e3])
                    + (anti_wedge[e3215] * right_anti_dual[e4])
                    + (anti_wedge[e1234] * right_anti_dual[e5])
                    - (anti_wedge[e15] * right_anti_dual[e423])
                    - (anti_wedge[e25] * right_anti_dual[e431])
                    - (anti_wedge[e35] * right_anti_dual[e412])
                    - (anti_wedge[e45] * right_anti_dual[e321])
                    - (anti_wedge[e41] * right_anti_dual[e235])
                    - (anti_wedge[e42] * right_anti_dual[e315])
                    - (anti_wedge[e43] * right_anti_dual[e125])
                    - (anti_wedge[e23] * right_anti_dual[e415])
                    - (anti_wedge[e31] * right_anti_dual[e425])
                    - (anti_wedge[e12] * right_anti_dual[e435])
                    - (anti_wedge[e415] * right_anti_dual[e23])
                    - (anti_wedge[e425] * right_anti_dual[e31])
                    - (anti_wedge[e435] * right_anti_dual[e12])
                    - (anti_wedge[e321] * right_anti_dual[e45])
                    - (anti_wedge[e423] * right_anti_dual[e15])
                    - (anti_wedge[e431] * right_anti_dual[e25])
                    - (anti_wedge[e412] * right_anti_dual[e35])
                    - (anti_wedge[e235] * right_anti_dual[e41])
                    - (anti_wedge[e315] * right_anti_dual[e42])
                    - (anti_wedge[e125] * right_anti_dual[e43]),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1()) + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1()),
            // e5
            (anti_wedge[scalar] * right_anti_dual[e5]) + (anti_wedge[e5] * right_anti_dual[scalar]),
            // e15, e25, e35, e45
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group3())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group3())
                + (Simd32x4::from(right_anti_dual[e5]) * anti_wedge.group1())
                - (Simd32x4::from(anti_wedge[e5]) * right_anti_dual.group1()),
            // e41, e42, e43
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group4())
                + (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group1().xyz())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group4())
                - (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group1().xyz()),
            // e23, e31, e12
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group5())
                + (anti_wedge.group1().yzx() * right_anti_dual.group1().zxy())
                - (anti_wedge.group1().zxy() * right_anti_dual.group1().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (anti_wedge[e4] * right_anti_dual[e15])
                    + (anti_wedge[e5] * right_anti_dual[e41])
                    + (anti_wedge[e15] * right_anti_dual[e4])
                    + (anti_wedge[e41] * right_anti_dual[e5]),
                (anti_wedge[e4] * right_anti_dual[e25])
                    + (anti_wedge[e5] * right_anti_dual[e42])
                    + (anti_wedge[e25] * right_anti_dual[e4])
                    + (anti_wedge[e42] * right_anti_dual[e5]),
                (anti_wedge[e4] * right_anti_dual[e35])
                    + (anti_wedge[e5] * right_anti_dual[e43])
                    + (anti_wedge[e35] * right_anti_dual[e4])
                    + (anti_wedge[e43] * right_anti_dual[e5]),
                -(anti_wedge[e1] * right_anti_dual[e23])
                    - (anti_wedge[e2] * right_anti_dual[e31])
                    - (anti_wedge[e3] * right_anti_dual[e12])
                    - (anti_wedge[e12] * right_anti_dual[e3]),
            ]) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group6())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group6())
                - (right_anti_dual.group1().xyzy() * anti_wedge.group3().www().with_w(anti_wedge[e31]))
                - (right_anti_dual.group3().www() * anti_wedge.group1().xyz()).with_w(anti_wedge[e23] * right_anti_dual[e1]),
            // e423, e431, e412
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group7())
                + (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group7())
                + (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group5())
                + (anti_wedge.group4().yzx() * right_anti_dual.group1().zxy())
                + (right_anti_dual.group4().yzx() * anti_wedge.group1().zxy())
                - (anti_wedge.group4().zxy() * right_anti_dual.group1().yzx())
                - (right_anti_dual.group4().zxy() * anti_wedge.group1().yzx()),
            // e235, e315, e125
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group8())
                + (Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group8())
                + (Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group5())
                + (anti_wedge.group1().yzx() * right_anti_dual.group3().zxy())
                + (anti_wedge.group3().zxy() * right_anti_dual.group1().yzx())
                - (anti_wedge.group1().zxy() * right_anti_dual.group3().yzx())
                - (anti_wedge.group3().yzx() * right_anti_dual.group1().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (anti_wedge[e3] * right_anti_dual[e425])
                    + (anti_wedge[e4] * right_anti_dual[e235])
                    + (anti_wedge[e45] * right_anti_dual[e23])
                    + (anti_wedge[e435] * right_anti_dual[e2]),
                (anti_wedge[e1] * right_anti_dual[e435])
                    + (anti_wedge[e4] * right_anti_dual[e315])
                    + (anti_wedge[e45] * right_anti_dual[e31])
                    + (anti_wedge[e415] * right_anti_dual[e3]),
                (anti_wedge[e2] * right_anti_dual[e415])
                    + (anti_wedge[e4] * right_anti_dual[e125])
                    + (anti_wedge[e45] * right_anti_dual[e12])
                    + (anti_wedge[e425] * right_anti_dual[e1]),
                -(anti_wedge[e1] * right_anti_dual[e235])
                    - (anti_wedge[e2] * right_anti_dual[e315])
                    - (anti_wedge[e3] * right_anti_dual[e125])
                    - (anti_wedge[e5] * right_anti_dual[e321]),
            ]) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group9())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group9())
                + (Simd32x4::from([right_anti_dual[e5], right_anti_dual[e5], right_anti_dual[e5], right_anti_dual[e3]]) * anti_wedge.group7().with_w(anti_wedge[e125]))
                + (anti_wedge.group5() * right_anti_dual.group3().www()).with_w(anti_wedge[e315] * right_anti_dual[e2])
                + (anti_wedge.group4().yzx() * right_anti_dual.group3().zxy()).with_w(anti_wedge[e235] * right_anti_dual[e1])
                + (right_anti_dual.group4().yzx() * anti_wedge.group3().zxy()).with_w(anti_wedge[e321] * right_anti_dual[e5])
                - (Simd32x4::from([anti_wedge[e5], anti_wedge[e5], anti_wedge[e5], anti_wedge[e15]]) * right_anti_dual.group7().with_w(right_anti_dual[e23]))
                - (right_anti_dual.group3().yzxx() * anti_wedge.group4().zxy().with_w(anti_wedge[e23]))
                - (anti_wedge.group8() * right_anti_dual.group1().www()).with_w(anti_wedge[e31] * right_anti_dual[e25])
                - (right_anti_dual.group4().zxy() * anti_wedge.group3().yzx()).with_w(anti_wedge[e12] * right_anti_dual[e35])
                - (anti_wedge.group1().yzx() * right_anti_dual.group6().zxy()).with_w(anti_wedge[e25] * right_anti_dual[e31])
                - (anti_wedge.group6().yzx() * right_anti_dual.group1().zxy()).with_w(anti_wedge[e35] * right_anti_dual[e12]),
            // e1234
            (anti_wedge[scalar] * right_anti_dual[e1234])
                + (anti_wedge[e1] * right_anti_dual[e423])
                + (anti_wedge[e2] * right_anti_dual[e431])
                + (anti_wedge[e3] * right_anti_dual[e412])
                + (anti_wedge[e4] * right_anti_dual[e321])
                + (anti_wedge[e1234] * right_anti_dual[scalar])
                - (anti_wedge[e41] * right_anti_dual[e23])
                - (anti_wedge[e42] * right_anti_dual[e31])
                - (anti_wedge[e43] * right_anti_dual[e12])
                - (anti_wedge[e23] * right_anti_dual[e41])
                - (anti_wedge[e31] * right_anti_dual[e42])
                - (anti_wedge[e12] * right_anti_dual[e43])
                - (anti_wedge[e321] * right_anti_dual[e4])
                - (anti_wedge[e423] * right_anti_dual[e1])
                - (anti_wedge[e431] * right_anti_dual[e2])
                - (anti_wedge[e412] * right_anti_dual[e3]),
        );
    }
}
impl RejectOrthogonallyFrom<Plane> for RoundPoint {
    type Output = AntiPlane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        7        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        3        8        0
    //  no simd        3       11        0
    fn reject_orthogonally_from(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return AntiPlane::from_groups(
            // e1, e2, e3, e5
            Simd32x4::from((other[e4235] * self[e1]) + (other[e4315] * self[e2]) + (other[e4125] * self[e3]) + (other[e3215] * self[e4]))
                * Simd32x4::from([other[e4235] * -1.0, other[e4315] * -1.0, other[e4125] * -1.0, other[e3215]]),
        );
    }
}
impl RejectOrthogonallyFrom<Sphere> for RoundPoint {
    type Output = RoundPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        6        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        4        8        0
    //  no simd        4       14        0
    fn reject_orthogonally_from(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Scalar::from_groups(
            // scalar
            (self[e1] * other[e4235]) + (self[e2] * other[e4315]) + (self[e3] * other[e4125]) + (self[e4] * other[e3215]) + (self[e5] * other[e1234]),
        );
        let right_anti_dual = RoundPoint::from_groups(
            // e1, e2, e3, e4
            other.group0().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e5
            other[e3215],
        );
        return RoundPoint::from_groups(
            // e1, e2, e3, e4
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e5
            right_anti_dual[e5] * anti_wedge[scalar],
        );
    }
}
impl RejectOrthogonallyFrom<VersorEven> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       19        0
    //    simd3        2        3        0
    //    simd4        3        9        0
    // Totals...
    // yes simd       11       31        0
    //  no simd       24       64        0
    fn reject_orthogonally_from(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = RoundPoint::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from(other[e12345]) * self.group0(), /* e5 */ self[e5] * other[e12345]);
        let right_anti_dual = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e1234
            other.group2().xyz().with_w(other[e4]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            other.group3().xyz().with_w(other[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                anti_wedge[e2] * right_anti_dual[e43] * -1.0,
                anti_wedge[e3] * right_anti_dual[e41] * -1.0,
                anti_wedge[e1] * right_anti_dual[e42] * -1.0,
                (anti_wedge[e3] * right_anti_dual[e4125]) + (anti_wedge[e4] * right_anti_dual[e3215]) + (anti_wedge[e5] * right_anti_dual[e1234]),
            ]) + (anti_wedge.group0().zxyx() * right_anti_dual.group0().yzx().with_w(right_anti_dual[e4235]))
                + (anti_wedge.group0().wwwy() * right_anti_dual.group1().xyz().with_w(right_anti_dual[e4315])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (anti_wedge[e4] * right_anti_dual[e15]) + (anti_wedge[e5] * right_anti_dual[e41]),
                (anti_wedge[e4] * right_anti_dual[e25]) + (anti_wedge[e5] * right_anti_dual[e42]),
                (anti_wedge[e4] * right_anti_dual[e35]) + (anti_wedge[e5] * right_anti_dual[e43]),
                -(anti_wedge[e2] * right_anti_dual[e31]) - (anti_wedge[e3] * right_anti_dual[e12]),
            ]) - (anti_wedge.group0().xyzx() * right_anti_dual.group1().wwwx()),
            // e235, e315, e125, e5
            ((Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group1().xyz()) + (anti_wedge.group0().yzx() * right_anti_dual.group2().zxy())
                - (anti_wedge.group0().zxy() * right_anti_dual.group2().yzx()))
            .with_w(anti_wedge[e5] * right_anti_dual[scalar]),
            // e1, e2, e3, e4
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group0(),
        );
    }
}
impl RejectOrthogonallyFrom<VersorOdd> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        5        0
    //    simd4        0        8        0
    // Totals...
    // yes simd        4       13        0
    //  no simd        4       37        0
    fn reject_orthogonally_from(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Scalar::from_groups(
            // scalar
            (self[e1] * other[e4235]) + (self[e2] * other[e4315]) + (self[e3] * other[e4125]) + (self[e4] * other[e3215]) + (self[e5] * other[e1234]),
        );
        let right_anti_dual = VersorEven::from_groups(
            // e423, e431, e412, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            other.group2().xyz().with_w(other[e3215]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e4
            other.group3().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1(),
            // e235, e315, e125, e5
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group2(),
            // e1, e2, e3, e4
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group3(),
        );
    }
}
impl std::ops::Div<reject_orthogonally_from> for Scalar {
    type Output = reject_orthogonally_from_partial<Scalar>;
    fn div(self, _rhs: reject_orthogonally_from) -> Self::Output {
        reject_orthogonally_from_partial(self)
    }
}
impl RejectOrthogonallyFrom<AntiScalar> for Scalar {
    type Output = Scalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn reject_orthogonally_from(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ f32::powi(other[e12345], 2) * self[scalar] * -1.0);
    }
}
impl RejectOrthogonallyFrom<CircleRotor> for Scalar {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd3        0        1        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0       20        0
    fn reject_orthogonally_from(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Scalar::from_groups(/* scalar */ other[e12345] * self[scalar]);
        let right_anti_dual = AntiCircleRotor::from_groups(
            // e41, e42, e43
            other.group0(),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, scalar
            other.group2() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1(),
            // e15, e25, e35, scalar
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group2(),
        );
    }
}
impl RejectOrthogonallyFrom<DualNum> for Scalar {
    type Output = AntiDualNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd2        0        1        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0        5        0
    fn reject_orthogonally_from(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return AntiDualNum::from_groups(
            // e3215, scalar
            Simd32x2::from(other[e12345] * self[scalar]) * Simd32x2::from([other[e5] * -1.0, other[e12345] * -1.0]),
        );
    }
}
impl RejectOrthogonallyFrom<Motor> for Scalar {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        5        0
    //  no simd        0       17        0
    fn reject_orthogonally_from(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Scalar::from_groups(/* scalar */ other[e12345] * self[scalar]);
        let right_anti_dual = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e3215
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e15, e25, e35, e3215
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1(),
        );
    }
}
impl RejectOrthogonallyFrom<MultiVector> for Scalar {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        5        0
    //    simd2        0        2        0
    //    simd3        0        6        0
    //    simd4        0        7        0
    // Totals...
    // yes simd        0       20        0
    //  no simd        0       55        0
    fn reject_orthogonally_from(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Scalar::from_groups(/* scalar */ other[e12345] * self[scalar]);
        let right_anti_dual = MultiVector::from_groups(
            // scalar, e12345
            other.group0().yx() * Simd32x2::from([-1.0, 1.0]),
            // e1, e2, e3, e4
            other.group9().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e5
            other[e3215],
            // e15, e25, e35, e45
            other.group8().with_w(other[e321] * -1.0),
            // e41, e42, e43
            other.group7(),
            // e23, e31, e12
            other.group6().xyz(),
            // e415, e425, e435, e321
            other.group5().with_w(other[e45]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e423, e431, e412
            other.group4() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group3().xyz() * Simd32x3::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group1().xyz().with_w(other[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1234
            other[e4] * -1.0,
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e1, e2, e3, e4
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1(),
            // e5
            right_anti_dual[e5] * anti_wedge[scalar],
            // e15, e25, e35, e45
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group3(),
            // e41, e42, e43
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group4(),
            // e23, e31, e12
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group5(),
            // e415, e425, e435, e321
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group6(),
            // e423, e431, e412
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group7(),
            // e235, e315, e125
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group8(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group9(),
            // e1234
            right_anti_dual[e1234] * anti_wedge[scalar],
        );
    }
}
impl RejectOrthogonallyFrom<VersorEven> for Scalar {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        8        0
    // Totals...
    // yes simd        0        9        0
    //  no simd        0       33        0
    fn reject_orthogonally_from(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Scalar::from_groups(/* scalar */ self[scalar] * other[e12345]);
        let right_anti_dual = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e1234
            other.group2().xyz().with_w(other[e4]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            other.group3().xyz().with_w(other[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group3(),
        );
    }
}
impl std::ops::Div<reject_orthogonally_from> for Sphere {
    type Output = reject_orthogonally_from_partial<Sphere>;
    fn div(self, _rhs: reject_orthogonally_from) -> Self::Output {
        reject_orthogonally_from_partial(self)
    }
}
impl RejectOrthogonallyFrom<AntiCircleRotor> for Sphere {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       24        0
    //    simd3        0        1        0
    //    simd4        4        6        0
    // Totals...
    // yes simd       18       31        0
    //  no simd       30       51        0
    fn reject_orthogonally_from(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = RoundPoint::from_groups(
            // e1, e2, e3, e4
            Simd32x4::from([
                -(other[e41] * self[e3215]) - (other[e31] * self[e4125]),
                -(other[e42] * self[e3215]) - (other[e12] * self[e4235]),
                -(other[e43] * self[e3215]) - (other[e23] * self[e4315]),
                (other[e43] * self[e4125]) + (other[e45] * self[e1234]),
            ]) + (Simd32x4::from([self[e1234], self[e1234], self[e1234], self[e4315]]) * other.group2().xyz().with_w(other[e42]))
                + (self.group0().yzxx() * other.group1().zxy().with_w(other[e41])),
            // e5
            -(other[e45] * self[e3215]) - (other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]),
        );
        let right_anti_dual = CircleRotor::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e12345
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (right_anti_dual[e425] * anti_wedge[e3]) + (right_anti_dual[e235] * anti_wedge[e4]),
                (right_anti_dual[e435] * anti_wedge[e1]) + (right_anti_dual[e315] * anti_wedge[e4]),
                (right_anti_dual[e415] * anti_wedge[e2]) + (right_anti_dual[e125] * anti_wedge[e4]),
                -(right_anti_dual[e315] * anti_wedge[e2]) - (right_anti_dual[e125] * anti_wedge[e3]),
            ]) - (Simd32x4::from(anti_wedge[e5]) * right_anti_dual.group0().with_w(right_anti_dual[e321]))
                - (anti_wedge.group0().yzxx() * right_anti_dual.group1().zxy().with_w(right_anti_dual[e235])),
            // e1234
            (right_anti_dual[e423] * anti_wedge[e1])
                + (right_anti_dual[e431] * anti_wedge[e2])
                + (right_anti_dual[e412] * anti_wedge[e3])
                + (right_anti_dual[e321] * anti_wedge[e4]),
        );
    }
}
impl RejectOrthogonallyFrom<AntiDipoleInversion> for Sphere {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       42        0
    //    simd3        2        6        0
    //    simd4        6        9        0
    // Totals...
    // yes simd       32       57        0
    //  no simd       54       96        0
    fn reject_orthogonally_from(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiCircleRotor::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[e1234]) * other.group1().xyz()) + (other.group0().zxy() * self.group0().yzx()) - (other.group0().yzx() * self.group0().zxy()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e423] * self[e3215]) + (other[e235] * self[e1234]),
                (other[e431] * self[e3215]) + (other[e315] * self[e1234]),
                (other[e412] * self[e3215]) + (other[e125] * self[e1234]),
                -(other[e425] * self[e4315]) - (other[e435] * self[e4125]),
            ]) - (other.group1().wwwx() * self.group0().xyzx()),
            // e15, e25, e35, scalar
            Simd32x4::from([
                other[e125] * self[e4315] * -1.0,
                other[e235] * self[e4125] * -1.0,
                other[e315] * self[e4235] * -1.0,
                (other[e2] * self[e4315]) + (other[e3] * self[e4125]) + (other[e5] * self[e1234]),
            ]) + (Simd32x4::from(self[e3215]) * other.group1().xyz().with_w(other[e4]))
                + (self.group0().zxyx() * other.group2().yzx().with_w(other[e1])),
        );
        let right_anti_dual = DipoleInversion::from_groups(
            // e41, e42, e43
            other.group0(),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            other.group3() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from([right_anti_dual[e15], right_anti_dual[e25], right_anti_dual[e35], 1.0])
                * anti_wedge.group2().www().with_w(
                    (anti_wedge[scalar] * right_anti_dual[e1234])
                        - (anti_wedge[e41] * right_anti_dual[e23])
                        - (anti_wedge[e42] * right_anti_dual[e31])
                        - (anti_wedge[e43] * right_anti_dual[e12])
                        - (anti_wedge[e23] * right_anti_dual[e41])
                        - (anti_wedge[e31] * right_anti_dual[e42])
                        - (anti_wedge[e12] * right_anti_dual[e43]),
                ),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (anti_wedge[e23] * right_anti_dual[e45])
                    + (anti_wedge[e45] * right_anti_dual[e23])
                    + (anti_wedge[e35] * right_anti_dual[e42])
                    + (anti_wedge[scalar] * right_anti_dual[e4235]),
                (anti_wedge[e31] * right_anti_dual[e45])
                    + (anti_wedge[e45] * right_anti_dual[e31])
                    + (anti_wedge[e15] * right_anti_dual[e43])
                    + (anti_wedge[scalar] * right_anti_dual[e4315]),
                (anti_wedge[e12] * right_anti_dual[e45])
                    + (anti_wedge[e45] * right_anti_dual[e12])
                    + (anti_wedge[e25] * right_anti_dual[e41])
                    + (anti_wedge[scalar] * right_anti_dual[e4125]),
                -(anti_wedge[e12] * right_anti_dual[e35])
                    - (anti_wedge[e15] * right_anti_dual[e23])
                    - (anti_wedge[e25] * right_anti_dual[e31])
                    - (anti_wedge[e35] * right_anti_dual[e12]),
            ]) + (anti_wedge.group0().yzx() * right_anti_dual.group2().zxy()).with_w(anti_wedge[scalar] * right_anti_dual[e3215])
                - (right_anti_dual.group2().yzxx() * anti_wedge.group0().zxy().with_w(anti_wedge[e23]))
                - (right_anti_dual.group0().zxy() * anti_wedge.group2().yzx()).with_w(anti_wedge[e31] * right_anti_dual[e25]),
        );
    }
}
impl RejectOrthogonallyFrom<AntiDualNum> for Sphere {
    type Output = AntiDualNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd2        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        3        0
    fn reject_orthogonally_from(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return AntiDualNum::from_groups(/* e3215, scalar */ Simd32x2::from([f32::powi(other[e3215], 2) * self[e1234], 1.0]) * Simd32x2::from([1.0, 0.0]));
    }
}
impl RejectOrthogonallyFrom<AntiFlatPoint> for Sphere {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        3        0
    //    simd3        2        4        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        4        9        0
    //  no simd        8       23        0
    fn reject_orthogonally_from(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiLine::from_groups(
            // e23, e31, e12
            (Simd32x3::from(self[e1234]) * other.group0().xyz()) - (Simd32x3::from(other[e321]) * self.group0().xyz()),
            // e15, e25, e35
            (other.group0().yzx() * self.group0().zxy()) - (other.group0().zxy() * self.group0().yzx()),
        );
        let right_anti_dual = FlatPoint::from_groups(/* e15, e25, e35, e45 */ other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]));
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([right_anti_dual[e45], right_anti_dual[e45], right_anti_dual[e45], 1.0])
                * anti_wedge
                    .group0()
                    .with_w(-(anti_wedge[e23] * right_anti_dual[e15]) - (anti_wedge[e31] * right_anti_dual[e25]) - (anti_wedge[e12] * right_anti_dual[e35])),
        );
    }
}
impl RejectOrthogonallyFrom<AntiFlector> for Sphere {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       15        0
    //    simd3        1        2        0
    //    simd4        2        5        0
    // Totals...
    // yes simd        7       22        0
    //  no simd       15       41        0
    fn reject_orthogonally_from(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                other[e321] * self[e4235] * -1.0,
                other[e321] * self[e4315] * -1.0,
                other[e321] * self[e4125] * -1.0,
                (other[e2] * self[e4315]) + (other[e3] * self[e4125]) + (other[e5] * self[e1234]),
            ]) + (Simd32x4::from([self[e1234], self[e1234], self[e1234], self[e4235]]) * other.group0().xyz().with_w(other[e1])),
            // e15, e25, e35, e3215
            ((other.group0().yzx() * self.group0().zxy()) - (other.group0().zxy() * self.group0().yzx())).with_w(0.0),
        );
        let right_anti_dual = Flector::from_groups(
            // e15, e25, e35, e45
            other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                anti_wedge[scalar] * right_anti_dual[e4235],
                anti_wedge[scalar] * right_anti_dual[e4315],
                anti_wedge[scalar] * right_anti_dual[e4125],
                -(anti_wedge[e23] * right_anti_dual[e15]) - (anti_wedge[e31] * right_anti_dual[e25]) - (anti_wedge[e12] * right_anti_dual[e35]),
            ]) + (anti_wedge.group0() * right_anti_dual.group0().www().with_w(right_anti_dual[e3215])),
        );
    }
}
impl RejectOrthogonallyFrom<AntiLine> for Sphere {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       13        0
    //    simd3        0        2        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        7       17        0
    //  no simd       13       27        0
    fn reject_orthogonally_from(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiPlane::from_groups(
            // e1, e2, e3, e5
            Simd32x4::from([
                (other[e12] * self[e4315]) + (other[e15] * self[e1234]),
                (other[e23] * self[e4125]) + (other[e25] * self[e1234]),
                (other[e31] * self[e4235]) + (other[e35] * self[e1234]),
                -(other[e25] * self[e4315]) - (other[e35] * self[e4125]),
            ]) - (self.group0().zxyx() * other.group0().yzx().with_w(other[e15])),
        );
        let right_anti_dual = Line::from_groups(
            // e415, e425, e435
            other.group0() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group1() * Simd32x3::from(-1.0),
        );
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                anti_wedge[e3] * right_anti_dual[e425],
                anti_wedge[e1] * right_anti_dual[e435],
                anti_wedge[e2] * right_anti_dual[e415],
                -(anti_wedge[e2] * right_anti_dual[e315]) - (anti_wedge[e3] * right_anti_dual[e125]),
            ]) - (anti_wedge.group0().yzxx() * right_anti_dual.group0().zxy().with_w(right_anti_dual[e235])),
        );
    }
}
impl RejectOrthogonallyFrom<AntiMotor> for Sphere {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       11        0
    //    simd3        0        1        0
    //    simd4        3        8        0
    // Totals...
    // yes simd        8       20        0
    //  no simd       17       46        0
    fn reject_orthogonally_from(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(other[e3215]) * self.group0().xyz().with_w(self[e1234]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other[e12] * self[e4315]) + (other[e15] * self[e1234]),
                (other[e23] * self[e4125]) + (other[e25] * self[e1234]),
                (other[e31] * self[e4235]) + (other[e35] * self[e1234]),
                -(other[e25] * self[e4315]) - (other[e35] * self[e4125]),
            ]) - (self.group0().zxyx() * other.group0().yzx().with_w(other[e15])),
        );
        let right_anti_dual = Motor::from_groups(
            // e415, e425, e435, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x3::from(1.0).with_w(0.0) * right_anti_dual.group1().www().with_w(0.0) * anti_wedge.group1().xyz().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
            // e4235, e4315, e4125, e3215
            Simd32x3::from(0.0).with_w(-(anti_wedge[e2] * right_anti_dual[e315]) - (anti_wedge[e3] * right_anti_dual[e125]))
                + (anti_wedge.group1().zxy() * right_anti_dual.group0().yzx()).with_w(anti_wedge[e321] * right_anti_dual[e5])
                - (anti_wedge.group1().yzxx() * right_anti_dual.group0().zxy().with_w(right_anti_dual[e235])),
        );
    }
}
impl RejectOrthogonallyFrom<AntiPlane> for Sphere {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        5        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        3        6        0
    //  no simd        3        9        0
    fn reject_orthogonally_from(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from((other[e1] * self[e4235]) + (other[e2] * self[e4315]) + (other[e3] * self[e4125]) + (other[e5] * self[e1234]))
                * Simd32x4::from([other[e1], other[e2], other[e3], other[e5] * -1.0]),
        );
    }
}
impl RejectOrthogonallyFrom<AntiScalar> for Sphere {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        5        0
    //  no simd        0       11        0
    fn reject_orthogonally_from(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e12345]) * self.group0(),
            // e1234
            other[e12345] * self[e1234],
        );
        let right_anti_dual = Scalar::from_groups(/* scalar */ other[e12345] * -1.0);
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group0(),
            // e1234
            right_anti_dual[scalar] * anti_wedge[e1234],
        );
    }
}
impl RejectOrthogonallyFrom<Circle> for Sphere {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       21       32        0
    //    simd3        4        8        0
    //    simd4        3        2        0
    // Totals...
    // yes simd       28       42        0
    //  no simd       45       64        0
    fn reject_orthogonally_from(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Dipole::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[e1234]) * other.group1().xyz()) + (other.group0().zxy() * self.group0().yzx()) - (other.group0().yzx() * self.group0().zxy()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e423] * self[e3215]) + (other[e235] * self[e1234]),
                (other[e431] * self[e3215]) + (other[e315] * self[e1234]),
                (other[e412] * self[e3215]) + (other[e125] * self[e1234]),
                -(other[e425] * self[e4315]) - (other[e435] * self[e4125]),
            ]) - (other.group1().wwwx() * self.group0().xyzx()),
            // e15, e25, e35
            (Simd32x3::from(self[e3215]) * other.group1().xyz()) + (other.group2().yzx() * self.group0().zxy()) - (other.group2().zxy() * self.group0().yzx()),
        );
        let right_anti_dual = Dipole::from_groups(
            // e41, e42, e43
            other.group0(),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35
            other.group2(),
        );
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (anti_wedge[e42] * right_anti_dual[e35])
                    + (anti_wedge[e23] * right_anti_dual[e45])
                    + (anti_wedge[e45] * right_anti_dual[e23])
                    + (anti_wedge[e35] * right_anti_dual[e42]),
                (anti_wedge[e43] * right_anti_dual[e15])
                    + (anti_wedge[e31] * right_anti_dual[e45])
                    + (anti_wedge[e45] * right_anti_dual[e31])
                    + (anti_wedge[e15] * right_anti_dual[e43]),
                (anti_wedge[e41] * right_anti_dual[e25])
                    + (anti_wedge[e12] * right_anti_dual[e45])
                    + (anti_wedge[e45] * right_anti_dual[e12])
                    + (anti_wedge[e25] * right_anti_dual[e41]),
                -(anti_wedge[e23] * right_anti_dual[e15])
                    - (anti_wedge[e31] * right_anti_dual[e25])
                    - (anti_wedge[e12] * right_anti_dual[e35])
                    - (anti_wedge[e35] * right_anti_dual[e12]),
            ]) - (anti_wedge.group0().zxy() * right_anti_dual.group2().yzx()).with_w(anti_wedge[e15] * right_anti_dual[e23])
                - (anti_wedge.group2().yzx() * right_anti_dual.group0().zxy()).with_w(anti_wedge[e25] * right_anti_dual[e31]),
            // e1234
            -(anti_wedge[e41] * right_anti_dual[e23])
                - (anti_wedge[e42] * right_anti_dual[e31])
                - (anti_wedge[e43] * right_anti_dual[e12])
                - (anti_wedge[e23] * right_anti_dual[e41])
                - (anti_wedge[e31] * right_anti_dual[e42])
                - (anti_wedge[e12] * right_anti_dual[e43]),
        );
    }
}
impl RejectOrthogonallyFrom<CircleRotor> for Sphere {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       22       34        0
    //    simd3        4        9        0
    //    simd4        4        7        0
    // Totals...
    // yes simd       30       50        0
    //  no simd       50       89        0
    fn reject_orthogonally_from(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[e1234]) * other.group1().xyz()) + (other.group0().zxy() * self.group0().yzx()) - (other.group0().yzx() * self.group0().zxy()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e423] * self[e3215]) + (other[e235] * self[e1234]),
                (other[e431] * self[e3215]) + (other[e315] * self[e1234]),
                (other[e412] * self[e3215]) + (other[e125] * self[e1234]),
                -(other[e425] * self[e4315]) - (other[e435] * self[e4125]),
            ]) - (other.group1().wwwx() * self.group0().xyzx()),
            // e15, e25, e35, e1234
            ((Simd32x3::from(self[e3215]) * other.group1().xyz()) + (other.group2().yzx() * self.group0().zxy()) - (other.group2().zxy() * self.group0().yzx()))
                .with_w(other[e12345] * self[e1234]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e12345]) * self.group0(),
        );
        let right_anti_dual = AntiCircleRotor::from_groups(
            // e41, e42, e43
            other.group0(),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, scalar
            other.group2() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from([anti_wedge[e15], anti_wedge[e25], anti_wedge[e35], 1.0])
                * right_anti_dual.group2().www().with_w(
                    (right_anti_dual[scalar] * anti_wedge[e1234])
                        - (right_anti_dual[e41] * anti_wedge[e23])
                        - (right_anti_dual[e42] * anti_wedge[e31])
                        - (right_anti_dual[e43] * anti_wedge[e12])
                        - (right_anti_dual[e23] * anti_wedge[e41])
                        - (right_anti_dual[e31] * anti_wedge[e42])
                        - (right_anti_dual[e12] * anti_wedge[e43]),
                ),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (right_anti_dual[e23] * anti_wedge[e45])
                    + (right_anti_dual[e45] * anti_wedge[e23])
                    + (right_anti_dual[e35] * anti_wedge[e42])
                    + (right_anti_dual[scalar] * anti_wedge[e4235]),
                (right_anti_dual[e31] * anti_wedge[e45])
                    + (right_anti_dual[e45] * anti_wedge[e31])
                    + (right_anti_dual[e15] * anti_wedge[e43])
                    + (right_anti_dual[scalar] * anti_wedge[e4315]),
                (right_anti_dual[e12] * anti_wedge[e45])
                    + (right_anti_dual[e45] * anti_wedge[e12])
                    + (right_anti_dual[e25] * anti_wedge[e41])
                    + (right_anti_dual[scalar] * anti_wedge[e4125]),
                -(right_anti_dual[e12] * anti_wedge[e35])
                    - (right_anti_dual[e15] * anti_wedge[e23])
                    - (right_anti_dual[e25] * anti_wedge[e31])
                    - (right_anti_dual[e35] * anti_wedge[e12]),
            ]) + (right_anti_dual.group0().yzx() * anti_wedge.group2().zxy()).with_w(right_anti_dual[scalar] * anti_wedge[e3215])
                - (anti_wedge.group2().yzxx() * right_anti_dual.group0().zxy().with_w(right_anti_dual[e23]))
                - (anti_wedge.group0().zxy() * right_anti_dual.group2().yzx()).with_w(right_anti_dual[e31] * anti_wedge[e25]),
        );
    }
}
impl RejectOrthogonallyFrom<Dipole> for Sphere {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       24        0
    //    simd3        0        2        0
    //    simd4        4        5        0
    // Totals...
    // yes simd       18       31        0
    //  no simd       30       50        0
    fn reject_orthogonally_from(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = RoundPoint::from_groups(
            // e1, e2, e3, e4
            Simd32x4::from([
                -(other[e41] * self[e3215]) - (other[e31] * self[e4125]),
                -(other[e42] * self[e3215]) - (other[e12] * self[e4235]),
                -(other[e43] * self[e3215]) - (other[e23] * self[e4315]),
                (other[e43] * self[e4125]) + (other[e45] * self[e1234]),
            ]) + (Simd32x4::from([self[e1234], self[e1234], self[e1234], self[e4235]]) * other.group2().with_w(other[e41]))
                + (self.group0().yzxy() * other.group1().zxy().with_w(other[e42])),
            // e5
            -(other[e45] * self[e3215]) - (other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]),
        );
        let right_anti_dual = Circle::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125
            other.group2() * Simd32x3::from(-1.0),
        );
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (right_anti_dual[e425] * anti_wedge[e3]) + (right_anti_dual[e235] * anti_wedge[e4]),
                (right_anti_dual[e435] * anti_wedge[e1]) + (right_anti_dual[e315] * anti_wedge[e4]),
                (right_anti_dual[e415] * anti_wedge[e2]) + (right_anti_dual[e125] * anti_wedge[e4]),
                -(right_anti_dual[e321] * anti_wedge[e5]) - (right_anti_dual[e125] * anti_wedge[e3]),
            ]) - (Simd32x4::from([anti_wedge[e5], anti_wedge[e5], anti_wedge[e5], anti_wedge[e1]]) * right_anti_dual.group0().with_w(right_anti_dual[e235]))
                - (anti_wedge.group0().yzxy() * right_anti_dual.group1().zxy().with_w(right_anti_dual[e315])),
            // e1234
            (right_anti_dual[e423] * anti_wedge[e1])
                + (right_anti_dual[e431] * anti_wedge[e2])
                + (right_anti_dual[e412] * anti_wedge[e3])
                + (right_anti_dual[e321] * anti_wedge[e4]),
        );
    }
}
impl RejectOrthogonallyFrom<DipoleInversion> for Sphere {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       27        0
    //    simd3        2        9        0
    //    simd4       14       16        0
    // Totals...
    // yes simd       27       52        0
    //  no simd       73      118        0
    fn reject_orthogonally_from(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[e1234]) * other.group3().xyz()) - (Simd32x3::from(other[e1234]) * self.group0().xyz()),
            // e415, e425, e435, e321
            (other.group3().yzxw() * self.group0().zxy().with_w(self[e1234])) - (self.group0().yzxw() * other.group3().zxy().with_w(other[e1234])),
            // e235, e315, e125, e4
            Simd32x4::from([
                other[e4235] * self[e3215] * -1.0,
                other[e4315] * self[e3215] * -1.0,
                other[e4125] * self[e3215] * -1.0,
                (other[e42] * self[e4315]) + (other[e43] * self[e4125]) + (other[e45] * self[e1234]),
            ]) + (self.group0().xyzx() * other.group3().www().with_w(other[e41])),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other[e12] * self[e4315]) + (other[e15] * self[e1234]),
                (other[e23] * self[e4125]) + (other[e25] * self[e1234]),
                (other[e31] * self[e4235]) + (other[e35] * self[e1234]),
                -(other[e25] * self[e4315]) - (other[e35] * self[e4125]),
            ]) - (Simd32x4::from(self[e3215]) * other.group0().with_w(other[e45]))
                - (self.group0().zxyx() * other.group1().yzx().with_w(other[e15])),
        );
        let right_anti_dual = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e4
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group3() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group3().xyz()) - (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group3().xyz()),
            // e23, e31, e12, e45
            (right_anti_dual.group3().zxyw() * anti_wedge.group3().yzx().with_w(anti_wedge[e4]))
                - (anti_wedge.group3().zxyw() * right_anti_dual.group3().yzx().with_w(right_anti_dual[e4])),
            // e15, e25, e35, e1234
            Simd32x3::from(0.0).with_w(
                (anti_wedge[e4] * right_anti_dual[e321]) + (anti_wedge[e2] * right_anti_dual[e431]) + (anti_wedge[e3] * right_anti_dual[e412])
                    - (anti_wedge[e431] * right_anti_dual[e2])
                    - (anti_wedge[e412] * right_anti_dual[e3])
                    - (anti_wedge[e321] * right_anti_dual[e4]),
            ) + (right_anti_dual.group3().www() * anti_wedge.group3().xyz()).with_w(anti_wedge[e1] * right_anti_dual[e423])
                - (right_anti_dual.group3().xyzx() * anti_wedge.group3().www().with_w(anti_wedge[e423])),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(right_anti_dual[e5]) * anti_wedge.group0().with_w(anti_wedge[e321]))
                + (anti_wedge.group2().wwwy() * right_anti_dual.group2().xyz().with_w(right_anti_dual[e2]))
                + (right_anti_dual.group3().yzxx() * anti_wedge.group1().zxy().with_w(anti_wedge[e235]))
                + (anti_wedge.group3().zxy() * right_anti_dual.group1().yzx()).with_w(anti_wedge[e125] * right_anti_dual[e3])
                - (anti_wedge.group3().yzxw() * right_anti_dual.group1().zxyw())
                - (right_anti_dual.group2().wwwz() * anti_wedge.group2().xyz().with_w(anti_wedge[e3]))
                - (right_anti_dual.group0() * anti_wedge.group3().www()).with_w(anti_wedge[e1] * right_anti_dual[e235])
                - (anti_wedge.group1().yzx() * right_anti_dual.group3().zxy()).with_w(anti_wedge[e2] * right_anti_dual[e315]),
        );
    }
}
impl RejectOrthogonallyFrom<DualNum> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        4        0
    //    simd2        0        1        0
    //    simd4        0        5        0
    // Totals...
    // yes simd        1       10        0
    //  no simd        1       26        0
    fn reject_orthogonally_from(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x3::from(0.0).with_w(other[e5] * self[e1234]),
            // e23, e31, e12, e45
            Simd32x4::from(0.0),
            // e15, e25, e35, e1234
            Simd32x3::from(0.0).with_w(other[e12345] * self[e1234]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e12345]) * self.group0(),
        );
        let right_anti_dual = AntiDualNum::from_groups(/* e3215, scalar */ other.group0() * Simd32x2::from(-1.0));
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([anti_wedge[e4235], anti_wedge[e4315], anti_wedge[e4125], 1.0])
                * right_anti_dual
                    .group0()
                    .yy()
                    .with_zw(right_anti_dual[scalar], (right_anti_dual[e3215] * anti_wedge[scalar]) + (right_anti_dual[scalar] * anti_wedge[e3215])),
        );
    }
}
impl RejectOrthogonallyFrom<FlatPoint> for Sphere {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6        9        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        6       12        0
    //  no simd        6       21        0
    fn reject_orthogonally_from(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = RoundPoint::from_groups(
            // e1, e2, e3, e4
            Simd32x4::from(self[e1234]) * other.group0(),
            // e5
            -(other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]) - (other[e45] * self[e3215]),
        );
        let right_anti_dual = AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]));
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([anti_wedge[e4], anti_wedge[e4], anti_wedge[e4], 1.0])
                * right_anti_dual.group0().xyz().with_w(
                    -(right_anti_dual[e235] * anti_wedge[e1])
                        - (right_anti_dual[e315] * anti_wedge[e2])
                        - (right_anti_dual[e125] * anti_wedge[e3])
                        - (right_anti_dual[e321] * anti_wedge[e5]),
                ),
            // e1234
            right_anti_dual[e321] * anti_wedge[e4],
        );
    }
}
impl RejectOrthogonallyFrom<Flector> for Sphere {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       15        0
    //    simd3        3       10        0
    //    simd4        6        7        0
    // Totals...
    // yes simd       16       32        0
    //  no simd       40       73        0
    fn reject_orthogonally_from(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[e1234]) * other.group1().xyz(),
            // e415, e425, e435, e321
            ((other.group1().yzx() * self.group0().zxy()) - (other.group1().zxy() * self.group0().yzx())).with_w(other[e3215] * self[e1234]),
            // e235, e315, e125, e4
            ((Simd32x3::from(other[e3215]) * self.group0().xyz()) - (Simd32x3::from(self[e3215]) * other.group1().xyz())).with_w(other[e45] * self[e1234]),
            // e1, e2, e3, e5
            Simd32x4::from([self[e1234], self[e1234], self[e1234], 1.0])
                * other
                    .group0()
                    .xyz()
                    .with_w(-(other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]) - (other[e45] * self[e3215])),
        );
        let right_anti_dual = AntiFlector::from_groups(
            // e235, e315, e125, e321
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group1().xyz(),
            // e23, e31, e12, e45
            ((anti_wedge.group3().yzx() * right_anti_dual.group1().zxy()) - (anti_wedge.group3().zxy() * right_anti_dual.group1().yzx()))
                .with_w(anti_wedge[e4] * right_anti_dual[e5]),
            // e15, e25, e35, e1234
            Simd32x3::from(0.0).with_w(-(anti_wedge[e431] * right_anti_dual[e2]) - (anti_wedge[e412] * right_anti_dual[e3]))
                + (right_anti_dual.group1().www() * anti_wedge.group3().xyz()).with_w(anti_wedge[e4] * right_anti_dual[e321])
                - (right_anti_dual.group1().xyzx() * anti_wedge.group3().www().with_w(anti_wedge[e423])),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(right_anti_dual[e5]) * anti_wedge.group0().with_w(anti_wedge[e321]))
                + (anti_wedge.group2().wwwy() * right_anti_dual.group0().xyz().with_w(right_anti_dual[e2]))
                + (right_anti_dual.group1().yzxx() * anti_wedge.group1().zxy().with_w(anti_wedge[e235]))
                + Simd32x3::from(0.0).with_w(
                    (anti_wedge[e125] * right_anti_dual[e3])
                        - (anti_wedge[e2] * right_anti_dual[e315])
                        - (anti_wedge[e3] * right_anti_dual[e125])
                        - (anti_wedge[e5] * right_anti_dual[e321]),
                )
                - (anti_wedge.group1().yzx() * right_anti_dual.group1().zxy()).with_w(anti_wedge[e1] * right_anti_dual[e235]),
        );
    }
}
impl RejectOrthogonallyFrom<Line> for Sphere {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       18        0
    //    simd3        2        5        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       14       24        0
    //  no simd       21       37        0
    fn reject_orthogonally_from(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[e1234]) * other.group0(),
            // e23, e31, e12, e45
            Simd32x4::from([self[e1234], self[e1234], self[e1234], 1.0])
                * other.group1().with_w(-(other[e415] * self[e4235]) - (other[e425] * self[e4315]) - (other[e435] * self[e4125])),
            // e15, e25, e35
            (Simd32x3::from(self[e3215]) * other.group0()) + (other.group1().yzx() * self.group0().zxy()) - (other.group1().zxy() * self.group0().yzx()),
        );
        let right_anti_dual = AntiLine::from_groups(/* e23, e31, e12 */ other.group0(), /* e15, e25, e35 */ other.group1());
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (right_anti_dual[e23] * anti_wedge[e45]) + (right_anti_dual[e35] * anti_wedge[e42]),
                (right_anti_dual[e31] * anti_wedge[e45]) + (right_anti_dual[e15] * anti_wedge[e43]),
                (right_anti_dual[e12] * anti_wedge[e45]) + (right_anti_dual[e25] * anti_wedge[e41]),
                -(right_anti_dual[e31] * anti_wedge[e25])
                    - (right_anti_dual[e12] * anti_wedge[e35])
                    - (right_anti_dual[e15] * anti_wedge[e23])
                    - (right_anti_dual[e25] * anti_wedge[e31])
                    - (right_anti_dual[e35] * anti_wedge[e12]),
            ]) - (right_anti_dual.group1().yzx() * anti_wedge.group0().zxy()).with_w(right_anti_dual[e23] * anti_wedge[e15]),
            // e1234
            -(right_anti_dual[e23] * anti_wedge[e41]) - (right_anti_dual[e31] * anti_wedge[e42]) - (right_anti_dual[e12] * anti_wedge[e43]),
        );
    }
}
impl RejectOrthogonallyFrom<Motor> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       21        0
    //    simd3        3        7        0
    //    simd4        4        8        0
    // Totals...
    // yes simd       15       36        0
    //  no simd       33       74        0
    fn reject_orthogonally_from(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(self[e1234]) * other.group0().xyz().with_w(other[e5]),
            // e23, e31, e12, e45
            Simd32x4::from([self[e1234], self[e1234], self[e1234], 1.0])
                * other.group1().xyz().with_w(-(other[e415] * self[e4235]) - (other[e425] * self[e4315]) - (other[e435] * self[e4125])),
            // e15, e25, e35, e1234
            ((Simd32x3::from(self[e3215]) * other.group0().xyz()) + (other.group1().yzx() * self.group0().zxy()) - (other.group1().zxy() * self.group0().yzx()))
                .with_w(other[e12345] * self[e1234]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e12345]) * self.group0(),
        );
        let right_anti_dual = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e3215
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group0(),
            // e23, e31, e12, e45
            ((Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group1().xyz()) + (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0().xyz()))
                .with_w(right_anti_dual[scalar] * anti_wedge[e45]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                right_anti_dual[e15] * anti_wedge[scalar],
                right_anti_dual[e25] * anti_wedge[scalar],
                right_anti_dual[e35] * anti_wedge[scalar],
                -(right_anti_dual[e23] * anti_wedge[e41]) - (right_anti_dual[e31] * anti_wedge[e42]) - (right_anti_dual[e12] * anti_wedge[e43]),
            ]) + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group2()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                right_anti_dual[e35] * anti_wedge[e42],
                right_anti_dual[e15] * anti_wedge[e43],
                right_anti_dual[e25] * anti_wedge[e41],
                -(right_anti_dual[e31] * anti_wedge[e25])
                    - (right_anti_dual[e12] * anti_wedge[e35])
                    - (right_anti_dual[e15] * anti_wedge[e23])
                    - (right_anti_dual[e25] * anti_wedge[e31])
                    - (right_anti_dual[e35] * anti_wedge[e12]),
            ]) + (right_anti_dual.group0() * anti_wedge.group1().www().with_w(anti_wedge[e3215]))
                + (right_anti_dual.group0().www() * anti_wedge.group3().xyz()).with_w(right_anti_dual[e3215] * anti_wedge[scalar])
                - (right_anti_dual.group1().yzx() * anti_wedge.group0().zxy()).with_w(right_anti_dual[e23] * anti_wedge[e15]),
        );
    }
}
impl RejectOrthogonallyFrom<MultiVector> for Sphere {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       86      120        0
    //    simd2        0        1        0
    //    simd3       26       45        0
    //    simd4       24       22        0
    // Totals...
    // yes simd      136      188        0
    //  no simd      260      345        0
    fn reject_orthogonally_from(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (other[e1] * self[e4235]) + (other[e2] * self[e4315]) + (other[e3] * self[e4125]) + (other[e4] * self[e3215]) + (other[e5] * self[e1234]),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                -(other[e41] * self[e3215]) - (other[e31] * self[e4125]),
                -(other[e42] * self[e3215]) - (other[e12] * self[e4235]),
                -(other[e43] * self[e3215]) - (other[e23] * self[e4315]),
                (other[e45] * self[e1234]) + (other[e43] * self[e4125]),
            ]) + (Simd32x4::from([self[e1234], self[e1234], self[e1234], self[e4315]]) * other.group3().xyz().with_w(other[e42]))
                + (self.group0().yzxx() * other.group5().zxy().with_w(other[e41])),
            // e5
            -(other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]) - (other[e45] * self[e3215]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e415] * self[e3215]) + (other[e315] * self[e4125]),
                (other[e425] * self[e3215]) + (other[e125] * self[e4235]),
                (other[e435] * self[e3215]) + (other[e235] * self[e4315]),
                -(other[e425] * self[e4315]) - (other[e435] * self[e4125]),
            ]) - (self.group0().yzxx() * other.group8().zxy().with_w(other[e415])),
            // e41, e42, e43
            (Simd32x3::from(self[e1234]) * other.group6().xyz()) + (other.group7().zxy() * self.group0().yzx()) - (other.group7().yzx() * self.group0().zxy()),
            // e23, e31, e12
            (Simd32x3::from(self[e3215]) * other.group7()) + (Simd32x3::from(self[e1234]) * other.group8()) - (Simd32x3::from(other[e321]) * self.group0().xyz()),
            // e415, e425, e435, e321
            (other.group9().yzxw() * self.group0().zxy().with_w(self[e1234])) - (other.group9().zxy() * self.group0().yzx()).with_w(other[e1234] * self[e3215]),
            // e423, e431, e412
            (Simd32x3::from(self[e1234]) * other.group9().xyz()) - (Simd32x3::from(other[e1234]) * self.group0().xyz()),
            // e235, e315, e125
            (Simd32x3::from(other[e3215]) * self.group0().xyz()) - (Simd32x3::from(self[e3215]) * other.group9().xyz()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e12345]) * self.group0(),
            // e1234
            other[e12345] * self[e1234],
        );
        let right_anti_dual = MultiVector::from_groups(
            // scalar, e12345
            other.group0().yx() * Simd32x2::from([-1.0, 1.0]),
            // e1, e2, e3, e4
            other.group9().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e5
            other[e3215],
            // e15, e25, e35, e45
            other.group8().with_w(other[e321] * -1.0),
            // e41, e42, e43
            other.group7(),
            // e23, e31, e12
            other.group6().xyz(),
            // e415, e425, e435, e321
            other.group5().with_w(other[e45]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e423, e431, e412
            other.group4() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group3().xyz() * Simd32x3::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group1().xyz().with_w(other[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1234
            other[e4] * -1.0,
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                anti_wedge[scalar] * right_anti_dual[scalar],
                (anti_wedge[scalar] * right_anti_dual[e12345])
                    + (anti_wedge[e12345] * right_anti_dual[scalar])
                    + (anti_wedge[e1] * right_anti_dual[e4235])
                    + (anti_wedge[e2] * right_anti_dual[e4315])
                    + (anti_wedge[e3] * right_anti_dual[e4125])
                    + (anti_wedge[e4] * right_anti_dual[e3215])
                    + (anti_wedge[e5] * right_anti_dual[e1234])
                    + (anti_wedge[e4235] * right_anti_dual[e1])
                    + (anti_wedge[e4315] * right_anti_dual[e2])
                    + (anti_wedge[e4125] * right_anti_dual[e3])
                    + (anti_wedge[e3215] * right_anti_dual[e4])
                    + (anti_wedge[e1234] * right_anti_dual[e5])
                    - (anti_wedge[e15] * right_anti_dual[e423])
                    - (anti_wedge[e25] * right_anti_dual[e431])
                    - (anti_wedge[e35] * right_anti_dual[e412])
                    - (anti_wedge[e45] * right_anti_dual[e321])
                    - (anti_wedge[e41] * right_anti_dual[e235])
                    - (anti_wedge[e42] * right_anti_dual[e315])
                    - (anti_wedge[e43] * right_anti_dual[e125])
                    - (anti_wedge[e23] * right_anti_dual[e415])
                    - (anti_wedge[e31] * right_anti_dual[e425])
                    - (anti_wedge[e12] * right_anti_dual[e435])
                    - (anti_wedge[e415] * right_anti_dual[e23])
                    - (anti_wedge[e425] * right_anti_dual[e31])
                    - (anti_wedge[e435] * right_anti_dual[e12])
                    - (anti_wedge[e321] * right_anti_dual[e45])
                    - (anti_wedge[e423] * right_anti_dual[e15])
                    - (anti_wedge[e431] * right_anti_dual[e25])
                    - (anti_wedge[e412] * right_anti_dual[e35])
                    - (anti_wedge[e235] * right_anti_dual[e41])
                    - (anti_wedge[e315] * right_anti_dual[e42])
                    - (anti_wedge[e125] * right_anti_dual[e43]),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1()) + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1()),
            // e5
            (anti_wedge[scalar] * right_anti_dual[e5]) + (anti_wedge[e5] * right_anti_dual[scalar]),
            // e15, e25, e35, e45
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group3())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group3())
                + (Simd32x4::from(right_anti_dual[e5]) * anti_wedge.group1())
                - (Simd32x4::from(anti_wedge[e5]) * right_anti_dual.group1()),
            // e41, e42, e43
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group4())
                + (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group1().xyz())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group4())
                - (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group1().xyz()),
            // e23, e31, e12
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group5())
                + (anti_wedge.group1().yzx() * right_anti_dual.group1().zxy())
                - (anti_wedge.group1().zxy() * right_anti_dual.group1().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (anti_wedge[e4] * right_anti_dual[e15])
                    + (anti_wedge[e5] * right_anti_dual[e41])
                    + (anti_wedge[e15] * right_anti_dual[e4])
                    + (anti_wedge[e41] * right_anti_dual[e5]),
                (anti_wedge[e4] * right_anti_dual[e25])
                    + (anti_wedge[e5] * right_anti_dual[e42])
                    + (anti_wedge[e25] * right_anti_dual[e4])
                    + (anti_wedge[e42] * right_anti_dual[e5]),
                (anti_wedge[e4] * right_anti_dual[e35])
                    + (anti_wedge[e5] * right_anti_dual[e43])
                    + (anti_wedge[e35] * right_anti_dual[e4])
                    + (anti_wedge[e43] * right_anti_dual[e5]),
                -(anti_wedge[e1] * right_anti_dual[e23])
                    - (anti_wedge[e2] * right_anti_dual[e31])
                    - (anti_wedge[e3] * right_anti_dual[e12])
                    - (anti_wedge[e12] * right_anti_dual[e3]),
            ]) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group6())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group6())
                - (right_anti_dual.group1().xyzy() * anti_wedge.group3().www().with_w(anti_wedge[e31]))
                - (right_anti_dual.group3().www() * anti_wedge.group1().xyz()).with_w(anti_wedge[e23] * right_anti_dual[e1]),
            // e423, e431, e412
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group7())
                + (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group7())
                + (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group5())
                + (anti_wedge.group4().yzx() * right_anti_dual.group1().zxy())
                + (right_anti_dual.group4().yzx() * anti_wedge.group1().zxy())
                - (anti_wedge.group4().zxy() * right_anti_dual.group1().yzx())
                - (right_anti_dual.group4().zxy() * anti_wedge.group1().yzx()),
            // e235, e315, e125
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group8())
                + (Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group8())
                + (Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group5())
                + (anti_wedge.group1().yzx() * right_anti_dual.group3().zxy())
                + (anti_wedge.group3().zxy() * right_anti_dual.group1().yzx())
                - (anti_wedge.group1().zxy() * right_anti_dual.group3().yzx())
                - (anti_wedge.group3().yzx() * right_anti_dual.group1().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (anti_wedge[e3] * right_anti_dual[e425])
                    + (anti_wedge[e4] * right_anti_dual[e235])
                    + (anti_wedge[e45] * right_anti_dual[e23])
                    + (anti_wedge[e435] * right_anti_dual[e2]),
                (anti_wedge[e1] * right_anti_dual[e435])
                    + (anti_wedge[e4] * right_anti_dual[e315])
                    + (anti_wedge[e45] * right_anti_dual[e31])
                    + (anti_wedge[e415] * right_anti_dual[e3]),
                (anti_wedge[e2] * right_anti_dual[e415])
                    + (anti_wedge[e4] * right_anti_dual[e125])
                    + (anti_wedge[e45] * right_anti_dual[e12])
                    + (anti_wedge[e425] * right_anti_dual[e1]),
                -(anti_wedge[e1] * right_anti_dual[e235])
                    - (anti_wedge[e2] * right_anti_dual[e315])
                    - (anti_wedge[e3] * right_anti_dual[e125])
                    - (anti_wedge[e5] * right_anti_dual[e321]),
            ]) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group9())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group9())
                + (Simd32x4::from([right_anti_dual[e5], right_anti_dual[e5], right_anti_dual[e5], right_anti_dual[e3]]) * anti_wedge.group7().with_w(anti_wedge[e125]))
                + (anti_wedge.group5() * right_anti_dual.group3().www()).with_w(anti_wedge[e315] * right_anti_dual[e2])
                + (anti_wedge.group4().yzx() * right_anti_dual.group3().zxy()).with_w(anti_wedge[e235] * right_anti_dual[e1])
                + (right_anti_dual.group4().yzx() * anti_wedge.group3().zxy()).with_w(anti_wedge[e321] * right_anti_dual[e5])
                - (Simd32x4::from([anti_wedge[e5], anti_wedge[e5], anti_wedge[e5], anti_wedge[e15]]) * right_anti_dual.group7().with_w(right_anti_dual[e23]))
                - (right_anti_dual.group3().yzxx() * anti_wedge.group4().zxy().with_w(anti_wedge[e23]))
                - (anti_wedge.group8() * right_anti_dual.group1().www()).with_w(anti_wedge[e31] * right_anti_dual[e25])
                - (right_anti_dual.group4().zxy() * anti_wedge.group3().yzx()).with_w(anti_wedge[e12] * right_anti_dual[e35])
                - (anti_wedge.group1().yzx() * right_anti_dual.group6().zxy()).with_w(anti_wedge[e25] * right_anti_dual[e31])
                - (anti_wedge.group6().yzx() * right_anti_dual.group1().zxy()).with_w(anti_wedge[e35] * right_anti_dual[e12]),
            // e1234
            (anti_wedge[scalar] * right_anti_dual[e1234])
                + (anti_wedge[e1] * right_anti_dual[e423])
                + (anti_wedge[e2] * right_anti_dual[e431])
                + (anti_wedge[e3] * right_anti_dual[e412])
                + (anti_wedge[e4] * right_anti_dual[e321])
                + (anti_wedge[e1234] * right_anti_dual[scalar])
                - (anti_wedge[e41] * right_anti_dual[e23])
                - (anti_wedge[e42] * right_anti_dual[e31])
                - (anti_wedge[e43] * right_anti_dual[e12])
                - (anti_wedge[e23] * right_anti_dual[e41])
                - (anti_wedge[e31] * right_anti_dual[e42])
                - (anti_wedge[e12] * right_anti_dual[e43])
                - (anti_wedge[e321] * right_anti_dual[e4])
                - (anti_wedge[e423] * right_anti_dual[e1])
                - (anti_wedge[e431] * right_anti_dual[e2])
                - (anti_wedge[e412] * right_anti_dual[e3]),
        );
    }
}
impl RejectOrthogonallyFrom<Plane> for Sphere {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       13        0
    //    simd3        2        6        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        7       21        0
    //  no simd       17       39        0
    fn reject_orthogonally_from(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[e1234]) * other.group0().xyz(),
            // e415, e425, e435, e321
            ((other.group0().yzx() * self.group0().zxy()) - (other.group0().zxy() * self.group0().yzx())).with_w(other[e3215] * self[e1234]),
            // e235, e315, e125
            (Simd32x3::from(other[e3215]) * self.group0().xyz()) - (Simd32x3::from(self[e3215]) * other.group0().xyz()),
        );
        let right_anti_dual = AntiPlane::from_groups(/* e1, e2, e3, e5 */ other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]));
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                right_anti_dual[e3] * anti_wedge[e425] * -1.0,
                right_anti_dual[e1] * anti_wedge[e435] * -1.0,
                right_anti_dual[e2] * anti_wedge[e415] * -1.0,
                (right_anti_dual[e3] * anti_wedge[e125]) + (right_anti_dual[e5] * anti_wedge[e321]),
            ]) + (right_anti_dual.group0().wwwx() * anti_wedge.group0().with_w(anti_wedge[e235]))
                + (right_anti_dual.group0().yzx() * anti_wedge.group1().zxy()).with_w(right_anti_dual[e2] * anti_wedge[e315]),
            // e1234
            -(right_anti_dual[e1] * anti_wedge[e423]) - (right_anti_dual[e2] * anti_wedge[e431]) - (right_anti_dual[e3] * anti_wedge[e412]),
        );
    }
}
impl RejectOrthogonallyFrom<RoundPoint> for Sphere {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        7        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        4        9        0
    //  no simd        4       15        0
    fn reject_orthogonally_from(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Scalar::from_groups(
            // scalar
            (other[e1] * self[e4235]) + (other[e2] * self[e4315]) + (other[e3] * self[e4125]) + (other[e4] * self[e3215]) + (other[e5] * self[e1234]),
        );
        let right_anti_dual = Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            other.group0().xyz().with_w(other[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1234
            other[e4] * -1.0,
        );
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e1234
            anti_wedge[scalar] * right_anti_dual[e1234],
        );
    }
}
impl RejectOrthogonallyFrom<Sphere> for Sphere {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       13        0
    //    simd3        2        5        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       12       22        0
    //  no simd       25       44        0
    fn reject_orthogonally_from(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Circle::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[e1234]) * other.group0().xyz()) - (Simd32x3::from(other[e1234]) * self.group0().xyz()),
            // e415, e425, e435, e321
            (other.group0().yzxw() * self.group0().zxy().with_w(self[e1234])) - (other.group0().zxy() * self.group0().yzx()).with_w(other[e1234] * self[e3215]),
            // e235, e315, e125
            (Simd32x3::from(other[e3215]) * self.group0().xyz()) - (Simd32x3::from(self[e3215]) * other.group0().xyz()),
        );
        let right_anti_dual = RoundPoint::from_groups(
            // e1, e2, e3, e4
            other.group0().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e5
            other[e3215],
        );
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(anti_wedge[e425] * right_anti_dual[e3]) - (anti_wedge[e235] * right_anti_dual[e4]),
                -(anti_wedge[e435] * right_anti_dual[e1]) - (anti_wedge[e315] * right_anti_dual[e4]),
                -(anti_wedge[e415] * right_anti_dual[e2]) - (anti_wedge[e125] * right_anti_dual[e4]),
                (anti_wedge[e321] * right_anti_dual[e5]) + (anti_wedge[e125] * right_anti_dual[e3]),
            ]) + (Simd32x4::from([right_anti_dual[e5], right_anti_dual[e5], right_anti_dual[e5], right_anti_dual[e1]]) * anti_wedge.group0().with_w(anti_wedge[e235]))
                + (right_anti_dual.group0().yzxy() * anti_wedge.group1().zxy().with_w(anti_wedge[e315])),
            // e1234
            -(anti_wedge[e423] * right_anti_dual[e1])
                - (anti_wedge[e431] * right_anti_dual[e2])
                - (anti_wedge[e412] * right_anti_dual[e3])
                - (anti_wedge[e321] * right_anti_dual[e4]),
        );
    }
}
impl RejectOrthogonallyFrom<VersorEven> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       23       43        0
    //    simd3        3        7        0
    //    simd4       10       14        0
    // Totals...
    // yes simd       36       64        0
    //  no simd       72      120        0
    fn reject_orthogonally_from(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e4125] * other[e431] * -1.0,
                self[e4235] * other[e412] * -1.0,
                self[e4315] * other[e423] * -1.0,
                (self[e4125] * other[e3]) + (self[e3215] * other[e4]) + (self[e1234] * other[e5]),
            ]) + (Simd32x4::from([self[e1234], self[e1234], self[e1234], other[e2]]) * other.group1().xyz().with_w(self[e4315]))
                + (self.group0().yzxx() * other.group0().zxy().with_w(other[e1])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e3215] * other[e423]) + (self[e1234] * other[e235]),
                (self[e3215] * other[e431]) + (self[e1234] * other[e315]),
                (self[e3215] * other[e412]) + (self[e1234] * other[e125]),
                -(self[e4315] * other[e425]) - (self[e4125] * other[e435]),
            ]) - (self.group0().xyzx() * other.group1().wwwx()),
            // e15, e25, e35, e1234
            ((Simd32x3::from(self[e3215]) * other.group1().xyz()) + (self.group0().zxy() * other.group2().yzx()) - (self.group0().yzx() * other.group2().zxy()))
                .with_w(self[e1234] * other[e12345]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e12345]) * self.group0(),
        );
        let right_anti_dual = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e1234
            other.group2().xyz().with_w(other[e4]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            other.group3().xyz().with_w(other[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0().xyz()) + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group0().xyz()))
                .with_w(anti_wedge[scalar] * right_anti_dual[scalar]),
            // e23, e31, e12, e45
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1()) + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1()),
            // e15, e25, e35, e1234
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group2())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group2())
                + Simd32x3::from(0.0).with_w(
                    -(anti_wedge[e41] * right_anti_dual[e23])
                        - (anti_wedge[e42] * right_anti_dual[e31])
                        - (anti_wedge[e43] * right_anti_dual[e12])
                        - (anti_wedge[e23] * right_anti_dual[e41])
                        - (anti_wedge[e31] * right_anti_dual[e42])
                        - (anti_wedge[e12] * right_anti_dual[e43]),
                ),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (anti_wedge[e23] * right_anti_dual[e45])
                    + (anti_wedge[e45] * right_anti_dual[e23])
                    + (anti_wedge[e35] * right_anti_dual[e42])
                    + (anti_wedge[e4235] * right_anti_dual[scalar]),
                (anti_wedge[e31] * right_anti_dual[e45])
                    + (anti_wedge[e45] * right_anti_dual[e31])
                    + (anti_wedge[e15] * right_anti_dual[e43])
                    + (anti_wedge[e4315] * right_anti_dual[scalar]),
                (anti_wedge[e12] * right_anti_dual[e45])
                    + (anti_wedge[e45] * right_anti_dual[e12])
                    + (anti_wedge[e25] * right_anti_dual[e41])
                    + (anti_wedge[e4125] * right_anti_dual[scalar]),
                -(anti_wedge[e12] * right_anti_dual[e35])
                    - (anti_wedge[e15] * right_anti_dual[e23])
                    - (anti_wedge[e25] * right_anti_dual[e31])
                    - (anti_wedge[e35] * right_anti_dual[e12]),
            ]) + (anti_wedge.group0().yzxw() * right_anti_dual.group2().zxy().with_w(right_anti_dual[e3215]))
                + (anti_wedge.group0().www() * right_anti_dual.group3().xyz()).with_w(anti_wedge[e3215] * right_anti_dual[scalar])
                - (right_anti_dual.group2().yzxx() * anti_wedge.group0().zxy().with_w(anti_wedge[e23]))
                - (anti_wedge.group2().yzx() * right_anti_dual.group0().zxy()).with_w(anti_wedge[e31] * right_anti_dual[e25]),
        );
    }
}
impl RejectOrthogonallyFrom<VersorOdd> for Sphere {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       29        0
    //    simd3        2       10        0
    //    simd4       14       15        0
    // Totals...
    // yes simd       27       54        0
    //  no simd       73      119        0
    fn reject_orthogonally_from(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[e1234]) * other.group3().xyz()) - (Simd32x3::from(other[e1234]) * self.group0().xyz()),
            // e415, e425, e435, e321
            (self.group0().zxy() * other.group3().yzx()).with_w(self[e1234] * other[e3215]) - (self.group0().yzxw() * other.group3().zxy().with_w(other[e1234])),
            // e235, e315, e125, e4
            Simd32x4::from([
                self[e3215] * other[e4235] * -1.0,
                self[e3215] * other[e4315] * -1.0,
                self[e3215] * other[e4125] * -1.0,
                (self[e4315] * other[e42]) + (self[e4125] * other[e43]) + (self[e1234] * other[e45]),
            ]) + (self.group0().xyzx() * other.group3().www().with_w(other[e41])),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self[e4315] * other[e12]) + (self[e1234] * other[e15]),
                (self[e4125] * other[e23]) + (self[e1234] * other[e25]),
                (self[e4235] * other[e31]) + (self[e1234] * other[e35]),
                -(self[e4125] * other[e35]) - (self[e3215] * other[e45]),
            ]) - (self.group0().zxyx() * other.group1().yzx().with_w(other[e15]))
                - (self.group0().wwwy() * other.group0().xyz().with_w(other[e25])),
        );
        let right_anti_dual = VersorEven::from_groups(
            // e423, e431, e412, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            other.group2().xyz().with_w(other[e3215]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e4
            other.group3().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group3().xyz()) - (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group3().xyz()),
            // e23, e31, e12, e45
            (anti_wedge.group3().yzx() * right_anti_dual.group3().zxy()).with_w(anti_wedge[e4] * right_anti_dual[e5])
                - (anti_wedge.group3().zxyw() * right_anti_dual.group3().yzxw()),
            // e15, e25, e35, e1234
            Simd32x3::from(0.0).with_w(
                (anti_wedge[e1] * right_anti_dual[e423]) + (anti_wedge[e2] * right_anti_dual[e431]) + (anti_wedge[e3] * right_anti_dual[e412])
                    - (anti_wedge[e431] * right_anti_dual[e2])
                    - (anti_wedge[e412] * right_anti_dual[e3])
                    - (anti_wedge[e321] * right_anti_dual[e4]),
            ) + (right_anti_dual.group2().www() * anti_wedge.group3().xyz()).with_w(anti_wedge[e4] * right_anti_dual[e321])
                - (right_anti_dual.group3().xyzx() * anti_wedge.group3().www().with_w(anti_wedge[e423])),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(right_anti_dual[e5]) * anti_wedge.group0().with_w(anti_wedge[e321]))
                + (anti_wedge.group2().wwwy() * right_anti_dual.group2().xyz().with_w(right_anti_dual[e2]))
                + (right_anti_dual.group3().yzxx() * anti_wedge.group1().zxy().with_w(anti_wedge[e235]))
                + (anti_wedge.group3().zxy() * right_anti_dual.group1().yzx()).with_w(anti_wedge[e125] * right_anti_dual[e3])
                - (Simd32x4::from(anti_wedge[e5]) * right_anti_dual.group0().xyz().with_w(right_anti_dual[e321]))
                - (anti_wedge.group3().yzxz() * right_anti_dual.group1().zxy().with_w(right_anti_dual[e125]))
                - (anti_wedge.group1().yzx() * right_anti_dual.group3().zxy()).with_w(anti_wedge[e1] * right_anti_dual[e235])
                - (right_anti_dual.group3().www() * anti_wedge.group2().xyz()).with_w(anti_wedge[e2] * right_anti_dual[e315]),
        );
    }
}
impl std::ops::Div<reject_orthogonally_from> for VersorEven {
    type Output = reject_orthogonally_from_partial<VersorEven>;
    fn div(self, _rhs: reject_orthogonally_from) -> Self::Output {
        reject_orthogonally_from_partial(self)
    }
}
impl RejectOrthogonallyFrom<AntiCircleRotor> for VersorEven {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       22        0
    //    simd3        0        3        0
    //    simd4        0        6        0
    // Totals...
    // yes simd       20       31        0
    //  no simd       20       55        0
    fn reject_orthogonally_from(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[e12345]) * other.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(self[e12345]) * other.group1(),
            // e15, e25, e35, scalar
            Simd32x4::from([self[e12345], self[e12345], self[e12345], 1.0])
                * other.group2().xyz().with_w(
                    (other[scalar] * self[e12345])
                        - (other[e41] * self[e235])
                        - (other[e42] * self[e315])
                        - (other[e43] * self[e125])
                        - (other[e23] * self[e415])
                        - (other[e31] * self[e425])
                        - (other[e12] * self[e435])
                        - (other[e45] * self[e321])
                        - (other[e15] * self[e423])
                        - (other[e25] * self[e431])
                        - (other[e35] * self[e412]),
                ),
        );
        let right_anti_dual = CircleRotor::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e12345
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1(),
            // e235, e315, e125, e12345
            Simd32x4::from([right_anti_dual[e235], right_anti_dual[e315], right_anti_dual[e125], 1.0])
                * anti_wedge.group2().www().with_w(
                    (anti_wedge[scalar] * right_anti_dual[e12345])
                        - (anti_wedge[e41] * right_anti_dual[e235])
                        - (anti_wedge[e42] * right_anti_dual[e315])
                        - (anti_wedge[e43] * right_anti_dual[e125])
                        - (anti_wedge[e23] * right_anti_dual[e415])
                        - (anti_wedge[e31] * right_anti_dual[e425])
                        - (anti_wedge[e12] * right_anti_dual[e435])
                        - (anti_wedge[e45] * right_anti_dual[e321])
                        - (anti_wedge[e15] * right_anti_dual[e423])
                        - (anti_wedge[e25] * right_anti_dual[e431])
                        - (anti_wedge[e35] * right_anti_dual[e412]),
                ),
        );
    }
}
impl RejectOrthogonallyFrom<AntiDipoleInversion> for VersorEven {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       33       46        0
    //    simd3        2        7        0
    //    simd4        7        9        0
    // Totals...
    // yes simd       42       62        0
    //  no simd       67      103        0
    fn reject_orthogonally_from(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[e12345]) * other.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(self[e12345]) * other.group1(),
            // e235, e315, e125, e4
            Simd32x4::from([self[e12345], self[e12345], self[e12345], 1.0])
                * other.group2().xyz().with_w(
                    (other[e4] * self[e12345])
                        - (other[e423] * self[e415])
                        - (other[e431] * self[e425])
                        - (other[e412] * self[e435])
                        - (other[e415] * self[e423])
                        - (other[e425] * self[e431])
                        - (other[e435] * self[e412]),
                ),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other[e415] * self[e321]) + (other[e321] * self[e415]) + (other[e315] * self[e412]) + (other[e1] * self[e12345]),
                (other[e425] * self[e321]) + (other[e321] * self[e425]) + (other[e125] * self[e423]) + (other[e2] * self[e12345]),
                (other[e435] * self[e321]) + (other[e321] * self[e435]) + (other[e235] * self[e431]) + (other[e3] * self[e12345]),
                -(other[e435] * self[e125]) - (other[e235] * self[e415]) - (other[e315] * self[e425]) - (other[e125] * self[e435]),
            ]) + (other.group0().zxy() * self.group2().yzx()).with_w(other[e5] * self[e12345])
                - (self.group2().zxyx() * other.group0().yzx().with_w(other[e415]))
                - (other.group2().zxy() * self.group0().yzx()).with_w(other[e425] * self[e315]),
        );
        let right_anti_dual = DipoleInversion::from_groups(
            // e41, e42, e43
            other.group0(),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            other.group3() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return CircleRotor::from_groups(
            // e423, e431, e412
            (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group1().xyz()) + (right_anti_dual.group0().yzx() * anti_wedge.group3().zxy())
                - (right_anti_dual.group0().zxy() * anti_wedge.group3().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (anti_wedge[e4] * right_anti_dual[e15]) + (anti_wedge[e5] * right_anti_dual[e41]),
                (anti_wedge[e4] * right_anti_dual[e25]) + (anti_wedge[e5] * right_anti_dual[e42]),
                (anti_wedge[e4] * right_anti_dual[e35]) + (anti_wedge[e5] * right_anti_dual[e43]),
                -(anti_wedge[e2] * right_anti_dual[e31]) - (anti_wedge[e3] * right_anti_dual[e12]),
            ]) - (anti_wedge.group3().xyzx() * right_anti_dual.group1().wwwx()),
            // e235, e315, e125, e12345
            (anti_wedge.group3().wwwx() * right_anti_dual.group1().xyz().with_w(right_anti_dual[e4235]))
                + Simd32x3::from(0.0).with_w(
                    (anti_wedge[e2] * right_anti_dual[e4315]) + (anti_wedge[e3] * right_anti_dual[e4125]) + (anti_wedge[e5] * right_anti_dual[e1234])
                        - (anti_wedge[e431] * right_anti_dual[e25])
                        - (anti_wedge[e412] * right_anti_dual[e35])
                        - (anti_wedge[e415] * right_anti_dual[e23])
                        - (anti_wedge[e425] * right_anti_dual[e31])
                        - (anti_wedge[e435] * right_anti_dual[e12])
                        - (anti_wedge[e321] * right_anti_dual[e45])
                        - (anti_wedge[e235] * right_anti_dual[e41])
                        - (anti_wedge[e315] * right_anti_dual[e42])
                        - (anti_wedge[e125] * right_anti_dual[e43]),
                )
                + (anti_wedge.group3().yzx() * right_anti_dual.group2().zxy()).with_w(anti_wedge[e4] * right_anti_dual[e3215])
                - (right_anti_dual.group2().yzxx() * anti_wedge.group3().zxy().with_w(anti_wedge[e423])),
        );
    }
}
impl RejectOrthogonallyFrom<AntiDualNum> for VersorEven {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        3        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        1        6        0
    //  no simd        1       15        0
    fn reject_orthogonally_from(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([self[e423], self[e431], self[e412], 1.0]) * other.group0().xx().with_zw(other[e3215], (other[e3215] * self[e4]) + (other[scalar] * self[e12345])),
            // e15, e25, e35, e3215
            Simd32x4::from(other[e3215]) * self.group1().xyz().with_w(self[e12345]),
        );
        let right_anti_dual = DualNum::from_groups(/* e5, e12345 */ other.group0());
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x3::from(0.0).with_w(anti_wedge[scalar] * right_anti_dual[e12345]),
            // e235, e315, e125, e5
            Simd32x4::from(right_anti_dual[e5]) * anti_wedge.group0(),
        );
    }
}
impl RejectOrthogonallyFrom<AntiFlatPoint> for VersorEven {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd3        1        2        0
    //    simd4        1        5        0
    // Totals...
    // yes simd        6       15        0
    //  no simd       11       34        0
    fn reject_orthogonally_from(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(self[e12345]) * other.group0(),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other[e315] * self[e412]) + (other[e321] * self[e415]),
                (other[e125] * self[e423]) + (other[e321] * self[e425]),
                (other[e235] * self[e431]) + (other[e321] * self[e435]),
                -(other[e315] * self[e425]) - (other[e125] * self[e435]),
            ]) - (other.group0().zxyx() * self.group0().yzx().with_w(self[e415])),
        );
        let right_anti_dual = FlatPoint::from_groups(/* e15, e25, e35, e45 */ other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]));
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(right_anti_dual[e45]) * anti_wedge.group1().xyz().with_w(anti_wedge[e321]) * Simd32x4::from(-1.0),
            // e235, e315, e125, e5
            ((anti_wedge.group1().yzx() * right_anti_dual.group0().zxy()) - (anti_wedge.group1().zxy() * right_anti_dual.group0().yzx())).with_w(0.0),
        );
    }
}
impl RejectOrthogonallyFrom<AntiFlector> for VersorEven {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       12        0
    //    simd3        1        2        0
    //    simd4        2        7        0
    // Totals...
    // yes simd       10       21        0
    //  no simd       18       46        0
    fn reject_orthogonally_from(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(self[e12345]) * other.group0(),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other[e321] * self[e415]) + (other[e1] * self[e12345]),
                (other[e321] * self[e425]) + (other[e2] * self[e12345]),
                (other[e321] * self[e435]) + (other[e3] * self[e12345]),
                -(other[e315] * self[e425]) - (other[e125] * self[e435]),
            ]) + (self.group0().zxyw() * other.group0().yzx().with_w(other[e5]))
                - (other.group0().zxyx() * self.group0().yzx().with_w(self[e415])),
        );
        let right_anti_dual = Flector::from_groups(
            // e15, e25, e35, e45
            other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([right_anti_dual[e45], right_anti_dual[e45], right_anti_dual[e45], 1.0])
                * anti_wedge.group1().xyz().with_w(
                    (anti_wedge[e1] * right_anti_dual[e4235]) + (anti_wedge[e2] * right_anti_dual[e4315]) + (anti_wedge[e3] * right_anti_dual[e4125])
                        - (anti_wedge[e321] * right_anti_dual[e45]),
                )
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            ((anti_wedge.group1().yzx() * right_anti_dual.group0().zxy()) - (anti_wedge.group1().zxy() * right_anti_dual.group0().yzx())).with_w(0.0),
        );
    }
}
impl RejectOrthogonallyFrom<AntiLine> for VersorEven {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7        9        0
    //    simd3        0        2        0
    //    simd4        0        8        0
    // Totals...
    // yes simd        7       19        0
    //  no simd        7       47        0
    fn reject_orthogonally_from(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([self[e12345], self[e12345], self[e12345], 1.0])
                * other.group0().with_w(
                    -(other[e23] * self[e415])
                        - (other[e31] * self[e425])
                        - (other[e12] * self[e435])
                        - (other[e15] * self[e423])
                        - (other[e25] * self[e431])
                        - (other[e35] * self[e412]),
                ),
            // e15, e25, e35, e3215
            Simd32x3::from(1.0).with_w(0.0) * other.group1().with_w(0.0) * self.group0().www().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
        );
        let right_anti_dual = Line::from_groups(
            // e415, e425, e435
            other.group0() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group1() * Simd32x3::from(-1.0),
        );
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([anti_wedge[scalar], anti_wedge[scalar], anti_wedge[scalar], 1.0])
                * right_anti_dual
                    .group0()
                    .with_w(-(anti_wedge[e23] * right_anti_dual[e415]) - (anti_wedge[e31] * right_anti_dual[e425]) - (anti_wedge[e12] * right_anti_dual[e435])),
            // e235, e315, e125, e5
            Simd32x3::from(1.0).with_w(0.0) * right_anti_dual.group1().with_w(0.0) * anti_wedge.group0().www().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
        );
    }
}
impl RejectOrthogonallyFrom<AntiMotor> for VersorEven {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       12        0
    //    simd3        2        4        0
    //    simd4        2        5        0
    // Totals...
    // yes simd       12       21        0
    //  no simd       22       44        0
    fn reject_orthogonally_from(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from(other[e3215]) * self.group0().xyz().with_w(self[e4]))
                + (Simd32x4::from(self[e12345]) * other.group0())
                + Simd32x3::from(0.0).with_w(
                    -(other[e23] * self[e415])
                        - (other[e31] * self[e425])
                        - (other[e12] * self[e435])
                        - (other[e15] * self[e423])
                        - (other[e25] * self[e431])
                        - (other[e35] * self[e412]),
                ),
            // e15, e25, e35, e3215
            ((Simd32x3::from(other[e3215]) * self.group1().xyz()) + (Simd32x3::from(self[e12345]) * other.group1().xyz())).with_w(other[e3215] * self[e12345]),
        );
        let right_anti_dual = Motor::from_groups(
            // e415, e425, e435, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([right_anti_dual[e415], right_anti_dual[e425], right_anti_dual[e435], 1.0])
                * anti_wedge.group0().www().with_w(
                    (anti_wedge[scalar] * right_anti_dual[e12345])
                        - (anti_wedge[e23] * right_anti_dual[e415])
                        - (anti_wedge[e31] * right_anti_dual[e425])
                        - (anti_wedge[e12] * right_anti_dual[e435]),
                ),
            // e235, e315, e125, e5
            ((Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group1().xyz()) + (Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group0().xyz()))
                .with_w(anti_wedge[scalar] * right_anti_dual[e5]),
        );
    }
}
impl RejectOrthogonallyFrom<AntiPlane> for VersorEven {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        3        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        2        5        0
    //  no simd        2       11        0
    fn reject_orthogonally_from(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from(self[e12345]) * other.group0());
        let right_anti_dual = Plane::from_groups(/* e4235, e4315, e4125, e3215 */ other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]));
        return AntiScalar::from_groups(
            // e12345
            (anti_wedge[e1] * right_anti_dual[e4235]) + (anti_wedge[e2] * right_anti_dual[e4315]) + (anti_wedge[e3] * right_anti_dual[e4125]),
        );
    }
}
impl RejectOrthogonallyFrom<AntiScalar> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        8        0
    // Totals...
    // yes simd        0        9        0
    //  no simd        0       33        0
    fn reject_orthogonally_from(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(other[e12345]) * self.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other[e12345]) * self.group1(),
            // e235, e315, e125, e5
            Simd32x4::from(other[e12345]) * self.group2(),
            // e1, e2, e3, e4
            Simd32x4::from(other[e12345]) * self.group3(),
        );
        let right_anti_dual = Scalar::from_groups(/* scalar */ other[e12345] * -1.0);
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1(),
            // e235, e315, e125, e5
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group2(),
            // e1, e2, e3, e4
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group3(),
        );
    }
}
impl RejectOrthogonallyFrom<Circle> for VersorEven {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       48        0
    //    simd3        2        7        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       38       59        0
    //  no simd       54       85        0
    fn reject_orthogonally_from(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[e12345]) * other.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(self[e12345]) * other.group1(),
            // e235, e315, e125, e4
            Simd32x4::from([self[e12345], self[e12345], self[e12345], 1.0])
                * other.group2().with_w(
                    -(other[e423] * self[e415])
                        - (other[e431] * self[e425])
                        - (other[e412] * self[e435])
                        - (other[e415] * self[e423])
                        - (other[e425] * self[e431])
                        - (other[e435] * self[e412]),
                ),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e415] * self[e321]) + (other[e321] * self[e415]) + (other[e315] * self[e412]),
                (other[e423] * self[e125]) + (other[e425] * self[e321]) + (other[e321] * self[e425]) + (other[e125] * self[e423]),
                (other[e431] * self[e235]) + (other[e435] * self[e321]) + (other[e321] * self[e435]) + (other[e235] * self[e431]),
                -(other[e415] * self[e235]) - (other[e425] * self[e315]) - (other[e435] * self[e125]) - (other[e125] * self[e435]),
            ]) - (other.group0().yzx() * self.group2().zxy()).with_w(other[e235] * self[e415])
                - (other.group2().zxy() * self.group0().yzx()).with_w(other[e315] * self[e425]),
        );
        let right_anti_dual = Dipole::from_groups(
            // e41, e42, e43
            other.group0(),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35
            other.group2(),
        );
        return CircleRotor::from_groups(
            // e423, e431, e412
            (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group1().xyz()) + (right_anti_dual.group0().yzx() * anti_wedge.group3().zxy())
                - (right_anti_dual.group0().zxy() * anti_wedge.group3().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (anti_wedge[e4] * right_anti_dual[e15]) + (anti_wedge[e5] * right_anti_dual[e41]),
                (anti_wedge[e4] * right_anti_dual[e25]) + (anti_wedge[e5] * right_anti_dual[e42]),
                (anti_wedge[e4] * right_anti_dual[e35]) + (anti_wedge[e5] * right_anti_dual[e43]),
                -(anti_wedge[e2] * right_anti_dual[e31]) - (anti_wedge[e3] * right_anti_dual[e12]),
            ]) - (anti_wedge.group3().xyzx() * right_anti_dual.group1().wwwx()),
            // e235, e315, e125, e12345
            Simd32x4::from([
                (anti_wedge[e2] * right_anti_dual[e35]) + (anti_wedge[e5] * right_anti_dual[e23]),
                (anti_wedge[e3] * right_anti_dual[e15]) + (anti_wedge[e5] * right_anti_dual[e31]),
                (anti_wedge[e1] * right_anti_dual[e25]) + (anti_wedge[e5] * right_anti_dual[e12]),
                -(anti_wedge[e431] * right_anti_dual[e25])
                    - (anti_wedge[e412] * right_anti_dual[e35])
                    - (anti_wedge[e415] * right_anti_dual[e23])
                    - (anti_wedge[e425] * right_anti_dual[e31])
                    - (anti_wedge[e435] * right_anti_dual[e12])
                    - (anti_wedge[e321] * right_anti_dual[e45])
                    - (anti_wedge[e235] * right_anti_dual[e41])
                    - (anti_wedge[e315] * right_anti_dual[e42])
                    - (anti_wedge[e125] * right_anti_dual[e43]),
            ]) - (right_anti_dual.group2().yzx() * anti_wedge.group3().zxy()).with_w(anti_wedge[e423] * right_anti_dual[e15]),
        );
    }
}
impl RejectOrthogonallyFrom<CircleRotor> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       56        0
    //    simd3        4       12        0
    //    simd4        9        7        0
    // Totals...
    // yes simd       45       75        0
    //  no simd       80      120        0
    fn reject_orthogonally_from(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x3::from(other[e12345]) * self.group0().xyz()) + (Simd32x3::from(self[e12345]) * other.group0())).with_w(other[e12345] * self[e12345]),
            // e415, e425, e435, e321
            (Simd32x4::from(other[e12345]) * self.group1()) + (Simd32x4::from(self[e12345]) * other.group1()),
            // e235, e315, e125, e5
            Simd32x4::from([
                other[e12345] * self[e235],
                other[e12345] * self[e315],
                other[e12345] * self[e125],
                -(other[e415] * self[e235])
                    - (other[e425] * self[e315])
                    - (other[e435] * self[e125])
                    - (other[e235] * self[e415])
                    - (other[e315] * self[e425])
                    - (other[e125] * self[e435]),
            ]) + (other.group2() * self.group0().www().with_w(self[e5])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e415] * self[e321]) + (other[e321] * self[e415]) + (other[e315] * self[e412]) + (other[e12345] * self[e1]),
                (other[e425] * self[e321]) + (other[e321] * self[e425]) + (other[e125] * self[e423]) + (other[e12345] * self[e2]),
                (other[e435] * self[e321]) + (other[e321] * self[e435]) + (other[e235] * self[e431]) + (other[e12345] * self[e3]),
                -(other[e412] * self[e435]) - (other[e415] * self[e423]) - (other[e425] * self[e431]) - (other[e435] * self[e412]),
            ]) + (other.group0().zxy() * self.group2().yzx()).with_w(other[e12345] * self[e4])
                - (other.group0().yzx() * self.group2().zxy()).with_w(other[e423] * self[e415])
                - (other.group2().zxy() * self.group0().yzx()).with_w(other[e431] * self[e425]),
        );
        let right_anti_dual = AntiCircleRotor::from_groups(
            // e41, e42, e43
            other.group0(),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, scalar
            other.group2() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (right_anti_dual[e23] * anti_wedge[e4]) + (right_anti_dual[scalar] * anti_wedge[e423]),
                (right_anti_dual[e31] * anti_wedge[e4]) + (right_anti_dual[scalar] * anti_wedge[e431]),
                (right_anti_dual[e12] * anti_wedge[e4]) + (right_anti_dual[scalar] * anti_wedge[e412]),
                -(right_anti_dual[e42] * anti_wedge[e315])
                    - (right_anti_dual[e43] * anti_wedge[e125])
                    - (right_anti_dual[e23] * anti_wedge[e415])
                    - (right_anti_dual[e31] * anti_wedge[e425])
                    - (right_anti_dual[e12] * anti_wedge[e435])
                    - (right_anti_dual[e45] * anti_wedge[e321])
                    - (right_anti_dual[e15] * anti_wedge[e423])
                    - (right_anti_dual[e25] * anti_wedge[e431])
                    - (right_anti_dual[e35] * anti_wedge[e412]),
            ]) + (right_anti_dual.group0().yzx() * anti_wedge.group3().zxy()).with_w(right_anti_dual[scalar] * anti_wedge[e12345])
                - (right_anti_dual.group0().zxy() * anti_wedge.group3().yzx()).with_w(right_anti_dual[e41] * anti_wedge[e235]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (right_anti_dual[e15] * anti_wedge[e4]) + (right_anti_dual[scalar] * anti_wedge[e415]),
                (right_anti_dual[e25] * anti_wedge[e4]) + (right_anti_dual[scalar] * anti_wedge[e425]),
                (right_anti_dual[e35] * anti_wedge[e4]) + (right_anti_dual[scalar] * anti_wedge[e435]),
                -(right_anti_dual[e31] * anti_wedge[e2]) - (right_anti_dual[e12] * anti_wedge[e3]),
            ]) + (right_anti_dual.group0() * anti_wedge.group2().www()).with_w(right_anti_dual[scalar] * anti_wedge[e321])
                - (right_anti_dual.group1().wwwx() * anti_wedge.group3().xyzx()),
            // e235, e315, e125, e5
            ((Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group2().xyz())
                + (Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group1().xyz())
                + (right_anti_dual.group2().zxy() * anti_wedge.group3().yzx())
                - (right_anti_dual.group2().yzx() * anti_wedge.group3().zxy()))
            .with_w(right_anti_dual[scalar] * anti_wedge[e5]),
            // e1, e2, e3, e4
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group3(),
        );
    }
}
impl RejectOrthogonallyFrom<Dipole> for VersorEven {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       20        0
    //    simd3        0        4        0
    //    simd4        0        5        0
    // Totals...
    // yes simd       18       29        0
    //  no simd       18       52        0
    fn reject_orthogonally_from(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[e12345]) * other.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(self[e12345]) * other.group1(),
            // e15, e25, e35, scalar
            Simd32x4::from([self[e12345], self[e12345], self[e12345], 1.0])
                * other.group2().with_w(
                    -(other[e41] * self[e235])
                        - (other[e42] * self[e315])
                        - (other[e43] * self[e125])
                        - (other[e23] * self[e415])
                        - (other[e31] * self[e425])
                        - (other[e12] * self[e435])
                        - (other[e45] * self[e321])
                        - (other[e15] * self[e423])
                        - (other[e25] * self[e431])
                        - (other[e35] * self[e412]),
                ),
        );
        let right_anti_dual = Circle::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125
            other.group2() * Simd32x3::from(-1.0),
        );
        return CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1(),
            // e235, e315, e125, e12345
            Simd32x4::from([anti_wedge[scalar], anti_wedge[scalar], anti_wedge[scalar], 1.0])
                * right_anti_dual.group2().with_w(
                    -(anti_wedge[e41] * right_anti_dual[e235])
                        - (anti_wedge[e42] * right_anti_dual[e315])
                        - (anti_wedge[e43] * right_anti_dual[e125])
                        - (anti_wedge[e23] * right_anti_dual[e415])
                        - (anti_wedge[e31] * right_anti_dual[e425])
                        - (anti_wedge[e12] * right_anti_dual[e435])
                        - (anti_wedge[e45] * right_anti_dual[e321])
                        - (anti_wedge[e15] * right_anti_dual[e423])
                        - (anti_wedge[e25] * right_anti_dual[e431])
                        - (anti_wedge[e35] * right_anti_dual[e412]),
                ),
        );
    }
}
impl RejectOrthogonallyFrom<DipoleInversion> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       46        0
    //    simd3        6       15        0
    //    simd4       12       11        0
    // Totals...
    // yes simd       46       72        0
    //  no simd       94      135        0
    fn reject_orthogonally_from(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (other.group3().yzxy() * self.group0().zxy().with_w(self[e2]))
                + Simd32x3::from(0.0).with_w(
                    (other[e4125] * self[e3]) + (other[e3215] * self[e4])
                        - (other[e42] * self[e315])
                        - (other[e43] * self[e125])
                        - (other[e23] * self[e415])
                        - (other[e31] * self[e425])
                        - (other[e12] * self[e435])
                        - (other[e45] * self[e321])
                        - (other[e15] * self[e423])
                        - (other[e25] * self[e431])
                        - (other[e35] * self[e412]),
                )
                + (other.group0() * self.group0().www()).with_w(other[e1234] * self[e5])
                + (other.group2().www() * self.group1().xyz()).with_w(other[e4235] * self[e1])
                - (other.group3().zxy() * self.group0().yzx()).with_w(other[e41] * self[e235]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e1234] * self[e235]) + (other[e3215] * self[e423]),
                (other[e1234] * self[e315]) + (other[e3215] * self[e431]),
                (other[e1234] * self[e125]) + (other[e3215] * self[e412]),
                -(other[e4315] * self[e425]) - (other[e4125] * self[e435]),
            ]) + (Simd32x4::from(self[e12345]) * other.group1())
                - (other.group3().xyzx() * self.group1().wwwx()),
            // e15, e25, e35, e1234
            ((Simd32x3::from(other[e3215]) * self.group1().xyz()) + (Simd32x3::from(self[e12345]) * other.group2().xyz()) + (other.group3().zxy() * self.group2().yzx())
                - (other.group3().yzx() * self.group2().zxy()))
            .with_w(other[e1234] * self[e12345]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * other.group3(),
        );
        let right_anti_dual = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e4
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group3() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (right_anti_dual.group3().zxyy() * anti_wedge.group0().yzx().with_w(anti_wedge[e4315]))
                + Simd32x3::from(0.0).with_w(
                    (right_anti_dual[e3] * anti_wedge[e4125]) + (right_anti_dual[e5] * anti_wedge[e1234])
                        - (right_anti_dual[e431] * anti_wedge[e25])
                        - (right_anti_dual[e412] * anti_wedge[e35])
                        - (right_anti_dual[e415] * anti_wedge[e23])
                        - (right_anti_dual[e425] * anti_wedge[e31])
                        - (right_anti_dual[e435] * anti_wedge[e12])
                        - (right_anti_dual[e321] * anti_wedge[e45])
                        - (right_anti_dual[e235] * anti_wedge[e41])
                        - (right_anti_dual[e315] * anti_wedge[e42])
                        - (right_anti_dual[e125] * anti_wedge[e43]),
                )
                + (right_anti_dual.group0() * anti_wedge.group0().www()).with_w(right_anti_dual[e4] * anti_wedge[e3215])
                + (right_anti_dual.group2().www() * anti_wedge.group1().xyz()).with_w(right_anti_dual[e1] * anti_wedge[e4235])
                - (right_anti_dual.group3().yzx() * anti_wedge.group0().zxy()).with_w(right_anti_dual[e423] * anti_wedge[e15]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (right_anti_dual[e4] * anti_wedge[e15]) + (right_anti_dual[e5] * anti_wedge[e41]),
                (right_anti_dual[e4] * anti_wedge[e25]) + (right_anti_dual[e5] * anti_wedge[e42]),
                (right_anti_dual[e4] * anti_wedge[e35]) + (right_anti_dual[e5] * anti_wedge[e43]),
                -(right_anti_dual[e2] * anti_wedge[e31]) - (right_anti_dual[e3] * anti_wedge[e12]),
            ]) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1())
                - (right_anti_dual.group3().xyzx() * anti_wedge.group1().wwwx()),
            // e235, e315, e125, e5
            ((Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group1().xyz())
                + (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group2().xyz())
                + (right_anti_dual.group3().yzx() * anti_wedge.group2().zxy())
                - (right_anti_dual.group3().zxy() * anti_wedge.group2().yzx()))
            .with_w(right_anti_dual[e5] * anti_wedge[scalar]),
            // e1, e2, e3, e4
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group3().xyz().with_w(right_anti_dual[e4]),
        );
    }
}
impl RejectOrthogonallyFrom<DualNum> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        4        0
    //    simd2        0        1        0
    //    simd4        0        8        0
    // Totals...
    // yes simd        2       13        0
    //  no simd        2       38        0
    fn reject_orthogonally_from(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(other[e12345]) * self.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other[e12345]) * self.group1(),
            // e235, e315, e125, e5
            Simd32x4::from([self[e235], self[e315], self[e125], 1.0]) * other.group0().yy().with_zw(other[e12345], (other[e5] * self[e12345]) + (other[e12345] * self[e5])),
            // e1, e2, e3, e4
            Simd32x4::from(other[e12345]) * self.group3(),
        );
        let right_anti_dual = AntiDualNum::from_groups(/* e3215, scalar */ other.group0() * Simd32x2::from(-1.0));
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([anti_wedge[e423], anti_wedge[e431], anti_wedge[e412], 1.0])
                * right_anti_dual
                    .group0()
                    .yy()
                    .with_zw(right_anti_dual[scalar], (right_anti_dual[e3215] * anti_wedge[e4]) + (right_anti_dual[scalar] * anti_wedge[e12345])),
            // e415, e425, e435, e321
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1(),
            // e235, e315, e125, e5
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group2(),
            // e1, e2, e3, e4
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group3(),
        );
    }
}
impl RejectOrthogonallyFrom<FlatPoint> for VersorEven {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       10        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        6       13        0
    //  no simd        6       22        0
    fn reject_orthogonally_from(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x3::from(0.0).with_w(other[e45] * self[e12345]),
            // e15, e25, e35, scalar
            Simd32x4::from([self[e12345], self[e12345], self[e12345], 1.0])
                * other
                    .group0()
                    .xyz()
                    .with_w(-(other[e15] * self[e423]) - (other[e25] * self[e431]) - (other[e35] * self[e412]) - (other[e45] * self[e321])),
        );
        let right_anti_dual = AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]));
        return CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x3::from(0.0).with_w(anti_wedge[scalar] * right_anti_dual[e321]),
            // e235, e315, e125, e12345
            Simd32x4::from([right_anti_dual[e235], right_anti_dual[e315], right_anti_dual[e125], 1.0])
                * anti_wedge.group2().www().with_w(
                    -(anti_wedge[e41] * right_anti_dual[e235])
                        - (anti_wedge[e42] * right_anti_dual[e315])
                        - (anti_wedge[e43] * right_anti_dual[e125])
                        - (anti_wedge[e45] * right_anti_dual[e321]),
                ),
        );
    }
}
impl RejectOrthogonallyFrom<Flector> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       17        0
    //    simd3        3        8        0
    //    simd4       11       14        0
    // Totals...
    // yes simd       26       39        0
    //  no simd       65       97        0
    fn reject_orthogonally_from(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (other.group1().yzxx() * self.group0().zxy().with_w(self[e1]))
                + Simd32x3::from(0.0).with_w(
                    (other[e4315] * self[e2]) + (other[e4125] * self[e3]) + (other[e3215] * self[e4])
                        - (other[e25] * self[e431])
                        - (other[e35] * self[e412])
                        - (other[e45] * self[e321]),
                )
                - (self.group0().yzxx() * other.group1().zxy().with_w(other[e15])),
            // e23, e31, e12, e45
            (self.group0() * other.group1().www().with_w(other[e45])) + Simd32x3::from(0.0).with_w(-(other[e4315] * self[e425]) - (other[e4125] * self[e435]))
                - (other.group1().xyzx() * self.group1().wwwx()),
            // e15, e25, e35, e1234
            (Simd32x3::from(other[e3215]) * self.group1().xyz()).with_w(0.0)
                + (Simd32x3::from(self[e12345]) * other.group0().xyz()).with_w(0.0)
                + (other.group1().zxy() * self.group2().yzx()).with_w(0.0)
                - (other.group1().yzx() * self.group2().zxy()).with_w(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * other.group1(),
        );
        let right_anti_dual = AntiFlector::from_groups(
            // e235, e315, e125, e321
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (right_anti_dual.group1().zxyx() * anti_wedge.group0().yzx().with_w(anti_wedge[e4235]))
                + Simd32x3::from(0.0).with_w(
                    (right_anti_dual[e2] * anti_wedge[e4315]) + (right_anti_dual[e3] * anti_wedge[e4125]) + (right_anti_dual[e5] * anti_wedge[e1234])
                        - (right_anti_dual[e315] * anti_wedge[e42])
                        - (right_anti_dual[e125] * anti_wedge[e43])
                        - (right_anti_dual[e321] * anti_wedge[e45]),
                )
                - (anti_wedge.group0().zxyx() * right_anti_dual.group1().yzx().with_w(right_anti_dual[e235])),
            // e415, e425, e435, e321
            (anti_wedge.group0() * right_anti_dual.group1().www().with_w(right_anti_dual[e321]))
                + Simd32x3::from(0.0).with_w(-(right_anti_dual[e2] * anti_wedge[e31]) - (right_anti_dual[e3] * anti_wedge[e12]))
                - (right_anti_dual.group1().xyzx() * anti_wedge.group1().wwwx()),
            // e235, e315, e125, e5
            ((Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group1().xyz())
                + (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0().xyz())
                + (right_anti_dual.group1().yzx() * anti_wedge.group2().zxy())
                - (right_anti_dual.group1().zxy() * anti_wedge.group2().yzx()))
            .with_w(right_anti_dual[e5] * anti_wedge[scalar]),
            // e1, e2, e3, e4
            Simd32x3::from(1.0).with_w(0.0) * anti_wedge.group0().www().with_w(0.0) * right_anti_dual.group1().xyz().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
        );
    }
}
impl RejectOrthogonallyFrom<Line> for VersorEven {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       30        0
    //    simd3        0        3        0
    //    simd4        2        5        0
    // Totals...
    // yes simd       20       38        0
    //  no simd       26       59        0
    fn reject_orthogonally_from(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x3::from(1.0).with_w(0.0) * other.group0().with_w(0.0) * self.group0().www().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
            // e235, e315, e125, e4
            Simd32x4::from([self[e12345], self[e12345], self[e12345], 1.0])
                * other.group1().with_w(-(other[e415] * self[e423]) - (other[e425] * self[e431]) - (other[e435] * self[e412])),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other[e415] * self[e321]) + (other[e315] * self[e412]),
                (other[e425] * self[e321]) + (other[e125] * self[e423]),
                (other[e435] * self[e321]) + (other[e235] * self[e431]),
                -(other[e425] * self[e315]) - (other[e435] * self[e125]) - (other[e235] * self[e415]) - (other[e315] * self[e425]) - (other[e125] * self[e435]),
            ]) - (other.group1().zxy() * self.group0().yzx()).with_w(other[e415] * self[e235]),
        );
        let right_anti_dual = AntiLine::from_groups(/* e23, e31, e12 */ other.group0(), /* e15, e25, e35 */ other.group1());
        return CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group0(),
            // e415, e425, e435, e321
            Simd32x4::from([anti_wedge[e4], anti_wedge[e4], anti_wedge[e4], 1.0])
                * right_anti_dual
                    .group1()
                    .with_w(-(anti_wedge[e1] * right_anti_dual[e23]) - (anti_wedge[e2] * right_anti_dual[e31]) - (anti_wedge[e3] * right_anti_dual[e12])),
            // e235, e315, e125, e12345
            Simd32x4::from([
                (anti_wedge[e2] * right_anti_dual[e35]) + (anti_wedge[e5] * right_anti_dual[e23]),
                (anti_wedge[e3] * right_anti_dual[e15]) + (anti_wedge[e5] * right_anti_dual[e31]),
                (anti_wedge[e1] * right_anti_dual[e25]) + (anti_wedge[e5] * right_anti_dual[e12]),
                -(anti_wedge[e431] * right_anti_dual[e25])
                    - (anti_wedge[e412] * right_anti_dual[e35])
                    - (anti_wedge[e415] * right_anti_dual[e23])
                    - (anti_wedge[e425] * right_anti_dual[e31])
                    - (anti_wedge[e435] * right_anti_dual[e12]),
            ]) - (right_anti_dual.group1().yzx() * anti_wedge.group3().zxy()).with_w(anti_wedge[e423] * right_anti_dual[e15]),
        );
    }
}
impl RejectOrthogonallyFrom<Motor> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       29        0
    //    simd3        4        7        0
    //    simd4        7       10        0
    // Totals...
    // yes simd       27       46        0
    //  no simd       56       90        0
    fn reject_orthogonally_from(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(other[e12345]) * self.group0(),
            // e415, e425, e435, e321
            ((Simd32x3::from(other[e12345]) * self.group1().xyz()) + (Simd32x3::from(self[e12345]) * other.group0().xyz())).with_w(other[e12345] * self[e321]),
            // e235, e315, e125, e5
            (Simd32x4::from(other[e12345]) * self.group2())
                + (Simd32x4::from(self[e12345]) * other.group1())
                + Simd32x3::from(0.0).with_w(
                    -(other[e415] * self[e235])
                        - (other[e425] * self[e315])
                        - (other[e435] * self[e125])
                        - (other[e235] * self[e415])
                        - (other[e315] * self[e425])
                        - (other[e125] * self[e435]),
                ),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e12345] * self[e1]) + (other[e315] * self[e412]),
                (other[e12345] * self[e2]) + (other[e125] * self[e423]),
                (other[e12345] * self[e3]) + (other[e235] * self[e431]),
                -(other[e425] * self[e431]) - (other[e435] * self[e412]),
            ]) + (other.group0() * self.group1().www().with_w(self[e4]))
                - (self.group0().yzxx() * other.group1().zxy().with_w(other[e415])),
        );
        let right_anti_dual = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e3215
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (right_anti_dual.group0() * anti_wedge.group3().www().with_w(anti_wedge[e12345]))
                + Simd32x3::from(0.0).with_w(
                    -(right_anti_dual[e23] * anti_wedge[e415])
                        - (right_anti_dual[e31] * anti_wedge[e425])
                        - (right_anti_dual[e12] * anti_wedge[e435])
                        - (right_anti_dual[e15] * anti_wedge[e423])
                        - (right_anti_dual[e25] * anti_wedge[e431])
                        - (right_anti_dual[e35] * anti_wedge[e412]),
                )
                + (right_anti_dual.group0().www() * anti_wedge.group0().xyz()).with_w(right_anti_dual[e3215] * anti_wedge[e4]),
            // e415, e425, e435, e321
            Simd32x4::from([
                right_anti_dual[e15] * anti_wedge[e4],
                right_anti_dual[e25] * anti_wedge[e4],
                right_anti_dual[e35] * anti_wedge[e4],
                -(right_anti_dual[e23] * anti_wedge[e1]) - (right_anti_dual[e31] * anti_wedge[e2]) - (right_anti_dual[e12] * anti_wedge[e3]),
            ]) + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1()),
            // e235, e315, e125, e5
            ((Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group2().xyz())
                + (Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group0().xyz())
                + (right_anti_dual.group1().zxy() * anti_wedge.group3().yzx())
                - (right_anti_dual.group1().yzx() * anti_wedge.group3().zxy()))
            .with_w(right_anti_dual[scalar] * anti_wedge[e5]),
            // e1, e2, e3, e4
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group3(),
        );
    }
}
impl RejectOrthogonallyFrom<MultiVector> for VersorEven {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      109      146        0
    //    simd2        0        1        0
    //    simd3       28       49        0
    //    simd4       27       23        0
    // Totals...
    // yes simd      164      219        0
    //  no simd      301      387        0
    fn reject_orthogonally_from(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (other[scalar] * self[e12345])
                    + (other[e4235] * self[e1])
                    + (other[e4315] * self[e2])
                    + (other[e4125] * self[e3])
                    + (other[e3215] * self[e4])
                    + (other[e1234] * self[e5])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412])
                    - (other[e45] * self[e321])
                    - (other[e41] * self[e235])
                    - (other[e42] * self[e315])
                    - (other[e43] * self[e125])
                    - (other[e23] * self[e415])
                    - (other[e31] * self[e425])
                    - (other[e12] * self[e435]),
                other[e12345] * self[e12345],
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e1] * self[e12345]) + (other[e415] * self[e321]) + (other[e321] * self[e415]) + (other[e315] * self[e412]),
                (other[e2] * self[e12345]) + (other[e425] * self[e321]) + (other[e321] * self[e425]) + (other[e125] * self[e423]),
                (other[e3] * self[e12345]) + (other[e435] * self[e321]) + (other[e321] * self[e435]) + (other[e235] * self[e431]),
                -(other[e415] * self[e423]) - (other[e425] * self[e431]) - (other[e435] * self[e412]) - (other[e412] * self[e435]),
            ]) + (Simd32x4::from(other[e12345]) * self.group3())
                + (other.group7().zxy() * self.group2().yzx()).with_w(other[e4] * self[e12345])
                - (other.group7().yzx() * self.group2().zxy()).with_w(other[e423] * self[e415])
                - (other.group8().zxy() * self.group0().yzx()).with_w(other[e431] * self[e425]),
            // e5
            (other[e12345] * self[e5]) + (other[e5] * self[e12345])
                - (other[e415] * self[e235])
                - (other[e425] * self[e315])
                - (other[e435] * self[e125])
                - (other[e235] * self[e415])
                - (other[e315] * self[e425])
                - (other[e125] * self[e435]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e4125] * self[e315]) + (other[e3215] * self[e415]),
                (other[e4235] * self[e125]) + (other[e3215] * self[e425]),
                (other[e4315] * self[e235]) + (other[e3215] * self[e435]),
                -(other[e4315] * self[e425]) - (other[e4125] * self[e435]),
            ]) + (Simd32x4::from(self[e12345]) * other.group3())
                - (other.group9().yzxx() * self.group2().zxy().with_w(self[e415])),
            // e41, e42, e43
            (Simd32x3::from(other[e1234]) * self.group1().xyz()) + (Simd32x3::from(self[e12345]) * other.group4()) + (other.group9().yzx() * self.group0().zxy())
                - (other.group9().zxy() * self.group0().yzx()),
            // e23, e31, e12
            (Simd32x3::from(other[e3215]) * self.group0().xyz()) + (Simd32x3::from(other[e1234]) * self.group2().xyz()) + (Simd32x3::from(self[e12345]) * other.group5())
                - (Simd32x3::from(self[e321]) * other.group9().xyz()),
            // e415, e425, e435, e321
            (Simd32x4::from(other[e12345]) * self.group1()) + (Simd32x4::from(self[e12345]) * other.group6()),
            // e423, e431, e412
            (Simd32x3::from(other[e12345]) * self.group0().xyz()) + (Simd32x3::from(self[e12345]) * other.group7()),
            // e235, e315, e125
            (Simd32x3::from(other[e12345]) * self.group2().xyz()) + (Simd32x3::from(self[e12345]) * other.group8()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * other.group9(),
            // e1234
            other[e1234] * self[e12345],
        );
        let right_anti_dual = MultiVector::from_groups(
            // scalar, e12345
            other.group0().yx() * Simd32x2::from([-1.0, 1.0]),
            // e1, e2, e3, e4
            other.group9().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e5
            other[e3215],
            // e15, e25, e35, e45
            other.group8().with_w(other[e321] * -1.0),
            // e41, e42, e43
            other.group7(),
            // e23, e31, e12
            other.group6().xyz(),
            // e415, e425, e435, e321
            other.group5().with_w(other[e45]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e423, e431, e412
            other.group4() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group3().xyz() * Simd32x3::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group1().xyz().with_w(other[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1234
            other[e4] * -1.0,
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                anti_wedge[scalar] * right_anti_dual[scalar],
                (anti_wedge[scalar] * right_anti_dual[e12345])
                    + (anti_wedge[e12345] * right_anti_dual[scalar])
                    + (anti_wedge[e1] * right_anti_dual[e4235])
                    + (anti_wedge[e2] * right_anti_dual[e4315])
                    + (anti_wedge[e3] * right_anti_dual[e4125])
                    + (anti_wedge[e4] * right_anti_dual[e3215])
                    + (anti_wedge[e5] * right_anti_dual[e1234])
                    + (anti_wedge[e4235] * right_anti_dual[e1])
                    + (anti_wedge[e4315] * right_anti_dual[e2])
                    + (anti_wedge[e4125] * right_anti_dual[e3])
                    + (anti_wedge[e3215] * right_anti_dual[e4])
                    + (anti_wedge[e1234] * right_anti_dual[e5])
                    - (anti_wedge[e15] * right_anti_dual[e423])
                    - (anti_wedge[e25] * right_anti_dual[e431])
                    - (anti_wedge[e35] * right_anti_dual[e412])
                    - (anti_wedge[e45] * right_anti_dual[e321])
                    - (anti_wedge[e41] * right_anti_dual[e235])
                    - (anti_wedge[e42] * right_anti_dual[e315])
                    - (anti_wedge[e43] * right_anti_dual[e125])
                    - (anti_wedge[e23] * right_anti_dual[e415])
                    - (anti_wedge[e31] * right_anti_dual[e425])
                    - (anti_wedge[e12] * right_anti_dual[e435])
                    - (anti_wedge[e415] * right_anti_dual[e23])
                    - (anti_wedge[e425] * right_anti_dual[e31])
                    - (anti_wedge[e435] * right_anti_dual[e12])
                    - (anti_wedge[e321] * right_anti_dual[e45])
                    - (anti_wedge[e423] * right_anti_dual[e15])
                    - (anti_wedge[e431] * right_anti_dual[e25])
                    - (anti_wedge[e412] * right_anti_dual[e35])
                    - (anti_wedge[e235] * right_anti_dual[e41])
                    - (anti_wedge[e315] * right_anti_dual[e42])
                    - (anti_wedge[e125] * right_anti_dual[e43]),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1()) + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1()),
            // e5
            (anti_wedge[scalar] * right_anti_dual[e5]) + (anti_wedge[e5] * right_anti_dual[scalar]),
            // e15, e25, e35, e45
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group3())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group3())
                + (Simd32x4::from(right_anti_dual[e5]) * anti_wedge.group1())
                - (Simd32x4::from(anti_wedge[e5]) * right_anti_dual.group1()),
            // e41, e42, e43
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group4())
                + (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group1().xyz())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group4())
                - (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group1().xyz()),
            // e23, e31, e12
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group5())
                + (anti_wedge.group1().yzx() * right_anti_dual.group1().zxy())
                - (anti_wedge.group1().zxy() * right_anti_dual.group1().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (anti_wedge[e4] * right_anti_dual[e15])
                    + (anti_wedge[e5] * right_anti_dual[e41])
                    + (anti_wedge[e15] * right_anti_dual[e4])
                    + (anti_wedge[e41] * right_anti_dual[e5]),
                (anti_wedge[e4] * right_anti_dual[e25])
                    + (anti_wedge[e5] * right_anti_dual[e42])
                    + (anti_wedge[e25] * right_anti_dual[e4])
                    + (anti_wedge[e42] * right_anti_dual[e5]),
                (anti_wedge[e4] * right_anti_dual[e35])
                    + (anti_wedge[e5] * right_anti_dual[e43])
                    + (anti_wedge[e35] * right_anti_dual[e4])
                    + (anti_wedge[e43] * right_anti_dual[e5]),
                -(anti_wedge[e1] * right_anti_dual[e23])
                    - (anti_wedge[e2] * right_anti_dual[e31])
                    - (anti_wedge[e3] * right_anti_dual[e12])
                    - (anti_wedge[e12] * right_anti_dual[e3]),
            ]) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group6())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group6())
                - (right_anti_dual.group1().xyzy() * anti_wedge.group3().www().with_w(anti_wedge[e31]))
                - (right_anti_dual.group3().www() * anti_wedge.group1().xyz()).with_w(anti_wedge[e23] * right_anti_dual[e1]),
            // e423, e431, e412
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group7())
                + (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group7())
                + (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group5())
                + (anti_wedge.group4().yzx() * right_anti_dual.group1().zxy())
                + (right_anti_dual.group4().yzx() * anti_wedge.group1().zxy())
                - (anti_wedge.group4().zxy() * right_anti_dual.group1().yzx())
                - (right_anti_dual.group4().zxy() * anti_wedge.group1().yzx()),
            // e235, e315, e125
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group8())
                + (Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group8())
                + (Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group5())
                + (anti_wedge.group1().yzx() * right_anti_dual.group3().zxy())
                + (anti_wedge.group3().zxy() * right_anti_dual.group1().yzx())
                - (anti_wedge.group1().zxy() * right_anti_dual.group3().yzx())
                - (anti_wedge.group3().yzx() * right_anti_dual.group1().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (anti_wedge[e3] * right_anti_dual[e425])
                    + (anti_wedge[e4] * right_anti_dual[e235])
                    + (anti_wedge[e45] * right_anti_dual[e23])
                    + (anti_wedge[e435] * right_anti_dual[e2]),
                (anti_wedge[e1] * right_anti_dual[e435])
                    + (anti_wedge[e4] * right_anti_dual[e315])
                    + (anti_wedge[e45] * right_anti_dual[e31])
                    + (anti_wedge[e415] * right_anti_dual[e3]),
                (anti_wedge[e2] * right_anti_dual[e415])
                    + (anti_wedge[e4] * right_anti_dual[e125])
                    + (anti_wedge[e45] * right_anti_dual[e12])
                    + (anti_wedge[e425] * right_anti_dual[e1]),
                -(anti_wedge[e1] * right_anti_dual[e235])
                    - (anti_wedge[e2] * right_anti_dual[e315])
                    - (anti_wedge[e3] * right_anti_dual[e125])
                    - (anti_wedge[e5] * right_anti_dual[e321]),
            ]) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group9())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group9())
                + (Simd32x4::from([right_anti_dual[e5], right_anti_dual[e5], right_anti_dual[e5], right_anti_dual[e3]]) * anti_wedge.group7().with_w(anti_wedge[e125]))
                + (anti_wedge.group5() * right_anti_dual.group3().www()).with_w(anti_wedge[e315] * right_anti_dual[e2])
                + (anti_wedge.group4().yzx() * right_anti_dual.group3().zxy()).with_w(anti_wedge[e235] * right_anti_dual[e1])
                + (right_anti_dual.group4().yzx() * anti_wedge.group3().zxy()).with_w(anti_wedge[e321] * right_anti_dual[e5])
                - (Simd32x4::from([anti_wedge[e5], anti_wedge[e5], anti_wedge[e5], anti_wedge[e15]]) * right_anti_dual.group7().with_w(right_anti_dual[e23]))
                - (right_anti_dual.group3().yzxx() * anti_wedge.group4().zxy().with_w(anti_wedge[e23]))
                - (anti_wedge.group8() * right_anti_dual.group1().www()).with_w(anti_wedge[e31] * right_anti_dual[e25])
                - (right_anti_dual.group4().zxy() * anti_wedge.group3().yzx()).with_w(anti_wedge[e12] * right_anti_dual[e35])
                - (anti_wedge.group1().yzx() * right_anti_dual.group6().zxy()).with_w(anti_wedge[e25] * right_anti_dual[e31])
                - (anti_wedge.group6().yzx() * right_anti_dual.group1().zxy()).with_w(anti_wedge[e35] * right_anti_dual[e12]),
            // e1234
            (anti_wedge[scalar] * right_anti_dual[e1234])
                + (anti_wedge[e1] * right_anti_dual[e423])
                + (anti_wedge[e2] * right_anti_dual[e431])
                + (anti_wedge[e3] * right_anti_dual[e412])
                + (anti_wedge[e4] * right_anti_dual[e321])
                + (anti_wedge[e1234] * right_anti_dual[scalar])
                - (anti_wedge[e41] * right_anti_dual[e23])
                - (anti_wedge[e42] * right_anti_dual[e31])
                - (anti_wedge[e43] * right_anti_dual[e12])
                - (anti_wedge[e23] * right_anti_dual[e41])
                - (anti_wedge[e31] * right_anti_dual[e42])
                - (anti_wedge[e12] * right_anti_dual[e43])
                - (anti_wedge[e321] * right_anti_dual[e4])
                - (anti_wedge[e423] * right_anti_dual[e1])
                - (anti_wedge[e431] * right_anti_dual[e2])
                - (anti_wedge[e412] * right_anti_dual[e3]),
        );
    }
}
impl RejectOrthogonallyFrom<Plane> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       29        0
    //    simd3        2        6        0
    //    simd4        6        9        0
    // Totals...
    // yes simd       14       44        0
    //  no simd       36       83        0
    fn reject_orthogonally_from(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                other[e4125] * self[e431] * -1.0,
                other[e4235] * self[e412] * -1.0,
                other[e4315] * self[e423] * -1.0,
                (other[e4315] * self[e2]) + (other[e4125] * self[e3]) + (other[e3215] * self[e4]),
            ]) + (other.group0().yzxx() * self.group0().zxy().with_w(self[e1])),
            // e23, e31, e12, e45
            Simd32x4::from([
                other[e3215] * self[e423],
                other[e3215] * self[e431],
                other[e3215] * self[e412],
                -(other[e4315] * self[e425]) - (other[e4125] * self[e435]),
            ]) - (other.group0().xyzx() * self.group1().wwwx()),
            // e15, e25, e35, e1234
            (Simd32x3::from(other[e3215]) * self.group1().xyz()).with_w(0.0) + (other.group0().zxy() * self.group2().yzx()).with_w(0.0)
                - (other.group0().yzx() * self.group2().zxy()).with_w(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * other.group0(),
        );
        let right_anti_dual = AntiPlane::from_groups(/* e1, e2, e3, e5 */ other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]));
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                right_anti_dual[e2] * anti_wedge[e43] * -1.0,
                right_anti_dual[e3] * anti_wedge[e41] * -1.0,
                right_anti_dual[e1] * anti_wedge[e42] * -1.0,
                (right_anti_dual[e2] * anti_wedge[e4315]) + (right_anti_dual[e3] * anti_wedge[e4125]) + (right_anti_dual[e5] * anti_wedge[e1234]),
            ]) + (right_anti_dual.group0().zxyx() * anti_wedge.group0().yzx().with_w(anti_wedge[e4235])),
            // e415, e425, e435, e321
            Simd32x4::from([
                right_anti_dual[e5] * anti_wedge[e41],
                right_anti_dual[e5] * anti_wedge[e42],
                right_anti_dual[e5] * anti_wedge[e43],
                -(right_anti_dual[e2] * anti_wedge[e31]) - (right_anti_dual[e3] * anti_wedge[e12]),
            ]) - (right_anti_dual.group0().xyzx() * anti_wedge.group1().wwwx()),
            // e235, e315, e125, e5
            ((Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group1().xyz()) + (right_anti_dual.group0().yzx() * anti_wedge.group2().zxy())
                - (right_anti_dual.group0().zxy() * anti_wedge.group2().yzx()))
            .with_w(right_anti_dual[e5] * anti_wedge[scalar]),
            // e1, e2, e3, e4
            Simd32x3::from(1.0).with_w(0.0) * anti_wedge.group0().www().with_w(0.0) * right_anti_dual.group0().xyz().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
        );
    }
}
impl RejectOrthogonallyFrom<RoundPoint> for VersorEven {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        7        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        4        9        0
    //  no simd        4       15        0
    fn reject_orthogonally_from(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = RoundPoint::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from(self[e12345]) * other.group0(), /* e5 */ other[e5] * self[e12345]);
        let right_anti_dual = Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            other.group0().xyz().with_w(other[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1234
            other[e4] * -1.0,
        );
        return AntiScalar::from_groups(
            // e12345
            (anti_wedge[e1] * right_anti_dual[e4235])
                + (anti_wedge[e2] * right_anti_dual[e4315])
                + (anti_wedge[e3] * right_anti_dual[e4125])
                + (anti_wedge[e4] * right_anti_dual[e3215])
                + (anti_wedge[e5] * right_anti_dual[e1234]),
        );
    }
}
impl RejectOrthogonallyFrom<Scalar> for VersorEven {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn reject_orthogonally_from(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ f32::powi(other[scalar], 2) * self[e12345]);
    }
}
impl RejectOrthogonallyFrom<Sphere> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       36        0
    //    simd3        4        6        0
    //    simd4        6        9        0
    // Totals...
    // yes simd       22       51        0
    //  no simd       48       90        0
    fn reject_orthogonally_from(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                other[e4125] * self[e431] * -1.0,
                other[e4235] * self[e412] * -1.0,
                other[e4315] * self[e423] * -1.0,
                (other[e4125] * self[e3]) + (other[e3215] * self[e4]) + (other[e1234] * self[e5]),
            ]) + (Simd32x4::from([other[e1234], other[e1234], other[e1234], self[e2]]) * self.group1().xyz().with_w(other[e4315]))
                + (other.group0().yzxx() * self.group0().zxy().with_w(self[e1])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e3215] * self[e423]) + (other[e1234] * self[e235]),
                (other[e3215] * self[e431]) + (other[e1234] * self[e315]),
                (other[e3215] * self[e412]) + (other[e1234] * self[e125]),
                -(other[e4315] * self[e425]) - (other[e4125] * self[e435]),
            ]) - (other.group0().xyzx() * self.group1().wwwx()),
            // e15, e25, e35, e1234
            ((Simd32x3::from(other[e3215]) * self.group1().xyz()) + (other.group0().zxy() * self.group2().yzx()) - (other.group0().yzx() * self.group2().zxy()))
                .with_w(other[e1234] * self[e12345]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * other.group0(),
        );
        let right_anti_dual = RoundPoint::from_groups(
            // e1, e2, e3, e4
            other.group0().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e5
            other[e3215],
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                right_anti_dual[e2] * anti_wedge[e43] * -1.0,
                right_anti_dual[e3] * anti_wedge[e41] * -1.0,
                right_anti_dual[e1] * anti_wedge[e42] * -1.0,
                (right_anti_dual[e3] * anti_wedge[e4125]) + (right_anti_dual[e4] * anti_wedge[e3215]) + (right_anti_dual[e5] * anti_wedge[e1234]),
            ]) + (right_anti_dual.group0().zxyx() * anti_wedge.group0().yzx().with_w(anti_wedge[e4235]))
                + (right_anti_dual.group0().wwwy() * anti_wedge.group1().xyz().with_w(anti_wedge[e4315])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (right_anti_dual[e4] * anti_wedge[e15]) + (right_anti_dual[e5] * anti_wedge[e41]),
                (right_anti_dual[e4] * anti_wedge[e25]) + (right_anti_dual[e5] * anti_wedge[e42]),
                (right_anti_dual[e4] * anti_wedge[e35]) + (right_anti_dual[e5] * anti_wedge[e43]),
                -(right_anti_dual[e2] * anti_wedge[e31]) - (right_anti_dual[e3] * anti_wedge[e12]),
            ]) - (right_anti_dual.group0().xyzx() * anti_wedge.group1().wwwx()),
            // e235, e315, e125, e5
            ((Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group1().xyz()) + (right_anti_dual.group0().yzx() * anti_wedge.group2().zxy())
                - (right_anti_dual.group0().zxy() * anti_wedge.group2().yzx()))
            .with_w(right_anti_dual[e5] * anti_wedge[scalar]),
            // e1, e2, e3, e4
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group0(),
        );
    }
}
impl RejectOrthogonallyFrom<VersorEven> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       48        0
    //    simd3        4       10        0
    //    simd4       13       15        0
    // Totals...
    // yes simd       49       73        0
    //  no simd       96      138        0
    fn reject_orthogonally_from(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x3::from(other[e12345]) * self.group0().xyz()) + (Simd32x3::from(self[e12345]) * other.group0().xyz())).with_w(other[e12345] * self[e12345]),
            // e415, e425, e435, e321
            (Simd32x4::from(other[e12345]) * self.group1()) + (Simd32x4::from(self[e12345]) * other.group1()),
            // e235, e315, e125, e5
            (Simd32x4::from(other[e12345]) * self.group2())
                + (Simd32x4::from(self[e12345]) * other.group2())
                + Simd32x3::from(0.0).with_w(
                    -(other[e415] * self[e235])
                        - (other[e425] * self[e315])
                        - (other[e435] * self[e125])
                        - (other[e235] * self[e415])
                        - (other[e315] * self[e425])
                        - (other[e125] * self[e435]),
                ),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e415] * self[e321]) + (other[e321] * self[e415]) + (other[e315] * self[e412]) + (other[e1] * self[e12345]),
                (other[e425] * self[e321]) + (other[e321] * self[e425]) + (other[e125] * self[e423]) + (other[e2] * self[e12345]),
                (other[e435] * self[e321]) + (other[e321] * self[e435]) + (other[e235] * self[e431]) + (other[e3] * self[e12345]),
                -(other[e412] * self[e435]) - (other[e415] * self[e423]) - (other[e425] * self[e431]) - (other[e435] * self[e412]),
            ]) + (other.group0().zxyw() * self.group2().yzx().with_w(self[e4]))
                + (other.group0().www() * self.group3().xyz()).with_w(other[e4] * self[e12345])
                - (other.group0().yzxx() * self.group2().zxy().with_w(self[e415]))
                - (other.group2().zxy() * self.group0().yzx()).with_w(other[e431] * self[e425]),
        );
        let right_anti_dual = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e1234
            other.group2().xyz().with_w(other[e4]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            other.group3().xyz().with_w(other[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group0())
                + (anti_wedge.group3().wwwx() * right_anti_dual.group1().xyz().with_w(right_anti_dual[e4235]))
                + Simd32x3::from(0.0).with_w(
                    (anti_wedge[e2] * right_anti_dual[e4315]) + (anti_wedge[e3] * right_anti_dual[e4125]) + (anti_wedge[e4] * right_anti_dual[e3215])
                        - (anti_wedge[e431] * right_anti_dual[e25])
                        - (anti_wedge[e412] * right_anti_dual[e35])
                        - (anti_wedge[e415] * right_anti_dual[e23])
                        - (anti_wedge[e425] * right_anti_dual[e31])
                        - (anti_wedge[e435] * right_anti_dual[e12])
                        - (anti_wedge[e321] * right_anti_dual[e45])
                        - (anti_wedge[e235] * right_anti_dual[e41])
                        - (anti_wedge[e315] * right_anti_dual[e42])
                        - (anti_wedge[e125] * right_anti_dual[e43]),
                )
                + (anti_wedge.group3().zxy() * right_anti_dual.group0().yzx()).with_w(anti_wedge[e5] * right_anti_dual[e1234])
                - (anti_wedge.group3().yzx() * right_anti_dual.group0().zxy()).with_w(anti_wedge[e423] * right_anti_dual[e15]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (anti_wedge[e5] * right_anti_dual[e41]) + (anti_wedge[e4] * right_anti_dual[e15]),
                (anti_wedge[e5] * right_anti_dual[e42]) + (anti_wedge[e4] * right_anti_dual[e25]),
                (anti_wedge[e5] * right_anti_dual[e43]) + (anti_wedge[e4] * right_anti_dual[e35]),
                -(anti_wedge[e2] * right_anti_dual[e31]) - (anti_wedge[e3] * right_anti_dual[e12]),
            ]) + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1())
                - (anti_wedge.group3().xyzx() * right_anti_dual.group1().wwwx()),
            // e235, e315, e125, e5
            ((Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group1().xyz())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group2().xyz())
                + (anti_wedge.group3().yzx() * right_anti_dual.group2().zxy())
                - (anti_wedge.group3().zxy() * right_anti_dual.group2().yzx()))
            .with_w(anti_wedge[e5] * right_anti_dual[scalar]),
            // e1, e2, e3, e4
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group3(),
        );
    }
}
impl RejectOrthogonallyFrom<VersorOdd> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       30       46        0
    //    simd3        6       12        0
    //    simd4       12       14        0
    // Totals...
    // yes simd       48       72        0
    //  no simd       96      138        0
    fn reject_orthogonally_from(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (self.group0().zxyw() * other.group3().yzx().with_w(other[scalar]))
                + Simd32x3::from(0.0).with_w(
                    (self[e2] * other[e4315]) + (self[e3] * other[e4125]) + (self[e4] * other[e3215])
                        - (self[e431] * other[e25])
                        - (self[e412] * other[e35])
                        - (self[e415] * other[e23])
                        - (self[e425] * other[e31])
                        - (self[e435] * other[e12])
                        - (self[e321] * other[e45])
                        - (self[e235] * other[e41])
                        - (self[e315] * other[e42])
                        - (self[e125] * other[e43]),
                )
                + (self.group0().www() * other.group0().xyz()).with_w(self[e5] * other[e1234])
                + (other.group2().www() * self.group1().xyz()).with_w(self[e1] * other[e4235])
                - (self.group0().yzxx() * other.group3().zxy().with_w(other[e15])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e12345] * other[e23]) + (self[e235] * other[e1234]),
                (self[e12345] * other[e31]) + (self[e315] * other[e1234]),
                (self[e12345] * other[e12]) + (self[e125] * other[e1234]),
                -(self[e425] * other[e4315]) - (self[e435] * other[e4125]),
            ]) + (self.group0() * other.group3().www().with_w(other[e45]))
                - (self.group1().wwwx() * other.group3().xyzx()),
            // e15, e25, e35, e1234
            ((Simd32x3::from(self[e12345]) * other.group2().xyz()) + (Simd32x3::from(other[e3215]) * self.group1().xyz()) + (self.group2().yzx() * other.group3().zxy())
                - (self.group2().zxy() * other.group3().yzx()))
            .with_w(self[e12345] * other[e1234]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * other.group3(),
        );
        let right_anti_dual = VersorEven::from_groups(
            // e423, e431, e412, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            other.group2().xyz().with_w(other[e3215]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e4
            other.group3().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group0())
                + (right_anti_dual.group3().wwwx() * anti_wedge.group1().xyz().with_w(anti_wedge[e4235]))
                + Simd32x3::from(0.0).with_w(
                    (right_anti_dual[e2] * anti_wedge[e4315]) + (right_anti_dual[e3] * anti_wedge[e4125]) + (right_anti_dual[e4] * anti_wedge[e3215])
                        - (right_anti_dual[e431] * anti_wedge[e25])
                        - (right_anti_dual[e412] * anti_wedge[e35])
                        - (right_anti_dual[e415] * anti_wedge[e23])
                        - (right_anti_dual[e425] * anti_wedge[e31])
                        - (right_anti_dual[e435] * anti_wedge[e12])
                        - (right_anti_dual[e321] * anti_wedge[e45])
                        - (right_anti_dual[e235] * anti_wedge[e41])
                        - (right_anti_dual[e315] * anti_wedge[e42])
                        - (right_anti_dual[e125] * anti_wedge[e43]),
                )
                + (right_anti_dual.group3().zxy() * anti_wedge.group0().yzx()).with_w(right_anti_dual[e5] * anti_wedge[e1234])
                - (right_anti_dual.group3().yzx() * anti_wedge.group0().zxy()).with_w(right_anti_dual[e423] * anti_wedge[e15]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (right_anti_dual[e5] * anti_wedge[e41]) + (right_anti_dual[e4] * anti_wedge[e15]),
                (right_anti_dual[e5] * anti_wedge[e42]) + (right_anti_dual[e4] * anti_wedge[e25]),
                (right_anti_dual[e5] * anti_wedge[e43]) + (right_anti_dual[e4] * anti_wedge[e35]),
                -(right_anti_dual[e2] * anti_wedge[e31]) - (right_anti_dual[e3] * anti_wedge[e12]),
            ]) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1())
                - (right_anti_dual.group3().xyzx() * anti_wedge.group1().wwwx()),
            // e235, e315, e125, e5
            ((Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group1().xyz())
                + (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group2().xyz())
                + (right_anti_dual.group3().yzx() * anti_wedge.group2().zxy())
                - (right_anti_dual.group3().zxy() * anti_wedge.group2().yzx()))
            .with_w(right_anti_dual[e5] * anti_wedge[scalar]),
            // e1, e2, e3, e4
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group3(),
        );
    }
}
impl std::ops::Div<reject_orthogonally_from> for VersorOdd {
    type Output = reject_orthogonally_from_partial<VersorOdd>;
    fn div(self, _rhs: reject_orthogonally_from) -> Self::Output {
        reject_orthogonally_from_partial(self)
    }
}
impl RejectOrthogonallyFrom<AntiCircleRotor> for VersorOdd {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       25        0
    //    simd3        0        2        0
    //    simd4        4        5        0
    // Totals...
    // yes simd       18       32        0
    //  no simd       30       51        0
    fn reject_orthogonally_from(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = RoundPoint::from_groups(
            // e1, e2, e3, e4
            Simd32x4::from([
                -(other[e41] * self[e3215]) - (other[e31] * self[e4125]),
                -(other[e42] * self[e3215]) - (other[e12] * self[e4235]),
                -(other[e43] * self[e3215]) - (other[e23] * self[e4315]),
                (other[e43] * self[e4125]) + (other[e45] * self[e1234]),
            ]) + (self.group3().yzxx() * other.group1().zxy().with_w(other[e41]))
                + (self.group2().www() * other.group2().xyz()).with_w(other[e42] * self[e4315]),
            // e5
            -(other[e45] * self[e3215]) - (other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]),
        );
        let right_anti_dual = CircleRotor::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e12345
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (right_anti_dual[e425] * anti_wedge[e3]) + (right_anti_dual[e235] * anti_wedge[e4]),
                (right_anti_dual[e435] * anti_wedge[e1]) + (right_anti_dual[e315] * anti_wedge[e4]),
                (right_anti_dual[e415] * anti_wedge[e2]) + (right_anti_dual[e125] * anti_wedge[e4]),
                -(right_anti_dual[e315] * anti_wedge[e2]) - (right_anti_dual[e125] * anti_wedge[e3]),
            ]) - (Simd32x4::from(anti_wedge[e5]) * right_anti_dual.group0().with_w(right_anti_dual[e321]))
                - (anti_wedge.group0().yzxx() * right_anti_dual.group1().zxy().with_w(right_anti_dual[e235])),
            // e1234
            (right_anti_dual[e423] * anti_wedge[e1])
                + (right_anti_dual[e431] * anti_wedge[e2])
                + (right_anti_dual[e412] * anti_wedge[e3])
                + (right_anti_dual[e321] * anti_wedge[e4]),
        );
    }
}
impl RejectOrthogonallyFrom<AntiDipoleInversion> for VersorOdd {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       33       46        0
    //    simd3        2        7        0
    //    simd4        7        9        0
    // Totals...
    // yes simd       42       62        0
    //  no simd       67      103        0
    fn reject_orthogonally_from(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiCircleRotor::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[e1234]) * other.group1().xyz()) + (other.group0().zxy() * self.group3().yzx()) - (other.group0().yzx() * self.group3().zxy()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e423] * self[e3215]) + (other[e235] * self[e1234]),
                (other[e431] * self[e3215]) + (other[e315] * self[e1234]),
                (other[e412] * self[e3215]) + (other[e125] * self[e1234]),
                -(other[e425] * self[e4315]) - (other[e435] * self[e4125]),
            ]) - (other.group1().wwwx() * self.group3().xyzx()),
            // e15, e25, e35, scalar
            (Simd32x4::from(self[e3215]) * other.group1().xyz().with_w(other[e4]))
                + (self.group3().zxyx() * other.group2().yzx().with_w(other[e1]))
                + Simd32x3::from(0.0).with_w(
                    (other[e2] * self[e4315]) + (other[e3] * self[e4125]) + (other[e5] * self[e1234])
                        - (other[e431] * self[e25])
                        - (other[e412] * self[e35])
                        - (other[e415] * self[e23])
                        - (other[e425] * self[e31])
                        - (other[e435] * self[e12])
                        - (other[e321] * self[e45])
                        - (other[e235] * self[e41])
                        - (other[e315] * self[e42])
                        - (other[e125] * self[e43]),
                )
                - (other.group2().zxy() * self.group3().yzx()).with_w(other[e423] * self[e15]),
        );
        let right_anti_dual = DipoleInversion::from_groups(
            // e41, e42, e43
            other.group0(),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e1234
            other.group2() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            other.group3() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from([right_anti_dual[e15], right_anti_dual[e25], right_anti_dual[e35], 1.0])
                * anti_wedge.group2().www().with_w(
                    (anti_wedge[scalar] * right_anti_dual[e1234])
                        - (anti_wedge[e41] * right_anti_dual[e23])
                        - (anti_wedge[e42] * right_anti_dual[e31])
                        - (anti_wedge[e43] * right_anti_dual[e12])
                        - (anti_wedge[e23] * right_anti_dual[e41])
                        - (anti_wedge[e31] * right_anti_dual[e42])
                        - (anti_wedge[e12] * right_anti_dual[e43]),
                ),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (anti_wedge[e23] * right_anti_dual[e45])
                    + (anti_wedge[e45] * right_anti_dual[e23])
                    + (anti_wedge[e35] * right_anti_dual[e42])
                    + (anti_wedge[scalar] * right_anti_dual[e4235]),
                (anti_wedge[e31] * right_anti_dual[e45])
                    + (anti_wedge[e45] * right_anti_dual[e31])
                    + (anti_wedge[e15] * right_anti_dual[e43])
                    + (anti_wedge[scalar] * right_anti_dual[e4315]),
                (anti_wedge[e12] * right_anti_dual[e45])
                    + (anti_wedge[e45] * right_anti_dual[e12])
                    + (anti_wedge[e25] * right_anti_dual[e41])
                    + (anti_wedge[scalar] * right_anti_dual[e4125]),
                -(anti_wedge[e12] * right_anti_dual[e35])
                    - (anti_wedge[e15] * right_anti_dual[e23])
                    - (anti_wedge[e25] * right_anti_dual[e31])
                    - (anti_wedge[e35] * right_anti_dual[e12]),
            ]) + (anti_wedge.group0().yzx() * right_anti_dual.group2().zxy()).with_w(anti_wedge[scalar] * right_anti_dual[e3215])
                - (right_anti_dual.group2().yzxx() * anti_wedge.group0().zxy().with_w(anti_wedge[e23]))
                - (right_anti_dual.group0().zxy() * anti_wedge.group2().yzx()).with_w(anti_wedge[e31] * right_anti_dual[e25]),
        );
    }
}
impl RejectOrthogonallyFrom<AntiDualNum> for VersorOdd {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        5        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0       21        0
    fn reject_orthogonally_from(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(other[e3215]) * self.group3().xyz().with_w(self[e1234]),
            // e1, e2, e3, e5
            Simd32x4::from(other[e3215]) * self.group0().xyz().with_w(self[e45]),
        );
        let right_anti_dual = DualNum::from_groups(/* e5, e12345 */ other.group0());
        return Flector::from_groups(
            // e15, e25, e35, e45
            right_anti_dual.group0().xx().with_zw(right_anti_dual[e5], 0.0)
                * Simd32x3::from(1.0).with_w(0.0)
                * anti_wedge.group1().xyz().with_w(0.0)
                * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
            // e4235, e4315, e4125, e3215
            Simd32x3::from(0.0).with_w(anti_wedge[e321] * right_anti_dual[e5]),
        );
    }
}
impl RejectOrthogonallyFrom<AntiFlatPoint> for VersorOdd {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        9        0
    //    simd3        1        2        0
    //    simd4        1        4        0
    // Totals...
    // yes simd        6       15        0
    //  no simd       11       31        0
    fn reject_orthogonally_from(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                other[e235] * self[e1234],
                other[e315] * self[e1234],
                other[e125] * self[e1234],
                -(other[e315] * self[e42]) - (other[e125] * self[e43]) - (other[e321] * self[e45]),
            ]) - (other.group0().wwwx() * self.group3().xyz().with_w(self[e41])),
            // e15, e25, e35, e3215
            ((other.group0().yzx() * self.group3().zxy()) - (other.group0().zxy() * self.group3().yzx())).with_w(0.0),
        );
        let right_anti_dual = FlatPoint::from_groups(/* e15, e25, e35, e45 */ other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]));
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([right_anti_dual[e45], right_anti_dual[e45], right_anti_dual[e45], 1.0])
                * anti_wedge
                    .group0()
                    .xyz()
                    .with_w(-(anti_wedge[e23] * right_anti_dual[e15]) - (anti_wedge[e31] * right_anti_dual[e25]) - (anti_wedge[e12] * right_anti_dual[e35])),
        );
    }
}
impl RejectOrthogonallyFrom<AntiFlector> for VersorOdd {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       13        0
    //    simd3        1        3        0
    //    simd4        3        5        0
    // Totals...
    // yes simd       11       21        0
    //  no simd       22       42        0
    fn reject_orthogonally_from(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x3::from(0.0).with_w(
                (other[e2] * self[e4315]) + (other[e3] * self[e4125]) + (other[e5] * self[e1234])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43])
                    - (other[e321] * self[e45]),
            ) + (self.group2().www() * other.group0().xyz()).with_w(other[e1] * self[e4235])
                - (other.group0().wwwx() * self.group3().xyz().with_w(self[e41])),
            // e15, e25, e35, e3215
            ((other.group0().yzx() * self.group3().zxy()) - (other.group0().zxy() * self.group3().yzx())).with_w(0.0),
        );
        let right_anti_dual = Flector::from_groups(
            // e15, e25, e35, e45
            other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                anti_wedge[scalar] * right_anti_dual[e4235],
                anti_wedge[scalar] * right_anti_dual[e4315],
                anti_wedge[scalar] * right_anti_dual[e4125],
                -(anti_wedge[e23] * right_anti_dual[e15]) - (anti_wedge[e31] * right_anti_dual[e25]) - (anti_wedge[e12] * right_anti_dual[e35]),
            ]) + (anti_wedge.group0() * right_anti_dual.group0().www().with_w(right_anti_dual[e3215])),
        );
    }
}
impl RejectOrthogonallyFrom<AntiLine> for VersorOdd {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       13        0
    //    simd3        0        2        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        7       17        0
    //  no simd       13       27        0
    fn reject_orthogonally_from(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiPlane::from_groups(
            // e1, e2, e3, e5
            Simd32x4::from([
                (other[e12] * self[e4315]) + (other[e15] * self[e1234]),
                (other[e23] * self[e4125]) + (other[e25] * self[e1234]),
                (other[e31] * self[e4235]) + (other[e35] * self[e1234]),
                -(other[e25] * self[e4315]) - (other[e35] * self[e4125]),
            ]) - (self.group3().zxyx() * other.group0().yzx().with_w(other[e15])),
        );
        let right_anti_dual = Line::from_groups(
            // e415, e425, e435
            other.group0() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group1() * Simd32x3::from(-1.0),
        );
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                anti_wedge[e3] * right_anti_dual[e425],
                anti_wedge[e1] * right_anti_dual[e435],
                anti_wedge[e2] * right_anti_dual[e415],
                -(anti_wedge[e2] * right_anti_dual[e315]) - (anti_wedge[e3] * right_anti_dual[e125]),
            ]) - (anti_wedge.group0().yzxx() * right_anti_dual.group0().zxy().with_w(right_anti_dual[e235])),
        );
    }
}
impl RejectOrthogonallyFrom<AntiMotor> for VersorOdd {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       12        0
    //    simd3        0        2        0
    //    simd4        4        8        0
    // Totals...
    // yes simd        9       22        0
    //  no simd       21       50        0
    fn reject_orthogonally_from(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(other[e3215]) * self.group3().xyz().with_w(self[e1234]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other[e15] * self[e1234]) + (other[e3215] * self[e41]),
                (other[e25] * self[e1234]) + (other[e3215] * self[e42]),
                (other[e35] * self[e1234]) + (other[e3215] * self[e43]),
                -(other[e25] * self[e4315]) - (other[e35] * self[e4125]),
            ]) + (other.group0().zxy() * self.group3().yzx()).with_w(other[e3215] * self[e45])
                - (self.group3().zxyx() * other.group0().yzx().with_w(other[e15])),
        );
        let right_anti_dual = Motor::from_groups(
            // e415, e425, e435, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x3::from(1.0).with_w(0.0) * right_anti_dual.group1().www().with_w(0.0) * anti_wedge.group1().xyz().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
            // e4235, e4315, e4125, e3215
            Simd32x3::from(0.0).with_w(-(anti_wedge[e2] * right_anti_dual[e315]) - (anti_wedge[e3] * right_anti_dual[e125]))
                + (anti_wedge.group1().zxy() * right_anti_dual.group0().yzx()).with_w(anti_wedge[e321] * right_anti_dual[e5])
                - (anti_wedge.group1().yzxx() * right_anti_dual.group0().zxy().with_w(right_anti_dual[e235])),
        );
    }
}
impl RejectOrthogonallyFrom<AntiPlane> for VersorOdd {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        5        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        3        6        0
    //  no simd        3        9        0
    fn reject_orthogonally_from(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from((other[e1] * self[e4235]) + (other[e2] * self[e4315]) + (other[e3] * self[e4125]) + (other[e5] * self[e1234]))
                * Simd32x4::from([other[e1], other[e2], other[e3], other[e5] * -1.0]),
        );
    }
}
impl RejectOrthogonallyFrom<AntiScalar> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        8        0
    // Totals...
    // yes simd        0        9        0
    //  no simd        0       33        0
    fn reject_orthogonally_from(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(other[e12345]) * self.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other[e12345]) * self.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(other[e12345]) * self.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e12345]) * self.group3(),
        );
        let right_anti_dual = Scalar::from_groups(/* scalar */ other[e12345] * -1.0);
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group3(),
        );
    }
}
impl RejectOrthogonallyFrom<Circle> for VersorOdd {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       48        0
    //    simd3        2        7        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       38       59        0
    //  no simd       54       85        0
    fn reject_orthogonally_from(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiCircleRotor::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[e1234]) * other.group1().xyz()) + (other.group0().zxy() * self.group3().yzx()) - (other.group0().yzx() * self.group3().zxy()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e423] * self[e3215]) + (other[e235] * self[e1234]),
                (other[e431] * self[e3215]) + (other[e315] * self[e1234]),
                (other[e412] * self[e3215]) + (other[e125] * self[e1234]),
                -(other[e425] * self[e4315]) - (other[e435] * self[e4125]),
            ]) - (other.group1().wwwx() * self.group3().xyzx()),
            // e15, e25, e35, scalar
            Simd32x4::from([
                (other[e415] * self[e3215]) + (other[e315] * self[e4125]),
                (other[e425] * self[e3215]) + (other[e125] * self[e4235]),
                (other[e435] * self[e3215]) + (other[e235] * self[e4315]),
                -(other[e431] * self[e25])
                    - (other[e412] * self[e35])
                    - (other[e415] * self[e23])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12])
                    - (other[e321] * self[e45])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]) - (other.group2().zxy() * self.group3().yzx()).with_w(other[e423] * self[e15]),
        );
        let right_anti_dual = Dipole::from_groups(
            // e41, e42, e43
            other.group0(),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35
            other.group2(),
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from([anti_wedge[scalar], anti_wedge[scalar], anti_wedge[scalar], 1.0])
                * right_anti_dual.group2().with_w(
                    -(anti_wedge[e41] * right_anti_dual[e23])
                        - (anti_wedge[e42] * right_anti_dual[e31])
                        - (anti_wedge[e43] * right_anti_dual[e12])
                        - (anti_wedge[e23] * right_anti_dual[e41])
                        - (anti_wedge[e31] * right_anti_dual[e42])
                        - (anti_wedge[e12] * right_anti_dual[e43]),
                ),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (anti_wedge[e42] * right_anti_dual[e35])
                    + (anti_wedge[e23] * right_anti_dual[e45])
                    + (anti_wedge[e45] * right_anti_dual[e23])
                    + (anti_wedge[e35] * right_anti_dual[e42]),
                (anti_wedge[e43] * right_anti_dual[e15])
                    + (anti_wedge[e31] * right_anti_dual[e45])
                    + (anti_wedge[e45] * right_anti_dual[e31])
                    + (anti_wedge[e15] * right_anti_dual[e43]),
                (anti_wedge[e41] * right_anti_dual[e25])
                    + (anti_wedge[e12] * right_anti_dual[e45])
                    + (anti_wedge[e45] * right_anti_dual[e12])
                    + (anti_wedge[e25] * right_anti_dual[e41]),
                -(anti_wedge[e12] * right_anti_dual[e35])
                    - (anti_wedge[e15] * right_anti_dual[e23])
                    - (anti_wedge[e25] * right_anti_dual[e31])
                    - (anti_wedge[e35] * right_anti_dual[e12]),
            ]) - (anti_wedge.group0().zxy() * right_anti_dual.group2().yzx()).with_w(anti_wedge[e23] * right_anti_dual[e15])
                - (right_anti_dual.group0().zxy() * anti_wedge.group2().yzx()).with_w(anti_wedge[e31] * right_anti_dual[e25]),
        );
    }
}
impl RejectOrthogonallyFrom<CircleRotor> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       55        0
    //    simd3        4       11        0
    //    simd4        9        8        0
    // Totals...
    // yes simd       45       74        0
    //  no simd       80      120        0
    fn reject_orthogonally_from(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e415] * self[e1234]) + (other[e12345] * self[e41]),
                (other[e425] * self[e1234]) + (other[e12345] * self[e42]),
                (other[e435] * self[e1234]) + (other[e12345] * self[e43]),
                -(other[e431] * self[e25])
                    - (other[e412] * self[e35])
                    - (other[e415] * self[e23])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12])
                    - (other[e321] * self[e45])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]) + (other.group0().zxy() * self.group3().yzx()).with_w(other[e12345] * self[scalar])
                - (other.group0().yzx() * self.group3().zxy()).with_w(other[e423] * self[e15]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e235] * self[e1234]) + (other[e12345] * self[e23]),
                (other[e315] * self[e1234]) + (other[e12345] * self[e31]),
                (other[e125] * self[e1234]) + (other[e12345] * self[e12]),
                -(other[e425] * self[e4315]) - (other[e435] * self[e4125]),
            ]) + (other.group0() * self.group3().www()).with_w(other[e12345] * self[e45])
                - (other.group1().wwwx() * self.group3().xyzx()),
            // e15, e25, e35, e1234
            ((Simd32x3::from(other[e12345]) * self.group2().xyz()) + (Simd32x3::from(self[e3215]) * other.group1().xyz()) + (other.group2().yzx() * self.group3().zxy())
                - (other.group2().zxy() * self.group3().yzx()))
            .with_w(other[e12345] * self[e1234]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e12345]) * self.group3(),
        );
        let right_anti_dual = AntiCircleRotor::from_groups(
            // e41, e42, e43
            other.group0(),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, scalar
            other.group2() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group0().xyz()) + (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0()))
                .with_w(right_anti_dual[scalar] * anti_wedge[scalar]),
            // e23, e31, e12, e45
            (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1()) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                right_anti_dual[scalar] * anti_wedge[e15],
                right_anti_dual[scalar] * anti_wedge[e25],
                right_anti_dual[scalar] * anti_wedge[e35],
                -(right_anti_dual[e41] * anti_wedge[e23])
                    - (right_anti_dual[e42] * anti_wedge[e31])
                    - (right_anti_dual[e43] * anti_wedge[e12])
                    - (right_anti_dual[e23] * anti_wedge[e41])
                    - (right_anti_dual[e31] * anti_wedge[e42])
                    - (right_anti_dual[e12] * anti_wedge[e43]),
            ]) + (right_anti_dual.group2() * anti_wedge.group0().www().with_w(anti_wedge[e1234])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (right_anti_dual[e23] * anti_wedge[e45])
                    + (right_anti_dual[e45] * anti_wedge[e23])
                    + (right_anti_dual[e35] * anti_wedge[e42])
                    + (right_anti_dual[scalar] * anti_wedge[e4235]),
                (right_anti_dual[e31] * anti_wedge[e45])
                    + (right_anti_dual[e45] * anti_wedge[e31])
                    + (right_anti_dual[e15] * anti_wedge[e43])
                    + (right_anti_dual[scalar] * anti_wedge[e4315]),
                (right_anti_dual[e12] * anti_wedge[e45])
                    + (right_anti_dual[e45] * anti_wedge[e12])
                    + (right_anti_dual[e25] * anti_wedge[e41])
                    + (right_anti_dual[scalar] * anti_wedge[e4125]),
                -(right_anti_dual[e12] * anti_wedge[e35])
                    - (right_anti_dual[e15] * anti_wedge[e23])
                    - (right_anti_dual[e25] * anti_wedge[e31])
                    - (right_anti_dual[e35] * anti_wedge[e12]),
            ]) + (right_anti_dual.group0().yzx() * anti_wedge.group2().zxy()).with_w(right_anti_dual[scalar] * anti_wedge[e3215])
                - (anti_wedge.group2().yzxx() * right_anti_dual.group0().zxy().with_w(right_anti_dual[e23]))
                - (right_anti_dual.group2().yzx() * anti_wedge.group0().zxy()).with_w(right_anti_dual[e31] * anti_wedge[e25]),
        );
    }
}
impl RejectOrthogonallyFrom<Dipole> for VersorOdd {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       25        0
    //    simd3        0        3        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       18       32        0
    //  no simd       30       50        0
    fn reject_orthogonally_from(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = RoundPoint::from_groups(
            // e1, e2, e3, e4
            Simd32x4::from([
                -(other[e41] * self[e3215]) - (other[e31] * self[e4125]),
                -(other[e42] * self[e3215]) - (other[e12] * self[e4235]),
                -(other[e43] * self[e3215]) - (other[e23] * self[e4315]),
                (other[e43] * self[e4125]) + (other[e45] * self[e1234]),
            ]) + (self.group3().yzxy() * other.group1().zxy().with_w(other[e42]))
                + (other.group2() * self.group2().www()).with_w(other[e41] * self[e4235]),
            // e5
            -(other[e45] * self[e3215]) - (other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]),
        );
        let right_anti_dual = Circle::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125
            other.group2() * Simd32x3::from(-1.0),
        );
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (right_anti_dual[e425] * anti_wedge[e3]) + (right_anti_dual[e235] * anti_wedge[e4]),
                (right_anti_dual[e435] * anti_wedge[e1]) + (right_anti_dual[e315] * anti_wedge[e4]),
                (right_anti_dual[e415] * anti_wedge[e2]) + (right_anti_dual[e125] * anti_wedge[e4]),
                -(right_anti_dual[e321] * anti_wedge[e5]) - (right_anti_dual[e125] * anti_wedge[e3]),
            ]) - (Simd32x4::from([anti_wedge[e5], anti_wedge[e5], anti_wedge[e5], anti_wedge[e1]]) * right_anti_dual.group0().with_w(right_anti_dual[e235]))
                - (anti_wedge.group0().yzxy() * right_anti_dual.group1().zxy().with_w(right_anti_dual[e315])),
            // e1234
            (right_anti_dual[e423] * anti_wedge[e1])
                + (right_anti_dual[e431] * anti_wedge[e2])
                + (right_anti_dual[e412] * anti_wedge[e3])
                + (right_anti_dual[e321] * anti_wedge[e4]),
        );
    }
}
impl RejectOrthogonallyFrom<DipoleInversion> for VersorOdd {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       19        0
    //    simd3        2       12        0
    //    simd4       20       20        0
    // Totals...
    // yes simd       32       51        0
    //  no simd       96      135        0
    fn reject_orthogonally_from(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[e1234]) * other.group3().xyz()) - (Simd32x3::from(other[e1234]) * self.group3().xyz()),
            // e415, e425, e435, e321
            (other.group3().yzxw() * self.group3().zxy().with_w(self[e1234])) - (self.group3().yzxw() * other.group3().zxy().with_w(other[e1234])),
            // e235, e315, e125, e4
            (self.group3().xyzx() * other.group3().www().with_w(other[e41]))
                + Simd32x3::from(0.0).with_w(
                    (other[e42] * self[e4315]) + (other[e43] * self[e4125]) + (other[e45] * self[e1234])
                        - (other[e4235] * self[e41])
                        - (other[e4315] * self[e42])
                        - (other[e4125] * self[e43]),
                )
                - (self.group3().www() * other.group3().xyz()).with_w(other[e1234] * self[e45]),
            // e1, e2, e3, e5
            (Simd32x4::from(other[e3215]) * self.group0().xyz().with_w(self[e45]))
                + (other.group3().zxyz() * self.group1().yzx().with_w(self[e35]))
                + (self.group2().wwwy() * other.group2().xyz().with_w(other[e4315]))
                + (other.group1().zxy() * self.group3().yzx()).with_w(other[e4235] * self[e15])
                - (Simd32x4::from(self[e3215]) * other.group0().with_w(other[e45]))
                - (other.group2().wwwy() * self.group2().xyz().with_w(self[e4315]))
                - (self.group3().zxyx() * other.group1().yzx().with_w(other[e15]))
                - (other.group3().yzx() * self.group1().zxy()).with_w(other[e35] * self[e4125]),
        );
        let right_anti_dual = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e4
            other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group3() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group3().xyz()) - (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group3().xyz()),
            // e23, e31, e12, e45
            (right_anti_dual.group3().zxyw() * anti_wedge.group3().yzx().with_w(anti_wedge[e4]))
                - (anti_wedge.group3().zxyw() * right_anti_dual.group3().yzx().with_w(right_anti_dual[e4])),
            // e15, e25, e35, e1234
            Simd32x3::from(0.0).with_w(
                (anti_wedge[e4] * right_anti_dual[e321]) + (anti_wedge[e2] * right_anti_dual[e431]) + (anti_wedge[e3] * right_anti_dual[e412])
                    - (anti_wedge[e431] * right_anti_dual[e2])
                    - (anti_wedge[e412] * right_anti_dual[e3])
                    - (anti_wedge[e321] * right_anti_dual[e4]),
            ) + (right_anti_dual.group3().www() * anti_wedge.group3().xyz()).with_w(anti_wedge[e1] * right_anti_dual[e423])
                - (right_anti_dual.group3().xyzx() * anti_wedge.group3().www().with_w(anti_wedge[e423])),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(right_anti_dual[e5]) * anti_wedge.group0().with_w(anti_wedge[e321]))
                + (anti_wedge.group2().wwwy() * right_anti_dual.group2().xyz().with_w(right_anti_dual[e2]))
                + (right_anti_dual.group3().yzxx() * anti_wedge.group1().zxy().with_w(anti_wedge[e235]))
                + (anti_wedge.group3().zxy() * right_anti_dual.group1().yzx()).with_w(anti_wedge[e125] * right_anti_dual[e3])
                - (anti_wedge.group3().yzxw() * right_anti_dual.group1().zxyw())
                - (right_anti_dual.group2().wwwz() * anti_wedge.group2().xyz().with_w(anti_wedge[e3]))
                - (right_anti_dual.group0() * anti_wedge.group3().www()).with_w(anti_wedge[e1] * right_anti_dual[e235])
                - (anti_wedge.group1().yzx() * right_anti_dual.group3().zxy()).with_w(anti_wedge[e2] * right_anti_dual[e315]),
        );
    }
}
impl RejectOrthogonallyFrom<DualNum> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        4        0
    //    simd2        0        1        0
    //    simd4        0        8        0
    // Totals...
    // yes simd        2       13        0
    //  no simd        2       38        0
    fn reject_orthogonally_from(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([self[e41], self[e42], self[e43], 1.0]) * other.group0().yy().with_zw(other[e12345], (other[e5] * self[e1234]) + (other[e12345] * self[scalar])),
            // e23, e31, e12, e45
            Simd32x4::from(other[e12345]) * self.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(other[e12345]) * self.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e12345]) * self.group3(),
        );
        let right_anti_dual = AntiDualNum::from_groups(/* e3215, scalar */ other.group0() * Simd32x2::from(-1.0));
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([anti_wedge[e4235], anti_wedge[e4315], anti_wedge[e4125], 1.0])
                * right_anti_dual
                    .group0()
                    .yy()
                    .with_zw(right_anti_dual[scalar], (right_anti_dual[e3215] * anti_wedge[scalar]) + (right_anti_dual[scalar] * anti_wedge[e3215])),
        );
    }
}
impl RejectOrthogonallyFrom<FlatPoint> for VersorOdd {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6        9        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        6       12        0
    //  no simd        6       21        0
    fn reject_orthogonally_from(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = RoundPoint::from_groups(
            // e1, e2, e3, e4
            Simd32x4::from(self[e1234]) * other.group0(),
            // e5
            -(other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]) - (other[e45] * self[e3215]),
        );
        let right_anti_dual = AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]));
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([anti_wedge[e4], anti_wedge[e4], anti_wedge[e4], 1.0])
                * right_anti_dual.group0().xyz().with_w(
                    -(right_anti_dual[e235] * anti_wedge[e1])
                        - (right_anti_dual[e315] * anti_wedge[e2])
                        - (right_anti_dual[e125] * anti_wedge[e3])
                        - (right_anti_dual[e321] * anti_wedge[e5]),
                ),
            // e1234
            right_anti_dual[e321] * anti_wedge[e4],
        );
    }
}
impl RejectOrthogonallyFrom<Flector> for VersorOdd {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       18        0
    //    simd3        2       10        0
    //    simd4       12       10        0
    // Totals...
    // yes simd       22       38        0
    //  no simd       62       88        0
    fn reject_orthogonally_from(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[e1234]) * other.group1().xyz(),
            // e415, e425, e435, e321
            ((other.group1().yzx() * self.group3().zxy()) - (other.group1().zxy() * self.group3().yzx())).with_w(other[e3215] * self[e1234]),
            // e235, e315, e125, e4
            Simd32x3::from(0.0).with_w(-(other[e4315] * self[e42]) - (other[e4125] * self[e43])) + (other.group1().www() * self.group3().xyz()).with_w(other[e45] * self[e1234])
                - (other.group1().xyzx() * self.group3().www().with_w(self[e41])),
            // e1, e2, e3, e5
            (other.group1().zxyy() * self.group1().yzx().with_w(self[e25]))
                + (other.group1().wwwz() * self.group0().xyz().with_w(self[e35]))
                + (self.group2().wwwx() * other.group0().xyz().with_w(other[e4235]))
                + Simd32x3::from(0.0).with_w((other[e3215] * self[e45]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]) - (other[e45] * self[e3215]))
                - (other.group1().yzx() * self.group1().zxy()).with_w(other[e15] * self[e4235]),
        );
        let right_anti_dual = AntiFlector::from_groups(
            // e235, e315, e125, e321
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group1().xyz(),
            // e23, e31, e12, e45
            ((anti_wedge.group3().yzx() * right_anti_dual.group1().zxy()) - (anti_wedge.group3().zxy() * right_anti_dual.group1().yzx()))
                .with_w(anti_wedge[e4] * right_anti_dual[e5]),
            // e15, e25, e35, e1234
            Simd32x3::from(0.0).with_w(-(anti_wedge[e431] * right_anti_dual[e2]) - (anti_wedge[e412] * right_anti_dual[e3]))
                + (right_anti_dual.group1().www() * anti_wedge.group3().xyz()).with_w(anti_wedge[e4] * right_anti_dual[e321])
                - (right_anti_dual.group1().xyzx() * anti_wedge.group3().www().with_w(anti_wedge[e423])),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(right_anti_dual[e5]) * anti_wedge.group0().with_w(anti_wedge[e321]))
                + (anti_wedge.group2().wwwy() * right_anti_dual.group0().xyz().with_w(right_anti_dual[e2]))
                + (right_anti_dual.group1().yzxx() * anti_wedge.group1().zxy().with_w(anti_wedge[e235]))
                + Simd32x3::from(0.0).with_w(
                    (anti_wedge[e125] * right_anti_dual[e3])
                        - (anti_wedge[e2] * right_anti_dual[e315])
                        - (anti_wedge[e3] * right_anti_dual[e125])
                        - (anti_wedge[e5] * right_anti_dual[e321]),
                )
                - (anti_wedge.group1().yzx() * right_anti_dual.group1().zxy()).with_w(anti_wedge[e1] * right_anti_dual[e235]),
        );
    }
}
impl RejectOrthogonallyFrom<Line> for VersorOdd {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       30        0
    //    simd3        0        3        0
    //    simd4        2        5        0
    // Totals...
    // yes simd       20       38        0
    //  no simd       26       59        0
    fn reject_orthogonally_from(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[e1234]) * other.group0(),
            // e23, e31, e12, e45
            Simd32x4::from([self[e1234], self[e1234], self[e1234], 1.0])
                * other.group1().with_w(-(other[e415] * self[e4235]) - (other[e425] * self[e4315]) - (other[e435] * self[e4125])),
            // e15, e25, e35, scalar
            Simd32x4::from([
                (other[e415] * self[e3215]) + (other[e315] * self[e4125]),
                (other[e425] * self[e3215]) + (other[e125] * self[e4235]),
                (other[e435] * self[e3215]) + (other[e235] * self[e4315]),
                -(other[e425] * self[e31]) - (other[e435] * self[e12]) - (other[e235] * self[e41]) - (other[e315] * self[e42]) - (other[e125] * self[e43]),
            ]) - (other.group1().zxy() * self.group3().yzx()).with_w(other[e415] * self[e23]),
        );
        let right_anti_dual = AntiLine::from_groups(/* e23, e31, e12 */ other.group0(), /* e15, e25, e35 */ other.group1());
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x3::from(1.0).with_w(0.0) * right_anti_dual.group0().with_w(0.0) * anti_wedge.group2().www().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
            // e15, e25, e35, e1234
            Simd32x4::from([anti_wedge[scalar], anti_wedge[scalar], anti_wedge[scalar], 1.0])
                * right_anti_dual
                    .group1()
                    .with_w(-(anti_wedge[e41] * right_anti_dual[e23]) - (anti_wedge[e42] * right_anti_dual[e31]) - (anti_wedge[e43] * right_anti_dual[e12])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (anti_wedge[e42] * right_anti_dual[e35]) + (anti_wedge[e45] * right_anti_dual[e23]),
                (anti_wedge[e43] * right_anti_dual[e15]) + (anti_wedge[e45] * right_anti_dual[e31]),
                (anti_wedge[e41] * right_anti_dual[e25]) + (anti_wedge[e45] * right_anti_dual[e12]),
                -(anti_wedge[e23] * right_anti_dual[e15])
                    - (anti_wedge[e31] * right_anti_dual[e25])
                    - (anti_wedge[e12] * right_anti_dual[e35])
                    - (anti_wedge[e25] * right_anti_dual[e31])
                    - (anti_wedge[e35] * right_anti_dual[e12]),
            ]) - (anti_wedge.group0().zxy() * right_anti_dual.group1().yzx()).with_w(anti_wedge[e15] * right_anti_dual[e23]),
        );
    }
}
impl RejectOrthogonallyFrom<Motor> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       31        0
    //    simd3        4        9        0
    //    simd4        7        8        0
    // Totals...
    // yes simd       24       48        0
    //  no simd       53       90        0
    fn reject_orthogonally_from(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (other.group0() * self.group2().www().with_w(self[scalar]))
                + Simd32x3::from(0.0).with_w(
                    -(other[e415] * self[e23])
                        - (other[e425] * self[e31])
                        - (other[e435] * self[e12])
                        - (other[e235] * self[e41])
                        - (other[e315] * self[e42])
                        - (other[e125] * self[e43]),
                )
                + (other.group0().www() * self.group0().xyz()).with_w(other[e5] * self[e1234]),
            // e23, e31, e12, e45
            Simd32x4::from([
                other[e235] * self[e1234],
                other[e315] * self[e1234],
                other[e125] * self[e1234],
                -(other[e415] * self[e4235]) - (other[e425] * self[e4315]) - (other[e435] * self[e4125]),
            ]) + (Simd32x4::from(other[e12345]) * self.group1()),
            // e15, e25, e35, e1234
            ((Simd32x3::from(other[e12345]) * self.group2().xyz()) + (Simd32x3::from(self[e3215]) * other.group0().xyz()) + (other.group1().yzx() * self.group3().zxy())
                - (other.group1().zxy() * self.group3().yzx()))
            .with_w(other[e12345] * self[e1234]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e12345]) * self.group3(),
        );
        let right_anti_dual = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e3215
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group0(),
            // e23, e31, e12, e45
            ((Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group1().xyz()) + (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0().xyz()))
                .with_w(right_anti_dual[scalar] * anti_wedge[e45]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                right_anti_dual[e15] * anti_wedge[scalar],
                right_anti_dual[e25] * anti_wedge[scalar],
                right_anti_dual[e35] * anti_wedge[scalar],
                -(right_anti_dual[e23] * anti_wedge[e41]) - (right_anti_dual[e31] * anti_wedge[e42]) - (right_anti_dual[e12] * anti_wedge[e43]),
            ]) + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group2()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                right_anti_dual[e35] * anti_wedge[e42],
                right_anti_dual[e15] * anti_wedge[e43],
                right_anti_dual[e25] * anti_wedge[e41],
                -(right_anti_dual[e31] * anti_wedge[e25])
                    - (right_anti_dual[e12] * anti_wedge[e35])
                    - (right_anti_dual[e15] * anti_wedge[e23])
                    - (right_anti_dual[e25] * anti_wedge[e31])
                    - (right_anti_dual[e35] * anti_wedge[e12]),
            ]) + (right_anti_dual.group0() * anti_wedge.group1().www().with_w(anti_wedge[e3215]))
                + (right_anti_dual.group0().www() * anti_wedge.group3().xyz()).with_w(right_anti_dual[e3215] * anti_wedge[scalar])
                - (right_anti_dual.group1().yzx() * anti_wedge.group0().zxy()).with_w(right_anti_dual[e23] * anti_wedge[e15]),
        );
    }
}
impl RejectOrthogonallyFrom<MultiVector> for VersorOdd {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       97      132        0
    //    simd2        0        1        0
    //    simd3       28       52        0
    //    simd4       30       24        0
    // Totals...
    // yes simd      155      209        0
    //  no simd      301      386        0
    fn reject_orthogonally_from(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (other[e12345] * self[scalar])
                    + (other[e1] * self[e4235])
                    + (other[e2] * self[e4315])
                    + (other[e3] * self[e4125])
                    + (other[e4] * self[e3215])
                    + (other[e5] * self[e1234])
                    - (other[e415] * self[e23])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12])
                    - (other[e321] * self[e45])
                    - (other[e423] * self[e15])
                    - (other[e431] * self[e25])
                    - (other[e412] * self[e35])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
                0.0,
            ]),
            // e1, e2, e3, e4
            (self.group3().yzxx() * other.group5().zxy().with_w(other[e41]))
                + (other.group9().zxy() * self.group1().yzx()).with_w(other[e43] * self[e4125])
                + (other.group9().www() * self.group0().xyz()).with_w(other[e45] * self[e1234])
                + (self.group2().www() * other.group3().xyz()).with_w(other[e42] * self[e4315])
                - (Simd32x4::from(other[e1234]) * self.group2().xyz().with_w(self[e45]))
                - (other.group9().yzxz() * self.group1().zxy().with_w(self[e43]))
                - (other.group4() * self.group3().www()).with_w(other[e4235] * self[e41])
                - (other.group5().yzx() * self.group3().zxy()).with_w(other[e4315] * self[e42]),
            // e5
            (other[e4235] * self[e15]) + (other[e4315] * self[e25]) + (other[e4125] * self[e35]) + (other[e3215] * self[e45])
                - (other[e15] * self[e4235])
                - (other[e25] * self[e4315])
                - (other[e35] * self[e4125])
                - (other[e45] * self[e3215]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e415] * self[e3215]) + (other[e315] * self[e4125]),
                (other[e425] * self[e3215]) + (other[e125] * self[e4235]),
                (other[e435] * self[e3215]) + (other[e235] * self[e4315]),
                -(other[e425] * self[e4315]) - (other[e435] * self[e4125]),
            ]) + (Simd32x4::from(other[e12345]) * self.group2().xyz().with_w(self[e45]))
                - (self.group3().yzxx() * other.group8().zxy().with_w(other[e415])),
            // e41, e42, e43
            (Simd32x3::from(other[e12345]) * self.group0().xyz()) + (Simd32x3::from(self[e1234]) * other.group6().xyz()) + (other.group7().zxy() * self.group3().yzx())
                - (other.group7().yzx() * self.group3().zxy()),
            // e23, e31, e12
            (Simd32x3::from(other[e12345]) * self.group1().xyz()) + (Simd32x3::from(self[e1234]) * other.group8()) + (Simd32x3::from(self[e3215]) * other.group7())
                - (Simd32x3::from(other[e321]) * self.group3().xyz()),
            // e415, e425, e435, e321
            (other.group9().yzxw() * self.group3().zxy().with_w(self[e1234])) - (other.group9().zxy() * self.group3().yzx()).with_w(other[e1234] * self[e3215]),
            // e423, e431, e412
            (Simd32x3::from(self[e1234]) * other.group9().xyz()) - (Simd32x3::from(other[e1234]) * self.group3().xyz()),
            // e235, e315, e125
            (Simd32x3::from(other[e3215]) * self.group3().xyz()) - (Simd32x3::from(self[e3215]) * other.group9().xyz()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e12345]) * self.group3(),
            // e1234
            other[e12345] * self[e1234],
        );
        let right_anti_dual = MultiVector::from_groups(
            // scalar, e12345
            other.group0().yx() * Simd32x2::from([-1.0, 1.0]),
            // e1, e2, e3, e4
            other.group9().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e5
            other[e3215],
            // e15, e25, e35, e45
            other.group8().with_w(other[e321] * -1.0),
            // e41, e42, e43
            other.group7(),
            // e23, e31, e12
            other.group6().xyz(),
            // e415, e425, e435, e321
            other.group5().with_w(other[e45]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e423, e431, e412
            other.group4() * Simd32x3::from(-1.0),
            // e235, e315, e125
            other.group3().xyz() * Simd32x3::from(-1.0),
            // e4235, e4315, e4125, e3215
            other.group1().xyz().with_w(other[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1234
            other[e4] * -1.0,
        );
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                anti_wedge[scalar] * right_anti_dual[scalar],
                (anti_wedge[scalar] * right_anti_dual[e12345])
                    + (anti_wedge[e12345] * right_anti_dual[scalar])
                    + (anti_wedge[e1] * right_anti_dual[e4235])
                    + (anti_wedge[e2] * right_anti_dual[e4315])
                    + (anti_wedge[e3] * right_anti_dual[e4125])
                    + (anti_wedge[e4] * right_anti_dual[e3215])
                    + (anti_wedge[e5] * right_anti_dual[e1234])
                    + (anti_wedge[e4235] * right_anti_dual[e1])
                    + (anti_wedge[e4315] * right_anti_dual[e2])
                    + (anti_wedge[e4125] * right_anti_dual[e3])
                    + (anti_wedge[e3215] * right_anti_dual[e4])
                    + (anti_wedge[e1234] * right_anti_dual[e5])
                    - (anti_wedge[e15] * right_anti_dual[e423])
                    - (anti_wedge[e25] * right_anti_dual[e431])
                    - (anti_wedge[e35] * right_anti_dual[e412])
                    - (anti_wedge[e45] * right_anti_dual[e321])
                    - (anti_wedge[e41] * right_anti_dual[e235])
                    - (anti_wedge[e42] * right_anti_dual[e315])
                    - (anti_wedge[e43] * right_anti_dual[e125])
                    - (anti_wedge[e23] * right_anti_dual[e415])
                    - (anti_wedge[e31] * right_anti_dual[e425])
                    - (anti_wedge[e12] * right_anti_dual[e435])
                    - (anti_wedge[e415] * right_anti_dual[e23])
                    - (anti_wedge[e425] * right_anti_dual[e31])
                    - (anti_wedge[e435] * right_anti_dual[e12])
                    - (anti_wedge[e321] * right_anti_dual[e45])
                    - (anti_wedge[e423] * right_anti_dual[e15])
                    - (anti_wedge[e431] * right_anti_dual[e25])
                    - (anti_wedge[e412] * right_anti_dual[e35])
                    - (anti_wedge[e235] * right_anti_dual[e41])
                    - (anti_wedge[e315] * right_anti_dual[e42])
                    - (anti_wedge[e125] * right_anti_dual[e43]),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1()) + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1()),
            // e5
            (anti_wedge[scalar] * right_anti_dual[e5]) + (anti_wedge[e5] * right_anti_dual[scalar]),
            // e15, e25, e35, e45
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group3())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group3())
                + (Simd32x4::from(right_anti_dual[e5]) * anti_wedge.group1())
                - (Simd32x4::from(anti_wedge[e5]) * right_anti_dual.group1()),
            // e41, e42, e43
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group4())
                + (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group1().xyz())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group4())
                - (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group1().xyz()),
            // e23, e31, e12
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group5())
                + (anti_wedge.group1().yzx() * right_anti_dual.group1().zxy())
                - (anti_wedge.group1().zxy() * right_anti_dual.group1().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (anti_wedge[e4] * right_anti_dual[e15])
                    + (anti_wedge[e5] * right_anti_dual[e41])
                    + (anti_wedge[e15] * right_anti_dual[e4])
                    + (anti_wedge[e41] * right_anti_dual[e5]),
                (anti_wedge[e4] * right_anti_dual[e25])
                    + (anti_wedge[e5] * right_anti_dual[e42])
                    + (anti_wedge[e25] * right_anti_dual[e4])
                    + (anti_wedge[e42] * right_anti_dual[e5]),
                (anti_wedge[e4] * right_anti_dual[e35])
                    + (anti_wedge[e5] * right_anti_dual[e43])
                    + (anti_wedge[e35] * right_anti_dual[e4])
                    + (anti_wedge[e43] * right_anti_dual[e5]),
                -(anti_wedge[e1] * right_anti_dual[e23])
                    - (anti_wedge[e2] * right_anti_dual[e31])
                    - (anti_wedge[e3] * right_anti_dual[e12])
                    - (anti_wedge[e12] * right_anti_dual[e3]),
            ]) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group6())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group6())
                - (right_anti_dual.group1().xyzy() * anti_wedge.group3().www().with_w(anti_wedge[e31]))
                - (right_anti_dual.group3().www() * anti_wedge.group1().xyz()).with_w(anti_wedge[e23] * right_anti_dual[e1]),
            // e423, e431, e412
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group7())
                + (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group7())
                + (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group5())
                + (anti_wedge.group4().yzx() * right_anti_dual.group1().zxy())
                + (right_anti_dual.group4().yzx() * anti_wedge.group1().zxy())
                - (anti_wedge.group4().zxy() * right_anti_dual.group1().yzx())
                - (right_anti_dual.group4().zxy() * anti_wedge.group1().yzx()),
            // e235, e315, e125
            (Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group8())
                + (Simd32x3::from(anti_wedge[e5]) * right_anti_dual.group5())
                + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group8())
                + (Simd32x3::from(right_anti_dual[e5]) * anti_wedge.group5())
                + (anti_wedge.group1().yzx() * right_anti_dual.group3().zxy())
                + (anti_wedge.group3().zxy() * right_anti_dual.group1().yzx())
                - (anti_wedge.group1().zxy() * right_anti_dual.group3().yzx())
                - (anti_wedge.group3().yzx() * right_anti_dual.group1().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (anti_wedge[e3] * right_anti_dual[e425])
                    + (anti_wedge[e4] * right_anti_dual[e235])
                    + (anti_wedge[e45] * right_anti_dual[e23])
                    + (anti_wedge[e435] * right_anti_dual[e2]),
                (anti_wedge[e1] * right_anti_dual[e435])
                    + (anti_wedge[e4] * right_anti_dual[e315])
                    + (anti_wedge[e45] * right_anti_dual[e31])
                    + (anti_wedge[e415] * right_anti_dual[e3]),
                (anti_wedge[e2] * right_anti_dual[e415])
                    + (anti_wedge[e4] * right_anti_dual[e125])
                    + (anti_wedge[e45] * right_anti_dual[e12])
                    + (anti_wedge[e425] * right_anti_dual[e1]),
                -(anti_wedge[e1] * right_anti_dual[e235])
                    - (anti_wedge[e2] * right_anti_dual[e315])
                    - (anti_wedge[e3] * right_anti_dual[e125])
                    - (anti_wedge[e5] * right_anti_dual[e321]),
            ]) + (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group9())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group9())
                + (Simd32x4::from([right_anti_dual[e5], right_anti_dual[e5], right_anti_dual[e5], right_anti_dual[e3]]) * anti_wedge.group7().with_w(anti_wedge[e125]))
                + (anti_wedge.group5() * right_anti_dual.group3().www()).with_w(anti_wedge[e315] * right_anti_dual[e2])
                + (anti_wedge.group4().yzx() * right_anti_dual.group3().zxy()).with_w(anti_wedge[e235] * right_anti_dual[e1])
                + (right_anti_dual.group4().yzx() * anti_wedge.group3().zxy()).with_w(anti_wedge[e321] * right_anti_dual[e5])
                - (Simd32x4::from([anti_wedge[e5], anti_wedge[e5], anti_wedge[e5], anti_wedge[e15]]) * right_anti_dual.group7().with_w(right_anti_dual[e23]))
                - (right_anti_dual.group3().yzxx() * anti_wedge.group4().zxy().with_w(anti_wedge[e23]))
                - (anti_wedge.group8() * right_anti_dual.group1().www()).with_w(anti_wedge[e31] * right_anti_dual[e25])
                - (right_anti_dual.group4().zxy() * anti_wedge.group3().yzx()).with_w(anti_wedge[e12] * right_anti_dual[e35])
                - (anti_wedge.group1().yzx() * right_anti_dual.group6().zxy()).with_w(anti_wedge[e25] * right_anti_dual[e31])
                - (anti_wedge.group6().yzx() * right_anti_dual.group1().zxy()).with_w(anti_wedge[e35] * right_anti_dual[e12]),
            // e1234
            (anti_wedge[scalar] * right_anti_dual[e1234])
                + (anti_wedge[e1] * right_anti_dual[e423])
                + (anti_wedge[e2] * right_anti_dual[e431])
                + (anti_wedge[e3] * right_anti_dual[e412])
                + (anti_wedge[e4] * right_anti_dual[e321])
                + (anti_wedge[e1234] * right_anti_dual[scalar])
                - (anti_wedge[e41] * right_anti_dual[e23])
                - (anti_wedge[e42] * right_anti_dual[e31])
                - (anti_wedge[e43] * right_anti_dual[e12])
                - (anti_wedge[e23] * right_anti_dual[e41])
                - (anti_wedge[e31] * right_anti_dual[e42])
                - (anti_wedge[e12] * right_anti_dual[e43])
                - (anti_wedge[e321] * right_anti_dual[e4])
                - (anti_wedge[e423] * right_anti_dual[e1])
                - (anti_wedge[e431] * right_anti_dual[e2])
                - (anti_wedge[e412] * right_anti_dual[e3]),
        );
    }
}
impl RejectOrthogonallyFrom<Plane> for VersorOdd {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       28        0
    //    simd3        2        6        0
    //    simd4        6        7        0
    // Totals...
    // yes simd       12       41        0
    //  no simd       34       74        0
    fn reject_orthogonally_from(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[e1234]) * other.group0().xyz(),
            // e415, e425, e435, e321
            ((other.group0().yzx() * self.group3().zxy()) - (other.group0().zxy() * self.group3().yzx())).with_w(other[e3215] * self[e1234]),
            // e235, e315, e125, e4
            Simd32x4::from([
                other[e3215] * self[e4235],
                other[e3215] * self[e4315],
                other[e3215] * self[e4125],
                -(other[e4315] * self[e42]) - (other[e4125] * self[e43]),
            ]) - (other.group0().xyzx() * self.group3().www().with_w(self[e41])),
            // e1, e2, e3, e5
            Simd32x4::from([
                other[e4315] * self[e12] * -1.0,
                other[e4125] * self[e23] * -1.0,
                other[e4235] * self[e31] * -1.0,
                (other[e4125] * self[e35]) + (other[e3215] * self[e45]),
            ]) + (other.group0().zxyx() * self.group1().yzx().with_w(self[e15]))
                + (other.group0().wwwy() * self.group0().xyz().with_w(self[e25])),
        );
        let right_anti_dual = AntiPlane::from_groups(/* e1, e2, e3, e5 */ other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]));
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group0().xyz(),
            // e23, e31, e12, e45
            ((anti_wedge.group3().yzx() * right_anti_dual.group0().zxy()) - (anti_wedge.group3().zxy() * right_anti_dual.group0().yzx()))
                .with_w(anti_wedge[e4] * right_anti_dual[e5]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                anti_wedge[e1] * right_anti_dual[e5],
                anti_wedge[e2] * right_anti_dual[e5],
                anti_wedge[e3] * right_anti_dual[e5],
                -(anti_wedge[e431] * right_anti_dual[e2]) - (anti_wedge[e412] * right_anti_dual[e3]),
            ]) - (right_anti_dual.group0().xyzx() * anti_wedge.group3().www().with_w(anti_wedge[e423])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                anti_wedge[e425] * right_anti_dual[e3] * -1.0,
                anti_wedge[e435] * right_anti_dual[e1] * -1.0,
                anti_wedge[e415] * right_anti_dual[e2] * -1.0,
                (anti_wedge[e315] * right_anti_dual[e2]) + (anti_wedge[e125] * right_anti_dual[e3]),
            ]) + (Simd32x4::from(right_anti_dual[e5]) * anti_wedge.group0().with_w(anti_wedge[e321]))
                + (right_anti_dual.group0().yzxx() * anti_wedge.group1().zxy().with_w(anti_wedge[e235])),
        );
    }
}
impl RejectOrthogonallyFrom<RoundPoint> for VersorOdd {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        7        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        4        9        0
    //  no simd        4       15        0
    fn reject_orthogonally_from(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = Scalar::from_groups(
            // scalar
            (other[e1] * self[e4235]) + (other[e2] * self[e4315]) + (other[e3] * self[e4125]) + (other[e4] * self[e3215]) + (other[e5] * self[e1234]),
        );
        let right_anti_dual = Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            other.group0().xyz().with_w(other[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1234
            other[e4] * -1.0,
        );
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group0(),
            // e1234
            anti_wedge[scalar] * right_anti_dual[e1234],
        );
    }
}
impl RejectOrthogonallyFrom<Sphere> for VersorOdd {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       30        0
    //    simd3        2        6        0
    //    simd4        8        9        0
    // Totals...
    // yes simd       22       45        0
    //  no simd       50       84        0
    fn reject_orthogonally_from(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[e1234]) * other.group0().xyz()) - (Simd32x3::from(other[e1234]) * self.group3().xyz()),
            // e415, e425, e435, e321
            (other.group0().yzxw() * self.group3().zxy().with_w(self[e1234])) - (other.group0().zxy() * self.group3().yzx()).with_w(other[e1234] * self[e3215]),
            // e235, e315, e125, e4
            Simd32x4::from([
                other[e3215] * self[e4235],
                other[e3215] * self[e4315],
                other[e3215] * self[e4125],
                -(other[e4315] * self[e42]) - (other[e4125] * self[e43]) - (other[e1234] * self[e45]),
            ]) - (other.group0().xyzx() * self.group3().www().with_w(self[e41])),
            // e1, e2, e3, e5
            Simd32x4::from([
                -(other[e4315] * self[e12]) - (other[e1234] * self[e15]),
                -(other[e4125] * self[e23]) - (other[e1234] * self[e25]),
                -(other[e4235] * self[e31]) - (other[e1234] * self[e35]),
                (other[e4125] * self[e35]) + (other[e3215] * self[e45]),
            ]) + (other.group0().zxyx() * self.group1().yzx().with_w(self[e15]))
                + (other.group0().wwwy() * self.group0().xyz().with_w(self[e25])),
        );
        let right_anti_dual = RoundPoint::from_groups(
            // e1, e2, e3, e4
            other.group0().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e5
            other[e3215],
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group0().xyz()) - (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group3().xyz()),
            // e23, e31, e12, e45
            (anti_wedge.group3().yzx() * right_anti_dual.group0().zxy()).with_w(anti_wedge[e4] * right_anti_dual[e5])
                - (anti_wedge.group3().zxyw() * right_anti_dual.group0().yzxw()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                anti_wedge[e1] * right_anti_dual[e5],
                anti_wedge[e2] * right_anti_dual[e5],
                anti_wedge[e3] * right_anti_dual[e5],
                -(anti_wedge[e431] * right_anti_dual[e2]) - (anti_wedge[e412] * right_anti_dual[e3]) - (anti_wedge[e321] * right_anti_dual[e4]),
            ]) - (right_anti_dual.group0().xyzx() * anti_wedge.group3().www().with_w(anti_wedge[e423])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(anti_wedge[e425] * right_anti_dual[e3]) - (anti_wedge[e235] * right_anti_dual[e4]),
                -(anti_wedge[e435] * right_anti_dual[e1]) - (anti_wedge[e315] * right_anti_dual[e4]),
                -(anti_wedge[e415] * right_anti_dual[e2]) - (anti_wedge[e125] * right_anti_dual[e4]),
                (anti_wedge[e315] * right_anti_dual[e2]) + (anti_wedge[e125] * right_anti_dual[e3]),
            ]) + (Simd32x4::from(right_anti_dual[e5]) * anti_wedge.group0().with_w(anti_wedge[e321]))
                + (right_anti_dual.group0().yzxx() * anti_wedge.group1().zxy().with_w(anti_wedge[e235])),
        );
    }
}
impl RejectOrthogonallyFrom<VersorEven> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       48        0
    //    simd3        4       10        0
    //    simd4       13       15        0
    // Totals...
    // yes simd       49       73        0
    //  no simd       96      138        0
    fn reject_orthogonally_from(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (other.group0().zxyw() * self.group3().yzx().with_w(self[scalar]))
                + Simd32x3::from(0.0).with_w(
                    (other[e2] * self[e4315]) + (other[e3] * self[e4125]) + (other[e4] * self[e3215])
                        - (other[e431] * self[e25])
                        - (other[e412] * self[e35])
                        - (other[e415] * self[e23])
                        - (other[e425] * self[e31])
                        - (other[e435] * self[e12])
                        - (other[e321] * self[e45])
                        - (other[e235] * self[e41])
                        - (other[e315] * self[e42])
                        - (other[e125] * self[e43]),
                )
                + (other.group0().www() * self.group0().xyz()).with_w(other[e5] * self[e1234])
                + (self.group2().www() * other.group1().xyz()).with_w(other[e1] * self[e4235])
                - (other.group0().yzxx() * self.group3().zxy().with_w(self[e15])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e12345] * self[e23]) + (other[e235] * self[e1234]),
                (other[e12345] * self[e31]) + (other[e315] * self[e1234]),
                (other[e12345] * self[e12]) + (other[e125] * self[e1234]),
                -(other[e425] * self[e4315]) - (other[e435] * self[e4125]),
            ]) + (other.group0() * self.group3().www().with_w(self[e45]))
                - (other.group1().wwwx() * self.group3().xyzx()),
            // e15, e25, e35, e1234
            ((Simd32x3::from(other[e12345]) * self.group2().xyz()) + (Simd32x3::from(self[e3215]) * other.group1().xyz()) + (other.group2().yzx() * self.group3().zxy())
                - (other.group2().zxy() * self.group3().yzx()))
            .with_w(other[e12345] * self[e1234]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e12345]) * self.group3(),
        );
        let right_anti_dual = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e23, e31, e12, e45
            other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e1234
            other.group2().xyz().with_w(other[e4]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            other.group3().xyz().with_w(other[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((Simd32x3::from(anti_wedge[scalar]) * right_anti_dual.group0().xyz()) + (Simd32x3::from(right_anti_dual[scalar]) * anti_wedge.group0().xyz()))
                .with_w(anti_wedge[scalar] * right_anti_dual[scalar]),
            // e23, e31, e12, e45
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group1()) + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group1()),
            // e15, e25, e35, e1234
            (Simd32x4::from(anti_wedge[scalar]) * right_anti_dual.group2())
                + (Simd32x4::from(right_anti_dual[scalar]) * anti_wedge.group2())
                + Simd32x3::from(0.0).with_w(
                    -(anti_wedge[e41] * right_anti_dual[e23])
                        - (anti_wedge[e42] * right_anti_dual[e31])
                        - (anti_wedge[e43] * right_anti_dual[e12])
                        - (anti_wedge[e23] * right_anti_dual[e41])
                        - (anti_wedge[e31] * right_anti_dual[e42])
                        - (anti_wedge[e12] * right_anti_dual[e43]),
                ),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (anti_wedge[e23] * right_anti_dual[e45])
                    + (anti_wedge[e45] * right_anti_dual[e23])
                    + (anti_wedge[e35] * right_anti_dual[e42])
                    + (anti_wedge[e4235] * right_anti_dual[scalar]),
                (anti_wedge[e31] * right_anti_dual[e45])
                    + (anti_wedge[e45] * right_anti_dual[e31])
                    + (anti_wedge[e15] * right_anti_dual[e43])
                    + (anti_wedge[e4315] * right_anti_dual[scalar]),
                (anti_wedge[e12] * right_anti_dual[e45])
                    + (anti_wedge[e45] * right_anti_dual[e12])
                    + (anti_wedge[e25] * right_anti_dual[e41])
                    + (anti_wedge[e4125] * right_anti_dual[scalar]),
                -(anti_wedge[e12] * right_anti_dual[e35])
                    - (anti_wedge[e15] * right_anti_dual[e23])
                    - (anti_wedge[e25] * right_anti_dual[e31])
                    - (anti_wedge[e35] * right_anti_dual[e12]),
            ]) + (anti_wedge.group0().yzxw() * right_anti_dual.group2().zxy().with_w(right_anti_dual[e3215]))
                + (anti_wedge.group0().www() * right_anti_dual.group3().xyz()).with_w(anti_wedge[e3215] * right_anti_dual[scalar])
                - (right_anti_dual.group2().yzxx() * anti_wedge.group0().zxy().with_w(anti_wedge[e23]))
                - (anti_wedge.group2().yzx() * right_anti_dual.group0().zxy()).with_w(anti_wedge[e31] * right_anti_dual[e25]),
        );
    }
}
impl RejectOrthogonallyFrom<VersorOdd> for VersorOdd {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       20        0
    //    simd3        2       12        0
    //    simd4       20       20        0
    // Totals...
    // yes simd       32       52        0
    //  no simd       96      136        0
    fn reject_orthogonally_from(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let anti_wedge = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[e1234]) * other.group3().xyz()) - (Simd32x3::from(other[e1234]) * self.group3().xyz()),
            // e415, e425, e435, e321
            (other.group3().yzxw() * self.group3().zxy().with_w(self[e1234])) - (self.group3().yzxw() * other.group3().zxy().with_w(other[e1234])),
            // e235, e315, e125, e4
            (self.group3().xyzx() * other.group3().www().with_w(other[e41]))
                + Simd32x3::from(0.0).with_w(
                    (other[e42] * self[e4315]) + (other[e43] * self[e4125]) + (other[e45] * self[e1234])
                        - (other[e4235] * self[e41])
                        - (other[e4315] * self[e42])
                        - (other[e4125] * self[e43]),
                )
                - (self.group3().www() * other.group3().xyz()).with_w(other[e1234] * self[e45]),
            // e1, e2, e3, e5
            (Simd32x4::from(other[e3215]) * self.group0().xyz().with_w(self[e45]))
                + (other.group3().zxyz() * self.group1().yzx().with_w(self[e35]))
                + (self.group2().wwwy() * other.group2().xyz().with_w(other[e4315]))
                + (other.group1().zxy() * self.group3().yzx()).with_w(other[e4235] * self[e15])
                - (Simd32x4::from(self[e3215]) * other.group0().xyz().with_w(other[e45]))
                - (other.group2().wwwy() * self.group2().xyz().with_w(self[e4315]))
                - (self.group3().zxyx() * other.group1().yzx().with_w(other[e15]))
                - (other.group3().yzx() * self.group1().zxy()).with_w(other[e35] * self[e4125]),
        );
        let right_anti_dual = VersorEven::from_groups(
            // e423, e431, e412, e12345
            other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            other.group2().xyz().with_w(other[e3215]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e4
            other.group3().xyz().with_w(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(anti_wedge[e4]) * right_anti_dual.group3().xyz()) - (Simd32x3::from(right_anti_dual[e4]) * anti_wedge.group3().xyz()),
            // e23, e31, e12, e45
            (anti_wedge.group3().yzx() * right_anti_dual.group3().zxy()).with_w(anti_wedge[e4] * right_anti_dual[e5])
                - (anti_wedge.group3().zxyw() * right_anti_dual.group3().yzxw()),
            // e15, e25, e35, e1234
            Simd32x3::from(0.0).with_w(
                (anti_wedge[e1] * right_anti_dual[e423]) + (anti_wedge[e2] * right_anti_dual[e431]) + (anti_wedge[e3] * right_anti_dual[e412])
                    - (anti_wedge[e431] * right_anti_dual[e2])
                    - (anti_wedge[e412] * right_anti_dual[e3])
                    - (anti_wedge[e321] * right_anti_dual[e4]),
            ) + (right_anti_dual.group2().www() * anti_wedge.group3().xyz()).with_w(anti_wedge[e4] * right_anti_dual[e321])
                - (right_anti_dual.group3().xyzx() * anti_wedge.group3().www().with_w(anti_wedge[e423])),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(right_anti_dual[e5]) * anti_wedge.group0().with_w(anti_wedge[e321]))
                + (anti_wedge.group2().wwwy() * right_anti_dual.group2().xyz().with_w(right_anti_dual[e2]))
                + (right_anti_dual.group3().yzxx() * anti_wedge.group1().zxy().with_w(anti_wedge[e235]))
                + (anti_wedge.group3().zxy() * right_anti_dual.group1().yzx()).with_w(anti_wedge[e125] * right_anti_dual[e3])
                - (Simd32x4::from(anti_wedge[e5]) * right_anti_dual.group0().xyz().with_w(right_anti_dual[e321]))
                - (anti_wedge.group3().yzxz() * right_anti_dual.group1().zxy().with_w(right_anti_dual[e125]))
                - (anti_wedge.group1().yzx() * right_anti_dual.group3().zxy()).with_w(anti_wedge[e1] * right_anti_dual[e235])
                - (right_anti_dual.group3().www() * anti_wedge.group2().xyz()).with_w(anti_wedge[e2] * right_anti_dual[e315]),
        );
    }
}
