use crate::traits::GeometricProduct;
use crate::traits::Reverse;
// Note on Operative Statistics:
// Operative Statistics are not a precise predictor of performance or performance comparisons.
// This is due to varying hardware capabilities and compiler optimizations.
// As always, where performance is a concern, there is no substitute for
// real measurements on real work-loads on real hardware.
// Disclaimer aside, enjoy the fun information =)
//
// Total Implementations: 625
//
// Yes SIMD:   add/sub     mul     div
//  Minimum:         0       2       0
//   Median:        56      90       0
//  Average:        99     128       0
//  Maximum:      1052    1114       0
//
//  No SIMD:   add/sub     mul     div
//  Minimum:         0       2       0
//   Median:        99     136       0
//  Average:       188     225       0
//  Maximum:      1984    2068       0
impl InfixSandwich for AntiCircleRotor {}
impl Sandwich<AntiCircleRotor> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      109      144        0
    //    simd3        0        1        0
    //    simd4       39       40        0
    // Totals...
    // yes simd      148      185        0
    //  no simd      265      307        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[0] * other.group2()[3]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3]) + (self.group0()[1] * other.group2()[3])),
                ((self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[3]) + (self.group0()[2] * other.group2()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])),
            ]) + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[2]]) * swizzle!(other.group1(), 2, 0, 1, 2))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(self.group0()[1] * other.group2()[2]) + (other.group1()[0] * self.group2()[3]) - (other.group1()[2] * self.group1()[1])),
                (-(self.group0()[2] * other.group2()[0]) - (other.group1()[0] * self.group1()[2]) + (other.group1()[1] * self.group2()[3])),
                (-(self.group0()[0] * other.group2()[1]) - (other.group1()[1] * self.group1()[0]) + (other.group1()[2] * self.group2()[3])),
                (-(other.group0()[1] * self.group2()[1]) - (other.group0()[2] * self.group2()[2]) + (self.group0()[2] * other.group2()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group1()[1] * self.group2()[2])
                    + (other.group2()[0] * self.group1()[3])
                    + (other.group2()[0] * self.group2()[3])
                    + (other.group2()[1] * self.group1()[2])
                    + (other.group2()[3] * self.group2()[0])),
                ((other.group1()[2] * self.group2()[0])
                    + (other.group2()[1] * self.group1()[3])
                    + (other.group2()[1] * self.group2()[3])
                    + (other.group2()[2] * self.group1()[0])
                    + (other.group2()[3] * self.group2()[1])),
                ((other.group1()[0] * self.group2()[1])
                    + (other.group2()[0] * self.group1()[1])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group2()[2] * self.group2()[3])
                    + (other.group2()[3] * self.group2()[2])),
                (-(other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2]) - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) + (self.group0()[1] * other.group2()[2]) + (other.group1()[0] * self.group1()[3]) + (other.group1()[3] * self.group1()[0])),
                ((other.group0()[2] * self.group2()[0]) + (self.group0()[2] * other.group2()[0]) + (other.group1()[1] * self.group1()[3]) + (other.group1()[3] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[1]) + (self.group0()[0] * other.group2()[1]) + (other.group1()[2] * self.group1()[3]) + (other.group1()[3] * self.group1()[2])),
                (-(other.group1()[1] * self.group2()[1])
                    - (other.group1()[2] * self.group2()[2])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      121      156        0
    //    simd3        0        1        0
    //    simd4       47       48        0
    // Totals...
    // yes simd      168      205        0
    //  no simd      309      351        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[1] * other.group3()[2])
                    + (self.group0()[2] * other.group1()[1])
                    + (other.group0()[0] * self.group2()[3])
                    + (other.group0()[1] * self.group1()[2])
                    + (self.group1()[0] * other.group2()[3])),
                ((self.group0()[0] * other.group1()[2])
                    + (self.group0()[2] * other.group3()[0])
                    + (other.group0()[1] * self.group2()[3])
                    + (other.group0()[2] * self.group1()[0])
                    + (self.group1()[1] * other.group2()[3])),
                ((self.group0()[0] * other.group3()[1])
                    + (self.group0()[1] * other.group1()[0])
                    + (other.group0()[0] * self.group1()[1])
                    + (other.group0()[2] * self.group2()[3])
                    + (self.group1()[2] * other.group2()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]) - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group2()[0]]))
                - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group2()[1]]))
                - (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group2()[2]]))
                - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[2] * other.group2()[1]) - (other.group0()[2] * self.group2()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group3()[3]) - (other.group0()[0] * self.group2()[2])),
                ((self.group0()[1] * other.group2()[0]) + (self.group0()[2] * other.group3()[3]) - (other.group0()[1] * self.group2()[0])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2]) - (self.group1()[2] * other.group3()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[3]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]) * swizzle!(self.group2(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group3()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[1]]) * swizzle!(self.group2(), 0, 1, 2, 1))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group3(), 0, 1, 2, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group1()[2] * other.group2()[1])
                    + (self.group1()[3] * other.group2()[0])
                    + (self.group2()[2] * other.group1()[1])
                    + (self.group2()[2] * other.group3()[1])
                    + (self.group2()[3] * other.group2()[0])),
                ((self.group1()[1] * other.group3()[3])
                    + (self.group1()[3] * other.group2()[1])
                    + (self.group2()[0] * other.group3()[2])
                    + (self.group2()[1] * other.group1()[3])
                    + (self.group2()[3] * other.group2()[1])),
                ((self.group1()[2] * other.group3()[3])
                    + (self.group1()[3] * other.group2()[2])
                    + (self.group2()[1] * other.group3()[0])
                    + (self.group2()[2] * other.group1()[3])
                    + (self.group2()[3] * other.group2()[2])),
                (-(self.group1()[1] * other.group2()[1])
                    - (self.group1()[2] * other.group2()[2])
                    - (self.group2()[1] * other.group1()[1])
                    - (self.group2()[1] * other.group3()[1])
                    - (self.group2()[2] * other.group1()[2])
                    - (self.group2()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([other.group1()[3], other.group1()[2], other.group1()[0], other.group3()[3]]) * swizzle!(self.group2(), 0, 0, 1, 3))
                + (Simd32x4::from([other.group3()[3], other.group2()[2], other.group2()[0], other.group3()[3]]) * swizzle!(self.group1(), 0, 0, 1, 3))
                - (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (swizzle!(self.group2(), 1, 2, 0, 0) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (swizzle!(self.group2(), 1, 2, 0, 0) * swizzle!(other.group3(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) + (self.group1()[0] * other.group1()[3])
                    - (self.group2()[0] * other.group2()[3])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0]) + (self.group1()[1] * other.group1()[3]) - (self.group2()[1] * other.group2()[3])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) + (self.group1()[2] * other.group1()[3])
                    - (self.group2()[2] * other.group2()[3])),
                (-(self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[3]]) * swizzle!(other.group2(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[1]]) * swizzle!(other.group3(), 1, 2, 0, 1))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[2]]) * swizzle!(other.group3(), 0, 1, 2, 2))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       71      105        0
    //    simd3        0        1        0
    //    simd4       24       25        0
    // Totals...
    // yes simd       95      131        0
    //  no simd      167      208        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[1] * self.group2()[3]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group2()[0]),
                (other.group0()[1] * self.group2()[1]),
                (other.group0()[1] * self.group2()[2]),
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[0] * self.group2()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group2()[0]),
                (other.group0()[0] * self.group2()[1]),
                (other.group0()[0] * self.group2()[2]),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       88      122        0
    //    simd3        0        1        0
    //    simd4       26       27        0
    // Totals...
    // yes simd      114      150        0
    //  no simd      192      233        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]))])
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group1()[2] * other.group0()[1]) + (self.group1()[3] * other.group0()[0]) + (self.group2()[0] * other.group0()[3]) + (self.group2()[3] * other.group0()[0])),
                ((self.group1()[0] * other.group0()[2]) + (self.group1()[3] * other.group0()[1]) + (self.group2()[1] * other.group0()[3]) + (self.group2()[3] * other.group0()[1])),
                ((self.group1()[1] * other.group0()[0]) + (self.group1()[3] * other.group0()[2]) + (self.group2()[2] * other.group0()[3]) + (self.group2()[3] * other.group0()[2])),
                (-(self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]) - (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1]) + (self.group1()[0] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3])),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       97      131        0
    //    simd3        0        1        0
    //    simd4       34       35        0
    // Totals...
    // yes simd      131      167        0
    //  no simd      233      274        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other.group0()[3])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                (-(self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                - (swizzle!(self.group1(), 3, 3, 3, 0) * swizzle!(other.group1(), 0, 1, 2, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group1()[2] * other.group0()[1]) + (self.group1()[3] * other.group0()[0]) + (self.group2()[2] * other.group1()[1]) + (self.group2()[3] * other.group0()[0])),
                ((self.group1()[1] * other.group1()[3]) + (self.group1()[3] * other.group0()[1]) + (self.group2()[1] * other.group0()[3]) + (self.group2()[3] * other.group0()[1])),
                ((self.group1()[2] * other.group1()[3]) + (self.group1()[3] * other.group0()[2]) + (self.group2()[2] * other.group0()[3]) + (self.group2()[3] * other.group0()[2])),
                (-(self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])
                    - (self.group2()[1] * other.group1()[1])
                    - (self.group2()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group1()[3]]) * swizzle!(self.group2(), 0, 0, 1, 3))
                + (Simd32x4::from([other.group1()[3], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group1(), 0, 0, 1, 3))
                - (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (swizzle!(self.group2(), 1, 2, 0, 0) * swizzle!(other.group1(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1]) + (self.group1()[0] * other.group0()[3])
                    - (self.group1()[1] * other.group1()[2])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3]) - (self.group1()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) - (self.group1()[0] * other.group1()[1])
                    + (self.group1()[2] * other.group0()[3])),
                0.0,
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[2]]) * swizzle!(other.group1(), 0, 1, 2, 2))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      114      149        0
    //    simd3        0        1        0
    //    simd4       24       25        0
    // Totals...
    // yes simd      138      175        0
    //  no simd      210      252        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[1])
                    + (other.group0()[0] * self.group2()[3])
                    + (other.group0()[1] * self.group1()[2])
                    - (other.group0()[2] * self.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0]) - (other.group0()[0] * self.group1()[2])
                    + (other.group0()[1] * self.group2()[3])
                    + (other.group0()[2] * self.group1()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) + (other.group0()[0] * self.group1()[1])
                    - (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group2()[3])),
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group1()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[0] * self.group2()[3])
                    + (other.group1()[1] * self.group1()[2])
                    - (other.group1()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[2] * self.group2()[0]) - (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[1] * self.group2()[3])
                    + (other.group1()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) + (other.group1()[0] * self.group1()[1]) - (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) + (other.group0()[0] * self.group1()[3])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0]) + (other.group0()[1] * self.group1()[3])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (other.group0()[2] * self.group1()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      100      135        0
    //    simd3        0        1        0
    //    simd4       33       34        0
    // Totals...
    // yes simd      133      170        0
    //  no simd      232      274        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (self.group0()[2] * other.group0()[1]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group0(), 3, 2, 0, 3))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) - (self.group1()[1] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[1])
                    + (self.group2()[3] * other.group0()[0])),
                (-(self.group0()[2] * other.group1()[0]) + (self.group1()[1] * other.group0()[3]) - (self.group1()[2] * other.group0()[0])
                    + (self.group2()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[1]) - (self.group1()[0] * other.group0()[1])
                    + (self.group1()[2] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[2])),
                (self.group0()[2] * other.group1()[2]),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[2], self.group0()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))
                + (swizzle!(self.group1(), 0, 0, 1, 3) * swizzle!(other.group0(), 3, 2, 0, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group1()[0] * other.group1()[3]) - (self.group1()[1] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[1])
                    + (self.group1()[3] * other.group1()[0])
                    + (self.group2()[0] * other.group0()[3])
                    + (self.group2()[2] * other.group0()[1])
                    + (self.group2()[3] * other.group1()[0])),
                ((self.group1()[0] * other.group1()[2]) + (self.group1()[1] * other.group1()[3]) - (self.group1()[2] * other.group1()[0])
                    + (self.group1()[3] * other.group1()[1])
                    + (self.group2()[0] * other.group0()[2])
                    + (self.group2()[1] * other.group0()[3])
                    + (self.group2()[3] * other.group1()[1])),
                (-(self.group1()[0] * other.group1()[1])
                    + (self.group1()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])
                    + (self.group2()[1] * other.group0()[0])
                    + (self.group2()[2] * other.group0()[3])
                    + (self.group2()[3] * other.group1()[2])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (self.group1()[3] * other.group0()[0]),
                (self.group1()[3] * other.group0()[1]),
                (self.group1()[3] * other.group0()[2]),
                (-(self.group1()[2] * other.group1()[2])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    + (self.group2()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       63       97        0
    //    simd3        1        3        0
    //    simd4       28       29        0
    // Totals...
    // yes simd       92      129        0
    //  no simd      178      222        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (-(Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]) - (swizzle!(self.group1(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))),
            // e235, e315, e125, e4
            (Simd32x4::from([
                ((self.group2()[1] * other.group0()[2]) * -1.0),
                ((self.group2()[2] * other.group0()[0]) * -1.0),
                ((self.group2()[0] * other.group0()[1]) * -1.0),
                (self.group0()[2] * other.group0()[2]),
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                (self.group2()[3] * other.group0()[0]),
                (self.group2()[3] * other.group0()[1]),
                (self.group2()[3] * other.group0()[2]),
                (-(self.group2()[1] * other.group0()[1]) - (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       53       72        0
    //    simd3        0        2        0
    //    simd4       13       17        0
    // Totals...
    // yes simd       66       91        0
    //  no simd      105      146        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = CircleRotor::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other[e12345]) * self.group0()),
            // e415, e425, e435, e321
            (Simd32x4::from(other[e12345]) * self.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e235, e315, e125, e12345
            (Simd32x4::from(other[e12345]) * self.group2()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      122      157        0
    //    simd3        0        1        0
    //    simd4       33       34        0
    // Totals...
    // yes simd      155      192        0
    //  no simd      254      296        0
    fn sandwich(self, other: Circle) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[2] * other.group1()[1]) + (other.group0()[0] * self.group2()[3]) + (other.group0()[1] * self.group1()[2])),
                ((self.group0()[0] * other.group1()[2]) + (other.group0()[1] * self.group2()[3]) + (other.group0()[2] * self.group1()[0])),
                ((self.group0()[1] * other.group1()[0]) + (other.group0()[0] * self.group1()[1]) + (other.group0()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[2], self.group1()[1]]) * swizzle!(other.group1(), 2, 0, 3, 1))
                - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group1()[2]]) * swizzle!(self.group1(), 3, 2, 0, 2))
                - (Simd32x4::from([other.group0()[2], other.group0()[1], other.group0()[2], other.group1()[3]]) * swizzle!(self.group1(), 1, 3, 3, 3))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(self.group0()[1] * other.group2()[2]) + (self.group0()[2] * other.group2()[1])
                    - (other.group0()[2] * self.group2()[1])
                    - (self.group1()[1] * other.group1()[2])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[2] * other.group2()[0]) - (other.group0()[0] * self.group2()[2]) - (self.group1()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0])
                    - (other.group0()[1] * self.group2()[0])
                    - (self.group1()[0] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])
                    + (other.group0()[2] * self.group2()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[3]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group2()[0] * self.group1()[3])
                    + (other.group2()[0] * self.group2()[3])
                    + (other.group2()[1] * self.group1()[2])
                    + (self.group2()[0] * other.group1()[3])
                    + (self.group2()[2] * other.group1()[1])),
                ((other.group2()[1] * self.group1()[3])
                    + (other.group2()[1] * self.group2()[3])
                    + (other.group2()[2] * self.group1()[0])
                    + (self.group2()[0] * other.group1()[2])
                    + (self.group2()[1] * other.group1()[3])),
                ((other.group2()[0] * self.group1()[1])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group2()[2] * self.group2()[3])
                    + (self.group2()[1] * other.group1()[0])
                    + (self.group2()[2] * other.group1()[3])),
                (-(other.group2()[1] * self.group1()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (self.group2()[1] * other.group1()[1])
                    - (self.group2()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group2()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (swizzle!(self.group2(), 1, 2, 0, 0) * swizzle!(other.group1(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group0()[1] * other.group2()[2]) + (self.group0()[2] * other.group2()[1]) - (other.group0()[1] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[1])
                    + (self.group1()[0] * other.group1()[3])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[2] * other.group2()[0]) + (other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0])
                    + (self.group1()[1] * other.group1()[3])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0]) - (other.group0()[0] * self.group2()[1])
                    + (other.group0()[1] * self.group2()[0])
                    + (self.group1()[2] * other.group1()[3])),
                (-(self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      121      156        0
    //    simd3        0        1        0
    //    simd4       36       37        0
    // Totals...
    // yes simd      157      194        0
    //  no simd      265      307        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[2] * other.group1()[1]) + (other.group0()[0] * self.group2()[3]) + (other.group0()[1] * self.group1()[2])),
                ((self.group0()[0] * other.group1()[2]) + (other.group0()[1] * self.group2()[3]) + (other.group0()[2] * self.group1()[0])),
                ((self.group0()[1] * other.group1()[0]) + (other.group0()[0] * self.group1()[1]) + (other.group0()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])),
            ]) + (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[2], self.group1()[1]]) * swizzle!(other.group1(), 2, 0, 3, 1))
                - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group1()[2]]) * swizzle!(self.group1(), 3, 2, 0, 2))
                - (Simd32x4::from([other.group0()[2], other.group0()[1], other.group0()[2], other.group1()[3]]) * swizzle!(self.group1(), 1, 3, 3, 3))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group2()[1]) - (other.group0()[2] * self.group2()[1]) + (self.group1()[0] * other.group2()[3])),
                ((self.group0()[0] * other.group2()[2]) - (other.group0()[0] * self.group2()[2]) + (self.group1()[1] * other.group2()[3])),
                ((self.group0()[1] * other.group2()[0]) - (other.group0()[1] * self.group2()[0]) + (self.group1()[2] * other.group2()[3])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2]) + (other.group0()[2] * self.group2()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[3]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[3]]) * swizzle!(self.group1(), 1, 2, 0, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group1()[2] * other.group2()[1])
                    + (self.group1()[3] * other.group2()[0])
                    + (self.group2()[0] * other.group1()[3])
                    + (self.group2()[0] * other.group2()[3])
                    + (self.group2()[2] * other.group1()[1])
                    + (self.group2()[3] * other.group2()[0])),
                ((self.group1()[0] * other.group2()[2])
                    + (self.group1()[3] * other.group2()[1])
                    + (self.group2()[0] * other.group1()[2])
                    + (self.group2()[1] * other.group1()[3])
                    + (self.group2()[1] * other.group2()[3])
                    + (self.group2()[3] * other.group2()[1])),
                ((self.group1()[1] * other.group2()[0])
                    + (self.group1()[3] * other.group2()[2])
                    + (self.group2()[1] * other.group1()[0])
                    + (self.group2()[2] * other.group1()[3])
                    + (self.group2()[2] * other.group2()[3])
                    + (self.group2()[3] * other.group2()[2])),
                (-(self.group1()[1] * other.group2()[1])
                    - (self.group1()[2] * other.group2()[2])
                    - (self.group2()[1] * other.group1()[1])
                    - (self.group2()[2] * other.group1()[2])),
            ]) - (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (swizzle!(self.group2(), 1, 2, 0, 0) * swizzle!(other.group1(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group0()[1] * other.group2()[2]) + (self.group0()[2] * other.group2()[1]) - (other.group0()[1] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[1])
                    + (self.group1()[0] * other.group1()[3])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[2] * other.group2()[0]) + (other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0])
                    + (self.group1()[1] * other.group1()[3])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0]) - (other.group0()[0] * self.group2()[1])
                    + (other.group0()[1] * self.group2()[0])
                    + (self.group1()[2] * other.group1()[3])),
                (-(self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      118      153        0
    //    simd3        0        1        0
    //    simd4       34       35        0
    // Totals...
    // yes simd      152      189        0
    //  no simd      254      296        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[2] * other.group1()[1]) + (other.group0()[0] * self.group2()[3]) + (other.group0()[1] * self.group1()[2])),
                ((self.group0()[1] * other.group1()[3]) + (other.group0()[1] * self.group2()[3]) + (other.group0()[2] * self.group1()[0])),
                ((self.group0()[2] * other.group1()[3]) + (other.group0()[0] * self.group1()[1]) + (other.group0()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group1()[3]]) * swizzle!(other.group1(), 3, 2, 0, 3))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group1()[1]]) * swizzle!(self.group1(), 3, 2, 0, 1))
                - (Simd32x4::from([other.group0()[2], other.group0()[1], other.group0()[2], other.group1()[2]]) * swizzle!(self.group1(), 1, 3, 3, 2))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(self.group0()[1] * other.group2()[2]) + (self.group0()[2] * other.group2()[1]) - (self.group1()[1] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[1])
                    + (self.group2()[3] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[2] * other.group2()[0]) + (self.group1()[0] * other.group1()[2]) - (self.group1()[2] * other.group1()[0])
                    + (self.group2()[3] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0]) - (self.group1()[0] * other.group1()[1])
                    + (self.group1()[1] * other.group1()[0])
                    + (self.group2()[3] * other.group1()[2])),
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group2()[1]) + (self.group0()[2] * other.group2()[2])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group2()[0] * self.group1()[3]) + (other.group2()[0] * self.group2()[3]) + (other.group2()[1] * self.group1()[2]) + (self.group2()[2] * other.group1()[1])),
                ((other.group2()[1] * self.group1()[3]) + (other.group2()[1] * self.group2()[3]) + (other.group2()[2] * self.group1()[0]) + (self.group2()[0] * other.group1()[2])),
                ((other.group2()[0] * self.group1()[1]) + (other.group2()[2] * self.group1()[3]) + (other.group2()[2] * self.group2()[3]) + (self.group2()[1] * other.group1()[0])),
                (-(self.group0()[2] * other.group1()[2]) - (other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[2], self.group0()[1]]) * swizzle!(other.group1(), 2, 0, 3, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])
                    + (other.group0()[1] * self.group2()[2])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[0])
                    + (other.group0()[2] * self.group2()[0])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0])
                    + (other.group0()[0] * self.group2()[1])
                    + (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])),
                (-(other.group2()[0] * self.group1()[0])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (self.group2()[1] * other.group1()[1])
                    - (self.group2()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      129      164        0
    //    simd3        0        1        0
    //    simd4       45       46        0
    // Totals...
    // yes simd      174      211        0
    //  no simd      309      351        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(self.group0()[1] * other.group3()[2])
                    + (self.group0()[2] * other.group1()[1])
                    + (self.group0()[2] * other.group3()[1])
                    + (other.group0()[0] * self.group2()[3])
                    + (other.group0()[1] * self.group1()[2])
                    + (self.group1()[0] * other.group2()[3])),
                ((self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group3()[0])
                    + (other.group0()[1] * self.group2()[3])
                    + (other.group0()[2] * self.group1()[0])
                    + (self.group1()[1] * other.group2()[3])),
                (-(self.group0()[0] * other.group3()[1])
                    + (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (other.group0()[0] * self.group1()[1])
                    + (other.group0()[2] * self.group2()[3])
                    + (self.group1()[2] * other.group2()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group1()[3]]) * swizzle!(other.group1(), 3, 2, 0, 3))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group1()[1]]) * swizzle!(self.group1(), 3, 2, 0, 1))
                - (Simd32x4::from([other.group0()[2], other.group0()[1], other.group0()[2], other.group1()[2]]) * swizzle!(self.group1(), 1, 3, 3, 2))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) - (self.group0()[1] * other.group2()[2])
                    + (self.group1()[2] * other.group1()[1])
                    + (self.group1()[3] * other.group3()[0])
                    + (self.group2()[3] * other.group1()[0])),
                ((self.group0()[1] * other.group3()[3]) - (self.group0()[2] * other.group2()[0])
                    + (self.group1()[0] * other.group1()[2])
                    + (self.group1()[3] * other.group3()[1])
                    + (self.group2()[3] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[1])
                    + (self.group0()[2] * other.group3()[3])
                    + (self.group1()[1] * other.group1()[0])
                    + (self.group1()[3] * other.group3()[2])
                    + (self.group2()[3] * other.group1()[2])),
                ((self.group0()[2] * other.group2()[2])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group1()[1] * other.group3()[1])
                    - (self.group1()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group3()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group1()[0] * other.group3()[3])
                    + (self.group1()[3] * other.group2()[0])
                    + (self.group2()[1] * other.group3()[2])
                    + (self.group2()[2] * other.group1()[1])
                    + (self.group2()[3] * other.group2()[0])),
                ((self.group1()[1] * other.group3()[3])
                    + (self.group1()[3] * other.group2()[1])
                    + (self.group2()[0] * other.group1()[2])
                    + (self.group2()[2] * other.group3()[0])
                    + (self.group2()[3] * other.group2()[1])),
                ((self.group1()[2] * other.group3()[3])
                    + (self.group1()[3] * other.group2()[2])
                    + (self.group2()[0] * other.group3()[1])
                    + (self.group2()[1] * other.group1()[0])
                    + (self.group2()[3] * other.group2()[2])),
                (-(self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group1()[3] * other.group2()[3])),
            ]) + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[2], self.group0()[1]]) * swizzle!(other.group1(), 2, 0, 3, 1))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[0] * other.group3()[3])
                    + (self.group0()[1] * other.group2()[2])
                    + (self.group1()[3] * other.group1()[0])
                    + (self.group2()[3] * other.group3()[0])),
                (-(self.group0()[1] * other.group3()[3])
                    + (self.group0()[2] * other.group2()[0])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[2] * other.group3()[3]) + (self.group1()[2] * other.group1()[3]) + (self.group1()[3] * other.group1()[2])),
                (-(self.group1()[2] * other.group2()[2]) - (self.group2()[1] * other.group1()[1]) - (self.group2()[2] * other.group1()[2])
                    + (self.group2()[3] * other.group3()[3])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group2()[3], self.group2()[3], self.group2()[1]]) * swizzle!(other.group3(), 1, 1, 2, 1))
                + (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group3()[3]]) * swizzle!(self.group1(), 0, 0, 1, 3))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group3()[2]]) * swizzle!(self.group2(), 0, 1, 2, 2))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       75      113        0
    //    simd3        0        1        0
    //    simd4       23       24        0
    // Totals...
    // yes simd       98      138        0
    //  no simd      167      212        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[1] * self.group2()[3]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3] * -1.0),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other.group0()[1] * self.group2()[0]),
                (other.group0()[1] * self.group2()[1]),
                (other.group0()[1] * self.group2()[2]),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[0] * self.group2()[0] * -1.0),
                (other.group0()[0] * self.group2()[1] * -1.0),
                (other.group0()[0] * self.group2()[2] * -1.0),
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[0] * self.group2()[3])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       85      122        0
    //    simd3        0        1        0
    //    simd4       26       27        0
    // Totals...
    // yes simd      111      150        0
    //  no simd      189      233        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group1()[3] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) * -1.0),
                ((self.group0()[2] * other.group0()[0]) * -1.0),
                ((self.group0()[0] * other.group0()[1]) * -1.0),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) + (self.group2()[3] * other.group0()[3])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1]) + (self.group1()[3] * other.group0()[0])
                    - (self.group2()[0] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[0])),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0]) + (self.group1()[3] * other.group0()[1]) - (self.group2()[1] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[1])),
                (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0]) + (self.group1()[3] * other.group0()[2])
                    - (self.group2()[2] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) + (self.group1()[0] * other.group0()[3])),
                ((self.group0()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[1]) + (self.group1()[2] * other.group0()[3])),
                (-(self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      108      143        0
    //    simd3        0        1        0
    //    simd4       31       32        0
    // Totals...
    // yes simd      139      176        0
    //  no simd      232      274        0
    fn sandwich(self, other: Flector) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group0()[2]) + (self.group1()[3] * other.group1()[0])),
                ((self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group0()[0]) + (self.group1()[3] * other.group1()[1])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[2] * other.group1()[3]) + (self.group1()[3] * other.group1()[2])),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    + (self.group2()[3] * other.group0()[3])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group1()[0] * other.group1()[3]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1]) + (self.group1()[3] * other.group0()[0])
                    - (self.group2()[0] * other.group0()[3])
                    + (self.group2()[1] * other.group1()[2])
                    + (self.group2()[3] * other.group0()[0])),
                ((self.group1()[0] * other.group0()[2]) + (self.group1()[1] * other.group1()[3]) - (self.group1()[2] * other.group0()[0]) + (self.group1()[3] * other.group0()[1])
                    - (self.group2()[1] * other.group0()[3])
                    + (self.group2()[2] * other.group1()[0])
                    + (self.group2()[3] * other.group0()[1])),
                (-(self.group1()[0] * other.group0()[1])
                    + (self.group1()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group0()[2])
                    + (self.group2()[0] * other.group1()[1])
                    - (self.group2()[2] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[2]) + (self.group2()[3] * other.group1()[0])),
                (-(self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[2] * other.group1()[3]) + (self.group1()[2] * other.group0()[3])),
                (-(self.group1()[2] * other.group0()[2])
                    + (self.group2()[1] * other.group1()[1])
                    + (self.group2()[2] * other.group1()[2])
                    + (self.group2()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group2()[3], self.group2()[3], self.group2()[0]]) * swizzle!(other.group1(), 1, 1, 2, 0))
                + (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group1()[3]]) * swizzle!(self.group1(), 0, 0, 1, 3))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      110      145        0
    //    simd3        0        1        0
    //    simd4       25       26        0
    // Totals...
    // yes simd      135      172        0
    //  no simd      210      252        0
    fn sandwich(self, other: Line) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[1])
                    + (other.group0()[0] * self.group2()[3])
                    + (other.group0()[1] * self.group1()[2])
                    - (other.group0()[2] * self.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0]) - (other.group0()[0] * self.group1()[2])
                    + (other.group0()[1] * self.group2()[3])
                    + (other.group0()[2] * self.group1()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) + (other.group0()[0] * self.group1()[1])
                    - (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) + (other.group1()[0] * self.group1()[3]) + (other.group1()[0] * self.group2()[3]) + (other.group1()[1] * self.group1()[2])),
                ((other.group0()[2] * self.group2()[0]) + (other.group1()[1] * self.group1()[3]) + (other.group1()[1] * self.group2()[3]) + (other.group1()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group1()[0] * self.group1()[1]) + (other.group1()[2] * self.group1()[3]) + (other.group1()[2] * self.group2()[3])),
                (-(other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1]) - (other.group0()[0] * self.group1()[3])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0]) - (other.group0()[1] * self.group1()[3])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) - (other.group0()[2] * self.group1()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      104      139        0
    //    simd3        0        1        0
    //    simd4       32       33        0
    // Totals...
    // yes simd      136      173        0
    //  no simd      232      274        0
    fn sandwich(self, other: Motor) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (self.group0()[2] * other.group0()[1]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group0(), 3, 2, 0, 3))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[1])
                    + (self.group1()[0] * other.group0()[3])
                    + (self.group1()[2] * other.group0()[1])
                    + (self.group2()[3] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group1()[0] * other.group0()[2])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[1])),
                ((self.group0()[1] * other.group1()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group1()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (swizzle!(self.group1(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group1()[3] * other.group1()[0]) + (self.group2()[0] * other.group0()[3]) + (self.group2()[2] * other.group0()[1]) + (self.group2()[3] * other.group1()[0])),
                ((self.group1()[3] * other.group1()[1]) + (self.group2()[0] * other.group0()[2]) + (self.group2()[1] * other.group0()[3]) + (self.group2()[3] * other.group1()[1])),
                ((self.group1()[3] * other.group1()[2]) + (self.group2()[1] * other.group0()[0]) + (self.group2()[2] * other.group0()[3]) + (self.group2()[3] * other.group1()[2])),
                (-(self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group1()[2], self.group1()[1], self.group1()[2], self.group2()[3]]) * swizzle!(other.group1(), 1, 3, 3, 3))
                + (swizzle!(self.group1(), 0, 0, 1, 3) * swizzle!(other.group1(), 3, 2, 0, 3))
                - (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (swizzle!(self.group2(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[3])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[0]]) * swizzle!(other.group0(), 0, 1, 2, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for AntiCircleRotor {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      172      223        0
    //    simd2       20       20        0
    //    simd3       76       83        0
    //    simd4       50       51        0
    // Totals...
    // yes simd      318      377        0
    //  no simd      640      716        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([(self.group1()[3] * other.group3()[3]), ((self.group1()[3] * other.group6()[3]) * -1.0)])
                - (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group3()[0], other.group8()[0]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group3()[1], other.group8()[1]]))
                - (Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group3()[2], other.group8()[2]]))
                - (Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group5()[0], other.group6()[0]]))
                - (Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group5()[1], other.group6()[1]]))
                - (Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group5()[2], other.group6()[2]]))
                - (Simd32x2::from(self.group2()[0]) * Simd32x2::from([other.group4()[0], other.group7()[0]]))
                - (Simd32x2::from(self.group2()[1]) * Simd32x2::from([other.group4()[1], other.group7()[1]]))
                - (Simd32x2::from(self.group2()[2]) * Simd32x2::from([other.group4()[2], other.group7()[2]]))
                + (Simd32x2::from(self.group2()[3]) * other.group0())),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other[e1]) - (self.group0()[1] * other.group8()[2]) + (self.group0()[2] * other.group8()[1]) - (other.group7()[1] * self.group2()[2])
                    + (self.group1()[0] * other.group6()[3])),
                ((self.group0()[0] * other.group8()[2]) + (self.group0()[1] * other[e1]) - (self.group0()[2] * other.group8()[0]) - (other.group7()[2] * self.group2()[0])
                    + (self.group1()[1] * other.group6()[3])),
                (-(self.group0()[0] * other.group8()[1]) + (self.group0()[1] * other.group8()[0]) + (self.group0()[2] * other[e1]) - (other.group7()[0] * self.group2()[1])
                    + (self.group1()[2] * other.group6()[3])),
                (-(self.group0()[1] * other.group6()[1]) + (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group6()[2])
                    - (other.group7()[1] * self.group1()[1])
                    - (other.group7()[2] * self.group1()[2])),
            ]) - (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                + (Simd32x4::from([other.group7()[2], other.group7()[0], other.group7()[1], other.group1()[3]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[0]]) * swizzle!(other.group6(), 0, 1, 2, 0))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[1]]) * swizzle!(other.group1(), 0, 1, 2, 1))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group7()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e5
            (-(other.group8()[0] * self.group1()[0]) - (other.group8()[1] * self.group1()[1]) - (other.group8()[2] * self.group1()[2]) + (self.group1()[3] * other[e1])
                - (self.group2()[0] * other.group1()[0])
                - (self.group2()[0] * other.group6()[0])
                - (self.group2()[1] * other.group1()[1])
                - (self.group2()[1] * other.group6()[1])
                - (self.group2()[2] * other.group1()[2])
                - (self.group2()[2] * other.group6()[2])
                + (self.group2()[3] * other[e1])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group1()[0] * other.group9()[3]) + (self.group2()[1] * other.group9()[2])),
                ((self.group1()[1] * other.group9()[3]) + (self.group2()[2] * other.group9()[0])),
                ((self.group1()[2] * other.group9()[3]) + (self.group2()[0] * other.group9()[1])),
                (-(self.group1()[1] * other.group9()[1]) - (self.group1()[2] * other.group9()[2])),
            ]) + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                + (Simd32x4::from([other.group5()[1], other.group5()[2], other.group5()[0], other.group3()[3]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group4()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[1]]) * swizzle!(other.group3(), 0, 1, 2, 1))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[2]]) * swizzle!(other.group3(), 0, 1, 2, 2))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group9()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group3()[3], other.group9()[2], other.group9()[0], other.group4()[1]]) * swizzle!(self.group2(), 0, 0, 1, 1))
                - (Simd32x4::from([other.group9()[1], other.group3()[3], other.group3()[3], other.group4()[2]]) * swizzle!(self.group2(), 2, 1, 2, 2))),
            // e41, e42, e43
            ((Simd32x3::from(other.group0()[0]) * self.group0())
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from([other.group5()[1], other.group9()[2], other.group9()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                - (Simd32x3::from([self.group1()[1], self.group1()[3], self.group1()[3]]) * swizzle!(other.group4(), 2, 1, 2))
                + (Simd32x3::from([self.group1()[2], self.group1()[0], self.group2()[3]]) * swizzle!(other.group4(), 1, 2, 2))
                - (Simd32x3::from([self.group1()[3], self.group1()[2], self.group1()[0]]) * swizzle!(other.group4(), 0, 0, 1))
                + (Simd32x3::from([self.group2()[3], self.group2()[3], self.group1()[1]]) * swizzle!(other.group4(), 0, 1, 0))
                + (Simd32x3::from([other.group3()[3], other.group5()[2], other.group5()[0]]) * swizzle!(self.group0(), 0, 0, 1))
                + (Simd32x3::from([other.group9()[1], other.group3()[3], other.group3()[3]]) * swizzle!(self.group0(), 2, 1, 2))
                - (Simd32x3::from([other.group9()[2], other.group9()[0], other.group9()[1]]) * swizzle!(self.group0(), 1, 2, 0))
                - (swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group5(), 2, 0, 1))),
            // e23, e31, e12
            ((Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                - (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group5(), 2, 0, 1))
                + (Simd32x3::from([self.group1()[2], self.group1()[0], self.group2()[3]]) * swizzle!(other.group5(), 1, 2, 2))
                - (Simd32x3::from([self.group2()[1], self.group2()[2], self.group2()[0]]) * swizzle!(other.group4(), 2, 0, 1))
                + (Simd32x3::from([self.group2()[2], self.group2()[0], self.group2()[1]]) * swizzle!(other.group4(), 1, 2, 0))
                + (Simd32x3::from([self.group2()[3], self.group2()[3], self.group1()[1]]) * swizzle!(other.group5(), 0, 1, 0))
                + (Simd32x3::from([other.group3()[1], other.group9()[3], other.group9()[3]]) * swizzle!(self.group0(), 2, 1, 2))
                - (Simd32x3::from([other.group3()[2], other.group3()[0], other.group3()[1]]) * swizzle!(self.group0(), 1, 2, 0))
                + (Simd32x3::from([other.group9()[3], other.group3()[2], other.group3()[0]]) * swizzle!(self.group0(), 0, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[0]) + (self.group0()[0] * other[e1]) - (self.group0()[1] * other.group8()[2]) + (self.group0()[2] * other.group8()[1])
                    - (other.group7()[2] * self.group2()[1])),
                ((other.group0()[1] * self.group1()[1]) + (self.group0()[0] * other.group8()[2]) + (self.group0()[1] * other[e1])
                    - (self.group0()[2] * other.group8()[0])
                    - (other.group7()[0] * self.group2()[2])),
                ((other.group0()[1] * self.group1()[2]) - (self.group0()[0] * other.group8()[1]) + (self.group0()[1] * other.group8()[0]) + (self.group0()[2] * other[e1])
                    - (other.group7()[1] * self.group2()[0])),
                (-(self.group0()[0] * other.group8()[0])
                    - (self.group0()[1] * other.group8()[1])
                    - (self.group0()[2] * other.group8()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([other.group7()[1], other.group7()[2], other.group7()[0], other.group7()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[3]]) * swizzle!(other.group6(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group7()[1]]) * swizzle!(self.group2(), 0, 1, 2, 1))
                + (Simd32x4::from([other.group6()[0], other.group6()[1], other.group6()[2], other.group7()[2]]) * swizzle!(self.group2(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group0()[1]]) * swizzle!(self.group1(), 1, 2, 0, 3))
                - (swizzle!(self.group1(), 3, 3, 3, 0) * swizzle!(other.group1(), 0, 1, 2, 0))),
            // e423, e431, e412
            ((Simd32x3::from(other.group0()[1]) * self.group0())
                - (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group6()[3], other.group1()[2], other.group6()[1]]))
                - (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group6()[2], other.group6()[3], other.group1()[0]]))
                - (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], other.group6()[0], other.group6()[3]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from([self.group1()[1], self.group1()[3], self.group1()[3]]) * swizzle!(other.group7(), 2, 1, 2))
                + (Simd32x3::from([self.group1()[2], self.group1()[0], self.group2()[3]]) * swizzle!(other.group7(), 1, 2, 2))
                - (Simd32x3::from([self.group1()[3], self.group1()[2], self.group1()[0]]) * swizzle!(other.group7(), 0, 0, 1))
                + (Simd32x3::from([self.group2()[3], self.group2()[3], self.group1()[1]]) * swizzle!(other.group7(), 0, 1, 0))
                + (Simd32x3::from([other.group1()[2], other.group6()[2], other.group1()[1]]) * swizzle!(self.group0(), 1, 0, 0))
                + (Simd32x3::from([other.group6()[1], other.group1()[0], other.group6()[0]]) * swizzle!(self.group0(), 2, 2, 1))),
            // e235, e315, e125
            (Simd32x3::from([
                (-(self.group2()[1] * other.group1()[2]) - (self.group2()[1] * other.group6()[2])
                    + (self.group2()[2] * other.group1()[1])
                    + (self.group2()[2] * other.group6()[1])),
                ((self.group2()[0] * other.group1()[2]) + (self.group2()[0] * other.group6()[2]) - (self.group2()[2] * other.group1()[0]) - (self.group2()[2] * other.group6()[0])),
                (-(self.group2()[0] * other.group1()[1]) - (self.group2()[0] * other.group6()[1])
                    + (self.group2()[1] * other.group1()[0])
                    + (self.group2()[1] * other.group6()[0])),
            ]) + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                + (Simd32x3::from(other.group6()[3]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group8(), 2, 0, 1))
                + (Simd32x3::from([self.group1()[2], self.group1()[0], self.group2()[3]]) * swizzle!(other.group8(), 1, 2, 2))
                + (Simd32x3::from([self.group1()[3], self.group1()[3], self.group1()[1]]) * swizzle!(other.group8(), 0, 1, 0))
                + (Simd32x3::from([self.group2()[3], self.group2()[3], self.group1()[3]]) * other.group8())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[0] * other.group9()[3]) + (self.group0()[1] * other.group3()[2]) + (self.group1()[0] * other.group3()[3])),
                (-(self.group0()[1] * other.group9()[3]) + (self.group0()[2] * other.group3()[0]) + (self.group1()[1] * other.group3()[3])),
                ((self.group0()[0] * other.group3()[1]) - (self.group0()[2] * other.group9()[3]) + (self.group1()[2] * other.group3()[3])),
                (-(other.group5()[1] * self.group2()[1]) - (other.group5()[2] * self.group2()[2]) - (self.group1()[2] * other.group3()[2])),
            ]) + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group9()[3]]))
                + (Simd32x4::from(self.group2()[3]) * other.group9())
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group4()[1], other.group4()[2], other.group4()[0], other.group9()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group4()[2], other.group4()[0], other.group4()[1], other.group5()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[1]]) * swizzle!(other.group9(), 1, 2, 0, 1))
                - (Simd32x4::from([other.group9()[2], other.group9()[0], other.group9()[1], other.group3()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))
                + (Simd32x4::from([other[e45], other[e45], other[e45], other.group9()[2]]) * swizzle!(self.group2(), 0, 1, 2, 2))),
            // e1234
            (-(self.group0()[0] * other.group5()[0])
                - (self.group0()[0] * other.group9()[0])
                - (self.group0()[1] * other.group5()[1])
                - (self.group0()[1] * other.group9()[1])
                - (self.group0()[2] * other.group5()[2])
                - (self.group0()[2] * other.group9()[2])
                - (other.group4()[0] * self.group1()[0])
                - (other.group4()[1] * self.group1()[1])
                - (other.group4()[2] * self.group1()[2])
                - (self.group1()[3] * other[e45])
                + (self.group2()[3] * other[e45])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       75      106        0
    //    simd3        1        3        0
    //    simd4       25       26        0
    // Totals...
    // yes simd      101      135        0
    //  no simd      178      219        0
    fn sandwich(self, other: Plane) -> Self::Output {
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[3] * other.group0()[2])),
                (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group2()[1] * other.group0()[2])),
                ((self.group1()[1] * other.group0()[3]) + (self.group2()[2] * other.group0()[0])),
                ((self.group1()[2] * other.group0()[3]) + (self.group2()[0] * other.group0()[1])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group1()[1] * other.group0()[2])),
                (-(self.group0()[1] * other.group0()[3]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[2] * other.group0()[3]) - (self.group1()[0] * other.group0()[1])),
                ((self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2]) + (self.group2()[3] * other.group0()[3])),
            ]) + (swizzle!(self.group1(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))
                + (swizzle!(self.group2(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       67       99        0
    //    simd3        2        4        0
    //    simd4       29       30        0
    // Totals...
    // yes simd       98      133        0
    //  no simd      189      231        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            ((Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[0] * other[e2]) + (self.group2()[0] * other.group0()[3])),
                ((self.group0()[1] * other[e2]) + (self.group2()[1] * other.group0()[3])),
                ((self.group0()[2] * other[e2]) + (self.group2()[2] * other.group0()[3])),
                (-(self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]) - (swizzle!(self.group1(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))),
            // e235, e315, e125, e4
            (Simd32x4::from([
                (self.group1()[0] * other[e2]),
                (self.group1()[1] * other[e2]),
                (self.group1()[2] * other[e2]),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) + (self.group2()[3] * other.group0()[3])),
            ]) - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group1()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                (self.group1()[2] * other.group0()[1]),
                (self.group1()[0] * other.group0()[2]),
                (self.group1()[1] * other.group0()[0]),
                ((self.group2()[2] * other.group0()[2]) * -1.0),
            ]) + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other[e2]]))
                + (Simd32x4::from(other[e2]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (swizzle!(self.group2(), 0, 1, 2, 1) * swizzle!(other.group0(), 3, 3, 3, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       45       64        0
    //    simd3        0        2        0
    //    simd4       15       18        0
    // Totals...
    // yes simd       60       84        0
    //  no simd      105      142        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other[scalar]) * self.group0()),
            // e23, e31, e12, e45
            (Simd32x4::from(other[scalar]) * self.group1()),
            // e15, e25, e35, scalar
            (Simd32x4::from(other[scalar]) * self.group2()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       75      106        0
    //    simd3        2        4        0
    //    simd4       27       28        0
    // Totals...
    // yes simd      104      138        0
    //  no simd      189      230        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from(other[e4315]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[3] * other.group0()[0]) + (self.group2()[0] * other[e4315])),
                ((self.group0()[1] * other.group0()[3]) + (self.group1()[3] * other.group0()[1]) + (self.group2()[1] * other[e4315])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[3] * other.group0()[2]) + (self.group2()[2] * other[e4315])),
                (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other[e4315])),
            ]) - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other[e4315]]) * swizzle!(self.group2(), 1, 2, 0, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group1()[1] * other.group0()[2])),
                (-(self.group0()[1] * other.group0()[3]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[2] * other.group0()[3]) - (self.group1()[0] * other.group0()[1])),
                ((self.group2()[2] * other.group0()[2]) + (self.group2()[3] * other.group0()[3])),
            ]) + (Simd32x4::from([other[e4315], other[e4315], other[e4315], other.group0()[0]]) * swizzle!(self.group2(), 0, 1, 2, 0))
                + (swizzle!(self.group1(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))
                + (swizzle!(self.group2(), 3, 3, 3, 1) * swizzle!(other.group0(), 0, 1, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      124      159        0
    //    simd3        0        1        0
    //    simd4       49       50        0
    // Totals...
    // yes simd      173      210        0
    //  no simd      320      362        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[1] * other.group3()[2])
                    + (self.group0()[2] * other.group1()[1])
                    + (self.group1()[0] * other.group3()[3])
                    + (self.group1()[2] * other.group0()[1])
                    + (self.group2()[3] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[2])
                    + (self.group0()[2] * other.group3()[0])
                    + (self.group1()[0] * other.group0()[2])
                    + (self.group1()[1] * other.group3()[3])
                    + (self.group2()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group3()[1])
                    + (self.group0()[1] * other.group1()[0])
                    + (self.group1()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group3()[3])
                    + (self.group2()[3] * other.group0()[2])),
                (-(self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])),
            ]) - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group2()[0]]))
                - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group2()[1]]))
                - (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group2()[2]]))
                + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[2] * other.group2()[1]) + (self.group2()[3] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group2()[3]) + (self.group2()[3] * other.group1()[1])),
                ((self.group0()[1] * other.group2()[0]) + (self.group0()[2] * other.group2()[3]) + (self.group2()[3] * other.group1()[2])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2]) - (self.group1()[2] * other.group3()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[3]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group1()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group0()[1], other.group3()[3], other.group3()[3], other.group0()[2]]) * swizzle!(self.group2(), 2, 1, 2, 2))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group3()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group3()[3], other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group2(), 0, 0, 1, 1))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group3(), 0, 1, 2, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group1()[3] * other.group2()[0])
                    + (self.group2()[0] * other.group0()[3])
                    + (self.group2()[0] * other.group1()[3])
                    + (self.group2()[2] * other.group1()[1])
                    + (self.group2()[2] * other.group3()[1])
                    + (self.group2()[3] * other.group2()[0])),
                ((self.group1()[3] * other.group2()[1])
                    + (self.group2()[0] * other.group1()[2])
                    + (self.group2()[0] * other.group3()[2])
                    + (self.group2()[1] * other.group0()[3])
                    + (self.group2()[1] * other.group1()[3])
                    + (self.group2()[3] * other.group2()[1])),
                ((self.group1()[3] * other.group2()[2])
                    + (self.group2()[1] * other.group1()[0])
                    + (self.group2()[1] * other.group3()[0])
                    + (self.group2()[2] * other.group0()[3])
                    + (self.group2()[2] * other.group1()[3])
                    + (self.group2()[3] * other.group2()[2])),
                (-(self.group1()[1] * other.group2()[1])
                    - (self.group1()[2] * other.group2()[2])
                    - (self.group2()[1] * other.group1()[1])
                    - (self.group2()[1] * other.group3()[1])
                    - (self.group2()[2] * other.group1()[2])
                    - (self.group2()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([self.group1()[2], self.group1()[1], self.group1()[2], self.group2()[3]]) * swizzle!(other.group2(), 1, 3, 3, 3))
                + (swizzle!(self.group1(), 0, 0, 1, 3) * swizzle!(other.group2(), 3, 2, 0, 3))
                - (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (swizzle!(self.group2(), 1, 2, 0, 0) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (swizzle!(self.group2(), 1, 2, 0, 0) * swizzle!(other.group3(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group2()[2]) + (self.group0()[2] * other.group2()[1]) + (self.group1()[0] * other.group1()[3])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group2()[3]) - (self.group0()[2] * other.group2()[0]) + (self.group1()[1] * other.group1()[3])),
                (-(self.group0()[0] * other.group2()[1])
                    + (self.group0()[1] * other.group2()[0])
                    + (self.group0()[2] * other.group2()[3])
                    + (self.group1()[2] * other.group1()[3])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2]) + (self.group0()[2] * other.group3()[2])
                    - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[1]]) * swizzle!(other.group3(), 0, 1, 2, 1))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group3()[3]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      132      167        0
    //    simd3        0        1        0
    //    simd4       47       48        0
    // Totals...
    // yes simd      179      216        0
    //  no simd      320      362        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(self.group0()[1] * other.group3()[2])
                    + (self.group0()[2] * other.group1()[1])
                    + (self.group0()[2] * other.group3()[1])
                    + (self.group1()[0] * other.group2()[3])
                    + (self.group1()[2] * other.group0()[1])
                    + (self.group2()[3] * other.group0()[0])),
                ((self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group3()[0])
                    + (self.group1()[0] * other.group0()[2])
                    + (self.group1()[1] * other.group2()[3])
                    + (self.group2()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group3()[1])
                    + (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group1()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group2()[3])
                    + (self.group2()[3] * other.group0()[2])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group1()[3]]) * swizzle!(other.group1(), 3, 2, 0, 3))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]) * swizzle!(self.group1(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) - (self.group0()[1] * other.group2()[2])
                    + (self.group1()[3] * other.group3()[0])
                    + (self.group2()[2] * other.group0()[1])
                    + (self.group2()[3] * other.group1()[0])),
                ((self.group0()[1] * other.group3()[3]) - (self.group0()[2] * other.group2()[0])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group1()[3] * other.group3()[1])
                    + (self.group2()[0] * other.group0()[2])),
                (-(self.group0()[0] * other.group2()[1])
                    + (self.group0()[2] * other.group3()[3])
                    + (self.group1()[2] * other.group0()[3])
                    + (self.group1()[3] * other.group3()[2])
                    + (self.group2()[1] * other.group0()[0])),
                ((self.group0()[2] * other.group2()[2])
                    - (self.group1()[1] * other.group3()[1])
                    - (self.group1()[2] * other.group3()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group2()[3], self.group2()[3], self.group2()[3]]) * swizzle!(other.group1(), 1, 1, 2, 3))
                + (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group0()[3]]) * swizzle!(self.group1(), 0, 0, 1, 3))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group3()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (swizzle!(self.group2(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group1()[0] * other.group3()[3])
                    + (self.group1()[3] * other.group2()[0])
                    + (self.group2()[0] * other.group0()[3])
                    + (self.group2()[1] * other.group3()[2])
                    + (self.group2()[2] * other.group1()[1])
                    + (self.group2()[3] * other.group2()[0])),
                ((self.group1()[1] * other.group3()[3])
                    + (self.group1()[3] * other.group2()[1])
                    + (self.group2()[0] * other.group1()[2])
                    + (self.group2()[1] * other.group0()[3])
                    + (self.group2()[2] * other.group3()[0])
                    + (self.group2()[3] * other.group2()[1])),
                ((self.group1()[2] * other.group3()[3])
                    + (self.group1()[3] * other.group2()[2])
                    + (self.group2()[0] * other.group3()[1])
                    + (self.group2()[1] * other.group1()[0])
                    + (self.group2()[2] * other.group0()[3])
                    + (self.group2()[3] * other.group2()[2])),
                (-(self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group2()[3])),
            ]) + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[2], self.group0()[1]]) * swizzle!(other.group1(), 2, 0, 3, 1))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[0] * other.group3()[3])
                    + (self.group0()[1] * other.group2()[2])
                    + (self.group1()[3] * other.group1()[0])
                    + (self.group2()[3] * other.group3()[0])),
                (-(self.group0()[1] * other.group3()[3])
                    + (self.group0()[2] * other.group2()[0])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[2] * other.group3()[3]) + (self.group1()[2] * other.group1()[3]) + (self.group1()[3] * other.group1()[2])),
                (-(self.group1()[2] * other.group2()[2]) - (self.group2()[1] * other.group1()[1]) - (self.group2()[2] * other.group1()[2])
                    + (self.group2()[3] * other.group3()[3])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group2()[3], self.group2()[3], self.group2()[0]]) * swizzle!(other.group3(), 1, 1, 2, 0))
                + (Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group3()[2]]) * swizzle!(self.group2(), 2, 1, 2, 2))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group3()[3]]) * swizzle!(self.group1(), 0, 0, 1, 3))
                + (Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group3()[1]]) * swizzle!(self.group2(), 0, 0, 1, 1))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl InfixSandwich for AntiDipoleInversion {}
impl Sandwich<AntiCircleRotor> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      101      139        0
    //    simd3        0        1        0
    //    simd4       68       69        0
    // Totals...
    // yes simd      169      209        0
    //  no simd      373      418        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group1()[2]) + (other.group0()[1] * self.group3()[2]) - (other.group0()[2] * self.group3()[1])
                    + (self.group0()[0] * other.group1()[3])
                    + (self.group0()[0] * other.group2()[3])
                    + (self.group0()[2] * other.group1()[1])
                    + (other.group1()[0] * self.group2()[3])),
                (-(other.group0()[0] * self.group3()[2])
                    + (other.group0()[1] * self.group1()[3])
                    + (other.group0()[2] * self.group1()[0])
                    + (other.group0()[2] * self.group3()[0])
                    + (self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[1] * other.group2()[3])
                    + (other.group1()[1] * self.group2()[3])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[0] * self.group3()[1]) - (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (self.group0()[1] * other.group1()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group0()[2] * other.group2()[3])
                    + (other.group1()[2] * self.group2()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) - (other.group0()[2] * self.group2()[1]) + (other.group1()[1] * self.group1()[2]) + (other.group2()[3] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[2])
                    + (other.group0()[1] * self.group3()[3])
                    + (other.group1()[2] * self.group1()[0])
                    + (other.group2()[3] * self.group1()[1])),
                (-(other.group0()[1] * self.group2()[0])
                    + (other.group0()[2] * self.group3()[3])
                    + (other.group1()[0] * self.group1()[1])
                    + (other.group2()[3] * self.group1()[2])),
                ((other.group0()[2] * self.group2()[2]) - (self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2]) - (other.group1()[2] * self.group3()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group3(), 0, 1, 2, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (other.group1()[1] * self.group2()[2]),
                (other.group1()[2] * self.group2()[0]),
                (other.group1()[0] * self.group2()[1]),
                (-(other.group1()[2] * self.group2()[2]) - (other.group1()[3] * self.group3()[3])),
            ]) - (Simd32x4::from(other.group2()[0]) * Simd32x4::from([self.group1()[3], self.group1()[2], self.group3()[1], self.group1()[0]]))
                - (Simd32x4::from(other.group2()[1]) * Simd32x4::from([self.group3()[2], self.group1()[3], self.group1()[0], self.group1()[1]]))
                - (Simd32x4::from(other.group2()[2]) * Simd32x4::from([self.group1()[1], self.group3()[0], self.group1()[3], self.group1()[2]]))
                + (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[2], self.group3()[2], self.group1()[1], self.group3()[1]]) * swizzle!(other.group2(), 1, 0, 0, 1))
                + (Simd32x4::from([self.group3()[1], self.group1()[0], self.group3()[0], self.group3()[2]]) * swizzle!(other.group2(), 2, 2, 1, 2))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group2(), 0, 1, 2, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) - (self.group0()[1] * other.group2()[2])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[1] * self.group3()[2])
                    + (other.group2()[0] * self.group2()[3])
                    + (other.group2()[3] * self.group3()[0])),
                (-(other.group0()[2] * self.group2()[0]) - (self.group0()[2] * other.group2()[0])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[2] * self.group3()[0])
                    + (other.group2()[1] * self.group2()[3])
                    + (other.group2()[3] * self.group3()[1])),
                (-(other.group0()[0] * self.group2()[1]) - (self.group0()[0] * other.group2()[1])
                    + (other.group1()[0] * self.group3()[1])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group2()[2] * self.group2()[3])
                    + (other.group2()[3] * self.group3()[2])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group3()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[1]]) * swizzle!(self.group3(), 1, 2, 0, 1))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      101      136        0
    //    simd3        0        1        0
    //    simd4       83       84        0
    // Totals...
    // yes simd      184      221        0
    //  no simd      433      475        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2])
                    - (self.group0()[2] * other.group1()[1])
                    - (other.group1()[0] * self.group2()[3])
                    - (other.group2()[3] * self.group1()[0])
                    - (other.group2()[3] * self.group3()[0])),
                (-(other.group0()[2] * self.group1()[0])
                    - (self.group0()[0] * other.group1()[2])
                    - (other.group1()[1] * self.group2()[3])
                    - (other.group2()[3] * self.group1()[1])
                    - (other.group2()[3] * self.group3()[1])),
                (-(other.group0()[2] * self.group1()[3])
                    - (self.group0()[1] * other.group1()[0])
                    - (other.group1()[2] * self.group2()[3])
                    - (other.group2()[3] * self.group1()[2])
                    - (other.group2()[3] * self.group3()[2])),
                ((other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])
                    + (other.group1()[1] * self.group1()[1])
                    + (other.group1()[2] * self.group1()[2])
                    + (other.group3()[1] * self.group3()[1])
                    + (other.group3()[2] * self.group3()[2])),
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group2()[0]]))
                + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group2()[1]]))
                + (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group2()[2]]))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group1()[3]]) * swizzle!(self.group1(), 3, 3, 1, 3))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group2()[3]]) * swizzle!(self.group3(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group3()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group2()[3]]) * swizzle!(other.group3(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[0]]) * swizzle!(self.group2(), 3, 3, 3, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (self.group0()[1] * other.group2()[2]) + (other.group1()[2] * self.group1()[1])),
                (-(other.group0()[2] * self.group2()[0]) + (self.group0()[2] * other.group2()[0]) + (other.group1()[0] * self.group1()[2])),
                (-(other.group0()[0] * self.group2()[1]) + (self.group0()[0] * other.group2()[1]) + (other.group1()[1] * self.group1()[0])),
                ((other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2]) - (other.group2()[3] * self.group3()[3])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group1()[1]]) * swizzle!(other.group3(), 0, 1, 0, 1))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[2]]) * swizzle!(other.group2(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[1]]) * swizzle!(other.group2(), 0, 1, 2, 1))
                + (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[3]]) * swizzle!(other.group3(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group1()[3], self.group1()[2]]) * swizzle!(other.group3(), 1, 2, 2, 2))
                - (swizzle!(other.group1(), 3, 3, 3, 2) * swizzle!(self.group3(), 0, 1, 2, 2))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(other.group1()[0] * self.group3()[3])
                    - (other.group1()[1] * self.group2()[2])
                    - (other.group1()[3] * self.group2()[0])
                    - (other.group2()[2] * self.group3()[1])),
                (-(other.group1()[1] * self.group3()[3])
                    - (other.group1()[2] * self.group2()[0])
                    - (other.group1()[3] * self.group2()[1])
                    - (other.group2()[2] * self.group1()[0])),
                (-(other.group1()[0] * self.group2()[1])
                    - (other.group1()[2] * self.group3()[3])
                    - (other.group1()[3] * self.group2()[2])
                    - (other.group2()[1] * self.group3()[0])),
                ((other.group0()[2] * self.group1()[2]) + (other.group0()[2] * self.group3()[2]) + (self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([other.group2()[0], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group3(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[2], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))
                + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[3]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group0()[1]]) * swizzle!(self.group3(), 0, 1, 2, 1))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[2]]) * swizzle!(other.group3(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group1()[2], self.group3()[2], self.group1()[1], self.group1()[3]]) * swizzle!(other.group2(), 1, 0, 0, 3))
                + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group3()[3], self.group0()[1]]) * swizzle!(other.group3(), 1, 2, 2, 1))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group2()[1], self.group0()[0]]) * swizzle!(other.group3(), 0, 1, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) - (other.group3()[2] * self.group1()[1])),
                (-(other.group0()[2] * self.group2()[0]) - (other.group3()[0] * self.group1()[2])),
                (-(other.group0()[0] * self.group2()[1]) - (other.group3()[1] * self.group1()[0])),
                ((other.group3()[2] * self.group2()[2]) + (other.group3()[3] * self.group1()[3])),
            ]) - (Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[1]]) * swizzle!(self.group3(), 1, 2, 0, 1))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[1]]) * swizzle!(self.group1(), 0, 1, 2, 1))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[1]]) * swizzle!(other.group3(), 1, 2, 0, 1))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group2()[1]]) * swizzle!(other.group1(), 0, 1, 0, 1))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[2]]) * swizzle!(other.group2(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group1()[2]]) * swizzle!(other.group2(), 0, 1, 2, 2))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group1()[3], self.group2()[2]]) * swizzle!(other.group1(), 1, 2, 2, 2))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       46       84        0
    //    simd3        0        1        0
    //    simd4       48       50        0
    // Totals...
    // yes simd       94      135        0
    //  no simd      238      287        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[0] * self.group3()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[0] * self.group3()[3]),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (other.group0()[0] * self.group2()[0]),
                (other.group0()[0] * self.group2()[1]),
                (other.group0()[0] * self.group2()[2]),
                ((other.group0()[0] * self.group3()[3]) * -1.0),
            ]) + (Simd32x4::from(other.group0()[1]) * self.group1())),
            // e235, e315, e125, e5
            (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]])),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) * -1.0),
                ((other.group0()[0] * self.group2()[1]) * -1.0),
                ((other.group0()[0] * self.group2()[2]) * -1.0),
                (other.group0()[0] * self.group1()[3]),
            ]) + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[3]]))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       80      111        0
    //    simd3        0        1        0
    //    simd4       48       49        0
    // Totals...
    // yes simd      128      161        0
    //  no simd      272      310        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[2] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                0.0,
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1]) + (self.group1()[3] * other.group0()[0])
                    - (self.group2()[0] * other.group0()[3])
                    - (self.group3()[1] * other.group0()[2])
                    + (self.group3()[2] * other.group0()[1])),
                (-(self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0]) + (self.group1()[3] * other.group0()[1])
                    - (self.group2()[1] * other.group0()[3])
                    + (self.group3()[0] * other.group0()[2])
                    - (self.group3()[2] * other.group0()[0])),
                ((self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0]) + (self.group1()[3] * other.group0()[2])
                    - (self.group2()[2] * other.group0()[3])
                    - (self.group3()[0] * other.group0()[1])
                    + (self.group3()[1] * other.group0()[0])),
                (self.group2()[3] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group3()[1] * other.group0()[1]) - (self.group3()[2] * other.group0()[2]) - (self.group3()[3] * other.group0()[3])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group1()[2]]) * swizzle!(other.group0(), 0, 1, 2, 2))
                + (swizzle!(self.group1(), 0, 1, 2, 1) * swizzle!(other.group0(), 3, 3, 3, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       85      118        0
    //    simd3        0        1        0
    //    simd4       62       63        0
    // Totals...
    // yes simd      147      182        0
    //  no simd      333      373        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other.group0()[3]) + (self.group3()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group2()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[1]]) * swizzle!(other.group1(), 0, 1, 2, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[2] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                0.0,
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[2]]) * swizzle!(other.group1(), 1, 2, 0, 2))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group1(), 0, 1, 2, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(self.group1()[2] * other.group0()[1]) + (self.group1()[3] * other.group0()[0]) - (self.group2()[0] * other.group0()[3])
                    + (self.group2()[1] * other.group1()[2])
                    + (self.group3()[0] * other.group1()[3])
                    - (self.group3()[1] * other.group0()[2])
                    + (self.group3()[2] * other.group0()[1])),
                (-(self.group1()[0] * other.group0()[2]) + (self.group1()[3] * other.group0()[1]) - (self.group2()[1] * other.group0()[3])
                    + (self.group2()[2] * other.group1()[0])
                    + (self.group3()[0] * other.group0()[2])
                    + (self.group3()[1] * other.group1()[3])
                    - (self.group3()[2] * other.group0()[0])),
                (-(self.group1()[1] * other.group0()[0]) + (self.group1()[3] * other.group0()[2]) + (self.group2()[0] * other.group1()[1])
                    - (self.group2()[2] * other.group0()[3])
                    - (self.group3()[0] * other.group0()[1])
                    + (self.group3()[1] * other.group0()[0])
                    + (self.group3()[2] * other.group1()[3])),
                0.0,
            ]) - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group0()[2]]) * swizzle!(other.group1(), 0, 1, 2, 2))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group1()[1] * other.group1()[2]) * -1.0),
                ((self.group1()[2] * other.group1()[0]) * -1.0),
                ((self.group1()[0] * other.group1()[1]) * -1.0),
                ((self.group2()[1] * other.group1()[1]) + (self.group2()[2] * other.group1()[2])
                    - (self.group3()[1] * other.group0()[1])
                    - (self.group3()[2] * other.group0()[2])
                    - (self.group3()[3] * other.group0()[3])),
            ]) + (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group2(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group0()[1]]) * swizzle!(self.group1(), 0, 0, 1, 1))
                + (Simd32x4::from([other.group1()[1], other.group0()[3], other.group0()[3], other.group0()[2]]) * swizzle!(self.group1(), 2, 1, 2, 2))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       90      128        0
    //    simd3        0        1        0
    //    simd4       52       53        0
    // Totals...
    // yes simd      142      182        0
    //  no simd      298      343        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1]) + (other.group0()[0] * self.group2()[3])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0]) + (other.group0()[1] * self.group2()[3])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) + (other.group0()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1]) + (other.group0()[1] * self.group1()[2])
                    - (other.group0()[2] * self.group1()[1])
                    + (other.group1()[0] * self.group2()[3])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0]) - (other.group0()[0] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[0])
                    + (other.group1()[1] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) + (other.group0()[0] * self.group1()[1])
                    - (other.group0()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group3()[0])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group3()[2])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) + (other.group1()[1] * self.group1()[2])),
                ((other.group0()[2] * self.group2()[0]) + (other.group1()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group1()[0] * self.group1()[1])),
                (-(other.group0()[1] * self.group2()[1]) - (other.group0()[2] * self.group2()[2]) + (other.group1()[2] * self.group3()[2])),
            ]) - (Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group1()[3], self.group1()[2], self.group3()[1], self.group1()[0]]))
                - (Simd32x4::from(other.group1()[1]) * Simd32x4::from([self.group3()[2], self.group1()[3], self.group1()[0], self.group1()[1]]))
                - (Simd32x4::from(other.group1()[2]) * Simd32x4::from([self.group1()[1], self.group3()[0], self.group1()[3], self.group1()[2]]))
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group1()[1]]) * swizzle!(self.group3(), 1, 2, 0, 1))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[1])
                    + (other.group0()[0] * self.group1()[3])
                    + (other.group0()[1] * self.group3()[2])
                    - (other.group0()[2] * self.group3()[1])
                    + (other.group1()[0] * self.group2()[3])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0]) - (other.group0()[0] * self.group3()[2])
                    + (other.group0()[1] * self.group1()[3])
                    + (other.group0()[2] * self.group3()[0])
                    + (other.group1()[1] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) + (other.group0()[0] * self.group3()[1])
                    - (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group1()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       76      114        0
    //    simd3        0        1        0
    //    simd4       63       64        0
    // Totals...
    // yes simd      139      179        0
    //  no simd      328      373        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[3])),
                ((self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group1()[1]) + (self.group1()[2] * other.group0()[1]) + (self.group2()[3] * other.group1()[0])),
                ((self.group0()[1] * other.group1()[3]) + (self.group1()[1] * other.group0()[3]) + (self.group2()[3] * other.group1()[1])),
                ((self.group0()[2] * other.group1()[3]) + (self.group1()[2] * other.group0()[3]) + (self.group2()[3] * other.group1()[2])),
                (-(self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group3()[1] * other.group0()[1])
                    - (self.group3()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group1(), 3, 2, 0, 3))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (swizzle!(self.group1(), 0, 0, 1, 3) * swizzle!(other.group0(), 3, 2, 0, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group2()[2] * other.group0()[1]) + (self.group3()[3] * other.group0()[0])),
                ((self.group2()[1] * other.group0()[3]) + (self.group3()[3] * other.group0()[1])),
                ((self.group2()[2] * other.group0()[3]) + (self.group3()[3] * other.group0()[2])),
                (-(self.group2()[1] * other.group0()[1]) - (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[0], self.group1()[1], self.group3()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[1], self.group1()[2], self.group3()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))
                + (Simd32x4::from([self.group2()[0], self.group2()[0], self.group2()[1], self.group3()[3]]) * swizzle!(other.group0(), 3, 2, 0, 3))
                - (Simd32x4::from([self.group3()[0], self.group3()[0], self.group3()[1], self.group1()[2]]) * swizzle!(other.group1(), 3, 2, 0, 2))
                - (Simd32x4::from([self.group3()[2], self.group3()[1], self.group3()[2], self.group1()[3]]) * swizzle!(other.group1(), 1, 3, 3, 3))
                - (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group1(), 0, 1, 2, 1))
                - (swizzle!(self.group2(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (swizzle!(self.group3(), 1, 2, 0, 2) * swizzle!(other.group1(), 2, 0, 1, 2))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[1])
                    + (self.group2()[3] * other.group1()[0])
                    + (self.group3()[0] * other.group0()[3])
                    + (self.group3()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group1()[0])
                    + (self.group2()[3] * other.group1()[1])
                    + (self.group3()[0] * other.group0()[2])
                    + (self.group3()[1] * other.group0()[3])),
                (-(self.group0()[0] * other.group1()[1])
                    + (self.group0()[1] * other.group1()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group2()[3] * other.group1()[2])
                    + (self.group3()[1] * other.group0()[0])
                    + (self.group3()[2] * other.group0()[3])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[3]]) * other.group0())
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64       94        0
    //    simd3        0        1        0
    //    simd4       52       54        0
    // Totals...
    // yes simd      116      149        0
    //  no simd      272      313        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([0.0, 0.0, 0.0, (self.group3()[2] * other.group0()[2])])
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group2()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e23, e31, e12, e45
            (-(Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[2]]) * swizzle!(other.group0(), 1, 2, 0, 2))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group2()[1] * other.group0()[2]) + (self.group3()[0] * other.group0()[3])),
                ((self.group2()[2] * other.group0()[0]) + (self.group3()[1] * other.group0()[3])),
                ((self.group2()[0] * other.group0()[1]) + (self.group3()[2] * other.group0()[3])),
                0.0,
            ]) - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group0()[2]]) * swizzle!(other.group0(), 0, 1, 2, 2))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group1()[1] * other.group0()[2]) * -1.0),
                ((self.group1()[2] * other.group0()[0]) * -1.0),
                ((self.group1()[0] * other.group0()[1]) * -1.0),
                ((self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       69       88        0
    //    simd3        0        3        0
    //    simd4       35       42        0
    // Totals...
    // yes simd      104      133        0
    //  no simd      209      265        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other[e12345]) * self.group0() * Simd32x3::from(-1.0)),
            // e23, e31, e12, e45
            (Simd32x4::from(other[e12345]) * self.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e15, e25, e35, e1234
            (Simd32x4::from(other[e12345]) * self.group2() * Simd32x4::from(-1.0)),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other[e12345]) * self.group3() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      118      153        0
    //    simd3        0        1        0
    //    simd4       60       61        0
    // Totals...
    // yes simd      178      215        0
    //  no simd      358      400        0
    fn sandwich(self, other: Circle) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2]) - (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group3()[1])
                    - (self.group2()[3] * other.group1()[0])),
                ((other.group0()[0] * self.group3()[2])
                    - (other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group1()[0])
                    - (other.group0()[2] * self.group3()[0])
                    - (self.group2()[3] * other.group1()[1])),
                (-(other.group0()[0] * self.group1()[1]) - (other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group3()[0])
                    - (other.group0()[2] * self.group1()[3])
                    - (self.group2()[3] * other.group1()[2])),
                ((self.group0()[0] * other.group2()[0])
                    + (self.group0()[1] * other.group2()[1])
                    + (self.group0()[2] * other.group2()[2])
                    + (other.group0()[0] * self.group2()[0])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 3, 3, 1, 0))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[2], self.group1()[1]]) * swizzle!(other.group1(), 2, 0, 3, 1))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[3]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]) * swizzle!(self.group1(), 1, 2, 0, 2))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1]) - (other.group0()[1] * self.group2()[2]) - (other.group2()[0] * self.group2()[3])
                    + (self.group1()[1] * other.group1()[2])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group2()[0])
                    - (other.group0()[2] * self.group2()[0])
                    - (other.group2()[1] * self.group2()[3])
                    + (self.group1()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) - (other.group0()[0] * self.group2()[1]) - (other.group2()[2] * self.group2()[3])
                    + (self.group1()[0] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))
                - (swizzle!(self.group3(), 0, 1, 2, 2) * swizzle!(other.group1(), 3, 3, 3, 2))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(other.group2()[1] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[1])
                    - (self.group2()[0] * other.group1()[3])
                    - (self.group2()[2] * other.group1()[1])
                    - (self.group3()[3] * other.group1()[0])),
                (-(other.group2()[0] * self.group3()[2])
                    - (other.group2()[2] * self.group1()[0])
                    - (self.group2()[0] * other.group1()[2])
                    - (self.group2()[1] * other.group1()[3])
                    - (self.group3()[3] * other.group1()[1])),
                (-(other.group2()[0] * self.group1()[1])
                    - (other.group2()[1] * self.group3()[0])
                    - (self.group2()[1] * other.group1()[0])
                    - (self.group2()[2] * other.group1()[3])
                    - (self.group3()[3] * other.group1()[2])),
                ((self.group0()[1] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[2])
                    + (other.group0()[1] * self.group3()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])
                    + (self.group2()[3] * other.group1()[3])),
            ]) + (Simd32x4::from([other.group2()[0], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group3(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[2], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))
                + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[1] * other.group2()[2]) + (self.group0()[2] * other.group2()[1]) - (other.group0()[1] * self.group2()[2])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[2] * other.group2()[0]) - (other.group0()[2] * self.group2()[0])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0]) - (other.group0()[0] * self.group2()[1])),
                ((other.group2()[2] * self.group1()[2]) - (other.group2()[2] * self.group3()[2]) - (self.group3()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[2]]) * swizzle!(other.group1(), 1, 2, 0, 2))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[1]]) * swizzle!(self.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[1]]) * swizzle!(self.group3(), 1, 2, 0, 1))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      105      140        0
    //    simd3        0        1        0
    //    simd4       67       68        0
    // Totals...
    // yes simd      172      209        0
    //  no simd      373      415        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(self.group0()[0] * other.group2()[3])
                    - (other.group0()[0] * self.group1()[3])
                    - (other.group0()[1] * self.group1()[2])
                    - (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group3()[1])
                    - (self.group2()[3] * other.group1()[0])),
                (-(self.group0()[1] * other.group2()[3]) + (other.group0()[0] * self.group3()[2])
                    - (other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group1()[0])
                    - (other.group0()[2] * self.group3()[0])
                    - (self.group2()[3] * other.group1()[1])),
                (-(self.group0()[2] * other.group2()[3]) - (other.group0()[0] * self.group1()[1]) - (other.group0()[0] * self.group3()[1])
                    + (other.group0()[1] * self.group3()[0])
                    - (other.group0()[2] * self.group1()[3])
                    - (self.group2()[3] * other.group1()[2])),
                ((self.group0()[0] * other.group2()[0])
                    + (self.group0()[1] * other.group2()[1])
                    + (self.group0()[2] * other.group2()[2])
                    + (other.group0()[0] * self.group2()[0])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 3, 3, 1, 0))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[2], self.group1()[1]]) * swizzle!(other.group1(), 2, 0, 3, 1))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[3]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]) * swizzle!(self.group1(), 1, 2, 0, 2))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (self.group1()[1] * other.group1()[2])),
                (-(other.group0()[2] * self.group2()[0]) + (self.group1()[2] * other.group1()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (self.group1()[0] * other.group1()[1])),
                ((other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[3]]) * swizzle!(other.group2(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[2]]) * swizzle!(other.group2(), 0, 1, 2, 2))
                - (swizzle!(self.group3(), 0, 1, 2, 2) * swizzle!(other.group1(), 3, 3, 3, 2))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(self.group2()[0] * other.group1()[3])
                    - (self.group2()[0] * other.group2()[3])
                    - (self.group2()[2] * other.group1()[1])
                    - (self.group3()[1] * other.group2()[2])
                    - (self.group3()[3] * other.group1()[0])),
                (-(self.group2()[0] * other.group1()[2])
                    - (self.group2()[1] * other.group1()[3])
                    - (self.group2()[1] * other.group2()[3])
                    - (self.group3()[2] * other.group2()[0])
                    - (self.group3()[3] * other.group1()[1])),
                (-(self.group2()[1] * other.group1()[0])
                    - (self.group2()[2] * other.group1()[3])
                    - (self.group2()[2] * other.group2()[3])
                    - (self.group3()[0] * other.group2()[1])
                    - (self.group3()[3] * other.group1()[2])),
                ((self.group0()[1] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[2])
                    + (other.group0()[1] * self.group3()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])
                    + (self.group2()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group1(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group3(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (self.group3()[0] * other.group2()[3])),
                (-(other.group0()[2] * self.group2()[0]) + (self.group3()[1] * other.group2()[3])),
                (-(other.group0()[0] * self.group2()[1]) + (self.group3()[2] * other.group2()[3])),
                (-(self.group3()[3] * other.group1()[3]) - (self.group3()[3] * other.group2()[3])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[1]]) * swizzle!(self.group3(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[2]]) * swizzle!(other.group1(), 1, 2, 0, 2))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[2]]) * swizzle!(self.group1(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[2]]) * swizzle!(self.group3(), 1, 2, 0, 2))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[1]]) * swizzle!(self.group1(), 0, 1, 2, 1))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      106      144        0
    //    simd3        0        1        0
    //    simd4       63       64        0
    // Totals...
    // yes simd      169      209        0
    //  no simd      358      403        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[1])
                    + (other.group0()[0] * self.group1()[3])
                    + (other.group0()[1] * self.group1()[2])
                    + (other.group0()[1] * self.group3()[2])
                    - (other.group0()[2] * self.group3()[1])
                    + (self.group2()[3] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3]) - (other.group0()[0] * self.group3()[2])
                    + (other.group0()[1] * self.group1()[3])
                    + (other.group0()[2] * self.group1()[0])
                    + (other.group0()[2] * self.group3()[0])
                    + (self.group2()[3] * other.group1()[1])),
                ((self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[3]) + (other.group0()[0] * self.group1()[1]) + (other.group0()[0] * self.group3()[1])
                    - (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (self.group2()[3] * other.group1()[2])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(self.group0()[1] * other.group2()[2]) + (self.group0()[2] * other.group2()[1]) + (other.group0()[0] * self.group3()[3])
                    - (other.group0()[2] * self.group2()[1])
                    + (self.group1()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[2] * other.group2()[0]) - (other.group0()[0] * self.group2()[2])
                    + (other.group0()[1] * self.group3()[3])
                    + (self.group1()[0] * other.group1()[2])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0]) - (other.group0()[1] * self.group2()[0])
                    + (other.group0()[2] * self.group3()[3])
                    + (self.group1()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])
                    + (other.group0()[2] * self.group2()[2])
                    - (self.group3()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (swizzle!(self.group3(), 0, 1, 2, 1) * swizzle!(other.group1(), 3, 3, 3, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group2()[1] * self.group1()[2]) + (self.group2()[2] * other.group1()[1])),
                ((other.group2()[2] * self.group1()[0]) + (self.group2()[0] * other.group1()[2])),
                ((other.group2()[0] * self.group1()[1]) + (self.group2()[1] * other.group1()[0])),
                ((other.group2()[2] * self.group3()[2]) - (self.group2()[2] * other.group1()[2]) - (self.group3()[3] * other.group1()[3])),
            ]) - (Simd32x4::from(other.group2()[0]) * Simd32x4::from([self.group1()[3], self.group1()[2], self.group3()[1], self.group1()[0]]))
                - (Simd32x4::from(other.group2()[1]) * Simd32x4::from([self.group3()[2], self.group1()[3], self.group1()[0], self.group1()[1]]))
                - (Simd32x4::from(other.group2()[2]) * Simd32x4::from([self.group1()[1], self.group3()[0], self.group1()[3], self.group1()[2]]))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group2()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[1]]) * swizzle!(self.group3(), 3, 3, 3, 1))
                - (swizzle!(self.group2(), 0, 1, 0, 0) * swizzle!(other.group1(), 3, 3, 1, 0))
                - (swizzle!(self.group2(), 1, 2, 2, 1) * swizzle!(other.group1(), 2, 0, 3, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group0()[1] * other.group2()[2]) + (self.group0()[2] * other.group2()[1]) - (other.group0()[1] * self.group2()[2])
                    + (other.group2()[0] * self.group2()[3])
                    + (self.group1()[3] * other.group1()[0])
                    + (self.group3()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[2] * other.group2()[0]) - (other.group0()[2] * self.group2()[0])
                    + (other.group2()[1] * self.group2()[3])
                    + (self.group1()[3] * other.group1()[1])
                    + (self.group3()[0] * other.group1()[2])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0]) - (other.group0()[0] * self.group2()[1])
                    + (other.group2()[2] * self.group2()[3])
                    + (self.group1()[3] * other.group1()[2])
                    + (self.group3()[1] * other.group1()[0])),
                (-(self.group0()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group3()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group0()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      105      147        0
    //    simd3        0        1        0
    //    simd4       82       83        0
    // Totals...
    // yes simd      187      231        0
    //  no simd      433      482        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group3()[2])
                    + (self.group0()[2] * other.group1()[1])
                    + (other.group0()[0] * self.group1()[3])
                    + (other.group0()[1] * self.group1()[2])
                    - (other.group0()[2] * self.group3()[1])
                    + (self.group2()[3] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group3()[0]) - (other.group0()[0] * self.group3()[2])
                    + (other.group0()[1] * self.group1()[3])
                    + (other.group0()[2] * self.group1()[0])
                    + (self.group2()[3] * other.group1()[1])),
                (-(self.group0()[0] * other.group3()[1])
                    + (self.group0()[1] * other.group1()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (other.group0()[0] * self.group1()[1])
                    - (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (self.group2()[3] * other.group1()[2])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]) + (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group3(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group3(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[1]]) * swizzle!(other.group3(), 0, 1, 2, 1))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group3()[2]]) * swizzle!(self.group3(), 0, 1, 2, 2))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group2()[1]) + (other.group0()[0] * self.group3()[3]) - (other.group0()[2] * self.group2()[1]) - (self.group1()[3] * other.group3()[0])),
                ((self.group0()[0] * other.group2()[2]) - (other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group3()[3]) - (self.group1()[3] * other.group3()[1])),
                ((self.group0()[1] * other.group2()[0]) - (other.group0()[1] * self.group2()[0]) + (other.group0()[2] * self.group3()[3]) - (self.group1()[3] * other.group3()[2])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2]) + (self.group2()[3] * other.group3()[3])
                    - (self.group3()[3] * other.group2()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[2]]) * swizzle!(other.group3(), 2, 0, 1, 2))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[1]]) * swizzle!(self.group1(), 2, 0, 1, 1))
                - (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group1()[1]]) * swizzle!(self.group3(), 0, 0, 1, 1))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[2]]) * swizzle!(self.group2(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[1]]) * swizzle!(self.group2(), 0, 1, 2, 1))
                - (Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group1()[2]]) * swizzle!(self.group3(), 2, 1, 2, 2))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group3()[2] * other.group2()[1]) * -1.0),
                ((self.group3()[3] * other.group3()[1]) * -1.0),
                ((self.group3()[3] * other.group3()[2]) * -1.0),
                ((self.group1()[2] * other.group2()[2]) * -1.0),
            ]) - (Simd32x4::from(self.group2()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group1()[0]]))
                - (Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group1()[1]]))
                - (Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group1()[2]]))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[3], self.group3()[1], self.group3()[2], self.group1()[3]]) * swizzle!(other.group3(), 0, 3, 3, 3))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[2]]) * swizzle!(self.group3(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[0], other.group3()[2]]) * swizzle!(self.group2(), 2, 2, 1, 2))
                + (Simd32x4::from([other.group3()[2], other.group1()[2], other.group3()[1], other.group3()[1]]) * swizzle!(self.group2(), 1, 0, 0, 1))
                - (Simd32x4::from([other.group3()[3], other.group2()[2], other.group2()[0], other.group1()[3]]) * swizzle!(self.group3(), 0, 0, 1, 3))
                - (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group2(), 0, 1, 2, 1))
                + (swizzle!(self.group3(), 1, 2, 0, 1) * swizzle!(other.group2(), 2, 0, 1, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) - (self.group0()[1] * other.group2()[2]) - (other.group0()[1] * self.group2()[2])
                    + (self.group1()[1] * other.group3()[2])
                    + (self.group1()[3] * other.group1()[0])
                    - (self.group2()[0] * other.group2()[3])
                    + (self.group2()[3] * other.group2()[0])
                    + (self.group3()[2] * other.group1()[1])),
                ((self.group0()[1] * other.group3()[3]) - (self.group0()[2] * other.group2()[0]) - (other.group0()[2] * self.group2()[0])
                    + (self.group1()[2] * other.group3()[0])
                    + (self.group1()[3] * other.group1()[1])
                    - (self.group2()[1] * other.group2()[3])
                    + (self.group2()[3] * other.group2()[1])
                    + (self.group3()[0] * other.group1()[2])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[2] * other.group3()[3]) - (other.group0()[0] * self.group2()[1])
                    + (self.group1()[0] * other.group3()[1])
                    + (self.group1()[3] * other.group1()[2])
                    - (self.group2()[2] * other.group2()[3])
                    + (self.group2()[3] * other.group2()[2])
                    + (self.group3()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group3()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group3()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group0()[0]]) * swizzle!(self.group1(), 0, 0, 1, 0))
                - (Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group0()[1]]) * swizzle!(self.group1(), 2, 1, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       70      113        0
    //    simd3        0        1        0
    //    simd4       42       43        0
    // Totals...
    // yes simd      112      157        0
    //  no simd      238      288        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[0] * self.group3()[0]) - (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[1]) - (other.group0()[0] * self.group3()[1]) - (other.group0()[1] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group0()[2])),
                (other.group0()[0] * self.group3()[3] * -1.0),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[0]) * -1.0),
                ((other.group0()[1] * self.group1()[1]) * -1.0),
                ((other.group0()[1] * self.group1()[2]) * -1.0),
                (other.group0()[1] * self.group1()[3]),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group2()[0] * -1.0),
                (other.group0()[1] * self.group2()[1] * -1.0),
                (other.group0()[1] * self.group2()[2] * -1.0),
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group2()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group3()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group3()[1])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group3()[2])),
                (other.group0()[1] * self.group3()[3] * -1.0),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       55       91        0
    //    simd3        0        1        0
    //    simd4       54       55        0
    // Totals...
    // yes simd      109      147        0
    //  no simd      271      314        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group0()[1]) + (self.group2()[3] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[2]) + (self.group2()[3] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[0]) + (self.group2()[3] * other.group0()[2])),
                ((self.group0()[2] * other.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([0.0, 0.0, 0.0, (self.group3()[2] * other.group0()[2])])
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                - (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group0(), 0, 1, 2, 1))
                + (swizzle!(self.group3(), 1, 2, 0, 1) * swizzle!(other.group0(), 2, 0, 1, 1))
                - (swizzle!(self.group3(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1]) - (self.group1()[0] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0]) - (self.group1()[1] * other.group0()[3]) + (self.group2()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) - (self.group1()[2] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[2])),
                (self.group2()[3] * other.group0()[3]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       72      110        0
    //    simd3        0        1        0
    //    simd4       64       65        0
    // Totals...
    // yes simd      136      176        0
    //  no simd      328      373        0
    fn sandwich(self, other: Flector) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group1()[2])),
                ((self.group0()[1] * other.group0()[3]) - (self.group0()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group0()[3])
                    + (self.group3()[1] * other.group1()[1])
                    + (self.group3()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group0()[1]) - (self.group1()[3] * other.group1()[0]) - (self.group3()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group1()[3] * other.group1()[1]) - (self.group3()[0] * other.group1()[2])),
                ((self.group0()[1] * other.group0()[0]) - (self.group1()[3] * other.group1()[2]) - (self.group3()[1] * other.group1()[0])),
                (-(self.group0()[2] * other.group0()[2]) + (self.group1()[2] * other.group1()[2])),
            ]) + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group3()[2] * other.group0()[1]) - (self.group3()[3] * other.group1()[0])),
                (-(self.group3()[1] * other.group1()[3]) - (self.group3()[3] * other.group1()[1])),
                (-(self.group3()[2] * other.group1()[3]) - (self.group3()[3] * other.group1()[2])),
                ((self.group2()[2] * other.group1()[2]) + (self.group3()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group1()[3], other.group0()[2], other.group0()[0], other.group0()[3]]) * swizzle!(self.group3(), 0, 0, 1, 3))
                - (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group0(), 0, 1, 2, 1))
                + (swizzle!(self.group2(), 1, 2, 0, 1) * swizzle!(other.group1(), 2, 0, 1, 1))
                + (swizzle!(self.group3(), 1, 2, 0, 1) * swizzle!(other.group0(), 2, 0, 1, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group0()[2]) - (self.group1()[0] * other.group0()[3])
                    + (self.group1()[1] * other.group1()[2])
                    + (self.group2()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group0()[0]) - (self.group1()[1] * other.group0()[3])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group2()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[2] * other.group1()[3]) + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[2] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      122      157        0
    //    simd3        0        1        0
    //    simd4       44       45        0
    // Totals...
    // yes simd      166      203        0
    //  no simd      298      340        0
    fn sandwich(self, other: Line) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) - (other.group0()[0] * self.group2()[3])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0]) - (other.group0()[1] * self.group2()[3])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) - (other.group0()[2] * self.group2()[3])),
                ((self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[2])
                    + (other.group0()[0] * self.group1()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1])
                    - (other.group1()[0] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0]) + (other.group0()[0] * self.group1()[2])
                    - (other.group0()[2] * self.group1()[0])
                    - (other.group1()[1] * self.group2()[3])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) - (other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0])
                    - (other.group1()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group3()[0])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group3()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[1])
                    + (other.group1()[0] * self.group1()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[1] * self.group3()[2])
                    + (other.group1()[2] * self.group1()[1])
                    - (other.group1()[2] * self.group3()[1])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group3()[3]) - (other.group0()[2] * self.group2()[0]) + (other.group1()[0] * self.group1()[2])
                    - (other.group1()[0] * self.group3()[2])
                    + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group1()[0])
                    + (other.group1()[2] * self.group3()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0])
                    - (other.group0()[2] * self.group3()[3])
                    - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[0] * self.group3()[1])
                    + (other.group1()[1] * self.group1()[0])
                    - (other.group1()[1] * self.group3()[0])
                    + (other.group1()[2] * self.group1()[3])),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1]) + (other.group0()[1] * self.group3()[2])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0]) + (other.group0()[2] * self.group3()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) + (other.group0()[0] * self.group3()[1])),
                ((other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2]) + (other.group1()[1] * self.group1()[1]) - (other.group1()[1] * self.group3()[1])
                    + (other.group1()[2] * self.group1()[2])
                    - (other.group1()[2] * self.group3()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[0]]) * swizzle!(self.group2(), 3, 3, 3, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       94      124        0
    //    simd3        0        1        0
    //    simd4       60       61        0
    // Totals...
    // yes simd      154      186        0
    //  no simd      334      371        0
    fn sandwich(self, other: Motor) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group0()[3])),
                (-(self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group0()[3])),
                ((self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[2])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([0.0, 0.0, 0.0, ((self.group3()[2] * other.group0()[2]) * -1.0)])
                - (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group2()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[2], self.group0()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))
                - (Simd32x4::from([self.group1()[0], self.group1()[0], self.group1()[1], self.group3()[0]]) * swizzle!(other.group0(), 3, 2, 0, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[1], self.group1()[2], self.group3()[1]]) * swizzle!(other.group0(), 1, 3, 3, 1))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[2]]) * swizzle!(other.group1(), 0, 1, 2, 2))
                + (swizzle!(self.group1(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(self.group1()[0] * other.group1()[3]) + (self.group1()[1] * other.group1()[2]) - (self.group1()[2] * other.group1()[1])
                    + (self.group1()[3] * other.group1()[0])
                    - (self.group2()[2] * other.group0()[1])
                    + (self.group3()[0] * other.group1()[3])
                    - (self.group3()[1] * other.group1()[2])
                    + (self.group3()[2] * other.group1()[1])
                    - (self.group3()[3] * other.group0()[0])),
                (-(self.group1()[0] * other.group1()[2]) - (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group1()[3] * other.group1()[1])
                    - (self.group2()[1] * other.group0()[3])
                    + (self.group3()[0] * other.group1()[2])
                    + (self.group3()[1] * other.group1()[3])
                    - (self.group3()[2] * other.group1()[0])
                    - (self.group3()[3] * other.group0()[1])),
                ((self.group1()[0] * other.group1()[1]) - (self.group1()[1] * other.group1()[0]) - (self.group1()[2] * other.group1()[3]) + (self.group1()[3] * other.group1()[2])
                    - (self.group2()[2] * other.group0()[3])
                    - (self.group3()[0] * other.group1()[1])
                    + (self.group3()[1] * other.group1()[0])
                    + (self.group3()[2] * other.group1()[3])
                    - (self.group3()[3] * other.group0()[2])),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (swizzle!(self.group2(), 0, 0, 1, 3) * swizzle!(other.group0(), 3, 2, 0, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((self.group2()[2] * other.group0()[2]) - (self.group3()[2] * other.group1()[2]) - (self.group3()[3] * other.group0()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group1()[3]]) * other.group1())
                + (Simd32x4::from([self.group3()[0], self.group3()[0], self.group3()[1], self.group2()[0]]) * swizzle!(other.group0(), 3, 2, 0, 0))
                + (Simd32x4::from([self.group3()[2], self.group3()[1], self.group3()[2], self.group2()[1]]) * swizzle!(other.group0(), 1, 3, 3, 1))
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]) * swizzle!(self.group1(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[1]]) * swizzle!(self.group3(), 1, 2, 0, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for AntiDipoleInversion {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      270      325        0
    //    simd2        8        8        0
    //    simd3       98      103        0
    //    simd4       79       80        0
    // Totals...
    // yes simd      455      516        0
    //  no simd      896      970        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                ((self.group0()[0] * other.group8()[0])
                    + (self.group0()[1] * other.group8()[1])
                    + (self.group0()[2] * other.group8()[2])
                    + (other.group7()[0] * self.group2()[0])
                    + (other.group7()[1] * self.group2()[1])
                    + (other.group7()[2] * self.group2()[2])
                    + (self.group1()[0] * other.group6()[0])
                    + (self.group1()[1] * other.group6()[1])
                    + (self.group1()[2] * other.group6()[2])
                    - (self.group2()[3] * other[e1])
                    - (self.group3()[3] * other.group1()[3])),
                (-(self.group0()[0] * other.group3()[0])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group3()[2])
                    - (other.group4()[0] * self.group2()[0])
                    - (other.group4()[1] * self.group2()[1])
                    - (other.group4()[2] * self.group2()[2])
                    - (other.group5()[0] * self.group1()[0])
                    - (other.group5()[1] * self.group1()[1])
                    - (other.group5()[2] * self.group1()[2])
                    + (self.group2()[3] * other.group9()[3])
                    + (self.group3()[3] * other[e45])),
            ]) - (Simd32x2::from(self.group1()[3]) * Simd32x2::from([other.group6()[3], other.group3()[3]]))
                + (Simd32x2::from(self.group3()[0]) * Simd32x2::from([other.group1()[0], other.group9()[0]]))
                + (Simd32x2::from(self.group3()[1]) * Simd32x2::from([other.group1()[1], other.group9()[1]]))
                + (Simd32x2::from(self.group3()[2]) * Simd32x2::from([other.group1()[2], other.group9()[2]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group9()[3]) - (self.group0()[1] * other.group3()[2]) - (other.group4()[1] * self.group2()[2])
                    + (other.group4()[2] * self.group2()[1])
                    + (other.group5()[1] * self.group3()[2])
                    + (self.group1()[1] * other.group9()[2])
                    - (self.group2()[0] * other[e45])
                    + (self.group2()[3] * other.group3()[0])),
                ((self.group0()[1] * other.group9()[3]) - (self.group0()[2] * other.group3()[0]) + (other.group4()[0] * self.group2()[2]) - (other.group4()[2] * self.group2()[0])
                    + (other.group5()[2] * self.group3()[0])
                    + (self.group1()[2] * other.group9()[0])
                    - (self.group2()[1] * other[e45])
                    + (self.group2()[3] * other.group3()[1])),
                (-(self.group0()[0] * other.group3()[1]) + (self.group0()[2] * other.group9()[3]) - (other.group4()[0] * self.group2()[1])
                    + (other.group4()[1] * self.group2()[0])
                    + (other.group5()[0] * self.group3()[1])
                    + (self.group1()[0] * other.group9()[1])
                    - (self.group2()[2] * other[e45])
                    + (self.group2()[3] * other.group3()[2])),
                (-(self.group0()[0] * other.group5()[0])
                    - (self.group0()[0] * other.group9()[0])
                    - (self.group0()[1] * other.group5()[1])
                    - (self.group0()[1] * other.group9()[1])
                    - (self.group0()[2] * other.group5()[2])
                    - (self.group0()[2] * other.group9()[2])
                    - (other.group4()[2] * self.group1()[2])
                    - (other.group4()[2] * self.group3()[2])),
            ]) + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[3]]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other[e45]]))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group3(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], other.group4()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group4()[1]]) * swizzle!(self.group3(), 1, 2, 0, 1))
                - (Simd32x4::from([other.group3()[3], other.group9()[2], other.group9()[0], other.group4()[0]]) * swizzle!(self.group1(), 0, 0, 1, 0))
                - (Simd32x4::from([other.group9()[1], other.group3()[3], other.group3()[3], other.group4()[1]]) * swizzle!(self.group1(), 2, 1, 2, 1))),
            // e5
            ((other.group0()[0] * self.group3()[3])
                - (other.group5()[0] * self.group2()[0])
                - (other.group5()[1] * self.group2()[1])
                - (other.group5()[2] * self.group2()[2])
                - (self.group1()[0] * other.group3()[0])
                - (self.group1()[1] * other.group3()[1])
                - (self.group1()[2] * other.group3()[2])
                - (self.group1()[3] * other.group9()[3])
                + (self.group2()[0] * other.group9()[0])
                + (self.group2()[1] * other.group9()[1])
                + (self.group2()[2] * other.group9()[2])
                + (self.group3()[0] * other.group3()[0])
                + (self.group3()[1] * other.group3()[1])
                + (self.group3()[2] * other.group3()[2])
                - (self.group3()[3] * other.group3()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[0]) + (other.group8()[1] * self.group3()[2]) + (other.group8()[2] * self.group1()[1])
                    - (self.group3()[3] * other.group6()[0])),
                (-(other.group0()[1] * self.group2()[1]) + (other.group8()[1] * self.group1()[3]) + (other.group8()[2] * self.group3()[0])
                    - (self.group3()[3] * other.group6()[1])),
                (-(other.group0()[1] * self.group2()[2]) + (other.group8()[0] * self.group3()[1]) + (other.group8()[2] * self.group1()[3])
                    - (self.group3()[3] * other.group6()[2])),
                (-(self.group0()[0] * other.group8()[0]) - (self.group0()[1] * other.group8()[1]) - (self.group0()[2] * other.group8()[2])
                    + (other.group7()[2] * self.group2()[2])),
            ]) - (Simd32x4::from(self.group3()[3]) * other.group1())
                + (Simd32x4::from(other[e1]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[3]]))
                + (Simd32x4::from([other.group8()[0], other.group8()[0], other.group8()[1], other.group0()[1]]) * swizzle!(self.group1(), 3, 2, 0, 3))
                - (Simd32x4::from([other.group8()[1], other.group8()[2], other.group8()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group8()[2], other.group8()[0], other.group8()[1], other.group6()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group2()[0], self.group2()[0], self.group2()[1], self.group3()[1]]) * swizzle!(other.group6(), 3, 2, 0, 1))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[2]]) * swizzle!(other.group1(), 1, 2, 0, 2))
                - (Simd32x4::from([self.group2()[2], self.group2()[1], self.group2()[2], self.group3()[2]]) * swizzle!(other.group6(), 1, 3, 3, 2))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group7()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group7()[1]]) * swizzle!(self.group2(), 1, 2, 0, 1))
                - (Simd32x4::from([other[e1], other[e1], other[e1], other.group1()[1]]) * swizzle!(self.group1(), 0, 1, 2, 1))),
            // e41, e42, e43
            (-(Simd32x3::from(other.group0()[1]) * self.group0())
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group6()[3], other.group1()[2], other.group6()[1]]))
                + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group6()[2], other.group6()[3], other.group1()[0]]))
                + (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], other.group6()[0], other.group6()[3]]))
                + (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group7(), 2, 0, 1))
                - (Simd32x3::from([self.group1()[2], self.group1()[0], self.group3()[1]]) * swizzle!(other.group7(), 1, 2, 0))
                - (Simd32x3::from([self.group1()[3], self.group1()[3], self.group1()[1]]) * swizzle!(other.group7(), 0, 1, 0))
                + (Simd32x3::from([self.group3()[1], self.group3()[2], self.group3()[0]]) * swizzle!(other.group7(), 2, 0, 1))
                - (Simd32x3::from([self.group3()[2], self.group3()[0], self.group1()[3]]) * swizzle!(other.group7(), 1, 2, 2))
                - (Simd32x3::from([other.group1()[2], other.group6()[2], other.group1()[1]]) * swizzle!(self.group0(), 1, 0, 0))
                - (Simd32x3::from([other.group6()[1], other.group1()[0], other.group6()[0]]) * swizzle!(self.group0(), 2, 2, 1))),
            // e23, e31, e12
            (Simd32x3::from([
                ((self.group1()[1] * other.group6()[2]) - (self.group1()[2] * other.group6()[1]) + (self.group3()[1] * other.group1()[2]) - (self.group3()[2] * other.group1()[1])),
                (-(self.group1()[0] * other.group6()[2]) + (self.group1()[2] * other.group6()[0]) - (self.group3()[0] * other.group1()[2])
                    + (self.group3()[2] * other.group1()[0])),
                ((self.group1()[0] * other.group6()[1]) - (self.group1()[1] * other.group6()[0]) + (self.group3()[0] * other.group1()[1]) - (self.group3()[1] * other.group1()[0])),
            ]) - (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(self.group2()[3]) * other.group8())
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                - (Simd32x3::from(other.group6()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                - (Simd32x3::from([other.group8()[1], other[e1], other[e1]]) * swizzle!(self.group0(), 2, 1, 2))
                + (Simd32x3::from([self.group2()[1], self.group2()[2], self.group2()[0]]) * swizzle!(other.group7(), 2, 0, 1))
                - (Simd32x3::from([self.group2()[2], self.group2()[0], self.group3()[3]]) * swizzle!(other.group7(), 1, 2, 2))
                - (Simd32x3::from([self.group3()[3], self.group3()[3], self.group2()[1]]) * swizzle!(other.group7(), 0, 1, 0))
                - (Simd32x3::from([other[e1], other.group8()[2], other.group8()[0]]) * swizzle!(self.group0(), 0, 0, 1))
                + (swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group8(), 2, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group3()[1]) + (other.group4()[0] * self.group3()[3])
                    - (other.group4()[2] * self.group2()[1])
                    - (other.group5()[2] * self.group1()[1])
                    - (self.group1()[3] * other.group9()[0])),
                ((self.group0()[0] * other.group3()[2]) - (other.group4()[0] * self.group2()[2]) + (other.group4()[1] * self.group3()[3])
                    - (other.group5()[0] * self.group1()[2])
                    - (self.group1()[3] * other.group9()[1])),
                ((self.group0()[1] * other.group3()[0]) - (other.group4()[1] * self.group2()[0]) + (other.group4()[2] * self.group3()[3])
                    - (other.group5()[1] * self.group1()[0])
                    - (self.group1()[3] * other.group9()[2])),
                (-(self.group0()[1] * other.group3()[1]) - (self.group0()[2] * other.group3()[2]) - (other.group5()[2] * self.group3()[2])
                    + (self.group2()[3] * other.group9()[3])
                    - (self.group3()[3] * other[e45])),
            ]) + (Simd32x4::from(other.group0()[0]) * self.group1())
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group9(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group3(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group4()[1], other.group4()[2], other.group4()[0], other.group4()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group5()[1], other.group5()[2], other.group5()[0], other.group9()[1]]) * swizzle!(self.group1(), 2, 0, 1, 1))
                + (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[2]]) * swizzle!(other.group9(), 2, 0, 1, 2))
                + (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group4()[2]]) * swizzle!(self.group2(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group3()[3], other.group9()[2], other.group9()[0], other.group5()[0]]) * swizzle!(self.group3(), 0, 0, 1, 0))
                - (Simd32x4::from([other.group9()[1], other.group3()[3], other.group3()[3], other.group5()[1]]) * swizzle!(self.group3(), 2, 1, 2, 1))
                + (Simd32x4::from([other[e45], other[e45], other[e45], other.group4()[1]]) * swizzle!(self.group2(), 0, 1, 2, 1))),
            // e423, e431, e412
            ((Simd32x3::from(other.group0()[0]) * self.group0())
                + (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                + (Simd32x3::from(self.group2()[3]) * other.group5())
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from([other.group5()[1], other.group9()[2], other.group9()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                - (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group4(), 2, 0, 1))
                + (Simd32x3::from([self.group1()[2], self.group1()[0], self.group3()[1]]) * swizzle!(other.group4(), 1, 2, 0))
                + (Simd32x3::from([self.group1()[3], self.group1()[3], self.group1()[1]]) * swizzle!(other.group4(), 0, 1, 0))
                - (Simd32x3::from([self.group3()[1], self.group3()[2], self.group3()[0]]) * swizzle!(other.group4(), 2, 0, 1))
                + (Simd32x3::from([self.group3()[2], self.group3()[0], self.group1()[3]]) * swizzle!(other.group4(), 1, 2, 2))
                + (Simd32x3::from([other.group3()[3], other.group5()[2], other.group5()[0]]) * swizzle!(self.group0(), 0, 0, 1))
                + (Simd32x3::from([other.group9()[1], other.group3()[3], other.group3()[3]]) * swizzle!(self.group0(), 2, 1, 2))
                - (Simd32x3::from([other.group9()[2], other.group9()[0], other.group9()[1]]) * swizzle!(self.group0(), 1, 2, 0))
                - (swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group5(), 2, 0, 1))),
            // e235, e315, e125
            (Simd32x3::from([
                ((self.group1()[2] * other.group3()[1]) + (self.group2()[1] * other.group9()[2]) - (self.group2()[2] * other.group9()[1]) + (self.group3()[1] * other.group3()[2])),
                ((self.group1()[0] * other.group3()[2]) - (self.group2()[0] * other.group9()[2]) + (self.group2()[2] * other.group9()[0]) + (self.group3()[2] * other.group3()[0])),
                ((self.group1()[1] * other.group3()[0]) + (self.group2()[0] * other.group9()[1]) - (self.group2()[1] * other.group9()[0]) + (self.group3()[0] * other.group3()[1])),
            ]) + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                - (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                - (Simd32x3::from(other.group3()[0]) * Simd32x3::from([self.group1()[3], self.group1()[2], self.group3()[1]]))
                - (Simd32x3::from(other.group3()[1]) * Simd32x3::from([self.group3()[2], self.group1()[3], self.group1()[0]]))
                - (Simd32x3::from(other.group3()[2]) * Simd32x3::from([self.group1()[1], self.group3()[0], self.group1()[3]]))
                - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                + (Simd32x3::from(other.group9()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(other.group9()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                - (Simd32x3::from([self.group2()[1], self.group2()[2], self.group2()[0]]) * swizzle!(other.group5(), 2, 0, 1))
                + (Simd32x3::from([self.group2()[2], self.group2()[0], self.group3()[3]]) * swizzle!(other.group5(), 1, 2, 2))
                + (Simd32x3::from([self.group3()[3], self.group3()[3], self.group2()[1]]) * swizzle!(other.group5(), 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group3()[0]) - (self.group0()[1] * other.group8()[2]) + (self.group0()[2] * other.group8()[1])
                    - (other.group7()[1] * self.group2()[2])
                    - (self.group1()[1] * other.group1()[2])
                    - (self.group2()[0] * other.group1()[3])),
                ((other.group0()[1] * self.group3()[1]) + (self.group0()[0] * other.group8()[2])
                    - (self.group0()[2] * other.group8()[0])
                    - (other.group7()[2] * self.group2()[0])
                    - (self.group1()[2] * other.group1()[0])
                    - (self.group2()[1] * other.group1()[3])),
                ((other.group0()[1] * self.group3()[2]) - (self.group0()[0] * other.group8()[1]) + (self.group0()[1] * other.group8()[0])
                    - (other.group7()[0] * self.group2()[1])
                    - (self.group1()[0] * other.group1()[1])
                    - (self.group2()[2] * other.group1()[3])),
                (-(other.group8()[1] * self.group3()[1]) - (other.group8()[2] * self.group3()[2])
                    + (self.group2()[1] * other.group1()[1])
                    + (self.group2()[2] * other.group1()[2])
                    + (self.group2()[2] * other.group6()[2])
                    - (self.group3()[3] * other.group6()[3])),
            ]) - (Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group0()[1]]))
                + (Simd32x4::from(other[e1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (Simd32x4::from([other.group7()[2], other.group7()[0], other.group7()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group8()[0], other.group8()[1], other.group8()[2], other.group6()[0]]) * swizzle!(self.group2(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[1]]) * swizzle!(other.group6(), 1, 2, 0, 1))
                + (Simd32x4::from([other.group1()[1], other.group6()[3], other.group6()[3], other.group8()[1]]) * swizzle!(self.group1(), 2, 1, 2, 1))
                + (Simd32x4::from([other.group6()[0], other.group6()[1], other.group6()[2], other.group8()[2]]) * swizzle!(self.group1(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group8()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group6()[3], other.group1()[2], other.group1()[0], other.group8()[0]]) * swizzle!(self.group1(), 0, 0, 1, 0))),
            // e1234
            (-(other.group0()[1] * self.group2()[3]) - (self.group0()[0] * other.group1()[0]) + (self.group0()[0] * other.group6()[0]) - (self.group0()[1] * other.group1()[1])
                + (self.group0()[1] * other.group6()[1])
                - (self.group0()[2] * other.group1()[2])
                + (self.group0()[2] * other.group6()[2])
                + (other.group7()[0] * self.group1()[0])
                + (other.group7()[0] * self.group3()[0])
                + (other.group7()[1] * self.group1()[1])
                + (other.group7()[1] * self.group3()[1])
                + (other.group7()[2] * self.group1()[2])
                + (other.group7()[2] * self.group3()[2])
                - (self.group1()[3] * other.group1()[3])
                + (self.group2()[3] * other.group6()[3])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       52       93        0
    //    simd3        0        1        0
    //    simd4       54       55        0
    // Totals...
    // yes simd      106      149        0
    //  no simd      268      316        0
    fn sandwich(self, other: Plane) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) * -1.0),
                ((self.group0()[2] * other.group0()[0]) * -1.0),
                ((self.group0()[0] * other.group0()[1]) * -1.0),
                ((self.group3()[1] * other.group0()[1]) + (self.group3()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[0]]) * swizzle!(other.group0(), 0, 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(self.group1()[3] * other.group0()[0]) - (self.group3()[2] * other.group0()[1])),
                (-(self.group1()[3] * other.group0()[1]) - (self.group3()[0] * other.group0()[2])),
                (-(self.group1()[3] * other.group0()[2]) - (self.group3()[1] * other.group0()[0])),
                ((self.group1()[2] * other.group0()[2]) + (self.group2()[3] * other.group0()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[1]]) * swizzle!(other.group0(), 2, 0, 1, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group3()[0] * other.group0()[3]) - (self.group3()[3] * other.group0()[0])),
                (-(self.group3()[1] * other.group0()[3]) - (self.group3()[3] * other.group0()[1])),
                (-(self.group3()[2] * other.group0()[3]) - (self.group3()[3] * other.group0()[2])),
                (self.group2()[2] * other.group0()[2]),
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                + (swizzle!(self.group2(), 1, 2, 0, 1) * swizzle!(other.group0(), 2, 0, 1, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2])),
                ((self.group0()[1] * other.group0()[3]) + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       75      111        0
    //    simd3        0        1        0
    //    simd4       52       53        0
    // Totals...
    // yes simd      127      165        0
    //  no simd      283      326        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(self.group1()[0] * other.group0()[3]) - (self.group3()[0] * other.group0()[3])),
                (-(self.group1()[1] * other.group0()[3]) - (self.group3()[1] * other.group0()[3])),
                (-(self.group1()[2] * other.group0()[3]) - (self.group3()[2] * other.group0()[3])),
                (-(self.group2()[3] * other[e2]) + (self.group3()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(self.group0()[0] * other[e2]) + (self.group3()[1] * other.group0()[2])),
                (-(self.group0()[1] * other[e2]) + (self.group3()[2] * other.group0()[0])),
                (-(self.group0()[2] * other[e2]) + (self.group3()[0] * other.group0()[1])),
                ((self.group2()[3] * other[e2]) - (self.group3()[3] * other.group0()[3])),
            ]) - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[2]]) * swizzle!(other.group0(), 1, 2, 0, 2))
                - (swizzle!(self.group1(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group2()[1] * other.group0()[2]) + (self.group3()[0] * other[e2])),
                ((self.group2()[2] * other.group0()[0]) + (self.group3()[1] * other[e2])),
                ((self.group2()[0] * other.group0()[1]) + (self.group3()[2] * other[e2])),
                ((self.group0()[2] * other.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group0()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))
                - (Simd32x4::from([other[e2], other[e2], other[e2], other.group0()[3]]) * self.group1())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group1()[1] * other.group0()[2]) - (self.group2()[0] * other.group0()[3])),
                (-(self.group1()[2] * other.group0()[0]) - (self.group2()[1] * other.group0()[3])),
                (-(self.group1()[0] * other.group0()[1]) - (self.group2()[2] * other.group0()[3])),
                ((self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other[e2]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       41       60        0
    //    simd3        0        2        0
    //    simd4       42       46        0
    // Totals...
    // yes simd       83      108        0
    //  no simd      209      250        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other[scalar]) * self.group0()),
            // e415, e425, e435, e321
            (Simd32x4::from(other[scalar]) * self.group1()),
            // e235, e315, e125, e4
            (Simd32x4::from(other[scalar]) * self.group2()),
            // e1, e2, e3, e5
            (Simd32x4::from(other[scalar]) * self.group3()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       47       91        0
    //    simd3        0        1        0
    //    simd4       59       60        0
    // Totals...
    // yes simd      106      152        0
    //  no simd      283      334        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) * -1.0),
                ((self.group0()[2] * other.group0()[0]) * -1.0),
                ((self.group0()[0] * other.group0()[1]) * -1.0),
                (self.group3()[2] * other.group0()[2]),
            ]) + (Simd32x4::from(other[e4315]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[0]]) * swizzle!(other.group0(), 0, 1, 2, 0))
                + (Simd32x4::from([other[e4315], other[e4315], other[e4315], other.group0()[1]]) * swizzle!(self.group3(), 0, 1, 2, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group1()[3] * other.group0()[0]) * -1.0),
                ((self.group1()[3] * other.group0()[1]) * -1.0),
                ((self.group1()[3] * other.group0()[2]) * -1.0),
                (self.group1()[2] * other.group0()[2]),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[1]]) * swizzle!(other.group0(), 2, 0, 1, 1))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other[e4315]]) * swizzle!(self.group3(), 2, 0, 1, 3))
                + (Simd32x4::from([other[e4315], other[e4315], other[e4315], other.group0()[3]]) * self.group2())),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group3()[0] * other.group0()[3]) - (self.group3()[3] * other.group0()[0])),
                (-(self.group3()[1] * other.group0()[3]) - (self.group3()[3] * other.group0()[1])),
                (-(self.group3()[2] * other.group0()[3]) - (self.group3()[3] * other.group0()[2])),
                (self.group2()[2] * other.group0()[2]),
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                + (swizzle!(self.group2(), 1, 2, 0, 1) * swizzle!(other.group0(), 2, 0, 1, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group2()[0] * other[e4315])),
                ((self.group0()[1] * other.group0()[3]) - (self.group2()[1] * other[e4315])),
                ((self.group0()[2] * other.group0()[3]) - (self.group2()[2] * other[e4315])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other[e4315]]) * swizzle!(self.group1(), 1, 2, 0, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      108      143        0
    //    simd3        0        1        0
    //    simd4       85       86        0
    // Totals...
    // yes simd      193      230        0
    //  no simd      448      490        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3])
                    - (self.group1()[0] * other.group3()[3])
                    - (self.group1()[2] * other.group0()[1])
                    - (self.group1()[3] * other.group0()[0])
                    - (self.group3()[0] * other.group3()[3])
                    - (self.group3()[2] * other.group0()[1])),
                (-(self.group0()[1] * other.group0()[3])
                    - (self.group1()[0] * other.group0()[2])
                    - (self.group1()[1] * other.group3()[3])
                    - (self.group1()[3] * other.group0()[1])
                    - (self.group3()[0] * other.group0()[2])
                    - (self.group3()[1] * other.group3()[3])),
                (-(self.group0()[2] * other.group0()[3])
                    - (self.group1()[1] * other.group0()[0])
                    - (self.group1()[2] * other.group3()[3])
                    - (self.group1()[3] * other.group0()[2])
                    - (self.group3()[1] * other.group0()[0])
                    - (self.group3()[2] * other.group3()[3])),
                ((self.group1()[1] * other.group1()[1])
                    + (self.group1()[2] * other.group1()[2])
                    + (self.group2()[2] * other.group0()[2])
                    + (self.group3()[0] * other.group3()[0])
                    + (self.group3()[1] * other.group3()[1])
                    + (self.group3()[2] * other.group3()[2])),
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group2()[0]]))
                + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group2()[1]]))
                + (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group2()[2]]))
                - (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[3]]) * swizzle!(other.group3(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[3]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[1]]) * swizzle!(other.group0(), 2, 0, 1, 1))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[0]]) * swizzle!(self.group2(), 3, 3, 3, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(self.group2()[2] * other.group0()[1]) + (self.group3()[1] * other.group3()[2])),
                (-(self.group2()[0] * other.group0()[2]) + (self.group3()[2] * other.group3()[0])),
                (-(self.group2()[1] * other.group0()[0]) + (self.group3()[0] * other.group3()[1])),
                ((self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2])),
            ]) - (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))
                - (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 3, 2, 0, 0))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group2()[3]]) * swizzle!(other.group2(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[2], self.group0()[1]]) * swizzle!(other.group2(), 1, 3, 3, 1))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[2]]) * swizzle!(other.group2(), 0, 1, 2, 2))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]) * swizzle!(self.group3(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group3()[0]]) * swizzle!(self.group1(), 0, 0, 1, 0))
                - (Simd32x4::from([other.group1()[1], other.group0()[3], other.group0()[3], other.group3()[1]]) * swizzle!(self.group1(), 2, 1, 2, 1))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[3]]) * swizzle!(self.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group1()[0]]) * swizzle!(self.group3(), 0, 0, 1, 0))
                - (Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group1()[1]]) * swizzle!(self.group3(), 2, 1, 2, 1))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group3(), 0, 1, 2, 2))
                + (swizzle!(self.group2(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(self.group1()[2] * other.group2()[1])
                    - (self.group2()[0] * other.group1()[3])
                    - (self.group2()[2] * other.group1()[1])
                    - (self.group3()[1] * other.group2()[2])
                    - (self.group3()[3] * other.group1()[0])),
                (-(self.group1()[1] * other.group2()[3])
                    - (self.group2()[1] * other.group0()[3])
                    - (self.group2()[1] * other.group1()[3])
                    - (self.group3()[2] * other.group2()[0])
                    - (self.group3()[3] * other.group1()[1])),
                (-(self.group1()[2] * other.group2()[3])
                    - (self.group2()[2] * other.group0()[3])
                    - (self.group2()[2] * other.group1()[3])
                    - (self.group3()[0] * other.group2()[1])
                    - (self.group3()[3] * other.group1()[2])),
                ((self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group1()[2]) - (self.group0()[2] * other.group3()[2])
                    + (self.group1()[2] * other.group0()[2])
                    + (self.group3()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group0()[1]]) * swizzle!(other.group3(), 0, 1, 2, 1))
                - (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group0()[3]]) * swizzle!(self.group2(), 0, 0, 1, 3))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group1(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group2()[1], other.group2()[3], other.group2()[3], other.group0()[1]]) * swizzle!(self.group3(), 2, 1, 2, 1))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group2()[3], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group3(), 0, 0, 1, 0))
                - (Simd32x4::from([other.group2()[3], other.group2()[2], other.group2()[0], other.group3()[3]]) * swizzle!(self.group1(), 0, 0, 1, 3))
                + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[3]]) * swizzle!(self.group2(), 1, 2, 0, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group1()[1] * other.group3()[2]) - (self.group2()[0] * other.group3()[3]) + (self.group3()[0] * other.group0()[3])),
                (-(self.group1()[2] * other.group3()[0]) - (self.group2()[1] * other.group3()[3]) + (self.group3()[1] * other.group0()[3])),
                (-(self.group1()[0] * other.group3()[1]) - (self.group2()[2] * other.group3()[3]) + (self.group3()[2] * other.group0()[3])),
                ((self.group2()[1] * other.group3()[1]) + (self.group2()[2] * other.group3()[2]) - (self.group3()[3] * other.group1()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 3, 2, 0, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group2(), 1, 3, 3, 1))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group3()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[2]]) * swizzle!(other.group1(), 1, 2, 0, 2))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[2]]) * swizzle!(self.group3(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group3()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[1]]) * swizzle!(self.group3(), 1, 2, 0, 1))
                + (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group2()[2]]) * swizzle!(self.group1(), 0, 0, 1, 2))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group2()[3]]) * swizzle!(self.group1(), 2, 1, 2, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      100      138        0
    //    simd3        0        1        0
    //    simd4       87       88        0
    // Totals...
    // yes simd      187      227        0
    //  no simd      448      493        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group3()[2])
                    + (self.group0()[2] * other.group1()[1])
                    + (self.group1()[2] * other.group0()[1])
                    + (self.group1()[3] * other.group0()[0])
                    + (self.group2()[3] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[3]) + (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group3()[0])
                    + (self.group1()[0] * other.group0()[2])
                    + (self.group1()[3] * other.group0()[1])
                    + (self.group2()[3] * other.group1()[1])),
                (-(self.group0()[0] * other.group3()[1])
                    + (self.group0()[1] * other.group1()[0])
                    + (self.group0()[2] * other.group0()[3])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group1()[1] * other.group0()[0])
                    + (self.group1()[3] * other.group0()[2])
                    + (self.group2()[3] * other.group1()[2])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group3(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[0]]) * swizzle!(other.group3(), 0, 1, 2, 0))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group3()[2]]) * swizzle!(self.group3(), 2, 1, 2, 2))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))
                + (Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group3()[1]]) * swizzle!(self.group3(), 0, 0, 1, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group2()[1]) - (self.group1()[3] * other.group3()[0]) - (self.group2()[1] * other.group0()[2])),
                ((self.group0()[0] * other.group2()[2]) - (self.group1()[3] * other.group3()[1]) - (self.group2()[2] * other.group0()[0])),
                ((self.group0()[1] * other.group2()[0]) - (self.group1()[3] * other.group3()[2]) - (self.group2()[0] * other.group0()[1])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2]) - (self.group3()[3] * other.group2()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[3]]) * swizzle!(other.group3(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group1()[3]]) * other.group0())
                + (Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group0()[1]]) * swizzle!(self.group2(), 2, 1, 2, 1))
                + (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group3()[1]]) * swizzle!(self.group1(), 0, 0, 1, 1))
                + (Simd32x4::from([other.group1()[1], other.group0()[3], other.group0()[3], other.group3()[2]]) * swizzle!(self.group1(), 2, 1, 2, 2))
                - (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group1()[1]]) * swizzle!(self.group3(), 0, 0, 1, 1))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[2]]) * swizzle!(self.group2(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 0, 0, 1, 0))
                - (Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group1()[2]]) * swizzle!(self.group3(), 2, 1, 2, 2))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group2()[2] * other.group1()[1]) - (self.group3()[2] * other.group2()[1])),
                ((self.group2()[2] * other.group3()[0]) - (self.group3()[3] * other.group3()[1])),
                ((self.group2()[2] * other.group0()[3]) - (self.group3()[3] * other.group3()[2])),
                (-(self.group1()[2] * other.group2()[2]) + (self.group3()[3] * other.group0()[3])),
            ]) - (Simd32x4::from(self.group2()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group1()[0]]))
                - (Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group1()[1]]))
                - (Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group1()[2]]))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[3], self.group3()[1], self.group3()[2], self.group1()[3]]) * swizzle!(other.group3(), 0, 3, 3, 3))
                + (Simd32x4::from([other.group0()[3], other.group1()[2], other.group3()[1], other.group3()[1]]) * swizzle!(self.group2(), 0, 0, 0, 1))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[2]]) * swizzle!(self.group3(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group3()[2], other.group0()[3], other.group1()[0], other.group3()[2]]) * swizzle!(self.group2(), 1, 1, 1, 2))
                - (Simd32x4::from([other.group3()[3], other.group2()[2], other.group2()[0], other.group1()[3]]) * swizzle!(self.group3(), 0, 0, 1, 3))
                - (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group2(), 0, 1, 2, 1))
                + (swizzle!(self.group3(), 1, 2, 0, 1) * swizzle!(other.group2(), 2, 0, 1, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) - (self.group0()[1] * other.group2()[2]) + (self.group1()[1] * other.group3()[2]) - (self.group2()[0] * other.group2()[3])
                    + (self.group2()[3] * other.group2()[0])
                    + (self.group3()[0] * other.group0()[3])
                    + (self.group3()[2] * other.group1()[1])),
                ((self.group0()[1] * other.group3()[3]) - (self.group0()[2] * other.group2()[0]) + (self.group1()[2] * other.group3()[0]) - (self.group2()[1] * other.group2()[3])
                    + (self.group2()[3] * other.group2()[1])
                    + (self.group3()[0] * other.group1()[2])
                    + (self.group3()[1] * other.group0()[3])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[2] * other.group3()[3]) + (self.group1()[0] * other.group3()[1])
                    - (self.group2()[2] * other.group2()[3])
                    + (self.group2()[3] * other.group2()[2])
                    + (self.group3()[1] * other.group1()[0])
                    + (self.group3()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group3()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])
                    - (self.group3()[1] * other.group0()[1])
                    - (self.group3()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[3]]) * other.group1())
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[2]]) * swizzle!(other.group0(), 1, 2, 0, 2))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group0()[0]]) * swizzle!(self.group1(), 0, 0, 1, 0))
                - (Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group0()[1]]) * swizzle!(self.group1(), 2, 1, 2, 1))
                + (swizzle!(self.group2(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (swizzle!(self.group3(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl InfixSandwich for AntiDualNum {}
impl Sandwich<AntiCircleRotor> for AntiDualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       44        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       15       48        0
    //  no simd       24       60        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[1] * other.group2()[3]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group2()[0]),
                (self.group0()[1] * other.group2()[1]),
                (self.group0()[1] * other.group2()[2]),
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[0] * other.group2()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group2()[0] * -1.0),
                (self.group0()[0] * other.group2()[1] * -1.0),
                (self.group0()[0] * other.group2()[2] * -1.0),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for AntiDualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       31        0
    //    simd4        6        9        0
    // Totals...
    // yes simd       13       40        0
    //  no simd       31       67        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) - (self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[0] * other.group3()[3]),
            ]),
            // e415, e425, e435, e321
            ((Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                + (Simd32x4::from(self.group0()[1]) * other.group1())),
            // e235, e315, e125, e5
            (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]])),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (self.group0()[1] * other.group3()[0]),
                (self.group0()[1] * other.group3()[1]),
                (self.group0()[1] * other.group3()[2]),
                ((self.group0()[0] * other.group1()[3]) * -1.0),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * other.group2())),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for AntiDualNum {
    type Output = AntiDualNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        let geometric_product = AntiDualNum::from_groups(/* e1234, scalar */ Simd32x2::from([
            ((other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
            (other.group0()[1] * self.group0()[1]),
        ]));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for AntiDualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       25        0
    //    simd4        2        6        0
    // Totals...
    // yes simd        8       31        0
    //  no simd       14       49        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * other.group0()),
            // e235, e315, e125, e4
            (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for AntiDualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       29        0
    //    simd4        4        8        0
    // Totals...
    // yes simd        9       37        0
    //  no simd       21       61        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self.group0()[0]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[3])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[0] * other.group0()[3] * -1.0),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for AntiDualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       37        0
    //    simd3        0        1        0
    //    simd4        1        2        0
    // Totals...
    // yes simd       14       40        0
    //  no simd       17       48        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group0()[0]) * other.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[2])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group1()[0]),
                (self.group0()[1] * other.group1()[1]),
                (self.group0()[1] * other.group1()[2]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0] * -1.0),
                (self.group0()[0] * other.group1()[1] * -1.0),
                (self.group0()[0] * other.group1()[2] * -1.0),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for AntiDualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       36        0
    //    simd4        3        6        0
    // Totals...
    // yes simd       12       42        0
    //  no simd       21       60        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[0] * other.group1()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group1()[0]),
                (self.group0()[1] * other.group1()[1]),
                (self.group0()[1] * other.group1()[2]),
                (self.group0()[0] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for AntiDualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1       21        0
    //    simd4        4        7        0
    // Totals...
    // yes simd        5       28        0
    //  no simd       17       49        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self.group0()[0]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3])]),
            // e235, e315, e125, e5
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group0()[3])]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for AntiDualNum {
    type Output = DualNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        3        0
    //    simd2        0        1        0
    // Totals...
    // yes simd        1        4        0
    //  no simd        1        5        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DualNum::from_groups(/* e4, e12345 */ (Simd32x2::from(other[e12345]) * self.group0()));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for AntiDualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       36        0
    //    simd3        1        2        0
    //    simd4        2        4        0
    // Totals...
    // yes simd       12       42        0
    //  no simd       20       58        0
    fn sandwich(self, other: Circle) -> Self::Output {
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])) + (Simd32x3::from(self.group0()[1]) * other.group0())),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3]),
            ]),
            // e235, e315, e125, e4
            (Simd32x4::from([
                (self.group0()[1] * other.group2()[0]),
                (self.group0()[1] * other.group2()[1]),
                (self.group0()[1] * other.group2()[2]),
                (self.group0()[0] * other.group1()[3]),
            ]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[0] * other.group2()[0]),
                (self.group0()[0] * other.group2()[1]),
                (self.group0()[0] * other.group2()[2]),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for AntiDualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       38        0
    //    simd4        4        5        0
    // Totals...
    // yes simd       12       43        0
    //  no simd       24       58        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[1] * other.group2()[3]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[1] * other.group2()[0]),
                (self.group0()[1] * other.group2()[1]),
                (self.group0()[1] * other.group2()[2]),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group2()[0]),
                (self.group0()[0] * other.group2()[1]),
                (self.group0()[0] * other.group2()[2]),
                (-(self.group0()[0] * other.group1()[3]) + (self.group0()[0] * other.group2()[3])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for AntiDualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       39        0
    //    simd3        1        2        0
    //    simd4        1        2        0
    // Totals...
    // yes simd       15       43        0
    //  no simd       20       53        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])) + (Simd32x3::from(self.group0()[1]) * other.group0())),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group2()[0]),
                (self.group0()[1] * other.group2()[1]),
                (self.group0()[1] * other.group2()[2]),
                (self.group0()[0] * other.group1()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group2()[0] * -1.0),
                (self.group0()[0] * other.group2()[1] * -1.0),
                (self.group0()[0] * other.group2()[2] * -1.0),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for AntiDualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       46        0
    //    simd4        4        5        0
    // Totals...
    // yes simd       19       51        0
    //  no simd       31       66        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[0] * other.group3()[3]),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (self.group0()[0] * other.group2()[0]),
                (self.group0()[0] * other.group2()[1]),
                (self.group0()[0] * other.group2()[2]),
                ((self.group0()[0] * other.group3()[3]) * -1.0),
            ]) + (Simd32x4::from(self.group0()[1]) * other.group1())),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group2()[0]),
                (self.group0()[1] * other.group2()[1]),
                (self.group0()[1] * other.group2()[2]),
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group2()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group3()[0])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group3()[1])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group3()[2])),
                (self.group0()[1] * other.group3()[3]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for AntiDualNum {
    type Output = DualNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        let geometric_product = DualNum::from_groups(/* e4, e12345 */ Simd32x2::from([
            ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
            (self.group0()[1] * other.group0()[1]),
        ]));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for AntiDualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       28        0
    //    simd4        1        4        0
    // Totals...
    // yes simd       11       32        0
    //  no simd       14       44        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * other.group0()),
            // e15, e25, e35, e1234
            (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * other.group0()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for AntiDualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       31        0
    //    simd4        3        6        0
    // Totals...
    // yes simd       12       37        0
    //  no simd       21       55        0
    fn sandwich(self, other: Flector) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self.group0()[0]) * other.group1()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (-(self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * other.group0()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group1()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for AntiDualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       34        0
    //    simd3        0        1        0
    //    simd4        2        3        0
    // Totals...
    // yes simd       11       38        0
    //  no simd       17       49        0
    fn sandwich(self, other: Line) -> Self::Output {
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self.group0()[0]) * other.group0()),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[2])),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (self.group0()[1] * other.group1()[0]),
                (self.group0()[1] * other.group1()[1]),
                (self.group0()[1] * other.group1()[2]),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for AntiDualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       28        0
    //    simd4        4        7        0
    // Totals...
    // yes simd        9       35        0
    //  no simd       21       56        0
    fn sandwich(self, other: Motor) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[0] * other.group1()[3]),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from(self.group0()[1]) * other.group1()),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for AntiDualNum {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       47        0
    //    simd2        2        4        0
    //    simd3       10       18        0
    //    simd4        5        6        0
    // Totals...
    // yes simd       30       75        0
    //  no simd       67      133        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group9()[3], other[e1]])) + (Simd32x2::from(self.group0()[1]) * other.group0())),
            // e1, e2, e3, e4
            (Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[0] * other.group6()[3]) * -1.0)])
                + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group8()[0], other.group8()[1], other.group8()[2], other.group0()[1]]))
                + (Simd32x4::from(self.group0()[1]) * other.group1())),
            // e5
            (self.group0()[1] * other[e1]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group0()[1] * other.group3()[0]),
                (self.group0()[1] * other.group3()[1]),
                (self.group0()[1] * other.group3()[2]),
                (-(self.group0()[0] * other.group9()[3]) + (self.group0()[1] * other.group3()[3])),
            ]),
            // e41, e42, e43
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                + (Simd32x3::from(self.group0()[0]) * other.group5())
                + (Simd32x3::from(self.group0()[1]) * other.group4())),
            // e23, e31, e12
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]])) + (Simd32x3::from(self.group0()[1]) * other.group5())),
            // e415, e425, e435, e321
            ((Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group8()[0], other.group8()[1], other.group8()[2], other[e1]]))
                + (Simd32x4::from(self.group0()[1]) * other.group6())),
            // e423, e431, e412
            (-(Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from(self.group0()[1]) * other.group7())),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[1]) * other.group8()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group9()[0])),
                (-(self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group9()[1])),
                (-(self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group9()[2])),
                (self.group0()[1] * other.group9()[3]),
            ]),
            // e1234
            ((self.group0()[0] * other.group0()[0]) + (self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other[e45])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for AntiDualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       21        0
    //    simd4        3        6        0
    // Totals...
    // yes simd        8       27        0
    //  no simd       17       45        0
    fn sandwich(self, other: Plane) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self.group0()[0]) * other.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3] * -1.0)]),
            // e15, e25, e35, e1234
            Simd32x4::from(0.0),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group0()[1]) * other.group0()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for AntiDualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1       18        0
    //    simd4        4        8        0
    // Totals...
    // yes simd        5       26        0
    //  no simd       17       50        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other[e2]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other[e2])]),
            // e235, e315, e125, e5
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other[e2])]),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[1]) * other.group0()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for AntiDualNum {
    type Output = AntiDualNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        3        0
    //    simd2        0        1        0
    // Totals...
    // yes simd        1        4        0
    //  no simd        1        5        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDualNum::from_groups(/* e1234, scalar */ (Simd32x2::from(other[scalar]) * self.group0()));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for AntiDualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       22        0
    //    simd4        3        6        0
    // Totals...
    // yes simd        8       28        0
    //  no simd       17       46        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self.group0()[0]) * other.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3] * -1.0)]),
            // e15, e25, e35, e1234
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other[e4315])]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group0()[1]) * other.group0()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for AntiDualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1       24        0
    //    simd4        9       12        0
    // Totals...
    // yes simd       10       36        0
    //  no simd       37       72        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[0]) * -1.0),
                ((self.group0()[0] * other.group3()[1]) * -1.0),
                ((self.group0()[0] * other.group3()[2]) * -1.0),
                0.0,
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                + (Simd32x4::from(self.group0()[1]) * other.group0())),
            // e415, e425, e435, e321
            ((Simd32x4::from(self.group0()[0]) * other.group2()) + (Simd32x4::from(self.group0()[1]) * other.group1())),
            // e235, e315, e125, e5
            (Simd32x4::from(self.group0()[1]) * other.group2()),
            // e1, e2, e3, e4
            (Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[0] * other.group1()[3]) * -1.0)])
                + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[3]]))
                + (Simd32x4::from(self.group0()[1]) * other.group3())),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for AntiDualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       40        0
    //    simd4        6        7        0
    // Totals...
    // yes simd       16       47        0
    //  no simd       34       68        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (self.group0()[0] * other.group3()[0]),
                (self.group0()[0] * other.group3()[1]),
                (self.group0()[0] * other.group3()[2]),
                0.0,
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + (Simd32x4::from(self.group0()[1]) * other.group0())),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (self.group0()[0] * other.group2()[0]),
                (self.group0()[0] * other.group2()[1]),
                (self.group0()[0] * other.group2()[2]),
                ((self.group0()[0] * other.group3()[3]) * -1.0),
            ]) + (Simd32x4::from(self.group0()[1]) * other.group1())),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group2()[0]),
                (self.group0()[1] * other.group2()[1]),
                (self.group0()[1] * other.group2()[2]),
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group2()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group3()[0])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group3()[1])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group3()[2])),
                (self.group0()[1] * other.group3()[3]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl InfixSandwich for AntiFlatPoint {}
impl Sandwich<AntiCircleRotor> for AntiFlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       37       63        0
    //    simd4       11       13        0
    // Totals...
    // yes simd       48       76        0
    //  no simd       81      115        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group1()[3] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) * -1.0),
                ((other.group0()[0] * self.group0()[2]) * -1.0),
                ((other.group0()[1] * self.group0()[0]) * -1.0),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) + (other.group2()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group1()[1] * self.group0()[2]) + (other.group2()[3] * self.group0()[0])),
                ((other.group1()[2] * self.group0()[0]) + (other.group2()[3] * self.group0()[1])),
                ((other.group1()[0] * self.group0()[1]) + (other.group2()[3] * self.group0()[2])),
                0.0,
            ]) - (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[2]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (other.group1()[0] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group1()[2] * self.group0()[3])),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for AntiFlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       97        0
    //    simd4        9       10        0
    // Totals...
    // yes simd       65      107        0
    //  no simd       92      137        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3] * -1.0),
                (other.group0()[1] * self.group0()[3] * -1.0),
                (other.group0()[2] * self.group0()[3] * -1.0),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (other.group1()[3] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) - (other.group2()[3] * self.group0()[0]) - (other.group3()[0] * self.group0()[3])),
                (-(other.group0()[2] * self.group0()[0]) - (other.group2()[3] * self.group0()[1]) - (other.group3()[1] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[1]) - (other.group2()[3] * self.group0()[2]) - (other.group3()[2] * self.group0()[3])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1]) - (other.group1()[3] * self.group0()[0])
                    + (other.group2()[0] * self.group0()[3])
                    - (other.group3()[1] * self.group0()[2])
                    + (other.group3()[2] * self.group0()[1])),
                ((other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0]) - (other.group1()[3] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[3])
                    + (other.group3()[0] * self.group0()[2])
                    - (other.group3()[2] * self.group0()[0])),
                (-(other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0]) - (other.group1()[3] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[3])
                    - (other.group3()[0] * self.group0()[1])
                    + (other.group3()[1] * self.group0()[0])),
                (other.group2()[3] * self.group0()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) - (other.group2()[3] * self.group0()[0])),
                (-(other.group0()[2] * self.group0()[0]) - (other.group2()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[1]) - (other.group2()[3] * self.group0()[2])),
                ((other.group1()[2] * self.group0()[2])
                    + (other.group3()[0] * self.group0()[0])
                    + (other.group3()[1] * self.group0()[1])
                    + (other.group3()[2] * self.group0()[2])
                    + (other.group3()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (swizzle!(other.group1(), 0, 1, 2, 1) * swizzle!(self.group0(), 3, 3, 3, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for AntiFlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       38        0
    //    simd4        7       10        0
    // Totals...
    // yes simd       27       48        0
    //  no simd       48       78        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]) * self.group0()),
            // e235, e315, e125, e4
            (Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[0]]) * self.group0()),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for AntiFlatPoint {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       28        0
    //    simd4        0        1        0
    // Totals...
    // yes simd       15       29        0
    //  no simd       15       32        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[3] * self.group0()[3] * -1.0)]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[3]) - (other.group0()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group0()[3]) - (other.group0()[3] * self.group0()[2])),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for AntiFlatPoint {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       28        0
    //    simd4        2        5        0
    // Totals...
    // yes simd       18       33        0
    //  no simd       24       48        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]) * Simd32x4::from(-1.0)),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group0()[3])),
                (-(self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group0()[3])),
                ((self.group0()[2] * other.group1()[2]) + (self.group0()[3] * other.group1()[3])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                + (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group1(), 2, 0, 1, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for AntiFlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       23        0
    //    simd4        2        5        0
    // Totals...
    // yes simd       14       28        0
    //  no simd       20       43        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) - (other.group1()[0] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0]) - (other.group1()[1] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) - (other.group1()[2] * self.group0()[3])),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for AntiFlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       28        0
    //    simd4        2        5        0
    // Totals...
    // yes simd       18       33        0
    //  no simd       24       48        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1]) - (self.group0()[3] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[3]) - (self.group0()[2] * other.group0()[0]) - (self.group0()[3] * other.group1()[1])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[3])
                    - (self.group0()[3] * other.group1()[2])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[3] * other.group1()[3])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for AntiFlatPoint {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       35        0
    //    simd4        1        2        0
    // Totals...
    // yes simd       15       37        0
    //  no simd       18       43        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                0.0,
            ]),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                ((self.group0()[2] * other.group0()[1]) * -1.0),
                ((self.group0()[0] * other.group0()[2]) * -1.0),
                ((self.group0()[1] * other.group0()[0]) * -1.0),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
            ]) + (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for AntiFlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        8        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        3       11        0
    //  no simd        3       20        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = FlatPoint::from_groups(/* e15, e25, e35, e45 */ (Simd32x4::from(other[e12345]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for AntiFlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       37       82        0
    //    simd4        9       10        0
    // Totals...
    // yes simd       46       92        0
    //  no simd       73      122        0
    fn sandwich(self, other: Circle) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3] * -1.0),
                (other.group0()[1] * self.group0()[3] * -1.0),
                (other.group0()[2] * self.group0()[3] * -1.0),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (self.group0()[3] * other.group1()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) * -1.0),
                ((other.group0()[2] * self.group0()[0]) * -1.0),
                ((other.group0()[0] * self.group0()[1]) * -1.0),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group2()[0] * self.group0()[3]) - (self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                ((other.group2()[1] * self.group0()[3]) - (self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group1()[0])),
                ((other.group2()[2] * self.group0()[3]) + (self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group1()[3])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) * -1.0),
                ((other.group0()[2] * self.group0()[0]) * -1.0),
                ((other.group0()[0] * self.group0()[1]) * -1.0),
                (self.group0()[2] * other.group1()[2]),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (swizzle!(self.group0(), 3, 3, 3, 1) * swizzle!(other.group1(), 0, 1, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for AntiFlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       41       86        0
    //    simd4        9       10        0
    // Totals...
    // yes simd       50       96        0
    //  no simd       77      126        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3] * -1.0),
                (other.group0()[1] * self.group0()[3] * -1.0),
                (other.group0()[2] * self.group0()[3] * -1.0),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (self.group0()[3] * other.group1()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) * -1.0),
                ((other.group0()[2] * self.group0()[0]) * -1.0),
                ((other.group0()[0] * self.group0()[1]) * -1.0),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) + (self.group0()[3] * other.group2()[3])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[3]) - (self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])
                    + (self.group0()[3] * other.group2()[0])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group1()[3]) - (self.group0()[1] * other.group2()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[3] * other.group2()[1])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group1()[3]) - (self.group0()[2] * other.group2()[3])
                    + (self.group0()[3] * other.group2()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) * -1.0),
                ((other.group0()[2] * self.group0()[0]) * -1.0),
                ((other.group0()[0] * self.group0()[1]) * -1.0),
                (self.group0()[2] * other.group1()[2]),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (swizzle!(self.group0(), 3, 3, 3, 1) * swizzle!(other.group1(), 0, 1, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for AntiFlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       33       59        0
    //    simd4       11       13        0
    // Totals...
    // yes simd       44       72        0
    //  no simd       77      111        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (self.group0()[3] * other.group1()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) * -1.0),
                ((other.group0()[0] * self.group0()[2]) * -1.0),
                ((other.group0()[1] * self.group0()[0]) * -1.0),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (self.group0()[2] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                (self.group0()[1] * other.group1()[0]),
                0.0,
            ]) - (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (swizzle!(self.group0(), 0, 1, 0, 1) * swizzle!(other.group1(), 3, 3, 1, 1))
                - (swizzle!(self.group0(), 1, 2, 2, 2) * swizzle!(other.group1(), 2, 0, 3, 2))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (self.group0()[3] * other.group1()[0])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) + (self.group0()[3] * other.group1()[1])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (self.group0()[3] * other.group1()[2])),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for AntiFlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       38       60        0
    //    simd4       15       17        0
    // Totals...
    // yes simd       53       77        0
    //  no simd       98      128        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (self.group0()[3] * other.group1()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[2] * self.group0()[1]) - (self.group0()[3] * other.group3()[0])),
                (-(other.group0()[0] * self.group0()[2]) - (self.group0()[3] * other.group3()[1])),
                (-(other.group0()[1] * self.group0()[0]) - (self.group0()[3] * other.group3()[2])),
                (other.group0()[2] * self.group0()[2]),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[2] * other.group3()[2])])
                - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group1()[0]]))
                - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group1()[1]]))
                - (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group1()[2]]))
                - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                + (Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[0], other.group3()[1]]) * swizzle!(self.group0(), 2, 2, 1, 1))
                + (Simd32x4::from([other.group3()[2], other.group1()[2], other.group3()[1], other.group3()[0]]) * swizzle!(self.group0(), 1, 0, 0, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) - (self.group0()[0] * other.group2()[3])
                    + (self.group0()[3] * other.group1()[0])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) - (self.group0()[1] * other.group2()[3]) + (self.group0()[3] * other.group1()[1])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) - (self.group0()[2] * other.group2()[3])
                    + (self.group0()[3] * other.group1()[2])),
                (self.group0()[3] * other.group2()[3]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for AntiFlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       51        0
    //    simd4        5       10        0
    // Totals...
    // yes simd       29       61        0
    //  no simd       44       91        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e15, e25, e35, e1234
            (Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[0]]) * self.group0() * Simd32x4::from(-1.0)),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for AntiFlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       28        0
    //    simd4        0        1        0
    // Totals...
    // yes simd       15       29        0
    //  no simd       15       32        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[3] * -1.0)]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group0()[3] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[3]) - (self.group0()[3] * other.group0()[1])),
                (-(self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group0()[2])),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for AntiFlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       28        0
    //    simd4        2        5        0
    // Totals...
    // yes simd       18       33        0
    //  no simd       24       48        0
    fn sandwich(self, other: Flector) -> Self::Output {
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]) * Simd32x4::from(-1.0)),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group0()[2] * other.group1()[1]) - (self.group0()[3] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[3]) - (self.group0()[3] * other.group0()[1])),
                (-(self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group0()[2])),
                ((self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group1()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))
                + (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group1(), 2, 0, 1, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for AntiFlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       23        0
    //    simd4        2        5        0
    // Totals...
    // yes simd       14       28        0
    //  no simd       20       43        0
    fn sandwich(self, other: Line) -> Self::Output {
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (other.group1()[0] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group1()[2] * self.group0()[3])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for AntiFlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       28        0
    //    simd4        2        5        0
    // Totals...
    // yes simd       18       33        0
    //  no simd       24       48        0
    fn sandwich(self, other: Motor) -> Self::Output {
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])
                    + (self.group0()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group0()[3])
                    + (self.group0()[2] * other.group0()[0])
                    + (self.group0()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group1()[2])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group1()[3])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for AntiFlatPoint {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       72      117        0
    //    simd2        2        2        0
    //    simd3       16       24        0
    //    simd4       18       19        0
    // Totals...
    // yes simd      108      162        0
    //  no simd      196      269        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                ((other.group7()[0] * self.group0()[0]) + (other.group7()[1] * self.group0()[1]) + (other.group7()[2] * self.group0()[2])),
                (-(other.group4()[0] * self.group0()[0]) - (other.group4()[1] * self.group0()[1]) - (other.group4()[2] * self.group0()[2])),
            ]) - (Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group6()[3], other.group3()[3]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group4()[1] * self.group0()[2]) + (other.group4()[2] * self.group0()[1]) + (other.group5()[0] * self.group0()[3]) - (self.group0()[0] * other[e45])),
                ((other.group4()[0] * self.group0()[2]) - (other.group4()[2] * self.group0()[0]) + (other.group5()[1] * self.group0()[3]) - (self.group0()[1] * other[e45])),
                (-(other.group4()[0] * self.group0()[1]) + (other.group4()[1] * self.group0()[0]) + (other.group5()[2] * self.group0()[3]) - (self.group0()[2] * other[e45])),
                (self.group0()[3] * other[e45]),
            ]),
            // e5
            (-(other.group5()[0] * self.group0()[0]) - (other.group5()[1] * self.group0()[1]) - (other.group5()[2] * self.group0()[2])
                + (self.group0()[0] * other.group9()[0])
                + (self.group0()[1] * other.group9()[1])
                + (self.group0()[2] * other.group9()[2])
                - (self.group0()[3] * other.group9()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group0()[0])
                    - (self.group0()[0] * other.group6()[3])
                    - (self.group0()[2] * other.group1()[1])
                    - (self.group0()[2] * other.group6()[1])),
                (-(other.group0()[1] * self.group0()[1])
                    - (self.group0()[0] * other.group1()[2])
                    - (self.group0()[0] * other.group6()[2])
                    - (self.group0()[1] * other.group6()[3])),
                (-(other.group0()[1] * self.group0()[2])
                    - (self.group0()[1] * other.group1()[0])
                    - (self.group0()[1] * other.group6()[0])
                    - (self.group0()[2] * other.group6()[3])),
                (other.group7()[2] * self.group0()[2]),
            ]) + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group8()[0], other.group8()[1], other.group8()[2], other.group0()[1]]))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group7()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group7()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))),
            // e41, e42, e43
            (Simd32x3::from(self.group0()[3]) * other.group7() * Simd32x3::from(-1.0)),
            // e23, e31, e12
            (-(Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group7(), 2, 0, 1))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group7(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group4()[2] * self.group0()[1]) - (self.group0()[3] * other.group9()[0])),
                (-(other.group4()[0] * self.group0()[2]) - (self.group0()[3] * other.group9()[1])),
                (-(other.group4()[1] * self.group0()[0]) - (self.group0()[3] * other.group9()[2])),
                ((other.group4()[1] * self.group0()[1]) + (other.group4()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group4()[1], other.group4()[2], other.group4()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([other[e45], other[e45], other[e45], other.group4()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[3]) * other.group4()),
            // e235, e315, e125
            (Simd32x3::from([
                ((self.group0()[1] * other.group9()[2]) - (self.group0()[2] * other.group9()[1])),
                (-(self.group0()[0] * other.group9()[2]) + (self.group0()[2] * other.group9()[0])),
                ((self.group0()[0] * other.group9()[1]) - (self.group0()[1] * other.group9()[0])),
            ]) + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group5(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group5(), 1, 2, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group7()[1] * self.group0()[2]) - (self.group0()[0] * other.group1()[3])),
                (-(other.group7()[2] * self.group0()[0]) - (self.group0()[1] * other.group1()[3])),
                (-(other.group7()[0] * self.group0()[1]) - (self.group0()[2] * other.group1()[3])),
                ((self.group0()[1] * other.group1()[1])
                    + (self.group0()[1] * other.group6()[1])
                    + (self.group0()[2] * other.group1()[2])
                    + (self.group0()[2] * other.group6()[2])
                    + (self.group0()[3] * other[e1])),
            ]) + (Simd32x4::from([other.group7()[2], other.group7()[0], other.group7()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (swizzle!(self.group0(), 3, 3, 3, 0) * swizzle!(other.group6(), 0, 1, 2, 0))),
            // e1234
            (self.group0()[3] * other.group1()[3] * -1.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for AntiFlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       28        0
    //    simd4        2        3        0
    // Totals...
    // yes simd       15       31        0
    //  no simd       21       40        0
    fn sandwich(self, other: Plane) -> Self::Output {
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                0.0,
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]))])
                + (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for AntiFlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       33       69        0
    //    simd4        5        6        0
    // Totals...
    // yes simd       38       75        0
    //  no simd       53       93        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group0()[3] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[3]) - (self.group0()[3] * other.group0()[1])),
                (-(self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group0()[2])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other.group0()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other[e2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for AntiFlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        8        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        3       10        0
    //  no simd        3       16        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ (Simd32x4::from(other[scalar]) * self.group0()));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for AntiFlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       29       55        0
    //    simd4        7        8        0
    // Totals...
    // yes simd       36       63        0
    //  no simd       57       87        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other[e4315]) - (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other[e4315]) - (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other[e4315]) - (self.group0()[3] * other.group0()[2])),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other[e4315]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[0] * other[e4315] * -1.0),
                (self.group0()[1] * other[e4315] * -1.0),
                (self.group0()[2] * other[e4315] * -1.0),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) - (self.group0()[3] * other.group0()[3])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for AntiFlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       60      101        0
    //    simd4        9       10        0
    // Totals...
    // yes simd       69      111        0
    //  no simd       96      141        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) - (self.group0()[3] * other.group1()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(self.group0()[0] * other.group3()[3]) - (self.group0()[2] * other.group0()[1]) - (self.group0()[3] * other.group3()[0])),
                (-(self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group3()[3]) - (self.group0()[3] * other.group3()[1])),
                (-(self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group3()[3]) - (self.group0()[3] * other.group3()[2])),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
            ]) + (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group0()[0] * other.group1()[3])
                    + (self.group0()[1] * other.group1()[2])
                    + (self.group0()[1] * other.group3()[2])
                    - (self.group0()[2] * other.group1()[1])
                    - (self.group0()[2] * other.group3()[1])
                    + (self.group0()[3] * other.group2()[0])),
                (-(self.group0()[0] * other.group1()[2])
                    - (self.group0()[0] * other.group3()[2])
                    - (self.group0()[1] * other.group0()[3])
                    - (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[2] * other.group3()[0])
                    + (self.group0()[3] * other.group2()[1])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group3()[1])
                    - (self.group0()[1] * other.group1()[0])
                    - (self.group0()[1] * other.group3()[0])
                    - (self.group0()[2] * other.group0()[3])
                    - (self.group0()[2] * other.group1()[3])
                    + (self.group0()[3] * other.group2()[2])),
                (self.group0()[3] * other.group3()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[0] * other.group3()[3]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group3()[3])),
                (-(self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group3()[3])),
                ((self.group0()[1] * other.group1()[1])
                    + (self.group0()[1] * other.group3()[1])
                    + (self.group0()[2] * other.group1()[2])
                    + (self.group0()[2] * other.group3()[2])
                    + (self.group0()[3] * other.group2()[3])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for AntiFlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       39       60        0
    //    simd4       15       18        0
    // Totals...
    // yes simd       54       78        0
    //  no simd       99      132        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[3] * other.group1()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) - (self.group0()[3] * other.group3()[0])),
                (-(self.group0()[2] * other.group0()[0]) - (self.group0()[3] * other.group3()[1])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group0()[3] * other.group3()[2])),
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
            ]) + (Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group0()[1]]) * swizzle!(self.group0(), 2, 1, 2, 1))
                + (Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group0(), 0, 0, 1, 0))),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[3], other.group1()[2], other.group3()[1], other.group3()[0]]))
                - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group1()[0]]))
                - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group1()[1]]))
                + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group3()[2], other.group0()[3], other.group1()[0], other.group3()[1]]))
                + (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group0()[3], other.group3()[2]]))
                - (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group1()[2]]))
                - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])
                    + (self.group0()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group2()[3])
                    + (self.group0()[2] * other.group0()[0])
                    + (self.group0()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group2()[3]) + (self.group0()[3] * other.group1()[2])),
                (self.group0()[3] * other.group2()[3]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl InfixSandwich for AntiFlector {}
impl Sandwich<AntiCircleRotor> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       55       77        0
    //    simd4       34       36        0
    // Totals...
    // yes simd       89      113        0
    //  no simd      191      221        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[3]) + (other.group0()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group1()[3] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group1()[3])),
                (-(other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group1()[3])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (other.group1()[1] * self.group1()[1]) - (other.group1()[2] * self.group1()[2])
                    + (other.group2()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 0) * swizzle!(self.group1(), 0, 1, 2, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (other.group1()[1] * self.group0()[2]),
                (other.group1()[2] * self.group0()[0]),
                (other.group1()[0] * self.group0()[1]),
                (other.group2()[3] * self.group1()[3]),
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[2]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]]) * swizzle!(other.group2(), 3, 3, 3, 2))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group0(), 0, 1, 2, 1))
                + (swizzle!(other.group2(), 2, 0, 1, 1) * swizzle!(self.group1(), 1, 2, 0, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2])
                    + (other.group0()[2] * self.group0()[1])
                    + (other.group1()[0] * self.group0()[3])
                    + (other.group1()[1] * self.group1()[2])
                    + (other.group2()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])
                    + (other.group1()[1] * self.group0()[3])
                    + (other.group1()[2] * self.group1()[0])
                    + (other.group2()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group0()[1])
                    + (other.group0()[1] * self.group0()[0])
                    + (other.group1()[0] * self.group1()[1])
                    + (other.group1()[2] * self.group0()[3])
                    + (other.group2()[3] * self.group1()[2])),
                ((other.group0()[2] * self.group1()[2]) * -1.0),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       73      113        0
    //    simd4       36       37        0
    // Totals...
    // yes simd      109      150        0
    //  no simd      217      261        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group2()[3] * self.group1()[0]) * -1.0),
                ((other.group2()[3] * self.group1()[1]) * -1.0),
                ((other.group2()[3] * self.group1()[2]) * -1.0),
                ((other.group0()[0] * self.group0()[0])
                    + (other.group0()[1] * self.group0()[1])
                    + (other.group0()[2] * self.group0()[2])
                    + (other.group3()[1] * self.group1()[1])
                    + (other.group3()[2] * self.group1()[2])),
            ]) - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group2()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group3()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) - (other.group3()[0] * self.group0()[3]) + (other.group3()[2] * self.group1()[1])),
                (-(other.group0()[2] * self.group0()[0]) + (other.group3()[0] * self.group1()[2]) - (other.group3()[1] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group3()[1] * self.group1()[0]) - (other.group3()[2] * self.group0()[3])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[2]]) * swizzle!(self.group1(), 2, 0, 1, 2))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group1(), 0, 1, 2, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(other.group1()[0] * self.group1()[3]) + (other.group1()[2] * self.group0()[1]) - (other.group1()[3] * self.group0()[0])
                    + (other.group2()[0] * self.group0()[3])
                    - (other.group2()[2] * self.group1()[1])
                    - (other.group3()[0] * self.group1()[3])
                    - (other.group3()[1] * self.group0()[2])
                    + (other.group3()[2] * self.group0()[1])),
                ((other.group1()[0] * self.group0()[2]) - (other.group1()[1] * self.group1()[3]) - (other.group1()[3] * self.group0()[1]) - (other.group2()[0] * self.group1()[2])
                    + (other.group2()[1] * self.group0()[3])
                    + (other.group3()[0] * self.group0()[2])
                    - (other.group3()[1] * self.group1()[3])
                    - (other.group3()[2] * self.group0()[0])),
                ((other.group1()[1] * self.group0()[0]) - (other.group1()[2] * self.group1()[3]) - (other.group1()[3] * self.group0()[2]) - (other.group2()[1] * self.group1()[0])
                    + (other.group2()[2] * self.group0()[3])
                    - (other.group3()[0] * self.group0()[1])
                    + (other.group3()[1] * self.group0()[0])
                    - (other.group3()[2] * self.group1()[3])),
                (other.group0()[2] * self.group1()[2]),
            ]) - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group0()[1]]) * swizzle!(self.group1(), 0, 1, 2, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) * -1.0),
                ((other.group0()[2] * self.group0()[0]) * -1.0),
                ((other.group0()[0] * self.group0()[1]) * -1.0),
                (-(other.group2()[2] * self.group1()[2])
                    + (other.group3()[0] * self.group0()[0])
                    + (other.group3()[1] * self.group0()[1])
                    + (other.group3()[2] * self.group0()[2])
                    + (other.group3()[3] * self.group0()[3])),
            ]) - (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group0()[1]]) * swizzle!(other.group1(), 0, 1, 0, 1))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group0()[3], self.group0()[2]]) * swizzle!(other.group1(), 1, 2, 2, 2))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       31       44        0
    //    simd4       23       27        0
    // Totals...
    // yes simd       54       71        0
    //  no simd      123      152        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(other.group0()[0]) * self.group1()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group0()[3])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group1()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[0] * self.group0()[3]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for AntiFlector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       33        0
    //    simd4        8       11        0
    // Totals...
    // yes simd       28       44        0
    //  no simd       52       77        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]) * Simd32x4::from(-1.0)),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group1()[2])),
                ((other.group0()[1] * self.group0()[3]) + (other.group0()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[2] * self.group1()[2]) - (other.group0()[3] * self.group1()[3])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group1(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for AntiFlector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       41        0
    //    simd4       14       15        0
    // Totals...
    // yes simd       38       56        0
    //  no simd       80      101        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from([
                (-(other.group1()[0] * self.group0()[3]) - (other.group1()[1] * self.group1()[2])),
                (-(other.group1()[1] * self.group0()[3]) - (other.group1()[2] * self.group1()[0])),
                (-(other.group1()[0] * self.group1()[1]) - (other.group1()[2] * self.group0()[3])),
                ((other.group1()[1] * self.group1()[1]) + (other.group1()[2] * self.group1()[2])),
            ]) - (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]))
                + (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group1()[1] * self.group0()[2])),
                ((other.group0()[2] * self.group1()[0]) - (other.group1()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group1()[0] * self.group0()[1])),
                (-(other.group0()[3] * self.group1()[3]) + (other.group1()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]) * swizzle!(self.group1(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[2]]) * swizzle!(other.group1(), 3, 3, 3, 2))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (swizzle!(other.group1(), 2, 0, 1, 1) * swizzle!(self.group0(), 1, 2, 0, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for AntiFlector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       44        0
    //    simd4       10       11        0
    // Totals...
    // yes simd       38       55        0
    //  no simd       68       88        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) - (other.group1()[0] * self.group0()[3])
                    + (other.group1()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group0()[2])
                    + (other.group0()[1] * self.group1()[3])
                    + (other.group0()[2] * self.group0()[0])
                    + (other.group1()[0] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group1()[3]) + (other.group1()[1] * self.group1()[0])
                    - (other.group1()[2] * self.group0()[3])),
                (-(other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[3])),
                (-(other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])
                    + (other.group1()[1] * self.group1()[1])
                    + (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for AntiFlector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       32        0
    //    simd4       16       17        0
    // Totals...
    // yes simd       36       49        0
    //  no simd       84      100        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group0()[1]) - (self.group0()[3] * other.group1()[0]) + (self.group1()[1] * other.group1()[2]) + (self.group1()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) - (self.group0()[3] * other.group1()[1]) + (self.group1()[2] * other.group1()[0]) + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group1()[2]) + (self.group1()[0] * other.group1()[1]) + (self.group1()[3] * other.group0()[2])),
                0.0,
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[3], other.group1()[3], other.group0()[2]]) * swizzle!(self.group1(), 2, 1, 2, 2))
                - (Simd32x4::from([other.group1()[3], other.group1()[2], other.group1()[0], other.group0()[1]]) * swizzle!(self.group1(), 0, 0, 1, 1))
                + (swizzle!(self.group0(), 0, 0, 1, 3) * swizzle!(other.group0(), 3, 2, 0, 3))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[3] * other.group1()[3])
                    + (self.group1()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group1()[3]]) * other.group0())
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[3], other.group0()[3], other.group1()[1]]) * swizzle!(self.group1(), 2, 1, 2, 1))
                + (Simd32x4::from([other.group0()[3], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 0, 0, 1, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for AntiFlector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       41        0
    //    simd4        9       10        0
    // Totals...
    // yes simd       33       51        0
    //  no simd       60       81        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from([
                (-(self.group0()[3] * other.group0()[0]) - (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[3] * other.group0()[1]) - (self.group1()[0] * other.group0()[2])),
                (-(self.group0()[3] * other.group0()[2]) - (self.group1()[1] * other.group0()[0])),
                ((self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                (-(self.group0()[2] * other.group0()[1]) - (self.group1()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[2]) - (self.group1()[3] * other.group0()[1])),
                (-(self.group0()[1] * other.group0()[0]) - (self.group1()[3] * other.group0()[2])),
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for AntiFlector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       24        0
    //    simd4        6       11        0
    // Totals...
    // yes simd       22       35        0
    //  no simd       40       68        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(other[e12345]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other[e12345]) * self.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       61      101        0
    //    simd4       29       30        0
    // Totals...
    // yes simd       90      131        0
    //  no simd      177      221        0
    fn sandwich(self, other: Circle) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) * -1.0),
                ((other.group0()[2] * self.group0()[0]) * -1.0),
                ((other.group0()[0] * self.group0()[1]) * -1.0),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (self.group1()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (swizzle!(self.group1(), 0, 1, 2, 1) * swizzle!(other.group1(), 3, 3, 3, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group2()[0] * self.group0()[3]) - (other.group2()[2] * self.group1()[1]) - (self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])
                    - (self.group1()[3] * other.group1()[0])),
                (-(other.group2()[0] * self.group1()[2]) + (other.group2()[1] * self.group0()[3])
                    - (self.group0()[0] * other.group1()[2])
                    - (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    - (self.group1()[3] * other.group1()[1])),
                (-(other.group2()[1] * self.group1()[0]) + (other.group2()[2] * self.group0()[3]) + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])
                    - (self.group0()[2] * other.group1()[3])
                    - (self.group1()[3] * other.group1()[2])),
                ((other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) * -1.0),
                ((other.group0()[2] * self.group0()[0]) * -1.0),
                ((other.group0()[0] * self.group0()[1]) * -1.0),
                (-(other.group2()[2] * self.group1()[2]) - (self.group1()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[2]]) * swizzle!(other.group1(), 1, 2, 0, 2))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))
                + (swizzle!(self.group0(), 3, 3, 3, 1) * swizzle!(other.group1(), 0, 1, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       69      106        0
    //    simd4       29       30        0
    // Totals...
    // yes simd       98      136        0
    //  no simd      185      226        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) * -1.0),
                ((other.group0()[2] * self.group0()[0]) * -1.0),
                ((other.group0()[0] * self.group0()[1]) * -1.0),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) + (self.group0()[3] * other.group2()[3]) - (self.group1()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (swizzle!(self.group1(), 0, 1, 2, 1) * swizzle!(other.group1(), 3, 3, 3, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(self.group0()[0] * other.group1()[3]) - (self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])
                    + (self.group0()[3] * other.group2()[0])
                    - (self.group1()[1] * other.group2()[2])
                    - (self.group1()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group1()[3]) - (self.group0()[1] * other.group2()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[3] * other.group2()[1])
                    - (self.group1()[2] * other.group2()[0])
                    - (self.group1()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group1()[3]) - (self.group0()[2] * other.group2()[3])
                    + (self.group0()[3] * other.group2()[2])
                    - (self.group1()[0] * other.group2()[1])
                    - (self.group1()[3] * other.group1()[2])),
                ((other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (self.group1()[0] * other.group2()[3])),
                (-(other.group0()[2] * self.group0()[0]) + (self.group1()[1] * other.group2()[3])),
                (-(other.group0()[0] * self.group0()[1]) + (self.group1()[2] * other.group2()[3])),
                (-(self.group1()[2] * other.group2()[2]) - (self.group1()[3] * other.group1()[3]) - (self.group1()[3] * other.group2()[3])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[2]]) * swizzle!(other.group1(), 1, 2, 0, 2))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))
                + (swizzle!(self.group0(), 3, 3, 3, 1) * swizzle!(other.group1(), 0, 1, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       51       73        0
    //    simd4       33       35        0
    // Totals...
    // yes simd       84      108        0
    //  no simd      183      213        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[3]) + (other.group0()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (self.group0()[3] * other.group1()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group1()[3])),
                (-(other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group1()[3])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (self.group1()[1] * other.group1()[1]) - (self.group1()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (swizzle!(self.group1(), 0, 1, 2, 0) * swizzle!(other.group1(), 3, 3, 3, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (self.group0()[2] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                (self.group0()[1] * other.group1()[0]),
                (other.group2()[2] * self.group1()[2]),
            ]) - (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group2()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[1]]) * swizzle!(self.group1(), 3, 3, 3, 1))
                - (swizzle!(self.group0(), 0, 1, 0, 1) * swizzle!(other.group1(), 3, 3, 1, 1))
                - (swizzle!(self.group0(), 1, 2, 2, 2) * swizzle!(other.group1(), 2, 0, 3, 2))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2])
                    + (other.group0()[2] * self.group0()[1])
                    + (self.group0()[3] * other.group1()[0])
                    + (self.group1()[2] * other.group1()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) + (self.group0()[3] * other.group1()[1]) + (self.group1()[0] * other.group1()[2])),
                (-(other.group0()[0] * self.group0()[1])
                    + (other.group0()[1] * self.group0()[0])
                    + (self.group0()[3] * other.group1()[2])
                    + (self.group1()[1] * other.group1()[0])),
                ((other.group0()[2] * self.group1()[2]) * -1.0),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       59       81        0
    //    simd4       41       43        0
    // Totals...
    // yes simd      100      124        0
    //  no simd      223      253        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[3])),
                (-(other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (self.group0()[3] * other.group1()[3])
                    + (self.group1()[2] * other.group3()[2])
                    + (self.group1()[3] * other.group2()[3])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group3()[1]]) * swizzle!(self.group1(), 0, 1, 2, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[2] * self.group0()[1]) - (self.group0()[3] * other.group3()[0]) + (self.group1()[1] * other.group3()[2])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group1()[3]) - (self.group0()[3] * other.group3()[1])
                    + (self.group1()[2] * other.group3()[0])),
                (-(other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group1()[3]) - (self.group0()[3] * other.group3()[2])
                    + (self.group1()[0] * other.group3()[1])),
                ((other.group0()[2] * self.group0()[2]) - (self.group1()[2] * other.group1()[2]) - (self.group1()[3] * other.group2()[3])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group1()[0]]) * swizzle!(self.group1(), 0, 0, 1, 0))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))
                - (Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group1()[1]]) * swizzle!(self.group1(), 2, 1, 2, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group1()[2] * other.group2()[1]) - (self.group1()[3] * other.group3()[0])),
                (-(self.group1()[1] * other.group3()[3]) - (self.group1()[3] * other.group3()[1])),
                (-(self.group1()[2] * other.group3()[3]) - (self.group1()[3] * other.group3()[2])),
                ((self.group0()[2] * other.group3()[2]) + (self.group1()[2] * other.group2()[2])),
            ]) - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group1()[0]]))
                - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group1()[1]]))
                - (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group1()[2]]))
                - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[1]]) * swizzle!(self.group1(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[0], other.group3()[1]]) * swizzle!(self.group0(), 2, 2, 1, 1))
                + (Simd32x4::from([other.group3()[2], other.group1()[2], other.group3()[1], other.group3()[0]]) * swizzle!(self.group0(), 1, 0, 0, 0))
                - (Simd32x4::from([other.group3()[3], other.group2()[2], other.group2()[0], other.group1()[3]]) * swizzle!(self.group1(), 0, 0, 1, 3))
                + (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group2(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) - (self.group0()[0] * other.group2()[3])
                    + (self.group0()[3] * other.group1()[0])
                    + (self.group1()[2] * other.group1()[1])),
                (-(other.group0()[2] * self.group0()[0]) - (self.group0()[1] * other.group2()[3])
                    + (self.group0()[3] * other.group1()[1])
                    + (self.group1()[0] * other.group1()[2])),
                (-(other.group0()[0] * self.group0()[1]) - (self.group0()[2] * other.group2()[3])
                    + (self.group0()[3] * other.group1()[2])
                    + (self.group1()[1] * other.group1()[0])),
                ((other.group0()[2] * self.group1()[2]) * -1.0),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       41       71        0
    //    simd4       19       24        0
    // Totals...
    // yes simd       60       95        0
    //  no simd      117      167        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(other.group0()[0]) * self.group1() * Simd32x4::from(-1.0)),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            (Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[0]]) * self.group0() * Simd32x4::from(-1.0)),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group1()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3] * -1.0),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for AntiFlector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       24        0
    //    simd4       10       13        0
    // Totals...
    // yes simd       26       37        0
    //  no simd       56       76        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]) * Simd32x4::from(-1.0)),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group0()[3] * other.group0()[0]) - (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[3] * other.group0()[1]) - (self.group1()[0] * other.group0()[2])),
                (-(self.group0()[3] * other.group0()[2]) - (self.group1()[1] * other.group0()[0])),
                ((self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for AntiFlector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       40        0
    //    simd4       14       15        0
    // Totals...
    // yes simd       42       55        0
    //  no simd       84      100        0
    fn sandwich(self, other: Flector) -> Self::Output {
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from([
                (-(self.group1()[0] * other.group0()[3]) - (self.group1()[2] * other.group1()[1])),
                (-(self.group1()[0] * other.group1()[2]) - (self.group1()[1] * other.group0()[3])),
                (-(self.group1()[1] * other.group1()[0]) - (self.group1()[2] * other.group0()[3])),
                ((self.group1()[1] * other.group1()[1]) + (self.group1()[2] * other.group1()[2])),
            ]) - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                + (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group1(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group0()[2] * other.group1()[1])
                    - (self.group1()[0] * other.group1()[3])
                    - (self.group1()[2] * other.group0()[1])
                    - (self.group1()[3] * other.group1()[0])),
                (-(self.group0()[3] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[2])
                    - (self.group1()[1] * other.group1()[3])
                    - (self.group1()[3] * other.group1()[1])),
                (-(self.group0()[3] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[0])
                    - (self.group1()[2] * other.group1()[3])
                    - (self.group1()[3] * other.group1()[2])),
                ((self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group1()[2]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[3], self.group0()[1], self.group0()[2], self.group1()[3]]) * swizzle!(other.group0(), 0, 3, 3, 3))
                - (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group1()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))
                + (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group1(), 2, 0, 1, 0))
                + (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for AntiFlector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       45        0
    //    simd4       10       11        0
    // Totals...
    // yes simd       38       56        0
    //  no simd       68       89        0
    fn sandwich(self, other: Line) -> Self::Output {
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2])
                    + (other.group0()[2] * self.group0()[1])
                    + (other.group1()[0] * self.group0()[3])
                    + (other.group1()[1] * self.group1()[2])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3]) + (other.group1()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group0()[1])
                    + (other.group0()[1] * self.group0()[0])
                    + (other.group1()[0] * self.group1()[1])
                    + (other.group1()[2] * self.group0()[3])),
                ((other.group0()[2] * self.group1()[2]) * -1.0),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (other.group0()[1] * self.group1()[2]),
                (other.group0()[2] * self.group1()[0]),
                (other.group0()[0] * self.group1()[1]),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (other.group1()[1] * self.group1()[1]) - (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for AntiFlector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       40        0
    //    simd4       14       15        0
    // Totals...
    // yes simd       42       55        0
    //  no simd       84      100        0
    fn sandwich(self, other: Motor) -> Self::Output {
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group0()[3] * other.group1()[0]) + (self.group1()[0] * other.group1()[3]) + (self.group1()[2] * other.group1()[1]) - (self.group1()[3] * other.group0()[0])),
                ((self.group0()[3] * other.group1()[1]) + (self.group1()[0] * other.group1()[2]) + (self.group1()[1] * other.group1()[3]) - (self.group1()[3] * other.group0()[1])),
                ((self.group0()[3] * other.group1()[2]) + (self.group1()[1] * other.group1()[0]) + (self.group1()[2] * other.group1()[3]) - (self.group1()[3] * other.group0()[2])),
                0.0,
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 3, 2, 0, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group0(), 1, 3, 3, 1))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]) * swizzle!(self.group1(), 1, 2, 0, 2))
                + (swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((self.group0()[3] * other.group1()[3]) - (self.group1()[1] * other.group1()[1]) - (self.group1()[2] * other.group1()[2]) - (self.group1()[3] * other.group0()[3])),
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[0], self.group1()[1], self.group0()[1]]) * swizzle!(other.group0(), 3, 2, 0, 1))
                + (Simd32x4::from([self.group1()[2], self.group1()[1], self.group1()[2], self.group0()[2]]) * swizzle!(other.group0(), 1, 3, 3, 2))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (swizzle!(self.group0(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for AntiFlector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      137      185        0
    //    simd2        8        8        0
    //    simd3       40       44        0
    //    simd4       45       46        0
    // Totals...
    // yes simd      230      283        0
    //  no simd      453      517        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                ((other.group7()[0] * self.group0()[0]) + (other.group7()[1] * self.group0()[1]) + (other.group7()[2] * self.group0()[2]) - (self.group1()[3] * other.group1()[3])),
                (-(other.group4()[0] * self.group0()[0]) - (other.group4()[1] * self.group0()[1]) - (other.group4()[2] * self.group0()[2]) + (self.group1()[3] * other[e45])),
            ]) - (Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group6()[3], other.group3()[3]]))
                + (Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group1()[0], other.group9()[0]]))
                + (Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group1()[1], other.group9()[1]]))
                + (Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group1()[2], other.group9()[2]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) - (other.group4()[1] * self.group0()[2]) + (other.group5()[0] * self.group0()[3]) + (other.group5()[1] * self.group1()[2])
                    - (self.group0()[0] * other[e45])),
                ((other.group0()[0] * self.group1()[1]) - (other.group4()[2] * self.group0()[0]) + (other.group5()[1] * self.group0()[3]) + (other.group5()[2] * self.group1()[0])
                    - (self.group0()[1] * other[e45])),
                ((other.group0()[0] * self.group1()[2]) - (other.group4()[0] * self.group0()[1]) + (other.group5()[0] * self.group1()[1]) + (other.group5()[2] * self.group0()[3])
                    - (self.group0()[2] * other[e45])),
                ((other.group4()[2] * self.group1()[2]) * -1.0),
            ]) - (Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], other.group4()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group4()[2], other.group4()[0], other.group4()[1], other[e45]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group4()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))),
            // e5
            ((other.group0()[0] * self.group1()[3]) - (other.group5()[0] * self.group0()[0]) - (other.group5()[1] * self.group0()[1]) - (other.group5()[2] * self.group0()[2])
                + (self.group0()[0] * other.group9()[0])
                + (self.group0()[1] * other.group9()[1])
                + (self.group0()[2] * other.group9()[2])
                - (self.group0()[3] * other.group9()[3])
                + (self.group1()[0] * other.group3()[0])
                + (self.group1()[1] * other.group3()[1])
                + (self.group1()[2] * other.group3()[2])
                - (self.group1()[3] * other.group3()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group0()[0]) + (other.group8()[1] * self.group1()[2]) + (self.group1()[0] * other[e1])
                    - (self.group1()[3] * other.group1()[0])
                    - (self.group1()[3] * other.group6()[0])),
                (-(other.group0()[1] * self.group0()[1]) + (other.group8()[2] * self.group1()[0]) + (self.group1()[1] * other[e1])
                    - (self.group1()[3] * other.group1()[1])
                    - (self.group1()[3] * other.group6()[1])),
                (-(other.group0()[1] * self.group0()[2]) + (other.group8()[0] * self.group1()[1]) + (self.group1()[2] * other[e1])
                    - (self.group1()[3] * other.group1()[2])
                    - (self.group1()[3] * other.group6()[2])),
                (other.group7()[2] * self.group0()[2]),
            ]) + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group8()[0], other.group8()[1], other.group8()[2], other.group0()[1]]))
                - (Simd32x4::from([other.group8()[2], other.group8()[0], other.group8()[1], other.group6()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group1()[1]]) * swizzle!(other.group6(), 3, 2, 0, 1))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[3]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[2], self.group1()[2]]) * swizzle!(other.group6(), 1, 3, 3, 2))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group7()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group7()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))),
            // e41, e42, e43
            (-(Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from([self.group0()[3], self.group0()[3], self.group1()[1]]) * swizzle!(other.group7(), 0, 1, 0))
                + (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group7(), 2, 0, 1))
                - (Simd32x3::from([self.group1()[2], self.group1()[0], self.group0()[3]]) * swizzle!(other.group7(), 1, 2, 2))),
            // e23, e31, e12
            (Simd32x3::from([
                ((self.group1()[1] * other.group1()[2]) - (self.group1()[2] * other.group1()[1])),
                (-(self.group1()[0] * other.group1()[2]) + (self.group1()[2] * other.group1()[0])),
                ((self.group1()[0] * other.group1()[1]) - (self.group1()[1] * other.group1()[0])),
            ]) - (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from(other.group6()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group7(), 2, 0, 1))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group1()[3]]) * swizzle!(other.group7(), 1, 2, 2))
                - (Simd32x3::from([self.group1()[3], self.group1()[3], self.group0()[1]]) * swizzle!(other.group7(), 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group4()[0] * self.group1()[3]) - (other.group4()[2] * self.group0()[1]) - (self.group0()[3] * other.group9()[0]) + (self.group1()[1] * other.group9()[2])),
                (-(other.group4()[0] * self.group0()[2]) + (other.group4()[1] * self.group1()[3]) - (self.group0()[3] * other.group9()[1])
                    + (self.group1()[2] * other.group9()[0])),
                (-(other.group4()[1] * self.group0()[0]) + (other.group4()[2] * self.group1()[3]) - (self.group0()[3] * other.group9()[2])
                    + (self.group1()[0] * other.group9()[1])),
                ((other.group4()[1] * self.group0()[1]) + (other.group4()[2] * self.group0()[2]) - (other.group5()[2] * self.group1()[2]) - (self.group1()[3] * other[e45])),
            ]) + (Simd32x4::from([other.group4()[1], other.group4()[2], other.group4()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group3()[3], other.group9()[2], other.group9()[0], other.group5()[0]]) * swizzle!(self.group1(), 0, 0, 1, 0))
                - (Simd32x4::from([other.group9()[1], other.group3()[3], other.group3()[3], other.group5()[1]]) * swizzle!(self.group1(), 2, 1, 2, 1))
                + (Simd32x4::from([other[e45], other[e45], other[e45], other.group4()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))),
            // e423, e431, e412
            ((Simd32x3::from(other[e45]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from([self.group0()[3], self.group0()[3], self.group1()[1]]) * swizzle!(other.group4(), 0, 1, 0))
                - (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group4(), 2, 0, 1))
                + (Simd32x3::from([self.group1()[2], self.group1()[0], self.group0()[3]]) * swizzle!(other.group4(), 1, 2, 2))),
            // e235, e315, e125
            (Simd32x3::from([
                ((self.group0()[1] * other.group9()[2]) - (self.group0()[2] * other.group9()[1]) + (self.group1()[1] * other.group3()[2]) - (self.group1()[2] * other.group3()[1])),
                (-(self.group0()[0] * other.group9()[2]) + (self.group0()[2] * other.group9()[0]) - (self.group1()[0] * other.group3()[2])
                    + (self.group1()[2] * other.group3()[0])),
                ((self.group0()[0] * other.group9()[1]) - (self.group0()[1] * other.group9()[0]) + (self.group1()[0] * other.group3()[1]) - (self.group1()[1] * other.group3()[0])),
            ]) + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from(other.group9()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group5(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group1()[3]]) * swizzle!(other.group5(), 1, 2, 2))
                + (Simd32x3::from([self.group1()[3], self.group1()[3], self.group0()[1]]) * swizzle!(other.group5(), 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[0]) - (other.group7()[1] * self.group0()[2]) - (self.group0()[0] * other.group1()[3])),
                ((other.group0()[1] * self.group1()[1]) - (other.group7()[2] * self.group0()[0]) - (self.group0()[1] * other.group1()[3])),
                ((other.group0()[1] * self.group1()[2]) - (other.group7()[0] * self.group0()[1]) - (self.group0()[2] * other.group1()[3])),
                (-(other.group8()[1] * self.group1()[1]) - (other.group8()[2] * self.group1()[2])
                    + (self.group0()[1] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[2])
                    + (self.group0()[2] * other.group6()[2])
                    + (self.group0()[3] * other[e1])
                    - (self.group1()[3] * other.group6()[3])),
            ]) - (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group0()[1]]))
                + (Simd32x4::from([other.group7()[2], other.group7()[0], other.group7()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[1]]) * swizzle!(other.group6(), 1, 2, 0, 1))
                - (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group8()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (swizzle!(self.group0(), 3, 3, 3, 0) * swizzle!(other.group6(), 0, 1, 2, 0))),
            // e1234
            ((other.group7()[0] * self.group1()[0]) + (other.group7()[1] * self.group1()[1]) + (other.group7()[2] * self.group1()[2]) - (self.group0()[3] * other.group1()[3])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for AntiFlector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       32        0
    //    simd4       11       12        0
    // Totals...
    // yes simd       31       44        0
    //  no simd       64       80        0
    fn sandwich(self, other: Plane) -> Self::Output {
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from([
                (-(self.group0()[3] * other.group0()[0]) - (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[3] * other.group0()[1]) - (self.group1()[0] * other.group0()[2])),
                (-(self.group0()[3] * other.group0()[2]) - (self.group1()[1] * other.group0()[0])),
                ((self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group1()[0] * other.group0()[3]) - (self.group1()[3] * other.group0()[0])),
                (-(self.group1()[1] * other.group0()[3]) - (self.group1()[3] * other.group0()[1])),
                (-(self.group1()[2] * other.group0()[3]) - (self.group1()[3] * other.group0()[2])),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]) + (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       61      103        0
    //    simd4       19       20        0
    // Totals...
    // yes simd       80      123        0
    //  no simd      137      183        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3] * -1.0),
                (self.group1()[1] * other.group0()[3] * -1.0),
                (self.group1()[2] * other.group0()[3] * -1.0),
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2]) - (self.group1()[3] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group0()[3] * other.group0()[0]) + (self.group1()[1] * other.group0()[2])
                    - (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[1] * other.group0()[3]) - (self.group0()[3] * other.group0()[1]) - (self.group1()[0] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group0()[2]) + (self.group1()[0] * other.group0()[1])
                    - (self.group1()[1] * other.group0()[0])),
                (self.group1()[3] * other.group0()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (self.group1()[0] * other[e2]) - (self.group1()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0]) + (self.group1()[1] * other[e2]) - (self.group1()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group1()[2] * other[e2]) - (self.group1()[3] * other.group0()[2])),
                (self.group0()[3] * other.group0()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other[e2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for AntiFlector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       16        0
    //    simd4        8       11        0
    // Totals...
    // yes simd       16       27        0
    //  no simd       40       60        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from(other[scalar]) * self.group0()),
            // e1, e2, e3, e5
            (Simd32x4::from(other[scalar]) * self.group1()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       43       61        0
    //    simd4       25       29        0
    // Totals...
    // yes simd       68       90        0
    //  no simd      143      177        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group1()[0] * other[e4315]),
                (self.group1()[1] * other[e4315]),
                (self.group1()[2] * other[e4315]),
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2]) + (self.group1()[3] * other[e4315])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other[e4315]) - (self.group0()[3] * other.group0()[0]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
                ((self.group0()[1] * other[e4315]) - (self.group0()[3] * other.group0()[1]) - (self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[2] * other[e4315]) - (self.group0()[3] * other.group0()[2]) + (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])),
                (self.group1()[3] * other[e4315] * -1.0),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group1()[0] * other.group0()[3]) - (self.group1()[3] * other.group0()[0])),
                (-(self.group1()[1] * other.group0()[3]) - (self.group1()[3] * other.group0()[1])),
                (-(self.group1()[2] * other.group0()[3]) - (self.group1()[3] * other.group0()[2])),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]) + (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))),
            // e1, e2, e3, e4
            (Simd32x4::from(other[e4315]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       81      118        0
    //    simd4       36       37        0
    // Totals...
    // yes simd      117      155        0
    //  no simd      225      266        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group1()[2] * other.group0()[1]) * -1.0),
                ((self.group1()[1] * other.group3()[3]) * -1.0),
                ((self.group1()[2] * other.group3()[3]) * -1.0),
                ((self.group0()[1] * other.group0()[1])
                    + (self.group0()[2] * other.group0()[2])
                    + (self.group1()[0] * other.group3()[0])
                    + (self.group1()[1] * other.group3()[1])
                    + (self.group1()[2] * other.group3()[2])),
            ]) - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group3()[3], other.group0()[2], other.group0()[0], other.group3()[3]]) * swizzle!(self.group1(), 0, 0, 1, 3))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(self.group0()[2] * other.group0()[1]) - (self.group0()[3] * other.group3()[0]) + (self.group1()[1] * other.group3()[2])),
                (-(self.group0()[0] * other.group0()[2]) - (self.group0()[3] * other.group3()[1]) + (self.group1()[2] * other.group3()[0])),
                (-(self.group0()[1] * other.group0()[0]) - (self.group0()[3] * other.group3()[2]) + (self.group1()[0] * other.group3()[1])),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
            ]) - (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]) * swizzle!(self.group1(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group1()[0]]) * swizzle!(self.group1(), 0, 0, 1, 0))
                - (Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group1()[1]]) * swizzle!(self.group1(), 2, 1, 2, 1))
                + (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) + (self.group0()[1] * other.group3()[2])
                    - (self.group0()[2] * other.group1()[1])
                    - (self.group0()[2] * other.group3()[1])
                    + (self.group0()[3] * other.group2()[0])
                    - (self.group1()[1] * other.group2()[2])
                    - (self.group1()[3] * other.group1()[0])
                    - (self.group1()[3] * other.group3()[0])),
                (-(self.group0()[0] * other.group3()[2]) - (self.group0()[1] * other.group0()[3]) - (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[2] * other.group3()[0])
                    + (self.group0()[3] * other.group2()[1])
                    - (self.group1()[2] * other.group2()[0])
                    - (self.group1()[3] * other.group1()[1])
                    - (self.group1()[3] * other.group3()[1])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group3()[1])
                    - (self.group0()[1] * other.group3()[0])
                    - (self.group0()[2] * other.group0()[3])
                    - (self.group0()[2] * other.group1()[3])
                    + (self.group0()[3] * other.group2()[2])
                    - (self.group1()[0] * other.group2()[1])
                    - (self.group1()[3] * other.group1()[2])
                    - (self.group1()[3] * other.group3()[2])),
                (self.group1()[2] * other.group0()[2]),
            ]) - (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group3()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))
                + (Simd32x4::from([other.group2()[1], other.group2()[3], other.group2()[3], other.group0()[1]]) * swizzle!(self.group1(), 2, 1, 2, 1))
                + (Simd32x4::from([other.group2()[3], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 0, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[0] * other.group3()[3]) + (self.group1()[0] * other.group0()[3])),
                (-(self.group0()[1] * other.group3()[3]) + (self.group1()[1] * other.group0()[3])),
                (-(self.group0()[2] * other.group3()[3]) + (self.group1()[2] * other.group0()[3])),
                ((self.group0()[1] * other.group3()[1]) + (self.group0()[2] * other.group1()[2]) + (self.group0()[2] * other.group3()[2]) + (self.group0()[3] * other.group2()[3])
                    - (self.group1()[2] * other.group2()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[1]]) * swizzle!(self.group1(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       52       72        0
    //    simd4       45       47        0
    // Totals...
    // yes simd       97      119        0
    //  no simd      232      260        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[3] * other.group1()[3])
                    + (self.group1()[2] * other.group3()[2])
                    + (self.group1()[3] * other.group2()[3])),
            ]) - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group3()[1]]) * swizzle!(self.group1(), 2, 1, 2, 1))
                + (Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group1(), 0, 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) - (self.group0()[3] * other.group3()[0]) + (self.group1()[1] * other.group3()[2])),
                (-(self.group0()[2] * other.group0()[0]) - (self.group0()[3] * other.group3()[1]) + (self.group1()[2] * other.group3()[0])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group0()[3] * other.group3()[2]) + (self.group1()[0] * other.group3()[1])),
                ((self.group0()[3] * other.group0()[3]) - (self.group1()[2] * other.group1()[2]) - (self.group1()[3] * other.group2()[3])),
            ]) + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[2]]) * swizzle!(other.group0(), 0, 1, 2, 2))
                + (Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group0()[1]]) * swizzle!(self.group0(), 2, 1, 2, 1))
                - (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group1()[0]]) * swizzle!(self.group1(), 0, 0, 1, 0))
                + (Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group0(), 0, 0, 1, 0))
                - (Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group1()[1]]) * swizzle!(self.group1(), 2, 1, 2, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group1()[2] * other.group2()[1]) - (self.group1()[3] * other.group3()[0])),
                (-(self.group1()[1] * other.group3()[3]) - (self.group1()[3] * other.group3()[1])),
                (-(self.group1()[2] * other.group3()[3]) - (self.group1()[3] * other.group3()[2])),
                ((self.group1()[2] * other.group2()[2]) + (self.group1()[3] * other.group0()[3])),
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[3], other.group1()[2], other.group3()[1], other.group3()[0]]))
                - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group1()[0]]))
                - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group1()[1]]))
                + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group3()[2], other.group0()[3], other.group1()[0], other.group3()[1]]))
                + (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group0()[3], other.group3()[2]]))
                - (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group1()[2]]))
                - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[1]]) * swizzle!(self.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group3()[3], other.group2()[2], other.group2()[0], other.group1()[3]]) * swizzle!(self.group1(), 0, 0, 1, 3))
                + (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group2(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group0()[0] * other.group2()[3])
                    + (self.group0()[3] * other.group1()[0])
                    + (self.group1()[0] * other.group0()[3])
                    + (self.group1()[2] * other.group1()[1])),
                (-(self.group0()[1] * other.group2()[3])
                    + (self.group0()[3] * other.group1()[1])
                    + (self.group1()[0] * other.group1()[2])
                    + (self.group1()[1] * other.group0()[3])),
                (-(self.group0()[2] * other.group2()[3])
                    + (self.group0()[3] * other.group1()[2])
                    + (self.group1()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group0()[3])),
                0.0,
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group0(), 0, 1, 2, 2))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl InfixSandwich for AntiLine {}
impl Sandwich<AntiCircleRotor> for AntiLine {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      110      142        0
    //    simd3        0        2        0
    //    simd4        5        5        0
    // Totals...
    // yes simd      115      149        0
    //  no simd      130      168        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1]) + (self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[1])),
                (-(other.group0()[0] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[0])
                    + (self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group2()[3])
                    - (self.group0()[2] * other.group1()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) - (self.group0()[0] * other.group1()[1])
                    + (self.group0()[1] * other.group1()[0])
                    + (self.group0()[2] * other.group2()[3])),
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group0()[1] * other.group2()[2]) + (self.group0()[2] * other.group2()[1]) - (self.group1()[0] * other.group1()[3])
                    + (self.group1()[0] * other.group2()[3])
                    - (self.group1()[1] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[2] * other.group2()[0]) + (self.group1()[0] * other.group1()[2]) - (self.group1()[1] * other.group1()[3])
                    + (self.group1()[1] * other.group2()[3])
                    - (self.group1()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0]) - (self.group1()[0] * other.group1()[1])
                    + (self.group1()[1] * other.group1()[0])
                    - (self.group1()[2] * other.group1()[3])
                    + (self.group1()[2] * other.group2()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1]) + (self.group0()[0] * other.group1()[3])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group1()[0]) + (self.group0()[1] * other.group1()[3])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) + (self.group0()[2] * other.group1()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for AntiLine {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      102      134        0
    //    simd3        0        2        0
    //    simd4       13       13        0
    // Totals...
    // yes simd      115      149        0
    //  no simd      154      192        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) + (self.group0()[0] * other.group2()[3])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0]) + (self.group0()[1] * other.group2()[3])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) + (self.group0()[2] * other.group2()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1]) - (self.group0()[1] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[1])
                    + (self.group1()[0] * other.group2()[3])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group1()[0]) + (self.group0()[0] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[0])
                    + (self.group1()[1] * other.group2()[3])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) - (self.group0()[0] * other.group1()[1])
                    + (self.group0()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group2()[3])),
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group3()[0])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group3()[2])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[3])
                    + (self.group0()[2] * other.group2()[1])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[2] * other.group1()[1])
                    + (self.group1()[2] * other.group3()[1])),
                ((self.group0()[0] * other.group2()[2])
                    + (self.group0()[1] * other.group3()[3])
                    + (self.group1()[0] * other.group1()[2])
                    + (self.group1()[0] * other.group3()[2])
                    + (self.group1()[1] * other.group1()[3])),
                ((self.group0()[1] * other.group2()[0])
                    + (self.group0()[2] * other.group3()[3])
                    + (self.group1()[1] * other.group1()[0])
                    + (self.group1()[1] * other.group3()[0])
                    + (self.group1()[2] * other.group1()[3])),
                (-(self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[1] * other.group3()[1])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[2] * other.group3()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group1()[0]]) * swizzle!(other.group3(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) + (self.group0()[0] * other.group1()[3])
                    - (self.group0()[1] * other.group3()[2])
                    + (self.group0()[2] * other.group3()[1])
                    - (self.group1()[0] * other.group2()[3])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0]) + (self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group1()[3])
                    - (self.group0()[2] * other.group3()[0])
                    - (self.group1()[1] * other.group2()[3])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) - (self.group0()[0] * other.group3()[1])
                    + (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group1()[3])
                    - (self.group1()[2] * other.group2()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for AntiLine {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       69       94        0
    //    simd3        0        3        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       71       99        0
    //  no simd       77      111        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other.group0()[0]) * self.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[2])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group1()[0]),
                (other.group0()[1] * self.group1()[1]),
                (other.group0()[1] * self.group1()[2]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group1()[0]),
                (other.group0()[0] * self.group1()[1]),
                (other.group0()[0] * self.group1()[2]),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for AntiLine {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       43        0
    //    simd3        0        2        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       30       47        0
    //  no simd       36       57        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1]) + (self.group1()[0] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3])),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for AntiLine {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       56        0
    //    simd3        0        2        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       44       62        0
    //  no simd       56       78        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group0()[2])
                    + (self.group0()[2] * other.group0()[1])
                    + (self.group1()[0] * other.group0()[3])
                    + (self.group1()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group0()[0])
                    + (self.group1()[0] * other.group1()[2])
                    + (self.group1()[1] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[1])
                    + (self.group0()[1] * other.group0()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group1()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group0()[3])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[3])),
                ((self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for AntiLine {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       35       51        0
    //    simd3        0        2        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       38       56        0
    //  no simd       47       69        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1]) + (other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group1()[0]) - (other.group1()[0] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) + (other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for AntiLine {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       48        0
    //    simd3        0        2        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       38       56        0
    //  no simd       56       78        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[3])),
                ((self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[2] * other.group1()[1]) + (self.group1()[0] * other.group0()[3]) + (self.group1()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3]) + (self.group1()[0] * other.group0()[2]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[3]) + (self.group1()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3])),
                (-(self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for AntiLine {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       25       41        0
    //    simd3        0        2        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       29       47        0
    //  no simd       41       63        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[2] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[3]) + (self.group1()[0] * other.group0()[2])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[1] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                (self.group0()[2] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (self.group0()[1] * other.group0()[0]),
                (-(self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for AntiLine {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       27        0
    //    simd3        0        4        0
    // Totals...
    // yes simd       19       31        0
    //  no simd       19       39        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Line::from_groups(
            // e415, e425, e435
            (Simd32x3::from(other[e12345]) * self.group0()),
            // e235, e315, e125
            (Simd32x3::from(other[e12345]) * self.group1()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for AntiLine {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       80      112        0
    //    simd3        0        2        0
    //    simd4       11       11        0
    // Totals...
    // yes simd       91      125        0
    //  no simd      124      162        0
    fn sandwich(self, other: Circle) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1]) - (self.group1()[1] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0]) + (self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) - (self.group1()[0] * other.group0()[1])
                    + (self.group1()[1] * other.group0()[0])),
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group0()[1] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[1])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[2] * other.group2()[0]) + (self.group1()[0] * other.group1()[2]) + (self.group1()[1] * other.group1()[3])),
                (-(self.group0()[0] * other.group2()[1])
                    + (self.group0()[1] * other.group2()[0])
                    + (self.group1()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group1()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
                ((self.group0()[1] * other.group1()[3]) - (self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[2] * other.group1()[3]) + (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for AntiLine {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       82      114        0
    //    simd3        0        2        0
    //    simd4       12       12        0
    // Totals...
    // yes simd       94      128        0
    //  no simd      130      168        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1]) - (self.group1()[1] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group2()[3]) - (self.group0()[2] * other.group1()[0]) + (self.group1()[0] * other.group0()[2])
                    - (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group2()[3])
                    - (self.group1()[0] * other.group0()[1])
                    + (self.group1()[1] * other.group0()[0])),
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group0()[2] * other.group2()[1]) + (self.group1()[0] * other.group1()[3]) + (self.group1()[0] * other.group2()[3]) + (self.group1()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group1()[0] * other.group1()[2]) + (self.group1()[1] * other.group1()[3]) + (self.group1()[1] * other.group2()[3])),
                ((self.group0()[1] * other.group2()[0]) + (self.group1()[1] * other.group1()[0]) + (self.group1()[2] * other.group1()[3]) + (self.group1()[2] * other.group2()[3])),
                (-(self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
                ((self.group0()[1] * other.group1()[3]) - (self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[2] * other.group1()[3]) + (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for AntiLine {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      104      136        0
    //    simd3        0        2        0
    //    simd4        5        5        0
    // Totals...
    // yes simd      109      143        0
    //  no simd      124      162        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1]) - (self.group1()[1] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0]) + (self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) - (self.group1()[0] * other.group0()[1])
                    + (self.group1()[1] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group0()[1] * other.group2()[2]) + (self.group0()[2] * other.group2()[1])
                    - (self.group1()[0] * other.group1()[3])
                    - (self.group1()[1] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[2] * other.group2()[0]) + (self.group1()[0] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[3])
                    - (self.group1()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0]) - (self.group1()[0] * other.group1()[1])
                    + (self.group1()[1] * other.group1()[0])
                    - (self.group1()[2] * other.group1()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group0()[1] * other.group1()[3]) + (self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                ((self.group0()[2] * other.group1()[3]) - (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for AntiLine {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      130      162        0
    //    simd3        0        2        0
    //    simd4        6        6        0
    // Totals...
    // yes simd      136      170        0
    //  no simd      154      192        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group2()[3]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group2()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1]) + (self.group1()[0] * other.group2()[3])
                    - (self.group1()[1] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0]) + (self.group1()[0] * other.group0()[2]) + (self.group1()[1] * other.group2()[3])
                    - (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) - (self.group1()[0] * other.group0()[1])
                    + (self.group1()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group2()[3])),
                (-(self.group0()[0] * other.group3()[0])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group3()[2])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) - (self.group0()[1] * other.group2()[2]) + (self.group0()[2] * other.group2()[1])
                    - (self.group1()[0] * other.group1()[3])
                    - (self.group1()[1] * other.group1()[2])
                    + (self.group1()[1] * other.group3()[2])
                    + (self.group1()[2] * other.group1()[1])
                    - (self.group1()[2] * other.group3()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group3()[3]) - (self.group0()[2] * other.group2()[0]) + (self.group1()[0] * other.group1()[2])
                    - (self.group1()[0] * other.group3()[2])
                    - (self.group1()[1] * other.group1()[3])
                    - (self.group1()[2] * other.group1()[0])
                    + (self.group1()[2] * other.group3()[0])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0]) + (self.group0()[2] * other.group3()[3])
                    - (self.group1()[0] * other.group1()[1])
                    + (self.group1()[0] * other.group3()[1])
                    + (self.group1()[1] * other.group1()[0])
                    - (self.group1()[1] * other.group3()[0])
                    - (self.group1()[2] * other.group1()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group3()[2]) + (self.group1()[0] * other.group2()[3]) - (self.group1()[1] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[1])),
                ((self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group3()[0]) + (self.group1()[0] * other.group0()[2]) + (self.group1()[1] * other.group2()[3])
                    - (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group3()[1]) + (self.group0()[2] * other.group1()[3]) - (self.group1()[0] * other.group0()[1])
                    + (self.group1()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group2()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    + (self.group1()[1] * other.group3()[1])
                    - (self.group1()[2] * other.group1()[2])
                    + (self.group1()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for AntiLine {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       53       81        0
    //    simd3        0        3        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       59       90        0
    //  no simd       77      114        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other.group0()[0]) * self.group0()),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[2])),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (other.group0()[1] * self.group1()[0]),
                (other.group0()[1] * self.group1()[1]),
                (other.group0()[1] * self.group1()[2]),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[0] * self.group1()[0] * -1.0),
                (other.group0()[0] * self.group1()[1] * -1.0),
                (other.group0()[0] * self.group1()[2] * -1.0),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for AntiLine {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       43        0
    //    simd3        0        2        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       30       47        0
    //  no simd       36       57        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1]) - (self.group1()[0] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0]) - (self.group1()[1] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) - (self.group1()[2] * other.group0()[3])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for AntiLine {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       56        0
    //    simd3        0        2        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       44       62        0
    //  no simd       56       78        0
    fn sandwich(self, other: Flector) -> Self::Output {
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1]) - (self.group1()[0] * other.group0()[3])
                    + (self.group1()[1] * other.group1()[2])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group0()[0]) - (self.group1()[1] * other.group0()[3])
                    + (self.group1()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group0()[1])
                    + (self.group0()[1] * other.group0()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[2] * other.group0()[3])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group1()[2])),
                ((self.group0()[1] * other.group0()[3]) - (self.group0()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for AntiLine {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       35       51        0
    //    simd3        0        2        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       38       56        0
    //  no simd       47       69        0
    fn sandwich(self, other: Line) -> Self::Output {
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1]) - (self.group1()[1] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0]) + (self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) - (self.group1()[0] * other.group0()[1])
                    + (self.group1()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for AntiLine {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       48        0
    //    simd3        0        2        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       38       56        0
    //  no simd       56       78        0
    fn sandwich(self, other: Motor) -> Self::Output {
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[3])),
                ((self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[2] * other.group1()[1]) + (self.group1()[0] * other.group0()[3]) + (self.group1()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3]) + (self.group1()[0] * other.group0()[2]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[3]) + (self.group1()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3])),
                (-(self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for AntiLine {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      174      210        0
    //    simd2       10       12        0
    //    simd3       34       44        0
    //    simd4        6        6        0
    // Totals...
    // yes simd      224      272        0
    //  no simd      320      390        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (-(Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group5()[0], other.group6()[0]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group5()[1], other.group6()[1]]))
                - (Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group5()[2], other.group6()[2]]))
                - (Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group4()[0], other.group7()[0]]))
                - (Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group4()[1], other.group7()[1]]))
                - (Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group4()[2], other.group7()[2]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group6()[3]) - (self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1]) - (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group7()[2])
                    - (self.group1()[2] * other.group7()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group6()[3])
                    - (self.group0()[2] * other.group1()[0])
                    - (self.group1()[0] * other.group7()[2])
                    - (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group7()[0])),
                (-(self.group0()[0] * other.group1()[1])
                    + (self.group0()[1] * other.group1()[0])
                    + (self.group0()[2] * other.group6()[3])
                    + (self.group1()[0] * other.group7()[1])
                    - (self.group1()[1] * other.group7()[0])
                    - (self.group1()[2] * other.group1()[3])),
                (-(self.group0()[0] * other.group7()[0]) - (self.group0()[1] * other.group7()[1]) - (self.group0()[2] * other.group7()[2])),
            ]),
            // e5
            (-(self.group0()[0] * other.group8()[0])
                - (self.group0()[1] * other.group8()[1])
                - (self.group0()[2] * other.group8()[2])
                - (self.group1()[0] * other.group1()[0])
                - (self.group1()[0] * other.group6()[0])
                - (self.group1()[1] * other.group1()[1])
                - (self.group1()[1] * other.group6()[1])
                - (self.group1()[2] * other.group1()[2])
                - (self.group1()[2] * other.group6()[2])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (self.group0()[0] * other.group9()[3]) - (self.group0()[1] * other.group3()[2])
                    + (self.group0()[2] * other.group3()[1])
                    + (self.group1()[1] * other.group9()[2])
                    + (self.group1()[2] * other.group5()[1])),
                ((other.group0()[0] * self.group1()[1]) + (self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group9()[3]) - (self.group0()[2] * other.group3()[0])
                    + (self.group1()[0] * other.group5()[2])
                    + (self.group1()[2] * other.group9()[0])),
                ((other.group0()[0] * self.group1()[2]) - (self.group0()[0] * other.group3()[1])
                    + (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group9()[3])
                    + (self.group1()[0] * other.group9()[1])
                    + (self.group1()[1] * other.group5()[0])),
                (-(self.group0()[0] * other.group9()[0]) - (self.group0()[1] * other.group9()[1]) - (self.group0()[2] * other.group9()[2])),
            ]) - (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group3()[3], other.group9()[2], other.group5()[1], other.group4()[0]]))
                - (Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group5()[2], other.group3()[3], other.group9()[0], other.group4()[1]]))
                - (Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group9()[1], other.group5()[0], other.group3()[3], other.group4()[2]]))),
            // e41, e42, e43
            ((Simd32x3::from([other.group4()[1], other[e45], other[e45]]) * swizzle!(self.group0(), 2, 1, 2))
                + (Simd32x3::from([other[e45], other.group4()[2], other.group4()[0]]) * swizzle!(self.group0(), 0, 0, 1))
                - (swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group4(), 2, 0, 1))),
            // e23, e31, e12
            ((Simd32x3::from(other.group0()[0]) * self.group0())
                + (Simd32x3::from([other.group4()[1], other[e45], other[e45]]) * swizzle!(self.group1(), 2, 1, 2))
                + (Simd32x3::from([other[e45], other.group4()[2], other.group4()[0]]) * swizzle!(self.group1(), 0, 0, 1))
                - (swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group5(), 2, 0, 1))
                + (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group5(), 1, 2, 0))
                - (swizzle!(self.group1(), 1, 2, 0) * swizzle!(other.group4(), 2, 0, 1))),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[0]) - (self.group0()[1] * other.group6()[2]) + (self.group0()[2] * other.group6()[1]) + (self.group1()[0] * other.group1()[3])
                    - (self.group1()[1] * other.group7()[2])
                    + (self.group1()[2] * other.group7()[1])),
                ((other.group0()[1] * self.group0()[1]) + (self.group0()[0] * other.group6()[2]) - (self.group0()[2] * other.group6()[0])
                    + (self.group1()[0] * other.group7()[2])
                    + (self.group1()[1] * other.group1()[3])
                    - (self.group1()[2] * other.group7()[0])),
                ((other.group0()[1] * self.group0()[2]) - (self.group0()[0] * other.group6()[1]) + (self.group0()[1] * other.group6()[0]) - (self.group1()[0] * other.group7()[1])
                    + (self.group1()[1] * other.group7()[0])
                    + (self.group1()[2] * other.group1()[3])),
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])
                    + (self.group1()[0] * other.group7()[0])
                    + (self.group1()[1] * other.group7()[1])
                    + (self.group1()[2] * other.group7()[2])),
            ]),
            // e423, e431, e412
            ((Simd32x3::from([other.group7()[1], other.group1()[3], other.group1()[3]]) * swizzle!(self.group0(), 2, 1, 2))
                + (Simd32x3::from([other.group1()[3], other.group7()[2], other.group7()[0]]) * swizzle!(self.group0(), 0, 0, 1))
                - (swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group7(), 2, 0, 1))),
            // e235, e315, e125
            ((Simd32x3::from(other.group0()[1]) * self.group1())
                + (Simd32x3::from([other.group8()[1], other[e1], other[e1]]) * swizzle!(self.group0(), 2, 1, 2))
                + (Simd32x3::from([other.group1()[1], other.group6()[2], other.group6()[0]]) * swizzle!(self.group1(), 2, 0, 1))
                - (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]) * swizzle!(self.group1(), 1, 2, 0))
                + (Simd32x3::from([other.group6()[1], other.group6()[3], other.group6()[3]]) * swizzle!(self.group1(), 2, 1, 2))
                - (Simd32x3::from([other.group6()[2], other.group6()[0], other.group6()[1]]) * swizzle!(self.group1(), 1, 2, 0))
                + (Simd32x3::from([other.group6()[3], other.group1()[2], other.group1()[0]]) * swizzle!(self.group1(), 0, 0, 1))
                + (Simd32x3::from([other[e1], other.group8()[2], other.group8()[0]]) * swizzle!(self.group0(), 0, 0, 1))
                - (swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group8(), 2, 0, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) - (self.group0()[1] * other.group9()[2]) + (self.group1()[0] * other[e45]) - (self.group1()[1] * other.group4()[2])
                    + (self.group1()[2] * other.group4()[1])),
                ((self.group0()[1] * other.group3()[3]) - (self.group0()[2] * other.group9()[0]) + (self.group1()[0] * other.group4()[2]) + (self.group1()[1] * other[e45])
                    - (self.group1()[2] * other.group4()[0])),
                (-(self.group0()[0] * other.group9()[1]) + (self.group0()[2] * other.group3()[3]) - (self.group1()[0] * other.group4()[1])
                    + (self.group1()[1] * other.group4()[0])
                    + (self.group1()[2] * other[e45])),
                (-(self.group0()[0] * other.group3()[0])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group3()[2])
                    - (self.group1()[0] * other.group5()[0])
                    - (self.group1()[1] * other.group5()[1])
                    + (self.group1()[1] * other.group9()[1])
                    - (self.group1()[2] * other.group5()[2])
                    + (self.group1()[2] * other.group9()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group9(), 1, 2, 0, 0))),
            // e1234
            (-(self.group0()[0] * other.group4()[0]) - (self.group0()[1] * other.group4()[1]) - (self.group0()[2] * other.group4()[2])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for AntiLine {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       25       44        0
    //    simd3        0        2        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       29       50        0
    //  no simd       41       66        0
    fn sandwich(self, other: Plane) -> Self::Output {
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2])),
                ((self.group0()[1] * other.group0()[3]) + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) * -1.0),
                ((self.group0()[2] * other.group0()[0]) * -1.0),
                ((self.group0()[0] * other.group0()[1]) * -1.0),
                ((self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for AntiLine {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       58       86        0
    //    simd3        0        3        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       66       97        0
    //  no simd       90      127        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other.group0()[3]) * self.group0()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                ((self.group0()[0] * other[e2]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group0()[1] * other[e2]) + (self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                ((self.group0()[2] * other[e2]) - (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                0.0,
            ]),
            // e1, e2, e3, e5
            (Simd32x4::from([
                (self.group0()[2] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (self.group0()[1] * other.group0()[0]),
                ((self.group1()[2] * other.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group1()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for AntiLine {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       27        0
    //    simd3        0        4        0
    // Totals...
    // yes simd       19       31        0
    //  no simd       19       39        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiLine::from_groups(
            // e23, e31, e12
            (Simd32x3::from(other[scalar]) * self.group0()),
            // e15, e25, e35
            (Simd32x3::from(other[scalar]) * self.group1()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for AntiLine {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       78      105        0
    //    simd3        0        3        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       81      111        0
    //  no simd       90      126        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other[e4315]) * self.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group1()[0] * other[e4315]),
                (self.group1()[1] * other[e4315]),
                (self.group1()[2] * other[e4315]),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[3]) - (self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group1()[0] * other[e4315])),
                (-(self.group0()[2] * other.group0()[0]) + (self.group1()[1] * other[e4315])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group1()[2] * other[e4315])),
                ((self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for AntiLine {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       92      124        0
    //    simd3        0        2        0
    //    simd4       17       17        0
    // Totals...
    // yes simd      109      143        0
    //  no simd      160      198        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group3()[3])),
                ((self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group3()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1]) + (self.group1()[0] * other.group3()[3])
                    - (self.group1()[1] * other.group0()[2])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0]) + (self.group1()[1] * other.group3()[3]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) - (self.group1()[0] * other.group0()[1])
                    + (self.group1()[2] * other.group3()[3])),
                (-(self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group3()[1]) - (self.group0()[2] * other.group3()[2])
                    + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group1()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group0()[0] * other.group2()[3])
                    + (self.group0()[2] * other.group2()[1])
                    + (self.group1()[0] * other.group0()[3])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[2] * other.group1()[1])
                    + (self.group1()[2] * other.group3()[1])),
                ((self.group0()[0] * other.group2()[2])
                    + (self.group0()[1] * other.group2()[3])
                    + (self.group1()[0] * other.group1()[2])
                    + (self.group1()[0] * other.group3()[2])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group1()[1] * other.group1()[3])),
                ((self.group0()[1] * other.group2()[0])
                    + (self.group0()[2] * other.group2()[3])
                    + (self.group1()[1] * other.group1()[0])
                    + (self.group1()[1] * other.group3()[0])
                    + (self.group1()[2] * other.group0()[3])
                    + (self.group1()[2] * other.group1()[3])),
                (-(self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[1] * other.group3()[1])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[2] * other.group3()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group1()[0]]) * swizzle!(other.group3(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group3()[2]) + (self.group0()[2] * other.group3()[1]) - (self.group1()[0] * other.group3()[3])
                    + (self.group1()[1] * other.group0()[2])),
                ((self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group3()[0]) - (self.group1()[1] * other.group3()[3])
                    + (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group3()[1])
                    + (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group1()[0] * other.group0()[1])
                    - (self.group1()[2] * other.group3()[3])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for AntiLine {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      128      160        0
    //    simd3        0        2        0
    //    simd4        8        8        0
    // Totals...
    // yes simd      136      170        0
    //  no simd      160      198        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group2()[3])),
                ((self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group2()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[1])
                    + (self.group1()[0] * other.group2()[3])
                    + (self.group1()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[3]) - (self.group0()[2] * other.group1()[0])
                    + (self.group1()[0] * other.group0()[2])
                    + (self.group1()[1] * other.group2()[3])),
                (-(self.group0()[0] * other.group1()[1])
                    + (self.group0()[1] * other.group1()[0])
                    + (self.group0()[2] * other.group0()[3])
                    + (self.group1()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group2()[3])),
                (-(self.group0()[0] * other.group3()[0])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group3()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) - (self.group0()[1] * other.group2()[2]) + (self.group0()[2] * other.group2()[1]) + (self.group1()[0] * other.group0()[3])
                    - (self.group1()[0] * other.group1()[3])
                    - (self.group1()[1] * other.group1()[2])
                    + (self.group1()[1] * other.group3()[2])
                    + (self.group1()[2] * other.group1()[1])
                    - (self.group1()[2] * other.group3()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group3()[3]) - (self.group0()[2] * other.group2()[0]) + (self.group1()[0] * other.group1()[2])
                    - (self.group1()[0] * other.group3()[2])
                    + (self.group1()[1] * other.group0()[3])
                    - (self.group1()[1] * other.group1()[3])
                    - (self.group1()[2] * other.group1()[0])
                    + (self.group1()[2] * other.group3()[0])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0]) + (self.group0()[2] * other.group3()[3])
                    - (self.group1()[0] * other.group1()[1])
                    + (self.group1()[0] * other.group3()[1])
                    + (self.group1()[1] * other.group1()[0])
                    - (self.group1()[1] * other.group3()[0])
                    + (self.group1()[2] * other.group0()[3])
                    - (self.group1()[2] * other.group1()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group3()[2]) + (self.group1()[0] * other.group2()[3]) - (self.group1()[1] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[1])),
                ((self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group3()[0]) + (self.group1()[0] * other.group0()[2]) + (self.group1()[1] * other.group2()[3])
                    - (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group3()[1]) + (self.group0()[2] * other.group1()[3]) - (self.group1()[0] * other.group0()[1])
                    + (self.group1()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group2()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    + (self.group1()[1] * other.group3()[1])
                    - (self.group1()[2] * other.group1()[2])
                    + (self.group1()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl InfixSandwich for AntiMotor {}
impl Sandwich<AntiCircleRotor> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       92      130        0
    //    simd4       23       23        0
    // Totals...
    // yes simd      115      153        0
    //  no simd      184      222        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (other.group0()[1] * self.group0()[2]),
                (other.group0()[2] * self.group0()[0]),
                (other.group0()[2] * self.group0()[3]),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group2()[3]]) * swizzle!(self.group0(), 3, 3, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group1()[2]) + (other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1])
                    + (other.group2()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group1()[3]) + (other.group0()[2] * self.group1()[0]) - (other.group1()[0] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[0])
                    + (other.group2()[3] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[2] * self.group1()[3]) - (other.group1()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group0()[3])
                    + (other.group2()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (swizzle!(other.group1(), 0, 1, 0, 3) * swizzle!(self.group0(), 3, 3, 1, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group1()[0] * self.group1()[3]) + (other.group1()[1] * self.group1()[2]) - (other.group1()[2] * self.group1()[1]) - (other.group1()[3] * self.group1()[0])
                    + (other.group2()[0] * self.group0()[3])
                    + (other.group2()[1] * self.group0()[2])
                    + (other.group2()[3] * self.group1()[0])),
                (-(other.group1()[0] * self.group1()[2]) + (other.group1()[1] * self.group1()[3]) + (other.group1()[2] * self.group1()[0])
                    - (other.group1()[3] * self.group1()[1])
                    + (other.group2()[1] * self.group0()[3])
                    + (other.group2()[2] * self.group0()[0])
                    + (other.group2()[3] * self.group1()[1])),
                ((other.group1()[0] * self.group1()[1]) - (other.group1()[1] * self.group1()[0]) + (other.group1()[2] * self.group1()[3]) - (other.group1()[3] * self.group1()[2])
                    + (other.group2()[0] * self.group0()[1])
                    + (other.group2()[2] * self.group0()[3])
                    + (other.group2()[3] * self.group1()[2])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[2] * self.group1()[0]) + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group1()[3]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group2()[3]]) * swizzle!(self.group1(), 3, 3, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       80      119        0
    //    simd4       34       34        0
    // Totals...
    // yes simd      114      153        0
    //  no simd      216      255        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group0()[2])),
                ((other.group0()[1] * self.group0()[3]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (other.group1()[1] * self.group0()[2]),
                (other.group1()[2] * self.group0()[0]),
                (other.group1()[2] * self.group0()[3]),
                (-(other.group3()[1] * self.group0()[1]) - (other.group3()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 1, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[2], other.group0()[1]]) * swizzle!(self.group1(), 2, 0, 3, 1))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group3()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[2]]) * swizzle!(self.group1(), 0, 1, 2, 2))
                + (swizzle!(other.group1(), 0, 1, 0, 3) * swizzle!(self.group0(), 3, 3, 1, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group1()[1] * self.group1()[2])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group2()[1] * self.group0()[2])
                    + (other.group3()[0] * self.group1()[3])
                    + (other.group3()[1] * self.group1()[2])
                    + (other.group3()[3] * self.group0()[0])),
                ((other.group1()[2] * self.group1()[0])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group2()[2] * self.group0()[0])
                    + (other.group3()[1] * self.group1()[3])
                    + (other.group3()[2] * self.group1()[0])
                    + (other.group3()[3] * self.group0()[1])),
                ((other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])
                    + (other.group2()[2] * self.group0()[3])
                    + (other.group3()[0] * self.group1()[1])
                    + (other.group3()[2] * self.group1()[3])
                    + (other.group3()[3] * self.group0()[2])),
                (-(other.group1()[2] * self.group1()[2])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (other.group3()[0] * self.group1()[0])
                    - (other.group3()[1] * self.group1()[1])
                    - (other.group3()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[0], other.group3()[3]]) * swizzle!(self.group0(), 3, 3, 1, 3))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))
                + (swizzle!(other.group1(), 0, 1, 0, 3) * swizzle!(self.group1(), 3, 3, 1, 3))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (swizzle!(other.group2(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1])
                    - (other.group2()[3] * self.group1()[0])
                    + (other.group3()[0] * self.group0()[3])
                    + (other.group3()[1] * self.group0()[2])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group1()[0]) - (other.group2()[3] * self.group1()[1])
                    + (other.group3()[1] * self.group0()[3])
                    + (other.group3()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0])
                    - (other.group0()[2] * self.group1()[3])
                    - (other.group2()[3] * self.group1()[2])
                    + (other.group3()[0] * self.group0()[1])
                    + (other.group3()[2] * self.group0()[3])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[3]]) * self.group0())
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       52       86        0
    //    simd4       16       17        0
    // Totals...
    // yes simd       68      103        0
    //  no simd      116      154        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[0] * self.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group1()[0]),
                (other.group0()[1] * self.group1()[1]),
                (other.group0()[1] * self.group1()[2]),
                (other.group0()[0] * self.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]) * self.group1()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for AntiMotor {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       42        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       32       50        0
    //  no simd       56       74        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) + (other.group0()[3] * self.group1()[0])),
                (-(other.group0()[0] * self.group0()[2])
                    + (other.group0()[1] * self.group0()[3])
                    + (other.group0()[2] * self.group0()[0])
                    + (other.group0()[3] * self.group1()[1])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group0()[3]) + (other.group0()[3] * self.group1()[2])),
                (other.group0()[3] * self.group0()[3]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[3] * self.group0()[0]),
                (other.group0()[3] * self.group0()[1]),
                (other.group0()[3] * self.group0()[2]),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])
                    + (other.group0()[3] * self.group1()[3])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for AntiMotor {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       47        0
    //    simd4       14       14        0
    // Totals...
    // yes simd       42       61        0
    //  no simd       84      103        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2])
                    + (other.group0()[3] * self.group1()[0])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[1] * self.group1()[2])
                    + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[0])
                    + (other.group0()[3] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[2] * self.group1()[0])
                    + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group0()[3])
                    + (other.group0()[3] * self.group1()[2])
                    + (other.group1()[0] * self.group1()[1])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group0()[2])),
                ((other.group1()[2] * self.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))
                + (swizzle!(other.group0(), 0, 1, 0, 3) * swizzle!(self.group0(), 3, 3, 1, 3))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                (other.group1()[1] * self.group0()[2]),
                (other.group1()[2] * self.group0()[0]),
                (other.group1()[2] * self.group0()[3]),
                (-(other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (swizzle!(other.group1(), 0, 1, 0, 3) * swizzle!(self.group0(), 3, 3, 1, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for AntiMotor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       54        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       41       63        0
    //  no simd       68       90        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group0()[2])),
                ((other.group0()[1] * self.group0()[3]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group1()[2]) + (other.group1()[0] * self.group0()[3]) + (other.group1()[1] * self.group0()[2])),
                ((other.group0()[1] * self.group1()[3]) + (other.group0()[2] * self.group1()[0]) + (other.group1()[1] * self.group0()[3]) + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[2] * self.group1()[3]) + (other.group1()[0] * self.group0()[1]) + (other.group1()[2] * self.group0()[3])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for AntiMotor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       54        0
    //    simd4       12       12        0
    // Totals...
    // yes simd       44       66        0
    //  no simd       80      102        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) + (other.group0()[3] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[0]) + (other.group0()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group0()[3]) + (other.group0()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) + (swizzle!(other.group0(), 0, 1, 0, 3) * swizzle!(self.group0(), 3, 3, 1, 3))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) + (other.group0()[3] * self.group1()[0]) + (other.group1()[1] * self.group0()[2]) + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[2] * self.group1()[0]) + (other.group0()[3] * self.group1()[1]) + (other.group1()[2] * self.group0()[0]) + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group1()[3]) + (other.group0()[3] * self.group1()[2]) + (other.group1()[2] * self.group0()[3]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) + (swizzle!(other.group0(), 0, 1, 0, 3) * swizzle!(self.group1(), 3, 3, 1, 3))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (swizzle!(other.group1(), 0, 1, 0, 3) * swizzle!(self.group0(), 3, 3, 1, 3))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for AntiMotor {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       38        0
    //    simd4       11       11        0
    // Totals...
    // yes simd       31       49        0
    //  no simd       64       82        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[2] * other.group0()[1]) + (self.group1()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group1()[0] * other.group0()[2]) + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[1] * other.group0()[0]) + (self.group1()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for AntiMotor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       30        0
    //    simd4        6        8        0
    // Totals...
    // yes simd       22       38        0
    //  no simd       40       62        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(other[e12345]) * self.group0()),
            // e235, e315, e125, e5
            (Simd32x4::from(other[e12345]) * self.group1()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       72      111        0
    //    simd4       26       26        0
    // Totals...
    // yes simd       98      137        0
    //  no simd      176      215        0
    fn sandwich(self, other: Circle) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group0()[2])),
                ((other.group0()[1] * self.group0()[3]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[2] * self.group1()[1]) - (self.group0()[1] * other.group1()[2]) + (self.group0()[3] * other.group1()[0])),
                (-(other.group0()[0] * self.group1()[2]) - (self.group0()[2] * other.group1()[0]) + (self.group0()[3] * other.group1()[1])),
                (-(other.group0()[1] * self.group1()[0]) - (self.group0()[0] * other.group1()[1]) + (self.group0()[3] * other.group1()[2])),
                (other.group0()[2] * self.group1()[2]),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 1, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[2], other.group0()[1]]) * swizzle!(self.group1(), 2, 0, 3, 1))
                + (swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group1(), 1, 2, 0, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group2()[0] * self.group0()[3]) + (other.group2()[1] * self.group0()[2]) + (self.group1()[2] * other.group1()[1]) + (self.group1()[3] * other.group1()[0])),
                ((other.group2()[1] * self.group0()[3]) + (other.group2()[2] * self.group0()[0]) + (self.group1()[1] * other.group1()[3]) + (self.group1()[3] * other.group1()[1])),
                ((other.group2()[0] * self.group0()[1]) + (other.group2()[2] * self.group0()[3]) + (self.group1()[2] * other.group1()[3]) + (self.group1()[3] * other.group1()[2])),
                (-(other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (swizzle!(self.group1(), 0, 0, 1, 3) * swizzle!(other.group1(), 3, 2, 0, 3))
                - (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group1(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (self.group0()[0] * other.group1()[3])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group1()[0]) + (self.group0()[1] * other.group1()[3])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) - (other.group0()[2] * self.group1()[3])
                    + (self.group0()[2] * other.group1()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       72      111        0
    //    simd4       28       28        0
    // Totals...
    // yes simd      100      139        0
    //  no simd      184      223        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (other.group0()[1] * self.group0()[2]),
                (other.group0()[2] * self.group0()[0]),
                (other.group0()[2] * self.group0()[3]),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group2()[3]]) * swizzle!(self.group0(), 3, 3, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[2] * self.group1()[1]) - (self.group0()[1] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[1])
                    + (self.group0()[3] * other.group1()[0])),
                (-(other.group0()[0] * self.group1()[2]) + (self.group0()[1] * other.group2()[3]) - (self.group0()[2] * other.group1()[0])
                    + (self.group0()[3] * other.group1()[1])),
                (-(other.group0()[1] * self.group1()[0]) - (self.group0()[0] * other.group1()[1])
                    + (self.group0()[2] * other.group2()[3])
                    + (self.group0()[3] * other.group1()[2])),
                (other.group0()[2] * self.group1()[2]),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 1, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[2], other.group0()[1]]) * swizzle!(self.group1(), 2, 0, 3, 1))
                + (Simd32x4::from([other.group2()[3], other.group1()[2], other.group1()[0], other.group1()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group0()[3] * other.group2()[0]) + (self.group1()[0] * other.group2()[3]) + (self.group1()[2] * other.group1()[1]) + (self.group1()[3] * other.group1()[0])),
                ((self.group0()[3] * other.group2()[1]) + (self.group1()[1] * other.group1()[3]) + (self.group1()[1] * other.group2()[3]) + (self.group1()[3] * other.group1()[1])),
                ((self.group0()[3] * other.group2()[2]) + (self.group1()[2] * other.group1()[3]) + (self.group1()[2] * other.group2()[3]) + (self.group1()[3] * other.group1()[2])),
                (-(self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                - (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (swizzle!(self.group1(), 0, 0, 1, 3) * swizzle!(other.group1(), 3, 2, 0, 3))
                - (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group1(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (self.group0()[0] * other.group1()[3])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group1()[0]) + (self.group0()[1] * other.group1()[3])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) - (other.group0()[2] * self.group1()[3])
                    + (self.group0()[2] * other.group1()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       92      130        0
    //    simd4       21       21        0
    // Totals...
    // yes simd      113      151        0
    //  no simd      176      214        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group0()[2])),
                ((other.group0()[1] * self.group0()[3]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group1()[2]) - (self.group0()[1] * other.group1()[2]) + (self.group0()[3] * other.group1()[0])),
                ((other.group0()[1] * self.group1()[3]) + (other.group0()[2] * self.group1()[0]) - (self.group0()[2] * other.group1()[0]) + (self.group0()[3] * other.group1()[1])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[2] * self.group1()[3]) - (self.group0()[0] * other.group1()[1]) + (self.group0()[3] * other.group1()[2])),
                (-(other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group1(), 1, 2, 0, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group2()[0] * self.group0()[3]) + (other.group2()[1] * self.group0()[2]) - (self.group1()[0] * other.group1()[3]) - (self.group1()[1] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[1])
                    + (self.group1()[3] * other.group1()[0])),
                ((other.group2()[1] * self.group0()[3]) + (other.group2()[2] * self.group0()[0]) + (self.group1()[0] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[3])
                    - (self.group1()[2] * other.group1()[0])
                    + (self.group1()[3] * other.group1()[1])),
                ((other.group2()[0] * self.group0()[1]) + (other.group2()[2] * self.group0()[3]) - (self.group1()[0] * other.group1()[1]) + (self.group1()[1] * other.group1()[0])
                    - (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group1()[2]) + (self.group0()[0] * other.group1()[3])),
                ((other.group0()[1] * self.group1()[3]) + (other.group0()[2] * self.group1()[0]) + (self.group0()[1] * other.group1()[3])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[2] * self.group1()[3]) + (self.group0()[2] * other.group1()[3])),
                (-(other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       96      134        0
    //    simd4       30       30        0
    // Totals...
    // yes simd      126      164        0
    //  no simd      216      254        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group0()[2])),
                ((other.group0()[1] * self.group0()[3]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]) + (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) + (self.group0()[3] * other.group1()[0]) + (self.group1()[0] * other.group2()[3])),
                ((other.group0()[2] * self.group1()[0]) + (self.group0()[3] * other.group1()[1]) + (self.group1()[1] * other.group2()[3])),
                ((other.group0()[2] * self.group1()[3]) + (self.group0()[3] * other.group1()[2]) + (self.group1()[2] * other.group2()[3])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group2()[3]]) * swizzle!(self.group1(), 3, 3, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group3()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group1(), 1, 2, 0, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group0()[2] * other.group2()[1]) + (self.group0()[3] * other.group2()[0]) - (self.group1()[0] * other.group1()[3]) - (self.group1()[1] * other.group1()[2])
                    + (self.group1()[1] * other.group3()[2])
                    + (self.group1()[2] * other.group1()[1])
                    - (self.group1()[2] * other.group3()[1])
                    + (self.group1()[3] * other.group1()[0])
                    - (self.group1()[3] * other.group3()[0])),
                ((self.group0()[1] * other.group3()[3]) + (self.group0()[3] * other.group2()[1]) + (self.group1()[0] * other.group1()[2])
                    - (self.group1()[0] * other.group3()[2])
                    - (self.group1()[1] * other.group1()[3])
                    - (self.group1()[2] * other.group1()[0])
                    + (self.group1()[2] * other.group3()[0])
                    + (self.group1()[3] * other.group1()[1])
                    - (self.group1()[3] * other.group3()[1])),
                ((self.group0()[2] * other.group3()[3]) + (self.group0()[3] * other.group2()[2]) - (self.group1()[0] * other.group1()[1])
                    + (self.group1()[0] * other.group3()[1])
                    + (self.group1()[1] * other.group1()[0])
                    - (self.group1()[1] * other.group3()[0])
                    - (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])
                    - (self.group1()[3] * other.group3()[2])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group3()[3], other.group2()[2], other.group2()[0], other.group2()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[3] * other.group3()[0]) + (self.group1()[0] * other.group2()[3])),
                ((self.group0()[1] * other.group1()[3]) + (self.group1()[1] * other.group2()[3])),
                ((self.group0()[2] * other.group1()[3]) + (self.group1()[2] * other.group2()[3])),
                (-(self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group3()[0]]) * swizzle!(self.group1(), 3, 3, 1, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[2], other.group3()[1]]) * swizzle!(self.group1(), 2, 0, 3, 1))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[3], self.group0()[3], self.group1()[2]]) * swizzle!(other.group3(), 1, 1, 2, 2))
                + (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group3()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       72        0
    //    simd4       19       22        0
    // Totals...
    // yes simd       59       94        0
    //  no simd      116      160        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[0] * self.group1()[3] * -1.0),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from(other.group0()[1]) * self.group1()),
            // e1, e2, e3, e4
            (Simd32x4::from(other.group0()[0])
                * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]])
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for AntiMotor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       55        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       37       60        0
    //  no simd       52       75        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1]) + (self.group0()[3] * other.group0()[0])
                    - (self.group1()[0] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0]) + (self.group0()[3] * other.group0()[1]) - (self.group1()[1] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) + (self.group0()[3] * other.group0()[2])
                    - (self.group1()[2] * other.group0()[3])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group0()[3])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for AntiMotor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       33       55        0
    //    simd4       12       12        0
    // Totals...
    // yes simd       45       67        0
    //  no simd       81      103        0
    fn sandwich(self, other: Flector) -> Self::Output {
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group0()[2] * other.group0()[1]) + (self.group0()[3] * other.group0()[0]) - (self.group1()[0] * other.group0()[3]) + (self.group1()[1] * other.group1()[2])),
                ((self.group0()[1] * other.group1()[3]) + (self.group0()[3] * other.group0()[1]) - (self.group1()[1] * other.group0()[3]) + (self.group1()[2] * other.group1()[0])),
                ((self.group0()[2] * other.group1()[3]) + (self.group0()[3] * other.group0()[2]) + (self.group1()[0] * other.group1()[1]) - (self.group1()[2] * other.group0()[3])),
                0.0,
            ]) - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[2]]) * swizzle!(other.group1(), 0, 1, 2, 2))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[3], other.group0()[2], other.group0()[0], other.group0()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group0()[3])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[3], self.group0()[3], self.group1()[0]]) * swizzle!(other.group1(), 1, 1, 2, 0))
                + (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group1()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for AntiMotor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       54        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       41       63        0
    //  no simd       68       90        0
    fn sandwich(self, other: Line) -> Self::Output {
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group0()[2])),
                ((other.group0()[1] * self.group0()[3]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group1()[2]) + (other.group1()[0] * self.group0()[3]) + (other.group1()[1] * self.group0()[2])),
                ((other.group0()[1] * self.group1()[3]) + (other.group0()[2] * self.group1()[0]) + (other.group1()[1] * self.group0()[3]) + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[2] * self.group1()[3]) + (other.group1()[0] * self.group0()[1]) + (other.group1()[2] * self.group0()[3])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for AntiMotor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       54        0
    //    simd4       12       12        0
    // Totals...
    // yes simd       44       66        0
    //  no simd       80      102        0
    fn sandwich(self, other: Motor) -> Self::Output {
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from([
                ((self.group0()[2] * other.group0()[1]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) + (swizzle!(self.group0(), 0, 0, 1, 3) * swizzle!(other.group0(), 3, 2, 0, 3))
                - (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group0()[2] * other.group1()[1]) + (self.group0()[3] * other.group1()[0]) + (self.group1()[2] * other.group0()[1]) + (self.group1()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group1()[3]) + (self.group0()[3] * other.group1()[1]) + (self.group1()[1] * other.group0()[3]) + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group1()[3]) + (self.group0()[3] * other.group1()[2]) + (self.group1()[2] * other.group0()[3]) + (self.group1()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]) + (swizzle!(self.group0(), 0, 0, 1, 3) * swizzle!(other.group1(), 3, 2, 0, 3))
                - (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group1(), 2, 0, 1, 0))
                + (swizzle!(self.group1(), 0, 0, 1, 3) * swizzle!(other.group0(), 3, 2, 0, 3))
                - (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for AntiMotor {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      124      174        0
    //    simd2       14       16        0
    //    simd3       44       50        0
    //    simd4       41       41        0
    // Totals...
    // yes simd      223      281        0
    //  no simd      448      520        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (-(Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group5()[0], other.group6()[0]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group5()[1], other.group6()[1]]))
                - (Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group5()[2], other.group6()[2]]))
                + (Simd32x2::from(self.group0()[3]) * other.group0())
                - (Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group4()[0], other.group7()[0]]))
                - (Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group4()[1], other.group7()[1]]))
                - (Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group4()[2], other.group7()[2]]))
                + (Simd32x2::from(self.group1()[3]) * Simd32x2::from([other[e45], other.group1()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group7()[0] * self.group1()[3]) - (other.group7()[1] * self.group1()[2])
                    + (other.group7()[2] * self.group1()[1])
                    + (self.group0()[2] * other.group1()[1])
                    + (self.group0()[3] * other.group1()[0])
                    - (self.group1()[0] * other.group1()[3])),
                ((other.group7()[0] * self.group1()[2]) - (other.group7()[1] * self.group1()[3]) - (other.group7()[2] * self.group1()[0])
                    + (self.group0()[1] * other.group6()[3])
                    + (self.group0()[3] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[3])),
                (-(other.group7()[0] * self.group1()[1]) + (other.group7()[1] * self.group1()[0]) - (other.group7()[2] * self.group1()[3])
                    + (self.group0()[2] * other.group6()[3])
                    + (self.group0()[3] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[3])),
                (-(other.group7()[1] * self.group0()[1]) - (other.group7()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group7()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group6()[3], other.group1()[2], other.group1()[0], other.group1()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))),
            // e5
            ((other.group0()[1] * self.group1()[3]) - (other.group8()[0] * self.group0()[0]) - (other.group8()[1] * self.group0()[1]) - (other.group8()[2] * self.group0()[2])
                + (self.group0()[3] * other[e1])
                - (self.group1()[0] * other.group1()[0])
                - (self.group1()[0] * other.group6()[0])
                - (self.group1()[1] * other.group1()[1])
                - (self.group1()[1] * other.group6()[1])
                - (self.group1()[2] * other.group1()[2])
                - (self.group1()[2] * other.group6()[2])
                + (self.group1()[3] * other.group6()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group5()[0] * self.group1()[3])
                    + (other.group5()[1] * self.group1()[2])
                    + (self.group0()[2] * other.group3()[1])
                    + (self.group0()[3] * other.group3()[0])
                    + (self.group1()[1] * other.group9()[2])),
                ((other.group5()[1] * self.group1()[3])
                    + (other.group5()[2] * self.group1()[0])
                    + (self.group0()[1] * other.group9()[3])
                    + (self.group0()[3] * other.group3()[1])
                    + (self.group1()[2] * other.group9()[0])),
                ((other.group5()[0] * self.group1()[1])
                    + (other.group5()[2] * self.group1()[3])
                    + (self.group0()[2] * other.group9()[3])
                    + (self.group0()[3] * other.group3()[2])
                    + (self.group1()[0] * other.group9()[1])),
                ((self.group0()[2] * other.group9()[2]) * -1.0),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other[e45]]) * self.group1())
                - (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group4()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[1]]) * swizzle!(other.group9(), 0, 1, 2, 1))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group9()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group3()[3], other.group9()[2], other.group9()[0], other.group4()[1]]) * swizzle!(self.group1(), 0, 0, 1, 1))
                - (Simd32x4::from([other.group9()[1], other.group3()[3], other.group3()[3], other.group4()[2]]) * swizzle!(self.group1(), 2, 1, 2, 2))
                + (Simd32x4::from([other.group9()[3], other.group3()[2], other.group3()[0], other.group3()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))),
            // e41, e42, e43
            ((Simd32x3::from(other[e45]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group4(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[3]]) * swizzle!(other.group4(), 1, 2, 2))
                + (Simd32x3::from([self.group0()[3], self.group0()[3], self.group0()[1]]) * swizzle!(other.group4(), 0, 1, 0))),
            // e23, e31, e12
            ((Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group5(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[3]]) * swizzle!(other.group5(), 1, 2, 2))
                + (Simd32x3::from([self.group0()[3], self.group0()[3], self.group0()[1]]) * swizzle!(other.group5(), 0, 1, 0))
                - (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group4(), 2, 0, 1))
                + (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[3]]) * swizzle!(other.group4(), 1, 2, 2))
                + (Simd32x3::from([self.group1()[3], self.group1()[3], self.group1()[1]]) * swizzle!(other.group4(), 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group6()[1]) + (self.group0()[3] * other.group6()[0])),
                ((self.group0()[0] * other.group6()[2]) + (self.group0()[3] * other.group6()[1])),
                ((self.group0()[1] * other.group6()[0]) + (self.group0()[3] * other.group6()[2])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group6()[3]]) * self.group0())
                + (Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[0], other.group7()[0]]) * swizzle!(self.group1(), 3, 3, 1, 0))
                + (Simd32x4::from([other.group7()[1], other.group7()[2], other.group7()[2], other.group7()[1]]) * swizzle!(self.group1(), 2, 0, 3, 1))
                - (Simd32x4::from([other.group7()[2], other.group7()[0], other.group7()[1], other.group1()[3]]) * swizzle!(self.group1(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group7()[2]]) * swizzle!(self.group1(), 0, 1, 2, 2))
                - (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e423, e431, e412
            ((Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group7(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[3]]) * swizzle!(other.group7(), 1, 2, 2))
                + (Simd32x3::from([self.group0()[3], self.group0()[3], self.group0()[1]]) * swizzle!(other.group7(), 0, 1, 0))),
            // e235, e315, e125
            (Simd32x3::from([
                (-(self.group1()[1] * other.group1()[2]) - (self.group1()[1] * other.group6()[2])
                    + (self.group1()[2] * other.group1()[1])
                    + (self.group1()[2] * other.group6()[1])),
                ((self.group1()[0] * other.group1()[2]) + (self.group1()[0] * other.group6()[2]) - (self.group1()[2] * other.group1()[0]) - (self.group1()[2] * other.group6()[0])),
                (-(self.group1()[0] * other.group1()[1]) - (self.group1()[0] * other.group6()[1])
                    + (self.group1()[1] * other.group1()[0])
                    + (self.group1()[1] * other.group6()[0])),
            ]) + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from(other.group6()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group8(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[3]]) * swizzle!(other.group8(), 1, 2, 2))
                + (Simd32x3::from([self.group0()[3], self.group0()[3], self.group0()[1]]) * swizzle!(other.group8(), 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (self.group0()[3] * other.group9()[0]),
                (self.group0()[1] * other.group3()[3]),
                (self.group0()[2] * other.group3()[3]),
                (-(other.group5()[1] * self.group1()[1])
                    - (other.group5()[2] * self.group1()[2])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group3()[2])
                    - (self.group1()[3] * other.group3()[3])),
            ]) + (Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[0], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 1, 3))
                + (Simd32x4::from([other.group4()[1], other.group4()[2], other.group4()[2], other.group9()[0]]) * swizzle!(self.group1(), 2, 0, 3, 0))
                - (Simd32x4::from([other.group4()[2], other.group4()[0], other.group4()[1], other.group5()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[3], self.group0()[3], self.group1()[1]]) * swizzle!(other.group9(), 1, 1, 2, 1))
                + (Simd32x4::from([other.group3()[3], other.group9()[2], other.group9()[0], other.group9()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))
                - (Simd32x4::from([other.group9()[2], other.group9()[0], other.group9()[1], other.group3()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other[e45], other[e45], other[e45], other.group9()[2]]) * swizzle!(self.group1(), 0, 1, 2, 2))),
            // e1234
            (-(other.group4()[0] * self.group0()[0]) - (other.group4()[1] * self.group0()[1]) - (other.group4()[2] * self.group0()[2]) + (self.group0()[3] * other[e45])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for AntiMotor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       51        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       33       60        0
    //  no simd       60       87        0
    fn sandwich(self, other: Plane) -> Self::Output {
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2])),
                ((self.group0()[1] * other.group0()[3]) + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) * -1.0),
                ((self.group0()[2] * other.group0()[0]) * -1.0),
                ((self.group0()[0] * other.group0()[1]) * -1.0),
                ((self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group1()[0]]) * swizzle!(other.group0(), 0, 1, 2, 0))
                + (swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       52       87        0
    //    simd4       21       22        0
    // Totals...
    // yes simd       73      109        0
    //  no simd      136      175        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group0()[3])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group1()[2] * other.group0()[1]) + (self.group1()[3] * other.group0()[0])),
                ((self.group1()[0] * other.group0()[2]) + (self.group1()[3] * other.group0()[1])),
                ((self.group1()[1] * other.group0()[0]) + (self.group1()[3] * other.group0()[2])),
                (-(self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other[e2]) * self.group0())
                - (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1]) + (self.group0()[3] * other.group0()[0])
                    - (self.group1()[0] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0]) + (self.group0()[3] * other.group0()[1]) - (self.group1()[1] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) + (self.group0()[3] * other.group0()[2])
                    - (self.group1()[2] * other.group0()[3])),
                (self.group0()[3] * other.group0()[3]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for AntiMotor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       30        0
    //    simd4        6        8        0
    // Totals...
    // yes simd       22       38        0
    //  no simd       40       62        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from(other[scalar]) * self.group0()),
            // e15, e25, e35, e3215
            (Simd32x4::from(other[scalar]) * self.group1()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       60       97        0
    //    simd4       19       20        0
    // Totals...
    // yes simd       79      117        0
    //  no simd      136      177        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(other[e4315]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group1()[0] * other[e4315]),
                (self.group1()[1] * other[e4315]),
                (self.group1()[2] * other[e4315]),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]) + (self.group1()[3] * other[e4315])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1]) - (self.group1()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) - (self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0]) - (self.group1()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0]) - (self.group1()[3] * other.group0()[2])),
                (self.group0()[3] * other[e4315]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) * -1.0),
                ((self.group0()[2] * other.group0()[0]) * -1.0),
                ((self.group0()[0] * other.group0()[1]) * -1.0),
                (self.group1()[2] * other.group0()[2]),
            ]) + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group1()[0]]) * swizzle!(other.group0(), 0, 1, 2, 0))
                + (Simd32x4::from([other[e4315], other[e4315], other[e4315], other.group0()[1]]) * swizzle!(self.group1(), 0, 1, 2, 1))
                + (swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       77      115        0
    //    simd4       37       37        0
    // Totals...
    // yes simd      114      152        0
    //  no simd      225      263        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[2] * other.group0()[1]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group3()[3]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group3()[3]) + (self.group0()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])
                    + (self.group1()[3] * other.group3()[3])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group3()[3], other.group0()[2], other.group0()[0], other.group0()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group1()[1]) + (self.group0()[3] * other.group1()[0])),
                ((self.group0()[3] * other.group1()[1]) + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[3] * other.group1()[2]) + (self.group1()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group3()[1]) - (self.group0()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([self.group1()[2], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group0(), 1, 3, 3, 1))
                + (Simd32x4::from([other.group0()[0], other.group3()[3], other.group3()[3], other.group0()[2]]) * swizzle!(self.group1(), 3, 1, 2, 2))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group3()[3]]) * swizzle!(self.group1(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group1()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group3()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group3()[3], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group1(), 0, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group0()[2] * other.group2()[1])
                    + (self.group0()[3] * other.group2()[0])
                    + (self.group1()[2] * other.group1()[1])
                    + (self.group1()[2] * other.group3()[1])
                    + (self.group1()[3] * other.group1()[0])
                    + (self.group1()[3] * other.group3()[0])),
                ((self.group0()[1] * other.group2()[3])
                    + (self.group0()[3] * other.group2()[1])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[1])
                    + (self.group1()[3] * other.group3()[1])),
                ((self.group0()[2] * other.group2()[3])
                    + (self.group0()[3] * other.group2()[2])
                    + (self.group1()[2] * other.group0()[3])
                    + (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])
                    + (self.group1()[3] * other.group3()[2])),
                (-(self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[1] * other.group3()[1])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group0()[3]]) * swizzle!(self.group1(), 0, 0, 1, 3))
                + (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group1()[3]]) * swizzle!(self.group1(), 0, 0, 1, 3))
                + (swizzle!(self.group0(), 0, 0, 1, 3) * swizzle!(other.group2(), 3, 2, 0, 3))
                - (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group3(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[2] * other.group3()[1]) + (self.group0()[3] * other.group3()[0]) - (self.group1()[0] * other.group3()[3]) + (self.group1()[1] * other.group0()[2])),
                ((self.group0()[1] * other.group1()[3]) + (self.group0()[3] * other.group3()[1]) - (self.group1()[1] * other.group3()[3]) + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[2] * other.group1()[3]) + (self.group0()[3] * other.group3()[2]) + (self.group1()[0] * other.group0()[1]) - (self.group1()[2] * other.group3()[3])),
                0.0,
            ]) - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[2]]) * swizzle!(other.group0(), 0, 1, 2, 2))
                + (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group3()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      100      138        0
    //    simd4       31       31        0
    // Totals...
    // yes simd      131      169        0
    //  no simd      224      262        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[2] * other.group0()[1]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group2()[3]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group2()[3]) + (self.group0()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])
                    + (self.group1()[3] * other.group2()[3])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group0()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[2] * other.group1()[1]) + (self.group0()[3] * other.group1()[0]) + (self.group1()[2] * other.group0()[1]) + (self.group1()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group1()[1]) + (self.group1()[1] * other.group2()[3]) + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group1()[2]) + (self.group1()[2] * other.group2()[3]) + (self.group1()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group3()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group1()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group3()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group2()[3]]) * swizzle!(self.group1(), 0, 0, 1, 3))
                - (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group0()[2] * other.group2()[1]) + (self.group0()[3] * other.group2()[0]) + (self.group1()[0] * other.group0()[3])
                    - (self.group1()[0] * other.group1()[3])
                    - (self.group1()[1] * other.group1()[2])
                    + (self.group1()[1] * other.group3()[2])
                    + (self.group1()[2] * other.group1()[1])
                    - (self.group1()[2] * other.group3()[1])
                    + (self.group1()[3] * other.group1()[0])
                    - (self.group1()[3] * other.group3()[0])),
                ((self.group0()[1] * other.group3()[3]) + (self.group0()[3] * other.group2()[1]) + (self.group1()[0] * other.group1()[2]) - (self.group1()[0] * other.group3()[2])
                    + (self.group1()[1] * other.group0()[3])
                    - (self.group1()[1] * other.group1()[3])
                    - (self.group1()[2] * other.group1()[0])
                    + (self.group1()[2] * other.group3()[0])
                    + (self.group1()[3] * other.group1()[1])
                    - (self.group1()[3] * other.group3()[1])),
                ((self.group0()[2] * other.group3()[3]) + (self.group0()[3] * other.group2()[2]) - (self.group1()[0] * other.group1()[1])
                    + (self.group1()[0] * other.group3()[1])
                    + (self.group1()[1] * other.group1()[0])
                    - (self.group1()[1] * other.group3()[0])
                    + (self.group1()[2] * other.group0()[3])
                    - (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])
                    - (self.group1()[3] * other.group3()[2])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group3()[3], other.group2()[2], other.group2()[0], other.group2()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (self.group0()[3] * other.group3()[0]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                (-(self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]) + (Simd32x4::from(self.group1()[3]) * other.group0())
                + (Simd32x4::from([self.group0()[2], self.group0()[3], self.group0()[3], self.group1()[0]]) * swizzle!(other.group3(), 1, 1, 2, 0))
                + (Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group3()[2]]) * swizzle!(self.group1(), 2, 1, 2, 2))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group3()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))
                + (Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group3()[1]]) * swizzle!(self.group1(), 0, 0, 1, 1))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl InfixSandwich for AntiPlane {}
impl Sandwich<AntiCircleRotor> for AntiPlane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       36        0
    //    simd3        1        2        0
    //    simd4       16       17        0
    // Totals...
    // yes simd       27       55        0
    //  no simd       77      110        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (-(Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (other.group0()[0] * self.group0()[3]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) - (swizzle!(other.group1(), 3, 3, 3, 0) * swizzle!(self.group0(), 0, 1, 2, 0))),
            // e235, e315, e125, e4
            (Simd32x4::from([
                ((other.group1()[0] * self.group0()[3]) + (other.group2()[2] * self.group0()[1])),
                ((other.group1()[1] * self.group0()[3]) + (other.group2()[0] * self.group0()[2])),
                ((other.group1()[2] * self.group0()[3]) + (other.group2()[1] * self.group0()[0])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                ((other.group1()[2] * self.group0()[1]) * -1.0),
                ((other.group1()[0] * self.group0()[2]) * -1.0),
                ((other.group1()[1] * self.group0()[0]) * -1.0),
                ((other.group2()[2] * self.group0()[2]) + (other.group2()[3] * self.group0()[3])),
            ]) - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (swizzle!(other.group2(), 3, 3, 3, 1) * swizzle!(self.group0(), 0, 1, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for AntiPlane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       56        0
    //    simd4       19       19        0
    // Totals...
    // yes simd       36       75        0
    //  no simd       93      132        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group2()[3] * self.group0()[0]) * -1.0),
                ((other.group2()[3] * self.group0()[1]) * -1.0),
                ((other.group2()[3] * self.group0()[2]) * -1.0),
                ((other.group3()[1] * self.group0()[1]) + (other.group3()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group2()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group3()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (other.group3()[2] * self.group0()[1]),
                (other.group3()[0] * self.group0()[2]),
                (other.group3()[1] * self.group0()[0]),
                ((other.group2()[3] * self.group0()[3]) * -1.0),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[2]]) * swizzle!(self.group0(), 2, 0, 1, 2))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(other.group1()[0] * self.group0()[3]) - (other.group2()[2] * self.group0()[1]) - (other.group3()[0] * self.group0()[3])),
                (-(other.group1()[1] * self.group0()[3]) - (other.group2()[0] * self.group0()[2]) - (other.group3()[1] * self.group0()[3])),
                (-(other.group1()[2] * self.group0()[3]) - (other.group2()[1] * self.group0()[0]) - (other.group3()[2] * self.group0()[3])),
                (other.group0()[2] * self.group0()[2]),
            ]) + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group0()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (other.group1()[1] * self.group0()[2]),
                (other.group1()[2] * self.group0()[0]),
                (other.group1()[0] * self.group0()[1]),
                (-(other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for AntiPlane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       14        0
    //    simd4       13       15        0
    // Totals...
    // yes simd       16       29        0
    //  no simd       55       74        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(other.group0()[0]) * self.group0()),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group0()[3] * -1.0)]),
            // e235, e315, e125, e5
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[1] * self.group0()[3])]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for AntiPlane {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       28        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       14       32        0
    //  no simd       26       44        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (other.group0()[3] * self.group0()[0] * -1.0),
                (other.group0()[3] * self.group0()[1] * -1.0),
                (other.group0()[3] * self.group0()[2] * -1.0),
                0.0,
            ]),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                (other.group0()[1] * self.group0()[2]),
                (other.group0()[2] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group0()[3])),
            ]) - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for AntiPlane {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       32        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       22       38        0
    //  no simd       40       56        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from([
                (-(other.group0()[3] * self.group0()[0]) - (other.group1()[1] * self.group0()[2])),
                (-(other.group0()[3] * self.group0()[1]) - (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[3] * self.group0()[2]) - (other.group1()[0] * self.group0()[1])),
                ((other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]) + (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[0]) + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[1]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group0()[3])),
            ]) - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for AntiPlane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       32        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       18       37        0
    //  no simd       33       52        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[1] * self.group0()[3]) + (other.group1()[0] * self.group0()[2])),
                ((other.group0()[2] * self.group0()[3]) + (other.group1()[1] * self.group0()[0])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) * -1.0),
                ((other.group0()[0] * self.group0()[2]) * -1.0),
                ((other.group0()[1] * self.group0()[0]) * -1.0),
                ((other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for AntiPlane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       32        0
    //    simd4        7        7        0
    // Totals...
    // yes simd       19       39        0
    //  no simd       40       60        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[1] * self.group0()[3]) + (other.group1()[0] * self.group0()[2])),
                ((other.group0()[2] * self.group0()[3]) + (other.group1()[1] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) * -1.0),
                ((other.group0()[0] * self.group0()[2]) * -1.0),
                ((other.group0()[1] * self.group0()[0]) * -1.0),
                ((other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other.group1()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))
                + (swizzle!(other.group0(), 1, 2, 0, 3) * swizzle!(self.group0(), 2, 0, 1, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for AntiPlane {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       30        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       16       34        0
    //  no simd       28       46        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) * -1.0),
                ((other.group0()[2] * self.group0()[0]) * -1.0),
                ((other.group0()[0] * self.group0()[1]) * -1.0),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) + (other.group0()[3] * self.group0()[0])),
                (-(other.group0()[1] * self.group0()[3]) + (other.group0()[3] * self.group0()[1])),
                (-(other.group0()[2] * self.group0()[3]) + (other.group0()[3] * self.group0()[2])),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for AntiPlane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       14        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        5       17        0
    //  no simd        8       26        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Plane::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other[e12345]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for AntiPlane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       47        0
    //    simd3        1        2        0
    //    simd4       13       13        0
    // Totals...
    // yes simd       31       62        0
    //  no simd       72      105        0
    fn sandwich(self, other: Circle) -> Self::Output {
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[2] * other.group1()[2]) * -1.0)])
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (swizzle!(self.group0(), 0, 1, 2, 1) * swizzle!(other.group1(), 3, 3, 3, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(other.group2()[2] * self.group0()[1]) - (self.group0()[3] * other.group1()[0])),
                (-(other.group2()[0] * self.group0()[2]) - (self.group0()[3] * other.group1()[1])),
                (-(other.group2()[1] * self.group0()[0]) - (self.group0()[3] * other.group1()[2])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (self.group0()[2] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                (self.group0()[1] * other.group1()[0]),
                (-(other.group2()[2] * self.group0()[2]) - (self.group0()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for AntiPlane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       21       51        0
    //    simd3        1        2        0
    //    simd4       13       13        0
    // Totals...
    // yes simd       35       66        0
    //  no simd       76      109        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[2] * other.group1()[2]) * -1.0)])
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (swizzle!(self.group0(), 0, 1, 2, 1) * swizzle!(other.group1(), 3, 3, 3, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(self.group0()[1] * other.group2()[2]) - (self.group0()[3] * other.group1()[0])),
                (-(self.group0()[2] * other.group2()[0]) - (self.group0()[3] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[1]) - (self.group0()[3] * other.group1()[2])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group2()[3])),
                ((self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group2()[3])),
                (-(self.group0()[2] * other.group2()[2]) - (self.group0()[3] * other.group1()[3]) - (self.group0()[3] * other.group2()[3])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for AntiPlane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       36        0
    //    simd3        1        2        0
    //    simd4       15       16        0
    // Totals...
    // yes simd       26       54        0
    //  no simd       73      106        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (-(Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (other.group0()[0] * self.group0()[3]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]) - (swizzle!(self.group0(), 0, 1, 2, 0) * swizzle!(other.group1(), 3, 3, 3, 0))),
            // e235, e315, e125, e4
            (Simd32x4::from([
                ((other.group2()[2] * self.group0()[1]) + (self.group0()[3] * other.group1()[0])),
                ((other.group2()[0] * self.group0()[2]) + (self.group0()[3] * other.group1()[1])),
                ((other.group2()[1] * self.group0()[0]) + (self.group0()[3] * other.group1()[2])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) * -1.0),
                ((self.group0()[2] * other.group1()[0]) * -1.0),
                ((self.group0()[0] * other.group1()[1]) * -1.0),
                ((other.group2()[1] * self.group0()[1]) + (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for AntiPlane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       36        0
    //    simd4       22       23        0
    // Totals...
    // yes simd       33       59        0
    //  no simd       99      128        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) * -1.0),
                ((other.group0()[0] * self.group0()[2]) * -1.0),
                ((other.group0()[1] * self.group0()[0]) * -1.0),
                ((self.group0()[2] * other.group3()[2]) + (self.group0()[3] * other.group2()[3])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group3()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (self.group0()[1] * other.group3()[2])),
                ((other.group0()[1] * self.group0()[3]) + (self.group0()[2] * other.group3()[0])),
                ((other.group0()[2] * self.group0()[3]) + (self.group0()[0] * other.group3()[1])),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[3] * other.group2()[3])),
            ]) - (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group1()[0]]) * swizzle!(self.group0(), 0, 0, 1, 0))
                - (Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group1()[1]]) * swizzle!(self.group0(), 2, 1, 2, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group0()[2] * other.group2()[1]) - (self.group0()[3] * other.group3()[0])),
                (-(self.group0()[1] * other.group3()[3]) - (self.group0()[3] * other.group3()[1])),
                (-(self.group0()[2] * other.group3()[3]) - (self.group0()[3] * other.group3()[2])),
                (self.group0()[2] * other.group2()[2]),
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group3()[3], other.group2()[2], other.group2()[0], other.group1()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))
                + (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group2(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (self.group0()[2] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                (self.group0()[1] * other.group1()[0]),
                ((other.group0()[2] * self.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for AntiPlane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       30        0
    //    simd4       10       14        0
    // Totals...
    // yes simd       19       44        0
    //  no simd       49       86        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(other.group0()[0]) * self.group0() * Simd32x4::from(-1.0)),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group0()[3] * -1.0)]),
            // e15, e25, e35, e1234
            Simd32x4::from(0.0),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other.group0()[1]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for AntiPlane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1       12        0
    //    simd4        8        8        0
    // Totals...
    // yes simd        9       20        0
    //  no simd       33       44        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                0.0,
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]))])
                + (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for AntiPlane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       20        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       17       29        0
    //  no simd       44       56        0
    fn sandwich(self, other: Flector) -> Self::Output {
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group0()[3])),
                (-(self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group0()[3])),
                ((self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group1()[2])),
            ]) + (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group1(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group0()[2] * other.group0()[1]) - (self.group0()[3] * other.group1()[0])),
                (-(self.group0()[1] * other.group1()[3]) - (self.group0()[3] * other.group1()[1])),
                (-(self.group0()[2] * other.group1()[3]) - (self.group0()[3] * other.group1()[2])),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([other.group1()[3], other.group0()[2], other.group0()[0], other.group0()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))
                + (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for AntiPlane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       26        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       15       32        0
    //  no simd       33       50        0
    fn sandwich(self, other: Line) -> Self::Output {
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from([
                (other.group1()[1] * self.group0()[2]),
                (other.group1()[2] * self.group0()[0]),
                (other.group1()[0] * self.group0()[1]),
                ((other.group0()[2] * self.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (other.group0()[1] * self.group0()[2]),
                (other.group0()[2] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for AntiPlane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       33        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       22       39        0
    //  no simd       40       57        0
    fn sandwich(self, other: Motor) -> Self::Output {
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3])),
                ((self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[3])),
                ((self.group0()[2] * other.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (swizzle!(self.group0(), 3, 3, 3, 1) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[3])),
                ((self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2]) - (self.group0()[3] * other.group0()[3])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for AntiPlane {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       39       94        0
    //    simd2        6        6        0
    //    simd3       18       22        0
    //    simd4       23       23        0
    // Totals...
    // yes simd       86      145        0
    //  no simd      197      264        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([((self.group0()[3] * other.group1()[3]) * -1.0), (self.group0()[3] * other[e45])])
                + (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group1()[0], other.group9()[0]]))
                + (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group1()[1], other.group9()[1]]))
                + (Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group1()[2], other.group9()[2]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[0]) + (other.group5()[1] * self.group0()[2])),
                ((other.group0()[0] * self.group0()[1]) + (other.group5()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[2]) + (other.group5()[0] * self.group0()[1])),
                ((other.group4()[2] * self.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], other.group4()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group4()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))),
            // e5
            ((other.group0()[0] * self.group0()[3]) + (self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group3()[1]) + (self.group0()[2] * other.group3()[2])
                - (self.group0()[3] * other.group3()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group8()[1] * self.group0()[2]) + (self.group0()[0] * other[e1])),
                ((other.group8()[2] * self.group0()[0]) + (self.group0()[1] * other[e1])),
                ((other.group8()[0] * self.group0()[1]) + (self.group0()[2] * other[e1])),
                ((self.group0()[3] * other.group1()[3]) * -1.0),
            ]) - (Simd32x4::from([other.group8()[2], other.group8()[0], other.group8()[1], other.group6()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group6()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (swizzle!(self.group0(), 3, 3, 3, 2) * swizzle!(other.group6(), 0, 1, 2, 2))),
            // e41, e42, e43
            (-(Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group7(), 2, 0, 1))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group7(), 1, 2, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
            ]) - (Simd32x3::from(self.group0()[3]) * other.group7())
                - (Simd32x3::from(other.group6()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group4()[0] * self.group0()[3]) + (self.group0()[1] * other.group9()[2])),
                ((other.group4()[1] * self.group0()[3]) + (self.group0()[2] * other.group9()[0])),
                ((other.group4()[2] * self.group0()[3]) + (self.group0()[0] * other.group9()[1])),
                (-(other.group5()[2] * self.group0()[2]) - (self.group0()[3] * other[e45])),
            ]) - (Simd32x4::from([other.group3()[3], other.group9()[2], other.group9()[0], other.group5()[0]]) * swizzle!(self.group0(), 0, 0, 1, 0))
                - (Simd32x4::from([other.group9()[1], other.group3()[3], other.group3()[3], other.group5()[1]]) * swizzle!(self.group0(), 2, 1, 2, 1))),
            // e423, e431, e412
            ((Simd32x3::from(other[e45]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group4(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group4(), 1, 2, 0))),
            // e235, e315, e125
            (Simd32x3::from([
                ((self.group0()[1] * other.group3()[2]) - (self.group0()[2] * other.group3()[1])),
                (-(self.group0()[0] * other.group3()[2]) + (self.group0()[2] * other.group3()[0])),
                ((self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group3()[0])),
            ]) - (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                + (Simd32x3::from(self.group0()[3]) * other.group5())
                - (Simd32x3::from(other.group9()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[0]) + (self.group0()[2] * other.group6()[1])),
                ((other.group0()[1] * self.group0()[1]) + (self.group0()[0] * other.group6()[2])),
                ((other.group0()[1] * self.group0()[2]) + (self.group0()[1] * other.group6()[0])),
                (-(other.group8()[1] * self.group0()[1]) - (other.group8()[2] * self.group0()[2]) - (self.group0()[3] * other.group6()[3])),
            ]) - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group0()[1]]))
                - (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group8()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e1234
            ((other.group7()[0] * self.group0()[0]) + (other.group7()[1] * self.group0()[1]) + (other.group7()[2] * self.group0()[2])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for AntiPlane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       18        0
    //    simd4        7        7        0
    // Totals...
    // yes simd       11       25        0
    //  no simd       32       46        0
    fn sandwich(self, other: Plane) -> Self::Output {
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from([
                ((self.group0()[2] * other.group0()[1]) * -1.0),
                ((self.group0()[0] * other.group0()[2]) * -1.0),
                ((self.group0()[1] * other.group0()[0]) * -1.0),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]) + (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group0()[3] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[3]) - (self.group0()[3] * other.group0()[1])),
                (-(self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group0()[2])),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for AntiPlane {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       27        0
    //    simd3        1        4        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       15       39        0
    //  no simd       41       71        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(-1.0)),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other.group0()[3] * -1.0),
            ]),
            // e15, e25, e35, scalar
            (Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]))])
                - (Simd32x4::from(self.group0()[3]) * other.group0())
                + (Simd32x4::from([other[e2], other[e2], other[e2], other.group0()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for AntiPlane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       14        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        5       16        0
    //  no simd        8       22        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiPlane::from_groups(/* e1, e2, e3, e5 */ (Simd32x4::from(other[scalar]) * self.group0()));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for AntiPlane {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       26        0
    //    simd3        1        3        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       18       37        0
    //  no simd       44       67        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = CircleRotor::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other[e4315]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other[e4315] * -1.0),
            ]),
            // e235, e315, e125, e12345
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group0()[3] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[3]) - (self.group0()[3] * other.group0()[1])),
                (-(self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group0()[2])),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other[e4315])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for AntiPlane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       21       60        0
    //    simd4       19       19        0
    // Totals...
    // yes simd       40       79        0
    //  no simd       97      136        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[2] * other.group0()[1]) * -1.0),
                ((self.group0()[1] * other.group3()[3]) * -1.0),
                ((self.group0()[2] * other.group3()[3]) * -1.0),
                ((self.group0()[1] * other.group3()[1]) + (self.group0()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group3()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group3()[3], other.group0()[2], other.group0()[0], other.group3()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (self.group0()[1] * other.group3()[2]),
                (self.group0()[2] * other.group3()[0]),
                (self.group0()[0] * other.group3()[1]),
                ((self.group0()[3] * other.group3()[3]) * -1.0),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group1()[0]]) * swizzle!(self.group0(), 0, 0, 1, 0))
                - (Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group1()[1]]) * swizzle!(self.group0(), 2, 1, 2, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(self.group0()[1] * other.group2()[2]) - (self.group0()[3] * other.group1()[0]) - (self.group0()[3] * other.group3()[0])),
                (-(self.group0()[2] * other.group2()[0]) - (self.group0()[3] * other.group1()[1]) - (self.group0()[3] * other.group3()[1])),
                (-(self.group0()[0] * other.group2()[1]) - (self.group0()[3] * other.group1()[2]) - (self.group0()[3] * other.group3()[2])),
                (self.group0()[2] * other.group0()[2]),
            ]) + (Simd32x4::from([other.group2()[1], other.group2()[3], other.group2()[3], other.group0()[1]]) * swizzle!(self.group0(), 2, 1, 2, 1))
                + (Simd32x4::from([other.group2()[3], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group0(), 0, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[3])),
                ((self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[2] * other.group2()[2]) - (self.group0()[3] * other.group0()[3]) - (self.group0()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for AntiPlane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       40        0
    //    simd4       22       23        0
    // Totals...
    // yes simd       37       63        0
    //  no simd      103      132        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) * -1.0),
                ((self.group0()[2] * other.group0()[0]) * -1.0),
                ((self.group0()[0] * other.group0()[1]) * -1.0),
                ((self.group0()[2] * other.group3()[2]) + (self.group0()[3] * other.group2()[3])),
            ]) + (Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group3()[1]]) * swizzle!(self.group0(), 2, 1, 2, 1))
                + (Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group0(), 0, 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[1] * other.group3()[2]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[2] * other.group3()[0]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group3()[1]) + (self.group0()[3] * other.group0()[2])),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[3] * other.group2()[3])),
            ]) - (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group1()[0]]) * swizzle!(self.group0(), 0, 0, 1, 0))
                - (Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group1()[1]]) * swizzle!(self.group0(), 2, 1, 2, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group0()[2] * other.group2()[1]) - (self.group0()[3] * other.group3()[0])),
                (-(self.group0()[1] * other.group3()[3]) - (self.group0()[3] * other.group3()[1])),
                (-(self.group0()[2] * other.group3()[3]) - (self.group0()[3] * other.group3()[2])),
                ((self.group0()[2] * other.group2()[2]) + (self.group0()[3] * other.group0()[3])),
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group3()[3], other.group2()[2], other.group2()[0], other.group1()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))
                + (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group2(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[3])),
                ((self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group0()[3])),
                ((self.group0()[2] * other.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (swizzle!(self.group0(), 3, 3, 3, 1) * swizzle!(other.group0(), 0, 1, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl InfixSandwich for AntiScalar {}
impl Sandwich<AntiCircleRotor> for AntiScalar {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        3        0
    //    simd4        0        7        0
    // Totals...
    // yes simd        0       10        0
    //  no simd        0       37        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = CircleRotor::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[e12345]) * other.group0()),
            // e415, e425, e435, e321
            (Simd32x4::from(self[e12345]) * other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e235, e315, e125, e12345
            (Simd32x4::from(self[e12345]) * other.group2()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for AntiScalar {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        3        0
    //    simd4        0       11        0
    // Totals...
    // yes simd        0       14        0
    //  no simd        0       53        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[e12345]) * other.group0() * Simd32x3::from(-1.0)),
            // e23, e31, e12, e45
            (Simd32x4::from(self[e12345]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e15, e25, e35, e1234
            (Simd32x4::from(self[e12345]) * other.group2() * Simd32x4::from(-1.0)),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[e12345]) * other.group3() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for AntiScalar {
    type Output = AntiDualNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        3        0
    // no simd        0        6        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DualNum::from_groups(/* e4, e12345 */ (Simd32x2::from(self[e12345]) * other.group0()));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for AntiScalar {
    type Output = AntiFlatPoint;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = FlatPoint::from_groups(/* e15, e25, e35, e45 */ (Simd32x4::from(self[e12345]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for AntiScalar {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        8        0
    // no simd        0       32        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(self[e12345]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[e12345]) * other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for AntiScalar {
    type Output = AntiLine;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        6        0
    // no simd        0       18        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Line::from_groups(
            // e415, e425, e435
            (Simd32x3::from(self[e12345]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self[e12345]) * other.group1()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for AntiScalar {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        6        0
    // no simd        0       24        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(self[e12345]) * other.group0()),
            // e235, e315, e125, e5
            (Simd32x4::from(self[e12345]) * other.group1()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for AntiScalar {
    type Output = AntiPlane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Plane::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[e12345]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for AntiScalar {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        3        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Scalar::from_groups(/* scalar */ (other[e12345] * self[e12345] * -1.0));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for AntiScalar {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        6        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0       10        0
    //  no simd        0       34        0
    fn sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Dipole::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[e12345]) * other.group0() * Simd32x3::from(-1.0)),
            // e23, e31, e12, e45
            (Simd32x4::from(self[e12345]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e15, e25, e35
            (Simd32x3::from(self[e12345]) * other.group2() * Simd32x3::from(-1.0)),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for AntiScalar {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        3        0
    //    simd4        0        7        0
    // Totals...
    // yes simd        0       10        0
    //  no simd        0       37        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[e12345]) * other.group0() * Simd32x3::from(-1.0)),
            // e23, e31, e12, e45
            (Simd32x4::from(self[e12345]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e15, e25, e35, scalar
            (Simd32x4::from(self[e12345]) * other.group2() * Simd32x4::from(-1.0)),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for AntiScalar {
    type Output = Dipole;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        6        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0       10        0
    //  no simd        0       34        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Circle::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[e12345]) * other.group0()),
            // e415, e425, e435, e321
            (Simd32x4::from(self[e12345]) * other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e235, e315, e125
            (Simd32x3::from(self[e12345]) * other.group2()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for AntiScalar {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        3        0
    //    simd4        0       11        0
    // Totals...
    // yes simd        0       14        0
    //  no simd        0       53        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[e12345]) * other.group0()),
            // e415, e425, e435, e321
            (Simd32x4::from(self[e12345]) * other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e235, e315, e125, e4
            (Simd32x4::from(self[e12345]) * other.group2()),
            // e1, e2, e3, e5
            (Simd32x4::from(self[e12345]) * other.group3() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for AntiScalar {
    type Output = DualNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        3        0
    // no simd        0        6        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDualNum::from_groups(/* e1234, scalar */ (Simd32x2::from(self[e12345]) * other.group0() * Simd32x2::from(-1.0)));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for AntiScalar {
    type Output = FlatPoint;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlatPoint::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from(self[e12345]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for AntiScalar {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        8        0
    // no simd        0       32        0
    fn sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from(self[e12345]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e1, e2, e3, e5
            (Simd32x4::from(self[e12345]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for AntiScalar {
    type Output = Line;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        6        0
    // no simd        0       18        0
    fn sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiLine::from_groups(
            // e23, e31, e12
            (Simd32x3::from(self[e12345]) * other.group0() * Simd32x3::from(-1.0)),
            // e15, e25, e35
            (Simd32x3::from(self[e12345]) * other.group1() * Simd32x3::from(-1.0)),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for AntiScalar {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        6        0
    // no simd        0       24        0
    fn sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from(self[e12345]) * other.group0() * Simd32x4::from(-1.0)),
            // e15, e25, e35, e3215
            (Simd32x4::from(self[e12345]) * other.group1() * Simd32x4::from(-1.0)),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for AntiScalar {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        6        0
    //    simd2        0        4        0
    //    simd3        0       12        0
    //    simd4        0       16        0
    // Totals...
    // yes simd        0       38        0
    //  no simd        0      114        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from(self[e12345]) * swizzle!(other.group0(), 1, 0) * Simd32x2::from([-1.0, 1.0])),
            // e1, e2, e3, e4
            (Simd32x4::from(self[e12345]) * Simd32x4::from([other.group9()[0], other.group9()[1], other.group9()[2], other[e45]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e5
            (other.group9()[3] * self[e12345]),
            // e15, e25, e35, e45
            (Simd32x4::from(self[e12345]) * Simd32x4::from([other.group8()[0], other.group8()[1], other.group8()[2], other.group6()[3]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e41, e42, e43
            (Simd32x3::from(self[e12345]) * other.group7() * Simd32x3::from(-1.0)),
            // e23, e31, e12
            (Simd32x3::from(self[e12345]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]) * Simd32x3::from(-1.0)),
            // e415, e425, e435, e321
            (Simd32x4::from(self[e12345]) * Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group3()[3]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e423, e431, e412
            (Simd32x3::from(self[e12345]) * other.group4()),
            // e235, e315, e125
            (Simd32x3::from(self[e12345]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]])),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[e12345]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other[e1]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e1234
            (other.group1()[3] * self[e12345] * -1.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for AntiScalar {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiPlane::from_groups(/* e1, e2, e3, e5 */ (Simd32x4::from(self[e12345]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for AntiScalar {
    type Output = RoundPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        7        0
    //  no simd        0       19        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[e12345]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other[e2]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e1234
            (other.group0()[3] * self[e12345] * -1.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for AntiScalar {
    type Output = Scalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        3        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiScalar::from_groups(/* e12345 */ (self[e12345] * other[scalar]));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for AntiScalar {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        7        0
    //  no simd        0       19        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = RoundPoint::from_groups(
            // e1, e2, e3, e4
            (Simd32x4::from(self[e12345]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other[e4315]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e5
            (other.group0()[3] * self[e12345]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for AntiScalar {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0       14        0
    // no simd        0       56        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self[e12345]) * other.group0() * Simd32x4::from(-1.0)),
            // e23, e31, e12, e45
            (Simd32x4::from(self[e12345]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e15, e25, e35, e1234
            (Simd32x4::from(self[e12345]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]) * Simd32x4::from(-1.0)),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[e12345]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[3]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for AntiScalar {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0       14        0
    // no simd        0       56        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self[e12345]) * other.group0()),
            // e415, e425, e435, e321
            (Simd32x4::from(self[e12345]) * other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e235, e315, e125, e5
            (Simd32x4::from(self[e12345]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]])),
            // e1, e2, e3, e4
            (Simd32x4::from(self[e12345]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[3]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl InfixSandwich for Circle {}
impl Sandwich<AntiCircleRotor> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      122      154        0
    //    simd3        0        2        0
    //    simd4       29       30        0
    // Totals...
    // yes simd      151      186        0
    //  no simd      238      280        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3])
                    + (other.group0()[1] * self.group1()[2])
                    + (self.group0()[0] * other.group1()[3])
                    + (self.group0()[0] * other.group2()[3])
                    + (self.group0()[2] * other.group1()[1])),
                ((other.group0()[1] * self.group1()[3])
                    + (other.group0()[2] * self.group1()[0])
                    + (self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[1] * other.group2()[3])),
                ((other.group0()[0] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[3])
                    + (self.group0()[1] * other.group1()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group0()[2] * other.group2()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1]) + (other.group1()[1] * self.group1()[2]) - (other.group1()[2] * self.group1()[1])
                    + (other.group2()[3] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[2] * self.group2()[0]) - (other.group1()[0] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[0])
                    + (other.group2()[3] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) + (other.group1()[0] * self.group1()[1]) - (other.group1()[1] * self.group1()[0])
                    + (other.group2()[3] * self.group1()[2])),
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group2()[0] * other.group2()[3]) + (self.group2()[2] * other.group1()[1]) + (other.group2()[1] * self.group1()[2])),
                ((self.group2()[0] * other.group1()[2]) + (self.group2()[1] * other.group2()[3]) + (other.group2()[2] * self.group1()[0])),
                ((self.group2()[1] * other.group1()[0]) + (self.group2()[2] * other.group2()[3]) + (other.group2()[0] * self.group1()[1])),
                (-(self.group2()[2] * other.group1()[2]) - (other.group2()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[0], self.group2()[0]]) * swizzle!(other.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[2], self.group2()[1]]) * swizzle!(other.group1(), 2, 0, 3, 1))
                - (swizzle!(other.group2(), 0, 0, 1, 0) * swizzle!(self.group1(), 3, 2, 0, 0))
                - (swizzle!(other.group2(), 2, 1, 2, 1) * swizzle!(self.group1(), 1, 3, 3, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) - (self.group0()[1] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[1])
                    + (other.group1()[0] * self.group1()[3])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0]) + (self.group0()[0] * other.group2()[2]) - (self.group0()[2] * other.group2()[0])
                    + (other.group1()[1] * self.group1()[3])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) - (self.group0()[0] * other.group2()[1])
                    + (self.group0()[1] * other.group2()[0])
                    + (other.group1()[2] * self.group1()[3])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      110      142        0
    //    simd3        0        2        0
    //    simd4       42       43        0
    // Totals...
    // yes simd      152      187        0
    //  no simd      278      320        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2])
                    - (self.group0()[1] * other.group3()[2])
                    - (self.group0()[2] * other.group1()[1])
                    - (other.group2()[3] * self.group1()[0])),
                (-(other.group0()[2] * self.group1()[0])
                    - (self.group0()[0] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[0])
                    - (other.group2()[3] * self.group1()[1])),
                (-(other.group0()[2] * self.group1()[3])
                    - (self.group0()[0] * other.group3()[1])
                    - (self.group0()[1] * other.group1()[0])
                    - (other.group2()[3] * self.group1()[2])),
                ((other.group0()[0] * self.group2()[0])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])
                    + (other.group1()[1] * self.group1()[1])
                    + (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group2()[0]]))
                + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group2()[1]]))
                + (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group2()[2]]))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group1()[3]]) * swizzle!(self.group1(), 3, 3, 1, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[1])
                    + (self.group0()[1] * other.group2()[2])
                    + (other.group1()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0]) + (self.group0()[2] * other.group2()[0]) + (other.group1()[0] * self.group1()[2])),
                (-(other.group0()[0] * self.group2()[1])
                    + (other.group0()[1] * self.group2()[0])
                    + (self.group0()[0] * other.group2()[1])
                    + (other.group1()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2]) - (self.group0()[2] * other.group2()[2])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[1]]) * swizzle!(self.group1(), 2, 0, 1, 1))
                - (swizzle!(other.group3(), 0, 1, 2, 2) * swizzle!(self.group1(), 3, 3, 3, 2))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(self.group2()[0] * other.group1()[3]) + (self.group2()[1] * other.group3()[2]) - (self.group2()[2] * other.group1()[1])),
                (-(self.group2()[0] * other.group1()[2]) - (self.group2()[1] * other.group1()[3]) + (self.group2()[2] * other.group3()[0])),
                ((self.group2()[0] * other.group3()[1]) - (self.group2()[1] * other.group1()[0]) - (self.group2()[2] * other.group1()[3])),
                ((other.group0()[2] * self.group1()[2]) + (self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group1()[2]) - (self.group0()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group2()[0], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([other.group2()[2], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[1]]) * swizzle!(other.group3(), 3, 3, 3, 1))
                - (swizzle!(other.group2(), 1, 2, 0, 3) * swizzle!(self.group1(), 2, 0, 1, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1])
                    - (self.group0()[1] * other.group2()[2])
                    - (self.group2()[0] * other.group2()[3])
                    - (other.group3()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2])
                    - (other.group0()[2] * self.group2()[0])
                    - (self.group0()[2] * other.group2()[0])
                    - (self.group2()[1] * other.group2()[3])
                    - (other.group3()[0] * self.group1()[2])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0])
                    - (self.group0()[0] * other.group2()[1])
                    - (self.group2()[2] * other.group2()[3])
                    - (other.group3()[1] * self.group1()[0])),
                ((self.group2()[2] * other.group1()[2])
                    + (self.group2()[2] * other.group3()[2])
                    + (other.group2()[1] * self.group1()[1])
                    + (other.group2()[2] * self.group1()[2])
                    + (other.group3()[3] * self.group1()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[1]]) * swizzle!(other.group3(), 1, 2, 0, 1))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       61       91        0
    //    simd3        1        4        0
    //    simd4       19       20        0
    // Totals...
    // yes simd       81      115        0
    //  no simd      140      183        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            ((Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])) + (Simd32x3::from(other.group0()[1]) * self.group0())),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (other.group0()[1] * self.group2()[0]),
                (other.group0()[1] * self.group2()[1]),
                (other.group0()[1] * self.group2()[2]),
                (other.group0()[0] * self.group1()[3]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[0] * self.group2()[0] * -1.0),
                (other.group0()[0] * self.group2()[1] * -1.0),
                (other.group0()[0] * self.group2()[2] * -1.0),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       73      107        0
    //    simd3        0        2        0
    //    simd4       24       25        0
    // Totals...
    // yes simd       97      134        0
    //  no simd      169      213        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) - (other.group0()[3] * self.group1()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[2] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group2()[0] * other.group0()[3]) + (other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])),
                (-(self.group2()[1] * other.group0()[3]) + (other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group1()[0])),
                (-(self.group2()[2] * other.group0()[3]) - (other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group1()[3])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) * -1.0),
                ((self.group0()[2] * other.group0()[0]) * -1.0),
                ((self.group0()[0] * other.group0()[1]) * -1.0),
                (other.group0()[2] * self.group1()[2]),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (swizzle!(other.group0(), 3, 3, 3, 1) * swizzle!(self.group1(), 0, 1, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       84      117        0
    //    simd3        0        2        0
    //    simd4       31       32        0
    // Totals...
    // yes simd      115      151        0
    //  no simd      208      251        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) - (other.group0()[3] * self.group1()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[2] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]) - (other.group1()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (swizzle!(other.group1(), 0, 1, 2, 1) * swizzle!(self.group1(), 3, 3, 3, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(self.group2()[0] * other.group0()[3]) + (self.group2()[1] * other.group1()[2]) + (other.group0()[0] * self.group1()[3])
                    - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])),
                (-(self.group2()[1] * other.group0()[3])
                    + (self.group2()[2] * other.group1()[0])
                    + (other.group0()[0] * self.group1()[2])
                    + (other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group1()[0])),
                ((self.group2()[0] * other.group1()[1]) - (self.group2()[2] * other.group0()[3]) - (other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group1()[3])),
                ((self.group0()[2] * other.group1()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) - (other.group1()[2] * self.group1()[1])),
                (-(self.group0()[2] * other.group0()[0]) - (other.group1()[0] * self.group1()[2])),
                (-(self.group0()[0] * other.group0()[1]) - (other.group1()[1] * self.group1()[0])),
                ((self.group2()[2] * other.group1()[2]) + (other.group0()[2] * self.group1()[2]) + (other.group1()[3] * self.group1()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))
                + (swizzle!(other.group0(), 3, 3, 3, 1) * swizzle!(self.group1(), 0, 1, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      100      132        0
    //    simd3        0        2        0
    //    simd4       22       23        0
    // Totals...
    // yes simd      122      157        0
    //  no simd      188      230        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1]) + (other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group1()[0]) - (other.group1()[0] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) + (other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0])),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1]) + (other.group1()[1] * self.group1()[2])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[2] * self.group2()[0]) + (other.group1()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) + (other.group1()[0] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group1()[0], other.group1()[0], other.group1()[1], other.group1()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[1], other.group1()[2], other.group1()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1])),
                ((other.group0()[1] * self.group1()[3]) - (other.group1()[0] * self.group0()[2]) + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[2] * self.group1()[3]) + (other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      104      136        0
    //    simd3        0        2        0
    //    simd4       26       27        0
    // Totals...
    // yes simd      130      165        0
    //  no simd      208      250        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[3])),
                ((self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[2] * other.group1()[1]) - (other.group0()[2] * self.group1()[1]) + (other.group0()[3] * self.group1()[0])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3]) - (other.group0()[0] * self.group1()[2]) + (other.group0()[3] * self.group1()[1])),
                ((self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[3]) - (other.group0()[1] * self.group1()[0]) + (other.group0()[3] * self.group1()[2])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                + (swizzle!(other.group0(), 1, 2, 0, 3) * swizzle!(self.group1(), 2, 0, 1, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group2()[0] * other.group0()[3]) + (self.group2()[2] * other.group0()[1]) + (other.group1()[1] * self.group1()[2]) + (other.group1()[3] * self.group1()[0])),
                ((self.group2()[0] * other.group0()[2]) + (self.group2()[1] * other.group0()[3]) + (other.group1()[2] * self.group1()[0]) + (other.group1()[3] * self.group1()[1])),
                ((self.group2()[1] * other.group0()[0]) + (self.group2()[2] * other.group0()[3]) + (other.group1()[0] * self.group1()[1]) + (other.group1()[3] * self.group1()[2])),
                (-(self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])),
            ]) - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group2()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (swizzle!(other.group1(), 0, 0, 1, 0) * swizzle!(self.group1(), 3, 2, 0, 0))
                - (swizzle!(other.group1(), 2, 1, 2, 1) * swizzle!(self.group1(), 1, 3, 3, 1))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1]) + (other.group0()[0] * self.group1()[3])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group1()[0]) + (other.group0()[1] * self.group1()[3])),
                (-(self.group0()[0] * other.group1()[1])
                    + (self.group0()[1] * other.group1()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (other.group0()[2] * self.group1()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       67       97        0
    //    simd3        1        4        0
    //    simd4       23       24        0
    // Totals...
    // yes simd       91      125        0
    //  no simd      162      205        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([0.0, 0.0, 0.0, ((other.group0()[2] * self.group1()[2]) * -1.0)])
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                - (swizzle!(other.group0(), 0, 1, 2, 1) * swizzle!(self.group1(), 3, 3, 3, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (self.group2()[1] * other.group0()[2]),
                (self.group2()[2] * other.group0()[0]),
                (self.group2()[0] * other.group0()[1]),
                ((self.group0()[2] * other.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[2] * self.group1()[1]) * -1.0),
                ((other.group0()[0] * self.group1()[2]) * -1.0),
                ((other.group0()[1] * self.group1()[0]) * -1.0),
                ((self.group2()[2] * other.group0()[2]) + (other.group0()[3] * self.group1()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       72        0
    //    simd3        0        6        0
    //    simd4        7       10        0
    // Totals...
    // yes simd       63       88        0
    //  no simd       84      130        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Dipole::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other[e12345]) * self.group0() * Simd32x3::from(-1.0)),
            // e23, e31, e12, e45
            (Simd32x4::from(other[e12345]) * self.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e15, e25, e35
            (Simd32x3::from(other[e12345]) * self.group2() * Simd32x3::from(-1.0)),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      108      140        0
    //    simd3        0        2        0
    //    simd4       30       31        0
    // Totals...
    // yes simd      138      173        0
    //  no simd      228      270        0
    fn sandwich(self, other: Circle) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(other.group0()[2] * self.group1()[0]) - (self.group0()[0] * other.group1()[2])),
                (-(other.group0()[2] * self.group1()[3]) - (self.group0()[1] * other.group1()[0])),
                ((other.group0()[0] * self.group2()[0])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])
                    + (other.group2()[0] * self.group0()[0])
                    + (other.group2()[1] * self.group0()[1])
                    + (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group1()[3]]) * swizzle!(self.group1(), 3, 3, 1, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group1()[1]]) * swizzle!(other.group1(), 3, 3, 1, 1))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[2], self.group1()[2]]) * swizzle!(other.group1(), 2, 0, 3, 2))),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) - (other.group2()[1] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[1])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0]) + (other.group2()[0] * self.group0()[2]) - (other.group2()[2] * self.group0()[0])
                    + (other.group1()[0] * self.group1()[2])
                    - (other.group1()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) - (other.group2()[0] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[0])
                    - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(other.group2()[1] * self.group1()[2]) - (self.group2()[0] * other.group1()[3]) - (self.group2()[2] * other.group1()[1])),
                (-(other.group2()[2] * self.group1()[0]) - (self.group2()[0] * other.group1()[2]) - (self.group2()[1] * other.group1()[3])),
                (-(other.group2()[0] * self.group1()[1]) - (self.group2()[1] * other.group1()[0]) - (self.group2()[2] * other.group1()[3])),
                ((other.group0()[2] * self.group1()[2]) + (self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([other.group2()[0], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([other.group2()[2], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))
                + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) + (other.group2()[1] * self.group0()[2])
                    - (other.group2()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0]) - (other.group2()[0] * self.group0()[2]) + (other.group2()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) + (other.group2()[0] * self.group0()[1])
                    - (other.group2()[1] * self.group0()[0])),
                ((other.group2()[2] * self.group1()[2]) + (self.group2()[0] * other.group1()[0]) + (self.group2()[1] * other.group1()[1]) + (self.group2()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[1]]) * swizzle!(self.group1(), 0, 1, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      102      134        0
    //    simd3        0        2        0
    //    simd4       34       35        0
    // Totals...
    // yes simd      136      171        0
    //  no simd      238      280        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(self.group0()[0] * other.group2()[3]) - (other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2])),
                (-(self.group0()[1] * other.group2()[3]) - (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group1()[0])),
                (-(self.group0()[2] * other.group2()[3]) - (other.group0()[0] * self.group1()[1]) - (other.group0()[2] * self.group1()[3])),
                ((self.group0()[0] * other.group2()[0])
                    + (self.group0()[1] * other.group2()[1])
                    + (self.group0()[2] * other.group2()[2])
                    + (self.group2()[0] * other.group0()[0])
                    + (self.group2()[1] * other.group0()[1])
                    + (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 3, 3, 1, 0))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[2], self.group1()[1]]) * swizzle!(other.group1(), 2, 0, 3, 1))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[3]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]) * swizzle!(self.group1(), 1, 2, 0, 2))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group2()[1] * other.group0()[2]) - (self.group2()[2] * other.group0()[1]) + (self.group1()[1] * other.group1()[2]) - (self.group1()[2] * other.group1()[1])),
                (-(self.group2()[0] * other.group0()[2]) + (self.group2()[2] * other.group0()[0]) - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[0])),
                ((self.group2()[0] * other.group0()[1]) - (self.group2()[1] * other.group0()[0]) + (self.group1()[0] * other.group1()[1]) - (self.group1()[1] * other.group1()[0])),
                (-(self.group0()[2] * other.group2()[2])
                    + (self.group2()[0] * other.group0()[0])
                    + (self.group2()[1] * other.group0()[1])
                    + (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[3]]) * swizzle!(other.group2(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(self.group2()[0] * other.group1()[3])
                    - (self.group2()[0] * other.group2()[3])
                    - (self.group2()[2] * other.group1()[1])
                    - (self.group1()[2] * other.group2()[1])),
                (-(self.group2()[0] * other.group1()[2])
                    - (self.group2()[1] * other.group1()[3])
                    - (self.group2()[1] * other.group2()[3])
                    - (self.group1()[0] * other.group2()[2])),
                (-(self.group2()[1] * other.group1()[0])
                    - (self.group2()[2] * other.group1()[3])
                    - (self.group2()[2] * other.group2()[3])
                    - (self.group1()[1] * other.group2()[0])),
                ((self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group1()[2]) + (other.group0()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group1(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[1] * other.group2()[2]) + (self.group2()[1] * other.group0()[2]) - (self.group2()[2] * other.group0()[1])),
                (-(self.group0()[2] * other.group2()[0]) - (self.group2()[0] * other.group0()[2]) + (self.group2()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group2()[0] * other.group0()[1]) - (self.group2()[1] * other.group0()[0])),
                ((self.group2()[2] * other.group1()[2]) + (self.group1()[1] * other.group2()[1]) + (self.group1()[2] * other.group2()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[1]]) * swizzle!(other.group1(), 0, 1, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      120      152        0
    //    simd3        0        2        0
    //    simd4       27       28        0
    // Totals...
    // yes simd      147      182        0
    //  no simd      228      270        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[2] * other.group1()[1]) + (other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group1()[2])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3]) + (other.group0()[1] * self.group1()[3]) + (other.group0()[2] * self.group1()[0])),
                ((self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[3]) + (other.group0()[0] * self.group1()[1]) + (other.group0()[2] * self.group1()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[1] * other.group2()[2]) + (self.group0()[2] * other.group2()[1]) - (self.group2()[1] * other.group0()[2])
                    + (self.group2()[2] * other.group0()[1])
                    - (self.group1()[1] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[2] * other.group2()[0]) + (self.group2()[0] * other.group0()[2]) - (self.group2()[2] * other.group0()[0])
                    + (self.group1()[0] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0]) - (self.group2()[0] * other.group0()[1])
                    + (self.group2()[1] * other.group0()[0])
                    - (self.group1()[0] * other.group1()[1])
                    + (self.group1()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])
                    + (self.group2()[0] * other.group0()[0])
                    + (self.group2()[1] * other.group0()[1])
                    + (self.group2()[2] * other.group0()[2])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group2()[2] * other.group1()[1]) + (other.group2()[1] * self.group1()[2])),
                ((self.group2()[0] * other.group1()[2]) + (other.group2()[2] * self.group1()[0])),
                ((self.group2()[1] * other.group1()[0]) + (other.group2()[0] * self.group1()[1])),
                (-(self.group2()[2] * other.group1()[2]) - (other.group2()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[0], self.group2()[0]]) * swizzle!(other.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[2], self.group2()[1]]) * swizzle!(other.group1(), 2, 0, 3, 1))
                - (Simd32x4::from([other.group2()[0], other.group2()[0], other.group2()[1], other.group2()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([other.group2()[2], other.group2()[1], other.group2()[2], other.group2()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group0()[1] * other.group2()[2]) + (self.group0()[2] * other.group2()[1]) + (self.group2()[1] * other.group0()[2])
                    - (self.group2()[2] * other.group0()[1])
                    + (self.group1()[3] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[2] * other.group2()[0]) - (self.group2()[0] * other.group0()[2])
                    + (self.group2()[2] * other.group0()[0])
                    + (self.group1()[3] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0]) + (self.group2()[0] * other.group0()[1])
                    - (self.group2()[1] * other.group0()[0])
                    + (self.group1()[3] * other.group1()[2])),
                (-(self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      138      170        0
    //    simd3        0        2        0
    //    simd4       35       36        0
    // Totals...
    // yes simd      173      208        0
    //  no simd      278      320        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group3()[2])
                    + (self.group0()[2] * other.group1()[1])
                    + (self.group0()[2] * other.group3()[1])
                    + (other.group0()[0] * self.group1()[3])
                    + (other.group0()[1] * self.group1()[2])
                    + (self.group1()[0] * other.group2()[3])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group3()[0])
                    + (other.group0()[1] * self.group1()[3])
                    + (other.group0()[2] * self.group1()[0])
                    + (self.group1()[1] * other.group2()[3])),
                (-(self.group0()[0] * other.group3()[1])
                    + (self.group0()[1] * other.group1()[0])
                    + (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (other.group0()[0] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[3])
                    + (self.group1()[2] * other.group2()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group2()[1]) + (self.group2()[0] * other.group2()[3]) - (self.group2()[1] * other.group0()[2]) + (self.group2()[2] * other.group0()[1])
                    - (self.group1()[1] * other.group1()[2])
                    - (self.group1()[3] * other.group3()[0])),
                ((self.group0()[0] * other.group2()[2]) + (self.group2()[0] * other.group0()[2]) + (self.group2()[1] * other.group2()[3])
                    - (self.group2()[2] * other.group0()[0])
                    - (self.group1()[2] * other.group1()[0])
                    - (self.group1()[3] * other.group3()[1])),
                ((self.group0()[1] * other.group2()[0]) - (self.group2()[0] * other.group0()[1]) + (self.group2()[1] * other.group0()[0]) + (self.group2()[2] * other.group2()[3])
                    - (self.group1()[0] * other.group1()[1])
                    - (self.group1()[3] * other.group3()[2])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])
                    + (self.group2()[0] * other.group0()[0])
                    + (self.group2()[1] * other.group0()[1])
                    + (self.group2()[2] * other.group0()[2])
                    + (self.group1()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[1]]) * swizzle!(self.group1(), 2, 0, 1, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group2()[2] * other.group1()[1]) + (self.group1()[2] * other.group2()[1])),
                ((self.group2()[0] * other.group1()[2]) + (self.group1()[0] * other.group2()[2])),
                ((self.group2()[1] * other.group1()[0]) + (self.group1()[1] * other.group2()[0])),
                ((self.group2()[2] * other.group3()[2]) - (self.group1()[2] * other.group2()[2]) - (self.group1()[3] * other.group3()[3])),
            ]) - (Simd32x4::from(self.group2()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group1()[0]]))
                - (Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group1()[1]]))
                - (Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group1()[2]]))
                + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group2()[0]]) * swizzle!(other.group3(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[1]]) * swizzle!(other.group3(), 3, 3, 3, 1))
                - (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group2(), 0, 1, 2, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) - (self.group0()[1] * other.group2()[2]) - (self.group2()[0] * other.group2()[3]) + (self.group2()[1] * other.group0()[2])
                    - (self.group2()[2] * other.group0()[1])
                    + (self.group1()[1] * other.group3()[2])
                    + (self.group1()[3] * other.group1()[0])),
                ((self.group0()[1] * other.group3()[3]) - (self.group0()[2] * other.group2()[0]) - (self.group2()[0] * other.group0()[2]) - (self.group2()[1] * other.group2()[3])
                    + (self.group2()[2] * other.group0()[0])
                    + (self.group1()[2] * other.group3()[0])
                    + (self.group1()[3] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[2] * other.group3()[3]) + (self.group2()[0] * other.group0()[1])
                    - (self.group2()[1] * other.group0()[0])
                    - (self.group2()[2] * other.group2()[3])
                    + (self.group1()[0] * other.group3()[1])
                    + (self.group1()[3] * other.group1()[2])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[0] * other.group3()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])
                    - (other.group0()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group0()[0]]) * swizzle!(self.group1(), 0, 0, 1, 0))
                - (Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group0()[1]]) * swizzle!(self.group1(), 2, 1, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       69       99        0
    //    simd3        1        4        0
    //    simd4       17       19        0
    // Totals...
    // yes simd       87      122        0
    //  no simd      140      187        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (-(Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])) - (Simd32x3::from(other.group0()[1]) * self.group0())),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(other.group0()[0] * self.group2()[0]) - (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (other.group0()[1] * self.group2()[0]),
                (other.group0()[1] * self.group2()[1]),
                (other.group0()[1] * self.group2()[2]),
                (other.group0()[0] * self.group1()[3]),
            ]) * Simd32x4::from(-1.0)),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group2()[0] * -1.0),
                (other.group0()[0] * self.group2()[1] * -1.0),
                (other.group0()[0] * self.group2()[2] * -1.0),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       74      104        0
    //    simd3        0        2        0
    //    simd4       24       25        0
    // Totals...
    // yes simd       98      131        0
    //  no simd      170      210        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (self.group0()[2] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (self.group0()[1] * other.group0()[0]),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (self.group1()[2] * other.group0()[1]),
                (self.group1()[0] * other.group0()[2]),
                (self.group1()[1] * other.group0()[0]),
                0.0,
            ]) - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                - (swizzle!(self.group1(), 1, 2, 0, 1) * swizzle!(other.group0(), 2, 0, 1, 1))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group0(), 0, 1, 2, 2))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1]) - (self.group1()[0] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0]) - (self.group1()[1] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) - (self.group1()[2] * other.group0()[3])),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       92      124        0
    //    simd3        0        2        0
    //    simd4       29       30        0
    // Totals...
    // yes simd      121      156        0
    //  no simd      208      250        0
    fn sandwich(self, other: Flector) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[3]) - (self.group0()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group0()[1]) - (self.group1()[3] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[2]) - (self.group1()[3] * other.group1()[1])),
                ((self.group0()[1] * other.group0()[0]) - (self.group1()[3] * other.group1()[2])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (self.group1()[2] * other.group0()[1]),
                (self.group1()[0] * other.group0()[2]),
                (self.group1()[1] * other.group0()[0]),
                (self.group2()[2] * other.group1()[2]),
            ]) - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group2()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                - (swizzle!(self.group1(), 1, 2, 0, 1) * swizzle!(other.group0(), 2, 0, 1, 1))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group0(), 0, 1, 2, 2))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1]) - (self.group1()[0] * other.group0()[3])
                    + (self.group1()[1] * other.group1()[2])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group0()[0]) - (self.group1()[1] * other.group0()[3])
                    + (self.group1()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group0()[1])
                    + (self.group0()[1] * other.group0()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[2] * other.group0()[3])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      100      132        0
    //    simd3        0        2        0
    //    simd4       22       23        0
    // Totals...
    // yes simd      122      157        0
    //  no simd      188      230        0
    fn sandwich(self, other: Line) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[2])
                    + (other.group0()[0] * self.group1()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0]) + (other.group0()[0] * self.group1()[2])
                    - (other.group0()[2] * self.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) - (other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0])),
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group2()[1] * other.group0()[2]) - (self.group2()[2] * other.group0()[1]) + (other.group1()[0] * self.group1()[3]) - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])),
                (-(self.group2()[0] * other.group0()[2])
                    + (self.group2()[2] * other.group0()[0])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group1()[0])),
                ((self.group2()[0] * other.group0()[1]) - (self.group2()[1] * other.group0()[0]) - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group1()[3])),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
                ((self.group2()[0] * other.group0()[0])
                    + (self.group2()[1] * other.group0()[1])
                    + (self.group2()[2] * other.group0()[2])
                    + (other.group1()[1] * self.group1()[1])
                    + (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       92      128        0
    //    simd3        0        2        0
    //    simd4       29       30        0
    // Totals...
    // yes simd      121      160        0
    //  no simd      208      254        0
    fn sandwich(self, other: Motor) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group0()[3])),
                (-(self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group0()[3])),
                ((self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[2])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group1()[0] * other.group0()[3]) - (self.group1()[2] * other.group0()[1])),
                ((self.group0()[2] * other.group1()[0]) - (self.group1()[0] * other.group0()[2]) - (self.group1()[1] * other.group0()[3])),
                ((self.group0()[0] * other.group1()[1]) - (self.group1()[1] * other.group0()[0]) - (self.group1()[2] * other.group0()[3])),
                ((self.group0()[2] * other.group1()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[2], self.group0()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))
                + (swizzle!(self.group1(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(self.group2()[0] * other.group0()[3]) - (self.group2()[2] * other.group0()[1]) - (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])
                    + (self.group1()[3] * other.group1()[0])),
                (-(self.group2()[0] * other.group0()[2])
                    - (self.group2()[1] * other.group0()[3])
                    - (self.group1()[0] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group1()[3] * other.group1()[1])),
                (-(self.group2()[1] * other.group0()[0]) - (self.group2()[2] * other.group0()[3]) + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])
                    - (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) * -1.0),
                ((self.group0()[2] * other.group1()[0]) * -1.0),
                ((self.group0()[0] * other.group1()[1]) * -1.0),
                ((self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2]) + (self.group1()[2] * other.group1()[2]) + (self.group1()[3] * other.group1()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[0]]) * swizzle!(other.group0(), 0, 1, 2, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for Circle {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      232      284        0
    //    simd2        2        2        0
    //    simd3       68       74        0
    //    simd4       34       35        0
    // Totals...
    // yes simd      336      395        0
    //  no simd      576      650        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                ((self.group0()[0] * other.group8()[0])
                    + (self.group0()[1] * other.group8()[1])
                    + (self.group0()[2] * other.group8()[2])
                    + (self.group2()[0] * other.group7()[0])
                    + (self.group2()[1] * other.group7()[1])
                    + (self.group2()[2] * other.group7()[2])
                    + (self.group1()[0] * other.group6()[0])
                    + (self.group1()[1] * other.group6()[1])
                    + (self.group1()[2] * other.group6()[2])),
                (-(self.group0()[0] * other.group3()[0])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group3()[2])
                    - (self.group2()[0] * other.group4()[0])
                    - (self.group2()[1] * other.group4()[1])
                    - (self.group2()[2] * other.group4()[2])
                    - (other.group5()[0] * self.group1()[0])
                    - (other.group5()[1] * self.group1()[1])
                    - (other.group5()[2] * self.group1()[2])),
            ]) - (Simd32x2::from(self.group1()[3]) * Simd32x2::from([other.group6()[3], other.group3()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group9()[3]) - (self.group0()[1] * other.group3()[2]) + (self.group0()[2] * other.group3()[1]) - (self.group2()[0] * other[e45])
                    + (self.group2()[1] * other.group4()[2])
                    - (self.group2()[2] * other.group4()[1])
                    + (self.group1()[1] * other.group9()[2])),
                ((self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group9()[3])
                    - (self.group0()[2] * other.group3()[0])
                    - (self.group2()[0] * other.group4()[2])
                    - (self.group2()[1] * other[e45])
                    + (self.group2()[2] * other.group4()[0])
                    + (self.group1()[2] * other.group9()[0])),
                (-(self.group0()[0] * other.group3()[1])
                    + (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group9()[3])
                    + (self.group2()[0] * other.group4()[1])
                    - (self.group2()[1] * other.group4()[0])
                    - (self.group2()[2] * other[e45])
                    + (self.group1()[0] * other.group9()[1])),
                (-(self.group0()[0] * other.group5()[0])
                    - (self.group0()[0] * other.group9()[0])
                    - (self.group0()[1] * other.group5()[1])
                    - (self.group0()[1] * other.group9()[1])
                    - (self.group0()[2] * other.group5()[2])
                    - (self.group0()[2] * other.group9()[2])
                    - (other.group4()[2] * self.group1()[2])),
            ]) + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other[e45]]))
                - (Simd32x4::from([other.group3()[3], other.group9()[2], other.group9()[0], other.group4()[0]]) * swizzle!(self.group1(), 0, 0, 1, 0))
                - (Simd32x4::from([other.group9()[1], other.group3()[3], other.group3()[3], other.group4()[1]]) * swizzle!(self.group1(), 2, 1, 2, 1))),
            // e5
            (-(self.group2()[0] * other.group5()[0]) + (self.group2()[0] * other.group9()[0]) - (self.group2()[1] * other.group5()[1]) + (self.group2()[1] * other.group9()[1])
                - (self.group2()[2] * other.group5()[2])
                + (self.group2()[2] * other.group9()[2])
                - (self.group1()[0] * other.group3()[0])
                - (self.group1()[1] * other.group3()[1])
                - (self.group1()[2] * other.group3()[2])
                - (self.group1()[3] * other.group9()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[0]) - (self.group2()[0] * other.group6()[3])
                    + (self.group2()[1] * other.group1()[2])
                    + (self.group2()[1] * other.group6()[2])
                    - (self.group2()[2] * other.group6()[1])
                    + (other.group8()[2] * self.group1()[1])),
                (-(other.group0()[1] * self.group2()[1]) - (self.group2()[0] * other.group6()[2]) - (self.group2()[1] * other.group6()[3])
                    + (self.group2()[2] * other.group1()[0])
                    + (self.group2()[2] * other.group6()[0])
                    + (other.group8()[1] * self.group1()[3])),
                (-(other.group0()[1] * self.group2()[2]) + (self.group2()[0] * other.group1()[1]) + (self.group2()[0] * other.group6()[1])
                    - (self.group2()[1] * other.group6()[0])
                    - (self.group2()[2] * other.group6()[3])
                    + (other.group8()[2] * self.group1()[3])),
                (-(self.group0()[0] * other.group8()[0]) - (self.group0()[1] * other.group8()[1]) - (self.group0()[2] * other.group8()[2])
                    + (self.group2()[0] * other.group7()[0])
                    + (self.group2()[1] * other.group7()[1])
                    + (self.group2()[2] * other.group7()[2])),
            ]) - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group8()[0], other.group8()[0], other.group8()[1], other.group0()[1]]) * swizzle!(self.group1(), 3, 2, 0, 3))
                - (Simd32x4::from([other.group8()[1], other.group8()[2], other.group8()[0], other.group1()[1]]) * swizzle!(self.group1(), 2, 0, 1, 1))
                - (Simd32x4::from([other[e1], other[e1], other[e1], other.group1()[2]]) * swizzle!(self.group1(), 0, 1, 2, 2))),
            // e41, e42, e43
            (-(Simd32x3::from(other.group0()[1]) * self.group0())
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group6()[3], other.group1()[2], other.group6()[1]]))
                + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group6()[2], other.group6()[3], other.group1()[0]]))
                + (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], other.group6()[0], other.group6()[3]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group7(), 2, 0, 1))
                - (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[3]]) * swizzle!(other.group7(), 1, 2, 2))
                - (Simd32x3::from([self.group1()[3], self.group1()[3], self.group1()[1]]) * swizzle!(other.group7(), 0, 1, 0))
                - (Simd32x3::from([other.group1()[2], other.group6()[2], other.group1()[1]]) * swizzle!(self.group0(), 1, 0, 0))
                - (Simd32x3::from([other.group6()[1], other.group1()[0], other.group6()[0]]) * swizzle!(self.group0(), 2, 2, 1))),
            // e23, e31, e12
            (Simd32x3::from([
                ((self.group1()[1] * other.group6()[2]) - (self.group1()[2] * other.group6()[1])),
                (-(self.group1()[0] * other.group6()[2]) + (self.group1()[2] * other.group6()[0])),
                ((self.group1()[0] * other.group6()[1]) - (self.group1()[1] * other.group6()[0])),
            ]) - (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from([other.group7()[1], other.group1()[3], other.group1()[3]]) * swizzle!(self.group2(), 2, 1, 2))
                - (Simd32x3::from([other.group8()[1], other[e1], other[e1]]) * swizzle!(self.group0(), 2, 1, 2))
                - (Simd32x3::from([other.group1()[3], other.group7()[2], other.group7()[0]]) * swizzle!(self.group2(), 0, 0, 1))
                - (Simd32x3::from([other[e1], other.group8()[2], other.group8()[0]]) * swizzle!(self.group0(), 0, 0, 1))
                + (swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group8(), 2, 0, 1))
                + (swizzle!(self.group2(), 1, 2, 0) * swizzle!(other.group7(), 2, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group3()[1]) + (self.group2()[0] * other[e45]) - (self.group2()[1] * other.group4()[2]) + (self.group2()[2] * other.group4()[1])
                    - (other.group5()[2] * self.group1()[1])
                    - (self.group1()[3] * other.group9()[0])),
                ((self.group0()[0] * other.group3()[2]) + (self.group2()[0] * other.group4()[2]) + (self.group2()[1] * other[e45])
                    - (self.group2()[2] * other.group4()[0])
                    - (other.group5()[0] * self.group1()[2])
                    - (self.group1()[3] * other.group9()[1])),
                ((self.group0()[1] * other.group3()[0]) - (self.group2()[0] * other.group4()[1]) + (self.group2()[1] * other.group4()[0]) + (self.group2()[2] * other[e45])
                    - (other.group5()[1] * self.group1()[0])
                    - (self.group1()[3] * other.group9()[2])),
                (-(self.group0()[1] * other.group3()[1]) - (self.group0()[2] * other.group3()[2])
                    + (self.group2()[0] * other.group4()[0])
                    + (self.group2()[1] * other.group4()[1])
                    + (self.group2()[2] * other.group4()[2])
                    + (self.group1()[2] * other.group9()[2])),
            ]) + (Simd32x4::from(other.group0()[0]) * self.group1())
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group9(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group3(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group5()[1], other.group5()[2], other.group5()[0], other.group9()[1]]) * swizzle!(self.group1(), 2, 0, 1, 1))),
            // e423, e431, e412
            ((Simd32x3::from(other.group0()[0]) * self.group0())
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from([other.group5()[1], other.group9()[2], other.group9()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                - (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group4(), 2, 0, 1))
                + (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[3]]) * swizzle!(other.group4(), 1, 2, 2))
                + (Simd32x3::from([self.group1()[3], self.group1()[3], self.group1()[1]]) * swizzle!(other.group4(), 0, 1, 0))
                + (Simd32x3::from([other.group3()[3], other.group5()[2], other.group5()[0]]) * swizzle!(self.group0(), 0, 0, 1))
                + (Simd32x3::from([other.group9()[1], other.group3()[3], other.group3()[3]]) * swizzle!(self.group0(), 2, 1, 2))
                - (Simd32x3::from([other.group9()[2], other.group9()[0], other.group9()[1]]) * swizzle!(self.group0(), 1, 2, 0))
                - (swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group5(), 2, 0, 1))),
            // e235, e315, e125
            (Simd32x3::from([
                (-(self.group1()[1] * other.group3()[2]) + (self.group1()[2] * other.group3()[1])),
                ((self.group1()[0] * other.group3()[2]) - (self.group1()[2] * other.group3()[0])),
                (-(self.group1()[0] * other.group3()[1]) + (self.group1()[1] * other.group3()[0])),
            ]) + (Simd32x3::from(other.group0()[0]) * self.group2())
                - (Simd32x3::from(self.group2()[0]) * Simd32x3::from([other.group3()[3], other.group9()[2], other.group5()[1]]))
                - (Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group5()[2], other.group3()[3], other.group9()[0]]))
                - (Simd32x3::from(self.group2()[2]) * Simd32x3::from([other.group9()[1], other.group5()[0], other.group3()[3]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from(other.group9()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from([other.group5()[1], other.group9()[0], other.group5()[0]]) * swizzle!(self.group2(), 2, 2, 1))
                + (Simd32x3::from([other.group9()[2], other.group5()[2], other.group9()[1]]) * swizzle!(self.group2(), 1, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[1] * other.group8()[2]) + (self.group0()[2] * other.group8()[1]) - (self.group2()[0] * other.group1()[3])
                    + (self.group2()[1] * other.group7()[2])
                    - (self.group2()[2] * other.group7()[1])
                    - (self.group1()[1] * other.group1()[2])),
                ((self.group0()[0] * other.group8()[2]) - (self.group0()[2] * other.group8()[0]) - (self.group2()[0] * other.group7()[2]) - (self.group2()[1] * other.group1()[3])
                    + (self.group2()[2] * other.group7()[0])
                    - (self.group1()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group8()[1]) + (self.group0()[1] * other.group8()[0]) + (self.group2()[0] * other.group7()[1])
                    - (self.group2()[1] * other.group7()[0])
                    - (self.group2()[2] * other.group1()[3])
                    - (self.group1()[0] * other.group1()[1])),
                ((self.group2()[0] * other.group1()[0])
                    + (self.group2()[1] * other.group1()[1])
                    + (self.group2()[1] * other.group6()[1])
                    + (self.group2()[2] * other.group1()[2])
                    + (self.group2()[2] * other.group6()[2])
                    + (other.group8()[2] * self.group1()[2])),
            ]) + (Simd32x4::from(other[e1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[0]]) * swizzle!(other.group6(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group1()[1], other.group6()[3], other.group6()[3], other.group8()[1]]) * swizzle!(self.group1(), 2, 1, 2, 1))
                + (Simd32x4::from([other.group6()[3], other.group1()[2], other.group1()[0], other.group8()[0]]) * swizzle!(self.group1(), 0, 0, 1, 0))),
            // e1234
            (-(self.group0()[0] * other.group1()[0]) + (self.group0()[0] * other.group6()[0]) - (self.group0()[1] * other.group1()[1]) + (self.group0()[1] * other.group6()[1])
                - (self.group0()[2] * other.group1()[2])
                + (self.group0()[2] * other.group6()[2])
                + (other.group7()[0] * self.group1()[0])
                + (other.group7()[1] * self.group1()[1])
                + (other.group7()[2] * self.group1()[2])
                - (self.group1()[3] * other.group1()[3])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       63       91        0
    //    simd3        1        4        0
    //    simd4       24       25        0
    // Totals...
    // yes simd       88      120        0
    //  no simd      162      203        0
    fn sandwich(self, other: Plane) -> Self::Output {
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            ((Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group1()[3] * other.group0()[0]) * -1.0),
                ((self.group1()[3] * other.group0()[1]) * -1.0),
                ((self.group1()[3] * other.group0()[2]) * -1.0),
                ((self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))),
            // e235, e315, e125, e4
            (Simd32x4::from([
                ((self.group2()[1] * other.group0()[2]) + (self.group1()[0] * other.group0()[3])),
                ((self.group2()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])),
                ((self.group2()[0] * other.group0()[1]) + (self.group1()[2] * other.group0()[3])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e5
            (Simd32x4::from([0.0, 0.0, 0.0, (self.group2()[2] * other.group0()[2])])
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[1]]) * swizzle!(other.group0(), 2, 0, 1, 1))
                - (swizzle!(self.group1(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       71      103        0
    //    simd3        2        5        0
    //    simd4       23       24        0
    // Totals...
    // yes simd       96      132        0
    //  no simd      169      214        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (-(Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[0] * other[e2]) * -1.0),
                ((self.group0()[1] * other[e2]) * -1.0),
                ((self.group0()[2] * other[e2]) * -1.0),
                ((self.group1()[2] * other.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (self.group2()[1] * other.group0()[2]),
                (self.group2()[2] * other.group0()[0]),
                (self.group2()[0] * other.group0()[1]),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other[e2], other[e2], other[e2], other.group0()[3]]) * self.group1())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group2()[0] * other.group0()[3]) - (self.group1()[1] * other.group0()[2])),
                (-(self.group2()[1] * other.group0()[3]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group2()[2] * other.group0()[3]) - (self.group1()[0] * other.group0()[1])),
                ((self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other[e2]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       64        0
    //    simd3        0        4        0
    //    simd4        9       11        0
    // Totals...
    // yes simd       57       79        0
    //  no simd       84      120        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Circle::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other[scalar]) * self.group0()),
            // e415, e425, e435, e321
            (Simd32x4::from(other[scalar]) * self.group1()),
            // e235, e315, e125
            (Simd32x3::from(other[scalar]) * self.group2()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       63       94        0
    //    simd3        2        5        0
    //    simd4       25       26        0
    // Totals...
    // yes simd       90      125        0
    //  no simd      169      213        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            ((Simd32x3::from(other[e4315]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group2()[0] * other[e4315]) - (self.group1()[3] * other.group0()[0])),
                ((self.group2()[1] * other[e4315]) - (self.group1()[3] * other.group0()[1])),
                ((self.group2()[2] * other[e4315]) - (self.group1()[3] * other.group0()[2])),
                ((self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))),
            // e235, e315, e125, e4
            (Simd32x4::from([
                (self.group2()[1] * other.group0()[2]),
                (self.group2()[2] * other.group0()[0]),
                (self.group2()[0] * other.group0()[1]),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other[e4315]]) * self.group1())),
            // e1, e2, e3, e5
            (Simd32x4::from([
                ((self.group2()[0] * other[e4315]) * -1.0),
                ((self.group2()[1] * other[e4315]) * -1.0),
                ((self.group2()[2] * other[e4315]) * -1.0),
                (self.group2()[2] * other.group0()[2]),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[1]]) * swizzle!(other.group0(), 2, 0, 1, 1))
                - (swizzle!(self.group1(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      116      148        0
    //    simd3        0        2        0
    //    simd4       43       44        0
    // Totals...
    // yes simd      159      194        0
    //  no simd      288      330        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3])
                    - (self.group0()[1] * other.group3()[2])
                    - (self.group1()[0] * other.group3()[3])
                    - (self.group1()[2] * other.group0()[1])
                    - (self.group1()[3] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[3])
                    - (self.group0()[2] * other.group3()[0])
                    - (self.group1()[0] * other.group0()[2])
                    - (self.group1()[1] * other.group3()[3])
                    - (self.group1()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group3()[1])
                    - (self.group0()[2] * other.group0()[3])
                    - (self.group1()[1] * other.group0()[0])
                    - (self.group1()[2] * other.group3()[3])
                    - (self.group1()[3] * other.group0()[2])),
                ((self.group2()[1] * other.group0()[1])
                    + (self.group2()[2] * other.group0()[2])
                    + (self.group1()[0] * other.group1()[0])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[2] * other.group1()[2])),
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group2()[0]]))
                + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group2()[1]]))
                + (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group2()[2]]))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[3]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group2()[2] * other.group0()[1]) - (self.group1()[3] * other.group3()[0])),
                ((self.group0()[2] * other.group2()[0]) - (self.group2()[0] * other.group0()[2]) - (self.group1()[3] * other.group3()[1])),
                ((self.group0()[0] * other.group2()[1]) - (self.group2()[1] * other.group0()[0]) - (self.group1()[3] * other.group3()[2])),
                (-(self.group0()[2] * other.group2()[2]) + (self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 3, 2, 0, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[2], self.group0()[1]]) * swizzle!(other.group2(), 1, 3, 3, 1))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group2()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group3()[1]]) * swizzle!(self.group1(), 0, 0, 1, 1))
                - (Simd32x4::from([other.group1()[1], other.group0()[3], other.group0()[3], other.group3()[2]]) * swizzle!(self.group1(), 2, 1, 2, 2))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[3]]) * swizzle!(self.group1(), 1, 2, 0, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(self.group2()[0] * other.group0()[3]) - (self.group2()[0] * other.group1()[3]) + (self.group2()[1] * other.group3()[2])
                    - (self.group2()[2] * other.group1()[1])
                    - (self.group1()[2] * other.group2()[1])),
                (-(self.group2()[0] * other.group1()[2]) - (self.group2()[1] * other.group0()[3]) - (self.group2()[1] * other.group1()[3])
                    + (self.group2()[2] * other.group3()[0])
                    - (self.group1()[1] * other.group2()[3])),
                ((self.group2()[0] * other.group3()[1])
                    - (self.group2()[1] * other.group1()[0])
                    - (self.group2()[2] * other.group0()[3])
                    - (self.group2()[2] * other.group1()[3])
                    - (self.group1()[2] * other.group2()[3])),
                ((self.group0()[1] * other.group1()[1]) - (self.group0()[1] * other.group3()[1]) + (self.group0()[2] * other.group1()[2]) - (self.group0()[2] * other.group3()[2])
                    + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group1(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group2()[3], other.group2()[2], other.group2()[0], other.group3()[3]]) * swizzle!(self.group1(), 0, 0, 1, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[1] * other.group2()[2]) - (self.group2()[0] * other.group3()[3]) + (self.group2()[1] * other.group0()[2])
                    - (self.group2()[2] * other.group0()[1])
                    - (self.group1()[1] * other.group3()[2])),
                (-(self.group0()[2] * other.group2()[0]) - (self.group2()[0] * other.group0()[2]) - (self.group2()[1] * other.group3()[3])
                    + (self.group2()[2] * other.group0()[0])
                    - (self.group1()[2] * other.group3()[0])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group2()[0] * other.group0()[1])
                    - (self.group2()[1] * other.group0()[0])
                    - (self.group2()[2] * other.group3()[3])
                    - (self.group1()[0] * other.group3()[1])),
                ((self.group2()[0] * other.group3()[0])
                    + (self.group2()[1] * other.group1()[1])
                    + (self.group2()[1] * other.group3()[1])
                    + (self.group2()[2] * other.group1()[2])
                    + (self.group2()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 3, 2, 0, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group2(), 1, 3, 3, 1))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group2()[2]]) * swizzle!(self.group1(), 0, 0, 1, 2))
                + (Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group2()[3]]) * swizzle!(self.group1(), 2, 1, 2, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      132      164        0
    //    simd3        0        2        0
    //    simd4       39       40        0
    // Totals...
    // yes simd      171      206        0
    //  no simd      288      330        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group3()[2])
                    + (self.group0()[2] * other.group1()[1])
                    + (self.group0()[2] * other.group3()[1])
                    + (self.group1()[0] * other.group2()[3])
                    + (self.group1()[2] * other.group0()[1])
                    + (self.group1()[3] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group0()[3]) + (self.group0()[1] * other.group1()[3])
                    - (self.group0()[2] * other.group3()[0])
                    + (self.group1()[0] * other.group0()[2])
                    + (self.group1()[1] * other.group2()[3])
                    + (self.group1()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group3()[1])
                    + (self.group0()[1] * other.group1()[0])
                    + (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group0()[3])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group1()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group2()[3])
                    + (self.group1()[3] * other.group0()[2])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group2()[1]) + (self.group2()[0] * other.group2()[3])
                    - (self.group2()[1] * other.group0()[2])
                    - (self.group1()[1] * other.group1()[2])
                    - (self.group1()[3] * other.group3()[0])),
                ((self.group0()[0] * other.group2()[2]) + (self.group2()[1] * other.group2()[3])
                    - (self.group2()[2] * other.group0()[0])
                    - (self.group1()[2] * other.group1()[0])
                    - (self.group1()[3] * other.group3()[1])),
                ((self.group0()[1] * other.group2()[0]) - (self.group2()[0] * other.group0()[1]) + (self.group2()[2] * other.group2()[3])
                    - (self.group1()[0] * other.group1()[1])
                    - (self.group1()[3] * other.group3()[2])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])
                    + (self.group2()[1] * other.group0()[1])
                    + (self.group2()[2] * other.group0()[2])
                    + (self.group1()[3] * other.group0()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group3()[1]]) * swizzle!(self.group1(), 0, 0, 1, 1))
                + (Simd32x4::from([other.group1()[1], other.group0()[3], other.group0()[3], other.group3()[2]]) * swizzle!(self.group1(), 2, 1, 2, 2))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group1()[0] * other.group3()[3]) + (self.group1()[2] * other.group2()[1])),
                ((self.group1()[0] * other.group2()[2]) + (self.group1()[1] * other.group3()[3])),
                ((self.group1()[1] * other.group2()[0]) + (self.group1()[2] * other.group3()[3])),
                (-(self.group1()[2] * other.group2()[2]) - (self.group1()[3] * other.group3()[3])),
            ]) + (Simd32x4::from(self.group2()[0]) * Simd32x4::from([other.group0()[3], other.group1()[2], other.group3()[1], other.group3()[0]]))
                - (Simd32x4::from(self.group2()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group1()[0]]))
                - (Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group1()[1]]))
                + (Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group3()[2], other.group0()[3], other.group1()[0], other.group3()[1]]))
                + (Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group0()[3], other.group3()[2]]))
                - (Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group1()[2]]))
                - (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group2(), 0, 1, 2, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) - (self.group0()[1] * other.group2()[2]) - (self.group2()[0] * other.group2()[3])
                    + (self.group2()[1] * other.group0()[2])
                    + (self.group1()[1] * other.group3()[2])
                    + (self.group1()[3] * other.group1()[0])),
                ((self.group0()[1] * other.group3()[3]) - (self.group0()[2] * other.group2()[0]) - (self.group2()[1] * other.group2()[3])
                    + (self.group2()[2] * other.group0()[0])
                    + (self.group1()[2] * other.group3()[0])
                    + (self.group1()[3] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[2] * other.group3()[3]) + (self.group2()[0] * other.group0()[1])
                    - (self.group2()[2] * other.group2()[3])
                    + (self.group1()[0] * other.group3()[1])
                    + (self.group1()[3] * other.group1()[2])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[0] * other.group3()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group0()[1]]) * swizzle!(self.group1(), 0, 0, 1, 1))
                - (Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group0()[2]]) * swizzle!(self.group1(), 2, 1, 2, 2))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl InfixSandwich for CircleRotor {}
impl Sandwich<AntiCircleRotor> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       97      133        0
    //    simd3        0        1        0
    //    simd4       42       43        0
    // Totals...
    // yes simd      139      177        0
    //  no simd      265      308        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3])
                    + (other.group0()[1] * self.group1()[2])
                    + (self.group0()[0] * other.group1()[3])
                    + (self.group0()[0] * other.group2()[3])
                    + (self.group0()[2] * other.group1()[1])),
                ((other.group0()[1] * self.group1()[3])
                    + (other.group0()[2] * self.group1()[0])
                    + (self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[1] * other.group2()[3])),
                ((other.group0()[0] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[3])
                    + (self.group0()[1] * other.group1()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group0()[2] * other.group2()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])),
            ]) + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group1()[1] * self.group1()[2]) - (other.group1()[2] * self.group1()[1]) + (other.group2()[3] * self.group1()[0])),
                (-(other.group1()[0] * self.group1()[2]) + (other.group1()[2] * self.group1()[0]) + (other.group2()[3] * self.group1()[1])),
                ((other.group1()[0] * self.group1()[1]) - (other.group1()[1] * self.group1()[0]) + (other.group2()[3] * self.group1()[2])),
                ((other.group0()[2] * self.group2()[2]) - (self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group1()[1] * self.group2()[2]) + (other.group2()[0] * self.group2()[3]) + (other.group2()[1] * self.group1()[2]) + (other.group2()[3] * self.group2()[0])),
                ((other.group1()[2] * self.group2()[0]) + (other.group2()[1] * self.group2()[3]) + (other.group2()[2] * self.group1()[0]) + (other.group2()[3] * self.group2()[1])),
                ((other.group1()[0] * self.group2()[1]) + (other.group2()[0] * self.group1()[1]) + (other.group2()[2] * self.group2()[3]) + (other.group2()[3] * self.group2()[2])),
                (-(other.group1()[2] * self.group2()[2]) - (other.group2()[2] * self.group1()[2])),
            ]) - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group2(), 0, 1, 2, 1))
                - (swizzle!(other.group2(), 0, 0, 1, 0) * swizzle!(self.group1(), 3, 2, 0, 0))
                - (swizzle!(other.group2(), 2, 1, 2, 1) * swizzle!(self.group1(), 1, 3, 3, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) - (self.group0()[1] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[1])
                    + (other.group1()[0] * self.group1()[3])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0]) + (self.group0()[0] * other.group2()[2]) - (self.group0()[2] * other.group2()[0])
                    + (other.group1()[1] * self.group1()[3])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) - (self.group0()[0] * other.group2()[1])
                    + (self.group0()[1] * other.group2()[0])
                    + (other.group1()[2] * self.group1()[3])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      101      136        0
    //    simd3        0        1        0
    //    simd4       52       53        0
    // Totals...
    // yes simd      153      190        0
    //  no simd      309      351        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(other.group0()[0] * self.group2()[3])
                    - (other.group0()[1] * self.group1()[2])
                    - (self.group0()[1] * other.group3()[2])
                    - (self.group0()[2] * other.group1()[1])
                    - (other.group2()[3] * self.group1()[0])),
                (-(other.group0()[1] * self.group2()[3])
                    - (other.group0()[2] * self.group1()[0])
                    - (self.group0()[0] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[0])
                    - (other.group2()[3] * self.group1()[1])),
                (-(other.group0()[2] * self.group1()[3])
                    - (other.group0()[2] * self.group2()[3])
                    - (self.group0()[0] * other.group3()[1])
                    - (self.group0()[1] * other.group1()[0])
                    - (other.group2()[3] * self.group1()[2])),
                ((other.group0()[0] * self.group2()[0])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])
                    + (other.group1()[1] * self.group1()[1])
                    + (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group2()[0]]))
                + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group2()[1]]))
                + (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group2()[2]]))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group1()[3]]) * swizzle!(self.group1(), 3, 3, 1, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (self.group0()[1] * other.group2()[2]) - (other.group1()[0] * self.group2()[3])),
                (-(other.group0()[2] * self.group2()[0]) + (self.group0()[2] * other.group2()[0]) - (other.group1()[1] * self.group2()[3])),
                (-(other.group0()[0] * self.group2()[1]) + (self.group0()[0] * other.group2()[1]) - (other.group1()[2] * self.group2()[3])),
                ((other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2]) - (self.group0()[2] * other.group2()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[1]]) * swizzle!(self.group1(), 2, 0, 1, 1))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))
                - (swizzle!(other.group3(), 0, 1, 2, 2) * swizzle!(self.group1(), 3, 3, 3, 2))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(other.group1()[3] * self.group2()[0]) - (other.group2()[1] * self.group1()[2]) + (other.group3()[2] * self.group2()[1])),
                (-(other.group1()[3] * self.group2()[1]) - (other.group2()[2] * self.group1()[0]) + (other.group3()[0] * self.group2()[2])),
                (-(other.group1()[3] * self.group2()[2]) - (other.group2()[2] * self.group2()[3]) + (other.group3()[1] * self.group2()[0])),
                ((other.group0()[2] * self.group1()[2]) + (self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group1()[2]) - (self.group0()[2] * other.group3()[2])),
            ]) - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[3]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group2()[0], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([other.group2()[2], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[1]]) * swizzle!(other.group3(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group1()[1], self.group1()[3]]) * swizzle!(other.group2(), 0, 1, 0, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[1] * other.group2()[2]) - (other.group2()[3] * self.group2()[0]) - (other.group3()[2] * self.group1()[1])),
                (-(self.group0()[2] * other.group2()[0]) - (other.group2()[3] * self.group2()[1]) - (other.group3()[0] * self.group1()[2])),
                (-(self.group0()[0] * other.group2()[1]) - (other.group2()[3] * self.group2()[2]) - (other.group3()[1] * self.group1()[0])),
                ((other.group2()[1] * self.group1()[1]) + (other.group2()[2] * self.group1()[2]) + (other.group3()[3] * self.group1()[3])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[3]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[2]]) * swizzle!(other.group1(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group2()[3], self.group2()[2]]) * swizzle!(other.group3(), 1, 2, 2, 2))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[1]]) * swizzle!(other.group1(), 0, 1, 2, 1))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group1()[1], self.group2()[1]]) * swizzle!(other.group3(), 0, 1, 0, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       51       89        0
    //    simd3        0        1        0
    //    simd4       29       30        0
    // Totals...
    // yes simd       80      120        0
    //  no simd      167      212        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[1] * self.group2()[3]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other.group0()[1] * self.group2()[0]),
                (other.group0()[1] * self.group2()[1]),
                (other.group0()[1] * self.group2()[2]),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[0] * self.group2()[0] * -1.0),
                (other.group0()[0] * self.group2()[1] * -1.0),
                (other.group0()[0] * self.group2()[2] * -1.0),
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[0] * self.group2()[3])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       76      110        0
    //    simd3        0        1        0
    //    simd4       29       30        0
    // Totals...
    // yes simd      105      141        0
    //  no simd      192      233        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) - (other.group0()[3] * self.group1()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]))])
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group2()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1])
                    - (other.group0()[3] * self.group2()[0])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group1()[3])
                    - (other.group0()[1] * self.group2()[3])
                    - (other.group0()[2] * self.group1()[0])
                    - (other.group0()[3] * self.group2()[1])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group1()[3])
                    - (other.group0()[2] * self.group2()[3])
                    - (other.group0()[3] * self.group2()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) * -1.0),
                ((self.group0()[2] * other.group0()[0]) * -1.0),
                ((self.group0()[0] * other.group0()[1]) * -1.0),
                (other.group0()[2] * self.group1()[2]),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (swizzle!(other.group0(), 3, 3, 3, 1) * swizzle!(self.group1(), 0, 1, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       83      119        0
    //    simd3        0        1        0
    //    simd4       38       39        0
    // Totals...
    // yes simd      121      159        0
    //  no simd      235      278        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) - (other.group0()[3] * self.group1()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]) - (other.group1()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group2()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (swizzle!(other.group1(), 0, 1, 2, 1) * swizzle!(self.group1(), 3, 3, 3, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1])
                    - (other.group0()[3] * self.group2()[0])
                    + (other.group1()[2] * self.group2()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group1()[3])
                    - (other.group0()[1] * self.group2()[3])
                    - (other.group0()[2] * self.group1()[0])
                    - (other.group0()[3] * self.group2()[1])
                    + (other.group1()[0] * self.group2()[2])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group1()[3])
                    - (other.group0()[2] * self.group2()[3])
                    - (other.group0()[3] * self.group2()[2])
                    + (other.group1()[1] * self.group2()[0])),
                ((self.group0()[2] * other.group1()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) * -1.0),
                ((self.group0()[2] * other.group0()[0]) * -1.0),
                ((self.group0()[0] * other.group0()[1]) * -1.0),
                ((other.group0()[2] * self.group1()[2]) + (other.group1()[3] * self.group1()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group2()[3], self.group2()[2]]) * swizzle!(other.group1(), 1, 2, 2, 2))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group1()[1], self.group2()[1]]) * swizzle!(other.group1(), 0, 1, 0, 1))
                + (swizzle!(other.group0(), 3, 3, 3, 1) * swizzle!(self.group1(), 0, 1, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       82      118        0
    //    simd3        0        1        0
    //    simd4       32       33        0
    // Totals...
    // yes simd      114      152        0
    //  no simd      210      253        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[3]) + (other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1]) + (other.group1()[1] * self.group0()[2])
                    - (other.group1()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group2()[3]) + (other.group0()[2] * self.group1()[0])
                    - (other.group1()[0] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group2()[3]) + (other.group1()[0] * self.group0()[1])
                    - (other.group1()[1] * self.group0()[0])),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) + (other.group1()[0] * self.group2()[3]) + (other.group1()[1] * self.group1()[2])),
                ((other.group0()[2] * self.group2()[0]) + (other.group1()[1] * self.group2()[3]) + (other.group1()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group1()[0] * self.group1()[1]) + (other.group1()[2] * self.group2()[3])),
                (-(other.group0()[1] * self.group2()[1]) - (other.group0()[2] * self.group2()[2]) - (other.group1()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[0], other.group1()[0], other.group1()[1], other.group1()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[1], other.group1()[2], other.group1()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1])),
                ((other.group0()[1] * self.group1()[3]) - (other.group1()[0] * self.group0()[2]) + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[2] * self.group1()[3]) + (other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       84      120        0
    //    simd3        0        1        0
    //    simd4       37       38        0
    // Totals...
    // yes simd      121      159        0
    //  no simd      232      275        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (self.group0()[2] * other.group0()[1]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group0(), 3, 2, 0, 3))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[2] * other.group1()[1]) + (other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1])
                    + (other.group0()[3] * self.group1()[0])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3]) - (other.group0()[0] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[0])
                    + (other.group0()[3] * self.group1()[1])),
                ((self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[3]) - (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group2()[3])
                    + (other.group0()[3] * self.group1()[2])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group1()[1], self.group1()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[3] * self.group2()[0]) + (other.group1()[0] * self.group2()[3]) + (other.group1()[1] * self.group1()[2]) + (other.group1()[3] * self.group1()[0])),
                ((other.group0()[3] * self.group2()[1]) + (other.group1()[1] * self.group2()[3]) + (other.group1()[2] * self.group1()[0]) + (other.group1()[3] * self.group1()[1])),
                ((other.group0()[3] * self.group2()[2]) + (other.group1()[0] * self.group1()[1]) + (other.group1()[2] * self.group2()[3]) + (other.group1()[3] * self.group1()[2])),
                (-(other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (swizzle!(other.group1(), 0, 0, 1, 0) * swizzle!(self.group1(), 3, 2, 0, 0))
                - (swizzle!(other.group1(), 2, 1, 2, 1) * swizzle!(self.group1(), 1, 3, 3, 1))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1]) + (other.group0()[0] * self.group1()[3])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group1()[0]) + (other.group0()[1] * self.group1()[3])),
                (-(self.group0()[0] * other.group1()[1])
                    + (self.group0()[1] * other.group1()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (other.group0()[2] * self.group1()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       65       92        0
    //    simd3        1        3        0
    //    simd4       29       30        0
    // Totals...
    // yes simd       95      125        0
    //  no simd      184      221        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([0.0, 0.0, 0.0, ((other.group0()[2] * self.group1()[2]) * -1.0)])
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                - (swizzle!(other.group0(), 0, 1, 2, 1) * swizzle!(self.group1(), 3, 3, 3, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (other.group0()[2] * self.group2()[1]),
                (other.group0()[0] * self.group2()[2]),
                (other.group0()[1] * self.group2()[0]),
                ((self.group0()[2] * other.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[3] * self.group1()[3])])
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group2()[3], self.group2()[2]]) * swizzle!(other.group0(), 1, 2, 2, 2))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group1()[1], self.group2()[1]]) * swizzle!(other.group0(), 0, 1, 0, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       53       72        0
    //    simd3        0        3        0
    //    simd4       13       18        0
    // Totals...
    // yes simd       66       93        0
    //  no simd      105      153        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other[e12345]) * self.group0() * Simd32x3::from(-1.0)),
            // e23, e31, e12, e45
            (Simd32x4::from(other[e12345]) * self.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e15, e25, e35, scalar
            (Simd32x4::from(other[e12345]) * self.group2() * Simd32x4::from(-1.0)),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      106      141        0
    //    simd3        0        1        0
    //    simd4       37       38        0
    // Totals...
    // yes simd      143      180        0
    //  no simd      254      296        0
    fn sandwich(self, other: Circle) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(other.group0()[1] * self.group2()[3]) - (other.group0()[2] * self.group1()[0]) - (self.group0()[0] * other.group1()[2])),
                (-(other.group0()[2] * self.group1()[3]) - (other.group0()[2] * self.group2()[3]) - (self.group0()[1] * other.group1()[0])),
                ((other.group0()[0] * self.group2()[0])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])
                    + (other.group2()[0] * self.group0()[0])
                    + (other.group2()[1] * self.group0()[1])
                    + (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group1()[3]]) * swizzle!(self.group1(), 3, 3, 1, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group1()[1]]) * swizzle!(other.group1(), 3, 3, 1, 1))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[2], self.group1()[2]]) * swizzle!(other.group1(), 2, 0, 3, 2))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) - (other.group2()[1] * self.group0()[2]) + (other.group2()[2] * self.group0()[1])
                    - (other.group1()[0] * self.group2()[3])
                    - (other.group1()[1] * self.group1()[2])),
                (-(other.group0()[2] * self.group2()[0]) + (other.group2()[0] * self.group0()[2])
                    - (other.group2()[2] * self.group0()[0])
                    - (other.group1()[1] * self.group2()[3])
                    - (other.group1()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[1]) - (other.group2()[0] * self.group0()[1]) + (other.group2()[1] * self.group0()[0])
                    - (other.group1()[0] * self.group1()[1])
                    - (other.group1()[2] * self.group2()[3])),
                ((other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(other.group2()[0] * self.group2()[3])
                    - (other.group2()[1] * self.group1()[2])
                    - (other.group1()[1] * self.group2()[2])
                    - (other.group1()[3] * self.group2()[0])),
                (-(other.group2()[1] * self.group2()[3])
                    - (other.group2()[2] * self.group1()[0])
                    - (other.group1()[2] * self.group2()[0])
                    - (other.group1()[3] * self.group2()[1])),
                (-(other.group2()[0] * self.group1()[1])
                    - (other.group2()[2] * self.group2()[3])
                    - (other.group1()[0] * self.group2()[1])
                    - (other.group1()[3] * self.group2()[2])),
                ((other.group0()[2] * self.group1()[2]) + (self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([other.group2()[0], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([other.group2()[2], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))
                + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (other.group2()[1] * self.group0()[2]) - (other.group2()[2] * self.group0()[1])),
                (-(other.group0()[2] * self.group2()[0]) - (other.group2()[0] * self.group0()[2]) + (other.group2()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group2()[0] * self.group0()[1]) - (other.group2()[1] * self.group0()[0])),
                ((other.group2()[2] * self.group1()[2]) + (other.group1()[1] * self.group2()[1]) + (other.group1()[2] * self.group2()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[1]]) * swizzle!(self.group1(), 0, 1, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       97      132        0
    //    simd3        0        1        0
    //    simd4       42       43        0
    // Totals...
    // yes simd      139      176        0
    //  no simd      265      307        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) - (self.group0()[0] * other.group2()[3]) - (self.group0()[2] * other.group1()[1])),
                (-(other.group0()[2] * self.group1()[0]) - (self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group2()[3])),
                (-(other.group0()[2] * self.group1()[3]) - (self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group2()[3])),
                ((other.group0()[0] * self.group2()[0])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])
                    + (self.group0()[0] * other.group2()[0])
                    + (self.group0()[1] * other.group2()[1])
                    + (self.group0()[2] * other.group2()[2])),
            ]) - (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group1()[3]]) * swizzle!(self.group1(), 3, 3, 1, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group1()[1]]) * swizzle!(other.group1(), 3, 3, 1, 1))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[2], self.group1()[2]]) * swizzle!(other.group1(), 2, 0, 3, 2))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) - (other.group1()[0] * self.group2()[3]) - (other.group1()[1] * self.group1()[2])),
                (-(other.group0()[2] * self.group2()[0]) - (other.group1()[1] * self.group2()[3]) - (other.group1()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[1]) - (other.group1()[0] * self.group1()[1]) - (other.group1()[2] * self.group2()[3])),
                ((other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2]) - (self.group0()[2] * other.group2()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[3]]) * swizzle!(other.group2(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(other.group1()[1] * self.group2()[2])
                    - (other.group1()[3] * self.group2()[0])
                    - (other.group2()[0] * self.group2()[3])
                    - (other.group2()[1] * self.group1()[2])
                    - (other.group2()[3] * self.group2()[0])),
                (-(other.group1()[2] * self.group2()[0])
                    - (other.group1()[3] * self.group2()[1])
                    - (other.group2()[1] * self.group2()[3])
                    - (other.group2()[2] * self.group1()[0])
                    - (other.group2()[3] * self.group2()[1])),
                (-(other.group1()[0] * self.group2()[1])
                    - (other.group1()[3] * self.group2()[2])
                    - (other.group2()[0] * self.group1()[1])
                    - (other.group2()[2] * self.group2()[3])
                    - (other.group2()[3] * self.group2()[2])),
                ((other.group0()[2] * self.group1()[2]) + (self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([other.group2()[0], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([other.group2()[2], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))
                + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) - (self.group0()[1] * other.group2()[2])),
                (-(other.group0()[2] * self.group2()[0]) - (self.group0()[2] * other.group2()[0])),
                (-(other.group0()[0] * self.group2()[1]) - (self.group0()[0] * other.group2()[1])),
                ((other.group2()[1] * self.group1()[1]) + (other.group2()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[2]]) * swizzle!(other.group1(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[1]]) * swizzle!(other.group1(), 0, 1, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       98      134        0
    //    simd3        0        1        0
    //    simd4       39       40        0
    // Totals...
    // yes simd      137      175        0
    //  no simd      254      297        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[1])
                    + (other.group0()[0] * self.group1()[3])
                    + (other.group0()[0] * self.group2()[3])
                    + (other.group0()[1] * self.group1()[2])),
                ((self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (other.group0()[1] * self.group1()[3])
                    + (other.group0()[1] * self.group2()[3])
                    + (other.group0()[2] * self.group1()[0])),
                ((self.group0()[1] * other.group1()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (other.group0()[0] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group0()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(self.group0()[1] * other.group2()[2]) + (self.group0()[2] * other.group2()[1]) - (self.group1()[1] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[2] * other.group2()[0]) + (self.group1()[0] * other.group1()[2]) - (self.group1()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0]) - (self.group1()[0] * other.group1()[1])
                    + (self.group1()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])
                    + (other.group0()[2] * self.group2()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group2()[0] * self.group2()[3]) + (other.group2()[1] * self.group1()[2]) + (self.group2()[2] * other.group1()[1])),
                ((other.group2()[1] * self.group2()[3]) + (other.group2()[2] * self.group1()[0]) + (self.group2()[0] * other.group1()[2])),
                ((other.group2()[0] * self.group1()[1]) + (other.group2()[2] * self.group2()[3]) + (self.group2()[1] * other.group1()[0])),
                (-(other.group2()[2] * self.group1()[2]) - (self.group2()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([other.group2()[0], other.group2()[0], other.group2()[1], other.group2()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([other.group2()[2], other.group2()[1], other.group2()[2], other.group2()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))
                - (swizzle!(self.group2(), 0, 1, 0, 0) * swizzle!(other.group1(), 3, 3, 1, 0))
                - (swizzle!(self.group2(), 1, 2, 2, 1) * swizzle!(other.group1(), 2, 0, 3, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group0()[1] * other.group2()[2]) + (self.group0()[2] * other.group2()[1]) - (other.group0()[1] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[1])
                    + (self.group1()[3] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[2] * other.group2()[0]) + (other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0])
                    + (self.group1()[3] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0]) - (other.group0()[0] * self.group2()[1])
                    + (other.group0()[1] * self.group2()[0])
                    + (self.group1()[3] * other.group1()[2])),
                (-(self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      101      137        0
    //    simd3        0        1        0
    //    simd4       52       53        0
    // Totals...
    // yes simd      153      191        0
    //  no simd      309      352        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group3()[2])
                    + (self.group0()[2] * other.group1()[1])
                    + (self.group0()[2] * other.group3()[1])
                    + (other.group0()[0] * self.group1()[3])
                    + (other.group0()[0] * self.group2()[3])
                    + (other.group0()[1] * self.group1()[2])
                    + (self.group1()[0] * other.group2()[3])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group3()[0])
                    + (other.group0()[1] * self.group1()[3])
                    + (other.group0()[1] * self.group2()[3])
                    + (other.group0()[2] * self.group1()[0])
                    + (self.group1()[1] * other.group2()[3])),
                (-(self.group0()[0] * other.group3()[1])
                    + (self.group0()[1] * other.group1()[0])
                    + (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (other.group0()[0] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group0()[2] * self.group2()[3])
                    + (self.group1()[2] * other.group2()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group2()[1]) - (self.group1()[1] * other.group1()[2]) - (self.group1()[3] * other.group3()[0])),
                ((self.group0()[0] * other.group2()[2]) - (self.group1()[2] * other.group1()[0]) - (self.group1()[3] * other.group3()[1])),
                ((self.group0()[1] * other.group2()[0]) - (self.group1()[0] * other.group1()[1]) - (self.group1()[3] * other.group3()[2])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2]) + (self.group1()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]) * swizzle!(self.group2(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[1]]) * swizzle!(self.group1(), 2, 0, 1, 1))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[1]]) * swizzle!(self.group2(), 0, 1, 2, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (self.group1()[2] * other.group2()[1]),
                (self.group1()[0] * other.group2()[2]),
                (self.group1()[1] * other.group2()[0]),
                (-(self.group1()[2] * other.group2()[2]) - (self.group1()[3] * other.group3()[3])),
            ]) - (Simd32x4::from(self.group2()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group1()[0]]))
                - (Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group1()[1]]))
                - (Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group1()[2]]))
                + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[0], other.group3()[2]]) * swizzle!(self.group2(), 2, 2, 1, 2))
                + (Simd32x4::from([other.group3()[2], other.group1()[2], other.group3()[1], other.group3()[1]]) * swizzle!(self.group2(), 1, 0, 0, 1))
                - (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group2(), 0, 1, 2, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) - (self.group0()[1] * other.group2()[2]) - (other.group0()[1] * self.group2()[2])
                    + (self.group1()[1] * other.group3()[2])
                    + (self.group1()[3] * other.group1()[0])
                    - (self.group2()[0] * other.group2()[3])),
                ((self.group0()[1] * other.group3()[3]) - (self.group0()[2] * other.group2()[0]) - (other.group0()[2] * self.group2()[0])
                    + (self.group1()[2] * other.group3()[0])
                    + (self.group1()[3] * other.group1()[1])
                    - (self.group2()[1] * other.group2()[3])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[2] * other.group3()[3]) - (other.group0()[0] * self.group2()[1])
                    + (self.group1()[0] * other.group3()[1])
                    + (self.group1()[3] * other.group1()[2])
                    - (self.group2()[2] * other.group2()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])
                    - (other.group0()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[0]]) * swizzle!(other.group3(), 0, 1, 2, 0))
                - (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group0()[0]]) * swizzle!(self.group1(), 0, 0, 1, 0))
                - (Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group0()[1]]) * swizzle!(self.group1(), 2, 1, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       67      108        0
    //    simd3        0        1        0
    //    simd4       25       26        0
    // Totals...
    // yes simd       92      135        0
    //  no simd      167      215        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group0()[2])),
                (other.group0()[1] * self.group2()[3] * -1.0),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(other.group0()[0] * self.group2()[0]) - (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group2()[0] * -1.0),
                (other.group0()[1] * self.group2()[1] * -1.0),
                (other.group0()[1] * self.group2()[2] * -1.0),
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[0] * self.group2()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group2()[0] * -1.0),
                (other.group0()[0] * self.group2()[1] * -1.0),
                (other.group0()[0] * self.group2()[2] * -1.0),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       58       92        0
    //    simd3        0        1        0
    //    simd4       33       34        0
    // Totals...
    // yes simd       91      127        0
    //  no simd      190      231        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (self.group0()[2] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (self.group0()[1] * other.group0()[0]),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]) - (self.group2()[3] * other.group0()[3])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group1()[2] * other.group0()[1]) + (self.group2()[3] * other.group0()[0])),
                ((self.group1()[0] * other.group0()[2]) + (self.group2()[3] * other.group0()[1])),
                ((self.group1()[1] * other.group0()[0]) + (self.group2()[3] * other.group0()[2])),
                0.0,
            ]) - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                - (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1]) - (self.group1()[0] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0]) - (self.group1()[1] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) - (self.group1()[2] * other.group0()[3])),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       72      109        0
    //    simd3        0        1        0
    //    simd4       40       41        0
    // Totals...
    // yes simd      112      151        0
    //  no simd      232      276        0
    fn sandwich(self, other: Flector) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[3]) - (self.group0()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group0()[1]) - (self.group1()[3] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[2]) - (self.group1()[3] * other.group1()[1])),
                ((self.group0()[1] * other.group0()[0]) - (self.group1()[3] * other.group1()[2])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[2] * other.group1()[2])
                    - (self.group2()[3] * other.group0()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (self.group1()[2] * other.group0()[1]),
                (self.group1()[0] * other.group0()[2]),
                (self.group1()[1] * other.group0()[0]),
                (self.group2()[3] * other.group1()[3]),
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]) * swizzle!(self.group2(), 3, 3, 3, 2))
                - (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group0(), 0, 1, 2, 1))
                + (swizzle!(self.group2(), 1, 2, 0, 1) * swizzle!(other.group1(), 2, 0, 1, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1]) - (self.group1()[0] * other.group0()[3])
                    + (self.group1()[1] * other.group1()[2])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group0()[0]) - (self.group1()[1] * other.group0()[3])
                    + (self.group1()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group0()[1])
                    + (self.group0()[1] * other.group0()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[2] * other.group0()[3])),
                ((self.group0()[2] * other.group1()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[1]]) * swizzle!(other.group1(), 0, 1, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      106      141        0
    //    simd3        0        1        0
    //    simd4       26       27        0
    // Totals...
    // yes simd      132      169        0
    //  no simd      210      252        0
    fn sandwich(self, other: Line) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[2])
                    + (other.group0()[0] * self.group1()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) - (other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0]) + (other.group0()[0] * self.group1()[2])
                    - (other.group0()[1] * self.group2()[3])
                    - (other.group0()[2] * self.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) - (other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0])
                    - (other.group0()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) + (other.group1()[0] * self.group1()[3])
                    - (other.group1()[0] * self.group2()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0]) + (other.group1()[0] * self.group1()[2]) + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[1] * self.group2()[3])
                    - (other.group1()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group1()[3])
                    - (other.group1()[2] * self.group2()[3])),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
                ((other.group0()[0] * self.group2()[0])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])
                    + (other.group1()[1] * self.group1()[1])
                    + (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       95      131        0
    //    simd3        0        1        0
    //    simd4       35       36        0
    // Totals...
    // yes simd      130      168        0
    //  no simd      235      278        0
    fn sandwich(self, other: Motor) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[2] * other.group0()[1]) * -1.0),
                ((self.group0()[1] * other.group0()[3]) * -1.0),
                ((self.group0()[2] * other.group0()[3]) * -1.0),
                ((self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[2])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group0(), 3, 2, 0, 3))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group1()[0] * other.group0()[3]) - (self.group1()[2] * other.group0()[1]) - (self.group2()[3] * other.group0()[0])),
                ((self.group0()[2] * other.group1()[0]) - (self.group1()[0] * other.group0()[2]) - (self.group1()[1] * other.group0()[3]) - (self.group2()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[1]) - (self.group1()[1] * other.group0()[0]) - (self.group1()[2] * other.group0()[3]) - (self.group2()[3] * other.group0()[2])),
                ((self.group0()[2] * other.group1()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[2], self.group0()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))
                + (swizzle!(self.group1(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(self.group1()[0] * other.group1()[3]) + (self.group1()[1] * other.group1()[2]) - (self.group1()[2] * other.group1()[1])
                    + (self.group1()[3] * other.group1()[0])
                    - (self.group2()[0] * other.group0()[3])
                    - (self.group2()[2] * other.group0()[1])
                    - (self.group2()[3] * other.group1()[0])),
                (-(self.group1()[0] * other.group1()[2]) - (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group1()[3] * other.group1()[1])
                    - (self.group2()[0] * other.group0()[2])
                    - (self.group2()[1] * other.group0()[3])
                    - (self.group2()[3] * other.group1()[1])),
                ((self.group1()[0] * other.group1()[1]) - (self.group1()[1] * other.group1()[0]) - (self.group1()[2] * other.group1()[3]) + (self.group1()[3] * other.group1()[2])
                    - (self.group2()[1] * other.group0()[0])
                    - (self.group2()[2] * other.group0()[3])
                    - (self.group2()[3] * other.group1()[2])),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((self.group1()[3] * other.group1()[3]) + (self.group2()[0] * other.group0()[0]) + (self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group2()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]) * swizzle!(self.group1(), 3, 3, 3, 2))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for CircleRotor {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      208      263        0
    //    simd2        2        2        0
    //    simd3       72       77        0
    //    simd4       53       54        0
    // Totals...
    // yes simd      335      396        0
    //  no simd      640      714        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                (-(other.group0()[1] * self.group2()[3])
                    + (self.group0()[0] * other.group8()[0])
                    + (self.group0()[1] * other.group8()[1])
                    + (self.group0()[2] * other.group8()[2])
                    + (other.group7()[0] * self.group2()[0])
                    + (other.group7()[1] * self.group2()[1])
                    + (other.group7()[2] * self.group2()[2])
                    + (self.group1()[0] * other.group6()[0])
                    + (self.group1()[1] * other.group6()[1])
                    + (self.group1()[2] * other.group6()[2])),
                ((other.group0()[0] * self.group2()[3])
                    - (self.group0()[0] * other.group3()[0])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group3()[2])
                    - (other.group4()[0] * self.group2()[0])
                    - (other.group4()[1] * self.group2()[1])
                    - (other.group4()[2] * self.group2()[2])
                    - (other.group5()[0] * self.group1()[0])
                    - (other.group5()[1] * self.group1()[1])
                    - (other.group5()[2] * self.group1()[2])),
            ]) - (Simd32x2::from(self.group1()[3]) * Simd32x2::from([other.group6()[3], other.group3()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group9()[3]) - (self.group0()[1] * other.group3()[2]) + (self.group0()[2] * other.group3()[1]) - (other.group4()[1] * self.group2()[2])
                    + (self.group1()[1] * other.group9()[2])
                    - (self.group2()[0] * other[e45])),
                ((self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group9()[3]) - (self.group0()[2] * other.group3()[0]) - (other.group4()[2] * self.group2()[0])
                    + (self.group1()[2] * other.group9()[0])
                    - (self.group2()[1] * other[e45])),
                (-(self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group3()[0]) + (self.group0()[2] * other.group9()[3])
                    - (other.group4()[0] * self.group2()[1])
                    + (self.group1()[0] * other.group9()[1])
                    - (self.group2()[2] * other[e45])),
                (-(self.group0()[0] * other.group5()[0])
                    - (self.group0()[1] * other.group5()[1])
                    - (self.group0()[1] * other.group9()[1])
                    - (self.group0()[2] * other.group5()[2])
                    - (self.group0()[2] * other.group9()[2])
                    - (other.group4()[2] * self.group1()[2])),
            ]) + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other[e45]]))
                + (Simd32x4::from([other.group4()[2], other.group4()[0], other.group4()[1], other[e45]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[0]]) * swizzle!(other.group9(), 0, 1, 2, 0))
                - (Simd32x4::from([other.group3()[3], other.group9()[2], other.group9()[0], other.group4()[0]]) * swizzle!(self.group1(), 0, 0, 1, 0))
                - (Simd32x4::from([other.group9()[1], other.group3()[3], other.group3()[3], other.group4()[1]]) * swizzle!(self.group1(), 2, 1, 2, 1))),
            // e5
            (-(other.group5()[0] * self.group2()[0])
                - (other.group5()[1] * self.group2()[1])
                - (other.group5()[2] * self.group2()[2])
                - (self.group1()[0] * other.group3()[0])
                - (self.group1()[1] * other.group3()[1])
                - (self.group1()[2] * other.group3()[2])
                - (self.group1()[3] * other.group9()[3])
                + (self.group2()[0] * other.group9()[0])
                + (self.group2()[1] * other.group9()[1])
                + (self.group2()[2] * other.group9()[2])
                + (self.group2()[3] * other.group9()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[0]) - (other.group8()[0] * self.group2()[3]) + (other.group8()[2] * self.group1()[1])
                    - (self.group2()[0] * other.group6()[3])
                    - (self.group2()[2] * other.group6()[1])),
                (-(other.group0()[1] * self.group2()[1]) + (other.group8()[1] * self.group1()[3])
                    - (other.group8()[1] * self.group2()[3])
                    - (self.group2()[0] * other.group6()[2])
                    - (self.group2()[1] * other.group6()[3])),
                (-(other.group0()[1] * self.group2()[2]) + (other.group8()[2] * self.group1()[3])
                    - (other.group8()[2] * self.group2()[3])
                    - (self.group2()[1] * other.group6()[0])
                    - (self.group2()[2] * other.group6()[3])),
                (-(self.group0()[0] * other.group8()[0]) - (self.group0()[1] * other.group8()[1]) - (self.group0()[2] * other.group8()[2])
                    + (other.group7()[2] * self.group2()[2])
                    + (self.group2()[3] * other.group6()[3])),
            ]) + (Simd32x4::from([other.group8()[0], other.group8()[0], other.group8()[1], other.group0()[1]]) * swizzle!(self.group1(), 3, 2, 0, 3))
                - (Simd32x4::from([other.group8()[1], other.group8()[2], other.group8()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[2]]) * swizzle!(other.group1(), 1, 2, 0, 2))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group7()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group7()[1]]) * swizzle!(self.group2(), 1, 2, 0, 1))
                - (Simd32x4::from([other[e1], other[e1], other[e1], other.group1()[1]]) * swizzle!(self.group1(), 0, 1, 2, 1))),
            // e41, e42, e43
            (-(Simd32x3::from(other.group0()[1]) * self.group0())
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group6()[3], other.group1()[2], other.group6()[1]]))
                + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group6()[2], other.group6()[3], other.group1()[0]]))
                + (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], other.group6()[0], other.group6()[3]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group7(), 2, 0, 1))
                - (Simd32x3::from([self.group1()[2], self.group1()[0], self.group2()[3]]) * swizzle!(other.group7(), 1, 2, 2))
                - (Simd32x3::from([self.group1()[3], self.group1()[3], self.group1()[1]]) * swizzle!(other.group7(), 0, 1, 0))
                - (Simd32x3::from([self.group2()[3], self.group2()[3], self.group1()[3]]) * other.group7())
                - (Simd32x3::from([other.group1()[2], other.group6()[2], other.group1()[1]]) * swizzle!(self.group0(), 1, 0, 0))
                - (Simd32x3::from([other.group6()[1], other.group1()[0], other.group6()[0]]) * swizzle!(self.group0(), 2, 2, 1))),
            // e23, e31, e12
            (Simd32x3::from([
                ((self.group1()[1] * other.group6()[2]) - (self.group1()[2] * other.group6()[1])),
                (-(self.group1()[0] * other.group6()[2]) + (self.group1()[2] * other.group6()[0])),
                ((self.group1()[0] * other.group6()[1]) - (self.group1()[1] * other.group6()[0])),
            ]) - (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                - (Simd32x3::from([other.group8()[1], other[e1], other[e1]]) * swizzle!(self.group0(), 2, 1, 2))
                + (Simd32x3::from([self.group2()[1], self.group2()[2], self.group2()[0]]) * swizzle!(other.group7(), 2, 0, 1))
                - (Simd32x3::from([self.group2()[2], self.group2()[0], self.group2()[1]]) * swizzle!(other.group7(), 1, 2, 0))
                - (Simd32x3::from([other[e1], other.group8()[2], other.group8()[0]]) * swizzle!(self.group0(), 0, 0, 1))
                + (swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group8(), 2, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group3()[1]) - (other.group5()[2] * self.group1()[1]) - (self.group1()[3] * other.group9()[0])),
                ((self.group0()[0] * other.group3()[2]) - (other.group5()[0] * self.group1()[2]) - (self.group1()[3] * other.group9()[1])),
                ((self.group0()[1] * other.group3()[0]) - (other.group5()[1] * self.group1()[0]) - (self.group1()[3] * other.group9()[2])),
                (-(self.group0()[1] * other.group3()[1]) - (self.group0()[2] * other.group3()[2]) + (self.group1()[2] * other.group9()[2])),
            ]) + (Simd32x4::from(other.group0()[0]) * self.group1())
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group9(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group3(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group4()[1], other.group4()[2], other.group4()[0], other.group4()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group4()[2], other.group4()[0], other.group4()[1], other.group3()[3]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group4()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group5()[1], other.group5()[2], other.group5()[0], other.group9()[1]]) * swizzle!(self.group1(), 2, 0, 1, 1))
                + (Simd32x4::from([other[e45], other[e45], other[e45], other.group4()[2]]) * swizzle!(self.group2(), 0, 1, 2, 2))),
            // e423, e431, e412
            ((Simd32x3::from(other.group0()[0]) * self.group0())
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from([other.group5()[1], other.group9()[2], other.group9()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                - (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group4(), 2, 0, 1))
                + (Simd32x3::from([self.group1()[2], self.group1()[0], self.group2()[3]]) * swizzle!(other.group4(), 1, 2, 2))
                + (Simd32x3::from([self.group1()[3], self.group1()[3], self.group1()[1]]) * swizzle!(other.group4(), 0, 1, 0))
                + (Simd32x3::from([self.group2()[3], self.group2()[3], self.group1()[3]]) * other.group4())
                + (Simd32x3::from([other.group3()[3], other.group5()[2], other.group5()[0]]) * swizzle!(self.group0(), 0, 0, 1))
                + (Simd32x3::from([other.group9()[1], other.group3()[3], other.group3()[3]]) * swizzle!(self.group0(), 2, 1, 2))
                - (Simd32x3::from([other.group9()[2], other.group9()[0], other.group9()[1]]) * swizzle!(self.group0(), 1, 2, 0))
                - (swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group5(), 2, 0, 1))),
            // e235, e315, e125
            (Simd32x3::from([
                (-(self.group1()[1] * other.group3()[2]) + (self.group1()[2] * other.group3()[1]) + (self.group2()[1] * other.group9()[2])
                    - (self.group2()[2] * other.group9()[1])),
                ((self.group1()[0] * other.group3()[2]) - (self.group1()[2] * other.group3()[0]) - (self.group2()[0] * other.group9()[2]) + (self.group2()[2] * other.group9()[0])),
                (-(self.group1()[0] * other.group3()[1]) + (self.group1()[1] * other.group3()[0]) + (self.group2()[0] * other.group9()[1])
                    - (self.group2()[1] * other.group9()[0])),
            ]) + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                + (Simd32x3::from(other.group9()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from([self.group2()[1], self.group2()[2], self.group2()[0]]) * swizzle!(other.group5(), 2, 0, 1))
                + (Simd32x3::from([self.group2()[2], self.group2()[0], self.group2()[1]]) * swizzle!(other.group5(), 1, 2, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[1] * other.group8()[2]) + (self.group0()[2] * other.group8()[1])
                    - (self.group1()[1] * other.group1()[2])
                    - (self.group2()[0] * other.group1()[3])),
                ((self.group0()[0] * other.group8()[2]) - (self.group0()[2] * other.group8()[0]) - (self.group1()[2] * other.group1()[0]) - (self.group2()[1] * other.group1()[3])),
                (-(self.group0()[0] * other.group8()[1]) + (self.group0()[1] * other.group8()[0])
                    - (self.group1()[0] * other.group1()[1])
                    - (self.group2()[2] * other.group1()[3])),
                ((self.group2()[1] * other.group1()[1]) + (self.group2()[1] * other.group6()[1]) + (self.group2()[2] * other.group1()[2]) + (self.group2()[2] * other.group6()[2])),
            ]) + (Simd32x4::from(other[e1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([other.group7()[1], other.group7()[2], other.group7()[0], other[e1]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group7()[2], other.group7()[0], other.group7()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group6()[0]]) * swizzle!(self.group2(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group1()[1], other.group6()[3], other.group6()[3], other.group8()[1]]) * swizzle!(self.group1(), 2, 1, 2, 1))
                + (Simd32x4::from([other.group6()[0], other.group6()[1], other.group6()[2], other.group8()[2]]) * swizzle!(self.group1(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group6()[3], other.group1()[2], other.group1()[0], other.group8()[0]]) * swizzle!(self.group1(), 0, 0, 1, 0))),
            // e1234
            (-(self.group0()[0] * other.group1()[0]) + (self.group0()[0] * other.group6()[0]) - (self.group0()[1] * other.group1()[1]) + (self.group0()[1] * other.group6()[1])
                - (self.group0()[2] * other.group1()[2])
                + (self.group0()[2] * other.group6()[2])
                + (other.group7()[0] * self.group1()[0])
                + (other.group7()[1] * self.group1()[1])
                + (other.group7()[2] * self.group1()[2])
                - (self.group1()[3] * other.group1()[3])
                - (self.group2()[3] * other.group1()[3])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       51       88        0
    //    simd3        1        3        0
    //    simd4       31       32        0
    // Totals...
    // yes simd       83      123        0
    //  no simd      178      225        0
    fn sandwich(self, other: Plane) -> Self::Output {
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            ((Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group1()[3] * other.group0()[0]) * -1.0),
                ((self.group1()[3] * other.group0()[1]) * -1.0),
                ((self.group1()[3] * other.group0()[2]) * -1.0),
                ((self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))),
            // e235, e315, e125, e4
            (Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group2()[1] * other.group0()[2])),
                ((self.group1()[1] * other.group0()[3]) + (self.group2()[2] * other.group0()[0])),
                ((self.group1()[2] * other.group0()[3]) + (self.group2()[0] * other.group0()[1])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                ((self.group2()[3] * other.group0()[0]) * -1.0),
                ((self.group2()[3] * other.group0()[1]) * -1.0),
                ((self.group2()[3] * other.group0()[2]) * -1.0),
                ((self.group2()[2] * other.group0()[2]) + (self.group2()[3] * other.group0()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[1]]) * swizzle!(other.group0(), 2, 0, 1, 1))
                - (swizzle!(self.group1(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       67      105        0
    //    simd3        2        4        0
    //    simd4       29       30        0
    // Totals...
    // yes simd       98      139        0
    //  no simd      189      237        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (-(Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[0] * other[e2]) * -1.0),
                ((self.group0()[1] * other[e2]) * -1.0),
                ((self.group0()[2] * other[e2]) * -1.0),
                ((self.group1()[2] * other.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                - (swizzle!(self.group1(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (self.group2()[1] * other.group0()[2]),
                (self.group2()[2] * other.group0()[0]),
                (self.group2()[0] * other.group0()[1]),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]) - (self.group2()[3] * other.group0()[3])),
            ]) - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other[e2], other[e2], other[e2], other.group0()[3]]) * self.group1())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group1()[1] * other.group0()[2]) * -1.0),
                ((self.group1()[2] * other.group0()[0]) * -1.0),
                ((self.group1()[0] * other.group0()[1]) * -1.0),
                (self.group2()[2] * other.group0()[2]),
            ]) + (Simd32x4::from(other[e2]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other[e2]]) * self.group2())
                + (swizzle!(self.group2(), 3, 3, 3, 1) * swizzle!(other.group0(), 0, 1, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       37       56        0
    //    simd3        0        2        0
    //    simd4       17       20        0
    // Totals...
    // yes simd       54       78        0
    //  no simd      105      142        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = CircleRotor::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other[scalar]) * self.group0()),
            // e415, e425, e435, e321
            (Simd32x4::from(other[scalar]) * self.group1()),
            // e235, e315, e125, e12345
            (Simd32x4::from(other[scalar]) * self.group2()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       54       82        0
    //    simd3        2        4        0
    //    simd4       33       34        0
    // Totals...
    // yes simd       89      120        0
    //  no simd      192      230        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            ((Simd32x3::from(other[e4315]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(self.group1()[3] * other.group0()[0]) + (self.group2()[0] * other[e4315])),
                (-(self.group1()[3] * other.group0()[1]) + (self.group2()[1] * other[e4315])),
                (-(self.group1()[3] * other.group0()[2]) + (self.group2()[2] * other[e4315])),
                ((self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))),
            // e235, e315, e125, e4
            (Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]))])
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other[e4315]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other[e4315]]) * self.group1())),
            // e1, e2, e3, e5
            (Simd32x4::from([
                (-(self.group2()[0] * other[e4315]) - (self.group2()[3] * other.group0()[0])),
                (-(self.group2()[1] * other[e4315]) - (self.group2()[3] * other.group0()[1])),
                (-(self.group2()[2] * other[e4315]) - (self.group2()[3] * other.group0()[2])),
                ((self.group2()[2] * other.group0()[2]) + (self.group2()[3] * other.group0()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[1]]) * swizzle!(other.group0(), 2, 0, 1, 1))
                - (swizzle!(self.group1(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      112      147        0
    //    simd3        0        1        0
    //    simd4       52       53        0
    // Totals...
    // yes simd      164      201        0
    //  no simd      320      362        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(self.group0()[1] * other.group3()[2])
                    - (self.group1()[0] * other.group3()[3])
                    - (self.group1()[2] * other.group0()[1])
                    - (self.group1()[3] * other.group0()[0])
                    - (self.group2()[3] * other.group0()[0])),
                (-(self.group0()[2] * other.group3()[0])
                    - (self.group1()[0] * other.group0()[2])
                    - (self.group1()[1] * other.group3()[3])
                    - (self.group1()[3] * other.group0()[1])
                    - (self.group2()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group3()[1])
                    - (self.group1()[1] * other.group0()[0])
                    - (self.group1()[2] * other.group3()[3])
                    - (self.group1()[3] * other.group0()[2])
                    - (self.group2()[3] * other.group0()[2])),
                ((self.group1()[1] * other.group1()[1])
                    + (self.group1()[2] * other.group1()[2])
                    + (self.group2()[0] * other.group0()[0])
                    + (self.group2()[1] * other.group0()[1])
                    + (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group2()[0]]))
                + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group2()[1]]))
                + (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group2()[2]]))
                - (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[3]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group2()[0] * other.group3()[3]) - (self.group2()[2] * other.group0()[1]) - (self.group2()[3] * other.group1()[0])),
                ((self.group0()[2] * other.group2()[0]) - (self.group2()[0] * other.group0()[2]) - (self.group2()[1] * other.group3()[3]) - (self.group2()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[1]) - (self.group2()[1] * other.group0()[0]) - (self.group2()[2] * other.group3()[3]) - (self.group2()[3] * other.group1()[2])),
                (-(self.group0()[2] * other.group2()[2])
                    + (self.group2()[1] * other.group0()[1])
                    + (self.group2()[2] * other.group0()[2])
                    + (self.group2()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 3, 2, 0, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[2], self.group0()[1]]) * swizzle!(other.group2(), 1, 3, 3, 1))
                - (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group3()[0]]) * swizzle!(self.group1(), 0, 0, 1, 0))
                - (Simd32x4::from([other.group1()[1], other.group0()[3], other.group0()[3], other.group3()[1]]) * swizzle!(self.group1(), 2, 1, 2, 1))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[3]]) * swizzle!(self.group1(), 1, 2, 0, 3))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group3(), 0, 1, 2, 2))
                + (swizzle!(self.group2(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(self.group1()[2] * other.group2()[1]) - (self.group2()[0] * other.group1()[3]) + (self.group2()[1] * other.group3()[2])
                    - (self.group2()[2] * other.group1()[1])
                    - (self.group2()[3] * other.group2()[0])),
                (-(self.group1()[1] * other.group2()[3]) - (self.group2()[1] * other.group0()[3]) - (self.group2()[1] * other.group1()[3])
                    + (self.group2()[2] * other.group3()[0])
                    - (self.group2()[3] * other.group2()[1])),
                (-(self.group1()[2] * other.group2()[3]) + (self.group2()[0] * other.group3()[1])
                    - (self.group2()[2] * other.group0()[3])
                    - (self.group2()[2] * other.group1()[3])
                    - (self.group2()[3] * other.group2()[2])),
                ((self.group0()[1] * other.group1()[1]) - (self.group0()[1] * other.group3()[1]) + (self.group0()[2] * other.group1()[2]) - (self.group0()[2] * other.group3()[2])
                    + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group3()[3]]) * swizzle!(self.group2(), 0, 0, 1, 3))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group1(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group2()[3], other.group2()[2], other.group2()[0], other.group3()[3]]) * swizzle!(self.group1(), 0, 0, 1, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group1()[1] * other.group3()[2]) - (self.group2()[0] * other.group3()[3]) - (self.group2()[2] * other.group0()[1])),
                (-(self.group1()[2] * other.group3()[0]) - (self.group2()[0] * other.group0()[2]) - (self.group2()[1] * other.group3()[3])),
                (-(self.group1()[0] * other.group3()[1]) - (self.group2()[1] * other.group0()[0]) - (self.group2()[2] * other.group3()[3])),
                ((self.group2()[1] * other.group3()[1]) + (self.group2()[2] * other.group1()[2]) + (self.group2()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 3, 2, 0, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group2()[3]]) * swizzle!(other.group2(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group2(), 1, 3, 3, 1))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group3()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group2()[2]]) * swizzle!(self.group1(), 0, 0, 1, 2))
                + (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group2()[3]]) * swizzle!(self.group1(), 2, 1, 2, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      100      136        0
    //    simd3        0        1        0
    //    simd4       55       56        0
    // Totals...
    // yes simd      155      193        0
    //  no simd      320      363        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group3()[2])
                    + (self.group0()[2] * other.group1()[1])
                    + (self.group0()[2] * other.group3()[1])
                    + (self.group1()[0] * other.group2()[3])
                    + (self.group1()[2] * other.group0()[1])
                    + (self.group1()[3] * other.group0()[0])
                    + (self.group2()[3] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group3()[0])
                    + (self.group1()[0] * other.group0()[2])
                    + (self.group1()[1] * other.group2()[3])
                    + (self.group1()[3] * other.group0()[1])
                    + (self.group2()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group3()[1])
                    + (self.group0()[1] * other.group1()[0])
                    + (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group1()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group2()[3])
                    + (self.group1()[3] * other.group0()[2])
                    + (self.group2()[3] * other.group0()[2])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group2()[1]) - (self.group1()[3] * other.group3()[0]) - (self.group2()[1] * other.group0()[2])),
                ((self.group0()[0] * other.group2()[2]) - (self.group1()[3] * other.group3()[1]) - (self.group2()[2] * other.group0()[0])),
                ((self.group0()[1] * other.group2()[0]) - (self.group1()[3] * other.group3()[2]) - (self.group2()[0] * other.group0()[1])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2]) + (self.group1()[3] * other.group0()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group0()[1]]) * swizzle!(self.group2(), 2, 1, 2, 1))
                + (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group3()[1]]) * swizzle!(self.group1(), 0, 0, 1, 1))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]) * swizzle!(self.group2(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group1()[1], other.group0()[3], other.group0()[3], other.group3()[2]]) * swizzle!(self.group1(), 2, 1, 2, 2))
                + (Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 0, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group1()[2] * other.group2()[1]) + (self.group2()[3] * other.group2()[0])),
                ((self.group1()[0] * other.group2()[2]) + (self.group2()[3] * other.group2()[1])),
                ((self.group1()[1] * other.group2()[0]) + (self.group2()[3] * other.group2()[2])),
                (-(self.group1()[2] * other.group2()[2]) - (self.group1()[3] * other.group3()[3])),
            ]) - (Simd32x4::from(self.group2()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group1()[0]]))
                - (Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group1()[1]]))
                - (Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group1()[2]]))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[3], other.group1()[2], other.group3()[1], other.group3()[1]]) * swizzle!(self.group2(), 0, 0, 0, 1))
                + (Simd32x4::from([other.group1()[1], other.group3()[0], other.group0()[3], other.group3()[3]]) * swizzle!(self.group2(), 2, 2, 2, 3))
                + (Simd32x4::from([other.group3()[2], other.group0()[3], other.group1()[0], other.group3()[2]]) * swizzle!(self.group2(), 1, 1, 1, 2))
                - (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group2(), 0, 1, 2, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) - (self.group0()[1] * other.group2()[2]) + (self.group1()[1] * other.group3()[2]) + (self.group1()[3] * other.group1()[0])
                    - (self.group2()[0] * other.group2()[3])),
                ((self.group0()[1] * other.group3()[3]) - (self.group0()[2] * other.group2()[0]) + (self.group1()[2] * other.group3()[0]) + (self.group1()[3] * other.group1()[1])
                    - (self.group2()[1] * other.group2()[3])),
                (-(self.group0()[0] * other.group2()[1])
                    + (self.group0()[2] * other.group3()[3])
                    + (self.group1()[0] * other.group3()[1])
                    + (self.group1()[3] * other.group1()[2])
                    - (self.group2()[2] * other.group2()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[2]]) * swizzle!(other.group0(), 1, 2, 0, 2))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[0]]) * swizzle!(other.group3(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group0()[0]]) * swizzle!(self.group1(), 0, 0, 1, 0))
                - (Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group0()[1]]) * swizzle!(self.group1(), 2, 1, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl InfixSandwich for Dipole {}
impl Sandwich<AntiCircleRotor> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      126      158        0
    //    simd3        0        2        0
    //    simd4       28       29        0
    // Totals...
    // yes simd      154      189        0
    //  no simd      238      280        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[0] * other.group2()[3]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3]) + (self.group0()[1] * other.group2()[3])),
                ((self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[3]) + (self.group0()[2] * other.group2()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[2]]) * swizzle!(other.group1(), 2, 0, 1, 2))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1]) - (self.group0()[1] * other.group2()[2]) - (other.group1()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[2] * self.group2()[0])
                    - (self.group0()[2] * other.group2()[0])
                    - (other.group1()[0] * self.group1()[2])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) - (self.group0()[0] * other.group2()[1]) - (other.group1()[1] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[0]) - (other.group0()[1] * self.group2()[1]) - (other.group0()[2] * self.group2()[2])
                    + (self.group0()[2] * other.group2()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group2()[0] * other.group2()[3]) + (self.group2()[2] * other.group1()[1]) + (other.group2()[0] * self.group1()[3]) + (other.group2()[1] * self.group1()[2])),
                ((self.group2()[0] * other.group1()[2]) + (self.group2()[1] * other.group2()[3]) + (other.group2()[1] * self.group1()[3]) + (other.group2()[2] * self.group1()[0])),
                ((self.group2()[1] * other.group1()[0]) + (self.group2()[2] * other.group2()[3]) + (other.group2()[0] * self.group1()[1]) + (other.group2()[2] * self.group1()[3])),
                (-(other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2]) - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[2], self.group0()[1]]) * swizzle!(other.group1(), 2, 0, 3, 1))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1])
                    + (self.group0()[1] * other.group2()[2])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[0])
                    + (self.group0()[2] * other.group2()[0])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0])
                    + (self.group0()[0] * other.group2()[1])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])),
                (-(self.group2()[0] * other.group1()[0])
                    - (self.group2()[1] * other.group1()[1])
                    - (self.group2()[2] * other.group1()[2])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      134      166        0
    //    simd3        0        2        0
    //    simd4       36       37        0
    // Totals...
    // yes simd      170      205        0
    //  no simd      278      320        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) + (self.group0()[1] * other.group3()[2]) + (self.group0()[2] * other.group1()[1]) + (other.group2()[3] * self.group1()[0])),
                ((other.group0()[2] * self.group1()[0]) + (self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group3()[0]) + (other.group2()[3] * self.group1()[1])),
                ((other.group0()[0] * self.group1()[1]) + (self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group1()[0]) + (other.group2()[3] * self.group1()[2])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])),
            ]) - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group2()[0]]))
                - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group2()[1]]))
                - (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group2()[2]]))
                - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1])
                    + (self.group0()[0] * other.group3()[3])
                    + (self.group0()[2] * other.group2()[1])
                    + (self.group2()[0] * other.group2()[3])
                    + (other.group1()[1] * self.group1()[2])),
                (-(other.group0()[0] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[0])
                    + (self.group0()[0] * other.group2()[2])
                    + (self.group0()[1] * other.group3()[3])
                    + (self.group2()[1] * other.group2()[3])
                    + (other.group1()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0])
                    + (self.group0()[1] * other.group2()[0])
                    + (self.group0()[2] * other.group3()[3])
                    + (self.group2()[2] * other.group2()[3])
                    + (other.group1()[0] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group3()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group3()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (swizzle!(other.group3(), 0, 1, 2, 1) * swizzle!(self.group1(), 3, 3, 3, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group2()[0] * other.group1()[3])
                    + (self.group2()[2] * other.group1()[1])
                    + (other.group2()[0] * self.group1()[3])
                    + (other.group2()[1] * self.group1()[2])
                    + (other.group3()[3] * self.group1()[0])),
                ((self.group2()[0] * other.group1()[2])
                    + (self.group2()[1] * other.group1()[3])
                    + (other.group2()[1] * self.group1()[3])
                    + (other.group2()[2] * self.group1()[0])
                    + (other.group3()[3] * self.group1()[1])),
                ((self.group2()[1] * other.group1()[0])
                    + (self.group2()[2] * other.group1()[3])
                    + (other.group2()[0] * self.group1()[1])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group3()[3] * self.group1()[2])),
                (-(self.group2()[1] * other.group1()[1])
                    - (self.group2()[1] * other.group3()[1])
                    - (self.group2()[2] * other.group1()[2])
                    - (self.group2()[2] * other.group3()[2])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group2()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group2()[0]]) * swizzle!(other.group3(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]) * swizzle!(other.group3(), 1, 2, 0, 3))
                - (swizzle!(other.group2(), 2, 0, 1, 0) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) + (self.group0()[2] * other.group2()[1])
                    - (self.group2()[0] * other.group2()[3])
                    + (other.group1()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0]) + (self.group0()[0] * other.group2()[2]) - (self.group2()[1] * other.group2()[3])
                    + (other.group1()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) + (self.group0()[1] * other.group2()[0])
                    - (self.group2()[2] * other.group2()[3])
                    + (other.group1()[3] * self.group1()[2])),
                (-(other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    + (self.group0()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[3]]) * swizzle!(other.group2(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group0()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[1]]) * swizzle!(other.group3(), 1, 2, 0, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       77      104        0
    //    simd3        1        4        0
    //    simd4       15       17        0
    // Totals...
    // yes simd       93      125        0
    //  no simd      140      184        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])) + (Simd32x3::from(other.group0()[1]) * self.group0())),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (other.group0()[1] * self.group2()[0]),
                (other.group0()[1] * self.group2()[1]),
                (other.group0()[1] * self.group2()[2]),
                (other.group0()[0] * self.group1()[3]),
            ]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group2()[0]),
                (other.group0()[0] * self.group2()[1]),
                (other.group0()[0] * self.group2()[2]),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       85      119        0
    //    simd3        0        2        0
    //    simd4       21       22        0
    // Totals...
    // yes simd      106      143        0
    //  no simd      169      213        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (other.group0()[3] * self.group1()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (self.group0()[2] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (self.group0()[1] * other.group0()[0]),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group2()[0] * other.group0()[3]) + (other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group1()[2])),
                ((self.group2()[1] * other.group0()[3]) + (other.group0()[1] * self.group1()[3]) + (other.group0()[2] * self.group1()[0])),
                ((self.group2()[2] * other.group0()[3]) + (other.group0()[0] * self.group1()[1]) + (other.group0()[2] * self.group1()[3])),
                (-(other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])),
            ]) - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1]) + (other.group0()[3] * self.group1()[0])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0]) + (other.group0()[3] * self.group1()[1])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) + (other.group0()[3] * self.group1()[2])),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      100      132        0
    //    simd3        0        2        0
    //    simd4       27       28        0
    // Totals...
    // yes simd      127      162        0
    //  no simd      208      250        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]) - (other.group0()[3] * self.group1()[3])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group1()[3])),
                ((self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group1()[3])),
                (-(self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (swizzle!(other.group1(), 0, 1, 2, 0) * swizzle!(self.group1(), 3, 3, 3, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group2()[0] * other.group0()[3]) + (other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group1()[2]) + (other.group1()[3] * self.group1()[0])),
                ((self.group2()[1] * other.group0()[3]) + (other.group0()[1] * self.group1()[3]) + (other.group0()[2] * self.group1()[0]) + (other.group1()[3] * self.group1()[1])),
                ((self.group2()[2] * other.group0()[3]) + (other.group0()[0] * self.group1()[1]) + (other.group0()[2] * self.group1()[3]) + (other.group1()[3] * self.group1()[2])),
                (-(self.group2()[1] * other.group1()[1])
                    - (self.group2()[2] * other.group1()[2])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group2()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1]) + (other.group0()[3] * self.group1()[0])
                    - (other.group1()[2] * self.group1()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0]) + (other.group0()[3] * self.group1()[1]) - (other.group1()[0] * self.group1()[2])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) + (other.group0()[3] * self.group1()[2])
                    - (other.group1()[1] * self.group1()[0])),
                (self.group0()[2] * other.group1()[2]),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      120      152        0
    //    simd3        0        2        0
    //    simd4       17       18        0
    // Totals...
    // yes simd      137      172        0
    //  no simd      188      230        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1]) + (other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group1()[0]) - (other.group1()[0] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) + (other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0])),
                ((other.group1()[0] * self.group0()[0]) + (other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1]) + (other.group1()[0] * self.group1()[3]) + (other.group1()[1] * self.group1()[2])
                    - (other.group1()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[2] * self.group2()[0]) - (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) + (other.group1()[0] * self.group1()[1]) - (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group1()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[1] * self.group1()[3]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])),
                ((other.group0()[2] * self.group1()[3]) - (other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      108      140        0
    //    simd3        0        2        0
    //    simd4       25       26        0
    // Totals...
    // yes simd      133      168        0
    //  no simd      208      250        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[3])),
                ((self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) - (other.group0()[2] * self.group1()[1]) + (other.group0()[3] * self.group1()[0])),
                (-(self.group0()[2] * other.group1()[0]) - (other.group0()[0] * self.group1()[2]) + (other.group0()[3] * self.group1()[1])),
                (-(self.group0()[0] * other.group1()[1]) - (other.group0()[1] * self.group1()[0]) + (other.group0()[3] * self.group1()[2])),
                (self.group0()[2] * other.group1()[2]),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[2], self.group0()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))
                + (swizzle!(other.group0(), 1, 2, 0, 3) * swizzle!(self.group1(), 2, 0, 1, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group2()[0] * other.group0()[3]) + (self.group2()[2] * other.group0()[1]) + (other.group1()[0] * self.group1()[3]) + (other.group1()[1] * self.group1()[2])
                    - (other.group1()[2] * self.group1()[1])
                    + (other.group1()[3] * self.group1()[0])),
                ((self.group2()[0] * other.group0()[2]) + (self.group2()[1] * other.group0()[3]) - (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[2] * self.group1()[0])
                    + (other.group1()[3] * self.group1()[1])),
                ((self.group2()[1] * other.group0()[0]) + (self.group2()[2] * other.group0()[3]) + (other.group1()[0] * self.group1()[1]) - (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (other.group0()[0] * self.group1()[3]),
                (other.group0()[1] * self.group1()[3]),
                (other.group0()[2] * self.group1()[3]),
                (-(self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    - (other.group1()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       68       99        0
    //    simd3        1        4        0
    //    simd4       22       23        0
    // Totals...
    // yes simd       91      126        0
    //  no simd      159      203        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (-(Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])),
            ]) - (swizzle!(other.group0(), 0, 1, 2, 0) * swizzle!(self.group1(), 3, 3, 3, 0))),
            // e235, e315, e125, e4
            (Simd32x4::from([
                ((self.group2()[1] * other.group0()[2]) * -1.0),
                ((self.group2()[2] * other.group0()[0]) * -1.0),
                ((self.group2()[0] * other.group0()[1]) * -1.0),
                (self.group0()[2] * other.group0()[2]),
            ]) + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                (other.group0()[1] * self.group1()[2]),
                (other.group0()[2] * self.group1()[0]),
                (other.group0()[0] * self.group1()[1]),
                (-(self.group2()[1] * other.group0()[1]) - (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       72        0
    //    simd3        0        4        0
    //    simd4        7       10        0
    // Totals...
    // yes simd       63       86        0
    //  no simd       84      124        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Circle::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other[e12345]) * self.group0()),
            // e415, e425, e435, e321
            (Simd32x4::from(other[e12345]) * self.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e235, e315, e125
            (Simd32x3::from(other[e12345]) * self.group2()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      124      156        0
    //    simd3        0        2        0
    //    simd4       26       27        0
    // Totals...
    // yes simd      150      185        0
    //  no simd      228      270        0
    fn sandwich(self, other: Circle) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) + (self.group0()[2] * other.group1()[1])),
                ((other.group0()[2] * self.group1()[0]) + (self.group0()[0] * other.group1()[2])),
                ((other.group0()[0] * self.group1()[1]) + (self.group0()[1] * other.group1()[0])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group1()[2]]) * swizzle!(other.group1(), 3, 3, 1, 2))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[2], self.group1()[3]]) * swizzle!(other.group1(), 2, 0, 3, 3))),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1]) + (other.group2()[1] * self.group0()[2]) - (other.group2()[2] * self.group0()[1])
                    + (other.group1()[1] * self.group1()[2])
                    - (other.group1()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[2] * self.group2()[0]) - (other.group2()[0] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[0])
                    - (other.group1()[0] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) + (other.group2()[0] * self.group0()[1]) - (other.group2()[1] * self.group0()[0])
                    + (other.group1()[0] * self.group1()[1])
                    - (other.group1()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group2()[0] * self.group1()[3]) + (other.group2()[1] * self.group1()[2]) + (self.group2()[0] * other.group1()[3]) + (self.group2()[2] * other.group1()[1])),
                ((other.group2()[1] * self.group1()[3]) + (other.group2()[2] * self.group1()[0]) + (self.group2()[0] * other.group1()[2]) + (self.group2()[1] * other.group1()[3])),
                ((other.group2()[0] * self.group1()[1]) + (other.group2()[2] * self.group1()[3]) + (self.group2()[1] * other.group1()[0]) + (self.group2()[2] * other.group1()[3])),
                (-(other.group2()[1] * self.group1()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (self.group2()[1] * other.group1()[1])
                    - (self.group2()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group2()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group2()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) + (other.group2()[1] * self.group0()[2])
                    - (other.group2()[2] * self.group0()[1])
                    + (other.group1()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0]) - (other.group2()[0] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[0])
                    + (other.group1()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) + (other.group2()[0] * self.group0()[1])
                    - (other.group2()[1] * self.group0()[0])
                    + (other.group1()[3] * self.group1()[2])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      126      158        0
    //    simd3        0        2        0
    //    simd4       28       29        0
    // Totals...
    // yes simd      154      189        0
    //  no simd      238      280        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) + (self.group0()[0] * other.group2()[3]) + (self.group0()[2] * other.group1()[1])),
                ((other.group0()[2] * self.group1()[0]) + (self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group2()[3])),
                ((other.group0()[0] * self.group1()[1]) + (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group2()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group1()[2]]) * swizzle!(other.group1(), 3, 3, 1, 2))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[2], self.group1()[3]]) * swizzle!(other.group1(), 2, 0, 3, 3))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1])
                    + (self.group0()[2] * other.group2()[1])
                    + (other.group1()[1] * self.group1()[2])
                    + (other.group2()[3] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[0])
                    + (self.group0()[0] * other.group2()[2])
                    + (other.group1()[2] * self.group1()[0])
                    + (other.group2()[3] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0])
                    + (self.group0()[1] * other.group2()[0])
                    + (other.group1()[0] * self.group1()[1])
                    + (other.group2()[3] * self.group1()[2])),
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[3]]) * swizzle!(self.group1(), 1, 2, 0, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group2()[0] * other.group1()[3])
                    + (self.group2()[0] * other.group2()[3])
                    + (self.group2()[2] * other.group1()[1])
                    + (other.group2()[0] * self.group1()[3])
                    + (other.group2()[1] * self.group1()[2])),
                ((self.group2()[0] * other.group1()[2])
                    + (self.group2()[1] * other.group1()[3])
                    + (self.group2()[1] * other.group2()[3])
                    + (other.group2()[1] * self.group1()[3])
                    + (other.group2()[2] * self.group1()[0])),
                ((self.group2()[1] * other.group1()[0])
                    + (self.group2()[2] * other.group1()[3])
                    + (self.group2()[2] * other.group2()[3])
                    + (other.group2()[0] * self.group1()[1])
                    + (other.group2()[2] * self.group1()[3])),
                (-(self.group2()[1] * other.group1()[1])
                    - (self.group2()[2] * other.group1()[2])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group2()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (swizzle!(other.group2(), 2, 0, 1, 0) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) - (self.group0()[1] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[1])
                    + (other.group1()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0]) + (self.group0()[0] * other.group2()[2]) - (self.group0()[2] * other.group2()[0])
                    + (other.group1()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) - (self.group0()[0] * other.group2()[1])
                    + (self.group0()[1] * other.group2()[0])
                    + (other.group1()[3] * self.group1()[2])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      132      164        0
    //    simd3        0        2        0
    //    simd4       24       25        0
    // Totals...
    // yes simd      156      191        0
    //  no simd      228      270        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3])),
                ((self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[2]]) * swizzle!(other.group1(), 2, 0, 1, 2))),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1]) + (other.group2()[1] * self.group0()[2]) - (other.group2()[2] * self.group0()[1])
                    + (other.group1()[1] * self.group1()[2])
                    - (other.group1()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[2] * self.group2()[0]) - (other.group2()[0] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[0])
                    - (other.group1()[0] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) + (other.group2()[0] * self.group0()[1]) - (other.group2()[1] * self.group0()[0])
                    + (other.group1()[0] * self.group1()[1])
                    - (other.group1()[1] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[0]) - (other.group0()[1] * self.group2()[1]) - (other.group0()[2] * self.group2()[2])
                    + (other.group2()[0] * self.group0()[0])
                    + (other.group2()[1] * self.group0()[1])
                    + (other.group2()[2] * self.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group2()[0] * self.group1()[3]) + (other.group2()[1] * self.group1()[2]) + (self.group2()[2] * other.group1()[1])),
                ((other.group2()[1] * self.group1()[3]) + (other.group2()[2] * self.group1()[0]) + (self.group2()[0] * other.group1()[2])),
                ((other.group2()[0] * self.group1()[1]) + (other.group2()[2] * self.group1()[3]) + (self.group2()[1] * other.group1()[0])),
                (-(other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2]) - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[2], self.group0()[1]]) * swizzle!(other.group1(), 2, 0, 3, 1))),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1]) - (other.group2()[1] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[1])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[2] * self.group2()[0]) + (other.group2()[0] * self.group0()[2])
                    - (other.group2()[2] * self.group0()[0])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) - (other.group2()[0] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])),
                (-(other.group2()[0] * self.group1()[0])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (self.group2()[0] * other.group1()[0])
                    - (self.group2()[1] * other.group1()[1])
                    - (self.group2()[2] * other.group1()[2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      154      186        0
    //    simd3        0        2        0
    //    simd4       31       32        0
    // Totals...
    // yes simd      185      220        0
    //  no simd      278      320        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(self.group0()[1] * other.group3()[2])
                    + (self.group0()[2] * other.group1()[1])
                    + (self.group0()[2] * other.group3()[1])
                    + (other.group0()[1] * self.group1()[2])
                    + (self.group1()[0] * other.group2()[3])),
                ((self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group3()[0])
                    + (other.group0()[2] * self.group1()[0])
                    + (self.group1()[1] * other.group2()[3])),
                (-(self.group0()[0] * other.group3()[1])
                    + (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (other.group0()[0] * self.group1()[1])
                    + (self.group1()[2] * other.group2()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group1()[3]]) * swizzle!(other.group1(), 3, 2, 0, 3))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group1()[1]]) * swizzle!(self.group1(), 3, 2, 0, 1))
                - (Simd32x4::from([other.group0()[2], other.group0()[1], other.group0()[2], other.group1()[2]]) * swizzle!(self.group1(), 1, 3, 3, 2))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) - (self.group0()[1] * other.group2()[2]) - (self.group2()[1] * other.group0()[2])
                    + (self.group2()[2] * other.group0()[1])
                    + (self.group1()[2] * other.group1()[1])
                    + (self.group1()[3] * other.group3()[0])),
                ((self.group0()[1] * other.group3()[3]) - (self.group0()[2] * other.group2()[0]) + (self.group2()[0] * other.group0()[2]) - (self.group2()[2] * other.group0()[0])
                    + (self.group1()[0] * other.group1()[2])
                    + (self.group1()[3] * other.group3()[1])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[2] * other.group3()[3]) - (self.group2()[0] * other.group0()[1])
                    + (self.group2()[1] * other.group0()[0])
                    + (self.group1()[1] * other.group1()[0])
                    + (self.group1()[3] * other.group3()[2])),
                ((self.group0()[2] * other.group2()[2])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group3()[1])
                    - (self.group1()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group3()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group2()[1] * other.group3()[2])
                    + (self.group2()[2] * other.group1()[1])
                    + (self.group1()[0] * other.group3()[3])
                    + (self.group1()[2] * other.group2()[1])
                    + (self.group1()[3] * other.group2()[0])),
                ((self.group2()[0] * other.group1()[2])
                    + (self.group2()[2] * other.group3()[0])
                    + (self.group1()[0] * other.group2()[2])
                    + (self.group1()[1] * other.group3()[3])
                    + (self.group1()[3] * other.group2()[1])),
                ((self.group2()[0] * other.group3()[1])
                    + (self.group2()[1] * other.group1()[0])
                    + (self.group1()[1] * other.group2()[0])
                    + (self.group1()[2] * other.group3()[3])
                    + (self.group1()[3] * other.group2()[2])),
                (-(self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group1()[3] * other.group2()[3])),
            ]) - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[2], self.group0()[1]]) * swizzle!(other.group1(), 2, 0, 3, 1))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[2]) + (self.group2()[0] * other.group2()[3])
                    - (self.group2()[1] * other.group0()[2])
                    + (self.group2()[2] * other.group0()[1])
                    + (self.group1()[2] * other.group3()[1])
                    + (self.group1()[3] * other.group1()[0])),
                (-(self.group0()[1] * other.group3()[3])
                    + (self.group0()[2] * other.group2()[0])
                    + (self.group2()[0] * other.group0()[2])
                    + (self.group2()[1] * other.group2()[3])
                    - (self.group2()[2] * other.group0()[0])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[2] * other.group3()[3]) - (self.group2()[0] * other.group0()[1])
                    + (self.group2()[1] * other.group0()[0])
                    + (self.group2()[2] * other.group2()[3])
                    + (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])),
                (-(self.group2()[0] * other.group1()[0]) + (self.group2()[0] * other.group3()[0]) - (self.group2()[1] * other.group1()[1])
                    + (self.group2()[1] * other.group3()[1])
                    - (self.group2()[2] * other.group1()[2])
                    + (self.group2()[2] * other.group3()[2])
                    - (self.group1()[2] * other.group2()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group3()[3]]) * swizzle!(self.group1(), 0, 0, 1, 3))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       69      100        0
    //    simd3        1        4        0
    //    simd4       17       19        0
    // Totals...
    // yes simd       87      123        0
    //  no simd      140      188        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            ((Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])) + (Simd32x3::from(other.group0()[1]) * self.group0())),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3] * -1.0),
            ]),
            // e235, e315, e125, e4
            (Simd32x4::from([
                (other.group0()[1] * self.group2()[0]),
                (other.group0()[1] * self.group2()[1]),
                (other.group0()[1] * self.group2()[2]),
                (other.group0()[0] * self.group1()[3]),
            ]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[0] * self.group2()[0] * -1.0),
                (other.group0()[0] * self.group2()[1] * -1.0),
                (other.group0()[0] * self.group2()[2] * -1.0),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       93      127        0
    //    simd3        0        2        0
    //    simd4       19       20        0
    // Totals...
    // yes simd      112      149        0
    //  no simd      169      213        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group1()[3] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) * -1.0),
                ((self.group0()[2] * other.group0()[0]) * -1.0),
                ((self.group0()[0] * other.group0()[1]) * -1.0),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group2()[0] * other.group0()[3]) - (self.group1()[1] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[1])
                    + (self.group1()[3] * other.group0()[0])),
                (-(self.group2()[1] * other.group0()[3]) + (self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])
                    + (self.group1()[3] * other.group0()[1])),
                (-(self.group2()[2] * other.group0()[3]) - (self.group1()[0] * other.group0()[1])
                    + (self.group1()[1] * other.group0()[0])
                    + (self.group1()[3] * other.group0()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) + (self.group1()[0] * other.group0()[3])),
                ((self.group0()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[1]) + (self.group1()[2] * other.group0()[3])),
                (-(self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      116      148        0
    //    simd3        0        2        0
    //    simd4       23       24        0
    // Totals...
    // yes simd      139      174        0
    //  no simd      208      250        0
    fn sandwich(self, other: Flector) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group0()[2]) + (self.group1()[3] * other.group1()[0])),
                ((self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group0()[0]) + (self.group1()[3] * other.group1()[1])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[2] * other.group1()[3]) + (self.group1()[3] * other.group1()[2])),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(self.group2()[0] * other.group0()[3]) + (self.group2()[1] * other.group1()[2]) + (self.group1()[0] * other.group1()[3])
                    - (self.group1()[1] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[1])
                    + (self.group1()[3] * other.group0()[0])),
                (-(self.group2()[1] * other.group0()[3])
                    + (self.group2()[2] * other.group1()[0])
                    + (self.group1()[0] * other.group0()[2])
                    + (self.group1()[1] * other.group1()[3])
                    - (self.group1()[2] * other.group0()[0])
                    + (self.group1()[3] * other.group0()[1])),
                ((self.group2()[0] * other.group1()[1]) - (self.group2()[2] * other.group0()[3]) - (self.group1()[0] * other.group0()[1])
                    + (self.group1()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[2]) + (self.group1()[2] * other.group1()[1])),
                (-(self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[2] * other.group1()[3]) + (self.group1()[2] * other.group0()[3])),
                ((self.group2()[0] * other.group1()[0]) + (self.group2()[1] * other.group1()[1]) + (self.group2()[2] * other.group1()[2]) - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group1()[3]]) * swizzle!(self.group1(), 0, 0, 1, 3))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      108      140        0
    //    simd3        0        2        0
    //    simd4       20       21        0
    // Totals...
    // yes simd      128      163        0
    //  no simd      188      230        0
    fn sandwich(self, other: Line) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1]) + (other.group0()[1] * self.group1()[2])
                    - (other.group0()[2] * self.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0]) - (other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group1()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) + (other.group0()[0] * self.group1()[1])
                    - (other.group0()[1] * self.group1()[0])),
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group2()[1] * other.group0()[2])
                    + (self.group2()[2] * other.group0()[1])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[1] * self.group1()[2])),
                ((self.group2()[0] * other.group0()[2]) - (self.group2()[2] * other.group0()[0]) + (other.group1()[1] * self.group1()[3]) + (other.group1()[2] * self.group1()[0])),
                (-(self.group2()[0] * other.group0()[1])
                    + (self.group2()[1] * other.group0()[0])
                    + (other.group1()[0] * self.group1()[1])
                    + (other.group1()[2] * self.group1()[3])),
                (-(self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1]) - (other.group0()[0] * self.group1()[3])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0]) - (other.group0()[1] * self.group1()[3])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) - (other.group0()[2] * self.group1()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      104      136        0
    //    simd3        0        2        0
    //    simd4       26       27        0
    // Totals...
    // yes simd      130      165        0
    //  no simd      208      250        0
    fn sandwich(self, other: Motor) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[3])),
                ((self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[2] * other.group1()[1]) + (self.group1()[0] * other.group0()[3]) + (self.group1()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3]) + (self.group1()[0] * other.group0()[2]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[3]) + (self.group1()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (swizzle!(self.group1(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group2()[0] * other.group0()[3]) + (self.group2()[2] * other.group0()[1]) + (self.group1()[2] * other.group1()[1]) + (self.group1()[3] * other.group1()[0])),
                ((self.group2()[0] * other.group0()[2]) + (self.group2()[1] * other.group0()[3]) + (self.group1()[1] * other.group1()[3]) + (self.group1()[3] * other.group1()[1])),
                ((self.group2()[1] * other.group0()[0]) + (self.group2()[2] * other.group0()[3]) + (self.group1()[2] * other.group1()[3]) + (self.group1()[3] * other.group1()[2])),
                (-(self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group2()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (swizzle!(self.group1(), 0, 0, 1, 3) * swizzle!(other.group1(), 3, 2, 0, 3))
                - (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group1(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[3])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[0]]) * swizzle!(other.group0(), 0, 1, 2, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for Dipole {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      212      254        0
    //    simd2       18       18        0
    //    simd3       72       82        0
    //    simd4       28       29        0
    // Totals...
    // yes simd      330      383        0
    //  no simd      576      652        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([(self.group1()[3] * other.group3()[3]), ((self.group1()[3] * other.group6()[3]) * -1.0)])
                - (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group3()[0], other.group8()[0]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group3()[1], other.group8()[1]]))
                - (Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group3()[2], other.group8()[2]]))
                - (Simd32x2::from(self.group2()[0]) * Simd32x2::from([other.group4()[0], other.group7()[0]]))
                - (Simd32x2::from(self.group2()[1]) * Simd32x2::from([other.group4()[1], other.group7()[1]]))
                - (Simd32x2::from(self.group2()[2]) * Simd32x2::from([other.group4()[2], other.group7()[2]]))
                - (Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group5()[0], other.group6()[0]]))
                - (Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group5()[1], other.group6()[1]]))
                - (Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group5()[2], other.group6()[2]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other[e1]) - (self.group0()[1] * other.group8()[2]) + (self.group0()[2] * other.group8()[1]) + (self.group2()[1] * other.group7()[2])
                    - (self.group2()[2] * other.group7()[1])
                    + (self.group1()[0] * other.group6()[3])),
                ((self.group0()[0] * other.group8()[2]) + (self.group0()[1] * other[e1]) - (self.group0()[2] * other.group8()[0]) - (self.group2()[0] * other.group7()[2])
                    + (self.group2()[2] * other.group7()[0])
                    + (self.group1()[1] * other.group6()[3])),
                (-(self.group0()[0] * other.group8()[1]) + (self.group0()[1] * other.group8()[0]) + (self.group0()[2] * other[e1]) + (self.group2()[0] * other.group7()[1])
                    - (self.group2()[1] * other.group7()[0])
                    + (self.group1()[2] * other.group6()[3])),
                ((self.group0()[1] * other.group1()[1]) - (self.group0()[1] * other.group6()[1]) + (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group6()[2])
                    - (other.group7()[1] * self.group1()[1])
                    - (other.group7()[2] * self.group1()[2])),
            ]) - (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[0]]) * swizzle!(other.group6(), 0, 1, 2, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group7()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e5
            (-(self.group2()[0] * other.group1()[0])
                - (self.group2()[0] * other.group6()[0])
                - (self.group2()[1] * other.group1()[1])
                - (self.group2()[1] * other.group6()[1])
                - (self.group2()[2] * other.group1()[2])
                - (self.group2()[2] * other.group6()[2])
                - (other.group8()[0] * self.group1()[0])
                - (other.group8()[1] * self.group1()[1])
                - (other.group8()[2] * self.group1()[2])
                + (self.group1()[3] * other[e1])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group2()[1] * other.group9()[2]) + (self.group2()[2] * other.group5()[1]) + (self.group1()[0] * other.group9()[3])),
                ((self.group2()[0] * other.group5()[2]) + (self.group2()[2] * other.group9()[0]) + (self.group1()[1] * other.group9()[3])),
                ((self.group2()[0] * other.group9()[1]) + (self.group2()[1] * other.group5()[0]) + (self.group1()[2] * other.group9()[3])),
                ((self.group0()[2] * other.group3()[2]) - (self.group1()[1] * other.group9()[1]) - (self.group1()[2] * other.group9()[2])),
            ]) + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                - (Simd32x4::from(self.group2()[0]) * Simd32x4::from([other.group3()[3], other.group9()[2], other.group5()[1], other.group4()[0]]))
                - (Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group5()[2], other.group3()[3], other.group9()[0], other.group4()[1]]))
                - (Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group9()[1], other.group5()[0], other.group3()[3], other.group4()[2]]))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[1]]) * swizzle!(other.group3(), 0, 1, 2, 1))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group9()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e41, e42, e43
            ((Simd32x3::from(other.group0()[0]) * self.group0())
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from([other.group5()[1], other.group9()[2], other.group9()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                - (Simd32x3::from([self.group1()[1], self.group1()[3], self.group1()[3]]) * swizzle!(other.group4(), 2, 1, 2))
                + (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]) * swizzle!(other.group4(), 1, 2, 0))
                - (Simd32x3::from([self.group1()[3], self.group1()[2], self.group1()[0]]) * swizzle!(other.group4(), 0, 0, 1))
                + (Simd32x3::from([other.group3()[3], other.group5()[2], other.group5()[0]]) * swizzle!(self.group0(), 0, 0, 1))
                + (Simd32x3::from([other.group9()[1], other.group3()[3], other.group3()[3]]) * swizzle!(self.group0(), 2, 1, 2))
                - (Simd32x3::from([other.group9()[2], other.group9()[0], other.group9()[1]]) * swizzle!(self.group0(), 1, 2, 0))
                - (swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group5(), 2, 0, 1))),
            // e23, e31, e12
            ((Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                + (Simd32x3::from([other.group4()[1], other[e45], other[e45]]) * swizzle!(self.group2(), 2, 1, 2))
                - (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group5(), 2, 0, 1))
                + (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]) * swizzle!(other.group5(), 1, 2, 0))
                + (Simd32x3::from([other.group3()[1], other.group9()[3], other.group9()[3]]) * swizzle!(self.group0(), 2, 1, 2))
                - (Simd32x3::from([other.group3()[2], other.group3()[0], other.group3()[1]]) * swizzle!(self.group0(), 1, 2, 0))
                + (Simd32x3::from([other.group9()[3], other.group3()[2], other.group3()[0]]) * swizzle!(self.group0(), 0, 0, 1))
                + (Simd32x3::from([other[e45], other.group4()[2], other.group4()[0]]) * swizzle!(self.group2(), 0, 0, 1))
                - (swizzle!(self.group2(), 1, 2, 0) * swizzle!(other.group4(), 2, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[0]) + (self.group0()[0] * other[e1]) - (self.group0()[1] * other.group8()[2])
                    + (self.group0()[2] * other.group8()[1])
                    + (self.group2()[0] * other.group1()[3])
                    - (self.group2()[1] * other.group7()[2])
                    + (self.group2()[2] * other.group7()[1])
                    + (self.group1()[2] * other.group6()[1])),
                ((other.group0()[1] * self.group1()[1]) + (self.group0()[0] * other.group8()[2]) + (self.group0()[1] * other[e1]) - (self.group0()[2] * other.group8()[0])
                    + (self.group2()[0] * other.group7()[2])
                    + (self.group2()[1] * other.group1()[3])
                    - (self.group2()[2] * other.group7()[0])
                    + (self.group1()[0] * other.group6()[2])),
                ((other.group0()[1] * self.group1()[2]) - (self.group0()[0] * other.group8()[1]) + (self.group0()[1] * other.group8()[0]) + (self.group0()[2] * other[e1])
                    - (self.group2()[0] * other.group7()[1])
                    + (self.group2()[1] * other.group7()[0])
                    + (self.group2()[2] * other.group1()[3])
                    + (self.group1()[1] * other.group6()[0])),
                (-(self.group0()[0] * other.group8()[0]) - (self.group0()[1] * other.group8()[1]) - (self.group0()[2] * other.group8()[2])
                    + (self.group2()[0] * other.group7()[0])
                    + (self.group2()[1] * other.group7()[1])
                    + (self.group2()[2] * other.group7()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group0()[1]]) * swizzle!(self.group1(), 1, 2, 0, 3))
                - (swizzle!(self.group1(), 3, 3, 3, 0) * swizzle!(other.group1(), 0, 1, 2, 0))),
            // e423, e431, e412
            ((Simd32x3::from(other.group0()[1]) * self.group0())
                - (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group6()[3], other.group1()[2], other.group6()[1]]))
                - (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group6()[2], other.group6()[3], other.group1()[0]]))
                - (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], other.group6()[0], other.group6()[3]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from([self.group1()[1], self.group1()[3], self.group1()[3]]) * swizzle!(other.group7(), 2, 1, 2))
                + (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]) * swizzle!(other.group7(), 1, 2, 0))
                - (Simd32x3::from([self.group1()[3], self.group1()[2], self.group1()[0]]) * swizzle!(other.group7(), 0, 0, 1))
                + (Simd32x3::from([other.group1()[2], other.group6()[2], other.group1()[1]]) * swizzle!(self.group0(), 1, 0, 0))
                + (Simd32x3::from([other.group6()[1], other.group1()[0], other.group6()[0]]) * swizzle!(self.group0(), 2, 2, 1))),
            // e235, e315, e125
            ((Simd32x3::from(other.group0()[1]) * self.group2()) + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group8(), 2, 0, 1))
                + (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[3]]) * swizzle!(other.group8(), 1, 2, 2))
                + (Simd32x3::from([self.group1()[3], self.group1()[3], self.group1()[1]]) * swizzle!(other.group8(), 0, 1, 0))
                + (Simd32x3::from([other.group1()[1], other.group6()[2], other.group6()[0]]) * swizzle!(self.group2(), 2, 0, 1))
                - (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]) * swizzle!(self.group2(), 1, 2, 0))
                + (Simd32x3::from([other.group6()[1], other.group6()[3], other.group6()[3]]) * swizzle!(self.group2(), 2, 1, 2))
                - (Simd32x3::from([other.group6()[2], other.group6()[0], other.group6()[1]]) * swizzle!(self.group2(), 1, 2, 0))
                + (Simd32x3::from([other.group6()[3], other.group1()[2], other.group1()[0]]) * swizzle!(self.group2(), 0, 0, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[0] * other.group9()[3]) + (self.group0()[1] * other.group3()[2]) + (self.group2()[0] * other[e45]) - (self.group2()[1] * other.group4()[2])
                    + (self.group2()[2] * other.group4()[1])
                    + (self.group1()[0] * other.group3()[3])),
                (-(self.group0()[1] * other.group9()[3]) + (self.group0()[2] * other.group3()[0]) + (self.group2()[0] * other.group4()[2]) + (self.group2()[1] * other[e45])
                    - (self.group2()[2] * other.group4()[0])
                    + (self.group1()[1] * other.group3()[3])),
                ((self.group0()[0] * other.group3()[1]) - (self.group0()[2] * other.group9()[3]) - (self.group2()[0] * other.group4()[1])
                    + (self.group2()[1] * other.group4()[0])
                    + (self.group2()[2] * other[e45])
                    + (self.group1()[2] * other.group3()[3])),
                (-(self.group2()[0] * other.group5()[0]) - (self.group2()[1] * other.group5()[1]) + (self.group2()[1] * other.group9()[1])
                    - (self.group2()[2] * other.group5()[2])
                    + (self.group2()[2] * other.group9()[2])
                    - (self.group1()[2] * other.group3()[2])),
            ]) + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group9()[3]]))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group9(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group9()[2], other.group9()[0], other.group9()[1], other.group3()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))),
            // e1234
            (-(self.group0()[0] * other.group5()[0])
                - (self.group0()[0] * other.group9()[0])
                - (self.group0()[1] * other.group5()[1])
                - (self.group0()[1] * other.group9()[1])
                - (self.group0()[2] * other.group5()[2])
                - (self.group0()[2] * other.group9()[2])
                - (other.group4()[0] * self.group1()[0])
                - (other.group4()[1] * self.group1()[1])
                - (other.group4()[2] * self.group1()[2])
                - (self.group1()[3] * other[e45])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       88      116        0
    //    simd3        1        4        0
    //    simd4       17       18        0
    // Totals...
    // yes simd      106      138        0
    //  no simd      159      200        0
    fn sandwich(self, other: Plane) -> Self::Output {
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[3] * other.group0()[2])),
                (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group2()[1] * other.group0()[2]) + (self.group1()[0] * other.group0()[3])),
                ((self.group2()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])),
                ((self.group2()[0] * other.group0()[1]) + (self.group1()[2] * other.group0()[3])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group1()[1] * other.group0()[2])),
                (-(self.group0()[1] * other.group0()[3]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[2] * other.group0()[3]) - (self.group1()[0] * other.group0()[1])),
                ((self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2]) + (self.group1()[3] * other.group0()[3])),
            ]) + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       71      100        0
    //    simd3        2        5        0
    //    simd4       23       24        0
    // Totals...
    // yes simd       96      129        0
    //  no simd      169      211        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            ((Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[0] * other[e2]) + (self.group2()[0] * other.group0()[3])),
                ((self.group0()[1] * other[e2]) + (self.group2()[1] * other.group0()[3])),
                ((self.group0()[2] * other[e2]) + (self.group2()[2] * other.group0()[3])),
                (-(self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]) - (swizzle!(self.group1(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))),
            // e235, e315, e125, e4
            (Simd32x4::from([
                (self.group1()[0] * other[e2]),
                (self.group1()[1] * other[e2]),
                (self.group1()[2] * other[e2]),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group1()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                (self.group1()[2] * other.group0()[1]),
                (self.group1()[0] * other.group0()[2]),
                (self.group1()[1] * other.group0()[0]),
                ((self.group2()[2] * other.group0()[2]) * -1.0),
            ]) + (Simd32x4::from(other[e2]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group2()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[1]]) * swizzle!(other.group0(), 2, 0, 1, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       72        0
    //    simd3        0        4        0
    //    simd4        7        9        0
    // Totals...
    // yes simd       63       85        0
    //  no simd       84      120        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Dipole::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other[scalar]) * self.group0()),
            // e23, e31, e12, e45
            (Simd32x4::from(other[scalar]) * self.group1()),
            // e15, e25, e35
            (Simd32x3::from(other[scalar]) * self.group2()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       95      123        0
    //    simd3        2        5        0
    //    simd4       17       18        0
    // Totals...
    // yes simd      114      146        0
    //  no simd      169      210        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from(other[e4315]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group2()[0] * other[e4315]) + (self.group1()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group2()[1] * other[e4315]) + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group2()[2] * other[e4315]) + (self.group1()[3] * other.group0()[2])),
                (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group2()[1] * other.group0()[2]) + (self.group1()[0] * other.group0()[3])),
                ((self.group2()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])),
                ((self.group2()[0] * other.group0()[1]) + (self.group1()[2] * other.group0()[3])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other[e4315])),
            ]) - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) + (self.group2()[0] * other[e4315]) - (self.group1()[1] * other.group0()[2])),
                (-(self.group0()[1] * other.group0()[3]) + (self.group2()[1] * other[e4315]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[2] * other.group0()[3]) + (self.group2()[2] * other[e4315]) - (self.group1()[0] * other.group0()[1])),
                ((self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2]) + (self.group1()[3] * other.group0()[3])),
            ]) + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      132      164        0
    //    simd3        0        2        0
    //    simd4       39       40        0
    // Totals...
    // yes simd      171      206        0
    //  no simd      288      330        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3])
                    + (self.group0()[1] * other.group3()[2])
                    + (self.group0()[2] * other.group1()[1])
                    + (self.group1()[0] * other.group3()[3])
                    + (self.group1()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group0()[3])
                    + (self.group0()[2] * other.group3()[0])
                    + (self.group1()[0] * other.group0()[2])
                    + (self.group1()[1] * other.group3()[3])),
                ((self.group0()[0] * other.group3()[1])
                    + (self.group0()[1] * other.group1()[0])
                    + (self.group0()[2] * other.group0()[3])
                    + (self.group1()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group3()[3])),
                (-(self.group2()[2] * other.group0()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]) - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group2()[0]]))
                - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group2()[1]]))
                - (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group2()[2]]))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[2] * other.group2()[1]) + (self.group2()[0] * other.group3()[3]) + (self.group1()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group2()[3]) + (self.group2()[1] * other.group3()[3]) + (self.group1()[0] * other.group1()[2])),
                ((self.group0()[1] * other.group2()[0]) + (self.group0()[2] * other.group2()[3]) + (self.group2()[2] * other.group3()[3]) + (self.group1()[1] * other.group1()[0])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2]) + (self.group2()[2] * other.group0()[2])
                    - (self.group1()[2] * other.group3()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group1()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group3()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group3(), 0, 1, 2, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group2()[0] * other.group0()[3])
                    + (self.group2()[0] * other.group1()[3])
                    + (self.group2()[2] * other.group1()[1])
                    + (self.group2()[2] * other.group3()[1])
                    + (self.group1()[2] * other.group2()[1])
                    + (self.group1()[3] * other.group2()[0])),
                ((self.group2()[0] * other.group1()[2])
                    + (self.group2()[0] * other.group3()[2])
                    + (self.group2()[1] * other.group0()[3])
                    + (self.group2()[1] * other.group1()[3])
                    + (self.group1()[1] * other.group2()[3])
                    + (self.group1()[3] * other.group2()[1])),
                ((self.group2()[1] * other.group1()[0])
                    + (self.group2()[1] * other.group3()[0])
                    + (self.group2()[2] * other.group0()[3])
                    + (self.group2()[2] * other.group1()[3])
                    + (self.group1()[2] * other.group2()[3])
                    + (self.group1()[3] * other.group2()[2])),
                (-(self.group2()[1] * other.group1()[1])
                    - (self.group2()[1] * other.group3()[1])
                    - (self.group2()[2] * other.group1()[2])
                    - (self.group2()[2] * other.group3()[2])
                    - (self.group1()[1] * other.group2()[1])
                    - (self.group1()[2] * other.group2()[2])),
            ]) - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group2()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group2()[0]]) * swizzle!(other.group3(), 2, 0, 1, 0))
                + (swizzle!(self.group1(), 0, 0, 1, 3) * swizzle!(other.group2(), 3, 2, 0, 3))
                - (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group2(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[1])
                    + (self.group2()[1] * other.group0()[2])
                    + (self.group1()[0] * other.group1()[3])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group2()[3]) - (self.group0()[2] * other.group2()[0])
                    + (self.group2()[2] * other.group0()[0])
                    + (self.group1()[1] * other.group1()[3])),
                (-(self.group0()[0] * other.group2()[1])
                    + (self.group0()[1] * other.group2()[0])
                    + (self.group0()[2] * other.group2()[3])
                    + (self.group2()[0] * other.group0()[1])
                    + (self.group1()[2] * other.group1()[3])),
                (-(self.group0()[1] * other.group1()[1]) + (self.group0()[1] * other.group3()[1]) - (self.group0()[2] * other.group1()[2])
                    + (self.group0()[2] * other.group3()[2])
                    - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group0()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      156      188        0
    //    simd3        0        2        0
    //    simd4       33       34        0
    // Totals...
    // yes simd      189      224        0
    //  no simd      288      330        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group3()[2])
                    + (self.group0()[2] * other.group1()[1])
                    + (self.group0()[2] * other.group3()[1])
                    + (self.group1()[0] * other.group2()[3])
                    + (self.group1()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group0()[3]) + (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group3()[0])
                    + (self.group1()[0] * other.group0()[2])
                    + (self.group1()[1] * other.group2()[3])),
                (-(self.group0()[0] * other.group3()[1])
                    + (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group0()[3])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group1()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group2()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group2()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group1()[3]]) * swizzle!(other.group1(), 3, 2, 0, 3))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) - (self.group0()[1] * other.group2()[2])
                    + (self.group1()[0] * other.group0()[3])
                    + (self.group1()[2] * other.group1()[1])
                    + (self.group1()[3] * other.group3()[0])),
                ((self.group0()[1] * other.group3()[3]) - (self.group0()[2] * other.group2()[0])
                    + (self.group1()[0] * other.group1()[2])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group1()[3] * other.group3()[1])),
                (-(self.group0()[0] * other.group2()[1])
                    + (self.group0()[2] * other.group3()[3])
                    + (self.group1()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group0()[3])
                    + (self.group1()[3] * other.group3()[2])),
                ((self.group0()[2] * other.group2()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group3()[1])
                    - (self.group1()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group2()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group3()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group2()[0] * other.group0()[3])
                    + (self.group2()[1] * other.group3()[2])
                    + (self.group2()[2] * other.group1()[1])
                    + (self.group1()[0] * other.group3()[3])
                    + (self.group1()[2] * other.group2()[1])
                    + (self.group1()[3] * other.group2()[0])),
                ((self.group2()[0] * other.group1()[2])
                    + (self.group2()[1] * other.group0()[3])
                    + (self.group2()[2] * other.group3()[0])
                    + (self.group1()[0] * other.group2()[2])
                    + (self.group1()[1] * other.group3()[3])
                    + (self.group1()[3] * other.group2()[1])),
                ((self.group2()[0] * other.group3()[1])
                    + (self.group2()[1] * other.group1()[0])
                    + (self.group2()[2] * other.group0()[3])
                    + (self.group1()[1] * other.group2()[0])
                    + (self.group1()[2] * other.group3()[3])
                    + (self.group1()[3] * other.group2()[2])),
                (-(self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group2()[3])),
            ]) - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[2], self.group0()[1]]) * swizzle!(other.group1(), 2, 0, 3, 1))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[2]) + (self.group2()[0] * other.group2()[3])
                    - (self.group2()[1] * other.group0()[2])
                    + (self.group2()[2] * other.group0()[1])
                    + (self.group1()[2] * other.group3()[1])
                    + (self.group1()[3] * other.group1()[0])),
                (-(self.group0()[1] * other.group3()[3])
                    + (self.group0()[2] * other.group2()[0])
                    + (self.group2()[0] * other.group0()[2])
                    + (self.group2()[1] * other.group2()[3])
                    - (self.group2()[2] * other.group0()[0])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[2] * other.group3()[3]) - (self.group2()[0] * other.group0()[1])
                    + (self.group2()[1] * other.group0()[0])
                    + (self.group2()[2] * other.group2()[3])
                    + (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])),
                (-(self.group2()[0] * other.group1()[0]) + (self.group2()[0] * other.group3()[0]) - (self.group2()[1] * other.group1()[1])
                    + (self.group2()[1] * other.group3()[1])
                    - (self.group2()[2] * other.group1()[2])
                    + (self.group2()[2] * other.group3()[2])
                    - (self.group1()[2] * other.group2()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group3()[3]]) * swizzle!(self.group1(), 0, 0, 1, 3))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl InfixSandwich for DipoleInversion {}
impl Sandwich<AntiCircleRotor> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      137      172        0
    //    simd3        0        1        0
    //    simd4       59       60        0
    // Totals...
    // yes simd      196      233        0
    //  no simd      373      415        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[2] * self.group3()[1])
                    + (self.group0()[0] * other.group1()[3])
                    + (self.group0()[0] * other.group2()[3])
                    + (self.group0()[2] * other.group1()[1])
                    + (other.group1()[0] * self.group2()[3])),
                ((other.group0()[0] * self.group3()[2])
                    + (self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[1] * other.group2()[3])
                    + (other.group1()[1] * self.group2()[3])),
                ((other.group0()[1] * self.group3()[0])
                    + (self.group0()[1] * other.group1()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group0()[2] * other.group2()[3])
                    + (other.group1()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group1()[2], self.group3()[1], self.group2()[0]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group3()[2], self.group1()[3], self.group1()[0], self.group2()[1]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group1()[1], self.group3()[0], self.group1()[3], self.group2()[2]]))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group2()[2]) - (self.group0()[1] * other.group2()[2]) + (other.group1()[3] * self.group3()[0])),
                ((other.group0()[1] * self.group3()[3]) + (other.group0()[2] * self.group2()[0]) - (self.group0()[2] * other.group2()[0]) + (other.group1()[3] * self.group3()[1])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[2] * self.group3()[3]) - (self.group0()[0] * other.group2()[1]) + (other.group1()[3] * self.group3()[2])),
                (-(other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group3()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[2]]) * swizzle!(other.group2(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[1]]) * swizzle!(other.group2(), 0, 1, 2, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group2()[0] * self.group1()[3]) + (other.group2()[1] * self.group1()[2]) - (other.group2()[2] * self.group3()[1]) + (other.group2()[3] * self.group2()[0])),
                (-(other.group2()[0] * self.group3()[2])
                    + (other.group2()[1] * self.group1()[3])
                    + (other.group2()[2] * self.group1()[0])
                    + (other.group2()[3] * self.group2()[1])),
                ((other.group2()[0] * self.group1()[1]) + (other.group2()[0] * self.group3()[1]) - (other.group2()[1] * self.group3()[0]) + (other.group2()[2] * self.group1()[3])),
                (-(other.group0()[1] * self.group1()[1]) + (other.group0()[1] * self.group3()[1]) - (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])
                    - (self.group0()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group2()[3], other.group2()[3]]) * swizzle!(self.group2(), 2, 0, 2, 3))
                + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group1()[2], other.group0()[0]]) * swizzle!(self.group3(), 2, 0, 3, 0))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group2()[1], self.group2()[3]]) * swizzle!(other.group1(), 0, 1, 0, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2])
                    + (self.group0()[1] * other.group2()[2])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[1] * self.group3()[2])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group2()[3] * self.group3()[0])),
                ((other.group0()[2] * self.group2()[0])
                    + (self.group0()[2] * other.group2()[0])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[2] * self.group3()[0])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group2()[3] * self.group3()[1])),
                ((other.group0()[0] * self.group2()[1])
                    + (self.group0()[0] * other.group2()[1])
                    + (other.group1()[0] * self.group3()[1])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])
                    + (other.group2()[3] * self.group3()[2])),
                (-(other.group1()[3] * self.group3()[3])
                    - (other.group2()[0] * self.group3()[0])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[1] * self.group3()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[2])),
            ]) + (Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[2]]) * swizzle!(self.group2(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      125      156        0
    //    simd3        0        1        0
    //    simd4       77       79        0
    // Totals...
    // yes simd      202      236        0
    //  no simd      433      475        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) + (self.group0()[2] * other.group1()[1]) + (other.group2()[3] * self.group1()[0])
                    - (other.group2()[3] * self.group3()[0])
                    - (other.group3()[0] * self.group2()[3])),
                ((other.group0()[2] * self.group1()[0]) + (self.group0()[0] * other.group1()[2]) + (other.group2()[3] * self.group1()[1])
                    - (other.group2()[3] * self.group3()[1])
                    - (other.group3()[1] * self.group2()[3])),
                ((other.group0()[0] * self.group1()[1]) + (self.group0()[1] * other.group1()[0]) + (other.group2()[3] * self.group1()[2])
                    - (other.group2()[3] * self.group3()[2])
                    - (other.group3()[2] * self.group2()[3])),
                (-(other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])
                    + (other.group3()[1] * self.group3()[1])
                    + (other.group3()[2] * self.group3()[2])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group1()[2], self.group3()[1], self.group2()[0]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group3()[2], self.group1()[3], self.group1()[0], self.group2()[1]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group1()[1], self.group3()[0], self.group1()[3], self.group2()[2]]))
                - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group2()[0]]))
                - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group2()[1]]))
                - (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group2()[2]]))
                + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group3(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group3(), 2, 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[2] * self.group2()[1]) + (self.group0()[2] * other.group2()[1])),
                (-(other.group0()[0] * self.group2()[2]) + (self.group0()[0] * other.group2()[2])),
                (-(other.group0()[1] * self.group2()[0]) + (self.group0()[1] * other.group2()[0])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])),
            ]) + (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group3()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[3]]) * self.group3())
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[2]]) * swizzle!(self.group2(), 0, 1, 2, 2))
                + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[2]]) * swizzle!(self.group3(), 1, 2, 0, 2))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group1()[1]]) * swizzle!(other.group3(), 0, 1, 0, 1))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group1()[3], self.group1()[2]]) * swizzle!(other.group3(), 1, 2, 2, 2))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group1()[1] * self.group2()[2])
                    + (other.group1()[3] * self.group2()[0])
                    + (other.group2()[1] * self.group1()[2])
                    + (other.group2()[1] * self.group3()[2])
                    + (other.group3()[0] * self.group3()[3])
                    + (other.group3()[1] * self.group2()[2])
                    + (other.group3()[3] * self.group1()[0])
                    + (other.group3()[3] * self.group3()[0])),
                ((other.group1()[2] * self.group2()[0])
                    + (other.group1()[3] * self.group2()[1])
                    + (other.group2()[2] * self.group1()[0])
                    + (other.group2()[2] * self.group3()[0])
                    + (other.group3()[1] * self.group3()[3])
                    + (other.group3()[2] * self.group2()[0])
                    + (other.group3()[3] * self.group1()[1])
                    + (other.group3()[3] * self.group3()[1])),
                ((other.group1()[2] * self.group3()[3])
                    + (other.group1()[3] * self.group2()[2])
                    + (other.group2()[0] * self.group3()[1])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group3()[0] * self.group2()[1])
                    + (other.group3()[2] * self.group3()[3])
                    + (other.group3()[3] * self.group1()[2])
                    + (other.group3()[3] * self.group3()[2])),
                (-(other.group1()[2] * self.group2()[2])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[1] * self.group3()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[2])
                    - (other.group3()[0] * self.group2()[0])
                    - (other.group3()[1] * self.group2()[1])
                    - (other.group3()[2] * self.group2()[2])),
            ]) + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[0], other.group3()[3]]) * swizzle!(self.group1(), 3, 3, 1, 3))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[1]]) * swizzle!(self.group2(), 1, 2, 0, 1))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group2()[1], self.group3()[3]]) * swizzle!(other.group1(), 0, 1, 0, 3))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (swizzle!(other.group2(), 2, 0, 1, 0) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (swizzle!(other.group2(), 2, 0, 1, 0) * swizzle!(self.group3(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3])
                    + (other.group0()[2] * self.group2()[1])
                    + (self.group0()[2] * other.group2()[1])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group2()[0] * self.group2()[3])
                    - (other.group2()[3] * self.group2()[0])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group3()[3])
                    + (self.group0()[0] * other.group2()[2])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group2()[1] * self.group2()[3])
                    - (other.group2()[3] * self.group2()[1])),
                ((other.group0()[1] * self.group2()[0]) - (other.group0()[2] * self.group3()[3])
                    + (self.group0()[1] * other.group2()[0])
                    + (other.group1()[3] * self.group1()[2])
                    + (other.group2()[2] * self.group2()[3])
                    - (other.group2()[3] * self.group2()[2])),
                (-(other.group0()[1] * self.group1()[1]) + (other.group0()[1] * self.group3()[1]) - (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])
                    - (self.group0()[2] * other.group1()[2])
                    + (self.group0()[2] * other.group3()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[3]]) * swizzle!(other.group2(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[1]]) * swizzle!(other.group3(), 1, 2, 0, 1))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group0()[0]]) * swizzle!(other.group1(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group1()[3], self.group0()[1]]) * swizzle!(other.group1(), 1, 2, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       86      117        0
    //    simd3        0        1        0
    //    simd4       38       40        0
    // Totals...
    // yes simd      124      158        0
    //  no simd      238      280        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) - (other.group0()[0] * self.group3()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[0] * self.group3()[3]),
            ]),
            // e23, e31, e12, e45
            ((Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))
                + (Simd32x4::from(other.group0()[1]) * self.group1())),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group2()[0]),
                (other.group0()[1] * self.group2()[1]),
                (other.group0()[1] * self.group2()[2]),
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group2()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group3()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group3()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group3()[2])),
                (other.group0()[1] * self.group3()[3]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       80      116        0
    //    simd3        0        1        0
    //    simd4       47       49        0
    // Totals...
    // yes simd      127      166        0
    //  no simd      268      315        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (other.group0()[3] * self.group1()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group0()[1]) + (other.group0()[0] * self.group2()[3])),
                ((self.group0()[0] * other.group0()[2]) + (other.group0()[1] * self.group2()[3])),
                ((self.group0()[1] * other.group0()[0]) + (other.group0()[2] * self.group2()[3])),
                ((self.group0()[2] * other.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) + (other.group0()[1] * self.group3()[2]) + (other.group0()[3] * self.group2()[0])),
                ((other.group0()[2] * self.group1()[0]) + (other.group0()[2] * self.group3()[0]) + (other.group0()[3] * self.group2()[1])),
                ((other.group0()[0] * self.group3()[1]) + (other.group0()[2] * self.group1()[3]) + (other.group0()[3] * self.group2()[2])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group3()[2])),
            ]) + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[1], self.group3()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group3(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2])
                    + (self.group0()[2] * other.group0()[1])
                    + (other.group0()[0] * self.group2()[3])
                    + (other.group0()[3] * self.group1()[0])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0]) + (other.group0()[1] * self.group2()[3]) + (other.group0()[3] * self.group1()[1])),
                (-(self.group0()[0] * other.group0()[1])
                    + (self.group0()[1] * other.group0()[0])
                    + (other.group0()[2] * self.group2()[3])
                    + (other.group0()[3] * self.group1()[2])),
                (other.group0()[3] * self.group2()[3] * -1.0),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      100      131        0
    //    simd3        0        1        0
    //    simd4       57       59        0
    // Totals...
    // yes simd      157      191        0
    //  no simd      328      370        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(self.group0()[2] * other.group1()[1]) - (other.group1()[0] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[2]) - (other.group1()[1] * self.group2()[3])),
                (-(self.group0()[1] * other.group1()[0]) - (other.group1()[2] * self.group2()[3])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]) - (other.group0()[3] * self.group1()[3])
                    + (other.group1()[1] * self.group3()[1])
                    + (other.group1()[2] * self.group3()[2])
                    + (other.group1()[3] * self.group2()[3])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group0()[1]) + (other.group0()[0] * self.group2()[3]) + (other.group1()[2] * self.group3()[1])),
                ((self.group0()[0] * other.group0()[2]) + (other.group0()[1] * self.group2()[3]) + (other.group1()[0] * self.group3()[2])),
                ((self.group0()[1] * other.group0()[0]) + (other.group0()[2] * self.group2()[3]) + (other.group1()[1] * self.group3()[0])),
                (-(self.group0()[2] * other.group0()[2]) - (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group1()[0]]) * swizzle!(other.group1(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group1()[3], self.group1()[1]]) * swizzle!(other.group1(), 1, 2, 2, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[1] * self.group3()[2])
                    + (other.group0()[3] * self.group2()[0])
                    + (other.group1()[0] * self.group3()[3])
                    + (other.group1()[1] * self.group2()[2])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group1()[3] * self.group3()[0])),
                ((other.group0()[2] * self.group3()[0])
                    + (other.group0()[3] * self.group2()[1])
                    + (other.group1()[1] * self.group3()[3])
                    + (other.group1()[2] * self.group2()[0])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group1()[3] * self.group3()[1])),
                ((other.group0()[0] * self.group3()[1])
                    + (other.group0()[3] * self.group2()[2])
                    + (other.group1()[0] * self.group2()[1])
                    + (other.group1()[2] * self.group3()[3])
                    + (other.group1()[3] * self.group1()[2])
                    + (other.group1()[3] * self.group3()[2])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group3()[2])
                    - (other.group1()[1] * self.group2()[1])
                    - (other.group1()[2] * self.group2()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[2], other.group1()[3]]) * swizzle!(self.group1(), 2, 0, 3, 3))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[1], self.group3()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group2(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[2] * other.group0()[1]) + (other.group0()[0] * self.group2()[3]) + (other.group0()[3] * self.group1()[0]) - (other.group1()[2] * self.group1()[1])),
                ((self.group0()[0] * other.group0()[2]) + (other.group0()[1] * self.group2()[3]) + (other.group0()[3] * self.group1()[1]) - (other.group1()[0] * self.group1()[2])),
                ((self.group0()[1] * other.group0()[0]) + (other.group0()[2] * self.group2()[3]) + (other.group0()[3] * self.group1()[2]) - (other.group1()[1] * self.group1()[0])),
                (self.group0()[2] * other.group1()[2]),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group2()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      142      177        0
    //    simd3        0        1        0
    //    simd4       39       40        0
    // Totals...
    // yes simd      181      218        0
    //  no simd      298      340        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[3]) + (other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group2()[3]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group2()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1]) + (other.group1()[0] * self.group2()[3]) + (other.group1()[1] * self.group0()[2])
                    - (other.group1()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group1()[0]) - (other.group1()[0] * self.group0()[2])
                    + (other.group1()[1] * self.group2()[3])
                    + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) + (other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group2()[3])),
                (-(other.group0()[0] * self.group3()[0]) - (other.group0()[1] * self.group3()[1]) - (other.group0()[2] * self.group3()[2])
                    + (other.group1()[0] * self.group0()[0])
                    + (other.group1()[1] * self.group0()[1])
                    + (other.group1()[2] * self.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[1] * self.group1()[2])
                    + (other.group1()[1] * self.group3()[2])
                    - (other.group1()[2] * self.group1()[1])
                    - (other.group1()[2] * self.group3()[1])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group3()[3]) + (other.group0()[2] * self.group2()[0])
                    - (other.group1()[0] * self.group1()[2])
                    - (other.group1()[0] * self.group3()[2])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[2] * self.group1()[0])
                    + (other.group1()[2] * self.group3()[0])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0])
                    + (other.group0()[2] * self.group3()[3])
                    + (other.group1()[0] * self.group1()[1])
                    + (other.group1()[0] * self.group3()[1])
                    - (other.group1()[1] * self.group1()[0])
                    - (other.group1()[1] * self.group3()[0])
                    + (other.group1()[2] * self.group1()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group3()[2]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[1] * self.group1()[3]) + (other.group0()[2] * self.group3()[0]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group3()[1]) + (other.group0()[2] * self.group1()[3]) - (other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0])),
                (-(other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[2] * self.group3()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[0]]) * swizzle!(self.group2(), 3, 3, 3, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      116      151        0
    //    simd3        0        1        0
    //    simd4       53       54        0
    // Totals...
    // yes simd      169      206        0
    //  no simd      328      370        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[3])),
                ((self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]) + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (other.group0()[3] * self.group1()[0]),
                (other.group0()[3] * self.group1()[1]),
                (other.group0()[3] * self.group1()[2]),
                (-(other.group0()[1] * self.group3()[1]) - (other.group0()[2] * self.group3()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group2()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[2], self.group0()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[2]]) * swizzle!(other.group1(), 0, 1, 2, 2))
                + (swizzle!(other.group0(), 1, 2, 0, 3) * swizzle!(self.group1(), 2, 0, 1, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2])
                    + (other.group0()[3] * self.group2()[0])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[1] * self.group1()[2])
                    + (other.group1()[1] * self.group3()[2])
                    - (other.group1()[2] * self.group1()[1])
                    - (other.group1()[2] * self.group3()[1])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group1()[3] * self.group3()[0])),
                ((other.group0()[2] * self.group2()[0]) + (other.group0()[3] * self.group2()[1]) - (other.group1()[0] * self.group1()[2]) - (other.group1()[0] * self.group3()[2])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[2] * self.group1()[0])
                    + (other.group1()[2] * self.group3()[0])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group1()[3] * self.group3()[1])),
                ((other.group0()[2] * self.group3()[3]) + (other.group0()[3] * self.group2()[2]) + (other.group1()[0] * self.group1()[1]) + (other.group1()[0] * self.group3()[1])
                    - (other.group1()[1] * self.group1()[0])
                    - (other.group1()[1] * self.group3()[0])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])
                    + (other.group1()[3] * self.group3()[2])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group2()[1], self.group2()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group3()[2]) + (other.group0()[3] * self.group3()[0])),
                ((other.group0()[2] * self.group3()[0]) + (other.group0()[3] * self.group3()[1])),
                ((other.group0()[2] * self.group1()[3]) + (other.group0()[3] * self.group3()[2])),
                (-(other.group0()[2] * self.group2()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[2] * self.group3()[2])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[2], self.group3()[0]]) * swizzle!(other.group1(), 1, 3, 3, 0))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group3()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       68      103        0
    //    simd3        0        1        0
    //    simd4       50       52        0
    // Totals...
    // yes simd      118      156        0
    //  no simd      268      314        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(self.group0()[2] * other.group0()[1]) - (other.group0()[0] * self.group2()[3])),
                (-(self.group0()[0] * other.group0()[2]) - (other.group0()[1] * self.group2()[3])),
                (-(self.group0()[1] * other.group0()[0]) - (other.group0()[2] * self.group2()[3])),
                ((other.group0()[1] * self.group3()[1]) + (other.group0()[2] * self.group3()[2]) + (other.group0()[3] * self.group2()[3])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (other.group0()[2] * self.group3()[1]),
                (other.group0()[0] * self.group3()[2]),
                (other.group0()[1] * self.group3()[0]),
                ((other.group0()[2] * self.group1()[2]) * -1.0),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group1()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group1()[3], self.group1()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) + (other.group0()[3] * self.group1()[0]) + (other.group0()[3] * self.group3()[0])),
                ((other.group0()[2] * self.group2()[0]) + (other.group0()[3] * self.group1()[1]) + (other.group0()[3] * self.group3()[1])),
                ((other.group0()[2] * self.group3()[3]) + (other.group0()[3] * self.group1()[2]) + (other.group0()[3] * self.group3()[2])),
                (-(other.group0()[1] * self.group2()[1]) - (other.group0()[2] * self.group2()[2])),
            ]) + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group2()[1], self.group1()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group2(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[2] * self.group1()[1]) * -1.0),
                ((other.group0()[0] * self.group1()[2]) * -1.0),
                ((other.group0()[1] * self.group1()[0]) * -1.0),
                (self.group0()[2] * other.group0()[2]),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       65       88        0
    //    simd3        0        2        0
    //    simd4       36       42        0
    // Totals...
    // yes simd      101      132        0
    //  no simd      209      262        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other[e12345]) * self.group0()),
            // e415, e425, e435, e321
            (Simd32x4::from(other[e12345]) * self.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e235, e315, e125, e4
            (Simd32x4::from(other[e12345]) * self.group2()),
            // e1, e2, e3, e5
            (Simd32x4::from(other[e12345]) * self.group3() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      122      153        0
    //    simd3        0        1        0
    //    simd4       59       61        0
    // Totals...
    // yes simd      181      215        0
    //  no simd      358      400        0
    fn sandwich(self, other: Circle) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group3()[1]) + (self.group0()[2] * other.group1()[1]) + (other.group1()[0] * self.group2()[3])),
                ((other.group0()[0] * self.group3()[2]) + (other.group0()[2] * self.group1()[0]) + (self.group0()[0] * other.group1()[2]) + (other.group1()[1] * self.group2()[3])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group3()[0]) + (self.group0()[1] * other.group1()[0]) + (other.group1()[2] * self.group2()[3])),
                (-(other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group1()[2], self.group3()[1], self.group2()[0]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group3()[2], self.group1()[3], self.group1()[0], self.group2()[1]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group1()[1], self.group3()[0], self.group1()[3], self.group2()[2]]))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[2], self.group1()[1]]) * swizzle!(other.group1(), 2, 0, 3, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[2] * self.group2()[1]) + (other.group2()[1] * self.group0()[2])
                    - (other.group2()[2] * self.group0()[1])
                    - (other.group1()[2] * self.group1()[1])
                    - (other.group1()[3] * self.group3()[0])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group2()[0] * self.group0()[2]) + (other.group2()[2] * self.group0()[0])
                    - (other.group1()[0] * self.group1()[2])
                    - (other.group1()[3] * self.group3()[1])),
                (-(other.group0()[1] * self.group2()[0]) + (other.group2()[0] * self.group0()[1])
                    - (other.group2()[1] * self.group0()[0])
                    - (other.group1()[1] * self.group1()[0])
                    - (other.group1()[3] * self.group3()[2])),
                ((other.group0()[2] * self.group2()[2]) - (other.group2()[0] * self.group0()[0]) - (other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])
                    + (other.group1()[2] * self.group3()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group2()[0] * self.group1()[3])
                    + (other.group2()[1] * self.group1()[2])
                    + (other.group1()[0] * self.group3()[3])
                    + (other.group1()[1] * self.group2()[2])
                    + (other.group1()[3] * self.group2()[0])),
                ((other.group2()[1] * self.group1()[3])
                    + (other.group2()[2] * self.group1()[0])
                    + (other.group1()[1] * self.group3()[3])
                    + (other.group1()[2] * self.group2()[0])
                    + (other.group1()[3] * self.group2()[1])),
                ((other.group2()[0] * self.group1()[1])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group1()[0] * self.group2()[1])
                    + (other.group1()[2] * self.group3()[3])
                    + (other.group1()[3] * self.group2()[2])),
                (-(other.group2()[1] * self.group1()[1])
                    - (other.group2()[1] * self.group3()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[2])
                    - (other.group1()[1] * self.group2()[1])
                    - (other.group1()[2] * self.group2()[2])),
            ]) + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]) * swizzle!(self.group3(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group2()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group2()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group2(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3])
                    + (other.group0()[2] * self.group2()[1])
                    + (other.group2()[0] * self.group2()[3])
                    + (other.group2()[1] * self.group0()[2])
                    - (other.group2()[2] * self.group0()[1])
                    + (other.group1()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group3()[3]) - (other.group2()[0] * self.group0()[2])
                    + (other.group2()[1] * self.group2()[3])
                    + (other.group2()[2] * self.group0()[0])
                    + (other.group1()[3] * self.group1()[1])),
                ((other.group0()[1] * self.group2()[0]) - (other.group0()[2] * self.group3()[3]) + (other.group2()[0] * self.group0()[1]) - (other.group2()[1] * self.group0()[0])
                    + (other.group2()[2] * self.group2()[3])
                    + (other.group1()[3] * self.group1()[2])),
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group1()[1]) + (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])
                    - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group0()[0]]) * swizzle!(other.group1(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group1()[3], self.group0()[1]]) * swizzle!(other.group1(), 1, 2, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      121      152        0
    //    simd3        0        1        0
    //    simd4       63       65        0
    // Totals...
    // yes simd      184      218        0
    //  no simd      373      415        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[1])
                    + (self.group0()[0] * other.group2()[3])
                    + (self.group0()[2] * other.group1()[1])
                    + (other.group1()[0] * self.group2()[3])),
                ((other.group0()[0] * self.group3()[2])
                    + (other.group0()[2] * self.group1()[0])
                    + (self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group2()[3])
                    + (other.group1()[1] * self.group2()[3])),
                ((other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group3()[0])
                    + (self.group0()[1] * other.group1()[0])
                    + (self.group0()[2] * other.group2()[3])
                    + (other.group1()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group1()[2], self.group3()[1], self.group2()[0]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group3()[2], self.group1()[3], self.group1()[0], self.group2()[1]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group1()[1], self.group3()[0], self.group1()[3], self.group2()[2]]))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[2], self.group1()[1]]) * swizzle!(other.group1(), 2, 0, 3, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[2] * self.group2()[1]) + (self.group0()[2] * other.group2()[1]) - (other.group1()[3] * self.group3()[0])
                    + (other.group2()[3] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[2]) + (self.group0()[0] * other.group2()[2]) - (other.group1()[3] * self.group3()[1])
                    + (other.group2()[3] * self.group1()[1])),
                (-(other.group0()[1] * self.group2()[0]) + (self.group0()[1] * other.group2()[0]) - (other.group1()[3] * self.group3()[2])
                    + (other.group2()[3] * self.group1()[2])),
                ((other.group0()[2] * self.group2()[2]) - (self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2]) + (other.group1()[2] * self.group3()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[3]]) * swizzle!(self.group1(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group1()[1] * self.group2()[2])
                    + (other.group1()[3] * self.group2()[0])
                    + (other.group2()[1] * self.group1()[2])
                    + (other.group2()[1] * self.group3()[2])
                    + (other.group2()[3] * self.group2()[0])),
                ((other.group1()[2] * self.group2()[0])
                    + (other.group1()[3] * self.group2()[1])
                    + (other.group2()[2] * self.group1()[0])
                    + (other.group2()[2] * self.group3()[0])
                    + (other.group2()[3] * self.group2()[1])),
                ((other.group1()[2] * self.group3()[3])
                    + (other.group1()[3] * self.group2()[2])
                    + (other.group2()[0] * self.group3()[1])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group2()[3] * self.group2()[2])),
                (-(other.group1()[1] * self.group2()[1])
                    - (other.group1()[2] * self.group2()[2])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[1] * self.group3()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[2])),
            ]) + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[1], self.group3()[3]]) * swizzle!(other.group2(), 0, 1, 0, 3))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group2()[1], self.group3()[3]]) * swizzle!(other.group1(), 0, 1, 0, 3))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (swizzle!(other.group2(), 2, 0, 1, 0) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (swizzle!(other.group2(), 2, 0, 1, 0) * swizzle!(self.group3(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3]) - (self.group0()[1] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[1])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group2()[0] * self.group2()[3])
                    - (other.group2()[3] * self.group3()[0])),
                (-(other.group0()[1] * self.group3()[3]) + (self.group0()[0] * other.group2()[2]) - (self.group0()[2] * other.group2()[0])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group2()[1] * self.group2()[3])
                    - (other.group2()[3] * self.group3()[1])),
                (-(other.group0()[2] * self.group3()[3]) - (self.group0()[0] * other.group2()[1])
                    + (self.group0()[1] * other.group2()[0])
                    + (other.group1()[3] * self.group1()[2])
                    + (other.group2()[2] * self.group2()[3])
                    - (other.group2()[3] * self.group3()[2])),
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group1()[1]) + (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])
                    - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group0()[0]]) * swizzle!(other.group1(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group1()[3], self.group0()[1]]) * swizzle!(other.group1(), 1, 2, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      150      185        0
    //    simd3        0        1        0
    //    simd4       52       53        0
    // Totals...
    // yes simd      202      239        0
    //  no simd      358      400        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[2] * self.group3()[1]) + (self.group0()[0] * other.group1()[3]) + (self.group0()[2] * other.group1()[1]) + (other.group1()[0] * self.group2()[3])),
                ((other.group0()[0] * self.group3()[2]) + (self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3]) + (other.group1()[1] * self.group2()[3])),
                ((other.group0()[1] * self.group3()[0]) + (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[3]) + (other.group1()[2] * self.group2()[3])),
                (-(other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group1()[2], self.group3()[1], self.group2()[0]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group3()[2], self.group1()[3], self.group1()[0], self.group2()[1]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group1()[1], self.group3()[0], self.group1()[3], self.group2()[2]]))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group2()[2]) + (other.group2()[0] * self.group2()[3]) + (other.group2()[1] * self.group0()[2])
                    - (other.group2()[2] * self.group0()[1])
                    + (other.group1()[1] * self.group1()[2])
                    + (other.group1()[3] * self.group3()[0])),
                ((other.group0()[1] * self.group3()[3]) + (other.group0()[2] * self.group2()[0]) - (other.group2()[0] * self.group0()[2])
                    + (other.group2()[1] * self.group2()[3])
                    + (other.group2()[2] * self.group0()[0])
                    + (other.group1()[2] * self.group1()[0])
                    + (other.group1()[3] * self.group3()[1])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[2] * self.group3()[3]) + (other.group2()[0] * self.group0()[1]) - (other.group2()[1] * self.group0()[0])
                    + (other.group2()[2] * self.group2()[3])
                    + (other.group1()[0] * self.group1()[1])
                    + (other.group1()[3] * self.group3()[2])),
                (-(other.group0()[1] * self.group2()[1]) - (other.group0()[2] * self.group2()[2])
                    + (other.group2()[0] * self.group0()[0])
                    + (other.group2()[1] * self.group0()[1])
                    + (other.group2()[2] * self.group0()[2])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group3()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group2()[0] * self.group1()[3]) + (other.group2()[1] * self.group1()[2]) - (other.group2()[2] * self.group3()[1]) + (other.group1()[1] * self.group2()[2])),
                (-(other.group2()[0] * self.group3()[2])
                    + (other.group2()[1] * self.group1()[3])
                    + (other.group2()[2] * self.group1()[0])
                    + (other.group1()[2] * self.group2()[0])),
                ((other.group2()[0] * self.group1()[1]) - (other.group2()[1] * self.group3()[0]) + (other.group2()[2] * self.group1()[3]) + (other.group1()[2] * self.group3()[3])),
                (-(other.group0()[1] * self.group1()[1]) + (other.group0()[1] * self.group3()[1]) - (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])
                    - (self.group0()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group3(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group2()[1], self.group2()[3]]) * swizzle!(other.group1(), 0, 1, 0, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group2()[2]) - (other.group2()[1] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[1])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[1] * self.group3()[2])
                    + (other.group1()[3] * self.group1()[0])),
                ((other.group0()[1] * self.group3()[3]) + (other.group0()[2] * self.group2()[0]) + (other.group2()[0] * self.group0()[2]) - (other.group2()[2] * self.group0()[0])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[2] * self.group3()[0])
                    + (other.group1()[3] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[2] * self.group3()[3]) - (other.group2()[0] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[0])
                    + (other.group1()[0] * self.group3()[1])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])),
                (-(other.group2()[0] * self.group1()[0])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[1] * self.group3()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[2])
                    - (other.group1()[2] * self.group2()[2])
                    - (other.group1()[3] * self.group3()[3])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      149      184        0
    //    simd3        0        1        0
    //    simd4       71       72        0
    // Totals...
    // yes simd      220      257        0
    //  no simd      433      475        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[1])
                    + (other.group1()[0] * self.group2()[3])
                    + (other.group2()[3] * self.group1()[0])
                    + (other.group3()[0] * self.group2()[3])),
                ((self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (other.group1()[1] * self.group2()[3])
                    + (other.group2()[3] * self.group1()[1])
                    + (other.group3()[1] * self.group2()[3])),
                ((self.group0()[1] * other.group1()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (other.group1()[2] * self.group2()[3])
                    + (other.group2()[3] * self.group1()[2])
                    + (other.group3()[2] * self.group2()[3])),
                (-(self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group3()[1] * self.group3()[1])
                    - (other.group3()[2] * self.group3()[2])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group1()[2], self.group3()[1], self.group2()[0]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group3()[2], self.group1()[3], self.group1()[0], self.group2()[1]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group1()[1], self.group3()[0], self.group1()[3], self.group2()[2]]))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group3(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group3(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group3(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[0]]) * swizzle!(other.group2(), 3, 3, 3, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) + (self.group0()[0] * other.group3()[3]) - (self.group0()[1] * other.group2()[2])
                    + (other.group1()[1] * self.group1()[2])
                    + (other.group1()[3] * self.group3()[0])
                    + (other.group3()[0] * self.group1()[3])
                    + (other.group3()[1] * self.group3()[2])),
                ((other.group0()[2] * self.group2()[0]) + (self.group0()[1] * other.group3()[3]) - (self.group0()[2] * other.group2()[0])
                    + (other.group1()[2] * self.group1()[0])
                    + (other.group1()[3] * self.group3()[1])
                    + (other.group3()[1] * self.group1()[3])
                    + (other.group3()[2] * self.group3()[0])),
                ((other.group0()[0] * self.group2()[1]) - (self.group0()[0] * other.group2()[1])
                    + (self.group0()[2] * other.group3()[3])
                    + (other.group1()[0] * self.group1()[1])
                    + (other.group1()[3] * self.group3()[2])
                    + (other.group3()[0] * self.group3()[1])
                    + (other.group3()[2] * self.group1()[3])),
                (-(other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[2] * self.group3()[2])
                    - (other.group3()[0] * self.group1()[0])
                    - (other.group3()[1] * self.group1()[1])
                    - (other.group3()[2] * self.group1()[2])
                    - (other.group3()[3] * self.group2()[3])),
            ]) + (Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[1]]) * swizzle!(self.group3(), 1, 2, 0, 1))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[2]]) * swizzle!(other.group2(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[1]]) * swizzle!(other.group2(), 0, 1, 2, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group1()[1] * self.group2()[2])
                    + (other.group2()[0] * self.group1()[3])
                    + (other.group2()[1] * self.group1()[2])
                    + (other.group3()[2] * self.group2()[1])
                    + (other.group3()[3] * self.group1()[0])),
                ((other.group1()[2] * self.group2()[0])
                    + (other.group2()[1] * self.group1()[3])
                    + (other.group2()[2] * self.group1()[0])
                    + (other.group3()[0] * self.group2()[2])
                    + (other.group3()[3] * self.group1()[1])),
                ((other.group2()[0] * self.group1()[1])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group3()[1] * self.group2()[0])
                    + (other.group3()[3] * self.group1()[2])
                    + (other.group3()[3] * self.group3()[2])),
                (-(other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2]) + (other.group0()[2] * self.group3()[2])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group1()[2], other.group0()[0]]) * swizzle!(self.group3(), 2, 0, 3, 0))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group2()[0], other.group0()[1]]) * swizzle!(self.group3(), 0, 1, 1, 1))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group3()[3], self.group0()[1]]) * swizzle!(other.group3(), 1, 2, 2, 1))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[3]]) * swizzle!(other.group2(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group2()[1], self.group0()[0]]) * swizzle!(other.group3(), 0, 1, 0, 0))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group2()[1], self.group2()[3]]) * swizzle!(other.group1(), 0, 1, 0, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) - (self.group0()[0] * other.group3()[3])
                    + (self.group0()[1] * other.group2()[2])
                    + (other.group1()[1] * self.group3()[2])
                    + (other.group1()[3] * self.group1()[0])),
                ((other.group0()[1] * self.group3()[3]) - (self.group0()[1] * other.group3()[3])
                    + (self.group0()[2] * other.group2()[0])
                    + (other.group1()[2] * self.group3()[0])
                    + (other.group1()[3] * self.group1()[1])),
                ((other.group0()[2] * self.group3()[3]) + (self.group0()[0] * other.group2()[1]) - (self.group0()[2] * other.group3()[3])
                    + (other.group1()[0] * self.group3()[1])
                    + (other.group1()[3] * self.group1()[2])),
                (-(other.group1()[3] * self.group3()[3])
                    - (other.group2()[0] * self.group3()[0])
                    - (other.group2()[1] * self.group3()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[2])),
            ]) + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[2]]) * swizzle!(self.group2(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group3()[1]]) * swizzle!(self.group2(), 0, 1, 2, 1))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]) * swizzle!(other.group3(), 1, 2, 0, 2))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       66       96        0
    //    simd3        0        1        0
    //    simd4       43       46        0
    // Totals...
    // yes simd      109      143        0
    //  no simd      238      283        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) - (other.group0()[0] * self.group3()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[0] * self.group3()[3]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group1()[2])),
                (-(other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group1()[3])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]])),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[1] * self.group3()[0]) * -1.0),
                ((other.group0()[1] * self.group3()[1]) * -1.0),
                ((other.group0()[1] * self.group3()[2]) * -1.0),
                (other.group0()[1] * self.group2()[3]),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      101      138        0
    //    simd3        0        1        0
    //    simd4       42       43        0
    // Totals...
    // yes simd      143      182        0
    //  no simd      269      313        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group1()[3] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) * -1.0),
                ((self.group0()[2] * other.group0()[0]) * -1.0),
                ((self.group0()[0] * other.group0()[1]) * -1.0),
                0.0,
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))
                + (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1]) + (self.group1()[3] * other.group0()[0])
                    - (self.group2()[0] * other.group0()[3])
                    - (self.group3()[1] * other.group0()[2])
                    + (self.group3()[2] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0]) + (self.group1()[3] * other.group0()[1]) - (self.group2()[1] * other.group0()[3])
                    + (self.group3()[0] * other.group0()[2])
                    - (self.group3()[2] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0]) + (self.group1()[3] * other.group0()[2])
                    - (self.group2()[2] * other.group0()[3])
                    - (self.group3()[0] * other.group0()[1])
                    + (self.group3()[1] * other.group0()[0])),
                (self.group2()[3] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) + (self.group1()[0] * other.group0()[3])),
                ((self.group0()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[1]) + (self.group1()[2] * other.group0()[3])),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group3()[0] * other.group0()[0])
                    - (self.group3()[1] * other.group0()[1])
                    - (self.group3()[2] * other.group0()[2])
                    - (self.group3()[3] * other.group0()[3])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group1()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      124      160        0
    //    simd3        0        1        0
    //    simd4       51       52        0
    // Totals...
    // yes simd      175      213        0
    //  no simd      328      371        0
    fn sandwich(self, other: Flector) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (self.group2()[3] * other.group1()[0]),
                (self.group2()[3] * other.group1()[1]),
                (self.group2()[3] * other.group1()[2]),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group3()[1] * other.group1()[1])
                    - (self.group3()[2] * other.group1()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group1(), 1, 2, 0, 3))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group0()[2]) + (self.group1()[3] * other.group1()[0]) + (self.group3()[2] * other.group1()[1])),
                ((self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group0()[0]) + (self.group1()[3] * other.group1()[1]) + (self.group3()[0] * other.group1()[2])),
                (-(self.group0()[0] * other.group0()[1])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])
                    + (self.group3()[1] * other.group1()[0])),
                (-(self.group1()[1] * other.group1()[1]) - (self.group1()[2] * other.group1()[2]) - (self.group2()[3] * other.group1()[3])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))
                + (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group1()[0] * other.group1()[3]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[3] * other.group0()[0]) - (self.group2()[0] * other.group0()[3])
                    + (self.group2()[1] * other.group1()[2])
                    + (self.group3()[0] * other.group1()[3])
                    - (self.group3()[1] * other.group0()[2])
                    + (self.group3()[2] * other.group0()[1])),
                ((self.group1()[1] * other.group1()[3]) - (self.group1()[2] * other.group0()[0]) + (self.group1()[3] * other.group0()[1]) - (self.group2()[1] * other.group0()[3])
                    + (self.group2()[2] * other.group1()[0])
                    + (self.group3()[0] * other.group0()[2])
                    + (self.group3()[1] * other.group1()[3])
                    - (self.group3()[2] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[1])
                    + (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group0()[2])
                    + (self.group2()[0] * other.group1()[1])
                    - (self.group2()[2] * other.group0()[3])
                    - (self.group3()[0] * other.group0()[1])
                    + (self.group3()[1] * other.group0()[0])
                    + (self.group3()[2] * other.group1()[3])),
                ((self.group0()[2] * other.group1()[2]) * -1.0),
            ]) + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group0()[1]]) * swizzle!(other.group1(), 0, 1, 2, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[2]) + (self.group1()[2] * other.group1()[1])),
                (-(self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[2] * other.group1()[3]) + (self.group1()[2] * other.group0()[3])),
                ((self.group2()[0] * other.group1()[0]) + (self.group2()[1] * other.group1()[1]) + (self.group2()[2] * other.group1()[2])
                    - (self.group3()[0] * other.group0()[0])
                    - (self.group3()[1] * other.group0()[1])
                    - (self.group3()[2] * other.group0()[2])
                    - (self.group3()[3] * other.group0()[3])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group1()[2]]) * swizzle!(other.group0(), 0, 1, 2, 2))
                + (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group1()[3]]) * swizzle!(self.group1(), 0, 0, 1, 3))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      118      149        0
    //    simd3        0        1        0
    //    simd4       45       47        0
    // Totals...
    // yes simd      163      197        0
    //  no simd      298      340        0
    fn sandwich(self, other: Line) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1]) + (other.group0()[0] * self.group2()[3])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0]) + (other.group0()[1] * self.group2()[3])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) + (other.group0()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1]) + (other.group0()[1] * self.group1()[2])
                    - (other.group0()[2] * self.group1()[1])
                    + (other.group1()[0] * self.group2()[3])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0]) - (other.group0()[0] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[0])
                    + (other.group1()[1] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) + (other.group0()[0] * self.group1()[1])
                    - (other.group0()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])
                    + (other.group0()[0] * self.group3()[0])
                    + (other.group0()[1] * self.group3()[1])
                    + (other.group0()[2] * self.group3()[2])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[0] * self.group3()[3])
                    + (other.group0()[1] * self.group2()[2])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[1] * self.group1()[2])
                    + (other.group1()[1] * self.group3()[2])),
                ((other.group0()[1] * self.group3()[3])
                    + (other.group0()[2] * self.group2()[0])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[2] * self.group1()[0])
                    + (other.group1()[2] * self.group3()[0])),
                ((other.group0()[0] * self.group2()[1])
                    + (other.group0()[2] * self.group3()[3])
                    + (other.group1()[0] * self.group1()[1])
                    + (other.group1()[0] * self.group3()[1])
                    + (other.group1()[2] * self.group1()[3])),
                (-(other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[2] * self.group3()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group1()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])
                    - (other.group0()[0] * self.group1()[3])
                    - (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group3()[1])
                    + (other.group1()[0] * self.group2()[3])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0]) + (other.group0()[0] * self.group3()[2])
                    - (other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group3()[0])
                    + (other.group1()[1] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) - (other.group0()[0] * self.group3()[1])
                    + (other.group0()[1] * self.group3()[0])
                    - (other.group0()[2] * self.group1()[3])
                    + (other.group1()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       97      127        0
    //    simd3        0        1        0
    //    simd4       58       60        0
    // Totals...
    // yes simd      155      188        0
    //  no simd      329      370        0
    fn sandwich(self, other: Motor) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[3])),
                ((self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group1()[1]) + (self.group2()[3] * other.group1()[0])),
                ((self.group0()[1] * other.group1()[3]) + (self.group2()[3] * other.group1()[1])),
                ((self.group0()[2] * other.group1()[3]) + (self.group2()[3] * other.group1()[2])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2]) + (self.group3()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group1(), 3, 2, 0, 3))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[0], self.group1()[1], self.group3()[0]]) * swizzle!(other.group0(), 3, 2, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[1], self.group1()[2], self.group3()[1]]) * swizzle!(other.group0(), 1, 3, 3, 1))
                - (swizzle!(self.group1(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group1()[2] * other.group1()[1])
                    + (self.group1()[3] * other.group1()[0])
                    + (self.group2()[2] * other.group0()[1])
                    + (self.group3()[0] * other.group1()[3])
                    + (self.group3()[2] * other.group1()[1])
                    + (self.group3()[3] * other.group0()[0])),
                ((self.group1()[1] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[1])
                    + (self.group2()[1] * other.group0()[3])
                    + (self.group3()[0] * other.group1()[2])
                    + (self.group3()[1] * other.group1()[3])
                    + (self.group3()[3] * other.group0()[1])),
                ((self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])
                    + (self.group2()[2] * other.group0()[3])
                    + (self.group3()[1] * other.group1()[0])
                    + (self.group3()[2] * other.group1()[3])
                    + (self.group3()[3] * other.group0()[2])),
                (-(self.group1()[2] * other.group1()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    - (self.group3()[0] * other.group1()[0])
                    - (self.group3()[1] * other.group1()[1])
                    - (self.group3()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([self.group2()[0], self.group2()[0], self.group2()[1], self.group3()[3]]) * swizzle!(other.group0(), 3, 2, 0, 3))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))
                + (swizzle!(self.group1(), 0, 0, 1, 3) * swizzle!(other.group1(), 3, 2, 0, 3))
                - (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (swizzle!(self.group2(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1]) + (self.group3()[1] * other.group0()[2])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group1()[0]) + (self.group3()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[1])
                    + (self.group0()[1] * other.group1()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group3()[0] * other.group0()[1])),
                0.0,
            ]) + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[0]]) * swizzle!(other.group0(), 0, 1, 2, 0))
                - (Simd32x4::from([self.group3()[0], self.group3()[0], self.group3()[1], self.group0()[1]]) * swizzle!(other.group0(), 3, 2, 0, 1))
                - (Simd32x4::from([self.group3()[2], self.group3()[1], self.group3()[2], self.group0()[2]]) * swizzle!(other.group0(), 1, 3, 3, 2))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for DipoleInversion {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      242      297        0
    //    simd2       22       22        0
    //    simd3      106      111        0
    //    simd4       73       74        0
    // Totals...
    // yes simd      443      504        0
    //  no simd      896      970        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                ((self.group1()[3] * other.group3()[3]) - (self.group3()[0] * other.group9()[0]) - (self.group3()[1] * other.group9()[1]) - (self.group3()[2] * other.group9()[2])),
                (-(self.group1()[3] * other.group6()[3])
                    + (self.group3()[0] * other.group1()[0])
                    + (self.group3()[1] * other.group1()[1])
                    + (self.group3()[2] * other.group1()[2])),
            ]) - (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group3()[0], other.group8()[0]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group3()[1], other.group8()[1]]))
                - (Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group3()[2], other.group8()[2]]))
                - (Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group5()[0], other.group6()[0]]))
                - (Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group5()[1], other.group6()[1]]))
                - (Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group5()[2], other.group6()[2]]))
                - (Simd32x2::from(self.group2()[0]) * Simd32x2::from([other.group4()[0], other.group7()[0]]))
                - (Simd32x2::from(self.group2()[1]) * Simd32x2::from([other.group4()[1], other.group7()[1]]))
                - (Simd32x2::from(self.group2()[2]) * Simd32x2::from([other.group4()[2], other.group7()[2]]))
                + (Simd32x2::from(self.group2()[3]) * Simd32x2::from([other.group9()[3], other[e1]]))
                + (Simd32x2::from(self.group3()[3]) * Simd32x2::from([other[e45], other.group1()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[1] * self.group3()[0]) + (self.group0()[0] * other[e1]) - (self.group0()[1] * other.group8()[2]) + (self.group0()[2] * other.group8()[1])
                    - (other.group7()[0] * self.group3()[3])
                    + (other.group8()[0] * self.group2()[3])
                    + (self.group1()[0] * other.group6()[3])),
                (-(other.group0()[1] * self.group3()[1]) + (self.group0()[0] * other.group8()[2]) + (self.group0()[1] * other[e1])
                    - (self.group0()[2] * other.group8()[0])
                    - (other.group7()[1] * self.group3()[3])
                    + (other.group8()[1] * self.group2()[3])
                    + (self.group1()[1] * other.group6()[3])),
                (-(other.group0()[1] * self.group3()[2]) - (self.group0()[0] * other.group8()[1]) + (self.group0()[1] * other.group8()[0]) + (self.group0()[2] * other[e1])
                    - (other.group7()[2] * self.group3()[3])
                    + (other.group8()[2] * self.group2()[3])
                    + (self.group1()[2] * other.group6()[3])),
                ((self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group1()[2]) - (self.group0()[2] * other.group6()[2]) - (other.group7()[1] * self.group1()[1])
                    + (other.group7()[1] * self.group3()[1])
                    - (other.group7()[2] * self.group1()[2])
                    + (other.group7()[2] * self.group3()[2])),
            ]) - (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                - (Simd32x4::from([other.group7()[1], other.group7()[2], other.group7()[0], other.group6()[3]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group7()[2], other.group7()[0], other.group7()[1], other.group0()[1]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[0]]) * swizzle!(other.group6(), 0, 1, 2, 0))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group0()[1]]) * swizzle!(other.group6(), 1, 2, 0, 1))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group7()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group7()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))),
            // e5
            ((other.group0()[1] * self.group3()[3])
                - (other.group8()[0] * self.group1()[0])
                - (other.group8()[0] * self.group3()[0])
                - (other.group8()[1] * self.group1()[1])
                - (other.group8()[1] * self.group3()[1])
                - (other.group8()[2] * self.group1()[2])
                - (other.group8()[2] * self.group3()[2])
                + (self.group1()[3] * other[e1])
                - (self.group2()[0] * other.group1()[0])
                - (self.group2()[0] * other.group6()[0])
                - (self.group2()[1] * other.group1()[1])
                - (self.group2()[1] * other.group6()[1])
                - (self.group2()[2] * other.group1()[2])
                - (self.group2()[2] * other.group6()[2])
                + (self.group3()[3] * other.group6()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group5()[1] * self.group2()[2]) + (self.group1()[0] * other.group9()[3]) + (self.group2()[1] * other.group9()[2]) + (self.group3()[0] * other.group9()[3])),
                ((other.group5()[2] * self.group2()[0]) + (self.group1()[1] * other.group9()[3]) + (self.group2()[2] * other.group9()[0]) + (self.group3()[1] * other.group9()[3])),
                ((other.group5()[0] * self.group2()[1]) + (self.group1()[2] * other.group9()[3]) + (self.group2()[0] * other.group9()[1]) + (self.group3()[2] * other.group9()[3])),
                (-(other.group5()[2] * self.group3()[2])
                    - (self.group1()[1] * other.group9()[1])
                    - (self.group1()[2] * other.group9()[2])
                    - (self.group2()[3] * other.group9()[3])),
            ]) + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                + (Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other[e45]]))
                - (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group4()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[1]]) * swizzle!(other.group3(), 0, 1, 2, 1))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group0()[2]]) * swizzle!(other.group3(), 1, 2, 0, 2))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group5()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group9()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group3()[3], other.group9()[2], other.group9()[0], other.group4()[1]]) * swizzle!(self.group2(), 0, 0, 1, 1))
                - (Simd32x4::from([other.group9()[0], other.group9()[1], other.group9()[2], other.group5()[1]]) * swizzle!(self.group3(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group9()[1], other.group3()[3], other.group3()[3], other.group4()[2]]) * swizzle!(self.group2(), 2, 1, 2, 2))),
            // e41, e42, e43
            ((Simd32x3::from(other.group0()[0]) * self.group0())
                - (Simd32x3::from(other.group4()[0]) * Simd32x3::from([self.group1()[3], self.group1()[2], self.group3()[1]]))
                - (Simd32x3::from(other.group4()[1]) * Simd32x3::from([self.group3()[2], self.group1()[3], self.group1()[0]]))
                - (Simd32x3::from(other.group4()[2]) * Simd32x3::from([self.group1()[1], self.group3()[0], self.group1()[3]]))
                + (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                + (Simd32x3::from(self.group2()[3]) * other.group5())
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(other[e45]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from([other.group5()[1], other.group9()[2], other.group9()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([self.group1()[2], self.group3()[2], self.group1()[1]]) * swizzle!(other.group4(), 1, 0, 0))
                + (Simd32x3::from([self.group3()[1], self.group1()[0], self.group3()[0]]) * swizzle!(other.group4(), 2, 2, 1))
                + (Simd32x3::from([other.group3()[3], other.group5()[2], other.group5()[0]]) * swizzle!(self.group0(), 0, 0, 1))
                + (Simd32x3::from([other.group9()[1], other.group3()[3], other.group3()[3]]) * swizzle!(self.group0(), 2, 1, 2))
                - (Simd32x3::from([other.group9()[2], other.group9()[0], other.group9()[1]]) * swizzle!(self.group0(), 1, 2, 0))
                - (swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group5(), 2, 0, 1))),
            // e23, e31, e12
            (Simd32x3::from([
                (-(self.group3()[1] * other.group9()[2]) + (self.group3()[2] * other.group9()[1])),
                ((self.group3()[0] * other.group9()[2]) - (self.group3()[2] * other.group9()[0])),
                (-(self.group3()[0] * other.group9()[1]) + (self.group3()[1] * other.group9()[0])),
            ]) + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                + (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                - (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group5(), 2, 0, 1))
                + (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]) * swizzle!(other.group5(), 1, 2, 0))
                - (Simd32x3::from([self.group2()[1], self.group2()[2], self.group2()[0]]) * swizzle!(other.group4(), 2, 0, 1))
                + (Simd32x3::from([self.group2()[2], self.group2()[0], self.group3()[3]]) * swizzle!(other.group4(), 1, 2, 2))
                + (Simd32x3::from([self.group3()[3], self.group3()[3], self.group2()[1]]) * swizzle!(other.group4(), 0, 1, 0))
                + (Simd32x3::from([other.group3()[1], other.group9()[3], other.group9()[3]]) * swizzle!(self.group0(), 2, 1, 2))
                - (Simd32x3::from([other.group3()[2], other.group3()[0], other.group3()[1]]) * swizzle!(self.group0(), 1, 2, 0))
                + (Simd32x3::from([other.group9()[3], other.group3()[2], other.group3()[0]]) * swizzle!(self.group0(), 0, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[0]) - (self.group0()[1] * other.group8()[2]) + (self.group0()[2] * other.group8()[1])
                    - (other.group7()[2] * self.group2()[1])
                    - (self.group3()[2] * other.group1()[1])),
                ((other.group0()[1] * self.group1()[1]) + (self.group0()[0] * other.group8()[2])
                    - (self.group0()[2] * other.group8()[0])
                    - (other.group7()[0] * self.group2()[2])
                    - (self.group3()[1] * other.group6()[3])),
                ((other.group0()[1] * self.group1()[2]) - (self.group0()[0] * other.group8()[1]) + (self.group0()[1] * other.group8()[0])
                    - (other.group7()[1] * self.group2()[0])
                    - (self.group3()[2] * other.group6()[3])),
                (-(self.group0()[0] * other.group8()[0])
                    - (self.group0()[1] * other.group8()[1])
                    - (self.group0()[2] * other.group8()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]) + (Simd32x4::from(other[e1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                + (Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group6()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group7()[1], other.group7()[2], other.group7()[0], other.group7()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group8()[0], other.group8()[1], other.group8()[2], other.group7()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[1]]) * swizzle!(other.group6(), 1, 2, 0, 1))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group6()[2]]) * swizzle!(self.group3(), 1, 2, 0, 2))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group7()[2]]) * swizzle!(self.group2(), 0, 1, 2, 2))
                - (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group0()[1]]) * swizzle!(self.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group6()[3], other.group1()[2], other.group1()[0], other.group1()[3]]) * swizzle!(self.group3(), 0, 0, 1, 3))
                - (swizzle!(self.group1(), 3, 3, 3, 0) * swizzle!(other.group1(), 0, 1, 2, 0))),
            // e423, e431, e412
            ((Simd32x3::from(other.group0()[1]) * self.group0())
                - (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group6()[3], other.group1()[2], other.group6()[1]]))
                - (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group6()[2], other.group6()[3], other.group1()[0]]))
                - (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], other.group6()[0], other.group6()[3]]))
                - (Simd32x3::from(other.group7()[0]) * Simd32x3::from([self.group1()[3], self.group1()[2], self.group3()[1]]))
                - (Simd32x3::from(other.group7()[1]) * Simd32x3::from([self.group3()[2], self.group1()[3], self.group1()[0]]))
                - (Simd32x3::from(other.group7()[2]) * Simd32x3::from([self.group1()[1], self.group3()[0], self.group1()[3]]))
                - (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from([self.group1()[2], self.group3()[2], self.group1()[1]]) * swizzle!(other.group7(), 1, 0, 0))
                + (Simd32x3::from([self.group3()[1], self.group1()[0], self.group3()[0]]) * swizzle!(other.group7(), 2, 2, 1))
                + (Simd32x3::from([other.group1()[2], other.group6()[2], other.group1()[1]]) * swizzle!(self.group0(), 1, 0, 0))
                + (Simd32x3::from([other.group6()[1], other.group1()[0], other.group6()[0]]) * swizzle!(self.group0(), 2, 2, 1))),
            // e235, e315, e125
            (Simd32x3::from([
                (-(self.group2()[1] * other.group1()[2]) - (self.group2()[1] * other.group6()[2])
                    + (self.group2()[2] * other.group1()[1])
                    + (self.group2()[2] * other.group6()[1])),
                ((self.group2()[0] * other.group1()[2]) + (self.group2()[0] * other.group6()[2]) - (self.group2()[2] * other.group1()[0]) - (self.group2()[2] * other.group6()[0])),
                (-(self.group2()[0] * other.group1()[1]) - (self.group2()[0] * other.group6()[1])
                    + (self.group2()[1] * other.group1()[0])
                    + (self.group2()[1] * other.group6()[0])),
            ]) + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from(other.group6()[3]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                - (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group8(), 2, 0, 1))
                + (Simd32x3::from([self.group1()[2], self.group1()[0], self.group3()[1]]) * swizzle!(other.group8(), 1, 2, 0))
                + (Simd32x3::from([self.group1()[3], self.group1()[3], self.group1()[1]]) * swizzle!(other.group8(), 0, 1, 0))
                - (Simd32x3::from([self.group3()[1], self.group3()[2], self.group3()[0]]) * swizzle!(other.group8(), 2, 0, 1))
                + (Simd32x3::from([self.group3()[2], self.group3()[0], self.group1()[3]]) * swizzle!(other.group8(), 1, 2, 2))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[0] * other.group9()[3])
                    + (self.group0()[1] * other.group3()[2])
                    + (other.group4()[0] * self.group3()[3])
                    + (other.group5()[1] * self.group3()[2])
                    + (self.group1()[0] * other.group3()[3])),
                (-(self.group0()[1] * other.group9()[3])
                    + (self.group0()[2] * other.group3()[0])
                    + (other.group4()[1] * self.group3()[3])
                    + (other.group5()[2] * self.group3()[0])
                    + (self.group1()[1] * other.group3()[3])),
                ((self.group0()[0] * other.group3()[1]) - (self.group0()[2] * other.group9()[3])
                    + (other.group4()[2] * self.group3()[3])
                    + (other.group5()[0] * self.group3()[1])
                    + (self.group1()[2] * other.group3()[3])),
                (-(other.group5()[2] * self.group2()[2])
                    - (self.group1()[2] * other.group3()[2])
                    - (self.group3()[1] * other.group3()[1])
                    - (self.group3()[2] * other.group3()[2])
                    - (self.group3()[3] * other.group3()[3])),
            ]) + (Simd32x4::from(other.group0()[0]) * self.group3())
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group9()[3]]))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group4()[1], other.group4()[2], other.group4()[0], other.group9()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group4()[2], other.group4()[0], other.group4()[1], other.group5()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group3()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[1]]) * swizzle!(other.group9(), 1, 2, 0, 1))
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group5()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group9()[2], other.group9()[0], other.group9()[1], other.group3()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))
                + (Simd32x4::from([other[e45], other[e45], other[e45], other.group9()[2]]) * swizzle!(self.group2(), 0, 1, 2, 2))),
            // e1234
            ((other.group0()[0] * self.group2()[3])
                - (self.group0()[0] * other.group5()[0])
                - (self.group0()[0] * other.group9()[0])
                - (self.group0()[1] * other.group5()[1])
                - (self.group0()[1] * other.group9()[1])
                - (self.group0()[2] * other.group5()[2])
                - (self.group0()[2] * other.group9()[2])
                - (other.group4()[0] * self.group1()[0])
                + (other.group4()[0] * self.group3()[0])
                - (other.group4()[1] * self.group1()[1])
                + (other.group4()[1] * self.group3()[1])
                - (other.group4()[2] * self.group1()[2])
                + (other.group4()[2] * self.group3()[2])
                - (self.group1()[3] * other[e45])
                + (self.group2()[3] * other.group3()[3])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       96      132        0
    //    simd3        0        1        0
    //    simd4       43       44        0
    // Totals...
    // yes simd      139      177        0
    //  no simd      268      311        0
    fn sandwich(self, other: Plane) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (self.group2()[3] * other.group0()[0]),
                (self.group2()[3] * other.group0()[1]),
                (self.group2()[3] * other.group0()[2]),
                (-(self.group3()[1] * other.group0()[1]) - (self.group3()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[3] * other.group0()[0]) + (self.group3()[2] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[3]) + (self.group1()[3] * other.group0()[1]) + (self.group3()[0] * other.group0()[2])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[3] * other.group0()[2]) + (self.group3()[1] * other.group0()[0])),
                (-(self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2]) - (self.group2()[3] * other.group0()[3])),
            ]) - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group2()[1] * other.group0()[2]) + (self.group3()[0] * other.group0()[3])),
                ((self.group1()[1] * other.group0()[3]) + (self.group2()[2] * other.group0()[0]) + (self.group3()[1] * other.group0()[3])),
                ((self.group1()[2] * other.group0()[3]) + (self.group2()[0] * other.group0()[1]) + (self.group3()[2] * other.group0()[3])),
                ((self.group0()[2] * other.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group0()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group1()[1] * other.group0()[2])),
                (-(self.group0()[1] * other.group0()[3]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[2] * other.group0()[3]) - (self.group1()[0] * other.group0()[1])),
                ((self.group2()[0] * other.group0()[0]) + (self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2])),
            ]) + (swizzle!(self.group1(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       79      110        0
    //    simd3        0        1        0
    //    simd4       51       53        0
    // Totals...
    // yes simd      130      164        0
    //  no simd      283      325        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(self.group0()[2] * other.group0()[1]) - (self.group2()[3] * other.group0()[0]) - (self.group3()[0] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[2]) - (self.group2()[3] * other.group0()[1]) - (self.group3()[1] * other.group0()[3])),
                (-(self.group0()[1] * other.group0()[0]) - (self.group2()[3] * other.group0()[2]) - (self.group3()[2] * other.group0()[3])),
                ((self.group2()[3] * other[e2]) + (self.group3()[2] * other.group0()[2]) + (self.group3()[3] * other.group0()[3])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group2()[0] * other.group0()[3]) + (self.group3()[1] * other.group0()[2])),
                ((self.group2()[1] * other.group0()[3]) + (self.group3()[2] * other.group0()[0])),
                ((self.group2()[2] * other.group0()[3]) + (self.group3()[0] * other.group0()[1])),
                (-(self.group1()[2] * other.group0()[2]) - (self.group3()[3] * other.group0()[3])),
            ]) + (Simd32x4::from(other[e2]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))
                - (swizzle!(self.group1(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group2()[2] * other.group0()[1]) + (self.group3()[0] * other[e2]) + (self.group3()[3] * other.group0()[0])),
                ((self.group2()[0] * other.group0()[2]) + (self.group3()[1] * other[e2]) + (self.group3()[3] * other.group0()[1])),
                ((self.group2()[1] * other.group0()[0]) + (self.group3()[2] * other[e2]) + (self.group3()[3] * other.group0()[2])),
                (-(self.group2()[1] * other.group0()[1]) - (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other[e2]) * self.group1())
                - (swizzle!(self.group2(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other[e2]) - (self.group2()[0] * other.group0()[3])),
                ((self.group0()[1] * other[e2]) - (self.group2()[1] * other.group0()[3])),
                ((self.group0()[2] * other[e2]) - (self.group2()[2] * other.group0()[3])),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (swizzle!(self.group1(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       73       92        0
    //    simd3        0        2        0
    //    simd4       34       38        0
    // Totals...
    // yes simd      107      132        0
    //  no simd      209      250        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other[scalar]) * self.group0()),
            // e23, e31, e12, e45
            (Simd32x4::from(other[scalar]) * self.group1()),
            // e15, e25, e35, e1234
            (Simd32x4::from(other[scalar]) * self.group2()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other[scalar]) * self.group3()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       95      131        0
    //    simd3        0        1        0
    //    simd4       47       48        0
    // Totals...
    // yes simd      142      180        0
    //  no simd      283      326        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (self.group2()[3] * other.group0()[0]),
                (self.group2()[3] * other.group0()[1]),
                (self.group2()[3] * other.group0()[2]),
                ((self.group3()[2] * other.group0()[2]) * -1.0),
            ]) + (Simd32x4::from(other[e4315]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([other[e4315], other[e4315], other[e4315], other.group0()[1]]) * swizzle!(self.group3(), 0, 1, 2, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[3] * other.group0()[0]) + (self.group3()[2] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[3]) + (self.group1()[3] * other.group0()[1]) + (self.group3()[0] * other.group0()[2])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[3] * other.group0()[2]) + (self.group3()[1] * other.group0()[0])),
                (-(self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2]) - (self.group2()[3] * other.group0()[3])),
            ]) + (Simd32x4::from(other[e4315]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group2()[1] * other.group0()[2]) + (self.group3()[0] * other.group0()[3])),
                ((self.group1()[1] * other.group0()[3]) + (self.group2()[2] * other.group0()[0]) + (self.group3()[1] * other.group0()[3])),
                ((self.group1()[2] * other.group0()[3]) + (self.group2()[0] * other.group0()[1]) + (self.group3()[2] * other.group0()[3])),
                (-(self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other[e4315])),
            ]) - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group0()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group1()[1] * other.group0()[2])),
                (-(self.group0()[1] * other.group0()[3]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[2] * other.group0()[3]) - (self.group1()[0] * other.group0()[1])),
                ((self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([other[e4315], other[e4315], other[e4315], other.group0()[0]]) * swizzle!(self.group2(), 0, 1, 2, 0))
                + (swizzle!(self.group1(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      124      155        0
    //    simd3        0        1        0
    //    simd4       81       83        0
    // Totals...
    // yes simd      205      239        0
    //  no simd      448      490        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[2] * other.group1()[1]) + (self.group1()[2] * other.group0()[1]) - (self.group3()[0] * other.group3()[3])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[3]) + (self.group1()[0] * other.group0()[2]) - (self.group3()[1] * other.group3()[3])),
                ((self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group0()[3]) + (self.group1()[1] * other.group0()[0]) - (self.group3()[2] * other.group3()[3])),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[3] * other.group1()[3]) - (self.group2()[2] * other.group0()[2])
                    + (self.group3()[3] * other.group3()[3])),
            ]) - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group2()[0]]))
                - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group2()[1]]))
                - (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group2()[2]]))
                + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group3(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[1]]) * swizzle!(other.group3(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group3()[2]]) * swizzle!(self.group3(), 1, 2, 0, 2))
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[0]]) * swizzle!(self.group2(), 3, 3, 3, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group2()[1]) + (self.group2()[3] * other.group2()[0]) - (self.group3()[2] * other.group3()[1])),
                ((self.group0()[1] * other.group2()[3]) + (self.group2()[3] * other.group2()[1]) - (self.group3()[1] * other.group1()[3])),
                ((self.group0()[2] * other.group2()[3]) + (self.group2()[3] * other.group2()[2]) - (self.group3()[2] * other.group1()[3])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2]) - (self.group1()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group2(), 3, 2, 0, 3))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group1()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]) * swizzle!(self.group3(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group0()[1], other.group3()[3], other.group3()[3], other.group0()[2]]) * swizzle!(self.group2(), 2, 1, 2, 2))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group3()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group3()[3]]) * swizzle!(self.group3(), 0, 0, 1, 3))
                + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[1]]) * swizzle!(self.group3(), 1, 2, 0, 1))
                + (Simd32x4::from([other.group3()[3], other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group2(), 0, 0, 1, 1))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group3(), 0, 1, 2, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group1()[2] * other.group2()[1])
                    + (self.group1()[3] * other.group2()[0])
                    + (self.group2()[2] * other.group1()[1])
                    + (self.group2()[2] * other.group3()[1])
                    + (self.group3()[0] * other.group2()[3])
                    + (self.group3()[2] * other.group2()[1])
                    + (self.group3()[3] * other.group1()[0])
                    + (self.group3()[3] * other.group3()[0])),
                ((self.group1()[1] * other.group2()[3])
                    + (self.group1()[3] * other.group2()[1])
                    + (self.group2()[0] * other.group3()[2])
                    + (self.group2()[1] * other.group1()[3])
                    + (self.group3()[0] * other.group2()[2])
                    + (self.group3()[1] * other.group2()[3])
                    + (self.group3()[3] * other.group1()[1])
                    + (self.group3()[3] * other.group3()[1])),
                ((self.group1()[2] * other.group2()[3])
                    + (self.group1()[3] * other.group2()[2])
                    + (self.group2()[1] * other.group3()[0])
                    + (self.group2()[2] * other.group1()[3])
                    + (self.group3()[1] * other.group2()[0])
                    + (self.group3()[2] * other.group2()[3])
                    + (self.group3()[3] * other.group1()[2])
                    + (self.group3()[3] * other.group3()[2])),
                (-(self.group1()[2] * other.group2()[2])
                    - (self.group2()[1] * other.group1()[1])
                    - (self.group2()[1] * other.group3()[1])
                    - (self.group2()[2] * other.group1()[2])
                    - (self.group2()[2] * other.group3()[2])
                    - (self.group3()[0] * other.group2()[0])
                    - (self.group3()[1] * other.group2()[1])
                    - (self.group3()[2] * other.group2()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))
                + (Simd32x4::from([self.group2()[0], self.group2()[0], self.group2()[1], self.group3()[3]]) * swizzle!(other.group1(), 3, 2, 0, 3))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[1]]) * swizzle!(other.group2(), 2, 0, 1, 1))
                + (swizzle!(self.group1(), 0, 0, 1, 3) * swizzle!(other.group2(), 3, 2, 0, 3))
                - (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (swizzle!(self.group2(), 1, 2, 0, 0) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (swizzle!(self.group2(), 1, 2, 0, 0) * swizzle!(other.group3(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[1])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group2()[3] * other.group2()[0])
                    - (self.group3()[3] * other.group0()[0])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group2()[3]) - (self.group0()[2] * other.group2()[0]) + (self.group1()[1] * other.group1()[3])
                    - (self.group2()[1] * other.group3()[3])
                    + (self.group2()[3] * other.group2()[1])),
                (-(self.group0()[0] * other.group2()[1])
                    + (self.group0()[1] * other.group2()[0])
                    + (self.group0()[2] * other.group2()[3])
                    + (self.group1()[2] * other.group1()[3])
                    - (self.group2()[2] * other.group3()[3])
                    + (self.group2()[3] * other.group2()[2])),
                ((self.group0()[1] * other.group3()[1]) - (self.group0()[2] * other.group1()[2]) + (self.group0()[2] * other.group3()[2]) - (self.group1()[3] * other.group3()[3])
                    + (self.group3()[1] * other.group0()[1])
                    + (self.group3()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))
                - (Simd32x4::from([self.group2()[2], self.group3()[1], self.group3()[2], self.group1()[1]]) * swizzle!(other.group0(), 1, 3, 3, 1))
                - (Simd32x4::from([self.group3()[0], self.group3()[3], self.group3()[3], self.group1()[2]]) * swizzle!(other.group0(), 3, 1, 2, 2))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group0()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group3()[3], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group2(), 0, 0, 1, 3))
                + (swizzle!(self.group2(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      152      187        0
    //    simd3        0        1        0
    //    simd4       74       75        0
    // Totals...
    // yes simd      226      263        0
    //  no simd      448      490        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3])
                    + (self.group0()[2] * other.group1()[1])
                    + (self.group1()[2] * other.group0()[1])
                    + (self.group2()[3] * other.group1()[0])
                    + (self.group2()[3] * other.group3()[0])
                    + (self.group3()[1] * other.group0()[2])),
                ((self.group0()[1] * other.group0()[3])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group1()[0] * other.group0()[2])
                    + (self.group2()[3] * other.group1()[1])
                    + (self.group2()[3] * other.group3()[1])
                    + (self.group3()[2] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[3])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group1()[1] * other.group0()[0])
                    + (self.group2()[3] * other.group1()[2])
                    + (self.group2()[3] * other.group3()[2])
                    + (self.group3()[0] * other.group0()[1])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group1()[3]]) * swizzle!(other.group1(), 3, 2, 0, 3))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group3(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group3(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]) * swizzle!(self.group1(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group3()[2]]) * swizzle!(self.group3(), 2, 1, 2, 2))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))
                - (Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group3()[1]]) * swizzle!(self.group3(), 0, 0, 1, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) - (self.group0()[1] * other.group2()[2])
                    + (self.group1()[2] * other.group1()[1])
                    + (self.group1()[3] * other.group3()[0])
                    + (self.group2()[2] * other.group0()[1])
                    + (self.group3()[2] * other.group3()[1])
                    + (self.group3()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group3()[3]) - (self.group0()[2] * other.group2()[0])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group1()[3] * other.group3()[1])
                    + (self.group2()[0] * other.group0()[2])
                    + (self.group3()[1] * other.group1()[3])
                    + (self.group3()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group2()[1])
                    + (self.group0()[2] * other.group3()[3])
                    + (self.group1()[2] * other.group0()[3])
                    + (self.group1()[3] * other.group3()[2])
                    + (self.group2()[1] * other.group0()[0])
                    + (self.group3()[2] * other.group1()[3])
                    + (self.group3()[3] * other.group0()[2])),
                (-(self.group1()[2] * other.group3()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    - (self.group2()[3] * other.group3()[3])
                    - (self.group3()[0] * other.group1()[0])
                    - (self.group3()[1] * other.group1()[1])
                    - (self.group3()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[2]]) * swizzle!(other.group2(), 0, 1, 2, 2))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[1]]) * swizzle!(other.group3(), 2, 0, 1, 1))
                + (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group0()[3]]) * swizzle!(self.group1(), 0, 0, 1, 3))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group3()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group2()[3]]) * swizzle!(self.group3(), 0, 0, 1, 3))
                - (swizzle!(self.group2(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group1()[0] * other.group3()[3]) + (self.group1()[2] * other.group2()[1]) + (self.group1()[3] * other.group2()[0]) + (self.group2()[2] * other.group1()[1])),
                ((self.group1()[0] * other.group2()[2]) + (self.group1()[1] * other.group3()[3]) + (self.group1()[3] * other.group2()[1]) + (self.group2()[2] * other.group3()[0])),
                ((self.group1()[1] * other.group2()[0]) + (self.group1()[2] * other.group3()[3]) + (self.group1()[3] * other.group2()[2]) + (self.group2()[2] * other.group0()[3])),
                (-(self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[2], self.group0()[1]]) * swizzle!(other.group1(), 2, 0, 3, 1))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[3]]) * swizzle!(other.group2(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group0()[1]]) * swizzle!(other.group3(), 0, 1, 2, 1))
                + (Simd32x4::from([other.group0()[3], other.group1()[2], other.group3()[1], other.group0()[3]]) * swizzle!(self.group2(), 0, 0, 0, 3))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]) * swizzle!(self.group3(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group2()[1], other.group3()[3], other.group3()[3], other.group0()[1]]) * swizzle!(self.group3(), 2, 1, 2, 1))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group3()[2], other.group0()[3], other.group1()[0], other.group1()[3]]) * swizzle!(self.group2(), 1, 1, 1, 3))
                + (Simd32x4::from([other.group3()[3], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group3(), 0, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[0] * other.group3()[3])
                    + (self.group0()[1] * other.group2()[2])
                    + (self.group1()[2] * other.group3()[1])
                    + (self.group1()[3] * other.group1()[0])
                    + (self.group3()[2] * other.group1()[1])
                    + (self.group3()[3] * other.group0()[0])),
                (-(self.group0()[1] * other.group3()[3])
                    + (self.group0()[2] * other.group2()[0])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[1])
                    + (self.group3()[1] * other.group0()[3])
                    + (self.group3()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[2] * other.group3()[3])
                    + (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])
                    + (self.group3()[2] * other.group0()[3])
                    + (self.group3()[3] * other.group0()[2])),
                (-(self.group2()[2] * other.group1()[2]) + (self.group2()[2] * other.group3()[2])
                    - (self.group3()[0] * other.group2()[0])
                    - (self.group3()[1] * other.group2()[1])
                    - (self.group3()[2] * other.group2()[2])
                    - (self.group3()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group1()[2]]) * swizzle!(other.group2(), 0, 1, 2, 2))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))
                + (Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group3()[1]]) * swizzle!(self.group2(), 2, 1, 2, 1))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group0()[3]]) * swizzle!(self.group3(), 0, 0, 1, 3))
                + (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group3()[3]]) * swizzle!(self.group1(), 0, 0, 1, 3))
                + (Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group2(), 0, 0, 1, 0))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl InfixSandwich for DualNum {}
impl Sandwich<AntiCircleRotor> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       53        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       15       56        0
    //  no simd       24       65        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[1] * other.group2()[3]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3] * -1.0),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[1] * other.group2()[0]),
                (self.group0()[1] * other.group2()[1]),
                (self.group0()[1] * other.group2()[2]),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group2()[0]),
                (self.group0()[0] * other.group2()[1]),
                (self.group0()[0] * other.group2()[2]),
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[0] * other.group2()[3])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       57        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       22       61        0
    //  no simd       31       73        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[0]) + (self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[0] * other.group3()[2]) - (self.group0()[1] * other.group0()[2])),
                (self.group0()[0] * other.group3()[3] * -1.0),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group1()[2])),
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group1()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group2()[0] * -1.0),
                (self.group0()[1] * other.group2()[1] * -1.0),
                (self.group0()[1] * other.group2()[2] * -1.0),
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group2()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group3()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group3()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group3()[2])),
                (self.group0()[1] * other.group3()[3] * -1.0),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for DualNum {
    type Output = AntiDualNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        7        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        let geometric_product = DualNum::from_groups(/* e4, e12345 */ Simd32x2::from([
            ((other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
            (other.group0()[1] * self.group0()[1]),
        ]));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       28        0
    //    simd4        1        6        0
    // Totals...
    // yes simd       11       34        0
    //  no simd       14       52        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e15, e25, e35, e1234
            (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       38        0
    //    simd4        3        8        0
    // Totals...
    // yes simd       12       46        0
    //  no simd       21       70        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self.group0()[0]) * other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3] * -1.0),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       46        0
    //    simd3        0        1        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       14       48        0
    //  no simd       17       53        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self.group0()[0]) * other.group0()),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[2])),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (self.group0()[1] * other.group1()[0]),
                (self.group0()[1] * other.group1()[1]),
                (self.group0()[1] * other.group1()[2]),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       42        0
    //    simd4        3        5        0
    // Totals...
    // yes simd       12       47        0
    //  no simd       21       62        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[0] * other.group1()[3]),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from(self.group0()[1]) * other.group1()),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       23        0
    //    simd4        3        8        0
    // Totals...
    // yes simd        8       31        0
    //  no simd       17       55        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self.group0()[0]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3])]),
            // e15, e25, e35, e1234
            Simd32x4::from(0.0),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group0()[1]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for DualNum {
    type Output = DualNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        3        0
    //    simd2        0        2        0
    // Totals...
    // yes simd        1        5        0
    //  no simd        1        7        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDualNum::from_groups(/* e1234, scalar */ (Simd32x2::from(other[e12345]) * self.group0() * Simd32x2::from(-1.0)));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       39        0
    //    simd3        1        2        0
    //    simd4        1        3        0
    // Totals...
    // yes simd       15       44        0
    //  no simd       20       57        0
    fn sandwich(self, other: Circle) -> Self::Output {
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (-(Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])) - (Simd32x3::from(self.group0()[1]) * other.group0())),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (self.group0()[1] * other.group2()[0]),
                (self.group0()[1] * other.group2()[1]),
                (self.group0()[1] * other.group2()[2]),
                (self.group0()[0] * other.group1()[3]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group2()[0]),
                (self.group0()[0] * other.group2()[1]),
                (self.group0()[0] * other.group2()[2]),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       48        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       15       52        0
    //  no simd       24       64        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group0()[2])),
                (self.group0()[1] * other.group2()[3] * -1.0),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group2()[0] * -1.0),
                (self.group0()[1] * other.group2()[1] * -1.0),
                (self.group0()[1] * other.group2()[2] * -1.0),
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[0] * other.group2()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group2()[0]),
                (self.group0()[0] * other.group2()[1]),
                (self.group0()[0] * other.group2()[2]),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       49        0
    //    simd3        1        2        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       15       52        0
    //  no simd       20       59        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])) + (Simd32x3::from(self.group0()[1]) * other.group0())),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3] * -1.0),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (self.group0()[1] * other.group2()[0]),
                (self.group0()[1] * other.group2()[1]),
                (self.group0()[1] * other.group2()[2]),
                (self.group0()[0] * other.group1()[3]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[0] * other.group2()[0]),
                (self.group0()[0] * other.group2()[1]),
                (self.group0()[0] * other.group2()[2]),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       52        0
    //    simd4        5        6        0
    // Totals...
    // yes simd       16       58        0
    //  no simd       31       76        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[0] * other.group3()[3]),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (self.group0()[1] * other.group1()[0]),
                (self.group0()[1] * other.group1()[1]),
                (self.group0()[1] * other.group1()[2]),
                ((self.group0()[1] * other.group1()[3]) * -1.0),
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))),
            // e235, e315, e125, e5
            (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]])),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[1] * other.group3()[0]) * -1.0),
                ((self.group0()[1] * other.group3()[1]) * -1.0),
                ((self.group0()[1] * other.group3()[2]) * -1.0),
                (self.group0()[1] * other.group2()[3]),
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for DualNum {
    type Output = DualNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        7        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        let geometric_product = AntiDualNum::from_groups(/* e1234, scalar */ Simd32x2::from([
            (-(other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
            (other.group0()[1] * self.group0()[1] * -1.0),
        ]));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       37        0
    //    simd4        1        4        0
    // Totals...
    // yes simd       11       41        0
    //  no simd       14       53        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e235, e315, e125, e4
            (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * other.group0()),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       42        0
    //    simd4        3        5        0
    // Totals...
    // yes simd       12       47        0
    //  no simd       21       62        0
    fn sandwich(self, other: Flector) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self.group0()[0]) * other.group1()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group0()[3])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group1()[2])),
                (self.group0()[0] * other.group0()[3]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       40        0
    //    simd3        0        2        0
    //    simd4        1        2        0
    // Totals...
    // yes simd       14       44        0
    //  no simd       17       54        0
    fn sandwich(self, other: Line) -> Self::Output {
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group0()[0]) * other.group0() * Simd32x3::from(-1.0)),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group0()[2])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group1()[0] * -1.0),
                (self.group0()[1] * other.group1()[1] * -1.0),
                (self.group0()[1] * other.group1()[2] * -1.0),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       41        0
    //    simd4        3        7        0
    // Totals...
    // yes simd       12       48        0
    //  no simd       21       69        0
    fn sandwich(self, other: Motor) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                (-(self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group0()[2])),
                (self.group0()[0] * other.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (self.group0()[1] * other.group1()[0]),
                (self.group0()[1] * other.group1()[1]),
                (self.group0()[1] * other.group1()[2]),
                (self.group0()[0] * other.group0()[3]),
            ]) * Simd32x4::from(-1.0)),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for DualNum {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       22       77        0
    //    simd3       10       18        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       35       98        0
    //  no simd       64      143        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group0()[0] * other[e1]) - (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group9()[3]) + (self.group0()[1] * other.group0()[0])),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[1] * other.group9()[0]) * -1.0),
                ((self.group0()[1] * other.group9()[1]) * -1.0),
                ((self.group0()[1] * other.group9()[2]) * -1.0),
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other[e45])),
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[0]]))),
            // e5
            (self.group0()[1] * other.group9()[3]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group0()[1] * other.group8()[0] * -1.0),
                (self.group0()[1] * other.group8()[1] * -1.0),
                (self.group0()[1] * other.group8()[2] * -1.0),
                ((self.group0()[0] * other[e1]) + (self.group0()[1] * other.group6()[3])),
            ]),
            // e41, e42, e43
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                - (Simd32x3::from(self.group0()[1]) * other.group7())),
            // e23, e31, e12
            (-(Simd32x3::from(self.group0()[0]) * other.group8()) - (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (self.group0()[1] * other.group5()[0]),
                (self.group0()[1] * other.group5()[1]),
                (self.group0()[1] * other.group5()[2]),
                ((self.group0()[1] * other.group3()[3]) * -1.0),
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group9()[3]]))),
            // e423, e431, e412
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                + (Simd32x3::from(self.group0()[0]) * other.group5())
                + (Simd32x3::from(self.group0()[1]) * other.group4())),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group8()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group8()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group8()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other[e1] * -1.0),
            ]),
            // e1234
            (-(self.group0()[0] * other.group0()[1]) + (self.group0()[0] * other.group6()[3]) - (self.group0()[1] * other.group1()[3])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       38        0
    //    simd4        3        4        0
    // Totals...
    // yes simd        8       42        0
    //  no simd       17       54        0
    fn sandwich(self, other: Plane) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self.group0()[0]) * other.group0()),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3])]),
            // e235, e315, e125, e5
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group0()[3])]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[1] * -1.0),
                (self.group0()[1] * other.group0()[2] * -1.0),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       25        0
    //    simd4        3        8        0
    // Totals...
    // yes simd        8       33        0
    //  no simd       17       57        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other[e2]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other[e2])]),
            // e15, e25, e35, e1234
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group0()[3] * -1.0)]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other[e2]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for DualNum {
    type Output = AntiDualNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        4        0
    //    simd2        0        1        0
    // Totals...
    // yes simd        1        5        0
    //  no simd        1        6        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DualNum::from_groups(/* e4, e12345 */ (Simd32x2::from(other[scalar]) * self.group0()));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       32        0
    //    simd4        3        6        0
    // Totals...
    // yes simd        8       38        0
    //  no simd       17       56        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self.group0()[0]) * other.group0()),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3])]),
            // e235, e315, e125, e5
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group0()[3])]),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other[e4315]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       50        0
    //    simd4        5        6        0
    // Totals...
    // yes simd       19       56        0
    //  no simd       34       74        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (self.group0()[0] * other.group3()[0]),
                (self.group0()[0] * other.group3()[1]),
                (self.group0()[0] * other.group3()[2]),
                0.0,
            ]) - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                - (Simd32x4::from(self.group0()[1]) * other.group0())),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group1()[2])),
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group1()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group2()[0] * -1.0),
                (self.group0()[1] * other.group2()[1] * -1.0),
                (self.group0()[1] * other.group2()[2] * -1.0),
                (-(self.group0()[0] * other.group0()[3]) + (self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group3()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group3()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group3()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group3()[2])),
                (self.group0()[1] * other.group2()[3] * -1.0),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       46        0
    //    simd4        7        8        0
    // Totals...
    // yes simd       13       54        0
    //  no simd       34       78        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (self.group0()[0] * other.group3()[0]),
                (self.group0()[0] * other.group3()[1]),
                (self.group0()[0] * other.group3()[2]),
                0.0,
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + (Simd32x4::from(self.group0()[1]) * other.group0())),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (self.group0()[1] * other.group1()[0]),
                (self.group0()[1] * other.group1()[1]),
                (self.group0()[1] * other.group1()[2]),
                ((self.group0()[1] * other.group1()[3]) * -1.0),
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))),
            // e235, e315, e125, e5
            (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]])),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[1] * other.group3()[0]) * -1.0),
                ((self.group0()[1] * other.group3()[1]) * -1.0),
                ((self.group0()[1] * other.group3()[2]) * -1.0),
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group2()[3])),
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[3]]))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl InfixSandwich for FlatPoint {}
impl Sandwich<AntiCircleRotor> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       82        0
    //    simd4        8        9        0
    // Totals...
    // yes simd       56       91        0
    //  no simd       80      118        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3] * -1.0),
                (other.group0()[1] * self.group0()[3] * -1.0),
                (other.group0()[2] * self.group0()[3] * -1.0),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])
                    + (other.group1()[3] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([0.0, 0.0, 0.0, (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]))])
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group2()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1]) - (other.group1()[3] * self.group0()[0])
                    + (other.group2()[0] * self.group0()[3])
                    + (other.group2()[3] * self.group0()[0])),
                (-(other.group1()[0] * self.group0()[2]) + (other.group1()[2] * self.group0()[0]) - (other.group1()[3] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[3])
                    + (other.group2()[3] * self.group0()[1])),
                ((other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0]) - (other.group1()[3] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[3])
                    + (other.group2()[3] * self.group0()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) + (other.group1()[0] * self.group0()[3])),
                ((other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[1]) + (other.group1()[2] * self.group0()[3])),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       72        0
    //    simd4       13       15        0
    // Totals...
    // yes simd       53       87        0
    //  no simd       92      132        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3] * -1.0),
                (other.group0()[1] * self.group0()[3] * -1.0),
                (other.group0()[2] * self.group0()[3] * -1.0),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group1()[3] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[2] * self.group0()[1]) - (other.group3()[0] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group3()[1] * self.group0()[3])),
                (-(other.group0()[1] * self.group0()[0]) - (other.group3()[2] * self.group0()[3])),
                (other.group0()[2] * self.group0()[2]),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group1()[3] * self.group0()[0]) + (other.group2()[0] * self.group0()[3]) + (other.group3()[1] * self.group0()[2])),
                ((other.group1()[3] * self.group0()[1]) + (other.group2()[1] * self.group0()[3]) + (other.group3()[2] * self.group0()[0])),
                ((other.group1()[3] * self.group0()[2]) + (other.group2()[2] * self.group0()[3]) + (other.group3()[0] * self.group0()[1])),
                (-(other.group1()[2] * self.group0()[2])
                    - (other.group3()[0] * self.group0()[0])
                    - (other.group3()[1] * self.group0()[1])
                    - (other.group3()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])
                    - (other.group1()[0] * self.group0()[3])
                    - (other.group2()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) - (other.group1()[1] * self.group0()[3]) - (other.group2()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])
                    - (other.group1()[2] * self.group0()[3])
                    - (other.group2()[3] * self.group0()[2])),
                (other.group2()[3] * self.group0()[3] * -1.0),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       25       46        0
    //    simd4        5        9        0
    // Totals...
    // yes simd       30       55        0
    //  no simd       45       82        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]) * self.group0()),
            // e15, e25, e35, e1234
            (Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[0]]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for FlatPoint {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       32        0
    //    simd4        0        1        0
    // Totals...
    // yes simd       15       33        0
    //  no simd       15       36        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[3] * self.group0()[3] * -1.0)]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[3]) + (other.group0()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group0()[3]) + (other.group0()[3] * self.group0()[2])),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for FlatPoint {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       32        0
    //    simd4        2        5        0
    // Totals...
    // yes simd       18       37        0
    //  no simd       24       52        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]) * Simd32x4::from(-1.0)),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[3] * self.group0()[0]) + (other.group1()[1] * self.group0()[2])),
                ((other.group0()[3] * self.group0()[1]) + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[3] * self.group0()[2]) + (other.group1()[0] * self.group0()[1])),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for FlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       23        0
    //    simd4        2        4        0
    // Totals...
    // yes simd       14       27        0
    //  no simd       20       39        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) + (other.group1()[0] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) + (other.group1()[2] * self.group0()[3])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for FlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       28        0
    //    simd4        2        4        0
    // Totals...
    // yes simd       18       32        0
    //  no simd       24       44        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) + (other.group0()[3] * self.group0()[0]) + (other.group1()[0] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[2])
                    + (other.group0()[2] * self.group0()[0])
                    + (other.group0()[3] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) + (other.group0()[3] * self.group0()[2]) + (other.group1()[2] * self.group0()[3])),
                (other.group0()[3] * self.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])
                    + (other.group1()[3] * self.group0()[3])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for FlatPoint {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       32        0
    //    simd4        2        3        0
    // Totals...
    // yes simd       15       35        0
    //  no simd       21       44        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3] * -1.0),
                (other.group0()[1] * self.group0()[3] * -1.0),
                (other.group0()[2] * self.group0()[3] * -1.0),
                0.0,
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([0.0, 0.0, 0.0, (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]))])
                + (swizzle!(other.group0(), 1, 2, 0, 3) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for FlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        8        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        3       11        0
    //  no simd        3       20        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlatPoint::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from(other[e12345]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       33       66        0
    //    simd4       10       12        0
    // Totals...
    // yes simd       43       78        0
    //  no simd       73      114        0
    fn sandwich(self, other: Circle) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3] * -1.0),
                (other.group0()[1] * self.group0()[3] * -1.0),
                (other.group0()[2] * self.group0()[3] * -1.0),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group1()[3] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) * -1.0),
                ((other.group0()[0] * self.group0()[2]) * -1.0),
                ((other.group0()[1] * self.group0()[0]) * -1.0),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group2()[0] * self.group0()[3]) + (other.group1()[1] * self.group0()[2]) + (other.group1()[3] * self.group0()[0])),
                ((other.group2()[1] * self.group0()[3]) + (other.group1()[2] * self.group0()[0]) + (other.group1()[3] * self.group0()[1])),
                ((other.group2()[2] * self.group0()[3]) + (other.group1()[0] * self.group0()[1]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) - (other.group1()[0] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) - (other.group1()[1] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) - (other.group1()[2] * self.group0()[3])),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       63        0
    //    simd4       11       13        0
    // Totals...
    // yes simd       47       76        0
    //  no simd       80      115        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3] * -1.0),
                (other.group0()[1] * self.group0()[3] * -1.0),
                (other.group0()[2] * self.group0()[3] * -1.0),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group1()[3] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([0.0, 0.0, 0.0, ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]))])
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group1()[1] * self.group0()[2]) + (other.group1()[3] * self.group0()[0]) + (other.group2()[0] * self.group0()[3]) + (other.group2()[3] * self.group0()[0])),
                ((other.group1()[2] * self.group0()[0]) + (other.group1()[3] * self.group0()[1]) + (other.group2()[1] * self.group0()[3]) + (other.group2()[3] * self.group0()[1])),
                ((other.group1()[0] * self.group0()[1]) + (other.group1()[3] * self.group0()[2]) + (other.group2()[2] * self.group0()[3]) + (other.group2()[3] * self.group0()[2])),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) - (other.group1()[0] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) - (other.group1()[1] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) - (other.group1()[2] * self.group0()[3])),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       45       82        0
    //    simd4        7        8        0
    // Totals...
    // yes simd       52       90        0
    //  no simd       73      114        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3] * -1.0),
                (other.group0()[1] * self.group0()[3] * -1.0),
                (other.group0()[2] * self.group0()[3] * -1.0),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])
                    + (other.group1()[3] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (other.group0()[1] * self.group0()[2]),
                (other.group0()[2] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group2()[0] * self.group0()[3]) + (other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1]) - (other.group1()[3] * self.group0()[0])),
                ((other.group2()[1] * self.group0()[3]) - (other.group1()[0] * self.group0()[2]) + (other.group1()[2] * self.group0()[0]) - (other.group1()[3] * self.group0()[1])),
                ((other.group2()[2] * self.group0()[3]) + (other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0]) - (other.group1()[3] * self.group0()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) + (other.group1()[0] * self.group0()[3])),
                ((other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[1]) + (other.group1()[2] * self.group0()[3])),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       55       91        0
    //    simd4       10       11        0
    // Totals...
    // yes simd       65      102        0
    //  no simd       95      135        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3] * -1.0),
                (other.group0()[1] * self.group0()[3] * -1.0),
                (other.group0()[2] * self.group0()[3] * -1.0),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])
                    + (other.group1()[3] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) + (other.group2()[3] * self.group0()[0]) + (other.group3()[0] * self.group0()[3])),
                ((other.group0()[2] * self.group0()[0]) + (other.group2()[3] * self.group0()[1]) + (other.group3()[1] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[1]) + (other.group2()[3] * self.group0()[2]) + (other.group3()[2] * self.group0()[3])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1]) - (other.group1()[3] * self.group0()[0]) + (other.group2()[0] * self.group0()[3])
                    - (other.group3()[1] * self.group0()[2])
                    + (other.group3()[2] * self.group0()[1])),
                (-(other.group1()[0] * self.group0()[2]) + (other.group1()[2] * self.group0()[0]) - (other.group1()[3] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[3])
                    + (other.group3()[0] * self.group0()[2])
                    - (other.group3()[2] * self.group0()[0])),
                ((other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0]) - (other.group1()[3] * self.group0()[2]) + (other.group2()[2] * self.group0()[3])
                    - (other.group3()[0] * self.group0()[1])
                    + (other.group3()[1] * self.group0()[0])),
                (other.group2()[3] * self.group0()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2]) + (other.group3()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group3()[2]]) * swizzle!(self.group0(), 0, 1, 2, 2))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       35        0
    //    simd4        8       13        0
    // Totals...
    // yes simd       23       48        0
    //  no simd       47       87        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e235, e315, e125, e4
            (Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[0]]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for FlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       27        0
    //    simd4        0        1        0
    // Totals...
    // yes simd       15       28        0
    //  no simd       15       31        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[3] * self.group0()[3])]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[3]) - (other.group0()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group0()[3]) - (other.group0()[3] * self.group0()[2])),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for FlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       28        0
    //    simd4        2        4        0
    // Totals...
    // yes simd       18       32        0
    //  no simd       24       44        0
    fn sandwich(self, other: Flector) -> Self::Output {
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]])),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group0()[3])),
                (-(self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group0()[3])),
                ((self.group0()[2] * other.group1()[2]) + (self.group0()[3] * other.group1()[3])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                + (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group1(), 2, 0, 1, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for FlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       26        0
    //    simd4        2        5        0
    // Totals...
    // yes simd       14       31        0
    //  no simd       20       46        0
    fn sandwich(self, other: Line) -> Self::Output {
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) + (other.group1()[0] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) + (other.group1()[2] * self.group0()[3])),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3] * -1.0),
                (other.group0()[1] * self.group0()[3] * -1.0),
                (other.group0()[2] * self.group0()[3] * -1.0),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for FlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       32        0
    //    simd4        2        5        0
    // Totals...
    // yes simd       18       37        0
    //  no simd       24       52        0
    fn sandwich(self, other: Motor) -> Self::Output {
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1]) + (self.group0()[3] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[3]) - (self.group0()[2] * other.group0()[0]) + (self.group0()[3] * other.group1()[1])),
                (-(self.group0()[0] * other.group0()[1])
                    + (self.group0()[1] * other.group0()[0])
                    + (self.group0()[2] * other.group0()[3])
                    + (self.group0()[3] * other.group1()[2])),
                (self.group0()[3] * other.group0()[3] * -1.0),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group0()[3] * other.group1()[3])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for FlatPoint {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       67      115        0
    //    simd2        6        6        0
    //    simd3       14       22        0
    //    simd4       19       20        0
    // Totals...
    // yes simd      106      163        0
    //  no simd      197      273        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([(self.group0()[3] * other.group3()[3]), ((self.group0()[3] * other.group6()[3]) * -1.0)])
                - (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group4()[0], other.group7()[0]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group4()[1], other.group7()[1]]))
                - (Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group4()[2], other.group7()[2]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group7()[1] * self.group0()[2]) + (other.group7()[2] * self.group0()[1])
                    - (self.group0()[0] * other.group1()[3])
                    - (self.group0()[3] * other.group6()[0])),
                ((other.group7()[0] * self.group0()[2]) - (other.group7()[2] * self.group0()[0]) - (self.group0()[1] * other.group1()[3]) - (self.group0()[3] * other.group6()[1])),
                (-(other.group7()[0] * self.group0()[1]) + (other.group7()[1] * self.group0()[0])
                    - (self.group0()[2] * other.group1()[3])
                    - (self.group0()[3] * other.group6()[2])),
                (self.group0()[3] * other.group1()[3] * -1.0),
            ]),
            // e5
            (-(self.group0()[0] * other.group1()[0])
                - (self.group0()[0] * other.group6()[0])
                - (self.group0()[1] * other.group1()[1])
                - (self.group0()[1] * other.group6()[1])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[2] * other.group6()[2])
                + (self.group0()[3] * other[e1])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group5()[1] * self.group0()[2]) + (self.group0()[1] * other.group9()[2]) + (self.group0()[3] * other.group3()[0])),
                ((other.group5()[2] * self.group0()[0]) + (self.group0()[2] * other.group9()[0]) + (self.group0()[3] * other.group3()[1])),
                ((other.group5()[0] * self.group0()[1]) + (self.group0()[0] * other.group9()[1]) + (self.group0()[3] * other.group3()[2])),
                0.0,
            ]) + (Simd32x4::from(other.group0()[0]) * self.group0())
                - (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group4()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group3()[3], other.group9()[2], other.group9()[0], other.group4()[1]]) * swizzle!(self.group0(), 0, 0, 1, 1))
                - (Simd32x4::from([other.group9()[1], other.group3()[3], other.group3()[3], other.group4()[2]]) * swizzle!(self.group0(), 2, 1, 2, 2))),
            // e41, e42, e43
            (Simd32x3::from(self.group0()[3]) * other.group4() * Simd32x3::from(-1.0)),
            // e23, e31, e12
            ((Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group4(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group4(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[3] * other.group1()[0]) * -1.0),
                ((self.group0()[3] * other.group1()[1]) * -1.0),
                ((self.group0()[3] * other.group1()[2]) * -1.0),
                (other.group7()[2] * self.group0()[2]),
            ]) + (Simd32x4::from([other.group7()[1], other.group7()[2], other.group7()[0], other.group7()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group7()[2], other.group7()[0], other.group7()[1], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group7()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[3]) * other.group7() * Simd32x3::from(-1.0)),
            // e235, e315, e125
            (Simd32x3::from([
                (-(self.group0()[1] * other.group1()[2]) - (self.group0()[1] * other.group6()[2])
                    + (self.group0()[2] * other.group1()[1])
                    + (self.group0()[2] * other.group6()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[0] * other.group6()[2]) - (self.group0()[2] * other.group1()[0]) - (self.group0()[2] * other.group6()[0])),
                (-(self.group0()[0] * other.group1()[1]) - (self.group0()[0] * other.group6()[1])
                    + (self.group0()[1] * other.group1()[0])
                    + (self.group0()[1] * other.group6()[0])),
            ]) + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self.group0()[3]) * other.group8())
                + (Simd32x3::from(other.group6()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(other.group5()[1] * self.group0()[1]) - (other.group5()[2] * self.group0()[2]) + (self.group0()[3] * other.group9()[3])),
            ]) + (Simd32x4::from([other.group4()[1], other.group4()[2], other.group4()[0], other.group9()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group4()[2], other.group4()[0], other.group4()[1], other.group5()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group9()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([other[e45], other[e45], other[e45], other.group9()[2]]) * swizzle!(self.group0(), 0, 1, 2, 2))),
            // e1234
            (self.group0()[3] * other[e45] * -1.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for FlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       32        0
    //    simd4        1        2        0
    // Totals...
    // yes simd       15       34        0
    //  no simd       18       40        0
    fn sandwich(self, other: Plane) -> Self::Output {
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                ((self.group0()[2] * other.group0()[1]) * -1.0),
                ((self.group0()[0] * other.group0()[2]) * -1.0),
                ((self.group0()[1] * other.group0()[0]) * -1.0),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
            ]) + (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       53        0
    //    simd4        8        9        0
    // Totals...
    // yes simd       32       62        0
    //  no simd       56       89        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) - (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group0()[2])),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other.group0()[3] * -1.0),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other[e2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for FlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        7        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        3        9        0
    //  no simd        3       15        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = FlatPoint::from_groups(/* e15, e25, e35, e45 */ (Simd32x4::from(other[scalar]) * self.group0()));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       34       64        0
    //    simd4        5        6        0
    // Totals...
    // yes simd       39       70        0
    //  no simd       54       88        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other[e4315]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other[e4315]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other[e4315]) + (self.group0()[3] * other.group0()[2])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other[e4315] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other[e4315]),
                (self.group0()[1] * other[e4315]),
                (self.group0()[2] * other[e4315]),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       75        0
    //    simd4       14       16        0
    // Totals...
    // yes simd       54       91        0
    //  no simd       96      139        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[3] * other.group1()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[3] * other.group3()[0]) * -1.0),
                ((self.group0()[3] * other.group3()[1]) * -1.0),
                ((self.group0()[3] * other.group3()[2]) * -1.0),
                (self.group0()[2] * other.group0()[2]),
            ]) + (Simd32x4::from([other.group0()[1], other.group3()[3], other.group3()[3], other.group0()[1]]) * swizzle!(self.group0(), 2, 1, 2, 1))
                + (Simd32x4::from([other.group3()[3], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group0(), 0, 0, 1, 0))
                - (swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[2] * other.group1()[1]) + (self.group0()[2] * other.group3()[1]) + (self.group0()[3] * other.group2()[0])),
                ((self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group0()[3]) + (self.group0()[1] * other.group1()[3]) + (self.group0()[3] * other.group2()[1])),
                ((self.group0()[1] * other.group3()[0]) + (self.group0()[2] * other.group0()[3]) + (self.group0()[2] * other.group1()[3]) + (self.group0()[3] * other.group2()[2])),
                (-(self.group0()[1] * other.group1()[1])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group2()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))
                - (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group3(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group0()[2])
                    - (self.group0()[2] * other.group0()[1])
                    - (self.group0()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group3()[3]) + (self.group0()[2] * other.group0()[0])
                    - (self.group0()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group3()[3]) - (self.group0()[3] * other.group1()[2])),
                (self.group0()[3] * other.group3()[3] * -1.0),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       55       91        0
    //    simd4       11       12        0
    // Totals...
    // yes simd       66      103        0
    //  no simd       99      139        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group0()[3] * other.group1()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[2] * other.group0()[1]) + (self.group0()[3] * other.group3()[0])),
                ((self.group0()[1] * other.group2()[3]) + (self.group0()[3] * other.group3()[1])),
                ((self.group0()[2] * other.group2()[3]) + (self.group0()[3] * other.group3()[2])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group0()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))
                - (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group1()[2])
                    + (self.group0()[1] * other.group3()[2])
                    + (self.group0()[2] * other.group1()[1])
                    - (self.group0()[2] * other.group3()[1])
                    + (self.group0()[3] * other.group2()[0])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group0()[3])
                    - (self.group0()[1] * other.group1()[3])
                    - (self.group0()[2] * other.group1()[0])
                    + (self.group0()[2] * other.group3()[0])
                    + (self.group0()[3] * other.group2()[1])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group1()[0])
                    - (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group0()[3])
                    - (self.group0()[2] * other.group1()[3])
                    + (self.group0()[3] * other.group2()[2])),
                (self.group0()[3] * other.group2()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2]) + (self.group0()[3] * other.group3()[3])),
            ]) + (Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group3()[1]]) * swizzle!(self.group0(), 2, 1, 2, 1))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[2]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group0(), 0, 0, 1, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl InfixSandwich for Flector {}
impl Sandwich<AntiCircleRotor> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       80      116        0
    //    simd4       26       27        0
    // Totals...
    // yes simd      106      143        0
    //  no simd      184      224        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]) + (other.group1()[3] * self.group0()[3])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group1()[3] * self.group1()[0])),
                ((other.group0()[1] * self.group1()[3]) + (other.group1()[3] * self.group1()[1])),
                ((other.group0()[2] * self.group1()[3]) + (other.group1()[3] * self.group1()[2])),
                (-(other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group2()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1]) - (other.group1()[3] * self.group0()[0]) + (other.group2()[0] * self.group0()[3])
                    - (other.group2()[2] * self.group1()[1])
                    + (other.group2()[3] * self.group0()[0])),
                (-(other.group1()[0] * self.group0()[2]) + (other.group1()[2] * self.group0()[0])
                    - (other.group1()[3] * self.group0()[1])
                    - (other.group2()[0] * self.group1()[2])
                    + (other.group2()[1] * self.group0()[3])
                    + (other.group2()[3] * self.group0()[1])),
                ((other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0]) - (other.group1()[3] * self.group0()[2]) - (other.group2()[1] * self.group1()[0])
                    + (other.group2()[2] * self.group0()[3])
                    + (other.group2()[3] * self.group0()[2])),
                (other.group0()[2] * self.group1()[2]),
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[1]]) * swizzle!(self.group1(), 2, 0, 1, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) + (other.group1()[0] * self.group0()[3]) + (other.group1()[1] * self.group1()[2]) + (other.group2()[3] * self.group1()[0])),
                ((other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3]) + (other.group1()[2] * self.group1()[0]) + (other.group2()[3] * self.group1()[1])),
                ((other.group0()[0] * self.group0()[1]) + (other.group1()[0] * self.group1()[1]) + (other.group1()[2] * self.group0()[3]) + (other.group2()[3] * self.group1()[2])),
                (-(other.group1()[2] * self.group0()[2])
                    - (other.group1()[3] * self.group1()[3])
                    - (other.group2()[0] * self.group1()[0])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[2] * self.group1()[2])),
            ]) + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       73      104        0
    //    simd4       36       37        0
    // Totals...
    // yes simd      109      141        0
    //  no simd      217      252        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) - (other.group2()[3] * self.group1()[0])),
                (-(other.group0()[2] * self.group1()[0]) - (other.group2()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group1()[1]) - (other.group2()[3] * self.group1()[2])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]) - (other.group1()[3] * self.group0()[3])
                    + (other.group3()[0] * self.group1()[0])
                    + (other.group3()[1] * self.group1()[1])
                    + (other.group3()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group1(), 1, 2, 0, 3))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[2] * self.group0()[1]) - (other.group3()[0] * self.group0()[3]) - (other.group3()[1] * self.group1()[2])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group3()[1] * self.group0()[3]) - (other.group3()[2] * self.group1()[0])),
                (-(other.group0()[1] * self.group0()[0]) - (other.group3()[0] * self.group1()[1]) - (other.group3()[2] * self.group0()[3])),
                ((other.group0()[2] * self.group0()[2]) + (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[3]]) * self.group1())
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))
                + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group1()[3] * self.group0()[0])
                    + (other.group2()[0] * self.group0()[3])
                    + (other.group2()[1] * self.group1()[2])
                    + (other.group3()[0] * self.group1()[3])
                    + (other.group3()[1] * self.group0()[2])
                    + (other.group3()[3] * self.group1()[0])),
                ((other.group1()[3] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[3])
                    + (other.group2()[2] * self.group1()[0])
                    + (other.group3()[1] * self.group1()[3])
                    + (other.group3()[2] * self.group0()[0])
                    + (other.group3()[3] * self.group1()[1])),
                ((other.group1()[2] * self.group1()[3])
                    + (other.group2()[0] * self.group1()[1])
                    + (other.group2()[2] * self.group0()[3])
                    + (other.group3()[0] * self.group0()[1])
                    + (other.group3()[2] * self.group1()[3])
                    + (other.group3()[3] * self.group1()[2])),
                (-(other.group1()[2] * self.group0()[2])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group3()[0] * self.group0()[0])
                    - (other.group3()[1] * self.group0()[1])
                    - (other.group3()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[3], other.group3()[3]]) * swizzle!(self.group0(), 2, 0, 2, 3))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group0()[1], self.group1()[3]]) * swizzle!(other.group1(), 0, 1, 0, 3))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (swizzle!(other.group2(), 2, 0, 1, 0) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[2] * self.group0()[1])
                    - (other.group1()[0] * self.group0()[3])
                    - (other.group1()[1] * self.group1()[2])
                    - (other.group2()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[2])
                    - (other.group0()[1] * self.group1()[3])
                    - (other.group1()[1] * self.group0()[3])
                    - (other.group1()[2] * self.group1()[0])
                    - (other.group2()[3] * self.group0()[1])),
                ((other.group0()[1] * self.group0()[0])
                    - (other.group0()[2] * self.group1()[3])
                    - (other.group1()[0] * self.group1()[1])
                    - (other.group1()[2] * self.group0()[3])
                    - (other.group2()[3] * self.group0()[2])),
                ((other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group2()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44       72        0
    //    simd4       18       23        0
    // Totals...
    // yes simd       62       95        0
    //  no simd      116      164        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(other.group0()[0]) * self.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            (Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[0]]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group1()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for Flector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       24        0
    //    simd4       10       13        0
    // Totals...
    // yes simd       26       37        0
    //  no simd       56       76        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]) * Simd32x4::from(-1.0)),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) + (other.group0()[3] * self.group0()[0])),
                ((other.group0()[2] * self.group1()[0]) + (other.group0()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group0()[3]) + (other.group0()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group1()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group1(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for Flector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       40        0
    //    simd4       14       15        0
    // Totals...
    // yes simd       42       55        0
    //  no simd       84      100        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from([
                (-(other.group1()[0] * self.group0()[3]) - (other.group1()[1] * self.group1()[2])),
                (-(other.group1()[1] * self.group0()[3]) - (other.group1()[2] * self.group1()[0])),
                (-(other.group1()[0] * self.group1()[1]) - (other.group1()[2] * self.group0()[3])),
                ((other.group1()[1] * self.group1()[1]) + (other.group1()[2] * self.group1()[2])),
            ]) - (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]))
                + (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) + (other.group1()[0] * self.group1()[3]) + (other.group1()[1] * self.group0()[2]) + (other.group1()[3] * self.group1()[0])),
                ((other.group0()[2] * self.group1()[0]) + (other.group1()[1] * self.group1()[3]) + (other.group1()[2] * self.group0()[0]) + (other.group1()[3] * self.group1()[1])),
                ((other.group0()[3] * self.group0()[2]) + (other.group1()[0] * self.group0()[1]) + (other.group1()[2] * self.group1()[3]) + (other.group1()[3] * self.group1()[2])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[2], other.group1()[3]]) * swizzle!(self.group0(), 0, 1, 3, 3))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group1()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for Flector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       44        0
    //    simd4       10       11        0
    // Totals...
    // yes simd       38       55        0
    //  no simd       68       88        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])
                    + (other.group1()[0] * self.group0()[3])
                    + (other.group1()[1] * self.group1()[2])),
                (-(other.group0()[0] * self.group0()[2])
                    + (other.group0()[1] * self.group1()[3])
                    + (other.group0()[2] * self.group0()[0])
                    + (other.group1()[1] * self.group0()[3])
                    + (other.group1()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group1()[0] * self.group1()[1])
                    + (other.group1()[2] * self.group0()[3])),
                (-(other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group1()[2])),
                ((other.group0()[1] * self.group0()[3]) + (other.group0()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for Flector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       45        0
    //    simd4       13       14        0
    // Totals...
    // yes simd       41       59        0
    //  no simd       80      101        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2])
                    + (other.group0()[3] * self.group0()[0])
                    + (other.group1()[0] * self.group0()[3])
                    + (other.group1()[1] * self.group1()[2])
                    + (other.group1()[3] * self.group1()[0])),
                ((other.group0()[2] * self.group0()[0])
                    + (other.group0()[3] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[3])
                    + (other.group1()[2] * self.group1()[0])
                    + (other.group1()[3] * self.group1()[1])),
                ((other.group0()[2] * self.group1()[3])
                    + (other.group0()[3] * self.group0()[2])
                    + (other.group1()[0] * self.group1()[1])
                    + (other.group1()[2] * self.group0()[3])
                    + (other.group1()[3] * self.group1()[2])),
                ((other.group0()[2] * self.group1()[2]) * -1.0),
            ]) - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group0()[1], self.group0()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) + (other.group0()[3] * self.group1()[0])),
                ((other.group0()[2] * self.group1()[0]) + (other.group0()[3] * self.group1()[1])),
                ((other.group0()[2] * self.group0()[3]) + (other.group0()[3] * self.group1()[2])),
                (-(other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    + (other.group1()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group1()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for Flector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       32        0
    //    simd4       11       12        0
    // Totals...
    // yes simd       31       44        0
    //  no simd       64       80        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group1()[2])),
                (-(other.group0()[1] * self.group0()[3]) - (other.group0()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group1()[1]) - (other.group0()[2] * self.group0()[3])),
                ((other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2])),
            ]) + (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) + (other.group0()[3] * self.group1()[0])),
                ((other.group0()[2] * self.group0()[0]) + (other.group0()[3] * self.group1()[1])),
                ((other.group0()[2] * self.group1()[3]) + (other.group0()[3] * self.group1()[2])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group0()[1], self.group0()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for Flector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       24        0
    //    simd4        6       11        0
    // Totals...
    // yes simd       22       35        0
    //  no simd       40       68        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from(other[e12345]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e1, e2, e3, e5
            (Simd32x4::from(other[e12345]) * self.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       61       92        0
    //    simd4       29       30        0
    // Totals...
    // yes simd       90      122        0
    //  no simd      177      212        0
    fn sandwich(self, other: Circle) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]) - (other.group1()[3] * self.group0()[3])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[2] * self.group0()[1]) - (other.group1()[3] * self.group1()[0])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group1()[3] * self.group1()[1])),
                (-(other.group0()[1] * self.group0()[0]) - (other.group1()[3] * self.group1()[2])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) + (other.group1()[1] * self.group1()[1]) + (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group2()[0] * self.group0()[3]) + (other.group1()[0] * self.group1()[3]) + (other.group1()[1] * self.group0()[2]) + (other.group1()[3] * self.group0()[0])),
                ((other.group2()[1] * self.group0()[3]) + (other.group1()[1] * self.group1()[3]) + (other.group1()[2] * self.group0()[0]) + (other.group1()[3] * self.group0()[1])),
                ((other.group2()[2] * self.group0()[3]) + (other.group1()[0] * self.group0()[1]) + (other.group1()[2] * self.group1()[3]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group2()[1] * self.group1()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group2()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])
                    - (other.group1()[0] * self.group0()[3])
                    - (other.group1()[1] * self.group1()[2])),
                ((other.group0()[0] * self.group0()[2])
                    - (other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[3])
                    - (other.group1()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])
                    - (other.group0()[2] * self.group1()[3])
                    - (other.group1()[0] * self.group1()[1])
                    - (other.group1()[2] * self.group0()[3])),
                ((other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       61       95        0
    //    simd4       31       32        0
    // Totals...
    // yes simd       92      127        0
    //  no simd      185      223        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]) - (other.group1()[3] * self.group0()[3])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group1()[3] * self.group1()[0]) * -1.0),
                ((other.group1()[3] * self.group1()[1]) * -1.0),
                ((other.group1()[3] * self.group1()[2]) * -1.0),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) + (other.group1()[1] * self.group1()[1]) + (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group1()[1] * self.group0()[2]) + (other.group1()[3] * self.group0()[0]) + (other.group2()[1] * self.group1()[2]) + (other.group2()[3] * self.group0()[0])),
                ((other.group1()[2] * self.group0()[0]) + (other.group1()[3] * self.group0()[1]) + (other.group2()[2] * self.group1()[0]) + (other.group2()[3] * self.group0()[1])),
                ((other.group1()[2] * self.group1()[3]) + (other.group1()[3] * self.group0()[2]) + (other.group2()[2] * self.group0()[3]) + (other.group2()[3] * self.group0()[2])),
                (-(other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group1()[3]]) * swizzle!(other.group2(), 0, 1, 0, 3))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group0()[1], self.group1()[3]]) * swizzle!(other.group1(), 0, 1, 0, 3))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (swizzle!(other.group2(), 2, 0, 1, 0) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])
                    - (other.group1()[0] * self.group0()[3])
                    - (other.group1()[1] * self.group1()[2])
                    - (other.group2()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group0()[2])
                    - (other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[3])
                    - (other.group1()[2] * self.group1()[0])
                    - (other.group2()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])
                    - (other.group0()[2] * self.group1()[3])
                    - (other.group1()[0] * self.group1()[1])
                    - (other.group1()[2] * self.group0()[3])
                    - (other.group2()[3] * self.group1()[2])),
                ((other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       80      116        0
    //    simd4       24       25        0
    // Totals...
    // yes simd      104      141        0
    //  no simd      176      216        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]) + (other.group1()[3] * self.group0()[3])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group0()[2]) + (other.group1()[3] * self.group1()[0])),
                ((other.group0()[1] * self.group1()[3]) + (other.group0()[2] * self.group0()[0]) + (other.group1()[3] * self.group1()[1])),
                ((other.group0()[0] * self.group0()[1]) + (other.group0()[2] * self.group1()[3]) + (other.group1()[3] * self.group1()[2])),
                (-(other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group2()[0] * self.group0()[3]) - (other.group2()[2] * self.group1()[1]) + (other.group1()[1] * self.group0()[2])
                    - (other.group1()[2] * self.group0()[1])
                    - (other.group1()[3] * self.group0()[0])),
                (-(other.group2()[0] * self.group1()[2]) + (other.group2()[1] * self.group0()[3]) - (other.group1()[0] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[0])
                    - (other.group1()[3] * self.group0()[1])),
                (-(other.group2()[1] * self.group1()[0]) + (other.group2()[2] * self.group0()[3]) + (other.group1()[0] * self.group0()[1])
                    - (other.group1()[1] * self.group0()[0])
                    - (other.group1()[3] * self.group0()[2])),
                (other.group0()[2] * self.group1()[2]),
            ]) + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[1]]) * swizzle!(self.group1(), 3, 3, 3, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group0()[2]) + (other.group1()[0] * self.group0()[3]) + (other.group1()[1] * self.group1()[2])),
                ((other.group0()[1] * self.group1()[3]) + (other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3]) + (other.group1()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group0()[1]) + (other.group0()[2] * self.group1()[3]) + (other.group1()[0] * self.group1()[1]) + (other.group1()[2] * self.group0()[3])),
                (-(other.group2()[1] * self.group1()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])
                    - (other.group1()[3] * self.group1()[3])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       84      116        0
    //    simd4       34       35        0
    // Totals...
    // yes simd      118      151        0
    //  no simd      220      256        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]) + (other.group1()[3] * self.group0()[3])
                    - (other.group3()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group3()[1]]) * swizzle!(self.group1(), 0, 1, 2, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group2()[3] * self.group0()[0])
                    + (other.group3()[0] * self.group0()[3])
                    + (other.group3()[1] * self.group1()[2])),
                ((other.group0()[2] * self.group0()[0])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group2()[3] * self.group0()[1])
                    + (other.group3()[1] * self.group0()[3])
                    + (other.group3()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group0()[1])
                    + (other.group1()[3] * self.group1()[2])
                    + (other.group2()[3] * self.group0()[2])
                    + (other.group3()[0] * self.group1()[1])
                    + (other.group3()[2] * self.group0()[3])),
                (-(other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group1()[1] * self.group0()[2]) - (other.group1()[3] * self.group0()[0]) + (other.group2()[0] * self.group0()[3])
                    - (other.group2()[2] * self.group1()[1])
                    - (other.group3()[0] * self.group1()[3])
                    - (other.group3()[1] * self.group0()[2])
                    + (other.group3()[2] * self.group0()[1])),
                ((other.group1()[2] * self.group0()[0]) - (other.group1()[3] * self.group0()[1]) - (other.group2()[0] * self.group1()[2])
                    + (other.group2()[1] * self.group0()[3])
                    + (other.group3()[0] * self.group0()[2])
                    - (other.group3()[1] * self.group1()[3])
                    - (other.group3()[2] * self.group0()[0])),
                ((other.group1()[0] * self.group0()[1]) - (other.group1()[3] * self.group0()[2]) - (other.group2()[1] * self.group1()[0]) + (other.group2()[2] * self.group0()[3])
                    - (other.group3()[0] * self.group0()[1])
                    + (other.group3()[1] * self.group0()[0])
                    - (other.group3()[2] * self.group1()[3])),
                0.0,
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[1]]) * swizzle!(self.group1(), 2, 0, 1, 1))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group0()[2]]) * swizzle!(self.group1(), 0, 1, 2, 2))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group1()[1] * self.group1()[2])),
                ((other.group0()[1] * self.group1()[3]) + (other.group1()[2] * self.group1()[0])),
                ((other.group0()[2] * self.group1()[3]) + (other.group1()[0] * self.group1()[1])),
                (-(other.group1()[2] * self.group0()[2])
                    - (other.group1()[3] * self.group1()[3])
                    - (other.group2()[0] * self.group1()[0])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[2] * self.group1()[2])
                    + (other.group3()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group3()[2]]) * swizzle!(self.group0(), 0, 1, 2, 2))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       29       53        0
    //    simd4       22       26        0
    // Totals...
    // yes simd       51       79        0
    //  no simd      117      157        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(other.group0()[0]) * self.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group0()[3])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group1()[1])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group1()[2])),
                (other.group0()[0] * self.group0()[3] * -1.0),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for Flector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       28        0
    //    simd4        9       11        0
    // Totals...
    // yes simd       26       39        0
    //  no simd       53       72        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]])),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group1()[2])),
                ((other.group0()[1] * self.group0()[3]) + (other.group0()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[2] * self.group1()[2]) - (other.group0()[3] * self.group1()[3])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group1(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for Flector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       21       36        0
    //    simd4       15       16        0
    // Totals...
    // yes simd       36       52        0
    //  no simd       81      100        0
    fn sandwich(self, other: Flector) -> Self::Output {
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from([
                ((other.group1()[0] * self.group0()[3]) + (other.group1()[1] * self.group1()[2])),
                ((other.group1()[1] * self.group0()[3]) + (other.group1()[2] * self.group1()[0])),
                ((other.group1()[0] * self.group1()[1]) + (other.group1()[2] * self.group0()[3])),
                (-(other.group1()[1] * self.group1()[1]) - (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group1()[1] * self.group0()[2])),
                ((other.group0()[2] * self.group1()[0]) - (other.group1()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group1()[0] * self.group0()[1])),
                (-(other.group0()[3] * self.group1()[3]) + (other.group1()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]) * swizzle!(self.group1(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[2]]) * swizzle!(other.group1(), 3, 3, 3, 2))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (swizzle!(other.group1(), 2, 0, 1, 1) * swizzle!(self.group0(), 1, 2, 0, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for Flector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       44        0
    //    simd4       10       11        0
    // Totals...
    // yes simd       38       55        0
    //  no simd       68       88        0
    fn sandwich(self, other: Line) -> Self::Output {
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) + (other.group1()[0] * self.group0()[3]) - (other.group1()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0]) - (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) - (other.group1()[1] * self.group1()[0]) + (other.group1()[2] * self.group0()[3])),
                (other.group0()[2] * self.group1()[2]),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[1]]) * swizzle!(self.group1(), 2, 0, 1, 1))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                (other.group0()[2] * self.group1()[1]),
                (other.group0()[0] * self.group1()[2]),
                (other.group0()[1] * self.group1()[0]),
                (-(other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for Flector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       40        0
    //    simd4       14       15        0
    // Totals...
    // yes simd       42       55        0
    //  no simd       84      100        0
    fn sandwich(self, other: Motor) -> Self::Output {
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from([
                ((self.group0()[3] * other.group1()[0]) - (self.group1()[1] * other.group1()[2]) + (self.group1()[2] * other.group1()[1]) + (self.group1()[3] * other.group0()[0])),
                ((self.group0()[3] * other.group1()[1]) + (self.group1()[1] * other.group1()[3]) - (self.group1()[2] * other.group1()[0]) + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[3] * other.group1()[2]) - (self.group1()[0] * other.group1()[1]) + (self.group1()[2] * other.group1()[3]) + (self.group1()[3] * other.group0()[2])),
                0.0,
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 3, 2, 0, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group0(), 1, 3, 3, 1))
                + (Simd32x4::from([other.group1()[3], other.group1()[2], other.group1()[0], other.group0()[2]]) * swizzle!(self.group1(), 0, 0, 1, 2))
                - (swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((self.group0()[3] * other.group1()[3]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1]) - (self.group1()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group1()[0], self.group1()[0], self.group1()[1], self.group0()[1]]) * swizzle!(other.group0(), 3, 2, 0, 1))
                - (Simd32x4::from([self.group1()[2], self.group1()[1], self.group1()[2], self.group0()[2]]) * swizzle!(other.group0(), 1, 3, 3, 2))
                - (swizzle!(self.group0(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))
                + (swizzle!(self.group1(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for Flector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      150      204        0
    //    simd2        8        8        0
    //    simd3       42       46        0
    //    simd4       39       40        0
    // Totals...
    // yes simd      239      298        0
    //  no simd      448      518        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                ((self.group0()[3] * other.group3()[3]) - (self.group1()[0] * other.group9()[0]) - (self.group1()[1] * other.group9()[1]) - (self.group1()[2] * other.group9()[2])),
                (-(self.group0()[3] * other.group6()[3])
                    + (self.group1()[0] * other.group1()[0])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[2] * other.group1()[2])),
            ]) - (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group4()[0], other.group7()[0]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group4()[1], other.group7()[1]]))
                - (Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group4()[2], other.group7()[2]]))
                + (Simd32x2::from(self.group1()[3]) * Simd32x2::from([other[e45], other.group1()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[1] * self.group1()[0]) - (other.group7()[0] * self.group1()[3]) + (other.group7()[2] * self.group0()[1])
                    - (self.group0()[0] * other.group1()[3])
                    - (self.group0()[3] * other.group6()[0])
                    - (self.group1()[2] * other.group6()[1])),
                (-(other.group0()[1] * self.group1()[1]) + (other.group7()[0] * self.group0()[2])
                    - (other.group7()[1] * self.group1()[3])
                    - (self.group0()[1] * other.group1()[3])
                    - (self.group0()[3] * other.group6()[1])
                    - (self.group1()[0] * other.group6()[2])),
                (-(other.group0()[1] * self.group1()[2]) + (other.group7()[1] * self.group0()[0])
                    - (other.group7()[2] * self.group1()[3])
                    - (self.group0()[2] * other.group1()[3])
                    - (self.group0()[3] * other.group6()[2])
                    - (self.group1()[1] * other.group6()[0])),
                ((other.group7()[1] * self.group1()[1]) + (other.group7()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group7()[1], other.group7()[2], other.group7()[0], other.group1()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group7()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e5
            ((other.group0()[1] * self.group1()[3])
                - (other.group8()[0] * self.group1()[0])
                - (other.group8()[1] * self.group1()[1])
                - (other.group8()[2] * self.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[0] * other.group6()[0])
                - (self.group0()[1] * other.group1()[1])
                - (self.group0()[1] * other.group6()[1])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[2] * other.group6()[2])
                + (self.group0()[3] * other[e1])
                + (self.group1()[3] * other.group6()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group5()[1] * self.group0()[2])
                    + (self.group0()[1] * other.group9()[2])
                    + (self.group0()[3] * other.group3()[0])
                    + (self.group1()[0] * other.group9()[3])
                    + (self.group1()[2] * other.group3()[1])),
                ((other.group5()[2] * self.group0()[0])
                    + (self.group0()[2] * other.group9()[0])
                    + (self.group0()[3] * other.group3()[1])
                    + (self.group1()[0] * other.group3()[2])
                    + (self.group1()[1] * other.group9()[3])),
                ((other.group5()[0] * self.group0()[1])
                    + (self.group0()[0] * other.group9()[1])
                    + (self.group0()[3] * other.group3()[2])
                    + (self.group1()[1] * other.group3()[0])
                    + (self.group1()[2] * other.group9()[3])),
                ((other.group5()[2] * self.group1()[2]) * -1.0),
            ]) + (Simd32x4::from(other.group0()[0]) * self.group0())
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other[e45]]))
                - (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group4()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group5()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group3()[3], other.group9()[2], other.group9()[0], other.group4()[1]]) * swizzle!(self.group0(), 0, 0, 1, 1))
                - (Simd32x4::from([other.group9()[0], other.group9()[1], other.group9()[2], other.group5()[1]]) * swizzle!(self.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group9()[1], other.group3()[3], other.group3()[3], other.group4()[2]]) * swizzle!(self.group0(), 2, 1, 2, 2))),
            // e41, e42, e43
            (-(Simd32x3::from(other[e45]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from([self.group0()[3], self.group0()[3], self.group1()[1]]) * swizzle!(other.group4(), 0, 1, 0))
                + (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group4(), 2, 0, 1))
                - (Simd32x3::from([self.group1()[2], self.group1()[0], self.group0()[3]]) * swizzle!(other.group4(), 1, 2, 2))),
            // e23, e31, e12
            (Simd32x3::from([
                (-(self.group1()[1] * other.group9()[2]) + (self.group1()[2] * other.group9()[1])),
                ((self.group1()[0] * other.group9()[2]) - (self.group1()[2] * other.group9()[0])),
                (-(self.group1()[0] * other.group9()[1]) + (self.group1()[1] * other.group9()[0])),
            ]) + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                + (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group4(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group1()[3]]) * swizzle!(other.group4(), 1, 2, 2))
                + (Simd32x3::from([self.group1()[3], self.group1()[3], self.group0()[1]]) * swizzle!(other.group4(), 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(self.group1()[0] * other.group6()[3]) - (self.group1()[2] * other.group1()[1])),
                (-(self.group1()[0] * other.group1()[2]) - (self.group1()[1] * other.group6()[3])),
                (-(self.group1()[1] * other.group1()[0]) - (self.group1()[2] * other.group6()[3])),
                ((other.group7()[2] * self.group0()[2]) + (self.group1()[2] * other.group6()[2])),
            ]) + (Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group6()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group7()[1], other.group7()[2], other.group7()[0], other.group7()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group7()[2], other.group7()[0], other.group7()[1], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group1()[3]]) * other.group1())
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group6()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group7()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e423, e431, e412
            (-(Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from([self.group0()[3], self.group0()[3], self.group1()[1]]) * swizzle!(other.group7(), 0, 1, 0))
                + (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group7(), 2, 0, 1))
                - (Simd32x3::from([self.group1()[2], self.group1()[0], self.group0()[3]]) * swizzle!(other.group7(), 1, 2, 2))),
            // e235, e315, e125
            (Simd32x3::from([
                (-(self.group0()[1] * other.group1()[2]) - (self.group0()[1] * other.group6()[2])
                    + (self.group0()[2] * other.group1()[1])
                    + (self.group0()[2] * other.group6()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[0] * other.group6()[2]) - (self.group0()[2] * other.group1()[0]) - (self.group0()[2] * other.group6()[0])),
                (-(self.group0()[0] * other.group1()[1]) - (self.group0()[0] * other.group6()[1])
                    + (self.group0()[1] * other.group1()[0])
                    + (self.group0()[1] * other.group6()[0])),
            ]) + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from(other.group6()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from([self.group0()[3], self.group0()[3], self.group1()[1]]) * swizzle!(other.group8(), 0, 1, 0))
                - (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group8(), 2, 0, 1))
                + (Simd32x3::from([self.group1()[2], self.group1()[0], self.group0()[3]]) * swizzle!(other.group8(), 1, 2, 2))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group4()[0] * self.group1()[3]) + (other.group5()[1] * self.group1()[2])),
                ((other.group4()[1] * self.group1()[3]) + (other.group5()[2] * self.group1()[0])),
                ((other.group4()[2] * self.group1()[3]) + (other.group5()[0] * self.group1()[1])),
                (-(other.group5()[1] * self.group0()[1]) - (other.group5()[2] * self.group0()[2]) + (self.group0()[3] * other.group9()[3])
                    - (self.group1()[1] * other.group3()[1])
                    - (self.group1()[2] * other.group3()[2])
                    - (self.group1()[3] * other.group3()[3])),
            ]) + (Simd32x4::from(other.group0()[0]) * self.group1())
                + (Simd32x4::from([other.group4()[1], other.group4()[2], other.group4()[0], other.group9()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group4()[2], other.group4()[0], other.group4()[1], other.group5()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group9()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group3()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other[e45], other[e45], other[e45], other.group9()[2]]) * swizzle!(self.group0(), 0, 1, 2, 2))),
            // e1234
            ((other.group4()[0] * self.group1()[0]) + (other.group4()[1] * self.group1()[1]) + (other.group4()[2] * self.group1()[2]) - (self.group0()[3] * other[e45])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for Flector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       21       36        0
    //    simd4       10       11        0
    // Totals...
    // yes simd       31       47        0
    //  no simd       61       80        0
    fn sandwich(self, other: Plane) -> Self::Output {
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from([
                ((self.group0()[3] * other.group0()[0]) + (self.group1()[2] * other.group0()[1])),
                ((self.group0()[3] * other.group0()[1]) + (self.group1()[0] * other.group0()[2])),
                ((self.group0()[3] * other.group0()[2]) + (self.group1()[1] * other.group0()[0])),
                (-(self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]) - (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                (-(self.group0()[2] * other.group0()[1]) - (self.group1()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[2]) - (self.group1()[3] * other.group0()[1])),
                (-(self.group0()[1] * other.group0()[0]) - (self.group1()[3] * other.group0()[2])),
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       41       72        0
    //    simd4       24       27        0
    // Totals...
    // yes simd       65       99        0
    //  no simd      137      180        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3] * -1.0),
                (self.group1()[1] * other.group0()[3] * -1.0),
                (self.group1()[2] * other.group0()[3] * -1.0),
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2]) + (self.group1()[3] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[3] * other.group0()[0]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[3]) - (self.group0()[3] * other.group0()[1]) - (self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group0()[2]) + (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])),
                (self.group1()[3] * other.group0()[3] * -1.0),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group1()[0] * other[e2]) + (self.group1()[3] * other.group0()[0])),
                ((self.group1()[1] * other[e2]) + (self.group1()[3] * other.group0()[1])),
                ((self.group1()[2] * other[e2]) + (self.group1()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other[e2]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from(other.group0()[3]) * self.group0() * Simd32x4::from(-1.0)),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for Flector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       16        0
    //    simd4        8       11        0
    // Totals...
    // yes simd       16       27        0
    //  no simd       40       60        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(other[scalar]) * self.group0()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other[scalar]) * self.group1()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64      104        0
    //    simd4       18       19        0
    // Totals...
    // yes simd       82      123        0
    //  no simd      136      180        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group1()[0] * other[e4315] * -1.0),
                (self.group1()[1] * other[e4315] * -1.0),
                (self.group1()[2] * other[e4315] * -1.0),
                (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2]) + (self.group1()[3] * other[e4315])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other[e4315]) + (self.group0()[3] * other.group0()[0]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group0()[1] * other[e4315]) + (self.group0()[3] * other.group0()[1]) + (self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                ((self.group0()[2] * other[e4315]) + (self.group0()[3] * other.group0()[2]) - (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                (self.group1()[3] * other[e4315]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (self.group1()[0] * other.group0()[3]) - (self.group1()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])
                    - (self.group1()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3]) - (self.group1()[3] * other.group0()[2])),
                (self.group0()[3] * other[e4315] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other[e4315]),
                (self.group0()[1] * other[e4315]),
                (self.group0()[2] * other[e4315]),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       65       99        0
    //    simd4       40       41        0
    // Totals...
    // yes simd      105      140        0
    //  no simd      225      263        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group1()[0] * other.group3()[3]) * -1.0),
                ((self.group1()[1] * other.group3()[3]) * -1.0),
                ((self.group1()[2] * other.group3()[3]) * -1.0),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[3] * other.group1()[3])
                    + (self.group1()[1] * other.group3()[1])
                    + (self.group1()[2] * other.group3()[2])
                    + (self.group1()[3] * other.group3()[3])),
            ]) - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group3()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (swizzle!(self.group0(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(self.group1()[0] * other.group1()[3]) - (self.group1()[2] * other.group3()[1])),
                (-(self.group1()[0] * other.group3()[2]) - (self.group1()[1] * other.group1()[3])),
                (-(self.group1()[1] * other.group3()[0]) - (self.group1()[2] * other.group1()[3])),
                ((self.group1()[1] * other.group1()[1]) + (self.group1()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group1()[3]]) * other.group3())
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[2]]) * swizzle!(other.group0(), 0, 1, 2, 2))
                + (Simd32x4::from([other.group0()[1], other.group3()[3], other.group3()[3], other.group0()[1]]) * swizzle!(self.group0(), 2, 1, 2, 1))
                + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group3()[3], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group0(), 0, 0, 1, 0))
                - (swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group0()[2] * other.group1()[1])
                    + (self.group0()[2] * other.group3()[1])
                    + (self.group0()[3] * other.group2()[0])
                    + (self.group1()[2] * other.group2()[1])
                    + (self.group1()[3] * other.group1()[0])
                    + (self.group1()[3] * other.group3()[0])),
                ((self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group0()[3])
                    + (self.group0()[3] * other.group2()[1])
                    + (self.group1()[1] * other.group2()[3])
                    + (self.group1()[3] * other.group1()[1])
                    + (self.group1()[3] * other.group3()[1])),
                ((self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group0()[3])
                    + (self.group0()[3] * other.group2()[2])
                    + (self.group1()[2] * other.group2()[3])
                    + (self.group1()[3] * other.group1()[2])
                    + (self.group1()[3] * other.group3()[2])),
                (-(self.group0()[1] * other.group1()[1])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])
                    - (self.group1()[1] * other.group2()[1])
                    - (self.group1()[2] * other.group2()[2])),
            ]) + (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group2()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))
                + (Simd32x4::from([other.group2()[3], other.group2()[2], other.group2()[0], other.group0()[3]]) * swizzle!(self.group1(), 0, 0, 1, 3))
                - (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group3(), 2, 0, 1, 0))
                - (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group2(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group0()[2] * other.group0()[1])
                    - (self.group0()[3] * other.group1()[0])
                    - (self.group1()[0] * other.group0()[3])
                    - (self.group1()[2] * other.group1()[1])
                    - (self.group1()[3] * other.group0()[0])),
                (-(self.group0()[1] * other.group3()[3])
                    - (self.group0()[3] * other.group1()[1])
                    - (self.group1()[0] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[3])
                    - (self.group1()[3] * other.group0()[1])),
                (-(self.group0()[2] * other.group3()[3])
                    - (self.group0()[3] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[0])
                    - (self.group1()[2] * other.group0()[3])
                    - (self.group1()[3] * other.group0()[2])),
                (self.group1()[2] * other.group0()[2]),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))
                - (Simd32x4::from([other.group3()[3], other.group0()[2], other.group0()[0], other.group3()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       84      116        0
    //    simd4       36       37        0
    // Totals...
    // yes simd      120      153        0
    //  no simd      228      264        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group1()[3])
                    - (self.group1()[2] * other.group3()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group3()[1]]) * swizzle!(self.group1(), 2, 1, 2, 1))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group1(), 0, 0, 1, 0))
                - (swizzle!(self.group0(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[2] * other.group0()[1]) + (self.group0()[3] * other.group3()[0]) + (self.group1()[2] * other.group3()[1]) + (self.group1()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group2()[3]) + (self.group0()[3] * other.group3()[1]) + (self.group1()[1] * other.group1()[3]) + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group2()[3]) + (self.group0()[3] * other.group3()[2]) + (self.group1()[2] * other.group1()[3]) + (self.group1()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group2()[3]]) * swizzle!(self.group1(), 0, 0, 1, 3))
                + (Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group0()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[1] * other.group3()[2]) + (self.group0()[2] * other.group1()[1])
                    - (self.group0()[2] * other.group3()[1])
                    + (self.group0()[3] * other.group2()[0])
                    - (self.group1()[1] * other.group2()[2])
                    + (self.group1()[3] * other.group1()[0])
                    - (self.group1()[3] * other.group3()[0])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group1()[0])
                    + (self.group0()[2] * other.group3()[0])
                    + (self.group0()[3] * other.group2()[1])
                    - (self.group1()[2] * other.group2()[0])
                    + (self.group1()[3] * other.group1()[1])
                    - (self.group1()[3] * other.group3()[1])),
                ((self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group1()[0]) - (self.group0()[1] * other.group3()[0]) - (self.group0()[2] * other.group1()[3])
                    + (self.group0()[3] * other.group2()[2])
                    - (self.group1()[0] * other.group2()[1])
                    + (self.group1()[3] * other.group1()[2])
                    - (self.group1()[3] * other.group3()[2])),
                0.0,
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group2()[3]]) * swizzle!(self.group0(), 0, 0, 0, 3))
                + (Simd32x4::from([other.group2()[1], other.group3()[3], other.group3()[3], other.group0()[2]]) * swizzle!(self.group1(), 2, 1, 2, 2))
                + (Simd32x4::from([other.group3()[3], other.group2()[2], other.group2()[0], other.group0()[1]]) * swizzle!(self.group1(), 0, 0, 1, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group1()[2] * other.group1()[1]) + (self.group1()[3] * other.group0()[0])),
                ((self.group1()[1] * other.group0()[3]) + (self.group1()[3] * other.group0()[1])),
                ((self.group1()[2] * other.group0()[3]) + (self.group1()[3] * other.group0()[2])),
                (-(self.group0()[2] * other.group1()[2]) + (self.group0()[3] * other.group3()[3])
                    - (self.group1()[0] * other.group2()[0])
                    - (self.group1()[1] * other.group2()[1])
                    - (self.group1()[2] * other.group2()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))
                + (Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group3()[1]]) * swizzle!(self.group0(), 2, 1, 2, 1))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group0()[3]]) * swizzle!(self.group1(), 0, 0, 1, 3))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[2]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group0(), 0, 0, 1, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl InfixSandwich for Line {}
impl Sandwich<AntiCircleRotor> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       94      126        0
    //    simd3        0        2        0
    //    simd4        9        9        0
    // Totals...
    // yes simd      103      137        0
    //  no simd      130      168        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1]) + (self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[1])),
                (-(other.group0()[0] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[0])
                    + (self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group2()[3])
                    - (self.group0()[2] * other.group1()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) - (self.group0()[0] * other.group1()[1])
                    + (self.group0()[1] * other.group1()[0])
                    + (self.group0()[2] * other.group2()[3])),
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group0()[2] * other.group2()[1]) + (self.group1()[0] * other.group2()[3]) + (self.group1()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group1()[0] * other.group1()[2]) + (self.group1()[1] * other.group2()[3])),
                ((self.group0()[1] * other.group2()[0]) + (self.group1()[1] * other.group1()[0]) + (self.group1()[2] * other.group2()[3])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2]) - (self.group1()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[0], self.group1()[0]]) * swizzle!(other.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[2], self.group1()[1]]) * swizzle!(other.group1(), 2, 0, 3, 1))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) - (self.group0()[0] * other.group1()[3])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0]) - (self.group0()[1] * other.group1()[3])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) - (self.group0()[2] * other.group1()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      122      154        0
    //    simd3        0        2        0
    //    simd4        8        8        0
    // Totals...
    // yes simd      130      164        0
    //  no simd      154      192        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) - (self.group0()[0] * other.group2()[3])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) - (self.group0()[1] * other.group2()[3])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) - (self.group0()[2] * other.group2()[3])),
                ((other.group0()[0] * self.group1()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])
                    - (self.group1()[0] * other.group2()[3])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0]) - (self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])
                    - (self.group1()[1] * other.group2()[3])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])
                    - (self.group1()[2] * other.group2()[3])),
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group3()[0])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group3()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[2])
                    - (self.group0()[2] * other.group2()[1])
                    - (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group1()[2])
                    + (self.group1()[1] * other.group3()[2])
                    - (self.group1()[2] * other.group1()[1])
                    - (self.group1()[2] * other.group3()[1])),
                (-(self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group3()[3]) + (self.group0()[2] * other.group2()[0])
                    - (self.group1()[0] * other.group1()[2])
                    - (self.group1()[0] * other.group3()[2])
                    - (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group1()[2] * other.group3()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) - (self.group0()[2] * other.group3()[3])
                    + (self.group1()[0] * other.group1()[1])
                    + (self.group1()[0] * other.group3()[1])
                    - (self.group1()[1] * other.group1()[0])
                    - (self.group1()[1] * other.group3()[0])
                    - (self.group1()[2] * other.group1()[3])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1])
                    - (self.group0()[1] * other.group3()[2])
                    - (self.group1()[0] * other.group2()[3])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0]) - (self.group0()[2] * other.group3()[0]) - (self.group1()[1] * other.group2()[3])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0])
                    - (self.group0()[0] * other.group3()[1])
                    - (self.group1()[2] * other.group2()[3])),
                ((self.group0()[0] * other.group2()[0])
                    + (self.group0()[1] * other.group2()[1])
                    + (self.group0()[2] * other.group2()[2])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[1] * other.group3()[1])
                    + (self.group1()[2] * other.group1()[2])
                    + (self.group1()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       65       93        0
    //    simd3        0        3        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       68       99        0
    //  no simd       77      114        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other.group0()[0]) * self.group0()),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[2])),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (other.group0()[1] * self.group1()[0]),
                (other.group0()[1] * self.group1()[1]),
                (other.group0()[1] * self.group1()[2]),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[0] * self.group1()[0] * -1.0),
                (other.group0()[0] * self.group1()[1] * -1.0),
                (other.group0()[0] * self.group1()[2] * -1.0),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for Line {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       35        0
    //    simd3        0        2        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       24       41        0
    //  no simd       36       57        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) - (self.group1()[0] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0]) - (self.group1()[1] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) - (self.group1()[2] * other.group0()[3])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for Line {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       44        0
    //    simd3        0        2        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       32       54        0
    //  no simd       56       82        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) - (self.group1()[0] * other.group0()[3]) + (self.group1()[1] * other.group1()[2])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0]) - (self.group1()[1] * other.group0()[3])
                    + (self.group1()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group1()[0] * other.group1()[1]) - (self.group1()[2] * other.group0()[3])),
                ((self.group0()[2] * other.group1()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) * -1.0),
                ((self.group0()[2] * other.group1()[0]) * -1.0),
                ((self.group0()[0] * other.group1()[1]) * -1.0),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) + (self.group1()[1] * other.group1()[1]) + (self.group1()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for Line {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       35       51        0
    //    simd3        0        2        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       38       56        0
    //  no simd       47       69        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1]) + (other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group1()[0]) - (other.group1()[0] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) + (other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for Line {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       48        0
    //    simd3        0        2        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       38       56        0
    //  no simd       56       78        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[3])),
                ((self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[2] * other.group1()[1]) + (self.group1()[0] * other.group0()[3]) + (self.group1()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3]) + (self.group1()[0] * other.group0()[2]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[3]) + (self.group1()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3])),
                (-(self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for Line {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       33        0
    //    simd3        0        2        0
    //    simd4        7        7        0
    // Totals...
    // yes simd       20       42        0
    //  no simd       41       67        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from([
                (self.group1()[1] * other.group0()[2]),
                (self.group1()[2] * other.group0()[0]),
                (self.group1()[0] * other.group0()[1]),
                ((self.group0()[2] * other.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) * -1.0),
                ((self.group0()[2] * other.group0()[0]) * -1.0),
                ((self.group0()[0] * other.group0()[1]) * -1.0),
                ((self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for Line {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       27        0
    //    simd3        0        6        0
    // Totals...
    // yes simd       19       33        0
    //  no simd       19       45        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiLine::from_groups(
            // e23, e31, e12
            (Simd32x3::from(other[e12345]) * self.group0() * Simd32x3::from(-1.0)),
            // e15, e25, e35
            (Simd32x3::from(other[e12345]) * self.group1() * Simd32x3::from(-1.0)),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       96      128        0
    //    simd3        0        2        0
    //    simd4        7        7        0
    // Totals...
    // yes simd      103      137        0
    //  no simd      124      162        0
    fn sandwich(self, other: Circle) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0]) - (self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])),
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group2()[1] * self.group0()[2]) + (other.group2()[2] * self.group0()[1]) - (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])),
                ((other.group2()[0] * self.group0()[2]) - (other.group2()[2] * self.group0()[0]) - (self.group1()[0] * other.group1()[2]) - (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group1()[0])),
                (-(other.group2()[0] * self.group0()[1]) + (other.group2()[1] * self.group0()[0]) + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])
                    - (self.group1()[2] * other.group1()[3])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0])),
                ((other.group2()[0] * self.group0()[0])
                    + (other.group2()[1] * self.group0()[1])
                    + (other.group2()[2] * self.group0()[2])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      102      134        0
    //    simd3        0        2        0
    //    simd4        7        7        0
    // Totals...
    // yes simd      109      143        0
    //  no simd      130      168        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) - (self.group0()[0] * other.group2()[3])
                    + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0]) - (self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group2()[3])
                    + (self.group0()[2] * other.group1()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])
                    - (self.group0()[2] * other.group2()[3])),
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1]) - (self.group1()[0] * other.group1()[3]) - (self.group1()[0] * other.group2()[3])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group2()[0])
                    - (self.group1()[0] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[3])
                    - (self.group1()[1] * other.group2()[3])
                    + (self.group1()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])
                    - (self.group1()[2] * other.group1()[3])
                    - (self.group1()[2] * other.group2()[3])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0])),
                ((self.group0()[0] * other.group2()[0])
                    + (self.group0()[1] * other.group2()[1])
                    + (self.group0()[2] * other.group2()[2])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       92      124        0
    //    simd3        0        2        0
    //    simd4        8        8        0
    // Totals...
    // yes simd      100      134        0
    //  no simd      124      162        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1]) - (self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group1()[0]) + (self.group0()[0] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) - (self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group2()[1] * self.group0()[2]) - (other.group2()[2] * self.group0()[1]) + (self.group1()[2] * other.group1()[1])),
                (-(other.group2()[0] * self.group0()[2]) + (other.group2()[2] * self.group0()[0]) + (self.group1()[0] * other.group1()[2])),
                ((other.group2()[0] * self.group0()[1]) - (other.group2()[1] * self.group0()[0]) + (self.group1()[1] * other.group1()[0])),
                (-(other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (self.group1()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[0], self.group1()[0]]) * swizzle!(other.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[2], self.group1()[1]]) * swizzle!(other.group1(), 2, 0, 3, 1))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) - (self.group0()[0] * other.group1()[3])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0]) - (self.group0()[1] * other.group1()[3])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) - (self.group0()[2] * other.group1()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      106      138        0
    //    simd3        0        2        0
    //    simd4       12       12        0
    // Totals...
    // yes simd      118      152        0
    //  no simd      154      192        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) + (self.group0()[0] * other.group2()[3])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0]) + (self.group0()[1] * other.group2()[3])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) + (self.group0()[2] * other.group2()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1]) - (self.group0()[1] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[1])
                    + (self.group1()[0] * other.group2()[3])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group1()[0]) + (self.group0()[0] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[0])
                    + (self.group1()[1] * other.group2()[3])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) - (self.group0()[0] * other.group1()[1])
                    + (self.group0()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group2()[3])),
                ((other.group0()[0] * self.group1()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (self.group0()[0] * other.group3()[0])
                    + (self.group0()[1] * other.group3()[1])
                    + (self.group0()[2] * other.group3()[2])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group0()[2] * other.group2()[1]) + (self.group1()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group1()[0] * other.group1()[2])),
                ((self.group0()[1] * other.group2()[0]) + (self.group1()[1] * other.group1()[0])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2]) + (self.group1()[2] * other.group3()[2])),
            ]) - (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group1()[0]]))
                - (Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group1()[1]]))
                - (Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group1()[2]]))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group1()[1]]) * swizzle!(other.group3(), 2, 0, 1, 1))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) - (self.group0()[0] * other.group1()[3])
                    + (self.group0()[1] * other.group3()[2])
                    - (self.group0()[2] * other.group3()[1])
                    - (self.group1()[0] * other.group2()[3])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0]) - (self.group0()[0] * other.group3()[2]) - (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group3()[0])
                    - (self.group1()[1] * other.group2()[3])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (self.group0()[0] * other.group3()[1])
                    - (self.group0()[1] * other.group3()[0])
                    - (self.group0()[2] * other.group1()[3])
                    - (self.group1()[2] * other.group2()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       65       96        0
    //    simd3        0        4        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       68      103        0
    //  no simd       77      120        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other.group0()[0]) * self.group0() * Simd32x3::from(-1.0)),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group0()[2])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group1()[0] * -1.0),
                (other.group0()[1] * self.group1()[1] * -1.0),
                (other.group0()[1] * self.group1()[2] * -1.0),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group1()[0] * -1.0),
                (other.group0()[0] * self.group1()[1] * -1.0),
                (other.group0()[0] * self.group1()[2] * -1.0),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for Line {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       39        0
    //    simd3        0        2        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       24       45        0
    //  no simd       36       61        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1]) - (self.group1()[0] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0]) - (self.group1()[1] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) - (self.group1()[2] * other.group0()[3])),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for Line {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       44        0
    //    simd3        0        2        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       32       54        0
    //  no simd       56       82        0
    fn sandwich(self, other: Flector) -> Self::Output {
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[3])
                    - (self.group1()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0]) - (self.group1()[0] * other.group1()[2]) - (self.group1()[1] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])
                    - (self.group1()[1] * other.group1()[0])
                    - (self.group1()[2] * other.group0()[3])),
                (self.group0()[2] * other.group1()[2]),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                ((self.group0()[2] * other.group1()[1]) * -1.0),
                ((self.group0()[0] * other.group1()[2]) * -1.0),
                ((self.group0()[1] * other.group1()[0]) * -1.0),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for Line {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       35       51        0
    //    simd3        0        2        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       38       56        0
    //  no simd       47       69        0
    fn sandwich(self, other: Line) -> Self::Output {
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (other.group1()[0] * self.group0()[0])
                    + (other.group1()[1] * self.group0()[1])
                    + (other.group1()[2] * self.group0()[2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for Line {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       48        0
    //    simd3        0        2        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       38       56        0
    //  no simd       56       78        0
    fn sandwich(self, other: Motor) -> Self::Output {
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group0()[3])),
                (-(self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group0()[3])),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                (-(self.group0()[0] * other.group1()[3])
                    - (self.group0()[2] * other.group1()[1])
                    - (self.group1()[0] * other.group0()[3])
                    - (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[2])
                    - (self.group0()[1] * other.group1()[3])
                    - (self.group1()[0] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[3])),
                (-(self.group0()[1] * other.group1()[0])
                    - (self.group0()[2] * other.group1()[3])
                    - (self.group1()[1] * other.group0()[0])
                    - (self.group1()[2] * other.group0()[3])),
                ((self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group1()[2]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for Line {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      186      226        0
    //    simd3       34       44        0
    //    simd4        8        8        0
    // Totals...
    // yes simd      228      278        0
    //  no simd      320      390        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((self.group0()[0] * other.group6()[0])
                    + (self.group0()[1] * other.group6()[1])
                    + (self.group0()[2] * other.group6()[2])
                    + (self.group1()[0] * other.group7()[0])
                    + (self.group1()[1] * other.group7()[1])
                    + (self.group1()[2] * other.group7()[2])),
                (-(self.group0()[0] * other.group5()[0])
                    - (self.group0()[1] * other.group5()[1])
                    - (self.group0()[2] * other.group5()[2])
                    - (self.group1()[0] * other.group4()[0])
                    - (self.group1()[1] * other.group4()[1])
                    - (self.group1()[2] * other.group4()[2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group9()[2]) - (self.group0()[2] * other.group9()[1]) - (self.group1()[0] * other[e45])
                    + (self.group1()[1] * other.group4()[2])
                    - (self.group1()[2] * other.group4()[1])),
                (-(self.group0()[0] * other.group9()[2]) - (self.group0()[1] * other.group3()[3]) + (self.group0()[2] * other.group9()[0])
                    - (self.group1()[0] * other.group4()[2])
                    - (self.group1()[1] * other[e45])
                    + (self.group1()[2] * other.group4()[0])),
                ((self.group0()[0] * other.group9()[1]) - (self.group0()[1] * other.group9()[0]) - (self.group0()[2] * other.group3()[3]) + (self.group1()[0] * other.group4()[1])
                    - (self.group1()[1] * other.group4()[0])
                    - (self.group1()[2] * other[e45])),
                (-(self.group0()[0] * other.group4()[0]) - (self.group0()[1] * other.group4()[1]) - (self.group0()[2] * other.group4()[2])),
            ]),
            // e5
            (-(self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group3()[1]) - (self.group0()[2] * other.group3()[2]) - (self.group1()[0] * other.group5()[0])
                + (self.group1()[0] * other.group9()[0])
                - (self.group1()[1] * other.group5()[1])
                + (self.group1()[1] * other.group9()[1])
                - (self.group1()[2] * other.group5()[2])
                + (self.group1()[2] * other.group9()[2])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group1()[0]) - (self.group0()[0] * other[e1]) + (self.group0()[1] * other.group8()[2])
                    - (self.group0()[2] * other.group8()[1])
                    - (self.group1()[0] * other.group6()[3])
                    + (self.group1()[1] * other.group1()[2])
                    + (self.group1()[1] * other.group6()[2])
                    - (self.group1()[2] * other.group6()[1])),
                (-(other.group0()[1] * self.group1()[1]) - (self.group0()[0] * other.group8()[2]) - (self.group0()[1] * other[e1]) + (self.group0()[2] * other.group8()[0])
                    - (self.group1()[0] * other.group6()[2])
                    - (self.group1()[1] * other.group6()[3])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group1()[2] * other.group6()[0])),
                (-(other.group0()[1] * self.group1()[2]) + (self.group0()[0] * other.group8()[1]) - (self.group0()[1] * other.group8()[0]) - (self.group0()[2] * other[e1])
                    + (self.group1()[0] * other.group1()[1])
                    + (self.group1()[0] * other.group6()[1])
                    - (self.group1()[1] * other.group6()[0])
                    - (self.group1()[2] * other.group6()[3])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])
                    + (self.group1()[0] * other.group7()[0])
                    + (self.group1()[1] * other.group7()[1])
                    + (self.group1()[2] * other.group7()[2])),
            ]) - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e41, e42, e43
            (-(Simd32x3::from([other.group7()[1], other.group1()[3], other.group1()[3]]) * swizzle!(self.group0(), 2, 1, 2))
                - (Simd32x3::from([other.group1()[3], other.group7()[2], other.group7()[0]]) * swizzle!(self.group0(), 0, 0, 1))
                + (swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group7(), 2, 0, 1))),
            // e23, e31, e12
            (-(Simd32x3::from(other.group0()[1]) * self.group0())
                - (Simd32x3::from([other.group7()[1], other.group1()[3], other.group1()[3]]) * swizzle!(self.group1(), 2, 1, 2))
                - (Simd32x3::from([other.group1()[3], other.group7()[2], other.group7()[0]]) * swizzle!(self.group1(), 0, 0, 1))
                - (Simd32x3::from([other.group6()[1], other.group6()[2], other.group6()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group6()[2], other.group6()[0], other.group6()[1]]) * swizzle!(self.group0(), 1, 2, 0))
                + (swizzle!(self.group1(), 1, 2, 0) * swizzle!(other.group7(), 2, 0, 1))),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[0]) - (self.group0()[1] * other.group5()[2]) + (self.group0()[2] * other.group5()[1]) + (self.group1()[0] * other[e45])
                    - (self.group1()[1] * other.group4()[2])
                    + (self.group1()[2] * other.group4()[1])),
                ((other.group0()[0] * self.group0()[1]) + (self.group0()[0] * other.group5()[2]) - (self.group0()[2] * other.group5()[0])
                    + (self.group1()[0] * other.group4()[2])
                    + (self.group1()[1] * other[e45])
                    - (self.group1()[2] * other.group4()[0])),
                ((other.group0()[0] * self.group0()[2]) - (self.group0()[0] * other.group5()[1]) + (self.group0()[1] * other.group5()[0]) - (self.group1()[0] * other.group4()[1])
                    + (self.group1()[1] * other.group4()[0])
                    + (self.group1()[2] * other[e45])),
                ((self.group0()[0] * other.group9()[0])
                    + (self.group0()[1] * other.group9()[1])
                    + (self.group0()[2] * other.group9()[2])
                    + (self.group1()[0] * other.group4()[0])
                    + (self.group1()[1] * other.group4()[1])
                    + (self.group1()[2] * other.group4()[2])),
            ]),
            // e423, e431, e412
            ((Simd32x3::from([other.group4()[1], other[e45], other[e45]]) * swizzle!(self.group0(), 2, 1, 2))
                + (Simd32x3::from([other[e45], other.group4()[2], other.group4()[0]]) * swizzle!(self.group0(), 0, 0, 1))
                - (swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group4(), 2, 0, 1))),
            // e235, e315, e125
            ((Simd32x3::from(other.group0()[0]) * self.group1())
                - (Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group3()[3], other.group9()[2], other.group5()[1]]))
                - (Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group5()[2], other.group3()[3], other.group9()[0]]))
                - (Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group9()[1], other.group5()[0], other.group3()[3]]))
                + (Simd32x3::from([other.group5()[1], other.group9()[0], other.group5()[0]]) * swizzle!(self.group1(), 2, 2, 1))
                + (Simd32x3::from([other.group3()[1], other.group9()[3], other.group9()[3]]) * swizzle!(self.group0(), 2, 1, 2))
                - (Simd32x3::from([other.group3()[2], other.group3()[0], other.group3()[1]]) * swizzle!(self.group0(), 1, 2, 0))
                + (Simd32x3::from([other.group9()[2], other.group5()[2], other.group9()[1]]) * swizzle!(self.group1(), 1, 0, 0))
                + (Simd32x3::from([other.group9()[3], other.group3()[2], other.group3()[0]]) * swizzle!(self.group0(), 0, 0, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) - (self.group1()[0] * other.group1()[3]) + (self.group1()[1] * other.group7()[2])
                    - (self.group1()[2] * other.group7()[1])),
                (-(self.group0()[2] * other.group1()[0]) - (self.group1()[0] * other.group7()[2]) - (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group7()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group1()[0] * other.group7()[1])
                    - (self.group1()[1] * other.group7()[0])
                    - (self.group1()[2] * other.group1()[3])),
                ((self.group0()[0] * other.group8()[0])
                    + (self.group0()[1] * other.group8()[1])
                    + (self.group0()[2] * other.group8()[2])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[1] * other.group6()[1])
                    + (self.group1()[2] * other.group1()[2])
                    + (self.group1()[2] * other.group6()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group6(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e1234
            ((self.group0()[0] * other.group7()[0]) + (self.group0()[1] * other.group7()[1]) + (self.group0()[2] * other.group7()[2])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for Line {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       36        0
    //    simd3        0        2        0
    //    simd4        7        7        0
    // Totals...
    // yes simd       20       45        0
    //  no simd       41       70        0
    fn sandwich(self, other: Plane) -> Self::Output {
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from([
                ((self.group1()[2] * other.group0()[1]) * -1.0),
                ((self.group1()[0] * other.group0()[2]) * -1.0),
                ((self.group1()[1] * other.group0()[0]) * -1.0),
                (self.group0()[2] * other.group0()[2]),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[1]]) * swizzle!(other.group0(), 2, 0, 1, 1))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                ((self.group0()[2] * other.group0()[1]) * -1.0),
                ((self.group0()[0] * other.group0()[2]) * -1.0),
                ((self.group0()[1] * other.group0()[0]) * -1.0),
                ((self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       74      104        0
    //    simd3        0        4        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       78      112        0
    //  no simd       90      132        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other.group0()[3]) * self.group0() * Simd32x3::from(-1.0)),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3] * -1.0),
                (self.group1()[1] * other.group0()[3] * -1.0),
                (self.group1()[2] * other.group0()[3] * -1.0),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group0()[0] * other[e2]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[1] * other[e2]) - (self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[2] * other[e2]) + (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) - (self.group1()[0] * other.group0()[3])),
                (-(self.group0()[2] * other.group0()[0]) - (self.group1()[1] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group1()[2] * other.group0()[3])),
                ((self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for Line {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       27        0
    //    simd3        0        4        0
    // Totals...
    // yes simd       19       31        0
    //  no simd       19       39        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Line::from_groups(
            // e415, e425, e435
            (Simd32x3::from(other[scalar]) * self.group0()),
            // e235, e315, e125
            (Simd32x3::from(other[scalar]) * self.group1()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       74      101        0
    //    simd3        0        3        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       78      108        0
    //  no simd       90      126        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other[e4315]) * self.group0()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[0] * other[e4315]),
                (self.group1()[1] * other[e4315]),
                (self.group1()[2] * other[e4315]),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[3]) - (self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])),
                0.0,
            ]),
            // e1, e2, e3, e5
            (Simd32x4::from([
                (-(self.group0()[2] * other.group0()[1]) - (self.group1()[0] * other[e4315])),
                (-(self.group0()[0] * other.group0()[2]) - (self.group1()[1] * other[e4315])),
                (-(self.group0()[1] * other.group0()[0]) - (self.group1()[2] * other[e4315])),
                ((self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      116      148        0
    //    simd3        0        2        0
    //    simd4       11       11        0
    // Totals...
    // yes simd      127      161        0
    //  no simd      160      198        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(self.group0()[0] * other.group3()[3]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group3()[3])),
                (-(self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group3()[3])),
                ((self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[2])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])
                    - (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group1()[0])
                    - (self.group1()[0] * other.group0()[2])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group0()[3]) - (self.group1()[1] * other.group0()[0])),
                (-(self.group0()[1] * other.group3()[1]) - (self.group0()[2] * other.group3()[2])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group2()[2])
                    - (self.group0()[2] * other.group2()[1])
                    - (self.group1()[0] * other.group0()[3])
                    - (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group1()[2])
                    + (self.group1()[1] * other.group3()[2])
                    - (self.group1()[2] * other.group1()[1])
                    - (self.group1()[2] * other.group3()[1])),
                (-(self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group2()[3]) + (self.group0()[2] * other.group2()[0])
                    - (self.group1()[0] * other.group1()[2])
                    - (self.group1()[0] * other.group3()[2])
                    - (self.group1()[1] * other.group0()[3])
                    - (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group1()[2] * other.group3()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) - (self.group0()[2] * other.group2()[3])
                    + (self.group1()[0] * other.group1()[1])
                    + (self.group1()[0] * other.group3()[1])
                    - (self.group1()[1] * other.group1()[0])
                    - (self.group1()[1] * other.group3()[0])
                    - (self.group1()[2] * other.group0()[3])
                    - (self.group1()[2] * other.group1()[3])),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[1] * other.group3()[2]) - (self.group1()[0] * other.group3()[3]) + (self.group1()[1] * other.group0()[2])
                    - (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[2] * other.group3()[0]) - (self.group1()[0] * other.group0()[2]) - (self.group1()[1] * other.group3()[3])
                    + (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group3()[1]) + (self.group1()[0] * other.group0()[1])
                    - (self.group1()[1] * other.group0()[0])
                    - (self.group1()[2] * other.group3()[3])),
                ((self.group0()[0] * other.group2()[0])
                    + (self.group0()[1] * other.group2()[1])
                    + (self.group0()[2] * other.group2()[2])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[1] * other.group3()[1])
                    + (self.group1()[2] * other.group1()[2])
                    + (self.group1()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       92      124        0
    //    simd3        0        2        0
    //    simd4       17       17        0
    // Totals...
    // yes simd      109      143        0
    //  no simd      160      198        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group2()[3])),
                ((self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group2()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1]) + (self.group1()[0] * other.group2()[3])
                    - (self.group1()[1] * other.group0()[2])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0]) + (self.group1()[1] * other.group2()[3]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) - (self.group1()[0] * other.group0()[1])
                    + (self.group1()[2] * other.group2()[3])),
                ((self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group3()[1]) + (self.group0()[2] * other.group3()[2]) + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group1()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group0()[2] * other.group2()[1]) + (self.group1()[0] * other.group0()[3])),
                ((self.group0()[0] * other.group2()[2]) + (self.group1()[0] * other.group1()[2])),
                ((self.group0()[1] * other.group2()[0]) + (self.group1()[0] * other.group3()[1])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])),
            ]) - (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group1()[0]]))
                - (Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group1()[1]]))
                + (Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group3()[2], other.group0()[3], other.group1()[0], other.group3()[1]]))
                + (Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group0()[3], other.group3()[2]]))
                - (Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group1()[2]]))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group3()[2])
                    - (self.group0()[2] * other.group3()[1])
                    - (self.group1()[0] * other.group2()[3])
                    + (self.group1()[1] * other.group0()[2])),
                (-(self.group0()[0] * other.group3()[2]) - (self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group3()[0])
                    - (self.group1()[1] * other.group2()[3])
                    + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group3()[0]) - (self.group0()[2] * other.group1()[3]) + (self.group1()[0] * other.group0()[1])
                    - (self.group1()[2] * other.group2()[3])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl InfixSandwich for Motor {}
impl Sandwich<AntiCircleRotor> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       71      102        0
    //    simd4       29       30        0
    // Totals...
    // yes simd      100      132        0
    //  no simd      187      222        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (other.group0()[1] * self.group0()[2]),
                (other.group0()[2] * self.group0()[0]),
                (other.group0()[2] * self.group0()[3]),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group2()[3]]) * swizzle!(self.group0(), 3, 3, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[2] * self.group1()[1])
                    + (other.group1()[0] * self.group0()[3])
                    + (other.group1()[1] * self.group0()[2])
                    + (other.group2()[3] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group0()[3])
                    + (other.group1()[2] * self.group0()[0])
                    + (other.group2()[3] * self.group0()[1])),
                (-(other.group0()[1] * self.group1()[0])
                    + (other.group1()[0] * self.group0()[1])
                    + (other.group1()[2] * self.group0()[3])
                    + (other.group2()[3] * self.group0()[2])),
                (other.group0()[2] * self.group1()[2]),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 1, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[2], other.group0()[1]]) * swizzle!(self.group1(), 2, 0, 3, 1))
                - (swizzle!(other.group1(), 2, 0, 1, 3) * swizzle!(self.group0(), 1, 2, 0, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group1()[1] * self.group1()[2]) + (other.group2()[0] * self.group0()[3]) + (other.group2()[1] * self.group0()[2]) + (other.group2()[3] * self.group1()[0])),
                ((other.group1()[2] * self.group1()[0]) + (other.group2()[1] * self.group0()[3]) + (other.group2()[2] * self.group0()[0]) + (other.group2()[3] * self.group1()[1])),
                ((other.group1()[2] * self.group1()[3]) + (other.group2()[0] * self.group0()[1]) + (other.group2()[2] * self.group0()[3]) + (other.group2()[3] * self.group1()[2])),
                (-(other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[0], other.group2()[3]]) * swizzle!(self.group1(), 3, 3, 1, 3))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group1(), 0, 1, 2, 1))
                - (swizzle!(other.group2(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) - (other.group0()[2] * self.group1()[3])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       85      122        0
    //    simd4       33       33        0
    // Totals...
    // yes simd      118      155        0
    //  no simd      217      254        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group0()[2])),
                (-(other.group0()[1] * self.group0()[3]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) - (other.group0()[2] * self.group0()[3])),
                ((other.group0()[0] * self.group1()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (other.group1()[1] * self.group0()[1])
                    + (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) - (other.group2()[3] * self.group1()[0])),
                (-(other.group0()[2] * self.group1()[0]) - (other.group2()[3] * self.group1()[1])),
                (-(other.group0()[2] * self.group1()[3]) - (other.group2()[3] * self.group1()[2])),
                ((other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2]) - (other.group3()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group2()[3]]) * swizzle!(self.group1(), 3, 3, 1, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[0], other.group3()[0]]) * swizzle!(self.group0(), 3, 3, 1, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[2], other.group3()[1]]) * swizzle!(self.group0(), 2, 0, 3, 1))
                + (swizzle!(other.group1(), 2, 0, 1, 3) * swizzle!(self.group0(), 1, 2, 0, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(other.group1()[0] * self.group1()[3]) - (other.group1()[1] * self.group1()[2]) + (other.group1()[2] * self.group1()[1])
                    - (other.group1()[3] * self.group1()[0])
                    - (other.group2()[1] * self.group0()[2])
                    - (other.group3()[0] * self.group1()[3])
                    - (other.group3()[1] * self.group1()[2])
                    + (other.group3()[2] * self.group1()[1])
                    - (other.group3()[3] * self.group0()[0])),
                ((other.group1()[0] * self.group1()[2])
                    - (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group1()[0])
                    - (other.group1()[3] * self.group1()[1])
                    - (other.group2()[2] * self.group0()[0])
                    + (other.group3()[0] * self.group1()[2])
                    - (other.group3()[1] * self.group1()[3])
                    - (other.group3()[2] * self.group1()[0])
                    - (other.group3()[3] * self.group0()[1])),
                (-(other.group1()[0] * self.group1()[1]) + (other.group1()[1] * self.group1()[0])
                    - (other.group1()[2] * self.group1()[3])
                    - (other.group1()[3] * self.group1()[2])
                    - (other.group2()[2] * self.group0()[3])
                    - (other.group3()[0] * self.group1()[1])
                    + (other.group3()[1] * self.group1()[0])
                    - (other.group3()[2] * self.group1()[3])
                    - (other.group3()[3] * self.group0()[2])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (swizzle!(other.group2(), 0, 1, 0, 3) * swizzle!(self.group0(), 3, 3, 1, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) - (other.group2()[3] * self.group1()[0])),
                (-(other.group0()[2] * self.group1()[0]) - (other.group2()[3] * self.group1()[1])),
                (-(other.group0()[2] * self.group1()[3]) - (other.group2()[3] * self.group1()[2])),
                ((other.group1()[2] * self.group1()[2])
                    + (other.group2()[2] * self.group0()[2])
                    + (other.group3()[0] * self.group1()[0])
                    + (other.group3()[1] * self.group1()[1])
                    + (other.group3()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group1()[3]]) * swizzle!(self.group1(), 3, 3, 1, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[0], other.group2()[0]]) * swizzle!(self.group0(), 3, 3, 1, 0))
                + (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[2], other.group2()[1]]) * swizzle!(self.group0(), 2, 0, 3, 1))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                - (swizzle!(other.group3(), 2, 0, 1, 3) * swizzle!(self.group0(), 1, 2, 0, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       43       67        0
    //    simd4       19       23        0
    // Totals...
    // yes simd       62       90        0
    //  no simd      119      159        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[0] * self.group1()[3] * -1.0),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from(other.group0()[1]) * self.group1()),
            // e1, e2, e3, e4
            (Simd32x4::from(other.group0()[0])
                * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]])
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for Motor {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       42        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       32       50        0
    //  no simd       56       74        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])
                    - (other.group0()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group0()[3]) - (other.group0()[2] * self.group0()[0]) - (other.group0()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])
                    - (other.group0()[2] * self.group0()[3])
                    - (other.group0()[3] * self.group1()[2])),
                (other.group0()[3] * self.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[3] * self.group0()[0]),
                (other.group0()[3] * self.group0()[1]),
                (other.group0()[3] * self.group0()[2]),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group1()[3])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for Motor {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       38        0
    //    simd4       16       16        0
    // Totals...
    // yes simd       40       54        0
    //  no simd       88      102        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from([
                (-(other.group0()[3] * self.group1()[0]) - (other.group1()[1] * self.group1()[2]) + (other.group1()[2] * self.group1()[1])
                    - (other.group1()[3] * self.group0()[0])),
                (-(other.group0()[3] * self.group1()[1]) + (other.group1()[0] * self.group1()[2])
                    - (other.group1()[2] * self.group1()[0])
                    - (other.group1()[3] * self.group0()[1])),
                (-(other.group0()[3] * self.group1()[2]) + (other.group1()[1] * self.group1()[0])
                    - (other.group1()[2] * self.group1()[3])
                    - (other.group1()[3] * self.group0()[2])),
                0.0,
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 1, 0))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[2], other.group1()[1]]) * swizzle!(self.group0(), 2, 0, 3, 1))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[1], self.group0()[2]]) * swizzle!(other.group1(), 0, 1, 0, 2))
                + (swizzle!(other.group0(), 2, 0, 1, 3) * swizzle!(self.group0(), 1, 2, 0, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(other.group0()[3] * self.group1()[3])
                    + (other.group1()[0] * self.group1()[0])
                    + (other.group1()[1] * self.group1()[1])
                    + (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[0], other.group0()[1]]) * swizzle!(self.group0(), 3, 3, 1, 1))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[2], other.group0()[2]]) * swizzle!(self.group0(), 2, 0, 3, 2))
                + (swizzle!(other.group0(), 3, 3, 3, 0) * swizzle!(self.group0(), 0, 1, 2, 0))
                - (swizzle!(other.group1(), 2, 0, 1, 3) * swizzle!(self.group0(), 1, 2, 0, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for Motor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       54        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       41       63        0
    //  no simd       68       90        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group0()[2])),
                ((other.group0()[1] * self.group0()[3]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group1()[2]) + (other.group1()[0] * self.group0()[3]) + (other.group1()[1] * self.group0()[2])),
                ((other.group0()[1] * self.group1()[3]) + (other.group0()[2] * self.group1()[0]) + (other.group1()[1] * self.group0()[3]) + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[2] * self.group1()[3]) + (other.group1()[0] * self.group0()[1]) + (other.group1()[2] * self.group0()[3])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for Motor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       54        0
    //    simd4       12       12        0
    // Totals...
    // yes simd       44       66        0
    //  no simd       80      102        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) + (other.group0()[3] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[0]) + (other.group0()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group0()[3]) + (other.group0()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) + (swizzle!(other.group0(), 0, 1, 0, 3) * swizzle!(self.group0(), 3, 3, 1, 3))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) + (other.group0()[3] * self.group1()[0]) + (other.group1()[1] * self.group0()[2]) + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[2] * self.group1()[0]) + (other.group0()[3] * self.group1()[1]) + (other.group1()[2] * self.group0()[0]) + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group1()[3]) + (other.group0()[3] * self.group1()[2]) + (other.group1()[2] * self.group0()[3]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) + (swizzle!(other.group0(), 0, 1, 0, 3) * swizzle!(self.group1(), 3, 3, 1, 3))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (swizzle!(other.group1(), 0, 1, 0, 3) * swizzle!(self.group0(), 3, 3, 1, 3))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for Motor {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       26        0
    //    simd4       14       14        0
    // Totals...
    // yes simd       26       40        0
    //  no simd       68       82        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from([
                (other.group0()[2] * self.group1()[1]),
                (other.group0()[0] * self.group1()[2]),
                (other.group0()[1] * self.group1()[0]),
                0.0,
            ]) - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[3], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[1], self.group0()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))
                - (swizzle!(other.group0(), 3, 3, 3, 2) * swizzle!(self.group0(), 0, 1, 2, 2))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[2] * self.group1()[2])])
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[3], self.group1()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))
                - (swizzle!(other.group0(), 2, 0, 1, 3) * swizzle!(self.group0(), 1, 2, 0, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for Motor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       30        0
    //    simd4        6       10        0
    // Totals...
    // yes simd       22       40        0
    //  no simd       40       70        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from(other[e12345]) * self.group0() * Simd32x4::from(-1.0)),
            // e15, e25, e35, e3215
            (Simd32x4::from(other[e12345]) * self.group1() * Simd32x4::from(-1.0)),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       77      117        0
    //    simd4       25       25        0
    // Totals...
    // yes simd      102      142        0
    //  no simd      177      217        0
    fn sandwich(self, other: Circle) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group0()[2])),
                (-(other.group0()[1] * self.group0()[3]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) - (other.group0()[2] * self.group0()[3])),
                ((other.group0()[0] * self.group1()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (other.group1()[1] * self.group0()[1])
                    + (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3])
                    - (other.group0()[1] * self.group1()[2])
                    - (other.group1()[0] * self.group0()[3])
                    - (other.group1()[1] * self.group0()[2])),
                (-(other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group1()[0])
                    - (other.group1()[1] * self.group0()[3])
                    - (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[3])
                    - (other.group1()[0] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[3])),
                ((other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (swizzle!(other.group1(), 2, 0, 1, 3) * swizzle!(self.group0(), 1, 2, 0, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(other.group2()[0] * self.group0()[3])
                    - (other.group2()[1] * self.group0()[2])
                    - (other.group1()[0] * self.group1()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])
                    - (other.group1()[3] * self.group1()[0])),
                (-(other.group2()[1] * self.group0()[3]) - (other.group2()[2] * self.group0()[0]) + (other.group1()[0] * self.group1()[2])
                    - (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group1()[0])
                    - (other.group1()[3] * self.group1()[1])),
                (-(other.group2()[0] * self.group0()[1]) - (other.group2()[2] * self.group0()[3]) - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    - (other.group1()[2] * self.group1()[3])
                    - (other.group1()[3] * self.group1()[2])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) * -1.0),
                ((other.group0()[2] * self.group1()[0]) * -1.0),
                ((other.group0()[2] * self.group1()[3]) * -1.0),
                ((other.group2()[1] * self.group0()[1]) + (other.group2()[2] * self.group0()[2]) + (other.group1()[1] * self.group1()[1]) + (other.group1()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group1()[3]]) * swizzle!(self.group1(), 3, 3, 1, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       80      117        0
    //    simd4       27       27        0
    // Totals...
    // yes simd      107      144        0
    //  no simd      188      225        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) * -1.0),
                ((other.group0()[2] * self.group0()[0]) * -1.0),
                ((other.group0()[2] * self.group0()[3]) * -1.0),
                ((other.group0()[0] * self.group1()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (other.group1()[1] * self.group0()[1])
                    + (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group2()[3]]) * swizzle!(self.group0(), 3, 3, 1, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3])
                    - (other.group0()[1] * self.group1()[2])
                    - (other.group1()[0] * self.group0()[3])
                    - (other.group1()[1] * self.group0()[2])
                    - (other.group2()[3] * self.group0()[0])),
                (-(other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group1()[0])
                    - (other.group1()[1] * self.group0()[3])
                    - (other.group1()[2] * self.group0()[0])
                    - (other.group2()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[3])
                    - (other.group1()[0] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[3])
                    - (other.group2()[3] * self.group0()[2])),
                ((other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (swizzle!(other.group1(), 2, 0, 1, 3) * swizzle!(self.group0(), 1, 2, 0, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(other.group1()[0] * self.group1()[3]) - (other.group1()[1] * self.group1()[2]) + (other.group1()[2] * self.group1()[1])
                    - (other.group1()[3] * self.group1()[0])
                    - (other.group2()[0] * self.group0()[3])
                    - (other.group2()[1] * self.group0()[2])
                    - (other.group2()[3] * self.group1()[0])),
                ((other.group1()[0] * self.group1()[2])
                    - (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group1()[0])
                    - (other.group1()[3] * self.group1()[1])
                    - (other.group2()[1] * self.group0()[3])
                    - (other.group2()[2] * self.group0()[0])
                    - (other.group2()[3] * self.group1()[1])),
                (-(other.group1()[0] * self.group1()[1]) + (other.group1()[1] * self.group1()[0])
                    - (other.group1()[2] * self.group1()[3])
                    - (other.group1()[3] * self.group1()[2])
                    - (other.group2()[0] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[3])
                    - (other.group2()[3] * self.group1()[2])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((other.group1()[2] * self.group1()[2]) + (other.group2()[0] * self.group0()[0]) + (other.group2()[1] * self.group0()[1]) + (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group1()[3]]) * swizzle!(self.group1(), 3, 3, 1, 3))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[2], other.group2()[3]]) * swizzle!(self.group1(), 2, 0, 3, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       71      102        0
    //    simd4       27       28        0
    // Totals...
    // yes simd       98      130        0
    //  no simd      179      214        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group0()[2])),
                ((other.group0()[1] * self.group0()[3]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[2] * self.group1()[1]) + (other.group1()[0] * self.group0()[3]) + (other.group1()[1] * self.group0()[2])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group1()[1] * self.group0()[3]) + (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[1] * self.group1()[0]) + (other.group1()[0] * self.group0()[1]) + (other.group1()[2] * self.group0()[3])),
                (other.group0()[2] * self.group1()[2]),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 1, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[2], other.group0()[1]]) * swizzle!(self.group1(), 2, 0, 3, 1))
                - (swizzle!(other.group1(), 2, 0, 1, 3) * swizzle!(self.group0(), 1, 2, 0, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group2()[0] * self.group0()[3]) + (other.group2()[1] * self.group0()[2]) + (other.group1()[0] * self.group1()[3]) + (other.group1()[1] * self.group1()[2])),
                ((other.group2()[1] * self.group0()[3]) + (other.group2()[2] * self.group0()[0]) + (other.group1()[1] * self.group1()[3]) + (other.group1()[2] * self.group1()[0])),
                ((other.group2()[0] * self.group0()[1]) + (other.group2()[2] * self.group0()[3]) + (other.group1()[0] * self.group1()[1]) + (other.group1()[2] * self.group1()[3])),
                (-(other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])),
            ]) - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group1(), 0, 1, 2, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) - (other.group0()[2] * self.group1()[3])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       59       86        0
    //    simd4       41       42        0
    // Totals...
    // yes simd      100      128        0
    //  no simd      223      254        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group0()[2])),
                ((other.group0()[1] * self.group0()[3]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([0.0, 0.0, 0.0, (other.group3()[2] * self.group0()[2])])
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 1, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[2], other.group0()[1]]) * swizzle!(self.group1(), 2, 0, 3, 1))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group1(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[0], other.group3()[0]]) * swizzle!(self.group0(), 3, 3, 1, 0))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[2], other.group3()[1]]) * swizzle!(self.group0(), 2, 0, 3, 1))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[2]]) * swizzle!(self.group1(), 0, 1, 2, 2))
                - (swizzle!(other.group1(), 2, 0, 1, 3) * swizzle!(self.group0(), 1, 2, 0, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group2()[1] * self.group0()[2]) + (other.group3()[3] * self.group0()[0])),
                ((other.group2()[2] * self.group0()[0]) + (other.group3()[3] * self.group0()[1])),
                ((other.group2()[2] * self.group0()[3]) + (other.group3()[3] * self.group0()[2])),
                (-(other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[0], other.group3()[0]]) * swizzle!(self.group1(), 3, 3, 1, 0))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[2], other.group3()[1]]) * swizzle!(self.group1(), 2, 0, 3, 1))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[0], other.group3()[3]]) * swizzle!(self.group0(), 3, 3, 1, 3))
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[0], other.group1()[2]]) * swizzle!(self.group1(), 3, 3, 1, 2))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[2], other.group1()[3]]) * swizzle!(self.group1(), 2, 0, 3, 3))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group1(), 0, 1, 2, 1))
                - (swizzle!(other.group2(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (swizzle!(other.group3(), 2, 0, 1, 2) * swizzle!(self.group1(), 1, 2, 0, 2))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1])
                    - (other.group2()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group1()[0]) - (other.group2()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0])
                    - (other.group0()[2] * self.group1()[3])
                    - (other.group2()[3] * self.group1()[2])),
                0.0,
            ]) - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[0], other.group0()[1]]) * swizzle!(self.group0(), 3, 3, 1, 1))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[2], other.group0()[2]]) * swizzle!(self.group0(), 2, 0, 3, 2))
                + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       45       82        0
    //    simd4       18       21        0
    // Totals...
    // yes simd       63      103        0
    //  no simd      117      166        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group0()[2])),
                (other.group0()[0] * self.group1()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (other.group0()[1] * self.group1()[0]),
                (other.group0()[1] * self.group1()[1]),
                (other.group0()[1] * self.group1()[2]),
                (other.group0()[0] * self.group0()[3]),
            ]) * Simd32x4::from(-1.0)),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]) * self.group1() * Simd32x4::from(-1.0)),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for Motor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       46        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       32       54        0
    //  no simd       56       78        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) - (other.group0()[3] * self.group1()[0])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[3]) + (other.group0()[2] * self.group0()[0])
                    - (other.group0()[3] * self.group1()[1])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group0()[3]) - (other.group0()[3] * self.group1()[2])),
                (other.group0()[3] * self.group0()[3] * -1.0),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[3] * self.group0()[0] * -1.0),
                (other.group0()[3] * self.group0()[1] * -1.0),
                (other.group0()[3] * self.group0()[2] * -1.0),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group0()[3] * self.group1()[3])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for Motor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       38        0
    //    simd4       16       16        0
    // Totals...
    // yes simd       40       54        0
    //  no simd       88      102        0
    fn sandwich(self, other: Flector) -> Self::Output {
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from([
                (-(other.group0()[3] * self.group1()[0]) - (other.group1()[0] * self.group1()[3]) - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[3] * self.group0()[0])),
                (-(other.group0()[3] * self.group1()[1]) - (other.group1()[1] * self.group1()[3]) - (other.group1()[2] * self.group1()[0])
                    + (other.group1()[3] * self.group0()[1])),
                (-(other.group0()[3] * self.group1()[2]) - (other.group1()[0] * self.group1()[1]) - (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group0()[2])),
                0.0,
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 1, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[2], other.group1()[1]]) * swizzle!(self.group0(), 2, 0, 3, 1))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[2]]) * swizzle!(other.group1(), 2, 0, 1, 2))
                - (swizzle!(other.group0(), 2, 0, 1, 3) * swizzle!(self.group0(), 1, 2, 0, 3))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(other.group0()[3] * self.group1()[3])
                    + (other.group1()[1] * self.group1()[1])
                    + (other.group1()[2] * self.group1()[2])
                    + (other.group1()[3] * self.group0()[3])),
            ]) - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[0], other.group0()[1]]) * swizzle!(self.group0(), 3, 3, 1, 1))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[2], other.group0()[2]]) * swizzle!(self.group0(), 2, 0, 3, 2))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (swizzle!(other.group0(), 3, 3, 3, 0) * swizzle!(self.group0(), 0, 1, 2, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for Motor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       54        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       41       63        0
    //  no simd       68       90        0
    fn sandwich(self, other: Line) -> Self::Output {
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group0()[2])),
                (-(other.group0()[1] * self.group0()[3]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) - (other.group0()[2] * self.group0()[3])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3])
                    - (other.group0()[1] * self.group1()[2])
                    - (other.group1()[0] * self.group0()[3])
                    - (other.group1()[1] * self.group0()[2])),
                (-(other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group1()[0])
                    - (other.group1()[1] * self.group0()[3])
                    - (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[3])
                    - (other.group1()[0] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[3])),
                ((other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2]) + (other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for Motor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       54        0
    //    simd4       12       12        0
    // Totals...
    // yes simd       44       66        0
    //  no simd       80      102        0
    fn sandwich(self, other: Motor) -> Self::Output {
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) - (other.group0()[3] * self.group0()[0])),
                (-(other.group0()[2] * self.group0()[0]) - (other.group0()[3] * self.group0()[1])),
                (-(other.group0()[2] * self.group0()[3]) - (other.group0()[3] * self.group0()[2])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) - (swizzle!(other.group0(), 0, 1, 0, 3) * swizzle!(self.group0(), 3, 3, 1, 3))
                + (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2])
                    - (other.group0()[3] * self.group1()[0])
                    - (other.group1()[1] * self.group0()[2])
                    - (other.group1()[3] * self.group0()[0])),
                (-(other.group0()[2] * self.group1()[0])
                    - (other.group0()[3] * self.group1()[1])
                    - (other.group1()[2] * self.group0()[0])
                    - (other.group1()[3] * self.group0()[1])),
                (-(other.group0()[2] * self.group1()[3])
                    - (other.group0()[3] * self.group1()[2])
                    - (other.group1()[2] * self.group0()[3])
                    - (other.group1()[3] * self.group0()[2])),
                ((other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2]) + (other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]) - (swizzle!(other.group0(), 0, 1, 0, 3) * swizzle!(self.group1(), 3, 3, 1, 3))
                + (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (swizzle!(other.group1(), 0, 1, 0, 3) * swizzle!(self.group0(), 3, 3, 1, 3))
                + (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for Motor {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      130      181        0
    //    simd3       40       44        0
    //    simd4       51       52        0
    // Totals...
    // yes simd      221      277        0
    //  no simd      454      521        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(other.group0()[1] * self.group0()[3])
                    + (other.group7()[0] * self.group1()[0])
                    + (other.group7()[1] * self.group1()[1])
                    + (other.group7()[2] * self.group1()[2])
                    + (self.group0()[0] * other.group6()[0])
                    + (self.group0()[1] * other.group6()[1])
                    + (self.group0()[2] * other.group6()[2])
                    - (self.group1()[3] * other.group1()[3])),
                ((other.group0()[0] * self.group0()[3])
                    - (other.group4()[0] * self.group1()[0])
                    - (other.group4()[1] * self.group1()[1])
                    - (other.group4()[2] * self.group1()[2])
                    - (other.group5()[0] * self.group0()[0])
                    - (other.group5()[1] * self.group0()[1])
                    - (other.group5()[2] * self.group0()[2])
                    + (self.group1()[3] * other[e45])),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group4()[0] * self.group1()[3]) - (other.group4()[1] * self.group1()[2]) + (other.group4()[2] * self.group1()[1]) - (self.group1()[0] * other[e45])),
                ((other.group4()[0] * self.group1()[2]) - (other.group4()[1] * self.group1()[3]) - (other.group4()[2] * self.group1()[0]) - (self.group1()[1] * other[e45])),
                (-(other.group4()[0] * self.group1()[1]) + (other.group4()[1] * self.group1()[0]) - (other.group4()[2] * self.group1()[3]) - (self.group1()[2] * other[e45])),
                0.0,
            ]) - (Simd32x4::from([other.group3()[3], other.group9()[2], other.group9()[0], other.group4()[0]]) * swizzle!(self.group0(), 0, 0, 1, 0))
                - (Simd32x4::from([other.group9()[0], other.group9()[1], other.group9()[2], other.group4()[2]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group9()[1], other.group3()[3], other.group3()[3], other.group4()[1]]) * swizzle!(self.group0(), 2, 1, 2, 1))
                + (Simd32x4::from([other.group9()[2], other.group9()[0], other.group9()[1], other[e45]]) * swizzle!(self.group0(), 1, 2, 0, 3))),
            // e5
            ((other.group0()[0] * self.group1()[3])
                - (other.group5()[0] * self.group1()[0])
                - (other.group5()[1] * self.group1()[1])
                - (other.group5()[2] * self.group1()[2])
                - (self.group0()[0] * other.group3()[0])
                - (self.group0()[1] * other.group3()[1])
                - (self.group0()[2] * other.group3()[2])
                + (self.group0()[3] * other.group9()[3])
                + (self.group1()[0] * other.group9()[0])
                + (self.group1()[1] * other.group9()[1])
                + (self.group1()[2] * other.group9()[2])
                - (self.group1()[3] * other.group3()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                (-(self.group1()[0] * other.group6()[3])
                    - (self.group1()[2] * other.group1()[1])
                    - (self.group1()[2] * other.group6()[1])
                    - (self.group1()[3] * other.group1()[0])
                    - (self.group1()[3] * other.group6()[0])),
                (-(self.group1()[0] * other.group1()[2])
                    - (self.group1()[0] * other.group6()[2])
                    - (self.group1()[1] * other.group6()[3])
                    - (self.group1()[3] * other.group1()[1])
                    - (self.group1()[3] * other.group6()[1])),
                (-(self.group1()[1] * other.group1()[0])
                    - (self.group1()[1] * other.group6()[0])
                    - (self.group1()[2] * other.group6()[3])
                    - (self.group1()[3] * other.group1()[2])
                    - (self.group1()[3] * other.group6()[2])),
                (other.group7()[2] * self.group1()[2]),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group1()[3]]) * self.group1())
                - (Simd32x4::from([other.group8()[0], other.group8()[1], other.group8()[0], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 1, 0))
                - (Simd32x4::from([other.group8()[1], other.group8()[2], other.group8()[2], other.group1()[1]]) * swizzle!(self.group0(), 2, 0, 3, 1))
                + (Simd32x4::from([other.group8()[2], other.group8()[0], other.group8()[1], other.group6()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group7()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group7()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))
                - (Simd32x4::from([other[e1], other[e1], other[e1], other.group1()[2]]) * swizzle!(self.group0(), 0, 1, 2, 2))),
            // e41, e42, e43
            (-(Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group7(), 2, 0, 1))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[3]]) * swizzle!(other.group7(), 1, 2, 2))
                - (Simd32x3::from([self.group0()[3], self.group0()[3], self.group0()[1]]) * swizzle!(other.group7(), 0, 1, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                ((self.group0()[1] * other.group6()[2]) - (self.group0()[2] * other.group6()[1])),
                (-(self.group0()[0] * other.group6()[2]) + (self.group0()[2] * other.group6()[0])),
                ((self.group0()[0] * other.group6()[1]) - (self.group0()[1] * other.group6()[0])),
            ]) - (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group7(), 2, 0, 1))
                - (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[3]]) * swizzle!(other.group7(), 1, 2, 2))
                - (Simd32x3::from([self.group1()[3], self.group1()[3], self.group1()[1]]) * swizzle!(other.group7(), 0, 1, 0))),
            // e415, e425, e435, e321
            ((Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group9()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[0], other.group4()[0]]) * swizzle!(self.group1(), 3, 3, 1, 0))
                + (Simd32x4::from([other.group4()[1], other.group4()[2], other.group4()[2], other.group4()[1]]) * swizzle!(self.group1(), 2, 0, 3, 1))
                - (Simd32x4::from([other.group4()[2], other.group4()[0], other.group4()[1], other[e45]]) * swizzle!(self.group1(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[0], other.group9()[1]]) * swizzle!(self.group0(), 3, 3, 1, 1))
                + (Simd32x4::from([other.group5()[1], other.group5()[2], other.group5()[2], other.group9()[2]]) * swizzle!(self.group0(), 2, 0, 3, 2))
                - (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group3()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([other[e45], other[e45], other[e45], other.group4()[2]]) * swizzle!(self.group1(), 0, 1, 2, 2))),
            // e423, e431, e412
            ((Simd32x3::from(other[e45]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group4(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[3]]) * swizzle!(other.group4(), 1, 2, 2))
                + (Simd32x3::from([self.group0()[3], self.group0()[3], self.group0()[1]]) * swizzle!(other.group4(), 0, 1, 0))),
            // e235, e315, e125
            (Simd32x3::from([
                (-(self.group0()[1] * other.group3()[2]) + (self.group0()[2] * other.group3()[1]) + (self.group1()[1] * other.group9()[2])
                    - (self.group1()[2] * other.group9()[1])),
                ((self.group0()[0] * other.group3()[2]) - (self.group0()[2] * other.group3()[0]) - (self.group1()[0] * other.group9()[2]) + (self.group1()[2] * other.group9()[0])),
                (-(self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group3()[0]) + (self.group1()[0] * other.group9()[1])
                    - (self.group1()[1] * other.group9()[0])),
            ]) + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group9()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group5(), 2, 0, 1))
                + (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[3]]) * swizzle!(other.group5(), 1, 2, 2))
                + (Simd32x3::from([self.group1()[3], self.group1()[3], self.group1()[1]]) * swizzle!(other.group5(), 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group1()[0] * other.group1()[3]) * -1.0),
                ((self.group1()[1] * other.group1()[3]) * -1.0),
                ((self.group1()[2] * other.group1()[3]) * -1.0),
                ((self.group1()[0] * other.group6()[0])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[1] * other.group6()[1])
                    + (self.group1()[2] * other.group1()[2])
                    + (self.group1()[2] * other.group6()[2])),
            ]) - (Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[0], other.group0()[1]]) * swizzle!(self.group1(), 3, 3, 1, 3))
                - (Simd32x4::from([other.group7()[1], other.group7()[2], other.group7()[2], other.group6()[3]]) * swizzle!(self.group1(), 2, 0, 3, 3))
                + (Simd32x4::from([other.group7()[2], other.group7()[0], other.group7()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group8()[2]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group1()[1], other.group6()[3], other.group6()[3], other.group8()[1]]) * swizzle!(self.group0(), 2, 1, 2, 1))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other[e1]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group6()[3], other.group1()[2], other.group1()[0], other.group8()[0]]) * swizzle!(self.group0(), 0, 0, 1, 0))),
            // e1234
            ((other.group7()[0] * self.group0()[0]) + (other.group7()[1] * self.group0()[1]) + (other.group7()[2] * self.group0()[2]) - (self.group0()[3] * other.group1()[3])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for Motor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       38        0
    //    simd4       11       11        0
    // Totals...
    // yes simd       31       49        0
    //  no simd       64       82        0
    fn sandwich(self, other: Plane) -> Self::Output {
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from([
                (-(self.group1()[2] * other.group0()[1]) - (self.group1()[3] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[2]) - (self.group1()[3] * other.group0()[1])),
                (-(self.group1()[1] * other.group0()[0]) - (self.group1()[3] * other.group0()[2])),
                (self.group0()[2] * other.group0()[2]),
            ]) + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[1]]) * swizzle!(other.group0(), 2, 0, 1, 1))
                + (swizzle!(self.group0(), 0, 1, 2, 0) * swizzle!(other.group0(), 3, 3, 3, 0))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                (-(self.group0()[2] * other.group0()[1]) - (self.group0()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[2]) - (self.group0()[3] * other.group0()[1])),
                (-(self.group0()[1] * other.group0()[0]) - (self.group0()[3] * other.group0()[2])),
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       53       93        0
    //    simd4       21       23        0
    // Totals...
    // yes simd       74      116        0
    //  no simd      137      185        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]) * Simd32x4::from(-1.0)),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3] * -1.0),
                (self.group1()[1] * other.group0()[3] * -1.0),
                (self.group1()[2] * other.group0()[3] * -1.0),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group0()[0] * other[e2]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1]) - (self.group1()[3] * other.group0()[0])),
                (-(self.group0()[1] * other[e2]) - (self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0]) - (self.group1()[3] * other.group0()[1])),
                (-(self.group0()[2] * other[e2]) + (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0]) - (self.group1()[3] * other.group0()[2])),
                (self.group0()[3] * other.group0()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) * -1.0),
                ((self.group1()[1] * other.group0()[3]) * -1.0),
                ((self.group1()[2] * other.group0()[3]) * -1.0),
                (self.group1()[2] * other.group0()[2]),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group1()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other[e2]]) * swizzle!(self.group0(), 1, 2, 0, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for Motor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       30        0
    //    simd4        6        8        0
    // Totals...
    // yes simd       22       38        0
    //  no simd       40       62        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(other[scalar]) * self.group0()),
            // e235, e315, e125, e5
            (Simd32x4::from(other[scalar]) * self.group1()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       55       82        0
    //    simd4       21       23        0
    // Totals...
    // yes simd       76      105        0
    //  no simd      139      174        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(other[e4315]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[0] * other[e4315]),
                (self.group1()[1] * other[e4315]),
                (self.group1()[2] * other[e4315]),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other[e4315])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group1()[2] * other.group0()[1]) - (self.group1()[3] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[2]) - (self.group1()[3] * other.group0()[1])),
                (-(self.group1()[1] * other.group0()[0]) - (self.group1()[3] * other.group0()[2])),
                ((self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * self.group0())
                + (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) - (self.group0()[3] * other.group0()[0]) - (self.group1()[0] * other[e4315])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0]) - (self.group0()[3] * other.group0()[1]) - (self.group1()[1] * other[e4315])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) - (self.group0()[3] * other.group0()[2]) - (self.group1()[2] * other[e4315])),
                (self.group0()[3] * other[e4315]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       85      125        0
    //    simd4       35       35        0
    // Totals...
    // yes simd      120      160        0
    //  no simd      225      265        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(self.group0()[2] * other.group0()[1]) - (self.group0()[3] * other.group0()[0])),
                (-(self.group0()[1] * other.group3()[3]) - (self.group0()[3] * other.group0()[1])),
                (-(self.group0()[2] * other.group3()[3]) - (self.group0()[3] * other.group0()[2])),
                ((self.group0()[1] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[2])
                    + (self.group1()[0] * other.group0()[0])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group3()[3])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group3()[3], other.group0()[2], other.group0()[0], other.group0()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(self.group1()[2] * other.group0()[1]) - (self.group1()[3] * other.group0()[0])),
                (-(self.group1()[1] * other.group3()[3]) - (self.group1()[3] * other.group0()[1])),
                (-(self.group1()[2] * other.group3()[3]) - (self.group1()[3] * other.group0()[2])),
                ((self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group3()[0]]) * swizzle!(self.group0(), 0, 0, 1, 0))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[2]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group1()[1], other.group0()[3], other.group0()[3], other.group3()[1]]) * swizzle!(self.group0(), 2, 1, 2, 1))
                - (Simd32x4::from([other.group3()[3], other.group0()[2], other.group0()[0], other.group3()[3]]) * swizzle!(self.group1(), 0, 0, 1, 3))
                + (swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group1(), 2, 0, 1, 3))
                + (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(self.group0()[2] * other.group2()[1])
                    - (self.group0()[3] * other.group2()[0])
                    - (self.group1()[0] * other.group0()[3])
                    - (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group1()[2])
                    + (self.group1()[1] * other.group3()[2])
                    - (self.group1()[2] * other.group1()[1])
                    - (self.group1()[2] * other.group3()[1])
                    - (self.group1()[3] * other.group1()[0])
                    - (self.group1()[3] * other.group3()[0])),
                (-(self.group0()[1] * other.group2()[3])
                    - (self.group0()[3] * other.group2()[1])
                    - (self.group1()[0] * other.group1()[2])
                    - (self.group1()[0] * other.group3()[2])
                    - (self.group1()[1] * other.group0()[3])
                    - (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group1()[2] * other.group3()[0])
                    - (self.group1()[3] * other.group1()[1])
                    - (self.group1()[3] * other.group3()[1])),
                (-(self.group0()[2] * other.group2()[3]) - (self.group0()[3] * other.group2()[2])
                    + (self.group1()[0] * other.group1()[1])
                    + (self.group1()[0] * other.group3()[1])
                    - (self.group1()[1] * other.group1()[0])
                    - (self.group1()[1] * other.group3()[0])
                    - (self.group1()[2] * other.group0()[3])
                    - (self.group1()[2] * other.group1()[3])
                    - (self.group1()[3] * other.group1()[2])
                    - (self.group1()[3] * other.group3()[2])),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group2()[3], other.group2()[2], other.group2()[0], other.group3()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group1()[3] * other.group0()[0]) * -1.0),
                ((self.group1()[3] * other.group0()[1]) * -1.0),
                ((self.group1()[3] * other.group0()[2]) * -1.0),
                ((self.group1()[0] * other.group3()[0])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[1] * other.group3()[1])
                    + (self.group1()[2] * other.group1()[2])
                    + (self.group1()[2] * other.group3()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group3()[3], other.group3()[3], other.group1()[3]]) * swizzle!(self.group1(), 2, 1, 2, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group2()[0]]) * swizzle!(self.group0(), 0, 0, 1, 0))
                + (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[2]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group2()[1]]) * swizzle!(self.group0(), 2, 1, 2, 1))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group3()[3], other.group0()[2], other.group0()[0], other.group0()[3]]) * swizzle!(self.group1(), 0, 0, 1, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       60       86        0
    //    simd4       42       44        0
    // Totals...
    // yes simd      102      130        0
    //  no simd      228      262        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[2] * other.group0()[1]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group2()[3]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group2()[3]) + (self.group0()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])
                    + (self.group1()[3] * other.group2()[3])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group0()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))),
            // e415, e425, e435, e321
            ((Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group0()[1]]) * swizzle!(self.group1(), 2, 1, 2, 1))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group1(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group3()[0]]) * swizzle!(self.group0(), 0, 0, 1, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[2]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group1()[1], other.group0()[3], other.group0()[3], other.group3()[1]]) * swizzle!(self.group0(), 2, 1, 2, 1))
                + (Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group1(), 0, 0, 1, 0))
                - (swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group1(), 2, 0, 1, 3))
                + (swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group0(), 0, 1, 2, 2))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group0()[2] * other.group2()[1]) + (self.group0()[3] * other.group2()[0])),
                ((self.group0()[3] * other.group2()[1]) + (self.group1()[3] * other.group1()[1])),
                ((self.group0()[3] * other.group2()[2]) + (self.group1()[3] * other.group1()[2])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])),
            ]) + (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[3], other.group1()[2], other.group3()[1], other.group3()[0]]))
                - (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group1()[0]]))
                - (Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group1()[1]]))
                - (Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group1()[2]]))
                - (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                + (Simd32x4::from([self.group1()[1], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group3(), 2, 3, 3, 1))
                + (Simd32x4::from([other.group1()[0], other.group3()[0], other.group0()[3], other.group0()[3]]) * swizzle!(self.group1(), 3, 2, 2, 3))
                + (Simd32x4::from([other.group1()[1], other.group0()[3], other.group1()[0], other.group3()[2]]) * swizzle!(self.group1(), 2, 1, 1, 2))
                + (Simd32x4::from([other.group3()[3], other.group2()[2], other.group2()[0], other.group3()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))
                - (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group2(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group1()[0] * other.group2()[3]) + (self.group1()[1] * other.group0()[2])
                    - (self.group1()[2] * other.group0()[1])
                    - (self.group1()[3] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[2]) - (self.group1()[1] * other.group2()[3]) + (self.group1()[2] * other.group0()[0])
                    - (self.group1()[3] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0]) - (self.group1()[2] * other.group2()[3]) - (self.group1()[3] * other.group0()[2])),
                0.0,
            ]) - (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group0()[0]]) * swizzle!(self.group0(), 0, 0, 1, 0))
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[2]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group0()[1]]) * swizzle!(self.group0(), 2, 1, 2, 1))
                + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl InfixSandwich for MultiVector {}
impl Sandwich<AntiCircleRotor> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      421      471        0
    //    simd2       26       26        0
    //    simd3      153      162        0
    //    simd4       95       97        0
    // Totals...
    // yes simd      695      756        0
    //  no simd     1312     1397        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([(other.group1()[3] * self.group3()[3]), ((other.group1()[3] * self.group6()[3]) * -1.0)])
                - (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group3()[0], self.group8()[0]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group3()[1], self.group8()[1]]))
                - (Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group3()[2], self.group8()[2]]))
                - (Simd32x2::from(other.group1()[0]) * Simd32x2::from([self.group5()[0], self.group6()[0]]))
                - (Simd32x2::from(other.group1()[1]) * Simd32x2::from([self.group5()[1], self.group6()[1]]))
                - (Simd32x2::from(other.group1()[2]) * Simd32x2::from([self.group5()[2], self.group6()[2]]))
                - (Simd32x2::from(other.group2()[0]) * Simd32x2::from([self.group4()[0], self.group7()[0]]))
                - (Simd32x2::from(other.group2()[1]) * Simd32x2::from([self.group4()[1], self.group7()[1]]))
                - (Simd32x2::from(other.group2()[2]) * Simd32x2::from([self.group4()[2], self.group7()[2]]))
                + (Simd32x2::from(other.group2()[3]) * self.group0())),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self[e1]) - (other.group0()[1] * self.group8()[2]) + (other.group0()[2] * self.group8()[1]) - (self.group7()[1] * other.group2()[2])
                    + (other.group1()[1] * self.group1()[2])
                    + (other.group2()[0] * self.group1()[3])
                    + (other.group2()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group8()[2]) - (other.group0()[1] * self[e1]) - (other.group0()[2] * self.group8()[0]) - (self.group7()[2] * other.group2()[0])
                    + (other.group1()[2] * self.group1()[0])
                    + (other.group2()[1] * self.group1()[3])
                    + (other.group2()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group8()[1]) + (other.group0()[1] * self.group8()[0]) - (other.group0()[2] * self[e1]) - (self.group7()[0] * other.group2()[1])
                    + (other.group1()[2] * self.group6()[3])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group2()[3] * self.group1()[2])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[1] * self.group6()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group6()[2])
                    - (self.group7()[0] * other.group1()[0])
                    - (self.group7()[1] * other.group1()[1])
                    - (self.group7()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([self.group7()[2], self.group7()[0], self.group7()[1], self.group1()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[0]]) * swizzle!(self.group6(), 0, 1, 2, 0))
                + (Simd32x4::from([self.group6()[3], self.group6()[3], self.group1()[1], self.group1()[3]]) * swizzle!(other.group1(), 0, 1, 0, 3))),
            // e5
            (-(self.group8()[0] * other.group1()[0]) - (self.group8()[1] * other.group1()[1]) - (self.group8()[2] * other.group1()[2]) - (other.group1()[3] * self[e1])
                + (other.group2()[0] * self.group1()[0])
                - (other.group2()[0] * self.group6()[0])
                + (other.group2()[1] * self.group1()[1])
                - (other.group2()[1] * self.group6()[1])
                + (other.group2()[2] * self.group1()[2])
                - (other.group2()[2] * self.group6()[2])
                + (other.group2()[3] * self[e1])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                (-(self.group5()[1] * other.group2()[2]) + (other.group1()[0] * self.group9()[3]) + (other.group2()[3] * self.group3()[0])),
                (-(self.group5()[2] * other.group2()[0]) + (other.group1()[1] * self.group9()[3]) + (other.group2()[3] * self.group3()[1])),
                (-(self.group5()[0] * other.group2()[1]) + (other.group1()[2] * self.group9()[3]) + (other.group2()[3] * self.group3()[2])),
                (-(other.group0()[2] * self.group3()[2]) - (other.group1()[1] * self.group9()[1]) - (other.group1()[2] * self.group9()[2])),
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))
                + (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group4()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[3]]) * swizzle!(self.group3(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[1]]) * swizzle!(self.group3(), 0, 1, 2, 1))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[0]]) * swizzle!(self.group9(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group9()[1], self.group4()[1]]) * swizzle!(other.group2(), 0, 1, 0, 1))
                + (Simd32x4::from([self.group9()[2], self.group9()[0], self.group3()[3], self.group4()[2]]) * swizzle!(other.group2(), 1, 2, 2, 2))),
            // e41, e42, e43
            ((Simd32x3::from(self.group0()[0]) * other.group0())
                - (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group3()[3], self.group5()[2], self.group9()[1]]))
                - (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group9()[2], self.group3()[3], self.group5()[0]]))
                - (Simd32x3::from(other.group0()[2]) * Simd32x3::from([self.group5()[1], self.group9()[0], self.group3()[3]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from([self.group5()[2], self.group9()[2], self.group5()[1]]) * swizzle!(other.group0(), 1, 0, 0))
                + (Simd32x3::from([other.group1()[1], other.group2()[3], other.group2()[3]]) * swizzle!(self.group4(), 2, 1, 2))
                - (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]) * swizzle!(self.group4(), 1, 2, 0))
                + (Simd32x3::from([other.group1()[3], other.group1()[2], other.group1()[0]]) * swizzle!(self.group4(), 0, 0, 1))
                + (Simd32x3::from([other.group2()[3], other.group1()[3], other.group1()[3]]) * self.group4())
                + (Simd32x3::from([self.group9()[1], self.group5()[0], self.group9()[0]]) * swizzle!(other.group0(), 2, 2, 1))),
            // e23, e31, e12
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                + (Simd32x3::from([other.group1()[1], other.group2()[3], other.group2()[3]]) * swizzle!(self.group5(), 2, 1, 2))
                - (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]) * swizzle!(self.group5(), 1, 2, 0))
                + (Simd32x3::from([other.group2()[1], other.group2()[2], other.group2()[0]]) * swizzle!(self.group4(), 2, 0, 1))
                - (Simd32x3::from([other.group2()[2], other.group2()[0], other.group2()[1]]) * swizzle!(self.group4(), 1, 2, 0))
                + (Simd32x3::from([other.group2()[3], other.group1()[2], other.group1()[0]]) * swizzle!(self.group5(), 0, 0, 1))
                - (Simd32x3::from([self.group3()[1], self.group3()[2], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                + (Simd32x3::from([self.group3()[2], self.group3()[0], self.group9()[3]]) * swizzle!(other.group0(), 1, 2, 2))
                + (Simd32x3::from([self.group9()[3], self.group9()[3], self.group3()[1]]) * swizzle!(other.group0(), 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[0]) + (other.group0()[0] * self[e1]) + (other.group0()[1] * self.group8()[2]) - (other.group0()[2] * self.group8()[1])
                    + (other.group1()[1] * self.group6()[2])
                    + (other.group2()[0] * self.group1()[3])
                    + (other.group2()[3] * self.group6()[0])),
                ((self.group0()[1] * other.group1()[1]) - (other.group0()[0] * self.group8()[2])
                    + (other.group0()[1] * self[e1])
                    + (other.group0()[2] * self.group8()[0])
                    + (other.group1()[2] * self.group6()[0])
                    + (other.group2()[1] * self.group1()[3])
                    + (other.group2()[3] * self.group6()[1])),
                ((self.group0()[1] * other.group1()[2]) + (other.group0()[0] * self.group8()[1]) - (other.group0()[1] * self.group8()[0])
                    + (other.group0()[2] * self[e1])
                    + (other.group1()[0] * self.group6()[1])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group2()[3] * self.group6()[2])),
                ((other.group0()[0] * self.group8()[0]) + (other.group0()[1] * self.group8()[1]) + (other.group0()[2] * self.group8()[2])
                    - (self.group7()[1] * other.group2()[1])
                    - (self.group7()[2] * other.group2()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[0], self.group7()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group7()[2], self.group7()[0], self.group7()[1], self.group6()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group6()[1], self.group6()[2], self.group6()[0], self.group0()[1]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (swizzle!(other.group1(), 3, 3, 3, 0) * swizzle!(self.group1(), 0, 1, 2, 0))),
            // e423, e431, e412
            ((Simd32x3::from(self.group0()[1]) * other.group0())
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from([other.group1()[1], other.group2()[3], other.group2()[3]]) * swizzle!(self.group7(), 2, 1, 2))
                - (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]) * swizzle!(self.group7(), 1, 2, 0))
                + (Simd32x3::from([other.group1()[3], other.group1()[2], other.group1()[0]]) * swizzle!(self.group7(), 0, 0, 1))
                + (Simd32x3::from([other.group2()[3], other.group1()[3], other.group1()[3]]) * self.group7())
                - (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                + (Simd32x3::from([self.group1()[2], self.group1()[0], self.group6()[1]]) * swizzle!(other.group0(), 1, 2, 0))
                - (Simd32x3::from([self.group6()[1], self.group6()[2], self.group6()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                + (Simd32x3::from([self.group6()[2], self.group6()[0], self.group6()[3]]) * swizzle!(other.group0(), 1, 2, 2))
                + (Simd32x3::from([self.group6()[3], self.group6()[3], self.group1()[1]]) * swizzle!(other.group0(), 0, 1, 0))),
            // e235, e315, e125
            (Simd32x3::from([
                ((other.group2()[1] * self.group6()[2]) + (other.group2()[2] * self.group1()[1])),
                ((other.group2()[0] * self.group1()[2]) + (other.group2()[2] * self.group6()[0])),
                ((other.group2()[0] * self.group6()[1]) + (other.group2()[1] * self.group1()[0])),
            ]) + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                - (Simd32x3::from(other.group2()[0]) * Simd32x3::from([self.group6()[3], self.group6()[2], self.group1()[1]]))
                - (Simd32x3::from(other.group2()[1]) * Simd32x3::from([self.group1()[2], self.group6()[3], self.group6()[0]]))
                - (Simd32x3::from(other.group2()[2]) * Simd32x3::from([self.group6()[1], self.group1()[0], self.group6()[3]]))
                + (Simd32x3::from(self[e1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from([other.group1()[1], other.group2()[3], other.group2()[3]]) * swizzle!(self.group8(), 2, 1, 2))
                - (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[3]]) * swizzle!(self.group8(), 1, 2, 2))
                - (Simd32x3::from([other.group1()[3], other.group1()[3], other.group1()[1]]) * swizzle!(self.group8(), 0, 1, 0))
                + (Simd32x3::from([other.group2()[3], other.group1()[2], other.group1()[0]]) * swizzle!(self.group8(), 0, 0, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group3()[2])
                    + (self.group4()[1] * other.group2()[2])
                    + (self.group5()[0] * other.group1()[3])
                    + (other.group1()[0] * self.group3()[3])
                    + (other.group1()[1] * self.group9()[2])
                    + (other.group2()[3] * self.group9()[0])),
                ((other.group0()[2] * self.group3()[0])
                    + (self.group4()[2] * other.group2()[0])
                    + (self.group5()[1] * other.group1()[3])
                    + (other.group1()[1] * self.group3()[3])
                    + (other.group1()[2] * self.group9()[0])
                    + (other.group2()[3] * self.group9()[1])),
                ((other.group0()[0] * self.group3()[1])
                    + (self.group4()[0] * other.group2()[1])
                    + (self.group5()[2] * other.group1()[3])
                    + (other.group1()[0] * self.group9()[1])
                    + (other.group1()[2] * self.group3()[3])
                    + (other.group2()[3] * self.group9()[2])),
                (-(self.group5()[2] * other.group2()[2])
                    - (other.group1()[2] * self.group3()[2])
                    - (other.group1()[3] * self.group9()[3])
                    - (other.group2()[0] * self.group9()[0])
                    - (other.group2()[1] * self.group9()[1])
                    - (other.group2()[2] * self.group9()[2])),
            ]) + (Simd32x4::from(self.group9()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group4()[2], self.group4()[0], self.group4()[1], self.group5()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group9()[1], self.group9()[2], self.group9()[0], self.group3()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))
                - (Simd32x4::from([self[e45], self[e45], self[e45], self.group5()[1]]) * swizzle!(other.group2(), 0, 1, 2, 1))),
            // e1234
            (-(other.group0()[0] * self.group5()[0]) + (other.group0()[0] * self.group9()[0]) - (other.group0()[1] * self.group5()[1]) + (other.group0()[1] * self.group9()[1])
                - (other.group0()[2] * self.group5()[2])
                + (other.group0()[2] * self.group9()[2])
                - (self.group4()[0] * other.group1()[0])
                - (self.group4()[1] * other.group1()[1])
                - (self.group4()[2] * other.group1()[2])
                + (other.group1()[3] * self[e45])
                + (other.group2()[3] * self[e45])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      450      502        0
    //    simd2       20       20        0
    //    simd3      162      170        0
    //    simd4      116      118        0
    // Totals...
    // yes simd      748      810        0
    //  no simd     1440     1524        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                ((other.group0()[0] * self.group8()[0])
                    + (other.group0()[1] * self.group8()[1])
                    + (other.group0()[2] * self.group8()[2])
                    + (self.group7()[0] * other.group2()[0])
                    + (self.group7()[1] * other.group2()[1])
                    + (self.group7()[2] * other.group2()[2])
                    + (other.group1()[0] * self.group6()[0])
                    + (other.group1()[1] * self.group6()[1])
                    + (other.group1()[2] * self.group6()[2])
                    - (other.group2()[3] * self[e1])
                    - (other.group3()[3] * self.group1()[3])),
                (-(other.group0()[0] * self.group3()[0])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group3()[2])
                    - (self.group4()[0] * other.group2()[0])
                    - (self.group4()[1] * other.group2()[1])
                    - (self.group4()[2] * other.group2()[2])
                    - (self.group5()[0] * other.group1()[0])
                    - (self.group5()[1] * other.group1()[1])
                    - (self.group5()[2] * other.group1()[2])
                    + (other.group2()[3] * self.group9()[3])
                    + (other.group3()[3] * self[e45])),
            ]) - (Simd32x2::from(other.group1()[3]) * Simd32x2::from([self.group6()[3], self.group3()[3]]))
                + (Simd32x2::from(other.group3()[0]) * Simd32x2::from([self.group1()[0], self.group9()[0]]))
                + (Simd32x2::from(other.group3()[1]) * Simd32x2::from([self.group1()[1], self.group9()[1]]))
                + (Simd32x2::from(other.group3()[2]) * Simd32x2::from([self.group1()[2], self.group9()[2]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group9()[3]) + (other.group0()[2] * self.group3()[1]) - (self.group4()[1] * other.group2()[2])
                    + (self.group4()[2] * other.group2()[1])
                    + (self.group5()[0] * other.group1()[3])
                    - (self.group5()[1] * other.group3()[2])
                    + (other.group2()[0] * self[e45])
                    - (other.group2()[3] * self.group3()[0])),
                ((other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group9()[3]) + (self.group4()[0] * other.group2()[2]) - (self.group4()[2] * other.group2()[0])
                    + (self.group5()[1] * other.group1()[3])
                    - (self.group5()[2] * other.group3()[0])
                    + (other.group2()[1] * self[e45])
                    - (other.group2()[3] * self.group3()[1])),
                ((other.group0()[1] * self.group3()[0]) - (other.group0()[2] * self.group9()[3]) - (self.group4()[0] * other.group2()[1]) + (self.group4()[1] * other.group2()[0])
                    - (self.group5()[0] * other.group3()[1])
                    + (self.group5()[2] * other.group1()[3])
                    + (other.group2()[2] * self[e45])
                    - (other.group2()[3] * self.group3()[2])),
                (-(other.group0()[0] * self.group5()[0]) - (other.group0()[1] * self.group5()[1]) + (other.group0()[1] * self.group9()[1])
                    - (other.group0()[2] * self.group5()[2])
                    + (other.group0()[2] * self.group9()[2])
                    - (self.group4()[2] * other.group1()[2])
                    + (self.group4()[2] * other.group3()[2])
                    - (other.group1()[3] * self[e45])),
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[3]]))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group2()[3]]) * swizzle!(self.group3(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[2], self.group4()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group4()[1]]) * swizzle!(other.group3(), 1, 2, 0, 1))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group9(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group9()[1], self.group4()[0]]) * swizzle!(other.group1(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group9()[2], self.group9()[0], self.group3()[3], self.group4()[1]]) * swizzle!(other.group1(), 1, 2, 2, 1))),
            // e5
            ((self.group0()[0] * other.group3()[3])
                - (self.group5()[0] * other.group2()[0])
                - (self.group5()[1] * other.group2()[1])
                - (self.group5()[2] * other.group2()[2])
                - (other.group1()[0] * self.group3()[0])
                - (other.group1()[1] * self.group3()[1])
                - (other.group1()[2] * self.group3()[2])
                + (other.group1()[3] * self.group9()[3])
                - (other.group2()[0] * self.group9()[0])
                - (other.group2()[1] * self.group9()[1])
                - (other.group2()[2] * self.group9()[2])
                - (other.group3()[0] * self.group3()[0])
                - (other.group3()[1] * self.group3()[1])
                - (other.group3()[2] * self.group3()[2])
                + (other.group3()[3] * self.group3()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group2()[0] * self.group6()[3]) + (other.group2()[1] * self.group1()[2]) + (other.group2()[2] * self.group6()[1]) + (other.group3()[3] * self.group1()[0])),
                ((other.group2()[0] * self.group6()[2]) + (other.group2()[1] * self.group6()[3]) + (other.group2()[2] * self.group1()[0]) + (other.group3()[3] * self.group1()[1])),
                ((other.group2()[0] * self.group1()[1]) + (other.group2()[1] * self.group6()[0]) + (other.group2()[2] * self.group6()[3]) + (other.group3()[3] * self.group1()[2])),
                ((other.group0()[0] * self.group8()[0]) + (other.group0()[1] * self.group8()[1]) + (other.group0()[2] * self.group8()[2]) - (other.group3()[2] * self.group6()[2])),
            ]) - (Simd32x4::from(self[e1]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[3]]))
                - (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group7()[0]]) * swizzle!(other.group2(), 0, 1, 2, 0))
                - (Simd32x4::from([self.group8()[0], self.group8()[0], self.group8()[1], self.group1()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([self.group8()[1], self.group8()[2], self.group8()[0], self.group0()[1]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group8()[1], self.group8()[2], self.group8()[0], self.group1()[3]]) * swizzle!(other.group3(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group8()[2], self.group8()[0], self.group8()[1], self.group6()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group8()[2], self.group8()[1], self.group8()[2], self.group1()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))
                - (Simd32x4::from([self.group1()[1], self.group6()[0], self.group1()[0], self.group7()[2]]) * swizzle!(other.group2(), 2, 2, 1, 2))
                - (Simd32x4::from([self.group6()[2], self.group1()[2], self.group6()[1], self.group7()[1]]) * swizzle!(other.group2(), 1, 0, 0, 1))
                - (Simd32x4::from([self[e1], self[e1], self[e1], self.group1()[2]]) * swizzle!(other.group1(), 0, 1, 2, 2))
                - (swizzle!(other.group3(), 3, 3, 3, 1) * swizzle!(self.group6(), 0, 1, 2, 1))),
            // e41, e42, e43
            (-(Simd32x3::from(self.group0()[1]) * other.group0())
                + (Simd32x3::from(self.group7()[0]) * Simd32x3::from([other.group1()[3], other.group3()[2], other.group1()[1]]))
                + (Simd32x3::from(self.group7()[1]) * Simd32x3::from([other.group1()[2], other.group1()[3], other.group3()[0]]))
                + (Simd32x3::from(self.group7()[2]) * Simd32x3::from([other.group3()[1], other.group1()[0], other.group1()[3]]))
                - (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                - (Simd32x3::from([other.group1()[1], other.group3()[0], other.group1()[0]]) * swizzle!(self.group7(), 2, 2, 1))
                - (Simd32x3::from([other.group3()[2], other.group1()[2], other.group3()[1]]) * swizzle!(self.group7(), 1, 0, 0))
                + (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                - (Simd32x3::from([self.group1()[2], self.group1()[0], self.group6()[1]]) * swizzle!(other.group0(), 1, 2, 0))
                + (Simd32x3::from([self.group6()[1], self.group6()[2], self.group6()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                - (Simd32x3::from([self.group6()[2], self.group6()[0], self.group6()[3]]) * swizzle!(other.group0(), 1, 2, 2))
                - (Simd32x3::from([self.group6()[3], self.group6()[3], self.group1()[1]]) * swizzle!(other.group0(), 0, 1, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                (-(other.group1()[1] * self.group6()[2]) + (other.group1()[2] * self.group6()[1]) - (other.group3()[1] * self.group1()[2])
                    + (other.group3()[2] * self.group1()[1])),
                ((other.group1()[0] * self.group6()[2]) - (other.group1()[2] * self.group6()[0]) + (other.group3()[0] * self.group1()[2]) - (other.group3()[2] * self.group1()[0])),
                (-(other.group1()[0] * self.group6()[1]) + (other.group1()[1] * self.group6()[0]) - (other.group3()[0] * self.group1()[1])
                    + (other.group3()[1] * self.group1()[0])),
            ]) - (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(other.group2()[3]) * self.group8())
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                - (Simd32x3::from(self.group6()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                - (Simd32x3::from([self.group8()[2], self.group8()[0], self[e1]]) * swizzle!(other.group0(), 1, 2, 2))
                - (Simd32x3::from([other.group2()[1], other.group3()[3], other.group3()[3]]) * swizzle!(self.group7(), 2, 1, 2))
                + (Simd32x3::from([other.group2()[2], other.group2()[0], other.group2()[1]]) * swizzle!(self.group7(), 1, 2, 0))
                - (Simd32x3::from([other.group3()[3], other.group2()[2], other.group2()[0]]) * swizzle!(self.group7(), 0, 0, 1))
                - (Simd32x3::from([self[e1], self[e1], self.group8()[1]]) * swizzle!(other.group0(), 0, 1, 0))
                + (swizzle!(other.group0(), 2, 0, 1) * swizzle!(self.group8(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[2] * self.group3()[1]) + (self.group4()[2] * other.group2()[1]) - (self.group5()[1] * other.group1()[2]) + (other.group2()[0] * self[e45])),
                (-(other.group0()[0] * self.group3()[2]) + (self.group4()[0] * other.group2()[2]) - (self.group5()[2] * other.group1()[0]) + (other.group2()[1] * self[e45])),
                (-(other.group0()[1] * self.group3()[0]) + (self.group4()[1] * other.group2()[0]) - (self.group5()[0] * other.group1()[1]) + (other.group2()[2] * self[e45])),
                ((other.group0()[2] * self.group3()[2]) - (self.group4()[1] * other.group2()[1]) - (self.group4()[2] * other.group2()[2]) - (self.group5()[2] * other.group3()[2])),
            ]) + (Simd32x4::from(self.group0()[0]) * other.group1())
                + (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[2], self[e45]]))
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group9(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group3(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group4()[1], self.group4()[2], self.group4()[0], self.group4()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group9()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[3]]) * self.group9())
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[1]]) * swizzle!(self.group3(), 0, 1, 2, 1))
                + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[2]]) * swizzle!(self.group9(), 1, 2, 0, 2))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group9()[1], self.group5()[0]]) * swizzle!(other.group3(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group9()[2], self.group9()[0], self.group3()[3], self.group5()[1]]) * swizzle!(other.group3(), 1, 2, 2, 1))),
            // e423, e431, e412
            ((Simd32x3::from(self.group0()[0]) * other.group0())
                - (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group3()[3], self.group5()[2], self.group9()[1]]))
                - (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group9()[2], self.group3()[3], self.group5()[0]]))
                - (Simd32x3::from(other.group0()[2]) * Simd32x3::from([self.group5()[1], self.group9()[0], self.group3()[3]]))
                - (Simd32x3::from(self.group4()[0]) * Simd32x3::from([other.group1()[3], other.group3()[2], other.group1()[1]]))
                - (Simd32x3::from(self.group4()[1]) * Simd32x3::from([other.group1()[2], other.group1()[3], other.group3()[0]]))
                - (Simd32x3::from(self.group4()[2]) * Simd32x3::from([other.group3()[1], other.group1()[0], other.group1()[3]]))
                - (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(other.group2()[3]) * self.group5())
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(self[e45]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from([self.group5()[2], self.group9()[2], self.group5()[1]]) * swizzle!(other.group0(), 1, 0, 0))
                + (Simd32x3::from([other.group1()[1], other.group3()[0], other.group1()[0]]) * swizzle!(self.group4(), 2, 2, 1))
                + (Simd32x3::from([other.group3()[2], other.group1()[2], other.group3()[1]]) * swizzle!(self.group4(), 1, 0, 0))
                + (Simd32x3::from([self.group9()[1], self.group5()[0], self.group9()[0]]) * swizzle!(other.group0(), 2, 2, 1))),
            // e235, e315, e125
            (Simd32x3::from([
                ((other.group1()[1] * self.group3()[2]) - (other.group1()[2] * self.group3()[1]) + (other.group2()[1] * self.group9()[2]) - (other.group2()[2] * self.group9()[1])
                    + (other.group3()[1] * self.group3()[2])
                    - (other.group3()[2] * self.group3()[1])),
                (-(other.group1()[0] * self.group3()[2]) + (other.group1()[2] * self.group3()[0]) - (other.group2()[0] * self.group9()[2])
                    + (other.group2()[2] * self.group9()[0])
                    - (other.group3()[0] * self.group3()[2])
                    + (other.group3()[2] * self.group3()[0])),
                ((other.group1()[0] * self.group3()[1]) - (other.group1()[1] * self.group3()[0]) + (other.group2()[0] * self.group9()[1]) - (other.group2()[1] * self.group9()[0])
                    + (other.group3()[0] * self.group3()[1])
                    - (other.group3()[1] * self.group3()[0])),
            ]) + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                + (Simd32x3::from(self.group9()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group9()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from([other.group2()[1], other.group3()[3], other.group3()[3]]) * swizzle!(self.group5(), 2, 1, 2))
                - (Simd32x3::from([other.group2()[2], other.group2()[0], other.group2()[1]]) * swizzle!(self.group5(), 1, 2, 0))
                + (Simd32x3::from([other.group3()[3], other.group2()[2], other.group2()[0]]) * swizzle!(self.group5(), 0, 0, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group0()[1] * self.group8()[2]) + (other.group0()[2] * self.group8()[1])),
                ((other.group0()[0] * self.group8()[2]) - (other.group0()[2] * self.group8()[0])),
                (-(other.group0()[0] * self.group8()[1]) + (other.group0()[1] * self.group8()[0])),
                ((other.group2()[2] * self.group6()[2]) + (other.group3()[3] * self.group6()[3])),
            ]) - (Simd32x4::from(self[e1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group8()[0]]) * swizzle!(other.group3(), 0, 1, 2, 0))
                + (Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group8()[1]]) * swizzle!(other.group3(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[0], self.group1()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group7()[2], self.group7()[0], self.group7()[1], self.group6()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group8()[0], self.group8()[1], self.group8()[2], self.group1()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[2]]) * swizzle!(self.group1(), 1, 2, 0, 2))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group6()[3], self.group8()[1]]) * swizzle!(other.group1(), 1, 2, 2, 1))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group6()[1]]) * swizzle!(other.group2(), 0, 1, 2, 1))
                + (Simd32x4::from([self.group6()[0], self.group6()[1], self.group6()[2], self.group8()[2]]) * swizzle!(other.group1(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group6()[1], self.group6()[2], self.group6()[0], self.group0()[1]]) * swizzle!(other.group3(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group8()[2]]) * swizzle!(other.group3(), 1, 2, 0, 2))
                + (Simd32x4::from([self.group6()[3], self.group6()[3], self.group1()[1], self.group8()[0]]) * swizzle!(other.group1(), 0, 1, 0, 0))),
            // e1234
            (-(self.group0()[1] * other.group2()[3])
                + (other.group0()[0] * self.group1()[0])
                + (other.group0()[0] * self.group6()[0])
                + (other.group0()[1] * self.group1()[1])
                + (other.group0()[1] * self.group6()[1])
                + (other.group0()[2] * self.group1()[2])
                + (other.group0()[2] * self.group6()[2])
                + (self.group7()[0] * other.group1()[0])
                - (self.group7()[0] * other.group3()[0])
                + (self.group7()[1] * other.group1()[1])
                - (self.group7()[1] * other.group3()[1])
                + (self.group7()[2] * other.group1()[2])
                - (self.group7()[2] * other.group3()[2])
                + (other.group1()[3] * self.group1()[3])
                - (other.group2()[3] * self.group6()[3])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      329      377        0
    //    simd2       17       18        0
    //    simd3      119      129        0
    //    simd4       76       78        0
    // Totals...
    // yes simd      541      602        0
    //  no simd     1024     1112        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group9()[3], self[e1]])) + (Simd32x2::from(other.group0()[1]) * self.group0())),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[0] * self.group8()[0]) * -1.0),
                ((other.group0()[0] * self.group8()[1]) * -1.0),
                ((other.group0()[0] * self.group8()[2]) * -1.0),
                ((other.group0()[0] * self.group0()[1]) + (other.group0()[0] * self.group6()[3])),
            ]) + (Simd32x4::from(other.group0()[1]) * self.group1())),
            // e5
            (other.group0()[1] * self[e1]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other.group0()[1] * self.group3()[0]),
                (other.group0()[1] * self.group3()[1]),
                (other.group0()[1] * self.group3()[2]),
                ((other.group0()[0] * self.group9()[3]) + (other.group0()[1] * self.group3()[3])),
            ]),
            // e41, e42, e43
            (-(Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(other.group0()[0]) * self.group5())
                + (Simd32x3::from(other.group0()[1]) * self.group4())),
            // e23, e31, e12
            ((Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]])) + (Simd32x3::from(other.group0()[1]) * self.group5())),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (other.group0()[0] * self.group8()[0]),
                (other.group0()[0] * self.group8()[1]),
                (other.group0()[0] * self.group8()[2]),
                ((other.group0()[0] * self[e1]) * -1.0),
            ]) + (Simd32x4::from(other.group0()[1]) * self.group6())),
            // e423, e431, e412
            ((Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                + (Simd32x3::from(other.group0()[1]) * self.group7())),
            // e235, e315, e125
            (Simd32x3::from(other.group0()[1]) * self.group8()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((other.group0()[0] * self.group3()[0]) + (other.group0()[1] * self.group9()[0])),
                ((other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group9()[1])),
                ((other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group9()[2])),
                (other.group0()[1] * self.group9()[3]),
            ]),
            // e1234
            ((other.group0()[0] * self.group0()[0]) - (other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self[e45])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      352      399        0
    //    simd2       17       17        0
    //    simd3      122      132        0
    //    simd4       85       87        0
    // Totals...
    // yes simd      576      635        0
    //  no simd     1092     1177        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                ((self.group7()[0] * other.group0()[0]) + (self.group7()[1] * other.group0()[1]) + (self.group7()[2] * other.group0()[2])),
                (-(self.group4()[0] * other.group0()[0]) - (self.group4()[1] * other.group0()[1]) - (self.group4()[2] * other.group0()[2])),
            ]) - (Simd32x2::from(other.group0()[3]) * Simd32x2::from([self.group6()[3], self.group3()[3]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group4()[1] * other.group0()[2]) + (self.group4()[2] * other.group0()[1]) + (self.group5()[0] * other.group0()[3]) + (other.group0()[0] * self[e45])),
                ((self.group4()[0] * other.group0()[2]) - (self.group4()[2] * other.group0()[0]) + (self.group5()[1] * other.group0()[3]) + (other.group0()[1] * self[e45])),
                (-(self.group4()[0] * other.group0()[1]) + (self.group4()[1] * other.group0()[0]) + (self.group5()[2] * other.group0()[3]) + (other.group0()[2] * self[e45])),
                (other.group0()[3] * self[e45] * -1.0),
            ]),
            // e5
            (-(self.group5()[0] * other.group0()[0])
                - (self.group5()[1] * other.group0()[1])
                - (self.group5()[2] * other.group0()[2])
                - (other.group0()[0] * self.group9()[0])
                - (other.group0()[1] * self.group9()[1])
                - (other.group0()[2] * self.group9()[2])
                + (other.group0()[3] * self.group9()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1]) + (other.group0()[2] * self.group6()[1])),
                ((other.group0()[1] * self.group6()[3]) + (other.group0()[2] * self.group1()[0]) - (other.group0()[2] * self.group6()[0])),
                (-(other.group0()[1] * self.group1()[0]) + (other.group0()[1] * self.group6()[0]) + (other.group0()[2] * self.group6()[3])),
                0.0,
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group7()[0]]) * swizzle!(other.group0(), 0, 1, 2, 0))
                - (Simd32x4::from([self.group8()[0], self.group8()[1], self.group8()[2], self.group7()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group6()[2], self.group1()[2], self.group6()[1], self.group7()[2]]) * swizzle!(other.group0(), 1, 0, 0, 2))
                + (Simd32x4::from([self.group6()[3], self.group6()[2], self.group1()[1], self.group0()[1]]) * swizzle!(other.group0(), 0, 0, 0, 3))),
            // e41, e42, e43
            (Simd32x3::from(other.group0()[3]) * self.group7()),
            // e23, e31, e12
            (-(Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group7(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group7(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (other.group0()[0] * self[e45]),
                (other.group0()[1] * self[e45]),
                (other.group0()[2] * self[e45]),
                ((self.group4()[2] * other.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group4()[1], self.group4()[2], self.group4()[0], self.group4()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group4()[2], self.group4()[0], self.group4()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group9()[0], self.group9()[1], self.group9()[2], self.group4()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))),
            // e423, e431, e412
            (Simd32x3::from(other.group0()[3]) * self.group4() * Simd32x3::from(-1.0)),
            // e235, e315, e125
            (Simd32x3::from([
                ((other.group0()[1] * self.group9()[2]) - (other.group0()[2] * self.group9()[1])),
                (-(other.group0()[0] * self.group9()[2]) + (other.group0()[2] * self.group9()[0])),
                ((other.group0()[0] * self.group9()[1]) - (other.group0()[1] * self.group9()[0])),
            ]) + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group5(), 2, 0, 1))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group5(), 1, 2, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2]) - (other.group0()[3] * self[e1])),
            ]) - (Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group7()[2], self.group7()[0], self.group7()[1], self.group6()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group6()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))
                + (swizzle!(other.group0(), 3, 3, 3, 2) * swizzle!(self.group6(), 0, 1, 2, 2))),
            // e1234
            (other.group0()[3] * self.group1()[3]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      379      426        0
    //    simd2       20       20        0
    //    simd3      134      142        0
    //    simd4      100      102        0
    // Totals...
    // yes simd      633      690        0
    //  no simd     1221     1300        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                ((self.group7()[0] * other.group0()[0]) + (self.group7()[1] * other.group0()[1]) + (self.group7()[2] * other.group0()[2]) - (other.group1()[3] * self.group1()[3])),
                (-(self.group4()[0] * other.group0()[0]) - (self.group4()[1] * other.group0()[1]) - (self.group4()[2] * other.group0()[2]) + (other.group1()[3] * self[e45])),
            ]) - (Simd32x2::from(other.group0()[3]) * Simd32x2::from([self.group6()[3], self.group3()[3]]))
                + (Simd32x2::from(other.group1()[0]) * Simd32x2::from([self.group1()[0], self.group9()[0]]))
                + (Simd32x2::from(other.group1()[1]) * Simd32x2::from([self.group1()[1], self.group9()[1]]))
                + (Simd32x2::from(other.group1()[2]) * Simd32x2::from([self.group1()[2], self.group9()[2]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group4()[2] * other.group0()[1]) + (self.group5()[0] * other.group0()[3]) - (self.group5()[1] * other.group1()[2]) + (other.group0()[0] * self[e45])),
                ((self.group4()[0] * other.group0()[2]) + (self.group5()[1] * other.group0()[3]) - (self.group5()[2] * other.group1()[0]) + (other.group0()[1] * self[e45])),
                ((self.group4()[1] * other.group0()[0]) - (self.group5()[0] * other.group1()[1]) + (self.group5()[2] * other.group0()[3]) + (other.group0()[2] * self[e45])),
                0.0,
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group4()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))
                + (Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[2], self.group4()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group4()[1], self.group4()[2], self.group4()[0], self[e45]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group4()[2]]) * swizzle!(other.group1(), 1, 2, 0, 2))),
            // e5
            ((self.group0()[0] * other.group1()[3])
                - (self.group5()[0] * other.group0()[0])
                - (self.group5()[1] * other.group0()[1])
                - (self.group5()[2] * other.group0()[2])
                - (other.group0()[0] * self.group9()[0])
                - (other.group0()[1] * self.group9()[1])
                - (other.group0()[2] * self.group9()[2])
                + (other.group0()[3] * self.group9()[3])
                - (other.group1()[0] * self.group3()[0])
                - (other.group1()[1] * self.group3()[1])
                - (other.group1()[2] * self.group3()[2])
                + (other.group1()[3] * self.group3()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1]) + (other.group0()[2] * self.group6()[1]) + (other.group1()[3] * self.group1()[0])),
                ((other.group0()[1] * self.group6()[3]) + (other.group0()[2] * self.group1()[0]) + (other.group1()[3] * self.group1()[1]) - (other.group1()[3] * self.group6()[1])),
                (-(other.group0()[1] * self.group1()[0])
                    + (other.group0()[1] * self.group6()[0])
                    + (other.group0()[2] * self.group6()[3])
                    + (other.group1()[3] * self.group1()[2])),
                0.0,
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group7()[0]]) * swizzle!(other.group0(), 0, 1, 2, 0))
                - (Simd32x4::from([self.group8()[0], self.group8()[1], self.group8()[2], self.group7()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group8()[1], self.group8()[2], self.group8()[0], self.group1()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group8()[2], self.group8()[0], self.group8()[1], self.group6()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[3], other.group0()[2], other.group1()[3], other.group1()[2]]) * swizzle!(self.group6(), 0, 0, 2, 2))
                - (Simd32x4::from([self.group6()[2], self.group1()[2], self.group6()[1], self.group7()[2]]) * swizzle!(other.group0(), 1, 0, 0, 2))
                + (Simd32x4::from([self.group6()[3], self.group6()[2], self.group1()[1], self.group0()[1]]) * swizzle!(other.group0(), 0, 0, 0, 3))
                - (Simd32x4::from([self[e1], self[e1], self[e1], self.group6()[1]]) * swizzle!(other.group1(), 0, 1, 2, 1))),
            // e41, e42, e43
            ((Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from([other.group0()[3], other.group1()[2], other.group1()[0]]) * swizzle!(self.group7(), 0, 0, 1))
                + (Simd32x3::from([other.group1()[1], other.group0()[3], other.group0()[3]]) * swizzle!(self.group7(), 2, 1, 2))
                - (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]) * swizzle!(self.group7(), 1, 2, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                (-(other.group1()[1] * self.group1()[2]) + (other.group1()[2] * self.group1()[1])),
                ((other.group1()[0] * self.group1()[2]) - (other.group1()[2] * self.group1()[0])),
                (-(other.group1()[0] * self.group1()[1]) + (other.group1()[1] * self.group1()[0])),
            ]) - (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from(self.group6()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group1()[3], other.group1()[3]]) * swizzle!(self.group7(), 2, 1, 2))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group7(), 1, 2, 0))
                - (Simd32x3::from([other.group1()[3], other.group0()[2], other.group0()[0]]) * swizzle!(self.group7(), 0, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[0] * self[e45]) + (other.group1()[2] * self.group9()[1])),
                ((other.group0()[1] * self[e45]) + (other.group1()[0] * self.group9()[2])),
                ((other.group0()[2] * self[e45]) + (other.group1()[1] * self.group9()[0])),
                (-(self.group4()[2] * other.group0()[2]) - (self.group5()[2] * other.group1()[2])),
            ]) + (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[2], self[e45]]))
                - (Simd32x4::from([self.group4()[1], self.group4()[2], self.group4()[0], self.group4()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group4()[2], self.group4()[0], self.group4()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group9()[1], self.group5()[0]]) * swizzle!(other.group1(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group9()[0], self.group9()[1], self.group9()[2], self.group4()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group9()[2], self.group9()[0], self.group3()[3], self.group5()[1]]) * swizzle!(other.group1(), 1, 2, 2, 1))),
            // e423, e431, e412
            (-(Simd32x3::from(self[e45]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from([other.group0()[3], other.group1()[2], other.group1()[0]]) * swizzle!(self.group4(), 0, 0, 1))
                - (Simd32x3::from([other.group1()[1], other.group0()[3], other.group0()[3]]) * swizzle!(self.group4(), 2, 1, 2))
                + (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]) * swizzle!(self.group4(), 1, 2, 0))),
            // e235, e315, e125
            (Simd32x3::from([
                ((other.group0()[1] * self.group9()[2]) - (other.group0()[2] * self.group9()[1]) + (other.group1()[1] * self.group3()[2]) - (other.group1()[2] * self.group3()[1])),
                (-(other.group0()[0] * self.group9()[2]) + (other.group0()[2] * self.group9()[0]) - (other.group1()[0] * self.group3()[2])
                    + (other.group1()[2] * self.group3()[0])),
                ((other.group0()[0] * self.group9()[1]) - (other.group0()[1] * self.group9()[0]) + (other.group1()[0] * self.group3()[1]) - (other.group1()[1] * self.group3()[0])),
            ]) + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(self.group9()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from([other.group0()[1], other.group1()[3], other.group1()[3]]) * swizzle!(self.group5(), 2, 1, 2))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group5(), 1, 2, 0))
                + (Simd32x3::from([other.group1()[3], other.group0()[2], other.group0()[0]]) * swizzle!(self.group5(), 0, 0, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2]) - (other.group0()[3] * self[e1]) + (other.group1()[3] * self.group6()[3])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group8()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))
                + (Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group8()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group7()[2], self.group7()[0], self.group7()[1], self.group6()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group6()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))
                - (Simd32x4::from([self.group6()[1], self.group6()[2], self.group6()[0], self.group0()[1]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group8()[2]]) * swizzle!(other.group1(), 1, 2, 0, 2))
                + (swizzle!(other.group0(), 3, 3, 3, 2) * swizzle!(self.group6(), 0, 1, 2, 2))),
            // e1234
            (-(self.group7()[0] * other.group1()[0]) - (self.group7()[1] * other.group1()[1]) - (self.group7()[2] * other.group1()[2]) + (other.group0()[3] * self.group1()[3])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      413      457        0
    //    simd2       21       22        0
    //    simd3      131      141        0
    //    simd4       76       78        0
    // Totals...
    // yes simd      641      698        0
    //  no simd     1152     1236        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (-(Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group5()[0], self.group6()[0]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group5()[1], self.group6()[1]]))
                - (Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group5()[2], self.group6()[2]]))
                - (Simd32x2::from(other.group1()[0]) * Simd32x2::from([self.group4()[0], self.group7()[0]]))
                - (Simd32x2::from(other.group1()[1]) * Simd32x2::from([self.group4()[1], self.group7()[1]]))
                - (Simd32x2::from(other.group1()[2]) * Simd32x2::from([self.group4()[2], self.group7()[2]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group6()[3]) + (other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[1] * self.group7()[2])
                    - (other.group1()[2] * self.group7()[1])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group6()[3]) + (other.group0()[2] * self.group1()[0])
                    - (other.group1()[0] * self.group7()[2])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[2] * self.group7()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group6()[3]) + (other.group1()[0] * self.group7()[1])
                    - (other.group1()[1] * self.group7()[0])
                    + (other.group1()[2] * self.group1()[3])),
                (-(other.group0()[0] * self.group7()[0]) - (other.group0()[1] * self.group7()[1]) - (other.group0()[2] * self.group7()[2])),
            ]),
            // e5
            (-(other.group0()[0] * self.group8()[0]) - (other.group0()[1] * self.group8()[1]) - (other.group0()[2] * self.group8()[2]) + (other.group1()[0] * self.group1()[0])
                - (other.group1()[0] * self.group6()[0])
                + (other.group1()[1] * self.group1()[1])
                - (other.group1()[1] * self.group6()[1])
                + (other.group1()[2] * self.group1()[2])
                - (other.group1()[2] * self.group6()[2])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (other.group0()[0] * self.group9()[3]) + (other.group0()[1] * self.group3()[2]) - (other.group0()[2] * self.group3()[1])
                    + (other.group1()[0] * self.group3()[3])
                    + (other.group1()[1] * self.group5()[2])
                    + (other.group1()[1] * self.group9()[2])
                    - (other.group1()[2] * self.group5()[1])),
                ((self.group0()[0] * other.group1()[1]) - (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group9()[3]) + (other.group0()[2] * self.group3()[0])
                    - (other.group1()[0] * self.group5()[2])
                    + (other.group1()[1] * self.group3()[3])
                    + (other.group1()[2] * self.group5()[0])
                    + (other.group1()[2] * self.group9()[0])),
                ((self.group0()[0] * other.group1()[2]) + (other.group0()[0] * self.group3()[1]) - (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group9()[3])
                    + (other.group1()[0] * self.group5()[1])
                    + (other.group1()[0] * self.group9()[1])
                    - (other.group1()[1] * self.group5()[0])
                    + (other.group1()[2] * self.group3()[3])),
                (-(other.group0()[1] * self.group9()[1]) - (other.group0()[2] * self.group9()[2])
                    + (other.group1()[0] * self.group4()[0])
                    + (other.group1()[1] * self.group4()[1])
                    + (other.group1()[2] * self.group4()[2])),
            ]) - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group9(), 1, 2, 0, 0))),
            // e41, e42, e43
            ((Simd32x3::from([self.group4()[2], self.group4()[0], self[e45]]) * swizzle!(other.group0(), 1, 2, 2))
                + (Simd32x3::from([self[e45], self[e45], self.group4()[1]]) * swizzle!(other.group0(), 0, 1, 0))
                - (swizzle!(other.group0(), 2, 0, 1) * swizzle!(self.group4(), 1, 2, 0))),
            // e23, e31, e12
            ((Simd32x3::from(self.group0()[0]) * other.group0())
                + (Simd32x3::from([self.group4()[2], self.group4()[0], self[e45]]) * swizzle!(other.group1(), 1, 2, 2))
                + (Simd32x3::from([self[e45], self[e45], self.group4()[1]]) * swizzle!(other.group1(), 0, 1, 0))
                + (swizzle!(other.group0(), 1, 2, 0) * swizzle!(self.group5(), 2, 0, 1))
                - (swizzle!(other.group0(), 2, 0, 1) * swizzle!(self.group5(), 1, 2, 0))
                - (swizzle!(other.group1(), 2, 0, 1) * swizzle!(self.group4(), 1, 2, 0))),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[0]) + (other.group0()[1] * self.group6()[2]) - (other.group0()[2] * self.group6()[1])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[1] * self.group7()[2])
                    - (other.group1()[2] * self.group7()[1])),
                ((self.group0()[1] * other.group0()[1]) - (other.group0()[0] * self.group6()[2]) + (other.group0()[2] * self.group6()[0]) - (other.group1()[0] * self.group7()[2])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[2] * self.group7()[0])),
                ((self.group0()[1] * other.group0()[2]) + (other.group0()[0] * self.group6()[1]) - (other.group0()[1] * self.group6()[0]) + (other.group1()[0] * self.group7()[1])
                    - (other.group1()[1] * self.group7()[0])
                    + (other.group1()[2] * self.group1()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[0] * self.group7()[0])
                    - (other.group1()[1] * self.group7()[1])
                    - (other.group1()[2] * self.group7()[2])),
            ]),
            // e423, e431, e412
            ((Simd32x3::from([self.group7()[2], self.group7()[0], self.group1()[3]]) * swizzle!(other.group0(), 1, 2, 2))
                + (Simd32x3::from([self.group1()[3], self.group1()[3], self.group7()[1]]) * swizzle!(other.group0(), 0, 1, 0))
                - (swizzle!(other.group0(), 2, 0, 1) * swizzle!(self.group7(), 1, 2, 0))),
            // e235, e315, e125
            ((Simd32x3::from(self.group0()[1]) * other.group1())
                - (Simd32x3::from(other.group1()[0]) * Simd32x3::from([self.group6()[3], self.group6()[2], self.group1()[1]]))
                - (Simd32x3::from(other.group1()[1]) * Simd32x3::from([self.group1()[2], self.group6()[3], self.group6()[0]]))
                - (Simd32x3::from(other.group1()[2]) * Simd32x3::from([self.group6()[1], self.group1()[0], self.group6()[3]]))
                + (Simd32x3::from([self.group8()[2], self.group8()[0], self[e1]]) * swizzle!(other.group0(), 1, 2, 2))
                + (Simd32x3::from([self.group1()[1], self.group6()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 2, 1))
                + (Simd32x3::from([self.group6()[2], self.group1()[2], self.group6()[1]]) * swizzle!(other.group1(), 1, 0, 0))
                + (Simd32x3::from([self[e1], self[e1], self.group8()[1]]) * swizzle!(other.group0(), 0, 1, 0))
                - (swizzle!(other.group0(), 2, 0, 1) * swizzle!(self.group8(), 1, 2, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group9()[2]) - (other.group1()[0] * self[e45]) - (other.group1()[1] * self.group4()[2])
                    + (other.group1()[2] * self.group4()[1])),
                ((other.group0()[1] * self.group3()[3]) + (other.group0()[2] * self.group9()[0]) + (other.group1()[0] * self.group4()[2])
                    - (other.group1()[1] * self[e45])
                    - (other.group1()[2] * self.group4()[0])),
                ((other.group0()[0] * self.group9()[1]) + (other.group0()[2] * self.group3()[3]) - (other.group1()[0] * self.group4()[1]) + (other.group1()[1] * self.group4()[0])
                    - (other.group1()[2] * self[e45])),
                (-(other.group0()[0] * self.group3()[0])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group3()[2])
                    - (other.group1()[0] * self.group5()[0])
                    - (other.group1()[1] * self.group5()[1])
                    - (other.group1()[1] * self.group9()[1])
                    - (other.group1()[2] * self.group5()[2])
                    - (other.group1()[2] * self.group9()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group9(), 1, 2, 0, 0))),
            // e1234
            (-(other.group0()[0] * self.group4()[0]) - (other.group0()[1] * self.group4()[1]) - (other.group0()[2] * self.group4()[2])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      387      435        0
    //    simd2       23       24        0
    //    simd3      137      146        0
    //    simd4       93       95        0
    // Totals...
    // yes simd      640      700        0
    //  no simd     1216     1301        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (-(Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group5()[0], self.group6()[0]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group5()[1], self.group6()[1]]))
                - (Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group5()[2], self.group6()[2]]))
                + (Simd32x2::from(other.group0()[3]) * self.group0())
                - (Simd32x2::from(other.group1()[0]) * Simd32x2::from([self.group4()[0], self.group7()[0]]))
                - (Simd32x2::from(other.group1()[1]) * Simd32x2::from([self.group4()[1], self.group7()[1]]))
                - (Simd32x2::from(other.group1()[2]) * Simd32x2::from([self.group4()[2], self.group7()[2]]))
                + (Simd32x2::from(other.group1()[3]) * Simd32x2::from([self[e45], self.group1()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group7()[0] * other.group1()[3]) - (self.group7()[1] * other.group1()[2])
                    + (self.group7()[2] * other.group1()[1])
                    + (other.group0()[1] * self.group1()[2])
                    + (other.group0()[3] * self.group1()[0])
                    + (other.group1()[0] * self.group1()[3])),
                ((self.group7()[0] * other.group1()[2]) + (self.group7()[1] * other.group1()[3]) - (self.group7()[2] * other.group1()[0])
                    + (other.group0()[2] * self.group1()[0])
                    + (other.group0()[3] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[3])),
                (-(self.group7()[0] * other.group1()[1])
                    + (self.group7()[1] * other.group1()[0])
                    + (self.group7()[2] * other.group1()[3])
                    + (other.group0()[2] * self.group6()[3])
                    + (other.group0()[3] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[3])),
                (-(self.group7()[1] * other.group0()[1]) - (self.group7()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group7()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group6()[3], self.group6()[3], self.group1()[1], self.group1()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))),
            // e5
            ((self.group0()[1] * other.group1()[3]) - (self.group8()[0] * other.group0()[0]) - (self.group8()[1] * other.group0()[1]) - (self.group8()[2] * other.group0()[2])
                + (other.group0()[3] * self[e1])
                + (other.group1()[0] * self.group1()[0])
                - (other.group1()[0] * self.group6()[0])
                + (other.group1()[1] * self.group1()[1])
                - (other.group1()[1] * self.group6()[1])
                + (other.group1()[2] * self.group1()[2])
                - (other.group1()[2] * self.group6()[2])
                - (other.group1()[3] * self.group6()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group0()[1] * self.group3()[2])
                    + (other.group0()[3] * self.group3()[0])
                    + (other.group1()[0] * self.group3()[3])
                    + (other.group1()[1] * self.group9()[2])
                    + (other.group1()[3] * self.group9()[0])),
                ((other.group0()[2] * self.group3()[0])
                    + (other.group0()[3] * self.group3()[1])
                    + (other.group1()[1] * self.group3()[3])
                    + (other.group1()[2] * self.group9()[0])
                    + (other.group1()[3] * self.group9()[1])),
                ((other.group0()[2] * self.group9()[3])
                    + (other.group0()[3] * self.group3()[2])
                    + (other.group1()[0] * self.group9()[1])
                    + (other.group1()[2] * self.group3()[3])
                    + (other.group1()[3] * self.group9()[2])),
                ((other.group0()[2] * self.group9()[2]) * -1.0),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group4()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))
                + (Simd32x4::from([self.group5()[0], self.group5()[0], self.group5()[1], self.group4()[1]]) * swizzle!(other.group1(), 3, 2, 0, 1))
                - (Simd32x4::from([self.group5()[1], self.group5()[2], self.group5()[0], self[e45]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group5()[2], self.group5()[1], self.group5()[2], self.group4()[2]]) * swizzle!(other.group1(), 1, 3, 3, 2))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[1]]) * swizzle!(self.group9(), 1, 2, 0, 1))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group9()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group9()[3], self.group9()[3], self.group3()[1], self.group3()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))),
            // e41, e42, e43
            ((Simd32x3::from(self[e45]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from([other.group0()[1], other.group0()[3], other.group0()[3]]) * swizzle!(self.group4(), 2, 1, 2))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group4(), 1, 2, 0))
                + (Simd32x3::from([other.group0()[3], other.group0()[2], other.group0()[0]]) * swizzle!(self.group4(), 0, 0, 1))),
            // e23, e31, e12
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from([other.group0()[1], other.group0()[3], other.group0()[3]]) * swizzle!(self.group5(), 2, 1, 2))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group5(), 1, 2, 0))
                + (Simd32x3::from([other.group0()[3], other.group0()[2], other.group0()[0]]) * swizzle!(self.group5(), 0, 0, 1))
                + (Simd32x3::from([other.group1()[1], other.group1()[3], other.group1()[3]]) * swizzle!(self.group4(), 2, 1, 2))
                - (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]) * swizzle!(self.group4(), 1, 2, 0))
                + (Simd32x3::from([other.group1()[3], other.group1()[2], other.group1()[0]]) * swizzle!(self.group4(), 0, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group7()[2] * other.group1()[1]) + (other.group0()[1] * self.group6()[2]) + (other.group0()[3] * self.group6()[0]) + (other.group1()[0] * self.group1()[3])),
                ((self.group7()[1] * other.group1()[3]) + (other.group0()[2] * self.group6()[0]) + (other.group0()[3] * self.group6()[1]) + (other.group1()[1] * self.group1()[3])),
                ((self.group7()[2] * other.group1()[3]) + (other.group0()[0] * self.group6()[1]) + (other.group0()[3] * self.group6()[2]) + (other.group1()[2] * self.group1()[3])),
                (-(self.group7()[1] * other.group1()[1])
                    - (self.group7()[2] * other.group1()[2])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group6()[3]]) * other.group0())
                + (Simd32x4::from([self.group7()[0], self.group7()[0], self.group7()[1], self.group1()[3]]) * swizzle!(other.group1(), 3, 2, 0, 3))
                - (Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[0], self.group7()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group6()[1], self.group6()[2], self.group6()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e423, e431, e412
            ((Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from([other.group0()[1], other.group0()[3], other.group0()[3]]) * swizzle!(self.group7(), 2, 1, 2))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group7(), 1, 2, 0))
                + (Simd32x3::from([other.group0()[3], other.group0()[2], other.group0()[0]]) * swizzle!(self.group7(), 0, 0, 1))),
            // e235, e315, e125
            (Simd32x3::from([
                ((other.group1()[1] * self.group6()[2]) + (other.group1()[2] * self.group1()[1])),
                ((other.group1()[0] * self.group1()[2]) + (other.group1()[2] * self.group6()[0])),
                ((other.group1()[0] * self.group6()[1]) + (other.group1()[1] * self.group1()[0])),
            ]) + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(other.group1()[0]) * Simd32x3::from([self.group6()[3], self.group6()[2], self.group1()[1]]))
                - (Simd32x3::from(other.group1()[1]) * Simd32x3::from([self.group1()[2], self.group6()[3], self.group6()[0]]))
                - (Simd32x3::from(other.group1()[2]) * Simd32x3::from([self.group6()[1], self.group1()[0], self.group6()[3]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                + (Simd32x3::from(self[e1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from([other.group0()[1], other.group0()[3], other.group0()[3]]) * swizzle!(self.group8(), 2, 1, 2))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group8(), 1, 2, 0))
                + (Simd32x3::from([other.group0()[3], other.group0()[2], other.group0()[0]]) * swizzle!(self.group8(), 0, 0, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group9()[2]) + (other.group0()[3] * self.group9()[0])),
                ((other.group0()[2] * self.group9()[0]) + (other.group0()[3] * self.group9()[1])),
                ((other.group0()[2] * self.group3()[3]) + (other.group0()[3] * self.group9()[2])),
                (-(other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group3()[2])
                    - (other.group1()[0] * self.group9()[0])
                    - (other.group1()[1] * self.group9()[1])
                    - (other.group1()[2] * self.group9()[2])
                    + (other.group1()[3] * self.group3()[3])),
            ]) - (Simd32x4::from([self.group4()[0], self.group4()[0], self.group4()[1], self.group5()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([self.group4()[1], self.group4()[2], self.group4()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group4()[2], self.group4()[1], self.group4()[2], self.group5()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group9()[1], self.group9()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))
                - (Simd32x4::from([self.group9()[1], self.group9()[2], self.group9()[0], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self[e45], self[e45], self[e45], self.group5()[2]]) * swizzle!(other.group1(), 0, 1, 2, 2))),
            // e1234
            (-(self.group4()[0] * other.group0()[0]) - (self.group4()[1] * other.group0()[1]) - (self.group4()[2] * other.group0()[2]) + (other.group0()[3] * self[e45])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      334      386        0
    //    simd2       19       19        0
    //    simd3      123      131        0
    //    simd4       88       90        0
    // Totals...
    // yes simd      564      626        0
    //  no simd     1093     1177        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([((other.group0()[3] * self.group1()[3]) * -1.0), (other.group0()[3] * self[e45])])
                + (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group1()[0], self.group9()[0]]))
                + (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group1()[1], self.group9()[1]]))
                + (Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group1()[2], self.group9()[2]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group5()[1] * other.group0()[2]) * -1.0),
                ((self.group5()[2] * other.group0()[0]) * -1.0),
                ((self.group5()[0] * other.group0()[1]) * -1.0),
                0.0,
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group4()[0]]) * swizzle!(other.group0(), 0, 1, 2, 0))
                + (Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[2], self.group4()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group4()[2]]) * swizzle!(other.group0(), 1, 2, 0, 2))),
            // e5
            ((self.group0()[0] * other.group0()[3]) - (other.group0()[0] * self.group3()[0]) - (other.group0()[1] * self.group3()[1]) - (other.group0()[2] * self.group3()[2])
                + (other.group0()[3] * self.group3()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                (other.group0()[3] * self.group1()[0]),
                (other.group0()[3] * self.group1()[1]),
                (other.group0()[3] * self.group1()[2]),
                0.0,
            ]) + (Simd32x4::from([self.group8()[1], self.group8()[2], self.group8()[0], self.group1()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group8()[2], self.group8()[0], self.group8()[1], self.group6()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self[e1], self[e1], self[e1], self.group6()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))
                - (swizzle!(other.group0(), 3, 3, 3, 2) * swizzle!(self.group6(), 0, 1, 2, 2))),
            // e41, e42, e43
            ((Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group7(), 2, 0, 1))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group7(), 1, 2, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0])),
            ]) - (Simd32x3::from(other.group0()[3]) * self.group7())
                - (Simd32x3::from(self.group6()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (other.group0()[2] * self.group9()[1]),
                (other.group0()[0] * self.group9()[2]),
                (other.group0()[1] * self.group9()[0]),
                ((self.group5()[2] * other.group0()[2]) * -1.0),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[2], self[e45]]))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group9()[1], self.group5()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group9()[2], self.group9()[0], self.group3()[3], self.group5()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))),
            // e423, e431, e412
            (-(Simd32x3::from(self[e45]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group4(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group4(), 1, 2, 0))),
            // e235, e315, e125
            (Simd32x3::from([
                ((other.group0()[1] * self.group3()[2]) - (other.group0()[2] * self.group3()[1])),
                (-(other.group0()[0] * self.group3()[2]) + (other.group0()[2] * self.group3()[0])),
                ((other.group0()[0] * self.group3()[1]) - (other.group0()[1] * self.group3()[0])),
            ]) + (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(other.group0()[3]) * self.group5())
                + (Simd32x3::from(self.group9()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[3] * self.group6()[3])])
                + (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group8()[0]]) * swizzle!(other.group0(), 0, 1, 2, 0))
                + (Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group8()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group6()[1], self.group6()[2], self.group6()[0], self.group0()[1]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group8()[2]]) * swizzle!(other.group0(), 1, 2, 0, 2))),
            // e1234
            (-(self.group7()[0] * other.group0()[0]) - (self.group7()[1] * other.group0()[1]) - (self.group7()[2] * other.group0()[2])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      322      351        0
    //    simd2       16       18        0
    //    simd3      114      126        0
    //    simd4       74       84        0
    // Totals...
    // yes simd      526      579        0
    //  no simd      992     1101        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from(other[e12345]) * swizzle!(self.group0(), 1, 0) * Simd32x2::from([-1.0, 1.0])),
            // e1, e2, e3, e4
            (Simd32x4::from(other[e12345]) * Simd32x4::from([self.group9()[0], self.group9()[1], self.group9()[2], self[e45]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e5
            (self.group9()[3] * other[e12345]),
            // e15, e25, e35, e45
            (Simd32x4::from(other[e12345]) * Simd32x4::from([self.group8()[0], self.group8()[1], self.group8()[2], self.group6()[3]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e41, e42, e43
            (Simd32x3::from(other[e12345]) * self.group7() * Simd32x3::from(-1.0)),
            // e23, e31, e12
            (Simd32x3::from(other[e12345]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]) * Simd32x3::from(-1.0)),
            // e415, e425, e435, e321
            (Simd32x4::from(other[e12345]) * Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self.group3()[3]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e423, e431, e412
            (Simd32x3::from(other[e12345]) * self.group4()),
            // e235, e315, e125
            (Simd32x3::from(other[e12345]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]])),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other[e12345]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self[e1]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e1234
            (self.group1()[3] * other[e12345] * -1.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      430      482        0
    //    simd2       17       17        0
    //    simd3      148      156        0
    //    simd4       93       95        0
    // Totals...
    // yes simd      688      750        0
    //  no simd     1280     1364        0
    fn sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                ((other.group0()[0] * self.group8()[0])
                    + (other.group0()[1] * self.group8()[1])
                    + (other.group0()[2] * self.group8()[2])
                    + (other.group2()[0] * self.group7()[0])
                    + (other.group2()[1] * self.group7()[1])
                    + (other.group2()[2] * self.group7()[2])
                    + (other.group1()[0] * self.group6()[0])
                    + (other.group1()[1] * self.group6()[1])
                    + (other.group1()[2] * self.group6()[2])),
                (-(other.group0()[0] * self.group3()[0])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group3()[2])
                    - (other.group2()[0] * self.group4()[0])
                    - (other.group2()[1] * self.group4()[1])
                    - (other.group2()[2] * self.group4()[2])
                    - (self.group5()[0] * other.group1()[0])
                    - (self.group5()[1] * other.group1()[1])
                    - (self.group5()[2] * other.group1()[2])),
            ]) - (Simd32x2::from(other.group1()[3]) * Simd32x2::from([self.group6()[3], self.group3()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group9()[3]) - (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group3()[1])
                    + (other.group2()[0] * self[e45])
                    + (other.group2()[1] * self.group4()[2])
                    - (other.group2()[2] * self.group4()[1])
                    + (self.group5()[0] * other.group1()[3])),
                ((other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group9()[3]) - (other.group0()[2] * self.group3()[0]) - (other.group2()[0] * self.group4()[2])
                    + (other.group2()[1] * self[e45])
                    + (other.group2()[2] * self.group4()[0])
                    + (self.group5()[1] * other.group1()[3])),
                (-(other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group3()[0]) - (other.group0()[2] * self.group9()[3])
                    + (other.group2()[0] * self.group4()[1])
                    - (other.group2()[1] * self.group4()[0])
                    + (other.group2()[2] * self[e45])
                    + (self.group5()[2] * other.group1()[3])),
                (-(other.group0()[0] * self.group5()[0]) - (other.group0()[1] * self.group5()[1]) + (other.group0()[1] * self.group9()[1])
                    - (other.group0()[2] * self.group5()[2])
                    + (other.group0()[2] * self.group9()[2])
                    - (self.group4()[2] * other.group1()[2])
                    - (other.group1()[3] * self[e45])),
            ]) + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group9(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group9()[1], self.group4()[0]]) * swizzle!(other.group1(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group9()[2], self.group9()[0], self.group3()[3], self.group4()[1]]) * swizzle!(other.group1(), 1, 2, 2, 1))),
            // e5
            (-(other.group2()[0] * self.group5()[0])
                - (other.group2()[0] * self.group9()[0])
                - (other.group2()[1] * self.group5()[1])
                - (other.group2()[1] * self.group9()[1])
                - (other.group2()[2] * self.group5()[2])
                - (other.group2()[2] * self.group9()[2])
                - (other.group1()[0] * self.group3()[0])
                - (other.group1()[1] * self.group3()[1])
                - (other.group1()[2] * self.group3()[2])
                + (other.group1()[3] * self.group9()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group2()[0] * self.group6()[3]) + (other.group2()[1] * self.group1()[2]) + (other.group2()[2] * self.group6()[1])),
                ((other.group2()[0] * self.group6()[2]) + (other.group2()[1] * self.group6()[3]) + (other.group2()[2] * self.group1()[0])),
                ((other.group2()[0] * self.group1()[1]) + (other.group2()[1] * self.group6()[0]) + (other.group2()[2] * self.group6()[3])),
                ((other.group0()[0] * self.group8()[0]) + (other.group0()[1] * self.group8()[1]) + (other.group0()[2] * self.group8()[2])),
            ]) - (Simd32x4::from(other.group2()[0]) * Simd32x4::from([self.group0()[1], self.group1()[2], self.group6()[1], self.group7()[0]]))
                - (Simd32x4::from(other.group2()[1]) * Simd32x4::from([self.group6()[2], self.group0()[1], self.group1()[0], self.group7()[1]]))
                - (Simd32x4::from(other.group2()[2]) * Simd32x4::from([self.group1()[1], self.group6()[0], self.group0()[1], self.group7()[2]]))
                - (Simd32x4::from([self.group8()[0], self.group8()[0], self.group8()[1], self.group1()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([self.group8()[1], self.group8()[2], self.group8()[0], self.group0()[1]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group8()[2], self.group8()[1], self.group8()[2], self.group1()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))
                - (Simd32x4::from([self[e1], self[e1], self[e1], self.group1()[2]]) * swizzle!(other.group1(), 0, 1, 2, 2))),
            // e41, e42, e43
            (-(Simd32x3::from(self.group0()[1]) * other.group0())
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]) * swizzle!(self.group7(), 2, 0, 1))
                + (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[3]]) * swizzle!(self.group7(), 1, 2, 2))
                + (Simd32x3::from([other.group1()[3], other.group1()[3], other.group1()[1]]) * swizzle!(self.group7(), 0, 1, 0))
                + (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                - (Simd32x3::from([self.group1()[2], self.group1()[0], self.group6()[1]]) * swizzle!(other.group0(), 1, 2, 0))
                + (Simd32x3::from([self.group6()[1], self.group6()[2], self.group6()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                - (Simd32x3::from([self.group6()[2], self.group6()[0], self.group6()[3]]) * swizzle!(other.group0(), 1, 2, 2))
                - (Simd32x3::from([self.group6()[3], self.group6()[3], self.group1()[1]]) * swizzle!(other.group0(), 0, 1, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                (-(other.group1()[1] * self.group6()[2]) + (other.group1()[2] * self.group6()[1])),
                ((other.group1()[0] * self.group6()[2]) - (other.group1()[2] * self.group6()[0])),
                (-(other.group1()[0] * self.group6()[1]) + (other.group1()[1] * self.group6()[0])),
            ]) - (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from([self.group7()[2], self.group7()[0], self.group1()[3]]) * swizzle!(other.group2(), 1, 2, 2))
                - (Simd32x3::from([self.group8()[2], self.group8()[0], self[e1]]) * swizzle!(other.group0(), 1, 2, 2))
                - (Simd32x3::from([self.group1()[3], self.group1()[3], self.group7()[1]]) * swizzle!(other.group2(), 0, 1, 0))
                - (Simd32x3::from([self[e1], self[e1], self.group8()[1]]) * swizzle!(other.group0(), 0, 1, 0))
                + (swizzle!(other.group0(), 2, 0, 1) * swizzle!(self.group8(), 1, 2, 0))
                + (swizzle!(other.group2(), 2, 0, 1) * swizzle!(self.group7(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[2] * self.group3()[1]) + (other.group2()[0] * self[e45]) + (other.group2()[1] * self.group4()[2])
                    - (other.group2()[2] * self.group4()[1])
                    - (self.group5()[1] * other.group1()[2])
                    - (other.group1()[3] * self.group9()[0])),
                (-(other.group0()[0] * self.group3()[2]) - (other.group2()[0] * self.group4()[2]) + (other.group2()[1] * self[e45]) + (other.group2()[2] * self.group4()[0])
                    - (self.group5()[2] * other.group1()[0])
                    - (other.group1()[3] * self.group9()[1])),
                (-(other.group0()[1] * self.group3()[0]) + (other.group2()[0] * self.group4()[1]) - (other.group2()[1] * self.group4()[0]) + (other.group2()[2] * self[e45])
                    - (self.group5()[0] * other.group1()[1])
                    - (other.group1()[3] * self.group9()[2])),
                ((other.group0()[1] * self.group3()[1]) + (other.group0()[2] * self.group3()[2])
                    - (other.group2()[0] * self.group4()[0])
                    - (other.group2()[1] * self.group4()[1])
                    - (other.group2()[2] * self.group4()[2])
                    + (other.group1()[2] * self.group9()[2])),
            ]) + (Simd32x4::from(self.group0()[0]) * other.group1())
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group9(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group3(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group9()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))),
            // e423, e431, e412
            ((Simd32x3::from(self.group0()[0]) * other.group0())
                - (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group3()[3], self.group5()[2], self.group9()[1]]))
                - (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group9()[2], self.group3()[3], self.group5()[0]]))
                - (Simd32x3::from(other.group0()[2]) * Simd32x3::from([self.group5()[1], self.group9()[0], self.group3()[3]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from([self.group5()[2], self.group9()[2], self.group5()[1]]) * swizzle!(other.group0(), 1, 0, 0))
                + (Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]) * swizzle!(self.group4(), 2, 0, 1))
                - (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[3]]) * swizzle!(self.group4(), 1, 2, 2))
                - (Simd32x3::from([other.group1()[3], other.group1()[3], other.group1()[1]]) * swizzle!(self.group4(), 0, 1, 0))
                + (Simd32x3::from([self.group9()[1], self.group5()[0], self.group9()[0]]) * swizzle!(other.group0(), 2, 2, 1))),
            // e235, e315, e125
            (Simd32x3::from([
                ((other.group1()[1] * self.group3()[2]) - (other.group1()[2] * self.group3()[1])),
                (-(other.group1()[0] * self.group3()[2]) + (other.group1()[2] * self.group3()[0])),
                ((other.group1()[0] * self.group3()[1]) - (other.group1()[1] * self.group3()[0])),
            ]) + (Simd32x3::from(self.group0()[0]) * other.group2())
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(self.group9()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from([self.group5()[2], self.group5()[0], self.group9()[1]]) * swizzle!(other.group2(), 1, 2, 0))
                + (Simd32x3::from([self.group3()[3], self.group3()[3], self.group5()[1]]) * swizzle!(other.group2(), 0, 1, 0))
                - (Simd32x3::from([self.group9()[1], self.group9()[2], self.group9()[0]]) * swizzle!(other.group2(), 2, 0, 1))
                + (Simd32x3::from([self.group9()[2], self.group9()[0], self.group3()[3]]) * swizzle!(other.group2(), 1, 2, 2))
                - (swizzle!(other.group2(), 2, 0, 1) * swizzle!(self.group5(), 1, 2, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group0()[1] * self.group8()[2])
                    + (other.group0()[2] * self.group8()[1])
                    + (other.group2()[0] * self.group1()[3])
                    + (other.group2()[1] * self.group7()[2])
                    - (other.group2()[2] * self.group7()[1])),
                ((other.group0()[0] * self.group8()[2]) - (other.group0()[2] * self.group8()[0]) - (other.group2()[0] * self.group7()[2])
                    + (other.group2()[1] * self.group1()[3])
                    + (other.group2()[2] * self.group7()[0])),
                (-(other.group0()[0] * self.group8()[1]) + (other.group0()[1] * self.group8()[0]) + (other.group2()[0] * self.group7()[1])
                    - (other.group2()[1] * self.group7()[0])
                    + (other.group2()[2] * self.group1()[3])),
                (-(other.group2()[1] * self.group1()[1]) + (other.group2()[1] * self.group6()[1]) - (other.group2()[2] * self.group1()[2])
                    + (other.group2()[2] * self.group6()[2])
                    + (self.group8()[2] * other.group1()[2])),
            ]) - (Simd32x4::from(self[e1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[0]]) * swizzle!(self.group6(), 0, 1, 2, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group6()[3], self.group8()[1]]) * swizzle!(other.group1(), 1, 2, 2, 1))
                + (Simd32x4::from([self.group6()[3], self.group6()[3], self.group1()[1], self.group8()[0]]) * swizzle!(other.group1(), 0, 1, 0, 0))),
            // e1234
            ((other.group0()[0] * self.group1()[0])
                + (other.group0()[0] * self.group6()[0])
                + (other.group0()[1] * self.group1()[1])
                + (other.group0()[1] * self.group6()[1])
                + (other.group0()[2] * self.group1()[2])
                + (other.group0()[2] * self.group6()[2])
                + (self.group7()[0] * other.group1()[0])
                + (self.group7()[1] * other.group1()[1])
                + (self.group7()[2] * other.group1()[2])
                + (other.group1()[3] * self.group1()[3])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      424      476        0
    //    simd2       17       17        0
    //    simd3      150      158        0
    //    simd4      101      103        0
    // Totals...
    // yes simd      692      754        0
    //  no simd     1312     1396        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                (-(self.group0()[1] * other.group2()[3])
                    + (other.group0()[0] * self.group8()[0])
                    + (other.group0()[1] * self.group8()[1])
                    + (other.group0()[2] * self.group8()[2])
                    + (self.group7()[0] * other.group2()[0])
                    + (self.group7()[1] * other.group2()[1])
                    + (self.group7()[2] * other.group2()[2])
                    + (other.group1()[0] * self.group6()[0])
                    + (other.group1()[1] * self.group6()[1])
                    + (other.group1()[2] * self.group6()[2])),
                ((self.group0()[0] * other.group2()[3])
                    - (other.group0()[0] * self.group3()[0])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group3()[2])
                    - (self.group4()[0] * other.group2()[0])
                    - (self.group4()[1] * other.group2()[1])
                    - (self.group4()[2] * other.group2()[2])
                    - (self.group5()[0] * other.group1()[0])
                    - (self.group5()[1] * other.group1()[1])
                    - (self.group5()[2] * other.group1()[2])),
            ]) - (Simd32x2::from(other.group1()[3]) * Simd32x2::from([self.group6()[3], self.group3()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group9()[3]) - (other.group0()[1] * self.group3()[2]) + (other.group0()[2] * self.group3()[1])
                    - (self.group4()[1] * other.group2()[2])
                    + (self.group5()[0] * other.group1()[3])
                    + (other.group2()[0] * self[e45])
                    - (other.group2()[3] * self.group9()[0])),
                ((other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group9()[3]) - (other.group0()[2] * self.group3()[0]) - (self.group4()[2] * other.group2()[0])
                    + (self.group5()[1] * other.group1()[3])
                    + (other.group2()[1] * self[e45])
                    - (other.group2()[3] * self.group9()[1])),
                (-(other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group3()[0])
                    - (other.group0()[2] * self.group9()[3])
                    - (self.group4()[0] * other.group2()[1])
                    + (self.group5()[2] * other.group1()[3])
                    + (other.group2()[2] * self[e45])
                    - (other.group2()[3] * self.group9()[2])),
                (-(other.group0()[0] * self.group5()[0]) - (other.group0()[1] * self.group5()[1]) + (other.group0()[1] * self.group9()[1])
                    - (other.group0()[2] * self.group5()[2])
                    + (other.group0()[2] * self.group9()[2])
                    - (self.group4()[2] * other.group1()[2])
                    - (other.group1()[3] * self[e45])),
            ]) + (Simd32x4::from([self.group4()[2], self.group4()[0], self.group4()[1], self[e45]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group9(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group9()[1], self.group4()[0]]) * swizzle!(other.group1(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group9()[2], self.group9()[0], self.group3()[3], self.group4()[1]]) * swizzle!(other.group1(), 1, 2, 2, 1))),
            // e5
            (-(self.group5()[0] * other.group2()[0])
                - (self.group5()[1] * other.group2()[1])
                - (self.group5()[2] * other.group2()[2])
                - (other.group1()[0] * self.group3()[0])
                - (other.group1()[1] * self.group3()[1])
                - (other.group1()[2] * self.group3()[2])
                + (other.group1()[3] * self.group9()[3])
                - (other.group2()[0] * self.group9()[0])
                - (other.group2()[1] * self.group9()[1])
                - (other.group2()[2] * self.group9()[2])
                + (other.group2()[3] * self.group9()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group2()[1] * self.group1()[2]) - (other.group2()[2] * self.group1()[1]) + (other.group2()[2] * self.group6()[1])),
                ((other.group2()[1] * self.group6()[3]) + (other.group2()[2] * self.group1()[0]) - (other.group2()[2] * self.group6()[0])),
                (-(other.group2()[1] * self.group1()[0]) + (other.group2()[1] * self.group6()[0]) + (other.group2()[2] * self.group6()[3])),
                ((other.group0()[0] * self.group8()[0]) + (other.group0()[1] * self.group8()[1]) + (other.group0()[2] * self.group8()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group7()[0]]) * swizzle!(other.group2(), 0, 1, 2, 0))
                - (Simd32x4::from([self.group8()[0], self.group8()[0], self.group8()[1], self.group1()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([self.group8()[0], self.group8()[1], self.group8()[2], self.group7()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group8()[1], self.group8()[2], self.group8()[0], self.group0()[1]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group8()[2], self.group8()[1], self.group8()[2], self.group1()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))
                - (Simd32x4::from([self.group6()[2], self.group1()[2], self.group6()[1], self.group7()[2]]) * swizzle!(other.group2(), 1, 0, 0, 2))
                + (Simd32x4::from([self.group6()[3], self.group6()[2], self.group1()[1], self.group6()[3]]) * swizzle!(other.group2(), 0, 0, 0, 3))
                - (Simd32x4::from([self[e1], self[e1], self[e1], self.group1()[2]]) * swizzle!(other.group1(), 0, 1, 2, 2))),
            // e41, e42, e43
            (-(Simd32x3::from(self.group0()[1]) * other.group0())
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from([other.group1()[1], other.group2()[3], other.group2()[3]]) * swizzle!(self.group7(), 2, 1, 2))
                + (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[3]]) * swizzle!(self.group7(), 1, 2, 2))
                + (Simd32x3::from([other.group1()[3], other.group1()[3], other.group1()[1]]) * swizzle!(self.group7(), 0, 1, 0))
                - (Simd32x3::from([other.group2()[3], other.group1()[2], other.group1()[0]]) * swizzle!(self.group7(), 0, 0, 1))
                + (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                - (Simd32x3::from([self.group1()[2], self.group1()[0], self.group6()[1]]) * swizzle!(other.group0(), 1, 2, 0))
                + (Simd32x3::from([self.group6()[1], self.group6()[2], self.group6()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                - (Simd32x3::from([self.group6()[2], self.group6()[0], self.group6()[3]]) * swizzle!(other.group0(), 1, 2, 2))
                - (Simd32x3::from([self.group6()[3], self.group6()[3], self.group1()[1]]) * swizzle!(other.group0(), 0, 1, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                (-(other.group1()[1] * self.group6()[2]) + (other.group1()[2] * self.group6()[1])),
                ((other.group1()[0] * self.group6()[2]) - (other.group1()[2] * self.group6()[0])),
                (-(other.group1()[0] * self.group6()[1]) + (other.group1()[1] * self.group6()[0])),
            ]) - (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                - (Simd32x3::from([self.group8()[2], self.group8()[0], self[e1]]) * swizzle!(other.group0(), 1, 2, 2))
                - (Simd32x3::from([other.group2()[1], other.group2()[2], other.group2()[0]]) * swizzle!(self.group7(), 2, 0, 1))
                + (Simd32x3::from([other.group2()[2], other.group2()[0], other.group2()[1]]) * swizzle!(self.group7(), 1, 2, 0))
                - (Simd32x3::from([self[e1], self[e1], self.group8()[1]]) * swizzle!(other.group0(), 0, 1, 0))
                + (swizzle!(other.group0(), 2, 0, 1) * swizzle!(self.group8(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group4()[2] * other.group2()[1]) + (self.group5()[0] * other.group2()[3]) - (self.group5()[1] * other.group1()[2]) - (other.group1()[3] * self.group9()[0])
                    + (other.group2()[0] * self[e45])),
                ((self.group4()[0] * other.group2()[2]) + (self.group5()[1] * other.group2()[3]) - (self.group5()[2] * other.group1()[0]) - (other.group1()[3] * self.group9()[1])
                    + (other.group2()[1] * self[e45])),
                ((self.group4()[1] * other.group2()[0]) - (self.group5()[0] * other.group1()[1]) + (self.group5()[2] * other.group2()[3]) - (other.group1()[3] * self.group9()[2])
                    + (other.group2()[2] * self[e45])),
                ((other.group0()[1] * self.group3()[1]) + (other.group0()[2] * self.group3()[2]) - (self.group4()[1] * other.group2()[1]) - (self.group4()[2] * other.group2()[2])
                    + (other.group1()[2] * self.group9()[2])),
            ]) + (Simd32x4::from(self.group0()[0]) * other.group1())
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group9(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group3(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group3(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group4()[1], self.group4()[2], self.group4()[0], self.group4()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group9()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))),
            // e423, e431, e412
            ((Simd32x3::from(self.group0()[0]) * other.group0())
                - (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group3()[3], self.group5()[2], self.group9()[1]]))
                - (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group9()[2], self.group3()[3], self.group5()[0]]))
                - (Simd32x3::from(other.group0()[2]) * Simd32x3::from([self.group5()[1], self.group9()[0], self.group3()[3]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from([self.group5()[2], self.group9()[2], self.group5()[1]]) * swizzle!(other.group0(), 1, 0, 0))
                + (Simd32x3::from([other.group1()[1], other.group2()[3], other.group2()[3]]) * swizzle!(self.group4(), 2, 1, 2))
                - (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[3]]) * swizzle!(self.group4(), 1, 2, 2))
                - (Simd32x3::from([other.group1()[3], other.group1()[3], other.group1()[1]]) * swizzle!(self.group4(), 0, 1, 0))
                + (Simd32x3::from([other.group2()[3], other.group1()[2], other.group1()[0]]) * swizzle!(self.group4(), 0, 0, 1))
                + (Simd32x3::from([self.group9()[1], self.group5()[0], self.group9()[0]]) * swizzle!(other.group0(), 2, 2, 1))),
            // e235, e315, e125
            (Simd32x3::from([
                ((other.group1()[1] * self.group3()[2]) - (other.group1()[2] * self.group3()[1]) + (other.group2()[1] * self.group9()[2]) - (other.group2()[2] * self.group9()[1])),
                (-(other.group1()[0] * self.group3()[2]) + (other.group1()[2] * self.group3()[0]) - (other.group2()[0] * self.group9()[2])
                    + (other.group2()[2] * self.group9()[0])),
                ((other.group1()[0] * self.group3()[1]) - (other.group1()[1] * self.group3()[0]) + (other.group2()[0] * self.group9()[1]) - (other.group2()[1] * self.group9()[0])),
            ]) + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                + (Simd32x3::from(self.group9()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from([other.group2()[1], other.group2()[2], other.group2()[0]]) * swizzle!(self.group5(), 2, 0, 1))
                - (Simd32x3::from([other.group2()[2], other.group2()[0], other.group2()[1]]) * swizzle!(self.group5(), 1, 2, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group0()[1] * self.group8()[2]) + (other.group0()[2] * self.group8()[1])),
                ((other.group0()[0] * self.group8()[2]) - (other.group0()[2] * self.group8()[0])),
                (-(other.group0()[0] * self.group8()[1]) + (other.group0()[1] * self.group8()[0])),
                (-(other.group2()[2] * self.group1()[2]) - (other.group2()[3] * self[e1])),
            ]) - (Simd32x4::from(self[e1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[0], self.group1()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group7()[2], self.group7()[0], self.group7()[1], self.group6()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group6()[2]]) * swizzle!(other.group2(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group6()[3], self.group8()[1]]) * swizzle!(other.group1(), 1, 2, 2, 1))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group6()[1]]) * swizzle!(other.group2(), 0, 1, 2, 1))
                + (Simd32x4::from([self.group6()[0], self.group6()[1], self.group6()[2], self.group8()[2]]) * swizzle!(other.group1(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group6()[3], self.group6()[3], self.group1()[1], self.group8()[0]]) * swizzle!(other.group1(), 0, 1, 0, 0))),
            // e1234
            ((other.group0()[0] * self.group1()[0])
                + (other.group0()[0] * self.group6()[0])
                + (other.group0()[1] * self.group1()[1])
                + (other.group0()[1] * self.group6()[1])
                + (other.group0()[2] * self.group1()[2])
                + (other.group0()[2] * self.group6()[2])
                + (self.group7()[0] * other.group1()[0])
                + (self.group7()[1] * other.group1()[1])
                + (self.group7()[2] * other.group1()[2])
                + (other.group1()[3] * self.group1()[3])
                - (other.group2()[3] * self.group1()[3])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      440      487        0
    //    simd2       25       25        0
    //    simd3      150      160        0
    //    simd4       85       87        0
    // Totals...
    // yes simd      700      759        0
    //  no simd     1280     1365        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([(other.group1()[3] * self.group3()[3]), ((other.group1()[3] * self.group6()[3]) * -1.0)])
                - (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group3()[0], self.group8()[0]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group3()[1], self.group8()[1]]))
                - (Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group3()[2], self.group8()[2]]))
                - (Simd32x2::from(other.group2()[0]) * Simd32x2::from([self.group4()[0], self.group7()[0]]))
                - (Simd32x2::from(other.group2()[1]) * Simd32x2::from([self.group4()[1], self.group7()[1]]))
                - (Simd32x2::from(other.group2()[2]) * Simd32x2::from([self.group4()[2], self.group7()[2]]))
                - (Simd32x2::from(other.group1()[0]) * Simd32x2::from([self.group5()[0], self.group6()[0]]))
                - (Simd32x2::from(other.group1()[1]) * Simd32x2::from([self.group5()[1], self.group6()[1]]))
                - (Simd32x2::from(other.group1()[2]) * Simd32x2::from([self.group5()[2], self.group6()[2]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self[e1]) - (other.group0()[1] * self.group8()[2]) + (other.group0()[2] * self.group8()[1]) + (other.group2()[1] * self.group7()[2])
                    - (other.group2()[2] * self.group7()[1])
                    + (other.group1()[0] * self.group6()[3])
                    + (other.group1()[1] * self.group1()[2])),
                ((other.group0()[0] * self.group8()[2]) - (other.group0()[1] * self[e1]) - (other.group0()[2] * self.group8()[0]) - (other.group2()[0] * self.group7()[2])
                    + (other.group2()[2] * self.group7()[0])
                    + (other.group1()[1] * self.group6()[3])
                    + (other.group1()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group8()[1]) + (other.group0()[1] * self.group8()[0]) - (other.group0()[2] * self[e1]) + (other.group2()[0] * self.group7()[1])
                    - (other.group2()[1] * self.group7()[0])
                    + (other.group1()[0] * self.group1()[1])
                    + (other.group1()[2] * self.group6()[3])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[1] * self.group6()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group6()[2])
                    - (self.group7()[0] * other.group1()[0])
                    - (self.group7()[1] * other.group1()[1])
                    - (self.group7()[2] * other.group1()[2])),
            ]) + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[0]]) * swizzle!(self.group6(), 0, 1, 2, 0))),
            // e5
            ((other.group2()[0] * self.group1()[0]) - (other.group2()[0] * self.group6()[0]) + (other.group2()[1] * self.group1()[1]) - (other.group2()[1] * self.group6()[1])
                + (other.group2()[2] * self.group1()[2])
                - (other.group2()[2] * self.group6()[2])
                - (self.group8()[0] * other.group1()[0])
                - (self.group8()[1] * other.group1()[1])
                - (self.group8()[2] * other.group1()[2])
                - (other.group1()[3] * self[e1])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group2()[0] * self.group3()[3]) + (other.group2()[1] * self.group5()[2]) + (other.group2()[1] * self.group9()[2]) - (other.group2()[2] * self.group5()[1])
                    + (other.group1()[0] * self.group9()[3])
                    + (other.group1()[1] * self.group3()[2])),
                (-(other.group2()[0] * self.group5()[2])
                    + (other.group2()[1] * self.group3()[3])
                    + (other.group2()[2] * self.group5()[0])
                    + (other.group2()[2] * self.group9()[0])
                    + (other.group1()[1] * self.group9()[3])
                    + (other.group1()[2] * self.group3()[0])),
                ((other.group2()[0] * self.group5()[1]) + (other.group2()[0] * self.group9()[1]) - (other.group2()[1] * self.group5()[0])
                    + (other.group2()[2] * self.group3()[3])
                    + (other.group1()[0] * self.group3()[1])
                    + (other.group1()[2] * self.group9()[3])),
                (-(other.group0()[2] * self.group3()[2])
                    + (other.group2()[0] * self.group4()[0])
                    + (other.group2()[1] * self.group4()[1])
                    + (other.group2()[2] * self.group4()[2])
                    - (other.group1()[1] * self.group9()[1])
                    - (other.group1()[2] * self.group9()[2])),
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[0]]) * swizzle!(self.group9(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[1]]) * swizzle!(self.group3(), 0, 1, 2, 1))),
            // e41, e42, e43
            ((Simd32x3::from(self.group0()[0]) * other.group0())
                - (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group3()[3], self.group5()[2], self.group9()[1]]))
                - (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group9()[2], self.group3()[3], self.group5()[0]]))
                - (Simd32x3::from(other.group0()[2]) * Simd32x3::from([self.group5()[1], self.group9()[0], self.group3()[3]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from([self.group5()[2], self.group9()[2], self.group5()[1]]) * swizzle!(other.group0(), 1, 0, 0))
                + (Simd32x3::from([other.group1()[1], other.group1()[3], other.group1()[3]]) * swizzle!(self.group4(), 2, 1, 2))
                - (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]) * swizzle!(self.group4(), 1, 2, 0))
                + (Simd32x3::from([other.group1()[3], other.group1()[2], other.group1()[0]]) * swizzle!(self.group4(), 0, 0, 1))
                + (Simd32x3::from([self.group9()[1], self.group5()[0], self.group9()[0]]) * swizzle!(other.group0(), 2, 2, 1))),
            // e23, e31, e12
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from([self.group4()[2], self.group4()[0], self[e45]]) * swizzle!(other.group2(), 1, 2, 2))
                + (Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]) * swizzle!(self.group5(), 2, 0, 1))
                - (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]) * swizzle!(self.group5(), 1, 2, 0))
                - (Simd32x3::from([self.group3()[1], self.group3()[2], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                + (Simd32x3::from([self.group3()[2], self.group3()[0], self.group9()[3]]) * swizzle!(other.group0(), 1, 2, 2))
                + (Simd32x3::from([self.group9()[3], self.group9()[3], self.group3()[1]]) * swizzle!(other.group0(), 0, 1, 0))
                + (Simd32x3::from([self[e45], self[e45], self.group4()[1]]) * swizzle!(other.group2(), 0, 1, 0))
                - (swizzle!(other.group2(), 2, 0, 1) * swizzle!(self.group4(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[0]) + (other.group0()[0] * self[e1]) + (other.group0()[1] * self.group8()[2]) - (other.group0()[2] * self.group8()[1])
                    + (other.group2()[0] * self.group1()[3])
                    + (other.group2()[1] * self.group7()[2])
                    - (other.group2()[2] * self.group7()[1])
                    + (other.group1()[1] * self.group6()[2])),
                ((self.group0()[1] * other.group1()[1]) - (other.group0()[0] * self.group8()[2]) + (other.group0()[1] * self[e1]) + (other.group0()[2] * self.group8()[0])
                    - (other.group2()[0] * self.group7()[2])
                    + (other.group2()[1] * self.group1()[3])
                    + (other.group2()[2] * self.group7()[0])
                    + (other.group1()[2] * self.group6()[0])),
                ((self.group0()[1] * other.group1()[2]) + (other.group0()[0] * self.group8()[1]) - (other.group0()[1] * self.group8()[0])
                    + (other.group0()[2] * self[e1])
                    + (other.group2()[0] * self.group7()[1])
                    - (other.group2()[1] * self.group7()[0])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group1()[0] * self.group6()[1])),
                ((other.group0()[0] * self.group8()[0]) + (other.group0()[1] * self.group8()[1]) + (other.group0()[2] * self.group8()[2])
                    - (other.group2()[0] * self.group7()[0])
                    - (other.group2()[1] * self.group7()[1])
                    - (other.group2()[2] * self.group7()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([self.group6()[1], self.group6()[2], self.group6()[0], self.group0()[1]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (swizzle!(other.group1(), 3, 3, 3, 0) * swizzle!(self.group1(), 0, 1, 2, 0))),
            // e423, e431, e412
            ((Simd32x3::from(self.group0()[1]) * other.group0())
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from([other.group1()[1], other.group1()[3], other.group1()[3]]) * swizzle!(self.group7(), 2, 1, 2))
                - (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]) * swizzle!(self.group7(), 1, 2, 0))
                + (Simd32x3::from([other.group1()[3], other.group1()[2], other.group1()[0]]) * swizzle!(self.group7(), 0, 0, 1))
                - (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                + (Simd32x3::from([self.group1()[2], self.group1()[0], self.group6()[1]]) * swizzle!(other.group0(), 1, 2, 0))
                - (Simd32x3::from([self.group6()[1], self.group6()[2], self.group6()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                + (Simd32x3::from([self.group6()[2], self.group6()[0], self.group6()[3]]) * swizzle!(other.group0(), 1, 2, 2))
                + (Simd32x3::from([self.group6()[3], self.group6()[3], self.group1()[1]]) * swizzle!(other.group0(), 0, 1, 0))),
            // e235, e315, e125
            ((Simd32x3::from(self.group0()[1]) * other.group2())
                - (Simd32x3::from(other.group2()[0]) * Simd32x3::from([self.group6()[3], self.group6()[2], self.group1()[1]]))
                - (Simd32x3::from(other.group2()[1]) * Simd32x3::from([self.group1()[2], self.group6()[3], self.group6()[0]]))
                - (Simd32x3::from(other.group2()[2]) * Simd32x3::from([self.group6()[1], self.group1()[0], self.group6()[3]]))
                + (Simd32x3::from(self[e1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]) * swizzle!(self.group8(), 2, 0, 1))
                - (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[3]]) * swizzle!(self.group8(), 1, 2, 2))
                - (Simd32x3::from([other.group1()[3], other.group1()[3], other.group1()[1]]) * swizzle!(self.group8(), 0, 1, 0))
                + (Simd32x3::from([self.group1()[1], self.group6()[0], self.group1()[0]]) * swizzle!(other.group2(), 2, 2, 1))
                + (Simd32x3::from([self.group6()[2], self.group1()[2], self.group6()[1]]) * swizzle!(other.group2(), 1, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[0] * self.group9()[3]) + (other.group0()[1] * self.group3()[2]) - (other.group2()[0] * self[e45]) - (other.group2()[1] * self.group4()[2])
                    + (other.group2()[2] * self.group4()[1])
                    + (self.group5()[0] * other.group1()[3])
                    + (other.group1()[0] * self.group3()[3])
                    + (other.group1()[1] * self.group9()[2])),
                ((other.group0()[1] * self.group9()[3]) + (other.group0()[2] * self.group3()[0]) + (other.group2()[0] * self.group4()[2])
                    - (other.group2()[1] * self[e45])
                    - (other.group2()[2] * self.group4()[0])
                    + (self.group5()[1] * other.group1()[3])
                    + (other.group1()[1] * self.group3()[3])
                    + (other.group1()[2] * self.group9()[0])),
                ((other.group0()[0] * self.group3()[1]) + (other.group0()[2] * self.group9()[3]) - (other.group2()[0] * self.group4()[1]) + (other.group2()[1] * self.group4()[0])
                    - (other.group2()[2] * self[e45])
                    + (self.group5()[2] * other.group1()[3])
                    + (other.group1()[0] * self.group9()[1])
                    + (other.group1()[2] * self.group3()[3])),
                (-(other.group2()[0] * self.group5()[0])
                    - (other.group2()[1] * self.group5()[1])
                    - (other.group2()[1] * self.group9()[1])
                    - (other.group2()[2] * self.group5()[2])
                    - (other.group2()[2] * self.group9()[2])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group3()[2])
                    - (other.group1()[3] * self.group9()[3])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group9(), 1, 2, 0, 0))),
            // e1234
            (-(other.group0()[0] * self.group5()[0]) + (other.group0()[0] * self.group9()[0]) - (other.group0()[1] * self.group5()[1]) + (other.group0()[1] * self.group9()[1])
                - (other.group0()[2] * self.group5()[2])
                + (other.group0()[2] * self.group9()[2])
                - (self.group4()[0] * other.group1()[0])
                - (self.group4()[1] * other.group1()[1])
                - (self.group4()[2] * other.group1()[2])
                + (other.group1()[3] * self[e45])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      450      502        0
    //    simd2       27       27        0
    //    simd3      168      176        0
    //    simd4      108      110        0
    // Totals...
    // yes simd      753      815        0
    //  no simd     1440     1524        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                ((other.group1()[3] * self.group3()[3]) - (other.group3()[0] * self.group9()[0]) - (other.group3()[1] * self.group9()[1]) - (other.group3()[2] * self.group9()[2])),
                (-(other.group1()[3] * self.group6()[3])
                    + (other.group3()[0] * self.group1()[0])
                    + (other.group3()[1] * self.group1()[1])
                    + (other.group3()[2] * self.group1()[2])),
            ]) - (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group3()[0], self.group8()[0]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group3()[1], self.group8()[1]]))
                - (Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group3()[2], self.group8()[2]]))
                - (Simd32x2::from(other.group1()[0]) * Simd32x2::from([self.group5()[0], self.group6()[0]]))
                - (Simd32x2::from(other.group1()[1]) * Simd32x2::from([self.group5()[1], self.group6()[1]]))
                - (Simd32x2::from(other.group1()[2]) * Simd32x2::from([self.group5()[2], self.group6()[2]]))
                - (Simd32x2::from(other.group2()[0]) * Simd32x2::from([self.group4()[0], self.group7()[0]]))
                - (Simd32x2::from(other.group2()[1]) * Simd32x2::from([self.group4()[1], self.group7()[1]]))
                - (Simd32x2::from(other.group2()[2]) * Simd32x2::from([self.group4()[2], self.group7()[2]]))
                + (Simd32x2::from(other.group2()[3]) * Simd32x2::from([self.group9()[3], self[e1]]))
                + (Simd32x2::from(other.group3()[3]) * Simd32x2::from([self[e45], self.group1()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self[e1]) - (other.group0()[1] * self.group8()[2]) + (other.group0()[2] * self.group8()[1]) + (self.group7()[0] * other.group3()[3])
                    - (self.group7()[1] * other.group2()[2])
                    - (self.group8()[0] * other.group2()[3])
                    + (other.group1()[1] * self.group1()[2])
                    + (other.group3()[2] * self.group6()[1])),
                ((other.group0()[0] * self.group8()[2]) - (other.group0()[1] * self[e1]) - (other.group0()[2] * self.group8()[0]) + (self.group7()[1] * other.group3()[3])
                    - (self.group7()[2] * other.group2()[0])
                    - (self.group8()[1] * other.group2()[3])
                    + (other.group1()[2] * self.group1()[0])
                    + (other.group3()[0] * self.group6()[2])),
                (-(other.group0()[0] * self.group8()[1]) + (other.group0()[1] * self.group8()[0]) - (other.group0()[2] * self[e1]) - (self.group7()[0] * other.group2()[1])
                    + (self.group7()[2] * other.group3()[3])
                    - (self.group8()[2] * other.group2()[3])
                    + (other.group1()[2] * self.group6()[3])
                    + (other.group3()[1] * self.group6()[0])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group6()[2])
                    - (self.group7()[0] * other.group1()[0])
                    - (self.group7()[1] * other.group1()[1])
                    - (self.group7()[1] * other.group3()[1])
                    - (self.group7()[2] * other.group1()[2])
                    - (self.group7()[2] * other.group3()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group7()[0]]) * swizzle!(other.group3(), 0, 1, 2, 0))
                + (Simd32x4::from([self.group7()[2], self.group7()[0], self.group7()[1], self.group0()[1]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[0]]) * swizzle!(self.group6(), 0, 1, 2, 0))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group0()[1]]) * swizzle!(self.group6(), 2, 0, 1, 1))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group6()[3]]) * other.group2())
                + (Simd32x4::from([self.group6()[3], self.group6()[3], self.group1()[1], self.group1()[3]]) * swizzle!(other.group1(), 0, 1, 0, 3))),
            // e5
            ((self.group0()[1] * other.group3()[3]) - (self.group8()[0] * other.group1()[0]) + (self.group8()[0] * other.group3()[0]) - (self.group8()[1] * other.group1()[1])
                + (self.group8()[1] * other.group3()[1])
                - (self.group8()[2] * other.group1()[2])
                + (self.group8()[2] * other.group3()[2])
                - (other.group1()[3] * self[e1])
                + (other.group2()[0] * self.group1()[0])
                - (other.group2()[0] * self.group6()[0])
                + (other.group2()[1] * self.group1()[1])
                - (other.group2()[1] * self.group6()[1])
                + (other.group2()[2] * self.group1()[2])
                - (other.group2()[2] * self.group6()[2])
                - (other.group3()[3] * self.group6()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group5()[0] * other.group3()[3]) - (self.group5()[1] * other.group2()[2])
                    + (other.group1()[1] * self.group3()[2])
                    + (other.group3()[2] * self.group3()[1])
                    + (other.group3()[3] * self.group9()[0])),
                ((self.group5()[1] * other.group3()[3]) - (self.group5()[2] * other.group2()[0])
                    + (other.group1()[2] * self.group3()[0])
                    + (other.group3()[0] * self.group3()[2])
                    + (other.group3()[3] * self.group9()[1])),
                (-(self.group5()[0] * other.group2()[1])
                    + (self.group5()[2] * other.group3()[3])
                    + (other.group1()[0] * self.group3()[1])
                    + (other.group3()[1] * self.group3()[0])
                    + (other.group3()[3] * self.group9()[2])),
                (-(other.group0()[2] * self.group3()[2])
                    - (self.group5()[2] * other.group3()[2])
                    - (other.group1()[1] * self.group9()[1])
                    - (other.group1()[2] * self.group9()[2])
                    - (other.group3()[3] * self[e45])),
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))
                + (Simd32x4::from(self.group9()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                + (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group4()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[1]]) * swizzle!(self.group3(), 0, 1, 2, 1))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[0]]) * swizzle!(self.group9(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group9()[3], self.group5()[1]]) * swizzle!(other.group3(), 1, 2, 2, 1))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group9()[1], self.group4()[1]]) * swizzle!(other.group2(), 0, 1, 0, 1))
                + (Simd32x4::from([self.group9()[2], self.group9()[0], self.group3()[3], self.group4()[2]]) * swizzle!(other.group2(), 1, 2, 2, 2))
                - (Simd32x4::from([self.group9()[3], self.group9()[3], self.group3()[1], self.group5()[0]]) * swizzle!(other.group3(), 0, 1, 0, 0))),
            // e41, e42, e43
            ((Simd32x3::from(self.group0()[0]) * other.group0())
                - (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group3()[3], self.group5()[2], self.group9()[1]]))
                - (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group9()[2], self.group3()[3], self.group5()[0]]))
                - (Simd32x3::from(other.group0()[2]) * Simd32x3::from([self.group5()[1], self.group9()[0], self.group3()[3]]))
                - (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(other.group2()[3]) * self.group5())
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from([self.group5()[2], self.group9()[2], self.group5()[1]]) * swizzle!(other.group0(), 1, 0, 0))
                + (Simd32x3::from([other.group1()[1], other.group3()[2], other.group3()[0]]) * swizzle!(self.group4(), 2, 0, 1))
                - (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]) * swizzle!(self.group4(), 1, 2, 0))
                + (Simd32x3::from([other.group1()[3], other.group1()[2], other.group1()[0]]) * swizzle!(self.group4(), 0, 0, 1))
                + (Simd32x3::from([other.group3()[1], other.group1()[3], other.group1()[3]]) * swizzle!(self.group4(), 2, 1, 2))
                - (Simd32x3::from([other.group3()[2], other.group3()[0], other.group3()[1]]) * swizzle!(self.group4(), 1, 2, 0))
                + (Simd32x3::from([self.group9()[1], self.group5()[0], self.group9()[0]]) * swizzle!(other.group0(), 2, 2, 1))),
            // e23, e31, e12
            (Simd32x3::from([
                ((other.group3()[1] * self.group9()[2]) - (other.group3()[2] * self.group9()[1])),
                (-(other.group3()[0] * self.group9()[2]) + (other.group3()[2] * self.group9()[0])),
                ((other.group3()[0] * self.group9()[1]) - (other.group3()[1] * self.group9()[0])),
            ]) + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                + (Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]) * swizzle!(self.group5(), 2, 0, 1))
                - (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]) * swizzle!(self.group5(), 1, 2, 0))
                + (Simd32x3::from([other.group2()[1], other.group3()[3], other.group3()[3]]) * swizzle!(self.group4(), 2, 1, 2))
                - (Simd32x3::from([other.group2()[2], other.group2()[0], other.group2()[1]]) * swizzle!(self.group4(), 1, 2, 0))
                + (Simd32x3::from([other.group3()[3], other.group2()[2], other.group2()[0]]) * swizzle!(self.group4(), 0, 0, 1))
                - (Simd32x3::from([self.group3()[1], self.group3()[2], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                + (Simd32x3::from([self.group3()[2], self.group3()[0], self.group9()[3]]) * swizzle!(other.group0(), 1, 2, 2))
                + (Simd32x3::from([self.group9()[3], self.group9()[3], self.group3()[1]]) * swizzle!(other.group0(), 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[0]) + (other.group0()[0] * self[e1]) + (other.group0()[1] * self.group8()[2]) - (other.group0()[2] * self.group8()[1])
                    + (self.group7()[2] * other.group2()[1])
                    + (self.group8()[0] * other.group2()[3])
                    - (other.group3()[0] * self.group6()[3])),
                ((self.group0()[1] * other.group1()[1]) - (other.group0()[0] * self.group8()[2])
                    + (other.group0()[1] * self[e1])
                    + (other.group0()[2] * self.group8()[0])
                    + (self.group7()[0] * other.group2()[2])
                    + (self.group8()[1] * other.group2()[3])
                    - (other.group3()[1] * self.group6()[3])),
                ((self.group0()[1] * other.group1()[2]) + (other.group0()[0] * self.group8()[1]) - (other.group0()[1] * self.group8()[0])
                    + (other.group0()[2] * self[e1])
                    + (self.group7()[1] * other.group2()[0])
                    + (self.group8()[2] * other.group2()[3])
                    - (other.group3()[2] * self.group6()[3])),
                ((other.group0()[0] * self.group8()[0]) + (other.group0()[1] * self.group8()[1]) + (other.group0()[2] * self.group8()[2])
                    - (self.group7()[1] * other.group2()[1])
                    - (self.group7()[2] * other.group2()[2])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group2()[3] * self[e1])),
            ]) + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                + (Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group6()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[0], self.group7()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[1]]) * swizzle!(self.group6(), 2, 0, 1, 1))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[1]]) * swizzle!(self.group1(), 2, 0, 1, 1))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group6()[2]]) * swizzle!(other.group3(), 2, 0, 1, 2))
                - (Simd32x4::from([self.group6()[1], self.group6()[2], self.group6()[0], self.group0()[1]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (swizzle!(other.group1(), 3, 3, 3, 0) * swizzle!(self.group1(), 0, 1, 2, 0))),
            // e423, e431, e412
            ((Simd32x3::from(self.group0()[1]) * other.group0())
                + (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from([other.group1()[1], other.group3()[2], other.group3()[0]]) * swizzle!(self.group7(), 2, 0, 1))
                - (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]) * swizzle!(self.group7(), 1, 2, 0))
                + (Simd32x3::from([other.group1()[3], other.group1()[2], other.group1()[0]]) * swizzle!(self.group7(), 0, 0, 1))
                + (Simd32x3::from([other.group3()[1], other.group1()[3], other.group1()[3]]) * swizzle!(self.group7(), 2, 1, 2))
                - (Simd32x3::from([other.group3()[2], other.group3()[0], other.group3()[1]]) * swizzle!(self.group7(), 1, 2, 0))
                - (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                + (Simd32x3::from([self.group1()[2], self.group1()[0], self.group6()[1]]) * swizzle!(other.group0(), 1, 2, 0))
                - (Simd32x3::from([self.group6()[1], self.group6()[2], self.group6()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                + (Simd32x3::from([self.group6()[2], self.group6()[0], self.group6()[3]]) * swizzle!(other.group0(), 1, 2, 2))
                + (Simd32x3::from([self.group6()[3], self.group6()[3], self.group1()[1]]) * swizzle!(other.group0(), 0, 1, 0))),
            // e235, e315, e125
            (Simd32x3::from([
                ((other.group2()[1] * self.group6()[2]) + (other.group2()[2] * self.group1()[1])),
                ((other.group2()[0] * self.group1()[2]) + (other.group2()[2] * self.group6()[0])),
                ((other.group2()[0] * self.group6()[1]) + (other.group2()[1] * self.group1()[0])),
            ]) + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                - (Simd32x3::from(self.group8()[0]) * Simd32x3::from([other.group1()[3], other.group3()[2], other.group1()[1]]))
                - (Simd32x3::from(self.group8()[1]) * Simd32x3::from([other.group1()[2], other.group1()[3], other.group3()[0]]))
                - (Simd32x3::from(self.group8()[2]) * Simd32x3::from([other.group3()[1], other.group1()[0], other.group1()[3]]))
                - (Simd32x3::from(other.group2()[0]) * Simd32x3::from([self.group6()[3], self.group6()[2], self.group1()[1]]))
                - (Simd32x3::from(other.group2()[1]) * Simd32x3::from([self.group1()[2], self.group6()[3], self.group6()[0]]))
                - (Simd32x3::from(other.group2()[2]) * Simd32x3::from([self.group6()[1], self.group1()[0], self.group6()[3]]))
                - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                + (Simd32x3::from(self[e1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(self[e1]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from([other.group1()[1], other.group3()[0], other.group1()[0]]) * swizzle!(self.group8(), 2, 2, 1))
                + (Simd32x3::from([other.group3()[2], other.group1()[2], other.group3()[1]]) * swizzle!(self.group8(), 1, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[0] * self.group9()[3]) - (self.group4()[0] * other.group3()[3]) + (self.group4()[1] * other.group2()[2]) + (self.group5()[0] * other.group1()[3])
                    - (self.group5()[1] * other.group3()[2])
                    + (other.group1()[1] * self.group9()[2])),
                ((other.group0()[1] * self.group9()[3]) - (self.group4()[1] * other.group3()[3]) + (self.group4()[2] * other.group2()[0]) + (self.group5()[1] * other.group1()[3])
                    - (self.group5()[2] * other.group3()[0])
                    + (other.group1()[2] * self.group9()[0])),
                ((other.group0()[2] * self.group9()[3]) + (self.group4()[0] * other.group2()[1]) - (self.group4()[2] * other.group3()[3]) - (self.group5()[0] * other.group3()[1])
                    + (self.group5()[2] * other.group1()[3])
                    + (other.group1()[0] * self.group9()[1])),
                (-(self.group5()[2] * other.group2()[2])
                    - (other.group1()[2] * self.group3()[2])
                    - (other.group1()[3] * self.group9()[3])
                    - (other.group2()[0] * self.group9()[0])
                    - (other.group2()[1] * self.group9()[1])
                    - (other.group2()[2] * self.group9()[2])),
            ]) + (Simd32x4::from(self.group0()[0]) * other.group3())
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group3(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group4()[2], self.group4()[0], self.group4()[1], self.group5()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group3()[1]]) * swizzle!(other.group3(), 1, 2, 0, 1))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[2]]) * swizzle!(self.group3(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group3()[3]]) * self.group3())
                - (Simd32x4::from([self.group9()[1], self.group9()[2], self.group9()[0], self.group3()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))
                - (Simd32x4::from([self[e45], self[e45], self[e45], self.group5()[1]]) * swizzle!(other.group2(), 0, 1, 2, 1))),
            // e1234
            ((self.group0()[0] * other.group2()[3]) - (other.group0()[0] * self.group5()[0]) + (other.group0()[0] * self.group9()[0]) - (other.group0()[1] * self.group5()[1])
                + (other.group0()[1] * self.group9()[1])
                - (other.group0()[2] * self.group5()[2])
                + (other.group0()[2] * self.group9()[2])
                - (self.group4()[0] * other.group1()[0])
                - (self.group4()[0] * other.group3()[0])
                - (self.group4()[1] * other.group1()[1])
                - (self.group4()[1] * other.group3()[1])
                - (self.group4()[2] * other.group1()[2])
                - (self.group4()[2] * other.group3()[2])
                + (other.group1()[3] * self[e45])
                - (other.group2()[3] * self.group3()[3])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      335      388        0
    //    simd2       16       16        0
    //    simd3      119      129        0
    //    simd4       75       77        0
    // Totals...
    // yes simd      545      610        0
    //  no simd     1024     1115        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(other.group0()[0] * self[e1]) - (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group9()[3]) + (other.group0()[1] * self.group0()[0])),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[1] * self.group9()[0]) * -1.0),
                ((other.group0()[1] * self.group9()[1]) * -1.0),
                ((other.group0()[1] * self.group9()[2]) * -1.0),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self[e45])),
            ]) - (Simd32x4::from(other.group0()[0]) * self.group3())),
            // e5
            (other.group0()[1] * self.group9()[3]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other.group0()[1] * self.group8()[0] * -1.0),
                (other.group0()[1] * self.group8()[1] * -1.0),
                (other.group0()[1] * self.group8()[2] * -1.0),
                (-(other.group0()[0] * self[e1]) + (other.group0()[1] * self.group6()[3])),
            ]),
            // e41, e42, e43
            (-(Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                - (Simd32x3::from(other.group0()[1]) * self.group7())),
            // e23, e31, e12
            (-(Simd32x3::from(other.group0()[0]) * self.group8()) - (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group3()[0]) + (other.group0()[1] * self.group5()[0])),
                ((other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group5()[1])),
                ((other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group5()[2])),
                (-(other.group0()[0] * self.group9()[3]) - (other.group0()[1] * self.group3()[3])),
            ]),
            // e423, e431, e412
            (-(Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(other.group0()[0]) * self.group5())
                + (Simd32x3::from(other.group0()[1]) * self.group4())),
            // e235, e315, e125
            (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group8()[0]) + (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[0] * self.group8()[1]) + (other.group0()[1] * self.group1()[1])),
                (-(other.group0()[0] * self.group8()[2]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self[e1] * -1.0),
            ]),
            // e1234
            (-(other.group0()[0] * self.group0()[1]) - (other.group0()[0] * self.group6()[3]) - (other.group0()[1] * self.group1()[3])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      357      406        0
    //    simd2       19       19        0
    //    simd3      122      131        0
    //    simd4       82       84        0
    // Totals...
    // yes simd      580      640        0
    //  no simd     1089     1173        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([(other.group0()[3] * self.group3()[3]), ((other.group0()[3] * self.group6()[3]) * -1.0)])
                - (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group4()[0], self.group7()[0]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group4()[1], self.group7()[1]]))
                - (Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group4()[2], self.group7()[2]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group7()[1] * other.group0()[2]) + (self.group7()[2] * other.group0()[1]) + (other.group0()[0] * self.group1()[3])
                    - (other.group0()[3] * self.group6()[0])),
                ((self.group7()[0] * other.group0()[2]) - (self.group7()[2] * other.group0()[0]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[3] * self.group6()[1])),
                (-(self.group7()[0] * other.group0()[1]) + (self.group7()[1] * other.group0()[0]) + (other.group0()[2] * self.group1()[3])
                    - (other.group0()[3] * self.group6()[2])),
                (other.group0()[3] * self.group1()[3]),
            ]),
            // e5
            ((other.group0()[0] * self.group1()[0]) - (other.group0()[0] * self.group6()[0]) + (other.group0()[1] * self.group1()[1]) - (other.group0()[1] * self.group6()[1])
                + (other.group0()[2] * self.group1()[2])
                - (other.group0()[2] * self.group6()[2])
                - (other.group0()[3] * self[e1])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                (-(self.group5()[1] * other.group0()[2]) - (other.group0()[2] * self.group9()[1]) - (other.group0()[3] * self.group3()[0])),
                (-(self.group5()[2] * other.group0()[0]) - (other.group0()[0] * self.group9()[2]) - (other.group0()[3] * self.group3()[1])),
                (-(self.group5()[0] * other.group0()[1]) - (other.group0()[1] * self.group9()[0]) - (other.group0()[3] * self.group3()[2])),
                0.0,
            ]) + (Simd32x4::from(self.group0()[0]) * other.group0())
                + (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group4()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group9()[1], self.group4()[1]]) * swizzle!(other.group0(), 0, 1, 0, 1))
                + (Simd32x4::from([self.group9()[2], self.group9()[0], self.group3()[3], self.group4()[2]]) * swizzle!(other.group0(), 1, 2, 2, 2))),
            // e41, e42, e43
            (Simd32x3::from(other.group0()[3]) * self.group4()),
            // e23, e31, e12
            ((Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group4(), 2, 0, 1))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group4(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group7()[2] * other.group0()[1]) + (other.group0()[0] * self.group1()[3])),
                ((self.group7()[0] * other.group0()[2]) + (other.group0()[1] * self.group1()[3])),
                ((self.group7()[1] * other.group0()[0]) + (other.group0()[2] * self.group1()[3])),
                (-(self.group7()[1] * other.group0()[1]) - (self.group7()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[0], self.group0()[1]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group7()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))),
            // e423, e431, e412
            (Simd32x3::from(other.group0()[3]) * self.group7()),
            // e235, e315, e125
            (Simd32x3::from([
                ((other.group0()[1] * self.group6()[2]) + (other.group0()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group6()[0])),
                ((other.group0()[0] * self.group6()[1]) + (other.group0()[1] * self.group1()[0])),
            ]) + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group6()[3], self.group6()[2], self.group1()[1]]))
                - (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group1()[2], self.group6()[3], self.group6()[0]]))
                - (Simd32x3::from(other.group0()[2]) * Simd32x3::from([self.group6()[1], self.group1()[0], self.group6()[3]]))
                - (Simd32x3::from(other.group0()[3]) * self.group8())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group4()[1] * other.group0()[2]) + (self.group5()[0] * other.group0()[3])),
                ((self.group4()[2] * other.group0()[0]) + (self.group5()[1] * other.group0()[3])),
                ((self.group4()[0] * other.group0()[1]) + (self.group5()[2] * other.group0()[3])),
                (-(self.group5()[2] * other.group0()[2])
                    - (other.group0()[0] * self.group9()[0])
                    - (other.group0()[1] * self.group9()[1])
                    - (other.group0()[2] * self.group9()[2])
                    - (other.group0()[3] * self.group9()[3])),
            ]) - (Simd32x4::from([self.group4()[2], self.group4()[0], self.group4()[1], self.group5()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self[e45], self[e45], self[e45], self.group5()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e1234
            (other.group0()[3] * self[e45]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      400      453        0
    //    simd2       20       20        0
    //    simd3      136      144        0
    //    simd4       92       94        0
    // Totals...
    // yes simd      648      711        0
    //  no simd     1216     1301        0
    fn sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                ((other.group0()[3] * self.group3()[3]) - (other.group1()[0] * self.group9()[0]) - (other.group1()[1] * self.group9()[1]) - (other.group1()[2] * self.group9()[2])),
                (-(other.group0()[3] * self.group6()[3])
                    + (other.group1()[0] * self.group1()[0])
                    + (other.group1()[1] * self.group1()[1])
                    + (other.group1()[2] * self.group1()[2])),
            ]) - (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group4()[0], self.group7()[0]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group4()[1], self.group7()[1]]))
                - (Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group4()[2], self.group7()[2]]))
                + (Simd32x2::from(other.group1()[3]) * Simd32x2::from([self[e45], self.group1()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group7()[0] * other.group1()[3]) - (self.group7()[1] * other.group0()[2]) + (other.group0()[0] * self.group1()[3]) - (other.group0()[3] * self.group6()[0])
                    + (other.group1()[2] * self.group6()[1])),
                ((self.group7()[1] * other.group1()[3]) - (self.group7()[2] * other.group0()[0]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[3] * self.group6()[1])
                    + (other.group1()[0] * self.group6()[2])),
                (-(self.group7()[0] * other.group0()[1]) + (self.group7()[2] * other.group1()[3]) + (other.group0()[2] * self.group1()[3])
                    - (other.group0()[3] * self.group6()[2])
                    + (other.group1()[1] * self.group6()[0])),
                ((self.group7()[2] * other.group1()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group7()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))
                + (Simd32x4::from([self.group7()[2], self.group7()[0], self.group7()[1], self.group1()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group7()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))),
            // e5
            ((self.group0()[1] * other.group1()[3])
                + (self.group8()[0] * other.group1()[0])
                + (self.group8()[1] * other.group1()[1])
                + (self.group8()[2] * other.group1()[2])
                + (other.group0()[0] * self.group1()[0])
                - (other.group0()[0] * self.group6()[0])
                + (other.group0()[1] * self.group1()[1])
                - (other.group0()[1] * self.group6()[1])
                + (other.group0()[2] * self.group1()[2])
                - (other.group0()[2] * self.group6()[2])
                - (other.group0()[3] * self[e1])
                - (other.group1()[3] * self.group6()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group5()[0] * other.group1()[3]) - (self.group5()[1] * other.group0()[2]) - (other.group0()[2] * self.group9()[1]) - (other.group0()[3] * self.group3()[0])
                    + (other.group1()[2] * self.group3()[1])
                    + (other.group1()[3] * self.group9()[0])),
                ((self.group5()[1] * other.group1()[3]) - (self.group5()[2] * other.group0()[0]) - (other.group0()[0] * self.group9()[2]) - (other.group0()[3] * self.group3()[1])
                    + (other.group1()[0] * self.group3()[2])
                    + (other.group1()[3] * self.group9()[1])),
                (-(self.group5()[0] * other.group0()[1]) + (self.group5()[2] * other.group1()[3])
                    - (other.group0()[1] * self.group9()[0])
                    - (other.group0()[3] * self.group3()[2])
                    + (other.group1()[1] * self.group3()[0])
                    + (other.group1()[3] * self.group9()[2])),
                (-(self.group5()[2] * other.group1()[2]) - (other.group1()[3] * self[e45])),
            ]) + (Simd32x4::from(self.group0()[0]) * other.group0())
                + (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group4()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group9()[3], self.group5()[1]]) * swizzle!(other.group1(), 1, 2, 2, 1))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group9()[1], self.group4()[1]]) * swizzle!(other.group0(), 0, 1, 0, 1))
                + (Simd32x4::from([self.group9()[2], self.group9()[0], self.group3()[3], self.group4()[2]]) * swizzle!(other.group0(), 1, 2, 2, 2))
                - (Simd32x4::from([self.group9()[3], self.group9()[3], self.group3()[1], self.group5()[0]]) * swizzle!(other.group1(), 0, 1, 0, 0))),
            // e41, e42, e43
            ((Simd32x3::from(self[e45]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from([other.group0()[3], other.group1()[2], other.group1()[0]]) * swizzle!(self.group4(), 0, 0, 1))
                + (Simd32x3::from([other.group1()[1], other.group0()[3], other.group0()[3]]) * swizzle!(self.group4(), 2, 1, 2))
                - (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]) * swizzle!(self.group4(), 1, 2, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                ((other.group1()[1] * self.group9()[2]) - (other.group1()[2] * self.group9()[1])),
                (-(other.group1()[0] * self.group9()[2]) + (other.group1()[2] * self.group9()[0])),
                ((other.group1()[0] * self.group9()[1]) - (other.group1()[1] * self.group9()[0])),
            ]) + (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from([other.group0()[1], other.group1()[3], other.group1()[3]]) * swizzle!(self.group4(), 2, 1, 2))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group4(), 1, 2, 0))
                + (Simd32x3::from([other.group1()[3], other.group0()[2], other.group0()[0]]) * swizzle!(self.group4(), 0, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group7()[2] * other.group0()[1]) - (other.group1()[0] * self.group6()[3]) - (other.group1()[1] * self.group1()[2])),
                ((self.group7()[0] * other.group0()[2]) - (other.group1()[1] * self.group6()[3]) - (other.group1()[2] * self.group1()[0])),
                ((self.group7()[1] * other.group0()[0]) - (other.group1()[0] * self.group1()[1]) - (other.group1()[2] * self.group6()[3])),
                (-(self.group7()[1] * other.group0()[1]) - (self.group7()[2] * other.group0()[2]) + (other.group1()[2] * self.group6()[2])),
            ]) + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group6()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[0], self.group0()[1]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group7()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group6()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))),
            // e423, e431, e412
            ((Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from([other.group0()[3], other.group1()[2], other.group1()[0]]) * swizzle!(self.group7(), 0, 0, 1))
                + (Simd32x3::from([other.group1()[1], other.group0()[3], other.group0()[3]]) * swizzle!(self.group7(), 2, 1, 2))
                - (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]) * swizzle!(self.group7(), 1, 2, 0))),
            // e235, e315, e125
            (Simd32x3::from([
                ((other.group0()[1] * self.group6()[2]) + (other.group0()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group6()[0])),
                ((other.group0()[0] * self.group6()[1]) + (other.group0()[1] * self.group1()[0])),
            ]) + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group6()[3], self.group6()[2], self.group1()[1]]))
                - (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group1()[2], self.group6()[3], self.group6()[0]]))
                - (Simd32x3::from(other.group0()[2]) * Simd32x3::from([self.group6()[1], self.group1()[0], self.group6()[3]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                - (Simd32x3::from(self[e1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from([other.group0()[3], other.group1()[2], other.group1()[0]]) * swizzle!(self.group8(), 0, 0, 1))
                - (Simd32x3::from([other.group1()[1], other.group0()[3], other.group0()[3]]) * swizzle!(self.group8(), 2, 1, 2))
                + (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]) * swizzle!(self.group8(), 1, 2, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group4()[0] * other.group1()[3]) + (self.group4()[1] * other.group0()[2]) + (self.group5()[0] * other.group0()[3])
                    - (self.group5()[1] * other.group1()[2])),
                (-(self.group4()[1] * other.group1()[3]) + (self.group4()[2] * other.group0()[0]) + (self.group5()[1] * other.group0()[3])
                    - (self.group5()[2] * other.group1()[0])),
                ((self.group4()[0] * other.group0()[1]) - (self.group4()[2] * other.group1()[3]) - (self.group5()[0] * other.group1()[1]) + (self.group5()[2] * other.group0()[3])),
                (-(self.group5()[2] * other.group0()[2])
                    - (other.group0()[0] * self.group9()[0])
                    - (other.group0()[1] * self.group9()[1])
                    - (other.group0()[2] * self.group9()[2])
                    - (other.group0()[3] * self.group9()[3])
                    + (other.group1()[1] * self.group3()[1])
                    + (other.group1()[2] * self.group3()[2])
                    + (other.group1()[3] * self.group3()[3])),
            ]) + (Simd32x4::from(self.group0()[0]) * other.group1())
                - (Simd32x4::from([self.group4()[2], self.group4()[0], self.group4()[1], self.group5()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group3()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self[e45], self[e45], self[e45], self.group5()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e1234
            (-(self.group4()[0] * other.group1()[0]) - (self.group4()[1] * other.group1()[1]) - (self.group4()[2] * other.group1()[2]) + (other.group0()[3] * self[e45])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      411      457        0
    //    simd2       16       16        0
    //    simd3      131      141        0
    //    simd4       79       81        0
    // Totals...
    // yes simd      637      695        0
    //  no simd     1152     1236        0
    fn sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((other.group0()[0] * self.group6()[0])
                    + (other.group0()[1] * self.group6()[1])
                    + (other.group0()[2] * self.group6()[2])
                    + (other.group1()[0] * self.group7()[0])
                    + (other.group1()[1] * self.group7()[1])
                    + (other.group1()[2] * self.group7()[2])),
                (-(other.group0()[0] * self.group5()[0])
                    - (other.group0()[1] * self.group5()[1])
                    - (other.group0()[2] * self.group5()[2])
                    - (other.group1()[0] * self.group4()[0])
                    - (other.group1()[1] * self.group4()[1])
                    - (other.group1()[2] * self.group4()[2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group9()[2])
                    + (other.group0()[2] * self.group9()[1])
                    + (other.group1()[0] * self[e45])
                    + (other.group1()[1] * self.group4()[2])
                    - (other.group1()[2] * self.group4()[1])),
                ((other.group0()[0] * self.group9()[2]) - (other.group0()[1] * self.group3()[3]) - (other.group0()[2] * self.group9()[0]) - (other.group1()[0] * self.group4()[2])
                    + (other.group1()[1] * self[e45])
                    + (other.group1()[2] * self.group4()[0])),
                (-(other.group0()[0] * self.group9()[1]) + (other.group0()[1] * self.group9()[0]) - (other.group0()[2] * self.group3()[3])
                    + (other.group1()[0] * self.group4()[1])
                    - (other.group1()[1] * self.group4()[0])
                    + (other.group1()[2] * self[e45])),
                (-(other.group0()[0] * self.group4()[0]) - (other.group0()[1] * self.group4()[1]) - (other.group0()[2] * self.group4()[2])),
            ]),
            // e5
            (-(other.group0()[0] * self.group3()[0])
                - (other.group0()[1] * self.group3()[1])
                - (other.group0()[2] * self.group3()[2])
                - (other.group1()[0] * self.group5()[0])
                - (other.group1()[0] * self.group9()[0])
                - (other.group1()[1] * self.group5()[1])
                - (other.group1()[1] * self.group9()[1])
                - (other.group1()[2] * self.group5()[2])
                - (other.group1()[2] * self.group9()[2])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                (-(other.group0()[0] * self[e1]) - (other.group0()[1] * self.group8()[2])
                    + (other.group0()[2] * self.group8()[1])
                    + (other.group1()[0] * self.group6()[3])
                    + (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group6()[1])),
                ((other.group0()[0] * self.group8()[2]) - (other.group0()[1] * self[e1]) - (other.group0()[2] * self.group8()[0])
                    + (other.group1()[0] * self.group6()[2])
                    + (other.group1()[1] * self.group6()[3])
                    + (other.group1()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group8()[1]) + (other.group0()[1] * self.group8()[0]) - (other.group0()[2] * self[e1])
                    + (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group6()[0])
                    + (other.group1()[2] * self.group6()[3])),
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])),
            ]) - (Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group0()[1], self.group1()[2], self.group6()[1], self.group7()[0]]))
                - (Simd32x4::from(other.group1()[1]) * Simd32x4::from([self.group6()[2], self.group0()[1], self.group1()[0], self.group7()[1]]))
                - (Simd32x4::from(other.group1()[2]) * Simd32x4::from([self.group1()[1], self.group6()[0], self.group0()[1], self.group7()[2]]))),
            // e41, e42, e43
            (-(Simd32x3::from([self.group7()[2], self.group7()[0], self.group1()[3]]) * swizzle!(other.group0(), 1, 2, 2))
                - (Simd32x3::from([self.group1()[3], self.group1()[3], self.group7()[1]]) * swizzle!(other.group0(), 0, 1, 0))
                + (swizzle!(other.group0(), 2, 0, 1) * swizzle!(self.group7(), 1, 2, 0))),
            // e23, e31, e12
            (-(Simd32x3::from(self.group0()[1]) * other.group0())
                - (Simd32x3::from([self.group7()[2], self.group7()[0], self.group1()[3]]) * swizzle!(other.group1(), 1, 2, 2))
                - (Simd32x3::from([self.group1()[3], self.group1()[3], self.group7()[1]]) * swizzle!(other.group1(), 0, 1, 0))
                + (Simd32x3::from([self.group6()[1], self.group6()[2], self.group6()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                - (Simd32x3::from([self.group6()[2], self.group6()[0], self.group6()[1]]) * swizzle!(other.group0(), 1, 2, 0))
                + (swizzle!(other.group1(), 2, 0, 1) * swizzle!(self.group7(), 1, 2, 0))),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (other.group0()[1] * self.group5()[2]) - (other.group0()[2] * self.group5()[1])
                    + (other.group1()[0] * self[e45])
                    + (other.group1()[1] * self.group4()[2])
                    - (other.group1()[2] * self.group4()[1])),
                ((self.group0()[0] * other.group0()[1]) - (other.group0()[0] * self.group5()[2]) + (other.group0()[2] * self.group5()[0]) - (other.group1()[0] * self.group4()[2])
                    + (other.group1()[1] * self[e45])
                    + (other.group1()[2] * self.group4()[0])),
                ((self.group0()[0] * other.group0()[2]) + (other.group0()[0] * self.group5()[1]) - (other.group0()[1] * self.group5()[0]) + (other.group1()[0] * self.group4()[1])
                    - (other.group1()[1] * self.group4()[0])
                    + (other.group1()[2] * self[e45])),
                ((other.group0()[0] * self.group9()[0]) + (other.group0()[1] * self.group9()[1]) + (other.group0()[2] * self.group9()[2])
                    - (other.group1()[0] * self.group4()[0])
                    - (other.group1()[1] * self.group4()[1])
                    - (other.group1()[2] * self.group4()[2])),
            ]),
            // e423, e431, e412
            ((Simd32x3::from([self.group4()[2], self.group4()[0], self[e45]]) * swizzle!(other.group0(), 1, 2, 2))
                + (Simd32x3::from([self[e45], self[e45], self.group4()[1]]) * swizzle!(other.group0(), 0, 1, 0))
                - (swizzle!(other.group0(), 2, 0, 1) * swizzle!(self.group4(), 1, 2, 0))),
            // e235, e315, e125
            ((Simd32x3::from(self.group0()[0]) * other.group1()) + (Simd32x3::from([self.group5()[2], self.group5()[0], self.group9()[1]]) * swizzle!(other.group1(), 1, 2, 0))
                - (Simd32x3::from([self.group3()[1], self.group3()[2], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                + (Simd32x3::from([self.group3()[2], self.group3()[0], self.group9()[3]]) * swizzle!(other.group0(), 1, 2, 2))
                + (Simd32x3::from([self.group3()[3], self.group3()[3], self.group5()[1]]) * swizzle!(other.group1(), 0, 1, 0))
                - (Simd32x3::from([self.group9()[1], self.group9()[2], self.group9()[0]]) * swizzle!(other.group1(), 2, 0, 1))
                + (Simd32x3::from([self.group9()[2], self.group9()[0], self.group3()[3]]) * swizzle!(other.group1(), 1, 2, 2))
                + (Simd32x3::from([self.group9()[3], self.group9()[3], self.group3()[1]]) * swizzle!(other.group0(), 0, 1, 0))
                - (swizzle!(other.group1(), 2, 0, 1) * swizzle!(self.group5(), 1, 2, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) + (other.group1()[0] * self.group1()[3]) + (other.group1()[1] * self.group7()[2]) - (other.group1()[2] * self.group7()[1])),
                ((other.group0()[2] * self.group1()[0]) - (other.group1()[0] * self.group7()[2]) + (other.group1()[1] * self.group1()[3]) + (other.group1()[2] * self.group7()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group1()[0] * self.group7()[1]) - (other.group1()[1] * self.group7()[0]) + (other.group1()[2] * self.group1()[3])),
                ((other.group0()[0] * self.group8()[0]) + (other.group0()[1] * self.group8()[1]) + (other.group0()[2] * self.group8()[2]) - (other.group1()[1] * self.group1()[1])
                    + (other.group1()[1] * self.group6()[1])
                    - (other.group1()[2] * self.group1()[2])
                    + (other.group1()[2] * self.group6()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group6(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e1234
            ((other.group0()[0] * self.group7()[0]) + (other.group0()[1] * self.group7()[1]) + (other.group0()[2] * self.group7()[2])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      387      434        0
    //    simd2       16       16        0
    //    simd3      134      142        0
    //    simd4      100      102        0
    // Totals...
    // yes simd      637      694        0
    //  no simd     1221     1300        0
    fn sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group0()[1] * other.group0()[3])
                    + (self.group7()[0] * other.group1()[0])
                    + (self.group7()[1] * other.group1()[1])
                    + (self.group7()[2] * other.group1()[2])
                    + (other.group0()[0] * self.group6()[0])
                    + (other.group0()[1] * self.group6()[1])
                    + (other.group0()[2] * self.group6()[2])
                    - (other.group1()[3] * self.group1()[3])),
                ((self.group0()[0] * other.group0()[3])
                    - (self.group4()[0] * other.group1()[0])
                    - (self.group4()[1] * other.group1()[1])
                    - (self.group4()[2] * other.group1()[2])
                    - (self.group5()[0] * other.group0()[0])
                    - (self.group5()[1] * other.group0()[1])
                    - (self.group5()[2] * other.group0()[2])
                    + (other.group1()[3] * self[e45])),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group4()[0] * other.group1()[3]) - (self.group4()[1] * other.group1()[2]) + (self.group4()[2] * other.group1()[1]) + (other.group1()[0] * self[e45])),
                ((self.group4()[0] * other.group1()[2]) + (self.group4()[1] * other.group1()[3]) - (self.group4()[2] * other.group1()[0]) + (other.group1()[1] * self[e45])),
                (-(self.group4()[0] * other.group1()[1]) + (self.group4()[1] * other.group1()[0]) + (self.group4()[2] * other.group1()[3]) + (other.group1()[2] * self[e45])),
                0.0,
            ]) - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group9()[1], self.group4()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group9()[0], self.group9()[1], self.group9()[2], self.group4()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group9()[1], self.group9()[2], self.group9()[0], self[e45]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group9()[2], self.group9()[0], self.group3()[3], self.group4()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))),
            // e5
            ((self.group0()[0] * other.group1()[3])
                - (self.group5()[0] * other.group1()[0])
                - (self.group5()[1] * other.group1()[1])
                - (self.group5()[2] * other.group1()[2])
                - (other.group0()[0] * self.group3()[0])
                - (other.group0()[1] * self.group3()[1])
                - (other.group0()[2] * self.group3()[2])
                + (other.group0()[3] * self.group9()[3])
                - (other.group1()[0] * self.group9()[0])
                - (other.group1()[1] * self.group9()[1])
                - (other.group1()[2] * self.group9()[2])
                + (other.group1()[3] * self.group3()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group1()[1] * self.group1()[2]) + (other.group1()[2] * self.group6()[1]) + (other.group1()[3] * self.group1()[0]) - (other.group1()[3] * self.group6()[0])),
                ((other.group1()[1] * self.group6()[3]) + (other.group1()[2] * self.group1()[0]) + (other.group1()[3] * self.group1()[1]) - (other.group1()[3] * self.group6()[1])),
                ((other.group1()[1] * self.group6()[0]) + (other.group1()[2] * self.group6()[3]) + (other.group1()[3] * self.group1()[2]) - (other.group1()[3] * self.group6()[2])),
                0.0,
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group7()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))
                - (Simd32x4::from([self.group8()[0], self.group8()[0], self.group8()[1], self.group1()[0]]) * swizzle!(other.group0(), 3, 2, 0, 0))
                + (Simd32x4::from([self.group8()[1], self.group8()[2], self.group8()[0], self.group6()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group8()[2], self.group8()[1], self.group8()[2], self.group1()[1]]) * swizzle!(other.group0(), 1, 3, 3, 1))
                - (Simd32x4::from([self.group1()[1], self.group6()[0], self.group1()[0], self.group7()[2]]) * swizzle!(other.group1(), 2, 2, 1, 2))
                - (Simd32x4::from([self.group6()[2], self.group1()[2], self.group6()[1], self.group7()[1]]) * swizzle!(other.group1(), 1, 0, 0, 1))
                + (Simd32x4::from([self.group6()[3], self.group6()[2], self.group1()[1], self.group1()[3]]) * swizzle!(other.group1(), 0, 0, 0, 3))
                - (Simd32x4::from([self[e1], self[e1], self[e1], self.group1()[2]]) * swizzle!(other.group0(), 0, 1, 2, 2))),
            // e41, e42, e43
            (-(Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group0()[3], other.group0()[3]]) * swizzle!(self.group7(), 2, 1, 2))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group7(), 1, 2, 0))
                - (Simd32x3::from([other.group0()[3], other.group0()[2], other.group0()[0]]) * swizzle!(self.group7(), 0, 0, 1))),
            // e23, e31, e12
            (Simd32x3::from([
                (-(other.group0()[1] * self.group6()[2]) + (other.group0()[2] * self.group6()[1])),
                ((other.group0()[0] * self.group6()[2]) - (other.group0()[2] * self.group6()[0])),
                (-(other.group0()[0] * self.group6()[1]) + (other.group0()[1] * self.group6()[0])),
            ]) - (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from([other.group1()[1], other.group1()[3], other.group1()[3]]) * swizzle!(self.group7(), 2, 1, 2))
                + (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]) * swizzle!(self.group7(), 1, 2, 0))
                - (Simd32x3::from([other.group1()[3], other.group1()[2], other.group1()[0]]) * swizzle!(self.group7(), 0, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group4()[2] * other.group1()[1]) + (other.group1()[0] * self[e45])),
                ((self.group4()[1] * other.group1()[3]) + (other.group1()[1] * self[e45])),
                ((self.group4()[2] * other.group1()[3]) + (other.group1()[2] * self[e45])),
                (-(self.group4()[1] * other.group1()[1]) - (self.group4()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group9()[0]]) * swizzle!(other.group0(), 0, 1, 2, 0))
                + (Simd32x4::from([self.group4()[0], self.group4()[0], self.group4()[1], self[e45]]) * swizzle!(other.group1(), 3, 2, 0, 3))
                - (Simd32x4::from([self.group4()[1], self.group4()[2], self.group4()[0], self.group4()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group5()[0], self.group5()[0], self.group5()[1], self.group9()[1]]) * swizzle!(other.group0(), 3, 2, 0, 1))
                - (Simd32x4::from([self.group5()[1], self.group5()[2], self.group5()[0], self.group3()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group5()[2], self.group5()[1], self.group5()[2], self.group9()[2]]) * swizzle!(other.group0(), 1, 3, 3, 2))),
            // e423, e431, e412
            ((Simd32x3::from(self[e45]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from([other.group0()[1], other.group0()[3], other.group0()[3]]) * swizzle!(self.group4(), 2, 1, 2))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group4(), 1, 2, 0))
                + (Simd32x3::from([other.group0()[3], other.group0()[2], other.group0()[0]]) * swizzle!(self.group4(), 0, 0, 1))),
            // e235, e315, e125
            (Simd32x3::from([
                ((other.group0()[1] * self.group3()[2]) - (other.group0()[2] * self.group3()[1]) + (other.group1()[1] * self.group9()[2]) - (other.group1()[2] * self.group9()[1])),
                (-(other.group0()[0] * self.group3()[2]) + (other.group0()[2] * self.group3()[0]) - (other.group1()[0] * self.group9()[2])
                    + (other.group1()[2] * self.group9()[0])),
                ((other.group0()[0] * self.group3()[1]) - (other.group0()[1] * self.group3()[0]) + (other.group1()[0] * self.group9()[1]) - (other.group1()[1] * self.group9()[0])),
            ]) + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group9()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from([other.group1()[1], other.group1()[3], other.group1()[3]]) * swizzle!(self.group5(), 2, 1, 2))
                - (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]) * swizzle!(self.group5(), 1, 2, 0))
                + (Simd32x3::from([other.group1()[3], other.group1()[2], other.group1()[0]]) * swizzle!(self.group5(), 0, 0, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(other.group1()[0] * self.group1()[0]) - (other.group1()[1] * self.group1()[1]) - (other.group1()[2] * self.group1()[2])
                    + (other.group1()[3] * self.group6()[3])),
            ]) + (Simd32x4::from([self.group7()[0], self.group7()[0], self.group7()[1], self.group6()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[0], self.group0()[1]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group7()[2], self.group7()[1], self.group7()[2], self.group6()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group8()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self[e1]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group6()[3], self.group8()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group6()[2]]) * swizzle!(other.group1(), 0, 1, 2, 2))
                + (Simd32x4::from([self.group6()[3], self.group6()[3], self.group1()[1], self.group8()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))),
            // e1234
            ((self.group7()[0] * other.group0()[0]) + (self.group7()[1] * other.group0()[1]) + (self.group7()[2] * other.group0()[2]) - (other.group0()[3] * self.group1()[3])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      644      696        0
    //    simd2       32       32        0
    //    simd3      228      236        0
    //    simd4      148      150        0
    // Totals...
    // yes simd     1052     1114        0
    //  no simd     1984     2068        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                (-(other.group0()[1] * self.group0()[1])
                    + (other.group7()[0] * self.group8()[0])
                    + (other.group7()[1] * self.group8()[1])
                    + (other.group7()[2] * self.group8()[2])
                    + (other.group8()[0] * self.group7()[0])
                    + (other.group8()[1] * self.group7()[1])
                    + (other.group8()[2] * self.group7()[2])
                    - (other.group1()[3] * self[e1])
                    + (other.group3()[3] * self.group3()[3])
                    + (other.group6()[0] * self.group6()[0])
                    + (other.group6()[1] * self.group6()[1])
                    + (other.group6()[2] * self.group6()[2])
                    - (other.group9()[0] * self.group9()[0])
                    - (other.group9()[1] * self.group9()[1])
                    - (other.group9()[2] * self.group9()[2])
                    - (self.group1()[3] * other[e1])),
                ((other.group0()[1] * self.group0()[0])
                    - (other.group7()[0] * self.group3()[0])
                    - (other.group7()[1] * self.group3()[1])
                    - (other.group7()[2] * self.group3()[2])
                    - (self.group5()[0] * other.group6()[0])
                    - (self.group5()[1] * other.group6()[1])
                    - (self.group5()[2] * other.group6()[2])
                    - (self.group7()[0] * other.group3()[0])
                    - (self.group7()[1] * other.group3()[1])
                    - (self.group7()[2] * other.group3()[2])
                    - (other.group6()[3] * self.group3()[3])
                    + (other.group9()[0] * self.group1()[0])
                    + (other.group9()[1] * self.group1()[1])
                    + (other.group9()[2] * self.group1()[2])
                    + (other[e1] * self[e45])
                    + (other[e45] * self[e1])),
            ]) + (Simd32x2::from(other.group0()[0]) * self.group0())
                - (Simd32x2::from(other.group4()[0]) * Simd32x2::from([self.group3()[0], self.group8()[0]]))
                - (Simd32x2::from(other.group4()[1]) * Simd32x2::from([self.group3()[1], self.group8()[1]]))
                - (Simd32x2::from(other.group4()[2]) * Simd32x2::from([self.group3()[2], self.group8()[2]]))
                - (Simd32x2::from(other.group5()[0]) * Simd32x2::from([self.group5()[0], self.group6()[0]]))
                - (Simd32x2::from(other.group5()[1]) * Simd32x2::from([self.group5()[1], self.group6()[1]]))
                - (Simd32x2::from(other.group5()[2]) * Simd32x2::from([self.group5()[2], self.group6()[2]]))
                - (Simd32x2::from(self.group4()[0]) * Simd32x2::from([other.group3()[0], other.group8()[0]]))
                - (Simd32x2::from(self.group4()[1]) * Simd32x2::from([other.group3()[1], other.group8()[1]]))
                - (Simd32x2::from(self.group4()[2]) * Simd32x2::from([other.group3()[2], other.group8()[2]]))
                + (Simd32x2::from(other.group1()[0]) * Simd32x2::from([self.group1()[0], self.group9()[0]]))
                + (Simd32x2::from(other.group1()[1]) * Simd32x2::from([self.group1()[1], self.group9()[1]]))
                + (Simd32x2::from(other.group1()[2]) * Simd32x2::from([self.group1()[2], self.group9()[2]]))
                + (Simd32x2::from(other.group9()[3]) * Simd32x2::from([self[e45], self.group1()[3]]))
                - (Simd32x2::from(self.group6()[3]) * Simd32x2::from([other.group6()[3], other.group3()[3]]))
                + (Simd32x2::from(self.group9()[3]) * Simd32x2::from([other[e45], other.group1()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[1] * self.group9()[0]) - (other.group4()[0] * self[e1]) - (other.group4()[1] * self.group8()[2]) + (other.group4()[2] * self.group8()[1])
                    - (other.group7()[0] * self.group9()[3])
                    + (other.group7()[2] * self.group3()[1])
                    + (other.group8()[1] * self.group4()[2])
                    - (other.group8()[2] * self.group4()[1])
                    + (self.group4()[0] * other[e1])
                    + (self.group5()[0] * other.group6()[3])
                    - (self.group5()[1] * other.group1()[2])
                    + (self.group7()[0] * other.group9()[3])
                    - (self.group7()[1] * other.group3()[2])
                    + (self.group7()[2] * other.group3()[1])
                    - (self.group8()[0] * other[e45])
                    - (other.group1()[3] * self.group3()[0])
                    + (other.group3()[0] * self.group1()[3])
                    + (other.group9()[2] * self.group6()[1])),
                (-(other.group0()[1] * self.group9()[1]) + (other.group4()[0] * self.group8()[2]) - (other.group4()[1] * self[e1]) - (other.group4()[2] * self.group8()[0])
                    + (other.group7()[0] * self.group3()[2])
                    - (other.group7()[1] * self.group9()[3])
                    - (other.group8()[0] * self.group4()[2])
                    + (other.group8()[2] * self.group4()[0])
                    + (self.group4()[1] * other[e1])
                    + (self.group5()[1] * other.group6()[3])
                    - (self.group5()[2] * other.group1()[0])
                    + (self.group7()[0] * other.group3()[2])
                    + (self.group7()[1] * other.group9()[3])
                    - (self.group7()[2] * other.group3()[0])
                    - (self.group8()[1] * other[e45])
                    - (other.group1()[3] * self.group3()[1])
                    + (other.group3()[1] * self.group1()[3])
                    + (other.group9()[0] * self.group6()[2])),
                (-(other.group0()[1] * self.group9()[2]) - (other.group4()[0] * self.group8()[1]) + (other.group4()[1] * self.group8()[0]) - (other.group4()[2] * self[e1])
                    + (other.group7()[1] * self.group3()[0])
                    - (other.group7()[2] * self.group9()[3])
                    + (other.group8()[0] * self.group4()[1])
                    - (other.group8()[1] * self.group4()[0])
                    + (self.group4()[2] * other[e1])
                    - (self.group5()[0] * other.group1()[1])
                    + (self.group5()[2] * other.group6()[3])
                    - (self.group7()[0] * other.group3()[1])
                    + (self.group7()[1] * other.group3()[0])
                    + (self.group7()[2] * other.group9()[3])
                    - (self.group8()[2] * other[e45])
                    - (other.group1()[3] * self.group3()[2])
                    + (other.group3()[2] * self.group1()[3])
                    + (other.group9()[1] * self.group6()[0])),
                ((self.group0()[1] * other[e45])
                    - (other.group4()[1] * self.group1()[1])
                    - (other.group4()[2] * self.group1()[2])
                    - (other.group4()[2] * self.group6()[2])
                    - (other.group5()[0] * self.group7()[0])
                    - (other.group5()[1] * self.group7()[1])
                    - (other.group5()[2] * self.group7()[2])
                    - (other.group7()[0] * self.group5()[0])
                    - (other.group7()[1] * self.group5()[1])
                    + (other.group7()[1] * self.group9()[1])
                    - (other.group7()[2] * self.group5()[2])
                    + (other.group7()[2] * self.group9()[2])
                    + (self.group4()[1] * other.group1()[1])
                    + (self.group4()[2] * other.group1()[2])
                    - (self.group4()[2] * other.group6()[2])
                    - (self.group7()[1] * other.group9()[1])
                    - (self.group7()[2] * other.group9()[2])
                    - (other.group6()[3] * self[e45])),
            ]) + (Simd32x4::from(other.group0()[0]) * self.group1())
                + (Simd32x4::from(self.group0()[0]) * other.group1())
                + (Simd32x4::from(self.group6()[3]) * Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other[e45]]))
                + (Simd32x4::from(self[e45]) * Simd32x4::from([other.group8()[0], other.group8()[1], other.group8()[2], other.group0()[1]]))
                - (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group7()[0]]) * swizzle!(other.group9(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group5()[1], other.group5()[2], other.group5()[0], other.group3()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group4()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group7()[1], other.group7()[2], other.group7()[0], other.group1()[3]]) * swizzle!(self.group3(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group4()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group4()[0]]) * swizzle!(self.group6(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group7()[0]]) * swizzle!(self.group9(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group9()[1], other.group9()[2], other.group9()[0], other.group4()[1]]) * swizzle!(self.group6(), 2, 0, 1, 1))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group9()[1], self.group4()[0]]) * swizzle!(other.group6(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group9()[2], self.group9()[0], self.group3()[3], self.group4()[1]]) * swizzle!(other.group6(), 1, 2, 2, 1))),
            // e5
            ((other.group0()[0] * self[e1]) + (other.group0()[1] * self.group9()[3]) + (self.group0()[0] * other[e1]) + (self.group0()[1] * other.group9()[3])
                - (other.group5()[0] * self.group8()[0])
                - (other.group5()[1] * self.group8()[1])
                - (other.group5()[2] * self.group8()[2])
                - (other.group8()[0] * self.group5()[0])
                - (other.group8()[0] * self.group9()[0])
                - (other.group8()[1] * self.group5()[1])
                - (other.group8()[1] * self.group9()[1])
                - (other.group8()[2] * self.group5()[2])
                - (other.group8()[2] * self.group9()[2])
                + (self.group8()[0] * other.group9()[0])
                + (self.group8()[1] * other.group9()[1])
                + (self.group8()[2] * other.group9()[2])
                - (other.group1()[0] * self.group3()[0])
                - (other.group1()[1] * self.group3()[1])
                - (other.group1()[2] * self.group3()[2])
                + (other.group3()[0] * self.group1()[0])
                - (other.group3()[0] * self.group6()[0])
                + (other.group3()[1] * self.group1()[1])
                - (other.group3()[1] * self.group6()[1])
                + (other.group3()[2] * self.group1()[2])
                - (other.group3()[2] * self.group6()[2])
                - (other.group3()[3] * self[e1])
                - (other.group6()[0] * self.group3()[0])
                - (other.group6()[1] * self.group3()[1])
                - (other.group6()[2] * self.group3()[2])
                + (other.group6()[3] * self.group9()[3])
                - (other.group9()[3] * self.group6()[3])
                + (self.group3()[3] * other[e1])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group8()[0])
                    + (other.group5()[1] * self.group3()[2])
                    + (other.group8()[2] * self.group6()[1])
                    + (self.group5()[0] * other.group9()[3])
                    - (self.group5()[1] * other.group3()[2])
                    + (self.group8()[1] * other.group1()[2])
                    + (other.group9()[2] * self.group3()[1])
                    + (other.group9()[3] * self.group9()[0])
                    + (self.group1()[0] * other[e1])),
                (-(other.group0()[1] * self.group8()[1])
                    + (other.group5()[2] * self.group3()[0])
                    + (other.group8()[1] * self.group6()[3])
                    + (self.group5()[1] * other.group9()[3])
                    - (self.group5()[2] * other.group3()[0])
                    + (self.group8()[2] * other.group1()[0])
                    + (other.group9()[0] * self.group3()[2])
                    + (other.group9()[3] * self.group9()[1])
                    + (self.group1()[1] * other[e1])),
                (-(other.group0()[1] * self.group8()[2]) + (other.group5()[0] * self.group3()[1]) + (other.group8()[2] * self.group6()[3])
                    - (self.group5()[0] * other.group3()[1])
                    + (self.group5()[2] * other.group9()[3])
                    + (self.group8()[0] * other.group1()[1])
                    + (other.group9()[1] * self.group3()[0])
                    + (other.group9()[3] * self.group9()[2])
                    + (self.group1()[2] * other[e1])),
                (-(other.group4()[2] * self.group3()[2]) - (other.group5()[1] * self.group9()[1]) - (other.group5()[2] * self.group9()[2])
                    + (other.group7()[0] * self.group8()[0])
                    + (other.group7()[1] * self.group8()[1])
                    + (other.group7()[2] * self.group8()[2])
                    - (self.group5()[2] * other.group9()[2])
                    - (other.group6()[2] * self.group1()[2])
                    - (other.group9()[3] * self[e45])),
            ]) + (Simd32x4::from(other.group0()[0]) * self.group3())
                + (Simd32x4::from(self.group0()[0]) * other.group3())
                - (Simd32x4::from(other.group8()[0]) * Simd32x4::from([self.group0()[1], self.group1()[2], self.group6()[1], self.group7()[0]]))
                - (Simd32x4::from(other.group8()[1]) * Simd32x4::from([self.group6()[2], self.group0()[1], self.group1()[0], self.group7()[1]]))
                - (Simd32x4::from(other.group8()[2]) * Simd32x4::from([self.group1()[1], self.group6()[0], self.group0()[1], self.group7()[2]]))
                + (Simd32x4::from(self.group9()[3]) * Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other[e45]]))
                - (Simd32x4::from(self[e1]) * Simd32x4::from([other.group6()[0], other.group6()[1], other.group6()[2], other.group1()[3]]))
                - (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group4()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group8()[0], other.group8()[0], other.group8()[1], other.group0()[1]]) * swizzle!(self.group6(), 3, 2, 0, 3))
                + (Simd32x4::from([other.group8()[1], other.group8()[2], other.group8()[0], other[e1]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group4()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group8()[0], self.group8()[0], self.group8()[1], self.group1()[0]]) * swizzle!(other.group6(), 3, 2, 0, 0))
                + (Simd32x4::from([self.group8()[1], self.group8()[2], self.group8()[0], self.group0()[1]]) * swizzle!(other.group6(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group8()[2], self.group8()[0], self.group8()[1], self.group6()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group8()[2], self.group8()[1], self.group8()[2], self.group1()[1]]) * swizzle!(other.group6(), 1, 3, 3, 1))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group5()[0]]) * swizzle!(self.group9(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group4()[1]]) * swizzle!(self.group3(), 0, 1, 2, 1))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group9()[3], self.group5()[1]]) * swizzle!(other.group9(), 1, 2, 2, 1))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group9()[1], self.group4()[1]]) * swizzle!(other.group3(), 0, 1, 0, 1))
                + (Simd32x4::from([self.group9()[2], self.group9()[0], self.group3()[3], self.group4()[2]]) * swizzle!(other.group3(), 1, 2, 2, 2))
                - (Simd32x4::from([self.group9()[3], self.group9()[3], self.group3()[1], self.group5()[0]]) * swizzle!(other.group9(), 0, 1, 0, 0))
                - (Simd32x4::from([other[e1], other[e1], other[e1], other.group1()[2]]) * swizzle!(self.group6(), 0, 1, 2, 2))
                - (Simd32x4::from([self[e1], self[e1], self[e1], self.group6()[1]]) * swizzle!(other.group1(), 0, 1, 2, 1))),
            // e41, e42, e43
            ((Simd32x3::from(other.group0()[0]) * self.group4()) - (Simd32x3::from(other.group0()[1]) * self.group7()) + (Simd32x3::from(self.group0()[0]) * other.group4())
                - (Simd32x3::from(self.group0()[1]) * other.group7())
                - (Simd32x3::from(other.group4()[0]) * Simd32x3::from([self.group3()[3], self.group5()[2], self.group9()[1]]))
                - (Simd32x3::from(other.group4()[1]) * Simd32x3::from([self.group9()[2], self.group3()[3], self.group5()[0]]))
                - (Simd32x3::from(other.group4()[2]) * Simd32x3::from([self.group5()[1], self.group9()[0], self.group3()[3]]))
                + (Simd32x3::from(self.group7()[0]) * Simd32x3::from([other.group6()[3], other.group1()[2], other.group6()[1]]))
                + (Simd32x3::from(self.group7()[1]) * Simd32x3::from([other.group6()[2], other.group6()[3], other.group1()[0]]))
                + (Simd32x3::from(self.group7()[2]) * Simd32x3::from([other.group1()[1], other.group6()[0], other.group6()[3]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                - (Simd32x3::from(other[e45]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(other[e45]) * self.group5())
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                + (Simd32x3::from([self.group4()[2], self.group4()[0], self[e45]]) * swizzle!(other.group5(), 1, 2, 2))
                + (Simd32x3::from([self.group5()[2], self.group9()[2], self.group5()[1]]) * swizzle!(other.group4(), 1, 0, 0))
                - (Simd32x3::from([other.group1()[2], other.group6()[2], other.group1()[1]]) * swizzle!(self.group7(), 1, 0, 0))
                + (Simd32x3::from([other.group3()[3], other.group9()[2], other.group9()[0]]) * swizzle!(self.group4(), 0, 0, 1))
                - (Simd32x3::from([other.group6()[1], other.group1()[0], other.group6()[0]]) * swizzle!(self.group7(), 2, 2, 1))
                + (Simd32x3::from([other.group9()[1], other.group3()[3], other.group3()[3]]) * swizzle!(self.group4(), 2, 1, 2))
                - (Simd32x3::from([other.group9()[2], other.group9()[0], other.group9()[1]]) * swizzle!(self.group4(), 1, 2, 0))
                + (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group7(), 2, 0, 1))
                - (Simd32x3::from([self.group1()[2], self.group1()[0], self.group6()[1]]) * swizzle!(other.group7(), 1, 2, 0))
                + (Simd32x3::from([self.group6()[1], self.group6()[2], self.group6()[0]]) * swizzle!(other.group7(), 2, 0, 1))
                - (Simd32x3::from([self.group6()[2], self.group6()[0], self.group6()[3]]) * swizzle!(other.group7(), 1, 2, 2))
                - (Simd32x3::from([self.group6()[3], self.group6()[3], self.group1()[1]]) * swizzle!(other.group7(), 0, 1, 0))
                + (Simd32x3::from([self.group9()[1], self.group5()[0], self.group9()[0]]) * swizzle!(other.group4(), 2, 2, 1))
                + (Simd32x3::from([self[e45], self[e45], self.group4()[1]]) * swizzle!(other.group5(), 0, 1, 0))
                - (swizzle!(other.group5(), 2, 0, 1) * swizzle!(self.group4(), 1, 2, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                (-(other.group1()[1] * self.group1()[2]) + (other.group1()[2] * self.group1()[1]) - (other.group6()[1] * self.group6()[2])
                    + (other.group6()[2] * self.group6()[1])
                    + (other.group9()[1] * self.group9()[2])
                    - (other.group9()[2] * self.group9()[1])),
                ((other.group1()[0] * self.group1()[2]) - (other.group1()[2] * self.group1()[0]) + (other.group6()[0] * self.group6()[2])
                    - (other.group6()[2] * self.group6()[0])
                    - (other.group9()[0] * self.group9()[2])
                    + (other.group9()[2] * self.group9()[0])),
                (-(other.group1()[0] * self.group1()[1]) + (other.group1()[1] * self.group1()[0]) - (other.group6()[0] * self.group6()[1])
                    + (other.group6()[1] * self.group6()[0])
                    + (other.group9()[0] * self.group9()[1])
                    - (other.group9()[1] * self.group9()[0])),
            ]) + (Simd32x3::from(other.group0()[0]) * self.group5())
                - (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                + (Simd32x3::from(self.group0()[0]) * other.group5())
                - (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                - (Simd32x3::from(other.group1()[3]) * self.group8())
                + (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                - (Simd32x3::from(other.group6()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                - (Simd32x3::from(self.group6()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(other[e1]) * self.group7())
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                - (Simd32x3::from([self.group7()[2], self.group7()[0], self.group1()[3]]) * swizzle!(other.group8(), 1, 2, 2))
                - (Simd32x3::from([self.group8()[2], self.group8()[0], self[e1]]) * swizzle!(other.group7(), 1, 2, 2))
                + (Simd32x3::from([other.group3()[1], other.group9()[3], other.group9()[3]]) * swizzle!(self.group4(), 2, 1, 2))
                - (Simd32x3::from([other.group3()[2], other.group3()[0], other.group3()[1]]) * swizzle!(self.group4(), 1, 2, 0))
                + (Simd32x3::from([other.group9()[3], other.group3()[2], other.group3()[0]]) * swizzle!(self.group4(), 0, 0, 1))
                - (Simd32x3::from([self.group1()[3], self.group1()[3], self.group7()[1]]) * swizzle!(other.group8(), 0, 1, 0))
                - (Simd32x3::from([self.group3()[1], self.group3()[2], self.group3()[0]]) * swizzle!(other.group4(), 2, 0, 1))
                + (Simd32x3::from([self.group3()[2], self.group3()[0], self.group9()[3]]) * swizzle!(other.group4(), 1, 2, 2))
                + (Simd32x3::from([self.group9()[3], self.group9()[3], self.group3()[1]]) * swizzle!(other.group4(), 0, 1, 0))
                - (Simd32x3::from([self[e1], self[e1], self.group8()[1]]) * swizzle!(other.group7(), 0, 1, 0))
                + (swizzle!(other.group5(), 1, 2, 0) * swizzle!(self.group5(), 2, 0, 1))
                - (swizzle!(other.group5(), 2, 0, 1) * swizzle!(self.group5(), 1, 2, 0))
                + (swizzle!(other.group7(), 2, 0, 1) * swizzle!(self.group8(), 1, 2, 0))
                + (swizzle!(other.group8(), 2, 0, 1) * swizzle!(self.group7(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[1] * self.group5()[0]) + (self.group0()[1] * other.group5()[0]) + (other.group4()[0] * self[e1]) + (other.group4()[1] * self.group8()[2])
                    - (other.group4()[2] * self.group8()[1])
                    - (other.group5()[2] * self.group6()[1])
                    + (other.group8()[1] * self.group4()[2])
                    - (other.group8()[2] * self.group4()[1])
                    + (self.group4()[0] * other[e1])
                    - (self.group5()[1] * other.group6()[2])
                    + (self.group7()[2] * other.group3()[1])
                    + (self.group8()[0] * other[e45])
                    - (other.group9()[0] * self.group6()[3])),
                ((other.group0()[1] * self.group5()[1]) + (self.group0()[1] * other.group5()[1]) - (other.group4()[0] * self.group8()[2])
                    + (other.group4()[1] * self[e1])
                    + (other.group4()[2] * self.group8()[0])
                    - (other.group5()[0] * self.group6()[2])
                    - (other.group8()[0] * self.group4()[2])
                    + (other.group8()[2] * self.group4()[0])
                    + (self.group4()[1] * other[e1])
                    - (self.group5()[2] * other.group6()[0])
                    + (self.group7()[0] * other.group3()[2])
                    + (self.group8()[1] * other[e45])
                    - (other.group9()[1] * self.group6()[3])),
                ((other.group0()[1] * self.group5()[2]) + (self.group0()[1] * other.group5()[2]) + (other.group4()[0] * self.group8()[1]) - (other.group4()[1] * self.group8()[0])
                    + (other.group4()[2] * self[e1])
                    - (other.group5()[1] * self.group6()[0])
                    + (other.group8()[0] * self.group4()[1])
                    - (other.group8()[1] * self.group4()[0])
                    + (self.group4()[2] * other[e1])
                    - (self.group5()[0] * other.group6()[1])
                    + (self.group7()[1] * other.group3()[0])
                    + (self.group8()[2] * other[e45])
                    - (other.group9()[2] * self.group6()[3])),
                ((other.group4()[0] * self.group8()[0]) + (other.group4()[1] * self.group8()[1]) + (other.group4()[2] * self.group8()[2]) - (other.group5()[2] * self.group1()[2])
                    + (other.group7()[2] * self.group3()[2])
                    - (other.group8()[0] * self.group4()[0])
                    - (other.group8()[1] * self.group4()[1])
                    - (other.group8()[2] * self.group4()[2])
                    - (self.group5()[2] * other.group1()[2])
                    - (self.group7()[0] * other.group3()[0])
                    - (self.group7()[1] * other.group3()[1])
                    - (self.group7()[2] * other.group3()[2])
                    - (other[e45] * self[e1])),
            ]) + (Simd32x4::from(other.group0()[0]) * self.group6())
                + (Simd32x4::from(self.group0()[0]) * other.group6())
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group9()[3]]))
                + (Simd32x4::from(self[e45]) * Simd32x4::from([other.group8()[0], other.group8()[1], other.group8()[2], other[e1]]))
                + (Simd32x4::from([other.group5()[1], other.group5()[2], other.group5()[0], other.group9()[0]]) * swizzle!(self.group6(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group6()[0]]) * swizzle!(self.group9(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group7()[1], other.group7()[2], other.group7()[0], other.group7()[0]]) * swizzle!(self.group3(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group7()[2], other.group7()[0], other.group7()[1], other.group0()[1]]) * swizzle!(self.group3(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group9()[1]]) * swizzle!(other.group6(), 1, 2, 0, 1))
                + (Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group6()[1]]) * swizzle!(other.group9(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[0], self.group0()[1]]) * swizzle!(other.group3(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group6()[2]]) * swizzle!(self.group9(), 1, 2, 0, 2))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group7()[1]]) * swizzle!(self.group3(), 0, 1, 2, 1))
                - (Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group5()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))
                - (Simd32x4::from([other.group6()[3], other.group6()[3], other.group6()[3], other.group1()[3]]) * self.group9())
                - (Simd32x4::from([other.group9()[1], other.group9()[2], other.group9()[0], other.group5()[1]]) * swizzle!(self.group1(), 2, 0, 1, 1))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group6()[2]]) * swizzle!(other.group9(), 2, 0, 1, 2))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group9()[1], self.group5()[0]]) * swizzle!(other.group1(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group9()[2], self.group9()[0], self.group3()[3], self.group5()[1]]) * swizzle!(other.group1(), 1, 2, 2, 1))),
            // e423, e431, e412
            ((Simd32x3::from(other.group0()[0]) * self.group7())
                + (Simd32x3::from(other.group0()[1]) * self.group4())
                + (Simd32x3::from(self.group0()[0]) * other.group7())
                + (Simd32x3::from(self.group0()[1]) * other.group4())
                - (Simd32x3::from(other.group7()[0]) * Simd32x3::from([self.group3()[3], self.group5()[2], self.group9()[1]]))
                - (Simd32x3::from(other.group7()[1]) * Simd32x3::from([self.group9()[2], self.group3()[3], self.group5()[0]]))
                - (Simd32x3::from(other.group7()[2]) * Simd32x3::from([self.group5()[1], self.group9()[0], self.group3()[3]]))
                - (Simd32x3::from(self.group4()[0]) * Simd32x3::from([other.group6()[3], other.group1()[2], other.group6()[1]]))
                - (Simd32x3::from(self.group4()[1]) * Simd32x3::from([other.group6()[2], other.group6()[3], other.group1()[0]]))
                - (Simd32x3::from(self.group4()[2]) * Simd32x3::from([other.group1()[1], other.group6()[0], other.group6()[3]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(other.group1()[3]) * self.group5())
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                - (Simd32x3::from(self[e45]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from([self.group5()[2], self.group9()[2], self.group5()[1]]) * swizzle!(other.group7(), 1, 0, 0))
                + (Simd32x3::from([self.group7()[2], self.group7()[0], self.group1()[3]]) * swizzle!(other.group5(), 1, 2, 2))
                + (Simd32x3::from([other.group1()[2], other.group6()[2], other.group1()[1]]) * swizzle!(self.group4(), 1, 0, 0))
                + (Simd32x3::from([other.group3()[3], other.group9()[2], other.group9()[0]]) * swizzle!(self.group7(), 0, 0, 1))
                + (Simd32x3::from([other.group6()[1], other.group1()[0], other.group6()[0]]) * swizzle!(self.group4(), 2, 2, 1))
                + (Simd32x3::from([other.group9()[1], other.group3()[3], other.group3()[3]]) * swizzle!(self.group7(), 2, 1, 2))
                - (Simd32x3::from([other.group9()[2], other.group9()[0], other.group9()[1]]) * swizzle!(self.group7(), 1, 2, 0))
                - (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group4(), 2, 0, 1))
                + (Simd32x3::from([self.group1()[2], self.group1()[0], self.group6()[1]]) * swizzle!(other.group4(), 1, 2, 0))
                + (Simd32x3::from([self.group1()[3], self.group1()[3], self.group7()[1]]) * swizzle!(other.group5(), 0, 1, 0))
                - (Simd32x3::from([self.group6()[1], self.group6()[2], self.group6()[0]]) * swizzle!(other.group4(), 2, 0, 1))
                + (Simd32x3::from([self.group6()[2], self.group6()[0], self.group6()[3]]) * swizzle!(other.group4(), 1, 2, 2))
                + (Simd32x3::from([self.group6()[3], self.group6()[3], self.group1()[1]]) * swizzle!(other.group4(), 0, 1, 0))
                + (Simd32x3::from([self.group9()[1], self.group5()[0], self.group9()[0]]) * swizzle!(other.group7(), 2, 2, 1))
                - (swizzle!(other.group5(), 2, 0, 1) * swizzle!(self.group7(), 1, 2, 0))),
            // e235, e315, e125
            (Simd32x3::from([
                ((other.group1()[1] * self.group3()[2]) - (other.group1()[2] * self.group3()[1])
                    + (other.group3()[1] * self.group6()[2])
                    + (other.group3()[2] * self.group1()[1])
                    + (other.group6()[1] * self.group3()[2])
                    - (other.group6()[2] * self.group3()[1])),
                (-(other.group1()[0] * self.group3()[2])
                    + (other.group1()[2] * self.group3()[0])
                    + (other.group3()[0] * self.group1()[2])
                    + (other.group3()[2] * self.group6()[0])
                    - (other.group6()[0] * self.group3()[2])
                    + (other.group6()[2] * self.group3()[0])),
                ((other.group1()[0] * self.group3()[1]) - (other.group1()[1] * self.group3()[0])
                    + (other.group3()[0] * self.group6()[1])
                    + (other.group3()[1] * self.group1()[0])
                    + (other.group6()[0] * self.group3()[1])
                    - (other.group6()[1] * self.group3()[0])),
            ]) + (Simd32x3::from(other.group0()[0]) * self.group8())
                + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(self.group0()[0]) * other.group8())
                + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                - (Simd32x3::from(other.group3()[0]) * Simd32x3::from([self.group6()[3], self.group6()[2], self.group1()[1]]))
                - (Simd32x3::from(other.group3()[1]) * Simd32x3::from([self.group1()[2], self.group6()[3], self.group6()[0]]))
                - (Simd32x3::from(other.group3()[2]) * Simd32x3::from([self.group6()[1], self.group1()[0], self.group6()[3]]))
                + (Simd32x3::from(other.group6()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                - (Simd32x3::from(other.group9()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group9()[3]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                + (Simd32x3::from(self.group9()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group9()[3]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(other[e1]) * self.group5())
                - (Simd32x3::from(self[e1]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                + (Simd32x3::from([self.group5()[2], self.group5()[0], self.group9()[1]]) * swizzle!(other.group8(), 1, 2, 0))
                + (Simd32x3::from([self.group8()[2], self.group8()[0], self[e1]]) * swizzle!(other.group5(), 1, 2, 2))
                - (Simd32x3::from([other.group3()[3], other.group9()[2], other.group9()[0]]) * swizzle!(self.group8(), 0, 0, 1))
                - (Simd32x3::from([other.group9()[1], other.group3()[3], other.group3()[3]]) * swizzle!(self.group8(), 2, 1, 2))
                + (Simd32x3::from([other.group9()[2], other.group9()[0], other.group9()[1]]) * swizzle!(self.group8(), 1, 2, 0))
                + (Simd32x3::from([self.group3()[3], self.group3()[3], self.group5()[1]]) * swizzle!(other.group8(), 0, 1, 0))
                - (Simd32x3::from([self.group9()[1], self.group9()[2], self.group9()[0]]) * swizzle!(other.group8(), 2, 0, 1))
                + (Simd32x3::from([self.group9()[2], self.group9()[0], self.group3()[3]]) * swizzle!(other.group8(), 1, 2, 2))
                + (Simd32x3::from([self[e1], self[e1], self.group8()[1]]) * swizzle!(other.group5(), 0, 1, 0))
                - (swizzle!(other.group5(), 2, 0, 1) * swizzle!(self.group8(), 1, 2, 0))
                - (swizzle!(other.group8(), 2, 0, 1) * swizzle!(self.group5(), 1, 2, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[0]) + (other.group4()[0] * self.group9()[3]) + (other.group5()[1] * self.group9()[2]) - (other.group7()[1] * self.group8()[2])
                    + (other.group7()[2] * self.group8()[1])
                    + (other.group8()[0] * self.group1()[3])
                    + (other.group8()[1] * self.group7()[2])
                    - (other.group8()[2] * self.group7()[1])
                    - (self.group4()[0] * other.group9()[3])
                    + (self.group4()[1] * other.group3()[2])
                    + (self.group5()[0] * other.group3()[3])
                    - (self.group5()[1] * other.group9()[2])
                    - (self.group8()[0] * other.group1()[3])
                    - (other.group1()[2] * self.group6()[1])),
                ((other.group0()[1] * self.group1()[1]) + (other.group4()[1] * self.group9()[3]) + (other.group5()[2] * self.group9()[0]) + (other.group7()[0] * self.group8()[2])
                    - (other.group7()[2] * self.group8()[0])
                    - (other.group8()[0] * self.group7()[2])
                    + (other.group8()[1] * self.group1()[3])
                    + (other.group8()[2] * self.group7()[0])
                    - (self.group4()[1] * other.group9()[3])
                    + (self.group4()[2] * other.group3()[0])
                    + (self.group5()[1] * other.group3()[3])
                    - (self.group5()[2] * other.group9()[0])
                    - (self.group8()[1] * other.group1()[3])
                    - (other.group1()[0] * self.group6()[2])),
                ((other.group0()[1] * self.group1()[2]) + (other.group4()[2] * self.group9()[3]) + (other.group5()[0] * self.group9()[1]) - (other.group7()[0] * self.group8()[1])
                    + (other.group7()[1] * self.group8()[0])
                    + (other.group8()[0] * self.group7()[1])
                    - (other.group8()[1] * self.group7()[0])
                    + (other.group8()[2] * self.group1()[3])
                    + (self.group4()[0] * other.group3()[1])
                    - (self.group4()[2] * other.group9()[3])
                    - (self.group5()[0] * other.group9()[1])
                    + (self.group5()[2] * other.group3()[3])
                    - (self.group8()[2] * other.group1()[3])
                    - (other.group1()[1] * self.group6()[0])),
                (-(self.group0()[1] * other[e1])
                    - (other.group5()[1] * self.group3()[1])
                    - (other.group5()[2] * self.group3()[2])
                    - (other.group8()[1] * self.group1()[1])
                    - (other.group8()[2] * self.group1()[2])
                    + (other.group8()[2] * self.group6()[2])
                    - (self.group5()[2] * other.group3()[2])
                    + (self.group8()[1] * other.group1()[1])
                    + (self.group8()[2] * other.group1()[2])
                    + (self.group8()[2] * other.group6()[2])
                    - (other.group3()[1] * self.group9()[1])
                    - (other.group3()[2] * self.group9()[2])
                    - (other.group3()[3] * self.group9()[3])
                    - (other.group6()[3] * self[e1])),
            ]) + (Simd32x4::from(other.group0()[0]) * self.group9())
                + (Simd32x4::from(self.group0()[0]) * other.group9())
                + (Simd32x4::from(other[e1]) * Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group6()[3]]))
                - (Simd32x4::from(self[e1]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group0()[1]]))
                + (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group8()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group4()[1], other.group4()[2], other.group4()[0], other.group9()[0]]) * swizzle!(self.group3(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group4()[2], other.group4()[0], other.group4()[1], other.group5()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group9()[1]]) * swizzle!(self.group3(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group3()[0]]) * swizzle!(self.group9(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group4()[2], self.group4()[0], self.group4()[1], self.group5()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group3()[2]]) * swizzle!(other.group9(), 1, 2, 0, 2))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group8()[0]]) * swizzle!(self.group6(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group8()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group6()[3], other.group6()[3], other.group6()[3], other.group8()[1]]) * swizzle!(self.group6(), 0, 1, 2, 1))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group6()[3], self.group8()[1]]) * swizzle!(other.group6(), 1, 2, 2, 1))
                + (Simd32x4::from([self.group6()[3], self.group6()[3], self.group1()[1], self.group8()[0]]) * swizzle!(other.group6(), 0, 1, 0, 0))
                + (Simd32x4::from([other[e45], other[e45], other[e45], other.group9()[3]]) * self.group3())
                - (Simd32x4::from([self[e45], self[e45], self[e45], self.group5()[1]]) * swizzle!(other.group3(), 0, 1, 2, 1))),
            // e1234
            ((other.group0()[0] * self[e45]) - (other.group0()[1] * self.group1()[3]) + (self.group0()[0] * other[e45])
                - (self.group0()[1] * other.group1()[3])
                - (other.group4()[0] * self.group5()[0])
                + (other.group4()[0] * self.group9()[0])
                - (other.group4()[1] * self.group5()[1])
                + (other.group4()[1] * self.group9()[1])
                - (other.group4()[2] * self.group5()[2])
                + (other.group4()[2] * self.group9()[2])
                - (other.group5()[0] * self.group4()[0])
                - (other.group5()[1] * self.group4()[1])
                - (other.group5()[2] * self.group4()[2])
                + (other.group7()[0] * self.group1()[0])
                + (other.group7()[0] * self.group6()[0])
                + (other.group7()[1] * self.group1()[1])
                + (other.group7()[1] * self.group6()[1])
                + (other.group7()[2] * self.group1()[2])
                + (other.group7()[2] * self.group6()[2])
                - (self.group4()[0] * other.group9()[0])
                - (self.group4()[1] * other.group9()[1])
                - (self.group4()[2] * other.group9()[2])
                - (self.group7()[0] * other.group1()[0])
                + (self.group7()[0] * other.group6()[0])
                - (self.group7()[1] * other.group1()[1])
                + (self.group7()[1] * other.group6()[1])
                - (self.group7()[2] * other.group1()[2])
                + (self.group7()[2] * other.group6()[2])
                - (other.group1()[3] * self.group6()[3])
                + (other.group3()[3] * self[e45])
                + (other.group6()[3] * self.group1()[3])
                - (self.group3()[3] * other[e45])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      354      404        0
    //    simd2       17       17        0
    //    simd3      124      133        0
    //    simd4       82       84        0
    // Totals...
    // yes simd      577      638        0
    //  no simd     1088     1173        0
    fn sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                (-(self.group9()[0] * other.group0()[0]) - (self.group9()[1] * other.group0()[1]) - (self.group9()[2] * other.group0()[2])),
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x2::from(other.group0()[3]) * Simd32x2::from([self[e45], self.group1()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group7()[0] * other.group0()[3]) + (self.group6()[1] * other.group0()[2])),
                ((self.group7()[1] * other.group0()[3]) + (self.group6()[2] * other.group0()[0])),
                ((self.group7()[2] * other.group0()[3]) + (self.group6()[0] * other.group0()[1])),
                ((self.group7()[2] * other.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group7()[0]]) * swizzle!(other.group0(), 0, 1, 2, 0))
                - (Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group7()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))),
            // e5
            ((self.group0()[1] * other.group0()[3]) + (self.group8()[0] * other.group0()[0]) + (self.group8()[1] * other.group0()[1]) + (self.group8()[2] * other.group0()[2])
                - (self.group6()[3] * other.group0()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group5()[0] * other.group0()[3]) + (self.group3()[1] * other.group0()[2]) + (self.group9()[0] * other.group0()[3])),
                ((self.group5()[1] * other.group0()[3]) + (self.group3()[2] * other.group0()[0]) + (self.group9()[1] * other.group0()[3])),
                ((self.group5()[2] * other.group0()[3]) + (self.group3()[0] * other.group0()[1]) + (self.group9()[2] * other.group0()[3])),
                (-(self.group5()[2] * other.group0()[2]) - (other.group0()[3] * self[e45])),
            ]) - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group5()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group9()[3], self.group9()[3], self.group9()[3], self.group5()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e41, e42, e43
            ((Simd32x3::from(self[e45]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group4(), 2, 0, 1))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group4(), 1, 2, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                (-(self.group9()[1] * other.group0()[2]) + (self.group9()[2] * other.group0()[1])),
                ((self.group9()[0] * other.group0()[2]) - (self.group9()[2] * other.group0()[0])),
                (-(self.group9()[0] * other.group0()[1]) + (self.group9()[1] * other.group0()[0])),
            ]) + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(other.group0()[3]) * self.group4())),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(self.group1()[2] * other.group0()[1]) - (self.group6()[3] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[2]) - (self.group6()[3] * other.group0()[1])),
                (-(self.group1()[1] * other.group0()[0]) - (self.group6()[3] * other.group0()[2])),
                ((self.group6()[1] * other.group0()[1]) + (self.group6()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group1()[3]]))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group6()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e423, e431, e412
            ((Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group7(), 2, 0, 1))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group7(), 1, 2, 0))),
            // e235, e315, e125
            (-(Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                - (Simd32x3::from(self[e1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group8(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group8(), 1, 2, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group4()[0] * other.group0()[3]) - (self.group5()[1] * other.group0()[2])),
                (-(self.group4()[1] * other.group0()[3]) - (self.group5()[2] * other.group0()[0])),
                (-(self.group4()[2] * other.group0()[3]) - (self.group5()[0] * other.group0()[1])),
                ((self.group3()[1] * other.group0()[1]) + (self.group3()[2] * other.group0()[2]) + (self.group3()[3] * other.group0()[3])),
            ]) + (Simd32x4::from(self.group0()[0]) * other.group0())
                + (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group3()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e1234
            (-(self.group4()[0] * other.group0()[0]) - (self.group4()[1] * other.group0()[1]) - (self.group4()[2] * other.group0()[2])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      350      403        0
    //    simd2       19       19        0
    //    simd3      128      136        0
    //    simd4       87       89        0
    // Totals...
    // yes simd      584      647        0
    //  no simd     1120     1205        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                (-(self.group1()[3] * other[e2]) - (other.group0()[3] * self[e1])),
                ((self.group9()[3] * other.group0()[3]) + (self[e45] * other[e2])),
            ]) + (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group1()[0], self.group9()[0]]))
                + (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group1()[1], self.group9()[1]]))
                + (Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group1()[2], self.group9()[2]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group4()[0] * other[e2]) - (self.group3()[0] * other.group0()[3])),
                ((self.group4()[1] * other[e2]) - (self.group3()[1] * other.group0()[3])),
                ((self.group4()[2] * other[e2]) - (self.group3()[2] * other.group0()[3])),
                ((self.group4()[1] * other.group0()[1]) + (self.group4()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(self.group0()[0]) * other.group0())
                - (Simd32x4::from([self.group5()[1], self.group5()[2], self.group5()[0], self.group3()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group4()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e5
            ((self.group0()[0] * other[e2]) - (self.group3()[0] * other.group0()[0]) - (self.group3()[1] * other.group0()[1]) - (self.group3()[2] * other.group0()[2])
                + (self.group3()[3] * other[e2])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                (self.group8()[1] * other.group0()[2]),
                (self.group8()[2] * other.group0()[0]),
                (self.group8()[0] * other.group0()[1]),
                ((other.group0()[3] * self[e1]) * -1.0),
            ]) + (Simd32x4::from(other[e2]) * self.group1())
                - (Simd32x4::from([self.group8()[2], self.group8()[0], self.group8()[1], self.group6()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self[e1], self[e1], self[e1], self.group6()[2]]) * swizzle!(other.group0(), 0, 1, 2, 2))
                - (Simd32x4::from([other[e2], other[e2], other[e2], other.group0()[1]]) * swizzle!(self.group6(), 0, 1, 2, 1))),
            // e41, e42, e43
            ((Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                + (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group7(), 2, 0, 1))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group7(), 1, 2, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                ((self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
                (-(self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0])),
                ((self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])),
            ]) - (Simd32x3::from(self.group6()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from(other.group0()[3]) * self.group8())
                - (Simd32x3::from(other[e2]) * self.group7())),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group3()[0] * other.group0()[3]) + (self.group9()[1] * other.group0()[2])),
                ((self.group3()[1] * other.group0()[3]) + (self.group9()[2] * other.group0()[0])),
                ((self.group3()[2] * other.group0()[3]) + (self.group9()[0] * other.group0()[1])),
                (-(self.group5()[2] * other.group0()[2]) - (self.group9()[3] * other.group0()[3])),
            ]) + (Simd32x4::from(other[e2]) * Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[2], self[e45]]))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group5()[0]]) * swizzle!(other.group0(), 0, 1, 2, 0))
                - (Simd32x4::from([self.group9()[2], self.group9()[0], self.group9()[1], self.group5()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))),
            // e423, e431, e412
            (-(Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]])) + (Simd32x3::from(other.group0()[3]) * self.group5())
                - (Simd32x3::from(self[e45]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group4(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group4(), 1, 2, 0))),
            // e235, e315, e125
            (Simd32x3::from([
                (-(self.group3()[1] * other.group0()[2]) + (self.group3()[2] * other.group0()[1])),
                ((self.group3()[0] * other.group0()[2]) - (self.group3()[2] * other.group0()[0])),
                (-(self.group3()[0] * other.group0()[1]) + (self.group3()[1] * other.group0()[0])),
            ]) + (Simd32x3::from(self.group9()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(other[e2]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(other[e2]) * self.group5())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group8()[0] * other.group0()[3]) - (self.group6()[1] * other.group0()[2])),
                (-(self.group8()[1] * other.group0()[3]) - (self.group6()[2] * other.group0()[0])),
                (-(self.group8()[2] * other.group0()[3]) - (self.group6()[0] * other.group0()[1])),
                (-(self.group0()[1] * other[e2]) + (self.group8()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other[e2]) * Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group6()[3]]))
                + (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group8()[0]]) * swizzle!(other.group0(), 0, 1, 2, 0))
                + (Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group8()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))),
            // e1234
            (-(self.group0()[1] * other.group0()[3])
                - (self.group7()[0] * other.group0()[0])
                - (self.group7()[1] * other.group0()[1])
                - (self.group7()[2] * other.group0()[2])
                - (self.group6()[3] * other.group0()[3])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      322      350        0
    //    simd2       16       17        0
    //    simd3      114      124        0
    //    simd4       74       80        0
    // Totals...
    // yes simd      526      571        0
    //  no simd      992     1076        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from(other[scalar]) * self.group0()),
            // e1, e2, e3, e4
            (Simd32x4::from(other[scalar]) * self.group1()),
            // e5
            (self[e1] * other[scalar]),
            // e15, e25, e35, e45
            (Simd32x4::from(other[scalar]) * self.group3()),
            // e41, e42, e43
            (Simd32x3::from(other[scalar]) * self.group4()),
            // e23, e31, e12
            (Simd32x3::from(other[scalar]) * self.group5()),
            // e415, e425, e435, e321
            (Simd32x4::from(other[scalar]) * self.group6()),
            // e423, e431, e412
            (Simd32x3::from(other[scalar]) * self.group7()),
            // e235, e315, e125
            (Simd32x3::from(other[scalar]) * self.group8()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other[scalar]) * self.group9()),
            // e1234
            (self[e45] * other[scalar]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      357      406        0
    //    simd2       18       18        0
    //    simd3      129      138        0
    //    simd4       85       87        0
    // Totals...
    // yes simd      589      649        0
    //  no simd     1120     1204        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                (-(self.group9()[0] * other.group0()[0]) - (self.group9()[1] * other.group0()[1]) - (self.group9()[2] * other.group0()[2])),
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x2::from(other.group0()[3]) * Simd32x2::from([self[e45], self.group1()[3]]))
                + (Simd32x2::from(other[e4315]) * Simd32x2::from([self.group9()[3], self[e1]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group7()[0] * other.group0()[3]) - (self.group8()[0] * other[e4315])),
                ((self.group7()[1] * other.group0()[3]) - (self.group8()[1] * other[e4315])),
                ((self.group7()[2] * other.group0()[3]) - (self.group8()[2] * other[e4315])),
                ((self.group0()[1] * other[e4315]) - (self.group7()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group7()[0]]) * swizzle!(other.group0(), 0, 1, 2, 0))
                - (Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group7()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other[e4315]]) * swizzle!(self.group6(), 1, 2, 0, 3))),
            // e5
            ((self.group0()[1] * other.group0()[3]) + (self.group8()[0] * other.group0()[0]) + (self.group8()[1] * other.group0()[1]) + (self.group8()[2] * other.group0()[2])
                - (self.group6()[3] * other.group0()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group5()[0] * other.group0()[3]) + (self.group3()[1] * other.group0()[2])),
                ((self.group5()[1] * other.group0()[3]) + (self.group3()[2] * other.group0()[0])),
                ((self.group5()[2] * other.group0()[3]) + (self.group3()[0] * other.group0()[1])),
                (-(self.group5()[2] * other.group0()[2]) - (other.group0()[3] * self[e45])),
            ]) - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group5()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group9()[3], self.group9()[3], self.group9()[3], self.group5()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))
                + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other[e4315]]) * self.group9())),
            // e41, e42, e43
            ((Simd32x3::from(self[e45]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from(other[e4315]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(other[e4315]) * self.group5())
                + (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group4(), 2, 0, 1))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group4(), 1, 2, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                (-(self.group9()[1] * other.group0()[2]) + (self.group9()[2] * other.group0()[1])),
                ((self.group9()[0] * other.group0()[2]) - (self.group9()[2] * other.group0()[0])),
                (-(self.group9()[0] * other.group0()[1]) + (self.group9()[1] * other.group0()[0])),
            ]) + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(other.group0()[3]) * self.group4())
                + (Simd32x3::from(other[e4315]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group8()[0] * other[e4315]) - (self.group1()[2] * other.group0()[1]) - (self.group6()[3] * other.group0()[0])),
                ((self.group8()[1] * other[e4315]) - (self.group1()[0] * other.group0()[2]) - (self.group6()[3] * other.group0()[1])),
                ((self.group8()[2] * other[e4315]) - (self.group1()[1] * other.group0()[0]) - (self.group6()[3] * other.group0()[2])),
                ((self.group6()[1] * other.group0()[1]) + (self.group6()[2] * other.group0()[2]) - (self[e1] * other[e4315])),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group1()[3]]))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group6()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e423, e431, e412
            ((Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(other[e4315]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other[e4315]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                + (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group7(), 2, 0, 1))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group7(), 1, 2, 0))),
            // e235, e315, e125
            (-(Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                - (Simd32x3::from(self[e1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group8(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group8(), 1, 2, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group4()[0] * other.group0()[3]) - (self.group5()[1] * other.group0()[2])),
                (-(self.group4()[1] * other.group0()[3]) - (self.group5()[2] * other.group0()[0])),
                (-(self.group4()[2] * other.group0()[3]) - (self.group5()[0] * other.group0()[1])),
                ((self.group3()[2] * other.group0()[2]) + (self.group3()[3] * other.group0()[3])),
            ]) + (Simd32x4::from(self.group0()[0]) * other.group0())
                + (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group3()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other[e4315], other[e4315], other[e4315], other.group0()[1]]) * swizzle!(self.group3(), 0, 1, 2, 1))),
            // e1234
            ((self.group0()[0] * other[e4315])
                - (self.group4()[0] * other.group0()[0])
                - (self.group4()[1] * other.group0()[1])
                - (self.group4()[2] * other.group0()[2])
                - (self.group3()[3] * other[e4315])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      466      524        0
    //    simd2       20       20        0
    //    simd3      162      168        0
    //    simd4      120      122        0
    // Totals...
    // yes simd      768      834        0
    //  no simd     1472     1556        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                (-(self.group0()[1] * other.group0()[3])
                    + (self.group7()[0] * other.group2()[0])
                    + (self.group7()[1] * other.group2()[1])
                    + (self.group7()[2] * other.group2()[2])
                    + (self.group8()[0] * other.group0()[0])
                    + (self.group8()[1] * other.group0()[1])
                    + (self.group8()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group2()[3])
                    + (self.group6()[0] * other.group1()[0])
                    + (self.group6()[1] * other.group1()[1])
                    + (self.group6()[2] * other.group1()[2])
                    - (other.group3()[3] * self[e1])),
                ((self.group0()[0] * other.group0()[3])
                    - (self.group4()[0] * other.group2()[0])
                    - (self.group4()[1] * other.group2()[1])
                    - (self.group4()[2] * other.group2()[2])
                    - (self.group5()[0] * other.group1()[0])
                    - (self.group5()[1] * other.group1()[1])
                    - (self.group5()[2] * other.group1()[2])
                    - (self.group3()[0] * other.group0()[0])
                    - (self.group3()[1] * other.group0()[1])
                    - (self.group3()[2] * other.group0()[2])
                    + (self.group9()[3] * other.group3()[3])
                    + (other.group2()[3] * self[e45])),
            ]) - (Simd32x2::from(other.group1()[3]) * Simd32x2::from([self.group6()[3], self.group3()[3]]))
                + (Simd32x2::from(other.group3()[0]) * Simd32x2::from([self.group1()[0], self.group9()[0]]))
                + (Simd32x2::from(other.group3()[1]) * Simd32x2::from([self.group1()[1], self.group9()[1]]))
                + (Simd32x2::from(other.group3()[2]) * Simd32x2::from([self.group1()[2], self.group9()[2]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group4()[0] * other.group2()[3]) - (self.group4()[1] * other.group2()[2]) + (self.group4()[2] * other.group2()[1]) + (self.group5()[0] * other.group1()[3])
                    - (self.group3()[0] * other.group3()[3])),
                ((self.group4()[0] * other.group2()[2]) + (self.group4()[1] * other.group2()[3]) - (self.group4()[2] * other.group2()[0]) + (self.group5()[1] * other.group1()[3])
                    - (self.group3()[1] * other.group3()[3])),
                (-(self.group4()[0] * other.group2()[1])
                    + (self.group4()[1] * other.group2()[0])
                    + (self.group4()[2] * other.group2()[3])
                    + (self.group5()[2] * other.group1()[3])
                    - (self.group3()[2] * other.group3()[3])),
                ((self.group4()[1] * other.group3()[1]) - (self.group4()[2] * other.group1()[2]) + (self.group4()[2] * other.group3()[2]) + (self.group9()[2] * other.group0()[2])
                    - (other.group1()[3] * self[e45])),
            ]) + (Simd32x4::from(self.group0()[0]) * other.group3())
                + (Simd32x4::from(self[e45]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[3]]))
                - (Simd32x4::from([self.group5()[1], self.group5()[2], self.group5()[0], self.group3()[3]]) * swizzle!(other.group3(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group4()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group9()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group5()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group4()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))
                - (Simd32x4::from([self.group9()[0], self.group9()[1], self.group9()[2], self.group5()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group9()[2], self.group9()[0], self.group9()[1], self.group4()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))
                - (Simd32x4::from([self.group9()[3], self.group9()[3], self.group9()[3], self.group5()[2]]) * swizzle!(other.group0(), 0, 1, 2, 2))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[1]]) * swizzle!(self.group9(), 1, 2, 0, 1))),
            // e5
            ((self.group0()[0] * other.group2()[3])
                - (self.group5()[0] * other.group2()[0])
                - (self.group5()[1] * other.group2()[1])
                - (self.group5()[2] * other.group2()[2])
                - (self.group3()[0] * other.group1()[0])
                - (self.group3()[0] * other.group3()[0])
                - (self.group3()[1] * other.group1()[1])
                - (self.group3()[1] * other.group3()[1])
                - (self.group3()[2] * other.group1()[2])
                - (self.group3()[2] * other.group3()[2])
                + (self.group3()[3] * other.group2()[3])
                - (self.group9()[0] * other.group2()[0])
                - (self.group9()[1] * other.group2()[1])
                - (self.group9()[2] * other.group2()[2])
                + (self.group9()[3] * other.group0()[3])
                + (self.group9()[3] * other.group1()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                (-(self.group8()[0] * other.group0()[3])
                    + (self.group8()[1] * other.group3()[2])
                    + (self.group1()[2] * other.group2()[1])
                    + (self.group6()[3] * other.group2()[0])),
                (-(self.group8()[1] * other.group0()[3])
                    + (self.group8()[2] * other.group3()[0])
                    + (self.group1()[1] * other.group2()[3])
                    + (self.group6()[3] * other.group2()[1])),
                ((self.group8()[0] * other.group3()[1]) - (self.group8()[2] * other.group0()[3]) + (self.group1()[2] * other.group2()[3]) + (self.group6()[3] * other.group2()[2])),
                ((self.group8()[0] * other.group0()[0]) + (self.group8()[1] * other.group0()[1]) + (self.group8()[2] * other.group0()[2]) - (other.group3()[3] * self[e1])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group7()[0]]) * swizzle!(other.group2(), 0, 1, 2, 0))
                - (Simd32x4::from([self.group8()[0], self.group8()[0], self.group8()[1], self.group1()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([self.group8()[1], self.group8()[2], self.group8()[0], self.group0()[1]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group8()[2], self.group8()[0], self.group8()[1], self.group6()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group8()[2], self.group8()[1], self.group8()[2], self.group1()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group7()[1]]) * swizzle!(other.group2(), 2, 0, 1, 1))
                - (Simd32x4::from([self.group6()[0], self.group6()[0], self.group6()[1], self.group7()[2]]) * swizzle!(other.group2(), 3, 2, 0, 2))
                - (Simd32x4::from([other.group2()[1], other.group2()[3], other.group2()[3], other.group3()[1]]) * swizzle!(self.group6(), 2, 1, 2, 1))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[3]]) * swizzle!(self.group6(), 1, 2, 0, 3))
                - (Simd32x4::from([self[e1], self[e1], self[e1], self.group1()[2]]) * swizzle!(other.group1(), 0, 1, 2, 2))
                - (Simd32x4::from([self[e1], self[e1], self[e1], self.group6()[2]]) * swizzle!(other.group3(), 0, 1, 2, 2))
                + (swizzle!(self.group1(), 0, 0, 1, 3) * swizzle!(other.group2(), 3, 2, 0, 3))),
            // e41, e42, e43
            (Simd32x3::from([
                ((self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1]) + (self.group6()[1] * other.group0()[2]) - (self.group6()[2] * other.group0()[1])),
                (-(self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0]) - (self.group6()[0] * other.group0()[2])
                    + (self.group6()[2] * other.group0()[0])),
                ((self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0]) + (self.group6()[0] * other.group0()[1]) - (self.group6()[1] * other.group0()[0])),
            ]) - (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from(self.group7()[0]) * Simd32x3::from([other.group0()[3], other.group1()[2], other.group3()[1]]))
                + (Simd32x3::from(self.group7()[0]) * Simd32x3::from([other.group1()[3], other.group3()[2], other.group1()[1]]))
                + (Simd32x3::from(self.group7()[1]) * Simd32x3::from([other.group1()[2], other.group1()[3], other.group3()[0]]))
                - (Simd32x3::from(self.group7()[1]) * Simd32x3::from([other.group3()[2], other.group0()[3], other.group1()[0]]))
                - (Simd32x3::from(self.group7()[2]) * Simd32x3::from([other.group1()[1], other.group3()[0], other.group0()[3]]))
                + (Simd32x3::from(self.group7()[2]) * Simd32x3::from([other.group3()[1], other.group1()[0], other.group1()[3]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                - (Simd32x3::from(self.group6()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))),
            // e23, e31, e12
            (Simd32x3::from([
                ((self.group1()[1] * other.group3()[2]) - (self.group1()[2] * other.group3()[1]) + (self.group6()[1] * other.group1()[2]) - (self.group6()[2] * other.group1()[1])),
                (-(self.group1()[0] * other.group3()[2]) + (self.group1()[2] * other.group3()[0]) - (self.group6()[0] * other.group1()[2])
                    + (self.group6()[2] * other.group1()[0])),
                ((self.group1()[0] * other.group3()[1]) - (self.group1()[1] * other.group3()[0]) + (self.group6()[0] * other.group1()[1]) - (self.group6()[1] * other.group1()[0])),
            ]) - (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                - (Simd32x3::from(self.group6()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                - (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(self[e1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group3()[3], other.group3()[3]]) * swizzle!(self.group8(), 2, 1, 2))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group8(), 1, 2, 0))
                - (Simd32x3::from([other.group2()[1], other.group2()[3], other.group2()[3]]) * swizzle!(self.group7(), 2, 1, 2))
                + (Simd32x3::from([other.group2()[2], other.group2()[0], other.group2()[1]]) * swizzle!(self.group7(), 1, 2, 0))
                - (Simd32x3::from([other.group2()[3], other.group2()[2], other.group2()[0]]) * swizzle!(self.group7(), 0, 0, 1))
                - (Simd32x3::from([other.group3()[3], other.group0()[2], other.group0()[0]]) * swizzle!(self.group8(), 0, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group4()[2] * other.group2()[1]) - (self.group5()[1] * other.group1()[2]) - (self.group9()[2] * other.group3()[1]) + (other.group2()[0] * self[e45])),
                ((self.group4()[1] * other.group2()[3]) - (self.group5()[2] * other.group1()[0]) - (self.group9()[1] * other.group1()[3]) + (other.group2()[1] * self[e45])),
                ((self.group4()[2] * other.group2()[3]) - (self.group5()[0] * other.group1()[1]) - (self.group9()[2] * other.group1()[3]) + (other.group2()[2] * self[e45])),
                (-(self.group4()[1] * other.group2()[1])
                    - (self.group4()[2] * other.group2()[2])
                    - (self.group5()[1] * other.group3()[1])
                    - (self.group5()[2] * other.group3()[2])),
            ]) + (Simd32x4::from(self.group0()[0]) * other.group1())
                + (Simd32x4::from([self.group4()[0], self.group4()[0], self.group4()[1], self[e45]]) * swizzle!(other.group2(), 3, 2, 0, 3))
                - (Simd32x4::from([self.group4()[1], self.group4()[2], self.group4()[0], self.group4()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self.group3()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group9()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group5()[0]]) * swizzle!(other.group3(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]) * swizzle!(self.group9(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group0()[1], other.group3()[3], other.group3()[3], other.group0()[2]]) * swizzle!(self.group3(), 2, 1, 2, 2))
                - (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group3()[3]]) * swizzle!(self.group9(), 0, 0, 1, 3))
                + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[1]]) * swizzle!(self.group9(), 1, 2, 0, 1))
                + (Simd32x4::from([other.group3()[3], other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group3(), 0, 0, 1, 1))
                - (swizzle!(self.group3(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))),
            // e423, e431, e412
            (Simd32x3::from([
                ((self.group9()[1] * other.group0()[2]) - (self.group9()[2] * other.group0()[1])),
                (-(self.group9()[0] * other.group0()[2]) + (self.group9()[2] * other.group0()[0])),
                ((self.group9()[0] * other.group0()[1]) - (self.group9()[1] * other.group0()[0])),
            ]) + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(self.group4()[0]) * Simd32x3::from([other.group0()[3], other.group1()[2], other.group3()[1]]))
                - (Simd32x3::from(self.group4()[0]) * Simd32x3::from([other.group1()[3], other.group3()[2], other.group1()[1]]))
                - (Simd32x3::from(self.group4()[1]) * Simd32x3::from([other.group1()[2], other.group1()[3], other.group3()[0]]))
                + (Simd32x3::from(self.group4()[1]) * Simd32x3::from([other.group3()[2], other.group0()[3], other.group1()[0]]))
                + (Simd32x3::from(self.group4()[2]) * Simd32x3::from([other.group1()[1], other.group3()[0], other.group0()[3]]))
                - (Simd32x3::from(self.group4()[2]) * Simd32x3::from([other.group3()[1], other.group1()[0], other.group1()[3]]))
                - (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(self[e45]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from([other.group0()[1], other.group3()[3], other.group3()[3]]) * swizzle!(self.group5(), 2, 1, 2))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group5(), 1, 2, 0))
                + (Simd32x3::from([other.group3()[3], other.group0()[2], other.group0()[0]]) * swizzle!(self.group5(), 0, 0, 1))),
            // e235, e315, e125
            (Simd32x3::from([
                (-(self.group3()[1] * other.group1()[2]) - (self.group3()[1] * other.group3()[2])
                    + (self.group3()[2] * other.group1()[1])
                    + (self.group3()[2] * other.group3()[1])
                    - (self.group9()[1] * other.group2()[2])
                    + (self.group9()[2] * other.group2()[1])),
                ((self.group3()[0] * other.group1()[2]) + (self.group3()[0] * other.group3()[2]) - (self.group3()[2] * other.group1()[0]) - (self.group3()[2] * other.group3()[0])
                    + (self.group9()[0] * other.group2()[2])
                    - (self.group9()[2] * other.group2()[0])),
                (-(self.group3()[0] * other.group1()[1]) - (self.group3()[0] * other.group3()[1])
                    + (self.group3()[1] * other.group1()[0])
                    + (self.group3()[1] * other.group3()[0])
                    - (self.group9()[0] * other.group2()[1])
                    + (self.group9()[1] * other.group2()[0])),
            ]) + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                + (Simd32x3::from(self.group9()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group9()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from([other.group2()[1], other.group2()[3], other.group2()[3]]) * swizzle!(self.group5(), 2, 1, 2))
                - (Simd32x3::from([other.group2()[2], other.group2()[0], other.group2()[1]]) * swizzle!(self.group5(), 1, 2, 0))
                + (Simd32x3::from([other.group2()[3], other.group2()[2], other.group2()[0]]) * swizzle!(self.group5(), 0, 0, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group8()[0] * other.group3()[3]) + (self.group8()[1] * other.group0()[2]) + (self.group1()[0] * other.group0()[3])
                    - (self.group6()[1] * other.group3()[2])
                    + (self.group6()[2] * other.group3()[1])),
                (-(self.group8()[1] * other.group3()[3]) + (self.group8()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])
                    - (self.group6()[2] * other.group3()[0])
                    + (self.group6()[3] * other.group1()[1])),
                ((self.group8()[0] * other.group0()[1]) - (self.group8()[2] * other.group3()[3]) + (self.group1()[2] * other.group0()[3]) - (self.group6()[0] * other.group3()[1])
                    + (self.group6()[3] * other.group1()[2])),
                ((self.group8()[1] * other.group3()[1]) + (self.group8()[2] * other.group1()[2]) + (self.group8()[2] * other.group3()[2])
                    - (self.group1()[1] * other.group2()[1])
                    - (self.group1()[2] * other.group2()[2])),
            ]) - (Simd32x4::from(self[e1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group8()[0]]) * swizzle!(other.group3(), 0, 1, 2, 0))
                + (Simd32x4::from([self.group7()[0], self.group7()[0], self.group7()[1], self.group6()[0]]) * swizzle!(other.group2(), 3, 2, 0, 0))
                - (Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[0], self.group0()[1]]) * swizzle!(other.group2(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group7()[2], self.group7()[1], self.group7()[2], self.group6()[1]]) * swizzle!(other.group2(), 1, 3, 3, 1))
                - (Simd32x4::from([self.group8()[2], self.group8()[0], self.group8()[1], self[e1]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group8()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group6()[2]]) * swizzle!(other.group2(), 0, 1, 2, 2))
                + (Simd32x4::from([self.group6()[3], self.group6()[1], self.group6()[2], self.group8()[1]]) * swizzle!(other.group1(), 0, 3, 3, 1))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group2()[3]]) * swizzle!(self.group6(), 0, 0, 1, 3))),
            // e1234
            (-(self.group0()[1] * other.group3()[3]) + (self.group7()[0] * other.group1()[0]) - (self.group7()[0] * other.group3()[0]) + (self.group7()[1] * other.group1()[1])
                - (self.group7()[1] * other.group3()[1])
                + (self.group7()[2] * other.group1()[2])
                - (self.group7()[2] * other.group3()[2])
                + (self.group1()[0] * other.group0()[0])
                + (self.group1()[1] * other.group0()[1])
                + (self.group1()[2] * other.group0()[2])
                - (self.group1()[3] * other.group0()[3])
                + (self.group1()[3] * other.group1()[3])
                + (self.group6()[0] * other.group0()[0])
                + (self.group6()[1] * other.group0()[1])
                + (self.group6()[2] * other.group0()[2])
                - (self.group6()[3] * other.group3()[3])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      462      520        0
    //    simd2       28       28        0
    //    simd3      166      172        0
    //    simd4      114      116        0
    // Totals...
    // yes simd      770      836        0
    //  no simd     1472     1556        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                ((self.group3()[3] * other.group1()[3]) - (self.group9()[0] * other.group3()[0]) - (self.group9()[1] * other.group3()[1]) - (self.group9()[2] * other.group3()[2])),
                ((self.group1()[0] * other.group3()[0]) + (self.group1()[1] * other.group3()[1]) + (self.group1()[2] * other.group3()[2]) - (self.group6()[3] * other.group1()[3])),
            ]) - (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group3()[0], self.group8()[0]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group3()[1], self.group8()[1]]))
                - (Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group3()[2], self.group8()[2]]))
                + (Simd32x2::from(other.group0()[3]) * self.group0())
                - (Simd32x2::from(other.group1()[0]) * Simd32x2::from([self.group5()[0], self.group6()[0]]))
                - (Simd32x2::from(other.group1()[1]) * Simd32x2::from([self.group5()[1], self.group6()[1]]))
                - (Simd32x2::from(other.group1()[2]) * Simd32x2::from([self.group5()[2], self.group6()[2]]))
                - (Simd32x2::from(other.group2()[0]) * Simd32x2::from([self.group4()[0], self.group7()[0]]))
                - (Simd32x2::from(other.group2()[1]) * Simd32x2::from([self.group4()[1], self.group7()[1]]))
                - (Simd32x2::from(other.group2()[2]) * Simd32x2::from([self.group4()[2], self.group7()[2]]))
                + (Simd32x2::from(other.group2()[3]) * Simd32x2::from([self.group9()[3], self[e1]]))
                + (Simd32x2::from(other.group3()[3]) * Simd32x2::from([self[e45], self.group1()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group7()[0] * other.group3()[3]) - (self.group7()[1] * other.group2()[2]) - (self.group8()[0] * other.group2()[3])
                    + (self.group1()[2] * other.group1()[1])
                    + (self.group6()[1] * other.group3()[2])
                    + (self.group6()[3] * other.group1()[0])),
                ((self.group7()[1] * other.group3()[3]) - (self.group7()[2] * other.group2()[0]) - (self.group8()[1] * other.group2()[3])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group6()[2] * other.group3()[0])
                    + (self.group6()[3] * other.group1()[1])),
                (-(self.group7()[0] * other.group2()[1]) + (self.group7()[2] * other.group3()[3]) - (self.group8()[2] * other.group2()[3])
                    + (self.group1()[2] * other.group0()[3])
                    + (self.group6()[0] * other.group3()[1])
                    + (self.group6()[3] * other.group1()[2])),
                (-(self.group7()[1] * other.group1()[1])
                    - (self.group7()[1] * other.group3()[1])
                    - (self.group7()[2] * other.group1()[2])
                    - (self.group7()[2] * other.group3()[2])
                    - (self.group1()[2] * other.group0()[2])
                    - (self.group6()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group7()[0]]) * swizzle!(other.group3(), 0, 1, 2, 0))
                + (Simd32x4::from([self.group7()[2], self.group7()[0], self.group7()[1], self.group0()[1]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group8()[1], self.group8()[2], self.group8()[0], self.group1()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group8()[2], self.group8()[0], self.group8()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group7()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group6()[3]]) * other.group2())
                + (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group1()[3]]) * swizzle!(self.group1(), 0, 0, 1, 3))
                - (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group0()[0]]) * swizzle!(self.group6(), 0, 0, 1, 0))
                - (Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group0()[1]]) * swizzle!(self.group6(), 2, 1, 2, 1))
                - (Simd32x4::from([self[e1], self[e1], self[e1], self.group1()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e5
            ((self.group0()[1] * other.group3()[3]) - (self.group8()[0] * other.group1()[0]) + (self.group8()[0] * other.group3()[0]) - (self.group8()[1] * other.group1()[1])
                + (self.group8()[1] * other.group3()[1])
                - (self.group8()[2] * other.group1()[2])
                + (self.group8()[2] * other.group3()[2])
                + (self.group1()[0] * other.group2()[0])
                + (self.group1()[1] * other.group2()[1])
                + (self.group1()[2] * other.group2()[2])
                - (self.group6()[0] * other.group2()[0])
                - (self.group6()[1] * other.group2()[1])
                - (self.group6()[2] * other.group2()[2])
                - (self.group6()[3] * other.group3()[3])
                + (other.group0()[3] * self[e1])
                - (other.group1()[3] * self[e1])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group5()[0] * other.group3()[3]) - (self.group5()[1] * other.group2()[2])
                    + (self.group3()[1] * other.group3()[2])
                    + (self.group3()[2] * other.group1()[1])
                    + (self.group9()[2] * other.group2()[1])
                    + (self.group9()[3] * other.group1()[0])),
                ((self.group5()[1] * other.group3()[3]) - (self.group5()[2] * other.group2()[0])
                    + (self.group3()[1] * other.group0()[3])
                    + (self.group3()[2] * other.group3()[0])
                    + (self.group9()[1] * other.group3()[3])
                    + (self.group9()[3] * other.group1()[1])),
                (-(self.group5()[0] * other.group2()[1])
                    + (self.group5()[2] * other.group3()[3])
                    + (self.group3()[1] * other.group1()[0])
                    + (self.group3()[2] * other.group0()[3])
                    + (self.group9()[2] * other.group3()[3])
                    + (self.group9()[3] * other.group1()[2])),
                ((self.group4()[2] * other.group2()[2])
                    - (self.group5()[1] * other.group3()[1])
                    - (self.group5()[2] * other.group3()[2])
                    - (self.group9()[1] * other.group1()[1])
                    - (self.group9()[2] * other.group1()[2])
                    - (other.group3()[3] * self[e45])),
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))
                - (Simd32x4::from(self.group3()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group0()[0]]))
                - (Simd32x4::from(self.group3()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group0()[1]]))
                - (Simd32x4::from(self.group3()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group0()[2]]))
                + (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group4()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group4()[1]]) * swizzle!(other.group2(), 0, 1, 2, 1))
                - (Simd32x4::from([self.group9()[3], self.group9()[3], self.group9()[3], self.group5()[0]]) * swizzle!(other.group3(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group0()[3], other.group1()[2], other.group3()[1], other.group0()[3]]) * swizzle!(self.group3(), 0, 0, 0, 3))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[0]]) * swizzle!(self.group9(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group3()[3], other.group2()[2], other.group2()[0], other.group2()[3]]) * swizzle!(self.group9(), 0, 0, 1, 3))),
            // e41, e42, e43
            (Simd32x3::from([
                ((self.group9()[1] * other.group0()[2]) - (self.group9()[2] * other.group0()[1])),
                (-(self.group9()[0] * other.group0()[2]) + (self.group9()[2] * other.group0()[0])),
                ((self.group9()[0] * other.group0()[1]) - (self.group9()[1] * other.group0()[0])),
            ]) + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from([other.group0()[1], other.group2()[3], other.group2()[3]]) * swizzle!(self.group5(), 2, 1, 2))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group5(), 1, 2, 0))
                + (Simd32x3::from([other.group0()[3], other.group1()[2], other.group1()[0]]) * swizzle!(self.group4(), 0, 0, 1))
                + (Simd32x3::from([other.group1()[1], other.group0()[3], other.group0()[3]]) * swizzle!(self.group4(), 2, 1, 2))
                - (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]) * swizzle!(self.group4(), 1, 2, 0))
                + (Simd32x3::from([other.group1()[3], other.group3()[2], other.group3()[0]]) * swizzle!(self.group4(), 0, 0, 1))
                + (Simd32x3::from([other.group2()[3], other.group0()[2], other.group0()[0]]) * swizzle!(self.group5(), 0, 0, 1))
                + (Simd32x3::from([other.group3()[1], other.group1()[3], other.group1()[3]]) * swizzle!(self.group4(), 2, 1, 2))
                - (Simd32x3::from([other.group3()[2], other.group3()[0], other.group3()[1]]) * swizzle!(self.group4(), 1, 2, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                (-(self.group3()[1] * other.group0()[2]) + (self.group3()[2] * other.group0()[1]) - (self.group9()[1] * other.group3()[2])
                    + (self.group9()[2] * other.group3()[1])),
                ((self.group3()[0] * other.group0()[2]) - (self.group3()[2] * other.group0()[0]) + (self.group9()[0] * other.group3()[2]) - (self.group9()[2] * other.group3()[0])),
                (-(self.group3()[0] * other.group0()[1]) + (self.group3()[1] * other.group0()[0]) - (self.group9()[0] * other.group3()[1])
                    + (self.group9()[1] * other.group3()[0])),
            ]) + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from(self.group9()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                + (Simd32x3::from([other.group0()[3], other.group1()[2], other.group1()[0]]) * swizzle!(self.group5(), 0, 0, 1))
                + (Simd32x3::from([other.group1()[1], other.group0()[3], other.group0()[3]]) * swizzle!(self.group5(), 2, 1, 2))
                - (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]) * swizzle!(self.group5(), 1, 2, 0))
                + (Simd32x3::from([other.group2()[1], other.group3()[3], other.group3()[3]]) * swizzle!(self.group4(), 2, 1, 2))
                - (Simd32x3::from([other.group2()[2], other.group2()[0], other.group2()[1]]) * swizzle!(self.group4(), 1, 2, 0))
                + (Simd32x3::from([other.group3()[3], other.group2()[2], other.group2()[0]]) * swizzle!(self.group4(), 0, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[0]) + (self.group7()[2] * other.group2()[1]) + (self.group8()[0] * other.group2()[3]) - (self.group8()[1] * other.group0()[2])
                    + (self.group1()[3] * other.group2()[0])
                    - (self.group6()[3] * other.group3()[0])),
                ((self.group0()[1] * other.group1()[1]) + (self.group7()[0] * other.group2()[2]) + (self.group8()[1] * other.group2()[3]) - (self.group8()[2] * other.group0()[0])
                    + (self.group1()[3] * other.group2()[1])
                    - (self.group6()[3] * other.group3()[1])),
                ((self.group0()[1] * other.group1()[2]) + (self.group7()[1] * other.group2()[0]) - (self.group8()[0] * other.group0()[1])
                    + (self.group8()[2] * other.group2()[3])
                    + (self.group1()[3] * other.group2()[2])
                    - (self.group6()[3] * other.group3()[2])),
                (-(self.group7()[1] * other.group2()[1]) - (self.group7()[2] * other.group2()[2]) + (self.group8()[2] * other.group0()[2])
                    - (self.group1()[2] * other.group1()[2])
                    + (self.group6()[3] * other.group0()[3])
                    - (other.group2()[3] * self[e1])),
            ]) + (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group1()[3]]))
                - (Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[0], self.group7()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group8()[2], self.group8()[0], self.group8()[1], self.group8()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group6()[0]]) * swizzle!(other.group3(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group6()[1], self.group6()[2], self.group6()[0], self.group0()[1]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group3()[1]]) * swizzle!(self.group6(), 0, 0, 1, 1))
                + (Simd32x4::from([other.group1()[1], other.group0()[3], other.group0()[3], other.group3()[2]]) * swizzle!(self.group6(), 2, 1, 2, 2))
                - (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group1()[0]]) * swizzle!(self.group1(), 0, 0, 1, 0))
                - (Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group1()[1]]) * swizzle!(self.group1(), 2, 1, 2, 1))
                + (Simd32x4::from([self[e1], self[e1], self[e1], self.group8()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e423, e431, e412
            (Simd32x3::from([
                (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1]) - (self.group6()[1] * other.group0()[2])
                    + (self.group6()[2] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0]) + (self.group6()[0] * other.group0()[2]) - (self.group6()[2] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0]) - (self.group6()[0] * other.group0()[1])
                    + (self.group6()[1] * other.group0()[0])),
            ]) + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from(self.group6()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                + (Simd32x3::from([other.group0()[3], other.group1()[2], other.group1()[0]]) * swizzle!(self.group7(), 0, 0, 1))
                + (Simd32x3::from([other.group1()[1], other.group0()[3], other.group0()[3]]) * swizzle!(self.group7(), 2, 1, 2))
                - (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]) * swizzle!(self.group7(), 1, 2, 0))
                + (Simd32x3::from([other.group1()[3], other.group3()[2], other.group3()[0]]) * swizzle!(self.group7(), 0, 0, 1))
                + (Simd32x3::from([other.group3()[1], other.group1()[3], other.group1()[3]]) * swizzle!(self.group7(), 2, 1, 2))
                - (Simd32x3::from([other.group3()[2], other.group3()[0], other.group3()[1]]) * swizzle!(self.group7(), 1, 2, 0))),
            // e235, e315, e125
            (Simd32x3::from([
                ((self.group1()[1] * other.group2()[2]) + (self.group6()[2] * other.group2()[1])),
                ((self.group1()[2] * other.group2()[0]) + (self.group6()[0] * other.group2()[2])),
                ((self.group1()[0] * other.group2()[1]) + (self.group6()[1] * other.group2()[0])),
            ]) + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                + (Simd32x3::from(self.group8()[0]) * Simd32x3::from([other.group0()[3], other.group1()[2], other.group3()[1]]))
                - (Simd32x3::from(self.group8()[0]) * Simd32x3::from([other.group1()[3], other.group3()[2], other.group1()[1]]))
                - (Simd32x3::from(self.group8()[1]) * Simd32x3::from([other.group1()[2], other.group1()[3], other.group3()[0]]))
                + (Simd32x3::from(self.group8()[1]) * Simd32x3::from([other.group3()[2], other.group0()[3], other.group1()[0]]))
                + (Simd32x3::from(self.group8()[2]) * Simd32x3::from([other.group1()[1], other.group3()[0], other.group0()[3]]))
                - (Simd32x3::from(self.group8()[2]) * Simd32x3::from([other.group3()[1], other.group1()[0], other.group1()[3]]))
                - (Simd32x3::from(other.group2()[0]) * Simd32x3::from([self.group6()[3], self.group6()[2], self.group1()[1]]))
                - (Simd32x3::from(other.group2()[1]) * Simd32x3::from([self.group1()[2], self.group6()[3], self.group6()[0]]))
                - (Simd32x3::from(other.group2()[2]) * Simd32x3::from([self.group6()[1], self.group1()[0], self.group6()[3]]))
                - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                + (Simd32x3::from(self[e1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(self[e1]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group4()[0] * other.group3()[3]) + (self.group4()[1] * other.group2()[2]) + (self.group5()[0] * other.group1()[3])
                    - (self.group5()[1] * other.group3()[2])
                    + (self.group9()[2] * other.group1()[1])
                    + (self.group9()[3] * other.group0()[0])),
                (-(self.group4()[1] * other.group3()[3]) + (self.group4()[2] * other.group2()[0]) + (self.group5()[1] * other.group1()[3])
                    - (self.group5()[2] * other.group3()[0])
                    + (self.group9()[1] * other.group0()[3])
                    + (self.group9()[3] * other.group0()[1])),
                ((self.group4()[0] * other.group2()[1]) - (self.group4()[2] * other.group3()[3]) - (self.group5()[0] * other.group3()[1])
                    + (self.group5()[2] * other.group1()[3])
                    + (self.group9()[2] * other.group0()[3])
                    + (self.group9()[3] * other.group0()[2])),
                (-(self.group5()[2] * other.group2()[2])
                    - (self.group3()[2] * other.group1()[2])
                    - (self.group9()[0] * other.group2()[0])
                    - (self.group9()[1] * other.group2()[1])
                    - (self.group9()[2] * other.group2()[2])
                    - (self.group9()[3] * other.group1()[3])),
            ]) + (Simd32x4::from(self.group0()[0]) * other.group3())
                + (Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                - (Simd32x4::from([self.group4()[2], self.group4()[0], self.group4()[1], self.group5()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group3()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group9()[1], self.group9()[2], self.group9()[0], self.group3()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))
                + (Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group3()[2]]) * swizzle!(self.group3(), 2, 1, 2, 2))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group0()[3]]) * swizzle!(self.group9(), 0, 0, 1, 3))
                + (Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group3()[1]]) * swizzle!(self.group3(), 0, 0, 1, 1))
                - (Simd32x4::from([self[e45], self[e45], self[e45], self.group5()[1]]) * swizzle!(other.group2(), 0, 1, 2, 1))),
            // e1234
            ((self.group0()[0] * other.group2()[3])
                - (self.group4()[0] * other.group1()[0])
                - (self.group4()[0] * other.group3()[0])
                - (self.group4()[1] * other.group1()[1])
                - (self.group4()[1] * other.group3()[1])
                - (self.group4()[2] * other.group1()[2])
                - (self.group4()[2] * other.group3()[2])
                - (self.group5()[0] * other.group0()[0])
                - (self.group5()[1] * other.group0()[1])
                - (self.group5()[2] * other.group0()[2])
                - (self.group3()[3] * other.group2()[3])
                + (self.group9()[0] * other.group0()[0])
                + (self.group9()[1] * other.group0()[1])
                + (self.group9()[2] * other.group0()[2])
                + (other.group0()[3] * self[e45])
                + (other.group1()[3] * self[e45])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl InfixSandwich for Plane {}
impl Sandwich<AntiCircleRotor> for Plane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       30       62        0
    //    simd3        1        2        0
    //    simd4       10       10        0
    // Totals...
    // yes simd       41       74        0
    //  no simd       73      108        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[3]) + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group0()[3]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group2()[2] * self.group0()[1]) * -1.0),
                ((other.group2()[0] * self.group0()[2]) * -1.0),
                ((other.group2()[1] * self.group0()[0]) * -1.0),
                (other.group0()[2] * self.group0()[2]),
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[1]]) * swizzle!(self.group0(), 2, 0, 1, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group1()[1] * self.group0()[2]) + (other.group2()[3] * self.group0()[0])),
                ((other.group1()[2] * self.group0()[0]) + (other.group2()[3] * self.group0()[1])),
                ((other.group1()[0] * self.group0()[1]) + (other.group2()[3] * self.group0()[2])),
                (-(other.group2()[0] * self.group0()[0]) - (other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (swizzle!(other.group1(), 2, 0, 1, 3) * swizzle!(self.group0(), 1, 2, 0, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for Plane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       67        0
    //    simd4       16       16        0
    // Totals...
    // yes simd       44       83        0
    //  no simd       92      131        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) - (other.group2()[3] * self.group0()[0])),
                (-(other.group0()[2] * self.group0()[0]) - (other.group2()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[1]) - (other.group2()[3] * self.group0()[2])),
                ((other.group3()[0] * self.group0()[0]) + (other.group3()[1] * self.group0()[1]) + (other.group3()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group3()[1] * self.group0()[2]) * -1.0),
                ((other.group3()[2] * self.group0()[0]) * -1.0),
                ((other.group3()[0] * self.group0()[1]) * -1.0),
                (other.group1()[2] * self.group0()[2]),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[3]]) * self.group0())
                + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group2()[1] * self.group0()[2]) + (other.group3()[0] * self.group0()[3]) + (other.group3()[3] * self.group0()[0])),
                ((other.group2()[2] * self.group0()[0]) + (other.group3()[1] * self.group0()[3]) + (other.group3()[3] * self.group0()[1])),
                ((other.group2()[0] * self.group0()[1]) + (other.group3()[2] * self.group0()[3]) + (other.group3()[3] * self.group0()[2])),
                (-(other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self.group0()[3]) * other.group1())
                - (swizzle!(other.group2(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group1()[1] * self.group0()[2])),
                (-(other.group0()[1] * self.group0()[3]) - (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[2] * self.group0()[3]) - (other.group1()[0] * self.group0()[1])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for Plane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       38        0
    //    simd4        7       10        0
    // Totals...
    // yes simd       27       48        0
    //  no simd       48       78        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(other.group0()[0]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group0()[3])]),
            // e15, e25, e35, e1234
            Simd32x4::from(0.0),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other.group0()[1]) * self.group0()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for Plane {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       24        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       14       29        0
    //  no simd       29       44        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (other.group0()[3] * self.group0()[0] * -1.0),
                (other.group0()[3] * self.group0()[1] * -1.0),
                (other.group0()[3] * self.group0()[2] * -1.0),
                0.0,
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([0.0, 0.0, 0.0, (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]))])
                + (swizzle!(other.group0(), 1, 2, 0, 3) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for Plane {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       32        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       22       38        0
    //  no simd       40       56        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from([
                (-(other.group0()[3] * self.group0()[0]) - (other.group1()[1] * self.group0()[2])),
                (-(other.group0()[3] * self.group0()[1]) - (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[3] * self.group0()[2]) - (other.group1()[0] * self.group0()[1])),
                ((other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]) + (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group1()[0] * self.group0()[3]) + (other.group1()[3] * self.group0()[0])),
                ((other.group1()[1] * self.group0()[3]) + (other.group1()[3] * self.group0()[1])),
                ((other.group1()[2] * self.group0()[3]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) + (swizzle!(other.group0(), 1, 2, 0, 3) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for Plane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       29        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       18       34        0
    //  no simd       33       49        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group1()[1] * self.group0()[2])),
                ((other.group0()[1] * self.group0()[3]) + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[3]) + (other.group1()[0] * self.group0()[1])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (other.group0()[1] * self.group0()[2]),
                (other.group0()[2] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for Plane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       32        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       22       38        0
    //  no simd       40       56        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group1()[1] * self.group0()[2]) + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[3]) + (other.group1()[2] * self.group0()[0]) + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group0()[3]) + (other.group1()[0] * self.group0()[1]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (other.group0()[3] * self.group0()[0]),
                (other.group0()[3] * self.group0()[1]),
                (other.group0()[3] * self.group0()[2]),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (swizzle!(other.group0(), 1, 2, 0, 3) * swizzle!(self.group0(), 2, 0, 1, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for Plane {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       30        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       16       34        0
    //  no simd       28       46        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) * -1.0),
                ((other.group0()[2] * self.group0()[0]) * -1.0),
                ((other.group0()[0] * self.group0()[1]) * -1.0),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[3]) + (other.group0()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group0()[3]) + (other.group0()[3] * self.group0()[2])),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for Plane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       14        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        5       17        0
    //  no simd        8       26        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiPlane::from_groups(/* e1, e2, e3, e5 */ (Simd32x4::from(other[e12345]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for Plane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       48        0
    //    simd3        1        2        0
    //    simd4       14       14        0
    // Totals...
    // yes simd       28       64        0
    //  no simd       72      110        0
    fn sandwich(self, other: Circle) -> Self::Output {
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            ((Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group1()[3] * self.group0()[0]) * -1.0),
                ((other.group1()[3] * self.group0()[1]) * -1.0),
                ((other.group1()[3] * self.group0()[2]) * -1.0),
                ((other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))),
            // e235, e315, e125, e4
            (Simd32x4::from([
                ((other.group2()[2] * self.group0()[1]) * -1.0),
                ((other.group2()[0] * self.group0()[2]) * -1.0),
                ((other.group2()[1] * self.group0()[0]) * -1.0),
                (other.group0()[2] * self.group0()[2]),
            ]) + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))),
            // e1, e2, e3, e5
            (Simd32x4::from([0.0, 0.0, 0.0, ((other.group2()[2] * self.group0()[2]) * -1.0)])
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[1]]) * swizzle!(self.group0(), 2, 0, 1, 1))
                + (swizzle!(other.group1(), 2, 0, 1, 3) * swizzle!(self.group0(), 1, 2, 0, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for Plane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       47        0
    //    simd3        1        2        0
    //    simd4       15       15        0
    // Totals...
    // yes simd       29       64        0
    //  no simd       76      113        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            ((Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group1()[3] * self.group0()[0]) * -1.0),
                ((other.group1()[3] * self.group0()[1]) * -1.0),
                ((other.group1()[3] * self.group0()[2]) * -1.0),
                ((other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))),
            // e235, e315, e125, e4
            (Simd32x4::from([
                ((other.group2()[2] * self.group0()[1]) * -1.0),
                ((other.group2()[0] * self.group0()[2]) * -1.0),
                ((other.group2()[1] * self.group0()[0]) * -1.0),
                (other.group0()[2] * self.group0()[2]),
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[1]]) * swizzle!(self.group0(), 2, 0, 1, 1))),
            // e1, e2, e3, e5
            (Simd32x4::from([0.0, 0.0, 0.0, (other.group2()[3] * self.group0()[3])])
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[1]]) * swizzle!(self.group0(), 2, 0, 1, 1))
                + (swizzle!(other.group1(), 2, 0, 1, 3) * swizzle!(self.group0(), 1, 2, 0, 3))
                - (swizzle!(other.group2(), 3, 3, 3, 2) * swizzle!(self.group0(), 0, 1, 2, 2))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for Plane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       30       62        0
    //    simd3        1        2        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       40       73        0
    //  no simd       69      104        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[3]) + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group0()[3]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group2()[2] * self.group0()[1]) * -1.0),
                ((other.group2()[0] * self.group0()[2]) * -1.0),
                ((other.group2()[1] * self.group0()[0]) * -1.0),
                (other.group0()[2] * self.group0()[2]),
            ]) + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group1()[1] * self.group0()[2])),
                ((other.group0()[1] * self.group0()[3]) + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[3]) + (other.group1()[0] * self.group0()[1])),
                (-(other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2]) - (other.group1()[3] * self.group0()[3])),
            ]) - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for Plane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       62        0
    //    simd4       16       16        0
    // Totals...
    // yes simd       48       78        0
    //  no simd       96      126        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([0.0, 0.0, 0.0, ((other.group3()[2] * self.group0()[2]) * -1.0)])
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group3()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group1()[3] * self.group0()[0]) + (other.group3()[1] * self.group0()[2])),
                ((other.group1()[3] * self.group0()[1]) + (other.group3()[2] * self.group0()[0])),
                ((other.group1()[3] * self.group0()[2]) + (other.group3()[0] * self.group0()[1])),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(other.group2()[2] * self.group0()[1]) - (other.group3()[0] * self.group0()[3])),
                (-(other.group2()[0] * self.group0()[2]) - (other.group3()[1] * self.group0()[3])),
                (-(other.group2()[1] * self.group0()[0]) - (other.group3()[2] * self.group0()[3])),
                0.0,
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[1]]) * swizzle!(self.group0(), 2, 0, 1, 1))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group0()[2]]) * swizzle!(self.group0(), 0, 1, 2, 2))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group1()[1] * self.group0()[2])),
                ((other.group0()[1] * self.group0()[3]) + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[3]) + (other.group1()[0] * self.group0()[1])),
                (-(other.group2()[0] * self.group0()[0]) - (other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])),
            ]) - (swizzle!(other.group1(), 2, 0, 1, 3) * swizzle!(self.group0(), 1, 2, 0, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for Plane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       41        0
    //    simd4        9       11        0
    // Totals...
    // yes simd       21       52        0
    //  no simd       48       85        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(other.group0()[0]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group0()[3] * -1.0)]),
            // e235, e315, e125, e5
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[1] * self.group0()[3])]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0] * -1.0),
                (other.group0()[1] * self.group0()[1] * -1.0),
                (other.group0()[1] * self.group0()[2] * -1.0),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for Plane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       25        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       11       30        0
    //  no simd       26       45        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (other.group0()[3] * self.group0()[0]),
                (other.group0()[3] * self.group0()[1]),
                (other.group0()[3] * self.group0()[2]),
                0.0,
            ]),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                (other.group0()[1] * self.group0()[2]),
                (other.group0()[2] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group0()[3])),
            ]) - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for Plane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       32        0
    //    simd4        7        7        0
    // Totals...
    // yes simd       19       39        0
    //  no simd       40       60        0
    fn sandwich(self, other: Flector) -> Self::Output {
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from([
                ((other.group0()[3] * self.group0()[0]) + (other.group1()[1] * self.group0()[2])),
                ((other.group0()[3] * self.group0()[1]) + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[3] * self.group0()[2]) + (other.group1()[0] * self.group0()[1])),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[0]) + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[1]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group0()[3])),
            ]) - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for Plane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       28        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       15       34        0
    //  no simd       33       52        0
    fn sandwich(self, other: Line) -> Self::Output {
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from([
                ((other.group1()[2] * self.group0()[1]) * -1.0),
                ((other.group1()[0] * self.group0()[2]) * -1.0),
                ((other.group1()[1] * self.group0()[0]) * -1.0),
                (other.group0()[2] * self.group0()[2]),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[1]]) * swizzle!(self.group0(), 2, 0, 1, 1))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                (other.group0()[2] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                (other.group0()[1] * self.group0()[0]),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for Plane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       24        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       17       33        0
    //  no simd       44       60        0
    fn sandwich(self, other: Motor) -> Self::Output {
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from([
                ((other.group1()[2] * self.group0()[1]) * -1.0),
                ((other.group1()[0] * self.group0()[2]) * -1.0),
                ((other.group1()[1] * self.group0()[0]) * -1.0),
                0.0,
            ]) + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[1]]) * swizzle!(self.group0(), 2, 0, 1, 1))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[2]]) * swizzle!(self.group0(), 0, 1, 2, 2))
                + (swizzle!(other.group0(), 0, 1, 2, 0) * swizzle!(self.group0(), 3, 3, 3, 0))),
            // e1, e2, e3, e5
            (Simd32x4::from([0.0, 0.0, 0.0, ((other.group1()[2] * self.group0()[2]) * -1.0)])
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other.group1()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))
                + (swizzle!(other.group0(), 2, 0, 1, 3) * swizzle!(self.group0(), 1, 2, 0, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for Plane {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       60      111        0
    //    simd2        2        2        0
    //    simd3       20       26        0
    //    simd4       17       17        0
    // Totals...
    // yes simd       99      156        0
    //  no simd      192      261        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                (-(other.group9()[0] * self.group0()[0]) - (other.group9()[1] * self.group0()[1]) - (other.group9()[2] * self.group0()[2])),
                ((other.group1()[0] * self.group0()[0]) + (other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x2::from(self.group0()[3]) * Simd32x2::from([other[e45], other.group1()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[1] * self.group0()[0]) - (other.group7()[0] * self.group0()[3]) - (other.group6()[1] * self.group0()[2])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group7()[1] * self.group0()[3]) - (other.group6()[2] * self.group0()[0])),
                (-(other.group0()[1] * self.group0()[2]) - (other.group7()[2] * self.group0()[3]) - (other.group6()[0] * self.group0()[1])),
                ((other.group7()[1] * self.group0()[1]) + (other.group7()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group7()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e5
            ((other.group0()[1] * self.group0()[3]) - (other.group8()[0] * self.group0()[0]) - (other.group8()[1] * self.group0()[1]) - (other.group8()[2] * self.group0()[2])
                + (other.group6()[3] * self.group0()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group3()[1] * self.group0()[2]) + (other.group9()[3] * self.group0()[0])),
                ((other.group3()[2] * self.group0()[0]) + (other.group9()[3] * self.group0()[1])),
                ((other.group3()[0] * self.group0()[1]) + (other.group9()[3] * self.group0()[2])),
                ((other.group5()[2] * self.group0()[2]) * -1.0),
            ]) + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other[e45]]))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group5()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group9()[0], other.group9()[1], other.group9()[2], other.group5()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))),
            // e41, e42, e43
            (-(Simd32x3::from(other[e45]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group4(), 2, 0, 1))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group4(), 1, 2, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                ((other.group9()[1] * self.group0()[2]) - (other.group9()[2] * self.group0()[1])),
                (-(other.group9()[0] * self.group0()[2]) + (other.group9()[2] * self.group0()[0])),
                ((other.group9()[0] * self.group0()[1]) - (other.group9()[1] * self.group0()[0])),
            ]) + (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self.group0()[3]) * other.group4())),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group6()[3] * self.group0()[0]) * -1.0),
                ((other.group6()[3] * self.group0()[1]) * -1.0),
                ((other.group6()[3] * self.group0()[2]) * -1.0),
                (other.group6()[2] * self.group0()[2]),
            ]) + (Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group6()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group6()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))
                - (swizzle!(other.group1(), 1, 2, 0, 3) * swizzle!(self.group0(), 2, 0, 1, 3))),
            // e423, e431, e412
            (-(Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group7(), 2, 0, 1))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group7(), 1, 2, 0))),
            // e235, e315, e125
            ((Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group8(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group8(), 1, 2, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group4()[0] * self.group0()[3]) + (other.group5()[1] * self.group0()[2])),
                ((other.group4()[1] * self.group0()[3]) + (other.group5()[2] * self.group0()[0])),
                ((other.group4()[2] * self.group0()[3]) + (other.group5()[0] * self.group0()[1])),
                (-(other.group3()[1] * self.group0()[1]) - (other.group3()[2] * self.group0()[2]) - (other.group3()[3] * self.group0()[3])),
            ]) + (Simd32x4::from(other.group0()[0]) * self.group0())
                - (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group3()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e1234
            ((other.group4()[0] * self.group0()[0]) + (other.group4()[1] * self.group0()[1]) + (other.group4()[2] * self.group0()[2])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for Plane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       27        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       13       32        0
    //  no simd       28       47        0
    fn sandwich(self, other: Plane) -> Self::Output {
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from([
                (other.group0()[1] * self.group0()[2]),
                (other.group0()[2] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) + (other.group0()[3] * self.group0()[0])),
                (-(other.group0()[1] * self.group0()[3]) + (other.group0()[3] * self.group0()[1])),
                (-(other.group0()[2] * self.group0()[3]) + (other.group0()[3] * self.group0()[2])),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for Plane {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       34        0
    //    simd3        1        4        0
    //    simd4        7        7        0
    // Totals...
    // yes simd       18       45        0
    //  no simd       41       74        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = CircleRotor::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(-1.0)),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other.group0()[3] * -1.0),
            ]),
            // e235, e315, e125, e12345
            (Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[3]))])
                + (Simd32x4::from([other[e2], other[e2], other[e2], other.group0()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))
                + (swizzle!(self.group0(), 3, 3, 3, 1) * swizzle!(other.group0(), 0, 1, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for Plane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       11        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        5       13        0
    //  no simd        8       19        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (Simd32x4::from(other[scalar]) * self.group0()));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for Plane {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       35        0
    //    simd3        1        4        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       24       44        0
    //  no simd       41       67        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other[e4315]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(-1.0)),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other[e4315]),
            ]),
            // e15, e25, e35, scalar
            (Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]))])
                + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other[e4315]]) * self.group0())
                - (swizzle!(self.group0(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for Plane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       67        0
    //    simd4       17       17        0
    // Totals...
    // yes simd       45       84        0
    //  no simd       96      135        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(self.group0()[0] * other.group3()[3]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group3()[3])),
                (-(self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group3()[3])),
                ((self.group0()[1] * other.group3()[1]) + (self.group0()[2] * other.group3()[2]) + (self.group0()[3] * other.group3()[3])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group3()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group3()[1]) * -1.0),
                ((self.group0()[1] * other.group1()[3]) * -1.0),
                ((self.group0()[2] * other.group1()[3]) * -1.0),
                (self.group0()[2] * other.group1()[2]),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group3()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))
                + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group0()[3] * other.group1()[0]) + (self.group0()[3] * other.group3()[0])),
                ((self.group0()[3] * other.group1()[1]) + (self.group0()[3] * other.group3()[1])),
                ((self.group0()[3] * other.group1()[2]) + (self.group0()[3] * other.group3()[2])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])),
            ]) + (Simd32x4::from([other.group2()[1], other.group2()[3], other.group2()[3], other.group1()[3]]) * swizzle!(self.group0(), 2, 1, 2, 3))
                + (Simd32x4::from([other.group2()[3], other.group2()[2], other.group2()[0], other.group0()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))
                - (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group2(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group0()[2] * other.group1()[1]) - (self.group0()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group0()[3]) - (self.group0()[3] * other.group0()[1])),
                (-(self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group0()[2])),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for Plane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       62        0
    //    simd4       17       17        0
    // Totals...
    // yes simd       49       79        0
    //  no simd      100      130        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[2] * other.group3()[2]) * -1.0)])
                - (Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group3()[1]]) * swizzle!(self.group0(), 2, 1, 2, 1))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group0(), 0, 0, 1, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[2] * other.group3()[1]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group1()[3]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group1()[3]) + (self.group0()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group2()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(self.group0()[1] * other.group2()[2]) - (self.group0()[3] * other.group3()[0])),
                (-(self.group0()[2] * other.group2()[0]) - (self.group0()[3] * other.group3()[1])),
                (-(self.group0()[0] * other.group2()[1]) - (self.group0()[3] * other.group3()[2])),
                0.0,
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group2()[1], other.group3()[3], other.group3()[3], other.group0()[1]]) * swizzle!(self.group0(), 2, 1, 2, 1))
                + (Simd32x4::from([other.group3()[3], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group0(), 0, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[2] * other.group1()[1]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2]) - (self.group0()[3] * other.group1()[3])),
            ]) + (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group0()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl InfixSandwich for RoundPoint {}
impl Sandwich<AntiCircleRotor> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       49        0
    //    simd3        2        3        0
    //    simd4       19       19        0
    // Totals...
    // yes simd       41       71        0
    //  no simd      102      134        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            ((Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[0] * self[e2]) + (other.group2()[0] * self.group0()[3])),
                ((other.group0()[1] * self[e2]) + (other.group2()[1] * self.group0()[3])),
                ((other.group0()[2] * self[e2]) + (other.group2()[2] * self.group0()[3])),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) - (swizzle!(other.group1(), 3, 3, 3, 0) * swizzle!(self.group0(), 0, 1, 2, 0))),
            // e235, e315, e125, e4
            (Simd32x4::from([0.0, 0.0, 0.0, (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]))])
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self[e2], self[e2], self[e2], self.group0()[3]]) * other.group1())
                + (swizzle!(other.group2(), 2, 0, 1, 3) * swizzle!(self.group0(), 1, 2, 0, 3))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                ((other.group1()[2] * self.group0()[1]) * -1.0),
                ((other.group1()[0] * self.group0()[2]) * -1.0),
                ((other.group1()[1] * self.group0()[0]) * -1.0),
                (other.group2()[3] * self[e2]),
            ]) - (Simd32x4::from(self[e2]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (swizzle!(other.group2(), 0, 1, 2, 1) * swizzle!(self.group0(), 3, 3, 3, 1))
                + (swizzle!(other.group2(), 3, 3, 3, 2) * swizzle!(self.group0(), 0, 1, 2, 2))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       27       61        0
    //    simd4       24       25        0
    // Totals...
    // yes simd       51       86        0
    //  no simd      123      161        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group1()[0] * self.group0()[3]) * -1.0),
                ((other.group1()[1] * self.group0()[3]) * -1.0),
                ((other.group1()[2] * self.group0()[3]) * -1.0),
                (other.group3()[2] * self.group0()[2]),
            ]) - (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self[e2]]))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group3()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (swizzle!(other.group3(), 0, 1, 2, 1) * swizzle!(self.group0(), 3, 3, 3, 1))),
            // e23, e31, e12, e45
            (-(Simd32x4::from(self[e2]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[2]]) * swizzle!(self.group0(), 2, 0, 1, 2))
                - (swizzle!(other.group1(), 3, 3, 3, 0) * swizzle!(self.group0(), 0, 1, 2, 0))
                + (swizzle!(other.group3(), 2, 0, 1, 3) * swizzle!(self.group0(), 1, 2, 0, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(other.group1()[0] * self[e2]) - (other.group2()[2] * self.group0()[1]) - (other.group3()[0] * self[e2])),
                (-(other.group1()[1] * self[e2]) - (other.group2()[0] * self.group0()[2]) - (other.group3()[1] * self[e2])),
                (-(other.group1()[2] * self[e2]) - (other.group2()[1] * self.group0()[0]) - (other.group3()[2] * self[e2])),
                ((other.group0()[2] * self.group0()[2]) + (other.group1()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group0()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group1()[1] * self.group0()[2]) + (other.group2()[0] * self.group0()[3])),
                ((other.group1()[2] * self.group0()[0]) + (other.group2()[1] * self.group0()[3])),
                ((other.group1()[0] * self.group0()[1]) + (other.group2()[2] * self.group0()[3])),
                (-(other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(self[e2]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       34        0
    //    simd4       14       16        0
    // Totals...
    // yes simd       22       50        0
    //  no simd       64       98        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self[e2]])),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self[e2] * -1.0)]),
            // e235, e315, e125, e5
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[1] * self[e2])]),
            // e1, e2, e3, e4
            (Simd32x4::from(other.group0()[1]) * self.group0()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       59        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       41       68        0
    //  no simd       68       95        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group0()[3] * self.group0()[0])),
                (-(other.group0()[1] * self.group0()[3]) - (other.group0()[3] * self.group0()[1])),
                (-(other.group0()[2] * self.group0()[3]) - (other.group0()[3] * self.group0()[2])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
                (other.group0()[3] * self.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self[e2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       75        0
    //    simd4       12       12        0
    // Totals...
    // yes simd       52       87        0
    //  no simd       88      123        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group1()[0] * self.group0()[3]),
                (other.group1()[1] * self.group0()[3]),
                (other.group1()[2] * self.group0()[3]),
                ((other.group1()[0] * self.group0()[0]) + (other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2]) - (other.group1()[3] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group0()[3] * self.group0()[0]) - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])),
                (-(other.group0()[1] * self.group0()[3]) - (other.group0()[3] * self.group0()[1]) + (other.group1()[0] * self.group0()[2])
                    - (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[2] * self.group0()[3]) - (other.group0()[3] * self.group0()[2]) - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])),
                (other.group1()[3] * self.group0()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) - (other.group1()[0] * self[e2]) + (other.group1()[3] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0]) - (other.group1()[1] * self[e2]) + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) - (other.group1()[2] * self[e2]) + (other.group1()[3] * self.group0()[2])),
                (other.group0()[3] * self.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self[e2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       23       54        0
    //    simd3        0        1        0
    //    simd4       13       13        0
    // Totals...
    // yes simd       36       68        0
    //  no simd       75      109        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self.group0()[3]) * other.group0()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group1()[0] * self.group0()[3]),
                (other.group1()[1] * self.group0()[3]),
                (other.group1()[2] * self.group0()[3]),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                ((other.group0()[0] * self[e2]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[1] * self[e2]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])),
                ((other.group0()[2] * self[e2]) - (other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0])),
                0.0,
            ]),
            // e1, e2, e3, e5
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) * -1.0),
                ((other.group0()[0] * self.group0()[2]) * -1.0),
                ((other.group0()[1] * self.group0()[0]) * -1.0),
                (other.group1()[2] * self.group0()[2]),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group1()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       59        0
    //    simd4       16       17        0
    // Totals...
    // yes simd       40       76        0
    //  no simd       88      127        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group1()[0] * self.group0()[3]),
                (other.group1()[1] * self.group0()[3]),
                (other.group1()[2] * self.group0()[3]),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])
                    + (other.group1()[3] * self.group0()[3])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(other.group1()[1] * self.group0()[2]) - (other.group1()[3] * self.group0()[0])),
                (-(other.group1()[2] * self.group0()[0]) - (other.group1()[3] * self.group0()[1])),
                (-(other.group1()[0] * self.group0()[1]) - (other.group1()[3] * self.group0()[2])),
                ((other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self[e2]) * other.group0())
                + (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) + (other.group0()[3] * self.group0()[0]) + (other.group1()[0] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[2])
                    + (other.group0()[2] * self.group0()[0])
                    + (other.group0()[3] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) + (other.group0()[3] * self.group0()[2]) + (other.group1()[2] * self.group0()[3])),
                (other.group0()[3] * self.group0()[3]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for RoundPoint {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       28        0
    //    simd3        2        4        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       21       41        0
    //  no simd       52       76        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                (other.group0()[3] * self.group0()[3]),
            ]),
            // e15, e25, e35, scalar
            (Simd32x4::from([0.0, 0.0, 0.0, ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]))])
                - (Simd32x4::from([self[e2], self[e2], self[e2], self.group0()[3]]) * other.group0())
                + (swizzle!(other.group0(), 3, 3, 3, 0) * swizzle!(self.group0(), 0, 1, 2, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for RoundPoint {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        9        0
    //    simd3        1        2        0
    //    simd4        3        5        0
    // Totals...
    // yes simd        6       16        0
    //  no simd       17       35        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other[e12345]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self[e2]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e1234
            (self.group0()[3] * other[e12345] * -1.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       64        0
    //    simd3        2        3        0
    //    simd4       14       14        0
    // Totals...
    // yes simd       48       81        0
    //  no simd       94      129        0
    fn sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (-(Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self[e2]) * -1.0),
                ((other.group0()[1] * self[e2]) * -1.0),
                ((other.group0()[2] * self[e2]) * -1.0),
                ((other.group1()[2] * self.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(other.group2()[2] * self.group0()[1]) - (other.group1()[0] * self[e2])),
                (-(other.group2()[0] * self.group0()[2]) - (other.group1()[1] * self[e2])),
                (-(other.group2()[1] * self.group0()[0]) - (other.group1()[2] * self[e2])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) + (other.group1()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group2()[0] * self.group0()[3]) + (other.group1()[1] * self.group0()[2])),
                ((other.group2()[1] * self.group0()[3]) + (other.group1()[2] * self.group0()[0])),
                ((other.group2()[2] * self.group0()[3]) + (other.group1()[0] * self.group0()[1])),
                (-(other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(self[e2]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       33       68        0
    //    simd3        2        3        0
    //    simd4       15       15        0
    // Totals...
    // yes simd       50       86        0
    //  no simd       99      137        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (-(Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self[e2]) * -1.0),
                ((other.group0()[1] * self[e2]) * -1.0),
                ((other.group0()[2] * self[e2]) * -1.0),
                ((other.group1()[2] * self.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (swizzle!(other.group1(), 3, 3, 3, 0) * swizzle!(self.group0(), 0, 1, 2, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group1()[0] * self[e2]) * -1.0),
                ((other.group1()[1] * self[e2]) * -1.0),
                ((other.group1()[2] * self[e2]) * -1.0),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) + (other.group1()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (swizzle!(other.group2(), 2, 0, 1, 3) * swizzle!(self.group0(), 1, 2, 0, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group1()[1] * self.group0()[2]) + (other.group2()[0] * self.group0()[3]) + (other.group2()[3] * self.group0()[0])),
                ((other.group1()[2] * self.group0()[0]) + (other.group2()[1] * self.group0()[3]) + (other.group2()[3] * self.group0()[1])),
                ((other.group1()[0] * self.group0()[1]) + (other.group2()[2] * self.group0()[3]) + (other.group2()[3] * self.group0()[2])),
                (-(other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2]) - (other.group2()[3] * self[e2])),
            ]) - (Simd32x4::from(self[e2]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       52        0
    //    simd3        2        3        0
    //    simd4       17       17        0
    // Totals...
    // yes simd       39       72        0
    //  no simd       94      129        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            ((Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[0] * self[e2]) + (other.group2()[0] * self.group0()[3])),
                ((other.group0()[1] * self[e2]) + (other.group2()[1] * self.group0()[3])),
                ((other.group0()[2] * self[e2]) + (other.group2()[2] * self.group0()[3])),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) - (swizzle!(other.group1(), 3, 3, 3, 0) * swizzle!(self.group0(), 0, 1, 2, 0))),
            // e235, e315, e125, e4
            (Simd32x4::from([
                (other.group1()[0] * self[e2]),
                (other.group1()[1] * self[e2]),
                (other.group1()[2] * self[e2]),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                ((other.group1()[2] * self.group0()[1]) * -1.0),
                ((other.group1()[0] * self.group0()[2]) * -1.0),
                ((other.group1()[1] * self.group0()[0]) * -1.0),
                (other.group2()[2] * self.group0()[2]),
            ]) - (Simd32x4::from(self[e2]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group2()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[1]]) * swizzle!(self.group0(), 2, 0, 1, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       23       65        0
    //    simd4       25       25        0
    // Totals...
    // yes simd       48       90        0
    //  no simd      123      165        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) * -1.0),
                ((other.group0()[0] * self.group0()[2]) * -1.0),
                ((other.group0()[1] * self.group0()[0]) * -1.0),
                (other.group3()[3] * self.group0()[3]),
            ]) + (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self[e2]]))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                + (swizzle!(other.group3(), 0, 1, 2, 2) * swizzle!(self.group0(), 3, 3, 3, 2))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[0] * self[e2]) + (other.group3()[2] * self.group0()[1])),
                ((other.group0()[1] * self[e2]) + (other.group3()[0] * self.group0()[2])),
                ((other.group0()[2] * self[e2]) + (other.group3()[1] * self.group0()[0])),
                (-(other.group1()[2] * self.group0()[2]) - (other.group2()[3] * self[e2])),
            ]) + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[1]]) * swizzle!(self.group0(), 2, 0, 1, 1))
                - (swizzle!(other.group1(), 3, 3, 3, 0) * swizzle!(self.group0(), 0, 1, 2, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group1()[0] * self[e2]) - (other.group2()[1] * self.group0()[2]) - (other.group3()[3] * self.group0()[0])),
                ((other.group1()[1] * self[e2]) - (other.group2()[2] * self.group0()[0]) - (other.group3()[3] * self.group0()[1])),
                ((other.group1()[2] * self[e2]) - (other.group2()[0] * self.group0()[1]) - (other.group3()[3] * self.group0()[2])),
                ((other.group2()[1] * self.group0()[1]) + (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(self[e2]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                + (swizzle!(other.group2(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self[e2]) + (other.group2()[0] * self.group0()[3])),
                (-(other.group0()[1] * self[e2]) + (other.group2()[1] * self.group0()[3])),
                (-(other.group0()[2] * self[e2]) + (other.group2()[2] * self.group0()[3])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (swizzle!(other.group1(), 1, 2, 0, 3) * swizzle!(self.group0(), 2, 0, 1, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       39        0
    //    simd4       12       16        0
    // Totals...
    // yes simd       28       55        0
    //  no simd       64      103        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self[e2]]) * Simd32x4::from(-1.0)),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self[e2] * -1.0)]),
            // e15, e25, e35, e1234
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[1] * self.group0()[3] * -1.0)]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self[e2]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       52        0
    //    simd4       11       11        0
    // Totals...
    // yes simd       35       63        0
    //  no simd       68       96        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[3]) - (other.group0()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group0()[3]) - (other.group0()[3] * self.group0()[2])),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                (other.group0()[3] * self.group0()[3]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self[e2])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       59        0
    //    simd4       16       17        0
    // Totals...
    // yes simd       40       76        0
    //  no simd       88      127        0
    fn sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group1()[0] * self.group0()[3]),
                (other.group1()[1] * self.group0()[3]),
                (other.group1()[2] * self.group0()[3]),
                ((other.group1()[0] * self.group0()[0]) + (other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2]) + (other.group1()[3] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[3] * self.group0()[0]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[1] * self.group0()[3]) - (other.group0()[3] * self.group0()[1]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[3]) - (other.group0()[3] * self.group0()[2]) - (other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0])),
                (other.group1()[3] * self.group0()[3]),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(other.group1()[0] * self[e2]) - (other.group1()[3] * self.group0()[0])),
                (-(other.group1()[1] * self[e2]) - (other.group1()[3] * self.group0()[1])),
                (-(other.group1()[2] * self[e2]) - (other.group1()[3] * self.group0()[2])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self[e2]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                + (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[3]) * other.group0()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       35       65        0
    //    simd3        0        2        0
    //    simd4       10       10        0
    // Totals...
    // yes simd       45       77        0
    //  no simd       75      111        0
    fn sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group0()[3]) * other.group0() * Simd32x3::from(-1.0)),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other.group1()[0] * self.group0()[3] * -1.0),
                (other.group1()[1] * self.group0()[3] * -1.0),
                (other.group1()[2] * self.group0()[3] * -1.0),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group0()[0] * self[e2]) + (other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1])),
                (-(other.group0()[1] * self[e2]) - (other.group1()[0] * self.group0()[2]) + (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[2] * self[e2]) + (other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) + (other.group1()[0] * self.group0()[3])),
                ((other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[1]) + (other.group1()[2] * self.group0()[3])),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       71        0
    //    simd4       13       15        0
    // Totals...
    // yes simd       49       86        0
    //  no simd       88      131        0
    fn sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]) * Simd32x4::from(-1.0)),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other.group1()[0] * self.group0()[3] * -1.0),
                (other.group1()[1] * self.group0()[3] * -1.0),
                (other.group1()[2] * self.group0()[3] * -1.0),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])
                    + (other.group1()[3] * self.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group0()[0] * self[e2]) + (other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1]) + (other.group1()[3] * self.group0()[0])),
                (-(other.group0()[1] * self[e2]) - (other.group1()[0] * self.group0()[2]) + (other.group1()[2] * self.group0()[0]) + (other.group1()[3] * self.group0()[1])),
                (-(other.group0()[2] * self[e2]) + (other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0]) + (other.group1()[3] * self.group0()[2])),
                (other.group0()[3] * self.group0()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) + (other.group0()[3] * self.group0()[0]) + (other.group1()[0] * self.group0()[3])),
                ((other.group0()[2] * self.group0()[0]) + (other.group0()[3] * self.group0()[1]) + (other.group1()[1] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[1]) + (other.group0()[3] * self.group0()[2]) + (other.group1()[2] * self.group0()[3])),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self[e2]]) * swizzle!(other.group0(), 2, 0, 1, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for RoundPoint {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       60      114        0
    //    simd2        6        6        0
    //    simd3       28       32        0
    //    simd4       25       25        0
    // Totals...
    // yes simd      119      177        0
    //  no simd      256      322        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                (-(other.group1()[3] * self[e2]) - (self.group0()[3] * other[e1])),
                ((other.group9()[3] * self.group0()[3]) + (other[e45] * self[e2])),
            ]) + (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group1()[0], other.group9()[0]]))
                + (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group1()[1], other.group9()[1]]))
                + (Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group1()[2], other.group9()[2]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group4()[0] * self[e2]) + (other.group3()[0] * self.group0()[3])),
                (-(other.group4()[1] * self[e2]) + (other.group3()[1] * self.group0()[3])),
                (-(other.group4()[2] * self[e2]) + (other.group3()[2] * self.group0()[3])),
                (-(other.group4()[1] * self.group0()[1]) - (other.group4()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(other.group0()[0]) * self.group0())
                + (Simd32x4::from([other.group5()[1], other.group5()[2], other.group5()[0], other.group3()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group4()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e5
            ((other.group0()[0] * self[e2]) + (other.group3()[0] * self.group0()[0]) + (other.group3()[1] * self.group0()[1]) + (other.group3()[2] * self.group0()[2])
                - (other.group3()[3] * self[e2])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                (self.group0()[0] * other[e1]),
                (self.group0()[1] * other[e1]),
                (self.group0()[2] * other[e1]),
                ((other.group6()[2] * self.group0()[2]) * -1.0),
            ]) - (Simd32x4::from(self[e2]) * other.group1())
                + (Simd32x4::from([other.group8()[1], other.group8()[2], other.group8()[0], other[e1]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group8()[2], other.group8()[0], other.group8()[1], other.group6()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self[e2], self[e2], self[e2], self.group0()[1]]) * swizzle!(other.group6(), 0, 1, 2, 1))),
            // e41, e42, e43
            (-(Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group7(), 2, 0, 1))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group7(), 1, 2, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                (-(other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])),
                ((other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])),
                (-(other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0])),
            ]) - (Simd32x3::from(other.group6()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from(self.group0()[3]) * other.group8())
                - (Simd32x3::from(self[e2]) * other.group7())),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group4()[0] * self[e2]) + (other.group9()[2] * self.group0()[1])),
                ((other.group4()[1] * self[e2]) + (other.group9()[0] * self.group0()[2])),
                ((other.group4()[2] * self[e2]) + (other.group9()[1] * self.group0()[0])),
                (-(other.group5()[2] * self.group0()[2]) - (other[e45] * self[e2])),
            ]) + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group9()[3]]))
                - (Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group5()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))
                - (Simd32x4::from([other.group9()[1], other.group9()[2], other.group9()[0], other.group5()[1]]) * swizzle!(self.group0(), 2, 0, 1, 1))),
            // e423, e431, e412
            ((Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                + (Simd32x3::from(self.group0()[3]) * other.group5())
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group4(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group4(), 1, 2, 0))),
            // e235, e315, e125
            (Simd32x3::from([
                (-(other.group3()[1] * self.group0()[2]) + (other.group3()[2] * self.group0()[1])),
                ((other.group3()[0] * self.group0()[2]) - (other.group3()[2] * self.group0()[0])),
                (-(other.group3()[0] * self.group0()[1]) + (other.group3()[1] * self.group0()[0])),
            ]) - (Simd32x3::from(other.group9()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from(self[e2]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                + (Simd32x3::from(self[e2]) * other.group5())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[0]) + (other.group8()[0] * self.group0()[3]) + (other.group6()[1] * self.group0()[2])),
                ((other.group0()[1] * self.group0()[1]) + (other.group8()[1] * self.group0()[3]) + (other.group6()[2] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[2]) + (other.group8()[2] * self.group0()[3]) + (other.group6()[0] * self.group0()[1])),
                (-(other.group8()[1] * self.group0()[1]) - (other.group8()[2] * self.group0()[2]) - (other.group6()[3] * self[e2])),
            ]) - (Simd32x4::from(self[e2]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group0()[1]]))
                - (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group8()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e1234
            (-(other.group0()[1] * self.group0()[3])
                + (other.group7()[0] * self.group0()[0])
                + (other.group7()[1] * self.group0()[1])
                + (other.group7()[2] * self.group0()[2])
                + (other.group6()[3] * self.group0()[3])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for RoundPoint {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       38        0
    //    simd3        2        4        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       21       50        0
    //  no simd       49       82        0
    fn sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = CircleRotor::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                (other.group0()[3] * self.group0()[3]),
            ]),
            // e235, e315, e125, e12345
            Simd32x4::from([
                (-(other.group0()[0] * self[e2]) - (other.group0()[3] * self.group0()[0])),
                (-(other.group0()[1] * self[e2]) - (other.group0()[3] * self.group0()[1])),
                (-(other.group0()[2] * self[e2]) - (other.group0()[3] * self.group0()[2])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) + (other.group0()[3] * self.group0()[3])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for RoundPoint {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       22        0
    //    simd3        3        5        0
    //    simd4       10       11        0
    // Totals...
    // yes simd       21       38        0
    //  no simd       57       81        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            (-(Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))),
            // e23, e31, e12, e45
            ((Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other[e2]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self[e2]]) * swizzle!(other.group0(), 1, 2, 0, 3))),
            // e15, e25, e35, scalar
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (self.group0()[3] * other[e2])),
            ]) - (Simd32x4::from(self[e2]) * other.group0())
                + (Simd32x4::from([other[e2], other[e2], other[e2], other.group0()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for RoundPoint {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        4        0
    //    simd3        1        2        0
    //    simd4        3        5        0
    // Totals...
    // yes simd        6       11        0
    //  no simd       17       30        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = RoundPoint::from_groups(/* e1, e2, e3, e4 */ (Simd32x4::from(other[scalar]) * self.group0()), /* e5 */ (self[e2] * other[scalar]));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for RoundPoint {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       40        0
    //    simd3        3        5        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       21       54        0
    //  no simd       54       91        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = CircleRotor::from_groups(
            // e423, e431, e412
            ((Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(other[e4315]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group0()[1]) * -1.0),
                ((self.group0()[0] * other.group0()[2]) * -1.0),
                ((self.group0()[1] * other.group0()[0]) * -1.0),
                ((self[e2] * other[e4315]) * -1.0),
            ]) + (swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))),
            // e235, e315, e125, e12345
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (other.group0()[0] * self[e2])),
                (-(self.group0()[1] * other.group0()[3]) - (other.group0()[1] * self[e2])),
                (-(self.group0()[2] * other.group0()[3]) - (other.group0()[2] * self[e2])),
                ((self.group0()[0] * other.group0()[0])
                    + (self.group0()[1] * other.group0()[1])
                    + (self.group0()[2] * other.group0()[2])
                    + (self.group0()[3] * other.group0()[3])
                    + (self[e2] * other[e4315])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       63        0
    //    simd4       24       25        0
    // Totals...
    // yes simd       56       88        0
    //  no simd      128      163        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(self.group0()[2] * other.group0()[1]) - (self.group0()[3] * other.group1()[0])),
                (-(self.group0()[1] * other.group3()[3]) - (self.group0()[3] * other.group1()[1])),
                (-(self.group0()[2] * other.group3()[3]) - (self.group0()[3] * other.group1()[2])),
                ((self.group0()[2] * other.group3()[2]) - (other.group3()[3] * self[e2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group3()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group3()[3], other.group0()[2], other.group0()[0], other.group2()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))
                + (swizzle!(self.group0(), 3, 3, 3, 1) * swizzle!(other.group3(), 0, 1, 2, 1))),
            // e23, e31, e12, e45
            (-(Simd32x4::from(self[e2]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group3()[3]]))
                - (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group1()[0]]) * swizzle!(self.group0(), 0, 0, 1, 0))
                - (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[2]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group1()[1]]) * swizzle!(self.group0(), 2, 1, 2, 1))
                + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(other.group1()[0] * self[e2]) - (other.group3()[0] * self[e2])),
                (-(other.group1()[1] * self[e2]) - (other.group3()[1] * self[e2])),
                (-(other.group1()[2] * self[e2]) - (other.group3()[2] * self[e2])),
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group1()[3])),
            ]) + (Simd32x4::from([other.group2()[1], other.group2()[3], other.group2()[3], other.group0()[1]]) * swizzle!(self.group0(), 2, 1, 2, 1))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group2()[3], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group0(), 0, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[2] * other.group1()[1]) + (self.group0()[3] * other.group2()[0])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group2()[1])),
                ((self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group2()[2])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2]) - (other.group1()[3] * self[e2])),
            ]) - (Simd32x4::from(self[e2]) * other.group0())
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       59        0
    //    simd4       28       28        0
    // Totals...
    // yes simd       44       87        0
    //  no simd      128      171        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) * -1.0),
                ((self.group0()[2] * other.group0()[0]) * -1.0),
                ((self.group0()[0] * other.group0()[1]) * -1.0),
                (other.group2()[3] * self[e2]),
            ]) + (Simd32x4::from(self.group0()[3]) * other.group3())
                + (Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group3()[1]]) * swizzle!(self.group0(), 2, 1, 2, 1))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[2]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group0(), 0, 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[3] * other.group2()[0]) + (other.group0()[0] * self[e2])),
                ((self.group0()[3] * other.group2()[1]) + (other.group0()[1] * self[e2])),
                ((self.group0()[3] * other.group2()[2]) + (other.group0()[2] * self[e2])),
                (-(self.group0()[2] * other.group1()[2]) - (other.group2()[3] * self[e2])),
            ]) - (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group1()[0]]) * swizzle!(self.group0(), 0, 0, 1, 0))
                - (Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group1()[1]]) * swizzle!(self.group0(), 2, 1, 2, 1))
                + (swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group3(), 2, 0, 1, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group0()[0] * other.group3()[3]) - (self.group0()[2] * other.group2()[1])),
                (-(self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group3()[3])),
                (-(self.group0()[1] * other.group2()[0]) - (self.group0()[2] * other.group3()[3])),
                ((self.group0()[1] * other.group2()[1]) + (self.group0()[2] * other.group2()[2])),
            ]) + (Simd32x4::from(self[e2]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                - (Simd32x4::from(self[e2]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                + (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group2(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (self.group0()[3] * other.group2()[0]),
                (self.group0()[3] * other.group2()[1]),
                (self.group0()[3] * other.group2()[2]),
                ((self.group0()[2] * other.group0()[2]) * -1.0),
            ]) + (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group0()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))
                + (Simd32x4::from([other.group1()[1], other.group0()[3], other.group0()[3], other.group1()[3]]) * swizzle!(self.group0(), 2, 1, 2, 3))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self[e2], self[e2], self[e2], self.group0()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl InfixSandwich for Scalar {}
impl Sandwich<AntiCircleRotor> for Scalar {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        2        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0       22        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[scalar]) * other.group0()),
            // e23, e31, e12, e45
            (Simd32x4::from(self[scalar]) * other.group1()),
            // e15, e25, e35, scalar
            (Simd32x4::from(self[scalar]) * other.group2()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for Scalar {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        2        0
    //    simd4        0        6        0
    // Totals...
    // yes simd        0        8        0
    //  no simd        0       30        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[scalar]) * other.group0()),
            // e415, e425, e435, e321
            (Simd32x4::from(self[scalar]) * other.group1()),
            // e235, e315, e125, e4
            (Simd32x4::from(self[scalar]) * other.group2()),
            // e1, e2, e3, e5
            (Simd32x4::from(self[scalar]) * other.group3()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for Scalar {
    type Output = AntiDualNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        2        0
    // no simd        0        4        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDualNum::from_groups(/* e1234, scalar */ (Simd32x2::from(self[scalar]) * other.group0()));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for Scalar {
    type Output = AntiFlatPoint;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ (Simd32x4::from(self[scalar]) * other.group0()));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for Scalar {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from(self[scalar]) * other.group0()),
            // e1, e2, e3, e5
            (Simd32x4::from(self[scalar]) * other.group1()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for Scalar {
    type Output = AntiLine;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        4        0
    // no simd        0       12        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiLine::from_groups(
            // e23, e31, e12
            (Simd32x3::from(self[scalar]) * other.group0()),
            // e15, e25, e35
            (Simd32x3::from(self[scalar]) * other.group1()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for Scalar {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from(self[scalar]) * other.group0()),
            // e15, e25, e35, e3215
            (Simd32x4::from(self[scalar]) * other.group1()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for Scalar {
    type Output = AntiPlane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiPlane::from_groups(/* e1, e2, e3, e5 */ (Simd32x4::from(self[scalar]) * other.group0()));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for Scalar {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiScalar::from_groups(/* e12345 */ (other[e12345] * self[scalar]));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for Scalar {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        4        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0       20        0
    fn sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Circle::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[scalar]) * other.group0()),
            // e415, e425, e435, e321
            (Simd32x4::from(self[scalar]) * other.group1()),
            // e235, e315, e125
            (Simd32x3::from(self[scalar]) * other.group2()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for Scalar {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        2        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0       22        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = CircleRotor::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[scalar]) * other.group0()),
            // e415, e425, e435, e321
            (Simd32x4::from(self[scalar]) * other.group1()),
            // e235, e315, e125, e12345
            (Simd32x4::from(self[scalar]) * other.group2()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for Scalar {
    type Output = Dipole;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        4        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0       20        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Dipole::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[scalar]) * other.group0()),
            // e23, e31, e12, e45
            (Simd32x4::from(self[scalar]) * other.group1()),
            // e15, e25, e35
            (Simd32x3::from(self[scalar]) * other.group2()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for Scalar {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        2        0
    //    simd4        0        6        0
    // Totals...
    // yes simd        0        8        0
    //  no simd        0       30        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[scalar]) * other.group0()),
            // e23, e31, e12, e45
            (Simd32x4::from(self[scalar]) * other.group1()),
            // e15, e25, e35, e1234
            (Simd32x4::from(self[scalar]) * other.group2()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[scalar]) * other.group3()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for Scalar {
    type Output = DualNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        2        0
    // no simd        0        4        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DualNum::from_groups(/* e4, e12345 */ (Simd32x2::from(self[scalar]) * other.group0()));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for Scalar {
    type Output = FlatPoint;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = FlatPoint::from_groups(/* e15, e25, e35, e45 */ (Simd32x4::from(self[scalar]) * other.group0()));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for Scalar {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(self[scalar]) * other.group0()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[scalar]) * other.group1()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for Scalar {
    type Output = Line;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        4        0
    // no simd        0       12        0
    fn sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Line::from_groups(
            // e415, e425, e435
            (Simd32x3::from(self[scalar]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self[scalar]) * other.group1()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for Scalar {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(self[scalar]) * other.group0()),
            // e235, e315, e125, e5
            (Simd32x4::from(self[scalar]) * other.group1()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for Scalar {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        4        0
    //    simd2        0        2        0
    //    simd3        0        8        0
    //    simd4        0        8        0
    // Totals...
    // yes simd        0       22        0
    //  no simd        0       64        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from(self[scalar]) * other.group0()),
            // e1, e2, e3, e4
            (Simd32x4::from(self[scalar]) * other.group1()),
            // e5
            (other[e1] * self[scalar]),
            // e15, e25, e35, e45
            (Simd32x4::from(self[scalar]) * other.group3()),
            // e41, e42, e43
            (Simd32x3::from(self[scalar]) * other.group4()),
            // e23, e31, e12
            (Simd32x3::from(self[scalar]) * other.group5()),
            // e415, e425, e435, e321
            (Simd32x4::from(self[scalar]) * other.group6()),
            // e423, e431, e412
            (Simd32x3::from(self[scalar]) * other.group7()),
            // e235, e315, e125
            (Simd32x3::from(self[scalar]) * other.group8()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[scalar]) * other.group9()),
            // e1234
            (other[e45] * self[scalar]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for Scalar {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (Simd32x4::from(self[scalar]) * other.group0()));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for Scalar {
    type Output = RoundPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       10        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = RoundPoint::from_groups(/* e1, e2, e3, e4 */ (Simd32x4::from(self[scalar]) * other.group0()), /* e5 */ (other[e2] * self[scalar]));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for Scalar {
    type Output = Scalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Scalar::from_groups(/* scalar */ (other[scalar] * self[scalar]));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for Scalar {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       10        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[scalar]) * other.group0()),
            // e1234
            (self[scalar] * other[e4315]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for Scalar {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        8        0
    // no simd        0       32        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self[scalar]) * other.group0()),
            // e415, e425, e435, e321
            (Simd32x4::from(self[scalar]) * other.group1()),
            // e235, e315, e125, e5
            (Simd32x4::from(self[scalar]) * other.group2()),
            // e1, e2, e3, e4
            (Simd32x4::from(self[scalar]) * other.group3()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for Scalar {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        8        0
    // no simd        0       32        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self[scalar]) * other.group0()),
            // e23, e31, e12, e45
            (Simd32x4::from(self[scalar]) * other.group1()),
            // e15, e25, e35, e1234
            (Simd32x4::from(self[scalar]) * other.group2()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[scalar]) * other.group3()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl InfixSandwich for Sphere {}
impl Sandwich<AntiCircleRotor> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       33       65        0
    //    simd3        2        3        0
    //    simd4       15       15        0
    // Totals...
    // yes simd       50       83        0
    //  no simd       99      134        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from(self[e4315]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group1()[3] * self.group0()[0]) + (other.group2()[0] * self[e4315])),
                ((other.group0()[1] * self.group0()[3]) + (other.group1()[3] * self.group0()[1]) + (other.group2()[1] * self[e4315])),
                ((other.group0()[2] * self.group0()[3]) + (other.group1()[3] * self.group0()[2]) + (other.group2()[2] * self[e4315])),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group2()[2] * self.group0()[1]) * -1.0),
                ((other.group2()[0] * self.group0()[2]) * -1.0),
                ((other.group2()[1] * self.group0()[0]) * -1.0),
                ((other.group0()[2] * self.group0()[2]) + (other.group1()[3] * self[e4315]) + (other.group2()[3] * self[e4315])),
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[1]]) * swizzle!(self.group0(), 2, 0, 1, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group1()[1] * self.group0()[2]) + (other.group2()[3] * self.group0()[0])),
                ((other.group1()[2] * self.group0()[0]) + (other.group2()[3] * self.group0()[1])),
                ((other.group1()[0] * self.group0()[1]) + (other.group2()[3] * self.group0()[2])),
                (-(other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (Simd32x4::from([self[e4315], self[e4315], self[e4315], self.group0()[0]]) * swizzle!(other.group2(), 0, 1, 2, 0))
                - (swizzle!(other.group1(), 2, 0, 1, 3) * swizzle!(self.group0(), 1, 2, 0, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       31       73        0
    //    simd4       23       23        0
    // Totals...
    // yes simd       54       96        0
    //  no simd      123      165        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) - (other.group2()[3] * self.group0()[0]) - (other.group3()[0] * self[e4315])),
                (-(other.group0()[2] * self.group0()[0]) - (other.group2()[3] * self.group0()[1]) - (other.group3()[1] * self[e4315])),
                (-(other.group0()[0] * self.group0()[1]) - (other.group2()[3] * self.group0()[2]) - (other.group3()[2] * self[e4315])),
                ((other.group3()[0] * self.group0()[0]) + (other.group3()[1] * self.group0()[1]) + (other.group3()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self[e4315]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group3()[1] * self.group0()[2]) * -1.0),
                ((other.group3()[2] * self.group0()[0]) * -1.0),
                ((other.group3()[0] * self.group0()[1]) * -1.0),
                (other.group1()[2] * self.group0()[2]),
            ]) + (Simd32x4::from(self[e4315]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[3]]) * self.group0())
                + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group2()[1] * self.group0()[2]) + (other.group3()[0] * self.group0()[3]) + (other.group3()[3] * self.group0()[0])),
                ((other.group2()[2] * self.group0()[0]) + (other.group3()[1] * self.group0()[3]) + (other.group3()[3] * self.group0()[1])),
                ((other.group2()[0] * self.group0()[1]) + (other.group3()[2] * self.group0()[3]) + (other.group3()[3] * self.group0()[2])),
                (-(other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self.group0()[3]) * other.group1())
                - (swizzle!(other.group2(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) + (other.group2()[0] * self[e4315])),
                (-(other.group0()[1] * self.group0()[3]) + (other.group2()[1] * self[e4315])),
                (-(other.group0()[2] * self.group0()[3]) + (other.group2()[2] * self[e4315])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self[e4315]]) * swizzle!(other.group1(), 1, 2, 0, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       39        0
    //    simd4       11       14        0
    // Totals...
    // yes simd       31       53        0
    //  no simd       64       95        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(other.group0()[0]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group0()[3])]),
            // e15, e25, e35, e1234
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[1] * self[e4315])]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other.group0()[1]) * self.group0()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       50        0
    //    simd4       13       13        0
    // Totals...
    // yes simd       29       63        0
    //  no simd       68      102        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self[e4315]) - (other.group0()[3] * self.group0()[0])),
                ((other.group0()[1] * self[e4315]) - (other.group0()[3] * self.group0()[1])),
                ((other.group0()[2] * self[e4315]) - (other.group0()[3] * self.group0()[2])),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
                (other.group0()[3] * self[e4315] * -1.0),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[0] * self[e4315]),
                (other.group0()[1] * self[e4315]),
                (other.group0()[2] * self[e4315]),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])
                    + (other.group0()[3] * self.group0()[3])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       66        0
    //    simd4       15       17        0
    // Totals...
    // yes simd       43       83        0
    //  no simd       88      134        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group1()[0] * self[e4315] * -1.0),
                (other.group1()[1] * self[e4315] * -1.0),
                (other.group1()[2] * self[e4315] * -1.0),
                ((other.group1()[0] * self.group0()[0]) + (other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2]) + (other.group1()[3] * self[e4315])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self[e4315]) - (other.group0()[3] * self.group0()[0]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[1] * self[e4315]) - (other.group0()[3] * self.group0()[1]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])),
                ((other.group0()[2] * self[e4315]) - (other.group0()[3] * self.group0()[2]) - (other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0])),
                (other.group1()[3] * self[e4315]),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group1()[0] * self.group0()[3]) + (other.group1()[3] * self.group0()[0])),
                ((other.group1()[1] * self.group0()[3]) + (other.group1()[3] * self.group0()[1])),
                ((other.group1()[2] * self.group0()[3]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) + (swizzle!(other.group0(), 1, 2, 0, 3) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from(self[e4315]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       31       59        0
    //    simd3        0        1        0
    //    simd4       11       11        0
    // Totals...
    // yes simd       42       71        0
    //  no simd       75      106        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[e4315]) * other.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other.group1()[0] * self[e4315]),
                (other.group1()[1] * self[e4315]),
                (other.group1()[2] * self[e4315]),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1])),
                ((other.group0()[1] * self.group0()[3]) - (other.group1()[0] * self.group0()[2]) + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[3]) + (other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group1()[0] * self[e4315])),
                ((other.group0()[2] * self.group0()[0]) - (other.group1()[1] * self[e4315])),
                ((other.group0()[0] * self.group0()[1]) - (other.group1()[2] * self[e4315])),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       62        0
    //    simd4       14       15        0
    // Totals...
    // yes simd       46       77        0
    //  no simd       88      122        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self[e4315]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other.group1()[0] * self[e4315]),
                (other.group1()[1] * self[e4315]),
                (other.group1()[2] * self[e4315]),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]) - (other.group1()[3] * self[e4315])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1]) + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[3]) - (other.group1()[0] * self.group0()[2]) + (other.group1()[2] * self.group0()[0]) + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group0()[3]) + (other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0]) + (other.group1()[3] * self.group0()[2])),
                (other.group0()[3] * self[e4315]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (other.group0()[3] * self.group0()[0]),
                (other.group0()[3] * self.group0()[1]),
                (other.group0()[3] * self.group0()[2]),
                ((other.group1()[2] * self.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self[e4315], self[e4315], self[e4315], self.group0()[1]]) * swizzle!(other.group1(), 0, 1, 2, 1))
                + (swizzle!(other.group0(), 1, 2, 0, 3) * swizzle!(self.group0(), 2, 0, 1, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for Sphere {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       27        0
    //    simd3        2        5        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       24       41        0
    //  no simd       55       78        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = CircleRotor::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[e4315]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]) * Simd32x3::from(-1.0)),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                (other.group0()[3] * self[e4315]),
            ]),
            // e235, e315, e125, e12345
            (Simd32x4::from([0.0, 0.0, 0.0, ((other.group0()[2] * self.group0()[2]) + (other.group0()[3] * self[e4315]))])
                + (swizzle!(other.group0(), 0, 1, 2, 0) * swizzle!(self.group0(), 3, 3, 3, 0))
                + (swizzle!(other.group0(), 3, 3, 3, 1) * swizzle!(self.group0(), 0, 1, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for Sphere {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       20        0
    //    simd3        1        2        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        9       25        0
    //  no simd       14       38        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = RoundPoint::from_groups(
            // e1, e2, e3, e4
            (Simd32x4::from(other[e12345]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self[e4315]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e5
            (self.group0()[3] * other[e12345]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       50        0
    //    simd3        2        3        0
    //    simd4       19       19        0
    // Totals...
    // yes simd       33       72        0
    //  no simd       94      135        0
    fn sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            ((Simd32x3::from(self[e4315]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group2()[0] * self[e4315]) - (other.group1()[3] * self.group0()[0])),
                ((other.group2()[1] * self[e4315]) - (other.group1()[3] * self.group0()[1])),
                ((other.group2()[2] * self[e4315]) - (other.group1()[3] * self.group0()[2])),
                ((other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))),
            // e235, e315, e125, e4
            (Simd32x4::from([
                ((other.group2()[2] * self.group0()[1]) * -1.0),
                ((other.group2()[0] * self.group0()[2]) * -1.0),
                ((other.group2()[1] * self.group0()[0]) * -1.0),
                ((other.group0()[2] * self.group0()[2]) - (other.group1()[3] * self[e4315])),
            ]) + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                (other.group2()[0] * self[e4315]),
                (other.group2()[1] * self[e4315]),
                (other.group2()[2] * self[e4315]),
                ((other.group2()[2] * self.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[1]]) * swizzle!(self.group0(), 2, 0, 1, 1))
                + (swizzle!(other.group1(), 2, 0, 1, 3) * swizzle!(self.group0(), 1, 2, 0, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       46        0
    //    simd3        2        3        0
    //    simd4       20       21        0
    // Totals...
    // yes simd       35       70        0
    //  no simd       99      139        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            ((Simd32x3::from(self[e4315]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group1()[3] * self.group0()[0]) + (other.group2()[0] * self[e4315])),
                (-(other.group1()[3] * self.group0()[1]) + (other.group2()[1] * self[e4315])),
                (-(other.group1()[3] * self.group0()[2]) + (other.group2()[2] * self[e4315])),
                ((other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))),
            // e235, e315, e125, e4
            (Simd32x4::from([
                ((other.group2()[2] * self.group0()[1]) * -1.0),
                ((other.group2()[0] * self.group0()[2]) * -1.0),
                ((other.group2()[1] * self.group0()[0]) * -1.0),
                ((other.group0()[2] * self.group0()[2]) - (other.group1()[3] * self[e4315]) + (other.group2()[3] * self[e4315])),
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[1]]) * swizzle!(self.group0(), 2, 0, 1, 1))),
            // e1, e2, e3, e5
            (-(Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[1]]) * swizzle!(self.group0(), 2, 0, 1, 1))
                + (Simd32x4::from([self[e4315], self[e4315], self[e4315], self.group0()[3]]) * other.group2())
                + (swizzle!(other.group1(), 2, 0, 1, 3) * swizzle!(self.group0(), 1, 2, 0, 3))
                - (swizzle!(other.group2(), 3, 3, 3, 2) * swizzle!(self.group0(), 0, 1, 2, 2))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       68        0
    //    simd3        2        3        0
    //    simd4       13       13        0
    // Totals...
    // yes simd       51       84        0
    //  no simd       94      129        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from(self[e4315]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group2()[0] * self[e4315]) + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[3]) + (other.group2()[1] * self[e4315]) + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group0()[3]) + (other.group2()[2] * self[e4315]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group2()[2] * self.group0()[1]) * -1.0),
                ((other.group2()[0] * self.group0()[2]) * -1.0),
                ((other.group2()[1] * self.group0()[0]) * -1.0),
                ((other.group0()[2] * self.group0()[2]) + (other.group1()[3] * self[e4315])),
            ]) + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group2()[0] * self[e4315]) + (other.group1()[1] * self.group0()[2])),
                ((other.group0()[1] * self.group0()[3]) - (other.group2()[1] * self[e4315]) + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[3]) - (other.group2()[2] * self[e4315]) + (other.group1()[0] * self.group0()[1])),
                (-(other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2]) - (other.group1()[3] * self.group0()[3])),
            ]) - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       35       69        0
    //    simd4       22       22        0
    // Totals...
    // yes simd       57       91        0
    //  no simd      123      157        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (other.group3()[0] * self[e4315]),
                (other.group3()[1] * self[e4315]),
                (other.group3()[2] * self[e4315]),
                ((other.group3()[2] * self.group0()[2]) * -1.0),
            ]) + (Simd32x4::from(self[e4315]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group3()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group1()[3] * self.group0()[0]) + (other.group2()[0] * self[e4315]) + (other.group3()[1] * self.group0()[2])),
                ((other.group1()[3] * self.group0()[1]) + (other.group2()[1] * self[e4315]) + (other.group3()[2] * self.group0()[0])),
                ((other.group1()[3] * self.group0()[2]) + (other.group2()[2] * self[e4315]) + (other.group3()[0] * self.group0()[1])),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2]) - (other.group3()[3] * self[e4315])),
            ]) + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(other.group2()[2] * self.group0()[1]) - (other.group3()[0] * self.group0()[3])),
                (-(other.group2()[0] * self.group0()[2]) - (other.group3()[1] * self.group0()[3])),
                (-(other.group2()[1] * self.group0()[0]) - (other.group3()[2] * self.group0()[3])),
                (other.group1()[3] * self[e4315]),
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[1]]) * swizzle!(self.group0(), 2, 0, 1, 1))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group0()[2]]) * swizzle!(self.group0(), 0, 1, 2, 2))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group1()[1] * self.group0()[2])),
                ((other.group0()[1] * self.group0()[3]) + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[3]) + (other.group1()[0] * self.group0()[1])),
                (-(other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([self[e4315], self[e4315], self[e4315], self.group0()[0]]) * swizzle!(other.group2(), 0, 1, 2, 0))
                - (swizzle!(other.group1(), 2, 0, 1, 3) * swizzle!(self.group0(), 1, 2, 0, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       38        0
    //    simd4       13       17        0
    // Totals...
    // yes simd       25       55        0
    //  no simd       64      106        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(other.group0()[0]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group0()[3] * -1.0)]),
            // e235, e315, e125, e5
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[1] * self.group0()[3])]),
            // e1, e2, e3, e4
            (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self[e4315]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       59        0
    //    simd4       10       10        0
    // Totals...
    // yes simd       38       69        0
    //  no simd       68       99        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self[e4315]) + (other.group0()[3] * self.group0()[0])),
                ((other.group0()[1] * self[e4315]) + (other.group0()[3] * self.group0()[1])),
                ((other.group0()[2] * self[e4315]) + (other.group0()[3] * self.group0()[2])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
                (other.group0()[3] * self[e4315]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self[e4315] * -1.0),
                (other.group0()[1] * self[e4315] * -1.0),
                (other.group0()[2] * self[e4315] * -1.0),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group0()[3] * self.group0()[3])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44       81        0
    //    simd4       11       11        0
    // Totals...
    // yes simd       55       92        0
    //  no simd       88      125        0
    fn sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group1()[0] * self[e4315]),
                (other.group1()[1] * self[e4315]),
                (other.group1()[2] * self[e4315]),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2]) + (other.group1()[3] * self[e4315])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self[e4315]) + (other.group0()[3] * self.group0()[0]) + (other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1])),
                ((other.group0()[1] * self[e4315]) + (other.group0()[3] * self.group0()[1]) - (other.group1()[0] * self.group0()[2]) + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[2] * self[e4315]) + (other.group0()[3] * self.group0()[2]) + (other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0])),
                (other.group1()[3] * self[e4315] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) - (other.group1()[0] * self.group0()[3]) + (other.group1()[3] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0]) - (other.group1()[1] * self.group0()[3])
                    + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) - (other.group1()[2] * self.group0()[3]) + (other.group1()[3] * self.group0()[2])),
                (other.group0()[3] * self[e4315]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self[e4315] * -1.0),
                (other.group0()[1] * self[e4315] * -1.0),
                (other.group0()[2] * self[e4315] * -1.0),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group0()[3] * self.group0()[3])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       52        0
    //    simd3        0        1        0
    //    simd4       14       14        0
    // Totals...
    // yes simd       33       67        0
    //  no simd       75      111        0
    fn sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[e4315]) * other.group0()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group1()[0] * self[e4315]),
                (other.group1()[1] * self[e4315]),
                (other.group1()[2] * self[e4315]),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1])),
                ((other.group0()[1] * self.group0()[3]) - (other.group1()[0] * self.group0()[2]) + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[3]) + (other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0])),
                0.0,
            ]),
            // e1, e2, e3, e5
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) + (other.group1()[0] * self[e4315])),
                ((other.group0()[0] * self.group0()[2]) + (other.group1()[1] * self[e4315])),
                ((other.group0()[1] * self.group0()[0]) + (other.group1()[2] * self[e4315])),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       63        0
    //    simd4       15       16        0
    // Totals...
    // yes simd       43       79        0
    //  no simd       88      127        0
    fn sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self[e4315]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group1()[0] * self[e4315]),
                (other.group1()[1] * self[e4315]),
                (other.group1()[2] * self[e4315]),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) + (other.group1()[3] * self[e4315])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group1()[1] * self.group0()[2]) + (other.group1()[3] * self.group0()[0])),
                ((other.group1()[2] * self.group0()[0]) + (other.group1()[3] * self.group0()[1])),
                ((other.group1()[0] * self.group0()[1]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self.group0()[3]) * other.group0())
                - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) - (other.group0()[3] * self.group0()[0]) + (other.group1()[0] * self[e4315])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) - (other.group0()[3] * self.group0()[1]) + (other.group1()[1] * self[e4315])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) - (other.group0()[3] * self.group0()[2]) + (other.group1()[2] * self[e4315])),
                (other.group0()[3] * self[e4315]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for Sphere {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       62      111        0
    //    simd2        4        4        0
    //    simd3       30       36        0
    //    simd4       24       24        0
    // Totals...
    // yes simd      120      175        0
    //  no simd      256      323        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                (-(other.group9()[0] * self.group0()[0]) - (other.group9()[1] * self.group0()[1]) - (other.group9()[2] * self.group0()[2])),
                ((other.group1()[0] * self.group0()[0]) + (other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x2::from(self.group0()[3]) * Simd32x2::from([other[e45], other.group1()[3]]))
                + (Simd32x2::from(self[e4315]) * Simd32x2::from([other.group9()[3], other[e1]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[1] * self.group0()[0]) - (other.group7()[0] * self.group0()[3])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group7()[1] * self.group0()[3])),
                (-(other.group0()[1] * self.group0()[2]) - (other.group7()[2] * self.group0()[3])),
                ((other.group7()[1] * self.group0()[1]) + (other.group7()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self[e4315]) * Simd32x4::from([other.group8()[0], other.group8()[1], other.group8()[2], other.group0()[1]]))
                + (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group7()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self[e4315]]) * swizzle!(other.group6(), 1, 2, 0, 3))),
            // e5
            ((other.group0()[1] * self.group0()[3]) - (other.group8()[0] * self.group0()[0]) - (other.group8()[1] * self.group0()[1]) - (other.group8()[2] * self.group0()[2])
                + (other.group6()[3] * self.group0()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group3()[1] * self.group0()[2]) + (other.group9()[3] * self.group0()[0])),
                ((other.group3()[2] * self.group0()[0]) + (other.group9()[3] * self.group0()[1])),
                ((other.group3()[0] * self.group0()[1]) + (other.group9()[3] * self.group0()[2])),
                (-(other.group5()[2] * self.group0()[2]) - (other.group9()[3] * self[e4315])),
            ]) + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other[e45]]))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group5()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group9()[0], other.group9()[1], other.group9()[2], other.group5()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))),
            // e41, e42, e43
            (-(Simd32x3::from(other[e45]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self[e4315]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                + (Simd32x3::from(self[e4315]) * other.group5())
                + (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group4(), 2, 0, 1))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group4(), 1, 2, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                ((other.group9()[1] * self.group0()[2]) - (other.group9()[2] * self.group0()[1])),
                (-(other.group9()[0] * self.group0()[2]) + (other.group9()[2] * self.group0()[0])),
                ((other.group9()[0] * self.group0()[1]) - (other.group9()[1] * self.group0()[0])),
            ]) + (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self.group0()[3]) * other.group4())
                + (Simd32x3::from(self[e4315]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group6()[3] * self.group0()[0]) * -1.0),
                ((other.group6()[3] * self.group0()[1]) * -1.0),
                ((other.group6()[3] * self.group0()[2]) * -1.0),
                (other.group6()[2] * self.group0()[2]),
            ]) + (Simd32x4::from(self[e4315]) * Simd32x4::from([other.group8()[0], other.group8()[1], other.group8()[2], other[e1]]))
                + (Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group6()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group6()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))
                - (swizzle!(other.group1(), 1, 2, 0, 3) * swizzle!(self.group0(), 2, 0, 1, 3))),
            // e423, e431, e412
            (-(Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from(self[e4315]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self[e4315]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group7(), 2, 0, 1))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group7(), 1, 2, 0))),
            // e235, e315, e125
            ((Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group8(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group8(), 1, 2, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group4()[0] * self.group0()[3]) + (other.group5()[1] * self.group0()[2])),
                ((other.group4()[1] * self.group0()[3]) + (other.group5()[2] * self.group0()[0])),
                ((other.group4()[2] * self.group0()[3]) + (other.group5()[0] * self.group0()[1])),
                (-(other.group3()[2] * self.group0()[2]) - (other.group3()[3] * self.group0()[3])),
            ]) + (Simd32x4::from(other.group0()[0]) * self.group0())
                - (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group3()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self[e4315], self[e4315], self[e4315], self.group0()[1]]) * swizzle!(other.group3(), 0, 1, 2, 1))),
            // e1234
            ((other.group0()[0] * self[e4315])
                + (other.group4()[0] * self.group0()[0])
                + (other.group4()[1] * self.group0()[1])
                + (other.group4()[2] * self.group0()[2])
                + (other.group3()[3] * self[e4315])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for Sphere {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       36        0
    //    simd3        2        4        0
    //    simd4        7        7        0
    // Totals...
    // yes simd       27       47        0
    //  no simd       52       76        0
    fn sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[e4315]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
                (other.group0()[3] * self[e4315] * -1.0),
            ]),
            // e15, e25, e35, scalar
            (Simd32x4::from([0.0, 0.0, 0.0, (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]))])
                + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self[e4315]]))
                - (swizzle!(other.group0(), 0, 1, 2, 0) * swizzle!(self.group0(), 3, 3, 3, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for Sphere {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       25        0
    //    simd3        3        5        0
    //    simd4       10       10        0
    // Totals...
    // yes simd       24       40        0
    //  no simd       60       80        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = CircleRotor::from_groups(
            // e423, e431, e412
            (-(Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from(self[e4315]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (other.group0()[2] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                (other.group0()[1] * self.group0()[0]),
                (other[e2] * self[e4315]),
            ]) - (swizzle!(other.group0(), 1, 2, 0, 3) * swizzle!(self.group0(), 2, 0, 1, 3))),
            // e235, e315, e125, e12345
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((other.group0()[2] * self.group0()[2]) + (other.group0()[3] * self.group0()[3]) + (other[e2] * self[e4315])),
            ]) + (Simd32x4::from([other[e2], other[e2], other[e2], other.group0()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))
                + (swizzle!(other.group0(), 0, 1, 2, 0) * swizzle!(self.group0(), 3, 3, 3, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for Sphere {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        4        0
    //    simd3        1        2        0
    //    simd4        3        5        0
    // Totals...
    // yes simd        6       11        0
    //  no simd       17       30        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other[scalar]) * self.group0()),
            // e1234
            (other[scalar] * self[e4315]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for Sphere {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       29        0
    //    simd3        3        5        0
    //    simd4        8        9        0
    // Totals...
    // yes simd       27       43        0
    //  no simd       57       80        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            (-(Simd32x3::from(other[e4315]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self[e4315]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))),
            // e23, e31, e12, e45
            ((Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other[e4315]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self[e4315]]) * swizzle!(other.group0(), 2, 0, 1, 3))),
            // e15, e25, e35, scalar
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]) + (self.group0()[3] * other[e4315])),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self[e4315]]))
                - (swizzle!(other.group0(), 0, 1, 2, 0) * swizzle!(self.group0(), 3, 3, 3, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       70        0
    //    simd4       25       25        0
    // Totals...
    // yes simd       53       95        0
    //  no simd      128      170        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(self.group0()[0] * other.group3()[3]) - (self.group0()[2] * other.group0()[1]) - (other.group3()[0] * self[e4315])),
                (-(self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group3()[3]) - (other.group3()[1] * self[e4315])),
                (-(self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group3()[3]) - (other.group3()[2] * self[e4315])),
                ((self.group0()[1] * other.group3()[1]) + (self.group0()[2] * other.group3()[2]) + (self.group0()[3] * other.group3()[3])),
            ]) + (Simd32x4::from(self[e4315]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group3()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group3()[1]) * -1.0),
                ((self.group0()[1] * other.group1()[3]) * -1.0),
                ((self.group0()[2] * other.group1()[3]) * -1.0),
                (self.group0()[2] * other.group1()[2]),
            ]) + (Simd32x4::from(self[e4315]) * other.group2())
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group3()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))
                + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group0()[3] * other.group1()[0]) + (self.group0()[3] * other.group3()[0])),
                ((self.group0()[3] * other.group1()[1]) + (self.group0()[3] * other.group3()[1])),
                ((self.group0()[3] * other.group1()[2]) + (self.group0()[3] * other.group3()[2])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])),
            ]) + (Simd32x4::from([other.group2()[1], other.group2()[3], other.group2()[3], other.group1()[3]]) * swizzle!(self.group0(), 2, 1, 2, 3))
                + (Simd32x4::from([other.group2()[3], other.group2()[2], other.group2()[0], other.group0()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))
                - (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group2(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group0()[3] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[3]) - (self.group0()[3] * other.group0()[1])),
                (-(self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group0()[2])),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(self[e4315]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[3]]))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self[e4315]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       70        0
    //    simd4       23       23        0
    // Totals...
    // yes simd       59       93        0
    //  no simd      128      162        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (other.group3()[0] * self[e4315]),
                (other.group3()[1] * self[e4315]),
                (other.group3()[2] * self[e4315]),
                ((self.group0()[2] * other.group3()[2]) * -1.0),
            ]) + (Simd32x4::from(self[e4315]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                - (Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group3()[1]]) * swizzle!(self.group0(), 2, 1, 2, 1))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group0(), 0, 0, 1, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[2] * other.group3()[1]) + (self.group0()[3] * other.group0()[0]) + (other.group2()[0] * self[e4315])),
                ((self.group0()[1] * other.group1()[3]) + (self.group0()[3] * other.group0()[1]) + (other.group2()[1] * self[e4315])),
                ((self.group0()[2] * other.group1()[3]) + (self.group0()[3] * other.group0()[2]) + (other.group2()[2] * self[e4315])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2]) - (other.group3()[3] * self[e4315])),
            ]) + (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group2()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(self.group0()[1] * other.group2()[2]) - (self.group0()[3] * other.group3()[0])),
                (-(self.group0()[2] * other.group2()[0]) - (self.group0()[3] * other.group3()[1])),
                (-(self.group0()[0] * other.group2()[1]) - (self.group0()[3] * other.group3()[2])),
                ((other.group0()[3] * self[e4315]) + (other.group1()[3] * self[e4315])),
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group2()[1], other.group3()[3], other.group3()[3], other.group0()[1]]) * swizzle!(self.group0(), 2, 1, 2, 1))
                + (Simd32x4::from([other.group3()[3], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group0(), 0, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[2] * other.group1()[1]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
                (-(self.group0()[2] * other.group2()[2]) - (self.group0()[3] * other.group1()[3])),
            ]) + (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group0()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self[e4315], self[e4315], self[e4315], self.group0()[1]]) * swizzle!(other.group2(), 0, 1, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl InfixSandwich for VersorEven {}
impl Sandwich<AntiCircleRotor> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      120      158        0
    //    simd4       70       71        0
    // Totals...
    // yes simd      190      229        0
    //  no simd      400      442        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group1()[2]) + (other.group0()[1] * self.group3()[2]) - (other.group0()[2] * self.group3()[1])
                    + (other.group1()[0] * self.group3()[3])
                    + (other.group1()[1] * self.group0()[2])
                    + (other.group1()[3] * self.group0()[0])
                    + (other.group2()[3] * self.group0()[0])),
                (-(other.group0()[0] * self.group3()[2])
                    + (other.group0()[1] * self.group1()[3])
                    + (other.group0()[2] * self.group1()[0])
                    + (other.group0()[2] * self.group3()[0])
                    + (other.group1()[1] * self.group3()[3])
                    + (other.group1()[2] * self.group0()[0])
                    + (other.group1()[3] * self.group0()[1])
                    + (other.group2()[3] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[0] * self.group3()[1]) - (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group1()[0] * self.group0()[1])
                    + (other.group1()[2] * self.group3()[3])
                    + (other.group1()[3] * self.group0()[2])
                    + (other.group2()[3] * self.group0()[2])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[2] * self.group2()[1])
                    + (other.group1()[0] * self.group0()[3])
                    + (other.group2()[0] * self.group3()[3])
                    + (other.group2()[1] * self.group0()[2])
                    + (other.group2()[3] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[2])
                    + (other.group1()[1] * self.group0()[3])
                    + (other.group2()[1] * self.group3()[3])
                    + (other.group2()[2] * self.group0()[0])
                    + (other.group2()[3] * self.group1()[1])),
                (-(other.group0()[1] * self.group2()[0])
                    + (other.group1()[2] * self.group0()[3])
                    + (other.group2()[0] * self.group0()[1])
                    + (other.group2()[2] * self.group3()[3])
                    + (other.group2()[3] * self.group1()[2])),
                ((other.group0()[2] * self.group2()[2])
                    - (other.group1()[2] * self.group3()[2])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 3, 3, 1, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[2], other.group0()[1]]) * swizzle!(self.group2(), 2, 0, 3, 1))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group3(), 0, 1, 2, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group1()[1] * self.group2()[2]) + (other.group2()[3] * self.group2()[0])),
                ((other.group1()[2] * self.group2()[0]) + (other.group2()[3] * self.group2()[1])),
                ((other.group1()[2] * self.group2()[3]) + (other.group2()[3] * self.group2()[2])),
                (-(other.group1()[2] * self.group2()[2]) - (other.group1()[3] * self.group2()[3])),
            ]) + (Simd32x4::from(other.group2()[0]) * Simd32x4::from([self.group0()[3], self.group3()[2], self.group1()[1], self.group3()[0]]))
                - (Simd32x4::from(other.group2()[0]) * Simd32x4::from([self.group1()[3], self.group1()[2], self.group3()[1], self.group1()[0]]))
                + (Simd32x4::from(other.group2()[1]) * Simd32x4::from([self.group1()[2], self.group0()[3], self.group3()[0], self.group3()[1]]))
                - (Simd32x4::from(other.group2()[1]) * Simd32x4::from([self.group3()[2], self.group1()[3], self.group1()[0], self.group1()[1]]))
                - (Simd32x4::from(other.group2()[2]) * Simd32x4::from([self.group1()[1], self.group3()[0], self.group1()[3], self.group1()[2]]))
                + (Simd32x4::from(other.group2()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group0()[3], self.group3()[2]]))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[0], other.group2()[3]]) * swizzle!(self.group2(), 3, 3, 1, 3))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group2(), 0, 1, 2, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[1])
                    + (other.group2()[0] * self.group3()[3])
                    + (other.group2()[1] * self.group0()[2])
                    + (other.group2()[3] * self.group3()[0])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group2()[3]) - (other.group0()[2] * self.group2()[0])
                    + (other.group2()[1] * self.group3()[3])
                    + (other.group2()[2] * self.group0()[0])
                    + (other.group2()[3] * self.group3()[1])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) - (other.group0()[2] * self.group2()[3])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group2()[0] * self.group0()[1])
                    + (other.group2()[3] * self.group3()[2])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group3()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group2()[2], other.group2()[3]]) * swizzle!(self.group3(), 2, 0, 3, 3))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group3()[3]]) * swizzle!(other.group1(), 0, 1, 0, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       92      133        0
    //    simd4       93       94        0
    // Totals...
    // yes simd      185      227        0
    //  no simd      464      509        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3])
                    - (other.group0()[1] * self.group1()[2])
                    - (other.group1()[0] * self.group3()[3])
                    - (other.group1()[1] * self.group0()[2])
                    - (other.group2()[3] * self.group3()[0])
                    - (other.group3()[2] * self.group0()[1])),
                (-(other.group0()[1] * self.group0()[3])
                    - (other.group0()[2] * self.group1()[0])
                    - (other.group1()[1] * self.group3()[3])
                    - (other.group1()[2] * self.group0()[0])
                    - (other.group2()[3] * self.group3()[1])
                    - (other.group3()[0] * self.group0()[2])),
                (-(other.group0()[2] * self.group0()[3])
                    - (other.group0()[2] * self.group1()[3])
                    - (other.group1()[0] * self.group0()[1])
                    - (other.group1()[2] * self.group3()[3])
                    - (other.group2()[3] * self.group3()[2])
                    - (other.group3()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group2()[0])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])
                    + (other.group2()[0] * self.group0()[0])
                    + (other.group2()[1] * self.group0()[1])
                    + (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group1()[3]]) * swizzle!(self.group1(), 3, 3, 1, 3))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[3]]) * swizzle!(self.group3(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group3()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]]) * swizzle!(other.group1(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group3()[3], self.group3()[2]]) * swizzle!(other.group3(), 1, 2, 2, 2))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group0()[1], self.group3()[1]]) * swizzle!(other.group3(), 0, 1, 0, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (other.group2()[2] * self.group0()[1])),
                (-(other.group0()[2] * self.group2()[0]) + (other.group2()[0] * self.group0()[2])),
                (-(other.group0()[2] * self.group2()[3]) + (other.group2()[1] * self.group0()[0])),
                ((other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group2()[3]]) * swizzle!(self.group2(), 3, 3, 1, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]]) * swizzle!(other.group3(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group3()[3], self.group0()[1]]) * swizzle!(other.group2(), 1, 2, 2, 1))
                - (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group3()[0]]) * swizzle!(other.group1(), 0, 1, 0, 0))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group0()[3], self.group3()[1]]) * swizzle!(other.group1(), 1, 2, 2, 1))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group1()[0]]) * swizzle!(other.group3(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[2]]) * swizzle!(other.group2(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group1()[3], self.group1()[1]]) * swizzle!(other.group3(), 1, 2, 2, 1))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 0, 1, 0, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 2) * swizzle!(self.group3(), 0, 1, 2, 2))
                + (swizzle!(other.group3(), 2, 0, 1, 3) * swizzle!(self.group3(), 1, 2, 0, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(other.group1()[0] * self.group2()[3])
                    - (other.group1()[1] * self.group2()[2])
                    - (other.group1()[3] * self.group2()[0])
                    - (other.group2()[2] * self.group3()[1])
                    + (other.group3()[2] * self.group2()[1])),
                (-(other.group1()[1] * self.group2()[3])
                    - (other.group1()[2] * self.group2()[0])
                    - (other.group1()[3] * self.group2()[1])
                    - (other.group2()[2] * self.group1()[0])
                    + (other.group3()[0] * self.group2()[2])),
                (-(other.group1()[0] * self.group2()[1])
                    - (other.group1()[2] * self.group2()[3])
                    - (other.group1()[3] * self.group2()[2])
                    - (other.group2()[2] * self.group0()[3])
                    + (other.group3()[1] * self.group2()[0])),
                ((other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])
                    + (other.group1()[1] * self.group0()[1])
                    + (other.group1()[2] * self.group0()[2])
                    + (other.group1()[3] * self.group3()[3])),
            ]) + (Simd32x4::from([other.group2()[0], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group3(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[2], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group0()[1]]) * swizzle!(self.group3(), 0, 1, 2, 1))
                - (Simd32x4::from([self.group0()[3], self.group3()[2], self.group1()[1], self.group0()[3]]) * swizzle!(other.group2(), 0, 0, 0, 3))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[2]]) * swizzle!(other.group3(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group1()[2], self.group0()[3], self.group3()[0], self.group1()[3]]) * swizzle!(other.group2(), 1, 1, 1, 3))
                + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[3], self.group0()[1]]) * swizzle!(other.group3(), 1, 2, 2, 1))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[1], self.group0()[0]]) * swizzle!(other.group3(), 0, 1, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) * -1.0),
                ((other.group0()[2] * self.group2()[0]) * -1.0),
                ((other.group0()[2] * self.group2()[3]) * -1.0),
                (other.group3()[3] * self.group1()[3]),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group1()[3]]) * swizzle!(self.group2(), 3, 3, 1, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[2]]) * swizzle!(other.group3(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[1]]) * swizzle!(other.group2(), 2, 0, 1, 1))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group3()[3], self.group1()[2]]) * swizzle!(other.group2(), 1, 2, 2, 2))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group2()[0]]) * swizzle!(other.group3(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[3]]) * swizzle!(other.group3(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group0()[3], self.group2()[1]]) * swizzle!(other.group3(), 1, 2, 2, 1))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group2()[1]]) * swizzle!(other.group1(), 0, 1, 0, 1))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[2]]) * swizzle!(other.group2(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group1()[3], self.group2()[2]]) * swizzle!(other.group1(), 1, 2, 2, 2))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group0()[1], self.group1()[1]]) * swizzle!(other.group2(), 0, 1, 0, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       53       90        0
    //    simd4       51       53        0
    // Totals...
    // yes simd      104      143        0
    //  no simd      257      302        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (other.group0()[0] * self.group3()[0]),
                (other.group0()[0] * self.group3()[1]),
                (other.group0()[0] * self.group3()[2]),
                0.0,
            ]) + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                + (Simd32x4::from(other.group0()[1]) * self.group0())),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (other.group0()[0] * self.group2()[0]),
                (other.group0()[0] * self.group2()[1]),
                (other.group0()[0] * self.group2()[2]),
                ((other.group0()[0] * self.group2()[3]) * -1.0),
            ]) + (Simd32x4::from(other.group0()[1]) * self.group1())),
            // e235, e315, e125, e5
            (Simd32x4::from(other.group0()[1]) * self.group2()),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) * -1.0),
                ((other.group0()[0] * self.group2()[1]) * -1.0),
                ((other.group0()[0] * self.group2()[2]) * -1.0),
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[0] * self.group1()[3])),
            ]) + (Simd32x4::from(other.group0()[1]) * self.group3())),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       75      106        0
    //    simd4       54       56        0
    // Totals...
    // yes simd      129      162        0
    //  no simd      291      330        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[3] * self.group0()[0]),
                (other.group0()[3] * self.group0()[1]),
                (other.group0()[3] * self.group0()[2]),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group1()[3])),
            ]),
            // e23, e31, e12, e45
            (-(Simd32x4::from([self.group0()[2], self.group0()[0], self.group3()[3], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group0()[1], self.group0()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))
                + (swizzle!(other.group0(), 2, 0, 1, 3) * swizzle!(self.group0(), 1, 2, 0, 3))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) + (other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group1()[1])
                    - (other.group0()[2] * self.group3()[1])
                    - (other.group0()[3] * self.group2()[0])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group0()[3]) + (other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group1()[0])
                    + (other.group0()[2] * self.group3()[0])
                    - (other.group0()[3] * self.group2()[1])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group1()[0])
                    - (other.group0()[1] * self.group3()[0])
                    - (other.group0()[2] * self.group0()[3])
                    + (other.group0()[2] * self.group1()[3])
                    - (other.group0()[3] * self.group2()[2])),
                (other.group0()[3] * self.group3()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(other.group0()[1] * self.group3()[1]) - (other.group0()[2] * self.group3()[2]) - (other.group0()[3] * self.group2()[3])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group3()[3], self.group1()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))
                + (swizzle!(other.group0(), 3, 3, 3, 2) * swizzle!(self.group1(), 0, 1, 2, 2))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       79      106        0
    //    simd4       70       72        0
    // Totals...
    // yes simd      149      178        0
    //  no simd      359      394        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group1()[3]) + (other.group1()[2] * self.group3()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group3()[3], self.group3()[1]]) * swizzle!(other.group1(), 1, 2, 2, 1))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group0()[1], self.group3()[0]]) * swizzle!(other.group1(), 0, 1, 0, 0))
                + (swizzle!(other.group0(), 3, 3, 3, 0) * swizzle!(self.group0(), 0, 1, 2, 0))),
            // e23, e31, e12, e45
            (-(Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]]) * swizzle!(other.group1(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group3()[3], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group1()[0]]) * swizzle!(other.group1(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group1()[3], self.group1()[1]]) * swizzle!(other.group1(), 1, 2, 2, 1))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group0()[1], self.group0()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))
                + (swizzle!(other.group0(), 2, 0, 1, 3) * swizzle!(self.group0(), 1, 2, 0, 3))
                + (swizzle!(other.group1(), 2, 0, 1, 3) * swizzle!(self.group3(), 1, 2, 0, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[1] * self.group3()[2]) + (other.group0()[2] * self.group1()[1])
                    - (other.group0()[2] * self.group3()[1])
                    - (other.group0()[3] * self.group2()[0])
                    + (other.group1()[2] * self.group2()[1])
                    - (other.group1()[3] * self.group1()[0])
                    + (other.group1()[3] * self.group3()[0])),
                (-(other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group1()[0])
                    + (other.group0()[2] * self.group3()[0])
                    - (other.group0()[3] * self.group2()[1])
                    + (other.group1()[0] * self.group2()[2])
                    - (other.group1()[3] * self.group1()[1])
                    + (other.group1()[3] * self.group3()[1])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) - (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group1()[3])
                    - (other.group0()[3] * self.group2()[2])
                    + (other.group1()[1] * self.group2()[0])
                    - (other.group1()[3] * self.group1()[2])
                    + (other.group1()[3] * self.group3()[2])),
                0.0,
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[3], self.group1()[2], self.group3()[1], self.group3()[3]]) * swizzle!(other.group0(), 0, 0, 0, 3))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[3], self.group0()[2]]) * swizzle!(other.group1(), 1, 2, 2, 2))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[1], self.group0()[1]]) * swizzle!(other.group1(), 0, 1, 0, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(other.group0()[1] * self.group3()[1]) - (other.group0()[2] * self.group3()[2]) - (other.group0()[3] * self.group2()[3])
                    + (other.group1()[3] * self.group1()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[2]]) * swizzle!(other.group1(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group3()[3], self.group1()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group2()[0]]) * swizzle!(other.group1(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group0()[3], self.group2()[1]]) * swizzle!(other.group1(), 1, 2, 2, 1))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))
                + (swizzle!(other.group0(), 3, 3, 3, 2) * swizzle!(self.group1(), 0, 1, 2, 2))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       92      130        0
    //    simd4       57       58        0
    // Totals...
    // yes simd      149      188        0
    //  no simd      320      362        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group0()[2])),
                ((other.group0()[1] * self.group3()[3]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) + (other.group0()[2] * self.group3()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1])
                    + (other.group1()[0] * self.group3()[3])
                    + (other.group1()[1] * self.group0()[2])),
                (-(other.group0()[0] * self.group1()[2])
                    + (other.group0()[1] * self.group0()[3])
                    + (other.group0()[2] * self.group1()[0])
                    + (other.group1()[1] * self.group3()[3])
                    + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group0()[3])
                    + (other.group1()[0] * self.group0()[1])
                    + (other.group1()[2] * self.group3()[3])),
                (-(other.group0()[0] * self.group3()[0])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group3()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[0] * self.group2()[3]) + (other.group0()[1] * self.group2()[2])),
                ((other.group0()[1] * self.group2()[3]) + (other.group0()[2] * self.group2()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[2] * self.group2()[3])),
                (-(other.group0()[1] * self.group2()[1]) - (other.group0()[2] * self.group2()[2])),
            ]) + (Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group0()[3], self.group3()[2], self.group1()[1], self.group3()[0]]))
                - (Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group1()[3], self.group1()[2], self.group3()[1], self.group1()[0]]))
                + (Simd32x4::from(other.group1()[1]) * Simd32x4::from([self.group1()[2], self.group0()[3], self.group3()[0], self.group3()[1]]))
                - (Simd32x4::from(other.group1()[1]) * Simd32x4::from([self.group3()[2], self.group1()[3], self.group1()[0], self.group1()[1]]))
                - (Simd32x4::from(other.group1()[2]) * Simd32x4::from([self.group1()[1], self.group3()[0], self.group1()[3], self.group1()[2]]))
                + (Simd32x4::from(other.group1()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group0()[3], self.group3()[2]]))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group3()[2]) - (other.group0()[2] * self.group3()[1])
                    + (other.group1()[0] * self.group3()[3])
                    + (other.group1()[1] * self.group0()[2])),
                (-(other.group0()[0] * self.group3()[2])
                    + (other.group0()[1] * self.group1()[3])
                    + (other.group0()[2] * self.group3()[0])
                    + (other.group1()[1] * self.group3()[3])
                    + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group3()[1]) - (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group1()[0] * self.group0()[1])
                    + (other.group1()[2] * self.group3()[3])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       88      127        0
    //    simd4       66       67        0
    // Totals...
    // yes simd      154      194        0
    //  no simd      352      395        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) + (other.group0()[3] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[0]) + (other.group0()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group3()[3]) + (other.group0()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])
                    + (other.group1()[3] * self.group3()[3])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group0()[1], self.group0()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) + (other.group0()[3] * self.group1()[0]) + (other.group1()[1] * self.group0()[2]) + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[2] * self.group1()[0]) + (other.group0()[3] * self.group1()[1]) + (other.group1()[2] * self.group0()[0]) + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group0()[3]) + (other.group0()[3] * self.group1()[2]) + (other.group1()[2] * self.group3()[3]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group3()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group1()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group0()[1], self.group3()[3]]) * swizzle!(other.group1(), 0, 1, 0, 3))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) + (other.group0()[3] * self.group2()[0])),
                ((other.group0()[2] * self.group2()[0]) + (other.group0()[3] * self.group2()[1])),
                ((other.group0()[2] * self.group2()[3]) + (other.group0()[3] * self.group2()[2])),
                (-(other.group0()[1] * self.group2()[1]) - (other.group0()[2] * self.group2()[2])),
            ]) + (Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group0()[3], self.group3()[2], self.group1()[1], self.group3()[0]]))
                - (Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group1()[3], self.group1()[2], self.group3()[1], self.group1()[0]]))
                + (Simd32x4::from(other.group1()[1]) * Simd32x4::from([self.group1()[2], self.group0()[3], self.group3()[0], self.group3()[1]]))
                - (Simd32x4::from(other.group1()[1]) * Simd32x4::from([self.group3()[2], self.group1()[3], self.group1()[0], self.group1()[1]]))
                - (Simd32x4::from(other.group1()[2]) * Simd32x4::from([self.group1()[1], self.group3()[0], self.group1()[3], self.group1()[2]]))
                + (Simd32x4::from(other.group1()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group0()[3], self.group3()[2]]))
                + (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]))
                - (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group1()[3]]))
                + (swizzle!(other.group0(), 0, 1, 0, 3) * swizzle!(self.group2(), 3, 3, 1, 3))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group2(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[1] * self.group3()[2])
                    + (other.group0()[3] * self.group3()[0])
                    + (other.group1()[0] * self.group3()[3])
                    + (other.group1()[1] * self.group0()[2])
                    + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[2] * self.group3()[0])
                    + (other.group0()[3] * self.group3()[1])
                    + (other.group1()[1] * self.group3()[3])
                    + (other.group1()[2] * self.group0()[0])
                    + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group1()[3])
                    + (other.group0()[3] * self.group3()[2])
                    + (other.group1()[0] * self.group0()[1])
                    + (other.group1()[2] * self.group3()[3])
                    + (other.group1()[3] * self.group0()[2])),
                ((other.group0()[2] * self.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group3()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       55       82        0
    //    simd4       60       62        0
    // Totals...
    // yes simd      115      144        0
    //  no simd      295      330        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[2] * self.group3()[2])])
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group3()[3], self.group3()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group0()[1], self.group3()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))),
            // e23, e31, e12, e45
            (-(Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group1()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group1()[3], self.group1()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))
                + (swizzle!(other.group0(), 2, 0, 1, 3) * swizzle!(self.group3(), 1, 2, 0, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group0()[2] * self.group2()[1]) + (other.group0()[3] * self.group3()[0])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[3] * self.group3()[1])),
                ((other.group0()[1] * self.group2()[0]) + (other.group0()[3] * self.group3()[2])),
                0.0,
            ]) - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[3], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[1], self.group0()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[3] * self.group1()[3])])
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group2()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group0()[3], self.group2()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       52       74        0
    //    simd4       47       56        0
    // Totals...
    // yes simd       99      130        0
    //  no simd      240      298        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(other[e12345]) * self.group0() * Simd32x4::from(-1.0)),
            // e23, e31, e12, e45
            (Simd32x4::from(other[e12345]) * self.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e15, e25, e35, e1234
            (Simd32x4::from(other[e12345]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]) * Simd32x4::from(-1.0)),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other[e12345]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[3]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      116      154        0
    //    simd4       67       68        0
    // Totals...
    // yes simd      183      222        0
    //  no simd      384      426        0
    fn sandwich(self, other: Circle) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group1()[2]) - (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group3()[1])
                    - (other.group1()[0] * self.group3()[3])
                    - (other.group1()[1] * self.group0()[2])),
                ((other.group0()[0] * self.group3()[2])
                    - (other.group0()[1] * self.group0()[3])
                    - (other.group0()[2] * self.group1()[0])
                    - (other.group0()[2] * self.group3()[0])
                    - (other.group1()[1] * self.group3()[3])
                    - (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group3()[0])
                    - (other.group0()[2] * self.group0()[3])
                    - (other.group0()[2] * self.group1()[3])
                    - (other.group1()[0] * self.group0()[1])
                    - (other.group1()[2] * self.group3()[3])),
                ((other.group0()[0] * self.group2()[0])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])
                    + (other.group2()[2] * self.group0()[2])
                    + (other.group1()[1] * self.group1()[1])
                    + (other.group1()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group1()[3]]) * swizzle!(self.group1(), 3, 3, 1, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group2()[2]) + (other.group1()[2] * self.group1()[1])
                    - (other.group1()[3] * self.group3()[0])),
                (-(other.group0()[1] * self.group2()[3]) - (other.group0()[2] * self.group2()[0]) + (other.group1()[0] * self.group1()[2])
                    - (other.group1()[3] * self.group3()[1])),
                (-(other.group0()[0] * self.group2()[1]) - (other.group0()[2] * self.group2()[3]) + (other.group1()[1] * self.group1()[0])
                    - (other.group1()[3] * self.group3()[2])),
                ((other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2]) - (other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group2()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group3()[1]]) * swizzle!(other.group1(), 0, 1, 0, 1))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group0()[3], self.group3()[2]]) * swizzle!(other.group1(), 1, 2, 2, 2))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(other.group2()[0] * self.group0()[3])
                    - (other.group2()[1] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[1])
                    - (other.group1()[0] * self.group2()[3])
                    - (other.group1()[1] * self.group2()[2])
                    - (other.group1()[3] * self.group2()[0])),
                (-(other.group2()[0] * self.group3()[2])
                    - (other.group2()[1] * self.group0()[3])
                    - (other.group2()[2] * self.group1()[0])
                    - (other.group1()[1] * self.group2()[3])
                    - (other.group1()[2] * self.group2()[0])
                    - (other.group1()[3] * self.group2()[1])),
                (-(other.group2()[0] * self.group1()[1])
                    - (other.group2()[1] * self.group3()[0])
                    - (other.group2()[2] * self.group0()[3])
                    - (other.group1()[0] * self.group2()[1])
                    - (other.group1()[2] * self.group2()[3])
                    - (other.group1()[3] * self.group2()[2])),
                ((other.group0()[1] * self.group3()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])
                    + (other.group1()[1] * self.group0()[1])
                    + (other.group1()[2] * self.group0()[2])
                    + (other.group1()[3] * self.group3()[3])),
            ]) + (Simd32x4::from([other.group2()[0], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group3(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[2], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))
                + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (other.group2()[0] * self.group3()[3]) + (other.group2()[1] * self.group0()[2])
                    - (other.group2()[2] * self.group0()[1])),
                (-(other.group0()[2] * self.group2()[0]) - (other.group2()[0] * self.group0()[2])
                    + (other.group2()[1] * self.group3()[3])
                    + (other.group2()[2] * self.group0()[0])),
                (-(other.group0()[2] * self.group2()[3]) + (other.group2()[0] * self.group0()[1]) - (other.group2()[1] * self.group0()[0])
                    + (other.group2()[2] * self.group3()[3])),
                ((other.group2()[1] * self.group1()[1]) - (other.group2()[1] * self.group3()[1]) + (other.group2()[2] * self.group1()[2]) - (other.group2()[2] * self.group3()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group1()[3]]) * swizzle!(self.group2(), 3, 3, 1, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group2()[1]]) * swizzle!(other.group1(), 0, 1, 0, 1))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group1()[3], self.group2()[2]]) * swizzle!(other.group1(), 1, 2, 2, 2))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       96      135        0
    //    simd4       76       77        0
    // Totals...
    // yes simd      172      212        0
    //  no simd      400      443        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) - (other.group0()[1] * self.group3()[2]) + (other.group0()[2] * self.group3()[1])
                    - (other.group1()[0] * self.group3()[3])
                    - (other.group1()[1] * self.group0()[2])
                    - (other.group2()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group3()[2])
                    - (other.group0()[2] * self.group1()[0])
                    - (other.group0()[2] * self.group3()[0])
                    - (other.group1()[1] * self.group3()[3])
                    - (other.group1()[2] * self.group0()[0])
                    - (other.group2()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group3()[0])
                    - (other.group0()[2] * self.group1()[3])
                    - (other.group1()[0] * self.group0()[1])
                    - (other.group1()[2] * self.group3()[3])
                    - (other.group2()[3] * self.group0()[2])),
                ((other.group0()[0] * self.group2()[0])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])
                    + (other.group2()[0] * self.group0()[0])
                    + (other.group2()[1] * self.group0()[1])
                    + (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group1()[3]]) * swizzle!(self.group1(), 3, 3, 1, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]]) * swizzle!(other.group1(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group2()[2])),
                (-(other.group0()[1] * self.group2()[3]) - (other.group0()[2] * self.group2()[0])),
                (-(other.group0()[0] * self.group2()[1]) - (other.group0()[2] * self.group2()[3])),
                ((other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[3]]) * swizzle!(other.group2(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group3()[3], self.group0()[1]]) * swizzle!(other.group2(), 1, 2, 2, 1))
                - (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group3()[0]]) * swizzle!(other.group1(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[2]]) * swizzle!(other.group2(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group0()[3], self.group3()[1]]) * swizzle!(other.group1(), 1, 2, 2, 1))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 0, 1, 0, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 2) * swizzle!(self.group3(), 0, 1, 2, 2))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(other.group1()[0] * self.group2()[3])
                    - (other.group1()[1] * self.group2()[2])
                    - (other.group1()[3] * self.group2()[0])
                    - (other.group2()[1] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[1])
                    - (other.group2()[3] * self.group2()[0])),
                (-(other.group1()[1] * self.group2()[3])
                    - (other.group1()[2] * self.group2()[0])
                    - (other.group1()[3] * self.group2()[1])
                    - (other.group2()[1] * self.group0()[3])
                    - (other.group2()[2] * self.group1()[0])
                    - (other.group2()[3] * self.group2()[1])),
                (-(other.group1()[0] * self.group2()[1])
                    - (other.group1()[2] * self.group2()[3])
                    - (other.group1()[3] * self.group2()[2])
                    - (other.group2()[1] * self.group3()[0])
                    - (other.group2()[2] * self.group0()[3])
                    - (other.group2()[3] * self.group2()[2])),
                ((other.group0()[1] * self.group3()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])
                    + (other.group1()[1] * self.group0()[1])
                    + (other.group1()[2] * self.group0()[2])
                    + (other.group1()[3] * self.group3()[3])),
            ]) + (Simd32x4::from([other.group2()[0], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group3(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[2], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))
                - (Simd32x4::from([self.group0()[3], self.group3()[2], self.group1()[1], self.group3()[3]]) * swizzle!(other.group2(), 0, 0, 0, 3))
                + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (other.group2()[3] * self.group3()[0]),
                (other.group2()[3] * self.group3()[1]),
                (other.group2()[3] * self.group3()[2]),
                ((other.group2()[2] * self.group3()[2]) * -1.0),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group1()[3]]) * swizzle!(self.group2(), 3, 3, 1, 3))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[2], other.group2()[3]]) * swizzle!(self.group2(), 2, 0, 3, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[1]]) * swizzle!(other.group2(), 2, 0, 1, 1))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group3()[3], self.group1()[2]]) * swizzle!(other.group2(), 1, 2, 2, 2))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group2()[1]]) * swizzle!(other.group1(), 0, 1, 0, 1))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group1()[3], self.group2()[2]]) * swizzle!(other.group1(), 1, 2, 2, 2))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group0()[1], self.group1()[1]]) * swizzle!(other.group2(), 0, 1, 0, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      120      158        0
    //    simd4       66       67        0
    // Totals...
    // yes simd      186      225        0
    //  no simd      384      426        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group1()[2]) + (other.group0()[1] * self.group3()[2])
                    - (other.group0()[2] * self.group3()[1])
                    + (other.group1()[0] * self.group3()[3])
                    + (other.group1()[1] * self.group0()[2])
                    + (other.group1()[3] * self.group0()[0])),
                (-(other.group0()[0] * self.group3()[2])
                    + (other.group0()[1] * self.group0()[3])
                    + (other.group0()[1] * self.group1()[3])
                    + (other.group0()[2] * self.group1()[0])
                    + (other.group0()[2] * self.group3()[0])
                    + (other.group1()[1] * self.group3()[3])
                    + (other.group1()[2] * self.group0()[0])
                    + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[0] * self.group3()[1]) - (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group0()[3])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group1()[0] * self.group0()[1])
                    + (other.group1()[2] * self.group3()[3])
                    + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[2] * self.group2()[1])
                    + (other.group2()[0] * self.group3()[3])
                    + (other.group2()[1] * self.group0()[2])
                    + (other.group1()[0] * self.group0()[3])
                    + (other.group1()[1] * self.group1()[2])),
                (-(other.group0()[0] * self.group2()[2])
                    + (other.group2()[1] * self.group3()[3])
                    + (other.group2()[2] * self.group0()[0])
                    + (other.group1()[1] * self.group0()[3])
                    + (other.group1()[2] * self.group1()[0])),
                (-(other.group0()[1] * self.group2()[0])
                    + (other.group2()[0] * self.group0()[1])
                    + (other.group2()[2] * self.group3()[3])
                    + (other.group1()[0] * self.group1()[1])
                    + (other.group1()[2] * self.group0()[3])),
                ((other.group0()[2] * self.group2()[2])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (other.group1()[2] * self.group3()[2])
                    - (other.group1()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 3, 3, 1, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[2], other.group0()[1]]) * swizzle!(self.group2(), 2, 0, 3, 1))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group3(), 0, 1, 2, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group1()[0] * self.group2()[3]) + (other.group1()[1] * self.group2()[2])),
                ((other.group1()[1] * self.group2()[3]) + (other.group1()[2] * self.group2()[0])),
                ((other.group1()[0] * self.group2()[1]) + (other.group1()[2] * self.group2()[3])),
                (-(other.group1()[2] * self.group2()[2]) - (other.group1()[3] * self.group2()[3])),
            ]) + (Simd32x4::from(other.group2()[0]) * Simd32x4::from([self.group0()[3], self.group3()[2], self.group1()[1], self.group3()[0]]))
                - (Simd32x4::from(other.group2()[0]) * Simd32x4::from([self.group1()[3], self.group1()[2], self.group3()[1], self.group1()[0]]))
                + (Simd32x4::from(other.group2()[1]) * Simd32x4::from([self.group1()[2], self.group0()[3], self.group3()[0], self.group3()[1]]))
                - (Simd32x4::from(other.group2()[1]) * Simd32x4::from([self.group3()[2], self.group1()[3], self.group1()[0], self.group1()[1]]))
                - (Simd32x4::from(other.group2()[2]) * Simd32x4::from([self.group1()[1], self.group3()[0], self.group1()[3], self.group1()[2]]))
                + (Simd32x4::from(other.group2()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group0()[3], self.group3()[2]]))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group2(), 0, 1, 2, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[1])
                    + (other.group2()[1] * self.group0()[2])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[1] * self.group3()[2])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group2()[3]) - (other.group0()[2] * self.group2()[0])
                    + (other.group2()[2] * self.group0()[0])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[2] * self.group3()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) - (other.group0()[2] * self.group2()[3])
                    + (other.group2()[0] * self.group0()[1])
                    + (other.group1()[0] * self.group3()[1])
                    + (other.group1()[2] * self.group1()[3])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group3()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      108      142        0
    //    simd4       89       91        0
    // Totals...
    // yes simd      197      233        0
    //  no simd      464      506        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group3()[1])
                    + (other.group1()[1] * self.group0()[2])
                    + (other.group1()[3] * self.group0()[0])
                    + (other.group3()[1] * self.group0()[2])),
                (-(other.group0()[0] * self.group3()[2])
                    + (other.group0()[1] * self.group0()[3])
                    + (other.group0()[1] * self.group1()[3])
                    + (other.group0()[2] * self.group1()[0])
                    + (other.group1()[2] * self.group0()[0])
                    + (other.group1()[3] * self.group0()[1])
                    + (other.group3()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group0()[3])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group1()[0] * self.group0()[1])
                    + (other.group1()[3] * self.group0()[2])
                    + (other.group3()[2] * self.group3()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group3(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[1]]) * swizzle!(self.group3(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group3()[2]]) * swizzle!(self.group3(), 0, 1, 2, 2))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group0()[1], self.group3()[3]]) * swizzle!(other.group3(), 0, 1, 0, 3))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group1()[0] * self.group0()[3]) + (other.group2()[1] * self.group0()[2]) - (other.group3()[0] * self.group1()[3])),
                ((other.group1()[1] * self.group0()[3]) + (other.group2()[2] * self.group0()[0]) - (other.group3()[1] * self.group1()[3])),
                ((other.group1()[2] * self.group0()[3]) + (other.group2()[0] * self.group0()[1]) - (other.group3()[2] * self.group1()[3])),
                (-(other.group2()[0] * self.group0()[0]) - (other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 3, 3, 1, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[2], other.group0()[1]]) * swizzle!(self.group2(), 2, 0, 3, 1))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[2]]) * swizzle!(self.group2(), 0, 1, 2, 2))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[2]]) * swizzle!(self.group3(), 2, 0, 1, 2))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]]) * swizzle!(other.group3(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[1]]) * swizzle!(other.group3(), 2, 0, 1, 1))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group3(), 0, 1, 2, 1))),
            // e235, e315, e125, e5
            ((Simd32x4::from(other.group2()[0]) * Simd32x4::from([self.group0()[3], self.group3()[2], self.group1()[1], self.group3()[0]]))
                - (Simd32x4::from(other.group2()[0]) * Simd32x4::from([self.group1()[3], self.group1()[2], self.group3()[1], self.group1()[0]]))
                + (Simd32x4::from(other.group2()[1]) * Simd32x4::from([self.group1()[2], self.group0()[3], self.group3()[0], self.group3()[1]]))
                - (Simd32x4::from(other.group2()[1]) * Simd32x4::from([self.group3()[2], self.group1()[3], self.group1()[0], self.group1()[1]]))
                - (Simd32x4::from(other.group2()[2]) * Simd32x4::from([self.group1()[1], self.group3()[0], self.group1()[3], self.group1()[2]]))
                + (Simd32x4::from(other.group2()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group0()[3], self.group3()[2]]))
                + (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]))
                - (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group1()[3]]))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[0], other.group3()[0]]) * swizzle!(self.group2(), 3, 3, 1, 0))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[2], other.group3()[1]]) * swizzle!(self.group2(), 2, 0, 3, 1))
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[0], other.group1()[2]]) * swizzle!(self.group2(), 3, 3, 1, 2))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[2], other.group1()[3]]) * swizzle!(self.group2(), 2, 0, 3, 3))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group2(), 0, 1, 2, 1))
                + (swizzle!(other.group3(), 2, 0, 1, 2) * swizzle!(self.group2(), 1, 2, 0, 2))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[1])
                    + (other.group1()[1] * self.group3()[2])
                    - (other.group2()[3] * self.group2()[0])
                    + (other.group3()[2] * self.group1()[1])
                    + (other.group3()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group2()[3]) - (other.group0()[2] * self.group2()[0]) + (other.group1()[2] * self.group3()[0])
                    - (other.group2()[3] * self.group2()[1])
                    + (other.group3()[0] * self.group1()[2])
                    + (other.group3()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) - (other.group0()[2] * self.group2()[3])
                    + (other.group1()[2] * self.group1()[3])
                    - (other.group2()[3] * self.group2()[2])
                    + (other.group3()[1] * self.group1()[0])
                    + (other.group3()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group3()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])
                    - (other.group3()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group3()[3], self.group1()[3]]) * swizzle!(other.group2(), 1, 2, 2, 3))
                - (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group0()[0]]) * swizzle!(other.group3(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group0()[3], self.group0()[1]]) * swizzle!(other.group3(), 1, 2, 2, 1))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group3()[3]]) * swizzle!(other.group1(), 0, 1, 0, 3))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group0()[1], self.group0()[3]]) * swizzle!(other.group2(), 0, 1, 0, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       57      104        0
    //    simd4       50       51        0
    // Totals...
    // yes simd      107      155        0
    //  no simd      257      308        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[0] * self.group3()[0]) * -1.0),
                ((other.group0()[0] * self.group3()[1]) * -1.0),
                ((other.group0()[0] * self.group3()[2]) * -1.0),
                0.0,
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                - (Simd32x4::from(other.group0()[1]) * self.group0())),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[0]) * -1.0),
                ((other.group0()[1] * self.group1()[1]) * -1.0),
                ((other.group0()[1] * self.group1()[2]) * -1.0),
                (other.group0()[1] * self.group1()[3]),
            ]) - (Simd32x4::from(other.group0()[0]) * self.group2())),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group2()[0] * -1.0),
                (other.group0()[1] * self.group2()[1] * -1.0),
                (other.group0()[1] * self.group2()[2] * -1.0),
                (-(other.group0()[0] * self.group0()[3]) - (other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group3()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group3()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group3()[1])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group3()[2])),
                (other.group0()[1] * self.group2()[3] * -1.0),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       68      102        0
    //    simd4       55       57        0
    // Totals...
    // yes simd      123      159        0
    //  no simd      288      330        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[3] * self.group0()[0]),
                (other.group0()[3] * self.group0()[1]),
                (other.group0()[3] * self.group0()[2]),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group0()[3] * self.group1()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group0()[2])),
                ((other.group0()[1] * self.group3()[3]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) + (other.group0()[2] * self.group3()[3])),
                (-(other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group0()[3])),
            ]) - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            ((Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[3], self.group3()[2], self.group1()[1], self.group3()[0]]))
                - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group1()[2], self.group3()[1], self.group1()[0]]))
                + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group1()[2], self.group0()[3], self.group3()[0], self.group3()[1]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group3()[2], self.group1()[3], self.group1()[0], self.group1()[1]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group1()[1], self.group3()[0], self.group1()[3], self.group1()[2]]))
                + (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group0()[3], self.group3()[2]]))
                - (Simd32x4::from(other.group0()[3]) * self.group2())),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) - (other.group0()[3] * self.group1()[0])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group3()[3]) + (other.group0()[2] * self.group0()[0])
                    - (other.group0()[3] * self.group1()[1])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group3()[3]) - (other.group0()[3] * self.group1()[2])),
                (other.group0()[3] * self.group3()[3]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       77      114        0
    //    simd4       69       70        0
    // Totals...
    // yes simd      146      184        0
    //  no simd      353      394        0
    fn sandwich(self, other: Flector) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (other.group0()[3] * self.group0()[0]),
                (other.group0()[3] * self.group0()[1]),
                (other.group0()[3] * self.group0()[2]),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group1()[3])
                    + (other.group1()[2] * self.group3()[2])
                    + (other.group1()[3] * self.group3()[3])),
            ]) - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group3()[3], self.group3()[1]]) * swizzle!(other.group1(), 1, 2, 2, 1))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group0()[1], self.group3()[0]]) * swizzle!(other.group1(), 0, 1, 0, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group1()[0] * self.group1()[3]) - (other.group1()[1] * self.group3()[2])),
                ((other.group0()[2] * self.group0()[0]) - (other.group1()[1] * self.group1()[3]) - (other.group1()[2] * self.group3()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group1()[0] * self.group3()[1]) - (other.group1()[2] * self.group1()[3])),
                (-(other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group0()[3]) + (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(other.group1()[1] * self.group2()[2]) - (other.group1()[3] * self.group3()[0])),
                (-(other.group1()[2] * self.group2()[0]) - (other.group1()[3] * self.group3()[1])),
                (-(other.group1()[2] * self.group2()[3]) - (other.group1()[3] * self.group3()[2])),
                ((other.group1()[2] * self.group2()[2]) + (other.group1()[3] * self.group0()[3])),
            ]) + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[3], self.group3()[2], self.group1()[1], self.group3()[0]]))
                - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group1()[2], self.group3()[1], self.group1()[0]]))
                + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group1()[2], self.group0()[3], self.group3()[0], self.group3()[1]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group3()[2], self.group1()[3], self.group1()[0], self.group1()[1]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group1()[1], self.group3()[0], self.group1()[3], self.group1()[2]]))
                + (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group0()[3], self.group3()[2]]))
                - (Simd32x4::from(other.group0()[3]) * self.group2())
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[1], self.group1()[3]]) * swizzle!(other.group1(), 0, 1, 0, 3))
                + (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group2(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[3] * self.group1()[0]) + (other.group1()[2] * self.group1()[1]) + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[0]) - (other.group0()[3] * self.group1()[1]) + (other.group1()[0] * self.group1()[2]) + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group3()[3]) - (other.group0()[3] * self.group1()[2]) + (other.group1()[1] * self.group1()[0]) + (other.group1()[3] * self.group0()[2])),
                0.0,
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group0()[1]]) * swizzle!(other.group1(), 0, 1, 0, 1))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group0()[3], self.group0()[2]]) * swizzle!(other.group1(), 1, 2, 2, 2))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group0()[1], self.group3()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      108      146        0
    //    simd4       53       54        0
    // Totals...
    // yes simd      161      200        0
    //  no simd      320      362        0
    fn sandwich(self, other: Line) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group0()[2])),
                (-(other.group0()[1] * self.group3()[3]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) - (other.group0()[2] * self.group3()[3])),
                ((other.group0()[0] * self.group1()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (other.group1()[1] * self.group0()[1])
                    + (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0]) + (other.group1()[0] * self.group0()[2])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (other.group1()[1] * self.group0()[0])),
                (-(other.group0()[1] * self.group3()[1]) - (other.group0()[2] * self.group3()[2]) - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group1()[1]]) * swizzle!(self.group0(), 2, 0, 1, 1))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1])
                    - (other.group1()[0] * self.group0()[3])
                    + (other.group1()[0] * self.group1()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[1] * self.group3()[2])
                    + (other.group1()[2] * self.group1()[1])
                    - (other.group1()[2] * self.group3()[1])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group2()[3]) - (other.group0()[2] * self.group2()[0]) + (other.group1()[0] * self.group1()[2])
                    - (other.group1()[0] * self.group3()[2])
                    - (other.group1()[1] * self.group0()[3])
                    + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group1()[0])
                    + (other.group1()[2] * self.group3()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0])
                    - (other.group0()[2] * self.group2()[3])
                    - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[0] * self.group3()[1])
                    + (other.group1()[1] * self.group1()[0])
                    - (other.group1()[1] * self.group3()[0])
                    - (other.group1()[2] * self.group0()[3])
                    + (other.group1()[2] * self.group1()[3])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group3()[2]) + (other.group1()[0] * self.group3()[3]) + (other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1])),
                ((other.group0()[2] * self.group3()[0]) - (other.group1()[0] * self.group0()[2]) + (other.group1()[1] * self.group3()[3]) + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group3()[1]) + (other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0]) + (other.group1()[2] * self.group3()[3])),
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2]) + (other.group1()[1] * self.group1()[1])
                    - (other.group1()[1] * self.group3()[1])
                    + (other.group1()[2] * self.group1()[2])
                    - (other.group1()[2] * self.group3()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       91      122        0
    //    simd4       66       68        0
    // Totals...
    // yes simd      157      190        0
    //  no simd      355      394        0
    fn sandwich(self, other: Motor) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) - (other.group0()[3] * self.group0()[0])),
                (-(other.group0()[2] * self.group0()[0]) - (other.group0()[3] * self.group0()[1])),
                (-(other.group0()[2] * self.group3()[3]) - (other.group0()[3] * self.group0()[2])),
                ((other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (other.group1()[0] * self.group0()[0])
                    + (other.group1()[1] * self.group0()[1])
                    + (other.group1()[2] * self.group0()[2])
                    - (other.group1()[3] * self.group3()[3])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group0()[1], self.group0()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))),
            // e23, e31, e12, e45
            ((Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group3()[3], self.group0()[1]]) * swizzle!(other.group1(), 1, 2, 2, 1))
                - (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group3()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group0()[3], self.group3()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group0()[1], self.group0()[0]]) * swizzle!(other.group1(), 0, 1, 0, 0))
                + (swizzle!(other.group0(), 2, 0, 1, 3) * swizzle!(self.group1(), 1, 2, 0, 3))
                - (swizzle!(other.group1(), 3, 3, 3, 2) * swizzle!(self.group0(), 0, 1, 2, 2))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) - (other.group0()[3] * self.group2()[0]) - (other.group1()[0] * self.group0()[3])
                    + (other.group1()[0] * self.group1()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[1] * self.group3()[2])
                    + (other.group1()[2] * self.group1()[1])
                    - (other.group1()[2] * self.group3()[1])
                    - (other.group1()[3] * self.group1()[0])
                    + (other.group1()[3] * self.group3()[0])),
                (-(other.group0()[2] * self.group2()[0]) - (other.group0()[3] * self.group2()[1]) + (other.group1()[0] * self.group1()[2])
                    - (other.group1()[0] * self.group3()[2])
                    - (other.group1()[1] * self.group0()[3])
                    + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group1()[0])
                    + (other.group1()[2] * self.group3()[0])
                    - (other.group1()[3] * self.group1()[1])
                    + (other.group1()[3] * self.group3()[1])),
                (-(other.group0()[2] * self.group2()[3]) - (other.group0()[3] * self.group2()[2]) - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[0] * self.group3()[1])
                    + (other.group1()[1] * self.group1()[0])
                    - (other.group1()[1] * self.group3()[0])
                    - (other.group1()[2] * self.group0()[3])
                    + (other.group1()[2] * self.group1()[3])
                    - (other.group1()[3] * self.group1()[2])
                    + (other.group1()[3] * self.group3()[2])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[1], self.group3()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(other.group1()[1] * self.group3()[1]) - (other.group1()[2] * self.group3()[2]) - (other.group1()[3] * self.group0()[3])
                    + (other.group1()[3] * self.group1()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]]) * swizzle!(other.group1(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group3()[3], self.group1()[1]]) * swizzle!(other.group1(), 1, 2, 2, 1))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group2()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))
                + (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group1()[3], self.group2()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 0, 1, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for VersorEven {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      270      340        0
    //    simd2        8        8        0
    //    simd3      102      102        0
    //    simd4       92       93        0
    // Totals...
    // yes simd      472      543        0
    //  no simd      960     1034        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                (-(other.group0()[1] * self.group0()[3])
                    + (other.group7()[0] * self.group2()[0])
                    + (other.group7()[1] * self.group2()[1])
                    + (other.group7()[2] * self.group2()[2])
                    + (other.group8()[0] * self.group0()[0])
                    + (other.group8()[1] * self.group0()[1])
                    + (other.group8()[2] * self.group0()[2])
                    - (other.group1()[3] * self.group2()[3])
                    + (other.group6()[0] * self.group1()[0])
                    + (other.group6()[1] * self.group1()[1])
                    + (other.group6()[2] * self.group1()[2])
                    - (self.group3()[3] * other[e1])),
                ((other.group0()[0] * self.group0()[3])
                    - (other.group4()[0] * self.group2()[0])
                    - (other.group4()[1] * self.group2()[1])
                    - (other.group4()[2] * self.group2()[2])
                    - (other.group5()[0] * self.group1()[0])
                    - (other.group5()[1] * self.group1()[1])
                    - (other.group5()[2] * self.group1()[2])
                    - (other.group3()[0] * self.group0()[0])
                    - (other.group3()[1] * self.group0()[1])
                    - (other.group3()[2] * self.group0()[2])
                    + (other.group9()[3] * self.group3()[3])
                    + (self.group2()[3] * other[e45])),
            ]) - (Simd32x2::from(self.group1()[3]) * Simd32x2::from([other.group6()[3], other.group3()[3]]))
                + (Simd32x2::from(self.group3()[0]) * Simd32x2::from([other.group1()[0], other.group9()[0]]))
                + (Simd32x2::from(self.group3()[1]) * Simd32x2::from([other.group1()[1], other.group9()[1]]))
                + (Simd32x2::from(self.group3()[2]) * Simd32x2::from([other.group1()[2], other.group9()[2]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group4()[0] * self.group2()[3]) - (other.group4()[1] * self.group2()[2])
                    + (other.group4()[2] * self.group2()[1])
                    + (other.group3()[0] * self.group3()[3])
                    + (other.group9()[2] * self.group1()[1])
                    + (other.group9()[3] * self.group0()[0])
                    - (self.group2()[0] * other[e45])),
                ((other.group4()[0] * self.group2()[2]) - (other.group4()[1] * self.group2()[3]) - (other.group4()[2] * self.group2()[0])
                    + (other.group3()[1] * self.group3()[3])
                    + (other.group9()[0] * self.group1()[2])
                    + (other.group9()[3] * self.group0()[1])
                    - (self.group2()[1] * other[e45])),
                (-(other.group4()[0] * self.group2()[1]) + (other.group4()[1] * self.group2()[0]) - (other.group4()[2] * self.group2()[3])
                    + (other.group3()[2] * self.group3()[3])
                    + (other.group9()[1] * self.group1()[0])
                    + (other.group9()[3] * self.group0()[2])
                    - (self.group2()[2] * other[e45])),
                (-(other.group4()[1] * self.group1()[1])
                    - (other.group4()[1] * self.group3()[1])
                    - (other.group4()[2] * self.group1()[2])
                    - (other.group4()[2] * self.group3()[2])
                    - (other.group5()[1] * self.group0()[1])
                    - (other.group5()[2] * self.group0()[2])
                    - (other.group9()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(other.group0()[0]) * self.group3())
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other[e45]]))
                + (Simd32x4::from([other.group5()[1], other.group5()[2], other.group5()[0], other.group3()[3]]) * swizzle!(self.group3(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group4()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other[e45]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group5()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group4()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))
                - (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group0()[0]]) * swizzle!(other.group9(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group0()[3], self.group0()[1]]) * swizzle!(other.group9(), 1, 2, 2, 1))),
            // e5
            ((other.group0()[0] * self.group2()[3])
                - (other.group5()[0] * self.group2()[0])
                - (other.group5()[1] * self.group2()[1])
                - (other.group5()[2] * self.group2()[2])
                - (other.group3()[0] * self.group1()[0])
                + (other.group3()[0] * self.group3()[0])
                - (other.group3()[1] * self.group1()[1])
                + (other.group3()[1] * self.group3()[1])
                - (other.group3()[2] * self.group1()[2])
                + (other.group3()[2] * self.group3()[2])
                - (other.group3()[3] * self.group2()[3])
                + (other.group9()[0] * self.group2()[0])
                + (other.group9()[1] * self.group2()[1])
                + (other.group9()[2] * self.group2()[2])
                + (other.group9()[3] * self.group0()[3])
                - (other.group9()[3] * self.group1()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group8()[2] * self.group1()[1]) + (self.group3()[0] * other[e1])),
                ((other.group8()[1] * self.group1()[3]) + (self.group3()[1] * other[e1])),
                ((other.group8()[2] * self.group1()[3]) + (self.group3()[2] * other[e1])),
                ((other.group7()[2] * self.group2()[2]) + (other.group6()[3] * self.group0()[3])),
            ]) - (Simd32x4::from(other.group8()[0]) * Simd32x4::from([self.group0()[3], self.group3()[2], self.group1()[1], self.group0()[0]]))
                - (Simd32x4::from(other.group8()[1]) * Simd32x4::from([self.group1()[2], self.group0()[3], self.group3()[0], self.group0()[1]]))
                - (Simd32x4::from(other.group8()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group0()[3], self.group0()[2]]))
                - (Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group1()[3]]) * self.group2())
                + (Simd32x4::from([other.group8()[0], other.group8()[0], other.group8()[1], other.group0()[1]]) * swizzle!(self.group1(), 3, 2, 0, 3))
                + (Simd32x4::from([other.group8()[1], other.group8()[2], other.group8()[0], other[e1]]) * swizzle!(self.group3(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group7()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group7()[1]]) * swizzle!(self.group2(), 1, 2, 0, 1))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[2]]) * swizzle!(other.group6(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[3], self.group1()[1]]) * swizzle!(other.group1(), 1, 2, 2, 1))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[3], self.group3()[1]]) * swizzle!(other.group6(), 1, 2, 2, 1))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[1], self.group1()[0]]) * swizzle!(other.group1(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[1], self.group3()[0]]) * swizzle!(other.group6(), 0, 1, 0, 0))
                - (Simd32x4::from([other[e1], other[e1], other[e1], other.group1()[2]]) * swizzle!(self.group1(), 0, 1, 2, 2))),
            // e41, e42, e43
            (Simd32x3::from([
                (-(other.group1()[2] * self.group0()[1]) - (other.group6()[1] * self.group0()[2])),
                (-(other.group1()[0] * self.group0()[2]) - (other.group6()[2] * self.group0()[0])),
                (-(other.group1()[1] * self.group0()[0]) - (other.group6()[0] * self.group0()[1])),
            ]) - (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group6()[3], other.group1()[2], other.group6()[1]]))
                + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group6()[2], other.group6()[3], other.group1()[0]]))
                + (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], other.group6()[0], other.group6()[3]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                - (Simd32x3::from([self.group0()[3], self.group0()[3], self.group1()[1]]) * swizzle!(other.group7(), 0, 1, 0))
                + (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group7(), 2, 0, 1))
                - (Simd32x3::from([self.group1()[2], self.group1()[0], self.group0()[3]]) * swizzle!(other.group7(), 1, 2, 2))
                - (Simd32x3::from([self.group1()[3], self.group1()[3], self.group3()[1]]) * swizzle!(other.group7(), 0, 1, 0))
                + (Simd32x3::from([self.group3()[1], self.group3()[2], self.group3()[0]]) * swizzle!(other.group7(), 2, 0, 1))
                - (Simd32x3::from([self.group3()[2], self.group3()[0], self.group1()[3]]) * swizzle!(other.group7(), 1, 2, 2))),
            // e23, e31, e12
            (Simd32x3::from([
                (-(other.group1()[1] * self.group3()[2]) + (other.group1()[2] * self.group3()[1]) - (other.group6()[1] * self.group1()[2])
                    + (other.group6()[2] * self.group1()[1])),
                ((other.group1()[0] * self.group3()[2]) - (other.group1()[2] * self.group3()[0]) + (other.group6()[0] * self.group1()[2]) - (other.group6()[2] * self.group1()[0])),
                (-(other.group1()[0] * self.group3()[1]) + (other.group1()[1] * self.group3()[0]) - (other.group6()[0] * self.group1()[1])
                    + (other.group6()[1] * self.group1()[0])),
            ]) - (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                - (Simd32x3::from(other.group6()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                - (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(other[e1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group8(), 2, 0, 1))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group3()[3]]) * swizzle!(other.group8(), 1, 2, 2))
                + (Simd32x3::from([self.group2()[1], self.group2()[2], self.group2()[0]]) * swizzle!(other.group7(), 2, 0, 1))
                - (Simd32x3::from([self.group2()[2], self.group2()[0], self.group2()[3]]) * swizzle!(other.group7(), 1, 2, 2))
                - (Simd32x3::from([self.group2()[3], self.group2()[3], self.group2()[1]]) * swizzle!(other.group7(), 0, 1, 0))
                - (Simd32x3::from([self.group3()[3], self.group3()[3], self.group0()[1]]) * swizzle!(other.group8(), 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group5()[0] * self.group0()[3]) - (other.group5()[2] * self.group1()[1]) + (other.group3()[1] * self.group0()[2]) - (other.group9()[0] * self.group1()[3])),
                (-(other.group5()[0] * self.group1()[2]) + (other.group5()[1] * self.group0()[3]) + (other.group3()[2] * self.group0()[0])
                    - (other.group9()[1] * self.group1()[3])),
                (-(other.group5()[1] * self.group1()[0]) + (other.group5()[2] * self.group0()[3]) + (other.group3()[0] * self.group0()[1])
                    - (other.group9()[2] * self.group1()[3])),
                (-(other.group5()[2] * self.group3()[2])
                    - (other.group3()[1] * self.group0()[1])
                    - (other.group3()[2] * self.group0()[2])
                    - (other.group3()[3] * self.group0()[3])),
            ]) + (Simd32x4::from(other.group0()[0]) * self.group1())
                + (Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group9()[3]]))
                + (Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[0], other.group4()[0]]) * swizzle!(self.group2(), 3, 3, 1, 0))
                + (Simd32x4::from([other.group4()[1], other.group4()[2], other.group4()[2], other.group4()[1]]) * swizzle!(self.group2(), 2, 0, 3, 1))
                - (Simd32x4::from([other.group4()[2], other.group4()[0], other.group4()[1], other[e45]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group5()[1], other.group5()[2], other.group5()[0], other.group9()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group5()[0]]) * swizzle!(self.group3(), 0, 1, 2, 0))
                - (Simd32x4::from([other.group9()[1], other.group9()[2], other.group9()[0], other.group5()[1]]) * swizzle!(self.group3(), 2, 0, 1, 1))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]]) * swizzle!(other.group9(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[1]]) * swizzle!(other.group9(), 2, 0, 1, 1))
                + (Simd32x4::from([other[e45], other[e45], other[e45], other.group4()[2]]) * swizzle!(self.group2(), 0, 1, 2, 2))
                - (swizzle!(other.group3(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e423, e431, e412
            (Simd32x3::from([
                ((other.group9()[1] * self.group0()[2]) - (other.group9()[2] * self.group0()[1])),
                (-(other.group9()[0] * self.group0()[2]) + (other.group9()[2] * self.group0()[0])),
                ((other.group9()[0] * self.group0()[1]) - (other.group9()[1] * self.group0()[0])),
            ]) + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group5(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group3()[3]]) * swizzle!(other.group5(), 1, 2, 2))
                + (Simd32x3::from([self.group0()[3], self.group0()[3], self.group1()[1]]) * swizzle!(other.group4(), 0, 1, 0))
                - (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group4(), 2, 0, 1))
                + (Simd32x3::from([self.group1()[2], self.group1()[0], self.group0()[3]]) * swizzle!(other.group4(), 1, 2, 2))
                + (Simd32x3::from([self.group1()[3], self.group1()[3], self.group3()[1]]) * swizzle!(other.group4(), 0, 1, 0))
                - (Simd32x3::from([self.group3()[1], self.group3()[2], self.group3()[0]]) * swizzle!(other.group4(), 2, 0, 1))
                + (Simd32x3::from([self.group3()[2], self.group3()[0], self.group1()[3]]) * swizzle!(other.group4(), 1, 2, 2))
                + (Simd32x3::from([self.group3()[3], self.group3()[3], self.group0()[1]]) * swizzle!(other.group5(), 0, 1, 0))),
            // e235, e315, e125
            (Simd32x3::from([
                (-(other.group9()[1] * self.group2()[2]) + (other.group9()[2] * self.group2()[1])),
                ((other.group9()[0] * self.group2()[2]) - (other.group9()[2] * self.group2()[0])),
                (-(other.group9()[0] * self.group2()[1]) + (other.group9()[1] * self.group2()[0])),
            ]) + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                + (Simd32x3::from(other.group3()[0]) * Simd32x3::from([self.group0()[3], self.group3()[2], self.group1()[1]]))
                - (Simd32x3::from(other.group3()[0]) * Simd32x3::from([self.group1()[3], self.group1()[2], self.group3()[1]]))
                + (Simd32x3::from(other.group3()[1]) * Simd32x3::from([self.group1()[2], self.group0()[3], self.group3()[0]]))
                - (Simd32x3::from(other.group3()[1]) * Simd32x3::from([self.group3()[2], self.group1()[3], self.group1()[0]]))
                - (Simd32x3::from(other.group3()[2]) * Simd32x3::from([self.group1()[1], self.group3()[0], self.group1()[3]]))
                + (Simd32x3::from(other.group3()[2]) * Simd32x3::from([self.group3()[1], self.group1()[0], self.group0()[3]]))
                - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                + (Simd32x3::from(other.group9()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(other.group9()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                - (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                - (Simd32x3::from([self.group2()[1], self.group2()[2], self.group2()[0]]) * swizzle!(other.group5(), 2, 0, 1))
                + (Simd32x3::from([self.group2()[2], self.group2()[0], self.group2()[3]]) * swizzle!(other.group5(), 1, 2, 2))
                + (Simd32x3::from([self.group2()[3], self.group2()[3], self.group2()[1]]) * swizzle!(other.group5(), 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group3()[0]) + (other.group8()[0] * self.group3()[3]) + (other.group8()[1] * self.group0()[2])
                    - (other.group1()[2] * self.group1()[1])
                    - (other.group1()[3] * self.group2()[0])),
                ((other.group0()[1] * self.group3()[1]) + (other.group8()[1] * self.group3()[3]) + (other.group8()[2] * self.group0()[0])
                    - (other.group1()[0] * self.group1()[2])
                    - (other.group1()[3] * self.group2()[1])),
                ((other.group0()[1] * self.group3()[2]) + (other.group8()[0] * self.group0()[1]) + (other.group8()[2] * self.group3()[3])
                    - (other.group1()[1] * self.group1()[0])
                    - (other.group1()[3] * self.group2()[2])),
                ((other.group8()[1] * self.group1()[1]) - (other.group8()[1] * self.group3()[1]) + (other.group8()[2] * self.group1()[2]) - (other.group8()[2] * self.group3()[2])
                    + (other.group6()[2] * self.group2()[2])),
            ]) + (Simd32x4::from(other[e1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[0], other.group0()[1]]) * swizzle!(self.group2(), 3, 3, 1, 3))
                - (Simd32x4::from([other.group7()[1], other.group7()[2], other.group7()[2], other.group6()[3]]) * swizzle!(self.group2(), 2, 0, 3, 3))
                + (Simd32x4::from([other.group7()[2], other.group7()[0], other.group7()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group8()[2], other.group8()[0], other.group8()[1], other[e1]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group8()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group6()[3], other.group6()[3], other.group6()[3], other.group8()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group2()[1]]) * swizzle!(other.group1(), 0, 1, 0, 1))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group0()[3], self.group2()[2]]) * swizzle!(other.group1(), 1, 2, 2, 2))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group2()[0]]) * swizzle!(other.group6(), 0, 1, 0, 0))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group1()[3], self.group2()[1]]) * swizzle!(other.group6(), 1, 2, 2, 1))),
            // e1234
            (-(other.group0()[1] * self.group3()[3])
                + (other.group7()[0] * self.group1()[0])
                + (other.group7()[0] * self.group3()[0])
                + (other.group7()[1] * self.group1()[1])
                + (other.group7()[1] * self.group3()[1])
                + (other.group7()[2] * self.group1()[2])
                + (other.group7()[2] * self.group3()[2])
                - (other.group1()[0] * self.group0()[0])
                - (other.group1()[1] * self.group0()[1])
                - (other.group1()[2] * self.group0()[2])
                - (other.group1()[3] * self.group0()[3])
                - (other.group1()[3] * self.group1()[3])
                + (other.group6()[0] * self.group0()[0])
                + (other.group6()[1] * self.group0()[1])
                + (other.group6()[2] * self.group0()[2])
                + (other.group6()[3] * self.group3()[3])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64      106        0
    //    simd4       56       57        0
    // Totals...
    // yes simd      120      163        0
    //  no simd      288      334        0
    fn sandwich(self, other: Plane) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) * -1.0),
                ((other.group0()[0] * self.group0()[2]) * -1.0),
                ((other.group0()[1] * self.group0()[0]) * -1.0),
                ((other.group0()[2] * self.group3()[2]) + (other.group0()[3] * self.group3()[3])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group3()[3], self.group3()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group0()[1], self.group3()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group3()[2])),
                (-(other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group3()[0])),
                (-(other.group0()[0] * self.group3()[1]) - (other.group0()[2] * self.group1()[3])),
                ((other.group0()[2] * self.group1()[2]) + (other.group0()[3] * self.group3()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) - (other.group0()[3] * self.group3()[0])),
                (-(other.group0()[2] * self.group2()[0]) - (other.group0()[3] * self.group3()[1])),
                (-(other.group0()[2] * self.group2()[3]) - (other.group0()[3] * self.group3()[2])),
                ((other.group0()[2] * self.group2()[2]) + (other.group0()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[1], self.group1()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))
                + (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group2(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[2] * self.group1()[1]) + (other.group0()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[3] * self.group0()[1])),
                ((other.group0()[1] * self.group1()[0]) + (other.group0()[3] * self.group0()[2])),
                ((other.group0()[2] * self.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group0()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group0()[3], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       60      105        0
    //    simd4       61       62        0
    // Totals...
    // yes simd      121      167        0
    //  no simd      304      353        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[3] * self.group1()[0]) * -1.0),
                ((other.group0()[3] * self.group1()[1]) * -1.0),
                ((other.group0()[3] * self.group1()[2]) * -1.0),
                (other.group0()[2] * self.group3()[2]),
            ]) - (Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other[e2]]) * self.group3())
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group2()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group3()[3], self.group3()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group0()[1], self.group3()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[0] * other[e2]) * -1.0),
                ((self.group0()[1] * other[e2]) * -1.0),
                ((self.group0()[2] * other[e2]) * -1.0),
                ((other.group0()[3] * self.group2()[3]) * -1.0),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other[e2]]) * swizzle!(self.group3(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group1()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group1()[3], self.group1()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group0()[2] * self.group2()[1]) + (self.group3()[0] * other[e2])),
                ((other.group0()[0] * self.group2()[2]) + (self.group3()[1] * other[e2])),
                ((other.group0()[1] * self.group2()[0]) + (self.group3()[2] * other[e2])),
                (-(other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group0()[3])),
            ]) - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[3], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[1], self.group0()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))
                - (Simd32x4::from([other[e2], other[e2], other[e2], other.group0()[3]]) * self.group1())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group0()[2] * self.group1()[1]) - (other.group0()[3] * self.group2()[0])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[3] * self.group2()[1])),
                (-(other.group0()[1] * self.group1()[0]) - (other.group0()[3] * self.group2()[2])),
                ((other.group0()[2] * self.group2()[2]) - (self.group0()[3] * other[e2])),
            ]) + (Simd32x4::from(other[e2]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group2()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group0()[3], self.group2()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       52       74        0
    //    simd4       47       52        0
    // Totals...
    // yes simd       99      126        0
    //  no simd      240      282        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(other[scalar]) * self.group0()),
            // e415, e425, e435, e321
            (Simd32x4::from(other[scalar]) * self.group1()),
            // e235, e315, e125, e5
            (Simd32x4::from(other[scalar]) * self.group2()),
            // e1, e2, e3, e4
            (Simd32x4::from(other[scalar]) * self.group3()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64      109        0
    //    simd4       60       61        0
    // Totals...
    // yes simd      124      170        0
    //  no simd      304      353        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) * -1.0),
                ((other.group0()[0] * self.group0()[2]) * -1.0),
                ((other.group0()[1] * self.group0()[0]) * -1.0),
                (other.group0()[3] * self.group3()[3]),
            ]) + (Simd32x4::from(other[e4315]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group3()[3], self.group3()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group0()[1], self.group3()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))
                + (Simd32x4::from([other[e4315], other[e4315], other[e4315], other.group0()[2]]) * swizzle!(self.group3(), 0, 1, 2, 2))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group3()[2]) + (self.group2()[0] * other[e4315])),
                (-(other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group3()[0]) + (self.group2()[1] * other[e4315])),
                (-(other.group0()[0] * self.group3()[1]) - (other.group0()[2] * self.group1()[3]) + (self.group2()[2] * other[e4315])),
                ((other.group0()[2] * self.group1()[2]) + (other.group0()[3] * self.group3()[3]) - (self.group2()[3] * other[e4315])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) - (other.group0()[3] * self.group3()[0])),
                (-(other.group0()[2] * self.group2()[0]) - (other.group0()[3] * self.group3()[1])),
                (-(other.group0()[2] * self.group2()[3]) - (other.group0()[3] * self.group3()[2])),
                ((other.group0()[2] * self.group2()[2]) + (other.group0()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[1], self.group1()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))
                + (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group2(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group2()[0] * other[e4315]) * -1.0),
                ((self.group2()[1] * other[e4315]) * -1.0),
                ((self.group2()[2] * other[e4315]) * -1.0),
                ((other.group0()[2] * self.group0()[2]) * -1.0),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other[e4315]]) * swizzle!(self.group1(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other[e4315]]) * self.group0())
                - (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group0()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group0()[3], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      104      142        0
    //    simd4       94       95        0
    // Totals...
    // yes simd      198      237        0
    //  no simd      480      522        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2])
                    - (other.group0()[3] * self.group0()[0])
                    - (other.group1()[0] * self.group3()[3])
                    - (other.group1()[1] * self.group0()[2])
                    - (other.group3()[3] * self.group1()[0])
                    - (other.group3()[3] * self.group3()[0])),
                (-(other.group0()[2] * self.group1()[0])
                    - (other.group0()[3] * self.group0()[1])
                    - (other.group1()[1] * self.group3()[3])
                    - (other.group1()[2] * self.group0()[0])
                    - (other.group3()[3] * self.group1()[1])
                    - (other.group3()[3] * self.group3()[1])),
                (-(other.group0()[2] * self.group0()[3])
                    - (other.group0()[3] * self.group0()[2])
                    - (other.group1()[0] * self.group0()[1])
                    - (other.group1()[2] * self.group3()[3])
                    - (other.group3()[3] * self.group1()[2])
                    - (other.group3()[3] * self.group3()[2])),
                ((other.group0()[2] * self.group2()[2])
                    + (other.group1()[2] * self.group1()[2])
                    + (other.group2()[0] * self.group0()[0])
                    + (other.group2()[1] * self.group0()[1])
                    + (other.group2()[2] * self.group0()[2])
                    + (other.group3()[2] * self.group3()[2])),
            ]) - (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group2()[3]]) * swizzle!(self.group3(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group2()[3]]) * swizzle!(other.group3(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group3()[3], self.group3()[1]]) * swizzle!(other.group3(), 1, 2, 2, 1))
                - (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group0()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[1]]) * swizzle!(other.group0(), 2, 0, 1, 1))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group0()[1], self.group3()[0]]) * swizzle!(other.group3(), 0, 1, 0, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) - (other.group3()[3] * self.group2()[0])),
                (-(other.group0()[2] * self.group2()[0]) - (other.group3()[3] * self.group2()[1])),
                (-(other.group0()[2] * self.group2()[3]) - (other.group3()[3] * self.group2()[2])),
                ((other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group3()[3]]) * swizzle!(self.group2(), 3, 3, 1, 3))
                - (Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other.group3()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[3]]) * swizzle!(self.group1(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[3]]) * swizzle!(self.group3(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group3()[3], self.group0()[1]]) * swizzle!(other.group2(), 1, 2, 2, 1))
                - (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group3()[0]]) * swizzle!(other.group1(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group0()[3], self.group3()[1]]) * swizzle!(other.group1(), 1, 2, 2, 1))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group1()[1]]) * swizzle!(other.group3(), 0, 1, 0, 1))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group1()[3], self.group1()[2]]) * swizzle!(other.group3(), 1, 2, 2, 2))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 0, 1, 0, 0))
                + (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 2) * swizzle!(self.group3(), 0, 1, 2, 2))
                - (swizzle!(other.group2(), 3, 3, 3, 2) * swizzle!(self.group0(), 0, 1, 2, 2))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(other.group1()[0] * self.group2()[3])
                    - (other.group1()[1] * self.group2()[2])
                    - (other.group1()[3] * self.group2()[0])
                    - (other.group2()[2] * self.group3()[1])
                    - (other.group2()[3] * self.group1()[0])
                    + (other.group3()[2] * self.group2()[1])),
                (-(other.group1()[1] * self.group2()[3])
                    - (other.group1()[2] * self.group2()[0])
                    - (other.group1()[3] * self.group2()[1])
                    - (other.group2()[0] * self.group3()[2])
                    - (other.group2()[3] * self.group1()[1])
                    + (other.group3()[0] * self.group2()[2])),
                (-(other.group1()[0] * self.group2()[1])
                    - (other.group1()[2] * self.group2()[3])
                    - (other.group1()[3] * self.group2()[2])
                    - (other.group2()[1] * self.group3()[0])
                    - (other.group2()[3] * self.group1()[2])
                    + (other.group3()[1] * self.group2()[0])),
                ((other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])
                    + (other.group1()[1] * self.group0()[1])
                    + (other.group1()[2] * self.group0()[2])
                    + (other.group1()[3] * self.group3()[3])
                    - (other.group3()[3] * self.group0()[3])),
            ]) - (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))
                + (Simd32x4::from([other.group2()[0], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group3(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group3()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group2()[2], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[1]]) * swizzle!(self.group3(), 0, 1, 2, 1))
                + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[3], self.group0()[2]]) * swizzle!(other.group3(), 1, 2, 2, 2))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[1], self.group0()[1]]) * swizzle!(other.group3(), 0, 1, 0, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[3] * self.group3()[0]) - (other.group3()[2] * self.group1()[1]) - (other.group3()[3] * self.group2()[0])),
                ((other.group0()[3] * self.group3()[1]) - (other.group3()[0] * self.group1()[2]) - (other.group3()[3] * self.group2()[1])),
                ((other.group0()[3] * self.group3()[2]) - (other.group3()[1] * self.group1()[0]) - (other.group3()[3] * self.group2()[2])),
                (-(other.group2()[2] * self.group3()[2]) - (other.group2()[3] * self.group0()[3]) + (other.group3()[2] * self.group2()[2])),
            ]) + (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[2], other.group1()[3]]) * swizzle!(self.group2(), 2, 0, 3, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[1]]) * swizzle!(other.group2(), 2, 0, 1, 1))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group3()[3], self.group1()[2]]) * swizzle!(other.group2(), 1, 2, 2, 2))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group2()[0]]) * swizzle!(other.group3(), 0, 1, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group0()[3], self.group2()[1]]) * swizzle!(other.group3(), 1, 2, 2, 1))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group2()[1]]) * swizzle!(other.group1(), 0, 1, 0, 1))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group1()[3], self.group2()[2]]) * swizzle!(other.group1(), 1, 2, 2, 2))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group0()[1], self.group1()[1]]) * swizzle!(other.group2(), 0, 1, 0, 1))
                - (swizzle!(other.group0(), 0, 1, 0, 3) * swizzle!(self.group2(), 3, 3, 1, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      104      142        0
    //    simd4       94       95        0
    // Totals...
    // yes simd      198      237        0
    //  no simd      480      522        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[1])
                    + (self.group0()[3] * other.group0()[0])
                    + (self.group1()[2] * other.group0()[1])
                    + (self.group1()[3] * other.group0()[0])
                    + (self.group3()[3] * other.group3()[0])),
                ((self.group0()[1] * other.group0()[3])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[3] * other.group0()[1])
                    + (self.group1()[0] * other.group0()[2])
                    + (self.group1()[3] * other.group0()[1])
                    + (self.group3()[3] * other.group3()[1])),
                ((self.group0()[2] * other.group0()[3])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group0()[3] * other.group0()[2])
                    + (self.group1()[1] * other.group0()[0])
                    + (self.group1()[3] * other.group0()[2])
                    + (self.group3()[3] * other.group3()[2])),
                (-(self.group0()[2] * other.group2()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group3()[2]]) * swizzle!(self.group3(), 2, 1, 2, 2))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group0()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group3()[1]]) * swizzle!(self.group3(), 0, 0, 1, 1))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group2()[1]) + (self.group0()[3] * other.group1()[0]) - (self.group1()[3] * other.group3()[0]) + (self.group3()[3] * other.group2()[0])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[3] * other.group1()[1]) - (self.group1()[3] * other.group3()[1]) + (self.group3()[3] * other.group2()[1])),
                ((self.group0()[1] * other.group2()[0]) + (self.group0()[3] * other.group1()[2]) - (self.group1()[3] * other.group3()[2]) + (self.group3()[3] * other.group2()[2])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2]) + (self.group2()[2] * other.group0()[2])
                    - (self.group3()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group1()[3]]) * other.group0())
                + (Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group0()[1]]) * swizzle!(self.group2(), 2, 1, 2, 1))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group3()[1]]) * swizzle!(self.group1(), 0, 0, 1, 1))
                + (Simd32x4::from([other.group1()[1], other.group0()[3], other.group0()[3], other.group3()[2]]) * swizzle!(self.group1(), 2, 1, 2, 2))
                - (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group1()[0]]) * swizzle!(self.group3(), 0, 0, 1, 0))
                + (Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 0, 0, 1, 0))
                - (Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group1()[1]]) * swizzle!(self.group3(), 2, 1, 2, 1))
                - (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (swizzle!(self.group3(), 1, 2, 0, 3) * swizzle!(other.group3(), 2, 0, 1, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group2()[3] * other.group1()[0]) - (self.group3()[0] * other.group3()[3])),
                ((self.group2()[3] * other.group1()[1]) - (self.group3()[1] * other.group3()[3])),
                ((self.group2()[3] * other.group1()[2]) - (self.group3()[2] * other.group3()[3])),
                (-(self.group2()[3] * other.group1()[3]) + (self.group3()[2] * other.group2()[2])),
            ]) + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                - (Simd32x4::from(self.group2()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group1()[0]]))
                - (Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group1()[1]]))
                - (Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group1()[2]]))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group1()[3]]) * other.group3())
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[2]]) * swizzle!(other.group2(), 1, 2, 0, 2))
                + (Simd32x4::from([other.group0()[3], other.group1()[2], other.group3()[1], other.group3()[1]]) * swizzle!(self.group2(), 0, 0, 0, 1))
                + (Simd32x4::from([other.group1()[1], other.group3()[0], other.group0()[3], other.group0()[3]]) * swizzle!(self.group2(), 2, 2, 2, 3))
                + (Simd32x4::from([other.group3()[2], other.group0()[3], other.group1()[0], other.group3()[2]]) * swizzle!(self.group2(), 1, 1, 1, 2))
                - (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group2(), 0, 1, 2, 1))
                + (swizzle!(self.group3(), 1, 2, 0, 1) * swizzle!(other.group2(), 2, 0, 1, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group1()[1] * other.group3()[2]) - (self.group2()[0] * other.group2()[3])
                    + (self.group3()[0] * other.group0()[3])
                    + (self.group3()[2] * other.group1()[1])
                    + (self.group3()[3] * other.group2()[0])),
                ((self.group0()[1] * other.group3()[3]) + (self.group1()[2] * other.group3()[0]) - (self.group2()[1] * other.group2()[3])
                    + (self.group3()[0] * other.group1()[2])
                    + (self.group3()[1] * other.group0()[3])),
                ((self.group0()[2] * other.group3()[3]) + (self.group1()[0] * other.group3()[1]) - (self.group2()[2] * other.group2()[3])
                    + (self.group3()[1] * other.group1()[0])
                    + (self.group3()[2] * other.group0()[3])),
                (-(self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])
                    - (self.group3()[1] * other.group0()[1])
                    - (self.group3()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group3()[3], self.group3()[3], self.group1()[3]]) * swizzle!(other.group2(), 1, 1, 2, 3))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group3()[3]]) * other.group1())
                + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group3()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[2]]) * swizzle!(other.group0(), 1, 2, 0, 2))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[0]]) * swizzle!(other.group0(), 0, 1, 2, 0))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group0()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))
                - (Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group0()[0]]) * swizzle!(self.group1(), 0, 0, 1, 0))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group0()[1]]) * swizzle!(self.group1(), 2, 1, 2, 1))
                + (Simd32x4::from([other.group3()[3], other.group2()[2], other.group2()[0], other.group2()[3]]) * swizzle!(self.group0(), 0, 0, 1, 3))
                - (swizzle!(self.group0(), 3, 3, 3, 0) * swizzle!(other.group3(), 0, 1, 2, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl InfixSandwich for VersorOdd {}
impl Sandwich<AntiCircleRotor> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      140      178        0
    //    simd4       65       66        0
    // Totals...
    // yes simd      205      244        0
    //  no simd      400      442        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[2] * self.group3()[1])
                    + (other.group1()[0] * self.group2()[3])
                    + (other.group1()[1] * self.group0()[2])
                    + (other.group1()[3] * self.group0()[0])
                    + (other.group2()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group3()[2])
                    + (other.group1()[1] * self.group2()[3])
                    + (other.group1()[2] * self.group0()[0])
                    + (other.group1()[3] * self.group0()[1])
                    + (other.group2()[3] * self.group0()[1])),
                ((other.group0()[1] * self.group3()[0])
                    + (other.group1()[0] * self.group0()[1])
                    + (other.group1()[2] * self.group2()[3])
                    + (other.group1()[3] * self.group0()[2])
                    + (other.group2()[3] * self.group0()[2])),
                (-(other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group1()[2], self.group3()[1], self.group2()[0]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group3()[2], self.group1()[3], self.group1()[0], self.group2()[1]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group1()[1], self.group3()[0], self.group1()[3], self.group2()[2]]))
                + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group2()[2]) + (other.group1()[3] * self.group3()[0]) - (other.group2()[2] * self.group0()[1])),
                ((other.group0()[1] * self.group3()[3]) + (other.group0()[2] * self.group2()[0]) + (other.group1()[3] * self.group3()[1]) - (other.group2()[0] * self.group0()[2])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[2] * self.group3()[3]) + (other.group1()[3] * self.group3()[2]) - (other.group2()[1] * self.group0()[0])),
                (-(other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group3()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group2()[3], other.group2()[3]]) * swizzle!(self.group1(), 2, 0, 2, 3))
                + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group1()[2], other.group2()[1]]) * swizzle!(self.group0(), 2, 0, 3, 1))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group0()[3]]) * swizzle!(other.group1(), 0, 1, 0, 3))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group2()[3], self.group0()[2]]) * swizzle!(other.group2(), 3, 3, 2, 2))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 0, 1, 0, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group2()[0] * self.group0()[3]) + (other.group2()[0] * self.group1()[3]) + (other.group2()[1] * self.group1()[2]) - (other.group2()[2] * self.group3()[1])
                    + (other.group2()[3] * self.group2()[0])),
                (-(other.group2()[0] * self.group3()[2])
                    + (other.group2()[1] * self.group0()[3])
                    + (other.group2()[1] * self.group1()[3])
                    + (other.group2()[2] * self.group1()[0])
                    + (other.group2()[3] * self.group2()[1])),
                ((other.group2()[0] * self.group1()[1]) + (other.group2()[0] * self.group3()[1]) - (other.group2()[1] * self.group3()[0])
                    + (other.group2()[2] * self.group0()[3])
                    + (other.group2()[2] * self.group1()[3])),
                (-(other.group0()[1] * self.group1()[1]) + (other.group0()[1] * self.group3()[1]) - (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])
                    - (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group2()[3], other.group2()[3]]) * swizzle!(self.group2(), 2, 0, 2, 3))
                + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group1()[2], other.group0()[0]]) * swizzle!(self.group3(), 2, 0, 3, 0))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group2()[1], self.group2()[3]]) * swizzle!(other.group1(), 0, 1, 0, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[1] * self.group3()[2])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group2()[2] * self.group0()[1])
                    + (other.group2()[3] * self.group3()[0])),
                ((other.group0()[2] * self.group2()[0])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[2] * self.group3()[0])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group2()[0] * self.group0()[2])
                    + (other.group2()[3] * self.group3()[1])),
                ((other.group0()[0] * self.group2()[1])
                    + (other.group1()[0] * self.group3()[1])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])
                    + (other.group2()[1] * self.group0()[0])
                    + (other.group2()[3] * self.group3()[2])),
                (-(other.group1()[2] * self.group2()[2])
                    - (other.group1()[3] * self.group3()[3])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[1] * self.group3()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[2])),
            ]) + (Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group2()[3], self.group3()[0]]) * swizzle!(other.group2(), 1, 2, 2, 0))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      112      150        0
    //    simd4       88       89        0
    // Totals...
    // yes simd      200      239        0
    //  no simd      464      506        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group1()[2]) + (other.group1()[1] * self.group0()[2]) + (other.group2()[3] * self.group1()[0])
                    - (other.group3()[0] * self.group2()[3])),
                ((other.group0()[1] * self.group0()[3]) + (other.group0()[2] * self.group1()[0]) + (other.group1()[2] * self.group0()[0]) + (other.group2()[3] * self.group1()[1])
                    - (other.group3()[1] * self.group2()[3])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[2] * self.group0()[3]) + (other.group1()[0] * self.group0()[1]) + (other.group2()[3] * self.group1()[2])
                    - (other.group3()[2] * self.group2()[3])),
                (-(other.group1()[2] * self.group1()[2]) - (other.group1()[3] * self.group1()[3]) - (other.group2()[2] * self.group0()[2])
                    + (other.group3()[1] * self.group3()[1])
                    + (other.group3()[2] * self.group3()[2])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group1()[2], self.group3()[1], self.group2()[0]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group3()[2], self.group1()[3], self.group1()[0], self.group2()[1]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group1()[1], self.group3()[0], self.group1()[3], self.group2()[2]]))
                + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group3(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group2()[1]]) * swizzle!(self.group0(), 2, 0, 1, 1))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group3(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[0]]) * swizzle!(other.group2(), 3, 3, 3, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[2] * self.group2()[1]) + (other.group3()[3] * self.group0()[0])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group3()[3] * self.group0()[1])),
                (-(other.group0()[1] * self.group2()[0]) + (other.group3()[3] * self.group0()[2])),
                (-(other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group3()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[3]]) * self.group3())
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[2]]) * swizzle!(self.group2(), 0, 1, 2, 2))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group3()[1]]) * swizzle!(other.group1(), 0, 1, 0, 1))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group0()[3], self.group3()[2]]) * swizzle!(other.group1(), 1, 2, 2, 2))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group1()[1]]) * swizzle!(other.group3(), 0, 1, 0, 1))
                + (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[3]]) * swizzle!(other.group3(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group1()[3], self.group1()[2]]) * swizzle!(other.group3(), 1, 2, 2, 2))
                - (swizzle!(other.group2(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group1()[1] * self.group2()[2])
                    + (other.group1()[3] * self.group2()[0])
                    + (other.group2()[1] * self.group1()[2])
                    + (other.group2()[1] * self.group3()[2])
                    + (other.group3()[0] * self.group3()[3])
                    + (other.group3()[1] * self.group2()[2])
                    + (other.group3()[3] * self.group1()[0])
                    + (other.group3()[3] * self.group3()[0])),
                ((other.group1()[2] * self.group2()[0])
                    + (other.group1()[3] * self.group2()[1])
                    + (other.group2()[2] * self.group1()[0])
                    + (other.group2()[2] * self.group3()[0])
                    + (other.group3()[1] * self.group3()[3])
                    + (other.group3()[2] * self.group2()[0])
                    + (other.group3()[3] * self.group1()[1])
                    + (other.group3()[3] * self.group3()[1])),
                ((other.group1()[2] * self.group3()[3])
                    + (other.group1()[3] * self.group2()[2])
                    + (other.group2()[0] * self.group3()[1])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group3()[0] * self.group2()[1])
                    + (other.group3()[2] * self.group3()[3])
                    + (other.group3()[3] * self.group1()[2])
                    + (other.group3()[3] * self.group3()[2])),
                (-(other.group1()[2] * self.group2()[2])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[1] * self.group3()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[2])
                    - (other.group3()[0] * self.group2()[0])
                    - (other.group3()[1] * self.group2()[1])
                    - (other.group3()[2] * self.group2()[2])),
            ]) + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[0], other.group3()[3]]) * swizzle!(self.group1(), 3, 3, 1, 3))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[1]]) * swizzle!(self.group2(), 1, 2, 0, 1))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group2()[1], self.group3()[3]]) * swizzle!(other.group1(), 0, 1, 0, 3))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (swizzle!(other.group2(), 2, 0, 1, 0) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (swizzle!(other.group2(), 2, 0, 1, 0) * swizzle!(self.group3(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3])
                    + (other.group0()[2] * self.group2()[1])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group3()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group3()[3]) + (other.group1()[3] * self.group1()[1]) + (other.group3()[3] * self.group0()[1])),
                ((other.group0()[1] * self.group2()[0]) - (other.group0()[2] * self.group3()[3]) + (other.group1()[3] * self.group1()[2]) + (other.group2()[2] * self.group2()[3])),
                (-(other.group0()[1] * self.group1()[1]) + (other.group0()[1] * self.group3()[1]) - (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])),
            ]) - (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group3()[2], other.group3()[0]]) * swizzle!(self.group0(), 2, 0, 3, 0))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[2]]) * swizzle!(self.group0(), 1, 2, 0, 2))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group0()[1]]) * swizzle!(other.group3(), 0, 1, 0, 1))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group0()[2], self.group0()[2]]) * swizzle!(other.group3(), 1, 2, 3, 2))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group0()[0]]) * swizzle!(other.group1(), 0, 1, 0, 0))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group0()[1], self.group0()[3]]) * swizzle!(other.group2(), 0, 1, 0, 3))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group1()[3], self.group0()[1]]) * swizzle!(other.group1(), 1, 2, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       81      117        0
    //    simd4       44       46        0
    // Totals...
    // yes simd      125      163        0
    //  no simd      257      301        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[0] * self.group3()[0]) * -1.0),
                ((other.group0()[0] * self.group3()[1]) * -1.0),
                ((other.group0()[0] * self.group3()[2]) * -1.0),
                0.0,
            ]) + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                + (Simd32x4::from(other.group0()[1]) * self.group0())),
            // e23, e31, e12, e45
            ((Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))
                + (Simd32x4::from(other.group0()[1]) * self.group1())),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group2()[0]),
                (other.group0()[1] * self.group2()[1]),
                (other.group0()[1] * self.group2()[2]),
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group2()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group3()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group3()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group3()[2])),
                (other.group0()[1] * self.group3()[3]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       76      119        0
    //    simd4       53       54        0
    // Totals...
    // yes simd      129      173        0
    //  no simd      288      335        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[3] * self.group0()[0] * -1.0),
                (other.group0()[3] * self.group0()[1] * -1.0),
                (other.group0()[3] * self.group0()[2] * -1.0),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group0()[3] * self.group1()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (other.group0()[1] * self.group0()[2]),
                (other.group0()[2] * self.group0()[0]),
                (other.group0()[2] * self.group2()[3]),
                ((other.group0()[2] * self.group0()[2]) * -1.0),
            ]) + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group0()[1], self.group0()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group1()[2]) + (other.group0()[1] * self.group3()[2]) + (other.group0()[3] * self.group2()[0])),
                ((other.group0()[1] * self.group1()[3]) + (other.group0()[2] * self.group1()[0]) + (other.group0()[2] * self.group3()[0]) + (other.group0()[3] * self.group2()[1])),
                ((other.group0()[0] * self.group3()[1]) + (other.group0()[2] * self.group0()[3]) + (other.group0()[2] * self.group1()[3]) + (other.group0()[3] * self.group2()[2])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group3()[2])),
            ]) + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group3()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group3(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[3]) + (other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) + (other.group0()[3] * self.group1()[0])),
                (-(other.group0()[0] * self.group0()[2])
                    + (other.group0()[1] * self.group2()[3])
                    + (other.group0()[2] * self.group0()[0])
                    + (other.group0()[3] * self.group1()[1])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group2()[3]) + (other.group0()[3] * self.group1()[2])),
                (other.group0()[3] * self.group2()[3] * -1.0),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       89      129        0
    //    simd4       66       67        0
    // Totals...
    // yes simd      155      196        0
    //  no simd      353      397        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group1()[0] * self.group2()[3]) * -1.0),
                ((other.group1()[1] * self.group2()[3]) * -1.0),
                ((other.group1()[2] * self.group2()[3]) * -1.0),
                (-(other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group1()[3])
                    + (other.group1()[1] * self.group3()[1])
                    + (other.group1()[2] * self.group3()[2])
                    + (other.group1()[3] * self.group2()[3])),
            ]) - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[1]]) * swizzle!(self.group0(), 2, 0, 1, 1))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (swizzle!(other.group0(), 3, 3, 3, 0) * swizzle!(self.group0(), 0, 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[0]) + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group2()[3]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[2] * self.group0()[2]) - (other.group1()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group1()[0]]) * swizzle!(other.group1(), 0, 1, 0, 0))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group0()[1], self.group0()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group1()[3], self.group1()[1]]) * swizzle!(other.group1(), 1, 2, 2, 1))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2])
                    + (other.group0()[1] * self.group3()[2])
                    + (other.group0()[3] * self.group2()[0])
                    + (other.group1()[1] * self.group2()[2])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group1()[3] * self.group3()[0])),
                ((other.group0()[2] * self.group1()[0])
                    + (other.group0()[2] * self.group3()[0])
                    + (other.group0()[3] * self.group2()[1])
                    + (other.group1()[2] * self.group2()[0])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group1()[3] * self.group3()[1])),
                ((other.group0()[0] * self.group3()[1])
                    + (other.group0()[2] * self.group0()[3])
                    + (other.group0()[3] * self.group2()[2])
                    + (other.group1()[2] * self.group3()[3])
                    + (other.group1()[3] * self.group1()[2])
                    + (other.group1()[3] * self.group3()[2])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group3()[2])
                    - (other.group1()[1] * self.group2()[1])
                    - (other.group1()[2] * self.group2()[2])),
            ]) + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group3()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group2()[1], self.group0()[3]]) * swizzle!(other.group1(), 0, 1, 0, 3))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group2(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[0] * self.group2()[3]) + (other.group0()[3] * self.group1()[0]) - (other.group1()[2] * self.group1()[1]) + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group2()[3]) + (other.group0()[3] * self.group1()[1]) - (other.group1()[0] * self.group1()[2]) + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group2()[3]) + (other.group0()[3] * self.group1()[2]) - (other.group1()[1] * self.group1()[0]) + (other.group1()[3] * self.group0()[2])),
                0.0,
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group2()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group0()[1]]) * swizzle!(other.group1(), 0, 1, 0, 1))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group0()[3], self.group0()[2]]) * swizzle!(other.group1(), 1, 2, 2, 2))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      136      174        0
    //    simd4       46       47        0
    // Totals...
    // yes simd      182      221        0
    //  no simd      320      362        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[0] * self.group2()[3]) + (other.group0()[1] * self.group0()[2])),
                ((other.group0()[1] * self.group2()[3]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) + (other.group0()[2] * self.group2()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1]) + (other.group1()[0] * self.group2()[3]) - (other.group1()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group1()[0]) - (other.group1()[0] * self.group0()[2])
                    + (other.group1()[1] * self.group2()[3])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) - (other.group1()[1] * self.group0()[0]) + (other.group1()[2] * self.group2()[3])),
                (-(other.group0()[0] * self.group3()[0]) - (other.group0()[1] * self.group3()[1]) - (other.group0()[2] * self.group3()[2])
                    + (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group1()[1]]) * swizzle!(self.group0(), 2, 0, 1, 1))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1])
                    + (other.group1()[0] * self.group0()[3])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[1] * self.group1()[2])
                    + (other.group1()[1] * self.group3()[2])
                    - (other.group1()[2] * self.group1()[1])
                    - (other.group1()[2] * self.group3()[1])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group3()[3]) + (other.group0()[2] * self.group2()[0])
                    - (other.group1()[0] * self.group1()[2])
                    - (other.group1()[0] * self.group3()[2])
                    + (other.group1()[1] * self.group0()[3])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[2] * self.group1()[0])
                    + (other.group1()[2] * self.group3()[0])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0])
                    + (other.group0()[2] * self.group3()[3])
                    + (other.group1()[0] * self.group1()[1])
                    + (other.group1()[0] * self.group3()[1])
                    - (other.group1()[1] * self.group1()[0])
                    - (other.group1()[1] * self.group3()[0])
                    + (other.group1()[2] * self.group0()[3])
                    + (other.group1()[2] * self.group1()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group3()[2]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[1] * self.group1()[3]) + (other.group0()[2] * self.group3()[0]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group3()[1]) + (other.group0()[2] * self.group1()[3]) - (other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0])),
                (-(other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[2] * self.group3()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[0]]) * swizzle!(self.group2(), 3, 3, 3, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      124      162        0
    //    simd4       57       58        0
    // Totals...
    // yes simd      181      220        0
    //  no simd      352      394        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) + (other.group0()[3] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[0]) + (other.group0()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group2()[3]) + (other.group0()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])
                    + (other.group1()[3] * self.group2()[3])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group0()[1], self.group0()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) + (other.group0()[3] * self.group1()[0])),
                ((other.group0()[2] * self.group1()[0]) + (other.group0()[3] * self.group1()[1])),
                ((other.group0()[3] * self.group1()[2]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group3()[1]) - (other.group0()[2] * self.group3()[2])),
            ]) + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group0()[2], other.group1()[1]]) * swizzle!(self.group0(), 2, 0, 3, 1))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group2()[3], self.group0()[2]]) * swizzle!(other.group1(), 3, 3, 2, 2))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group2()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group1()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group0()[1], self.group0()[0]]) * swizzle!(other.group1(), 0, 1, 0, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2])
                    + (other.group0()[3] * self.group2()[0])
                    + (other.group1()[0] * self.group0()[3])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[1] * self.group1()[2])
                    + (other.group1()[1] * self.group3()[2])
                    - (other.group1()[2] * self.group1()[1])
                    - (other.group1()[2] * self.group3()[1])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group1()[3] * self.group3()[0])),
                ((other.group0()[2] * self.group2()[0]) + (other.group0()[3] * self.group2()[1]) - (other.group1()[0] * self.group1()[2]) - (other.group1()[0] * self.group3()[2])
                    + (other.group1()[1] * self.group0()[3])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[2] * self.group1()[0])
                    + (other.group1()[2] * self.group3()[0])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group1()[3] * self.group3()[1])),
                ((other.group0()[2] * self.group3()[3]) + (other.group0()[3] * self.group2()[2]) + (other.group1()[0] * self.group1()[1]) + (other.group1()[0] * self.group3()[1])
                    - (other.group1()[1] * self.group1()[0])
                    - (other.group1()[1] * self.group3()[0])
                    + (other.group1()[2] * self.group0()[3])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])
                    + (other.group1()[3] * self.group3()[2])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group2()[1], self.group2()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group3()[2]) + (other.group0()[3] * self.group3()[0])),
                ((other.group0()[2] * self.group3()[0]) + (other.group0()[3] * self.group3()[1])),
                ((other.group0()[2] * self.group1()[3]) + (other.group0()[3] * self.group3()[2])),
                (-(other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[2] * self.group3()[2])
                    + (other.group1()[3] * self.group1()[3])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group2()[3], self.group3()[0]]) * swizzle!(other.group1(), 1, 2, 2, 0))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group3()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (swizzle!(other.group1(), 2, 0, 1, 3) * swizzle!(self.group0(), 1, 2, 0, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       61      102        0
    //    simd4       57       58        0
    // Totals...
    // yes simd      118      160        0
    //  no simd      289      334        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group0()[2])),
                (-(other.group0()[1] * self.group2()[3]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) - (other.group0()[2] * self.group2()[3])),
                ((other.group0()[1] * self.group3()[1]) + (other.group0()[2] * self.group3()[2]) + (other.group0()[3] * self.group2()[3])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (other.group0()[3] * self.group0()[0]),
                (other.group0()[3] * self.group0()[1]),
                (other.group0()[3] * self.group0()[2]),
                ((other.group0()[2] * self.group1()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group1()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))
                + (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group1()[3], self.group1()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[3] * self.group1()[0]) + (other.group0()[3] * self.group3()[0])),
                ((other.group0()[3] * self.group1()[1]) + (other.group0()[3] * self.group3()[1])),
                ((other.group0()[3] * self.group1()[2]) + (other.group0()[3] * self.group3()[2])),
                (-(other.group0()[1] * self.group2()[1]) - (other.group0()[2] * self.group2()[2])),
            ]) + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group3()[3], self.group1()[3]]) * swizzle!(other.group0(), 1, 2, 2, 3))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group2()[1], self.group0()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group2(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[2] * self.group1()[1]) * -1.0),
                ((other.group0()[0] * self.group1()[2]) * -1.0),
                ((other.group0()[1] * self.group1()[0]) * -1.0),
                0.0,
            ]) + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group0()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group0()[3], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))
                + (swizzle!(other.group0(), 3, 3, 3, 2) * swizzle!(self.group0(), 0, 1, 2, 2))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       52       74        0
    //    simd4       47       54        0
    // Totals...
    // yes simd       99      128        0
    //  no simd      240      290        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(other[e12345]) * self.group0()),
            // e415, e425, e435, e321
            (Simd32x4::from(other[e12345]) * self.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e235, e315, e125, e5
            (Simd32x4::from(other[e12345]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]])),
            // e1, e2, e3, e4
            (Simd32x4::from(other[e12345]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[3]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      112      150        0
    //    simd4       68       69        0
    // Totals...
    // yes simd      180      219        0
    //  no simd      384      426        0
    fn sandwich(self, other: Circle) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3])
                    + (other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[1])
                    + (other.group1()[0] * self.group2()[3])
                    + (other.group1()[1] * self.group0()[2])),
                ((other.group0()[0] * self.group3()[2])
                    + (other.group0()[1] * self.group0()[3])
                    + (other.group0()[2] * self.group1()[0])
                    + (other.group1()[1] * self.group2()[3])
                    + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group0()[3])
                    + (other.group1()[0] * self.group0()[1])
                    + (other.group1()[2] * self.group2()[3])),
                (-(other.group2()[2] * self.group0()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group1()[2], self.group3()[1], self.group2()[0]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group3()[2], self.group1()[3], self.group1()[0], self.group2()[1]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group1()[1], self.group3()[0], self.group1()[3], self.group2()[2]]))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[2] * self.group2()[1]) - (other.group1()[2] * self.group1()[1]) - (other.group1()[3] * self.group3()[0])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group1()[0] * self.group1()[2]) - (other.group1()[3] * self.group3()[1])),
                (-(other.group0()[1] * self.group2()[0]) - (other.group1()[1] * self.group1()[0]) - (other.group1()[3] * self.group3()[2])),
                ((other.group0()[2] * self.group2()[2]) - (other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group3()[1]]) * swizzle!(other.group1(), 0, 1, 0, 1))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group0()[3], self.group3()[2]]) * swizzle!(other.group1(), 1, 2, 2, 2))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group2()[0] * self.group0()[3])
                    + (other.group2()[0] * self.group1()[3])
                    + (other.group2()[1] * self.group1()[2])
                    + (other.group1()[0] * self.group3()[3])
                    + (other.group1()[1] * self.group2()[2])
                    + (other.group1()[3] * self.group2()[0])),
                ((other.group2()[1] * self.group0()[3])
                    + (other.group2()[1] * self.group1()[3])
                    + (other.group2()[2] * self.group1()[0])
                    + (other.group1()[1] * self.group3()[3])
                    + (other.group1()[2] * self.group2()[0])
                    + (other.group1()[3] * self.group2()[1])),
                ((other.group2()[0] * self.group1()[1])
                    + (other.group2()[2] * self.group0()[3])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group1()[0] * self.group2()[1])
                    + (other.group1()[2] * self.group3()[3])
                    + (other.group1()[3] * self.group2()[2])),
                (-(other.group2()[1] * self.group1()[1])
                    - (other.group2()[1] * self.group3()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[2])
                    - (other.group1()[1] * self.group2()[1])
                    - (other.group1()[2] * self.group2()[2])),
            ]) + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]) * swizzle!(self.group3(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group2()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group2()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group2(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3])
                    + (other.group0()[2] * self.group2()[1])
                    + (other.group2()[0] * self.group2()[3])
                    + (other.group2()[1] * self.group0()[2])
                    + (other.group1()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group3()[3])
                    + (other.group2()[1] * self.group2()[3])
                    + (other.group2()[2] * self.group0()[0])
                    + (other.group1()[3] * self.group1()[1])),
                ((other.group0()[1] * self.group2()[0]) - (other.group0()[2] * self.group3()[3])
                    + (other.group2()[0] * self.group0()[1])
                    + (other.group2()[2] * self.group2()[3])
                    + (other.group1()[3] * self.group1()[2])),
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group1()[1]) + (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group0()[1]]) * swizzle!(other.group1(), 0, 1, 0, 1))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group1()[3], self.group0()[2]]) * swizzle!(other.group1(), 1, 2, 2, 2))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      112      150        0
    //    simd4       72       73        0
    // Totals...
    // yes simd      184      223        0
    //  no simd      400      442        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[1])
                    + (other.group1()[0] * self.group2()[3])
                    + (other.group1()[1] * self.group0()[2])
                    + (other.group2()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group3()[2])
                    + (other.group0()[2] * self.group1()[0])
                    + (other.group1()[1] * self.group2()[3])
                    + (other.group1()[2] * self.group0()[0])
                    + (other.group2()[3] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group3()[0])
                    + (other.group1()[0] * self.group0()[1])
                    + (other.group1()[2] * self.group2()[3])
                    + (other.group2()[3] * self.group0()[2])),
                (-(other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group1()[2], self.group3()[1], self.group2()[0]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group3()[2], self.group1()[3], self.group1()[0], self.group2()[1]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group1()[1], self.group3()[0], self.group1()[3], self.group2()[2]]))
                + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[2] * self.group2()[1]) - (other.group1()[3] * self.group3()[0]) + (other.group2()[3] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group1()[3] * self.group3()[1]) + (other.group2()[3] * self.group1()[1])),
                (-(other.group0()[1] * self.group2()[0]) - (other.group1()[3] * self.group3()[2]) + (other.group2()[3] * self.group1()[2])),
                ((other.group0()[2] * self.group2()[2]) - (other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[3]]) * swizzle!(self.group1(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group3()[1]]) * swizzle!(other.group1(), 0, 1, 0, 1))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group0()[3], self.group3()[2]]) * swizzle!(other.group1(), 1, 2, 2, 2))
                - (swizzle!(other.group2(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group1()[1] * self.group2()[2])
                    + (other.group1()[3] * self.group2()[0])
                    + (other.group2()[0] * self.group1()[3])
                    + (other.group2()[1] * self.group1()[2])
                    + (other.group2()[1] * self.group3()[2])
                    + (other.group2()[3] * self.group2()[0])),
                ((other.group1()[2] * self.group2()[0])
                    + (other.group1()[3] * self.group2()[1])
                    + (other.group2()[1] * self.group1()[3])
                    + (other.group2()[2] * self.group1()[0])
                    + (other.group2()[2] * self.group3()[0])
                    + (other.group2()[3] * self.group2()[1])),
                ((other.group1()[2] * self.group3()[3])
                    + (other.group1()[3] * self.group2()[2])
                    + (other.group2()[0] * self.group3()[1])
                    + (other.group2()[2] * self.group0()[3])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group2()[3] * self.group2()[2])),
                (-(other.group1()[1] * self.group2()[1])
                    - (other.group1()[2] * self.group2()[2])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[1] * self.group3()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[2])),
            ]) + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group3()[3]]) * swizzle!(other.group2(), 0, 1, 0, 3))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group2()[1], self.group3()[3]]) * swizzle!(other.group1(), 0, 1, 0, 3))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (swizzle!(other.group2(), 2, 0, 1, 0) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (swizzle!(other.group2(), 2, 0, 1, 0) * swizzle!(self.group3(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group2()[0] * self.group2()[3])
                    + (other.group2()[1] * self.group0()[2])
                    - (other.group2()[3] * self.group3()[0])),
                (-(other.group0()[1] * self.group3()[3])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group2()[1] * self.group2()[3])
                    + (other.group2()[2] * self.group0()[0])
                    - (other.group2()[3] * self.group3()[1])),
                (-(other.group0()[2] * self.group3()[3])
                    + (other.group1()[3] * self.group1()[2])
                    + (other.group2()[0] * self.group0()[1])
                    + (other.group2()[2] * self.group2()[3])
                    - (other.group2()[3] * self.group3()[2])),
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group1()[1]) + (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[2]]) * swizzle!(self.group0(), 1, 2, 0, 2))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group0()[0]]) * swizzle!(other.group1(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group1()[3], self.group0()[1]]) * swizzle!(other.group1(), 1, 2, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      152      190        0
    //    simd4       58       59        0
    // Totals...
    // yes simd      210      249        0
    //  no simd      384      426        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3])
                    + (other.group0()[2] * self.group3()[1])
                    + (other.group1()[0] * self.group2()[3])
                    + (other.group1()[1] * self.group0()[2])
                    + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group3()[2])
                    + (other.group0()[1] * self.group0()[3])
                    + (other.group1()[1] * self.group2()[3])
                    + (other.group1()[2] * self.group0()[0])
                    + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group0()[3])
                    + (other.group1()[0] * self.group0()[1])
                    + (other.group1()[2] * self.group2()[3])
                    + (other.group1()[3] * self.group0()[2])),
                (-(other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group1()[2], self.group3()[1], self.group2()[0]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group3()[2], self.group1()[3], self.group1()[0], self.group2()[1]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group1()[1], self.group3()[0], self.group1()[3], self.group2()[2]]))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group2()[2]) + (other.group2()[0] * self.group2()[3]) - (other.group2()[2] * self.group0()[1])
                    + (other.group1()[1] * self.group1()[2])
                    + (other.group1()[3] * self.group3()[0])),
                ((other.group0()[1] * self.group3()[3]) + (other.group0()[2] * self.group2()[0]) - (other.group2()[0] * self.group0()[2])
                    + (other.group2()[1] * self.group2()[3])
                    + (other.group1()[2] * self.group1()[0])
                    + (other.group1()[3] * self.group3()[1])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[2] * self.group3()[3]) - (other.group2()[1] * self.group0()[0])
                    + (other.group2()[2] * self.group2()[3])
                    + (other.group1()[2] * self.group0()[3])
                    + (other.group1()[3] * self.group3()[2])),
                (-(other.group0()[1] * self.group2()[1]) - (other.group0()[2] * self.group2()[2])
                    + (other.group2()[1] * self.group0()[1])
                    + (other.group2()[2] * self.group0()[2])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group3()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group2()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group0()[3]]) * swizzle!(other.group1(), 0, 1, 0, 3))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group2()[0] * self.group0()[3]) + (other.group2()[0] * self.group1()[3]) + (other.group2()[1] * self.group1()[2]) - (other.group2()[2] * self.group3()[1])
                    + (other.group1()[1] * self.group2()[2])),
                (-(other.group2()[0] * self.group3()[2])
                    + (other.group2()[1] * self.group0()[3])
                    + (other.group2()[1] * self.group1()[3])
                    + (other.group2()[2] * self.group1()[0])
                    + (other.group1()[2] * self.group2()[0])),
                ((other.group2()[0] * self.group1()[1]) - (other.group2()[1] * self.group3()[0])
                    + (other.group2()[2] * self.group0()[3])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group1()[2] * self.group3()[3])),
                (-(other.group0()[1] * self.group1()[1]) + (other.group0()[1] * self.group3()[1]) - (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])
                    - (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group3(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group2()[1], self.group2()[3]]) * swizzle!(other.group1(), 0, 1, 0, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group2()[2]) - (other.group2()[1] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[1])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[1] * self.group3()[2])
                    + (other.group1()[3] * self.group1()[0])),
                ((other.group0()[1] * self.group3()[3]) + (other.group0()[2] * self.group2()[0]) + (other.group2()[0] * self.group0()[2]) - (other.group2()[2] * self.group0()[0])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[2] * self.group3()[0])
                    + (other.group1()[3] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[2] * self.group3()[3]) - (other.group2()[0] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[0])
                    + (other.group1()[0] * self.group3()[1])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])),
                (-(other.group2()[0] * self.group1()[0])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[1] * self.group3()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[2])
                    - (other.group1()[2] * self.group2()[2])
                    - (other.group1()[3] * self.group3()[3])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      152      190        0
    //    simd4       78       79        0
    // Totals...
    // yes simd      230      269        0
    //  no simd      464      506        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3])
                    + (other.group1()[1] * self.group0()[2])
                    + (other.group1()[3] * self.group0()[0])
                    + (other.group2()[3] * self.group1()[0])
                    + (other.group3()[0] * self.group2()[3])
                    + (other.group3()[1] * self.group0()[2])),
                ((other.group0()[1] * self.group0()[3])
                    + (other.group1()[2] * self.group0()[0])
                    + (other.group1()[3] * self.group0()[1])
                    + (other.group2()[3] * self.group1()[1])
                    + (other.group3()[1] * self.group2()[3])
                    + (other.group3()[2] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[3])
                    + (other.group1()[0] * self.group0()[1])
                    + (other.group1()[3] * self.group0()[2])
                    + (other.group2()[3] * self.group1()[2])
                    + (other.group3()[0] * self.group0()[1])
                    + (other.group3()[2] * self.group2()[3])),
                (-(other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group0()[2])
                    - (other.group3()[0] * self.group3()[0])
                    - (other.group3()[1] * self.group3()[1])
                    - (other.group3()[2] * self.group3()[2])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group1()[2], self.group3()[1], self.group2()[0]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group3()[2], self.group1()[3], self.group1()[0], self.group2()[1]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group1()[1], self.group3()[0], self.group1()[3], self.group2()[2]]))
                + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group3(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[0]]) * swizzle!(other.group2(), 3, 3, 3, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) + (other.group1()[1] * self.group1()[2]) + (other.group1()[3] * self.group3()[0]) - (other.group2()[2] * self.group0()[1])
                    + (other.group3()[0] * self.group1()[3])
                    + (other.group3()[1] * self.group3()[2])
                    + (other.group3()[3] * self.group0()[0])),
                ((other.group0()[2] * self.group2()[0]) + (other.group1()[2] * self.group1()[0]) + (other.group1()[3] * self.group3()[1]) - (other.group2()[0] * self.group0()[2])
                    + (other.group3()[1] * self.group1()[3])
                    + (other.group3()[2] * self.group3()[0])
                    + (other.group3()[3] * self.group0()[1])),
                ((other.group0()[0] * self.group2()[1]) + (other.group1()[3] * self.group3()[2]) - (other.group2()[1] * self.group0()[0])
                    + (other.group2()[3] * self.group2()[2])
                    + (other.group3()[0] * self.group3()[1])
                    + (other.group3()[2] * self.group1()[3])
                    + (other.group3()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[2] * self.group3()[2])
                    - (other.group3()[0] * self.group1()[0])
                    - (other.group3()[1] * self.group1()[1])
                    - (other.group3()[2] * self.group1()[2])
                    - (other.group3()[3] * self.group2()[3])),
            ]) + (Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group1()[2], other.group2()[1]]) * swizzle!(self.group0(), 2, 0, 3, 1))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[1]]) * swizzle!(self.group3(), 1, 2, 0, 1))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group0()[3]]) * swizzle!(other.group1(), 0, 1, 0, 3))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[3], self.group0()[2]]) * swizzle!(other.group2(), 3, 3, 2, 2))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 0, 1, 0, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group1()[1] * self.group2()[2])
                    + (other.group2()[0] * self.group1()[3])
                    + (other.group2()[1] * self.group1()[2])
                    + (other.group3()[2] * self.group2()[1])
                    + (other.group3()[3] * self.group1()[0])),
                ((other.group1()[2] * self.group2()[0])
                    + (other.group2()[1] * self.group1()[3])
                    + (other.group2()[2] * self.group1()[0])
                    + (other.group3()[0] * self.group2()[2])
                    + (other.group3()[3] * self.group1()[1])),
                ((other.group2()[2] * self.group0()[3])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group3()[1] * self.group2()[0])
                    + (other.group3()[3] * self.group1()[2])
                    + (other.group3()[3] * self.group3()[2])),
                (-(other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2]) + (other.group0()[2] * self.group3()[2])
                    - (other.group1()[2] * self.group0()[2])
                    - (other.group3()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group1()[2], other.group0()[0]]) * swizzle!(self.group3(), 2, 0, 3, 0))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group2()[0], other.group0()[1]]) * swizzle!(self.group3(), 0, 1, 1, 1))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group0()[3]]) * swizzle!(other.group2(), 0, 1, 0, 3))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group3()[3], self.group0()[1]]) * swizzle!(other.group3(), 1, 2, 2, 1))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[3]]) * swizzle!(other.group2(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group2()[1], self.group0()[0]]) * swizzle!(other.group3(), 0, 1, 0, 0))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group2()[1], self.group2()[3]]) * swizzle!(other.group1(), 0, 1, 0, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) + (other.group1()[1] * self.group3()[2]) + (other.group1()[3] * self.group1()[0]) + (other.group3()[1] * self.group1()[2])
                    - (other.group3()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group3()[3]) + (other.group1()[2] * self.group3()[0]) + (other.group1()[3] * self.group1()[1]) + (other.group3()[2] * self.group1()[0])
                    - (other.group3()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group3()[3]) + (other.group1()[0] * self.group3()[1]) + (other.group1()[3] * self.group1()[2]) + (other.group3()[2] * self.group0()[3])
                    - (other.group3()[3] * self.group0()[2])),
                (-(other.group1()[2] * self.group2()[2])
                    - (other.group1()[3] * self.group3()[3])
                    - (other.group2()[1] * self.group3()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[2])),
            ]) + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group3()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group3()[1]]) * swizzle!(self.group2(), 0, 1, 2, 1))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group2()[3], self.group3()[0]]) * swizzle!(other.group2(), 1, 2, 2, 0))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group2()[2]]) * swizzle!(other.group3(), 0, 1, 0, 2))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       57       96        0
    //    simd4       50       52        0
    // Totals...
    // yes simd      107      148        0
    //  no simd      257      304        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[0] * self.group3()[0]) * -1.0),
                ((other.group0()[0] * self.group3()[1]) * -1.0),
                ((other.group0()[0] * self.group3()[2]) * -1.0),
                0.0,
            ]) + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                + (Simd32x4::from(other.group0()[1]) * self.group0())),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group1()[2])),
                (-(other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group1()[3])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]])),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[1] * self.group3()[0]) * -1.0),
                ((other.group0()[1] * self.group3()[1]) * -1.0),
                ((other.group0()[1] * self.group3()[2]) * -1.0),
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group2()[3])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      104      145        0
    //    simd4       46       47        0
    // Totals...
    // yes simd      150      192        0
    //  no simd      288      333        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[3] * self.group0()[0]),
                (other.group0()[3] * self.group0()[1]),
                (other.group0()[3] * self.group0()[2]),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])
                    + (other.group0()[3] * self.group1()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) * -1.0),
                ((other.group0()[0] * self.group0()[2]) * -1.0),
                ((other.group0()[1] * self.group0()[0]) * -1.0),
                (other.group0()[3] * self.group0()[3]),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group2()[3], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group0()[1], self.group0()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))
                + (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group1()[2]) + (other.group0()[1] * self.group3()[2])
                    - (other.group0()[2] * self.group1()[1])
                    - (other.group0()[2] * self.group3()[1])
                    - (other.group0()[3] * self.group2()[0])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[0] * self.group3()[2])
                    + (other.group0()[1] * self.group0()[3])
                    + (other.group0()[1] * self.group1()[3])
                    + (other.group0()[2] * self.group1()[0])
                    + (other.group0()[2] * self.group3()[0])
                    - (other.group0()[3] * self.group2()[1])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[0] * self.group3()[1]) - (other.group0()[1] * self.group1()[0]) - (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group0()[3])
                    + (other.group0()[2] * self.group1()[3])
                    - (other.group0()[3] * self.group2()[2])),
                (other.group0()[3] * self.group2()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) + (other.group0()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[3] * self.group1()[1])),
                ((other.group0()[1] * self.group0()[0]) + (other.group0()[3] * self.group1()[2])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group3()[2])
                    - (other.group0()[3] * self.group3()[3])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group2()[3], self.group3()[0]]) * swizzle!(other.group0(), 1, 2, 2, 0))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      116      158        0
    //    simd4       59       60        0
    // Totals...
    // yes simd      175      218        0
    //  no simd      352      398        0
    fn sandwich(self, other: Flector) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (other.group1()[1] * self.group0()[2]),
                (other.group1()[2] * self.group0()[0]),
                (other.group1()[2] * self.group2()[3]),
                (-(other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group1()[0] * self.group3()[0])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group3()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group0()[1], self.group2()[3]]) * swizzle!(other.group1(), 0, 1, 0, 3))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[2] * self.group0()[1]) + (other.group1()[0] * self.group1()[3]) + (other.group1()[1] * self.group3()[2])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group1()[1] * self.group1()[3]) + (other.group1()[2] * self.group3()[0])),
                (-(other.group0()[1] * self.group0()[0]) + (other.group1()[0] * self.group3()[1]) + (other.group1()[2] * self.group1()[3])),
                (-(other.group1()[1] * self.group1()[1]) - (other.group1()[2] * self.group1()[2]) - (other.group1()[3] * self.group2()[3])),
            ]) + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[3]]) * self.group0())
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group2()[3], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group0()[1], self.group0()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))
                + (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group1()[2]) + (other.group0()[1] * self.group3()[2])
                    - (other.group0()[2] * self.group1()[1])
                    - (other.group0()[2] * self.group3()[1])
                    - (other.group0()[3] * self.group2()[0])
                    + (other.group1()[2] * self.group2()[1])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group1()[3] * self.group3()[0])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[0] * self.group3()[2])
                    + (other.group0()[1] * self.group1()[3])
                    + (other.group0()[2] * self.group1()[0])
                    + (other.group0()[2] * self.group3()[0])
                    - (other.group0()[3] * self.group2()[1])
                    + (other.group1()[0] * self.group2()[2])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group1()[3] * self.group3()[1])),
                ((other.group0()[0] * self.group3()[1]) - (other.group0()[1] * self.group1()[0]) - (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group0()[3])
                    + (other.group0()[2] * self.group1()[3])
                    - (other.group0()[3] * self.group2()[2])
                    + (other.group1()[1] * self.group2()[0])
                    + (other.group1()[3] * self.group1()[2])
                    + (other.group1()[3] * self.group3()[2])),
                ((other.group1()[2] * self.group0()[2]) * -1.0),
            ]) + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group2()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group3()[3], self.group0()[1]]) * swizzle!(other.group1(), 1, 2, 2, 1))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 0, 1, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group1()[3] * self.group0()[0]) * -1.0),
                ((other.group1()[3] * self.group0()[1]) * -1.0),
                ((other.group1()[3] * self.group0()[2]) * -1.0),
                (-(other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group3()[2])
                    - (other.group0()[3] * self.group3()[3])
                    + (other.group1()[2] * self.group2()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other.group1()[3]]) * self.group1())
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group2()[3], self.group3()[0]]) * swizzle!(other.group0(), 1, 2, 2, 0))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group2()[0]]) * swizzle!(other.group1(), 0, 1, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group0()[3], self.group2()[1]]) * swizzle!(other.group1(), 1, 2, 2, 1))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      108      146        0
    //    simd4       53       54        0
    // Totals...
    // yes simd      161      200        0
    //  no simd      320      362        0
    fn sandwich(self, other: Line) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[0] * self.group2()[3]) + (other.group0()[1] * self.group0()[2])),
                ((other.group0()[1] * self.group2()[3]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) + (other.group0()[2] * self.group2()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1])
                    + (other.group1()[0] * self.group2()[3])
                    + (other.group1()[1] * self.group0()[2])),
                (-(other.group0()[0] * self.group1()[2])
                    + (other.group0()[1] * self.group0()[3])
                    + (other.group0()[2] * self.group1()[0])
                    + (other.group1()[1] * self.group2()[3])
                    + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group0()[3])
                    + (other.group1()[0] * self.group0()[1])
                    + (other.group1()[2] * self.group2()[3])),
                ((other.group0()[0] * self.group3()[0]) + (other.group0()[1] * self.group3()[1]) + (other.group0()[2] * self.group3()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[0] * self.group3()[3])
                    + (other.group0()[1] * self.group2()[2])
                    + (other.group1()[0] * self.group0()[3])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[1] * self.group1()[2])
                    + (other.group1()[1] * self.group3()[2])),
                ((other.group0()[1] * self.group3()[3])
                    + (other.group0()[2] * self.group2()[0])
                    + (other.group1()[1] * self.group0()[3])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[2] * self.group1()[0])
                    + (other.group1()[2] * self.group3()[0])),
                ((other.group0()[0] * self.group2()[1])
                    + (other.group0()[2] * self.group3()[3])
                    + (other.group1()[0] * self.group1()[1])
                    + (other.group1()[0] * self.group3()[1])
                    + (other.group1()[2] * self.group0()[3])
                    + (other.group1()[2] * self.group1()[3])),
                (-(other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[2] * self.group3()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group1()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group3()[1])
                    + (other.group1()[0] * self.group2()[3])
                    + (other.group1()[1] * self.group0()[2])),
                ((other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group3()[0])
                    + (other.group1()[1] * self.group2()[3])
                    + (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group3()[0]) - (other.group0()[2] * self.group1()[3])
                    + (other.group1()[0] * self.group0()[1])
                    + (other.group1()[2] * self.group2()[3])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       93      130        0
    //    simd4       65       66        0
    // Totals...
    // yes simd      158      196        0
    //  no simd      353      394        0
    fn sandwich(self, other: Motor) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) + (other.group0()[3] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[0]) + (other.group0()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group2()[3]) + (other.group0()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])
                    + (other.group1()[3] * self.group2()[3])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group0()[1], self.group0()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group1()[1] * self.group0()[2]) + (other.group1()[3] * self.group0()[0])),
                ((other.group1()[2] * self.group0()[0]) + (other.group1()[3] * self.group0()[1])),
                ((other.group1()[2] * self.group2()[3]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group3()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group0()[3], self.group3()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group0()[1], self.group2()[3]]) * swizzle!(other.group1(), 0, 1, 0, 3))
                - (swizzle!(other.group0(), 2, 0, 1, 3) * swizzle!(self.group1(), 1, 2, 0, 3))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2])
                    + (other.group0()[3] * self.group2()[0])
                    + (other.group1()[1] * self.group1()[2])
                    + (other.group1()[1] * self.group3()[2])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group1()[3] * self.group3()[0])),
                ((other.group0()[2] * self.group2()[0])
                    + (other.group0()[3] * self.group2()[1])
                    + (other.group1()[2] * self.group1()[0])
                    + (other.group1()[2] * self.group3()[0])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group1()[3] * self.group3()[1])),
                ((other.group0()[2] * self.group3()[3])
                    + (other.group0()[3] * self.group2()[2])
                    + (other.group1()[2] * self.group0()[3])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])
                    + (other.group1()[3] * self.group3()[2])),
                (-(other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[2] * self.group3()[2])),
            ]) + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group0()[3]]) * swizzle!(other.group1(), 0, 1, 0, 3))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group1()[3]]) * swizzle!(other.group1(), 0, 1, 0, 3))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group2()[1], self.group3()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group3(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group1()[0] * self.group2()[3]) + (other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1]) + (other.group1()[3] * self.group0()[0])),
                (-(other.group1()[0] * self.group0()[2])
                    + (other.group1()[1] * self.group2()[3])
                    + (other.group1()[2] * self.group0()[0])
                    + (other.group1()[3] * self.group0()[1])),
                ((other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0]) + (other.group1()[2] * self.group2()[3]) + (other.group1()[3] * self.group0()[2])),
                0.0,
            ]) - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group0()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group1()[3], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for VersorOdd {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      248      318        0
    //    simd2       24       24        0
    //    simd3      104      104        0
    //    simd4       88       89        0
    // Totals...
    // yes simd      464      535        0
    //  no simd      960     1034        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                ((other.group3()[3] * self.group1()[3]) - (other.group9()[0] * self.group3()[0]) - (other.group9()[1] * self.group3()[1]) - (other.group9()[2] * self.group3()[2])),
                ((other.group1()[0] * self.group3()[0]) + (other.group1()[1] * self.group3()[1]) + (other.group1()[2] * self.group3()[2]) - (other.group6()[3] * self.group1()[3])),
            ]) - (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group3()[0], other.group8()[0]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group3()[1], other.group8()[1]]))
                - (Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group3()[2], other.group8()[2]]))
                + (Simd32x2::from(self.group0()[3]) * other.group0())
                - (Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group5()[0], other.group6()[0]]))
                - (Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group5()[1], other.group6()[1]]))
                - (Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group5()[2], other.group6()[2]]))
                - (Simd32x2::from(self.group2()[0]) * Simd32x2::from([other.group4()[0], other.group7()[0]]))
                - (Simd32x2::from(self.group2()[1]) * Simd32x2::from([other.group4()[1], other.group7()[1]]))
                - (Simd32x2::from(self.group2()[2]) * Simd32x2::from([other.group4()[2], other.group7()[2]]))
                + (Simd32x2::from(self.group2()[3]) * Simd32x2::from([other.group9()[3], other[e1]]))
                + (Simd32x2::from(self.group3()[3]) * Simd32x2::from([other[e45], other.group1()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[1] * self.group3()[0]) - (other.group7()[0] * self.group3()[3])
                    + (other.group8()[0] * self.group2()[3])
                    + (other.group6()[3] * self.group1()[0])),
                (-(other.group0()[1] * self.group3()[1]) - (other.group7()[1] * self.group3()[3])
                    + (other.group8()[1] * self.group2()[3])
                    + (other.group6()[3] * self.group1()[1])),
                (-(other.group0()[1] * self.group3()[2]) - (other.group7()[2] * self.group3()[3])
                    + (other.group8()[2] * self.group2()[3])
                    + (other.group6()[3] * self.group1()[2])),
                (-(other.group7()[1] * self.group1()[1]) + (other.group7()[1] * self.group3()[1]) - (other.group7()[2] * self.group1()[2])
                    + (other.group7()[2] * self.group3()[2])),
            ]) - (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                - (Simd32x4::from([other.group7()[1], other.group7()[2], other.group7()[0], other.group6()[3]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group7()[2], other.group7()[0], other.group7()[1], other.group0()[1]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group8()[1], other.group8()[2], other.group8()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group8()[2], other.group8()[0], other.group8()[1], other.group6()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group7()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group7()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group0()[1]]) * swizzle!(other.group1(), 0, 1, 0, 1))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group0()[3], self.group0()[2]]) * swizzle!(other.group1(), 1, 2, 2, 2))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group0()[1]]) * swizzle!(other.group6(), 0, 1, 0, 1))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group1()[3], self.group0()[2]]) * swizzle!(other.group6(), 1, 2, 2, 2))
                + (Simd32x4::from([other[e1], other[e1], other[e1], other.group1()[3]]) * self.group0())),
            // e5
            ((other.group0()[1] * self.group3()[3])
                - (other.group8()[0] * self.group1()[0])
                - (other.group8()[0] * self.group3()[0])
                - (other.group8()[1] * self.group1()[1])
                - (other.group8()[1] * self.group3()[1])
                - (other.group8()[2] * self.group1()[2])
                - (other.group8()[2] * self.group3()[2])
                - (other.group1()[0] * self.group2()[0])
                - (other.group1()[1] * self.group2()[1])
                - (other.group1()[2] * self.group2()[2])
                - (other.group6()[0] * self.group2()[0])
                - (other.group6()[1] * self.group2()[1])
                - (other.group6()[2] * self.group2()[2])
                + (other.group6()[3] * self.group3()[3])
                + (self.group0()[3] * other[e1])
                + (self.group1()[3] * other[e1])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group5()[1] * self.group2()[2]) + (other.group9()[2] * self.group2()[1]) + (other.group9()[3] * self.group1()[0]) + (other.group9()[3] * self.group3()[0])),
                ((other.group5()[2] * self.group2()[0]) + (other.group9()[0] * self.group2()[2]) + (other.group9()[3] * self.group1()[1]) + (other.group9()[3] * self.group3()[1])),
                ((other.group5()[0] * self.group2()[1]) + (other.group9()[1] * self.group2()[0]) + (other.group9()[3] * self.group1()[2]) + (other.group9()[3] * self.group3()[2])),
                (-(other.group4()[2] * self.group2()[2])
                    - (other.group5()[1] * self.group3()[1])
                    - (other.group5()[2] * self.group3()[2])
                    - (other.group9()[3] * self.group2()[3])),
            ]) + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                + (Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other[e45]]))
                - (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group4()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group5()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group9()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group4()[1]]) * swizzle!(self.group2(), 0, 1, 2, 1))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group0()[0]]) * swizzle!(other.group3(), 0, 1, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group0()[3], self.group0()[2]]) * swizzle!(other.group3(), 1, 2, 2, 2))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group0()[1]]) * swizzle!(other.group3(), 0, 1, 0, 1))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group3()[3], self.group1()[2]]) * swizzle!(other.group9(), 1, 2, 2, 2))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group1()[3], self.group0()[3]]) * swizzle!(other.group3(), 1, 2, 2, 3))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group2()[1], self.group1()[1]]) * swizzle!(other.group9(), 0, 1, 0, 1))),
            // e41, e42, e43
            (Simd32x3::from([
                ((other.group9()[1] * self.group0()[2]) - (other.group9()[2] * self.group0()[1])),
                (-(other.group9()[0] * self.group0()[2]) + (other.group9()[2] * self.group0()[0])),
                ((other.group9()[0] * self.group0()[1]) - (other.group9()[1] * self.group0()[0])),
            ]) + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(other.group4()[0]) * Simd32x3::from([self.group0()[3], self.group3()[2], self.group1()[1]]))
                - (Simd32x3::from(other.group4()[0]) * Simd32x3::from([self.group1()[3], self.group1()[2], self.group3()[1]]))
                + (Simd32x3::from(other.group4()[1]) * Simd32x3::from([self.group1()[2], self.group0()[3], self.group3()[0]]))
                - (Simd32x3::from(other.group4()[1]) * Simd32x3::from([self.group3()[2], self.group1()[3], self.group1()[0]]))
                - (Simd32x3::from(other.group4()[2]) * Simd32x3::from([self.group1()[1], self.group3()[0], self.group1()[3]]))
                + (Simd32x3::from(other.group4()[2]) * Simd32x3::from([self.group3()[1], self.group1()[0], self.group0()[3]]))
                + (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(other[e45]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group5(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group2()[3]]) * swizzle!(other.group5(), 1, 2, 2))
                + (Simd32x3::from([self.group2()[3], self.group2()[3], self.group0()[1]]) * swizzle!(other.group5(), 0, 1, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                ((other.group3()[1] * self.group0()[2]) - (other.group3()[2] * self.group0()[1]) + (other.group9()[1] * self.group3()[2]) - (other.group9()[2] * self.group3()[1])),
                (-(other.group3()[0] * self.group0()[2]) + (other.group3()[2] * self.group0()[0]) - (other.group9()[0] * self.group3()[2])
                    + (other.group9()[2] * self.group3()[0])),
                ((other.group3()[0] * self.group0()[1]) - (other.group3()[1] * self.group0()[0]) + (other.group9()[0] * self.group3()[1]) - (other.group9()[1] * self.group3()[0])),
            ]) + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(other.group9()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                + (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                + (Simd32x3::from([self.group0()[3], self.group0()[3], self.group1()[1]]) * swizzle!(other.group5(), 0, 1, 0))
                - (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group5(), 2, 0, 1))
                + (Simd32x3::from([self.group1()[2], self.group1()[0], self.group0()[3]]) * swizzle!(other.group5(), 1, 2, 2))
                - (Simd32x3::from([self.group2()[1], self.group2()[2], self.group2()[0]]) * swizzle!(other.group4(), 2, 0, 1))
                + (Simd32x3::from([self.group2()[2], self.group2()[0], self.group3()[3]]) * swizzle!(other.group4(), 1, 2, 2))
                + (Simd32x3::from([self.group3()[3], self.group3()[3], self.group2()[1]]) * swizzle!(other.group4(), 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[0]) - (other.group7()[2] * self.group2()[1]) + (other.group6()[1] * self.group1()[2])),
                ((other.group0()[1] * self.group1()[1]) - (other.group7()[0] * self.group2()[2]) + (other.group6()[2] * self.group1()[0])),
                ((other.group0()[1] * self.group1()[2]) - (other.group7()[1] * self.group2()[0]) + (other.group6()[2] * self.group0()[3])),
                (-(other.group8()[1] * self.group0()[1]) - (other.group8()[2] * self.group0()[2]) - (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from(other[e1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                + (Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group6()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group7()[1], other.group7()[2], other.group7()[0], other.group7()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group8()[0], other.group8()[1], other.group8()[2], other.group7()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group8()[1], other.group8()[2], other.group8()[0], other.group6()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group8()[2], other.group8()[0], other.group8()[1], other.group8()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group6()[1]]) * swizzle!(self.group3(), 1, 2, 0, 1))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group7()[2]]) * swizzle!(self.group2(), 0, 1, 2, 2))
                - (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group0()[1]]) * swizzle!(self.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group6()[3], other.group6()[3], other.group6()[3], other.group1()[3]]) * self.group3())
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group3()[2]]) * swizzle!(other.group6(), 0, 1, 0, 2))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group1()[0]]) * swizzle!(other.group1(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group1()[3], self.group1()[1]]) * swizzle!(other.group1(), 1, 2, 2, 1))),
            // e423, e431, e412
            (Simd32x3::from([
                ((other.group1()[2] * self.group0()[1]) + (other.group6()[1] * self.group0()[2])),
                ((other.group1()[0] * self.group0()[2]) + (other.group6()[2] * self.group0()[0])),
                ((other.group1()[1] * self.group0()[0]) + (other.group6()[0] * self.group0()[1])),
            ]) + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(other.group7()[0]) * Simd32x3::from([self.group0()[3], self.group3()[2], self.group1()[1]]))
                - (Simd32x3::from(other.group7()[0]) * Simd32x3::from([self.group1()[3], self.group1()[2], self.group3()[1]]))
                + (Simd32x3::from(other.group7()[1]) * Simd32x3::from([self.group1()[2], self.group0()[3], self.group3()[0]]))
                - (Simd32x3::from(other.group7()[1]) * Simd32x3::from([self.group3()[2], self.group1()[3], self.group1()[0]]))
                - (Simd32x3::from(other.group7()[2]) * Simd32x3::from([self.group1()[1], self.group3()[0], self.group1()[3]]))
                + (Simd32x3::from(other.group7()[2]) * Simd32x3::from([self.group3()[1], self.group1()[0], self.group0()[3]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                - (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group6()[3], other.group1()[2], other.group6()[1]]))
                - (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group6()[2], other.group6()[3], other.group1()[0]]))
                - (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], other.group6()[0], other.group6()[3]]))
                - (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))),
            // e235, e315, e125
            (Simd32x3::from([
                ((other.group1()[1] * self.group2()[2]) - (other.group1()[2] * self.group2()[1]) + (other.group6()[1] * self.group2()[2]) - (other.group6()[2] * self.group2()[1])),
                (-(other.group1()[0] * self.group2()[2]) + (other.group1()[2] * self.group2()[0]) - (other.group6()[0] * self.group2()[2])
                    + (other.group6()[2] * self.group2()[0])),
                ((other.group1()[0] * self.group2()[1]) - (other.group1()[1] * self.group2()[0]) + (other.group6()[0] * self.group2()[1]) - (other.group6()[1] * self.group2()[0])),
            ]) + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                + (Simd32x3::from(other.group6()[3]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from([self.group0()[3], self.group0()[3], self.group1()[1]]) * swizzle!(other.group8(), 0, 1, 0))
                - (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group8(), 2, 0, 1))
                + (Simd32x3::from([self.group1()[2], self.group1()[0], self.group0()[3]]) * swizzle!(other.group8(), 1, 2, 2))
                + (Simd32x3::from([self.group1()[3], self.group1()[3], self.group3()[1]]) * swizzle!(other.group8(), 0, 1, 0))
                - (Simd32x3::from([self.group3()[1], self.group3()[2], self.group3()[0]]) * swizzle!(other.group8(), 2, 0, 1))
                + (Simd32x3::from([self.group3()[2], self.group3()[0], self.group1()[3]]) * swizzle!(other.group8(), 1, 2, 2))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group4()[0] * self.group3()[3]) + (other.group5()[1] * self.group3()[2]) + (other.group3()[3] * self.group1()[0]) - (other.group9()[3] * self.group0()[0])
                    + (self.group2()[0] * other[e45])),
                ((other.group4()[1] * self.group3()[3]) + (other.group5()[2] * self.group3()[0]) + (other.group3()[3] * self.group1()[1]) - (other.group9()[3] * self.group0()[1])
                    + (self.group2()[1] * other[e45])),
                ((other.group4()[2] * self.group3()[3]) + (other.group5()[0] * self.group3()[1]) + (other.group3()[3] * self.group1()[2]) - (other.group9()[3] * self.group0()[2])
                    + (self.group2()[2] * other[e45])),
                (-(other.group5()[1] * self.group2()[1])
                    - (other.group5()[2] * self.group2()[2])
                    - (other.group3()[1] * self.group3()[1])
                    - (other.group3()[2] * self.group3()[2])
                    - (other.group3()[3] * self.group3()[3])),
            ]) + (Simd32x4::from(other.group0()[0]) * self.group3())
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group9()[3]]))
                + (Simd32x4::from([other.group4()[1], other.group4()[2], other.group4()[0], other.group9()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group4()[2], other.group4()[0], other.group4()[1], other.group5()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group3()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group9()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group9()[2], other.group9()[0], other.group9()[1], other.group3()[2]]) * swizzle!(self.group1(), 1, 2, 0, 2))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group2()[3], self.group1()[1]]) * swizzle!(other.group3(), 1, 2, 2, 1))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group2()[1]]) * swizzle!(other.group9(), 0, 1, 0, 1))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group0()[3], self.group2()[2]]) * swizzle!(other.group9(), 1, 2, 2, 2))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group0()[1], self.group1()[0]]) * swizzle!(other.group3(), 0, 1, 0, 0))),
            // e1234
            ((other.group0()[0] * self.group2()[3]) - (other.group4()[0] * self.group1()[0]) + (other.group4()[0] * self.group3()[0]) - (other.group4()[1] * self.group1()[1])
                + (other.group4()[1] * self.group3()[1])
                - (other.group4()[2] * self.group1()[2])
                + (other.group4()[2] * self.group3()[2])
                - (other.group5()[0] * self.group0()[0])
                - (other.group5()[1] * self.group0()[1])
                - (other.group5()[2] * self.group0()[2])
                + (other.group3()[3] * self.group2()[3])
                - (other.group9()[0] * self.group0()[0])
                - (other.group9()[1] * self.group0()[1])
                - (other.group9()[2] * self.group0()[2])
                + (self.group0()[3] * other[e45])
                - (self.group1()[3] * other[e45])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       96      135        0
    //    simd4       48       49        0
    // Totals...
    // yes simd      144      184        0
    //  no simd      288      331        0
    fn sandwich(self, other: Plane) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (other.group0()[1] * self.group0()[2]),
                (other.group0()[2] * self.group0()[0]),
                (other.group0()[2] * self.group2()[3]),
                (-(other.group0()[1] * self.group3()[1]) - (other.group0()[2] * self.group3()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group0()[1], self.group2()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group3()[2]) + (other.group0()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group1()[3]) + (other.group0()[2] * self.group3()[0]) + (other.group0()[3] * self.group0()[1])),
                ((other.group0()[0] * self.group3()[1]) + (other.group0()[2] * self.group1()[3]) + (other.group0()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2]) - (other.group0()[3] * self.group2()[3])),
            ]) - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group0()[2] * self.group2()[1]) + (other.group0()[3] * self.group1()[0]) + (other.group0()[3] * self.group3()[0])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[3] * self.group1()[1]) + (other.group0()[3] * self.group3()[1])),
                ((other.group0()[1] * self.group2()[0]) + (other.group0()[3] * self.group1()[2]) + (other.group0()[3] * self.group3()[2])),
                ((other.group0()[2] * self.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group3()[3], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group2()[1], self.group0()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group0()[2] * self.group1()[1]) - (other.group0()[3] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[3] * self.group0()[1])),
                (-(other.group0()[1] * self.group1()[0]) - (other.group0()[3] * self.group0()[2])),
                ((other.group0()[2] * self.group2()[2]) + (other.group0()[3] * self.group0()[3]) + (other.group0()[3] * self.group1()[3])),
            ]) + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group2()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group0()[3], self.group2()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       68      109        0
    //    simd4       59       60        0
    // Totals...
    // yes simd      127      169        0
    //  no simd      304      349        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group0()[2]) - (other.group0()[3] * self.group3()[0])),
                (-(other.group0()[1] * self.group2()[3]) - (other.group0()[2] * self.group0()[0]) - (other.group0()[3] * self.group3()[1])),
                (-(other.group0()[0] * self.group0()[1]) - (other.group0()[2] * self.group2()[3]) - (other.group0()[3] * self.group3()[2])),
                ((other.group0()[2] * self.group3()[2]) + (other.group0()[3] * self.group3()[3]) + (self.group2()[3] * other[e2])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[2] * self.group3()[1]) + (self.group0()[0] * other[e2])),
                ((other.group0()[0] * self.group3()[2]) + (self.group0()[1] * other[e2])),
                ((other.group0()[1] * self.group3()[0]) + (self.group0()[2] * other[e2])),
                (-(other.group0()[2] * self.group1()[2]) - (other.group0()[3] * self.group3()[3])),
            ]) + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other[e2]]) * self.group2())
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group1()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group1()[3], self.group1()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group2()[2])),
                ((other.group0()[1] * self.group3()[3]) + (other.group0()[2] * self.group2()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[2] * self.group3()[3])),
                (-(other.group0()[1] * self.group2()[1]) - (other.group0()[2] * self.group2()[2])),
            ]) + (Simd32x4::from(other[e2]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]))
                + (Simd32x4::from(other[e2]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group1()[3]]))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group2(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[3] * self.group2()[0]) * -1.0),
                ((other.group0()[3] * self.group2()[1]) * -1.0),
                ((other.group0()[3] * self.group2()[2]) * -1.0),
                (other.group0()[3] * self.group0()[3]),
            ]) + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group0()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group0()[3], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))
                + (Simd32x4::from([other[e2], other[e2], other[e2], other.group0()[2]]) * swizzle!(self.group0(), 0, 1, 2, 2))
                - (swizzle!(other.group0(), 2, 0, 1, 3) * swizzle!(self.group1(), 1, 2, 0, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       76       98        0
    //    simd4       41       46        0
    // Totals...
    // yes simd      117      144        0
    //  no simd      240      282        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(other[scalar]) * self.group0()),
            // e23, e31, e12, e45
            (Simd32x4::from(other[scalar]) * self.group1()),
            // e15, e25, e35, e1234
            (Simd32x4::from(other[scalar]) * self.group2()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other[scalar]) * self.group3()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       96      135        0
    //    simd4       52       53        0
    // Totals...
    // yes simd      148      188        0
    //  no simd      304      347        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (other.group0()[1] * self.group0()[2]),
                (other.group0()[2] * self.group0()[0]),
                (other.group0()[2] * self.group2()[3]),
                ((other.group0()[2] * self.group3()[2]) * -1.0),
            ]) + (Simd32x4::from(other[e4315]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group0()[1], self.group2()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))
                - (Simd32x4::from([other[e4315], other[e4315], other[e4315], other.group0()[1]]) * swizzle!(self.group3(), 0, 1, 2, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[3] * self.group0()[0]) + (self.group2()[0] * other[e4315])),
                ((other.group0()[1] * self.group1()[3]) + (other.group0()[3] * self.group0()[1]) + (self.group2()[1] * other[e4315])),
                ((other.group0()[2] * self.group1()[3]) + (other.group0()[3] * self.group0()[2]) + (self.group2()[2] * other[e4315])),
                (-(other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2]) - (other.group0()[3] * self.group2()[3])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other[e4315]]) * swizzle!(self.group3(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group0()[2] * self.group2()[1]) + (other.group0()[3] * self.group1()[0]) + (other.group0()[3] * self.group3()[0])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[3] * self.group1()[1]) + (other.group0()[3] * self.group3()[1])),
                ((other.group0()[1] * self.group2()[0]) + (other.group0()[3] * self.group1()[2]) + (other.group0()[3] * self.group3()[2])),
                (-(other.group0()[2] * self.group0()[2]) + (self.group0()[3] * other[e4315]) - (self.group1()[3] * other[e4315])),
            ]) - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group3()[3], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group2()[1], self.group0()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group0()[2] * self.group1()[1]) - (other.group0()[3] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[3] * self.group0()[1])),
                (-(other.group0()[1] * self.group1()[0]) - (other.group0()[3] * self.group0()[2])),
                ((other.group0()[3] * self.group0()[3]) + (other.group0()[3] * self.group1()[3])),
            ]) + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group2()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group0()[3], self.group2()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))
                + (Simd32x4::from([other[e4315], other[e4315], other[e4315], other.group0()[2]]) * swizzle!(self.group2(), 0, 1, 2, 2))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      104      142        0
    //    simd4       94       95        0
    // Totals...
    // yes simd      198      237        0
    //  no simd      480      522        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group3()[1]) + (other.group0()[3] * self.group0()[0]) + (other.group1()[1] * self.group0()[2])
                    - (other.group3()[0] * self.group2()[3])
                    - (other.group3()[3] * self.group3()[0])),
                ((other.group0()[1] * self.group0()[3]) + (other.group0()[2] * self.group1()[0]) + (other.group0()[3] * self.group0()[1]) + (other.group1()[2] * self.group0()[0])
                    - (other.group3()[1] * self.group2()[3])
                    - (other.group3()[3] * self.group3()[1])),
                ((other.group0()[1] * self.group3()[0]) + (other.group0()[2] * self.group0()[3]) + (other.group0()[3] * self.group0()[2]) + (other.group1()[0] * self.group0()[1])
                    - (other.group3()[2] * self.group2()[3])
                    - (other.group3()[3] * self.group3()[2])),
                (-(other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    + (other.group3()[2] * self.group3()[2])
                    + (other.group3()[3] * self.group3()[3])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group1()[2], self.group3()[1], self.group2()[0]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group3()[2], self.group1()[3], self.group1()[0], self.group2()[1]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group1()[1], self.group3()[0], self.group1()[3], self.group2()[2]]))
                + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group2()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group3(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[3], self.group3()[2], self.group1()[1], self.group0()[3]]) * swizzle!(other.group0(), 0, 0, 0, 3))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[1]]) * swizzle!(other.group3(), 3, 3, 3, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group2()[3] * self.group0()[0]) + (other.group3()[3] * self.group2()[0])),
                ((other.group2()[3] * self.group0()[1]) + (other.group3()[3] * self.group2()[1])),
                ((other.group2()[2] * self.group2()[3]) + (other.group3()[3] * self.group2()[2])),
                (-(other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group3()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group3()[3]]) * self.group3())
                + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[3], other.group1()[3]]) * swizzle!(self.group0(), 2, 0, 2, 3))
                + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[2]]) * swizzle!(self.group3(), 1, 2, 0, 2))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group3()[0]]) * swizzle!(other.group1(), 0, 1, 0, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group0()[3], self.group3()[1]]) * swizzle!(other.group1(), 1, 2, 2, 1))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group1()[1]]) * swizzle!(other.group3(), 0, 1, 0, 1))
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group1()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group3()[3], self.group2()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group0()[1], self.group2()[3]]) * swizzle!(other.group2(), 0, 1, 0, 3))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group1()[3], self.group1()[2]]) * swizzle!(other.group3(), 1, 2, 2, 2))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group2()[1], self.group2()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))
                - (swizzle!(other.group2(), 2, 0, 1, 0) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group1()[1] * self.group2()[2])
                    + (other.group1()[3] * self.group2()[0])
                    + (other.group2()[1] * self.group1()[2])
                    + (other.group2()[1] * self.group3()[2])
                    + (other.group2()[3] * self.group1()[0])
                    + (other.group2()[3] * self.group3()[0])
                    + (other.group3()[0] * self.group3()[3])
                    + (other.group3()[1] * self.group2()[2])),
                ((other.group1()[2] * self.group2()[0])
                    + (other.group1()[3] * self.group2()[1])
                    + (other.group2()[2] * self.group1()[0])
                    + (other.group2()[2] * self.group3()[0])
                    + (other.group2()[3] * self.group1()[1])
                    + (other.group2()[3] * self.group3()[1])
                    + (other.group3()[1] * self.group3()[3])
                    + (other.group3()[2] * self.group2()[0])),
                ((other.group1()[2] * self.group3()[3])
                    + (other.group1()[3] * self.group2()[2])
                    + (other.group2()[2] * self.group0()[3])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group2()[3] * self.group1()[2])
                    + (other.group2()[3] * self.group3()[2])
                    + (other.group3()[0] * self.group2()[1])
                    + (other.group3()[2] * self.group3()[3])),
                (-(other.group1()[2] * self.group2()[2])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[1] * self.group3()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[2])
                    - (other.group3()[0] * self.group2()[0])
                    - (other.group3()[1] * self.group2()[1])
                    - (other.group3()[2] * self.group2()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[1]]) * swizzle!(self.group2(), 1, 2, 0, 1))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group0()[3]]) * swizzle!(other.group2(), 0, 1, 0, 3))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group1()[3]]) * swizzle!(other.group2(), 0, 1, 0, 3))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group2()[1], self.group3()[3]]) * swizzle!(other.group1(), 0, 1, 0, 3))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (swizzle!(other.group2(), 2, 0, 1, 0) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (swizzle!(other.group2(), 2, 0, 1, 0) * swizzle!(self.group3(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (other.group1()[3] * self.group1()[0]),
                (other.group1()[3] * self.group1()[1]),
                (other.group1()[3] * self.group1()[2]),
                (other.group0()[2] * self.group3()[2]),
            ]) + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[3]]))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[1]]) * swizzle!(self.group3(), 1, 2, 0, 1))
                + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group3()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[2]]) * swizzle!(self.group0(), 1, 2, 0, 2))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group3()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))
                - (Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group1()[3]]) * self.group2())
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group0()[2]]) * swizzle!(other.group3(), 0, 1, 0, 2))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group0()[3], self.group0()[3]]) * swizzle!(other.group3(), 1, 2, 2, 3))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[1], self.group0()[0]]) * swizzle!(other.group1(), 0, 1, 0, 0))
                + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group3()[3], self.group1()[1]]) * swizzle!(other.group0(), 1, 2, 2, 1))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group1()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group1()[3], self.group0()[1]]) * swizzle!(other.group1(), 1, 2, 2, 1))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group2()[1], self.group1()[0]]) * swizzle!(other.group0(), 0, 1, 0, 0))
                - (swizzle!(other.group3(), 2, 0, 1, 3) * swizzle!(self.group1(), 1, 2, 0, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      152      190        0
    //    simd4       82       83        0
    // Totals...
    // yes simd      234      273        0
    //  no simd      480      522        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[2] * self.group3()[1])
                    + (other.group0()[3] * self.group0()[0])
                    + (other.group1()[1] * self.group0()[2])
                    + (other.group1()[3] * self.group0()[0])
                    + (other.group2()[3] * self.group1()[0])
                    + (other.group3()[0] * self.group2()[3])
                    + (other.group3()[1] * self.group0()[2])),
                ((other.group0()[1] * self.group0()[3])
                    + (other.group0()[3] * self.group0()[1])
                    + (other.group1()[2] * self.group0()[0])
                    + (other.group1()[3] * self.group0()[1])
                    + (other.group2()[3] * self.group1()[1])
                    + (other.group3()[1] * self.group2()[3])
                    + (other.group3()[2] * self.group0()[0])),
                ((other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group0()[3])
                    + (other.group0()[3] * self.group0()[2])
                    + (other.group1()[0] * self.group0()[1])
                    + (other.group1()[3] * self.group0()[2])
                    + (other.group3()[0] * self.group0()[1])
                    + (other.group3()[2] * self.group2()[3])),
                (-(other.group1()[1] * self.group1()[1]) - (other.group1()[2] * self.group1()[2]) - (other.group2()[2] * self.group0()[2])
                    + (other.group2()[3] * self.group3()[3])
                    - (other.group3()[0] * self.group3()[0])
                    - (other.group3()[1] * self.group3()[1])
                    - (other.group3()[2] * self.group3()[2])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group1()[2], self.group3()[1], self.group2()[0]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group3()[2], self.group1()[3], self.group1()[0], self.group2()[1]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group1()[1], self.group3()[0], self.group1()[3], self.group2()[2]]))
                + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group2()[3], other.group1()[3]]) * swizzle!(self.group1(), 2, 0, 2, 3))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[3], self.group3()[2], self.group1()[1], self.group0()[3]]) * swizzle!(other.group0(), 0, 0, 0, 3))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[0]]) * swizzle!(other.group2(), 3, 3, 3, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) + (other.group0()[3] * self.group1()[0]) + (other.group1()[1] * self.group1()[2]) - (other.group2()[2] * self.group0()[1])
                    + (other.group3()[0] * self.group1()[3])
                    + (other.group3()[1] * self.group3()[2])
                    + (other.group3()[3] * self.group0()[0])),
                ((other.group0()[2] * self.group2()[0]) + (other.group0()[3] * self.group1()[1]) + (other.group1()[2] * self.group1()[0]) - (other.group2()[0] * self.group0()[2])
                    + (other.group3()[1] * self.group1()[3])
                    + (other.group3()[2] * self.group3()[0])
                    + (other.group3()[3] * self.group0()[1])),
                ((other.group0()[3] * self.group1()[2]) + (other.group1()[3] * self.group3()[2]) - (other.group2()[1] * self.group0()[0])
                    + (other.group2()[3] * self.group2()[2])
                    + (other.group3()[0] * self.group3()[1])
                    + (other.group3()[2] * self.group1()[3])
                    + (other.group3()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[2] * self.group3()[2])
                    - (other.group3()[0] * self.group1()[0])
                    - (other.group3()[1] * self.group1()[1])
                    - (other.group3()[2] * self.group1()[2])
                    - (other.group3()[3] * self.group2()[3])),
            ]) + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group0()[2], other.group2()[3]]) * swizzle!(self.group3(), 0, 1, 3, 3))
                + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group1()[2], other.group2()[1]]) * swizzle!(self.group0(), 2, 0, 3, 1))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[1]]) * swizzle!(self.group3(), 1, 2, 0, 1))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group0()[3]]) * swizzle!(other.group1(), 0, 1, 0, 3))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[3], self.group0()[2]]) * swizzle!(other.group2(), 3, 3, 2, 2))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 0, 1, 0, 0))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group2()[1], self.group1()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * swizzle!(self.group2(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group2()[0] * self.group1()[3]) + (other.group2()[1] * self.group1()[2]) + (other.group3()[2] * self.group2()[1]) + (other.group3()[3] * self.group1()[0])),
                ((other.group2()[1] * self.group1()[3]) + (other.group2()[2] * self.group1()[0]) + (other.group3()[0] * self.group2()[2]) + (other.group3()[3] * self.group1()[1])),
                ((other.group2()[2] * self.group0()[3]) + (other.group2()[2] * self.group1()[3]) + (other.group3()[3] * self.group1()[2]) + (other.group3()[3] * self.group3()[2])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[2] * self.group0()[2])
                    - (other.group3()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group3()[1], other.group0()[3]]) * swizzle!(self.group2(), 2, 0, 0, 3))
                + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group1()[2], other.group0()[1]]) * swizzle!(self.group3(), 2, 0, 3, 1))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group2()[0], other.group0()[2]]) * swizzle!(self.group3(), 0, 1, 1, 2))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group0()[3]]) * swizzle!(other.group2(), 0, 1, 0, 3))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group3()[3], self.group0()[1]]) * swizzle!(other.group3(), 1, 2, 2, 1))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[3]]) * swizzle!(other.group2(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group2()[1], self.group0()[0]]) * swizzle!(other.group3(), 0, 1, 0, 0))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group2()[1], self.group2()[3]]) * swizzle!(other.group1(), 0, 1, 0, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[3] * self.group3()[0]) + (other.group1()[1] * self.group3()[2]) + (other.group1()[3] * self.group1()[0]) + (other.group2()[3] * self.group2()[0])
                    - (other.group3()[3] * self.group0()[0])),
                ((other.group0()[3] * self.group3()[1]) + (other.group1()[2] * self.group3()[0]) + (other.group1()[3] * self.group1()[1]) + (other.group2()[3] * self.group2()[1])
                    - (other.group3()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group3()[3]) + (other.group0()[3] * self.group3()[2]) + (other.group1()[0] * self.group3()[1]) + (other.group1()[3] * self.group1()[2])
                    - (other.group3()[3] * self.group0()[2])),
                (-(other.group1()[2] * self.group2()[2])
                    - (other.group1()[3] * self.group3()[3])
                    - (other.group2()[1] * self.group3()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[2])),
            ]) + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group2()[3], other.group3()[0]]) * swizzle!(self.group2(), 2, 0, 2, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group3()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group2()[3], self.group3()[0]]) * swizzle!(other.group2(), 1, 2, 2, 0))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group2()[1]]) * swizzle!(other.group3(), 0, 1, 0, 1))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group0()[3], self.group2()[2]]) * swizzle!(other.group3(), 1, 2, 2, 2))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 0, 1, 0, 0))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group2()[1], self.group3()[3]]) * swizzle!(other.group0(), 0, 1, 0, 3))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
