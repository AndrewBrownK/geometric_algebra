use crate::traits::GeometricProduct;
use crate::traits::Reverse;
// Note on Operative Statistics:
// Operative Statistics are not a precise predictor of performance or performance comparisons.
// This is due to varying hardware capabilities and compiler optimizations.
// As always, where performance is a concern, there is no substitute for
// real measurements on real work-loads on real hardware.
// Disclaimer aside, enjoy the fun information =)
//
// Total Implementations: 625
//
// Yes SIMD:   add/sub     mul     div
//  Minimum:         0       2       0
//   Median:        44      77       0
//  Average:        79     112       0
//  Maximum:       784     906       0
//
//  No SIMD:   add/sub     mul     div
//  Minimum:         0       2       0
//   Median:        96     135       0
//  Average:       186     223       0
//  Maximum:      1984    2068       0
impl std::ops::Div<sandwich> for AntiCircleRotor {
    type Output = sandwich_partial<AntiCircleRotor>;
    fn div(self, _rhs: sandwich) -> Self::Output {
        sandwich_partial(self)
    }
}
impl Sandwich<AntiCircleRotor> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       85      128        0
    //    simd3        0       16        0
    //    simd4       45       33        0
    // Totals...
    // yes simd      130      177        0
    //  no simd      265      308        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e31] * self[e43]) + (other[e45] * self[e41]) + (other[scalar] * self[e41]),
                (other[e12] * self[e41]) + (other[e45] * self[e42]) + (other[scalar] * self[e42]),
                (other[e23] * self[e42]) + (other[e45] * self[e43]) + (other[scalar] * self[e43]),
                -(other[e23] * self[e23]) - (other[e31] * self[e31]) - (other[e12] * self[e12]) - (other[e15] * self[e41]) - (other[e25] * self[e42]) - (other[e35] * self[e43]),
            ]) + (self.group1().zx().extend_to_4(self[scalar], self[scalar]) * other.group0().yzz().extend_to_4(other[scalar]))
                + (self.group2().ww().extend_to_4(self[e31], self[e45]) * other.group0().xyx().extend_to_4(other[e45]))
                - (other.group0().xxy() * self.group1().wzx()).extend_to_4(other[e41] * self[e15])
                - (other.group0().zyz() * self.group1().yww()).extend_to_4(other[e42] * self[e25])
                - (self.group0().yzx() * other.group1().zxy()).extend_to_4(other[e43] * self[e35]),
            // e23, e31, e12, e45
            (Simd32x4::from(other[scalar]) * self.group1())
                + (other.group1().yzzw() * self.group1().zx().extend_to_4(self[scalar], self[scalar]))
                + (other.group2().yzxy() * self.group0().zxy().extend_to_4(self[e42]))
                + (self.group2().ww().extend_to_4(self[e31], other[e35]) * other.group1().xyx().extend_to_4(self[e43]))
                + (other.group0().yzx() * self.group2().zxy()).extend_to_4(other[e15] * self[e41])
                - (self.group2().yzxx() * other.group0().zxy().extend_to_4(other[e41]))
                - (self.group0().yzx() * other.group2().zxy()).extend_to_4(other[e42] * self[e25])
                - (other.group1().zxy() * self.group1().yzx()).extend_to_4(other[e43] * self[e35]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e31] * self[e35]) + (other[e15] * self[e45]) + (other[e15] * self[scalar]) + (other[e25] * self[e12]) + (other[scalar] * self[e15]),
                (other[e12] * self[e15]) + (other[e25] * self[e45]) + (other[e25] * self[scalar]) + (other[e35] * self[e23]) + (other[scalar] * self[e25]),
                (other[e23] * self[e25]) + (other[e15] * self[e31]) + (other[e35] * self[e45]) + (other[e35] * self[scalar]) + (other[scalar] * self[e35]),
                -(other[e23] * self[e41]) - (other[e31] * self[e42]) - (other[e12] * self[e43]),
            ]) - (self.group1().yzxz() * other.group2().zxy().extend_to_4(other[e43]))
                - (other.group1().zxy() * self.group2().yzx()).extend_to_4(other[e41] * self[e23])
                - (other.group1().www() * self.group2().truncate_to_3()).extend_to_4(other[e42] * self[e31]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e42] * self[e35]) + (other[e23] * self[e45]) + (other[e45] * self[e23]) + (other[e35] * self[e42]),
                (other[e43] * self[e15]) + (other[e31] * self[e45]) + (other[e45] * self[e31]) + (other[e15] * self[e43]),
                (other[e41] * self[e25]) + (other[e12] * self[e45]) + (other[e45] * self[e12]) + (other[e25] * self[e41]),
                -(other[e12] * self[e35]) - (other[e15] * self[e23]) - (other[e25] * self[e31]) - (other[e35] * self[e12]),
            ]) - (self.group2().yzxx() * other.group0().zxy().extend_to_4(other[e23]))
                - (self.group0().zxy() * other.group2().yzx()).extend_to_4(other[e31] * self[e25]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       89      145        0
    //    simd3        0       25        0
    //    simd4       55       33        0
    // Totals...
    // yes simd      144      203        0
    //  no simd      309      352        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e42] * other[e3]) + (self[e43] * other[e425]) + (self[e23] * other[e4]) + (self[e12] * other[e431]) + (self[scalar] * other[e423]),
                (self[e41] * other[e435]) + (self[e43] * other[e1]) + (self[e23] * other[e412]) + (self[e31] * other[e4]) + (self[scalar] * other[e431]),
                (self[e41] * other[e2]) + (self[e42] * other[e415]) + (self[e31] * other[e423]) + (self[e12] * other[e4]) + (self[scalar] * other[e412]),
                -(self[e23] * other[e415]) - (self[e31] * other[e425]) - (self[e12] * other[e435]) - (self[e45] * other[e321]) - (self[e35] * other[e412]),
            ]) - (Simd32x4::from(self[e41]) * Simd32x4::from([other[e321], other[e3], other[e425], other[e235]]))
                - (Simd32x4::from(self[e42]) * other.group1().zw().extend_to_4(other[e1], other[e315]))
                - (Simd32x4::from(self[e43]) * Simd32x4::from([other[e2], other[e415], other[e321], other[e125]]))
                - (other.group0().xxy() * self.group1().wzx()).extend_to_4(self[e15] * other[e423])
                - (other.group0().zyz() * self.group1().yww()).extend_to_4(self[e25] * other[e431]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e15] * other[e4]) + (self[scalar] * other[e415]),
                (self[e25] * other[e4]) + (self[scalar] * other[e425]),
                (self[e35] * other[e4]) + (self[scalar] * other[e435]),
                -(self[e31] * other[e2]) - (self[e12] * other[e3]),
            ]) + (Simd32x4::from([other[e315], other[e5], other[e5], self[e25]]) * self.group0().zyz().extend_to_4(other[e431]))
                + (Simd32x4::from([other[e5], other[e125], other[e235], self[e15]]) * self.group0().xxy().extend_to_4(other[e423]))
                + (self.group2().zxyz() * other.group0().yzx().extend_to_4(other[e412]))
                + (other.group1().yzxw() * self.group1().zxy().extend_to_4(self[scalar]))
                - (self.group1().wwwx() * other.group3().xyzx())
                - (other.group2().zxyx() * self.group0().yzx().extend_to_4(self[e41]))
                - (other.group0().zxy() * self.group2().yzx()).extend_to_4(self[e42] * other[e315])
                - (self.group1().yzx() * other.group1().zxy()).extend_to_4(self[e43] * other[e125]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e45] * other[e235]) + (self[e15] * other[e321]) + (self[e35] * other[e425]) + (self[e35] * other[e2]) + (self[scalar] * other[e235]),
                (self[e45] * other[e315]) + (self[e15] * other[e435]) + (self[e15] * other[e3]) + (self[e25] * other[e321]) + (self[scalar] * other[e315]),
                (self[e45] * other[e125]) + (self[e25] * other[e415]) + (self[e25] * other[e1]) + (self[e35] * other[e321]) + (self[scalar] * other[e125]),
                -(self[e15] * other[e415]) - (self[e15] * other[e1]) - (self[e25] * other[e425]) - (self[e25] * other[e2]) - (self[e35] * other[e435]) - (self[e35] * other[e3]),
            ]) + (Simd32x4::from([other[e315], other[e5], other[e5], other[e5]]) * self.group1().zyz().extend_to_4(self[scalar]))
                + (Simd32x4::from([other[e5], other[e125], other[e235], other[e5]]) * self.group1().xxyw())
                - (self.group1().yzxx() * other.group2().zxyx())
                - (self.group2().yzx() * other.group1().zxy()).extend_to_4(self[e31] * other[e315])
                - (self.group2().yzx() * other.group3().zxy()).extend_to_4(self[e12] * other[e125]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e12] * other[e2]) + (self[scalar] * other[e1]),
                (self[e31] * other[e321]) + (self[scalar] * other[e2]),
                (self[e12] * other[e321]) + (self[scalar] * other[e3]),
                -(self[e12] * other[e412]) - (self[e45] * other[e4]),
            ]) + (Simd32x4::from([other[e321], other[e3], other[e1], other[e4]]) * self.group1().xxy().extend_to_4(self[scalar]))
                + (Simd32x4::from([other[e315], other[e5], other[e5], other[e2]]) * self.group0().zyz().extend_to_4(self[e42]))
                + (Simd32x4::from([other[e5], other[e125], other[e235], other[e1]]) * self.group0().xxy().extend_to_4(self[e41]))
                + (other.group0().zxy() * self.group2().yzx()).extend_to_4(self[e43] * other[e3])
                - (self.group0().yzx() * other.group2().zxy()).extend_to_4(self[e41] * other[e415])
                - (other.group0().yzx() * self.group2().zxy()).extend_to_4(self[e42] * other[e425])
                - (self.group1().yzx() * other.group3().zxy()).extend_to_4(self[e43] * other[e435])
                - (self.group1().www() * other.group1().truncate_to_3()).extend_to_4(self[e23] * other[e423])
                - (other.group2().www() * self.group2().truncate_to_3()).extend_to_4(self[e31] * other[e431]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       49       73        0
    //    simd3        2       11        0
    //    simd4       28       27        0
    // Totals...
    // yes simd       79      111        0
    //  no simd      167      214        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(other[scalar]) * self.group0().extend_to_4(self[scalar]),
            // e23, e31, e12, e45
            ((Simd32x3::from(other[e3215]) * self.group0()) + (Simd32x3::from(other[scalar]) * self.group1().truncate_to_3())).extend_to_4(self[e45] * other[scalar]),
            // e15, e25, e35, e1234
            ((Simd32x3::from(other[e3215]) * self.group1().truncate_to_3()) + (Simd32x3::from(other[scalar]) * self.group2().truncate_to_3())).extend_to_4(0.0),
            // e4235, e4315, e4125, e3215
            other.group0().xx().extend_to_4(other[e3215], (self[e45] * other[e3215]) + (self[scalar] * other[e3215]))
                * self.group0().extend_to_4(1.0)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       62       96        0
    //    simd3        0       16        0
    //    simd4       33       23        0
    // Totals...
    // yes simd       95      135        0
    //  no simd      194      236        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([other[e321], other[e321], other[e321], 1.0])
                * self
                    .group0()
                    .extend_to_4(-(self[e41] * other[e235]) - (self[e42] * other[e315]) - (self[e43] * other[e125]) - (self[e45] * other[e321]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            (other.group0().yzxw() * self.group0().zxy().extend_to_4(self[scalar])) + Simd32x3::from(0.0).extend_to_4(-(self[e42] * other[e315]) - (self[e43] * other[e125]))
                - (other.group0().zxyx() * self.group0().yzx().extend_to_4(self[e41])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * other[e315]) + (self[e45] * other[e235]) + (self[e15] * other[e321]) + (self[scalar] * other[e235]),
                (self[e23] * other[e125]) + (self[e45] * other[e315]) + (self[e25] * other[e321]) + (self[scalar] * other[e315]),
                (self[e31] * other[e235]) + (self[e45] * other[e125]) + (self[e35] * other[e321]) + (self[scalar] * other[e125]),
                -(self[e31] * other[e315]) - (self[e12] * other[e125]),
            ]) - (self.group1().yzxx() * other.group0().zxyx()),
            // e1, e2, e3, e4
            (Simd32x3::from(other[e321]) * self.group1().truncate_to_3()).extend_to_4(0.0) + (self.group0().zxy() * other.group0().yzx()).extend_to_4(0.0)
                - (self.group0().yzx() * other.group0().zxy()).extend_to_4(0.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       73      118        0
    //    simd3        0       15        0
    //    simd4       40       28        0
    // Totals...
    // yes simd      113      161        0
    //  no simd      233      275        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e42] * other[e3],
                self[e43] * other[e1],
                self[e41] * other[e2],
                -(self[e43] * other[e125]) - (self[e45] * other[e321]),
            ]) - (Simd32x4::from([other[e321], other[e3], other[e1], other[e235]]) * self.group0().xxy().extend_to_4(self[e41]))
                - (Simd32x4::from([other[e2], other[e321], other[e321], other[e315]]) * self.group0().zyz().extend_to_4(self[e42])),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e43] * other[e315],
                self[e42] * other[e5],
                self[e43] * other[e5],
                -(self[e43] * other[e125]) - (self[e23] * other[e1]) - (self[e31] * other[e2]) - (self[e12] * other[e3]),
            ]) + (Simd32x4::from([other[e5], other[e125], other[e235], other[e321]]) * self.group0().xxy().extend_to_4(self[scalar]))
                - (other.group0().zxyx() * self.group0().yzx().extend_to_4(self[e41]))
                - (self.group1().www() * other.group1().truncate_to_3()).extend_to_4(self[e42] * other[e315]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e45] * other[e235]) + (self[e15] * other[e321]) + (self[e35] * other[e2]) + (self[scalar] * other[e235]),
                (self[e45] * other[e315]) + (self[e15] * other[e3]) + (self[e25] * other[e321]) + (self[scalar] * other[e315]),
                (self[e45] * other[e125]) + (self[e25] * other[e1]) + (self[e35] * other[e321]) + (self[scalar] * other[e125]),
                -(self[e12] * other[e125]) - (self[e15] * other[e1]) - (self[e25] * other[e2]) - (self[e35] * other[e3]),
            ]) + (Simd32x4::from([other[e315], other[e5], other[e5], other[e5]]) * self.group1().zyz().extend_to_4(self[scalar]))
                + (Simd32x4::from([other[e5], other[e125], other[e235], other[e5]]) * self.group1().xxyw())
                - (self.group1().yzxx() * other.group0().zxyx())
                - (self.group2().yzx() * other.group1().zxy()).extend_to_4(self[e31] * other[e315]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e12] * other[e2]) + (self[scalar] * other[e1]) - (self[e42] * other[e125]) - (self[e31] * other[e3]),
                (self[e31] * other[e321]) + (self[scalar] * other[e2]) - (self[e43] * other[e235]) - (self[e12] * other[e1]),
                (self[e12] * other[e321]) + (self[scalar] * other[e3]) - (self[e41] * other[e315]) - (self[e23] * other[e2]),
                0.0,
            ]) + (Simd32x4::from([other[e315], other[e5], other[e5], other[e2]]) * self.group0().zyz().extend_to_4(self[e42]))
                + (Simd32x4::from([other[e321], other[e3], other[e1], other[e3]]) * self.group1().xxy().extend_to_4(self[e43]))
                + (Simd32x4::from([other[e5], other[e125], other[e235], other[e1]]) * self.group0().xxy().extend_to_4(self[e41])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       71      114        0
    //    simd3        0       12        0
    //    simd4       35       26        0
    // Totals...
    // yes simd      106      152        0
    //  no simd      211      254        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e43] * other[e31],
                self[e41] * other[e12],
                self[e42] * other[e23],
                -(self[e42] * other[e25]) - (self[e43] * other[e35]) - (self[e23] * other[e23]) - (self[e31] * other[e31]) - (self[e12] * other[e12]),
            ]) - (self.group0().yzx() * other.group0().zxy()).extend_to_4(self[e41] * other[e15]),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(self[e42] * other[e35]) - (self[e31] * other[e12]),
                -(self[e43] * other[e15]) - (self[e12] * other[e23]),
                -(self[e41] * other[e25]) - (self[e23] * other[e31]),
                0.0,
            ]) + (self.group1().zx().extend_to_4(self[scalar], other[e35]) * other.group0().yzz().extend_to_4(self[e43]))
                + (self.group2().ww().extend_to_4(self[e31], other[e25]) * other.group0().xyx().extend_to_4(self[e42]))
                + (self.group0().zxy() * other.group1().yzx()).extend_to_4(self[e41] * other[e15]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e12] * other[e25]) + (self[e45] * other[e15]) + (self[e35] * other[e31]) + (self[scalar] * other[e15]),
                (self[e23] * other[e35]) + (self[e45] * other[e25]) + (self[e15] * other[e12]) + (self[scalar] * other[e25]),
                (self[e31] * other[e15]) + (self[e45] * other[e35]) + (self[e25] * other[e23]) + (self[scalar] * other[e35]),
                self[e43] * other[e12] * -1.0,
            ]) - (other.group0().zxy() * self.group2().yzx()).extend_to_4(self[e41] * other[e23])
                - (other.group1().zxy() * self.group1().yzx()).extend_to_4(self[e42] * other[e31]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e42] * other[e35]) + (self[e45] * other[e23]),
                (self[e43] * other[e15]) + (self[e45] * other[e31]),
                (self[e41] * other[e25]) + (self[e45] * other[e12]),
                -(self[e23] * other[e15]) - (self[e31] * other[e25]) - (self[e12] * other[e35]) - (self[e25] * other[e31]) - (self[e35] * other[e12]),
            ]) - (self.group0().zxy() * other.group1().yzx()).extend_to_4(self[e15] * other[e23]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       76      115        0
    //    simd3        0       11        0
    //    simd4       40       32        0
    // Totals...
    // yes simd      116      158        0
    //  no simd      236      276        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e43] * other[e31],
                self[e42] * other[scalar],
                self[e43] * other[scalar],
                -(self[e42] * other[e25]) - (self[e43] * other[e35]) - (self[e23] * other[e23]) - (self[e31] * other[e31]) - (self[e12] * other[e12]),
            ]) + (other.group0().wzxw() * self.group0().xxy().extend_to_4(self[scalar]))
                - (self.group0().yzx() * other.group0().zxy()).extend_to_4(self[e41] * other[e15]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[scalar] * other[e23]) - (self[e42] * other[e35]) - (self[e31] * other[e12]),
                (self[scalar] * other[e31]) - (self[e43] * other[e15]) - (self[e12] * other[e23]),
                (self[scalar] * other[e12]) - (self[e41] * other[e25]) - (self[e23] * other[e31]),
                0.0,
            ]) + (self.group1().zyzw() * other.group0().ywww())
                + (other.group1().ywwy() * self.group0().zyz().extend_to_4(self[e42]))
                + (other.group1().wzxx() * self.group0().xxy().extend_to_4(self[e41]))
                + (self.group1().xxy() * other.group0().wzx()).extend_to_4(self[e43] * other[e35]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * other[e3215])
                    + (self[e12] * other[e25])
                    + (self[e45] * other[e15])
                    + (self[e15] * other[scalar])
                    + (self[e35] * other[e31])
                    + (self[scalar] * other[e15]),
                (self[e23] * other[e35])
                    + (self[e31] * other[e3215])
                    + (self[e45] * other[e25])
                    + (self[e15] * other[e12])
                    + (self[e25] * other[scalar])
                    + (self[scalar] * other[e25]),
                (self[e31] * other[e15])
                    + (self[e12] * other[e3215])
                    + (self[e45] * other[e35])
                    + (self[e25] * other[e23])
                    + (self[e35] * other[scalar])
                    + (self[scalar] * other[e35]),
                self[e43] * other[e12] * -1.0,
            ]) - (other.group0().zxyy() * self.group2().yzx().extend_to_4(self[e42]))
                - (self.group1().yzx() * other.group1().zxy()).extend_to_4(self[e41] * other[e23]),
            // e4235, e4315, e4125, e3215
            (other.group1().zxyw() * self.group0().yzx().extend_to_4(self[e45]))
                + Simd32x3::from(0.0).extend_to_4(-(self[e12] * other[e35]) - (self[e15] * other[e23]) - (self[e25] * other[e31]) - (self[e35] * other[e12]))
                + (self.group1().www() * other.group0().truncate_to_3()).extend_to_4(self[scalar] * other[e3215])
                - (other.group1().ywwy() * self.group0().zyz().extend_to_4(self[e31]))
                - (other.group1().wzxx() * self.group0().xxy().extend_to_4(self[e23])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       43       82        0
    //    simd3        1       11        0
    //    simd4       33       27        0
    // Totals...
    // yes simd       77      120        0
    //  no simd      178      223        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (self.group0().yzx() * other.group0().zxy()) - (self.group0().zxy() * other.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([self[e41] * other[e5], self[e42] * other[e5], self[e43] * other[e5], -(self[e31] * other[e2]) - (self[e12] * other[e3])])
                - (self.group1().wwwx() * other.group0().xyzx()),
            // e235, e315, e125, e4
            Simd32x4::from([self[e25] * other[e3] * -1.0, self[e35] * other[e1] * -1.0, self[e15] * other[e2] * -1.0, self[e43] * other[e3]])
                + (other.group0().yzxy() * self.group2().zxy().extend_to_4(self[e42]))
                + (other.group0().wwwx() * self.group1().truncate_to_3().extend_to_4(self[e41])),
            // e1, e2, e3, e5
            Simd32x4::from([
                self[scalar] * other[e1],
                self[scalar] * other[e2],
                self[scalar] * other[e3],
                -(self[e25] * other[e2]) - (self[e35] * other[e3]),
            ]) + (Simd32x4::from(other[e5]) * self.group0().extend_to_4(self[e45]))
                + (other.group0().yzxw() * self.group1().zxy().extend_to_4(self[scalar]))
                - (other.group0().zxyx() * self.group1().yzx().extend_to_4(self[e15])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       37       63        0
    //    simd3        0       11        0
    //    simd4       17       13        0
    // Totals...
    // yes simd       54       87        0
    //  no simd      105      148        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[e12345]) * self.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other[e12345]) * self.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e235, e315, e125, e12345
            Simd32x4::from(other[e12345]) * self.group2(),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       82      134        0
    //    simd3        0       25        0
    //    simd4       43       22        0
    // Totals...
    // yes simd      125      181        0
    //  no simd      254      297        0
    fn sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e43] * other[e425]) + (self[e12] * other[e431]) + (self[scalar] * other[e423]),
                (self[e41] * other[e435]) + (self[e23] * other[e412]) + (self[scalar] * other[e431]),
                (self[e42] * other[e415]) + (self[e31] * other[e423]) + (self[scalar] * other[e412]),
                -(self[e23] * other[e415])
                    - (self[e31] * other[e425])
                    - (self[e12] * other[e435])
                    - (self[e45] * other[e321])
                    - (self[e25] * other[e431])
                    - (self[e35] * other[e412]),
            ]) - (self.group0().xyx() * other.group1().wwy()).extend_to_4(self[e41] * other[e235])
                - (self.group0().yzz() * other.group1().zxw()).extend_to_4(self[e42] * other[e315])
                - (other.group0().xxy() * self.group1().wzx()).extend_to_4(self[e43] * other[e125])
                - (other.group0().zyz() * self.group1().yww()).extend_to_4(self[e15] * other[e423]),
            // e415, e425, e435, e321
            (Simd32x4::from(self[scalar]) * other.group1())
                + (self.group2().zxyy() * other.group0().yzx().extend_to_4(other[e431]))
                + (self.group0().zxy() * other.group2().yzx()).extend_to_4(self[e15] * other[e423])
                + (self.group1().zxy() * other.group1().yzx()).extend_to_4(self[e35] * other[e412])
                - (self.group0().yzx() * other.group2().zxy()).extend_to_4(self[e41] * other[e235])
                - (other.group0().zxy() * self.group2().yzx()).extend_to_4(self[e42] * other[e315])
                - (self.group1().yzx() * other.group1().zxy()).extend_to_4(self[e43] * other[e125]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * other[e315]) + (self[e45] * other[e235]) + (self[e15] * other[e321]) + (self[e35] * other[e425]) + (self[scalar] * other[e235]),
                (self[e23] * other[e125]) + (self[e45] * other[e315]) + (self[e15] * other[e435]) + (self[e25] * other[e321]) + (self[scalar] * other[e315]),
                (self[e31] * other[e235]) + (self[e45] * other[e125]) + (self[e25] * other[e415]) + (self[e35] * other[e321]) + (self[scalar] * other[e125]),
                -(self[e12] * other[e125]) - (self[e15] * other[e415]) - (self[e25] * other[e425]) - (self[e35] * other[e435]),
            ]) - (self.group1().yzxx() * other.group2().zxy().extend_to_4(other[e235]))
                - (self.group2().yzx() * other.group1().zxy()).extend_to_4(self[e31] * other[e315]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e43] * other[e315]) + (self[e23] * other[e321]) + (self[e25] * other[e412]),
                (self[e41] * other[e125]) + (self[e31] * other[e321]) + (self[e35] * other[e423]),
                (self[e42] * other[e235]) + (self[e12] * other[e321]) + (self[e15] * other[e431]),
                -(self[e23] * other[e423]) - (self[e31] * other[e431]) - (self[e12] * other[e412]),
            ]) - (other.group1().xyzz() * self.group1().www().extend_to_4(self[e43]))
                - (self.group0().yzx() * other.group2().zxy()).extend_to_4(self[e41] * other[e415])
                - (other.group0().yzx() * self.group2().zxy()).extend_to_4(self[e42] * other[e425]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       85      140        0
    //    simd3        0       23        0
    //    simd4       45       25        0
    // Totals...
    // yes simd      130      188        0
    //  no simd      265      309        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e43] * other[e425]) + (self[e12] * other[e431]) + (self[scalar] * other[e423]),
                (self[e42] * other[e12345]) + (self[e23] * other[e412]) + (self[scalar] * other[e431]),
                (self[e43] * other[e12345]) + (self[e31] * other[e423]) + (self[scalar] * other[e412]),
                -(self[e23] * other[e415])
                    - (self[e31] * other[e425])
                    - (self[e12] * other[e435])
                    - (self[e45] * other[e321])
                    - (self[e25] * other[e431])
                    - (self[e35] * other[e412]),
            ]) + (Simd32x4::from([other[e12345], other[e435], other[e415], other[e12345]]) * self.group0().xxy().extend_to_4(self[scalar]))
                - (self.group0().xyx() * other.group1().wwy()).extend_to_4(self[e41] * other[e235])
                - (self.group0().yzz() * other.group1().zxw()).extend_to_4(self[e42] * other[e315])
                - (other.group0().xxy() * self.group1().wzx()).extend_to_4(self[e43] * other[e125])
                - (other.group0().zyz() * self.group1().yww()).extend_to_4(self[e15] * other[e423]),
            // e415, e425, e435, e321
            Simd32x4::from([self[scalar] * other[e415], self[scalar] * other[e425], self[scalar] * other[e435], self[e45] * other[e12345] * -1.0])
                + (Simd32x4::from([other[e425], other[e12345], other[e12345], other[e321]]) * self.group1().zyz().extend_to_4(self[scalar]))
                + (Simd32x4::from([other[e12345], other[e435], other[e415], self[e35]]) * self.group1().xxy().extend_to_4(other[e412]))
                + (self.group2().zxyy() * other.group0().yzx().extend_to_4(other[e431]))
                + (self.group0().zxy() * other.group2().yzx()).extend_to_4(self[e15] * other[e423])
                - (other.group2().zxyx() * self.group0().yzx().extend_to_4(self[e41]))
                - (other.group0().zxy() * self.group2().yzx()).extend_to_4(self[e42] * other[e315])
                - (self.group1().yzx() * other.group1().zxy()).extend_to_4(self[e43] * other[e125]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * other[e315])
                    + (self[e45] * other[e235])
                    + (self[e15] * other[e321])
                    + (self[e15] * other[e12345])
                    + (self[e35] * other[e425])
                    + (self[scalar] * other[e235]),
                (self[e23] * other[e125])
                    + (self[e45] * other[e315])
                    + (self[e15] * other[e435])
                    + (self[e25] * other[e321])
                    + (self[e25] * other[e12345])
                    + (self[scalar] * other[e315]),
                (self[e31] * other[e235])
                    + (self[e45] * other[e125])
                    + (self[e25] * other[e415])
                    + (self[e35] * other[e321])
                    + (self[e35] * other[e12345])
                    + (self[scalar] * other[e125]),
                -(self[e12] * other[e125]) - (self[e15] * other[e415]) - (self[e25] * other[e425]) - (self[e35] * other[e435]),
            ]) - (self.group1().yzxx() * other.group2().zxyx())
                - (self.group2().yzx() * other.group1().zxy()).extend_to_4(self[e31] * other[e315]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e43] * other[e315]) + (self[e23] * other[e321]) + (self[e25] * other[e412]),
                (self[e41] * other[e125]) + (self[e31] * other[e321]) + (self[e35] * other[e423]),
                (self[e42] * other[e235]) + (self[e12] * other[e321]) + (self[e15] * other[e431]),
                -(self[e23] * other[e423]) - (self[e31] * other[e431]) - (self[e12] * other[e412]),
            ]) - (other.group1().xyzz() * self.group1().www().extend_to_4(self[e43]))
                - (self.group0().yzx() * other.group2().zxy()).extend_to_4(self[e41] * other[e415])
                - (other.group0().yzx() * self.group2().zxy()).extend_to_4(self[e42] * other[e425]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       82      127        0
    //    simd3        0       18        0
    //    simd4       43       29        0
    // Totals...
    // yes simd      125      174        0
    //  no simd      254      297        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e43] * other[e31]) + (self[e12] * other[e42]) + (self[scalar] * other[e41]),
                (self[e42] * other[e45]) + (self[e23] * other[e43]) + (self[scalar] * other[e42]),
                (self[e43] * other[e45]) + (self[e31] * other[e41]) + (self[scalar] * other[e43]),
                -(self[e23] * other[e23]) - (self[e31] * other[e31]) - (self[e12] * other[e12]) - (self[e15] * other[e41]) - (self[e25] * other[e42]) - (self[e35] * other[e43]),
            ]) + (other.group1().wzxw() * self.group0().xxy().extend_to_4(self[e45]))
                - (self.group0().yzx() * other.group1().zxy()).extend_to_4(self[e41] * other[e15])
                - (other.group0().xxy() * self.group1().wzx()).extend_to_4(self[e42] * other[e25])
                - (other.group0().zyz() * self.group1().yww()).extend_to_4(self[e43] * other[e35]),
            // e23, e31, e12, e45
            (Simd32x4::from(self[scalar]) * other.group1())
                + (self.group0().zxy() * other.group2().yzx()).extend_to_4(self[e41] * other[e15])
                + (other.group0().yzx() * self.group2().zxy()).extend_to_4(self[e42] * other[e25])
                + (self.group1().zxy() * other.group1().yzx()).extend_to_4(self[e43] * other[e35])
                - (self.group2().yzxy() * other.group0().zxy().extend_to_4(other[e42]))
                - (self.group0().yzx() * other.group2().zxy()).extend_to_4(self[e15] * other[e41])
                - (self.group1().yzx() * other.group1().zxy()).extend_to_4(self[e35] * other[e43]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e12] * other[e25]) + (self[e45] * other[e15]) + (self[e35] * other[e31]) + (self[scalar] * other[e15]),
                (self[e23] * other[e35]) + (self[e45] * other[e25]) + (self[e15] * other[e12]) + (self[scalar] * other[e25]),
                (self[e31] * other[e15]) + (self[e45] * other[e35]) + (self[e25] * other[e23]) + (self[scalar] * other[e35]),
                -(self[e23] * other[e41]) - (self[e31] * other[e42]) - (self[e12] * other[e43]),
            ]) - (other.group1().zxwz() * self.group2().yzz().extend_to_4(self[e43]))
                - (other.group1().wwyy() * self.group2().xyx().extend_to_4(self[e42]))
                - (other.group2().zxy() * self.group1().yzx()).extend_to_4(self[e41] * other[e23]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e42] * other[e35]) + (self[e23] * other[e45]) + (self[e45] * other[e23]) + (self[e35] * other[e42]),
                (self[e43] * other[e15]) + (self[e31] * other[e45]) + (self[e45] * other[e31]) + (self[e15] * other[e43]),
                (self[e41] * other[e25]) + (self[e12] * other[e45]) + (self[e45] * other[e12]) + (self[e25] * other[e41]),
                -(self[e12] * other[e35]) - (self[e15] * other[e23]) - (self[e25] * other[e31]) - (self[e35] * other[e12]),
            ]) - (self.group0().zxy() * other.group2().yzx()).extend_to_4(self[e23] * other[e15])
                - (other.group0().zxy() * self.group2().yzx()).extend_to_4(self[e31] * other[e25]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       93      144        0
    //    simd3        0       20        0
    //    simd4       54       37        0
    // Totals...
    // yes simd      147      201        0
    //  no simd      309      352        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e43] * other[e31]) + (self[e43] * other[e4315]) + (self[e23] * other[e1234]) + (self[e12] * other[e42]) + (self[scalar] * other[e41]),
                (self[e41] * other[e4125]) + (self[e42] * other[e45]) + (self[e23] * other[e43]) + (self[e31] * other[e1234]) + (self[scalar] * other[e42]),
                (self[e42] * other[e4235]) + (self[e43] * other[e45]) + (self[e31] * other[e41]) + (self[e12] * other[e1234]) + (self[scalar] * other[e43]),
                -(self[e23] * other[e23]) - (self[e31] * other[e31]) - (self[e12] * other[e12]) - (self[e25] * other[e42]) - (self[e35] * other[e43]),
            ]) + (other.group1().wzxw() * self.group0().xxy().extend_to_4(self[e45]))
                - (self.group0().yzx() * other.group1().zxy()).extend_to_4(self[e41] * other[e15])
                - (self.group0().yzx() * other.group3().zxy()).extend_to_4(self[e42] * other[e25])
                - (other.group0().xxy() * self.group1().wzx()).extend_to_4(self[e43] * other[e35])
                - (other.group0().zyz() * self.group1().yww()).extend_to_4(self[e15] * other[e41]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e45] * other[e4235]) + (self[e15] * other[e1234]) + (self[scalar] * other[e23]),
                (self[e45] * other[e4315]) + (self[e25] * other[e1234]) + (self[scalar] * other[e31]),
                (self[e45] * other[e4125]) + (self[e35] * other[e1234]) + (self[scalar] * other[e12]),
                -(self[e23] * other[e4235]) - (self[e31] * other[e4315]) - (self[e12] * other[e4125]),
            ]) + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e25]]) * self.group0().zyz().extend_to_4(self[e42]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e15]]) * self.group0().xxy().extend_to_4(self[e41]))
                + (other.group1().yzxw() * self.group1().zxy().extend_to_4(self[scalar]))
                + (other.group0().yzx() * self.group2().zxy()).extend_to_4(self[e43] * other[e35])
                - (self.group2().yzxy() * other.group0().zxy().extend_to_4(other[e42]))
                - (self.group0().yzx() * other.group2().zxy()).extend_to_4(self[e15] * other[e41])
                - (self.group1().yzx() * other.group1().zxy()).extend_to_4(self[e35] * other[e43]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e12] * other[e25]) + (self[e45] * other[e15]) + (self[e25] * other[e4125]) + (self[e35] * other[e31]) + (self[scalar] * other[e15]),
                (self[e31] * other[e3215]) + (self[e45] * other[e25]) + (self[e15] * other[e12]) + (self[e35] * other[e4235]) + (self[scalar] * other[e25]),
                (self[e12] * other[e3215]) + (self[e45] * other[e35]) + (self[e15] * other[e4315]) + (self[e25] * other[e23]) + (self[scalar] * other[e35]),
                -(self[e43] * other[e12])
                    - (self[e43] * other[e4125])
                    - (self[e23] * other[e41])
                    - (self[e31] * other[e42])
                    - (self[e12] * other[e43])
                    - (self[e45] * other[e1234]),
            ]) + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e1234]]) * self.group1().xxy().extend_to_4(self[scalar]))
                - (Simd32x4::from([other[e45], other[e4125], other[e31], other[e4235]]) * self.group2().xxx().extend_to_4(self[e41]))
                - (Simd32x4::from([other[e4315], other[e23], other[e45], other[e4315]]) * self.group2().zzz().extend_to_4(self[e42]))
                - (other.group1().zw().extend_to_4(other[e4235], other[e31]) * self.group2().yyy().extend_to_4(self[e42]))
                - (self.group1().yzx() * other.group2().zxy()).extend_to_4(self[e41] * other[e23]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e15] * other[e1234]) + (self[scalar] * other[e4235]),
                (self[e25] * other[e1234]) + (self[scalar] * other[e4315]),
                (self[e35] * other[e1234]) + (self[scalar] * other[e4125]),
                -(self[e25] * other[e31]) - (self[e35] * other[e12]),
            ]) + (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e4315]]) * self.group1().xxy().extend_to_4(self[e25]))
                + (Simd32x4::from([other[e4315], other[e45], other[e45], other[e4125]]) * self.group1().zyz().extend_to_4(self[e35]))
                + (self.group0().yzx() * other.group2().zxy()).extend_to_4(self[e45] * other[e3215])
                + (other.group0().yzx() * self.group2().zxy()).extend_to_4(self[e15] * other[e4235])
                + (self.group1().www() * other.group1().truncate_to_3()).extend_to_4(self[scalar] * other[e3215])
                - (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e25]]) * self.group0().zyz().extend_to_4(self[e31]))
                - (Simd32x4::from([other[e3215], other[e35], other[e15], other[e15]]) * self.group0().xxy().extend_to_4(self[e23]))
                - (other.group0().zxy() * self.group2().yzx()).extend_to_4(self[e12] * other[e35])
                - (self.group1().yzx() * other.group3().zxy()).extend_to_4(self[e15] * other[e23]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       78        0
    //    simd3        1       15        0
    //    simd4       29       24        0
    // Totals...
    // yes simd       78      117        0
    //  no simd      167      219        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(other[e12345]) * self.group0().extend_to_4(self[scalar]),
            // e415, e425, e435, e321
            ((Simd32x3::from(other[e5]) * self.group0()) + (Simd32x3::from(other[e12345]) * self.group1().truncate_to_3())).extend_to_4(self[e45] * other[e12345] * -1.0),
            // e235, e315, e125, e5
            (Simd32x4::from(other[e5]) * self.group1()) + (self.group2() * other.group0().yy().extend_to_4(other[e12345], other[e5])),
            // e1, e2, e3, e4
            other.group0().xx().extend_to_4(other[e5], 0.0) * Simd32x3::from(1.0).extend_to_4(0.0) * self.group0().extend_to_4(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       57       91        0
    //    simd3        0       12        0
    //    simd4       34       27        0
    // Totals...
    // yes simd       91      130        0
    //  no simd      193      235        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([other[e45], other[e45], other[e45], 1.0])
                * self
                    .group0()
                    .extend_to_4((self[e45] * other[e45]) - (self[e41] * other[e15]) - (self[e42] * other[e25]) - (self[e43] * other[e35])),
            // e23, e31, e12, e45
            Simd32x4::from([
                self[e42] * other[e35] * -1.0,
                self[e43] * other[e15] * -1.0,
                self[e41] * other[e25] * -1.0,
                (self[e42] * other[e25]) + (self[e43] * other[e35]) + (self[scalar] * other[e45]),
            ]) + (other.group0().yzxx() * self.group0().zxy().extend_to_4(self[e41])),
            // e15, e25, e35, e1234
            (Simd32x3::from(self[e45]) * other.group0().truncate_to_3()).extend_to_4(0.0)
                + (Simd32x3::from(self[scalar]) * other.group0().truncate_to_3()).extend_to_4(0.0)
                + (self.group1().zxy() * other.group0().yzx()).extend_to_4(0.0)
                - (Simd32x3::from(other[e45]) * self.group2().truncate_to_3()).extend_to_4(0.0)
                - (self.group1().yzx() * other.group0().zxy()).extend_to_4(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e42] * other[e35]) + (self[e23] * other[e45]),
                (self[e43] * other[e15]) + (self[e31] * other[e45]),
                (self[e41] * other[e25]) + (self[e12] * other[e45]),
                -(self[e31] * other[e25]) - (self[e12] * other[e35]),
            ]) - (other.group0().yzxx() * self.group0().zxy().extend_to_4(self[e23])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       63       99        0
    //    simd3        0       12        0
    //    simd4       44       35        0
    // Totals...
    // yes simd      107      146        0
    //  no simd      239      275        0
    fn sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e43] * other[e4315],
                self[e42] * other[e45],
                self[e43] * other[e45],
                -(self[e42] * other[e25]) - (self[e43] * other[e35]),
            ]) + (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e45]]) * self.group0().xxy().extend_to_4(self[e45]))
                - (self.group0().yzx() * other.group1().zxy()).extend_to_4(self[e41] * other[e15]),
            // e23, e31, e12, e45
            (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e25]]) * self.group0().zyz().extend_to_4(self[e42]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e15]]) * self.group0().xxy().extend_to_4(self[e41]))
                + Simd32x3::from(0.0).extend_to_4((self[scalar] * other[e45]) - (self[e31] * other[e4315]) - (self[e12] * other[e4125]))
                + (self.group1().www() * other.group1().truncate_to_3()).extend_to_4(self[e43] * other[e35])
                - (self.group0().yzx() * other.group0().zxy()).extend_to_4(self[e23] * other[e4235]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e12] * other[e25]) + (self[e45] * other[e15]) + (self[e25] * other[e4125]) + (self[scalar] * other[e15]),
                (self[e23] * other[e35]) + (self[e31] * other[e3215]) + (self[e45] * other[e25]) + (self[e35] * other[e4235]) + (self[scalar] * other[e25]),
                (self[e31] * other[e15]) + (self[e12] * other[e3215]) + (self[e45] * other[e35]) + (self[e15] * other[e4315]) + (self[scalar] * other[e35]),
                0.0,
            ]) - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e4315]]) * self.group2().xxy().extend_to_4(self[e42]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e4125]]) * self.group2().zyz().extend_to_4(self[e43]))
                - (self.group1().yzx() * other.group0().zxy()).extend_to_4(self[e41] * other[e4235]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e4235]]) * self.group1().xxy().extend_to_4(self[e15]))
                + (Simd32x4::from([other[e4315], other[e45], other[e45], other[e4315]]) * self.group1().zyz().extend_to_4(self[e25]))
                + (self.group2().wwwz() * other.group1().xyzz())
                + Simd32x3::from(0.0).extend_to_4(self[scalar] * other[e3215])
                + (self.group0().yzx() * other.group0().zxy()).extend_to_4(self[e45] * other[e3215])
                - (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e25]]) * self.group0().zyz().extend_to_4(self[e31]))
                - (Simd32x4::from([other[e3215], other[e35], other[e15], other[e15]]) * self.group0().xxy().extend_to_4(self[e23]))
                - (self.group1().yzxz() * other.group1().zxy().extend_to_4(other[e35])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       70      122        0
    //    simd3        0       19        0
    //    simd4       35       19        0
    // Totals...
    // yes simd      105      160        0
    //  no simd      210      255        0
    fn sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e43] * other[e425],
                self[e41] * other[e435],
                self[e42] * other[e415],
                -(self[e42] * other[e315]) - (self[e43] * other[e125]) - (self[e23] * other[e415]) - (self[e31] * other[e425]) - (self[e12] * other[e435]),
            ]) - (self.group0().yzx() * other.group0().zxy()).extend_to_4(self[e41] * other[e235]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e43] * other[e315]) + (self[e12] * other[e425]) + (self[scalar] * other[e415]),
                (self[e41] * other[e125]) + (self[e23] * other[e435]) + (self[scalar] * other[e425]),
                (self[e42] * other[e235]) + (self[e31] * other[e415]) + (self[scalar] * other[e435]),
                self[e43] * other[e125] * -1.0,
            ]) - (self.group0().yzx() * other.group1().zxy()).extend_to_4(self[e41] * other[e235])
                - (other.group0().zxy() * self.group1().yzx()).extend_to_4(self[e42] * other[e315]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * other[e315]) + (self[e45] * other[e235]) + (self[e35] * other[e425]) + (self[scalar] * other[e235]),
                (self[e23] * other[e125]) + (self[e45] * other[e315]) + (self[e15] * other[e435]) + (self[scalar] * other[e315]),
                (self[e31] * other[e235]) + (self[e45] * other[e125]) + (self[e25] * other[e415]) + (self[scalar] * other[e125]),
                -(self[e23] * other[e235]) - (self[e31] * other[e315]) - (self[e12] * other[e125]) - (self[e35] * other[e435]),
            ]) - (self.group2().yzxx() * other.group0().zxy().extend_to_4(other[e415]))
                - (other.group1().zxy() * self.group1().yzx()).extend_to_4(self[e25] * other[e425]),
            // e1, e2, e3, e4
            Simd32x4::from([self[e43] * other[e315], self[e41] * other[e125], self[e42] * other[e235], self[e43] * other[e435] * -1.0])
                - (other.group0() * self.group1().www()).extend_to_4(self[e42] * other[e425])
                - (self.group0().yzx() * other.group1().zxy()).extend_to_4(self[e41] * other[e415]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       80      129        0
    //    simd3        0       17        0
    //    simd4       38       24        0
    // Totals...
    // yes simd      118      170        0
    //  no simd      232      276        0
    fn sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e43] * other[e425],
                self[e42] * other[e12345],
                self[e43] * other[e12345],
                -(self[e42] * other[e315]) - (self[e43] * other[e125]) - (self[e23] * other[e415]) - (self[e31] * other[e425]) - (self[e12] * other[e435]),
            ]) + (other.group0().wzxw() * self.group0().xxy().extend_to_4(self[scalar]))
                - (self.group0().yzx() * other.group0().zxy()).extend_to_4(self[e41] * other[e235]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e41] * other[e5]) + (self[e43] * other[e315]) + (self[e23] * other[e12345]) + (self[e12] * other[e425]) + (self[scalar] * other[e415]),
                (self[e41] * other[e125]) + (self[e42] * other[e5]) + (self[e23] * other[e435]) + (self[e31] * other[e12345]) + (self[scalar] * other[e425]),
                (self[e42] * other[e235]) + (self[e43] * other[e5]) + (self[e31] * other[e415]) + (self[e12] * other[e12345]) + (self[scalar] * other[e435]),
                -(self[e43] * other[e125]) - (self[e45] * other[e12345]),
            ]) - (other.group1().zxyx() * self.group0().yzx().extend_to_4(self[e41]))
                - (self.group1().yzx() * other.group0().zxy()).extend_to_4(self[e42] * other[e315]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e45] * other[e235]) + (self[e15] * other[e12345]) + (self[e35] * other[e425]) + (self[scalar] * other[e235]),
                (self[e45] * other[e315]) + (self[e15] * other[e435]) + (self[e25] * other[e12345]) + (self[scalar] * other[e315]),
                (self[e45] * other[e125]) + (self[e25] * other[e415]) + (self[e35] * other[e12345]) + (self[scalar] * other[e125]),
                -(self[e12] * other[e125]) - (self[e15] * other[e415]) - (self[e25] * other[e425]) - (self[e35] * other[e435]),
            ]) + (self.group1().xxyw() * other.group1().wzxw())
                + (other.group1().ywww() * self.group1().zyz().extend_to_4(self[scalar]))
                - (self.group1().yzxx() * other.group1().zxyx())
                - (self.group2().yzx() * other.group0().zxy()).extend_to_4(self[e31] * other[e315]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e41] * other[e5]) + (self[e43] * other[e315]),
                (self[e41] * other[e125]) + (self[e42] * other[e5]),
                (self[e42] * other[e235]) + (self[e43] * other[e5]),
                self[e43] * other[e435] * -1.0,
            ]) - (other.group0().xyzy() * self.group1().www().extend_to_4(self[e42]))
                - (self.group0().yzx() * other.group1().zxy()).extend_to_4(self[e41] * other[e415]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for AntiCircleRotor {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      104      174        0
    //    simd2       20       20        0
    //    simd3       80      117        0
    //    simd4       64       38        0
    // Totals...
    // yes simd      268      349        0
    //  no simd      640      717        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([self[e45] * other[e45], self[e45] * other[e321] * -1.0]) + (Simd32x2::from(self[scalar]) * other.group0())
                - (Simd32x2::from(self[e41]) * Simd32x2::from([other[e15], other[e235]]))
                - (Simd32x2::from(self[e42]) * Simd32x2::from([other[e25], other[e315]]))
                - (Simd32x2::from(self[e43]) * Simd32x2::from([other[e35], other[e125]]))
                - (Simd32x2::from(self[e23]) * Simd32x2::from([other[e23], other[e415]]))
                - (Simd32x2::from(self[e31]) * Simd32x2::from([other[e31], other[e425]]))
                - (Simd32x2::from(self[e12]) * Simd32x2::from([other[e12], other[e435]]))
                - (Simd32x2::from(self[e15]) * Simd32x2::from([other[e41], other[e423]]))
                - (Simd32x2::from(self[e25]) * Simd32x2::from([other[e42], other[e431]]))
                - (Simd32x2::from(self[e35]) * Simd32x2::from([other[e43], other[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e12] * other[e2]) + (self[scalar] * other[e1]),
                (self[e31] * other[e321]) + (self[scalar] * other[e2]),
                (self[e12] * other[e321]) + (self[scalar] * other[e3]),
                -(self[e12] * other[e412]) - (self[e45] * other[e4]),
            ]) + (Simd32x4::from([other[e5], other[e125], other[e235], other[e1]]) * self.group0().xxy().extend_to_4(self[e41]))
                + (Simd32x4::from([other[e321], other[e3], other[e1], other[e4]]) * self.group1().xxy().extend_to_4(self[scalar]))
                + (Simd32x4::from([other[e315], other[e5], other[e5], other[e2]]) * self.group0().zyz().extend_to_4(self[e42]))
                + (other.group7().zxy() * self.group2().yzx()).extend_to_4(self[e43] * other[e3])
                - (self.group0().yzx() * other.group8().zxy()).extend_to_4(self[e41] * other[e415])
                - (other.group7().yzx() * self.group2().zxy()).extend_to_4(self[e42] * other[e425])
                - (self.group1().yzx() * other.group1().zxy()).extend_to_4(self[e43] * other[e435])
                - (self.group1().www() * other.group6().truncate_to_3()).extend_to_4(self[e23] * other[e423])
                - (other.group1().www() * self.group2().truncate_to_3()).extend_to_4(self[e31] * other[e431]),
            // e5
            (self[e45] * other[e5]) + (self[scalar] * other[e5])
                - (self[e23] * other[e235])
                - (self[e31] * other[e315])
                - (self[e12] * other[e125])
                - (self[e15] * other[e1])
                - (self[e15] * other[e415])
                - (self[e25] * other[e2])
                - (self[e25] * other[e425])
                - (self[e35] * other[e3])
                - (self[e35] * other[e435]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e25] * other[e4125]) + (self[scalar] * other[e15]),
                (self[e35] * other[e4235]) + (self[scalar] * other[e25]),
                (self[e15] * other[e4315]) + (self[scalar] * other[e35]),
                -(self[e31] * other[e4315]) - (self[e12] * other[e4125]),
            ]) + (Simd32x4::from(other[scalar]) * self.group2().truncate_to_3().extend_to_4(self[e45]))
                + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e35]]) * self.group1().zyz().extend_to_4(self[e43]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e25]]) * self.group1().xxy().extend_to_4(self[e42]))
                + (other.group3() * self.group1().www().extend_to_4(self[scalar]))
                + (other.group5().yzx() * self.group2().zxy()).extend_to_4(self[e41] * other[e15])
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], self[e35]]) * self.group2().xxy().extend_to_4(other[e43]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e4235]]) * self.group2().zyz().extend_to_4(self[e23]))
                - (self.group2().yzxx() * other.group5().zxy().extend_to_4(other[e41]))
                - (self.group1().yzx() * other.group3().zxy()).extend_to_4(self[e25] * other[e42]),
            // e41, e42, e43
            (Simd32x3::from(other[scalar]) * self.group0())
                + (Simd32x3::from(other[e1234]) * self.group1().truncate_to_3())
                + (Simd32x3::from([self[e12], self[e23], self[scalar]]) * other.group4().yzz())
                + (Simd32x3::from([self[scalar], self[scalar], self[e31]]) * other.group4().xyx())
                + (Simd32x3::from([other[e45], other[e12], other[e23]]) * self.group0().xxy())
                + (Simd32x3::from([other[e31], other[e4125], other[e4235]]) * self.group0().zxy())
                + (Simd32x3::from([other[e4315], other[e45], other[e45]]) * self.group0().zyz())
                - (self.group0().yzx() * other.group5().zxy())
                - (self.group0().yzx() * other.group9().zxy())
                - (other.group4().xxy() * self.group1().wzx())
                - (other.group4().zyz() * self.group1().yww()),
            // e23, e31, e12
            (Simd32x3::from(self[e45]) * other.group9().truncate_to_3())
                + (Simd32x3::from(other[scalar]) * self.group1().truncate_to_3())
                + (Simd32x3::from(other[e1234]) * self.group2().truncate_to_3())
                + (Simd32x3::from([self[e12], self[e23], self[scalar]]) * other.group5().yzz())
                + (Simd32x3::from([self[scalar], self[scalar], self[e31]]) * other.group5().xyx())
                + (Simd32x3::from([other[e25], other[e3215], other[e3215]]) * self.group0().zyz())
                + (Simd32x3::from([other[e3215], other[e35], other[e15]]) * self.group0().xxy())
                + (other.group4().yzx() * self.group2().zxy())
                - (self.group0().yzx() * other.group3().zxy())
                - (other.group4().zxy() * self.group2().yzx())
                - (other.group5().zxy() * self.group1().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e12] * other[e425]) + (self[e15] * other[e4]) + (self[scalar] * other[e415]),
                (self[e23] * other[e435]) + (self[e25] * other[e4]) + (self[scalar] * other[e425]),
                (self[e31] * other[e415]) + (self[e35] * other[e4]) + (self[scalar] * other[e435]),
                -(self[e23] * other[e1]) - (self[e31] * other[e2]) - (self[e12] * other[e3]),
            ]) + (Simd32x4::from([other[e5], other[e125], other[e235], self[e25]]) * self.group0().xxy().extend_to_4(other[e431]))
                + (Simd32x4::from([other[e315], other[e5], other[e5], self[e35]]) * self.group0().zyz().extend_to_4(other[e412]))
                + (other.group0().yy().extend_to_4(other[e12345], other[e423]) * self.group1().truncate_to_3().extend_to_4(self[e15]))
                + (other.group7().yzx() * self.group2().zxy()).extend_to_4(self[scalar] * other[e321])
                - (self.group0().yzx() * other.group8().zxy()).extend_to_4(self[e45] * other[e12345])
                - (other.group7().zxy() * self.group2().yzx()).extend_to_4(self[e41] * other[e235])
                - (self.group1().yzx() * other.group6().zxy()).extend_to_4(self[e42] * other[e315])
                - (self.group1().www() * other.group1().truncate_to_3()).extend_to_4(self[e43] * other[e125]),
            // e423, e431, e412
            (Simd32x3::from(other[e12345]) * self.group0())
                + (Simd32x3::from(other[e4]) * self.group1().truncate_to_3())
                + (Simd32x3::from([self[e12], self[e23], self[scalar]]) * other.group7().yzz())
                + (Simd32x3::from([self[scalar], self[scalar], self[e31]]) * other.group7().xyx())
                + (Simd32x3::from([other[e3], other[e435], other[e2]]) * self.group0().yxx())
                + (Simd32x3::from([other[e425], other[e1], other[e415]]) * self.group0().zzy())
                - (Simd32x3::from(self[e41]) * Simd32x3::from([other[e321], other[e3], other[e425]]))
                - (Simd32x3::from(self[e42]) * Simd32x3::from([other[e435], other[e321], other[e1]]))
                - (Simd32x3::from(self[e43]) * Simd32x3::from([other[e2], other[e415], other[e321]]))
                - (other.group7().xxy() * self.group1().wzx())
                - (other.group7().zyz() * self.group1().yww()),
            // e235, e315, e125
            (Simd32x3::from(other[e12345]) * self.group2().truncate_to_3())
                + (Simd32x3::from(other[e5]) * self.group1().truncate_to_3())
                + (Simd32x3::from([self[e12], self[e23], self[scalar]]) * other.group8().yzz())
                + (Simd32x3::from([self[scalar], self[scalar], self[e45]]) * other.group8())
                + (Simd32x3::from([other[e2], other[e435], other[e415]]) * self.group2().zxy())
                + (Simd32x3::from([other[e321], other[e3], other[e1]]) * self.group2().xxy())
                + (other.group8().xyx() * self.group1().wwy())
                + (self.group2().zyz() * other.group6().yww())
                - (other.group8().zxy() * self.group1().yzx())
                - (self.group2().yzx() * other.group1().zxy())
                - (self.group2().yzx() * other.group6().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e15] * other[e1234]) + (self[scalar] * other[e4235]),
                (self[e25] * other[e1234]) + (self[scalar] * other[e4315]),
                (self[e35] * other[e1234]) + (self[scalar] * other[e4125]),
                -(self[e31] * other[e25]) - (self[e12] * other[e35]),
            ]) + (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e4125]]) * self.group1().xxy().extend_to_4(self[e35]))
                + (Simd32x4::from([other[e4315], other[e45], other[e45], other[e3215]]) * self.group1().zyz().extend_to_4(self[scalar]))
                + (other.group5() * self.group1().www()).extend_to_4(self[e25] * other[e4315])
                + (self.group0().yzx() * other.group3().zxy()).extend_to_4(self[e45] * other[e3215])
                + (other.group4().yzx() * self.group2().zxy()).extend_to_4(self[e15] * other[e4235])
                - (Simd32x4::from([other[e25], other[e3215], other[e3215], self[e25]]) * self.group0().zyz().extend_to_4(other[e31]))
                - (Simd32x4::from([other[e3215], other[e35], other[e15], self[e15]]) * self.group0().xxy().extend_to_4(other[e23]))
                - (self.group1().yzxx() * other.group9().zxy().extend_to_4(other[e15]))
                - (self.group2().yzxz() * other.group4().zxy().extend_to_4(other[e12])),
            // e1234
            (self[scalar] * other[e1234])
                - (self[e41] * other[e23])
                - (self[e41] * other[e4235])
                - (self[e42] * other[e31])
                - (self[e42] * other[e4315])
                - (self[e43] * other[e12])
                - (self[e43] * other[e4125])
                - (self[e23] * other[e41])
                - (self[e31] * other[e42])
                - (self[e12] * other[e43])
                - (self[e45] * other[e1234]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       59       96        0
    //    simd3        1       12        0
    //    simd4       29       22        0
    // Totals...
    // yes simd       89      130        0
    //  no simd      178      220        0
    fn sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (self.group0().zxy() * other.group0().yzx()) - (self.group0().yzx() * other.group0().zxy()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e41] * other[e3215]) + (self[e45] * other[e4235]),
                (self[e42] * other[e3215]) + (self[e45] * other[e4315]),
                (self[e43] * other[e3215]) + (self[e45] * other[e4125]),
                -(self[e23] * other[e4235]) - (self[e31] * other[e4315]) - (self[e12] * other[e4125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e25] * other[e4125]),
                (self[e31] * other[e3215]) + (self[e35] * other[e4235]),
                (self[e12] * other[e3215]) + (self[e15] * other[e4315]),
                -(self[e42] * other[e4315]) - (self[e43] * other[e4125]),
            ]) - (other.group0().yzxx() * self.group2().zxy().extend_to_4(self[e41])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(self[e41] * other[e3215]) - (self[e31] * other[e4125]),
                -(self[e42] * other[e3215]) - (self[e12] * other[e4235]),
                -(self[e43] * other[e3215]) - (self[e23] * other[e4315]),
                (self[e25] * other[e4315]) + (self[e35] * other[e4125]) + (self[scalar] * other[e3215]),
            ]) + (self.group1().zxyw() * other.group0().yzxw())
                + (self.group2().wwwx() * other.group0().xyzx()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       46       81        0
    //    simd3        2       13        0
    //    simd4       35       28        0
    // Totals...
    // yes simd       83      122        0
    //  no simd      192      232        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other[e4]) * self.group1().truncate_to_3()) + (self.group0().yzx() * other.group0().zxy()) - (self.group0().zxy() * other.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e41] * other[e5]) + (self[e15] * other[e4]),
                (self[e42] * other[e5]) + (self[e25] * other[e4]),
                (self[e43] * other[e5]) + (self[e35] * other[e4]),
                -(self[e31] * other[e2]) - (self[e12] * other[e3]),
            ]) - (self.group1().wwwx() * other.group0().xyzx()),
            // e235, e315, e125, e4
            (Simd32x4::from([other[e5], other[e5], other[e5], other[e1]]) * self.group1().truncate_to_3().extend_to_4(self[e41]))
                + (other.group0().yzxy() * self.group2().zxy().extend_to_4(self[e42]))
                + Simd32x3::from(0.0).extend_to_4((self[e43] * other[e3]) + (self[scalar] * other[e4]))
                - (other.group0().zxyw() * self.group2().yzx().extend_to_4(self[e45])),
            // e1, e2, e3, e5
            Simd32x4::from([self[scalar] * other[e1], self[scalar] * other[e2], self[scalar] * other[e3], self[e35] * other[e3] * -1.0])
                + (Simd32x4::from(other[e5]) * self.group0().extend_to_4(self[e45]))
                + (self.group1().zxy() * other.group0().yzx()).extend_to_4(self[scalar] * other[e5])
                - (self.group2().xyzy() * other.group0().wwwy())
                - (other.group0().zxyx() * self.group1().yzx().extend_to_4(self[e15])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       37       58        0
    //    simd3        0       11        0
    //    simd4       17       13        0
    // Totals...
    // yes simd       54       82        0
    //  no simd      105      143        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[scalar]) * self.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other[scalar]) * self.group1(),
            // e15, e25, e35, scalar
            Simd32x4::from(other[scalar]) * self.group2(),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       59       97        0
    //    simd3        2       14        0
    //    simd4       31       23        0
    // Totals...
    // yes simd       92      134        0
    //  no simd      189      231        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other[e1234]) * self.group1().truncate_to_3()) + (self.group0().zxy() * other.group0().yzx()) - (self.group0().yzx() * other.group0().zxy()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e41] * other[e3215]) + (self[e45] * other[e4235]) + (self[e15] * other[e1234]),
                (self[e42] * other[e3215]) + (self[e45] * other[e4315]) + (self[e25] * other[e1234]),
                (self[e43] * other[e3215]) + (self[e45] * other[e4125]) + (self[e35] * other[e1234]),
                -(self[e23] * other[e4235]) - (self[e31] * other[e4315]) - (self[e12] * other[e4125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                self[e25] * other[e4125],
                self[e35] * other[e4235],
                self[e15] * other[e4315],
                -(self[e42] * other[e4315]) - (self[e43] * other[e4125]) - (self[e45] * other[e1234]),
            ]) + (other.group0().www() * self.group1().truncate_to_3()).extend_to_4(self[scalar] * other[e1234])
                - (other.group0().yzxx() * self.group2().zxy().extend_to_4(self[e41])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(self[e41] * other[e3215]) - (self[e31] * other[e4125]),
                -(self[e42] * other[e3215]) - (self[e12] * other[e4235]),
                -(self[e43] * other[e3215]) - (self[e23] * other[e4315]),
                (self[e35] * other[e4125]) + (self[scalar] * other[e3215]),
            ]) + (Simd32x4::from([other[e1234], other[e1234], other[e1234], other[e4235]]) * self.group2().xyzx())
                + (self.group1().zxyw() * other.group0().yzxw())
                + (self.group2().wwwy() * other.group0().xyzy()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       96      151        0
    //    simd3        0       24        0
    //    simd4       56       35        0
    // Totals...
    // yes simd      152      210        0
    //  no simd      320      363        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e42] * other[e3]) + (self[e43] * other[e425]) + (self[e23] * other[e4]) + (self[e12] * other[e431]) + (self[scalar] * other[e423]),
                (self[e42] * other[e12345]) + (self[e43] * other[e1]) + (self[e23] * other[e412]) + (self[e31] * other[e4]) + (self[scalar] * other[e431]),
                (self[e42] * other[e415]) + (self[e43] * other[e12345]) + (self[e31] * other[e423]) + (self[e12] * other[e4]) + (self[scalar] * other[e412]),
                -(self[e12] * other[e435]) - (self[e45] * other[e321]) - (self[e15] * other[e423]) - (self[e25] * other[e431]) - (self[e35] * other[e412]),
            ]) + (Simd32x4::from([other[e12345], other[e435], other[e2], other[e12345]]) * self.group0().xxx().extend_to_4(self[scalar]))
                - (Simd32x4::from(self[e41]) * Simd32x4::from([other[e321], other[e3], other[e425], other[e235]]))
                - (Simd32x4::from(self[e42]) * other.group1().zw().extend_to_4(other[e1], other[e315]))
                - (Simd32x4::from(self[e43]) * Simd32x4::from([other[e2], other[e415], other[e321], other[e125]]))
                - (self.group1().yzxx() * other.group0().zxy().extend_to_4(other[e415]))
                - (self.group1().wwwy() * other.group0().truncate_to_3().extend_to_4(other[e425])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e15] * other[e4]) + (self[e35] * other[e431]) + (self[scalar] * other[e415]),
                (self[e15] * other[e412]) + (self[e25] * other[e4]) + (self[scalar] * other[e425]),
                (self[e25] * other[e423]) + (self[e35] * other[e4]) + (self[scalar] * other[e435]),
                -(self[e31] * other[e2]) - (self[e12] * other[e3]) - (self[e45] * other[e12345]),
            ]) + (Simd32x4::from([other[e12345], other[e435], other[e415], other[e412]]) * self.group1().xxy().extend_to_4(self[e35]))
                + (Simd32x4::from([other[e425], other[e12345], other[e12345], other[e321]]) * self.group1().zyz().extend_to_4(self[scalar]))
                + (self.group0().xxy() * other.group2().wzx()).extend_to_4(self[e15] * other[e423])
                + (self.group0().zyz() * other.group2().yww()).extend_to_4(self[e25] * other[e431])
                - (other.group2().zxyx() * self.group0().yzx().extend_to_4(self[e41]))
                - (self.group1().yzx() * other.group1().zxy()).extend_to_4(self[e42] * other[e315])
                - (self.group1().www() * other.group3().truncate_to_3()).extend_to_4(self[e43] * other[e125])
                - (self.group2().yzx() * other.group0().zxy()).extend_to_4(self[e23] * other[e1]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e45] * other[e235])
                    + (self[e15] * other[e12345])
                    + (self[e15] * other[e321])
                    + (self[e35] * other[e425])
                    + (self[e35] * other[e2])
                    + (self[scalar] * other[e235]),
                (self[e45] * other[e315])
                    + (self[e15] * other[e435])
                    + (self[e15] * other[e3])
                    + (self[e25] * other[e12345])
                    + (self[e25] * other[e321])
                    + (self[scalar] * other[e315]),
                (self[e45] * other[e125])
                    + (self[e25] * other[e415])
                    + (self[e25] * other[e1])
                    + (self[e35] * other[e12345])
                    + (self[e35] * other[e321])
                    + (self[scalar] * other[e125]),
                -(self[e15] * other[e415]) - (self[e15] * other[e1]) - (self[e25] * other[e425]) - (self[e25] * other[e2]) - (self[e35] * other[e435]) - (self[e35] * other[e3]),
            ]) + (self.group1().xxyw() * other.group2().wzxw())
                + (other.group2().ywww() * self.group1().zyz().extend_to_4(self[scalar]))
                - (self.group1().yzxx() * other.group2().zxyx())
                - (self.group2().yzx() * other.group1().zxy()).extend_to_4(self[e31] * other[e315])
                - (self.group2().yzx() * other.group3().zxy()).extend_to_4(self[e12] * other[e125]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e25] * other[e412]) + (self[scalar] * other[e1]),
                (self[e35] * other[e423]) + (self[scalar] * other[e2]),
                (self[e15] * other[e431]) + (self[scalar] * other[e3]),
                -(self[e12] * other[e412]) - (self[e45] * other[e4]),
            ]) + (Simd32x4::from([other[e321], other[e3], other[e1], other[e3]]) * self.group1().xxy().extend_to_4(self[e43]))
                + (Simd32x4::from([other[e2], other[e321], other[e321], other[e4]]) * self.group1().zyz().extend_to_4(self[scalar]))
                + (self.group0().xxy() * other.group2().wzx()).extend_to_4(self[e41] * other[e1])
                + (self.group0().zyz() * other.group2().yww()).extend_to_4(self[e42] * other[e2])
                - (Simd32x4::from([other[e431], other[e4], other[e4], other[e431]]) * self.group2().zyz().extend_to_4(self[e31]))
                - (Simd32x4::from([other[e4], other[e412], other[e423], other[e423]]) * self.group2().xxy().extend_to_4(self[e23]))
                - (other.group1().xyzz() * self.group1().www().extend_to_4(self[e43]))
                - (self.group0().yzx() * other.group2().zxy()).extend_to_4(self[e41] * other[e415])
                - (self.group1().yzx() * other.group3().zxy()).extend_to_4(self[e42] * other[e425]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       96      143        0
    //    simd3        0       16        0
    //    simd4       56       43        0
    // Totals...
    // yes simd      152      202        0
    //  no simd      320      363        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e43] * other[e31]) + (self[e43] * other[e4315]) + (self[e23] * other[e1234]) + (self[e12] * other[e42]) + (self[scalar] * other[e41]),
                (self[e42] * other[scalar]) + (self[e42] * other[e45]) + (self[e23] * other[e43]) + (self[e31] * other[e1234]) + (self[scalar] * other[e42]),
                (self[e43] * other[scalar]) + (self[e43] * other[e45]) + (self[e31] * other[e41]) + (self[e12] * other[e1234]) + (self[scalar] * other[e43]),
                -(self[e31] * other[e31]) - (self[e12] * other[e12]) - (self[e15] * other[e41]) - (self[e25] * other[e42]) - (self[e35] * other[e43]),
            ]) + (Simd32x4::from([other[scalar], other[e12], other[e23], other[e45]]) * self.group0().xxy().extend_to_4(self[e45]))
                + (Simd32x4::from([other[e45], other[e4125], other[e4235], other[scalar]]) * self.group0().xxy().extend_to_4(self[scalar]))
                - (self.group1().wwwx() * other.group0().truncate_to_3().extend_to_4(other[e23]))
                - (self.group0().yzx() * other.group1().zxy()).extend_to_4(self[e41] * other[e15])
                - (self.group0().yzx() * other.group3().zxy()).extend_to_4(self[e42] * other[e25])
                - (self.group1().yzx() * other.group0().zxy()).extend_to_4(self[e43] * other[e35]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e15] * other[e1234]) + (self[e35] * other[e42]) + (self[scalar] * other[e23]),
                (self[e15] * other[e43]) + (self[e25] * other[e1234]) + (self[scalar] * other[e31]),
                (self[e25] * other[e41]) + (self[e35] * other[e1234]) + (self[scalar] * other[e12]),
                -(self[e15] * other[e41]) - (self[e25] * other[e42]) - (self[e35] * other[e43]),
            ]) + (Simd32x4::from([other[scalar], other[e12], other[e23], other[e35]]) * self.group1().xxy().extend_to_4(self[e43]))
                + (Simd32x4::from([other[e31], other[scalar], other[scalar], other[scalar]]) * self.group1().zyzw())
                + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e25]]) * self.group0().zyz().extend_to_4(self[e42]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e15]]) * self.group0().xxy().extend_to_4(self[e41]))
                + (self.group1().www() * other.group3().truncate_to_3()).extend_to_4(self[scalar] * other[e45])
                - (self.group1().yzxy() * other.group1().zxy().extend_to_4(other[e4315]))
                - (self.group0().yzx() * other.group2().zxy()).extend_to_4(self[e23] * other[e4235])
                - (self.group2().yzx() * other.group0().zxy()).extend_to_4(self[e12] * other[e4125]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e12] * other[e25])
                    + (self[e45] * other[e15])
                    + (self[e15] * other[scalar])
                    + (self[e25] * other[e4125])
                    + (self[e35] * other[e31])
                    + (self[scalar] * other[e15]),
                (self[e31] * other[e3215])
                    + (self[e45] * other[e25])
                    + (self[e15] * other[e12])
                    + (self[e25] * other[scalar])
                    + (self[e35] * other[e4235])
                    + (self[scalar] * other[e25]),
                (self[e12] * other[e3215])
                    + (self[e45] * other[e35])
                    + (self[e15] * other[e4315])
                    + (self[e25] * other[e23])
                    + (self[e35] * other[scalar])
                    + (self[scalar] * other[e35]),
                -(self[e43] * other[e12])
                    - (self[e43] * other[e4125])
                    - (self[e23] * other[e41])
                    - (self[e31] * other[e42])
                    - (self[e12] * other[e43])
                    - (self[e45] * other[e1234]),
            ]) + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e1234]]) * self.group1().xxy().extend_to_4(self[scalar]))
                - (Simd32x4::from([other[e45], other[e4125], other[e31], other[e4235]]) * self.group2().xxx().extend_to_4(self[e41]))
                - (Simd32x4::from([other[e4315], other[e23], other[e45], other[e4315]]) * self.group2().zzz().extend_to_4(self[e42]))
                - (other.group1().zw().extend_to_4(other[e4235], other[e31]) * self.group2().yyy().extend_to_4(self[e42]))
                - (self.group1().yzx() * other.group2().zxy()).extend_to_4(self[e41] * other[e23]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e35] * other[e42]) + (self[scalar] * other[e4235]),
                (self[e25] * other[e1234]) + (self[scalar] * other[e4315]),
                (self[e35] * other[e1234]) + (self[scalar] * other[e4125]),
                -(self[e25] * other[e31]) - (self[e35] * other[e12]),
            ]) + (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e4235]]) * self.group1().xxy().extend_to_4(self[e15]))
                + (Simd32x4::from([other[e1234], other[e43], other[e41], other[e3215]]) * self.group2().xxyw())
                + (Simd32x4::from([other[e4315], other[e45], other[e45], other[e4315]]) * self.group1().zyz().extend_to_4(self[e25]))
                + (self.group0().yzx() * other.group2().zxy()).extend_to_4(self[e45] * other[e3215])
                + (self.group1().www() * other.group1().truncate_to_3()).extend_to_4(self[e35] * other[e4125])
                - (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e25]]) * self.group0().zyz().extend_to_4(self[e31]))
                - (Simd32x4::from([other[e3215], other[e35], other[e15], other[e15]]) * self.group0().xxy().extend_to_4(self[e23]))
                - (self.group1().yzxz() * other.group3().zxy().extend_to_4(other[e35]))
                - (self.group2().yzxx() * other.group0().zxy().extend_to_4(other[e23])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl std::ops::Div<sandwich> for AntiDipoleInversion {
    type Output = sandwich_partial<AntiDipoleInversion>;
    fn div(self, _rhs: sandwich) -> Self::Output {
        sandwich_partial(self)
    }
}
impl Sandwich<AntiCircleRotor> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       73      136        0
    //    simd3        0       26        0
    //    simd4       75       52        0
    // Totals...
    // yes simd      148      214        0
    //  no simd      373      422        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e41] * self[e321])
                    + (other[e42] * self[e435])
                    + (other[e42] * self[e3])
                    + (other[e23] * self[e4])
                    + (other[e31] * self[e412])
                    + (other[e45] * self[e423])
                    + (other[scalar] * self[e423]),
                (other[e42] * self[e321])
                    + (other[e43] * self[e415])
                    + (other[e43] * self[e1])
                    + (other[e31] * self[e4])
                    + (other[e12] * self[e423])
                    + (other[e45] * self[e431])
                    + (other[scalar] * self[e431]),
                (other[e41] * self[e425])
                    + (other[e41] * self[e2])
                    + (other[e43] * self[e321])
                    + (other[e23] * self[e431])
                    + (other[e12] * self[e4])
                    + (other[e45] * self[e412])
                    + (other[scalar] * self[e412]),
                -(other[e23] * self[e415])
                    - (other[e31] * self[e425])
                    - (other[e12] * self[e435])
                    - (other[e45] * self[e321])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412]),
            ]) - (other.group0().zxy() * self.group1().yzx()).extend_to_4(other[e41] * self[e235])
                - (other.group0().zxy() * self.group3().yzx()).extend_to_4(other[e42] * self[e315])
                - (self.group0().yzx() * other.group1().zxy()).extend_to_4(other[e43] * self[e125]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e15] * self[e4]) + (other[scalar] * self[e415]),
                (other[e25] * self[e4]) + (other[scalar] * self[e425]),
                (other[e35] * self[e4]) + (other[scalar] * self[e435]),
                -(other[e31] * self[e2]) - (other[e12] * self[e3]),
            ]) + (self.group1().zxyw() * other.group1().yzx().extend_to_4(other[scalar]))
                + (self.group2().zx().extend_to_4(self[e5], self[e315]) * other.group0().yzz().extend_to_4(other[e42]))
                + (self.group3().ww().extend_to_4(self[e315], self[e235]) * other.group0().xyx().extend_to_4(other[e41]))
                + (self.group0().zxy() * other.group2().yzx()).extend_to_4(other[e43] * self[e125])
                - (other.group1().wwwx() * self.group3().xyzx())
                - (other.group2().zxyy() * self.group0().yzx().extend_to_4(self[e431]))
                - (other.group0().zxy() * self.group2().yzx()).extend_to_4(other[e15] * self[e423])
                - (other.group1().zxy() * self.group1().yzx()).extend_to_4(other[e35] * self[e412]),
            // e235, e315, e125, e5
            Simd32x4::from([
                other[scalar] * self[e235],
                other[scalar] * self[e315],
                other[scalar] * self[e125],
                -(other[e25] * self[e425]) - (other[e35] * self[e435]),
            ]) + (Simd32x4::from([self[e435], self[e3], self[e425], self[e3]]) * other.group2().yxxz())
                + (Simd32x4::from([self[e2], self[e415], self[e1], self[e5]]) * other.group2().zzyw())
                + (self.group2().zx().extend_to_4(self[e5], self[e2]) * other.group1().yzz().extend_to_4(other[e25]))
                + (self.group3().ww().extend_to_4(self[e315], self[e1]) * other.group1().xyx().extend_to_4(other[e15]))
                - (Simd32x4::from([self[e425], self[e1], self[e321], self[e415]]) * other.group2().zzzx())
                - (Simd32x4::from([self[e3], self[e321], self[e415], self[e5]]) * other.group2().yyy().extend_to_4(other[e45]))
                - (other.group1().zxyx() * self.group2().yzxx())
                - (other.group1().wwwy() * self.group2().xyzy())
                - (self.group1().wz().extend_to_4(self[e2], self[e125]) * other.group2().xxx().extend_to_4(other[e12])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e23] * self[e321]) + (other[e31] * self[e3]) + (other[e15] * self[e4]) + (other[scalar] * self[e1]),
                (other[e31] * self[e321]) + (other[e12] * self[e1]) + (other[e25] * self[e4]) + (other[scalar] * self[e2]),
                (other[e23] * self[e2]) + (other[e12] * self[e321]) + (other[e35] * self[e4]) + (other[scalar] * self[e3]),
                -(other[e43] * self[e3]) - (other[e23] * self[e423]) - (other[e31] * self[e431]) - (other[e12] * self[e412]),
            ]) + (self.group2().yzxw() * other.group0().zxy().extend_to_4(other[e45]))
                + (self.group0().zxy() * other.group2().yzx()).extend_to_4(other[scalar] * self[e4])
                - (self.group1().xyzz() * other.group1().www().extend_to_4(other[e43]))
                - (self.group3().yzxy() * other.group1().zxy().extend_to_4(other[e42]))
                - (self.group2().zx().extend_to_4(self[e5], self[e1]) * other.group0().yzz().extend_to_4(other[e41]))
                - (self.group3().ww().extend_to_4(self[e315], self[e415]) * other.group0().xyx().extend_to_4(other[e41]))
                - (self.group0().yzx() * other.group2().zxy()).extend_to_4(other[e42] * self[e425]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       65      118        0
    //    simd3        0       24        0
    //    simd4       92       72        0
    // Totals...
    // yes simd      157      214        0
    //  no simd      433      478        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(other[e415] * self[e4]) - (other[e425] * self[e412]) - (other[e4] * self[e415]) - (other[e4] * self[e1]) - (other[e3] * self[e431]),
                -(other[e425] * self[e4]) - (other[e435] * self[e423]) - (other[e4] * self[e425]) - (other[e4] * self[e2]) - (other[e1] * self[e412]),
                -(other[e415] * self[e431]) - (other[e435] * self[e4]) - (other[e4] * self[e435]) - (other[e4] * self[e3]) - (other[e2] * self[e423]),
                (other[e415] * self[e415]) + (other[e425] * self[e425]) + (other[e435] * self[e435]) + (other[e1] * self[e1]) + (other[e2] * self[e2]) + (other[e3] * self[e3]),
            ]) + (Simd32x4::from([other[e321], other[e3], other[e425], self[e125]]) * self.group0().xxx().extend_to_4(other[e412]))
                + (Simd32x4::from([other[e2], other[e415], other[e321], other[e315]]) * self.group0().zzz().extend_to_4(self[e431]))
                + (other.group1().zw().extend_to_4(other[e1], other[e235]) * self.group0().yyy().extend_to_4(self[e423]))
                + (other.group0().zxy() * self.group1().yzx()).extend_to_4(other[e423] * self[e235])
                + (other.group0().zxy() * self.group3().yzx()).extend_to_4(other[e431] * self[e315])
                + (self.group2().www() * other.group3().truncate_to_3()).extend_to_4(other[e125] * self[e412])
                - (self.group1().wwyw() * other.group0().xyx().extend_to_4(other[e321]))
                - (self.group1().zx().extend_to_4(self[e2], self[e5]) * other.group0().yzx().extend_to_4(other[e4]))
                - (self.group3().zx().extend_to_4(self[e321], self[e4]) * other.group0().yzz().extend_to_4(other[e5])),
            // e23, e31, e12, e45
            (other.group3().zxyw() * self.group3().yzx().extend_to_4(self[e4]))
                + (self.group2().yzxx() * other.group0().zxy().extend_to_4(other[e423]))
                + (self.group0().yzx() * other.group2().zxy()).extend_to_4(other[e431] * self[e315])
                + (other.group1().zxy() * self.group1().yzx()).extend_to_4(other[e412] * self[e125])
                - (Simd32x4::from([other[e315], other[e5], other[e5], self[e1]]) * self.group0().zyz().extend_to_4(other[e415]))
                - (Simd32x4::from([other[e5], other[e125], other[e235], other[e125]]) * self.group0().xxy().extend_to_4(self[e412]))
                - (other.group2() * self.group2().www().extend_to_4(self[e5]))
                - (other.group1().yzxy() * self.group1().zxy().extend_to_4(self[e2]))
                - (other.group1().wwwz() * self.group3().xyzz())
                - (other.group3().xyxy() * self.group1().ww().extend_to_4(self[e2], self[e425]))
                - (other.group3().yzzz() * self.group3().zx().extend_to_4(self[e321], self[e435]))
                - (self.group2().zx().extend_to_4(self[e5], other[e315]) * other.group0().yzz().extend_to_4(self[e431]))
                - (self.group3().ww().extend_to_4(self[e315], other[e235]) * other.group0().xyx().extend_to_4(self[e423]))
                - (other.group2().www() * self.group2().truncate_to_3()).extend_to_4(other[e1] * self[e415]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(other[e125] * self[e2]) - (other[e1] * self[e5]) - (other[e2] * self[e125]) - (other[e5] * self[e415]),
                -(other[e125] * self[e415]) - (other[e2] * self[e5]) - (other[e3] * self[e235]) - (other[e5] * self[e425]),
                -(other[e315] * self[e1]) - (other[e1] * self[e315]) - (other[e3] * self[e5]) - (other[e5] * self[e435]),
                (other[e415] * self[e423]) + (other[e425] * self[e431]) + (other[e435] * self[e412]) + (other[e321] * self[e4]),
            ]) + (Simd32x4::from([self[e425], self[e1], self[e321], self[e2]]) * other.group2().zzz().extend_to_4(other[e431]))
                + (Simd32x4::from([self[e3], self[e321], self[e415], self[e425]]) * other.group2().yyy().extend_to_4(other[e431]))
                + (self.group3().xyzz() * other.group3().www().extend_to_4(other[e412]))
                + (self.group1().wz().extend_to_4(self[e2], self[e1]) * other.group2().xxx().extend_to_4(other[e423]))
                + (other.group1().zxy() * self.group2().yzx()).extend_to_4(other[e423] * self[e415])
                + (other.group3().zxy() * self.group2().yzx()).extend_to_4(other[e412] * self[e435])
                - (Simd32x4::from([self[e435], self[e3], self[e425], self[e321]]) * other.group2().yxxw())
                - (self.group2().zx().extend_to_4(self[e5], other[e2]) * other.group1().yzz().extend_to_4(self[e431]))
                - (self.group3().ww().extend_to_4(self[e315], other[e1]) * other.group1().xyx().extend_to_4(self[e423]))
                - (other.group1().www() * self.group2().truncate_to_3()).extend_to_4(other[e3] * self[e412]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(other[e4] * self[e235]) - (other[e3] * self[e425]),
                -(other[e4] * self[e315]) - (other[e1] * self[e435]),
                -(other[e4] * self[e125]) - (other[e2] * self[e415]),
                (other[e3] * self[e125]) + (other[e5] * self[e321]),
            ]) + (Simd32x4::from([other[e315], other[e5], other[e5], self[e125]]) * self.group0().zyz().extend_to_4(other[e435]))
                + (Simd32x4::from([other[e5], other[e125], other[e235], self[e315]]) * self.group0().xxy().extend_to_4(other[e425]))
                + (other.group3().yzxy() * self.group1().zxy().extend_to_4(self[e315]))
                + (self.group1().xyzz() * other.group1().www().extend_to_4(other[e125]))
                + (self.group2().yzxx() * other.group0().zxy().extend_to_4(other[e415]))
                + (self.group2().wwwx() * other.group2().truncate_to_3().extend_to_4(other[e1]))
                + (self.group1().ww().extend_to_4(self[e2], self[e415]) * other.group1().xyx().extend_to_4(other[e235]))
                + (self.group3().zx().extend_to_4(self[e321], self[e425]) * other.group1().yzz().extend_to_4(other[e315]))
                - (self.group3().yzxz() * other.group1().zxy().extend_to_4(other[e125]))
                - (self.group2().zx().extend_to_4(self[e5], self[e1]) * other.group0().yzz().extend_to_4(other[e235]))
                - (self.group3().ww().extend_to_4(self[e315], self[e5]) * other.group0().xyx().extend_to_4(other[e321]))
                - (self.group0().yzx() * other.group2().zxy()).extend_to_4(other[e315] * self[e2]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       75        0
    //    simd3        1       20        0
    //    simd4       51       38        0
    // Totals...
    // yes simd       84      133        0
    //  no simd      239      287        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            other.group0().yy().extend_to_4(other[scalar], other[e3215]) * self.group0().extend_to_4(self[e4]),
            // e415, e425, e435, e321
            (Simd32x4::from(other[e3215]) * self.group0().extend_to_4(self[e4])) + (Simd32x4::from(other[scalar]) * self.group1()),
            // e235, e315, e125, e5
            Simd32x4::from([self[e235] * other[scalar], self[e315] * other[scalar], self[e125] * other[scalar], 0.0])
                + (other.group0().xx().extend_to_4(other[e3215], other[scalar]) * self.group1().truncate_to_3().extend_to_4(self[e5]))
                - (Simd32x4::from(other[e3215]) * self.group3().truncate_to_3().extend_to_4(self[e321])),
            // e1, e2, e3, e4
            ((Simd32x3::from(other[e3215]) * self.group0()) + (Simd32x3::from(other[scalar]) * self.group3().truncate_to_3())).extend_to_4(self[e4] * other[scalar]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       37       74        0
    //    simd3        5       20        0
    //    simd4       55       45        0
    // Totals...
    // yes simd       97      139        0
    //  no simd      272      314        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([other[e321], other[e321], other[e321], 1.0])
                * self
                    .group0()
                    .extend_to_4((self[e423] * other[e235]) + (self[e431] * other[e315]) + (self[e412] * other[e125]) - (self[e321] * other[e321])),
            // e23, e31, e12, e45
            Simd32x4::from([self[e431] * other[e125], self[e412] * other[e235], self[e423] * other[e315], 0.0])
                - (other.group0().xyzy() * self.group2().www().extend_to_4(self[e431]))
                - (other.group0().yzxx() * self.group0().zxy().extend_to_4(self[e423]))
                - (other.group0().wwwz() * self.group3().truncate_to_3().extend_to_4(self[e412])),
            // e15, e25, e35, e1234
            ((Simd32x3::from(self[e321]) * other.group0().truncate_to_3()) + (self.group1().yzx() * other.group0().zxy()) + (self.group3().zxy() * other.group0().yzx())
                - (Simd32x3::from(other[e321]) * self.group2().truncate_to_3())
                - (self.group1().zxy() * other.group0().yzx())
                - (self.group3().yzx() * other.group0().zxy()))
            .extend_to_4(self[e4] * other[e321]),
            // e4235, e4315, e4125, e3215
            (self.group1().xyzy() * other.group0().wwwy())
                + (other.group0().xyzz() * self.group2().www().extend_to_4(self[e435]))
                + (other.group0().yzxx() * self.group0().zxy().extend_to_4(self[e415]))
                + Simd32x3::from(0.0).extend_to_4(-(self[e2] * other[e315]) - (self[e3] * other[e125]) - (self[e5] * other[e321]))
                - (other.group0().zxyx() * self.group0().yzx().extend_to_4(self[e1])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56      101        0
    //    simd3        0       20        0
    //    simd4       70       53        0
    // Totals...
    // yes simd      126      174        0
    //  no simd      336      373        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([other[e321], other[e3], other[e1], other[e235]]) * self.group0().xxy().extend_to_4(self[e423]))
                + (Simd32x4::from([other[e2], other[e321], other[e321], other[e315]]) * self.group0().zyz().extend_to_4(self[e431]))
                + Simd32x3::from(0.0).extend_to_4((self[e1] * other[e1]) + (self[e2] * other[e2]) + (self[e3] * other[e3]) - (self[e4] * other[e5]))
                + (self.group2().www() * other.group1().truncate_to_3()).extend_to_4(self[e412] * other[e125])
                - (self.group0().yzx() * other.group1().zxy()).extend_to_4(self[e321] * other[e321]),
            // e23, e31, e12, e45
            Simd32x4::from([self[e2] * other[e3], self[e3] * other[e1], self[e1] * other[e2], 0.0])
                + (self.group0().yzx() * other.group0().zxy()).extend_to_4(self[e4] * other[e5])
                - (Simd32x4::from([other[e315], other[e5], other[e5], other[e315]]) * self.group0().zyz().extend_to_4(self[e431]))
                - (Simd32x4::from([other[e321], other[e3], other[e1], other[e2]]) * self.group3().xxy().extend_to_4(self[e425]))
                - (Simd32x4::from([other[e2], other[e321], other[e321], other[e3]]) * self.group3().zyz().extend_to_4(self[e435]))
                - (Simd32x4::from([other[e5], other[e125], other[e235], other[e235]]) * self.group0().xxy().extend_to_4(self[e423]))
                - (self.group1().www() * other.group1().truncate_to_3()).extend_to_4(self[e412] * other[e125])
                - (self.group2().www() * other.group0().truncate_to_3()).extend_to_4(self[e415] * other[e1]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e321] * other[e235]) + (self[e315] * other[e3]) + (self[e1] * other[e5]) + (self[e3] * other[e315])
                    - (self[e125] * other[e2])
                    - (self[e2] * other[e125])
                    - (self[e5] * other[e1]),
                (self[e321] * other[e315]) + (self[e125] * other[e1]) + (self[e1] * other[e125]) + (self[e2] * other[e5])
                    - (self[e315] * other[e321])
                    - (self[e3] * other[e235])
                    - (self[e5] * other[e2]),
                (self[e321] * other[e125]) + (self[e235] * other[e2]) + (self[e2] * other[e235]) + (self[e3] * other[e5])
                    - (self[e125] * other[e321])
                    - (self[e1] * other[e315])
                    - (self[e5] * other[e3]),
                0.0,
            ]) + (other.group0().zxyw() * self.group1().yzx().extend_to_4(self[e4]))
                - (Simd32x4::from([other[e315], other[e5], other[e5], other[e2]]) * self.group1().zyz().extend_to_4(self[e431]))
                - (Simd32x4::from([other[e321], other[e3], other[e1], other[e3]]) * self.group2().xxy().extend_to_4(self[e412]))
                - (Simd32x4::from([other[e5], other[e125], other[e235], other[e1]]) * self.group1().xxy().extend_to_4(self[e423])),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([other[e315], other[e5], other[e5], other[e315]]) * self.group0().zyz().extend_to_4(self[e425]))
                + (Simd32x4::from([other[e321], other[e3], other[e1], other[e125]]) * self.group1().xxyz())
                + (Simd32x4::from([other[e2], other[e321], other[e321], other[e5]]) * self.group1().zyzw())
                + (Simd32x4::from([other[e5], other[e125], other[e235], other[e235]]) * self.group0().xxy().extend_to_4(self[e415]))
                + (self.group2().wwwx() * other.group0().truncate_to_3().extend_to_4(other[e1]))
                + Simd32x3::from(0.0).extend_to_4((self[e315] * other[e2]) + (self[e125] * other[e3]) - (self[e3] * other[e125]) - (self[e5] * other[e321]))
                - (other.group0().zxyx() * self.group0().yzx().extend_to_4(self[e1]))
                - (self.group1().yzx() * other.group1().zxy()).extend_to_4(self[e2] * other[e315]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       58      119        0
    //    simd3        0       23        0
    //    simd4       60       40        0
    // Totals...
    // yes simd      118      182        0
    //  no simd      298      348        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e412] * other[e31]) + (self[e4] * other[e23]),
                (self[e423] * other[e12]) + (self[e4] * other[e31]),
                (self[e431] * other[e23]) + (self[e4] * other[e12]),
                -(self[e431] * other[e25]) - (self[e412] * other[e35]) - (self[e415] * other[e23]) - (self[e425] * other[e31]) - (self[e435] * other[e12]),
            ]) - (self.group0().yzx() * other.group0().zxy()).extend_to_4(self[e423] * other[e15]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e412] * other[e25]) + (self[e435] * other[e31]) + (self[e4] * other[e15]),
                (self[e423] * other[e35]) + (self[e415] * other[e12]) + (self[e4] * other[e25]),
                (self[e431] * other[e15]) + (self[e425] * other[e23]) + (self[e4] * other[e35]),
                -(self[e412] * other[e35]) - (self[e1] * other[e23]) - (self[e2] * other[e31]) - (self[e3] * other[e12]),
            ]) - (self.group0().yzx() * other.group1().zxy()).extend_to_4(self[e423] * other[e15])
                - (other.group0().zxy() * self.group1().yzx()).extend_to_4(self[e431] * other[e25]),
            // e235, e315, e125, e5
            Simd32x4::from([
                self[e2] * other[e35],
                self[e415] * other[e35],
                self[e1] * other[e25],
                -(self[e425] * other[e25]) - (self[e435] * other[e35]),
            ]) + (Simd32x4::from([self[e435], self[e3], self[e425], self[e3]]) * other.group1().yxx().extend_to_4(other[e35]))
                + (self.group2().zx().extend_to_4(self[e5], self[e2]) * other.group0().yzz().extend_to_4(other[e25]))
                + (self.group3().ww().extend_to_4(self[e315], self[e1]) * other.group0().xyx().extend_to_4(other[e15]))
                - (Simd32x4::from([self[e425], self[e1], self[e321], self[e415]]) * other.group1().zzz().extend_to_4(other[e15]))
                - (Simd32x4::from([self[e3], self[e321], self[e415], self[e125]]) * other.group1().yyy().extend_to_4(other[e12]))
                - (self.group2().yzxx() * other.group0().zxy().extend_to_4(other[e23]))
                - (self.group1().wz().extend_to_4(self[e2], self[e315]) * other.group1().xxx().extend_to_4(other[e31])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e412] * other[e25]) + (self[e321] * other[e23]) + (self[e4] * other[e15]) + (self[e3] * other[e31]),
                (self[e423] * other[e35]) + (self[e321] * other[e31]) + (self[e4] * other[e25]) + (self[e1] * other[e12]),
                (self[e431] * other[e15]) + (self[e321] * other[e12]) + (self[e4] * other[e35]) + (self[e2] * other[e23]),
                self[e412] * other[e12] * -1.0,
            ]) - (self.group0().yzx() * other.group1().zxy()).extend_to_4(self[e423] * other[e23])
                - (other.group0().zxy() * self.group3().yzx()).extend_to_4(self[e431] * other[e31]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64      129        0
    //    simd3        0       27        0
    //    simd4       66       42        0
    // Totals...
    // yes simd      130      198        0
    //  no simd      328      378        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e412] * other[e31]) + (self[e4] * other[e23]),
                (self[e431] * other[scalar]) + (self[e4] * other[e31]),
                (self[e412] * other[scalar]) + (self[e4] * other[e12]),
                -(self[e431] * other[e25]) - (self[e412] * other[e35]) - (self[e415] * other[e23]) - (self[e425] * other[e31]) - (self[e435] * other[e12]),
            ]) + (self.group0().xxy() * other.group0().wzx()).extend_to_4(self[e4] * other[e3215])
                - (self.group0().yzx() * other.group0().zxy()).extend_to_4(self[e423] * other[e15]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e415] * other[scalar]) + (self[e435] * other[e31]) + (self[e4] * other[e15]),
                (self[e415] * other[e12]) + (self[e425] * other[scalar]) + (self[e4] * other[e25]),
                (self[e425] * other[e23]) + (self[e435] * other[scalar]) + (self[e4] * other[e35]),
                -(self[e412] * other[e35]) - (self[e1] * other[e23]) - (self[e2] * other[e31]) - (self[e3] * other[e12]),
            ]) + (other.group1().ywww() * self.group0().zyz().extend_to_4(self[e4]))
                + (self.group0().xxy() * other.group1().wzx()).extend_to_4(self[e321] * other[scalar])
                - (other.group1().zxyx() * self.group0().yzx().extend_to_4(self[e423]))
                - (self.group1().yzx() * other.group0().zxy()).extend_to_4(self[e431] * other[e25]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e2] * other[e35]) + (self[e5] * other[e23]),
                (self[e3] * other[e15]) + (self[e5] * other[e31]),
                (self[e1] * other[e25]) + (self[e5] * other[e12]),
                -(self[e315] * other[e31]) - (self[e125] * other[e12]),
            ]) + (other.group0().ywww() * self.group2().zyz().extend_to_4(self[e5]))
                + (other.group1().ywwy() * self.group1().zyz().extend_to_4(self[e2]))
                + (other.group1().wzxx() * self.group1().xxy().extend_to_4(self[e1]))
                + (self.group2().xxy() * other.group0().wzx()).extend_to_4(self[e3] * other[e35])
                - (self.group1().yzxx() * other.group1().zxyx())
                - (self.group1().wwwy() * other.group1().xyzy())
                - (other.group1().wzxw() * self.group3().xxy().extend_to_4(self[e321]))
                - (self.group2().yzx() * other.group0().zxy()).extend_to_4(self[e435] * other[e35])
                - (self.group3().zyz() * other.group1().yww()).extend_to_4(self[e235] * other[e23]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e412] * other[e25]) + (self[e321] * other[e23]) + (self[e4] * other[e15]) + (self[e1] * other[scalar]) + (self[e3] * other[e31]),
                (self[e431] * other[e3215]) + (self[e321] * other[e31]) + (self[e4] * other[e25]) + (self[e1] * other[e12]) + (self[e2] * other[scalar]),
                (self[e412] * other[e3215]) + (self[e321] * other[e12]) + (self[e4] * other[e35]) + (self[e2] * other[e23]) + (self[e3] * other[scalar]),
                self[e412] * other[e12] * -1.0,
            ]) + (self.group0().xxy() * other.group1().wzx()).extend_to_4(self[e4] * other[scalar])
                - (other.group0().zxyy() * self.group3().yzx().extend_to_4(self[e431]))
                - (self.group0().yzx() * other.group1().zxy()).extend_to_4(self[e423] * other[e23]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       78        0
    //    simd3        0       14        0
    //    simd4       59       49        0
    // Totals...
    // yes simd       95      141        0
    //  no simd      272      316        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (other.group0().xyzy() * self.group2().www().extend_to_4(self[e2]))
                + (other.group0().yzxx() * self.group0().zxy().extend_to_4(self[e1]))
                + Simd32x3::from(0.0).extend_to_4(self[e3] * other[e3])
                - (other.group0().zxyw() * self.group0().yzx().extend_to_4(self[e4])),
            // e23, e31, e12, e45
            (other.group0().zxyw() * self.group3().yzx().extend_to_4(self[e4]))
                - (self.group1().wwwy() * other.group0().xyzy())
                - (other.group0().yzxz() * self.group3().zxy().extend_to_4(self[e435]))
                - (other.group0().wwwx() * self.group0().extend_to_4(self[e415])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e315] * other[e3]) + (self[e1] * other[e5]),
                (self[e125] * other[e1]) + (self[e2] * other[e5]),
                (self[e235] * other[e2]) + (self[e3] * other[e5]),
                0.0,
            ]) - (other.group0().xyzz() * self.group3().www().extend_to_4(self[e412]))
                - (other.group0().yzxy() * self.group2().zxy().extend_to_4(self[e431]))
                - (other.group0().wwwx() * self.group1().truncate_to_3().extend_to_4(self[e423])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e425] * other[e3] * -1.0,
                self[e435] * other[e1] * -1.0,
                self[e415] * other[e2] * -1.0,
                (self[e315] * other[e2]) + (self[e125] * other[e3]),
            ]) + (Simd32x4::from(other[e5]) * self.group0().extend_to_4(self[e321]))
                + (other.group0().yzxx() * self.group1().zxy().extend_to_4(self[e235])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       29       62        0
    //    simd3        0       18        0
    //    simd4       45       38        0
    // Totals...
    // yes simd       74      118        0
    //  no simd      209      268        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[e12345]) * self.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from(other[e12345]) * self.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, e1234
            Simd32x4::from(other[e12345]) * self.group2() * Simd32x4::from(-1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e12345]) * self.group3() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       62      114        0
    //    simd3        0       27        0
    //    simd4       74       52        0
    // Totals...
    // yes simd      136      193        0
    //  no simd      358      403        0
    fn sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(self[e435] * other[e431]) - (self[e321] * other[e423]) - (self[e4] * other[e415]) - (self[e3] * other[e431]),
                -(self[e415] * other[e412]) - (self[e321] * other[e431]) - (self[e4] * other[e425]) - (self[e1] * other[e412]),
                -(self[e425] * other[e423]) - (self[e321] * other[e412]) - (self[e4] * other[e435]) - (self[e2] * other[e423]),
                (self[e415] * other[e415]) + (self[e425] * other[e425]) + (self[e435] * other[e435]) + (self[e315] * other[e431]) + (self[e125] * other[e412]),
            ]) + (self.group0().xyx() * other.group1().wwy()).extend_to_4(self[e423] * other[e235])
                + (self.group0().yzz() * other.group1().zxw()).extend_to_4(self[e431] * other[e315])
                + (other.group0().zxy() * self.group1().yzx()).extend_to_4(self[e412] * other[e125])
                + (other.group0().zxy() * self.group3().yzx()).extend_to_4(self[e235] * other[e423])
                - (other.group1().yzxw() * self.group0().zxy().extend_to_4(self[e321])),
            // e23, e31, e12, e45
            (self.group2().yzxy() * other.group0().zxy().extend_to_4(other[e431]))
                + (self.group0().yzx() * other.group2().zxy()).extend_to_4(self[e235] * other[e423])
                + (self.group1().yzx() * other.group1().zxy()).extend_to_4(self[e125] * other[e412])
                - (self.group3().xyzz() * other.group1().wwwz())
                - (other.group1().yzxy() * self.group1().zxy().extend_to_4(self[e2]))
                - (self.group2().zx().extend_to_4(self[e5], other[e125]) * other.group0().yzz().extend_to_4(self[e412]))
                - (self.group3().ww().extend_to_4(self[e315], other[e315]) * other.group0().xyx().extend_to_4(self[e431]))
                - (other.group2() * self.group2().www()).extend_to_4(self[e1] * other[e415])
                - (self.group0().zxy() * other.group2().yzx()).extend_to_4(self[e423] * other[e235]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(self[e435] * other[e315]) - (self[e235] * other[e321]) - (self[e125] * other[e425]) - (self[e2] * other[e125]) - (self[e5] * other[e415]),
                -(self[e415] * other[e125]) - (self[e235] * other[e435]) - (self[e315] * other[e321]) - (self[e3] * other[e235]) - (self[e5] * other[e425]),
                -(self[e425] * other[e235]) - (self[e315] * other[e415]) - (self[e125] * other[e321]) - (self[e1] * other[e315]) - (self[e5] * other[e435]),
                (self[e425] * other[e431]) + (self[e435] * other[e412]) + (self[e4] * other[e321]) + (self[e1] * other[e423]) + (self[e2] * other[e431]) + (self[e3] * other[e412]),
            ]) + (Simd32x4::from([self[e425], self[e1], self[e321], other[e435]]) * other.group2().zzz().extend_to_4(self[e412]))
                + (Simd32x4::from([self[e3], self[e321], self[e415], other[e425]]) * other.group2().yyy().extend_to_4(self[e431]))
                + (self.group1().wz().extend_to_4(self[e2], other[e415]) * other.group2().xxx().extend_to_4(self[e423]))
                + (self.group2().yzx() * other.group1().zxy()).extend_to_4(self[e415] * other[e423]),
            // e4235, e4315, e4125, e3215
            (other.group1().xyzy() * self.group1().www().extend_to_4(self[e315]))
                + (other.group1().yzxz() * self.group3().zxy().extend_to_4(self[e125]))
                + (other.group1().wwwx() * self.group1().truncate_to_3().extend_to_4(self[e235]))
                + (other.group2() * self.group2().www()).extend_to_4(self[e435] * other[e125])
                + (self.group0().zxy() * other.group2().yzx()).extend_to_4(self[e415] * other[e235])
                + (other.group0().zxy() * self.group2().yzx()).extend_to_4(self[e425] * other[e315])
                - (self.group3().yzxw() * other.group1().zxyw())
                - (self.group2().zx().extend_to_4(self[e5], self[e3]) * other.group0().yzz().extend_to_4(other[e125]))
                - (self.group3().ww().extend_to_4(self[e315], self[e2]) * other.group0().xyx().extend_to_4(other[e315]))
                - (self.group0().yzx() * other.group2().zxy()).extend_to_4(self[e1] * other[e235]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       65      127        0
    //    simd3        0       25        0
    //    simd4       77       55        0
    // Totals...
    // yes simd      142      207        0
    //  no simd      373      422        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(self[e412] * other[e425]) - (self[e435] * other[e431]) - (self[e321] * other[e423]) - (self[e4] * other[e415]) - (self[e3] * other[e431]),
                -(self[e431] * other[e12345]) - (self[e415] * other[e412]) - (self[e321] * other[e431]) - (self[e4] * other[e425]) - (self[e1] * other[e412]),
                -(self[e412] * other[e12345]) - (self[e425] * other[e423]) - (self[e321] * other[e412]) - (self[e4] * other[e435]) - (self[e2] * other[e423]),
                (self[e415] * other[e415]) + (self[e425] * other[e425]) + (self[e435] * other[e435]) + (self[e315] * other[e431]) + (self[e125] * other[e412]),
            ]) + (self.group0().xyx() * other.group1().wwy()).extend_to_4(self[e423] * other[e235])
                + (self.group0().yzz() * other.group1().zxw()).extend_to_4(self[e431] * other[e315])
                + (other.group0().zxy() * self.group1().yzx()).extend_to_4(self[e412] * other[e125])
                + (other.group0().zxy() * self.group3().yzx()).extend_to_4(self[e235] * other[e423])
                - (Simd32x4::from([other[e12345], other[e435], other[e415], other[e321]]) * self.group0().xxy().extend_to_4(self[e321])),
            // e23, e31, e12, e45
            Simd32x4::from([self[e1] * other[e321] * -1.0, self[e2] * other[e321] * -1.0, self[e3] * other[e321] * -1.0, self[e321] * other[e12345]])
                + (self.group2().yzxy() * other.group0().zxy().extend_to_4(other[e431]))
                + (self.group0().yzx() * other.group2().zxy()).extend_to_4(self[e235] * other[e423])
                + (self.group1().yzx() * other.group1().zxy()).extend_to_4(self[e125] * other[e412])
                - (Simd32x4::from([other[e425], other[e12345], other[e12345], other[e425]]) * self.group1().zyz().extend_to_4(self[e2]))
                - (Simd32x4::from([other[e12345], other[e435], other[e415], other[e415]]) * self.group1().xxy().extend_to_4(self[e1]))
                - (other.group2().yzxx() * self.group0().zxy().extend_to_4(self[e423]))
                - (self.group2().zx().extend_to_4(self[e5], other[e125]) * other.group0().yzz().extend_to_4(self[e412]))
                - (self.group3().ww().extend_to_4(self[e315], other[e315]) * other.group0().xyx().extend_to_4(self[e431]))
                - (self.group2().www() * other.group2().truncate_to_3()).extend_to_4(self[e3] * other[e435]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(self[e235] * other[e321]) - (self[e235] * other[e12345]) - (self[e125] * other[e425]) - (self[e2] * other[e125]) - (self[e5] * other[e415]),
                -(self[e235] * other[e435]) - (self[e315] * other[e321]) - (self[e315] * other[e12345]) - (self[e3] * other[e235]) - (self[e5] * other[e425]),
                -(self[e315] * other[e415]) - (self[e125] * other[e321]) - (self[e125] * other[e12345]) - (self[e1] * other[e315]) - (self[e5] * other[e435]),
                (self[e425] * other[e431]) + (self[e435] * other[e412]) + (self[e4] * other[e321]) + (self[e1] * other[e423]) + (self[e2] * other[e431]) + (self[e3] * other[e412]),
            ]) + (other.group1().zxyz() * self.group2().yzx().extend_to_4(self[e412]))
                + (self.group1().yzx() * other.group2().zxy()).extend_to_4(self[e423] * other[e415])
                + (self.group1().www() * other.group2().truncate_to_3()).extend_to_4(self[e431] * other[e425])
                + (self.group3().zxy() * other.group2().yzx()).extend_to_4(self[e415] * other[e423])
                - (other.group2().yzxw() * self.group1().zxy().extend_to_4(self[e4])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e3] * other[e425], self[e2] * other[e12345], self[e3] * other[e12345], self[e5] * other[e12345] * -1.0])
                + (Simd32x4::from([other[e12345], other[e435], other[e415], other[e435]]) * self.group3().xxy().extend_to_4(self[e125]))
                + (self.group1().xyzz() * other.group1().www().extend_to_4(other[e125]))
                + (self.group2().wwwy() * other.group2().truncate_to_3().extend_to_4(other[e425]))
                + (other.group1().xyzx() * self.group1().www().extend_to_4(self[e235]))
                + (other.group2().yzxx() * self.group0().zxy().extend_to_4(self[e415]))
                + (other.group0().zxy() * self.group2().yzx()).extend_to_4(self[e425] * other[e315])
                - (self.group3().yzxw() * other.group1().zxyw())
                - (other.group2().zxyx() * self.group0().yzx().extend_to_4(self[e1]))
                - (self.group2().zx().extend_to_4(self[e5], other[e125]) * other.group0().yzz().extend_to_4(self[e3]))
                - (self.group3().ww().extend_to_4(self[e315], other[e315]) * other.group0().xyx().extend_to_4(self[e2])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       70      137        0
    //    simd3        0       30        0
    //    simd4       72       45        0
    // Totals...
    // yes simd      142      212        0
    //  no simd      358      407        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e423] * other[e45]) + (self[e412] * other[e31]) + (self[e435] * other[e42]) + (self[e321] * other[e41]) + (self[e4] * other[e23]) + (self[e3] * other[e42]),
                (self[e423] * other[e12]) + (self[e431] * other[e45]) + (self[e415] * other[e43]) + (self[e321] * other[e42]) + (self[e4] * other[e31]) + (self[e1] * other[e43]),
                (self[e431] * other[e23]) + (self[e412] * other[e45]) + (self[e425] * other[e41]) + (self[e321] * other[e43]) + (self[e4] * other[e12]) + (self[e2] * other[e41]),
                -(self[e415] * other[e23])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e321] * other[e45])
                    - (self[e235] * other[e41])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
            ]) - (self.group0().yzx() * other.group1().zxy()).extend_to_4(self[e423] * other[e15])
                - (other.group0().zxy() * self.group1().yzx()).extend_to_4(self[e431] * other[e25])
                - (other.group0().zxy() * self.group3().yzx()).extend_to_4(self[e412] * other[e35]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e435] * other[e31]) + (self[e4] * other[e15]),
                (self[e415] * other[e12]) + (self[e4] * other[e25]),
                (self[e425] * other[e23]) + (self[e4] * other[e35]),
                -(self[e2] * other[e31]) - (self[e3] * other[e12]),
            ]) + (self.group2().zx().extend_to_4(self[e5], self[e125]) * other.group0().yzz().extend_to_4(other[e43]))
                + (self.group3().ww().extend_to_4(self[e315], self[e315]) * other.group0().xyx().extend_to_4(other[e42]))
                + (self.group0().zxy() * other.group2().yzx()).extend_to_4(self[e235] * other[e41])
                - (self.group3().xyzx() * other.group1().wwwx())
                - (self.group0().yzx() * other.group2().zxy()).extend_to_4(self[e423] * other[e15])
                - (other.group0().zxy() * self.group2().yzx()).extend_to_4(self[e431] * other[e25])
                - (self.group1().yzx() * other.group1().zxy()).extend_to_4(self[e412] * other[e35]),
            // e235, e315, e125, e5
            Simd32x4::from([
                self[e5] * other[e23],
                self[e5] * other[e31],
                self[e5] * other[e12],
                -(self[e125] * other[e12]) - (self[e5] * other[e45]),
            ]) + (Simd32x4::from([self[e435], self[e3], self[e425], self[e1]]) * other.group2().yxx().extend_to_4(other[e15]))
                + (Simd32x4::from([self[e2], self[e415], self[e1], self[e2]]) * other.group2().zzy().extend_to_4(other[e25]))
                + (self.group2().zxy() * other.group1().yzx()).extend_to_4(self[e3] * other[e35])
                - (Simd32x4::from(other[e15]) * self.group1().wz().extend_to_4(self[e2], self[e415]))
                - (Simd32x4::from(other[e25]) * Simd32x4::from([self[e3], self[e321], self[e415], self[e425]]))
                - (Simd32x4::from(other[e35]) * Simd32x4::from([self[e425], self[e1], self[e321], self[e435]]))
                - (self.group2().xyxx() * other.group1().wwyx())
                - (self.group2().yzzy() * other.group1().zxwy()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e321] * other[e23]) + (self[e315] * other[e43]) + (self[e4] * other[e15]) + (self[e3] * other[e31]),
                (self[e321] * other[e31]) + (self[e125] * other[e41]) + (self[e4] * other[e25]) + (self[e1] * other[e12]),
                (self[e321] * other[e12]) + (self[e235] * other[e42]) + (self[e4] * other[e35]) + (self[e2] * other[e23]),
                -(self[e425] * other[e42]) - (self[e435] * other[e43]) - (self[e2] * other[e42]) - (self[e3] * other[e43]),
            ]) + (self.group0().zxy() * other.group2().yzx()).extend_to_4(self[e4] * other[e45])
                - (self.group2().zx().extend_to_4(self[e5], other[e12]) * other.group0().yzz().extend_to_4(self[e412]))
                - (self.group3().ww().extend_to_4(self[e315], other[e31]) * other.group0().xyx().extend_to_4(self[e431]))
                - (self.group0().yzx() * other.group2().zxy()).extend_to_4(self[e423] * other[e23])
                - (self.group3().yzx() * other.group1().zxy()).extend_to_4(self[e1] * other[e41])
                - (other.group1().www() * self.group1().truncate_to_3()).extend_to_4(self[e415] * other[e41]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       65      130        0
    //    simd3        0       31        0
    //    simd4       92       65        0
    // Totals...
    // yes simd      157      226        0
    //  no simd      433      483        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e415] * other[e1234]) + (self[e4] * other[e23]) + (self[e4] * other[e4235]) + (self[e1] * other[e1234]) + (self[e3] * other[e42]),
                (self[e425] * other[e1234]) + (self[e4] * other[e31]) + (self[e4] * other[e4315]) + (self[e1] * other[e43]) + (self[e2] * other[e1234]),
                (self[e435] * other[e1234]) + (self[e321] * other[e43]) + (self[e4] * other[e12]) + (self[e4] * other[e4125]) + (self[e3] * other[e1234]),
                -(self[e415] * other[e23])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e321] * other[e45])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
            ]) + (Simd32x4::from([other[e31], other[e4125], other[e4235], other[e4235]]) * self.group0().zxy().extend_to_4(self[e1]))
                + (Simd32x4::from([other[e4315], other[e45], other[e45], other[e4315]]) * self.group0().zyz().extend_to_4(self[e2]))
                + (self.group1().zx().extend_to_4(self[e2], other[e1234]) * other.group0().yzx().extend_to_4(self[e5]))
                + (self.group0().xxy() * other.group1().wzx()).extend_to_4(self[e4] * other[e3215])
                + (other.group0().xyx() * self.group1().wwy()).extend_to_4(self[e3] * other[e4125])
                - (self.group0().yzx() * other.group1().zxy()).extend_to_4(self[e423] * other[e15])
                - (self.group0().yzx() * other.group3().zxy()).extend_to_4(self[e431] * other[e25])
                - (other.group0().zxy() * self.group1().yzx()).extend_to_4(self[e412] * other[e35])
                - (other.group0().zxy() * self.group3().yzx()).extend_to_4(self[e235] * other[e41]),
            // e415, e425, e435, e321
            Simd32x4::from([self[e2] * other[e4125], self[e3] * other[e4235], self[e1] * other[e4315], self[e5] * other[e1234] * -1.0])
                + (Simd32x4::from(self[e4]) * other.group2().truncate_to_3().extend_to_4(other[e3215]))
                + (Simd32x4::from([other[e25], other[e3215], other[e3215], self[e315]]) * self.group0().zyz().extend_to_4(other[e42]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], self[e235]]) * self.group0().xxy().extend_to_4(other[e41]))
                + (self.group1().zxyy() * other.group1().yzx().extend_to_4(other[e4315]))
                + (self.group2().zx().extend_to_4(self[e5], other[e4235]) * other.group0().yzz().extend_to_4(self[e415]))
                + (self.group3().ww().extend_to_4(self[e315], self[e125]) * other.group0().xyx().extend_to_4(other[e43]))
                + (other.group2().www() * self.group2().truncate_to_3()).extend_to_4(self[e435] * other[e4125])
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e31]]) * self.group3().xxyy())
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e12]]) * self.group3().zyzz())
                - (other.group2().zxyx() * self.group0().yzx().extend_to_4(self[e423]))
                - (other.group0().zxy() * self.group2().yzx()).extend_to_4(self[e431] * other[e25])
                - (self.group1().yzx() * other.group1().zxy()).extend_to_4(self[e412] * other[e35])
                - (self.group1().www() * other.group3().truncate_to_3()).extend_to_4(self[e1] * other[e23]),
            // e235, e315, e125, e5
            (Simd32x4::from([other[e31], other[e4235], other[e23], other[e15]]) * self.group2().zzy().extend_to_4(self[e1]))
                + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e4315]]) * self.group1().zyz().extend_to_4(self[e315]))
                + (Simd32x4::from([other[e4125], other[e12], other[e4315], other[e4125]]) * self.group2().yxxz())
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e4235]]) * self.group1().xxy().extend_to_4(self[e235]))
                + (self.group3().yzxy() * other.group2().zxyy())
                + (self.group3().wwwz() * other.group1().truncate_to_3().extend_to_4(other[e35]))
                - (Simd32x4::from(self[e5]) * other.group3().truncate_to_3().extend_to_4(other[e45]))
                - (Simd32x4::from([other[e45], other[e4125], other[e31], other[e35]]) * self.group2().xxx().extend_to_4(self[e435]))
                - (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e12]]) * self.group3().zyz().extend_to_4(self[e125]))
                - (Simd32x4::from([other[e4315], other[e23], other[e45], other[e23]]) * self.group2().zzzx())
                - (Simd32x4::from([other[e3215], other[e35], other[e15], other[e31]]) * self.group3().xxy().extend_to_4(self[e315]))
                - (self.group1().yzxx() * other.group2().zxyx())
                - (self.group1().wwwy() * other.group2().xyzy())
                - (other.group1().zw().extend_to_4(other[e4235], other[e3215]) * self.group2().yyy().extend_to_4(self[e321])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e425] * other[e4125]) + (self[e321] * other[e23]) + (self[e315] * other[e43]) + (self[e4] * other[e15]) + (self[e3] * other[e31]),
                (self[e435] * other[e4235]) + (self[e321] * other[e31]) + (self[e125] * other[e41]) + (self[e4] * other[e25]) + (self[e1] * other[e12]),
                (self[e415] * other[e4315]) + (self[e321] * other[e12]) + (self[e235] * other[e42]) + (self[e4] * other[e35]) + (self[e2] * other[e23]),
                -(self[e425] * other[e42]) - (self[e435] * other[e43]) - (self[e1] * other[e41]) - (self[e2] * other[e42]) - (self[e3] * other[e43]),
            ]) + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e45]]) * self.group0().zyz().extend_to_4(self[e4]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e1234]]) * self.group0().xxy().extend_to_4(self[e321]))
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e4315]]) * self.group1().xxy().extend_to_4(self[e431]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e12]]) * self.group1().zyz().extend_to_4(self[e412]))
                - (self.group2().zx().extend_to_4(self[e5], other[e31]) * other.group0().yzz().extend_to_4(self[e431]))
                - (self.group3().ww().extend_to_4(self[e315], other[e4235]) * other.group0().xyx().extend_to_4(self[e423]))
                - (self.group0().yzx() * other.group2().zxy()).extend_to_4(self[e423] * other[e23])
                - (self.group3().yzx() * other.group1().zxy()).extend_to_4(self[e415] * other[e41])
                - (other.group2().www() * self.group2().truncate_to_3()).extend_to_4(self[e412] * other[e4125]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       78        0
    //    simd3        2       17        0
    //    simd4       49       40        0
    // Totals...
    // yes simd       87      135        0
    //  no simd      238      289        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            other.group0().yy().extend_to_4(other[e12345], other[e5]) * self.group0().extend_to_4(self[e4]) * Simd32x4::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(self[e423] * other[e5]) - (self[e415] * other[e12345]),
                -(self[e431] * other[e5]) - (self[e425] * other[e12345]),
                -(self[e412] * other[e5]) - (self[e435] * other[e12345]),
                (self[e321] * other[e12345]) + (self[e4] * other[e5]),
            ]),
            // e15, e25, e35, e1234
            ((Simd32x3::from(other[e5]) * self.group3().truncate_to_3())
                - (Simd32x3::from(other[e5]) * self.group1().truncate_to_3())
                - (Simd32x3::from(other[e12345]) * self.group2().truncate_to_3()))
            .extend_to_4(self[e4] * other[e12345] * -1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e1] * other[e12345], self[e2] * other[e12345], self[e3] * other[e12345], self[e5] * other[e12345] * -1.0])
                + (Simd32x4::from(other[e5]) * self.group0().extend_to_4(self[e321])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       38       85        0
    //    simd3        3       22        0
    //    simd4       56       42        0
    // Totals...
    // yes simd       97      149        0
    //  no simd      271      319        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([other[e45], other[e45], other[e45], 1.0])
                * self
                    .group0()
                    .extend_to_4(-(self[e423] * other[e15]) - (self[e431] * other[e25]) - (self[e412] * other[e35]) - (self[e321] * other[e45])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e412] * other[e25]) + (self[e4] * other[e15]),
                (self[e423] * other[e35]) + (self[e4] * other[e25]),
                (self[e431] * other[e15]) + (self[e4] * other[e35]),
                self[e412] * other[e35] * -1.0,
            ]) - (other.group0().zxyx() * self.group0().yzx().extend_to_4(self[e423]))
                - (other.group0().wwwy() * self.group3().truncate_to_3().extend_to_4(self[e431])),
            // e235, e315, e125, e5
            (self.group3().yzxy() * other.group0().zxyy())
                + (other.group0().yzxx() * self.group1().zxy().extend_to_4(self[e1]))
                + Simd32x3::from(0.0).extend_to_4(self[e3] * other[e35])
                - (self.group1().yzxx() * other.group0().zxyx())
                - (self.group1().wwwy() * other.group0().xyzy())
                - (self.group3().zxyw() * other.group0().yzxw())
                - (other.group0().wwwz() * self.group2().truncate_to_3().extend_to_4(self[e435])),
            // e1, e2, e3, e4
            ((Simd32x3::from(self[e4]) * other.group0().truncate_to_3()) + (self.group0().zxy() * other.group0().yzx())
                - (Simd32x3::from(other[e45]) * self.group1().truncate_to_3())
                - (self.group0().yzx() * other.group0().zxy()))
            .extend_to_4(self[e4] * other[e45]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       45      102        0
    //    simd3        0       22        0
    //    simd4       72       53        0
    // Totals...
    // yes simd      117      177        0
    //  no simd      333      380        0
    fn sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e3215]]) * self.group0().xxy().extend_to_4(self[e4]))
                + (Simd32x4::from([other[e4315], other[e45], other[e45], other[e4235]]) * self.group0().zyz().extend_to_4(self[e1]))
                + (other.group1().xyzy() * self.group2().www().extend_to_4(self[e2]))
                + Simd32x3::from(0.0).extend_to_4((self[e3] * other[e4125]) - (self[e431] * other[e25]) - (self[e412] * other[e35]) - (self[e321] * other[e45]))
                - (self.group0().yzx() * other.group1().zxy()).extend_to_4(self[e423] * other[e15]),
            // e415, e425, e435, e321
            Simd32x4::from([self[e3] * other[e4315] * -1.0, self[e2] * other[e45] * -1.0, self[e3] * other[e45] * -1.0, 0.0])
                + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e4315]]) * self.group0().zyz().extend_to_4(self[e425]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e4235]]) * self.group0().xxy().extend_to_4(self[e415]))
                + (other.group1().zxyw() * self.group3().yzx().extend_to_4(self[e4]))
                + (self.group2().www() * other.group0().truncate_to_3()).extend_to_4(self[e435] * other[e4125])
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e35]]) * self.group3().xxy().extend_to_4(self[e412]))
                - (other.group0().zxyx() * self.group0().yzx().extend_to_4(self[e423]))
                - (self.group1().www() * other.group1().truncate_to_3()).extend_to_4(self[e431] * other[e25]),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e3] * other[e25]) - (self[e5] * other[e4235]),
                -(self[e2] * other[e3215]) - (self[e5] * other[e4315]),
                -(self[e3] * other[e3215]) - (self[e5] * other[e4125]),
                (self[e2] * other[e25]) + (self[e3] * other[e35]),
            ]) + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e4315]]) * self.group1().zyz().extend_to_4(self[e315]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e4235]]) * self.group1().xxy().extend_to_4(self[e235]))
                + (self.group2().yzxz() * other.group1().zxyz())
                + (self.group3().yzxx() * other.group0().zxyx())
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e35]]) * self.group2().xxy().extend_to_4(self[e435]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e3215]]) * self.group2().zyz().extend_to_4(self[e321]))
                - (Simd32x4::from([other[e3215], other[e35], other[e15], other[e45]]) * self.group3().xxyw())
                - (self.group1().yzxx() * other.group0().zxyx())
                - (self.group1().wwwy() * other.group0().xyzy()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e412] * other[e25]) + (self[e425] * other[e4125]) + (self[e4] * other[e15]),
                (self[e431] * other[e3215]) + (self[e435] * other[e4235]) + (self[e4] * other[e25]),
                (self[e412] * other[e3215]) + (self[e415] * other[e4315]) + (self[e4] * other[e35]),
                0.0,
            ]) + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e45]]) * self.group0().xxy().extend_to_4(self[e4]))
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e4315]]) * self.group1().xxy().extend_to_4(self[e431]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e4125]]) * self.group1().zyz().extend_to_4(self[e412]))
                - (self.group0().yzx() * other.group0().zxy()).extend_to_4(self[e423] * other[e4235]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       58      109        0
    //    simd3        0       22        0
    //    simd4       61       42        0
    // Totals...
    // yes simd      119      173        0
    //  no simd      302      343        0
    fn sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(self[e412] * other[e425]) - (self[e4] * other[e415]),
                -(self[e423] * other[e435]) - (self[e4] * other[e425]),
                -(self[e431] * other[e415]) - (self[e4] * other[e435]),
                (self[e431] * other[e315]) + (self[e412] * other[e125]) + (self[e415] * other[e415]) + (self[e425] * other[e425]) + (self[e435] * other[e435]),
            ]) + (self.group0().yzx() * other.group0().zxy()).extend_to_4(self[e423] * other[e235]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e431] * other[e125]) + (self[e425] * other[e435]),
                (self[e412] * other[e235]) + (self[e435] * other[e415]),
                (self[e423] * other[e315]) + (self[e415] * other[e425]),
                -(self[e1] * other[e415]) - (self[e2] * other[e425]) - (self[e3] * other[e435]),
            ]) - (other.group1() * self.group2().www()).extend_to_4(self[e412] * other[e125])
                - (self.group0().zxy() * other.group1().yzx()).extend_to_4(self[e423] * other[e235])
                - (other.group0().yzx() * self.group1().zxy()).extend_to_4(self[e431] * other[e315]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e425] * other[e125]) - (self[e435] * other[e315]) - (self[e125] * other[e425]) - (self[e2] * other[e125]) - (self[e5] * other[e415]),
                (self[e1] * other[e125]) - (self[e415] * other[e125]) - (self[e235] * other[e435]) - (self[e3] * other[e235]) - (self[e5] * other[e425]),
                (self[e321] * other[e125]) - (self[e425] * other[e235]) - (self[e315] * other[e415]) - (self[e1] * other[e315]) - (self[e5] * other[e435]),
                0.0,
            ]) + (Simd32x4::from([self[e3], self[e321], self[e415], other[e435]]) * other.group1().yyy().extend_to_4(self[e412]))
                + (self.group1().wz().extend_to_4(self[e2], other[e425]) * other.group1().xxx().extend_to_4(self[e431]))
                + (other.group0().zxy() * self.group2().yzx()).extend_to_4(self[e423] * other[e415]),
            // e4235, e4315, e4125, e3215
            (self.group1().ww().extend_to_4(self[e2], self[e315]) * other.group0().xyx().extend_to_4(other[e425]))
                + (self.group3().zx().extend_to_4(self[e321], self[e125]) * other.group0().yzz().extend_to_4(other[e435]))
                + Simd32x3::from(0.0).extend_to_4((self[e425] * other[e315]) + (self[e435] * other[e125]) - (self[e3] * other[e125]))
                + (other.group1() * self.group2().www()).extend_to_4(self[e415] * other[e235])
                + (self.group0().zxy() * other.group1().yzx()).extend_to_4(self[e235] * other[e415])
                - (self.group3().yzxy() * other.group0().zxy().extend_to_4(other[e315]))
                - (self.group0().yzx() * other.group1().zxy()).extend_to_4(self[e1] * other[e235]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       59      109        0
    //    simd3        0       23        0
    //    simd4       69       49        0
    // Totals...
    // yes simd      128      181        0
    //  no simd      335      374        0
    fn sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(self[e412] * other[e425]) - (self[e4] * other[e415]),
                -(self[e431] * other[e12345]) - (self[e4] * other[e425]),
                -(self[e412] * other[e12345]) - (self[e4] * other[e435]),
                (self[e431] * other[e315]) + (self[e412] * other[e125]) + (self[e415] * other[e415]) + (self[e425] * other[e425]) + (self[e435] * other[e435]),
            ]) + (self.group0().yzx() * other.group0().zxy()).extend_to_4(self[e423] * other[e235])
                - (self.group0().xxy() * other.group0().wzx()).extend_to_4(self[e4] * other[e5]),
            // e23, e31, e12, e45
            Simd32x3::from(0.0).extend_to_4(self[e3] * other[e435] * -1.0)
                + (self.group0().yzx() * other.group1().zxy()).extend_to_4(self[e321] * other[e12345])
                + (self.group1().yzx() * other.group0().zxy()).extend_to_4(self[e4] * other[e5])
                - (other.group0().ywwx() * self.group1().zyz().extend_to_4(self[e1]))
                - (other.group1().ywwy() * self.group0().zyz().extend_to_4(self[e431]))
                - (other.group1().wzxx() * self.group0().xxy().extend_to_4(self[e423]))
                - (self.group1().xxy() * other.group0().wzx()).extend_to_4(self[e412] * other[e125])
                - (self.group2().www() * other.group1().truncate_to_3()).extend_to_4(self[e2] * other[e425]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e1] * other[e5]) + (self[e3] * other[e315])
                    - (self[e435] * other[e315])
                    - (self[e235] * other[e12345])
                    - (self[e125] * other[e425])
                    - (self[e2] * other[e125])
                    - (self[e5] * other[e415]),
                (self[e1] * other[e125]) + (self[e2] * other[e5])
                    - (self[e425] * other[e5])
                    - (self[e235] * other[e435])
                    - (self[e315] * other[e12345])
                    - (self[e3] * other[e235])
                    - (self[e5] * other[e425]),
                (self[e2] * other[e235]) + (self[e3] * other[e5])
                    - (self[e435] * other[e5])
                    - (self[e315] * other[e415])
                    - (self[e125] * other[e12345])
                    - (self[e1] * other[e315])
                    - (self[e5] * other[e435]),
                0.0,
            ]) + (other.group0().zxyz() * self.group2().yzx().extend_to_4(self[e412]))
                + (self.group1().yzx() * other.group1().zxy()).extend_to_4(self[e423] * other[e415])
                + (self.group1().www() * other.group1().truncate_to_3()).extend_to_4(self[e431] * other[e425])
                - (self.group1().xxy() * other.group1().wzx()).extend_to_4(self[e4] * other[e12345]),
            // e4235, e4315, e4125, e3215
            (other.group1() * self.group2().www().extend_to_4(self[e321]))
                + (self.group1().wwwz() * other.group0().truncate_to_3().extend_to_4(other[e125]))
                + (other.group0().ywwy() * self.group3().zyz().extend_to_4(self[e315]))
                + (other.group0().wzxx() * self.group3().xxy().extend_to_4(self[e235]))
                + (other.group1().ywwy() * self.group0().zyz().extend_to_4(self[e425]))
                + (other.group1().wzxx() * self.group0().xxy().extend_to_4(self[e415]))
                + Simd32x3::from(0.0).extend_to_4((self[e125] * other[e435]) - (self[e3] * other[e125]) - (self[e5] * other[e12345]))
                - (self.group3().yzxy() * other.group0().zxy().extend_to_4(other[e315]))
                - (other.group1().zxyx() * self.group0().yzx().extend_to_4(self[e1])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for AntiDipoleInversion {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      104      183        0
    //    simd2       12       12        0
    //    simd3      112      149        0
    //    simd4      108       82        0
    // Totals...
    // yes simd      336      426        0
    //  no simd      896      982        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e423] * other[e235])
                    + (self[e431] * other[e315])
                    + (self[e412] * other[e125])
                    + (self[e415] * other[e415])
                    + (self[e425] * other[e425])
                    + (self[e435] * other[e435])
                    + (self[e315] * other[e431])
                    + (self[e125] * other[e412])
                    - (self[e5] * other[e4]),
                (self[e5] * other[e1234])
                    - (self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e321] * other[e45])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
            ]) + (Simd32x2::from(self[e1]) * Simd32x2::from([other[e1], other[e4235]]))
                + (Simd32x2::from(self[e2]) * Simd32x2::from([other[e2], other[e4315]]))
                + (Simd32x2::from(self[e3]) * Simd32x2::from([other[e3], other[e4125]]))
                + (Simd32x2::from([other[e423], other[e3215]]) * self.group2().xw())
                - (Simd32x2::from([other[e5], other[e41]]) * self.group2().wx())
                - (Simd32x2::from([other[e321], other[e23]]) * self.group1().wx()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e425] * other[e4125]) + (self[e321] * other[e23]) + (self[e315] * other[e43]) + (self[e4] * other[e15]) + (self[e3] * other[e31]),
                (self[e435] * other[e4235]) + (self[e321] * other[e31]) + (self[e125] * other[e41]) + (self[e4] * other[e25]) + (self[e1] * other[e12]),
                (self[e415] * other[e4315]) + (self[e321] * other[e12]) + (self[e235] * other[e42]) + (self[e4] * other[e35]) + (self[e2] * other[e23]),
                -(self[e425] * other[e42]) - (self[e435] * other[e43]) - (self[e1] * other[e41]) - (self[e2] * other[e42]) - (self[e3] * other[e43]),
            ]) + (Simd32x4::from(other[scalar]) * self.group3().truncate_to_3().extend_to_4(self[e4]))
                + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e45]]) * self.group0().zyz().extend_to_4(self[e4]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e1234]]) * self.group0().xxy().extend_to_4(self[e321]))
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e12]]) * self.group1().xxy().extend_to_4(self[e412]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e4125]]) * self.group1().zyz().extend_to_4(self[e412]))
                - (Simd32x4::from([other[e1234], other[e1234], other[e1234], self[e415]]) * self.group2().truncate_to_3().extend_to_4(other[e41]))
                - (self.group2().zx().extend_to_4(self[e5], other[e31]) * other.group4().yzz().extend_to_4(self[e431]))
                - (self.group3().ww().extend_to_4(self[e315], other[e4235]) * other.group4().xyx().extend_to_4(self[e423]))
                - (self.group0().yzx() * other.group3().zxy()).extend_to_4(self[e423] * other[e23])
                - (other.group5().zxy() * self.group3().yzx()).extend_to_4(self[e431] * other[e4315]),
            // e5
            (self[e235] * other[e4235])
                + (self[e315] * other[e4315])
                + (self[e125] * other[e4125])
                + (self[e1] * other[e15])
                + (self[e2] * other[e25])
                + (self[e3] * other[e35])
                + (self[e5] * other[scalar])
                - (self[e415] * other[e15])
                - (self[e425] * other[e25])
                - (self[e435] * other[e35])
                - (self[e321] * other[e3215])
                - (self[e235] * other[e23])
                - (self[e315] * other[e31])
                - (self[e125] * other[e12])
                - (self[e5] * other[e45]),
            // e15, e25, e35, e45
            Simd32x4::from([self[e1] * other[e5], self[e2] * other[e5], self[e3] * other[e5], self[e5] * other[e4] * -1.0])
                + (Simd32x4::from([self[e425], self[e1], self[e321], self[e315]]) * other.group8().zzz().extend_to_4(other[e431]))
                + (Simd32x4::from([self[e3], self[e321], self[e415], self[e235]]) * other.group8().yyy().extend_to_4(other[e423]))
                + (self.group2().yzxw() * other.group6().zxy().extend_to_4(other[e5]))
                + (self.group1().wz().extend_to_4(self[e2], self[e321]) * other.group8().xxx().extend_to_4(other[e12345]))
                + (self.group2().yzx() * other.group1().zxy()).extend_to_4(self[e125] * other[e412])
                - (Simd32x4::from([self[e435], self[e3], self[e425], other[e315]]) * other.group8().yxx().extend_to_4(self[e431]))
                - (Simd32x4::from([self[e2], self[e415], self[e1], other[e125]]) * other.group8().zzy().extend_to_4(self[e412]))
                - (Simd32x4::from([other[e2], other[e435], other[e415], other[e3]]) * self.group2().zxy().extend_to_4(self[e435]))
                - (Simd32x4::from([other[e5], other[e5], other[e5], other[e1]]) * self.group1().xyzx())
                - (Simd32x4::from([other[e321], other[e3], other[e1], other[e2]]) * self.group2().xxy().extend_to_4(self[e425]))
                - (self.group3().wwwy() * other.group1().truncate_to_3().extend_to_4(other[e425]))
                - (self.group3().wwwz() * other.group6().xyzz())
                - (other.group6().ywwx() * self.group2().zyz().extend_to_4(self[e1]))
                - (other.group0().yy().extend_to_4(other[e12345], self[e423]) * self.group2().truncate_to_3().extend_to_4(other[e235])),
            // e41, e42, e43
            (Simd32x3::from(self[e423]) * Simd32x3::from([other[e321], other[e3], other[e425]]))
                + (Simd32x3::from(self[e431]) * Simd32x3::from([other[e435], other[e321], other[e1]]))
                + (Simd32x3::from(self[e412]) * Simd32x3::from([other[e2], other[e415], other[e321]]))
                + (Simd32x3::from(self[e4]) * other.group1().truncate_to_3())
                + (other.group7().zxy() * self.group1().yzx())
                + (other.group7().zxy() * self.group3().yzx())
                - (Simd32x3::from(self[e4]) * other.group6().truncate_to_3())
                - (Simd32x3::from(other[e12345]) * self.group0())
                - (Simd32x3::from(other[e4]) * self.group1().truncate_to_3())
                - (Simd32x3::from(other[e4]) * self.group3().truncate_to_3())
                - (Simd32x3::from([self[e435], self[e415], self[e2]]) * other.group7().yzx())
                - (Simd32x3::from([self[e3], self[e1], self[e321]]) * other.group7().yzz())
                - (Simd32x3::from([other[e3], other[e435], other[e2]]) * self.group0().yxx())
                - (Simd32x3::from([other[e425], other[e1], other[e415]]) * self.group0().zzy())
                - (other.group7().xyx() * self.group1().wwy()),
            // e23, e31, e12
            (self.group0().yzx() * other.group8().zxy())
                + (other.group7().zxy() * self.group2().yzx())
                + (self.group1().yzx() * other.group6().zxy())
                + (self.group3().yzx() * other.group1().zxy())
                - (Simd32x3::from(self[e321]) * other.group1().truncate_to_3())
                - (Simd32x3::from(self[e4]) * other.group8())
                - (Simd32x3::from(other[e12345]) * self.group1().truncate_to_3())
                - (Simd32x3::from(other[e4]) * self.group2().truncate_to_3())
                - (Simd32x3::from([self[e125], self[e235], self[e5]]) * other.group7().yzz())
                - (Simd32x3::from([self[e5], self[e5], self[e315]]) * other.group7().xyx())
                - (Simd32x3::from([other[e2], other[e321], other[e321]]) * self.group3().zyz())
                - (Simd32x3::from([other[e5], other[e125], other[e235]]) * self.group0().xxy())
                - (Simd32x3::from([other[e321], other[e3], other[e1]]) * self.group3().xxy())
                - (Simd32x3::from([other[e315], other[e5], other[e5]]) * self.group0().zyz())
                - (self.group1().zxy() * other.group6().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([self[e2] * other[e4125], self[e3] * other[e4235], self[e1] * other[e4315], self[e5] * other[e1234] * -1.0])
                + (Simd32x4::from(self[e4]) * other.group3().truncate_to_3().extend_to_4(other[e3215]))
                + (Simd32x4::from(other[scalar]) * self.group1())
                + (Simd32x4::from([other[e25], other[e3215], other[e3215], self[e315]]) * self.group0().zyz().extend_to_4(other[e42]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], self[e235]]) * self.group0().xxy().extend_to_4(other[e41]))
                + (Simd32x4::from([other[e1234], other[e1234], other[e1234], other[e4125]]) * self.group2().truncate_to_3().extend_to_4(self[e435]))
                + (self.group2().zx().extend_to_4(self[e5], other[e4235]) * other.group4().yzz().extend_to_4(self[e415]))
                + (self.group3().ww().extend_to_4(self[e315], self[e125]) * other.group4().xyx().extend_to_4(other[e43]))
                + (other.group5().yzx() * self.group1().zxy()).extend_to_4(self[e425] * other[e4315])
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], self[e2]]) * self.group3().xxy().extend_to_4(other[e31]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], self[e3]]) * self.group3().zyz().extend_to_4(other[e12]))
                - (other.group3().zxyx() * self.group0().yzx().extend_to_4(self[e423]))
                - (other.group4().zxy() * self.group2().yzx()).extend_to_4(self[e431] * other[e25])
                - (other.group5().zxy() * self.group1().yzx()).extend_to_4(self[e412] * other[e35])
                - (self.group1().www() * other.group9().truncate_to_3()).extend_to_4(self[e1] * other[e23]),
            // e423, e431, e412
            (Simd32x3::from(self[e4]) * other.group5())
                + (Simd32x3::from(self[e4]) * other.group9().truncate_to_3())
                + (Simd32x3::from(other[scalar]) * self.group0())
                + (Simd32x3::from(other[e1234]) * self.group1().truncate_to_3())
                + (Simd32x3::from(other[e1234]) * self.group3().truncate_to_3())
                + (Simd32x3::from([self[e435], self[e415], self[e2]]) * other.group4().yzx())
                + (Simd32x3::from([self[e3], self[e1], self[e321]]) * other.group4().yzz())
                + (Simd32x3::from([other[e45], other[e12], other[e23]]) * self.group0().xxy())
                + (Simd32x3::from([other[e31], other[e4125], other[e4235]]) * self.group0().zxy())
                + (Simd32x3::from([other[e4315], other[e45], other[e45]]) * self.group0().zyz())
                + (other.group4().xyx() * self.group1().wwy())
                - (self.group0().yzx() * other.group5().zxy())
                - (self.group0().yzx() * other.group9().zxy())
                - (other.group4().zxy() * self.group1().yzx())
                - (other.group4().zxy() * self.group3().yzx()),
            // e235, e315, e125
            (Simd32x3::from(other[scalar]) * self.group2().truncate_to_3())
                + (Simd32x3::from([self[e125], self[e235], self[e5]]) * other.group5().yzz())
                + (Simd32x3::from([self[e5], self[e5], self[e315]]) * other.group5().xyx())
                + (Simd32x3::from([other[e25], other[e3215], other[e3215]]) * self.group1().zyz())
                + (Simd32x3::from([other[e3215], other[e35], other[e15]]) * self.group1().xxy())
                + (self.group2().yzx() * other.group9().zxy())
                + (self.group3().yzx() * other.group3().zxy())
                - (Simd32x3::from(self[e321]) * other.group3().truncate_to_3())
                - (Simd32x3::from(self[e5]) * other.group9().truncate_to_3())
                - (Simd32x3::from([other[e25], other[e3215], other[e3215]]) * self.group3().zyz())
                - (Simd32x3::from([other[e45], other[e4125], other[e4235]]) * self.group2().xxy())
                - (Simd32x3::from([other[e4315], other[e45], other[e45]]) * self.group2().zyz())
                - (Simd32x3::from([other[e3215], other[e35], other[e15]]) * self.group3().xxy())
                - (other.group5().zxy() * self.group2().yzx())
                - (self.group1().yzx() * other.group3().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e2] * other[e435] * -1.0, self[e3] * other[e415] * -1.0, self[e1] * other[e425] * -1.0, self[e125] * other[e435]])
                + (Simd32x4::from([other[e2], other[e321], other[e321], other[e2]]) * self.group1().zyz().extend_to_4(self[e315]))
                + (Simd32x4::from([other[e5], other[e125], other[e235], self[e425]]) * self.group0().xxy().extend_to_4(other[e315]))
                + (Simd32x4::from([other[e321], other[e3], other[e1], other[e415]]) * self.group1().xxy().extend_to_4(self[e235]))
                + (Simd32x4::from([other[e315], other[e5], other[e5], self[e435]]) * self.group0().zyz().extend_to_4(other[e125]))
                + (other.group6().xyzy() * self.group1().www().extend_to_4(self[e315]))
                + (other.group0().yy().extend_to_4(other[e12345], other[e235]) * self.group3().truncate_to_3().extend_to_4(self[e415]))
                + (other.group8() * self.group2().www()).extend_to_4(self[e235] * other[e1])
                + (other.group7().zxy() * self.group2().yzx()).extend_to_4(self[e321] * other[e5])
                + (self.group3().zxy() * other.group6().yzx()).extend_to_4(self[e125] * other[e3])
                - (self.group2().zx().extend_to_4(self[e5], self[e2]) * other.group7().yzz().extend_to_4(other[e315]))
                - (self.group3().ww().extend_to_4(self[e315], self[e1]) * other.group7().xyx().extend_to_4(other[e235]))
                - (self.group0().yzx() * other.group8().zxy()).extend_to_4(self[e5] * other[e12345])
                - (self.group1().yzx() * other.group1().zxy()).extend_to_4(self[e3] * other[e125])
                - (other.group1().www() * self.group2().truncate_to_3()).extend_to_4(self[e5] * other[e321]),
            // e1234
            (self[e423] * other[e415])
                + (self[e431] * other[e425])
                + (self[e412] * other[e435])
                + (self[e415] * other[e423])
                + (self[e425] * other[e431])
                + (self[e435] * other[e412])
                + (self[e4] * other[e321])
                + (self[e1] * other[e423])
                + (self[e2] * other[e431])
                + (self[e3] * other[e412])
                - (self[e423] * other[e1])
                - (self[e431] * other[e2])
                - (self[e412] * other[e3])
                - (self[e321] * other[e4])
                - (self[e4] * other[e12345]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44      102        0
    //    simd3        0       18        0
    //    simd4       56       41        0
    // Totals...
    // yes simd      100      161        0
    //  no simd      268      320        0
    fn sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e431] * other[e4125] * -1.0,
                self[e412] * other[e4235] * -1.0,
                self[e423] * other[e4315] * -1.0,
                (self[e2] * other[e4315]) + (self[e3] * other[e4125]),
            ]) + (other.group0().xyzx() * self.group2().www().extend_to_4(self[e1]))
                + (other.group0().yzxw() * self.group0().zxy().extend_to_4(self[e4])),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(self[e321] * other[e4235]) - (self[e3] * other[e4315]),
                -(self[e321] * other[e4315]) - (self[e1] * other[e4125]),
                -(self[e321] * other[e4125]) - (self[e2] * other[e4235]),
                (self[e435] * other[e4125]) + (self[e4] * other[e3215]),
            ]) + (other.group0().zxyy() * self.group3().yzx().extend_to_4(self[e425]))
                + (other.group0().wwwx() * self.group0().extend_to_4(self[e415])),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e1] * other[e3215]) - (self[e5] * other[e4235]),
                -(self[e2] * other[e3215]) - (self[e5] * other[e4315]),
                -(self[e3] * other[e3215]) - (self[e5] * other[e4125]),
                self[e125] * other[e4125],
            ]) + (self.group2().yzxy() * other.group0().zxyy())
                + (other.group0().wwwx() * self.group1().truncate_to_3().extend_to_4(self[e235]))
                - (other.group0().yzxw() * self.group2().zxy().extend_to_4(self[e321])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e423] * other[e3215]) + (self[e425] * other[e4125]),
                (self[e431] * other[e3215]) + (self[e435] * other[e4235]),
                (self[e412] * other[e3215]) + (self[e415] * other[e4315]),
                -(self[e431] * other[e4315]) - (self[e412] * other[e4125]),
            ]) - (other.group0().yzxx() * self.group1().zxy().extend_to_4(self[e423])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       39       88        0
    //    simd3        0       16        0
    //    simd4       61       49        0
    // Totals...
    // yes simd      100      153        0
    //  no simd      283      332        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([self[e1] * other[e4] * -1.0, self[e2] * other[e4] * -1.0, self[e3] * other[e4] * -1.0, self[e3] * other[e3]])
                + (other.group0().xyzy() * self.group2().www().extend_to_4(self[e2]))
                + (other.group0().yzxx() * self.group0().zxy().extend_to_4(self[e1]))
                - (Simd32x4::from(other[e4]) * self.group1().truncate_to_3().extend_to_4(self[e5]))
                - (self.group0().yzx() * other.group0().zxy()).extend_to_4(self[e4] * other[e5]),
            // e23, e31, e12, e45
            (self.group3().yzx() * other.group0().zxy()).extend_to_4(self[e4] * other[e5])
                - (Simd32x4::from([other[e5], other[e5], other[e5], other[e1]]) * self.group0().extend_to_4(self[e415]))
                - (self.group1().wwwy() * other.group0().xyzy())
                - (self.group3().zxyw() * other.group0().yzxw())
                - (other.group0().wwwz() * self.group2().truncate_to_3().extend_to_4(self[e435])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e315] * other[e3]) + (self[e1] * other[e5]),
                (self[e125] * other[e1]) + (self[e2] * other[e5]),
                (self[e235] * other[e2]) + (self[e3] * other[e5]),
                self[e321] * other[e4] * -1.0,
            ]) - (Simd32x4::from([other[e5], other[e5], other[e5], other[e1]]) * self.group1().truncate_to_3().extend_to_4(self[e423]))
                - (other.group0().xyzz() * self.group3().www().extend_to_4(self[e412]))
                - (other.group0().yzxy() * self.group2().zxy().extend_to_4(self[e431])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(self[e425] * other[e3]) - (self[e235] * other[e4]),
                -(self[e435] * other[e1]) - (self[e315] * other[e4]),
                -(self[e415] * other[e2]) - (self[e125] * other[e4]),
                (self[e315] * other[e2]) + (self[e125] * other[e3]),
            ]) + (Simd32x4::from(other[e5]) * self.group0().extend_to_4(self[e321]))
                + (other.group0().yzxx() * self.group1().zxy().extend_to_4(self[e235])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       33       55        0
    //    simd3        0       12        0
    //    simd4       44       40        0
    // Totals...
    // yes simd       77      107        0
    //  no simd      209      251        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[scalar]) * self.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other[scalar]) * self.group1(),
            // e235, e315, e125, e4
            Simd32x4::from(other[scalar]) * self.group2(),
            // e1, e2, e3, e5
            Simd32x4::from(other[scalar]) * self.group3(),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       35       99        0
    //    simd3        0       20        0
    //    simd4       62       45        0
    // Totals...
    // yes simd       97      164        0
    //  no simd      283      339        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e431] * other[e4125] * -1.0,
                self[e412] * other[e4235] * -1.0,
                self[e423] * other[e4315] * -1.0,
                self[e5] * other[e1234],
            ]) + (Simd32x4::from([other[e1234], other[e1234], other[e1234], other[e4235]]) * self.group1().truncate_to_3().extend_to_4(self[e1]))
                + (Simd32x4::from([other[e1234], other[e1234], other[e1234], other[e4125]]) * self.group3().xyzz())
                + (other.group0().xyzy() * self.group2().www().extend_to_4(self[e2]))
                + (other.group0().yzxw() * self.group0().zxy().extend_to_4(self[e4])),
            // e415, e425, e435, e321
            Simd32x4::from([self[e3] * other[e4315] * -1.0, self[e1] * other[e4125] * -1.0, self[e2] * other[e4235] * -1.0, self[e4] * other[e3215]])
                + (Simd32x4::from([other[e1234], other[e1234], other[e1234], other[e4315]]) * self.group2().truncate_to_3().extend_to_4(self[e425]))
                + (other.group0().zxyz() * self.group3().yzx().extend_to_4(self[e435]))
                + (other.group0().wwwx() * self.group0().extend_to_4(self[e415]))
                - (self.group1().www() * other.group0().truncate_to_3()).extend_to_4(self[e5] * other[e1234]),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e1] * other[e3215]) - (self[e5] * other[e4235]),
                -(self[e2] * other[e3215]) - (self[e5] * other[e4315]),
                -(self[e3] * other[e3215]) - (self[e5] * other[e4125]),
                self[e125] * other[e4125],
            ]) + (self.group2().yzxy() * other.group0().zxyy())
                + (other.group0().wwwx() * self.group1().truncate_to_3().extend_to_4(self[e235]))
                - (other.group0().yzxw() * self.group2().zxy().extend_to_4(self[e321])),
            // e1, e2, e3, e4
            Simd32x4::from([self[e425] * other[e4125], self[e435] * other[e4235], self[e415] * other[e4315], self[e412] * other[e4125] * -1.0])
                + (self.group0() * other.group0().www()).extend_to_4(self[e321] * other[e1234])
                - (Simd32x4::from([other[e1234], other[e1234], other[e1234], other[e4315]]) * self.group2().truncate_to_3().extend_to_4(self[e431]))
                - (other.group0().yzxx() * self.group1().zxy().extend_to_4(self[e423])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64      131        0
    //    simd3        0       28        0
    //    simd4       96       71        0
    // Totals...
    // yes simd      160      230        0
    //  no simd      448      499        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(self[e415] * other[e4]) - (self[e435] * other[e431]) - (self[e321] * other[e423]) - (self[e4] * other[e415]) - (self[e1] * other[e4]) - (self[e3] * other[e431]),
                -(self[e415] * other[e412]) - (self[e425] * other[e4]) - (self[e321] * other[e431]) - (self[e4] * other[e425]) - (self[e1] * other[e412]) - (self[e2] * other[e4]),
                -(self[e425] * other[e423]) - (self[e435] * other[e4]) - (self[e321] * other[e412]) - (self[e4] * other[e435]) - (self[e2] * other[e423]) - (self[e3] * other[e4]),
                (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412]) + (self[e1] * other[e1]) + (self[e2] * other[e2]) + (self[e3] * other[e3]),
            ]) + (Simd32x4::from(self[e423]) * Simd32x4::from([other[e321], other[e3], other[e425], other[e235]]))
                + (Simd32x4::from(self[e431]) * other.group1().zw().extend_to_4(other[e1], other[e315]))
                + (Simd32x4::from(self[e412]) * Simd32x4::from([other[e2], other[e415], other[e321], other[e125]]))
                + (self.group1().yzxx() * other.group0().zxy().extend_to_4(other[e415]))
                + (self.group2().www() * other.group3().truncate_to_3()).extend_to_4(self[e425] * other[e425])
                + (self.group3().yzx() * other.group0().zxy()).extend_to_4(self[e435] * other[e435])
                - (Simd32x4::from([other[e12345], other[e435], other[e2], other[e321]]) * self.group0().xxx().extend_to_4(self[e321]))
                - (Simd32x4::from([other[e425], other[e1], other[e12345], other[e4]]) * self.group0().zzz().extend_to_4(self[e5]))
                - (Simd32x4::from([other[e3], other[e12345], other[e415], other[e5]]) * self.group0().yyy().extend_to_4(self[e4])),
            // e23, e31, e12, e45
            Simd32x4::from([self[e5] * other[e423] * -1.0, self[e5] * other[e431] * -1.0, self[e5] * other[e412] * -1.0, self[e4] * other[e5]])
                + (self.group2().yzxy() * other.group0().zxyy())
                + (self.group0().yzx() * other.group2().zxy()).extend_to_4(self[e321] * other[e12345])
                + (self.group1().yzx() * other.group1().zxy()).extend_to_4(self[e235] * other[e423])
                + (self.group3().yzx() * other.group3().zxy()).extend_to_4(self[e125] * other[e412])
                - (Simd32x4::from([other[e431], other[e4], other[e4], other[e415]]) * self.group2().zyz().extend_to_4(self[e1]))
                - (Simd32x4::from([other[e12345], other[e435], other[e415], other[e125]]) * self.group1().xxy().extend_to_4(self[e412]))
                - (Simd32x4::from([other[e425], other[e12345], other[e12345], other[e1]]) * self.group1().zyzx())
                - (Simd32x4::from([other[e321], other[e3], other[e1], other[e435]]) * self.group3().xxyz())
                - (Simd32x4::from([other[e2], other[e321], other[e321], other[e4]]) * self.group3().zyzw())
                - (Simd32x4::from([other[e4], other[e412], other[e423], other[e3]]) * self.group2().xxy().extend_to_4(self[e435]))
                - (self.group1().wwwy() * other.group3().xyzy())
                - (other.group2().ywwy() * self.group0().zyz().extend_to_4(self[e431]))
                - (other.group2().wzxx() * self.group0().xxy().extend_to_4(self[e423]))
                - (self.group2().www() * other.group2().truncate_to_3()).extend_to_4(self[e2] * other[e425]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(self[e125] * other[e2]) - (self[e2] * other[e125]) - (self[e5] * other[e415]) - (self[e5] * other[e1]),
                -(self[e315] * other[e321]) - (self[e3] * other[e235]) - (self[e5] * other[e425]) - (self[e5] * other[e2]),
                -(self[e125] * other[e321]) - (self[e1] * other[e315]) - (self[e5] * other[e435]) - (self[e5] * other[e3]),
                (self[e4] * other[e321]) + (self[e1] * other[e423]) + (self[e2] * other[e431]) + (self[e3] * other[e412]),
            ]) + (other.group1().zxyz() * self.group2().yzx().extend_to_4(self[e412]))
                + (self.group1().yzx() * other.group2().zxy()).extend_to_4(self[e423] * other[e415])
                + (self.group1().www() * other.group2().truncate_to_3()).extend_to_4(self[e431] * other[e425])
                + (self.group2().yzx() * other.group3().zxy()).extend_to_4(self[e415] * other[e423])
                + (self.group3().xxy() * other.group2().wzx()).extend_to_4(self[e425] * other[e431])
                + (self.group3().zyz() * other.group2().yww()).extend_to_4(self[e435] * other[e412])
                - (Simd32x4::from([other[e12345], other[e435], other[e415], other[e3]]) * self.group2().xxy().extend_to_4(self[e412]))
                - (Simd32x4::from([other[e425], other[e12345], other[e12345], other[e12345]]) * self.group2().zyzw())
                - (Simd32x4::from([other[e321], other[e3], other[e1], other[e4]]) * self.group2().xxy().extend_to_4(self[e321]))
                - (self.group1().xxy() * other.group2().wzx()).extend_to_4(self[e423] * other[e1])
                - (self.group1().zyz() * other.group2().yww()).extend_to_4(self[e431] * other[e2]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e5] * other[e423] * -1.0, self[e5] * other[e431] * -1.0, self[e5] * other[e412] * -1.0, self[e125] * other[e3]])
                + (Simd32x4::from([other[e12345], other[e435], other[e415], other[e2]]) * self.group3().xxy().extend_to_4(self[e315]))
                + (Simd32x4::from([other[e425], other[e12345], other[e12345], other[e435]]) * self.group3().zyz().extend_to_4(self[e125]))
                + (Simd32x4::from([other[e321], other[e3], other[e1], other[e125]]) * self.group1().xxyz())
                + (Simd32x4::from([other[e2], other[e321], other[e321], other[e5]]) * self.group1().zyzw())
                + (self.group2().yzxx() * other.group0().zxy().extend_to_4(other[e1]))
                + (self.group2().wwwy() * other.group2().truncate_to_3().extend_to_4(other[e425]))
                + (other.group1().xyzx() * self.group1().www().extend_to_4(self[e235]))
                + (other.group2().ywwy() * self.group0().zyz().extend_to_4(self[e425]))
                + (other.group2().wzxx() * self.group0().xxy().extend_to_4(self[e415]))
                - (Simd32x4::from([other[e431], other[e4], other[e4], other[e12345]]) * self.group2().zyz().extend_to_4(self[e5]))
                - (Simd32x4::from([other[e4], other[e412], other[e423], other[e125]]) * self.group2().xxy().extend_to_4(self[e3]))
                - (self.group3().yzxw() * other.group1().zxyw())
                - (other.group2().zxyx() * self.group0().yzx().extend_to_4(self[e1]))
                - (self.group1().yzx() * other.group3().zxy()).extend_to_4(self[e2] * other[e315]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       68      130        0
    //    simd3        0       28        0
    //    simd4       95       71        0
    // Totals...
    // yes simd      163      229        0
    //  no simd      448      498        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e435] * other[e42]) + (self[e321] * other[e41]) + (self[e4] * other[e23]) + (self[e4] * other[e4235]) + (self[e1] * other[e1234]) + (self[e3] * other[e42]),
                (self[e425] * other[e1234]) + (self[e321] * other[e42]) + (self[e4] * other[e31]) + (self[e4] * other[e4315]) + (self[e1] * other[e43]) + (self[e2] * other[e1234]),
                (self[e435] * other[e1234]) + (self[e321] * other[e43]) + (self[e4] * other[e12]) + (self[e4] * other[e4125]) + (self[e2] * other[e41]) + (self[e3] * other[e1234]),
                -(self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e321] * other[e45])
                    - (self[e235] * other[e41])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
            ]) + (Simd32x4::from([other[scalar], other[e12], other[e23], other[e3215]]) * self.group0().xxy().extend_to_4(self[e4]))
                + (Simd32x4::from([other[e31], other[scalar], other[scalar], other[e4315]]) * self.group0().zyz().extend_to_4(self[e2]))
                + (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e4235]]) * self.group0().xxy().extend_to_4(self[e1]))
                + (Simd32x4::from([other[e1234], other[e43], other[e41], other[e1234]]) * self.group1().xxy().extend_to_4(self[e5]))
                + (Simd32x4::from([other[e4315], other[e45], other[e45], other[e4125]]) * self.group0().zyz().extend_to_4(self[e3]))
                - (self.group0().yzx() * other.group1().zxy()).extend_to_4(self[e423] * other[e15])
                - (self.group0().yzx() * other.group3().zxy()).extend_to_4(self[e431] * other[e25])
                - (self.group1().yzx() * other.group0().zxy()).extend_to_4(self[e412] * other[e35])
                - (self.group3().yzx() * other.group0().zxy()).extend_to_4(self[e415] * other[e23]),
            // e415, e425, e435, e321
            Simd32x4::from([self[e5] * other[e41], self[e5] * other[e42], self[e5] * other[e43], self[e5] * other[e1234] * -1.0])
                + (Simd32x4::from([other[e42], other[e1234], other[e1234], other[e42]]) * self.group2().zyzy())
                + (Simd32x4::from([other[scalar], other[e12], other[e23], other[e4125]]) * self.group1().xxyz())
                + (Simd32x4::from([other[e31], other[scalar], other[scalar], other[scalar]]) * self.group1().zyzw())
                + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e4315]]) * self.group0().zyz().extend_to_4(self[e425]))
                + (Simd32x4::from([other[e1234], other[e43], other[e41], other[e41]]) * self.group2().xxyx())
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e4235]]) * self.group0().xxy().extend_to_4(self[e415]))
                + (self.group2().wwwz() * other.group2().truncate_to_3().extend_to_4(other[e43]))
                + (other.group3().zxyw() * self.group3().yzx().extend_to_4(self[e4]))
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e31]]) * self.group3().xxyy())
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e12]]) * self.group3().zyzz())
                - (other.group2().zxyx() * self.group0().yzx().extend_to_4(self[e423]))
                - (self.group1().yzx() * other.group1().zxy()).extend_to_4(self[e431] * other[e25])
                - (self.group1().www() * other.group3().truncate_to_3()).extend_to_4(self[e412] * other[e35])
                - (self.group2().yzx() * other.group0().zxy()).extend_to_4(self[e1] * other[e23]),
            // e235, e315, e125, e5
            (Simd32x4::from(self[e5]) * other.group1().truncate_to_3().extend_to_4(other[scalar]))
                + (Simd32x4::from([other[scalar], other[e12], other[e4315], other[e4125]]) * self.group2().xxxz())
                + (Simd32x4::from([other[e31], other[e4235], other[scalar], other[e25]]) * self.group2().zzz().extend_to_4(self[e2]))
                + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e4315]]) * self.group1().zyz().extend_to_4(self[e315]))
                + (Simd32x4::from([other[e4125], other[scalar], other[e23], other[e15]]) * self.group2().yyy().extend_to_4(self[e1]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e4235]]) * self.group1().xxy().extend_to_4(self[e235]))
                + (self.group3().yzxz() * other.group2().zxyz())
                - (Simd32x4::from(self[e5]) * other.group3().truncate_to_3().extend_to_4(other[e45]))
                - (Simd32x4::from([other[e45], other[e4125], other[e31], other[e35]]) * self.group2().xxx().extend_to_4(self[e435]))
                - (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e12]]) * self.group3().zyz().extend_to_4(self[e125]))
                - (Simd32x4::from([other[e4315], other[e23], other[e45], other[e23]]) * self.group2().zzzx())
                - (Simd32x4::from([other[e3215], other[e35], other[e15], other[e31]]) * self.group3().xxy().extend_to_4(self[e315]))
                - (self.group1().yzxx() * other.group2().zxyx())
                - (self.group1().wwwy() * other.group2().xyzy())
                - (other.group1().zw().extend_to_4(other[e4235], other[e3215]) * self.group2().yyy().extend_to_4(self[e321])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e321] * other[e23]) + (self[e315] * other[e43]) + (self[e4] * other[e15]) + (self[e1] * other[scalar]) + (self[e3] * other[e31]),
                (self[e321] * other[e31]) + (self[e125] * other[e41]) + (self[e4] * other[e25]) + (self[e1] * other[e12]) + (self[e2] * other[scalar]),
                (self[e321] * other[e12]) + (self[e235] * other[e42]) + (self[e4] * other[e35]) + (self[e2] * other[e23]) + (self[e3] * other[scalar]),
                -(self[e425] * other[e42]) - (self[e435] * other[e43]) - (self[e1] * other[e41]) - (self[e2] * other[e42]) - (self[e3] * other[e43]),
            ]) + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[scalar]]) * self.group0().zyz().extend_to_4(self[e4]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e1234]]) * self.group0().xxy().extend_to_4(self[e321]))
                + (self.group1().yzx() * other.group3().zxy()).extend_to_4(self[e4] * other[e45])
                - (Simd32x4::from([other[e42], other[e1234], other[e1234], other[e12]]) * self.group2().zyz().extend_to_4(self[e412]))
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e4235]]) * self.group1().xxy().extend_to_4(self[e423]))
                - (Simd32x4::from([other[e1234], other[e43], other[e41], other[e4315]]) * self.group2().xxy().extend_to_4(self[e431]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e31]]) * self.group1().zyz().extend_to_4(self[e431]))
                - (other.group0().xyzx() * self.group3().www().extend_to_4(self[e415]))
                - (self.group0().yzx() * other.group2().zxy()).extend_to_4(self[e423] * other[e23])
                - (self.group3().yzx() * other.group1().zxy()).extend_to_4(self[e412] * other[e4125]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl std::ops::Div<sandwich> for AntiDualNum {
    type Output = sandwich_partial<AntiDualNum>;
    fn div(self, _rhs: sandwich) -> Self::Output {
        sandwich_partial(self)
    }
}
impl Sandwich<AntiCircleRotor> for AntiDualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       19        0
    //    simd3        4        7        0
    //    simd4        2        5        0
    // Totals...
    // yes simd        9       31        0
    //  no simd       23       60        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(self[scalar]) * other.group0().extend_to_4(other[scalar]),
            // e23, e31, e12, e45
            ((Simd32x3::from(self[e3215]) * other.group0()) + (Simd32x3::from(self[scalar]) * other.group1().truncate_to_3())).extend_to_4(other[e45] * self[scalar]),
            // e15, e25, e35, e1234
            ((Simd32x3::from(self[e3215]) * other.group1().truncate_to_3()) + (Simd32x3::from(self[scalar]) * other.group2().truncate_to_3())).extend_to_4(0.0),
            // e4235, e4315, e4125, e3215
            self.group0().xx().extend_to_4(self[e3215], (other[scalar] * self[e3215]) - (other[e45] * self[e3215])) * other.group0().extend_to_4(1.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for AntiDualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1       12        0
    //    simd3        2        4        0
    //    simd4        6       10        0
    // Totals...
    // yes simd        9       26        0
    //  no simd       31       64        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            self.group0().yy().extend_to_4(self[scalar], self[e3215]) * other.group0().extend_to_4(other[e4]),
            // e415, e425, e435, e321
            Simd32x4::from([other[e415] * self[scalar], other[e425] * self[scalar], other[e435] * self[scalar], other[e4] * self[e3215] * -1.0])
                + (self.group0().xx().extend_to_4(self[e3215], self[scalar]) * other.group0().extend_to_4(other[e321])),
            // e235, e315, e125, e5
            Simd32x4::from([other[e235] * self[scalar], other[e315] * self[scalar], other[e125] * self[scalar], 0.0])
                + (Simd32x4::from(self[e3215]) * other.group1())
                + (other.group3() * self.group0().xx().extend_to_4(self[e3215], self[scalar])),
            // e1, e2, e3, e4
            ((Simd32x3::from(self[scalar]) * other.group3().truncate_to_3()) - (Simd32x3::from(self[e3215]) * other.group0())).extend_to_4(other[e4] * self[scalar]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for AntiDualNum {
    type Output = AntiDualNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDualNum::from_groups(
            // e3215, scalar
            Simd32x2::from([(other[e3215] * self[scalar]) + (other[scalar] * self[e3215]), other[scalar] * self[scalar]]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for AntiDualNum {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        4        0
    //    simd3        1        2        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        2        8        0
    //  no simd        4       18        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(self[scalar]) * other.group0(),
            // e1, e2, e3, e5
            Simd32x3::from(0.0).extend_to_4(self[e3215] * other[e321]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for AntiDualNum {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd3        2        4        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        4       12        0
    //  no simd        8       26        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            ((Simd32x3::from(self[e3215]) * other.group1().truncate_to_3()) + (Simd32x3::from(self[scalar]) * other.group0().truncate_to_3()))
                .extend_to_4(self[scalar] * other[e321]),
            // e1, e2, e3, e5
            Simd32x4::from([other[e1], other[e2], other[e3], 1.0]) * self.group0().yy().extend_to_4(self[scalar], (self[e3215] * other[e321]) + (self[scalar] * other[e5])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for AntiDualNum {
    type Output = AntiLine;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        2        6        0
    // no simd        6       18        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(self[scalar]) * other.group0(),
            // e15, e25, e35
            (Simd32x3::from(self[e3215]) * other.group0()) + (Simd32x3::from(self[scalar]) * other.group1()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for AntiDualNum {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        2        6        0
    // no simd        8       24        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(self[scalar]) * other.group0(),
            // e15, e25, e35, e3215
            (Simd32x4::from(self[e3215]) * other.group0()) + (Simd32x4::from(self[scalar]) * other.group1()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for AntiDualNum {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        3        0
    //    simd3        1        2        0
    //    simd4        0        5        0
    // Totals...
    // yes simd        2       10        0
    //  no simd        4       29        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            self.group0().xx().extend_to_4(self[e3215], 0.0)
                * Simd32x3::from(1.0).extend_to_4(0.0)
                * other.group0().truncate_to_3().extend_to_4(0.0)
                * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
            // e1, e2, e3, e5
            Simd32x4::from(self[scalar]) * other.group0(),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for AntiDualNum {
    type Output = DualNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        3        0
    //    simd2        0        1        0
    // Totals...
    // yes simd        1        4        0
    //  no simd        1        5        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DualNum::from_groups(/* e5, e12345 */ Simd32x2::from(other[e12345]) * self.group0());
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for AntiDualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        5        0
    //    simd3        3        7        0
    //    simd4        3        7        0
    // Totals...
    // yes simd        6       19        0
    //  no simd       21       54        0
    fn sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[scalar]) * other.group0(),
            // e415, e425, e435, e321
            ((Simd32x3::from(self[e3215]) * other.group0()) + (Simd32x3::from(self[scalar]) * other.group1().truncate_to_3())).extend_to_4(self[scalar] * other[e321]),
            // e235, e315, e125, e4
            ((Simd32x3::from(self[e3215]) * other.group1().truncate_to_3()) + (Simd32x3::from(self[scalar]) * other.group2())).extend_to_4(0.0),
            // e1, e2, e3, e5
            Simd32x4::from(self[e3215]) * other.group0().extend_to_4(other[e321]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for AntiDualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        4        0
    //    simd3        2        4        0
    //    simd4        4       12        0
    // Totals...
    // yes simd        7       20        0
    //  no simd       23       64        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(self[scalar]) * other.group0().extend_to_4(other[e12345]),
            // e415, e425, e435, e321
            ((Simd32x3::from(self[e3215]) * other.group0()) + (Simd32x3::from(self[scalar]) * other.group1().truncate_to_3())).extend_to_4(self[scalar] * other[e321]),
            // e235, e315, e125, e5
            (Simd32x4::from(self[e3215]) * other.group1()) + (other.group2() * self.group0().yy().extend_to_4(self[scalar], self[e3215])),
            // e1, e2, e3, e4
            self.group0().xx().extend_to_4(self[e3215], 0.0) * Simd32x3::from(1.0).extend_to_4(0.0) * other.group0().extend_to_4(0.0) * Simd32x4::from([-1.0, -1.0, -1.0, 0.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for AntiDualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0       14        0
    //    simd3        4        8        0
    //    simd4        2        5        0
    // Totals...
    // yes simd        6       27        0
    //  no simd       20       58        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[scalar]) * other.group0(),
            // e23, e31, e12, e45
            ((Simd32x3::from(self[e3215]) * other.group0()) + (Simd32x3::from(self[scalar]) * other.group1().truncate_to_3())).extend_to_4(self[scalar] * other[e45]),
            // e15, e25, e35, e1234
            ((Simd32x3::from(self[e3215]) * other.group1().truncate_to_3()) + (Simd32x3::from(self[scalar]) * other.group2())).extend_to_4(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e3215]) * other.group0().extend_to_4(other[e45]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for AntiDualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2       22        0
    //    simd3        4        6        0
    //    simd4        4        7        0
    // Totals...
    // yes simd       10       35        0
    //  no simd       30       68        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            self.group0().yy().extend_to_4(self[scalar], self[e3215]) * other.group0().extend_to_4(other[e1234]),
            // e23, e31, e12, e45
            (Simd32x4::from(self[e3215]) * other.group0().extend_to_4(other[e1234])) + (Simd32x4::from(self[scalar]) * other.group1()),
            // e15, e25, e35, e1234
            ((Simd32x3::from(self[e3215]) * other.group1().truncate_to_3()) + (Simd32x3::from(self[scalar]) * other.group2().truncate_to_3())
                - (Simd32x3::from(self[e3215]) * other.group3().truncate_to_3()))
            .extend_to_4(self[scalar] * other[e1234]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[scalar] * other[e4235], self[scalar] * other[e4315], self[scalar] * other[e4125], self[e3215] * other[e45] * -1.0])
                + (self.group0().xx().extend_to_4(self[e3215], self[scalar]) * other.group0().extend_to_4(other[e3215])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for AntiDualNum {
    type Output = DualNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DualNum::from_groups(
            // e5, e12345
            Simd32x2::from([(self[e3215] * other[e12345]) + (self[scalar] * other[e5]), self[scalar] * other[e12345]]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for AntiDualNum {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd3        1        2        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        2        9        0
    //  no simd        4       19        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(self[scalar]) * other.group0(),
            // e4235, e4315, e4125, e3215
            Simd32x3::from(0.0).extend_to_4(self[e3215] * other[e45] * -1.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for AntiDualNum {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd3        2        4        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        4       12        0
    //  no simd        8       26        0
    fn sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            ((Simd32x3::from(self[scalar]) * other.group0().truncate_to_3()) - (Simd32x3::from(self[e3215]) * other.group1().truncate_to_3()))
                .extend_to_4(self[scalar] * other[e45]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([other[e4235], other[e4315], other[e4125], 1.0])
                * self.group0().yy().extend_to_4(self[scalar], (self[scalar] * other[e3215]) - (self[e3215] * other[e45])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for AntiDualNum {
    type Output = Line;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        2        6        0
    // no simd        6       18        0
    fn sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(self[scalar]) * other.group0(),
            // e235, e315, e125
            (Simd32x3::from(self[e3215]) * other.group0()) + (Simd32x3::from(self[scalar]) * other.group1()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for AntiDualNum {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        2        6        0
    // no simd        8       24        0
    fn sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(self[scalar]) * other.group0(),
            // e235, e315, e125, e5
            (Simd32x4::from(self[e3215]) * other.group0()) + (Simd32x4::from(self[scalar]) * other.group1()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for AntiDualNum {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       39        0
    //    simd2        2        4        0
    //    simd3        8       18        0
    //    simd4        8        9        0
    // Totals...
    // yes simd       26       70        0
    //  no simd       68      137        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from(self[e3215]) * Simd32x2::from([other[e1234], other[e4]])) + (Simd32x2::from(self[scalar]) * other.group0()),
            // e1, e2, e3, e4
            ((Simd32x3::from(self[scalar]) * other.group1().truncate_to_3()) - (Simd32x3::from(self[e3215]) * other.group7())).extend_to_4(self[scalar] * other[e4]),
            // e5
            (self[e3215] * other[e12345]) + (self[e3215] * other[e321]) + (self[scalar] * other[e5]),
            // e15, e25, e35, e45
            Simd32x4::from([self[e3215] * other[e4235] * -1.0, self[e3215] * other[e4315] * -1.0, self[e3215] * other[e4125] * -1.0, 0.0])
                + (Simd32x4::from(self[e3215]) * other.group5().extend_to_4(other[e1234]))
                + (Simd32x4::from(self[scalar]) * other.group3()),
            // e41, e42, e43
            Simd32x3::from(self[scalar]) * other.group4(),
            // e23, e31, e12
            (Simd32x3::from(self[e3215]) * other.group4()) + (Simd32x3::from(self[scalar]) * other.group5()),
            // e415, e425, e435, e321
            Simd32x4::from([self[scalar] * other[e415], self[scalar] * other[e425], self[scalar] * other[e435], self[e3215] * other[e4] * -1.0])
                + (self.group0().xx().extend_to_4(self[e3215], self[scalar]) * other.group7().extend_to_4(other[e321])),
            // e423, e431, e412
            Simd32x3::from(self[scalar]) * other.group7(),
            // e235, e315, e125
            (Simd32x3::from(self[e3215]) * other.group1().truncate_to_3())
                + (Simd32x3::from(self[e3215]) * other.group6().truncate_to_3())
                + (Simd32x3::from(self[scalar]) * other.group8()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[e3215]) * other.group4().extend_to_4(other[scalar]))
                + (Simd32x4::from(self[scalar]) * other.group9())
                + Simd32x3::from(0.0).extend_to_4(self[e3215] * other[e45] * -1.0),
            // e1234
            self[scalar] * other[e1234],
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for AntiDualNum {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        3        0
    //    simd3        1        2        0
    //    simd4        0        5        0
    // Totals...
    // yes simd        2       10        0
    //  no simd        4       29        0
    fn sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            self.group0().xx().extend_to_4(self[e3215], 0.0)
                * Simd32x3::from(1.0).extend_to_4(0.0)
                * other.group0().truncate_to_3().extend_to_4(0.0)
                * Simd32x4::from([-1.0, -1.0, -1.0, 0.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[scalar]) * other.group0(),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for AntiDualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        6        0
    //    simd3        1        2        0
    //    simd4        3        8        0
    // Totals...
    // yes simd        5       16        0
    //  no simd       16       44        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x3::from(0.0).extend_to_4(self[e3215] * other[e4]),
            // e415, e425, e435, e321
            Simd32x3::from(0.0).extend_to_4(self[e3215] * other[e4] * -1.0),
            // e235, e315, e125, e5
            self.group0().xx().extend_to_4(self[e3215], self[scalar]) * other.group0().truncate_to_3().extend_to_4(other[e5]),
            // e1, e2, e3, e4
            Simd32x4::from(self[scalar]) * other.group0(),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for AntiDualNum {
    type Output = AntiDualNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        3        0
    //    simd2        0        1        0
    // Totals...
    // yes simd        1        4        0
    //  no simd        1        5        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDualNum::from_groups(/* e3215, scalar */ Simd32x2::from(other[scalar]) * self.group0());
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for AntiDualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2       18        0
    //    simd3        2        3        0
    //    simd4        2        6        0
    // Totals...
    // yes simd        6       27        0
    //  no simd       16       51        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x3::from(0.0).extend_to_4(self[e3215] * other[e1234]),
            // e23, e31, e12, e45
            Simd32x3::from(0.0).extend_to_4(self[e3215] * other[e1234]),
            // e15, e25, e35, e1234
            self.group0().xx().extend_to_4(self[e3215], self[scalar]) * other.group0().truncate_to_3().extend_to_4(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[scalar]) * other.group0(),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for AntiDualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2       11        0
    //    simd3        2        4        0
    //    simd4        6       11        0
    // Totals...
    // yes simd       10       26        0
    //  no simd       32       67        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([other[e423], other[e431], other[e412], 1.0]) * self.group0().yy().extend_to_4(self[scalar], (self[e3215] * other[e4]) + (self[scalar] * other[e12345])),
            // e415, e425, e435, e321
            Simd32x4::from([self[scalar] * other[e415], self[scalar] * other[e425], self[scalar] * other[e435], self[e3215] * other[e4] * -1.0])
                + (self.group0().xx().extend_to_4(self[e3215], self[scalar]) * other.group0().truncate_to_3().extend_to_4(other[e321])),
            // e235, e315, e125, e5
            (Simd32x4::from(self[e3215]) * other.group1().truncate_to_3().extend_to_4(other[e12345]))
                + (Simd32x4::from(self[e3215]) * other.group3().truncate_to_3().extend_to_4(other[e321]))
                + (Simd32x4::from(self[scalar]) * other.group2()),
            // e1, e2, e3, e4
            ((Simd32x3::from(self[scalar]) * other.group3().truncate_to_3()) - (Simd32x3::from(self[e3215]) * other.group0().truncate_to_3()))
                .extend_to_4(self[scalar] * other[e4]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for AntiDualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       21        0
    //    simd3        4        6        0
    //    simd4        5        8        0
    // Totals...
    // yes simd       12       35        0
    //  no simd       35       71        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([other[e41], other[e42], other[e43], 1.0]) * self.group0().yy().extend_to_4(self[scalar], (self[e3215] * other[e1234]) + (self[scalar] * other[scalar])),
            // e23, e31, e12, e45
            (Simd32x4::from(self[e3215]) * other.group0().truncate_to_3().extend_to_4(other[e1234])) + (Simd32x4::from(self[scalar]) * other.group1()),
            // e15, e25, e35, e1234
            ((Simd32x3::from(self[e3215]) * other.group1().truncate_to_3()) + (Simd32x3::from(self[scalar]) * other.group2().truncate_to_3())
                - (Simd32x3::from(self[e3215]) * other.group3().truncate_to_3()))
            .extend_to_4(self[scalar] * other[e1234]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[e3215]) * other.group0()) + (Simd32x4::from(self[scalar]) * other.group3()) + Simd32x3::from(0.0).extend_to_4(self[e3215] * other[e45] * -1.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl std::ops::Div<sandwich> for AntiFlatPoint {
    type Output = sandwich_partial<AntiFlatPoint>;
    fn div(self, _rhs: sandwich) -> Self::Output {
        sandwich_partial(self)
    }
}
impl Sandwich<AntiCircleRotor> for AntiFlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       27        0
    //    simd3        6       10        0
    //    simd4       13       15        0
    // Totals...
    // yes simd       32       52        0
    //  no simd       83      117        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([self[e321], self[e321], self[e321], 1.0])
                * other
                    .group0()
                    .extend_to_4(-(other[e41] * self[e235]) - (other[e42] * self[e315]) - (other[e43] * self[e125]) - (other[e45] * self[e321])),
            // e415, e425, e435, e321
            Simd32x4::from([
                other[e43] * self[e315] * -1.0,
                other[e41] * self[e125] * -1.0,
                other[e42] * self[e235] * -1.0,
                (other[e42] * self[e315]) + (other[e43] * self[e125]) + (other[scalar] * self[e321]),
            ]) + (self.group0().zxyx() * other.group0().yzx().extend_to_4(other[e41])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e31] * self[e125]) + (other[scalar] * self[e235]),
                (other[e12] * self[e235]) + (other[scalar] * self[e315]),
                (other[e23] * self[e315]) + (other[scalar] * self[e125]),
                0.0,
            ]) - (other.group1().zxyx() * self.group0().yzxx())
                - (other.group1().wwwy() * self.group0().xyzy())
                - (self.group0().wwwz() * other.group2().truncate_to_3().extend_to_4(other[e12])),
            // e1, e2, e3, e4
            (Simd32x3::from(self[e321]) * other.group1().truncate_to_3()).extend_to_4(0.0) + (other.group0().zxy() * self.group0().yzx()).extend_to_4(0.0)
                - (other.group0().yzx() * self.group0().zxy()).extend_to_4(0.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for AntiFlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       55        0
    //    simd3        8       10        0
    //    simd4        9       14        0
    // Totals...
    // yes simd       49       79        0
    //  no simd       92      141        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([self[e321], self[e321], self[e321], 1.0])
                * other
                    .group0()
                    .extend_to_4((other[e423] * self[e235]) + (other[e431] * self[e315]) + (other[e412] * self[e125]) - (other[e321] * self[e321]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(other[e431] * self[e125]) - (other[e4] * self[e235]) - (other[e1] * self[e321]),
                -(other[e412] * self[e235]) - (other[e4] * self[e315]) - (other[e2] * self[e321]),
                -(other[e423] * self[e315]) - (other[e4] * self[e125]) - (other[e3] * self[e321]),
                (other[e431] * self[e315]) + (other[e412] * self[e125]),
            ]) + (self.group0().yzxx() * other.group0().zxy().extend_to_4(other[e423])),
            // e15, e25, e35, e1234
            ((Simd32x3::from(self[e321]) * other.group2().truncate_to_3()) + (other.group1().zxy() * self.group0().yzx()) + (other.group3().zxy() * self.group0().yzx())
                - (Simd32x3::from(other[e321]) * self.group0().truncate_to_3())
                - (other.group1().yzx() * self.group0().zxy())
                - (other.group3().yzx() * self.group0().zxy()))
            .extend_to_4(other[e4] * self[e321] * -1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(other[e431] * self[e125]) - (other[e4] * self[e235]),
                -(other[e412] * self[e235]) - (other[e4] * self[e315]),
                -(other[e423] * self[e315]) - (other[e4] * self[e125]),
                (other[e435] * self[e125]) + (other[e1] * self[e235]) + (other[e2] * self[e315]) + (other[e3] * self[e125]) + (other[e5] * self[e321]),
            ]) + (other.group1().xyzy() * self.group0().wwwy())
                + (self.group0().yzxx() * other.group0().zxy().extend_to_4(other[e415])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for AntiFlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       10        0
    //    simd4        2        6        0
    // Totals...
    // yes simd        6       16        0
    //  no simd       12       34        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(other[scalar]) * self.group0(),
            // e1, e2, e3, e5
            Simd32x3::from(0.0).extend_to_4(other[e3215] * self[e321] * -1.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for AntiFlatPoint {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        7        0
    //    simd3        4        6        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        7       15        0
    //  no simd       15       33        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x3::from(0.0).extend_to_4(other[e321] * self[e321] * -1.0),
            // e15, e25, e35, e3215
            ((Simd32x3::from(self[e321]) * other.group0().truncate_to_3()) - (Simd32x3::from(other[e321]) * self.group0().truncate_to_3())).extend_to_4(0.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for AntiFlatPoint {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       13        0
    //    simd3        3        4        0
    //    simd4        2        6        0
    // Totals...
    // yes simd       12       23        0
    //  no simd       24       49        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(self[e321]) * other.group1().truncate_to_3().extend_to_4(other[e321]) * Simd32x4::from(-1.0),
            // e15, e25, e35, e3215
            Simd32x4::from([
                -(self[e235] * other[e321]) - (self[e125] * other[e2]),
                -(self[e235] * other[e3]) - (self[e315] * other[e321]),
                -(self[e315] * other[e1]) - (self[e125] * other[e321]),
                (self[e125] * other[e3]) + (self[e321] * other[e5]),
            ]) + (self.group0().yzxx() * other.group1().zxyx())
                + (self.group0().wwwy() * other.group0().truncate_to_3().extend_to_4(other[e2])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for AntiFlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       11        0
    //    simd3        0        3        0
    //    simd4        4        6        0
    // Totals...
    // yes simd       10       20        0
    //  no simd       22       44        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            (other.group0().yzx() * self.group0().zxy()).extend_to_4(0.0)
                - (Simd32x3::from(self[e321]) * other.group1()).extend_to_4(0.0)
                - (other.group0().zxy() * self.group0().yzx()).extend_to_4(0.0),
            // e1, e2, e3, e5
            Simd32x4::from([self[e321], self[e321], self[e321], 1.0])
                * other.group0().extend_to_4(-(self[e235] * other[e23]) - (self[e315] * other[e31]) - (self[e125] * other[e12])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for AntiFlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       13        0
    //    simd3        3        4        0
    //    simd4        2        6        0
    // Totals...
    // yes simd       12       23        0
    //  no simd       24       49        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            ((self.group0().xxy() * other.group0().wzx()) + (self.group0().zyz() * other.group0().yww())
                - (Simd32x3::from(self[e321]) * other.group1().truncate_to_3())
                - (self.group0().yzx() * other.group0().zxy()))
            .extend_to_4(self[e321] * other[scalar]),
            // e1, e2, e3, e5
            Simd32x4::from([other[e23], other[e31], other[e12], 1.0])
                * self
                    .group0()
                    .www()
                    .extend_to_4(-(self[e235] * other[e23]) - (self[e315] * other[e31]) - (self[e125] * other[e12]) - (self[e321] * other[e3215])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for AntiFlatPoint {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       14        0
    //    simd3        3        4        0
    //    simd4        1        6        0
    // Totals...
    // yes simd        9       24        0
    //  no simd       18       50        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x3::from(1.0).extend_to_4(0.0) * self.group0().www().extend_to_4(0.0) * other.group0().truncate_to_3().extend_to_4(0.0) * Simd32x4::from([-1.0, -1.0, -1.0, 0.0]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                self[e125] * other[e2] * -1.0,
                self[e235] * other[e3] * -1.0,
                self[e315] * other[e1] * -1.0,
                (self[e315] * other[e2]) + (self[e125] * other[e3]) + (self[e321] * other[e5]),
            ]) + (self.group0().yzxx() * other.group0().zxyx()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for AntiFlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd3        1        2        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        1        7        0
    //  no simd        3       20        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = FlatPoint::from_groups(/* e15, e25, e35, e45 */ Simd32x4::from(other[e12345]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for AntiFlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       47        0
    //    simd3        3        9        0
    //    simd4       12       13        0
    // Totals...
    // yes simd       34       69        0
    //  no simd       76      126        0
    fn sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([self[e321], self[e321], self[e321], 1.0])
                * other
                    .group0()
                    .extend_to_4((self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412]) - (self[e321] * other[e321]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            Simd32x4::from([
                self[e125] * other[e431] * -1.0,
                self[e235] * other[e412] * -1.0,
                self[e315] * other[e423] * -1.0,
                (self[e315] * other[e431]) + (self[e125] * other[e412]),
            ]) + (self.group0().yzxx() * other.group0().zxy().extend_to_4(other[e423])),
            // e15, e25, e35, e1234
            (Simd32x3::from(self[e321]) * other.group2()).extend_to_4(0.0) + (self.group0().yzx() * other.group1().zxy()).extend_to_4(0.0)
                - (self.group0().xxy() * other.group1().wzx()).extend_to_4(0.0)
                - (self.group0().zyz() * other.group1().yww()).extend_to_4(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e125] * other[e431] * -1.0,
                self[e235] * other[e412] * -1.0,
                self[e315] * other[e423] * -1.0,
                self[e125] * other[e435],
            ]) + (self.group0().wwwy() * other.group1().xyzy())
                + (other.group0().zxy() * self.group0().yzx()).extend_to_4(self[e235] * other[e415]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for AntiFlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       48        0
    //    simd3        3       10        0
    //    simd4       13       13        0
    // Totals...
    // yes simd       36       71        0
    //  no simd       81      130        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([self[e321], self[e321], self[e321], 1.0])
                * other
                    .group0()
                    .extend_to_4((self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412]) - (self[e321] * other[e321]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            Simd32x4::from([
                self[e125] * other[e431] * -1.0,
                self[e235] * other[e412] * -1.0,
                self[e315] * other[e423] * -1.0,
                (self[e315] * other[e431]) + (self[e125] * other[e412]) + (self[e321] * other[e12345]),
            ]) + (self.group0().yzxx() * other.group0().zxy().extend_to_4(other[e423])),
            // e15, e25, e35, e1234
            (Simd32x3::from(self[e321]) * other.group2().truncate_to_3()).extend_to_4(0.0) + (self.group0().yzx() * other.group1().zxy()).extend_to_4(0.0)
                - (Simd32x3::from([other[e425], other[e12345], other[e12345]]) * self.group0().zyz()).extend_to_4(0.0)
                - (Simd32x3::from([other[e12345], other[e321], other[e321]]) * self.group0().truncate_to_3()).extend_to_4(0.0)
                - (self.group0().xxy() * other.group1().wzx()).extend_to_4(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e125] * other[e431] * -1.0,
                self[e235] * other[e412] * -1.0,
                self[e315] * other[e423] * -1.0,
                self[e125] * other[e435],
            ]) + (self.group0().wwwy() * other.group1().xyzy())
                + (other.group0().zxy() * self.group0().yzx()).extend_to_4(self[e235] * other[e415]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for AntiFlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       24        0
    //    simd3        6       11        0
    //    simd4       13       14        0
    // Totals...
    // yes simd       28       49        0
    //  no simd       79      113        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([self[e321], self[e321], self[e321], 1.0])
                * other
                    .group0()
                    .extend_to_4(-(self[e235] * other[e41]) - (self[e315] * other[e42]) - (self[e125] * other[e43]) - (self[e321] * other[e45])),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e315] * other[e43] * -1.0,
                self[e125] * other[e41] * -1.0,
                self[e235] * other[e42] * -1.0,
                (self[e315] * other[e42]) + (self[e125] * other[e43]),
            ]) + (self.group0().zxyx() * other.group0().yzx().extend_to_4(other[e41])),
            // e235, e315, e125, e5
            Simd32x4::from([self[e125] * other[e31], self[e235] * other[e12], self[e315] * other[e23], 0.0])
                - (self.group0().xyxy() * other.group1().wwyy())
                - (self.group0().yzzz() * other.group1().zxwz())
                - (other.group2() * self.group0().www()).extend_to_4(self[e235] * other[e23]),
            // e1, e2, e3, e4
            (Simd32x3::from(self[e321]) * other.group1().truncate_to_3()).extend_to_4(0.0) + (other.group0().zxy() * self.group0().yzx()).extend_to_4(0.0)
                - (other.group0().yzx() * self.group0().zxy()).extend_to_4(0.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for AntiFlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       22        0
    //    simd3        9       12        0
    //    simd4       15       18        0
    // Totals...
    // yes simd       35       52        0
    //  no simd       98      130        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([self[e321], self[e321], self[e321], 1.0])
                * other
                    .group0()
                    .extend_to_4(-(self[e235] * other[e41]) - (self[e315] * other[e42]) - (self[e125] * other[e43]) - (self[e321] * other[e45])),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(self[e315] * other[e43]) - (self[e321] * other[e4235]),
                -(self[e125] * other[e41]) - (self[e321] * other[e4315]),
                -(self[e235] * other[e42]) - (self[e321] * other[e4125]),
                self[e125] * other[e43],
            ]) + (self.group0().zxyx() * other.group0().yzx().extend_to_4(other[e41]))
                + (other.group2().www() * self.group0().truncate_to_3()).extend_to_4(self[e315] * other[e42]),
            // e235, e315, e125, e5
            (Simd32x4::from([other[e31], other[e4235], other[e23], other[e4315]]) * self.group0().zzyy())
                + (Simd32x4::from([other[e4125], other[e12], other[e4315], other[e4235]]) * self.group0().yxxx())
                + Simd32x3::from(0.0).extend_to_4(self[e125] * other[e4125])
                - (Simd32x4::from(self[e235]) * Simd32x4::from([other[e45], other[e4125], other[e31], other[e23]]))
                - (Simd32x4::from(self[e315]) * other.group1().zw().extend_to_4(other[e4235], other[e31]))
                - (Simd32x4::from(self[e125]) * Simd32x4::from([other[e4315], other[e23], other[e45], other[e12]]))
                - (Simd32x4::from(self[e321]) * other.group2().truncate_to_3().extend_to_4(other[e3215])),
            // e1, e2, e3, e4
            ((Simd32x3::from(self[e321]) * other.group1().truncate_to_3()) + (other.group0().zxy() * self.group0().yzx())
                - (Simd32x3::from(other[e1234]) * self.group0().truncate_to_3())
                - (other.group0().yzx() * self.group0().zxy()))
            .extend_to_4(self[e321] * other[e1234]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for AntiFlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        9        0
    //    simd4        2        7        0
    // Totals...
    // yes simd        6       16        0
    //  no simd       12       37        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(other[e12345]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            Simd32x3::from(0.0).extend_to_4(self[e321] * other[e5]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for AntiFlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        7        0
    //    simd3        4        6        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        7       15        0
    //  no simd       15       33        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x3::from(0.0).extend_to_4(self[e321] * other[e45] * -1.0),
            // e235, e315, e125, e5
            (-(Simd32x3::from(self[e321]) * other.group0().truncate_to_3()) - (Simd32x3::from(other[e45]) * self.group0().truncate_to_3())).extend_to_4(0.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for AntiFlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       13        0
    //    simd3        3        4        0
    //    simd4        2        6        0
    // Totals...
    // yes simd       12       23        0
    //  no simd       24       49        0
    fn sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(self[e321]) * other.group1().truncate_to_3().extend_to_4(other[e45]) * Simd32x4::from(-1.0),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e125] * other[e4315]) - (self[e321] * other[e15]),
                -(self[e315] * other[e45]) - (self[e321] * other[e25]),
                -(self[e125] * other[e45]) - (self[e321] * other[e35]),
                (self[e315] * other[e4315]) + (self[e125] * other[e4125]),
            ]) + (self.group0().yzxx() * other.group1().zxyx())
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e3215]]) * self.group0().xxyw()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for AntiFlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       11        0
    //    simd3        0        3        0
    //    simd4        4        6        0
    // Totals...
    // yes simd       10       20        0
    //  no simd       22       44        0
    fn sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x3::from(self[e321]) * other.group1()).extend_to_4(0.0) + (other.group0().zxy() * self.group0().yzx()).extend_to_4(0.0)
                - (other.group0().yzx() * self.group0().zxy()).extend_to_4(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e321], self[e321], self[e321], 1.0])
                * other.group0().extend_to_4((self[e235] * other[e415]) + (self[e315] * other[e425]) + (self[e125] * other[e435])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for AntiFlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       13        0
    //    simd3        3        4        0
    //    simd4        2        6        0
    // Totals...
    // yes simd       12       23        0
    //  no simd       24       49        0
    fn sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            ((Simd32x3::from(self[e321]) * other.group1().truncate_to_3()) + (self.group0().yzx() * other.group0().zxy())
                - (self.group0().xxy() * other.group0().wzx())
                - (self.group0().zyz() * other.group0().yww()))
            .extend_to_4(self[e321] * other[e12345]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([other[e415], other[e425], other[e435], 1.0])
                * self
                    .group0()
                    .www()
                    .extend_to_4((self[e235] * other[e415]) + (self[e315] * other[e425]) + (self[e125] * other[e435]) + (self[e321] * other[e5])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for AntiFlatPoint {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       87        0
    //    simd2        2        2        0
    //    simd3       24       42        0
    //    simd4       18       13        0
    // Totals...
    // yes simd       92      144        0
    //  no simd      196      269        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412]),
                -(self[e315] * other[e42]) - (self[e125] * other[e43]) - (self[e321] * other[e45]),
            ]) - (Simd32x2::from([other[e321], other[e41]]) * self.group0().wx()),
            // e1, e2, e3, e4
            ((Simd32x3::from(self[e321]) * other.group5()) + (other.group4().zxy() * self.group0().yzx())
                - (Simd32x3::from(other[e1234]) * self.group0().truncate_to_3())
                - (other.group4().yzx() * self.group0().zxy()))
            .extend_to_4(self[e321] * other[e1234]),
            // e5
            (self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125])
                - (self[e235] * other[e23])
                - (self[e315] * other[e31])
                - (self[e125] * other[e12])
                - (self[e321] * other[e3215]),
            // e15, e25, e35, e45
            Simd32x4::from([
                -(self[e235] * other[e12345]) - (self[e235] * other[e321]) - (self[e125] * other[e2]) - (self[e125] * other[e425]),
                -(self[e235] * other[e3]) - (self[e235] * other[e435]) - (self[e315] * other[e12345]) - (self[e315] * other[e321]),
                -(self[e315] * other[e1]) - (self[e315] * other[e415]) - (self[e125] * other[e12345]) - (self[e125] * other[e321]),
                self[e125] * other[e412],
            ]) + (Simd32x4::from(self[e321]) * other.group8().extend_to_4(other[e12345]))
                + (self.group0().yzx() * other.group1().zxy()).extend_to_4(self[e235] * other[e423])
                + (self.group0().yzx() * other.group6().zxy()).extend_to_4(self[e315] * other[e431]),
            // e41, e42, e43
            Simd32x3::from(self[e321]) * other.group7() * Simd32x3::from(-1.0),
            // e23, e31, e12
            (other.group7().zxy() * self.group0().yzx())
                - (Simd32x3::from(self[e321]) * other.group1().truncate_to_3())
                - (Simd32x3::from(other[e4]) * self.group0().truncate_to_3())
                - (other.group7().yzx() * self.group0().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(self[e315] * other[e43]) - (self[e321] * other[e4235]),
                -(self[e125] * other[e41]) - (self[e321] * other[e4315]),
                -(self[e235] * other[e42]) - (self[e321] * other[e4125]),
                (self[e315] * other[e42]) + (self[e125] * other[e43]),
            ]) + (Simd32x4::from([other[e1234], other[e1234], other[e1234], self[e235]]) * self.group0().truncate_to_3().extend_to_4(other[e41]))
                + (self.group0().zxyw() * other.group4().yzx().extend_to_4(other[scalar])),
            // e423, e431, e412
            Simd32x3::from(self[e321]) * other.group4(),
            // e235, e315, e125
            (Simd32x3::from(other[scalar]) * self.group0().truncate_to_3()) + (other.group5().yzx() * self.group0().zxy()) + (self.group0().yzx() * other.group9().zxy())
                - (Simd32x3::from(self[e321]) * other.group3().truncate_to_3())
                - (Simd32x3::from([other[e45], other[e4125], other[e4235]]) * self.group0().xxy())
                - (Simd32x3::from([other[e4315], other[e45], other[e45]]) * self.group0().zyz())
                - (other.group5().zxy() * self.group0().yzx()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(self[e235] * other[e4]) - (self[e125] * other[e431]),
                -(self[e235] * other[e412]) - (self[e315] * other[e4]),
                -(self[e315] * other[e423]) - (self[e125] * other[e4]),
                (self[e315] * other[e2]) + (self[e315] * other[e425]) + (self[e125] * other[e3]) + (self[e125] * other[e435]) + (self[e321] * other[e5]),
            ]) + (self.group0().wwwx() * other.group6().xyzx())
                + (other.group7().zxy() * self.group0().yzx()).extend_to_4(self[e235] * other[e1]),
            // e1234
            self[e321] * other[e4] * -1.0,
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for AntiFlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        7        0
    //    simd3        3        4        0
    //    simd4        2        7        0
    // Totals...
    // yes simd        9       18        0
    //  no simd       21       47        0
    fn sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x3::from(1.0).extend_to_4(0.0) * self.group0().www().extend_to_4(0.0) * other.group0().truncate_to_3().extend_to_4(0.0) * Simd32x4::from([-1.0, -1.0, -1.0, 0.0]),
            // e235, e315, e125, e5
            (self.group0().yzxx() * other.group0().zxyx()) + Simd32x3::from(0.0).extend_to_4((self[e315] * other[e4315]) + (self[e125] * other[e4125]))
                - (self.group0().zxyw() * other.group0().yzxw()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for AntiFlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       34        0
    //    simd3        5        9        0
    //    simd4        5        9        0
    // Totals...
    // yes simd       28       52        0
    //  no simd       53       97        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            (-(Simd32x3::from(self[e321]) * other.group0().truncate_to_3()) - (Simd32x3::from(other[e4]) * self.group0().truncate_to_3())).extend_to_4(0.0),
            // e15, e25, e35, e1234
            ((self.group0().yzx() * other.group0().zxy()) - (self.group0().zxy() * other.group0().yzx())).extend_to_4(self[e321] * other[e4] * -1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([other[e4], other[e4], other[e4], 1.0])
                * self
                    .group0()
                    .truncate_to_3()
                    .extend_to_4((self[e235] * other[e1]) + (self[e315] * other[e2]) + (self[e125] * other[e3]) + (self[e321] * other[e5]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for AntiFlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd3        1        2        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        1        6        0
    //  no simd        3       16        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ Simd32x4::from(other[scalar]) * self.group0());
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for AntiFlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       16        0
    //    simd3        7       10        0
    //    simd4        7       11        0
    // Totals...
    // yes simd       22       37        0
    //  no simd       57       90        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            ((Simd32x3::from(other[e1234]) * self.group0().truncate_to_3()) - (Simd32x3::from(self[e321]) * other.group0().truncate_to_3())).extend_to_4(0.0),
            // e235, e315, e125, e4
            ((self.group0().yzx() * other.group0().zxy()) - (self.group0().zxy() * other.group0().yzx())).extend_to_4(self[e321] * other[e1234]),
            // e1, e2, e3, e5
            Simd32x4::from([other[e1234], other[e1234], other[e1234], 1.0])
                * self
                    .group0()
                    .truncate_to_3()
                    .extend_to_4((self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125]) - (self[e321] * other[e3215]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for AntiFlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       33       56        0
    //    simd3        9       11        0
    //    simd4        9       14        0
    // Totals...
    // yes simd       51       81        0
    //  no simd       96      145        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([other[e423], other[e431], other[e412], 1.0])
                * self
                    .group0()
                    .www()
                    .extend_to_4((self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412]) - (self[e321] * other[e321]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(self[e235] * other[e4]) - (self[e125] * other[e431]) - (self[e321] * other[e1]),
                -(self[e235] * other[e412]) - (self[e315] * other[e4]) - (self[e321] * other[e2]),
                -(self[e315] * other[e423]) - (self[e125] * other[e4]) - (self[e321] * other[e3]),
                (self[e315] * other[e431]) + (self[e125] * other[e412]) + (self[e321] * other[e12345]),
            ]) + (self.group0().yzxx() * other.group0().zxyx()),
            // e15, e25, e35, e1234
            ((Simd32x3::from(self[e321]) * other.group2().truncate_to_3()) + (self.group0().yzx() * other.group1().zxy()) + (self.group0().yzx() * other.group3().zxy())
                - (Simd32x3::from([other[e12345], other[e435], other[e415]]) * self.group0().xxy())
                - (Simd32x3::from([other[e425], other[e12345], other[e12345]]) * self.group0().zyz())
                - (Simd32x3::from([other[e321], other[e3], other[e1]]) * self.group0().xxy())
                - (Simd32x3::from([other[e2], other[e321], other[e321]]) * self.group0().zyz()))
            .extend_to_4(self[e321] * other[e4] * -1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(self[e235] * other[e4]) - (self[e125] * other[e431]),
                -(self[e235] * other[e412]) - (self[e315] * other[e4]),
                -(self[e315] * other[e423]) - (self[e125] * other[e4]),
                (self[e315] * other[e425]) + (self[e315] * other[e2]) + (self[e125] * other[e435]) + (self[e125] * other[e3]) + (self[e321] * other[e5]),
            ]) + (self.group0().yzxx() * other.group0().zxy().extend_to_4(other[e415]))
                + (self.group0().wwwx() * other.group1().truncate_to_3().extend_to_4(other[e1])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for AntiFlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       21        0
    //    simd3        9       11        0
    //    simd4       15       20        0
    // Totals...
    // yes simd       36       52        0
    //  no simd       99      134        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([other[e41], other[e42], other[e43], 1.0])
                * self
                    .group0()
                    .www()
                    .extend_to_4(-(self[e235] * other[e41]) - (self[e315] * other[e42]) - (self[e125] * other[e43]) - (self[e321] * other[e45])),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(self[e315] * other[e43]) - (self[e321] * other[e4235]),
                -(self[e125] * other[e41]) - (self[e321] * other[e4315]),
                -(self[e235] * other[e42]) - (self[e321] * other[e4125]),
                (self[e125] * other[e43]) + (self[e321] * other[scalar]),
            ]) + (Simd32x4::from([other[e42], other[e1234], other[e1234], other[e42]]) * self.group0().zyzy())
                + (Simd32x4::from([other[e1234], other[e43], other[e41], other[e41]]) * self.group0().xxyx()),
            // e235, e315, e125, e5
            (Simd32x4::from(self[e235]) * Simd32x4::from([other[scalar], other[e12], other[e4315], other[e4235]]))
                + (Simd32x4::from(self[e315]) * Simd32x4::from([other[e4125], other[scalar], other[e23], other[e4315]]))
                + (Simd32x4::from(self[e125]) * Simd32x4::from([other[e31], other[e4235], other[scalar], other[e4125]]))
                - (Simd32x4::from(self[e235]) * Simd32x4::from([other[e45], other[e4125], other[e31], other[e23]]))
                - (Simd32x4::from(self[e315]) * other.group1().zw().extend_to_4(other[e4235], other[e31]))
                - (Simd32x4::from(self[e125]) * Simd32x4::from([other[e4315], other[e23], other[e45], other[e12]]))
                - (Simd32x4::from(self[e321]) * other.group2().truncate_to_3().extend_to_4(other[e3215])),
            // e1, e2, e3, e4
            ((Simd32x3::from(self[e321]) * other.group1().truncate_to_3()) + (self.group0().yzx() * other.group0().zxy())
                - (Simd32x3::from([other[e42], other[e1234], other[e1234]]) * self.group0().zyz())
                - (Simd32x3::from([other[e1234], other[e43], other[e41]]) * self.group0().xxy()))
            .extend_to_4(self[e321] * other[e1234]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl std::ops::Div<sandwich> for AntiFlector {
    type Output = sandwich_partial<AntiFlector>;
    fn div(self, _rhs: sandwich) -> Self::Output {
        sandwich_partial(self)
    }
}
impl Sandwich<AntiCircleRotor> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       43       60        0
    //    simd3        0        4        0
    //    simd4       38       37        0
    // Totals...
    // yes simd       81      101        0
    //  no simd      195      220        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e41] * self[e321]) + (other[e42] * self[e3]),
                (other[e42] * self[e321]) + (other[e43] * self[e1]),
                (other[e41] * self[e2]) + (other[e43] * self[e321]),
                -(other[e42] * self[e315]) - (other[e43] * self[e125]) - (other[e45] * self[e321]),
            ]) - (other.group0().zxy() * self.group1().yzx()).extend_to_4(other[e41] * self[e235]),
            // e415, e425, e435, e321
            (self.group0().zx().extend_to_4(self[e5], self[e315]) * other.group0().yzz().extend_to_4(other[e42]))
                + (self.group1().ww().extend_to_4(self[e315], self[e235]) * other.group0().xyx().extend_to_4(other[e41]))
                + Simd32x3::from(0.0).extend_to_4((other[e43] * self[e125]) + (other[scalar] * self[e321]) - (other[e12] * self[e3]))
                - (other.group1().wwwy() * self.group1().xyzy())
                - (other.group0().zxy() * self.group0().yzx()).extend_to_4(other[e23] * self[e1]),
            // e235, e315, e125, e5
            (Simd32x4::from(other[scalar]) * self.group0().truncate_to_3().extend_to_4(self[e5]))
                + (other.group2().zxyz() * self.group1().yzxz())
                + (self.group0().zx().extend_to_4(self[e5], self[e2]) * other.group1().yzz().extend_to_4(other[e25]))
                + (self.group1().ww().extend_to_4(self[e315], self[e1]) * other.group1().xyx().extend_to_4(other[e15]))
                - (other.group1().zxyx() * self.group0().yzxx())
                - (other.group1().wwwy() * self.group0().xyzy())
                - (self.group0().ww().extend_to_4(self[e2], self[e125]) * other.group2().xyx().extend_to_4(other[e12]))
                - (self.group1().zx().extend_to_4(self[e321], self[e5]) * other.group2().yzz().extend_to_4(other[e45])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e43] * self[e315]) + (other[e23] * self[e321]) + (other[e31] * self[e3]) + (other[scalar] * self[e1]),
                (other[e41] * self[e125]) + (other[e31] * self[e321]) + (other[e12] * self[e1]) + (other[scalar] * self[e2]),
                (other[e42] * self[e235]) + (other[e23] * self[e2]) + (other[e12] * self[e321]) + (other[scalar] * self[e3]),
                0.0,
            ]) - (self.group1().yzxz() * other.group1().zxy().extend_to_4(other[e43]))
                - (self.group0().zx().extend_to_4(self[e5], self[e2]) * other.group0().yzz().extend_to_4(other[e42]))
                - (self.group1().ww().extend_to_4(self[e315], self[e1]) * other.group0().xyx().extend_to_4(other[e41])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64       96        0
    //    simd3        0        5        0
    //    simd4       40       36        0
    // Totals...
    // yes simd      104      137        0
    //  no simd      224      255        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                other[e4] * self[e1] * -1.0,
                other[e4] * self[e2] * -1.0,
                other[e4] * self[e3] * -1.0,
                (other[e431] * self[e315]) + (other[e412] * self[e125]) + (other[e1] * self[e1]) + (other[e2] * self[e2]) + (other[e3] * self[e3]),
            ]) + (other.group0().zxy() * self.group1().yzx()).extend_to_4(other[e423] * self[e235])
                - (self.group0().ww().extend_to_4(self[e2], self[e321]) * other.group0().xyx().extend_to_4(other[e321]))
                - (self.group1().zx().extend_to_4(self[e321], self[e5]) * other.group0().yzz().extend_to_4(other[e4])),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(other[e1] * self[e321]) - (other[e2] * self[e3]),
                -(other[e2] * self[e321]) - (other[e3] * self[e1]),
                -(other[e1] * self[e2]) - (other[e3] * self[e321]),
                other[e412] * self[e125],
            ]) + (self.group0().yzxx() * other.group0().zxy().extend_to_4(other[e423]))
                + (other.group3().zxy() * self.group1().yzx()).extend_to_4(other[e431] * self[e315])
                - (Simd32x4::from(other[e4]) * self.group0().truncate_to_3().extend_to_4(self[e5]))
                - (other.group1().wwwz() * self.group1().xyzz())
                - (self.group0().zx().extend_to_4(self[e5], self[e2]) * other.group0().yzz().extend_to_4(other[e425]))
                - (self.group1().ww().extend_to_4(self[e315], self[e1]) * other.group0().xyx().extend_to_4(other[e415])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e3] * self[e315]) + (other[e5] * self[e1])
                    - (other[e425] * self[e125])
                    - (other[e321] * self[e235])
                    - (other[e125] * self[e2])
                    - (other[e1] * self[e5])
                    - (other[e2] * self[e125]),
                (other[e1] * self[e125]) + (other[e5] * self[e2])
                    - (other[e435] * self[e235])
                    - (other[e321] * self[e315])
                    - (other[e235] * self[e3])
                    - (other[e2] * self[e5])
                    - (other[e3] * self[e235]),
                (other[e2] * self[e235]) + (other[e5] * self[e3])
                    - (other[e435] * self[e5])
                    - (other[e321] * self[e125])
                    - (other[e315] * self[e1])
                    - (other[e1] * self[e315])
                    - (other[e3] * self[e5]),
                0.0,
            ]) + (self.group0().ww().extend_to_4(self[e2], self[e2]) * other.group2().xyx().extend_to_4(other[e431]))
                + (self.group1().zx().extend_to_4(self[e321], self[e3]) * other.group2().yzz().extend_to_4(other[e412]))
                + (other.group1().zxy() * self.group0().yzx()).extend_to_4(other[e423] * self[e1])
                - (self.group1().ww().extend_to_4(self[e315], self[e321]) * other.group1().xyx().extend_to_4(other[e4])),
            // e4235, e4315, e4125, e3215
            (other.group1().xyxy() * self.group0().ww().extend_to_4(self[e2], self[e315]))
                + (other.group1().yzzz() * self.group1().zx().extend_to_4(self[e321], self[e125]))
                + (self.group0().yzxx() * other.group0().zxy().extend_to_4(other[e415]))
                + Simd32x3::from(0.0).extend_to_4((other[e1] * self[e235]) + (other[e2] * self[e315]) + (other[e3] * self[e125]) + (other[e5] * self[e321]))
                - (other.group2().wwwz() * self.group0().truncate_to_3().extend_to_4(self[e3]))
                - (self.group1().yzxy() * other.group1().zxy().extend_to_4(other[e315]))
                - (self.group0().zx().extend_to_4(self[e5], self[e1]) * other.group0().yzz().extend_to_4(other[e235]))
                - (self.group1().ww().extend_to_4(self[e315], self[e5]) * other.group0().xyx().extend_to_4(other[e321])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for AntiFlector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       11        0
    //    simd3        1        2        0
    //    simd4        9       12        0
    // Totals...
    // yes simd       15       25        0
    //  no simd       44       65        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            ((Simd32x3::from(other[scalar]) * self.group0().truncate_to_3()) - (Simd32x3::from(other[e3215]) * self.group1().truncate_to_3()))
                .extend_to_4(other[scalar] * self[e321]),
            // e1, e2, e3, e5
            Simd32x4::from([self[e1], self[e2], self[e3], 1.0]) * other.group0().yy().extend_to_4(other[scalar], (other[scalar] * self[e5]) - (other[e3215] * self[e321])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for AntiFlector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       33        0
    //    simd4        8       11        0
    // Totals...
    // yes simd       28       44        0
    //  no simd       52       77        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(other[e321]) * self.group1().truncate_to_3().extend_to_4(self[e321]) * Simd32x4::from(-1.0),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (other[e235] * self[e321]) + (other[e315] * self[e3]),
                (other[e315] * self[e321]) + (other[e125] * self[e1]),
                (other[e235] * self[e2]) + (other[e125] * self[e321]),
                -(other[e125] * self[e3]) - (other[e321] * self[e5]),
            ]) - (other.group0().zxyx() * self.group1().yzxx())
                - (other.group0().wwwy() * self.group0().truncate_to_3().extend_to_4(self[e2])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for AntiFlector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       33        0
    //    simd4       15       17        0
    // Totals...
    // yes simd       35       50        0
    //  no simd       80      101        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                -(other[e1] * self[e321]) - (other[e2] * self[e3]),
                -(other[e2] * self[e321]) - (other[e3] * self[e1]),
                -(other[e1] * self[e2]) - (other[e3] * self[e321]),
                (other[e2] * self[e2]) + (other[e3] * self[e3]),
            ]) + (other.group1().zxyx() * self.group1().yzxx())
                - (Simd32x4::from(other[e321]) * self.group1().truncate_to_3().extend_to_4(self[e321])),
            // e15, e25, e35, e3215
            (Simd32x4::from(other[e5]) * self.group1().truncate_to_3().extend_to_4(self[e321]))
                + (other.group1().zxyz() * self.group0().yzxz())
                + (self.group0().ww().extend_to_4(self[e2], self[e235]) * other.group0().xyx().extend_to_4(other[e1]))
                + (self.group1().zx().extend_to_4(self[e321], self[e315]) * other.group0().yzz().extend_to_4(other[e2]))
                - (other.group0().zxyx() * self.group1().yzxx())
                - (other.group0().wwwy() * self.group0().truncate_to_3().extend_to_4(self[e2]))
                - (self.group0().zx().extend_to_4(self[e5], self[e5]) * other.group1().yzz().extend_to_4(other[e321]))
                - (self.group1().ww().extend_to_4(self[e315], self[e3]) * other.group1().xyx().extend_to_4(other[e125])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for AntiFlector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       22        0
    //    simd3        0        2        0
    //    simd4       15       15        0
    // Totals...
    // yes simd       27       39        0
    //  no simd       72       88        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (self[e125] * other[e31]) + (self[e2] * other[e35]) + (self[e5] * other[e23]),
                (self[e235] * other[e12]) + (self[e3] * other[e15]) + (self[e5] * other[e31]),
                (self[e315] * other[e23]) + (self[e1] * other[e25]) + (self[e5] * other[e12]),
                0.0,
            ]) - (self.group0().ww().extend_to_4(self[e2], self[e2]) * other.group1().xyx().extend_to_4(other[e31]))
                - (self.group1().zx().extend_to_4(self[e321], self[e3]) * other.group1().yzz().extend_to_4(other[e12]))
                - (other.group0().zxy() * self.group0().yzx()).extend_to_4(self[e1] * other[e23]),
            // e1, e2, e3, e5
            (self.group0().ww().extend_to_4(self[e2], self[e1]) * other.group0().xyx().extend_to_4(other[e15]))
                + (self.group1().zx().extend_to_4(self[e321], self[e2]) * other.group0().yzz().extend_to_4(other[e25]))
                + Simd32x3::from(0.0).extend_to_4((self[e3] * other[e35]) - (self[e315] * other[e31]) - (self[e125] * other[e12]))
                - (other.group0().zxy() * self.group1().yzx()).extend_to_4(self[e235] * other[e23]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for AntiFlector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       26        0
    //    simd3        0        2        0
    //    simd4       17       17        0
    // Totals...
    // yes simd       33       45        0
    //  no simd       84      100        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (self[e125] * other[e31]) + (self[e2] * other[e35]) + (self[e5] * other[e23]) - (self[e3] * other[e25]),
                (self[e315] * other[scalar]) + (self[e3] * other[e15]) + (self[e5] * other[e31]) - (self[e2] * other[e3215]),
                (self[e125] * other[scalar]) + (self[e1] * other[e25]) + (self[e5] * other[e12]) - (self[e3] * other[e3215]),
                0.0,
            ]) + (self.group0().xxyw() * other.group0().wzxw())
                - (self.group1().xxyz() * other.group1().wzx().extend_to_4(other[e12]))
                - (other.group0().zxyx() * self.group0().yzx().extend_to_4(self[e1]))
                - (self.group0().www() * other.group1().truncate_to_3()).extend_to_4(self[e2] * other[e31]),
            // e1, e2, e3, e5
            (self.group1().xxyy() * other.group0().wzx().extend_to_4(other[e25]))
                + (self.group1().zyzz() * other.group0().yww().extend_to_4(other[e35]))
                + Simd32x3::from(0.0).extend_to_4((self[e5] * other[scalar]) - (self[e315] * other[e31]) - (self[e125] * other[e12]) - (self[e321] * other[e3215]))
                + (self.group0().www() * other.group0().truncate_to_3()).extend_to_4(self[e1] * other[e15])
                - (other.group0().zxyx() * self.group1().yzx().extend_to_4(self[e235])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for AntiFlector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       41        0
    //    simd4        9       10        0
    // Totals...
    // yes simd       33       51        0
    //  no simd       60       81        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                -(self[e321] * other[e1]) - (self[e3] * other[e2]),
                -(self[e321] * other[e2]) - (self[e1] * other[e3]),
                -(self[e321] * other[e3]) - (self[e2] * other[e1]),
                (self[e2] * other[e2]) + (self[e3] * other[e3]),
            ]) + (self.group1().yzxx() * other.group0().zxyx()),
            // e15, e25, e35, e3215
            Simd32x4::from([
                -(self[e125] * other[e2]) - (self[e5] * other[e1]),
                -(self[e235] * other[e3]) - (self[e5] * other[e2]),
                -(self[e315] * other[e1]) - (self[e5] * other[e3]),
                (self[e125] * other[e3]) + (self[e321] * other[e5]),
            ]) + (self.group0().yzxx() * other.group0().zxyx())
                + (other.group0().wwwy() * self.group1().truncate_to_3().extend_to_4(self[e315])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for AntiFlector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       25        0
    //    simd3        0        1        0
    //    simd4        6       10        0
    // Totals...
    // yes simd       22       36        0
    //  no simd       40       68        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(other[e12345]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e12345]) * self.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       47       78        0
    //    simd3        0        6        0
    //    simd4       35       30        0
    // Totals...
    // yes simd       82      114        0
    //  no simd      187      216        0
    fn sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e3] * other[e431] * -1.0,
                self[e1] * other[e412] * -1.0,
                self[e321] * other[e412] * -1.0,
                (self[e315] * other[e431]) + (self[e125] * other[e412]),
            ]) + (other.group0().zxy() * self.group1().yzx()).extend_to_4(self[e235] * other[e423])
                - (self.group0().ww().extend_to_4(self[e2], other[e321]) * other.group0().xyx().extend_to_4(self[e321])),
            // e23, e31, e12, e45
            (self.group0().yzxx() * other.group0().zxy().extend_to_4(other[e423])) + Simd32x3::from(0.0).extend_to_4((self[e315] * other[e431]) + (self[e125] * other[e412]))
                - (self.group1().xyzz() * other.group1().wwwz())
                - (self.group0().zx().extend_to_4(self[e5], other[e425]) * other.group0().yzz().extend_to_4(self[e2]))
                - (self.group1().ww().extend_to_4(self[e315], other[e415]) * other.group0().xyx().extend_to_4(self[e1])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(self[e235] * other[e321]) - (self[e125] * other[e425]) - (self[e2] * other[e125]) - (self[e5] * other[e415]),
                -(self[e235] * other[e435]) - (self[e315] * other[e321]) - (self[e3] * other[e235]) - (self[e5] * other[e425]),
                -(self[e315] * other[e415]) - (self[e125] * other[e321]) - (self[e1] * other[e315]) - (self[e5] * other[e435]),
                0.0,
            ]) + (self.group0().ww().extend_to_4(self[e2], self[e1]) * other.group2().xyx().extend_to_4(other[e423]))
                + (self.group1().zx().extend_to_4(self[e321], self[e2]) * other.group2().yzz().extend_to_4(other[e431]))
                + (self.group0().yzx() * other.group1().zxy()).extend_to_4(self[e3] * other[e412]),
            // e4235, e4315, e4125, e3215
            (self.group0().wwwy() * other.group1().xyzy())
                + (other.group1().yzxz() * self.group1().zxy().extend_to_4(self[e125]))
                + Simd32x3::from(0.0).extend_to_4(self[e5] * other[e321] * -1.0)
                + (other.group0().zxy() * self.group0().yzx()).extend_to_4(self[e235] * other[e415])
                - (self.group0().zx().extend_to_4(self[e5], self[e2]) * other.group0().yzz().extend_to_4(other[e315]))
                - (self.group1().ww().extend_to_4(self[e315], self[e1]) * other.group0().xyx().extend_to_4(other[e235]))
                - (self.group1().yzx() * other.group1().zxy()).extend_to_4(self[e3] * other[e125]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       52       86        0
    //    simd3        0        7        0
    //    simd4       35       29        0
    // Totals...
    // yes simd       87      122        0
    //  no simd      192      223        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e3] * other[e431] * -1.0,
                self[e1] * other[e412] * -1.0,
                self[e321] * other[e412] * -1.0,
                (self[e315] * other[e431]) + (self[e125] * other[e412]),
            ]) + (other.group0().zxy() * self.group1().yzx()).extend_to_4(self[e235] * other[e423])
                - (self.group0().ww().extend_to_4(self[e2], other[e321]) * other.group0().xyx().extend_to_4(self[e321])),
            // e23, e31, e12, e45
            (self.group0().yzxx() * other.group0().zxy().extend_to_4(other[e423]))
                + Simd32x3::from(0.0).extend_to_4((self[e315] * other[e431]) + (self[e125] * other[e412]) + (self[e321] * other[e12345]))
                - (self.group1().xyzz() * other.group1().wwwz())
                - (self.group0().zx().extend_to_4(self[e5], other[e425]) * other.group0().yzz().extend_to_4(self[e2]))
                - (self.group1().ww().extend_to_4(self[e315], other[e415]) * other.group0().xyx().extend_to_4(self[e1])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(self[e235] * other[e321]) - (self[e235] * other[e12345]) - (self[e125] * other[e425]) - (self[e2] * other[e125]) - (self[e5] * other[e415]),
                -(self[e235] * other[e435]) - (self[e315] * other[e321]) - (self[e315] * other[e12345]) - (self[e3] * other[e235]) - (self[e5] * other[e425]),
                -(self[e315] * other[e415]) - (self[e125] * other[e321]) - (self[e125] * other[e12345]) - (self[e1] * other[e315]) - (self[e5] * other[e435]),
                0.0,
            ]) + (self.group0().yzx() * other.group1().zxy()).extend_to_4(self[e1] * other[e423])
                + (self.group0().www() * other.group2().truncate_to_3()).extend_to_4(self[e2] * other[e431])
                + (self.group1().zxy() * other.group2().yzx()).extend_to_4(self[e3] * other[e412]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e3] * other[e425],
                self[e2] * other[e12345],
                self[e3] * other[e12345],
                -(self[e5] * other[e321]) - (self[e5] * other[e12345]),
            ]) + (Simd32x4::from([other[e12345], other[e435], other[e415], other[e435]]) * self.group1().xxy().extend_to_4(self[e125]))
                + (self.group0().wwwy() * other.group1().xyzy())
                + (other.group0().zxy() * self.group0().yzx()).extend_to_4(self[e235] * other[e415])
                - (self.group1().yzxz() * other.group1().zxy().extend_to_4(other[e125]))
                - (self.group0().zx().extend_to_4(self[e5], other[e315]) * other.group0().yzz().extend_to_4(self[e2]))
                - (self.group1().ww().extend_to_4(self[e315], other[e235]) * other.group0().xyx().extend_to_4(self[e1])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       39       59        0
    //    simd3        0        7        0
    //    simd4       37       33        0
    // Totals...
    // yes simd       76       99        0
    //  no simd      187      212        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e321] * other[e41]) + (self[e3] * other[e42]),
                (self[e321] * other[e42]) + (self[e1] * other[e43]),
                (self[e321] * other[e43]) + (self[e2] * other[e41]),
                -(self[e315] * other[e42]) - (self[e125] * other[e43]) - (self[e321] * other[e45]),
            ]) - (other.group0().zxy() * self.group1().yzx()).extend_to_4(self[e235] * other[e41]),
            // e415, e425, e435, e321
            (self.group0().zx().extend_to_4(self[e5], self[e315]) * other.group0().yzz().extend_to_4(other[e42]))
                + (self.group1().ww().extend_to_4(self[e315], self[e235]) * other.group0().xyx().extend_to_4(other[e41]))
                + Simd32x3::from(0.0).extend_to_4((self[e125] * other[e43]) - (self[e3] * other[e12]))
                - (self.group1().xyzy() * other.group1().wwwy())
                - (other.group0().zxy() * self.group0().yzx()).extend_to_4(self[e1] * other[e23]),
            // e235, e315, e125, e5
            (self.group1().yzxx() * other.group2().zxy().extend_to_4(other[e15]))
                + (self.group0().zxy() * other.group1().yzx()).extend_to_4(self[e2] * other[e25])
                + (self.group1().www() * other.group1().truncate_to_3()).extend_to_4(self[e3] * other[e35])
                - (self.group0().xyxz() * other.group1().wwyz())
                - (other.group1().zxww() * self.group0().yzz().extend_to_4(self[e5]))
                - (self.group0().ww().extend_to_4(self[e2], other[e23]) * other.group2().xyx().extend_to_4(self[e235]))
                - (self.group1().zx().extend_to_4(self[e321], other[e31]) * other.group2().yzz().extend_to_4(self[e315])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e315] * other[e43]) + (self[e321] * other[e23]) + (self[e3] * other[e31]),
                (self[e125] * other[e41]) + (self[e321] * other[e31]) + (self[e1] * other[e12]),
                (self[e235] * other[e42]) + (self[e321] * other[e12]) + (self[e2] * other[e23]),
                0.0,
            ]) - (self.group0().zx().extend_to_4(self[e5], self[e2]) * other.group0().yzz().extend_to_4(other[e42]))
                - (self.group1().ww().extend_to_4(self[e315], self[e1]) * other.group0().xyx().extend_to_4(other[e41]))
                - (self.group1().yzx() * other.group1().zxy()).extend_to_4(self[e3] * other[e43]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       65        0
    //    simd3        0        9        0
    //    simd4       47       40        0
    // Totals...
    // yes simd       87      114        0
    //  no simd      228      252        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (self.group1().xyzz() * other.group2().www().extend_to_4(other[e4125]))
                + (self.group0().ww().extend_to_4(self[e2], other[e4235]) * other.group0().xyx().extend_to_4(self[e1]))
                + (self.group1().zx().extend_to_4(self[e321], other[e4315]) * other.group0().yzz().extend_to_4(self[e2]))
                + Simd32x3::from(0.0).extend_to_4((self[e5] * other[e1234]) - (self[e315] * other[e42]) - (self[e125] * other[e43]) - (self[e321] * other[e45]))
                - (other.group0().zxy() * self.group1().yzx()).extend_to_4(self[e235] * other[e41]),
            // e415, e425, e435, e321
            Simd32x4::from([self[e2] * other[e4125], self[e3] * other[e4235], self[e1] * other[e4315], 0.0])
                + (self.group0().zx().extend_to_4(self[e5], self[e315]) * other.group0().yzz().extend_to_4(other[e42]))
                + (self.group1().ww().extend_to_4(self[e315], self[e235]) * other.group0().xyx().extend_to_4(other[e41]))
                + (other.group2().www() * self.group0().truncate_to_3()).extend_to_4(self[e125] * other[e43])
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e12]]) * self.group1().xxyz())
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e1234]]) * self.group1().zyzw())
                - (other.group0().zxy() * self.group0().yzx()).extend_to_4(self[e1] * other[e23])
                - (self.group0().www() * other.group3().truncate_to_3()).extend_to_4(self[e2] * other[e31]),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e3] * other[e25]) - (self[e5] * other[e4235]),
                -(self[e2] * other[e3215]) - (self[e5] * other[e4315]),
                -(self[e3] * other[e3215]) - (self[e5] * other[e4125]),
                (self[e2] * other[e25]) + (self[e3] * other[e35]),
            ]) + (Simd32x4::from([other[e31], other[e4235], other[e23], other[e4315]]) * self.group0().zzyy())
                + (Simd32x4::from([other[e4125], other[e12], other[e4315], other[e4235]]) * self.group0().yxxx())
                + (self.group1().wwwx() * other.group1().truncate_to_3().extend_to_4(other[e15]))
                + (self.group1().yzx() * other.group2().zxy()).extend_to_4(self[e125] * other[e4125])
                - (Simd32x4::from(self[e235]) * Simd32x4::from([other[e45], other[e4125], other[e31], other[e23]]))
                - (Simd32x4::from(self[e315]) * other.group1().zw().extend_to_4(other[e4235], other[e31]))
                - (Simd32x4::from(self[e125]) * Simd32x4::from([other[e4315], other[e23], other[e45], other[e12]]))
                - (Simd32x4::from(self[e321]) * other.group2().truncate_to_3().extend_to_4(other[e3215]))
                - (Simd32x4::from([other[e3215], other[e35], other[e15], other[e45]]) * self.group1().xxyw()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e321] * other[e23]) + (self[e3] * other[e31]) - (self[e2] * other[e12]),
                (self[e321] * other[e31]) + (self[e1] * other[e12]) - (self[e3] * other[e23]),
                (self[e321] * other[e12]) + (self[e2] * other[e23]) - (self[e1] * other[e31]),
                0.0,
            ]) + (other.group0().zxy() * self.group0().yzx()).extend_to_4(self[e321] * other[e1234])
                - (self.group0().zx().extend_to_4(self[e5], self[e2]) * other.group0().yzz().extend_to_4(other[e42]))
                - (self.group1().ww().extend_to_4(self[e315], self[e1]) * other.group0().xyx().extend_to_4(other[e41]))
                - (other.group2().www() * self.group0().truncate_to_3()).extend_to_4(self[e3] * other[e43]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for AntiFlector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       28        0
    //    simd3        1        3        0
    //    simd4        6        7        0
    // Totals...
    // yes simd       24       38        0
    //  no simd       44       65        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            ((Simd32x3::from(other[e5]) * self.group1().truncate_to_3()) - (Simd32x3::from(other[e12345]) * self.group0().truncate_to_3())).extend_to_4(self[e321] * other[e12345]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e1], self[e2], self[e3], 1.0]) * other.group0().yy().extend_to_4(other[e12345], (self[e321] * other[e5]) - (self[e5] * other[e12345])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for AntiFlector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       26        0
    //    simd3        0        2        0
    //    simd4       10       11        0
    // Totals...
    // yes simd       26       39        0
    //  no simd       56       76        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(other[e45]) * self.group1().truncate_to_3().extend_to_4(self[e321]) * Simd32x4::from(-1.0),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e321] * other[e15]) - (self[e3] * other[e25]),
                -(self[e321] * other[e25]) - (self[e1] * other[e35]),
                -(self[e321] * other[e35]) - (self[e2] * other[e15]),
                (self[e2] * other[e25]) + (self[e3] * other[e35]),
            ]) + (self.group1().yzxx() * other.group0().zxyx())
                - (Simd32x4::from(other[e45]) * self.group0().truncate_to_3().extend_to_4(self[e5])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for AntiFlector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       43        0
    //    simd3        0        3        0
    //    simd4       14       12        0
    // Totals...
    // yes simd       42       58        0
    //  no simd       84      100        0
    fn sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                -(self[e1] * other[e45]) - (self[e3] * other[e4315]),
                -(self[e1] * other[e4125]) - (self[e2] * other[e45]),
                -(self[e2] * other[e4235]) - (self[e3] * other[e45]),
                (self[e2] * other[e4315]) + (self[e3] * other[e4125]),
            ]) + (self.group1().yzxx() * other.group1().zxyx())
                - (Simd32x4::from(self[e321]) * other.group1().truncate_to_3().extend_to_4(other[e45])),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e321] * other[e15]) - (self[e1] * other[e3215]) - (self[e3] * other[e25]) - (self[e5] * other[e4235]),
                -(self[e321] * other[e25]) - (self[e1] * other[e35]) - (self[e2] * other[e3215]) - (self[e5] * other[e4315]),
                -(self[e321] * other[e35]) - (self[e2] * other[e15]) - (self[e3] * other[e3215]) - (self[e5] * other[e4125]),
                (self[e125] * other[e4125]) + (self[e1] * other[e15]) + (self[e2] * other[e25]) + (self[e3] * other[e35]),
            ]) + (self.group0().yzxx() * other.group1().zxyx())
                + (self.group1().yzx() * other.group0().zxy()).extend_to_4(self[e315] * other[e4315])
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e3215]]) * self.group0().xxyw())
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e45]]) * self.group0().zyz().extend_to_4(self[e5])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for AntiFlector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       37        0
    //    simd3        0        1        0
    //    simd4       12       12        0
    // Totals...
    // yes simd       36       50        0
    //  no simd       72       88        0
    fn sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e315] * other[e435]) + (self[e321] * other[e235]) + (self[e3] * other[e315]),
                (self[e125] * other[e415]) + (self[e321] * other[e315]) + (self[e1] * other[e125]),
                (self[e235] * other[e425]) + (self[e321] * other[e125]) + (self[e2] * other[e235]),
                0.0,
            ]) - (self.group1().yzxz() * other.group1().zxy().extend_to_4(other[e435]))
                - (self.group0().zx().extend_to_4(self[e5], self[e2]) * other.group0().yzz().extend_to_4(other[e425]))
                - (self.group1().ww().extend_to_4(self[e315], self[e1]) * other.group0().xyx().extend_to_4(other[e415])),
            // e4235, e4315, e4125, e3215
            (self.group0().ww().extend_to_4(self[e2], self[e235]) * other.group0().xyx().extend_to_4(other[e415]))
                + (self.group1().zx().extend_to_4(self[e321], self[e315]) * other.group0().yzz().extend_to_4(other[e425]))
                + Simd32x3::from(0.0).extend_to_4((self[e125] * other[e435]) - (self[e2] * other[e315]) - (self[e3] * other[e125]))
                - (self.group1().yzxx() * other.group0().zxy().extend_to_4(other[e235])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for AntiFlector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       41        0
    //    simd3        0        1        0
    //    simd4       14       14        0
    // Totals...
    // yes simd       42       56        0
    //  no simd       84      100        0
    fn sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e321] * other[e235]) + (self[e1] * other[e5]) + (self[e3] * other[e315]) - (self[e5] * other[e415]),
                (self[e321] * other[e315]) + (self[e1] * other[e125]) + (self[e2] * other[e5]) - (self[e5] * other[e425]),
                (self[e321] * other[e125]) + (self[e2] * other[e235]) + (self[e3] * other[e5]) - (self[e5] * other[e435]),
                0.0,
            ]) + (self.group0().yzxw() * other.group0().zxyw())
                - (self.group1().yzxz() * other.group1().zxy().extend_to_4(other[e435]))
                - (other.group0().ywwy() * self.group0().zyz().extend_to_4(self[e2]))
                - (other.group0().wzxx() * self.group0().xxy().extend_to_4(self[e1])),
            // e4235, e4315, e4125, e3215
            (self.group0().wwwx() * other.group0().xyzx())
                + (other.group0().ywwz() * self.group1().zyz().extend_to_4(self[e125]))
                + (other.group0().wzxy() * self.group1().xxy().extend_to_4(self[e315]))
                + Simd32x3::from(0.0).extend_to_4((self[e321] * other[e5]) - (self[e2] * other[e315]) - (self[e3] * other[e125]) - (self[e5] * other[e12345]))
                - (self.group1().yzxx() * other.group0().zxy().extend_to_4(other[e235])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for AntiFlector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       86      126        0
    //    simd2        8        8        0
    //    simd3       48       70        0
    //    simd4       53       41        0
    // Totals...
    // yes simd      195      245        0
    //  no simd      458      516        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412]) - (self[e5] * other[e4]),
                (self[e5] * other[e1234]) - (self[e315] * other[e42]) - (self[e125] * other[e43]) - (self[e321] * other[e45]),
            ]) + (Simd32x2::from(self[e1]) * Simd32x2::from([other[e1], other[e4235]]))
                + (Simd32x2::from(self[e2]) * Simd32x2::from([other[e2], other[e4315]]))
                + (Simd32x2::from(self[e3]) * Simd32x2::from([other[e3], other[e4125]]))
                - (Simd32x2::from([other[e321], other[e41]]) * self.group0().wx()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e315] * other[e43]) + (self[e321] * other[e23]) + (self[e3] * other[e31]) - (self[e235] * other[e1234]),
                (self[e125] * other[e41]) + (self[e321] * other[e31]) + (self[e1] * other[e12]) - (self[e315] * other[e1234]),
                (self[e235] * other[e42]) + (self[e321] * other[e12]) + (self[e2] * other[e23]) - (self[e125] * other[e1234]),
                0.0,
            ]) + (other.group0().xx().extend_to_4(other[scalar], self[e321]) * self.group1().truncate_to_3().extend_to_4(other[e1234]))
                - (self.group1().yzxz() * other.group5().zxy().extend_to_4(other[e43]))
                - (self.group0().zx().extend_to_4(self[e5], self[e2]) * other.group4().yzz().extend_to_4(other[e42]))
                - (self.group1().ww().extend_to_4(self[e315], self[e1]) * other.group4().xyx().extend_to_4(other[e41])),
            // e5
            (self[e235] * other[e4235])
                + (self[e315] * other[e4315])
                + (self[e125] * other[e4125])
                + (self[e1] * other[e15])
                + (self[e2] * other[e25])
                + (self[e3] * other[e35])
                + (self[e5] * other[scalar])
                - (self[e235] * other[e23])
                - (self[e315] * other[e31])
                - (self[e125] * other[e12])
                - (self[e321] * other[e3215])
                - (self[e5] * other[e45]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e1] * other[e5]) - (self[e125] * other[e425]) - (self[e5] * other[e1]) - (self[e5] * other[e415]),
                (self[e2] * other[e5]) - (self[e315] * other[e321]) - (self[e5] * other[e2]) - (self[e5] * other[e425]),
                (self[e3] * other[e5]) - (self[e125] * other[e321]) - (self[e5] * other[e3]) - (self[e5] * other[e435]),
                0.0,
            ]) + (self.group0().ww().extend_to_4(self[e2], self[e321]) * other.group8().xyx().extend_to_4(other[e12345]))
                + (self.group1().zx().extend_to_4(self[e321], self[e235]) * other.group8().yzz().extend_to_4(other[e423]))
                + (self.group0().yzx() * other.group1().zxy()).extend_to_4(self[e315] * other[e431])
                + (self.group0().yzx() * other.group6().zxy()).extend_to_4(self[e125] * other[e412])
                - (Simd32x4::from([other[e2], other[e435], other[e415], other[e4]]) * self.group0().zxy().extend_to_4(self[e5]))
                - (Simd32x4::from([other[e321], other[e3], other[e1], other[e435]]) * self.group0().xxy().extend_to_4(self[e3]))
                - (other.group0().yy().extend_to_4(other[e12345], self[e1]) * self.group0().truncate_to_3().extend_to_4(other[e415]))
                - (other.group8().zxy() * self.group1().yzx()).extend_to_4(self[e2] * other[e425]),
            // e41, e42, e43
            (other.group7().zxy() * self.group1().yzx())
                - (Simd32x3::from(other[e4]) * self.group1().truncate_to_3())
                - (Simd32x3::from([self[e321], self[e321], self[e2]]) * other.group7().xyx())
                - (Simd32x3::from([self[e3], self[e1], self[e321]]) * other.group7().yzz()),
            // e23, e31, e12
            (other.group7().zxy() * self.group0().yzx()) + (self.group1().yzx() * other.group1().zxy())
                - (Simd32x3::from(self[e321]) * other.group1().truncate_to_3())
                - (Simd32x3::from(other[e4]) * self.group0().truncate_to_3())
                - (Simd32x3::from([self[e125], self[e235], self[e5]]) * other.group7().yzz())
                - (Simd32x3::from([self[e5], self[e5], self[e315]]) * other.group7().xyx())
                - (Simd32x3::from([other[e2], other[e321], other[e321]]) * self.group1().zyz())
                - (Simd32x3::from([other[e321], other[e3], other[e1]]) * self.group1().xxy()),
            // e415, e425, e435, e321
            (Simd32x4::from([other[e1234], other[e1234], other[e1234], self[e315]]) * self.group0().truncate_to_3().extend_to_4(other[e42]))
                + (self.group0().zx().extend_to_4(self[e5], self[e235]) * other.group4().yzz().extend_to_4(other[e41]))
                + (self.group1().ww().extend_to_4(self[e315], self[e321]) * other.group4().xyx().extend_to_4(other[scalar]))
                + (self.group1().yzx() * other.group9().zxy()).extend_to_4(self[e125] * other[e43])
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], self[e3]]) * self.group1().xxy().extend_to_4(other[e12]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e1234]]) * self.group1().zyzw())
                - (other.group4().zxy() * self.group0().yzx()).extend_to_4(self[e1] * other[e23])
                - (self.group0().www() * other.group9().truncate_to_3()).extend_to_4(self[e2] * other[e31]),
            // e423, e431, e412
            (Simd32x3::from(other[e1234]) * self.group1().truncate_to_3())
                + (Simd32x3::from([self[e321], self[e321], self[e2]]) * other.group4().xyx())
                + (Simd32x3::from([self[e3], self[e1], self[e321]]) * other.group4().yzz())
                - (other.group4().zxy() * self.group1().yzx()),
            // e235, e315, e125
            (Simd32x3::from(other[scalar]) * self.group0().truncate_to_3())
                + (Simd32x3::from([self[e125], self[e235], self[e5]]) * other.group5().yzz())
                + (Simd32x3::from([self[e5], self[e5], self[e315]]) * other.group5().xyx())
                + (self.group0().yzx() * other.group9().zxy())
                + (self.group1().yzx() * other.group3().zxy())
                - (Simd32x3::from(self[e321]) * other.group3().truncate_to_3())
                - (Simd32x3::from(self[e5]) * other.group9().truncate_to_3())
                - (Simd32x3::from([other[e25], other[e3215], other[e3215]]) * self.group1().zyz())
                - (Simd32x3::from([other[e45], other[e4125], other[e4235]]) * self.group0().xxy())
                - (Simd32x3::from([other[e4315], other[e45], other[e45]]) * self.group0().zyz())
                - (Simd32x3::from([other[e3215], other[e35], other[e15]]) * self.group1().xxy())
                - (other.group5().zxy() * self.group0().yzx()),
            // e4235, e4315, e4125, e3215
            (self.group0().wwwy() * other.group6().truncate_to_3().extend_to_4(other[e2]))
                + (other.group6().yzxy() * self.group1().zxy().extend_to_4(self[e315]))
                + (other.group0().yy().extend_to_4(other[e12345], self[e235]) * self.group1().truncate_to_3().extend_to_4(other[e1]))
                + Simd32x3::from(0.0).extend_to_4((self[e125] * other[e3]) + (self[e125] * other[e435]) + (self[e321] * other[e5]) - (self[e5] * other[e321]))
                + (other.group7().zxy() * self.group0().yzx()).extend_to_4(self[e235] * other[e415])
                - (self.group0().zx().extend_to_4(self[e5], self[e1]) * other.group7().yzz().extend_to_4(other[e235]))
                - (self.group1().ww().extend_to_4(self[e315], self[e5]) * other.group7().xyx().extend_to_4(other[e12345]))
                - (self.group1().yzx() * other.group6().zxy()).extend_to_4(self[e3] * other[e125])
                - (other.group1().www() * self.group0().truncate_to_3()).extend_to_4(self[e2] * other[e315]),
            // e1234
            (self[e1] * other[e423]) + (self[e2] * other[e431]) + (self[e3] * other[e412]) - (self[e321] * other[e4]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for AntiFlector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       34        0
    //    simd3        0        2        0
    //    simd4       11       10        0
    // Totals...
    // yes simd       31       46        0
    //  no simd       64       80        0
    fn sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                -(self[e321] * other[e4235]) - (self[e3] * other[e4315]),
                -(self[e321] * other[e4315]) - (self[e1] * other[e4125]),
                -(self[e321] * other[e4125]) - (self[e2] * other[e4235]),
                (self[e2] * other[e4315]) + (self[e3] * other[e4125]),
            ]) + (self.group1().yzxx() * other.group0().zxyx()),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e1] * other[e3215]) - (self[e5] * other[e4235]),
                -(self[e2] * other[e3215]) - (self[e5] * other[e4315]),
                -(self[e3] * other[e3215]) - (self[e5] * other[e4125]),
                (self[e315] * other[e4315]) + (self[e125] * other[e4125]),
            ]) + (self.group0().yzxx() * other.group0().zxyx())
                - (self.group0().zxyw() * other.group0().yzxw()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       42       62        0
    //    simd3        6       10        0
    //    simd4       20       23        0
    // Totals...
    // yes simd       68       95        0
    //  no simd      140      184        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([other[e4], other[e4], other[e4], 1.0])
                * self
                    .group1()
                    .truncate_to_3()
                    .extend_to_4((self[e1] * other[e1]) + (self[e2] * other[e2]) + (self[e3] * other[e3]) - (self[e5] * other[e4]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            ((self.group1().yzx() * other.group0().zxy())
                - (Simd32x3::from(self[e321]) * other.group0().truncate_to_3())
                - (Simd32x3::from(other[e4]) * self.group0().truncate_to_3())
                - (self.group1().zxy() * other.group0().yzx()))
            .extend_to_4(self[e5] * other[e4] * -1.0),
            // e15, e25, e35, e1234
            ((Simd32x3::from(other[e5]) * self.group1().truncate_to_3()) + (self.group0().yzx() * other.group0().zxy())
                - (Simd32x3::from(self[e5]) * other.group0().truncate_to_3())
                - (self.group0().zxy() * other.group0().yzx()))
            .extend_to_4(self[e321] * other[e4] * -1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([other[e4], other[e4], other[e4], 1.0])
                * self
                    .group0()
                    .truncate_to_3()
                    .extend_to_4((self[e235] * other[e1]) + (self[e315] * other[e2]) + (self[e125] * other[e3]) + (self[e321] * other[e5]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for AntiFlector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        9       13        0
    // Totals...
    // yes simd       13       21        0
    //  no simd       40       60        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(other[scalar]) * self.group0(),
            // e1, e2, e3, e5
            Simd32x4::from(other[scalar]) * self.group1(),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       34       48        0
    //    simd3        3        6        0
    //    simd4       25       28        0
    // Totals...
    // yes simd       62       82        0
    //  no simd      143      178        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([other[e1234], other[e1234], other[e1234], 1.0])
                * self
                    .group1()
                    .truncate_to_3()
                    .extend_to_4((self[e1] * other[e4235]) + (self[e2] * other[e4315]) + (self[e3] * other[e4125]) + (self[e5] * other[e1234])),
            // e415, e425, e435, e321
            ((Simd32x3::from(other[e1234]) * self.group0().truncate_to_3()) + (self.group1().yzx() * other.group0().zxy())
                - (Simd32x3::from(self[e321]) * other.group0().truncate_to_3())
                - (self.group1().zxy() * other.group0().yzx()))
            .extend_to_4(self[e5] * other[e1234] * -1.0),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e1] * other[e3215]) - (self[e5] * other[e4235]),
                -(self[e2] * other[e3215]) - (self[e5] * other[e4315]),
                -(self[e3] * other[e3215]) - (self[e5] * other[e4125]),
                (self[e315] * other[e4315]) + (self[e125] * other[e4125]),
            ]) + (self.group0().yzxx() * other.group0().zxyx())
                - (self.group0().zxyw() * other.group0().yzxw()),
            // e1, e2, e3, e4
            Simd32x4::from(other[e1234]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       68      102        0
    //    simd3        0        7        0
    //    simd4       41       35        0
    // Totals...
    // yes simd      109      144        0
    //  no simd      232      263        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e3] * other[e431] * -1.0,
                self[e2] * other[e4] * -1.0,
                self[e3] * other[e4] * -1.0,
                (self[e315] * other[e431]) + (self[e125] * other[e412]) + (self[e1] * other[e1]) + (self[e2] * other[e2]) + (self[e3] * other[e3]),
            ]) + (other.group0().zxyx() * self.group1().yzx().extend_to_4(self[e235]))
                - (Simd32x4::from(self[e321]) * other.group0().truncate_to_3().extend_to_4(other[e321]))
                - (Simd32x4::from([other[e4], other[e412], other[e423], other[e4]]) * self.group1().xxyw()),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(self[e3] * other[e2]) - (self[e5] * other[e423]),
                -(self[e2] * other[e321]) - (self[e5] * other[e431]),
                -(self[e3] * other[e321]) - (self[e5] * other[e412]),
                (self[e125] * other[e412]) + (self[e321] * other[e12345]),
            ]) + (self.group0().yzxx() * other.group0().zxyx())
                + (self.group1().yzx() * other.group3().zxy()).extend_to_4(self[e315] * other[e431])
                - (Simd32x4::from([other[e431], other[e4], other[e4], other[e425]]) * self.group0().zyz().extend_to_4(self[e2]))
                - (Simd32x4::from([other[e321], other[e3], other[e1], other[e4]]) * self.group1().xxyw())
                - (Simd32x4::from([other[e4], other[e412], other[e423], other[e415]]) * self.group0().xxy().extend_to_4(self[e1]))
                - (self.group0().www() * other.group3().truncate_to_3()).extend_to_4(self[e3] * other[e435]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e1] * other[e5]) + (self[e3] * other[e315])
                    - (self[e235] * other[e321])
                    - (self[e125] * other[e425])
                    - (self[e125] * other[e2])
                    - (self[e2] * other[e125])
                    - (self[e5] * other[e415])
                    - (self[e5] * other[e1]),
                (self[e1] * other[e125]) + (self[e2] * other[e5])
                    - (self[e235] * other[e3])
                    - (self[e315] * other[e12345])
                    - (self[e315] * other[e321])
                    - (self[e3] * other[e235])
                    - (self[e5] * other[e425])
                    - (self[e5] * other[e2]),
                (self[e2] * other[e235]) + (self[e3] * other[e5])
                    - (self[e315] * other[e1])
                    - (self[e125] * other[e12345])
                    - (self[e125] * other[e321])
                    - (self[e1] * other[e315])
                    - (self[e5] * other[e435])
                    - (self[e5] * other[e3]),
                0.0,
            ]) + (self.group0().yzx() * other.group1().zxy()).extend_to_4(self[e1] * other[e423])
                + (self.group0().yzx() * other.group3().zxy()).extend_to_4(self[e2] * other[e431])
                + (self.group0().www() * other.group2().truncate_to_3()).extend_to_4(self[e3] * other[e412])
                - (Simd32x4::from([other[e12345], other[e435], other[e415], other[e4]]) * self.group0().xxyw()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([other[e12345], other[e435], other[e415], other[e425]]) * self.group1().xxy().extend_to_4(self[e315]))
                + (Simd32x4::from([other[e425], other[e12345], other[e12345], other[e2]]) * self.group1().zyz().extend_to_4(self[e315]))
                + (self.group0().yzxx() * other.group0().zxy().extend_to_4(other[e415]))
                + (self.group0().wwwx() * other.group1().truncate_to_3().extend_to_4(other[e1]))
                + Simd32x3::from(0.0).extend_to_4((self[e125] * other[e435]) + (self[e125] * other[e3]) + (self[e321] * other[e5]) - (self[e5] * other[e321]))
                - (Simd32x4::from(self[e5]) * other.group0())
                - (Simd32x4::from([other[e431], other[e4], other[e4], other[e315]]) * self.group0().zyz().extend_to_4(self[e2]))
                - (Simd32x4::from([other[e4], other[e412], other[e423], other[e235]]) * self.group0().xxy().extend_to_4(self[e1]))
                - (self.group1().yzxz() * other.group1().zxy().extend_to_4(other[e125])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       43       62        0
    //    simd3        0        6        0
    //    simd4       48       45        0
    // Totals...
    // yes simd       91      113        0
    //  no simd      235      260        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([other[e42], other[e1234], other[e1234], other[e4125]]) * self.group1().zyzz())
                + (Simd32x4::from([other[e1234], other[e43], other[e41], other[e4315]]) * self.group1().xxyy())
                + Simd32x3::from(0.0).extend_to_4((self[e5] * other[e1234]) - (self[e315] * other[e42]) - (self[e125] * other[e43]) - (self[e321] * other[e45]))
                + (self.group0().www() * other.group0().truncate_to_3()).extend_to_4(self[e1] * other[e4235])
                - (other.group0().zxyx() * self.group1().yzx().extend_to_4(self[e235])),
            // e415, e425, e435, e321
            (Simd32x4::from([other[e42], other[e1234], other[e1234], other[e42]]) * self.group0().zyzy())
                + (Simd32x4::from([other[e1234], other[e43], other[e41], other[e41]]) * self.group0().xxyx())
                + (other.group0() * self.group1().www().extend_to_4(self[e321]))
                + (self.group1().yzx() * other.group3().zxy()).extend_to_4(self[e125] * other[e43])
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e12]]) * self.group1().xxyz())
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e1234]]) * self.group1().zyzw())
                - (self.group0().yzx() * other.group0().zxy()).extend_to_4(self[e1] * other[e23])
                - (self.group0().www() * other.group3().truncate_to_3()).extend_to_4(self[e2] * other[e31]),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e3] * other[e25]) - (self[e5] * other[e4235]),
                -(self[e2] * other[e3215]) - (self[e5] * other[e4315]),
                -(self[e3] * other[e3215]) - (self[e5] * other[e4125]),
                (self[e3] * other[e35]) + (self[e5] * other[scalar]),
            ]) + (Simd32x4::from(self[e235]) * Simd32x4::from([other[scalar], other[e12], other[e4315], other[e4235]]))
                + (Simd32x4::from(self[e315]) * Simd32x4::from([other[e4125], other[scalar], other[e23], other[e4315]]))
                + (Simd32x4::from(self[e125]) * Simd32x4::from([other[e31], other[e4235], other[scalar], other[e4125]]))
                + (self.group1().yzxx() * other.group2().zxyx())
                + (self.group1().wwwy() * other.group1().truncate_to_3().extend_to_4(other[e25]))
                - (Simd32x4::from(self[e235]) * Simd32x4::from([other[e45], other[e4125], other[e31], other[e23]]))
                - (Simd32x4::from(self[e315]) * other.group1().zw().extend_to_4(other[e4235], other[e31]))
                - (Simd32x4::from(self[e125]) * Simd32x4::from([other[e4315], other[e23], other[e45], other[e12]]))
                - (Simd32x4::from(self[e321]) * other.group2().truncate_to_3().extend_to_4(other[e3215]))
                - (Simd32x4::from([other[e3215], other[e35], other[e15], other[e45]]) * self.group1().xxyw()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e321] * other[e23]) + (self[e1] * other[scalar]) + (self[e3] * other[e31]) - (self[e5] * other[e41]),
                (self[e321] * other[e31]) + (self[e1] * other[e12]) + (self[e2] * other[scalar]) - (self[e5] * other[e42]),
                (self[e321] * other[e12]) + (self[e2] * other[e23]) + (self[e3] * other[scalar]) - (self[e5] * other[e43]),
                0.0,
            ]) + (self.group0().yzxw() * other.group0().zxy().extend_to_4(other[e1234]))
                - (Simd32x4::from([other[e42], other[e1234], other[e1234], other[e42]]) * self.group0().zyz().extend_to_4(self[e2]))
                - (Simd32x4::from([other[e1234], other[e43], other[e41], other[e41]]) * self.group0().xxy().extend_to_4(self[e1]))
                - (self.group1().yzxz() * other.group1().zxy().extend_to_4(other[e43])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl std::ops::Div<sandwich> for AntiLine {
    type Output = sandwich_partial<AntiLine>;
    fn div(self, _rhs: sandwich) -> Self::Output {
        sandwich_partial(self)
    }
}
impl Sandwich<AntiCircleRotor> for AntiLine {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56      102        0
    //    simd3        0       16        0
    //    simd4       19        5        0
    // Totals...
    // yes simd       75      123        0
    //  no simd      132      170        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                other[e42] * self[e12],
                other[e43] * self[e23],
                other[e41] * self[e31],
                -(other[e42] * self[e25]) - (other[e43] * self[e35]) - (other[e23] * self[e23]) - (other[e31] * self[e31]) - (other[e12] * self[e12]),
            ]) - (other.group0().zxy() * self.group0().yzx()).extend_to_4(other[e41] * self[e15]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e42] * self[e35]) + (other[e31] * self[e12]) + (other[scalar] * self[e23]),
                (other[e43] * self[e15]) + (other[e12] * self[e23]) + (other[scalar] * self[e31]),
                (other[e41] * self[e25]) + (other[e23] * self[e31]) + (other[scalar] * self[e12]),
                other[e43] * self[e35] * -1.0,
            ]) - (other.group0().zxy() * self.group1().yzx()).extend_to_4(other[e41] * self[e15])
                - (self.group0().yzx() * other.group1().zxy()).extend_to_4(other[e42] * self[e25]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e31] * self[e35]) + (other[e25] * self[e12]) + (other[scalar] * self[e15]),
                (other[e12] * self[e15]) + (other[e35] * self[e23]) + (other[scalar] * self[e25]),
                (other[e23] * self[e25]) + (other[e15] * self[e31]) + (other[scalar] * self[e35]),
                0.0,
            ]) - (self.group0().yzx() * other.group2().zxy()).extend_to_4(other[e41] * self[e23])
                - (self.group1().xyx() * other.group1().wwy()).extend_to_4(other[e42] * self[e31])
                - (self.group1().yzz() * other.group1().zxw()).extend_to_4(other[e43] * self[e12]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e42] * self[e35]) + (other[e45] * self[e23]),
                (other[e43] * self[e15]) + (other[e45] * self[e31]),
                (other[e41] * self[e25]) + (other[e45] * self[e12]),
                -(other[e23] * self[e15]) - (other[e31] * self[e25]) - (other[e12] * self[e35]) - (other[e25] * self[e31]) - (other[e35] * self[e12]),
            ]) - (other.group0().zxy() * self.group1().yzx()).extend_to_4(other[e15] * self[e23]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for AntiLine {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       62      109        0
    //    simd3        0       19        0
    //    simd4       24        7        0
    // Totals...
    // yes simd       86      135        0
    //  no simd      158      194        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e431] * self[e12]) + (other[e4] * self[e23]),
                (other[e412] * self[e23]) + (other[e4] * self[e31]),
                (other[e423] * self[e31]) + (other[e4] * self[e12]),
                -(other[e431] * self[e25]) - (other[e412] * self[e35]) - (other[e415] * self[e23]) - (other[e425] * self[e31]) - (other[e435] * self[e12]),
            ]) - (other.group0().zxy() * self.group0().yzx()).extend_to_4(other[e423] * self[e15]),
            // e415, e425, e435, e321
            Simd32x3::from(0.0).extend_to_4(other[e3] * self[e12] * -1.0)
                + (self.group1() * other.group2().www()).extend_to_4(other[e412] * self[e35])
                + (other.group0().yzx() * self.group1().zxy()).extend_to_4(other[e423] * self[e15])
                + (self.group0().zxy() * other.group1().yzx()).extend_to_4(other[e431] * self[e25])
                - (other.group0().zxy() * self.group1().yzx()).extend_to_4(other[e1] * self[e23])
                - (self.group0().yzx() * other.group1().zxy()).extend_to_4(other[e2] * self[e31]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e425] * self[e35]) + (other[e321] * self[e15]) + (other[e315] * self[e12]) + (other[e2] * self[e35]) + (other[e5] * self[e23]),
                (other[e435] * self[e15]) + (other[e321] * self[e25]) + (other[e125] * self[e23]) + (other[e3] * self[e15]) + (other[e5] * self[e31]),
                (other[e415] * self[e25]) + (other[e321] * self[e35]) + (other[e235] * self[e31]) + (other[e1] * self[e25]) + (other[e5] * self[e12]),
                -(other[e415] * self[e15]) - (other[e425] * self[e25]) - (other[e435] * self[e35]) - (other[e1] * self[e15]) - (other[e2] * self[e25]) - (other[e3] * self[e35]),
            ]) - (other.group2().zxyx() * self.group0().yzx().extend_to_4(self[e23]))
                - (self.group1().yzx() * other.group1().zxy()).extend_to_4(other[e315] * self[e31])
                - (self.group1().yzx() * other.group3().zxy()).extend_to_4(other[e125] * self[e12]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e412] * self[e25]) + (other[e321] * self[e23]) + (other[e2] * self[e12]),
                (other[e423] * self[e35]) + (other[e321] * self[e31]) + (other[e3] * self[e23]),
                (other[e431] * self[e15]) + (other[e321] * self[e12]) + (other[e1] * self[e31]),
                0.0,
            ]) - (self.group1() * other.group2().www()).extend_to_4(other[e412] * self[e12])
                - (other.group0().yzx() * self.group1().zxy()).extend_to_4(other[e423] * self[e23])
                - (self.group0().yzx() * other.group3().zxy()).extend_to_4(other[e431] * self[e31]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for AntiLine {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       18        0
    //    simd3        1        8        0
    //    simd4        3        0        0
    // Totals...
    // yes simd       11       26        0
    //  no simd       22       42        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(other[scalar]) * self.group0(),
            // e15, e25, e35
            (Simd32x3::from(other[e3215]) * self.group0()) + (Simd32x3::from(other[scalar]) * self.group1()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for AntiLine {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       17        0
    //    simd3        0        7        0
    //    simd4        8        5        0
    // Totals...
    // yes simd       18       29        0
    //  no simd       42       58        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x3::from(other[e321]) * self.group1()).extend_to_4(0.0) + (self.group0().zxy() * other.group0().yzx()).extend_to_4(0.0)
                - (self.group0().yzx() * other.group0().zxy()).extend_to_4(0.0),
            // e1, e2, e3, e5
            Simd32x4::from([other[e321], other[e321], other[e321], 1.0])
                * self.group0().extend_to_4(-(other[e235] * self[e23]) - (other[e315] * self[e31]) - (other[e125] * self[e12])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for AntiLine {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       41        0
    //    simd3        0        6        0
    //    simd4        9        5        0
    // Totals...
    // yes simd       33       52        0
    //  no simd       60       79        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (other[e315] * self[e12]) + (other[e321] * self[e15]) + (other[e2] * self[e35]) + (other[e5] * self[e23]),
                (other[e125] * self[e23]) + (other[e321] * self[e25]) + (other[e3] * self[e15]) + (other[e5] * self[e31]),
                (other[e235] * self[e31]) + (other[e321] * self[e35]) + (other[e1] * self[e25]) + (other[e5] * self[e12]),
                other[e3] * self[e12] * -1.0,
            ]) - (other.group1().zxyy() * self.group1().yzx().extend_to_4(self[e31]))
                - (self.group0().yzx() * other.group0().zxy()).extend_to_4(other[e1] * self[e23]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other[e321] * self[e23]) + (other[e2] * self[e12]),
                (other[e321] * self[e31]) + (other[e3] * self[e23]),
                (other[e321] * self[e12]) + (other[e1] * self[e31]),
                -(other[e315] * self[e31]) - (other[e125] * self[e12]) - (other[e1] * self[e15]) - (other[e2] * self[e25]) - (other[e3] * self[e35]),
            ]) - (self.group0().yzx() * other.group1().zxy()).extend_to_4(other[e235] * self[e23]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for AntiLine {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       23       43        0
    //    simd3        0        6        0
    //    simd4        6        2        0
    // Totals...
    // yes simd       29       51        0
    //  no simd       47       69        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                other[e31] * self[e12],
                other[e12] * self[e23],
                other[e23] * self[e31],
                -(other[e31] * self[e31]) - (other[e12] * self[e12]),
            ]) - (other.group0().zxy() * self.group0().yzx()).extend_to_4(other[e23] * self[e23]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (other[e31] * self[e35]) + (other[e25] * self[e12]),
                (other[e12] * self[e15]) + (other[e35] * self[e23]),
                (other[e23] * self[e25]) + (other[e15] * self[e31]),
                -(other[e12] * self[e35]) - (other[e15] * self[e23]) - (other[e25] * self[e31]) - (other[e35] * self[e12]),
            ]) - (other.group0().zxy() * self.group1().yzx()).extend_to_4(other[e23] * self[e15])
                - (other.group1().zxy() * self.group0().yzx()).extend_to_4(other[e31] * self[e25]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for AntiLine {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       50        0
    //    simd3        0        4        0
    //    simd4        6        4        0
    // Totals...
    // yes simd       38       58        0
    //  no simd       56       78        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self[e23] * other[scalar]) + (self[e12] * other[e31]),
                (self[e23] * other[e12]) + (self[e31] * other[scalar]),
                (self[e31] * other[e23]) + (self[e12] * other[scalar]),
                -(self[e31] * other[e31]) - (self[e12] * other[e12]),
            ]) - (other.group0().zxyx() * self.group0().yzx().extend_to_4(self[e23])),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e12] * other[e25]) + (self[e15] * other[scalar]) + (self[e35] * other[e31]),
                (self[e23] * other[e35]) + (self[e31] * other[e3215]) + (self[e15] * other[e12]) + (self[e25] * other[scalar]),
                (self[e31] * other[e15]) + (self[e12] * other[e3215]) + (self[e25] * other[e23]) + (self[e35] * other[scalar]),
                -(self[e12] * other[e35]) - (self[e15] * other[e23]) - (self[e25] * other[e31]) - (self[e35] * other[e12]),
            ]) - (other.group1().zxyx() * self.group0().yzx().extend_to_4(self[e23]))
                - (self.group1().yzx() * other.group0().zxy()).extend_to_4(self[e31] * other[e25]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for AntiLine {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       27        0
    //    simd3        0        4        0
    //    simd4        8        6        0
    // Totals...
    // yes simd       21       37        0
    //  no simd       45       63        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (self[e23] * other[e5]) + (self[e35] * other[e2]),
                (self[e31] * other[e5]) + (self[e15] * other[e3]),
                (self[e12] * other[e5]) + (self[e25] * other[e1]),
                -(self[e31] * other[e2]) - (self[e12] * other[e3]),
            ]) - (other.group0().zxyx() * self.group1().yzx().extend_to_4(self[e23])),
            // e1, e2, e3, e5
            Simd32x4::from([self[e12] * other[e2], self[e23] * other[e3], self[e31] * other[e1], -(self[e25] * other[e2]) - (self[e35] * other[e3])])
                - (other.group0().zxyx() * self.group0().yzx().extend_to_4(self[e15])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for AntiLine {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       18        0
    //    simd3        0        7        0
    //    simd4        3        0        0
    // Totals...
    // yes simd       10       25        0
    //  no simd       19       39        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(other[e12345]) * self.group0(),
            // e235, e315, e125
            Simd32x3::from(other[e12345]) * self.group1(),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for AntiLine {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       52       97        0
    //    simd3        0       14        0
    //    simd4       18        6        0
    // Totals...
    // yes simd       70      117        0
    //  no simd      124      163        0
    fn sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e12] * other[e431],
                self[e23] * other[e412],
                self[e31] * other[e423],
                -(self[e31] * other[e425]) - (self[e12] * other[e435]) - (self[e15] * other[e423]) - (self[e25] * other[e431]) - (self[e35] * other[e412]),
            ]) - (self.group0().yzx() * other.group0().zxy()).extend_to_4(self[e23] * other[e415]),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(self[e31] * other[e435]) - (self[e25] * other[e412]),
                -(self[e12] * other[e415]) - (self[e35] * other[e423]),
                -(self[e23] * other[e425]) - (self[e15] * other[e431]),
                self[e35] * other[e412],
            ]) + (self.group0().zxy() * other.group1().yzx()).extend_to_4(self[e15] * other[e423])
                + (self.group1().zxy() * other.group0().yzx()).extend_to_4(self[e25] * other[e431]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * other[e315]) + (self[e15] * other[e321]) + (self[e35] * other[e425]),
                (self[e23] * other[e125]) + (self[e15] * other[e435]) + (self[e25] * other[e321]),
                (self[e31] * other[e235]) + (self[e25] * other[e415]) + (self[e35] * other[e321]),
                -(self[e12] * other[e125]) - (self[e15] * other[e415]) - (self[e25] * other[e425]) - (self[e35] * other[e435]),
            ]) - (self.group0().yzx() * other.group2().zxy()).extend_to_4(self[e23] * other[e235])
                - (self.group1().yzx() * other.group1().zxy()).extend_to_4(self[e31] * other[e315]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e23] * other[e321]) + (self[e25] * other[e412]),
                (self[e31] * other[e321]) + (self[e35] * other[e423]),
                (self[e12] * other[e321]) + (self[e15] * other[e431]),
                -(self[e31] * other[e431]) - (self[e12] * other[e412]),
            ]) - (self.group1().zxy() * other.group0().yzx()).extend_to_4(self[e23] * other[e423]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for AntiLine {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       55       97        0
    //    simd3        0       12        0
    //    simd4       19        9        0
    // Totals...
    // yes simd       74      118        0
    //  no simd      131      169        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e12] * other[e431],
                self[e23] * other[e412],
                self[e31] * other[e423],
                -(self[e31] * other[e425]) - (self[e12] * other[e435]) - (self[e15] * other[e423]) - (self[e25] * other[e431]) - (self[e35] * other[e412]),
            ]) - (self.group0().yzx() * other.group0().zxy()).extend_to_4(self[e23] * other[e415]),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(self[e31] * other[e435]) - (self[e25] * other[e412]),
                -(self[e12] * other[e415]) - (self[e35] * other[e423]),
                -(self[e23] * other[e425]) - (self[e15] * other[e431]),
                0.0,
            ]) + (Simd32x4::from([other[e425], other[e12345], other[e12345], other[e431]]) * self.group0().zyz().extend_to_4(self[e25]))
                + (Simd32x4::from([other[e12345], other[e435], other[e415], other[e423]]) * self.group0().xxy().extend_to_4(self[e15]))
                + (self.group1().zxy() * other.group0().yzx()).extend_to_4(self[e35] * other[e412]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * other[e315]) + (self[e15] * other[e321]) + (self[e15] * other[e12345]) + (self[e35] * other[e425]),
                (self[e23] * other[e125]) + (self[e15] * other[e435]) + (self[e25] * other[e321]) + (self[e25] * other[e12345]),
                (self[e31] * other[e235]) + (self[e25] * other[e415]) + (self[e35] * other[e321]) + (self[e35] * other[e12345]),
                -(self[e12] * other[e125]) - (self[e15] * other[e415]) - (self[e25] * other[e425]) - (self[e35] * other[e435]),
            ]) - (other.group2().zxyx() * self.group0().yzx().extend_to_4(self[e23]))
                - (self.group1().yzx() * other.group1().zxy()).extend_to_4(self[e31] * other[e315]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e23] * other[e321]) + (self[e25] * other[e412]),
                (self[e31] * other[e321]) + (self[e35] * other[e423]),
                (self[e12] * other[e321]) + (self[e15] * other[e431]),
                -(self[e31] * other[e431]) - (self[e12] * other[e412]),
            ]) - (self.group1().zxy() * other.group0().yzx()).extend_to_4(self[e23] * other[e423]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for AntiLine {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       50       96        0
    //    simd3        0       16        0
    //    simd4       19        5        0
    // Totals...
    // yes simd       69      117        0
    //  no simd      126      164        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e12] * other[e42],
                self[e23] * other[e43],
                self[e31] * other[e41],
                -(self[e31] * other[e31]) - (self[e12] * other[e12]) - (self[e15] * other[e41]) - (self[e25] * other[e42]) - (self[e35] * other[e43]),
            ]) - (self.group0().yzx() * other.group0().zxy()).extend_to_4(self[e23] * other[e23]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e12] * other[e31]) + (self[e35] * other[e42]),
                (self[e23] * other[e12]) + (self[e15] * other[e43]),
                (self[e31] * other[e23]) + (self[e25] * other[e41]),
                self[e35] * other[e43] * -1.0,
            ]) - (self.group0().yzx() * other.group1().zxy()).extend_to_4(self[e15] * other[e41])
                - (self.group1().yzx() * other.group0().zxy()).extend_to_4(self[e25] * other[e42]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e12] * other[e25]) + (self[e35] * other[e31]),
                (self[e23] * other[e35]) + (self[e15] * other[e12]),
                (self[e31] * other[e15]) + (self[e25] * other[e23]),
                0.0,
            ]) - (self.group0().yzx() * other.group2().zxy()).extend_to_4(self[e23] * other[e41])
                - (self.group1().xyx() * other.group1().wwy()).extend_to_4(self[e31] * other[e42])
                - (self.group1().yzz() * other.group1().zxw()).extend_to_4(self[e12] * other[e43]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e23] * other[e45]) + (self[e35] * other[e42]),
                (self[e31] * other[e45]) + (self[e15] * other[e43]),
                (self[e12] * other[e45]) + (self[e25] * other[e41]),
                -(self[e31] * other[e25]) - (self[e12] * other[e35]) - (self[e15] * other[e23]) - (self[e25] * other[e31]) - (self[e35] * other[e12]),
            ]) - (self.group1().yzx() * other.group0().zxy()).extend_to_4(self[e23] * other[e15]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for AntiLine {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64      108        0
    //    simd3        0       15        0
    //    simd4       23       10        0
    // Totals...
    // yes simd       87      133        0
    //  no simd      156      193        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e23] * other[e1234]) + (self[e12] * other[e42]),
                (self[e23] * other[e43]) + (self[e31] * other[e1234]),
                (self[e31] * other[e41]) + (self[e12] * other[e1234]),
                -(self[e31] * other[e31]) - (self[e12] * other[e12]) - (self[e15] * other[e41]) - (self[e25] * other[e42]) - (self[e35] * other[e43]),
            ]) - (self.group0().yzx() * other.group0().zxy()).extend_to_4(self[e23] * other[e23]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e12] * other[e31]) + (self[e15] * other[e1234]) + (self[e35] * other[e42]),
                (self[e23] * other[e12]) + (self[e15] * other[e43]) + (self[e25] * other[e1234]),
                (self[e31] * other[e23]) + (self[e25] * other[e41]) + (self[e35] * other[e1234]),
                -(self[e12] * other[e4125]) - (self[e15] * other[e41]) - (self[e25] * other[e42]) - (self[e35] * other[e43]),
            ]) - (self.group0().yzx() * other.group1().zxy()).extend_to_4(self[e23] * other[e4235])
                - (self.group1().yzx() * other.group0().zxy()).extend_to_4(self[e31] * other[e4315]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e12] * other[e25]) + (self[e25] * other[e4125]) + (self[e35] * other[e31]) - (self[e35] * other[e4315]),
                (self[e23] * other[e35]) + (self[e31] * other[e3215]) + (self[e15] * other[e12]) + (self[e35] * other[e4235]) - (self[e35] * other[e23]),
                (self[e31] * other[e15]) + (self[e12] * other[e3215]) + (self[e15] * other[e4315]) + (self[e25] * other[e23]) - (self[e35] * other[e45]),
                0.0,
            ]) - (Simd32x4::from([other[e45], other[e4125], other[e31], other[e42]]) * self.group1().xxx().extend_to_4(self[e31]))
                - (other.group1().zw().extend_to_4(other[e4235], other[e43]) * self.group1().yyy().extend_to_4(self[e12]))
                - (self.group0().yzx() * other.group2().zxy()).extend_to_4(self[e23] * other[e41]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e35] * other[e42],
                self[e25] * other[e1234],
                self[e35] * other[e1234],
                -(self[e12] * other[e35]) - (self[e15] * other[e23]) - (self[e25] * other[e31]) - (self[e35] * other[e12]),
            ]) + (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e4235]]) * self.group0().xxy().extend_to_4(self[e15]))
                + (Simd32x4::from([other[e1234], other[e43], other[e41], other[e4125]]) * self.group1().xxy().extend_to_4(self[e35]))
                + (Simd32x4::from([other[e4315], other[e45], other[e45], other[e4315]]) * self.group0().zyz().extend_to_4(self[e25]))
                - (self.group0().yzx() * other.group3().zxy()).extend_to_4(self[e23] * other[e15])
                - (self.group1().yzx() * other.group0().zxy()).extend_to_4(self[e31] * other[e25]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for AntiLine {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       18        0
    //    simd3        1        8        0
    //    simd4        3        0        0
    // Totals...
    // yes simd       11       26        0
    //  no simd       22       42        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(other[e12345]) * self.group0(),
            // e235, e315, e125
            (Simd32x3::from(other[e5]) * self.group0()) + (Simd32x3::from(other[e12345]) * self.group1()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for AntiLine {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       30        0
    //    simd3        0        7        0
    //    simd4        5        2        0
    // Totals...
    // yes simd       23       39        0
    //  no simd       38       59        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            (self.group0().zxy() * other.group0().yzx()).extend_to_4(0.0)
                - (Simd32x3::from(other[e45]) * self.group1()).extend_to_4(0.0)
                - (self.group0().yzx() * other.group0().zxy()).extend_to_4(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([other[e45], other[e45], other[e45], 1.0]) * self.group0().extend_to_4(-(self[e23] * other[e15]) - (self[e31] * other[e25]) - (self[e12] * other[e35])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for AntiLine {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       41        0
    //    simd3        0        6        0
    //    simd4        9        5        0
    // Totals...
    // yes simd       33       52        0
    //  no simd       60       79        0
    fn sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e12] * other[e25]) + (self[e25] * other[e4125]),
                (self[e23] * other[e35]) + (self[e31] * other[e3215]) + (self[e35] * other[e4235]),
                (self[e31] * other[e15]) + (self[e12] * other[e3215]) + (self[e15] * other[e4315]),
                0.0,
            ]) - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e4315]]) * self.group1().xxy().extend_to_4(self[e31]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e4125]]) * self.group1().zyz().extend_to_4(self[e12]))
                - (self.group0().yzx() * other.group0().zxy()).extend_to_4(self[e23] * other[e4235]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e4235]]) * self.group0().xxy().extend_to_4(self[e15]))
                + (Simd32x4::from([other[e4315], other[e45], other[e45], other[e4315]]) * self.group0().zyz().extend_to_4(self[e25]))
                + Simd32x3::from(0.0).extend_to_4((self[e35] * other[e4125]) - (self[e31] * other[e25]) - (self[e12] * other[e35]))
                - (self.group0().yzx() * other.group1().zxy()).extend_to_4(self[e23] * other[e15]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for AntiLine {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       23       43        0
    //    simd3        0        6        0
    //    simd4        6        2        0
    // Totals...
    // yes simd       29       51        0
    //  no simd       47       69        0
    fn sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                self[e12] * other[e425],
                self[e23] * other[e435],
                self[e31] * other[e415],
                -(self[e31] * other[e425]) - (self[e12] * other[e435]),
            ]) - (self.group0().yzx() * other.group0().zxy()).extend_to_4(self[e23] * other[e415]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * other[e315]) + (self[e35] * other[e425]),
                (self[e23] * other[e125]) + (self[e15] * other[e435]),
                (self[e31] * other[e235]) + (self[e25] * other[e415]),
                -(self[e12] * other[e125]) - (self[e15] * other[e415]) - (self[e25] * other[e425]) - (self[e35] * other[e435]),
            ]) - (self.group0().yzx() * other.group1().zxy()).extend_to_4(self[e23] * other[e235])
                - (self.group1().yzx() * other.group0().zxy()).extend_to_4(self[e31] * other[e315]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for AntiLine {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       50        0
    //    simd3        0        4        0
    //    simd4        6        4        0
    // Totals...
    // yes simd       38       58        0
    //  no simd       56       78        0
    fn sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self[e23] * other[e12345]) + (self[e12] * other[e425]),
                (self[e23] * other[e435]) + (self[e31] * other[e12345]),
                (self[e31] * other[e415]) + (self[e12] * other[e12345]),
                -(self[e31] * other[e425]) - (self[e12] * other[e435]),
            ]) - (other.group0().zxyx() * self.group0().yzx().extend_to_4(self[e23])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e23] * other[e5]) + (self[e12] * other[e315]) + (self[e15] * other[e12345]) + (self[e35] * other[e425]),
                (self[e23] * other[e125]) + (self[e31] * other[e5]) + (self[e15] * other[e435]) + (self[e25] * other[e12345]),
                (self[e31] * other[e235]) + (self[e12] * other[e5]) + (self[e25] * other[e415]) + (self[e35] * other[e12345]),
                -(self[e12] * other[e125]) - (self[e15] * other[e415]) - (self[e25] * other[e425]) - (self[e35] * other[e435]),
            ]) - (other.group1().zxyx() * self.group0().yzx().extend_to_4(self[e23]))
                - (self.group1().yzx() * other.group0().zxy()).extend_to_4(self[e31] * other[e315]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for AntiLine {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       80      130        0
    //    simd2       10       12        0
    //    simd3       34       58        0
    //    simd4       30       16        0
    // Totals...
    // yes simd      154      216        0
    //  no simd      322      392        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            -(Simd32x2::from(self[e23]) * Simd32x2::from([other[e23], other[e415]]))
                - (Simd32x2::from(self[e31]) * Simd32x2::from([other[e31], other[e425]]))
                - (Simd32x2::from(self[e12]) * Simd32x2::from([other[e12], other[e435]]))
                - (Simd32x2::from(self[e15]) * Simd32x2::from([other[e41], other[e423]]))
                - (Simd32x2::from(self[e25]) * Simd32x2::from([other[e42], other[e431]]))
                - (Simd32x2::from(self[e35]) * Simd32x2::from([other[e43], other[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e23] * other[e321]) + (self[e12] * other[e2]) + (self[e25] * other[e412]),
                (self[e23] * other[e3]) + (self[e31] * other[e321]) + (self[e35] * other[e423]),
                (self[e31] * other[e1]) + (self[e12] * other[e321]) + (self[e15] * other[e431]),
                0.0,
            ]) - (Simd32x4::from([other[e4], other[e412], other[e423], other[e431]]) * self.group1().xxy().extend_to_4(self[e31]))
                - (Simd32x4::from([other[e431], other[e4], other[e4], other[e412]]) * self.group1().zyz().extend_to_4(self[e12]))
                - (self.group0().yzx() * other.group1().zxy()).extend_to_4(self[e23] * other[e423]),
            // e5
            -(self[e23] * other[e235])
                - (self[e31] * other[e315])
                - (self[e12] * other[e125])
                - (self[e15] * other[e1])
                - (self[e15] * other[e415])
                - (self[e25] * other[e2])
                - (self[e25] * other[e425])
                - (self[e35] * other[e3])
                - (self[e35] * other[e435]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e12] * other[e25]) + (self[e15] * other[scalar]) + (self[e25] * other[e4125]) + (self[e35] * other[e31]),
                (self[e23] * other[e35]) + (self[e31] * other[e3215]) + (self[e15] * other[e12]) + (self[e25] * other[scalar]) + (self[e35] * other[e4235]),
                (self[e31] * other[e15]) + (self[e12] * other[e3215]) + (self[e15] * other[e4315]) + (self[e25] * other[e23]) + (self[e35] * other[scalar]),
                -(self[e25] * other[e42]) - (self[e35] * other[e43]),
            ]) - (Simd32x4::from([other[e45], other[e4125], other[e31], other[e4315]]) * self.group1().xxx().extend_to_4(self[e31]))
                - (Simd32x4::from([other[e12], other[e45], other[e4235], other[e4125]]) * self.group1().yyy().extend_to_4(self[e12]))
                - (Simd32x4::from([other[e4315], other[e23], other[e45], other[e41]]) * self.group1().zzz().extend_to_4(self[e15]))
                - (self.group0().yzx() * other.group3().zxy()).extend_to_4(self[e23] * other[e4235]),
            // e41, e42, e43
            (Simd32x3::from([other[e42], other[e1234], other[e1234]]) * self.group0().zyz()) + (Simd32x3::from([other[e1234], other[e43], other[e41]]) * self.group0().xxy())
                - (self.group0().yzx() * other.group4().zxy()),
            // e23, e31, e12
            (Simd32x3::from(other[scalar]) * self.group0())
                + (Simd32x3::from([other[e42], other[e1234], other[e1234]]) * self.group1().zyz())
                + (Simd32x3::from([other[e1234], other[e43], other[e41]]) * self.group1().xxy())
                + (self.group0().zxy() * other.group5().yzx())
                - (self.group0().yzx() * other.group5().zxy())
                - (self.group1().yzx() * other.group4().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([self[e35] * other[e431], self[e25] * other[e4], self[e35] * other[e4], self[e12] * other[e3] * -1.0])
                + (Simd32x4::from([other[e4], other[e412], other[e423], other[e412]]) * self.group1().xxy().extend_to_4(self[e35]))
                + (other.group0().yy().extend_to_4(other[e12345], self[e15]) * self.group0().extend_to_4(other[e423]))
                + (self.group0().zxy() * other.group6().yzx()).extend_to_4(self[e25] * other[e431])
                - (self.group0().yzx() * other.group6().zxy()).extend_to_4(self[e23] * other[e1])
                - (self.group1().yzx() * other.group7().zxy()).extend_to_4(self[e31] * other[e2]),
            // e423, e431, e412
            (Simd32x3::from([other[e4], other[e412], other[e423]]) * self.group0().xxy()) + (Simd32x3::from([other[e431], other[e4], other[e4]]) * self.group0().zyz())
                - (self.group0().yzx() * other.group7().zxy()),
            // e235, e315, e125
            (Simd32x3::from(other[e12345]) * self.group1())
                + (Simd32x3::from([other[e2], other[e435], other[e415]]) * self.group1().zxy())
                + (Simd32x3::from([other[e5], other[e125], other[e235]]) * self.group0().xxy())
                + (Simd32x3::from([other[e321], other[e3], other[e1]]) * self.group1().xxy())
                + (Simd32x3::from([other[e315], other[e5], other[e5]]) * self.group0().zyz())
                + (self.group1().zyz() * other.group6().yww())
                - (self.group0().yzx() * other.group8().zxy())
                - (self.group1().yzx() * other.group1().zxy())
                - (self.group1().yzx() * other.group6().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e35] * other[e42],
                self[e25] * other[e1234],
                self[e35] * other[e1234],
                -(self[e12] * other[e35]) - (self[e15] * other[e23]) - (self[e25] * other[e31]) - (self[e35] * other[e12]),
            ]) + (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e4235]]) * self.group0().xxy().extend_to_4(self[e15]))
                + (Simd32x4::from([other[e4315], other[e45], other[e45], other[e4315]]) * self.group0().zyz().extend_to_4(self[e25]))
                + (Simd32x4::from([other[e1234], other[e43], other[e41], other[e4125]]) * self.group1().xxy().extend_to_4(self[e35]))
                - (self.group0().yzx() * other.group9().zxy()).extend_to_4(self[e23] * other[e15])
                - (self.group1().yzx() * other.group4().zxy()).extend_to_4(self[e31] * other[e25]),
            // e1234
            -(self[e23] * other[e41]) - (self[e31] * other[e42]) - (self[e12] * other[e43]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for AntiLine {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       21       43        0
    //    simd3        0        4        0
    //    simd4        5        3        0
    // Totals...
    // yes simd       26       50        0
    //  no simd       41       67        0
    fn sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e25] * other[e4125]),
                (self[e31] * other[e3215]) + (self[e35] * other[e4235]),
                (self[e12] * other[e3215]) + (self[e15] * other[e4315]),
                -(self[e31] * other[e4315]) - (self[e12] * other[e4125]),
            ]) - (other.group0().yzxx() * self.group1().zxy().extend_to_4(self[e23])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e31] * other[e4125] * -1.0,
                self[e12] * other[e4235] * -1.0,
                self[e23] * other[e4315] * -1.0,
                (self[e25] * other[e4315]) + (self[e35] * other[e4125]),
            ]) + (other.group0().yzxx() * self.group0().zxy().extend_to_4(self[e15])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for AntiLine {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       56        0
    //    simd3        0       11        0
    //    simd4       16       10        0
    // Totals...
    // yes simd       44       77        0
    //  no simd       92      129        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[e4]) * self.group0(),
            // e415, e425, e435, e321
            Simd32x4::from([other[e4], other[e4], other[e4], 1.0]) * self.group1().extend_to_4(-(self[e23] * other[e1]) - (self[e31] * other[e2]) - (self[e12] * other[e3])),
            // e235, e315, e125, e4
            (Simd32x3::from(other[e5]) * self.group0()).extend_to_4(0.0) + (self.group1().zxy() * other.group0().yzx()).extend_to_4(0.0)
                - (self.group1().yzx() * other.group0().zxy()).extend_to_4(0.0),
            // e1, e2, e3, e5
            Simd32x4::from([self[e12] * other[e2], self[e23] * other[e3], self[e31] * other[e1], self[e35] * other[e3] * -1.0])
                - (other.group0().zxyx() * self.group0().yzx().extend_to_4(self[e15]))
                - (other.group0().wwwy() * self.group1().extend_to_4(self[e25])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for AntiLine {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       18        0
    //    simd3        0        7        0
    //    simd4        3        0        0
    // Totals...
    // yes simd       10       25        0
    //  no simd       19       39        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(other[scalar]) * self.group0(),
            // e15, e25, e35
            Simd32x3::from(other[scalar]) * self.group1(),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for AntiLine {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       61        0
    //    simd3        0       14        0
    //    simd4       16        7        0
    // Totals...
    // yes simd       48       82        0
    //  no simd       96      131        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[e1234]) * self.group0(),
            // e23, e31, e12, e45
            Simd32x4::from([other[e1234], other[e1234], other[e1234], 1.0])
                * self.group1().extend_to_4(-(self[e23] * other[e4235]) - (self[e31] * other[e4315]) - (self[e12] * other[e4125])),
            // e15, e25, e35, e1234
            (Simd32x3::from(other[e3215]) * self.group0()).extend_to_4(0.0) + (self.group1().yzx() * other.group0().zxy()).extend_to_4(0.0)
                - (self.group1().zxy() * other.group0().yzx()).extend_to_4(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e31] * other[e4125] * -1.0,
                self[e12] * other[e4235] * -1.0,
                self[e23] * other[e4315] * -1.0,
                self[e35] * other[e4125],
            ]) + (Simd32x4::from([other[e1234], other[e1234], other[e1234], other[e4315]]) * self.group1().extend_to_4(self[e25]))
                + (other.group0().yzxx() * self.group0().zxy().extend_to_4(self[e15])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for AntiLine {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       65      110        0
    //    simd3        0       14        0
    //    simd4       24       12        0
    // Totals...
    // yes simd       89      136        0
    //  no simd      161      200        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e23] * other[e4]) + (self[e12] * other[e431]),
                (self[e23] * other[e412]) + (self[e31] * other[e4]),
                (self[e31] * other[e423]) + (self[e12] * other[e4]),
                -(self[e31] * other[e425]) - (self[e12] * other[e435]) - (self[e15] * other[e423]) - (self[e25] * other[e431]) - (self[e35] * other[e412]),
            ]) - (self.group0().yzx() * other.group0().zxy()).extend_to_4(self[e23] * other[e415]),
            // e415, e425, e435, e321
            Simd32x4::from([self[e35] * other[e431], self[e25] * other[e4], self[e35] * other[e4], self[e12] * other[e3] * -1.0])
                + (Simd32x4::from([other[e12345], other[e435], other[e415], other[e423]]) * self.group0().xxy().extend_to_4(self[e15]))
                + (Simd32x4::from([other[e425], other[e12345], other[e12345], other[e431]]) * self.group0().zyz().extend_to_4(self[e25]))
                + (Simd32x4::from([other[e4], other[e412], other[e423], other[e412]]) * self.group1().xxy().extend_to_4(self[e35]))
                - (self.group0().yzx() * other.group1().zxy()).extend_to_4(self[e23] * other[e1])
                - (self.group1().yzx() * other.group0().zxy()).extend_to_4(self[e31] * other[e2]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e23] * other[e5]) + (self[e12] * other[e315]) + (self[e15] * other[e12345]) + (self[e15] * other[e321]) + (self[e35] * other[e425]) + (self[e35] * other[e2]),
                (self[e23] * other[e125]) + (self[e31] * other[e5]) + (self[e15] * other[e435]) + (self[e15] * other[e3]) + (self[e25] * other[e12345]) + (self[e25] * other[e321]),
                (self[e31] * other[e235]) + (self[e12] * other[e5]) + (self[e25] * other[e415]) + (self[e25] * other[e1]) + (self[e35] * other[e12345]) + (self[e35] * other[e321]),
                -(self[e15] * other[e415]) - (self[e15] * other[e1]) - (self[e25] * other[e425]) - (self[e25] * other[e2]) - (self[e35] * other[e435]) - (self[e35] * other[e3]),
            ]) - (other.group2().zxyx() * self.group0().yzx().extend_to_4(self[e23]))
                - (self.group1().yzx() * other.group1().zxy()).extend_to_4(self[e31] * other[e315])
                - (self.group1().yzx() * other.group3().zxy()).extend_to_4(self[e12] * other[e125]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e23] * other[e321]) + (self[e12] * other[e2]) + (self[e25] * other[e412]),
                (self[e23] * other[e3]) + (self[e31] * other[e321]) + (self[e35] * other[e423]),
                (self[e31] * other[e1]) + (self[e12] * other[e321]) + (self[e15] * other[e431]),
                0.0,
            ]) - (Simd32x4::from([other[e431], other[e4], other[e4], other[e412]]) * self.group1().zyz().extend_to_4(self[e12]))
                - (Simd32x4::from([other[e4], other[e412], other[e423], other[e431]]) * self.group1().xxy().extend_to_4(self[e31]))
                - (self.group0().yzx() * other.group3().zxy()).extend_to_4(self[e23] * other[e423]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for AntiLine {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       70      114        0
    //    simd3        0       15        0
    //    simd4       23       10        0
    // Totals...
    // yes simd       93      139        0
    //  no simd      162      199        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e23] * other[e1234]) + (self[e12] * other[e42]),
                (self[e23] * other[e43]) + (self[e31] * other[e1234]),
                (self[e31] * other[e41]) + (self[e12] * other[e1234]),
                -(self[e31] * other[e31]) - (self[e12] * other[e12]) - (self[e15] * other[e41]) - (self[e25] * other[e42]) - (self[e35] * other[e43]),
            ]) - (self.group0().yzx() * other.group0().zxy()).extend_to_4(self[e23] * other[e23]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e23] * other[scalar]) + (self[e12] * other[e31]) + (self[e15] * other[e1234]) + (self[e35] * other[e42]),
                (self[e23] * other[e12]) + (self[e31] * other[scalar]) + (self[e15] * other[e43]) + (self[e25] * other[e1234]),
                (self[e31] * other[e23]) + (self[e12] * other[scalar]) + (self[e25] * other[e41]) + (self[e35] * other[e1234]),
                -(self[e12] * other[e4125]) - (self[e15] * other[e41]) - (self[e25] * other[e42]) - (self[e35] * other[e43]),
            ]) - (self.group0().yzx() * other.group1().zxy()).extend_to_4(self[e23] * other[e4235])
                - (self.group1().yzx() * other.group0().zxy()).extend_to_4(self[e31] * other[e4315]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e12] * other[e25]) + (self[e15] * other[scalar]) + (self[e25] * other[e4125]) + (self[e35] * other[e31])
                    - (self[e35] * other[e4315]),
                (self[e23] * other[e35]) + (self[e31] * other[e3215]) + (self[e15] * other[e12]) + (self[e25] * other[scalar]) + (self[e35] * other[e4235])
                    - (self[e35] * other[e23]),
                (self[e31] * other[e15]) + (self[e12] * other[e3215]) + (self[e15] * other[e4315]) + (self[e25] * other[e23]) + (self[e35] * other[scalar])
                    - (self[e35] * other[e45]),
                0.0,
            ]) - (Simd32x4::from([other[e45], other[e4125], other[e31], other[e42]]) * self.group1().xxx().extend_to_4(self[e31]))
                - (other.group1().zw().extend_to_4(other[e4235], other[e43]) * self.group1().yyy().extend_to_4(self[e12]))
                - (self.group0().yzx() * other.group2().zxy()).extend_to_4(self[e23] * other[e41]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e35] * other[e42],
                self[e25] * other[e1234],
                self[e35] * other[e1234],
                -(self[e12] * other[e35]) - (self[e15] * other[e23]) - (self[e25] * other[e31]) - (self[e35] * other[e12]),
            ]) + (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e4235]]) * self.group0().xxy().extend_to_4(self[e15]))
                + (Simd32x4::from([other[e1234], other[e43], other[e41], other[e4125]]) * self.group1().xxy().extend_to_4(self[e35]))
                + (Simd32x4::from([other[e4315], other[e45], other[e45], other[e4315]]) * self.group0().zyz().extend_to_4(self[e25]))
                - (self.group0().yzx() * other.group3().zxy()).extend_to_4(self[e23] * other[e15])
                - (self.group1().yzx() * other.group0().zxy()).extend_to_4(self[e31] * other[e25]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl std::ops::Div<sandwich> for AntiMotor {
    type Output = sandwich_partial<AntiMotor>;
    fn div(self, _rhs: sandwich) -> Self::Output {
        sandwich_partial(self)
    }
}
impl Sandwich<AntiCircleRotor> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       66      107        0
    //    simd3        0       10        0
    //    simd4       30       22        0
    // Totals...
    // yes simd       96      139        0
    //  no simd      186      225        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                other[e42] * self[e12],
                other[e43] * self[e23],
                other[e43] * self[scalar],
                -(other[e42] * self[e25]) - (other[e43] * self[e35]) - (other[e23] * self[e23]) - (other[e31] * self[e31]) - (other[e12] * self[e12]),
            ]) + (self.group0().wwyw() * other.group0().xyx().extend_to_4(other[scalar]))
                - (other.group0().zxy() * self.group0().yzx()).extend_to_4(other[e41] * self[e15]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e42] * self[e35]) + (other[e23] * self[scalar]) + (other[e31] * self[e12]) + (other[scalar] * self[e23]),
                (other[e43] * self[e15]) + (other[e31] * self[scalar]) + (other[e12] * self[e23]) + (other[scalar] * self[e31]),
                (other[e43] * self[e3215]) + (other[e23] * self[e31]) + (other[e12] * self[scalar]) + (other[scalar] * self[e12]),
                other[e43] * self[e35] * -1.0,
            ]) + (other.group0().xyx() * self.group1().wwy()).extend_to_4(other[e45] * self[scalar])
                - (self.group1().yzxx() * other.group0().zxy().extend_to_4(other[e41]))
                - (other.group1().zxy() * self.group0().yzx()).extend_to_4(other[e42] * self[e25]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e23] * self[e3215]) + (other[e31] * self[e35]) + (other[e15] * self[scalar]) + (other[e25] * self[e12]) + (other[scalar] * self[e15]),
                (other[e31] * self[e3215]) + (other[e12] * self[e15]) + (other[e25] * self[scalar]) + (other[e35] * self[e23]) + (other[scalar] * self[e25]),
                (other[e23] * self[e25]) + (other[e12] * self[e3215]) + (other[e15] * self[e31]) + (other[e35] * self[scalar]) + (other[scalar] * self[e35]),
                0.0,
            ]) - (self.group0().yzxz() * other.group2().zxy().extend_to_4(other[e43]))
                - (other.group1().zxy() * self.group1().yzx()).extend_to_4(other[e41] * self[e23])
                - (other.group1().www() * self.group1().truncate_to_3()).extend_to_4(other[e42] * self[e31]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e42] * self[e35]) + (other[e45] * self[e23]),
                (other[e43] * self[e15]) + (other[e45] * self[e31]),
                (other[e43] * self[e3215]) + (other[e45] * self[e12]),
                -(other[e31] * self[e25]) - (other[e12] * self[e35]) - (other[e45] * self[e3215]) - (other[e15] * self[e23]) - (other[e25] * self[e31]) - (other[e35] * self[e12]),
            ]) + (self.group1().wwyw() * other.group0().xyx().extend_to_4(other[scalar]))
                - (self.group1().yzxx() * other.group0().zxy().extend_to_4(other[e23])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       69      113        0
    //    simd3        0       12        0
    //    simd4       37       27        0
    // Totals...
    // yes simd      106      152        0
    //  no simd      217      257        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e431] * self[e12]) + (other[e4] * self[e23]),
                (other[e412] * self[e23]) + (other[e4] * self[e31]),
                (other[e412] * self[scalar]) + (other[e4] * self[e12]),
                -(other[e431] * self[e25]) - (other[e412] * self[e35]) - (other[e415] * self[e23]) - (other[e425] * self[e31]) - (other[e435] * self[e12]),
            ]) + (other.group0().xyx() * self.group0().wwy()).extend_to_4(other[e4] * self[e3215])
                - (other.group0().zxy() * self.group0().yzx()).extend_to_4(other[e423] * self[e15]),
            // e415, e425, e435, e321
            Simd32x4::from([other[e4] * self[e15], other[e4] * self[e25], other[e4] * self[e35], -(other[e2] * self[e31]) - (other[e3] * self[e12])])
                + (other.group1().yzzw() * self.group0().zxww())
                + (self.group1().zxwy() * other.group0().yzz().extend_to_4(other[e431]))
                + (self.group1().wwyx() * other.group0().xyx().extend_to_4(other[e423]))
                + (other.group1().xyx() * self.group0().wwy()).extend_to_4(other[e412] * self[e35])
                - (self.group0().yzxx() * other.group1().zxy().extend_to_4(other[e1]))
                - (self.group1().yzxw() * other.group0().zxy().extend_to_4(other[e4])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e321] * self[e15])
                    + (other[e235] * self[scalar])
                    + (other[e315] * self[e12])
                    + (other[e1] * self[e3215])
                    + (other[e2] * self[e35])
                    + (other[e5] * self[e23]),
                (other[e321] * self[e25])
                    + (other[e315] * self[scalar])
                    + (other[e125] * self[e23])
                    + (other[e2] * self[e3215])
                    + (other[e3] * self[e15])
                    + (other[e5] * self[e31]),
                (other[e321] * self[e35])
                    + (other[e235] * self[e31])
                    + (other[e125] * self[scalar])
                    + (other[e1] * self[e25])
                    + (other[e3] * self[e3215])
                    + (other[e5] * self[e12]),
                -(other[e235] * self[e23]) - (other[e315] * self[e31]) - (other[e125] * self[e12]) - (other[e1] * self[e15]) - (other[e2] * self[e25]) - (other[e3] * self[e35]),
            ]) + (other.group1().xyxw() * self.group1().wwyw())
                + (other.group1().yzz() * self.group1().zxw()).extend_to_4(other[e5] * self[scalar])
                - (other.group1().zxyx() * self.group1().yzxx())
                - (self.group1().yzxz() * other.group3().zxy().extend_to_4(other[e435]))
                - (other.group2().zxy() * self.group0().yzx()).extend_to_4(other[e425] * self[e25]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e321] * self[e23]) + (other[e1] * self[scalar]) + (other[e2] * self[e12]) - (other[e3] * self[e31]),
                (other[e321] * self[e31]) + (other[e2] * self[scalar]) + (other[e3] * self[e23]) - (other[e1] * self[e12]),
                (other[e321] * self[e12]) + (other[e1] * self[e31]) + (other[e3] * self[scalar]) - (other[e2] * self[e23]),
                0.0,
            ]) + (other.group0().zxy() * self.group1().yzx()).extend_to_4(other[e4] * self[scalar])
                - (other.group0().xyx() * self.group1().wwy()).extend_to_4(other[e423] * self[e23])
                - (other.group0().yzz() * self.group1().zxw()).extend_to_4(other[e431] * self[e31])
                - (other.group2().www() * self.group1().truncate_to_3()).extend_to_4(other[e412] * self[e12]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for AntiMotor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       26        0
    //    simd3        0        2        0
    //    simd4        7        9        0
    // Totals...
    // yes simd       23       37        0
    //  no simd       44       68        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(other[scalar]) * self.group0(),
            // e15, e25, e35, e3215
            (Simd32x4::from(other[e3215]) * self.group0()) + (Simd32x4::from(other[scalar]) * self.group1()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for AntiMotor {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       23        0
    //    simd3        3        6        0
    //    simd4        8        9        0
    // Totals...
    // yes simd       26       38        0
    //  no simd       56       77        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            ((Simd32x3::from(other[e321]) * self.group1().truncate_to_3()) + (other.group0().xyx() * self.group0().wwy()) + (other.group0().yzz() * self.group0().zxw())
                - (other.group0().zxy() * self.group0().yzx()))
            .extend_to_4(other[e321] * self[scalar]),
            // e1, e2, e3, e5
            Simd32x4::from([self[e23], self[e31], self[e12], 1.0])
                * other
                    .group0()
                    .www()
                    .extend_to_4((other[e321] * self[e3215]) - (other[e235] * self[e23]) - (other[e315] * self[e31]) - (other[e125] * self[e12])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for AntiMotor {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       43        0
    //    simd3        0        2        0
    //    simd4       14       14        0
    // Totals...
    // yes simd       42       59        0
    //  no simd       84      105        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (other[e315] * self[e12]) + (other[e321] * self[e15]) + (other[e1] * self[e3215]) + (other[e2] * self[e35]) + (other[e5] * self[e23]),
                (other[e125] * self[e23]) + (other[e321] * self[e25]) + (other[e2] * self[e3215]) + (other[e3] * self[e15]) + (other[e5] * self[e31]),
                (other[e125] * self[scalar]) + (other[e321] * self[e35]) + (other[e1] * self[e25]) + (other[e3] * self[e3215]) + (other[e5] * self[e12]),
                other[e3] * self[e12] * -1.0,
            ]) + (other.group0().xyxw() * self.group0().wwyw())
                - (other.group1().zxyy() * self.group1().yzx().extend_to_4(self[e31]))
                - (self.group0().yzxx() * other.group0().zxy().extend_to_4(other[e1])),
            // e1, e2, e3, e5
            Simd32x4::from([
                other[e2] * self[e12],
                other[e3] * self[e23],
                other[e3] * self[scalar],
                -(other[e315] * self[e31]) - (other[e125] * self[e12]) - (other[e1] * self[e15]) - (other[e2] * self[e25]) - (other[e3] * self[e35]),
            ]) + (Simd32x4::from(other[e321]) * self.group0().truncate_to_3().extend_to_4(self[e3215]))
                + (other.group1().xyxw() * self.group0().wwyw())
                - (self.group0().yzxx() * other.group1().zxy().extend_to_4(other[e235])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for AntiMotor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       51        0
    //    simd3        0        3        0
    //    simd4        9        8        0
    // Totals...
    // yes simd       41       62        0
    //  no simd       68       92        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (other[e23] * self[scalar]) + (other[e31] * self[e12]),
                (other[e31] * self[scalar]) + (other[e12] * self[e23]),
                (other[e23] * self[e31]) + (other[e12] * self[scalar]),
                -(other[e31] * self[e31]) - (other[e12] * self[e12]),
            ]) - (self.group0().yzxx() * other.group0().zxy().extend_to_4(other[e23])),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (other[e23] * self[e3215]) + (other[e31] * self[e35]) + (other[e15] * self[scalar]) + (other[e25] * self[e12]),
                (other[e31] * self[e3215]) + (other[e12] * self[e15]) + (other[e25] * self[scalar]) + (other[e35] * self[e23]),
                (other[e23] * self[e25]) + (other[e12] * self[e3215]) + (other[e15] * self[e31]) + (other[e35] * self[scalar]),
                -(other[e12] * self[e35]) - (other[e15] * self[e23]) - (other[e25] * self[e31]) - (other[e35] * self[e12]),
            ]) - (self.group1().yzxx() * other.group0().zxy().extend_to_4(other[e23]))
                - (other.group1().zxy() * self.group0().yzx()).extend_to_4(other[e31] * self[e25]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for AntiMotor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       52        0
    //    simd3        0        4        0
    //    simd4       12       10        0
    // Totals...
    // yes simd       44       66        0
    //  no simd       80      104        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (other[e31] * self[e12]) + (other[scalar] * self[e23]),
                (other[e12] * self[e23]) + (other[scalar] * self[e31]),
                (other[e12] * self[scalar]) + (other[scalar] * self[e12]),
                -(other[e31] * self[e31]) - (other[e12] * self[e12]),
            ]) + (other.group0().xyxw() * self.group0().wwyw())
                - (other.group0().zxyx() * self.group0().yzxx()),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (other[scalar] * self[e15]) + (other[e15] * self[scalar]) + (other[e25] * self[e12]) + (other[e3215] * self[e23]),
                (other[scalar] * self[e25]) + (other[e25] * self[scalar]) + (other[e35] * self[e23]) + (other[e3215] * self[e31]),
                (other[scalar] * self[e35]) + (other[e15] * self[e31]) + (other[e35] * self[scalar]) + (other[e3215] * self[e12]),
                -(other[e12] * self[e35]) - (other[e15] * self[e23]) - (other[e25] * self[e31]) - (other[e35] * self[e12]),
            ]) + (other.group0().xyxw() * self.group1().wwyw())
                + (other.group0().yzz() * self.group1().zxw()).extend_to_4(other[e3215] * self[scalar])
                - (other.group0().zxyx() * self.group1().yzxx())
                - (other.group1().zxy() * self.group0().yzx()).extend_to_4(other[e31] * self[e25]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for AntiMotor {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       34        0
    //    simd3        0        2        0
    //    simd4       11       11        0
    // Totals...
    // yes simd       31       47        0
    //  no simd       64       84        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (self[e23] * other[e5]) + (self[e35] * other[e2]) + (self[e3215] * other[e1]),
                (self[e31] * other[e5]) + (self[e15] * other[e3]) + (self[e3215] * other[e2]),
                (self[e12] * other[e5]) + (self[e25] * other[e1]) + (self[e3215] * other[e3]),
                -(self[e31] * other[e2]) - (self[e12] * other[e3]),
            ]) - (other.group0().zxyx() * self.group1().yzx().extend_to_4(self[e23])),
            // e1, e2, e3, e5
            Simd32x4::from([
                self[scalar] * other[e1],
                self[scalar] * other[e2],
                self[scalar] * other[e3],
                -(self[e25] * other[e2]) - (self[e35] * other[e3]),
            ]) + (self.group0().zxyw() * other.group0().yzxw())
                - (other.group0().zxyx() * self.group0().yzx().extend_to_4(self[e15])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for AntiMotor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       26        0
    //    simd3        0        2        0
    //    simd4        6        8        0
    // Totals...
    // yes simd       22       36        0
    //  no simd       40       64        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(other[e12345]) * self.group0(),
            // e235, e315, e125, e5
            Simd32x4::from(other[e12345]) * self.group1(),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       57       99        0
    //    simd3        0        9        0
    //    simd4       30       23        0
    // Totals...
    // yes simd       87      131        0
    //  no simd      177      218        0
    fn sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e12] * other[e431]) + (self[scalar] * other[e423]),
                (self[e23] * other[e412]) + (self[scalar] * other[e431]),
                (self[e31] * other[e423]) + (self[scalar] * other[e412]),
                -(self[e23] * other[e415]) - (self[e31] * other[e425]) - (self[e12] * other[e435]) - (self[e25] * other[e431]) - (self[e35] * other[e412]),
            ]) - (other.group0().zxy() * self.group0().yzx()).extend_to_4(self[e15] * other[e423]),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(self[e31] * other[e435]) - (self[e25] * other[e412]),
                -(self[e12] * other[e415]) - (self[e35] * other[e423]),
                -(self[e23] * other[e425]) - (self[e15] * other[e431]),
                0.0,
            ]) + (Simd32x4::from(self[scalar]) * other.group1())
                + (self.group1().zxwy() * other.group0().yzz().extend_to_4(other[e431]))
                + (self.group1().wwyx() * other.group0().xyx().extend_to_4(other[e423]))
                + (self.group0().zxy() * other.group1().yzx()).extend_to_4(self[e35] * other[e412]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * other[e315]) + (self[e15] * other[e321]) + (self[e35] * other[e425]) + (self[e3215] * other[e415]),
                (self[e23] * other[e125]) + (self[e15] * other[e435]) + (self[e25] * other[e321]) + (self[e3215] * other[e425]),
                (self[scalar] * other[e125]) + (self[e25] * other[e415]) + (self[e35] * other[e321]) + (self[e3215] * other[e435]),
                -(self[e12] * other[e125]) - (self[e15] * other[e415]) - (self[e25] * other[e425]) - (self[e35] * other[e435]),
            ]) + (other.group2().xyx() * self.group0().wwy()).extend_to_4(self[e3215] * other[e321])
                - (self.group0().yzxx() * other.group2().zxy().extend_to_4(other[e235]))
                - (self.group1().yzx() * other.group1().zxy()).extend_to_4(self[e31] * other[e315]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e23] * other[e321]) + (self[e25] * other[e412]),
                (self[e31] * other[e321]) + (self[e35] * other[e423]),
                (self[e12] * other[e321]) + (self[e15] * other[e431]),
                self[e12] * other[e412] * -1.0,
            ]) - (other.group0().xyx() * self.group1().wwy()).extend_to_4(self[e23] * other[e423])
                - (other.group0().yzz() * self.group1().zxw()).extend_to_4(self[e31] * other[e431]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       57       99        0
    //    simd3        0        9        0
    //    simd4       32       25        0
    // Totals...
    // yes simd       89      133        0
    //  no simd      185      226        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e12] * other[e431],
                self[e23] * other[e412],
                self[scalar] * other[e412],
                -(self[e23] * other[e415]) - (self[e31] * other[e425]) - (self[e12] * other[e435]) - (self[e25] * other[e431]) - (self[e35] * other[e412]),
            ]) + (other.group0().xyx() * self.group0().wwy()).extend_to_4(self[scalar] * other[e12345])
                - (other.group0().zxy() * self.group0().yzx()).extend_to_4(self[e15] * other[e423]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[scalar] * other[e415]) - (self[e31] * other[e435]) - (self[e25] * other[e412]),
                (self[scalar] * other[e425]) - (self[e12] * other[e415]) - (self[e35] * other[e423]),
                (self[scalar] * other[e435]) - (self[e23] * other[e425]) - (self[e15] * other[e431]),
                0.0,
            ]) + (Simd32x4::from([other[e425], other[e12345], other[e12345], other[e321]]) * self.group0().zyzw())
                + (Simd32x4::from([other[e12345], other[e435], other[e415], self[e35]]) * self.group0().xxy().extend_to_4(other[e412]))
                + (self.group1().zxwy() * other.group0().yzz().extend_to_4(other[e431]))
                + (self.group1().wwyx() * other.group0().xyx().extend_to_4(other[e423])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e15] * other[e321]) + (self[e15] * other[e12345]) + (self[e35] * other[e425]) + (self[e3215] * other[e415]),
                (self[e15] * other[e435]) + (self[e25] * other[e321]) + (self[e25] * other[e12345]) + (self[e3215] * other[e425]),
                (self[e25] * other[e415]) + (self[e35] * other[e321]) + (self[e35] * other[e12345]) + (self[e3215] * other[e435]),
                -(self[e12] * other[e125]) - (self[e15] * other[e415]) - (self[e25] * other[e425]) - (self[e35] * other[e435]),
            ]) + (other.group2() * self.group0().www().extend_to_4(self[e3215]))
                + (self.group0().zxy() * other.group2().yzx()).extend_to_4(self[e3215] * other[e321])
                - (self.group0().yzxx() * other.group2().zxyx())
                - (self.group1().yzx() * other.group1().zxy()).extend_to_4(self[e31] * other[e315]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e23] * other[e321]) + (self[e25] * other[e412]),
                (self[e31] * other[e321]) + (self[e35] * other[e423]),
                (self[e12] * other[e321]) + (self[e15] * other[e431]),
                self[e12] * other[e412] * -1.0,
            ]) - (other.group0().xyx() * self.group1().wwy()).extend_to_4(self[e23] * other[e423])
                - (other.group0().yzz() * self.group1().zxw()).extend_to_4(self[e31] * other[e431]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       66      108        0
    //    simd3        0       11        0
    //    simd4       28       19        0
    // Totals...
    // yes simd       94      138        0
    //  no simd      178      217        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e12] * other[e42]) + (self[scalar] * other[e41]),
                (self[e23] * other[e43]) + (self[scalar] * other[e42]),
                (self[e31] * other[e41]) + (self[scalar] * other[e43]),
                -(self[e23] * other[e23]) - (self[e31] * other[e31]) - (self[e12] * other[e12]) - (self[e25] * other[e42]) - (self[e35] * other[e43]),
            ]) - (other.group0().zxy() * self.group0().yzx()).extend_to_4(self[e15] * other[e41]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e12] * other[e31]) + (self[scalar] * other[e23]) + (self[e35] * other[e42]),
                (self[e23] * other[e12]) + (self[scalar] * other[e31]) + (self[e15] * other[e43]),
                (self[e31] * other[e23]) + (self[scalar] * other[e12]) + (self[e3215] * other[e43]),
                self[e35] * other[e43] * -1.0,
            ]) + (other.group0().xyx() * self.group1().wwy()).extend_to_4(self[scalar] * other[e45])
                - (self.group1().yzxx() * other.group0().zxy().extend_to_4(other[e41]))
                - (self.group0().yzx() * other.group1().zxy()).extend_to_4(self[e25] * other[e42]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e12] * other[e25]) + (self[scalar] * other[e15]) + (self[e35] * other[e31]) + (self[e3215] * other[e23]),
                (self[e23] * other[e35]) + (self[scalar] * other[e25]) + (self[e15] * other[e12]) + (self[e3215] * other[e31]),
                (self[e31] * other[e15]) + (self[scalar] * other[e35]) + (self[e25] * other[e23]) + (self[e3215] * other[e12]),
                0.0,
            ]) - (self.group0().yzxx() * other.group2().zxy().extend_to_4(other[e41]))
                - (self.group1().xyx() * other.group1().wwy()).extend_to_4(self[e31] * other[e42])
                - (self.group1().yzz() * other.group1().zxw()).extend_to_4(self[e12] * other[e43]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e23] * other[e45]) + (self[e35] * other[e42]) + (self[e3215] * other[e41]),
                (self[e31] * other[e45]) + (self[e15] * other[e43]) + (self[e3215] * other[e42]),
                (self[e12] * other[e45]) + (self[e25] * other[e41]) + (self[e3215] * other[e43]),
                -(self[e31] * other[e25]) - (self[e12] * other[e35]) - (self[e15] * other[e23]) - (self[e25] * other[e31]) - (self[e35] * other[e12]) - (self[e3215] * other[e45]),
            ]) - (other.group0().zxy() * self.group1().yzx()).extend_to_4(self[e23] * other[e15]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       74      118        0
    //    simd3        0       14        0
    //    simd4       36       24        0
    // Totals...
    // yes simd      110      156        0
    //  no simd      218      256        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e23] * other[e1234]) + (self[e12] * other[e42]),
                (self[e23] * other[e43]) + (self[e31] * other[e1234]),
                (self[e12] * other[e1234]) + (self[scalar] * other[e43]),
                -(self[e23] * other[e23]) - (self[e31] * other[e31]) - (self[e12] * other[e12]) - (self[e25] * other[e42]) - (self[e35] * other[e43]),
            ]) + (other.group0().xyx() * self.group0().wwy()).extend_to_4(self[e3215] * other[e1234])
                - (other.group0().zxy() * self.group0().yzx()).extend_to_4(self[e15] * other[e41]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e12] * other[e31]) + (self[scalar] * other[e23]) + (self[e15] * other[e1234]),
                (self[e23] * other[e12]) + (self[scalar] * other[e31]) + (self[e25] * other[e1234]),
                (self[e31] * other[e23]) + (self[scalar] * other[e12]) + (self[e35] * other[e1234]),
                -(self[e23] * other[e4235]) - (self[e31] * other[e4315]) - (self[e12] * other[e4125]) - (self[e35] * other[e43]),
            ]) + (other.group0().xyx() * self.group1().wwy()).extend_to_4(self[scalar] * other[e45])
                + (other.group0().yzz() * self.group1().zxw()).extend_to_4(self[e3215] * other[e1234])
                - (self.group1().yzxx() * other.group0().zxy().extend_to_4(other[e41]))
                - (self.group0().yzx() * other.group1().zxy()).extend_to_4(self[e25] * other[e42]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e12] * other[e25]) + (self[scalar] * other[e15]) + (self[e25] * other[e4125]) + (self[e35] * other[e31]) + (self[e3215] * other[e23])
                    - (self[e35] * other[e4315])
                    - (self[e3215] * other[e4235]),
                (self[e31] * other[e3215]) + (self[scalar] * other[e25]) + (self[e15] * other[e12]) + (self[e35] * other[e4235]) + (self[e3215] * other[e31])
                    - (self[e35] * other[e23])
                    - (self[e3215] * other[e4315]),
                (self[e12] * other[e3215]) + (self[scalar] * other[e35]) + (self[e15] * other[e4315]) + (self[e25] * other[e23]) + (self[e3215] * other[e12])
                    - (self[e35] * other[e45])
                    - (self[e3215] * other[e4125]),
                0.0,
            ]) + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e1234]]) * self.group0().xxyw())
                - (Simd32x4::from([other[e45], other[e4125], other[e31], self[e31]]) * self.group1().xxx().extend_to_4(other[e42]))
                - (other.group1().zw().extend_to_4(other[e4235], self[e12]) * self.group1().yyy().extend_to_4(other[e43]))
                - (self.group0().yzx() * other.group2().zxy()).extend_to_4(self[e23] * other[e41]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[scalar] * other[e4235]) + (self[e15] * other[e1234]),
                (self[scalar] * other[e4315]) + (self[e25] * other[e1234]),
                (self[scalar] * other[e4125]) + (self[e35] * other[e1234]),
                -(self[e12] * other[e35]) - (self[e15] * other[e23]) - (self[e25] * other[e31]) - (self[e35] * other[e12]) - (self[e3215] * other[e45]),
            ]) + (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e4315]]) * self.group0().xxy().extend_to_4(self[e25]))
                + (Simd32x4::from([other[e4315], other[e45], other[e45], other[e4125]]) * self.group0().zyz().extend_to_4(self[e35]))
                + (other.group0().xyx() * self.group1().wwy()).extend_to_4(self[scalar] * other[e3215])
                + (other.group0().yzz() * self.group1().zxw()).extend_to_4(self[e15] * other[e4235])
                - (self.group0().yzxy() * other.group3().zxy().extend_to_4(other[e25]))
                - (other.group0().zxy() * self.group1().yzx()).extend_to_4(self[e23] * other[e15]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for AntiMotor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       26        0
    //    simd3        0        2        0
    //    simd4        7        9        0
    // Totals...
    // yes simd       23       37        0
    //  no simd       44       68        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(other[e12345]) * self.group0(),
            // e235, e315, e125, e5
            (Simd32x4::from(other[e5]) * self.group0()) + (Simd32x4::from(other[e12345]) * self.group1()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for AntiMotor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       30        0
    //    simd3        3        4        0
    //    simd4        6        9        0
    // Totals...
    // yes simd       28       43        0
    //  no simd       52       78        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            ((Simd32x3::from(self[scalar]) * other.group0().truncate_to_3()) + (self.group0().zxy() * other.group0().yzx())
                - (Simd32x3::from(other[e45]) * self.group1().truncate_to_3())
                - (self.group0().yzx() * other.group0().zxy()))
            .extend_to_4(self[scalar] * other[e45]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([other[e45], other[e45], other[e45], 1.0])
                * self
                    .group0()
                    .truncate_to_3()
                    .extend_to_4(-(self[e23] * other[e15]) - (self[e31] * other[e25]) - (self[e12] * other[e35]) - (self[e3215] * other[e45])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for AntiMotor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       41        0
    //    simd4       14       16        0
    // Totals...
    // yes simd       42       57        0
    //  no simd       84      105        0
    fn sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e12] * other[e25]) + (self[scalar] * other[e15]) + (self[e25] * other[e4125]) - (self[e3215] * other[e4235]),
                (self[e31] * other[e3215]) + (self[scalar] * other[e25]) + (self[e35] * other[e4235]) - (self[e3215] * other[e4315]),
                (self[e12] * other[e3215]) + (self[scalar] * other[e35]) + (self[e15] * other[e4315]) - (self[e3215] * other[e4125]),
                0.0,
            ]) + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e45]]) * self.group0().xxyw())
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e4315]]) * self.group1().xxy().extend_to_4(self[e31]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e4125]]) * self.group1().zyz().extend_to_4(self[e12]))
                - (self.group0().yzxx() * other.group0().zxy().extend_to_4(other[e4235])),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e3215]]) * self.group0().xxyw())
                + (Simd32x4::from([other[e4315], other[e45], other[e45], other[e4235]]) * self.group0().zyz().extend_to_4(self[e15]))
                + (other.group1().xyzy() * self.group0().www().extend_to_4(self[e25]))
                + Simd32x3::from(0.0).extend_to_4((self[e35] * other[e4125]) - (self[e31] * other[e25]) - (self[e12] * other[e35]) - (self[e3215] * other[e45]))
                - (self.group0().yzxx() * other.group1().zxy().extend_to_4(other[e15])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for AntiMotor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       51        0
    //    simd3        0        3        0
    //    simd4        9        8        0
    // Totals...
    // yes simd       41       62        0
    //  no simd       68       92        0
    fn sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self[e12] * other[e425]) + (self[scalar] * other[e415]),
                (self[e23] * other[e435]) + (self[scalar] * other[e425]),
                (self[e31] * other[e415]) + (self[scalar] * other[e435]),
                -(self[e31] * other[e425]) - (self[e12] * other[e435]),
            ]) - (self.group0().yzxx() * other.group0().zxy().extend_to_4(other[e415])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * other[e315]) + (self[scalar] * other[e235]) + (self[e35] * other[e425]) + (self[e3215] * other[e415]),
                (self[e23] * other[e125]) + (self[scalar] * other[e315]) + (self[e15] * other[e435]) + (self[e3215] * other[e425]),
                (self[e31] * other[e235]) + (self[scalar] * other[e125]) + (self[e25] * other[e415]) + (self[e3215] * other[e435]),
                -(self[e23] * other[e235]) - (self[e31] * other[e315]) - (self[e12] * other[e125]) - (self[e35] * other[e435]),
            ]) - (self.group1().yzxx() * other.group0().zxy().extend_to_4(other[e415]))
                - (other.group1().zxy() * self.group0().yzx()).extend_to_4(self[e25] * other[e425]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for AntiMotor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       52        0
    //    simd3        0        4        0
    //    simd4       12       10        0
    // Totals...
    // yes simd       44       66        0
    //  no simd       80      104        0
    fn sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self[e12] * other[e425]) + (self[scalar] * other[e415]),
                (self[e31] * other[e12345]) + (self[scalar] * other[e425]),
                (self[e12] * other[e12345]) + (self[scalar] * other[e435]),
                -(self[e31] * other[e425]) - (self[e12] * other[e435]),
            ]) + (self.group0().xxyw() * other.group0().wzxw())
                - (self.group0().yzxx() * other.group0().zxyx()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[scalar] * other[e235]) + (self[e15] * other[e12345]) + (self[e35] * other[e425]) + (self[e3215] * other[e415]),
                (self[scalar] * other[e315]) + (self[e15] * other[e435]) + (self[e25] * other[e12345]) + (self[e3215] * other[e425]),
                (self[scalar] * other[e125]) + (self[e25] * other[e415]) + (self[e35] * other[e12345]) + (self[e3215] * other[e435]),
                -(self[e12] * other[e125]) - (self[e15] * other[e415]) - (self[e25] * other[e425]) - (self[e35] * other[e435]),
            ]) + (self.group0().xxyw() * other.group1().wzxw())
                + (self.group0().zyz() * other.group1().yww()).extend_to_4(self[e3215] * other[e12345])
                - (self.group0().yzxx() * other.group1().zxyx())
                - (self.group1().yzx() * other.group0().zxy()).extend_to_4(self[e31] * other[e315]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for AntiMotor {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       97      151        0
    //    simd2       14       16        0
    //    simd3       48       72        0
    //    simd4       45       31        0
    // Totals...
    // yes simd      204      270        0
    //  no simd      449      523        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from(self[scalar]) * other.group0()) + (Simd32x2::from(self[e3215]) * Simd32x2::from([other[e1234], other[e4]]))
                - (Simd32x2::from(self[e23]) * Simd32x2::from([other[e23], other[e415]]))
                - (Simd32x2::from(self[e31]) * Simd32x2::from([other[e31], other[e425]]))
                - (Simd32x2::from(self[e12]) * Simd32x2::from([other[e12], other[e435]]))
                - (Simd32x2::from(self[e15]) * Simd32x2::from([other[e41], other[e423]]))
                - (Simd32x2::from(self[e25]) * Simd32x2::from([other[e42], other[e431]]))
                - (Simd32x2::from(self[e35]) * Simd32x2::from([other[e43], other[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e23] * other[e321]) + (self[e12] * other[e2]) + (self[scalar] * other[e1]) - (self[e15] * other[e4]),
                (self[e23] * other[e3]) + (self[e31] * other[e321]) + (self[scalar] * other[e2]) - (self[e25] * other[e4]),
                (self[e31] * other[e1]) + (self[e12] * other[e321]) + (self[scalar] * other[e3]) - (self[e35] * other[e4]),
                0.0,
            ]) + (other.group7().zxy() * self.group1().yzx()).extend_to_4(self[scalar] * other[e4])
                - (other.group7().xyx() * self.group1().wwy()).extend_to_4(self[e23] * other[e423])
                - (other.group7().yzz() * self.group1().zxw()).extend_to_4(self[e31] * other[e431])
                - (self.group0().yzx() * other.group1().zxy()).extend_to_4(self[e12] * other[e412]),
            // e5
            (self[scalar] * other[e5]) + (self[e3215] * other[e12345]) + (self[e3215] * other[e321])
                - (self[e23] * other[e235])
                - (self[e31] * other[e315])
                - (self[e12] * other[e125])
                - (self[e15] * other[e1])
                - (self[e15] * other[e415])
                - (self[e25] * other[e2])
                - (self[e25] * other[e425])
                - (self[e35] * other[e3])
                - (self[e35] * other[e435]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e12] * other[e25]) + (self[scalar] * other[e15]) + (self[e25] * other[e4125]) + (self[e35] * other[e31]),
                (self[e23] * other[e35]) + (self[e31] * other[e3215]) + (self[scalar] * other[e25]) + (self[e15] * other[e12]) + (self[e35] * other[e4235]),
                (self[e31] * other[e15]) + (self[e12] * other[e3215]) + (self[scalar] * other[e35]) + (self[e15] * other[e4315]) + (self[e3215] * other[e12]),
                self[e12] * other[e4125] * -1.0,
            ]) + (other.group0().xx().extend_to_4(other[scalar], self[scalar]) * self.group1().truncate_to_3().extend_to_4(other[e45]))
                + (other.group5().xyx() * self.group1().wwy()).extend_to_4(self[e3215] * other[e1234])
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], self[e35]]) * self.group1().xxy().extend_to_4(other[e43]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e4235]]) * self.group1().zyz().extend_to_4(self[e23]))
                - (self.group1().yzxx() * other.group5().zxy().extend_to_4(other[e41]))
                - (other.group9().xyzy() * self.group1().www().extend_to_4(self[e31]))
                - (self.group0().yzx() * other.group3().zxy()).extend_to_4(self[e25] * other[e42]),
            // e41, e42, e43
            (Simd32x3::from(other[e1234]) * self.group0().truncate_to_3()) + (other.group4().xyx() * self.group0().wwy()) + (other.group4().yzz() * self.group0().zxw())
                - (other.group4().zxy() * self.group0().yzx()),
            // e23, e31, e12
            (Simd32x3::from(other[scalar]) * self.group0().truncate_to_3())
                + (Simd32x3::from(other[e1234]) * self.group1().truncate_to_3())
                + (other.group4().xyx() * self.group1().wwy())
                + (other.group4().yzz() * self.group1().zxw())
                + (other.group5().xyx() * self.group0().wwy())
                + (other.group5().yzz() * self.group0().zxw())
                - (other.group4().zxy() * self.group1().yzx())
                - (other.group5().zxy() * self.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[scalar] * other[e415]) + (self[e15] * other[e4]),
                (self[scalar] * other[e425]) + (self[e25] * other[e4]),
                (self[scalar] * other[e435]) + (self[e35] * other[e4]),
                -(self[e12] * other[e3]) - (self[e3215] * other[e4]),
            ]) + (self.group0().zxyw() * other.group6().yzxw())
                + (self.group1().zxwz() * other.group7().yzz().extend_to_4(other[e412]))
                + (self.group1().wwyy() * other.group7().xyx().extend_to_4(other[e431]))
                + (other.group0().yy().extend_to_4(other[e12345], other[e423]) * self.group0().truncate_to_3().extend_to_4(self[e15]))
                - (self.group0().yzxy() * other.group6().zxy().extend_to_4(other[e2]))
                - (other.group7().zxy() * self.group1().yzx()).extend_to_4(self[e23] * other[e1]),
            // e423, e431, e412
            (Simd32x3::from(other[e4]) * self.group0().truncate_to_3()) + (other.group7().xyx() * self.group0().wwy()) + (other.group7().yzz() * self.group0().zxw())
                - (other.group7().zxy() * self.group0().yzx()),
            // e235, e315, e125
            (Simd32x3::from(self[e3215]) * other.group1().truncate_to_3())
                + (Simd32x3::from(self[e3215]) * other.group6().truncate_to_3())
                + (Simd32x3::from(other[e12345]) * self.group1().truncate_to_3())
                + (Simd32x3::from(other[e5]) * self.group0().truncate_to_3())
                + (Simd32x3::from([other[e2], other[e435], other[e415]]) * self.group1().zxy())
                + (Simd32x3::from([other[e321], other[e3], other[e1]]) * self.group1().xxy())
                + (other.group8().xyx() * self.group0().wwy())
                + (other.group8().yzz() * self.group0().zxw())
                + (self.group1().zyz() * other.group6().yww())
                - (other.group8().zxy() * self.group0().yzx())
                - (self.group1().yzx() * other.group1().zxy())
                - (self.group1().yzx() * other.group6().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e15] * other[e1234],
                self[e25] * other[e1234],
                self[e35] * other[e1234],
                -(self[e23] * other[e15]) - (self[e31] * other[e25]) - (self[e12] * other[e35]) - (self[e35] * other[e12]) - (self[e3215] * other[e45]),
            ]) + (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e4235]]) * self.group0().xxy().extend_to_4(self[e15]))
                + (Simd32x4::from([other[e4315], other[e45], other[e45], other[e4315]]) * self.group0().zyz().extend_to_4(self[e25]))
                + (self.group1().wwyw() * other.group4().xyx().extend_to_4(other[scalar]))
                + (other.group9().xyzz() * self.group0().www().extend_to_4(self[e35]))
                + (other.group4().yzz() * self.group1().zxw()).extend_to_4(self[scalar] * other[e3215])
                - (self.group1().yzxx() * other.group4().zxy().extend_to_4(other[e23]))
                - (self.group0().yzx() * other.group9().zxy()).extend_to_4(self[e25] * other[e31]),
            // e1234
            (self[scalar] * other[e1234]) - (self[e23] * other[e41]) - (self[e31] * other[e42]) - (self[e12] * other[e43]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for AntiMotor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       41        0
    //    simd4       10       12        0
    // Totals...
    // yes simd       30       53        0
    //  no simd       60       89        0
    fn sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e25] * other[e4125]),
                (self[e31] * other[e3215]) + (self[e35] * other[e4235]),
                (self[e12] * other[e3215]) + (self[e15] * other[e4315]),
                self[e12] * other[e4125] * -1.0,
            ]) - (other.group0().xyzy() * self.group1().www().extend_to_4(self[e31]))
                - (other.group0().yzxx() * self.group1().zxy().extend_to_4(self[e23])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e31] * other[e4125] * -1.0,
                self[e12] * other[e4235] * -1.0,
                self[e23] * other[e4315] * -1.0,
                (self[e25] * other[e4315]) + (self[e35] * other[e4125]),
            ]) + (self.group0().zxyw() * other.group0().yzxw())
                + (other.group0().xyzx() * self.group0().www().extend_to_4(self[e15])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       39       65        0
    //    simd3        3        7        0
    //    simd4       22       23        0
    // Totals...
    // yes simd       64       95        0
    //  no simd      136      178        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(other[e4]) * self.group0().truncate_to_3().extend_to_4(self[e3215]),
            // e415, e425, e435, e321
            Simd32x4::from([other[e4], other[e4], other[e4], 1.0])
                * self
                    .group1()
                    .truncate_to_3()
                    .extend_to_4(-(self[e23] * other[e1]) - (self[e31] * other[e2]) - (self[e12] * other[e3]) - (self[e3215] * other[e4])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e35] * other[e2]) + (self[e3215] * other[e1]),
                (self[e15] * other[e3]) + (self[e3215] * other[e2]),
                (self[e25] * other[e1]) + (self[e3215] * other[e3]),
                -(self[e25] * other[e2]) - (self[e35] * other[e3]),
            ]) + (Simd32x4::from(other[e5]) * self.group0())
                - (self.group1().yzxx() * other.group0().zxyx()),
            // e1, e2, e3, e4
            ((Simd32x3::from(self[scalar]) * other.group0().truncate_to_3()) + (self.group0().zxy() * other.group0().yzx())
                - (Simd32x3::from(other[e4]) * self.group1().truncate_to_3())
                - (self.group0().yzx() * other.group0().zxy()))
            .extend_to_4(self[scalar] * other[e4]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for AntiMotor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       26        0
    //    simd3        0        2        0
    //    simd4        6        8        0
    // Totals...
    // yes simd       22       36        0
    //  no simd       40       64        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(other[scalar]) * self.group0(),
            // e15, e25, e35, e3215
            Simd32x4::from(other[scalar]) * self.group1(),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       65        0
    //    simd3        3        9        0
    //    simd4       23       22        0
    // Totals...
    // yes simd       62       96        0
    //  no simd      137      180        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(other[e1234]) * self.group0().truncate_to_3().extend_to_4(self[e3215]),
            // e23, e31, e12, e45
            Simd32x4::from([other[e1234], other[e1234], other[e1234], 1.0])
                * self
                    .group1()
                    .truncate_to_3()
                    .extend_to_4((self[e3215] * other[e1234]) - (self[e23] * other[e4235]) - (self[e31] * other[e4315]) - (self[e12] * other[e4125])),
            // e15, e25, e35, e1234
            ((Simd32x3::from(other[e3215]) * self.group0().truncate_to_3()) + (self.group1().yzx() * other.group0().zxy())
                - (Simd32x3::from(self[e3215]) * other.group0().truncate_to_3())
                - (self.group1().zxy() * other.group0().yzx()))
            .extend_to_4(self[scalar] * other[e1234]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e31] * other[e4125] * -1.0,
                self[e12] * other[e4235] * -1.0,
                self[e23] * other[e4315] * -1.0,
                self[e35] * other[e4125],
            ]) + (Simd32x4::from([other[e1234], other[e1234], other[e1234], other[e4315]]) * self.group1().xyzy())
                + (self.group0().zxyw() * other.group0().yzxw())
                + (other.group0().xyzx() * self.group0().www().extend_to_4(self[e15])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       69      110        0
    //    simd3        0        9        0
    //    simd4       39       32        0
    // Totals...
    // yes simd      108      151        0
    //  no simd      225      265        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[scalar] * other[e423],
                self[scalar] * other[e431],
                self[scalar] * other[e412],
                -(self[e31] * other[e425]) - (self[e12] * other[e435]) - (self[e15] * other[e423]) - (self[e25] * other[e431]) - (self[e35] * other[e412]),
            ]) + (Simd32x4::from([other[e431], other[e4], other[e4], other[e4]]) * self.group0().zyz().extend_to_4(self[e3215]))
                + (Simd32x4::from([other[e4], other[e412], other[e423], other[e12345]]) * self.group0().xxyw())
                - (self.group0().yzxx() * other.group0().zxy().extend_to_4(other[e415])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e35] * other[e431]) + (self[e3215] * other[e423]),
                (self[e25] * other[e4]) + (self[e3215] * other[e431]),
                (self[e35] * other[e4]) + (self[e3215] * other[e412]),
                -(self[e12] * other[e3]) - (self[e3215] * other[e4]),
            ]) + (Simd32x4::from([other[e12345], other[e435], other[e415], other[e321]]) * self.group0().xxyw())
                + (Simd32x4::from([other[e425], other[e12345], other[e12345], other[e423]]) * self.group0().zyz().extend_to_4(self[e15]))
                + (Simd32x4::from([other[e4], other[e412], other[e423], other[e412]]) * self.group1().xxyz())
                + (self.group0().www() * other.group1().truncate_to_3()).extend_to_4(self[e25] * other[e431])
                - (self.group0().yzxx() * other.group1().zxy().extend_to_4(other[e1]))
                - (self.group1().yzx() * other.group0().zxy()).extend_to_4(self[e31] * other[e2]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e15] * other[e12345])
                    + (self[e15] * other[e321])
                    + (self[e35] * other[e425])
                    + (self[e35] * other[e2])
                    + (self[e3215] * other[e415])
                    + (self[e3215] * other[e1]),
                (self[e15] * other[e435])
                    + (self[e15] * other[e3])
                    + (self[e25] * other[e12345])
                    + (self[e25] * other[e321])
                    + (self[e3215] * other[e425])
                    + (self[e3215] * other[e2]),
                (self[e25] * other[e415])
                    + (self[e25] * other[e1])
                    + (self[e35] * other[e12345])
                    + (self[e35] * other[e321])
                    + (self[e3215] * other[e435])
                    + (self[e3215] * other[e3]),
                -(self[e15] * other[e415]) - (self[e15] * other[e1]) - (self[e25] * other[e425]) - (self[e25] * other[e2]) - (self[e35] * other[e435]) - (self[e35] * other[e3]),
            ]) + (self.group0().xxyw() * other.group2().wzxw())
                + (self.group0().zyz() * other.group2().yww()).extend_to_4(self[e3215] * other[e12345])
                + (self.group0().www() * other.group2().truncate_to_3()).extend_to_4(self[e3215] * other[e321])
                - (self.group0().yzxx() * other.group2().zxyx())
                - (self.group1().yzx() * other.group1().zxy()).extend_to_4(self[e31] * other[e315])
                - (self.group1().yzx() * other.group3().zxy()).extend_to_4(self[e12] * other[e125]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e12] * other[e2]) + (self[scalar] * other[e1]) + (self[e25] * other[e412]) - (self[e3215] * other[e423]),
                (self[e31] * other[e321]) + (self[scalar] * other[e2]) + (self[e35] * other[e423]) - (self[e3215] * other[e431]),
                (self[e12] * other[e321]) + (self[scalar] * other[e3]) + (self[e15] * other[e431]) - (self[e3215] * other[e412]),
                0.0,
            ]) + (Simd32x4::from([other[e321], other[e3], other[e1], other[e4]]) * self.group0().xxyw())
                - (Simd32x4::from([other[e431], other[e4], other[e4], other[e412]]) * self.group1().zyz().extend_to_4(self[e12]))
                - (Simd32x4::from([other[e4], other[e412], other[e423], other[e431]]) * self.group1().xxy().extend_to_4(self[e31]))
                - (self.group0().yzxx() * other.group3().zxy().extend_to_4(other[e423])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       74      111        0
    //    simd3        0        7        0
    //    simd4       38       33        0
    // Totals...
    // yes simd      112      151        0
    //  no simd      226      264        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[scalar] * other[e41],
                self[scalar] * other[e42],
                self[scalar] * other[e43],
                -(self[e31] * other[e31]) - (self[e12] * other[e12]) - (self[e15] * other[e41]) - (self[e25] * other[e42]) - (self[e35] * other[e43]),
            ]) + (Simd32x4::from([other[e42], other[e1234], other[e1234], other[e1234]]) * self.group0().zyz().extend_to_4(self[e3215]))
                + (Simd32x4::from([other[e1234], other[e43], other[e41], other[scalar]]) * self.group0().xxyw())
                - (self.group0().yzxx() * other.group0().zxy().extend_to_4(other[e23])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[scalar] * other[e23]) + (self[e15] * other[e1234]) + (self[e35] * other[e42]) + (self[e3215] * other[e41]),
                (self[scalar] * other[e31]) + (self[e15] * other[e43]) + (self[e25] * other[e1234]) + (self[e3215] * other[e42]),
                (self[scalar] * other[e12]) + (self[e25] * other[e41]) + (self[e35] * other[e1234]) + (self[e3215] * other[e43]),
                -(self[e12] * other[e4125]) - (self[e15] * other[e41]) - (self[e25] * other[e42]) - (self[e35] * other[e43]),
            ]) + (Simd32x4::from([other[scalar], other[e12], other[e23], other[e45]]) * self.group0().xxyw())
                + (Simd32x4::from([other[e31], other[scalar], other[scalar], other[e1234]]) * self.group0().zyz().extend_to_4(self[e3215]))
                - (self.group0().yzxx() * other.group1().zxy().extend_to_4(other[e4235]))
                - (self.group1().yzx() * other.group0().zxy()).extend_to_4(self[e31] * other[e4315]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e12] * other[e25])
                    + (self[scalar] * other[e15])
                    + (self[e15] * other[scalar])
                    + (self[e25] * other[e4125])
                    + (self[e35] * other[e31])
                    + (self[e3215] * other[e23])
                    - (self[e35] * other[e4315])
                    - (self[e3215] * other[e4235]),
                (self[e31] * other[e3215])
                    + (self[scalar] * other[e25])
                    + (self[e15] * other[e12])
                    + (self[e25] * other[scalar])
                    + (self[e35] * other[e4235])
                    + (self[e3215] * other[e31])
                    - (self[e35] * other[e23])
                    - (self[e3215] * other[e4315]),
                (self[e12] * other[e3215])
                    + (self[scalar] * other[e35])
                    + (self[e15] * other[e4315])
                    + (self[e25] * other[e23])
                    + (self[e35] * other[scalar])
                    + (self[e3215] * other[e12])
                    - (self[e35] * other[e45])
                    - (self[e3215] * other[e4125]),
                0.0,
            ]) + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e1234]]) * self.group0().xxyw())
                - (Simd32x4::from([other[e45], other[e4125], other[e31], other[e42]]) * self.group1().xxx().extend_to_4(self[e31]))
                - (self.group0().yzxx() * other.group2().zxy().extend_to_4(other[e41]))
                - (other.group1().zw().extend_to_4(other[e4235], other[e43]) * self.group1().yyy().extend_to_4(self[e12])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e3215] * other[e41],
                self[e3215] * other[e42],
                self[e3215] * other[e43],
                -(self[e12] * other[e35]) - (self[e15] * other[e23]) - (self[e25] * other[e31]) - (self[e35] * other[e12]) - (self[e3215] * other[e45]),
            ]) + (Simd32x4::from([other[e42], other[e1234], other[e1234], other[scalar]]) * self.group1().zyzw())
                + (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e3215]]) * self.group0().xxyw())
                + (Simd32x4::from([other[e1234], other[e43], other[e41], other[e4125]]) * self.group1().xxyz())
                + (Simd32x4::from([other[e4315], other[e45], other[e45], other[e4235]]) * self.group0().zyz().extend_to_4(self[e15]))
                + (other.group3().xyzy() * self.group0().www().extend_to_4(self[e25]))
                - (self.group0().yzxx() * other.group3().zxy().extend_to_4(other[e15]))
                - (self.group1().yzx() * other.group0().zxy()).extend_to_4(self[e31] * other[e25]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl std::ops::Div<sandwich> for AntiPlane {
    type Output = sandwich_partial<AntiPlane>;
    fn div(self, _rhs: sandwich) -> Self::Output {
        sandwich_partial(self)
    }
}
impl Sandwich<AntiCircleRotor> for AntiPlane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       36        0
    //    simd3        1        2        0
    //    simd4       16       17        0
    // Totals...
    // yes simd       27       55        0
    //  no simd       77      110        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (other.group0().yzx() * self.group0().zxy()) - (other.group0().zxy() * self.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([other[e41] * self[e5], other[e42] * self[e5], other[e43] * self[e5], -(other[e31] * self[e2]) - (other[e12] * self[e3])])
                - (other.group1().wwwx() * self.group0().xyzx()),
            // e235, e315, e125, e4
            Simd32x4::from([
                (other[e23] * self[e5]) + (other[e35] * self[e2]),
                (other[e31] * self[e5]) + (other[e15] * self[e3]),
                (other[e12] * self[e5]) + (other[e25] * self[e1]),
                -(other[e42] * self[e2]) - (other[e43] * self[e3]),
            ]) - (self.group0().zxyx() * other.group2().yzx().extend_to_4(other[e41])),
            // e1, e2, e3, e5
            Simd32x4::from([
                other[e12] * self[e2] * -1.0,
                other[e23] * self[e3] * -1.0,
                other[e31] * self[e1] * -1.0,
                (other[e35] * self[e3]) + (other[scalar] * self[e5]),
            ]) + (other.group2().wwwy() * self.group0().xyzy())
                + (self.group0().zxyx() * other.group1().yzx().extend_to_4(other[e15]))
                - (Simd32x4::from(self[e5]) * other.group0().extend_to_4(other[e45])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for AntiPlane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       56        0
    //    simd4       19       19        0
    // Totals...
    // yes simd       36       75        0
    //  no simd       93      132        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                other[e4] * self[e1] * -1.0,
                other[e4] * self[e2] * -1.0,
                other[e4] * self[e3] * -1.0,
                (other[e2] * self[e2]) + (other[e3] * self[e3]),
            ]) + (self.group0().yzxx() * other.group0().zxy().extend_to_4(other[e1]))
                - (self.group0().zxyw() * other.group0().yzx().extend_to_4(other[e4])),
            // e23, e31, e12, e45
            Simd32x4::from([other[e3] * self[e2], other[e1] * self[e3], other[e2] * self[e1], other[e4] * self[e5] * -1.0])
                - (other.group1().wwwy() * self.group0().xyzy())
                - (self.group0().zxyz() * other.group3().yzx().extend_to_4(other[e435]))
                - (self.group0().wwwx() * other.group0().extend_to_4(other[e415])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(other[e415] * self[e5]) - (other[e125] * self[e2]) - (other[e1] * self[e5]),
                -(other[e425] * self[e5]) - (other[e235] * self[e3]) - (other[e2] * self[e5]),
                -(other[e435] * self[e5]) - (other[e315] * self[e1]) - (other[e3] * self[e5]),
                other[e412] * self[e3],
            ]) + (self.group0().xyzy() * other.group3().www().extend_to_4(other[e431]))
                + (self.group0().zxyx() * other.group2().yzx().extend_to_4(other[e423])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e425] * self[e3],
                other[e435] * self[e1],
                other[e415] * self[e2],
                -(other[e315] * self[e2]) - (other[e125] * self[e3]),
            ]) - (Simd32x4::from(self[e5]) * other.group0().extend_to_4(other[e321]))
                - (self.group0().yzxx() * other.group1().zxy().extend_to_4(other[e235])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for AntiPlane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       16        0
    //    simd4        3        7        0
    // Totals...
    // yes simd       11       23        0
    //  no simd       20       44        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            other.group0().xx().extend_to_4(other[e3215], 0.0)
                * Simd32x3::from(1.0).extend_to_4(0.0)
                * self.group0().truncate_to_3().extend_to_4(0.0)
                * Simd32x4::from([-1.0, -1.0, -1.0, 0.0]),
            // e1, e2, e3, e5
            Simd32x4::from(other[scalar]) * self.group0(),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for AntiPlane {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       22        0
    //    simd4        4        7        0
    // Totals...
    // yes simd       14       29        0
    //  no simd       26       50        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x3::from(1.0).extend_to_4(0.0) * other.group0().www().extend_to_4(0.0) * self.group0().truncate_to_3().extend_to_4(0.0) * Simd32x4::from([-1.0, -1.0, -1.0, 0.0]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                other[e315] * self[e3],
                other[e125] * self[e1],
                other[e235] * self[e2],
                -(other[e315] * self[e2]) - (other[e125] * self[e3]) - (other[e321] * self[e5]),
            ]) - (other.group0().zxyx() * self.group0().yzxx()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for AntiPlane {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       32        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       22       38        0
    //  no simd       40       56        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                -(other[e321] * self[e1]) - (other[e2] * self[e3]),
                -(other[e321] * self[e2]) - (other[e3] * self[e1]),
                -(other[e321] * self[e3]) - (other[e1] * self[e2]),
                (other[e2] * self[e2]) + (other[e3] * self[e3]),
            ]) + (other.group1().zxyx() * self.group0().yzxx()),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (other[e315] * self[e3]) + (other[e5] * self[e1]),
                (other[e125] * self[e1]) + (other[e5] * self[e2]),
                (other[e235] * self[e2]) + (other[e5] * self[e3]),
                -(other[e125] * self[e3]) - (other[e321] * self[e5]),
            ]) - (other.group0().zxyx() * self.group0().yzxx())
                - (self.group0().wwwy() * other.group1().truncate_to_3().extend_to_4(other[e315])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for AntiPlane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       32        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       18       37        0
    //  no simd       33       52        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (other[e23] * self[e5]) + (other[e35] * self[e2]),
                (other[e31] * self[e5]) + (other[e15] * self[e3]),
                (other[e12] * self[e5]) + (other[e25] * self[e1]),
                -(other[e31] * self[e2]) - (other[e12] * self[e3]),
            ]) - (self.group0().zxyx() * other.group1().yzx().extend_to_4(other[e23])),
            // e1, e2, e3, e5
            Simd32x4::from([
                other[e12] * self[e2] * -1.0,
                other[e23] * self[e3] * -1.0,
                other[e31] * self[e1] * -1.0,
                (other[e25] * self[e2]) + (other[e35] * self[e3]),
            ]) + (self.group0().zxyx() * other.group0().yzx().extend_to_4(other[e15])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for AntiPlane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       32        0
    //    simd4        7        7        0
    // Totals...
    // yes simd       19       39        0
    //  no simd       40       60        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (other[e23] * self[e5]) + (other[e35] * self[e2]),
                (other[e31] * self[e5]) + (other[e15] * self[e3]),
                (other[e12] * self[e5]) + (other[e25] * self[e1]),
                other[e12] * self[e3] * -1.0,
            ]) - (self.group0().xyzy() * other.group1().www().extend_to_4(other[e31]))
                - (self.group0().zxyx() * other.group1().yzx().extend_to_4(other[e23])),
            // e1, e2, e3, e5
            Simd32x4::from([
                other[e12] * self[e2] * -1.0,
                other[e23] * self[e3] * -1.0,
                other[e31] * self[e1] * -1.0,
                (other[e25] * self[e2]) + (other[e35] * self[e3]),
            ]) + (other.group0().yzxw() * self.group0().zxyw())
                + (self.group0().xyzx() * other.group0().www().extend_to_4(other[e15])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for AntiPlane {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       24        0
    //    simd3        1        2        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       14       30        0
    //  no simd       28       46        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                other[e2] * self[e3] * -1.0,
                other[e3] * self[e1] * -1.0,
                other[e1] * self[e2] * -1.0,
                (other[e2] * self[e2]) + (other[e3] * self[e3]),
            ]) + (other.group0().zxyx() * self.group0().yzxx()),
            // e15, e25, e35, e3215
            ((Simd32x3::from(other[e5]) * self.group0().truncate_to_3()) - (Simd32x3::from(self[e5]) * other.group0().truncate_to_3())).extend_to_4(0.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for AntiPlane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        8        0
    //    simd3        1        2        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        3       13        0
    //  no simd        8       26        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Plane::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e12345]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for AntiPlane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       52        0
    //    simd3        1        7        0
    //    simd4       13        8        0
    // Totals...
    // yes simd       31       67        0
    //  no simd       72      105        0
    fn sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (other.group0().zxy() * self.group0().yzx()) - (other.group0().yzx() * self.group0().zxy()),
            // e23, e31, e12, e45
            Simd32x3::from(0.0).extend_to_4(self[e3] * other[e435] * -1.0)
                - (self.group0().xyzy() * other.group1().wwwy())
                - (other.group0() * self.group0().www()).extend_to_4(self[e1] * other[e415]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(self[e2] * other[e125]) - (self[e5] * other[e415]),
                -(self[e3] * other[e235]) - (self[e5] * other[e425]),
                -(self[e1] * other[e315]) - (self[e5] * other[e435]),
                (self[e2] * other[e431]) + (self[e3] * other[e412]),
            ]) + (self.group0().zxyx() * other.group2().yzx().extend_to_4(other[e423])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e3] * other[e425],
                self[e1] * other[e435],
                self[e2] * other[e415],
                -(self[e3] * other[e125]) - (self[e5] * other[e321]),
            ]) - (self.group0().wwwx() * other.group0().extend_to_4(other[e235]))
                - (self.group0().yzx() * other.group1().zxy()).extend_to_4(self[e2] * other[e315]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for AntiPlane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       21       57        0
    //    simd3        1        8        0
    //    simd4       13        7        0
    // Totals...
    // yes simd       35       72        0
    //  no simd       76      109        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (other.group0().zxy() * self.group0().yzx()) - (other.group0().yzx() * self.group0().zxy()),
            // e23, e31, e12, e45
            Simd32x3::from(0.0).extend_to_4(self[e3] * other[e435] * -1.0)
                - (self.group0().xyzy() * other.group1().wwwy())
                - (other.group0() * self.group0().www()).extend_to_4(self[e1] * other[e415]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(self[e2] * other[e125]) - (self[e5] * other[e415]),
                -(self[e3] * other[e235]) - (self[e5] * other[e425]),
                -(self[e1] * other[e315]) - (self[e5] * other[e435]),
                (self[e2] * other[e431]) + (self[e3] * other[e412]),
            ]) + (self.group0().zxy() * other.group2().yzx()).extend_to_4(self[e1] * other[e423]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e1] * other[e12345]) + (self[e3] * other[e425]),
                (self[e1] * other[e435]) + (self[e2] * other[e12345]),
                (self[e2] * other[e415]) + (self[e3] * other[e12345]),
                -(self[e3] * other[e125]) - (self[e5] * other[e321]) - (self[e5] * other[e12345]),
            ]) - (self.group0().yzxy() * other.group1().zxy().extend_to_4(other[e315]))
                - (other.group0() * self.group0().www()).extend_to_4(self[e1] * other[e235]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for AntiPlane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       38        0
    //    simd3        1        4        0
    //    simd4       15       14        0
    // Totals...
    // yes simd       26       56        0
    //  no simd       73      106        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (other.group0().yzx() * self.group0().zxy()) - (other.group0().zxy() * self.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([self[e5] * other[e41], self[e5] * other[e42], self[e5] * other[e43], -(self[e2] * other[e31]) - (self[e3] * other[e12])])
                - (self.group0().xyzx() * other.group1().wwwx()),
            // e235, e315, e125, e4
            Simd32x4::from([
                (self[e2] * other[e35]) + (self[e5] * other[e23]),
                (self[e3] * other[e15]) + (self[e5] * other[e31]),
                (self[e1] * other[e25]) + (self[e5] * other[e12]),
                -(self[e2] * other[e42]) - (self[e3] * other[e43]),
            ]) - (self.group0().zxyx() * other.group2().yzx().extend_to_4(other[e41])),
            // e1, e2, e3, e5
            Simd32x4::from([
                self[e2] * other[e12] * -1.0,
                self[e3] * other[e23] * -1.0,
                self[e1] * other[e31] * -1.0,
                (self[e2] * other[e25]) + (self[e3] * other[e35]),
            ]) + (self.group0().zxy() * other.group1().yzx()).extend_to_4(self[e1] * other[e15])
                - (other.group0() * self.group0().www()).extend_to_4(self[e5] * other[e45]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for AntiPlane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       38        0
    //    simd3        0        2        0
    //    simd4       22       21        0
    // Totals...
    // yes simd       33       61        0
    //  no simd       99      128        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e2] * other[e43] * -1.0,
                self[e3] * other[e41] * -1.0,
                self[e1] * other[e42] * -1.0,
                (self[e3] * other[e4125]) + (self[e5] * other[e1234]),
            ]) + (self.group0().xyzy() * other.group2().www().extend_to_4(other[e4315]))
                + (other.group0().yzx() * self.group0().zxy()).extend_to_4(self[e1] * other[e4235]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e2] * other[e4125]) + (self[e5] * other[e41]),
                (self[e3] * other[e4235]) + (self[e5] * other[e42]),
                (self[e1] * other[e4315]) + (self[e5] * other[e43]),
                -(self[e3] * other[e12]) - (self[e5] * other[e1234]),
            ]) - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e23]]) * self.group0().xxyx())
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e31]]) * self.group0().zyzy()),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e3] * other[e25]) - (self[e5] * other[e4235]),
                -(self[e2] * other[e3215]) - (self[e5] * other[e4315]),
                -(self[e3] * other[e3215]) - (self[e5] * other[e4125]),
                self[e3] * other[e35],
            ]) + (self.group0().yzxx() * other.group2().zxyx())
                + (self.group0().wwwy() * other.group1().truncate_to_3().extend_to_4(other[e25]))
                - (Simd32x4::from([other[e3215], other[e35], other[e15], other[e45]]) * self.group0().xxyw()),
            // e1, e2, e3, e4
            Simd32x4::from([self[e3] * other[e31], self[e1] * other[e12], self[e2] * other[e23], self[e3] * other[e43] * -1.0])
                - (self.group0().wwwx() * other.group0().extend_to_4(other[e41]))
                - (self.group0().yzx() * other.group1().zxy()).extend_to_4(self[e2] * other[e42]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for AntiPlane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       16        0
    //    simd4        3        8        0
    // Totals...
    // yes simd       11       24        0
    //  no simd       20       48        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            other.group0().xx().extend_to_4(other[e5], 0.0)
                * Simd32x3::from(1.0).extend_to_4(0.0)
                * self.group0().truncate_to_3().extend_to_4(0.0)
                * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e12345]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for AntiPlane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        6        0
    //    simd4        8       11        0
    // Totals...
    // yes simd        9       17        0
    //  no simd       33       50        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x3::from(1.0).extend_to_4(0.0) * other.group0().www().extend_to_4(0.0) * self.group0().truncate_to_3().extend_to_4(0.0) * Simd32x4::from([-1.0, -1.0, -1.0, 0.0]),
            // e235, e315, e125, e5
            (self.group0().yzxx() * other.group0().zxyx()) + Simd32x3::from(0.0).extend_to_4((self[e2] * other[e25]) + (self[e3] * other[e35]))
                - (self.group0().zxyw() * other.group0().yzxw()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for AntiPlane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       20        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       17       29        0
    //  no simd       44       56        0
    fn sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                -(self[e1] * other[e45]) - (self[e3] * other[e4315]),
                -(self[e1] * other[e4125]) - (self[e2] * other[e45]),
                -(self[e2] * other[e4235]) - (self[e3] * other[e45]),
                (self[e2] * other[e4315]) + (self[e3] * other[e4125]),
            ]) + (self.group0().yzxx() * other.group1().zxyx()),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e3] * other[e25]) - (self[e5] * other[e4235]),
                -(self[e2] * other[e3215]) - (self[e5] * other[e4315]),
                -(self[e3] * other[e3215]) - (self[e5] * other[e4125]),
                (self[e2] * other[e25]) + (self[e3] * other[e35]),
            ]) + (self.group0().yzxx() * other.group0().zxyx())
                - (Simd32x4::from([other[e3215], other[e35], other[e15], other[e45]]) * self.group0().xxyw()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for AntiPlane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       26        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       15       32        0
    //  no simd       33       50        0
    fn sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([self[e3] * other[e315], self[e1] * other[e125], self[e2] * other[e235], self[e3] * other[e435] * -1.0])
                - (self.group0().yzxy() * other.group1().zxy().extend_to_4(other[e425]))
                - (self.group0().wwwx() * other.group0().extend_to_4(other[e415])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e3] * other[e425],
                self[e1] * other[e435],
                self[e2] * other[e415],
                -(self[e2] * other[e315]) - (self[e3] * other[e125]),
            ]) - (self.group0().yzxx() * other.group0().zxy().extend_to_4(other[e235])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for AntiPlane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       33        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       22       39        0
    //  no simd       40       57        0
    fn sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e1] * other[e5]) + (self[e3] * other[e315]),
                (self[e1] * other[e125]) + (self[e2] * other[e5]),
                (self[e2] * other[e235]) + (self[e3] * other[e5]),
                self[e3] * other[e435] * -1.0,
            ]) - (self.group0().yzxx() * other.group1().zxy().extend_to_4(other[e415]))
                - (self.group0().wwwy() * other.group0().xyzy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e1] * other[e12345]) + (self[e3] * other[e425]),
                (self[e1] * other[e435]) + (self[e2] * other[e12345]),
                (self[e2] * other[e415]) + (self[e3] * other[e12345]),
                -(self[e2] * other[e315]) - (self[e3] * other[e125]) - (self[e5] * other[e12345]),
            ]) - (self.group0().yzxx() * other.group0().zxy().extend_to_4(other[e235])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for AntiPlane {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       27       77        0
    //    simd2        6        6        0
    //    simd3       22       37        0
    //    simd4       23       16        0
    // Totals...
    // yes simd       78      136        0
    //  no simd      197      264        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([self[e5] * other[e4] * -1.0, self[e5] * other[e1234]])
                + (Simd32x2::from(self[e1]) * Simd32x2::from([other[e1], other[e4235]]))
                + (Simd32x2::from(self[e2]) * Simd32x2::from([other[e2], other[e4315]]))
                + (Simd32x2::from(self[e3]) * Simd32x2::from([other[e3], other[e4125]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e1] * other[scalar]) + (self[e3] * other[e31]),
                (self[e1] * other[e12]) + (self[e2] * other[scalar]),
                (self[e2] * other[e23]) + (self[e3] * other[scalar]),
                self[e3] * other[e43] * -1.0,
            ]) - (self.group0().yzxy() * other.group5().zxy().extend_to_4(other[e42]))
                - (self.group0().wwwx() * other.group4().extend_to_4(other[e41])),
            // e5
            (self[e1] * other[e15]) + (self[e2] * other[e25]) + (self[e3] * other[e35]) + (self[e5] * other[scalar]) - (self[e5] * other[e45]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e1] * other[e5]) + (self[e3] * other[e315]),
                (self[e1] * other[e125]) + (self[e2] * other[e5]),
                (self[e2] * other[e235]) + (self[e3] * other[e5]),
                self[e5] * other[e4] * -1.0,
            ]) - (self.group0().wwwy() * other.group1().truncate_to_3().extend_to_4(other[e425]))
                - (self.group0().wwwz() * other.group6().xyzz())
                - (other.group8().zxy() * self.group0().yzx()).extend_to_4(self[e1] * other[e415]),
            // e41, e42, e43
            (other.group7().zxy() * self.group0().yzx()) - (Simd32x3::from(other[e4]) * self.group0().truncate_to_3()) - (other.group7().yzx() * self.group0().zxy()),
            // e23, e31, e12
            (self.group0().yzx() * other.group1().zxy())
                - (Simd32x3::from(self[e5]) * other.group7())
                - (Simd32x3::from([other[e2], other[e321], other[e321]]) * self.group0().zyz())
                - (Simd32x3::from([other[e321], other[e3], other[e1]]) * self.group0().xxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e2] * other[e4125]) + (self[e5] * other[e41]),
                (self[e3] * other[e4235]) + (self[e5] * other[e42]),
                (self[e1] * other[e4315]) + (self[e5] * other[e43]),
                -(self[e3] * other[e12]) - (self[e5] * other[e1234]),
            ]) - (Simd32x4::from([other[e45], other[e4125], other[e4235], self[e1]]) * self.group0().xxy().extend_to_4(other[e23]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], self[e2]]) * self.group0().zyz().extend_to_4(other[e31])),
            // e423, e431, e412
            (Simd32x3::from(other[e1234]) * self.group0().truncate_to_3()) + (other.group4().yzx() * self.group0().zxy()) - (other.group4().zxy() * self.group0().yzx()),
            // e235, e315, e125
            (Simd32x3::from(self[e5]) * other.group5()) + (self.group0().yzx() * other.group3().zxy())
                - (Simd32x3::from(self[e5]) * other.group9().truncate_to_3())
                - (Simd32x3::from([other[e25], other[e3215], other[e3215]]) * self.group0().zyz())
                - (Simd32x3::from([other[e3215], other[e35], other[e15]]) * self.group0().xxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e1] * other[e12345]) + (self[e3] * other[e425]),
                (self[e1] * other[e435]) + (self[e2] * other[e12345]),
                (self[e2] * other[e415]) + (self[e3] * other[e12345]),
                -(self[e2] * other[e315]) - (self[e3] * other[e125]) - (self[e5] * other[e321]),
            ]) - (Simd32x4::from(self[e5]) * other.group7().extend_to_4(other[e12345]))
                - (self.group0().yzx() * other.group6().zxy()).extend_to_4(self[e1] * other[e235]),
            // e1234
            (self[e1] * other[e423]) + (self[e2] * other[e431]) + (self[e3] * other[e412]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for AntiPlane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1       12        0
    //    simd3        1        2        0
    //    simd4        7        7        0
    // Totals...
    // yes simd        9       21        0
    //  no simd       32       46        0
    fn sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                self[e3] * other[e4315] * -1.0,
                self[e1] * other[e4125] * -1.0,
                self[e2] * other[e4235] * -1.0,
                (self[e2] * other[e4315]) + (self[e3] * other[e4125]),
            ]) + (self.group0().yzxx() * other.group0().zxyx()),
            // e235, e315, e125, e5
            (-(Simd32x3::from(self[e5]) * other.group0().truncate_to_3()) - (Simd32x3::from(other[e3215]) * self.group0().truncate_to_3())).extend_to_4(0.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for AntiPlane {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       21        0
    //    simd3        2        6        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       13       35        0
    //  no simd       41       71        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[e4]) * self.group0().truncate_to_3() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            ((self.group0().yzx() * other.group0().zxy()) - (self.group0().zxy() * other.group0().yzx())).extend_to_4(self[e5] * other[e4] * -1.0),
            // e15, e25, e35, scalar
            (Simd32x4::from([other[e5], other[e5], other[e5], other[e1]]) * self.group0().xyzx())
                + Simd32x3::from(0.0).extend_to_4((self[e2] * other[e2]) + (self[e3] * other[e3]))
                - (Simd32x4::from(self[e5]) * other.group0()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for AntiPlane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        8        0
    //    simd3        1        2        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        3       12        0
    //  no simd        8       22        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from(other[scalar]) * self.group0());
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for AntiPlane {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       24        0
    //    simd3        2        9        0
    //    simd4        8        4        0
    // Totals...
    // yes simd       16       37        0
    //  no simd       44       67        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[e1234]) * self.group0().truncate_to_3(),
            // e415, e425, e435, e321
            ((self.group0().yzx() * other.group0().zxy()) - (self.group0().zxy() * other.group0().yzx())).extend_to_4(self[e5] * other[e1234] * -1.0),
            // e235, e315, e125, e12345
            Simd32x4::from([
                -(self[e1] * other[e3215]) - (self[e5] * other[e4235]),
                -(self[e2] * other[e3215]) - (self[e5] * other[e4315]),
                -(self[e3] * other[e3215]) - (self[e5] * other[e4125]),
                (self[e1] * other[e4235]) + (self[e2] * other[e4315]) + (self[e3] * other[e4125]) + (self[e5] * other[e1234]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for AntiPlane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       21       60        0
    //    simd4       19       19        0
    // Totals...
    // yes simd       40       79        0
    //  no simd       97      136        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e3] * other[e431] * -1.0,
                self[e2] * other[e4] * -1.0,
                self[e3] * other[e4] * -1.0,
                (self[e2] * other[e2]) + (self[e3] * other[e3]),
            ]) + (self.group0().yzxx() * other.group0().zxy().extend_to_4(other[e1]))
                - (Simd32x4::from([other[e4], other[e412], other[e423], other[e4]]) * self.group0().xxyw()),
            // e23, e31, e12, e45
            Simd32x4::from([self[e2] * other[e3], self[e3] * other[e1], self[e1] * other[e2], self[e5] * other[e4] * -1.0])
                - (Simd32x4::from([other[e321], other[e3], other[e1], other[e415]]) * self.group0().xxyx())
                - (Simd32x4::from([other[e2], other[e321], other[e321], other[e425]]) * self.group0().zyzy())
                - (self.group0().wwwz() * other.group0().truncate_to_3().extend_to_4(other[e435])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(self[e2] * other[e125]) - (self[e5] * other[e415]) - (self[e5] * other[e1]),
                -(self[e3] * other[e235]) - (self[e5] * other[e425]) - (self[e5] * other[e2]),
                -(self[e1] * other[e315]) - (self[e5] * other[e435]) - (self[e5] * other[e3]),
                self[e3] * other[e412],
            ]) + (self.group0().xxyx() * other.group2().wzx().extend_to_4(other[e423]))
                + (self.group0().zyzy() * other.group2().yww().extend_to_4(other[e431])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e1] * other[e12345]) + (self[e3] * other[e425]),
                (self[e1] * other[e435]) + (self[e2] * other[e12345]),
                (self[e2] * other[e415]) + (self[e3] * other[e12345]),
                -(self[e3] * other[e125]) - (self[e5] * other[e12345]) - (self[e5] * other[e321]),
            ]) - (self.group0().yzxx() * other.group1().zxy().extend_to_4(other[e235]))
                - (self.group0().wwwy() * other.group0().truncate_to_3().extend_to_4(other[e315])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for AntiPlane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       40        0
    //    simd4       22       23        0
    // Totals...
    // yes simd       37       63        0
    //  no simd      103      132        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e2] * other[e43] * -1.0,
                self[e3] * other[e41] * -1.0,
                self[e1] * other[e42] * -1.0,
                (self[e3] * other[e4125]) + (self[e5] * other[e1234]),
            ]) + (Simd32x4::from([other[e42], other[e1234], other[e1234], other[e4315]]) * self.group0().zyzy())
                + (Simd32x4::from([other[e1234], other[e43], other[e41], other[e4235]]) * self.group0().xxyx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e2] * other[e4125]) + (self[e5] * other[e41]),
                (self[e3] * other[e4235]) + (self[e5] * other[e42]),
                (self[e1] * other[e4315]) + (self[e5] * other[e43]),
                -(self[e3] * other[e12]) - (self[e5] * other[e1234]),
            ]) - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e23]]) * self.group0().xxyx())
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e31]]) * self.group0().zyzy()),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e3] * other[e25]) - (self[e5] * other[e4235]),
                -(self[e2] * other[e3215]) - (self[e5] * other[e4315]),
                -(self[e3] * other[e3215]) - (self[e5] * other[e4125]),
                (self[e3] * other[e35]) + (self[e5] * other[scalar]),
            ]) + (self.group0().yzxx() * other.group2().zxyx())
                + (self.group0().wwwy() * other.group1().truncate_to_3().extend_to_4(other[e25]))
                - (Simd32x4::from([other[e3215], other[e35], other[e15], other[e45]]) * self.group0().xxyw()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e1] * other[scalar]) + (self[e3] * other[e31]),
                (self[e1] * other[e12]) + (self[e2] * other[scalar]),
                (self[e2] * other[e23]) + (self[e3] * other[scalar]),
                self[e3] * other[e43] * -1.0,
            ]) - (self.group0().yzxx() * other.group1().zxy().extend_to_4(other[e41]))
                - (self.group0().wwwy() * other.group0().xyzy()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl std::ops::Div<sandwich> for AntiScalar {
    type Output = sandwich_partial<AntiScalar>;
    fn div(self, _rhs: sandwich) -> Self::Output {
        sandwich_partial(self)
    }
}
impl Sandwich<AntiCircleRotor> for AntiScalar {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        3        0
    //    simd4        0        7        0
    // Totals...
    // yes simd        0       10        0
    //  no simd        0       37        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[e12345]) * other.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(self[e12345]) * other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e235, e315, e125, e12345
            Simd32x4::from(self[e12345]) * other.group2(),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for AntiScalar {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        3        0
    //    simd4        0       11        0
    // Totals...
    // yes simd        0       14        0
    //  no simd        0       53        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[e12345]) * other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from(self[e12345]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, e1234
            Simd32x4::from(self[e12345]) * other.group2() * Simd32x4::from(-1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * other.group3() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for AntiScalar {
    type Output = AntiDualNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        3        0
    // no simd        0        6        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DualNum::from_groups(/* e5, e12345 */ Simd32x2::from(self[e12345]) * other.group0());
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for AntiScalar {
    type Output = AntiFlatPoint;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = FlatPoint::from_groups(/* e15, e25, e35, e45 */ Simd32x4::from(self[e12345]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for AntiScalar {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        8        0
    // no simd        0       32        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(self[e12345]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for AntiScalar {
    type Output = AntiLine;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        6        0
    // no simd        0       18        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(self[e12345]) * other.group0(),
            // e235, e315, e125
            Simd32x3::from(self[e12345]) * other.group1(),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for AntiScalar {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        6        0
    // no simd        0       24        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(self[e12345]) * other.group0(),
            // e235, e315, e125, e5
            Simd32x4::from(self[e12345]) * other.group1(),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for AntiScalar {
    type Output = AntiPlane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Plane::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for AntiScalar {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        3        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Scalar::from_groups(/* scalar */ other[e12345] * self[e12345] * -1.0);
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for AntiScalar {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        6        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0       10        0
    //  no simd        0       34        0
    fn sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[e12345]) * other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from(self[e12345]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35
            Simd32x3::from(self[e12345]) * other.group2() * Simd32x3::from(-1.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for AntiScalar {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        3        0
    //    simd4        0        7        0
    // Totals...
    // yes simd        0       10        0
    //  no simd        0       37        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[e12345]) * other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from(self[e12345]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, scalar
            Simd32x4::from(self[e12345]) * other.group2() * Simd32x4::from(-1.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for AntiScalar {
    type Output = Dipole;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        6        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0       10        0
    //  no simd        0       34        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[e12345]) * other.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(self[e12345]) * other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e235, e315, e125
            Simd32x3::from(self[e12345]) * other.group2(),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for AntiScalar {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        3        0
    //    simd4        0       11        0
    // Totals...
    // yes simd        0       14        0
    //  no simd        0       53        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[e12345]) * other.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(self[e12345]) * other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e235, e315, e125, e4
            Simd32x4::from(self[e12345]) * other.group2(),
            // e1, e2, e3, e5
            Simd32x4::from(self[e12345]) * other.group3() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for AntiScalar {
    type Output = DualNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        3        0
    // no simd        0        6        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDualNum::from_groups(/* e3215, scalar */ Simd32x2::from(self[e12345]) * other.group0() * Simd32x2::from(-1.0));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for AntiScalar {
    type Output = FlatPoint;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ Simd32x4::from(self[e12345]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for AntiScalar {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        8        0
    // no simd        0       32        0
    fn sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(self[e12345]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1, e2, e3, e5
            Simd32x4::from(self[e12345]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for AntiScalar {
    type Output = Line;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        6        0
    // no simd        0       18        0
    fn sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(self[e12345]) * other.group0() * Simd32x3::from(-1.0),
            // e15, e25, e35
            Simd32x3::from(self[e12345]) * other.group1() * Simd32x3::from(-1.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for AntiScalar {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        6        0
    // no simd        0       24        0
    fn sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(self[e12345]) * other.group0() * Simd32x4::from(-1.0),
            // e15, e25, e35, e3215
            Simd32x4::from(self[e12345]) * other.group1() * Simd32x4::from(-1.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for AntiScalar {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        6        0
    //    simd2        0        4        0
    //    simd3        0       12        0
    //    simd4        0       16        0
    // Totals...
    // yes simd        0       38        0
    //  no simd        0      114        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(self[e12345]) * other.group0().yx() * Simd32x2::from([-1.0, 1.0]),
            // e1, e2, e3, e4
            Simd32x4::from([self[e12345], self[e12345], self[e12345], other[e1234]])
                * other.group9().truncate_to_3().extend_to_4(self[e12345])
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e5
            self[e12345] * other[e3215],
            // e15, e25, e35, e45
            Simd32x4::from(self[e12345]) * other.group8().extend_to_4(other[e321]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e41, e42, e43
            Simd32x3::from(self[e12345]) * other.group7() * Simd32x3::from(-1.0),
            // e23, e31, e12
            Simd32x3::from(self[e12345]) * other.group6().truncate_to_3() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            Simd32x4::from(self[e12345]) * other.group5().extend_to_4(other[e45]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e423, e431, e412
            Simd32x3::from(self[e12345]) * other.group4(),
            // e235, e315, e125
            Simd32x3::from(self[e12345]) * other.group3().truncate_to_3(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e12345], self[e12345], self[e12345], other[e5]])
                * other.group1().truncate_to_3().extend_to_4(self[e12345])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1234
            self[e12345] * other[e4] * -1.0,
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for AntiScalar {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from(self[e12345]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for AntiScalar {
    type Output = RoundPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        7        0
    //  no simd        0       19        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e12345], self[e12345], self[e12345], other[e5]])
                * other.group0().truncate_to_3().extend_to_4(self[e12345])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1234
            self[e12345] * other[e4] * -1.0,
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for AntiScalar {
    type Output = Scalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        3        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiScalar::from_groups(/* e12345 */ self[e12345] * other[scalar]);
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for AntiScalar {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        7        0
    //  no simd        0       19        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = RoundPoint::from_groups(
            // e1, e2, e3, e4
            Simd32x4::from([self[e12345], self[e12345], self[e12345], other[e1234]])
                * other.group0().truncate_to_3().extend_to_4(self[e12345])
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e5
            self[e12345] * other[e3215],
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for AntiScalar {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0       14        0
    // no simd        0       56        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(self[e12345]) * other.group0() * Simd32x4::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from(self[e12345]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, e1234
            Simd32x4::from(self[e12345]) * other.group2().truncate_to_3().extend_to_4(other[e4]) * Simd32x4::from(-1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * other.group3().truncate_to_3().extend_to_4(other[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for AntiScalar {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0       14        0
    // no simd        0       56        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(self[e12345]) * other.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(self[e12345]) * other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e235, e315, e125, e5
            Simd32x4::from(self[e12345]) * other.group2().truncate_to_3().extend_to_4(other[e3215]),
            // e1, e2, e3, e4
            Simd32x4::from(self[e12345]) * other.group3().truncate_to_3().extend_to_4(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl std::ops::Div<sandwich> for Circle {
    type Output = sandwich_partial<Circle>;
    fn div(self, _rhs: sandwich) -> Self::Output {
        sandwich_partial(self)
    }
}
impl Sandwich<AntiCircleRotor> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       70      119        0
    //    simd3        0       24        0
    //    simd4       42       23        0
    // Totals...
    // yes simd      112      166        0
    //  no simd      238      283        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e41] * self[e321]) + (other[e42] * self[e435]) + (other[e31] * self[e412]) + (other[e45] * self[e423]) + (other[scalar] * self[e423]),
                (other[e42] * self[e321]) + (other[e43] * self[e415]) + (other[e12] * self[e423]) + (other[e45] * self[e431]) + (other[scalar] * self[e431]),
                (other[e41] * self[e425]) + (other[e43] * self[e321]) + (other[e23] * self[e431]) + (other[e45] * self[e412]) + (other[scalar] * self[e412]),
                -(other[e43] * self[e125])
                    - (other[e23] * self[e415])
                    - (other[e31] * self[e425])
                    - (other[e12] * self[e435])
                    - (other[e45] * self[e321])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412]),
            ]) - (other.group0().zxy() * self.group1().yzx()).extend_to_4(other[e41] * self[e235])
                - (self.group0().yzx() * other.group1().zxy()).extend_to_4(other[e42] * self[e315]),
            // e415, e425, e435, e321
            (Simd32x4::from(other[scalar]) * self.group1())
                + (other.group0().yzx() * self.group2().zxy()).extend_to_4(other[e41] * self[e235])
                + (self.group0().zxy() * other.group2().yzx()).extend_to_4(other[e42] * self[e315])
                + (other.group1().yzx() * self.group1().zxy()).extend_to_4(other[e43] * self[e125])
                - (other.group2().zxyy() * self.group0().yzx().extend_to_4(self[e431]))
                - (other.group0().zxy() * self.group2().yzx()).extend_to_4(other[e15] * self[e423])
                - (other.group1().zxy() * self.group1().yzx()).extend_to_4(other[e35] * self[e412]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e31] * self[e125]) + (other[e25] * self[e435]) + (other[scalar] * self[e235]),
                (other[e12] * self[e235]) + (other[e35] * self[e415]) + (other[scalar] * self[e315]),
                (other[e23] * self[e315]) + (other[e15] * self[e425]) + (other[scalar] * self[e125]),
                -(other[e25] * self[e425]) - (other[e35] * self[e435]),
            ]) - (other.group1().zxwy() * self.group2().yzz().extend_to_4(self[e315]))
                - (other.group1().wwyx() * self.group2().xyx().extend_to_4(self[e235]))
                - (other.group2().zyzx() * self.group1().ywwx())
                - (other.group2().xxy() * self.group1().wzx()).extend_to_4(other[e12] * self[e125]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e43] * self[e315]) + (other[e23] * self[e321]) + (other[e25] * self[e412]),
                (other[e41] * self[e125]) + (other[e31] * self[e321]) + (other[e35] * self[e423]),
                (other[e42] * self[e235]) + (other[e12] * self[e321]) + (other[e15] * self[e431]),
                -(other[e23] * self[e423]) - (other[e31] * self[e431]) - (other[e12] * self[e412]),
            ]) - (self.group1().xyzz() * other.group1().www().extend_to_4(other[e43]))
                - (other.group0().yzx() * self.group2().zxy()).extend_to_4(other[e41] * self[e415])
                - (self.group0().yzx() * other.group2().zxy()).extend_to_4(other[e42] * self[e425]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       66      119        0
    //    simd3        0       21        0
    //    simd4       53       36        0
    // Totals...
    // yes simd      119      176        0
    //  no simd      278      326        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(other[e431] * self[e435]) - (other[e425] * self[e412]) - (other[e4] * self[e415]) - (other[e3] * self[e431]),
                -(other[e412] * self[e415]) - (other[e435] * self[e423]) - (other[e4] * self[e425]) - (other[e1] * self[e412]),
                -(other[e412] * self[e321]) - (other[e415] * self[e431]) - (other[e4] * self[e435]) - (other[e2] * self[e423]),
                (other[e415] * self[e415]) + (other[e425] * self[e425]) + (other[e435] * self[e435]) + (other[e315] * self[e431]) + (other[e125] * self[e412]),
            ]) + (Simd32x4::from([other[e321], other[e3], other[e425], self[e315]]) * self.group0().xxx().extend_to_4(other[e431]))
                + (Simd32x4::from([other[e2], other[e415], other[e321], other[e235]]) * self.group0().zzz().extend_to_4(self[e423]))
                + (other.group1().zw().extend_to_4(other[e1], self[e125]) * self.group0().yyy().extend_to_4(other[e412]))
                + (other.group0().zxy() * self.group1().yzx()).extend_to_4(other[e423] * self[e235])
                - (self.group1().wwyw() * other.group0().xyx().extend_to_4(other[e321])),
            // e23, e31, e12, e45
            (other.group0().zxy() * self.group2().yzx()).extend_to_4(other[e423] * self[e235])
                + (self.group0().yzx() * other.group2().zxy()).extend_to_4(other[e431] * self[e315])
                + (other.group1().zxy() * self.group1().yzx()).extend_to_4(other[e412] * self[e125])
                - (Simd32x4::from([other[e315], other[e5], other[e5], other[e125]]) * self.group0().zyz().extend_to_4(self[e412]))
                - (Simd32x4::from([other[e5], other[e125], other[e235], other[e315]]) * self.group0().xxy().extend_to_4(self[e431]))
                - (other.group3().xyzz() * self.group1().wwwz())
                - (self.group1().zxyy() * other.group1().yzx().extend_to_4(other[e2]))
                - (self.group2() * other.group2().www()).extend_to_4(other[e1] * self[e415])
                - (other.group0().yzx() * self.group2().zxy()).extend_to_4(other[e235] * self[e423]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                other[e5] * self[e415] * -1.0,
                other[e5] * self[e425] * -1.0,
                other[e5] * self[e435] * -1.0,
                (other[e425] * self[e431]) + (other[e435] * self[e412]),
            ]) + (self.group1().wzxz() * other.group2().xxy().extend_to_4(other[e412]))
                + (self.group2().yzx() * other.group1().zxy()).extend_to_4(other[e423] * self[e415])
                + (self.group2().yzx() * other.group3().zxy()).extend_to_4(other[e431] * self[e425])
                + (other.group2().zyz() * self.group1().yww()).extend_to_4(other[e415] * self[e423])
                - (Simd32x4::from([other[e425], other[e3], other[e1], other[e2]]) * self.group2().zxy().extend_to_4(self[e431]))
                - (Simd32x4::from([other[e2], other[e321], other[e321], other[e3]]) * self.group2().zyz().extend_to_4(self[e412]))
                - (other.group2().yzxw() * self.group1().zxyw())
                - (self.group2().xxy() * other.group1().wzx()).extend_to_4(other[e1] * self[e423]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(other[e431] * self[e125]) - (other[e125] * self[e431]) - (other[e4] * self[e235]) - (other[e3] * self[e425]),
                -(other[e412] * self[e235]) - (other[e235] * self[e412]) - (other[e4] * self[e315]) - (other[e1] * self[e435]),
                -(other[e423] * self[e315]) - (other[e315] * self[e423]) - (other[e4] * self[e125]) - (other[e2] * self[e415]),
                (other[e235] * self[e415]) + (other[e315] * self[e425]) + (other[e125] * self[e435]) + (other[e5] * self[e321]),
            ]) + (Simd32x4::from([other[e315], other[e5], other[e5], other[e425]]) * self.group0().zyz().extend_to_4(self[e315]))
                + (Simd32x4::from([other[e5], other[e125], other[e235], other[e1]]) * self.group0().xxy().extend_to_4(self[e235]))
                + (other.group0().zxy() * self.group2().yzx()).extend_to_4(other[e415] * self[e235])
                + (other.group1().www() * self.group1().truncate_to_3()).extend_to_4(other[e435] * self[e125])
                + (other.group3().yzx() * self.group1().zxy()).extend_to_4(other[e3] * self[e125])
                + (self.group1().www() * other.group1().truncate_to_3()).extend_to_4(other[e2] * self[e315]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       30       52        0
    //    simd3        2       20        0
    //    simd4       26       18        0
    // Totals...
    // yes simd       58       90        0
    //  no simd      140      184        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[scalar]) * self.group0(),
            // e415, e425, e435, e321
            ((Simd32x3::from(other[e3215]) * self.group0()) + (Simd32x3::from(other[scalar]) * self.group1().truncate_to_3())).extend_to_4(other[scalar] * self[e321]),
            // e235, e315, e125, e4
            ((Simd32x3::from(other[e3215]) * self.group1().truncate_to_3()) + (Simd32x3::from(other[scalar]) * self.group2())).extend_to_4(0.0),
            // e1, e2, e3, e5
            Simd32x4::from(other[e3215]) * self.group0().extend_to_4(self[e321]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44       81        0
    //    simd3        0       12        0
    //    simd4       32       25        0
    // Totals...
    // yes simd       76      118        0
    //  no simd      172      217        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([other[e321], other[e321], other[e321], 1.0])
                * self
                    .group0()
                    .extend_to_4((other[e235] * self[e423]) + (other[e315] * self[e431]) + (other[e125] * self[e412]) - (other[e321] * self[e321])),
            // e23, e31, e12, e45
            Simd32x4::from([
                other[e125] * self[e431],
                other[e235] * self[e412],
                other[e315] * self[e423],
                -(other[e315] * self[e431]) - (other[e125] * self[e412]),
            ]) - (other.group0().yzxx() * self.group0().zxy().extend_to_4(self[e423])),
            // e15, e25, e35, e1234
            (other.group0().xxy() * self.group1().wzx()).extend_to_4(0.0) + (other.group0().zyz() * self.group1().yww()).extend_to_4(0.0)
                - (Simd32x3::from(other[e321]) * self.group2()).extend_to_4(0.0)
                - (other.group0().yzx() * self.group1().zxy()).extend_to_4(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e125] * self[e431] * -1.0,
                other[e235] * self[e412] * -1.0,
                other[e315] * self[e423] * -1.0,
                other[e125] * self[e435],
            ]) + (other.group0().wwwy() * self.group1().xyzy())
                + (self.group0().zxy() * other.group0().yzx()).extend_to_4(other[e235] * self[e415]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       96        0
    //    simd3        0       11        0
    //    simd4       39       31        0
    // Totals...
    // yes simd       95      138        0
    //  no simd      212      253        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([other[e321], other[e3], other[e1], other[e235]]) * self.group0().xxy().extend_to_4(self[e423]))
                + (Simd32x4::from([other[e2], other[e321], other[e321], other[e315]]) * self.group0().zyz().extend_to_4(self[e431]))
                + Simd32x3::from(0.0).extend_to_4(other[e125] * self[e412])
                - (self.group0().yzx() * other.group1().zxy()).extend_to_4(other[e321] * self[e321]),
            // e23, e31, e12, e45
            Simd32x4::from([
                other[e125] * self[e431],
                other[e235] * self[e412],
                other[e315] * self[e423],
                -(other[e1] * self[e415]) - (other[e2] * self[e425]) - (other[e3] * self[e435]),
            ]) - (Simd32x4::from([other[e315], other[e5], other[e5], other[e315]]) * self.group0().zyz().extend_to_4(self[e431]))
                - (Simd32x4::from([other[e5], other[e125], other[e235], other[e235]]) * self.group0().xxy().extend_to_4(self[e423]))
                - (self.group1().www() * other.group1().truncate_to_3()).extend_to_4(other[e125] * self[e412]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e235] * self[e321]) + (other[e125] * self[e425]) + (other[e3] * self[e315]) - (other[e5] * self[e415]),
                (other[e235] * self[e435]) + (other[e315] * self[e321]) + (other[e1] * self[e125]) - (other[e5] * self[e425]),
                (other[e315] * self[e415]) + (other[e125] * self[e321]) + (other[e2] * self[e235]) - (other[e5] * self[e435]),
                0.0,
            ]) - (Simd32x4::from([other[e321], other[e3], other[e1], other[e1]]) * self.group2().xxy().extend_to_4(self[e423]))
                - (Simd32x4::from([other[e2], other[e321], other[e321], other[e2]]) * self.group2().zyz().extend_to_4(self[e431]))
                - (other.group0().yzx() * self.group1().zxy()).extend_to_4(other[e3] * self[e412]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(other[e125] * self[e431]) - (other[e3] * self[e425]),
                -(other[e235] * self[e412]) - (other[e1] * self[e435]),
                -(other[e315] * self[e423]) - (other[e2] * self[e415]),
                (other[e315] * self[e425]) + (other[e125] * self[e435]) + (other[e5] * self[e321]),
            ]) + (Simd32x4::from([other[e315], other[e5], other[e5], other[e2]]) * self.group0().zyz().extend_to_4(self[e315]))
                + (Simd32x4::from([other[e5], other[e125], other[e235], other[e1]]) * self.group0().xxy().extend_to_4(self[e235]))
                + (self.group1().zxyx() * other.group1().yzx().extend_to_4(other[e235]))
                + (other.group0().www() * self.group1().truncate_to_3()).extend_to_4(other[e3] * self[e125]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       52      103        0
    //    simd3        0       21        0
    //    simd4       34       17        0
    // Totals...
    // yes simd       86      141        0
    //  no simd      188      234        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                other[e31] * self[e412],
                other[e12] * self[e423],
                other[e23] * self[e431],
                -(other[e31] * self[e425]) - (other[e12] * self[e435]) - (other[e15] * self[e423]) - (other[e25] * self[e431]) - (other[e35] * self[e412]),
            ]) - (other.group0().zxy() * self.group0().yzx()).extend_to_4(other[e23] * self[e415]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e31] * self[e435]) + (other[e25] * self[e412]),
                (other[e12] * self[e415]) + (other[e35] * self[e423]),
                (other[e23] * self[e425]) + (other[e15] * self[e431]),
                other[e35] * self[e412] * -1.0,
            ]) - (other.group0().zxy() * self.group1().yzx()).extend_to_4(other[e15] * self[e423])
                - (other.group1().zxy() * self.group0().yzx()).extend_to_4(other[e25] * self[e431]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e31] * self[e125]) + (other[e25] * self[e435]),
                (other[e12] * self[e235]) + (other[e35] * self[e415]),
                (other[e23] * self[e315]) + (other[e15] * self[e425]),
                -(other[e15] * self[e415]) - (other[e25] * self[e425]) - (other[e35] * self[e435]),
            ]) - (other.group0().zxy() * self.group2().yzx()).extend_to_4(other[e23] * self[e235])
                - (other.group1().xxy() * self.group1().wzx()).extend_to_4(other[e31] * self[e315])
                - (other.group1().zyz() * self.group1().yww()).extend_to_4(other[e12] * self[e125]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e23] * self[e321]) + (other[e25] * self[e412]),
                (other[e31] * self[e321]) + (other[e35] * self[e423]),
                (other[e12] * self[e321]) + (other[e15] * self[e431]),
                -(other[e31] * self[e431]) - (other[e12] * self[e412]),
            ]) - (other.group1().zxy() * self.group0().yzx()).extend_to_4(other[e23] * self[e423]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       68      118        0
    //    simd3        0       20        0
    //    simd4       35       19        0
    // Totals...
    // yes simd      103      157        0
    //  no simd      208      254        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e31] * self[e412]) + (other[scalar] * self[e423]),
                (other[e12] * self[e423]) + (other[scalar] * self[e431]),
                (other[e23] * self[e431]) + (other[scalar] * self[e412]),
                -(other[e23] * self[e415]) - (other[e31] * self[e425]) - (other[e12] * self[e435]) - (other[e25] * self[e431]) - (other[e35] * self[e412]),
            ]) - (self.group0().yzx() * other.group0().zxy()).extend_to_4(other[e15] * self[e423]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e31] * self[e435]) + (other[scalar] * self[e415]) + (other[e25] * self[e412]),
                (other[e12] * self[e415]) + (other[scalar] * self[e425]) + (other[e3215] * self[e431]),
                (other[e23] * self[e425]) + (other[scalar] * self[e435]) + (other[e3215] * self[e412]),
                other[e35] * self[e412] * -1.0,
            ]) + (self.group0().xxy() * other.group1().wzx()).extend_to_4(other[scalar] * self[e321])
                - (other.group1().zxyx() * self.group0().yzx().extend_to_4(self[e423]))
                - (other.group0().zxy() * self.group1().yzx()).extend_to_4(other[e25] * self[e431]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e31] * self[e125]) + (other[scalar] * self[e235]) + (other[e25] * self[e435]) + (other[e3215] * self[e415]),
                (other[e12] * self[e235]) + (other[scalar] * self[e315]) + (other[e35] * self[e415]) + (other[e3215] * self[e425]),
                (other[e23] * self[e315]) + (other[scalar] * self[e125]) + (other[e15] * self[e425]) + (other[e3215] * self[e435]),
                -(other[e15] * self[e415]) - (other[e25] * self[e425]) - (other[e35] * self[e435]) - (other[e3215] * self[e321]),
            ]) - (other.group0().zxyx() * self.group2().yzx().extend_to_4(self[e235]))
                - (other.group1().xxy() * self.group1().wzx()).extend_to_4(other[e31] * self[e315])
                - (other.group1().zyz() * self.group1().yww()).extend_to_4(other[e12] * self[e125]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e23] * self[e321]) + (other[e25] * self[e412]) + (other[e3215] * self[e423]),
                (other[e31] * self[e321]) + (other[e35] * self[e423]) + (other[e3215] * self[e431]),
                (other[e12] * self[e321]) + (other[e15] * self[e431]) + (other[e3215] * self[e412]),
                -(other[e31] * self[e431]) - (other[e12] * self[e412]),
            ]) - (self.group0().yzx() * other.group1().zxy()).extend_to_4(other[e23] * self[e423]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       35       80        0
    //    simd3        1       16        0
    //    simd4       31       20        0
    // Totals...
    // yes simd       67      116        0
    //  no simd      162      208        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (self.group0().zxy() * other.group0().yzx()) - (self.group0().yzx() * other.group0().zxy()),
            // e23, e31, e12, e45
            Simd32x3::from(0.0).extend_to_4(other[e3] * self[e435] * -1.0)
                - (other.group0().xyzy() * self.group1().wwwy())
                - (self.group0() * other.group0().www()).extend_to_4(other[e1] * self[e415]),
            // e15, e25, e35, e1234
            Simd32x4::from([other[e3] * self[e315], other[e1] * self[e125], other[e2] * self[e235], other[e3] * self[e412] * -1.0])
                - (other.group0().yzxx() * self.group2().zxy().extend_to_4(self[e423]))
                - (other.group0().www() * self.group1().truncate_to_3()).extend_to_4(other[e2] * self[e431]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e3] * self[e425] * -1.0,
                other[e1] * self[e435] * -1.0,
                other[e2] * self[e415] * -1.0,
                (other[e3] * self[e125]) + (other[e5] * self[e321]),
            ]) + (other.group0().wwwx() * self.group0().extend_to_4(self[e235]))
                + (other.group0().yzx() * self.group1().zxy()).extend_to_4(other[e2] * self[e315]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       53        0
    //    simd3        0       19        0
    //    simd4       14        5        0
    // Totals...
    // yes simd       42       77        0
    //  no simd       84      130        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[e12345]) * self.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from(other[e12345]) * self.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35
            Simd32x3::from(other[e12345]) * self.group2() * Simd32x3::from(-1.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       60      109        0
    //    simd3        0       20        0
    //    simd4       42       26        0
    // Totals...
    // yes simd      102      155        0
    //  no simd      228      273        0
    fn sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(other[e431] * self[e435]) - (other[e425] * self[e412]),
                -(other[e412] * self[e415]) - (other[e435] * self[e423]),
                -(other[e412] * self[e321]) - (other[e415] * self[e431]),
                (other[e415] * self[e415])
                    + (other[e425] * self[e425])
                    + (other[e435] * self[e435])
                    + (other[e235] * self[e423])
                    + (other[e315] * self[e431])
                    + (other[e125] * self[e412]),
            ]) + (other.group0().zxy() * self.group1().yzx()).extend_to_4(other[e423] * self[e235])
                + (self.group0().xyx() * other.group1().wwy()).extend_to_4(other[e431] * self[e315])
                + (self.group0().yzz() * other.group1().zxw()).extend_to_4(other[e412] * self[e125])
                - (self.group1().wwyw() * other.group0().xyx().extend_to_4(other[e321])),
            // e23, e31, e12, e45
            (other.group0().zxy() * self.group2().yzx()).extend_to_4(other[e423] * self[e235])
                + (other.group2().zxy() * self.group0().yzx()).extend_to_4(other[e431] * self[e315])
                + (other.group1().zxy() * self.group1().yzx()).extend_to_4(other[e412] * self[e125])
                - (other.group0().yzx() * self.group2().zxy()).extend_to_4(other[e235] * self[e423])
                - (other.group2().yzx() * self.group0().zxy()).extend_to_4(other[e315] * self[e431])
                - (other.group1().yzx() * self.group1().zxy()).extend_to_4(other[e125] * self[e412]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(other[e425] * self[e125]) - (other[e321] * self[e235]) - (other[e315] * self[e435]),
                -(other[e435] * self[e235]) - (other[e321] * self[e315]) - (other[e125] * self[e415]),
                -(other[e415] * self[e315]) - (other[e321] * self[e125]) - (other[e235] * self[e425]),
                (other[e415] * self[e423]) + (other[e425] * self[e431]) + (other[e435] * self[e412]),
            ]) + (self.group1().ywwy() * other.group2().zyz().extend_to_4(other[e431]))
                + (self.group1().wzxx() * other.group2().xxy().extend_to_4(other[e423]))
                + (self.group2().yzx() * other.group1().zxy()).extend_to_4(other[e412] * self[e435]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(other[e431] * self[e125]) - (other[e125] * self[e431]),
                -(other[e412] * self[e235]) - (other[e235] * self[e412]),
                -(other[e423] * self[e315]) - (other[e315] * self[e423]),
                (other[e425] * self[e315]) + (other[e435] * self[e125]),
            ]) + (self.group1().wwwz() * other.group1().truncate_to_3().extend_to_4(other[e125]))
                + (other.group0().zxy() * self.group2().yzx()).extend_to_4(other[e235] * self[e415])
                + (other.group2().yzx() * self.group0().zxy()).extend_to_4(other[e315] * self[e425])
                + (other.group1().www() * self.group1().truncate_to_3()).extend_to_4(other[e415] * self[e235]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       66      120        0
    //    simd3        0       18        0
    //    simd4       43       28        0
    // Totals...
    // yes simd      109      166        0
    //  no simd      238      286        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(self[e412] * other[e425]) - (self[e435] * other[e431]) - (self[e321] * other[e423]),
                -(self[e431] * other[e12345]) - (self[e415] * other[e412]) - (self[e321] * other[e431]),
                -(self[e412] * other[e12345]) - (self[e425] * other[e423]) - (self[e321] * other[e412]),
                (self[e415] * other[e415])
                    + (self[e425] * other[e425])
                    + (self[e435] * other[e435])
                    + (self[e235] * other[e423])
                    + (self[e315] * other[e431])
                    + (self[e125] * other[e412]),
            ]) + (self.group0().xyx() * other.group1().wwy()).extend_to_4(self[e423] * other[e235])
                + (self.group0().yzz() * other.group1().zxw()).extend_to_4(self[e431] * other[e315])
                + (other.group0().zxy() * self.group1().yzx()).extend_to_4(self[e412] * other[e125])
                - (Simd32x4::from([other[e12345], other[e435], other[e415], other[e321]]) * self.group0().xxy().extend_to_4(self[e321])),
            // e23, e31, e12, e45
            Simd32x4::from([
                self[e435] * other[e425] * -1.0,
                self[e425] * other[e12345] * -1.0,
                self[e435] * other[e12345] * -1.0,
                self[e321] * other[e12345],
            ]) + (self.group0().yzx() * other.group2().zxy()).extend_to_4(self[e235] * other[e423])
                + (self.group2().yzx() * other.group0().zxy()).extend_to_4(self[e315] * other[e431])
                + (self.group1().yzx() * other.group1().zxy()).extend_to_4(self[e125] * other[e412])
                - (Simd32x4::from([other[e12345], other[e435], other[e415], other[e125]]) * self.group1().xxy().extend_to_4(self[e412]))
                - (other.group2().yzxx() * self.group0().zxy().extend_to_4(self[e423]))
                - (self.group2().zxy() * other.group0().yzx()).extend_to_4(self[e431] * other[e315]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(self[e435] * other[e315]) - (self[e235] * other[e321]) - (self[e235] * other[e12345]) - (self[e125] * other[e425]),
                -(self[e415] * other[e125]) - (self[e235] * other[e435]) - (self[e315] * other[e321]) - (self[e315] * other[e12345]),
                -(self[e425] * other[e235]) - (self[e315] * other[e415]) - (self[e125] * other[e321]) - (self[e125] * other[e12345]),
                (self[e415] * other[e423]) + (self[e425] * other[e431]) + (self[e435] * other[e412]),
            ]) + (other.group1().zxyx() * self.group2().yzx().extend_to_4(self[e423]))
                + (self.group1().yzx() * other.group2().zxy()).extend_to_4(self[e431] * other[e425])
                + (self.group1().www() * other.group2().truncate_to_3()).extend_to_4(self[e412] * other[e435]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(self[e431] * other[e125]) - (self[e125] * other[e431]),
                -(self[e412] * other[e235]) - (self[e235] * other[e412]),
                -(self[e423] * other[e315]) - (self[e315] * other[e423]),
                (self[e425] * other[e315]) + (self[e435] * other[e125]),
            ]) + (self.group1().wwwx() * other.group1().truncate_to_3().extend_to_4(other[e235]))
                + (other.group1().wwwz() * self.group1().truncate_to_3().extend_to_4(self[e125]))
                + (self.group0().zxy() * other.group2().yzx()).extend_to_4(self[e235] * other[e415])
                + (self.group2().yzx() * other.group0().zxy()).extend_to_4(self[e315] * other[e425]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64      114        0
    //    simd3        0       25        0
    //    simd4       41       21        0
    // Totals...
    // yes simd      105      160        0
    //  no simd      228      273        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e423] * other[e45]) + (self[e412] * other[e31]) + (self[e435] * other[e42]) + (self[e321] * other[e41]),
                (self[e423] * other[e12]) + (self[e431] * other[e45]) + (self[e415] * other[e43]) + (self[e321] * other[e42]),
                (self[e431] * other[e23]) + (self[e412] * other[e45]) + (self[e425] * other[e41]) + (self[e321] * other[e43]),
                -(self[e412] * other[e35])
                    - (self[e415] * other[e23])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e321] * other[e45])
                    - (self[e235] * other[e41])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
            ]) - (self.group0().yzx() * other.group1().zxy()).extend_to_4(self[e423] * other[e15])
                - (other.group0().zxy() * self.group1().yzx()).extend_to_4(self[e431] * other[e25]),
            // e415, e425, e435, e321
            (self.group0().zxy() * other.group2().yzx()).extend_to_4(self[e235] * other[e41])
                + (self.group2().zxy() * other.group0().yzx()).extend_to_4(self[e315] * other[e42])
                + (self.group1().zxy() * other.group1().yzx()).extend_to_4(self[e125] * other[e43])
                - (self.group0().yzx() * other.group2().zxy()).extend_to_4(self[e423] * other[e15])
                - (self.group2().yzx() * other.group0().zxy()).extend_to_4(self[e431] * other[e25])
                - (self.group1().yzx() * other.group1().zxy()).extend_to_4(self[e412] * other[e35]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e435] * other[e25]) + (self[e125] * other[e31]),
                (self[e415] * other[e35]) + (self[e235] * other[e12]),
                (self[e425] * other[e15]) + (self[e315] * other[e23]),
                -(self[e425] * other[e25]) - (self[e435] * other[e35]),
            ]) - (self.group1().ywwx() * other.group2().zyz().extend_to_4(other[e15]))
                - (other.group1().zxwy() * self.group2().yzz().extend_to_4(self[e315]))
                - (other.group1().wwyx() * self.group2().xyx().extend_to_4(self[e235]))
                - (other.group2().xxy() * self.group1().wzx()).extend_to_4(self[e125] * other[e12]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e412] * other[e25]) + (self[e321] * other[e23]) + (self[e315] * other[e43]),
                (self[e423] * other[e35]) + (self[e321] * other[e31]) + (self[e125] * other[e41]),
                (self[e431] * other[e15]) + (self[e321] * other[e12]) + (self[e235] * other[e42]),
                -(self[e415] * other[e41]) - (self[e425] * other[e42]) - (self[e435] * other[e43]),
            ]) - (other.group1().wwwz() * self.group1().truncate_to_3().extend_to_4(self[e412]))
                - (self.group0().yzx() * other.group2().zxy()).extend_to_4(self[e423] * other[e23])
                - (self.group2().zxy() * other.group0().yzx()).extend_to_4(self[e431] * other[e31]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       70      122        0
    //    simd3        0       20        0
    //    simd4       52       36        0
    // Totals...
    // yes simd      122      178        0
    //  no simd      278      326        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e423] * other[e45])
                    + (self[e412] * other[e31])
                    + (self[e412] * other[e4315])
                    + (self[e415] * other[e1234])
                    + (self[e435] * other[e42])
                    + (self[e321] * other[e41]),
                (self[e423] * other[e12])
                    + (self[e423] * other[e4125])
                    + (self[e431] * other[e45])
                    + (self[e415] * other[e43])
                    + (self[e425] * other[e1234])
                    + (self[e321] * other[e42]),
                (self[e431] * other[e23])
                    + (self[e431] * other[e4235])
                    + (self[e412] * other[e45])
                    + (self[e425] * other[e41])
                    + (self[e435] * other[e1234])
                    + (self[e321] * other[e43]),
                -(self[e415] * other[e23])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e321] * other[e45])
                    - (self[e235] * other[e41])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
            ]) - (self.group0().yzx() * other.group1().zxy()).extend_to_4(self[e423] * other[e15])
                - (self.group0().yzx() * other.group3().zxy()).extend_to_4(self[e431] * other[e25])
                - (other.group0().zxy() * self.group1().yzx()).extend_to_4(self[e412] * other[e35]),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e321] * other[e4235] * -1.0,
                self[e321] * other[e4315] * -1.0,
                self[e321] * other[e4125] * -1.0,
                self[e435] * other[e4125],
            ]) + (Simd32x4::from([other[e42], other[e1234], other[e1234], other[e4235]]) * self.group2().zyz().extend_to_4(self[e415]))
                + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e42]]) * self.group0().zyz().extend_to_4(self[e315]))
                + (Simd32x4::from([other[e1234], other[e43], other[e41], other[e43]]) * self.group2().xxy().extend_to_4(self[e125]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e41]]) * self.group0().xxy().extend_to_4(self[e235]))
                + (self.group1().zxyy() * other.group1().yzx().extend_to_4(other[e4315]))
                - (other.group2().zxyx() * self.group0().yzx().extend_to_4(self[e423]))
                - (self.group2().yzx() * other.group0().zxy()).extend_to_4(self[e431] * other[e25])
                - (self.group1().yzx() * other.group1().zxy()).extend_to_4(self[e412] * other[e35]),
            // e235, e315, e125, e5
            Simd32x4::from([
                self[e435] * other[e25],
                self[e425] * other[e3215],
                self[e435] * other[e3215],
                -(self[e435] * other[e35]) - (self[e321] * other[e3215]),
            ]) + (Simd32x4::from([other[e31], other[e4235], other[e23], other[e4315]]) * self.group2().zzy().extend_to_4(self[e315]))
                + (Simd32x4::from([other[e4125], other[e12], other[e4315], other[e4235]]) * self.group2().yxx().extend_to_4(self[e235]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e4125]]) * self.group1().xxy().extend_to_4(self[e125]))
                - (Simd32x4::from(self[e235]) * Simd32x4::from([other[e45], other[e4125], other[e31], other[e23]]))
                - (Simd32x4::from(self[e315]) * other.group1().zw().extend_to_4(other[e4235], other[e31]))
                - (Simd32x4::from(self[e125]) * Simd32x4::from([other[e4315], other[e23], other[e45], other[e12]]))
                - (self.group1().yzxx() * other.group2().zxyx())
                - (self.group1().wwwy() * other.group2().xyzy()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e412] * other[e25]) + (self[e425] * other[e4125]) + (self[e321] * other[e23]) + (self[e315] * other[e43]),
                (self[e431] * other[e3215]) + (self[e435] * other[e4235]) + (self[e321] * other[e31]) + (self[e125] * other[e41]),
                (self[e412] * other[e3215]) + (self[e415] * other[e4315]) + (self[e321] * other[e12]) + (self[e235] * other[e42]),
                -(self[e412] * other[e4125]) - (self[e415] * other[e41]) - (self[e425] * other[e42]) - (self[e435] * other[e43]),
            ]) + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e1234]]) * self.group0().xxy().extend_to_4(self[e321]))
                - (Simd32x4::from([other[e42], other[e1234], other[e1234], other[e31]]) * self.group2().zyz().extend_to_4(self[e431]))
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e4315]]) * self.group1().xxy().extend_to_4(self[e431]))
                - (Simd32x4::from([other[e1234], other[e43], other[e41], other[e4235]]) * self.group2().xxy().extend_to_4(self[e423]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e12]]) * self.group1().zyz().extend_to_4(self[e412]))
                - (self.group0().yzx() * other.group2().zxy()).extend_to_4(self[e423] * other[e23]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       34       63        0
    //    simd3        2       17        0
    //    simd4       25       18        0
    // Totals...
    // yes simd       61       98        0
    //  no simd      140      186        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[e12345]) * self.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            (-(Simd32x3::from(other[e5]) * self.group0()) - (Simd32x3::from(other[e12345]) * self.group1().truncate_to_3())).extend_to_4(self[e321] * other[e12345]),
            // e15, e25, e35, e1234
            (-(Simd32x3::from(other[e5]) * self.group1().truncate_to_3()) - (Simd32x3::from(other[e12345]) * self.group2())).extend_to_4(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e5]) * self.group0().extend_to_4(self[e321]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       75        0
    //    simd3        0       17        0
    //    simd4       33       22        0
    // Totals...
    // yes simd       73      114        0
    //  no simd      172      214        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([other[e45], other[e45], other[e45], 1.0])
                * self
                    .group0()
                    .extend_to_4(-(self[e423] * other[e15]) - (self[e431] * other[e25]) - (self[e412] * other[e35]) - (self[e321] * other[e45])),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e412] * other[e25],
                self[e423] * other[e35],
                self[e431] * other[e15],
                -(self[e431] * other[e25]) - (self[e412] * other[e35]),
            ]) - (other.group0().zxyx() * self.group0().yzx().extend_to_4(self[e423])),
            // e235, e315, e125, e5
            Simd32x4::from([self[e435] * other[e25], self[e415] * other[e35], self[e425] * other[e15], 0.0])
                - (self.group1().yzxy() * other.group0().zxyy())
                - (self.group1().wwwz() * other.group0().xyzz())
                - (other.group0().wwwx() * self.group2().extend_to_4(self[e415])),
            // e1, e2, e3, e4
            (self.group0().zxy() * other.group0().yzx()).extend_to_4(0.0)
                - (Simd32x3::from(other[e45]) * self.group1().truncate_to_3()).extend_to_4(0.0)
                - (self.group0().yzx() * other.group0().zxy()).extend_to_4(0.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       86        0
    //    simd3        0       17        0
    //    simd4       41       29        0
    // Totals...
    // yes simd       89      132        0
    //  no simd      212      253        0
    fn sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e423] * other[e45]) + (self[e412] * other[e4315]),
                (self[e423] * other[e4125]) + (self[e431] * other[e45]),
                (self[e431] * other[e4235]) + (self[e412] * other[e45]),
                -(self[e431] * other[e25]) - (self[e412] * other[e35]) - (self[e321] * other[e45]),
            ]) - (self.group0().yzx() * other.group1().zxy()).extend_to_4(self[e423] * other[e15]),
            // e415, e425, e435, e321
            (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e4315]]) * self.group0().zyz().extend_to_4(self[e425]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e4235]]) * self.group0().xxy().extend_to_4(self[e415]))
                + Simd32x3::from(0.0).extend_to_4((self[e435] * other[e4125]) - (self[e412] * other[e35]))
                - (other.group0().zxyx() * self.group0().yzx().extend_to_4(self[e423]))
                - (self.group1().www() * other.group1().truncate_to_3()).extend_to_4(self[e431] * other[e25]),
            // e235, e315, e125, e5
            (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e4125]]) * self.group1().zyz().extend_to_4(self[e125]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e4315]]) * self.group1().xxy().extend_to_4(self[e315]))
                + (other.group1().zxyx() * self.group2().yzx().extend_to_4(self[e235]))
                - (Simd32x4::from(self[e321]) * other.group0().truncate_to_3().extend_to_4(other[e3215]))
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e15]]) * self.group2().xxy().extend_to_4(self[e415]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e25]]) * self.group2().zyz().extend_to_4(self[e425]))
                - (self.group1().yzxz() * other.group0().zxyz()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e423] * other[e3215]) + (self[e412] * other[e25]) + (self[e425] * other[e4125]),
                (self[e423] * other[e35]) + (self[e431] * other[e3215]) + (self[e435] * other[e4235]),
                (self[e431] * other[e15]) + (self[e412] * other[e3215]) + (self[e415] * other[e4315]),
                0.0,
            ]) - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e4315]]) * self.group1().xxy().extend_to_4(self[e431]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e4125]]) * self.group1().zyz().extend_to_4(self[e412]))
                - (self.group0().yzx() * other.group0().zxy()).extend_to_4(self[e423] * other[e4235]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       53      107        0
    //    simd3        0       15        0
    //    simd4       34       22        0
    // Totals...
    // yes simd       87      144        0
    //  no simd      189      240        0
    fn sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e412] * other[e425] * -1.0,
                self[e423] * other[e435] * -1.0,
                self[e431] * other[e415] * -1.0,
                (self[e431] * other[e315]) + (self[e412] * other[e125]) + (self[e415] * other[e415]) + (self[e425] * other[e425]) + (self[e435] * other[e435]),
            ]) + (self.group0().yzx() * other.group0().zxy()).extend_to_4(self[e423] * other[e235]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e431] * other[e125]) + (self[e425] * other[e435]),
                (self[e412] * other[e235]) + (self[e435] * other[e415]),
                (self[e423] * other[e315]) + (self[e415] * other[e425]),
                self[e412] * other[e125] * -1.0,
            ]) - (self.group0().zxy() * other.group1().yzx()).extend_to_4(self[e423] * other[e235])
                - (other.group0().yzx() * self.group1().zxy()).extend_to_4(self[e431] * other[e315]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(self[e435] * other[e315]) - (self[e125] * other[e425]),
                -(self[e415] * other[e125]) - (self[e235] * other[e435]),
                -(self[e425] * other[e235]) - (self[e315] * other[e415]),
                0.0,
            ]) + (self.group2().yzx() * other.group0().zxy()).extend_to_4(self[e423] * other[e415])
                + (other.group1().xxy() * self.group1().wzx()).extend_to_4(self[e431] * other[e425])
                + (other.group1().zyz() * self.group1().yww()).extend_to_4(self[e412] * other[e435]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e431] * other[e125] * -1.0,
                self[e412] * other[e235] * -1.0,
                self[e423] * other[e315] * -1.0,
                (self[e415] * other[e235]) + (self[e425] * other[e315]) + (self[e435] * other[e125]) + (self[e125] * other[e435]),
            ]) + (other.group0() * self.group1().www()).extend_to_4(self[e315] * other[e425])
                + (self.group0().zxy() * other.group1().yzx()).extend_to_4(self[e235] * other[e415]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       62      110        0
    //    simd3        0       14        0
    //    simd4       37       26        0
    // Totals...
    // yes simd       99      150        0
    //  no simd      210      256        0
    fn sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(self[e423] * other[e12345]) - (self[e412] * other[e425]),
                -(self[e423] * other[e435]) - (self[e431] * other[e12345]),
                -(self[e431] * other[e415]) - (self[e412] * other[e12345]),
                (self[e431] * other[e315]) + (self[e412] * other[e125]) + (self[e415] * other[e415]) + (self[e425] * other[e425]) + (self[e435] * other[e435]),
            ]) + (self.group0().yzx() * other.group0().zxy()).extend_to_4(self[e423] * other[e235]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e425] * other[e435]) - (self[e435] * other[e425]),
                (self[e435] * other[e415]) - (self[e425] * other[e12345]),
                (self[e415] * other[e425]) - (self[e435] * other[e12345]),
                0.0,
            ]) + (self.group0().yzx() * other.group1().zxy()).extend_to_4(self[e321] * other[e12345])
                - (other.group1().ywwy() * self.group0().zyz().extend_to_4(self[e431]))
                - (other.group1().wzxx() * self.group0().xxy().extend_to_4(self[e423]))
                - (self.group1().xxy() * other.group0().wzx()).extend_to_4(self[e412] * other[e125]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(self[e415] * other[e5]) - (self[e435] * other[e315]) - (self[e235] * other[e12345]) - (self[e125] * other[e425]),
                -(self[e415] * other[e125]) - (self[e425] * other[e5]) - (self[e235] * other[e435]) - (self[e315] * other[e12345]),
                -(self[e425] * other[e235]) - (self[e435] * other[e5]) - (self[e315] * other[e415]) - (self[e125] * other[e12345]),
                0.0,
            ]) + (other.group0().zxyx() * self.group2().yzx().extend_to_4(self[e423]))
                + (self.group1().yzx() * other.group1().zxy()).extend_to_4(self[e431] * other[e425])
                + (self.group1().www() * other.group1().truncate_to_3()).extend_to_4(self[e412] * other[e435]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e431] * other[e125] * -1.0,
                self[e412] * other[e235] * -1.0,
                self[e423] * other[e315] * -1.0,
                (self[e415] * other[e235]) + (self[e425] * other[e315]) + (self[e435] * other[e125]) + (self[e321] * other[e5]),
            ]) + (other.group0().xyzz() * self.group1().www().extend_to_4(self[e125]))
                + (self.group0().xxy() * other.group1().wzx()).extend_to_4(self[e235] * other[e415])
                + (self.group0().zyz() * other.group1().yww()).extend_to_4(self[e315] * other[e425]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for Circle {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       96      153        0
    //    simd2        2        2        0
    //    simd3       72      105        0
    //    simd4       65       46        0
    // Totals...
    // yes simd      235      306        0
    //  no simd      576      656        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e423] * other[e235])
                    + (self[e431] * other[e315])
                    + (self[e412] * other[e125])
                    + (self[e415] * other[e415])
                    + (self[e425] * other[e425])
                    + (self[e435] * other[e435])
                    + (self[e235] * other[e423])
                    + (self[e315] * other[e431])
                    + (self[e125] * other[e412]),
                -(self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e321] * other[e45])
                    - (self[e235] * other[e41])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
            ]) - (Simd32x2::from([other[e321], other[e23]]) * self.group1().wx()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e412] * other[e25]) + (self[e425] * other[e4125]) + (self[e321] * other[e23]) + (self[e315] * other[e43]),
                (self[e431] * other[e3215]) + (self[e435] * other[e4235]) + (self[e321] * other[e31]) + (self[e125] * other[e41]),
                (self[e412] * other[e3215]) + (self[e415] * other[e4315]) + (self[e321] * other[e12]) + (self[e235] * other[e42]),
                -(self[e412] * other[e4125]) - (self[e415] * other[e41]) - (self[e425] * other[e42]) - (self[e435] * other[e43]),
            ]) + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e1234]]) * self.group0().xxy().extend_to_4(self[e321]))
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e4315]]) * self.group1().xxy().extend_to_4(self[e431]))
                - (Simd32x4::from([other[e42], other[e1234], other[e1234], other[e31]]) * self.group2().zyz().extend_to_4(self[e431]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e12]]) * self.group1().zyz().extend_to_4(self[e412]))
                - (Simd32x4::from([other[e1234], other[e43], other[e41], other[e4235]]) * self.group2().xxy().extend_to_4(self[e423]))
                - (self.group0().yzx() * other.group3().zxy()).extend_to_4(self[e423] * other[e23]),
            // e5
            (self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125])
                - (self[e415] * other[e15])
                - (self[e425] * other[e25])
                - (self[e435] * other[e35])
                - (self[e321] * other[e3215])
                - (self[e235] * other[e23])
                - (self[e315] * other[e31])
                - (self[e125] * other[e12]),
            // e15, e25, e35, e45
            (self.group2().yzx() * other.group1().zxy()).extend_to_4(self[e321] * other[e12345])
                + (self.group2().yzx() * other.group6().zxy()).extend_to_4(self[e235] * other[e423])
                + (other.group8().xxy() * self.group1().wzx()).extend_to_4(self[e315] * other[e431])
                + (other.group8().zyz() * self.group1().yww()).extend_to_4(self[e125] * other[e412])
                - (Simd32x4::from([other[e2], other[e435], other[e415], other[e125]]) * self.group2().zxy().extend_to_4(self[e412]))
                - (Simd32x4::from([other[e5], other[e5], other[e5], other[e3]]) * self.group1().xyzz())
                - (Simd32x4::from([other[e321], other[e3], other[e1], other[e315]]) * self.group2().xxy().extend_to_4(self[e431]))
                - (other.group0().yy().extend_to_4(other[e12345], self[e423]) * self.group2().extend_to_4(other[e235]))
                - (self.group2().zyz() * other.group6().yww()).extend_to_4(self[e415] * other[e1])
                - (other.group8().yzx() * self.group1().zxy()).extend_to_4(self[e425] * other[e2]),
            // e41, e42, e43
            (Simd32x3::from(self[e423]) * Simd32x3::from([other[e321], other[e3], other[e425]]))
                + (Simd32x3::from(self[e431]) * Simd32x3::from([other[e435], other[e321], other[e1]]))
                + (Simd32x3::from(self[e412]) * Simd32x3::from([other[e2], other[e415], other[e321]]))
                + (other.group7().zxy() * self.group1().yzx())
                - (Simd32x3::from(other[e12345]) * self.group0())
                - (Simd32x3::from(other[e4]) * self.group1().truncate_to_3())
                - (Simd32x3::from([other[e3], other[e435], other[e2]]) * self.group0().yxx())
                - (Simd32x3::from([other[e425], other[e1], other[e415]]) * self.group0().zzy())
                - (other.group7().xyx() * self.group1().wwy())
                - (other.group7().yzz() * self.group1().zxw()),
            // e23, e31, e12
            (self.group0().yzx() * other.group8().zxy()) + (self.group2().yzx() * other.group7().zxy()) + (self.group1().yzx() * other.group6().zxy())
                - (Simd32x3::from(self[e321]) * other.group1().truncate_to_3())
                - (Simd32x3::from(other[e12345]) * self.group1().truncate_to_3())
                - (Simd32x3::from([other[e4], other[e412], other[e423]]) * self.group2().xxy())
                - (Simd32x3::from([other[e5], other[e125], other[e235]]) * self.group0().xxy())
                - (Simd32x3::from([other[e431], other[e4], other[e4]]) * self.group2().zyz())
                - (Simd32x3::from([other[e315], other[e5], other[e5]]) * self.group0().zyz())
                - (self.group1().zxy() * other.group6().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e321] * other[e4235] * -1.0,
                self[e321] * other[e4315] * -1.0,
                self[e321] * other[e4125] * -1.0,
                self[e435] * other[e4125],
            ]) + (Simd32x4::from(other[scalar]) * self.group1())
                + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e42]]) * self.group0().zyz().extend_to_4(self[e315]))
                + (Simd32x4::from([other[e42], other[e1234], other[e1234], other[e4235]]) * self.group2().zyz().extend_to_4(self[e415]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e41]]) * self.group0().xxy().extend_to_4(self[e235]))
                + (Simd32x4::from([other[e1234], other[e43], other[e41], other[e43]]) * self.group2().xxy().extend_to_4(self[e125]))
                + (other.group5().yzx() * self.group1().zxy()).extend_to_4(self[e425] * other[e4315])
                - (other.group3().zxyx() * self.group0().yzx().extend_to_4(self[e423]))
                - (self.group2().yzx() * other.group4().zxy()).extend_to_4(self[e431] * other[e25])
                - (other.group5().zxy() * self.group1().yzx()).extend_to_4(self[e412] * other[e35]),
            // e423, e431, e412
            (Simd32x3::from(other[scalar]) * self.group0())
                + (Simd32x3::from(other[e1234]) * self.group1().truncate_to_3())
                + (Simd32x3::from([other[e45], other[e12], other[e23]]) * self.group0().xxy())
                + (Simd32x3::from([other[e31], other[e4125], other[e4235]]) * self.group0().zxy())
                + (Simd32x3::from([other[e4315], other[e45], other[e45]]) * self.group0().zyz())
                + (other.group4().xyx() * self.group1().wwy())
                + (other.group4().yzz() * self.group1().zxw())
                - (self.group0().yzx() * other.group5().zxy())
                - (self.group0().yzx() * other.group9().zxy())
                - (other.group4().zxy() * self.group1().yzx()),
            // e235, e315, e125
            (Simd32x3::from(other[scalar]) * self.group2())
                + (Simd32x3::from([other[e25], other[e3215], other[e3215]]) * self.group1().zyz())
                + (Simd32x3::from([other[e31], other[e4235], other[e23]]) * self.group2().zzy())
                + (Simd32x3::from([other[e4125], other[e12], other[e4315]]) * self.group2().yxx())
                + (Simd32x3::from([other[e3215], other[e35], other[e15]]) * self.group1().xxy())
                - (Simd32x3::from(self[e321]) * other.group3().truncate_to_3())
                - (Simd32x3::from(self[e235]) * Simd32x3::from([other[e45], other[e4125], other[e31]]))
                - (Simd32x3::from(self[e315]) * Simd32x3::from([other[e12], other[e45], other[e4235]]))
                - (Simd32x3::from(self[e125]) * Simd32x3::from([other[e4315], other[e23], other[e45]]))
                - (self.group1().yzx() * other.group3().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(self[e431] * other[e125]) - (self[e425] * other[e3]) - (self[e235] * other[e4]) - (self[e125] * other[e431]),
                -(self[e412] * other[e235]) - (self[e435] * other[e1]) - (self[e235] * other[e412]) - (self[e315] * other[e4]),
                -(self[e423] * other[e315]) - (self[e415] * other[e2]) - (self[e315] * other[e423]) - (self[e125] * other[e4]),
                (self[e415] * other[e235]) + (self[e425] * other[e315]) + (self[e435] * other[e125]) + (self[e321] * other[e5]),
            ]) + (Simd32x4::from([other[e2], other[e321], other[e321], other[e3]]) * self.group1().zyz().extend_to_4(self[e125]))
                + (Simd32x4::from([other[e5], other[e125], other[e235], other[e1]]) * self.group0().xxy().extend_to_4(self[e235]))
                + (Simd32x4::from([other[e321], other[e3], other[e1], other[e425]]) * self.group1().xxy().extend_to_4(self[e315]))
                + (Simd32x4::from([other[e315], other[e5], other[e5], other[e415]]) * self.group0().zyz().extend_to_4(self[e235]))
                + (other.group6().xyzz() * self.group1().www().extend_to_4(self[e125]))
                + (self.group2().yzx() * other.group7().zxy()).extend_to_4(self[e315] * other[e2]),
            // e1234
            (self[e423] * other[e415])
                + (self[e431] * other[e425])
                + (self[e412] * other[e435])
                + (self[e415] * other[e423])
                + (self[e425] * other[e431])
                + (self[e435] * other[e412])
                - (self[e423] * other[e1])
                - (self[e431] * other[e2])
                - (self[e412] * other[e3])
                - (self[e321] * other[e4]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       35       68        0
    //    simd3        1       17        0
    //    simd4       31       21        0
    // Totals...
    // yes simd       67      106        0
    //  no simd      162      203        0
    fn sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (self.group0().zxy() * other.group0().yzx()) - (self.group0().yzx() * other.group0().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e321] * other[e4235] * -1.0,
                self[e321] * other[e4315] * -1.0,
                self[e321] * other[e4125] * -1.0,
                (self[e425] * other[e4315]) + (self[e435] * other[e4125]),
            ]) + (other.group0().wwwx() * self.group0().extend_to_4(self[e415])),
            // e235, e315, e125, e4
            Simd32x4::from([
                (self[e415] * other[e3215]) + (self[e315] * other[e4125]),
                (self[e425] * other[e3215]) + (self[e125] * other[e4235]),
                (self[e435] * other[e3215]) + (self[e235] * other[e4315]),
                -(self[e431] * other[e4315]) - (self[e412] * other[e4125]),
            ]) - (other.group0().yzxx() * self.group2().zxy().extend_to_4(self[e423])),
            // e1, e2, e3, e5
            (other.group0().zxyy() * self.group1().yzx().extend_to_4(self[e315]))
                + (other.group0().wwwx() * self.group0().extend_to_4(self[e235]))
                + Simd32x3::from(0.0).extend_to_4(self[e125] * other[e4125])
                - (self.group1().zxyw() * other.group0().yzxw()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       39       75        0
    //    simd3        2       14        0
    //    simd4       31       24        0
    // Totals...
    // yes simd       72      113        0
    //  no simd      169      213        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (self.group0().zxy() * other.group0().yzx()) - (Simd32x3::from(other[e4]) * self.group1().truncate_to_3()) - (self.group0().yzx() * other.group0().zxy()),
            // e23, e31, e12, e45
            -(Simd32x4::from([other[e5], other[e5], other[e5], other[e1]]) * self.group0().extend_to_4(self[e415]))
                - (self.group1().wwwz() * other.group0().xyzz())
                - (other.group0().wwwy() * self.group2().extend_to_4(self[e425])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                self[e315] * other[e3],
                self[e125] * other[e1],
                self[e235] * other[e2],
                -(self[e412] * other[e3]) - (self[e321] * other[e4]),
            ]) - (Simd32x4::from([other[e5], other[e5], other[e5], other[e2]]) * self.group1().truncate_to_3().extend_to_4(self[e431]))
                - (other.group0().yzxx() * self.group2().zxy().extend_to_4(self[e423])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(self[e425] * other[e3]) - (self[e235] * other[e4]),
                -(self[e435] * other[e1]) - (self[e315] * other[e4]),
                -(self[e415] * other[e2]) - (self[e125] * other[e4]),
                (self[e321] * other[e5]) + (self[e125] * other[e3]),
            ]) + (Simd32x4::from([other[e5], other[e5], other[e5], other[e1]]) * self.group0().extend_to_4(self[e235]))
                + (other.group0().yzxy() * self.group1().zxy().extend_to_4(self[e315])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       45        0
    //    simd3        0       17        0
    //    simd4       16        6        0
    // Totals...
    // yes simd       36       68        0
    //  no simd       84      120        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[scalar]) * self.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other[scalar]) * self.group1(),
            // e235, e315, e125
            Simd32x3::from(other[scalar]) * self.group2(),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       31       71        0
    //    simd3        2       19        0
    //    simd4       33       22        0
    // Totals...
    // yes simd       66      112        0
    //  no simd      169      216        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other[e1234]) * self.group1().truncate_to_3()) + (self.group0().zxy() * other.group0().yzx()) - (self.group0().yzx() * other.group0().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e321] * other[e4235] * -1.0,
                self[e321] * other[e4315] * -1.0,
                self[e321] * other[e4125] * -1.0,
                self[e435] * other[e4125],
            ]) + (Simd32x4::from([other[e1234], other[e1234], other[e1234], other[e4315]]) * self.group2().extend_to_4(self[e425]))
                + (other.group0().wwwx() * self.group0().extend_to_4(self[e415])),
            // e235, e315, e125, e4
            Simd32x4::from([
                self[e415] * other[e3215],
                self[e425] * other[e3215],
                self[e435] * other[e3215],
                -(self[e431] * other[e4315]) - (self[e412] * other[e4125]),
            ]) + (self.group2().yzx() * other.group0().zxy()).extend_to_4(self[e321] * other[e1234])
                - (other.group0().yzxx() * self.group2().zxy().extend_to_4(self[e423])),
            // e1, e2, e3, e5
            Simd32x4::from([
                self[e435] * other[e4315] * -1.0,
                self[e415] * other[e4125] * -1.0,
                self[e425] * other[e4235] * -1.0,
                self[e125] * other[e4125],
            ]) + (other.group0().zxyy() * self.group1().yzx().extend_to_4(self[e315]))
                + (other.group0().wwwx() * self.group0().extend_to_4(self[e235]))
                - (Simd32x4::from([other[e1234], other[e1234], other[e1234], other[e3215]]) * self.group2().extend_to_4(self[e321])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       72      123        0
    //    simd3        0       15        0
    //    simd4       54       42        0
    // Totals...
    // yes simd      126      180        0
    //  no simd      288      336        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(self[e431] * other[e3]) - (self[e412] * other[e425]) - (self[e415] * other[e4]) - (self[e435] * other[e431]) - (self[e321] * other[e423]),
                -(self[e431] * other[e12345]) - (self[e412] * other[e1]) - (self[e415] * other[e412]) - (self[e425] * other[e4]) - (self[e321] * other[e431]),
                -(self[e431] * other[e415]) - (self[e412] * other[e12345]) - (self[e425] * other[e423]) - (self[e435] * other[e4]) - (self[e321] * other[e412]),
                (self[e415] * other[e415]) + (self[e425] * other[e425]) + (self[e435] * other[e435]) + (self[e315] * other[e431]) + (self[e125] * other[e412]),
            ]) + (Simd32x4::from(self[e423]) * Simd32x4::from([other[e321], other[e3], other[e425], other[e235]]))
                + (Simd32x4::from(self[e431]) * other.group1().zw().extend_to_4(other[e1], other[e315]))
                + (Simd32x4::from(self[e412]) * Simd32x4::from([other[e2], other[e415], other[e321], other[e125]]))
                + (other.group0().zxyx() * self.group1().yzx().extend_to_4(self[e235]))
                - (Simd32x4::from([other[e12345], other[e435], other[e2], other[e321]]) * self.group0().xxx().extend_to_4(self[e321])),
            // e23, e31, e12, e45
            Simd32x4::from([self[e321] * other[e1] * -1.0, self[e321] * other[e2] * -1.0, self[e321] * other[e3] * -1.0, self[e321] * other[e12345]])
                + (other.group0().zxyy() * self.group2().yzx().extend_to_4(self[e315]))
                + (self.group0().yzx() * other.group2().zxy()).extend_to_4(self[e235] * other[e423])
                + (self.group1().yzx() * other.group1().zxy()).extend_to_4(self[e125] * other[e412])
                - (Simd32x4::from([other[e431], other[e4], other[e4], other[e1]]) * self.group2().zyz().extend_to_4(self[e415]))
                - (Simd32x4::from([other[e12345], other[e435], other[e415], other[e2]]) * self.group1().xxyy())
                - (Simd32x4::from([other[e425], other[e12345], other[e12345], other[e3]]) * self.group1().zyzz())
                - (Simd32x4::from([other[e4], other[e412], other[e423], other[e125]]) * self.group2().xxy().extend_to_4(self[e412]))
                - (other.group2().ywwy() * self.group0().zyz().extend_to_4(self[e431]))
                - (other.group2().wzxx() * self.group0().xxy().extend_to_4(self[e423])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(self[e415] * other[e5]) - (self[e435] * other[e315]),
                -(self[e415] * other[e125]) - (self[e425] * other[e5]),
                -(self[e425] * other[e235]) - (self[e435] * other[e5]),
                (self[e425] * other[e431]) + (self[e435] * other[e412]),
            ]) + (self.group1().wwwx() * other.group2().truncate_to_3().extend_to_4(other[e423]))
                + (other.group1().zxyx() * self.group2().yzx().extend_to_4(self[e423]))
                + (self.group2().yzx() * other.group3().zxy()).extend_to_4(self[e431] * other[e425])
                + (self.group1().yzx() * other.group2().zxy()).extend_to_4(self[e412] * other[e435])
                - (Simd32x4::from([other[e12345], other[e435], other[e415], other[e1]]) * self.group2().xxy().extend_to_4(self[e423]))
                - (Simd32x4::from([other[e425], other[e12345], other[e12345], other[e3]]) * self.group2().zyz().extend_to_4(self[e412]))
                - (Simd32x4::from([other[e321], other[e3], other[e1], other[e2]]) * self.group2().xxy().extend_to_4(self[e431]))
                - (Simd32x4::from([other[e2], other[e321], other[e321], other[e4]]) * self.group2().zyz().extend_to_4(self[e321])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(self[e431] * other[e125]) - (self[e425] * other[e3]) - (self[e235] * other[e4]) - (self[e125] * other[e431]),
                -(self[e412] * other[e235]) - (self[e435] * other[e1]) - (self[e235] * other[e412]) - (self[e315] * other[e4]),
                -(self[e423] * other[e315]) - (self[e415] * other[e2]) - (self[e315] * other[e423]) - (self[e125] * other[e4]),
                (self[e415] * other[e235]) + (self[e425] * other[e315]) + (self[e435] * other[e125]) + (self[e321] * other[e5]),
            ]) + (Simd32x4::from([other[e321], other[e3], other[e1], other[e2]]) * self.group1().xxy().extend_to_4(self[e315]))
                + (Simd32x4::from([other[e2], other[e321], other[e321], other[e435]]) * self.group1().zyz().extend_to_4(self[e125]))
                + (self.group0().xxy() * other.group2().wzx()).extend_to_4(self[e235] * other[e415])
                + (self.group0().zyz() * other.group2().yww()).extend_to_4(self[e235] * other[e1])
                + (self.group2().yzx() * other.group0().zxy()).extend_to_4(self[e315] * other[e425])
                + (self.group1().www() * other.group1().truncate_to_3()).extend_to_4(self[e125] * other[e3]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       76      128        0
    //    simd3        0       20        0
    //    simd4       53       37        0
    // Totals...
    // yes simd      129      185        0
    //  no simd      288      336        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e423] * other[scalar])
                    + (self[e423] * other[e45])
                    + (self[e412] * other[e31])
                    + (self[e412] * other[e4315])
                    + (self[e415] * other[e1234])
                    + (self[e435] * other[e42])
                    + (self[e321] * other[e41]),
                (self[e423] * other[e12])
                    + (self[e423] * other[e4125])
                    + (self[e431] * other[scalar])
                    + (self[e431] * other[e45])
                    + (self[e415] * other[e43])
                    + (self[e425] * other[e1234])
                    + (self[e321] * other[e42]),
                (self[e431] * other[e23])
                    + (self[e431] * other[e4235])
                    + (self[e412] * other[scalar])
                    + (self[e412] * other[e45])
                    + (self[e425] * other[e41])
                    + (self[e435] * other[e1234])
                    + (self[e321] * other[e43]),
                -(self[e415] * other[e23])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e321] * other[e45])
                    - (self[e235] * other[e41])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
            ]) - (self.group0().yzx() * other.group1().zxy()).extend_to_4(self[e423] * other[e15])
                - (self.group0().yzx() * other.group3().zxy()).extend_to_4(self[e431] * other[e25])
                - (self.group1().yzx() * other.group0().zxy()).extend_to_4(self[e412] * other[e35]),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e321] * other[e4235] * -1.0,
                self[e321] * other[e4315] * -1.0,
                self[e321] * other[e4125] * -1.0,
                self[e321] * other[scalar],
            ]) + (Simd32x4::from([other[e42], other[e1234], other[e1234], other[e4235]]) * self.group2().zyz().extend_to_4(self[e415]))
                + (Simd32x4::from([other[scalar], other[e12], other[e23], other[e4315]]) * self.group1().xxyy())
                + (Simd32x4::from([other[e31], other[scalar], other[scalar], other[e4125]]) * self.group1().zyzz())
                + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e42]]) * self.group0().zyz().extend_to_4(self[e315]))
                + (Simd32x4::from([other[e1234], other[e43], other[e41], other[e43]]) * self.group2().xxy().extend_to_4(self[e125]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e41]]) * self.group0().xxy().extend_to_4(self[e235]))
                - (other.group2().zxyx() * self.group0().yzx().extend_to_4(self[e423]))
                - (self.group2().yzx() * other.group0().zxy()).extend_to_4(self[e431] * other[e25])
                - (self.group1().yzx() * other.group1().zxy()).extend_to_4(self[e412] * other[e35]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e415] * other[e3215]) + (self[e435] * other[e25]),
                (self[e415] * other[e35]) + (self[e425] * other[e3215]),
                (self[e425] * other[e15]) + (self[e435] * other[e3215]),
                -(self[e435] * other[e35]) - (self[e321] * other[e3215]),
            ]) + (Simd32x4::from(self[e235]) * Simd32x4::from([other[scalar], other[e12], other[e4315], other[e4235]]))
                + (Simd32x4::from(self[e315]) * Simd32x4::from([other[e4125], other[scalar], other[e23], other[e4315]]))
                + (Simd32x4::from(self[e125]) * Simd32x4::from([other[e31], other[e4235], other[scalar], other[e4125]]))
                - (Simd32x4::from(self[e235]) * Simd32x4::from([other[e45], other[e4125], other[e31], other[e23]]))
                - (Simd32x4::from(self[e315]) * other.group1().zw().extend_to_4(other[e4235], other[e31]))
                - (Simd32x4::from(self[e125]) * Simd32x4::from([other[e4315], other[e23], other[e45], other[e12]]))
                - (self.group1().yzxx() * other.group2().zxyx())
                - (self.group1().wwwy() * other.group2().xyzy()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e412] * other[e25]) + (self[e425] * other[e4125]) + (self[e321] * other[e23]) + (self[e315] * other[e43]),
                (self[e431] * other[e3215]) + (self[e435] * other[e4235]) + (self[e321] * other[e31]) + (self[e125] * other[e41]),
                (self[e412] * other[e3215]) + (self[e415] * other[e4315]) + (self[e321] * other[e12]) + (self[e235] * other[e42]),
                -(self[e412] * other[e4125]) - (self[e415] * other[e41]) - (self[e425] * other[e42]) - (self[e435] * other[e43]),
            ]) + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e1234]]) * self.group0().xxy().extend_to_4(self[e321]))
                - (Simd32x4::from([other[e42], other[e1234], other[e1234], other[e31]]) * self.group2().zyz().extend_to_4(self[e431]))
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e4315]]) * self.group1().xxy().extend_to_4(self[e431]))
                - (Simd32x4::from([other[e1234], other[e43], other[e41], other[e4235]]) * self.group2().xxy().extend_to_4(self[e423]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e12]]) * self.group1().zyz().extend_to_4(self[e412]))
                - (self.group0().yzx() * other.group2().zxy()).extend_to_4(self[e423] * other[e23]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl std::ops::Div<sandwich> for CircleRotor {
    type Output = sandwich_partial<CircleRotor>;
    fn div(self, _rhs: sandwich) -> Self::Output {
        sandwich_partial(self)
    }
}
impl Sandwich<AntiCircleRotor> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       77      131        0
    //    simd3        0       21        0
    //    simd4       47       29        0
    // Totals...
    // yes simd      124      181        0
    //  no simd      265      310        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e41] * self[e12345]) + (other[e42] * self[e435]) + (other[e31] * self[e412]) + (other[e45] * self[e423]) + (other[scalar] * self[e423]),
                (other[e42] * self[e12345]) + (other[e43] * self[e415]) + (other[e12] * self[e423]) + (other[e45] * self[e431]) + (other[scalar] * self[e431]),
                (other[e43] * self[e321]) + (other[e43] * self[e12345]) + (other[e23] * self[e431]) + (other[e45] * self[e412]) + (other[scalar] * self[e412]),
                -(other[e43] * self[e125])
                    - (other[e23] * self[e415])
                    - (other[e31] * self[e425])
                    - (other[e12] * self[e435])
                    - (other[e45] * self[e321])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412]),
            ]) + (other.group0().xyx() * self.group1().wwy()).extend_to_4(other[scalar] * self[e12345])
                - (other.group0().zxy() * self.group1().yzx()).extend_to_4(other[e41] * self[e235])
                - (self.group0().yzx() * other.group1().zxy()).extend_to_4(other[e42] * self[e315]),
            // e415, e425, e435, e321
            Simd32x4::from([other[scalar] * self[e415], other[scalar] * self[e425], other[scalar] * self[e435], other[e45] * self[e12345] * -1.0])
                + (self.group2().zxyx() * other.group0().yzx().extend_to_4(other[e41]))
                + (self.group1().zx().extend_to_4(self[e12345], self[e321]) * other.group1().yzz().extend_to_4(other[scalar]))
                + (self.group2().ww().extend_to_4(self[e425], self[e125]) * other.group1().xyx().extend_to_4(other[e43]))
                + (self.group0().zxy() * other.group2().yzx()).extend_to_4(other[e42] * self[e315])
                - (other.group2().zxyy() * self.group0().yzx().extend_to_4(self[e431]))
                - (other.group0().zxy() * self.group2().yzx()).extend_to_4(other[e15] * self[e423])
                - (other.group1().zxy() * self.group1().yzx()).extend_to_4(other[e35] * self[e412]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e31] * self[e125]) + (other[e15] * self[e12345]) + (other[e25] * self[e435]) + (other[scalar] * self[e235]),
                (other[e12] * self[e235]) + (other[e25] * self[e12345]) + (other[e35] * self[e415]) + (other[scalar] * self[e315]),
                (other[e23] * self[e315]) + (other[e15] * self[e425]) + (other[e35] * self[e12345]) + (other[scalar] * self[e125]),
                -(other[e25] * self[e425]) - (other[e35] * self[e435]),
            ]) - (other.group1().zxyx() * self.group2().yzxx())
                - (other.group1().wwwy() * self.group2().xyzy())
                - (other.group2().zyzx() * self.group1().ywwx())
                - (other.group2().xxy() * self.group1().wzx()).extend_to_4(other[e12] * self[e125]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e43] * self[e315]) + (other[e23] * self[e321]) + (other[e25] * self[e412]),
                (other[e41] * self[e125]) + (other[e31] * self[e321]) + (other[e35] * self[e423]),
                (other[e42] * self[e235]) + (other[e12] * self[e321]) + (other[e15] * self[e431]),
                -(other[e23] * self[e423]) - (other[e31] * self[e431]) - (other[e12] * self[e412]),
            ]) - (self.group1().xyzz() * other.group1().www().extend_to_4(other[e43]))
                - (other.group0().yzx() * self.group2().zxy()).extend_to_4(other[e41] * self[e415])
                - (self.group0().yzx() * other.group2().zxy()).extend_to_4(other[e42] * self[e425]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       61      114        0
    //    simd3        0       19        0
    //    simd4       62       47        0
    // Totals...
    // yes simd      123      180        0
    //  no simd      309      359        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(other[e423] * self[e12345]) - (other[e431] * self[e435]) - (other[e425] * self[e412]) - (other[e4] * self[e415]) - (other[e3] * self[e431]),
                -(other[e431] * self[e12345]) - (other[e412] * self[e415]) - (other[e435] * self[e423]) - (other[e4] * self[e425]) - (other[e1] * self[e412]),
                -(other[e412] * self[e321]) - (other[e412] * self[e12345]) - (other[e415] * self[e431]) - (other[e4] * self[e435]) - (other[e2] * self[e423]),
                (other[e415] * self[e415]) + (other[e425] * self[e425]) + (other[e435] * self[e435]) + (other[e315] * self[e431]) + (other[e125] * self[e412]),
            ]) + (Simd32x4::from([other[e321], other[e3], other[e425], self[e315]]) * self.group0().xxx().extend_to_4(other[e431]))
                + (Simd32x4::from([other[e2], other[e415], other[e321], other[e235]]) * self.group0().zzz().extend_to_4(self[e423]))
                + (other.group1().zw().extend_to_4(other[e1], self[e125]) * self.group0().yyy().extend_to_4(other[e412]))
                + (other.group0().zxy() * self.group1().yzx()).extend_to_4(other[e423] * self[e235])
                - (self.group1().wwyw() * other.group0().xyx().extend_to_4(other[e321])),
            // e23, e31, e12, e45
            Simd32x4::from([other[e1] * self[e321] * -1.0, other[e2] * self[e321] * -1.0, other[e3] * self[e321] * -1.0, other[e321] * self[e12345]])
                + (self.group2().yzxx() * other.group0().zxy().extend_to_4(other[e423]))
                + (self.group0().yzx() * other.group2().zxy()).extend_to_4(other[e431] * self[e315])
                + (other.group1().zxy() * self.group1().yzx()).extend_to_4(other[e412] * self[e125])
                - (Simd32x4::from([other[e315], other[e5], other[e5], other[e125]]) * self.group0().zyz().extend_to_4(self[e412]))
                - (Simd32x4::from([other[e5], other[e125], other[e235], other[e315]]) * self.group0().xxy().extend_to_4(self[e431]))
                - (self.group1().zx().extend_to_4(self[e12345], self[e425]) * other.group1().yzz().extend_to_4(other[e2]))
                - (self.group2().ww().extend_to_4(self[e425], self[e415]) * other.group1().xyx().extend_to_4(other[e1]))
                - (other.group0().yzx() * self.group2().zxy()).extend_to_4(other[e235] * self[e423])
                - (other.group2().www() * self.group2().truncate_to_3()).extend_to_4(other[e3] * self[e435]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                other[e5] * self[e415] * -1.0,
                other[e5] * self[e425] * -1.0,
                other[e5] * self[e435] * -1.0,
                (other[e425] * self[e431]) + (other[e435] * self[e412]),
            ]) + (self.group1().ywwz() * other.group2().zyz().extend_to_4(other[e412]))
                + (self.group1().wzxy() * other.group2().xxy().extend_to_4(other[e431]))
                + (other.group1().zxy() * self.group2().yzx()).extend_to_4(other[e423] * self[e415])
                + (other.group3().zxy() * self.group2().yzx()).extend_to_4(other[e415] * self[e423])
                - (other.group2().yzzw() * self.group1().zx().extend_to_4(self[e12345], self[e321]))
                - (self.group2().zxyw() * other.group3().yzx().extend_to_4(other[e4]))
                - (self.group2().ww().extend_to_4(self[e425], other[e3]) * other.group2().xyx().extend_to_4(self[e412]))
                - (other.group1().yzx() * self.group2().zxy()).extend_to_4(other[e1] * self[e423])
                - (other.group1().www() * self.group2().truncate_to_3()).extend_to_4(other[e2] * self[e431]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(other[e125] * self[e431]) - (other[e4] * self[e235]) - (other[e3] * self[e425]),
                -(other[e235] * self[e412]) - (other[e4] * self[e315]) - (other[e1] * self[e435]),
                -(other[e315] * self[e423]) - (other[e4] * self[e125]) - (other[e2] * self[e415]),
                (other[e2] * self[e315]) + (other[e3] * self[e125]) + (other[e5] * self[e321]),
            ]) + (Simd32x4::from([other[e315], other[e5], other[e5], self[e125]]) * self.group0().zyz().extend_to_4(other[e435]))
                + (Simd32x4::from([other[e5], other[e125], other[e235], self[e315]]) * self.group0().xxy().extend_to_4(other[e425]))
                + (other.group3().yzzx() * self.group1().zx().extend_to_4(self[e12345], self[e235]))
                + (self.group1().xyzy() * other.group1().www().extend_to_4(other[e315]))
                + (self.group1().wwwx() * other.group1().truncate_to_3().extend_to_4(other[e235]))
                + (self.group2().yzxx() * other.group0().zxy().extend_to_4(other[e415]))
                + (self.group2().ww().extend_to_4(self[e425], self[e435]) * other.group3().xyx().extend_to_4(other[e125]))
                - (self.group2().zxyw() * other.group0().yzx().extend_to_4(other[e5])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       74        0
    //    simd3        1       14        0
    //    simd4       31       26        0
    // Totals...
    // yes simd       72      114        0
    //  no simd      167      220        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(other[scalar]) * self.group0().extend_to_4(self[e12345]),
            // e415, e425, e435, e321
            ((Simd32x3::from(other[e3215]) * self.group0()) + (Simd32x3::from(other[scalar]) * self.group1().truncate_to_3())).extend_to_4(other[scalar] * self[e321]),
            // e235, e315, e125, e5
            Simd32x4::from([other[scalar] * self[e235], other[scalar] * self[e315], other[scalar] * self[e125], other[e3215] * self[e321] * -1.0])
                + (Simd32x4::from(other[e3215]) * self.group1().truncate_to_3().extend_to_4(self[e12345])),
            // e1, e2, e3, e4
            other.group0().xx().extend_to_4(other[e3215], 0.0) * Simd32x3::from(1.0).extend_to_4(0.0) * self.group0().extend_to_4(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       73        0
    //    simd3        0       17        0
    //    simd4       39       28        0
    // Totals...
    // yes simd       79      118        0
    //  no simd      196      236        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([other[e321], other[e321], other[e321], 1.0])
                * self
                    .group0()
                    .extend_to_4((other[e235] * self[e423]) + (other[e315] * self[e431]) + (other[e125] * self[e412]) - (other[e321] * self[e321])),
            // e23, e31, e12, e45
            Simd32x3::from(0.0).extend_to_4(-(other[e315] * self[e431]) - (other[e125] * self[e412]))
                + (self.group0().yzx() * other.group0().zxy()).extend_to_4(other[e321] * self[e12345])
                - (other.group0().yzxx() * self.group0().zxy().extend_to_4(self[e423])),
            // e15, e25, e35, e1234
            (other.group0().xxy() * self.group1().wzx()).extend_to_4(0.0) + (other.group0().zyz() * self.group1().yww()).extend_to_4(0.0)
                - (Simd32x3::from(other[e321]) * self.group2().truncate_to_3()).extend_to_4(0.0)
                - (Simd32x3::from([self[e435], self[e415], self[e12345]]) * other.group0().yzz()).extend_to_4(0.0)
                - (Simd32x3::from([self[e12345], self[e12345], self[e425]]) * other.group0().xyx()).extend_to_4(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e125] * self[e431] * -1.0,
                other[e235] * self[e412] * -1.0,
                other[e315] * self[e423] * -1.0,
                other[e125] * self[e435],
            ]) + (other.group0().wwwy() * self.group1().xyzy())
                + (self.group0().zxy() * other.group0().yzx()).extend_to_4(other[e235] * self[e415]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       51       90        0
    //    simd3        0       15        0
    //    simd4       47       36        0
    // Totals...
    // yes simd       98      141        0
    //  no simd      239      279        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([other[e321], other[e3], other[e1], other[e235]]) * self.group0().xxy().extend_to_4(self[e423]))
                + (Simd32x4::from([other[e2], other[e321], other[e321], other[e315]]) * self.group0().zyz().extend_to_4(self[e431]))
                + Simd32x3::from(0.0).extend_to_4(other[e125] * self[e412])
                - (self.group0().yzx() * other.group1().zxy()).extend_to_4(other[e321] * self[e321]),
            // e23, e31, e12, e45
            Simd32x3::from(0.0).extend_to_4(-(other[e1] * self[e415]) - (other[e2] * self[e425]) - (other[e3] * self[e435]))
                + (self.group0().yzx() * other.group0().zxy()).extend_to_4(other[e321] * self[e12345])
                - (Simd32x4::from([other[e315], other[e5], other[e5], other[e315]]) * self.group0().zyz().extend_to_4(self[e431]))
                - (Simd32x4::from([other[e5], other[e125], other[e235], other[e235]]) * self.group0().xxy().extend_to_4(self[e423]))
                - (self.group1().www() * other.group1().truncate_to_3()).extend_to_4(other[e125] * self[e412]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e235] * self[e321]) + (other[e125] * self[e425]) + (other[e3] * self[e315]) - (other[e2] * self[e125]) - (other[e5] * self[e415]),
                (other[e235] * self[e435]) + (other[e315] * self[e321]) + (other[e1] * self[e125]) - (other[e3] * self[e235]) - (other[e5] * self[e425]),
                (other[e315] * self[e415]) + (other[e125] * self[e321]) + (other[e2] * self[e235]) - (other[e1] * self[e315]) - (other[e5] * self[e435]),
                0.0,
            ]) - (self.group1().zx().extend_to_4(self[e12345], other[e2]) * other.group0().yzz().extend_to_4(self[e431]))
                - (self.group2().ww().extend_to_4(self[e425], other[e1]) * other.group0().xyx().extend_to_4(self[e423]))
                - (other.group0().www() * self.group2().truncate_to_3()).extend_to_4(other[e3] * self[e412]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e3] * self[e425] * -1.0,
                other[e1] * self[e435] * -1.0,
                other[e2] * self[e415] * -1.0,
                (other[e3] * self[e125]) + (other[e5] * self[e321]),
            ]) + (Simd32x4::from([other[e315], other[e5], other[e5], self[e425]]) * self.group0().zyz().extend_to_4(other[e315]))
                + (Simd32x4::from([other[e5], other[e125], other[e235], self[e415]]) * self.group0().xxy().extend_to_4(other[e235]))
                + (other.group0().wwwz() * self.group1().xyzz())
                + (other.group1().xyxx() * self.group2().ww().extend_to_4(self[e425], self[e235]))
                + (other.group1().yzzy() * self.group1().zx().extend_to_4(self[e12345], self[e315]))
                - (self.group0().yzx() * other.group0().zxy()).extend_to_4(other[e5] * self[e12345]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       62      113        0
    //    simd3        0       18        0
    //    simd4       37       22        0
    // Totals...
    // yes simd       99      153        0
    //  no simd      210      255        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                other[e31] * self[e412],
                other[e12] * self[e423],
                other[e23] * self[e431],
                -(other[e31] * self[e425]) - (other[e12] * self[e435]) - (other[e15] * self[e423]) - (other[e25] * self[e431]) - (other[e35] * self[e412]),
            ]) - (other.group0().zxy() * self.group0().yzx()).extend_to_4(other[e23] * self[e415]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e23] * self[e12345]) + (other[e31] * self[e435]) + (other[e25] * self[e412]),
                (other[e31] * self[e12345]) + (other[e12] * self[e415]) + (other[e35] * self[e423]),
                (other[e23] * self[e425]) + (other[e12] * self[e12345]) + (other[e15] * self[e431]),
                other[e35] * self[e412] * -1.0,
            ]) - (other.group0().zxy() * self.group1().yzx()).extend_to_4(other[e15] * self[e423])
                - (other.group1().zxy() * self.group0().yzx()).extend_to_4(other[e25] * self[e431]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e31] * self[e125]) + (other[e15] * self[e12345]) + (other[e25] * self[e435]),
                (other[e12] * self[e235]) + (other[e25] * self[e12345]) + (other[e35] * self[e415]),
                (other[e23] * self[e315]) + (other[e15] * self[e425]) + (other[e35] * self[e12345]),
                -(other[e15] * self[e415]) - (other[e25] * self[e425]) - (other[e35] * self[e435]),
            ]) - (self.group2().yzxx() * other.group0().zxy().extend_to_4(other[e23]))
                - (other.group1().xxy() * self.group1().wzx()).extend_to_4(other[e31] * self[e315])
                - (other.group1().zyz() * self.group1().yww()).extend_to_4(other[e12] * self[e125]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e23] * self[e321]) + (other[e25] * self[e412]),
                (other[e31] * self[e321]) + (other[e35] * self[e423]),
                (other[e12] * self[e321]) + (other[e15] * self[e431]),
                -(other[e31] * self[e431]) - (other[e12] * self[e412]),
            ]) - (other.group1().zxy() * self.group0().yzx()).extend_to_4(other[e23] * self[e423]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       72      124        0
    //    simd3        0       19        0
    //    simd4       40       24        0
    // Totals...
    // yes simd      112      167        0
    //  no simd      232      277        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                other[e31] * self[e412],
                other[scalar] * self[e431],
                other[scalar] * self[e412],
                -(other[e23] * self[e415]) - (other[e31] * self[e425]) - (other[e12] * self[e435]) - (other[e25] * self[e431]) - (other[e35] * self[e412]),
            ]) + (self.group0().xxy() * other.group0().wzx()).extend_to_4(other[scalar] * self[e12345])
                - (self.group0().yzx() * other.group0().zxy()).extend_to_4(other[e15] * self[e423]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e23] * self[e12345]) + (other[e31] * self[e435]) + (other[scalar] * self[e415]) + (other[e25] * self[e412]),
                (other[e31] * self[e12345]) + (other[e12] * self[e415]) + (other[scalar] * self[e425]) + (other[e3215] * self[e431]),
                (other[e23] * self[e425]) + (other[e12] * self[e12345]) + (other[scalar] * self[e435]) + (other[e3215] * self[e412]),
                other[e35] * self[e412] * -1.0,
            ]) + (self.group0().xxy() * other.group1().wzx()).extend_to_4(other[scalar] * self[e321])
                - (other.group1().zxyx() * self.group0().yzx().extend_to_4(self[e423]))
                - (other.group0().zxy() * self.group1().yzx()).extend_to_4(other[e25] * self[e431]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[scalar] * self[e235]) + (other[e15] * self[e12345]) + (other[e25] * self[e435]) + (other[e3215] * self[e415]),
                (other[scalar] * self[e315]) + (other[e25] * self[e12345]) + (other[e35] * self[e415]) + (other[e3215] * self[e425]),
                (other[scalar] * self[e125]) + (other[e15] * self[e425]) + (other[e35] * self[e12345]) + (other[e3215] * self[e435]),
                -(other[e15] * self[e415]) - (other[e25] * self[e425]) - (other[e35] * self[e435]) - (other[e3215] * self[e321]),
            ]) + (self.group2().zxyw() * other.group0().yzx().extend_to_4(other[e3215]))
                - (other.group0().zxyx() * self.group2().yzxx())
                - (other.group1().xxy() * self.group1().wzx()).extend_to_4(other[e31] * self[e315])
                - (other.group1().zyz() * self.group1().yww()).extend_to_4(other[e12] * self[e125]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e23] * self[e321]) + (other[e25] * self[e412]) + (other[e3215] * self[e423]),
                (other[e31] * self[e321]) + (other[e35] * self[e423]) + (other[e3215] * self[e431]),
                (other[e12] * self[e321]) + (other[e15] * self[e431]) + (other[e3215] * self[e412]),
                -(other[e31] * self[e431]) - (other[e12] * self[e412]),
            ]) - (self.group0().yzx() * other.group1().zxy()).extend_to_4(other[e23] * self[e423]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       33       73        0
    //    simd3        1       22        0
    //    simd4       37       21        0
    // Totals...
    // yes simd       71      116        0
    //  no simd      184      223        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (self.group0().zxy() * other.group0().yzx()) - (self.group0().yzx() * other.group0().zxy()),
            // e23, e31, e12, e45
            Simd32x3::from(0.0).extend_to_4(other[e3] * self[e435] * -1.0)
                - (other.group0().xyzy() * self.group1().wwwy())
                - (self.group0() * other.group0().www()).extend_to_4(other[e1] * self[e415]),
            // e15, e25, e35, e1234
            Simd32x4::from([other[e3] * self[e315], other[e1] * self[e125], other[e2] * self[e235], other[e3] * self[e412] * -1.0])
                - (other.group0().yzx() * self.group2().zxy()).extend_to_4(other[e1] * self[e423])
                - (other.group0().www() * self.group1().truncate_to_3()).extend_to_4(other[e2] * self[e431]),
            // e4235, e4315, e4125, e3215
            (other.group0().xyxy() * self.group2().ww().extend_to_4(self[e425], self[e315]))
                + (other.group0().yzzz() * self.group1().zx().extend_to_4(self[e12345], self[e125]))
                + Simd32x3::from(0.0).extend_to_4(other[e5] * self[e321])
                + (self.group0() * other.group0().www()).extend_to_4(other[e1] * self[e235])
                - (other.group0().zxyw() * self.group1().yzx().extend_to_4(self[e12345])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       37       64        0
    //    simd3        0       13        0
    //    simd4       17       13        0
    // Totals...
    // yes simd       54       90        0
    //  no simd      105      155        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[e12345]) * self.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from(other[e12345]) * self.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, scalar
            Simd32x4::from(other[e12345]) * self.group2() * Simd32x4::from(-1.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       62      113        0
    //    simd3        0       20        0
    //    simd4       48       32        0
    // Totals...
    // yes simd      110      165        0
    //  no simd      254      301        0
    fn sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(other[e423] * self[e12345]) - (other[e431] * self[e435]) - (other[e425] * self[e412]),
                -(other[e431] * self[e12345]) - (other[e412] * self[e415]) - (other[e435] * self[e423]),
                -(other[e412] * self[e321]) - (other[e412] * self[e12345]) - (other[e415] * self[e431]),
                (other[e415] * self[e415])
                    + (other[e425] * self[e425])
                    + (other[e435] * self[e435])
                    + (other[e235] * self[e423])
                    + (other[e315] * self[e431])
                    + (other[e125] * self[e412]),
            ]) + (other.group0().zxy() * self.group1().yzx()).extend_to_4(other[e423] * self[e235])
                + (self.group0().xyx() * other.group1().wwy()).extend_to_4(other[e431] * self[e315])
                + (self.group0().yzz() * other.group1().zxw()).extend_to_4(other[e412] * self[e125])
                - (self.group1().wwyw() * other.group0().xyx().extend_to_4(other[e321])),
            // e23, e31, e12, e45
            Simd32x4::from([
                other[e425] * self[e435] * -1.0,
                other[e435] * self[e415] * -1.0,
                other[e435] * self[e12345] * -1.0,
                other[e321] * self[e12345],
            ]) + (self.group2().yzxx() * other.group0().zxy().extend_to_4(other[e423]))
                + (other.group2().zxy() * self.group0().yzx()).extend_to_4(other[e431] * self[e315])
                + (other.group1().zxy() * self.group1().yzx()).extend_to_4(other[e412] * self[e125])
                - (self.group2().ww().extend_to_4(self[e425], self[e412]) * other.group1().xyx().extend_to_4(other[e125]))
                - (other.group0().yzx() * self.group2().zxy()).extend_to_4(other[e235] * self[e423])
                - (other.group2().yzx() * self.group0().zxy()).extend_to_4(other[e315] * self[e431]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(other[e425] * self[e125]) - (other[e321] * self[e235]) - (other[e235] * self[e12345]) - (other[e315] * self[e435]),
                -(other[e435] * self[e235]) - (other[e321] * self[e315]) - (other[e315] * self[e12345]) - (other[e125] * self[e415]),
                -(other[e415] * self[e315]) - (other[e321] * self[e125]) - (other[e235] * self[e425]) - (other[e125] * self[e12345]),
                (other[e415] * self[e423]) + (other[e425] * self[e431]) + (other[e435] * self[e412]),
            ]) + (self.group1().ywwy() * other.group2().zyz().extend_to_4(other[e431]))
                + (self.group1().wzxx() * other.group2().xxy().extend_to_4(other[e423]))
                + (other.group1().zxy() * self.group2().yzx()).extend_to_4(other[e412] * self[e435]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(other[e431] * self[e125]) - (other[e125] * self[e431]),
                -(other[e412] * self[e235]) - (other[e235] * self[e412]),
                -(other[e423] * self[e315]) - (other[e315] * self[e423]),
                (other[e425] * self[e315]) + (other[e435] * self[e125]),
            ]) + (other.group1().wwwx() * self.group1().truncate_to_3().extend_to_4(self[e235]))
                + (self.group1().wwwz() * other.group1().truncate_to_3().extend_to_4(other[e125]))
                + (other.group0().zxy() * self.group2().yzx()).extend_to_4(other[e235] * self[e415])
                + (other.group2().yzx() * self.group0().zxy()).extend_to_4(other[e315] * self[e425]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       69      115        0
    //    simd3        0       18        0
    //    simd4       49       35        0
    // Totals...
    // yes simd      118      168        0
    //  no simd      265      309        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(other[e431] * self[e435]) - (other[e425] * self[e412]) - (other[e12345] * self[e423]),
                -(other[e412] * self[e415]) - (other[e435] * self[e423]) - (other[e12345] * self[e431]),
                -(other[e412] * self[e12345]) - (other[e415] * self[e431]) - (other[e12345] * self[e412]),
                (other[e415] * self[e415])
                    + (other[e425] * self[e425])
                    + (other[e435] * self[e435])
                    + (other[e235] * self[e423])
                    + (other[e315] * self[e431])
                    + (other[e125] * self[e412]),
            ]) + (other.group0().zxy() * self.group1().yzx()).extend_to_4(other[e423] * self[e235])
                + (self.group0().xyx() * other.group1().wwy()).extend_to_4(other[e431] * self[e315])
                + (self.group0().yzz() * other.group1().zxw()).extend_to_4(other[e412] * self[e125])
                - (self.group1().wwyw() * other.group0().xyx().extend_to_4(other[e321]))
                - (self.group2().ww().extend_to_4(self[e321], self[e12345]) * other.group0().extend_to_4(other[e12345])),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(other[e425] * self[e435]) - (other[e12345] * self[e415]),
                -(other[e435] * self[e415]) - (other[e12345] * self[e425]),
                -(other[e435] * self[e12345]) - (other[e12345] * self[e435]),
                (other[e321] * self[e12345]) + (other[e12345] * self[e321]),
            ]) + (self.group2().yzxx() * other.group0().zxy().extend_to_4(other[e423]))
                + (self.group0().yzx() * other.group2().zxy()).extend_to_4(other[e431] * self[e315])
                + (other.group1().zxy() * self.group1().yzx()).extend_to_4(other[e412] * self[e125])
                - (other.group2().yzxy() * self.group0().zxy().extend_to_4(self[e431]))
                - (self.group2().ww().extend_to_4(self[e425], other[e125]) * other.group1().xyx().extend_to_4(self[e412]))
                - (other.group0().yzx() * self.group2().zxy()).extend_to_4(other[e235] * self[e423]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(other[e425] * self[e125]) - (other[e321] * self[e235]) - (other[e235] * self[e12345]) - (other[e315] * self[e435]) - (other[e12345] * self[e235]),
                -(other[e435] * self[e235]) - (other[e321] * self[e315]) - (other[e315] * self[e12345]) - (other[e125] * self[e415]) - (other[e12345] * self[e315]),
                -(other[e415] * self[e315]) - (other[e321] * self[e125]) - (other[e235] * self[e425]) - (other[e125] * self[e12345]) - (other[e12345] * self[e125]),
                (other[e415] * self[e423]) + (other[e425] * self[e431]) + (other[e435] * self[e412]),
            ]) + (self.group1().ywwz() * other.group2().zyz().extend_to_4(other[e412]))
                + (self.group1().wzxy() * other.group2().xxy().extend_to_4(other[e431]))
                + (other.group1().zxy() * self.group2().yzx()).extend_to_4(other[e423] * self[e415]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(other[e431] * self[e125]) - (other[e125] * self[e431]),
                -(other[e412] * self[e235]) - (other[e235] * self[e412]),
                -(other[e423] * self[e315]) - (other[e315] * self[e423]),
                (other[e315] * self[e425]) + (other[e125] * self[e435]),
            ]) + (other.group1().xyzz() * self.group1().www().extend_to_4(self[e125]))
                + (self.group1().xyzx() * other.group1().www().extend_to_4(other[e235]))
                + (self.group2().yzxx() * other.group0().zxy().extend_to_4(other[e415]))
                + (self.group0().zxy() * other.group2().yzx()).extend_to_4(other[e425] * self[e315]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       74      129        0
    //    simd3        0       22        0
    //    simd4       45       26        0
    // Totals...
    // yes simd      119      177        0
    //  no simd      254      299        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e423] * other[e45]) + (self[e412] * other[e31]) + (self[e435] * other[e42]) + (self[e321] * other[e41]) + (self[e12345] * other[e41]),
                (self[e423] * other[e12]) + (self[e431] * other[e45]) + (self[e415] * other[e43]) + (self[e321] * other[e42]) + (self[e12345] * other[e42]),
                (self[e431] * other[e23]) + (self[e412] * other[e45]) + (self[e425] * other[e41]) + (self[e321] * other[e43]) + (self[e12345] * other[e43]),
                -(self[e412] * other[e35])
                    - (self[e415] * other[e23])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e321] * other[e45])
                    - (self[e235] * other[e41])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
            ]) - (self.group0().yzx() * other.group1().zxy()).extend_to_4(self[e423] * other[e15])
                - (other.group0().zxy() * self.group1().yzx()).extend_to_4(self[e431] * other[e25]),
            // e415, e425, e435, e321
            Simd32x4::from([self[e12345] * other[e23], self[e12345] * other[e31], self[e12345] * other[e12], self[e12345] * other[e45] * -1.0])
                + (self.group2().zxyy() * other.group0().yzx().extend_to_4(other[e42]))
                + (self.group0().zxy() * other.group2().yzx()).extend_to_4(self[e235] * other[e41])
                + (self.group1().zxy() * other.group1().yzx()).extend_to_4(self[e125] * other[e43])
                - (self.group0().yzx() * other.group2().zxy()).extend_to_4(self[e423] * other[e15])
                - (other.group0().zxy() * self.group2().yzx()).extend_to_4(self[e431] * other[e25])
                - (self.group1().yzx() * other.group1().zxy()).extend_to_4(self[e412] * other[e35]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e435] * other[e25]) + (self[e125] * other[e31]) + (self[e12345] * other[e15]),
                (self[e415] * other[e35]) + (self[e235] * other[e12]) + (self[e12345] * other[e25]),
                (self[e425] * other[e15]) + (self[e315] * other[e23]) + (self[e12345] * other[e35]),
                -(self[e315] * other[e31]) - (self[e125] * other[e12]),
            ]) - (self.group1().ywwy() * other.group2().zyz().extend_to_4(other[e25]))
                - (self.group1().wzxx() * other.group2().xxy().extend_to_4(other[e15]))
                - (self.group2().yzzx() * other.group1().zxwx())
                - (self.group2().xyx() * other.group1().wwy()).extend_to_4(self[e435] * other[e35]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e412] * other[e25]) + (self[e321] * other[e23]) + (self[e315] * other[e43]),
                (self[e423] * other[e35]) + (self[e321] * other[e31]) + (self[e125] * other[e41]),
                (self[e431] * other[e15]) + (self[e321] * other[e12]) + (self[e235] * other[e42]),
                -(self[e415] * other[e41]) - (self[e425] * other[e42]) - (self[e435] * other[e43]),
            ]) - (other.group1().wwwz() * self.group1().truncate_to_3().extend_to_4(self[e412]))
                - (self.group0().yzx() * other.group2().zxy()).extend_to_4(self[e423] * other[e23])
                - (other.group0().yzx() * self.group2().zxy()).extend_to_4(self[e431] * other[e31]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       73      124        0
    //    simd3        0       23        0
    //    simd4       59       40        0
    // Totals...
    // yes simd      132      187        0
    //  no simd      309      353        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e423] * other[e45])
                    + (self[e412] * other[e31])
                    + (self[e412] * other[e4315])
                    + (self[e415] * other[e1234])
                    + (self[e435] * other[e42])
                    + (self[e321] * other[e41])
                    + (self[e12345] * other[e41]),
                (self[e423] * other[e12])
                    + (self[e423] * other[e4125])
                    + (self[e431] * other[e45])
                    + (self[e415] * other[e43])
                    + (self[e425] * other[e1234])
                    + (self[e321] * other[e42])
                    + (self[e12345] * other[e42]),
                (self[e431] * other[e23])
                    + (self[e431] * other[e4235])
                    + (self[e412] * other[e45])
                    + (self[e425] * other[e41])
                    + (self[e435] * other[e1234])
                    + (self[e321] * other[e43])
                    + (self[e12345] * other[e43]),
                -(self[e415] * other[e23])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e321] * other[e45])
                    - (self[e235] * other[e41])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
            ]) - (self.group0().yzx() * other.group1().zxy()).extend_to_4(self[e423] * other[e15])
                - (self.group0().yzx() * other.group3().zxy()).extend_to_4(self[e431] * other[e25])
                - (other.group0().zxy() * self.group1().yzx()).extend_to_4(self[e412] * other[e35]),
            // e415, e425, e435, e321
            (Simd32x4::from([other[e25], other[e3215], other[e3215], self[e315]]) * self.group0().zyz().extend_to_4(other[e42]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], self[e235]]) * self.group0().xxy().extend_to_4(other[e41]))
                + (self.group1().zxyx() * other.group1().yzx().extend_to_4(other[e4235]))
                + (self.group2().zxyz() * other.group0().yzx().extend_to_4(other[e43]))
                + (self.group2().www() * other.group1().truncate_to_3()).extend_to_4(self[e435] * other[e4125])
                + (other.group2().www() * self.group2().truncate_to_3()).extend_to_4(self[e425] * other[e4315])
                - (other.group2().zxyx() * self.group0().yzx().extend_to_4(self[e423]))
                - (other.group0().zxy() * self.group2().yzx()).extend_to_4(self[e431] * other[e25])
                - (self.group1().yzx() * other.group1().zxy()).extend_to_4(self[e412] * other[e35])
                - (self.group1().www() * other.group3().truncate_to_3()).extend_to_4(self[e12345] * other[e45]),
            // e235, e315, e125, e5
            Simd32x4::from([
                self[e12345] * other[e15],
                self[e12345] * other[e25],
                self[e12345] * other[e35],
                -(self[e315] * other[e31]) - (self[e125] * other[e12]),
            ]) + (Simd32x4::from([other[e31], other[e4235], other[e23], other[e3215]]) * self.group2().zzyw())
                + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e4315]]) * self.group1().zyz().extend_to_4(self[e315]))
                + (Simd32x4::from([other[e4125], other[e12], other[e4315], other[e4125]]) * self.group2().yxxz())
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e4235]]) * self.group1().xxy().extend_to_4(self[e235]))
                - (Simd32x4::from([other[e45], other[e4125], other[e31], other[e35]]) * self.group2().xxx().extend_to_4(self[e435]))
                - (Simd32x4::from([other[e4315], other[e23], other[e45], other[e23]]) * self.group2().zzzx())
                - (self.group1().yzxx() * other.group2().zxyx())
                - (self.group1().wwwy() * other.group2().xyzy())
                - (other.group1().zw().extend_to_4(other[e4235], other[e3215]) * self.group2().yyy().extend_to_4(self[e321])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e425] * other[e4125]) + (self[e321] * other[e23]) + (self[e315] * other[e43]),
                (self[e435] * other[e4235]) + (self[e321] * other[e31]) + (self[e125] * other[e41]),
                (self[e415] * other[e4315]) + (self[e321] * other[e12]) + (self[e235] * other[e42]),
                -(self[e415] * other[e41]) - (self[e425] * other[e42]) - (self[e435] * other[e43]),
            ]) + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e1234]]) * self.group0().zyz().extend_to_4(self[e12345]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e1234]]) * self.group0().xxy().extend_to_4(self[e321]))
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e31]]) * self.group1().xxy().extend_to_4(self[e431]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e4315]]) * self.group1().zyz().extend_to_4(self[e431]))
                - (other.group3().xyzz() * self.group2().www().extend_to_4(self[e412]))
                - (self.group0().yzx() * other.group2().zxy()).extend_to_4(self[e423] * other[e23])
                - (other.group0().yzx() * self.group2().zxy()).extend_to_4(self[e423] * other[e4235])
                - (other.group2().www() * self.group2().truncate_to_3()).extend_to_4(self[e412] * other[e12]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       37       61        0
    //    simd3        2       14        0
    //    simd4       31       28        0
    // Totals...
    // yes simd       70      103        0
    //  no simd      167      215        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(other[e12345]) * self.group0().extend_to_4(self[e12345]) * Simd32x4::from(-1.0),
            // e23, e31, e12, e45
            (-(Simd32x3::from(other[e5]) * self.group0()) - (Simd32x3::from(other[e12345]) * self.group1().truncate_to_3())).extend_to_4(self[e321] * other[e12345]),
            // e15, e25, e35, e1234
            (-(Simd32x3::from(other[e5]) * self.group1().truncate_to_3()) - (Simd32x3::from(other[e12345]) * self.group2().truncate_to_3())).extend_to_4(0.0),
            // e4235, e4315, e4125, e3215
            other.group0().xx().extend_to_4(other[e5], (self[e321] * other[e5]) - (self[e12345] * other[e5])) * self.group0().extend_to_4(1.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       84        0
    //    simd3        0       15        0
    //    simd4       36       26        0
    // Totals...
    // yes simd       84      125        0
    //  no simd      192      233        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([other[e45], other[e45], other[e45], 1.0])
                * self
                    .group0()
                    .extend_to_4(-(self[e423] * other[e15]) - (self[e431] * other[e25]) - (self[e412] * other[e35]) - (self[e321] * other[e45])),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e412] * other[e25],
                self[e423] * other[e35],
                self[e431] * other[e15],
                -(self[e431] * other[e25]) - (self[e412] * other[e35]) - (self[e12345] * other[e45]),
            ]) - (other.group0().zxyx() * self.group0().yzx().extend_to_4(self[e423])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e435] * other[e25]) + (self[e12345] * other[e15]),
                (self[e415] * other[e35]) + (self[e12345] * other[e25]),
                (self[e425] * other[e15]) + (self[e12345] * other[e35]),
                0.0,
            ]) - (self.group1().yzxx() * other.group0().zxyx())
                - (self.group1().wwwy() * other.group0().xyzy())
                - (other.group0().wwwz() * self.group2().truncate_to_3().extend_to_4(self[e435])),
            // e1, e2, e3, e4
            (self.group0().zxy() * other.group0().yzx()).extend_to_4(0.0)
                - (Simd32x3::from(other[e45]) * self.group1().truncate_to_3()).extend_to_4(0.0)
                - (self.group0().yzx() * other.group0().zxy()).extend_to_4(0.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       95        0
    //    simd3        0       15        0
    //    simd4       45       34        0
    // Totals...
    // yes simd      101      144        0
    //  no simd      236      276        0
    fn sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e423] * other[e45]) + (self[e412] * other[e4315]),
                (self[e423] * other[e4125]) + (self[e431] * other[e45]),
                (self[e431] * other[e4235]) + (self[e412] * other[e45]),
                -(self[e431] * other[e25]) - (self[e412] * other[e35]) - (self[e321] * other[e45]),
            ]) - (self.group0().yzx() * other.group1().zxy()).extend_to_4(self[e423] * other[e15]),
            // e415, e425, e435, e321
            (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e4315]]) * self.group0().zyz().extend_to_4(self[e425]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e4235]]) * self.group0().xxy().extend_to_4(self[e415]))
                + Simd32x3::from(0.0).extend_to_4((self[e435] * other[e4125]) - (self[e412] * other[e35]) - (self[e12345] * other[e45]))
                - (other.group0().zxyx() * self.group0().yzx().extend_to_4(self[e423]))
                - (self.group1().www() * other.group1().truncate_to_3()).extend_to_4(self[e431] * other[e25]),
            // e235, e315, e125, e5
            (Simd32x4::from(self[e12345]) * other.group0().truncate_to_3().extend_to_4(other[e3215]))
                + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e4315]]) * self.group1().zyz().extend_to_4(self[e315]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e4235]]) * self.group1().xxy().extend_to_4(self[e235]))
                + (self.group2().yzxz() * other.group1().zxyz())
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e35]]) * self.group2().xxy().extend_to_4(self[e435]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e3215]]) * self.group2().zyz().extend_to_4(self[e321]))
                - (self.group1().yzxx() * other.group0().zxyx())
                - (self.group1().wwwy() * other.group0().xyzy()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e423] * other[e3215]) + (self[e412] * other[e25]) + (self[e425] * other[e4125]) - (self[e12345] * other[e4235]),
                (self[e423] * other[e35]) + (self[e431] * other[e3215]) + (self[e435] * other[e4235]) - (self[e12345] * other[e4315]),
                (self[e431] * other[e15]) + (self[e412] * other[e3215]) + (self[e415] * other[e4315]) - (self[e12345] * other[e4125]),
                0.0,
            ]) - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e4315]]) * self.group1().xxy().extend_to_4(self[e431]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e4125]]) * self.group1().zyz().extend_to_4(self[e412]))
                - (self.group0().yzx() * other.group0().zxy()).extend_to_4(self[e423] * other[e4235]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       52      101        0
    //    simd3        0       17        0
    //    simd4       40       27        0
    // Totals...
    // yes simd       92      145        0
    //  no simd      212      260        0
    fn sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e412] * other[e425] * -1.0,
                self[e423] * other[e435] * -1.0,
                self[e431] * other[e415] * -1.0,
                (self[e431] * other[e315]) + (self[e412] * other[e125]) + (self[e415] * other[e415]) + (self[e425] * other[e425]) + (self[e435] * other[e435]),
            ]) + (self.group0().yzx() * other.group0().zxy()).extend_to_4(self[e423] * other[e235]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e431] * other[e125]) + (self[e425] * other[e435]),
                (self[e412] * other[e235]) + (self[e435] * other[e415]),
                (self[e423] * other[e315]) + (self[e415] * other[e425]),
                0.0,
            ]) - (self.group1().zx().extend_to_4(self[e12345], other[e125]) * other.group0().yzz().extend_to_4(self[e412]))
                - (self.group2().ww().extend_to_4(self[e425], other[e315]) * other.group0().xyx().extend_to_4(self[e431]))
                - (self.group0().zxy() * other.group1().yzx()).extend_to_4(self[e423] * other[e235]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(self[e435] * other[e315]) - (self[e125] * other[e425]) - (self[e12345] * other[e235]),
                -(self[e415] * other[e125]) - (self[e235] * other[e435]) - (self[e12345] * other[e315]),
                -(self[e425] * other[e235]) - (self[e315] * other[e415]) - (self[e12345] * other[e125]),
                0.0,
            ]) + (other.group0().zxy() * self.group2().yzx()).extend_to_4(self[e423] * other[e415])
                + (other.group1().xxy() * self.group1().wzx()).extend_to_4(self[e431] * other[e425])
                + (other.group1().zyz() * self.group1().yww()).extend_to_4(self[e412] * other[e435]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e431] * other[e125] * -1.0,
                self[e412] * other[e235] * -1.0,
                self[e423] * other[e315] * -1.0,
                (self[e415] * other[e235]) + (self[e425] * other[e315]) + (self[e435] * other[e125]) + (self[e125] * other[e435]),
            ]) + (other.group0() * self.group1().www()).extend_to_4(self[e315] * other[e425])
                + (self.group0().zxy() * other.group1().yzx()).extend_to_4(self[e235] * other[e415]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       61      102        0
    //    simd3        0       15        0
    //    simd4       44       33        0
    // Totals...
    // yes simd      105      150        0
    //  no simd      237      279        0
    fn sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e412] * other[e425] * -1.0,
                self[e431] * other[e12345] * -1.0,
                self[e412] * other[e12345] * -1.0,
                (self[e431] * other[e315]) + (self[e412] * other[e125]) + (self[e415] * other[e415]) + (self[e425] * other[e425]) + (self[e435] * other[e435]),
            ]) + (self.group0().yzx() * other.group0().zxy()).extend_to_4(self[e423] * other[e235])
                - (other.group0().wzxw() * self.group0().xxy().extend_to_4(self[e12345])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e425] * other[e435]) - (self[e435] * other[e425]) - (self[e12345] * other[e415]),
                (self[e435] * other[e415]) - (self[e425] * other[e12345]) - (self[e12345] * other[e425]),
                (self[e415] * other[e425]) - (self[e435] * other[e12345]) - (self[e12345] * other[e435]),
                0.0,
            ]) + (self.group0().yzx() * other.group1().zxy()).extend_to_4(self[e321] * other[e12345])
                - (other.group1().ywwy() * self.group0().zyz().extend_to_4(self[e431]))
                - (other.group1().wzxx() * self.group0().xxy().extend_to_4(self[e423]))
                - (self.group1().xxy() * other.group0().wzx()).extend_to_4(self[e412] * other[e125]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(self[e415] * other[e5]) - (self[e435] * other[e315]) - (self[e235] * other[e12345]) - (self[e125] * other[e425]) - (self[e12345] * other[e235]),
                -(self[e415] * other[e125]) - (self[e425] * other[e5]) - (self[e235] * other[e435]) - (self[e315] * other[e12345]) - (self[e12345] * other[e315]),
                -(self[e425] * other[e235]) - (self[e435] * other[e5]) - (self[e315] * other[e415]) - (self[e125] * other[e12345]) - (self[e12345] * other[e125]),
                0.0,
            ]) + (other.group0().zxyz() * self.group2().yzx().extend_to_4(self[e412]))
                + (self.group1().yzx() * other.group1().zxy()).extend_to_4(self[e423] * other[e415])
                + (self.group1().www() * other.group1().truncate_to_3()).extend_to_4(self[e431] * other[e425]),
            // e4235, e4315, e4125, e3215
            (self.group1().wwwz() * other.group0().truncate_to_3().extend_to_4(other[e125]))
                + (other.group1().ywwy() * self.group0().zyz().extend_to_4(self[e425]))
                + (other.group1().wzxx() * self.group0().xxy().extend_to_4(self[e415]))
                + Simd32x3::from(0.0).extend_to_4((self[e321] * other[e5]) + (self[e235] * other[e415]) + (self[e315] * other[e425]) + (self[e125] * other[e435]))
                - (other.group1().zxyw() * self.group0().yzx().extend_to_4(self[e12345])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for CircleRotor {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       84      148        0
    //    simd2        6        6        0
    //    simd3       80      113        0
    //    simd4       76       56        0
    // Totals...
    // yes simd      246      323        0
    //  no simd      640      723        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e423] * other[e235])
                    + (self[e431] * other[e315])
                    + (self[e412] * other[e125])
                    + (self[e415] * other[e415])
                    + (self[e425] * other[e425])
                    + (self[e435] * other[e435])
                    + (self[e315] * other[e431])
                    + (self[e125] * other[e412]),
                -(self[e423] * other[e15])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e321] * other[e45])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
            ]) + (Simd32x2::from([other[e423], other[scalar]]) * self.group2().xw())
                - (Simd32x2::from([other[e12345], other[e41]]) * self.group2().wx())
                - (Simd32x2::from([other[e321], other[e23]]) * self.group1().wx()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e425] * other[e4125]) + (self[e321] * other[e23]) + (self[e315] * other[e43]),
                (self[e435] * other[e4235]) + (self[e321] * other[e31]) + (self[e125] * other[e41]),
                (self[e415] * other[e4315]) + (self[e321] * other[e12]) + (self[e235] * other[e42]),
                -(self[e415] * other[e41]) - (self[e425] * other[e42]) - (self[e435] * other[e43]),
            ]) + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e1234]]) * self.group0().zyz().extend_to_4(self[e12345]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e1234]]) * self.group0().xxy().extend_to_4(self[e321]))
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e31]]) * self.group1().xxy().extend_to_4(self[e431]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e4315]]) * self.group1().zyz().extend_to_4(self[e431]))
                - (Simd32x4::from([other[e1234], other[e1234], other[e1234], other[e12]]) * self.group2().truncate_to_3().extend_to_4(self[e412]))
                - (other.group9().xyzz() * self.group2().www().extend_to_4(self[e412]))
                - (self.group0().yzx() * other.group3().zxy()).extend_to_4(self[e423] * other[e23])
                - (other.group4().yzx() * self.group2().zxy()).extend_to_4(self[e423] * other[e4235]),
            // e5
            (self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125]) + (self[e12345] * other[e3215])
                - (self[e415] * other[e15])
                - (self[e425] * other[e25])
                - (self[e435] * other[e35])
                - (self[e321] * other[e3215])
                - (self[e235] * other[e23])
                - (self[e315] * other[e31])
                - (self[e125] * other[e12]),
            // e15, e25, e35, e45
            Simd32x4::from([
                self[e125] * other[e425] * -1.0,
                self[e315] * other[e321] * -1.0,
                self[e125] * other[e321] * -1.0,
                self[e12345] * other[e321],
            ]) + (self.group1().wzxw() * other.group8().xxy().extend_to_4(other[e12345]))
                + (other.group8().zyz() * self.group1().yww()).extend_to_4(self[e235] * other[e423])
                + (self.group2().yzx() * other.group1().zxy()).extend_to_4(self[e315] * other[e431])
                + (self.group2().yzx() * other.group6().zxy()).extend_to_4(self[e125] * other[e412])
                - (Simd32x4::from([other[e2], other[e435], other[e415], other[e3]]) * self.group2().zxy().extend_to_4(self[e435]))
                - (Simd32x4::from([other[e5], other[e5], other[e5], other[e1]]) * self.group1().xyzx())
                - (Simd32x4::from([other[e321], other[e3], other[e1], other[e2]]) * self.group2().xxy().extend_to_4(self[e425]))
                - (other.group0().yy().extend_to_4(other[e12345], self[e423]) * self.group2().truncate_to_3().extend_to_4(other[e235]))
                - (self.group1().zx().extend_to_4(self[e12345], other[e125]) * other.group8().yzz().extend_to_4(self[e412]))
                - (self.group2().ww().extend_to_4(self[e425], other[e315]) * other.group8().xyx().extend_to_4(self[e431])),
            // e41, e42, e43
            (Simd32x3::from(self[e423]) * Simd32x3::from([other[e321], other[e3], other[e425]]))
                + (Simd32x3::from(self[e431]) * Simd32x3::from([other[e435], other[e321], other[e1]]))
                + (Simd32x3::from(self[e412]) * Simd32x3::from([other[e2], other[e415], other[e321]]))
                + (other.group7().zxy() * self.group1().yzx())
                - (Simd32x3::from(other[e12345]) * self.group0())
                - (Simd32x3::from(other[e4]) * self.group1().truncate_to_3())
                - (Simd32x3::from([self[e435], self[e415], self[e12345]]) * other.group7().yzz())
                - (Simd32x3::from([self[e12345], self[e12345], self[e321]]) * other.group7())
                - (Simd32x3::from([other[e3], other[e435], other[e2]]) * self.group0().yxx())
                - (Simd32x3::from([other[e425], other[e1], other[e415]]) * self.group0().zzy())
                - (other.group7().xyx() * self.group1().wwy()),
            // e23, e31, e12
            (self.group0().yzx() * other.group8().zxy()) + (other.group7().zxy() * self.group2().yzx()) + (self.group1().yzx() * other.group6().zxy())
                - (Simd32x3::from(self[e321]) * other.group1().truncate_to_3())
                - (Simd32x3::from(self[e12345]) * other.group6().truncate_to_3())
                - (Simd32x3::from(other[e12345]) * self.group1().truncate_to_3())
                - (Simd32x3::from(other[e4]) * self.group2().truncate_to_3())
                - (Simd32x3::from([other[e5], other[e125], other[e235]]) * self.group0().xxy())
                - (Simd32x3::from([other[e315], other[e5], other[e5]]) * self.group0().zyz())
                - (other.group7().yzx() * self.group2().zxy())
                - (self.group1().zxy() * other.group6().yzx()),
            // e415, e425, e435, e321
            (Simd32x4::from(other[scalar]) * self.group1())
                + (Simd32x4::from([other[e25], other[e3215], other[e3215], self[e315]]) * self.group0().zyz().extend_to_4(other[e42]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], self[e235]]) * self.group0().xxy().extend_to_4(other[e41]))
                + (Simd32x4::from([other[e1234], other[e1234], other[e1234], other[e4125]]) * self.group2().truncate_to_3().extend_to_4(self[e435]))
                + (self.group2().zxyz() * other.group4().yzx().extend_to_4(other[e43]))
                + (self.group1().zx().extend_to_4(self[e12345], other[e4315]) * other.group5().yzz().extend_to_4(self[e425]))
                + (self.group2().ww().extend_to_4(self[e425], other[e4235]) * other.group5().xyx().extend_to_4(self[e415]))
                - (other.group3().zxyx() * self.group0().yzx().extend_to_4(self[e423]))
                - (other.group4().zxy() * self.group2().yzx()).extend_to_4(self[e431] * other[e25])
                - (other.group5().zxy() * self.group1().yzx()).extend_to_4(self[e412] * other[e35])
                - (self.group1().www() * other.group9().truncate_to_3()).extend_to_4(self[e12345] * other[e45]),
            // e423, e431, e412
            (Simd32x3::from(other[scalar]) * self.group0())
                + (Simd32x3::from(other[e1234]) * self.group1().truncate_to_3())
                + (Simd32x3::from([self[e435], self[e415], self[e12345]]) * other.group4().yzz())
                + (Simd32x3::from([self[e12345], self[e12345], self[e321]]) * other.group4())
                + (Simd32x3::from([other[e45], other[e12], other[e23]]) * self.group0().xxy())
                + (Simd32x3::from([other[e31], other[e4125], other[e4235]]) * self.group0().zxy())
                + (Simd32x3::from([other[e4315], other[e45], other[e45]]) * self.group0().zyz())
                + (other.group4().xyx() * self.group1().wwy())
                - (self.group0().yzx() * other.group5().zxy())
                - (self.group0().yzx() * other.group9().zxy())
                - (other.group4().zxy() * self.group1().yzx()),
            // e235, e315, e125
            (Simd32x3::from(self[e12345]) * other.group3().truncate_to_3())
                + (Simd32x3::from(other[scalar]) * self.group2().truncate_to_3())
                + (Simd32x3::from([other[e25], other[e3215], other[e3215]]) * self.group1().zyz())
                + (Simd32x3::from([other[e3215], other[e35], other[e15]]) * self.group1().xxy())
                + (other.group5().yzx() * self.group2().zxy())
                + (self.group2().yzx() * other.group9().zxy())
                - (Simd32x3::from(self[e321]) * other.group3().truncate_to_3())
                - (Simd32x3::from([other[e45], other[e4125], other[e4235]]) * self.group2().xxy())
                - (Simd32x3::from([other[e4315], other[e45], other[e45]]) * self.group2().zyz())
                - (other.group5().zxy() * self.group2().yzx())
                - (self.group1().yzx() * other.group3().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(self[e425] * other[e3]) - (self[e235] * other[e4]) - (self[e125] * other[e431]),
                -(self[e435] * other[e1]) - (self[e235] * other[e412]) - (self[e315] * other[e4]),
                -(self[e415] * other[e2]) - (self[e315] * other[e423]) - (self[e125] * other[e4]),
                (self[e315] * other[e425]) + (self[e125] * other[e3]) + (self[e125] * other[e435]),
            ]) + (Simd32x4::from([other[e2], other[e321], other[e321], other[e1]]) * self.group1().zyz().extend_to_4(self[e235]))
                + (Simd32x4::from([other[e5], other[e125], other[e235], self[e415]]) * self.group0().xxy().extend_to_4(other[e235]))
                + (Simd32x4::from([other[e321], other[e3], other[e1], other[e5]]) * self.group1().xxyw())
                + (Simd32x4::from([other[e315], other[e5], other[e5], self[e425]]) * self.group0().zyz().extend_to_4(other[e315]))
                + (self.group2().wwwy() * other.group1().xyzy())
                + (other.group6().xyzx() * self.group1().www().extend_to_4(self[e235]))
                + (other.group7().zxy() * self.group2().yzx()).extend_to_4(self[e435] * other[e125])
                - (self.group0().yzx() * other.group8().zxy()).extend_to_4(self[e12345] * other[e5]),
            // e1234
            (self[e423] * other[e415])
                + (self[e431] * other[e425])
                + (self[e412] * other[e435])
                + (self[e415] * other[e423])
                + (self[e425] * other[e431])
                + (self[e435] * other[e412])
                - (self[e423] * other[e1])
                - (self[e431] * other[e2])
                - (self[e412] * other[e3])
                - (self[e321] * other[e4])
                - (self[e12345] * other[e4]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       39       88        0
    //    simd3        1       14        0
    //    simd4       34       25        0
    // Totals...
    // yes simd       74      127        0
    //  no simd      178      230        0
    fn sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (self.group0().zxy() * other.group0().yzx()) - (self.group0().yzx() * other.group0().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e321] * other[e4235] * -1.0,
                self[e321] * other[e4315] * -1.0,
                self[e321] * other[e4125] * -1.0,
                (self[e425] * other[e4315]) + (self[e435] * other[e4125]),
            ]) + (other.group0().wwwx() * self.group0().extend_to_4(self[e415])),
            // e235, e315, e125, e4
            Simd32x4::from([
                (self[e415] * other[e3215]) + (self[e315] * other[e4125]),
                (self[e425] * other[e3215]) + (self[e125] * other[e4235]),
                (self[e435] * other[e3215]) + (self[e235] * other[e4315]),
                -(self[e431] * other[e4315]) - (self[e412] * other[e4125]),
            ]) - (other.group0().yzxx() * self.group2().zxy().extend_to_4(self[e423])),
            // e1, e2, e3, e5
            Simd32x4::from([
                self[e12345] * other[e4235] * -1.0,
                self[e12345] * other[e4315] * -1.0,
                self[e12345] * other[e4125] * -1.0,
                (self[e125] * other[e4125]) + (self[e12345] * other[e3215]),
            ]) + (other.group0().zxyy() * self.group1().yzx().extend_to_4(self[e315]))
                + (other.group0().wwwx() * self.group0().extend_to_4(self[e235]))
                - (self.group1().zxyw() * other.group0().yzxw()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       35       75        0
    //    simd3        2       20        0
    //    simd4       37       25        0
    // Totals...
    // yes simd       74      120        0
    //  no simd      189      235        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (self.group0().zxy() * other.group0().yzx()) - (Simd32x3::from(other[e4]) * self.group1().truncate_to_3()) - (self.group0().yzx() * other.group0().zxy()),
            // e23, e31, e12, e45
            -(Simd32x4::from([other[e5], other[e5], other[e5], other[e1]]) * self.group0().extend_to_4(self[e415]))
                - (self.group1().wwwy() * other.group0().xyzy())
                - (other.group0().wwwz() * self.group2().truncate_to_3().extend_to_4(self[e435])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                self[e315] * other[e3],
                self[e125] * other[e1],
                self[e235] * other[e2],
                -(self[e412] * other[e3]) - (self[e321] * other[e4]) - (self[e12345] * other[e4]),
            ]) - (Simd32x4::from([other[e5], other[e5], other[e5], other[e1]]) * self.group1().truncate_to_3().extend_to_4(self[e423]))
                - (other.group0().yzxy() * self.group2().zxy().extend_to_4(self[e431])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e235] * other[e4] * -1.0, self[e315] * other[e4] * -1.0, self[e125] * other[e4] * -1.0, self[e125] * other[e3]])
                + (Simd32x4::from(other[e5]) * self.group0().extend_to_4(self[e321]))
                + (self.group2().wwwy() * other.group0().xyzy())
                + (other.group0().yzxx() * self.group1().zxy().extend_to_4(self[e235]))
                - (self.group1().yzx() * other.group0().zxy()).extend_to_4(self[e12345] * other[e5]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       33       57        0
    //    simd3        0       10        0
    //    simd4       18       14        0
    // Totals...
    // yes simd       51       81        0
    //  no simd      105      143        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[scalar]) * self.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other[scalar]) * self.group1(),
            // e235, e315, e125, e12345
            Simd32x4::from(other[scalar]) * self.group2(),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       38       81        0
    //    simd3        2       15        0
    //    simd4       37       28        0
    // Totals...
    // yes simd       77      124        0
    //  no simd      192      238        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other[e1234]) * self.group1().truncate_to_3()) + (self.group0().zxy() * other.group0().yzx()) - (self.group0().yzx() * other.group0().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e321] * other[e4235] * -1.0,
                self[e321] * other[e4315] * -1.0,
                self[e321] * other[e4125] * -1.0,
                self[e435] * other[e4125],
            ]) + (Simd32x4::from([other[e1234], other[e1234], other[e1234], other[e4315]]) * self.group2().truncate_to_3().extend_to_4(self[e425]))
                + (other.group0().wwwx() * self.group0().extend_to_4(self[e415])),
            // e235, e315, e125, e4
            (self.group1() * other.group0().www().extend_to_4(other[e1234]))
                + (self.group2().yzxw() * other.group0().zxy().extend_to_4(other[e1234]))
                + Simd32x3::from(0.0).extend_to_4(-(self[e431] * other[e4315]) - (self[e412] * other[e4125]))
                - (other.group0().yzxx() * self.group2().zxy().extend_to_4(self[e423])),
            // e1, e2, e3, e5
            Simd32x4::from([
                -(self[e235] * other[e1234]) - (self[e12345] * other[e4235]),
                -(self[e315] * other[e1234]) - (self[e12345] * other[e4315]),
                -(self[e125] * other[e1234]) - (self[e12345] * other[e4125]),
                (self[e125] * other[e4125]) + (self[e12345] * other[e3215]),
            ]) + (other.group0().zxyy() * self.group1().yzx().extend_to_4(self[e315]))
                + (other.group0().wwwx() * self.group0().extend_to_4(self[e235]))
                - (self.group1().zxyw() * other.group0().yzxw()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       68      113        0
    //    simd3        0       17        0
    //    simd4       63       50        0
    // Totals...
    // yes simd      131      180        0
    //  no simd      320      364        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(self[e412] * other[e425]) - (self[e415] * other[e4]) - (self[e435] * other[e431]) - (self[e321] * other[e423]) - (self[e12345] * other[e423]),
                -(self[e412] * other[e1]) - (self[e415] * other[e412]) - (self[e425] * other[e4]) - (self[e321] * other[e431]) - (self[e12345] * other[e431]),
                -(self[e412] * other[e12345]) - (self[e425] * other[e423]) - (self[e435] * other[e4]) - (self[e321] * other[e412]) - (self[e12345] * other[e412]),
                (self[e425] * other[e425]) + (self[e435] * other[e435]) + (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412]),
            ]) + (Simd32x4::from(self[e423]) * Simd32x4::from([other[e321], other[e3], other[e425], other[e235]]))
                + (Simd32x4::from(self[e431]) * other.group1().zw().extend_to_4(other[e1], other[e315]))
                + (Simd32x4::from(self[e412]) * Simd32x4::from([other[e2], other[e415], other[e321], other[e125]]))
                + (self.group1().yzxx() * other.group0().zxy().extend_to_4(other[e415]))
                - (Simd32x4::from([other[e12345], other[e435], other[e2], other[e321]]) * self.group0().xxx().extend_to_4(self[e321]))
                - (Simd32x4::from([other[e3], other[e12345], other[e415], other[e12345]]) * self.group0().yyy().extend_to_4(self[e12345])),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(self[e125] * other[e431]) - (self[e12345] * other[e415]),
                -(self[e315] * other[e4]) - (self[e12345] * other[e425]),
                -(self[e125] * other[e4]) - (self[e12345] * other[e435]),
                (self[e125] * other[e412]) + (self[e12345] * other[e321]),
            ]) + (self.group2().yzxy() * other.group0().zxyy())
                + (self.group0().yzx() * other.group2().zxy()).extend_to_4(self[e321] * other[e12345])
                + (self.group1().yzx() * other.group1().zxy()).extend_to_4(self[e235] * other[e423])
                - (Simd32x4::from([other[e12345], other[e435], other[e415], other[e125]]) * self.group1().xxy().extend_to_4(self[e412]))
                - (Simd32x4::from([other[e425], other[e12345], other[e12345], other[e1]]) * self.group1().zyzx())
                - (Simd32x4::from([other[e4], other[e412], other[e423], other[e3]]) * self.group2().xxy().extend_to_4(self[e435]))
                - (self.group1().wwwy() * other.group3().xyzy())
                - (other.group2().ywwy() * self.group0().zyz().extend_to_4(self[e431]))
                - (other.group2().wzxx() * self.group0().xxy().extend_to_4(self[e423])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(self[e125] * other[e2]) - (self[e12345] * other[e235]),
                -(self[e315] * other[e321]) - (self[e12345] * other[e315]),
                -(self[e125] * other[e321]) - (self[e12345] * other[e125]),
                (self[e425] * other[e431]) + (self[e435] * other[e412]),
            ]) + (other.group1().zxyz() * self.group2().yzx().extend_to_4(self[e412]))
                + (self.group1().yzx() * other.group2().zxy()).extend_to_4(self[e423] * other[e415])
                + (self.group1().www() * other.group2().truncate_to_3()).extend_to_4(self[e431] * other[e425])
                + (self.group2().yzx() * other.group3().zxy()).extend_to_4(self[e415] * other[e423])
                - (Simd32x4::from([other[e12345], other[e435], other[e415], other[e3]]) * self.group2().xxy().extend_to_4(self[e412]))
                - (Simd32x4::from([other[e425], other[e12345], other[e12345], other[e4]]) * self.group2().zyzw())
                - (Simd32x4::from([other[e321], other[e3], other[e1], other[e4]]) * self.group2().xxy().extend_to_4(self[e321]))
                - (self.group1().xxy() * other.group2().wzx()).extend_to_4(self[e423] * other[e1])
                - (self.group1().zyz() * other.group2().yww()).extend_to_4(self[e431] * other[e2]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(self[e425] * other[e3]) - (self[e235] * other[e4]) - (self[e125] * other[e431]),
                -(self[e435] * other[e1]) - (self[e235] * other[e412]) - (self[e315] * other[e4]),
                -(self[e415] * other[e2]) - (self[e315] * other[e423]) - (self[e125] * other[e4]),
                (self[e315] * other[e2]) + (self[e125] * other[e435]) + (self[e125] * other[e3]),
            ]) + (Simd32x4::from([other[e321], other[e3], other[e1], other[e125]]) * self.group1().xxyz())
                + (Simd32x4::from([other[e2], other[e321], other[e321], other[e5]]) * self.group1().zyzw())
                + (self.group2().yzxx() * other.group0().zxy().extend_to_4(other[e1]))
                + (self.group2().wwwy() * other.group3().truncate_to_3().extend_to_4(other[e425]))
                + (other.group1().xyzx() * self.group1().www().extend_to_4(self[e235]))
                + (other.group2().ywwy() * self.group0().zyz().extend_to_4(self[e425]))
                + (other.group2().wzxx() * self.group0().xxy().extend_to_4(self[e415]))
                - (other.group2().zxyw() * self.group0().yzx().extend_to_4(self[e12345])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       76      122        0
    //    simd3        0       18        0
    //    simd4       61       47        0
    // Totals...
    // yes simd      137      187        0
    //  no simd      320      364        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e423] * other[e45])
                    + (self[e412] * other[e31])
                    + (self[e412] * other[e4315])
                    + (self[e415] * other[e1234])
                    + (self[e435] * other[e42])
                    + (self[e321] * other[e41])
                    + (self[e12345] * other[e41]),
                (self[e423] * other[e4125])
                    + (self[e431] * other[scalar])
                    + (self[e431] * other[e45])
                    + (self[e415] * other[e43])
                    + (self[e425] * other[e1234])
                    + (self[e321] * other[e42])
                    + (self[e12345] * other[e42]),
                (self[e431] * other[e4235])
                    + (self[e412] * other[scalar])
                    + (self[e412] * other[e45])
                    + (self[e425] * other[e41])
                    + (self[e435] * other[e1234])
                    + (self[e321] * other[e43])
                    + (self[e12345] * other[e43]),
                -(self[e415] * other[e23])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e321] * other[e45])
                    - (self[e235] * other[e41])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
            ]) + (Simd32x4::from([other[scalar], other[e12], other[e23], other[scalar]]) * self.group0().xxy().extend_to_4(self[e12345]))
                - (self.group0().yzx() * other.group1().zxy()).extend_to_4(self[e423] * other[e15])
                - (self.group0().yzx() * other.group3().zxy()).extend_to_4(self[e431] * other[e25])
                - (self.group1().yzx() * other.group0().zxy()).extend_to_4(self[e412] * other[e35]),
            // e415, e425, e435, e321
            (Simd32x4::from([other[e42], other[e1234], other[e1234], other[e42]]) * self.group2().zyzy())
                + (Simd32x4::from([other[scalar], other[e12], other[e23], other[e4125]]) * self.group1().xxyz())
                + (Simd32x4::from([other[e31], other[scalar], other[scalar], other[scalar]]) * self.group1().zyzw())
                + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e4315]]) * self.group0().zyz().extend_to_4(self[e425]))
                + (Simd32x4::from([other[e1234], other[e43], other[e41], other[e41]]) * self.group2().xxyx())
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e4235]]) * self.group0().xxy().extend_to_4(self[e415]))
                + (self.group2().wwwz() * other.group1().truncate_to_3().extend_to_4(other[e43]))
                - (self.group2().yzxw() * other.group0().zxy().extend_to_4(other[e45]))
                - (other.group2().zxyx() * self.group0().yzx().extend_to_4(self[e423]))
                - (self.group1().yzx() * other.group1().zxy()).extend_to_4(self[e431] * other[e25])
                - (self.group1().www() * other.group3().truncate_to_3()).extend_to_4(self[e412] * other[e35]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e125] * other[e31]) + (self[e12345] * other[e15]),
                (self[e125] * other[e4235]) + (self[e12345] * other[e25]),
                (self[e125] * other[scalar]) + (self[e12345] * other[e35]),
                -(self[e315] * other[e31]) - (self[e125] * other[e12]),
            ]) + (Simd32x4::from([other[scalar], other[e12], other[e4315], other[e4125]]) * self.group2().xxxz())
                + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e4315]]) * self.group1().zyz().extend_to_4(self[e315]))
                + (Simd32x4::from([other[e4125], other[scalar], other[e23], other[e3215]]) * self.group2().yyyw())
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e4235]]) * self.group1().xxy().extend_to_4(self[e235]))
                - (Simd32x4::from([other[e45], other[e4125], other[e31], other[e35]]) * self.group2().xxx().extend_to_4(self[e435]))
                - (Simd32x4::from([other[e4315], other[e23], other[e45], other[e23]]) * self.group2().zzzx())
                - (self.group1().yzxx() * other.group2().zxyx())
                - (self.group1().wwwy() * other.group2().xyzy())
                - (other.group1().zw().extend_to_4(other[e4235], other[e3215]) * self.group2().yyy().extend_to_4(self[e321])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e425] * other[e4125]) + (self[e321] * other[e23]) + (self[e315] * other[e43]),
                (self[e435] * other[e4235]) + (self[e321] * other[e31]) + (self[e125] * other[e41]),
                (self[e415] * other[e4315]) + (self[e321] * other[e12]) + (self[e235] * other[e42]),
                -(self[e415] * other[e41]) - (self[e425] * other[e42]) - (self[e435] * other[e43]),
            ]) + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e1234]]) * self.group0().zyz().extend_to_4(self[e12345]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e1234]]) * self.group0().xxy().extend_to_4(self[e321]))
                - (Simd32x4::from([other[e42], other[e1234], other[e1234], other[e12]]) * self.group2().zyz().extend_to_4(self[e412]))
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e4235]]) * self.group1().xxy().extend_to_4(self[e423]))
                - (Simd32x4::from([other[e1234], other[e43], other[e41], other[e4315]]) * self.group2().xxy().extend_to_4(self[e431]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e31]]) * self.group1().zyz().extend_to_4(self[e431]))
                - (other.group3().xyzz() * self.group2().www().extend_to_4(self[e412]))
                - (self.group0().yzx() * other.group2().zxy()).extend_to_4(self[e423] * other[e23]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl std::ops::Div<sandwich> for Dipole {
    type Output = sandwich_partial<Dipole>;
    fn div(self, _rhs: sandwich) -> Self::Output {
        sandwich_partial(self)
    }
}
impl Sandwich<AntiCircleRotor> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       82      127        0
    //    simd3        0       19        0
    //    simd4       39       24        0
    // Totals...
    // yes simd      121      170        0
    //  no simd      238      280        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e31] * self[e43]) + (other[e45] * self[e41]) + (other[scalar] * self[e41]),
                (other[e12] * self[e41]) + (other[e45] * self[e42]) + (other[scalar] * self[e42]),
                (other[e23] * self[e42]) + (other[e45] * self[e43]) + (other[scalar] * self[e43]),
                -(other[e23] * self[e23]) - (other[e31] * self[e31]) - (other[e12] * self[e12]) - (other[e15] * self[e41]) - (other[e25] * self[e42]) - (other[e35] * self[e43]),
            ]) + (self.group1().zxyw() * other.group0().yzx().extend_to_4(other[e45]))
                - (other.group0().xxy() * self.group1().wzx()).extend_to_4(other[e41] * self[e15])
                - (other.group0().zyz() * self.group1().yww()).extend_to_4(other[e42] * self[e25])
                - (self.group0().yzx() * other.group1().zxy()).extend_to_4(other[e43] * self[e35]),
            // e23, e31, e12, e45
            (Simd32x4::from(other[scalar]) * self.group1())
                + (other.group2().yzxy() * self.group0().zxy().extend_to_4(self[e42]))
                + (other.group0().yzx() * self.group2().zxy()).extend_to_4(other[e15] * self[e41])
                + (other.group1().yzx() * self.group1().zxy()).extend_to_4(other[e35] * self[e43])
                - (other.group0().zxy() * self.group2().yzx()).extend_to_4(other[e41] * self[e15])
                - (self.group0().yzx() * other.group2().zxy()).extend_to_4(other[e42] * self[e25])
                - (other.group1().zxy() * self.group1().yzx()).extend_to_4(other[e43] * self[e35]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e31] * self[e35]) + (other[e15] * self[e45]) + (other[e25] * self[e12]) + (other[scalar] * self[e15]),
                (other[e12] * self[e15]) + (other[e25] * self[e45]) + (other[e35] * self[e23]) + (other[scalar] * self[e25]),
                (other[e23] * self[e25]) + (other[e15] * self[e31]) + (other[e35] * self[e45]) + (other[scalar] * self[e35]),
                -(other[e23] * self[e41]) - (other[e31] * self[e42]) - (other[e12] * self[e43]),
            ]) - (self.group1().yzxz() * other.group2().zxy().extend_to_4(other[e43]))
                - (self.group2().xyx() * other.group1().wwy()).extend_to_4(other[e41] * self[e23])
                - (self.group2().yzz() * other.group1().zxw()).extend_to_4(other[e42] * self[e31]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e42] * self[e35]) + (other[e23] * self[e45]) + (other[e45] * self[e23]) + (other[e35] * self[e42]),
                (other[e43] * self[e15]) + (other[e31] * self[e45]) + (other[e45] * self[e31]) + (other[e15] * self[e43]),
                (other[e41] * self[e25]) + (other[e12] * self[e45]) + (other[e45] * self[e12]) + (other[e25] * self[e41]),
                -(other[e12] * self[e35]) - (other[e15] * self[e23]) - (other[e25] * self[e31]) - (other[e35] * self[e12]),
            ]) - (other.group0().zxy() * self.group2().yzx()).extend_to_4(other[e23] * self[e15])
                - (self.group0().zxy() * other.group2().yzx()).extend_to_4(other[e31] * self[e25]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       86      140        0
    //    simd3        0       24        0
    //    simd4       48       27        0
    // Totals...
    // yes simd      134      191        0
    //  no simd      278      320        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e431] * self[e12]) + (other[e425] * self[e43]) + (other[e4] * self[e23]) + (other[e3] * self[e42]),
                (other[e412] * self[e23]) + (other[e435] * self[e41]) + (other[e4] * self[e31]) + (other[e1] * self[e43]),
                (other[e423] * self[e31]) + (other[e415] * self[e42]) + (other[e4] * self[e12]) + (other[e2] * self[e41]),
                -(other[e415] * self[e23]) - (other[e425] * self[e31]) - (other[e435] * self[e12]) - (other[e321] * self[e45]) - (other[e125] * self[e43]),
            ]) - (Simd32x4::from([other[e321], other[e3], other[e425], self[e35]]) * self.group0().xxx().extend_to_4(other[e412]))
                - (Simd32x4::from([other[e2], other[e415], other[e321], other[e315]]) * self.group0().zzz().extend_to_4(self[e42]))
                - (other.group1().zw().extend_to_4(other[e1], other[e235]) * self.group0().yyy().extend_to_4(self[e41]))
                - (other.group0().xxy() * self.group1().wzx()).extend_to_4(other[e423] * self[e15])
                - (other.group0().zyz() * self.group1().yww()).extend_to_4(other[e431] * self[e25]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e425] * self[e12]) + (other[e4] * self[e15]),
                (other[e435] * self[e23]) + (other[e4] * self[e25]),
                (other[e415] * self[e31]) + (other[e4] * self[e35]),
                -(other[e2] * self[e31]) - (other[e3] * self[e12]),
            ]) + (Simd32x4::from([other[e315], other[e5], other[e5], self[e35]]) * self.group0().zyz().extend_to_4(other[e412]))
                + (Simd32x4::from([other[e5], other[e125], other[e235], self[e25]]) * self.group0().xxy().extend_to_4(other[e431]))
                + (other.group0().yzx() * self.group2().zxy()).extend_to_4(other[e423] * self[e15])
                - (other.group2().zxyy() * self.group0().yzx().extend_to_4(self[e42]))
                - (other.group3().xyzx() * self.group1().wwwx())
                - (other.group0().zxy() * self.group2().yzx()).extend_to_4(other[e235] * self[e41])
                - (other.group1().zxy() * self.group1().yzx()).extend_to_4(other[e125] * self[e43]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e425] * self[e35]) + (other[e235] * self[e45]) + (other[e315] * self[e12]) + (other[e2] * self[e35]) + (other[e5] * self[e23]),
                (other[e321] * self[e25]) + (other[e315] * self[e45]) + (other[e125] * self[e23]) + (other[e3] * self[e15]) + (other[e5] * self[e31]),
                (other[e321] * self[e35]) + (other[e235] * self[e31]) + (other[e125] * self[e45]) + (other[e1] * self[e25]) + (other[e5] * self[e12]),
                -(other[e435] * self[e35]) - (other[e235] * self[e23]) - (other[e315] * self[e31]) - (other[e125] * self[e12]) - (other[e2] * self[e25]) - (other[e3] * self[e35]),
            ]) + (self.group2().xxy() * other.group1().wzx()).extend_to_4(other[e5] * self[e45])
                - (other.group1().zxyx() * self.group2().yzx().extend_to_4(self[e15]))
                - (other.group3().zxyx() * self.group2().yzx().extend_to_4(self[e15]))
                - (other.group2().zxy() * self.group1().yzx()).extend_to_4(other[e425] * self[e25]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e321] * self[e23]) + (other[e2] * self[e12]),
                (other[e321] * self[e31]) + (other[e3] * self[e23]),
                (other[e321] * self[e12]) + (other[e1] * self[e31]),
                -(other[e435] * self[e43]) - (other[e4] * self[e45]),
            ]) + (Simd32x4::from([other[e315], other[e5], other[e5], other[e3]]) * self.group0().zyz().extend_to_4(self[e43]))
                + (Simd32x4::from([other[e5], other[e125], other[e235], other[e2]]) * self.group0().xxy().extend_to_4(self[e42]))
                + (other.group0().zxy() * self.group2().yzx()).extend_to_4(other[e1] * self[e41])
                - (self.group2() * other.group2().www()).extend_to_4(other[e412] * self[e12])
                - (other.group0().yzx() * self.group2().zxy()).extend_to_4(other[e423] * self[e23])
                - (self.group0().yzx() * other.group2().zxy()).extend_to_4(other[e431] * self[e31])
                - (other.group3().zxy() * self.group1().yzx()).extend_to_4(other[e425] * self[e42])
                - (self.group1().www() * other.group1().truncate_to_3()).extend_to_4(other[e415] * self[e41]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       42       67        0
    //    simd3        2       15        0
    //    simd4       23       18        0
    // Totals...
    // yes simd       67      100        0
    //  no simd      140      184        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[scalar]) * self.group0(),
            // e23, e31, e12, e45
            ((Simd32x3::from(other[e3215]) * self.group0()) + (Simd32x3::from(other[scalar]) * self.group1().truncate_to_3())).extend_to_4(other[scalar] * self[e45]),
            // e15, e25, e35, e1234
            ((Simd32x3::from(other[e3215]) * self.group1().truncate_to_3()) + (Simd32x3::from(other[scalar]) * self.group2())).extend_to_4(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e3215]) * self.group0().extend_to_4(self[e45]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       59       93        0
    //    simd3        0       14        0
    //    simd4       28       20        0
    // Totals...
    // yes simd       87      127        0
    //  no simd      171      215        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([other[e321], other[e321], other[e321], 1.0])
                * self
                    .group0()
                    .extend_to_4(-(other[e235] * self[e41]) - (other[e315] * self[e42]) - (other[e125] * self[e43]) - (other[e321] * self[e45]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            Simd32x4::from([
                other[e315] * self[e43],
                other[e125] * self[e41],
                other[e235] * self[e42],
                -(other[e315] * self[e42]) - (other[e125] * self[e43]),
            ]) - (other.group0().zxyx() * self.group0().yzx().extend_to_4(self[e41])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e235] * self[e45]) + (other[e315] * self[e12]) + (other[e321] * self[e15]),
                (other[e315] * self[e45]) + (other[e125] * self[e23]) + (other[e321] * self[e25]),
                (other[e235] * self[e31]) + (other[e125] * self[e45]) + (other[e321] * self[e35]),
                -(other[e315] * self[e31]) - (other[e125] * self[e12]),
            ]) - (other.group0().zxyx() * self.group1().yzxx()),
            // e1, e2, e3, e4
            (Simd32x3::from(other[e321]) * self.group1().truncate_to_3()).extend_to_4(0.0) + (self.group0().zxy() * other.group0().yzx()).extend_to_4(0.0)
                - (self.group0().yzx() * other.group0().zxy()).extend_to_4(0.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       73      116        0
    //    simd3        0       14        0
    //    simd4       34       23        0
    // Totals...
    // yes simd      107      153        0
    //  no simd      209      250        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                other[e3] * self[e42],
                other[e1] * self[e43],
                other[e2] * self[e41],
                -(other[e125] * self[e43]) - (other[e321] * self[e45]),
            ]) - (Simd32x4::from([other[e321], other[e3], other[e1], other[e235]]) * self.group0().xxy().extend_to_4(self[e41]))
                - (Simd32x4::from([other[e2], other[e321], other[e321], other[e315]]) * self.group0().zyz().extend_to_4(self[e42])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e315] * self[e43]) + (other[e5] * self[e41]),
                (other[e125] * self[e41]) + (other[e5] * self[e42]),
                (other[e235] * self[e42]) + (other[e5] * self[e43]),
                -(other[e125] * self[e43]) - (other[e1] * self[e23]) - (other[e2] * self[e31]) - (other[e3] * self[e12]),
            ]) - (other.group0().zxyx() * self.group0().yzx().extend_to_4(self[e41]))
                - (self.group1().www() * other.group1().truncate_to_3()).extend_to_4(other[e315] * self[e42]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e235] * self[e45]) + (other[e315] * self[e12]) + (other[e2] * self[e35]) + (other[e5] * self[e23]),
                (other[e315] * self[e45]) + (other[e125] * self[e23]) + (other[e321] * self[e25]) + (other[e5] * self[e31]),
                (other[e235] * self[e31]) + (other[e125] * self[e45]) + (other[e321] * self[e35]) + (other[e5] * self[e12]),
                -(other[e235] * self[e23]) - (other[e315] * self[e31]) - (other[e125] * self[e12]) - (other[e3] * self[e35]),
            ]) + (Simd32x4::from([other[e321], other[e3], other[e1], self[e45]]) * self.group2().xxy().extend_to_4(other[e5]))
                - (other.group1().zxyx() * self.group2().yzx().extend_to_4(self[e15]))
                - (other.group0().zxy() * self.group1().yzx()).extend_to_4(other[e2] * self[e25]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e2] * self[e12]) - (other[e125] * self[e42]) - (other[e3] * self[e31]),
                (other[e3] * self[e23]) - (other[e235] * self[e43]) - (other[e1] * self[e12]),
                (other[e1] * self[e31]) - (other[e315] * self[e41]) - (other[e2] * self[e23]),
                0.0,
            ]) + (Simd32x4::from([other[e315], other[e5], other[e5], other[e2]]) * self.group0().zyz().extend_to_4(self[e42]))
                + (Simd32x4::from([other[e5], other[e125], other[e235], other[e1]]) * self.group0().xxy().extend_to_4(self[e41]))
                + (other.group0().www() * self.group1().truncate_to_3()).extend_to_4(other[e3] * self[e43]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       68      112        0
    //    simd3        0       13        0
    //    simd4       30       20        0
    // Totals...
    // yes simd       98      145        0
    //  no simd      188      231        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                other[e31] * self[e43],
                other[e12] * self[e41],
                other[e23] * self[e42],
                -(other[e31] * self[e31]) - (other[e12] * self[e12]) - (other[e15] * self[e41]) - (other[e25] * self[e42]) - (other[e35] * self[e43]),
            ]) - (other.group0().zxy() * self.group0().yzx()).extend_to_4(other[e23] * self[e23]),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(other[e12] * self[e31]) - (other[e35] * self[e42]),
                -(other[e23] * self[e12]) - (other[e15] * self[e43]),
                -(other[e31] * self[e23]) - (other[e25] * self[e41]),
                other[e35] * self[e43],
            ]) + (other.group0().yzx() * self.group1().zxy()).extend_to_4(other[e15] * self[e41])
                + (other.group1().yzx() * self.group0().zxy()).extend_to_4(other[e25] * self[e42]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e31] * self[e35]) + (other[e15] * self[e45]) + (other[e25] * self[e12]),
                (other[e12] * self[e15]) + (other[e25] * self[e45]) + (other[e35] * self[e23]),
                (other[e23] * self[e25]) + (other[e15] * self[e31]) + (other[e35] * self[e45]),
                other[e12] * self[e43] * -1.0,
            ]) - (other.group0().zxy() * self.group2().yzx()).extend_to_4(other[e23] * self[e41])
                - (other.group1().zxy() * self.group1().yzx()).extend_to_4(other[e31] * self[e42]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e23] * self[e45]) + (other[e35] * self[e42]),
                (other[e31] * self[e45]) + (other[e15] * self[e43]),
                (other[e12] * self[e45]) + (other[e25] * self[e41]),
                -(other[e31] * self[e25]) - (other[e12] * self[e35]) - (other[e15] * self[e23]) - (other[e25] * self[e31]) - (other[e35] * self[e12]),
            ]) - (other.group1().yzx() * self.group0().zxy()).extend_to_4(other[e23] * self[e15]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       73      116        0
    //    simd3        0       13        0
    //    simd4       34       24        0
    // Totals...
    // yes simd      107      153        0
    //  no simd      209      251        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e31] * self[e43]) + (other[scalar] * self[e41]),
                (other[e12] * self[e41]) + (other[scalar] * self[e42]),
                (other[e23] * self[e42]) + (other[scalar] * self[e43]),
                -(other[e23] * self[e23]) - (other[e31] * self[e31]) - (other[e12] * self[e12]) - (other[e25] * self[e42]) - (other[e35] * self[e43]),
            ]) - (self.group0().yzx() * other.group0().zxy()).extend_to_4(other[e15] * self[e41]),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(other[e12] * self[e31]) - (other[e35] * self[e42]),
                -(other[e23] * self[e12]) - (other[e15] * self[e43]),
                -(other[e31] * self[e23]) - (other[e25] * self[e41]),
                0.0,
            ]) + (Simd32x4::from(other[scalar]) * self.group1())
                + (other.group1().ywwy() * self.group0().zyz().extend_to_4(self[e42]))
                + (other.group1().wzxx() * self.group0().xxy().extend_to_4(self[e41]))
                + (other.group0().yzx() * self.group1().zxy()).extend_to_4(other[e35] * self[e43]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e31] * self[e35]) + (other[scalar] * self[e15]) + (other[e15] * self[e45]) + (other[e25] * self[e12]) + (other[e3215] * self[e23]),
                (other[e12] * self[e15]) + (other[scalar] * self[e25]) + (other[e25] * self[e45]) + (other[e35] * self[e23]) + (other[e3215] * self[e31]),
                (other[e23] * self[e25]) + (other[scalar] * self[e35]) + (other[e15] * self[e31]) + (other[e35] * self[e45]) + (other[e3215] * self[e12]),
                other[e12] * self[e43] * -1.0,
            ]) - (other.group0().zxyx() * self.group2().yzx().extend_to_4(self[e41]))
                - (other.group1().zxy() * self.group1().yzx()).extend_to_4(other[e31] * self[e42]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e23] * self[e45],
                other[e31] * self[e45],
                other[e12] * self[e45],
                -(other[e12] * self[e35]) - (other[e15] * self[e23]) - (other[e25] * self[e31]) - (other[e35] * self[e12]),
            ]) + (self.group0().yzx() * other.group1().zxy()).extend_to_4(other[e3215] * self[e45])
                - (self.group0().xxy() * other.group1().wzx()).extend_to_4(other[e23] * self[e15])
                - (self.group0().zyz() * other.group1().yww()).extend_to_4(other[e31] * self[e25]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       86        0
    //    simd3        1       19        0
    //    simd4       29       15        0
    // Totals...
    // yes simd       70      120        0
    //  no simd      159      203        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (self.group0().yzx() * other.group0().zxy()) - (self.group0().zxy() * other.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([other[e5] * self[e41], other[e5] * self[e42], other[e5] * self[e43], -(other[e2] * self[e31]) - (other[e3] * self[e12])])
                - (other.group0().xyzx() * self.group1().wwwx()),
            // e235, e315, e125, e4
            Simd32x4::from([other[e3] * self[e25] * -1.0, other[e1] * self[e35] * -1.0, other[e2] * self[e15] * -1.0, other[e3] * self[e43]])
                + (other.group0().yzxx() * self.group2().zxy().extend_to_4(self[e41]))
                + (other.group0().www() * self.group1().truncate_to_3()).extend_to_4(other[e2] * self[e42]),
            // e1, e2, e3, e5
            Simd32x4::from([other[e2] * self[e12], other[e3] * self[e23], other[e1] * self[e31], -(other[e2] * self[e25]) - (other[e3] * self[e35])])
                + (self.group0() * other.group0().www()).extend_to_4(other[e5] * self[e45])
                - (other.group0().zxy() * self.group1().yzx()).extend_to_4(other[e1] * self[e15]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       51        0
    //    simd3        0       15        0
    //    simd4       14        7        0
    // Totals...
    // yes simd       42       73        0
    //  no simd       84      124        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[e12345]) * self.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other[e12345]) * self.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e235, e315, e125
            Simd32x3::from(other[e12345]) * self.group2(),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       76      126        0
    //    simd3        0       24        0
    //    simd4       38       18        0
    // Totals...
    // yes simd      114      168        0
    //  no simd      228      270        0
    fn sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e431] * self[e12]) + (other[e425] * self[e43]),
                (other[e412] * self[e23]) + (other[e435] * self[e41]),
                (other[e423] * self[e31]) + (other[e415] * self[e42]),
                -(other[e415] * self[e23])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12])
                    - (other[e321] * self[e45])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]) - (other.group0().xxy() * self.group1().wzx()).extend_to_4(other[e423] * self[e15])
                - (other.group0().zyz() * self.group1().yww()).extend_to_4(other[e431] * self[e25])
                - (self.group0().xyx() * other.group1().wwy()).extend_to_4(other[e412] * self[e35])
                - (self.group0().yzz() * other.group1().zxw()).extend_to_4(other[e235] * self[e41]),
            // e415, e425, e435, e321
            (other.group0().yzx() * self.group2().zxy()).extend_to_4(other[e423] * self[e15])
                + (other.group2().yzx() * self.group0().zxy()).extend_to_4(other[e431] * self[e25])
                + (other.group1().yzx() * self.group1().zxy()).extend_to_4(other[e412] * self[e35])
                - (other.group0().zxy() * self.group2().yzx()).extend_to_4(other[e235] * self[e41])
                - (other.group2().zxy() * self.group0().yzx()).extend_to_4(other[e315] * self[e42])
                - (other.group1().zxy() * self.group1().yzx()).extend_to_4(other[e125] * self[e43]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e425] * self[e35]) + (other[e321] * self[e15]) + (other[e235] * self[e45]) + (other[e315] * self[e12]),
                (other[e435] * self[e15]) + (other[e321] * self[e25]) + (other[e315] * self[e45]) + (other[e125] * self[e23]),
                (other[e415] * self[e25]) + (other[e321] * self[e35]) + (other[e235] * self[e31]) + (other[e125] * self[e45]),
                -(other[e415] * self[e15]) - (other[e425] * self[e25]) - (other[e435] * self[e35]) - (other[e125] * self[e12]),
            ]) - (self.group1().yzxx() * other.group2().zxy().extend_to_4(other[e235]))
                - (self.group2().yzx() * other.group1().zxy()).extend_to_4(other[e315] * self[e31]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e412] * self[e25]) + (other[e321] * self[e23]) + (other[e315] * self[e43]),
                (other[e423] * self[e35]) + (other[e321] * self[e31]) + (other[e125] * self[e41]),
                (other[e431] * self[e15]) + (other[e321] * self[e12]) + (other[e235] * self[e42]),
                -(other[e415] * self[e41]) - (other[e425] * self[e42]) - (other[e435] * self[e43]),
            ]) - (self.group1().wwwz() * other.group1().truncate_to_3().extend_to_4(other[e412]))
                - (other.group0().yzx() * self.group2().zxy()).extend_to_4(other[e423] * self[e23])
                - (other.group2().zxy() * self.group0().yzx()).extend_to_4(other[e431] * self[e31]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       82      136        0
    //    simd3        0       23        0
    //    simd4       39       19        0
    // Totals...
    // yes simd      121      178        0
    //  no simd      238      281        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e431] * self[e12]) + (other[e425] * self[e43]) + (other[e12345] * self[e41]),
                (other[e412] * self[e23]) + (other[e435] * self[e41]) + (other[e12345] * self[e42]),
                (other[e423] * self[e31]) + (other[e415] * self[e42]) + (other[e12345] * self[e43]),
                -(other[e415] * self[e23])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12])
                    - (other[e321] * self[e45])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]) - (other.group0().xxy() * self.group1().wzx()).extend_to_4(other[e423] * self[e15])
                - (other.group0().zyz() * self.group1().yww()).extend_to_4(other[e431] * self[e25])
                - (self.group0().xyx() * other.group1().wwy()).extend_to_4(other[e412] * self[e35])
                - (self.group0().yzz() * other.group1().zxw()).extend_to_4(other[e235] * self[e41]),
            // e415, e425, e435, e321
            Simd32x4::from([other[e12345] * self[e23], other[e12345] * self[e31], other[e12345] * self[e12], other[e12345] * self[e45] * -1.0])
                + (other.group0().yzx() * self.group2().zxy()).extend_to_4(other[e423] * self[e15])
                + (self.group0().zxy() * other.group2().yzx()).extend_to_4(other[e431] * self[e25])
                + (other.group1().yzx() * self.group1().zxy()).extend_to_4(other[e412] * self[e35])
                - (other.group2().zxyy() * self.group0().yzx().extend_to_4(self[e42]))
                - (other.group0().zxy() * self.group2().yzx()).extend_to_4(other[e235] * self[e41])
                - (other.group1().zxy() * self.group1().yzx()).extend_to_4(other[e125] * self[e43]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e425] * self[e35]) + (other[e321] * self[e15]) + (other[e235] * self[e45]) + (other[e315] * self[e12]) + (other[e12345] * self[e15]),
                (other[e435] * self[e15]) + (other[e321] * self[e25]) + (other[e315] * self[e45]) + (other[e125] * self[e23]) + (other[e12345] * self[e25]),
                (other[e415] * self[e25]) + (other[e321] * self[e35]) + (other[e235] * self[e31]) + (other[e125] * self[e45]) + (other[e12345] * self[e35]),
                -(other[e435] * self[e35]) - (other[e235] * self[e23]) - (other[e315] * self[e31]) - (other[e125] * self[e12]),
            ]) - (other.group1().zxyx() * self.group2().yzx().extend_to_4(self[e15]))
                - (other.group2().zxy() * self.group1().yzx()).extend_to_4(other[e425] * self[e25]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e412] * self[e25]) + (other[e321] * self[e23]) + (other[e315] * self[e43]),
                (other[e423] * self[e35]) + (other[e321] * self[e31]) + (other[e125] * self[e41]),
                (other[e431] * self[e15]) + (other[e321] * self[e12]) + (other[e235] * self[e42]),
                -(other[e415] * self[e41]) - (other[e425] * self[e42]) - (other[e435] * self[e43]),
            ]) - (self.group1().wwwz() * other.group1().truncate_to_3().extend_to_4(other[e412]))
                - (other.group0().yzx() * self.group2().zxy()).extend_to_4(other[e423] * self[e23])
                - (self.group0().yzx() * other.group2().zxy()).extend_to_4(other[e431] * self[e31]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       76      122        0
    //    simd3        0       20        0
    //    simd4       38       22        0
    // Totals...
    // yes simd      114      164        0
    //  no simd      228      270        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e31] * self[e43]) + (other[e45] * self[e41]),
                (other[e12] * self[e41]) + (other[e45] * self[e42]),
                (other[e23] * self[e42]) + (other[e45] * self[e43]),
                -(other[e23] * self[e23]) - (other[e31] * self[e31]) - (other[e12] * self[e12]) - (other[e15] * self[e41]) - (other[e25] * self[e42]) - (other[e35] * self[e43]),
            ]) + (self.group1().zxyw() * other.group0().yzx().extend_to_4(other[e45]))
                - (other.group0().xxy() * self.group1().wzx()).extend_to_4(other[e41] * self[e15])
                - (other.group0().zyz() * self.group1().yww()).extend_to_4(other[e42] * self[e25])
                - (self.group0().yzx() * other.group1().zxy()).extend_to_4(other[e43] * self[e35]),
            // e23, e31, e12, e45
            (other.group0().yzx() * self.group2().zxy()).extend_to_4(other[e15] * self[e41])
                + (other.group2().yzx() * self.group0().zxy()).extend_to_4(other[e25] * self[e42])
                + (other.group1().yzx() * self.group1().zxy()).extend_to_4(other[e35] * self[e43])
                - (other.group0().zxy() * self.group2().yzx()).extend_to_4(other[e41] * self[e15])
                - (other.group2().zxy() * self.group0().yzx()).extend_to_4(other[e42] * self[e25])
                - (other.group1().zxy() * self.group1().yzx()).extend_to_4(other[e43] * self[e35]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e31] * self[e35]) + (other[e15] * self[e45]) + (other[e25] * self[e12]),
                (other[e12] * self[e15]) + (other[e25] * self[e45]) + (other[e35] * self[e23]),
                (other[e23] * self[e25]) + (other[e15] * self[e31]) + (other[e35] * self[e45]),
                -(other[e23] * self[e41]) - (other[e31] * self[e42]) - (other[e12] * self[e43]),
            ]) - (self.group1().yzxx() * other.group2().zxy().extend_to_4(other[e41]))
                - (self.group2().xyx() * other.group1().wwy()).extend_to_4(other[e42] * self[e31])
                - (self.group2().yzz() * other.group1().zxw()).extend_to_4(other[e43] * self[e12]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e42] * self[e35]) + (other[e23] * self[e45]) + (other[e45] * self[e23]) + (other[e35] * self[e42]),
                (other[e43] * self[e15]) + (other[e31] * self[e45]) + (other[e45] * self[e31]) + (other[e15] * self[e43]),
                (other[e41] * self[e25]) + (other[e12] * self[e45]) + (other[e45] * self[e12]) + (other[e25] * self[e41]),
                -(other[e23] * self[e15]) - (other[e31] * self[e25]) - (other[e12] * self[e35]) - (other[e35] * self[e12]),
            ]) - (other.group0().zxy() * self.group2().yzx()).extend_to_4(other[e15] * self[e23])
                - (other.group2().yzx() * self.group0().zxy()).extend_to_4(other[e25] * self[e31]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       90      137        0
    //    simd3        0       17        0
    //    simd4       47       33        0
    // Totals...
    // yes simd      137      187        0
    //  no simd      278      320        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e43] * other[e31]) + (self[e43] * other[e4315]) + (self[e23] * other[e1234]) + (self[e12] * other[e42]),
                (self[e41] * other[e4125]) + (self[e42] * other[e45]) + (self[e23] * other[e43]) + (self[e31] * other[e1234]),
                (self[e42] * other[e4235]) + (self[e43] * other[e45]) + (self[e31] * other[e41]) + (self[e12] * other[e1234]),
                -(self[e23] * other[e23]) - (self[e31] * other[e31]) - (self[e12] * other[e12]) - (self[e25] * other[e42]) - (self[e35] * other[e43]),
            ]) + (other.group1().wzxw() * self.group0().xxy().extend_to_4(self[e45]))
                - (self.group0().yzx() * other.group1().zxy()).extend_to_4(self[e41] * other[e15])
                - (self.group0().yzx() * other.group3().zxy()).extend_to_4(self[e42] * other[e25])
                - (other.group0().xxy() * self.group1().wzx()).extend_to_4(self[e43] * other[e35])
                - (other.group0().zyz() * self.group1().yww()).extend_to_4(self[e15] * other[e41]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e12] * other[e31]) + (self[e45] * other[e4235]) + (self[e35] * other[e42]),
                (self[e23] * other[e12]) + (self[e45] * other[e4315]) + (self[e25] * other[e1234]),
                (self[e31] * other[e23]) + (self[e45] * other[e4125]) + (self[e35] * other[e1234]),
                -(self[e23] * other[e4235]) - (self[e31] * other[e4315]) - (self[e12] * other[e4125]),
            ]) + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e25]]) * self.group0().zyz().extend_to_4(self[e42]))
                + (Simd32x4::from([other[e1234], other[e43], other[e41], other[e35]]) * self.group2().xxy().extend_to_4(self[e43]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e15]]) * self.group0().xxy().extend_to_4(self[e41]))
                - (self.group0().yzx() * other.group2().zxy()).extend_to_4(self[e15] * other[e41])
                - (self.group2().yzx() * other.group0().zxy()).extend_to_4(self[e25] * other[e42])
                - (self.group1().yzx() * other.group1().zxy()).extend_to_4(self[e35] * other[e43]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e12] * other[e25]) + (self[e45] * other[e15]) + (self[e25] * other[e4125]) + (self[e35] * other[e31]),
                (self[e23] * other[e35]) + (self[e31] * other[e3215]) + (self[e45] * other[e25]) + (self[e15] * other[e12]) + (self[e35] * other[e4235]),
                (self[e31] * other[e15]) + (self[e12] * other[e3215]) + (self[e45] * other[e35]) + (self[e15] * other[e4315]) + (self[e25] * other[e23]),
                -(self[e43] * other[e12])
                    - (self[e43] * other[e4125])
                    - (self[e23] * other[e41])
                    - (self[e31] * other[e42])
                    - (self[e12] * other[e43])
                    - (self[e45] * other[e1234]),
            ]) - (Simd32x4::from([other[e45], other[e4125], other[e31], other[e23]]) * self.group2().xxx().extend_to_4(self[e41]))
                - (Simd32x4::from([other[e4315], other[e23], other[e45], other[e31]]) * self.group2().zzz().extend_to_4(self[e42]))
                - (other.group1().zw().extend_to_4(other[e4235], other[e4235]) * self.group2().yyy().extend_to_4(self[e41]))
                - (self.group1().yzx() * other.group2().zxy()).extend_to_4(self[e42] * other[e4315]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e12] * other[e4315]) + (self[e45] * other[e23]),
                (self[e31] * other[e45]) + (self[e45] * other[e31]),
                (self[e12] * other[e45]) + (self[e45] * other[e12]),
                -(self[e31] * other[e25]) - (self[e12] * other[e35]),
            ]) + (Simd32x4::from([other[e42], other[e1234], other[e1234], other[e4125]]) * self.group2().zyz().extend_to_4(self[e35]))
                + (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e3215]]) * self.group1().xxyw())
                + (Simd32x4::from([other[e1234], other[e43], other[e41], other[e4315]]) * self.group2().xxy().extend_to_4(self[e25]))
                + (self.group0().yzx() * other.group2().zxy()).extend_to_4(self[e15] * other[e4235])
                - (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e31]]) * self.group0().zyz().extend_to_4(self[e25]))
                - (Simd32x4::from([other[e3215], other[e35], other[e15], other[e23]]) * self.group0().xxy().extend_to_4(self[e15]))
                - (self.group1().yzxx() * other.group3().zxy().extend_to_4(other[e15]))
                - (self.group2().yzx() * other.group0().zxy()).extend_to_4(self[e35] * other[e12]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       38       68        0
    //    simd3        2       19        0
    //    simd4       24       14        0
    // Totals...
    // yes simd       64      101        0
    //  no simd      140      181        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[e12345]) * self.group0(),
            // e415, e425, e435, e321
            ((Simd32x3::from(other[e5]) * self.group0()) + (Simd32x3::from(other[e12345]) * self.group1().truncate_to_3())).extend_to_4(self[e45] * other[e12345] * -1.0),
            // e235, e315, e125, e4
            ((Simd32x3::from(other[e5]) * self.group1().truncate_to_3()) + (Simd32x3::from(other[e12345]) * self.group2())).extend_to_4(0.0),
            // e1, e2, e3, e5
            Simd32x4::from(other[e5]) * self.group0().extend_to_4(self[e45]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       89        0
    //    simd3        0       11        0
    //    simd4       29       23        0
    // Totals...
    // yes simd       85      123        0
    //  no simd      172      214        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([other[e45], other[e45], other[e45], 1.0])
                * self
                    .group0()
                    .extend_to_4((self[e45] * other[e45]) - (self[e41] * other[e15]) - (self[e42] * other[e25]) - (self[e43] * other[e35])),
            // e23, e31, e12, e45
            Simd32x4::from([
                self[e42] * other[e35] * -1.0,
                self[e43] * other[e15] * -1.0,
                self[e41] * other[e25] * -1.0,
                (self[e42] * other[e25]) + (self[e43] * other[e35]),
            ]) + (other.group0().yzxx() * self.group0().zxy().extend_to_4(self[e41])),
            // e15, e25, e35, e1234
            (Simd32x3::from(self[e45]) * other.group0().truncate_to_3()).extend_to_4(0.0) + (self.group1().zxy() * other.group0().yzx()).extend_to_4(0.0)
                - (Simd32x3::from(other[e45]) * self.group2()).extend_to_4(0.0)
                - (self.group1().yzx() * other.group0().zxy()).extend_to_4(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e42] * other[e35]) + (self[e23] * other[e45]),
                (self[e43] * other[e15]) + (self[e31] * other[e45]),
                (self[e41] * other[e25]) + (self[e12] * other[e45]),
                -(self[e31] * other[e25]) - (self[e12] * other[e35]),
            ]) - (other.group0().yzxx() * self.group0().zxy().extend_to_4(self[e23])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       59       94        0
    //    simd3        0       12        0
    //    simd4       39       30        0
    // Totals...
    // yes simd       98      136        0
    //  no simd      215      250        0
    fn sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e43] * other[e4315],
                self[e42] * other[e45],
                self[e43] * other[e45],
                -(self[e42] * other[e25]) - (self[e43] * other[e35]),
            ]) + (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e45]]) * self.group0().xxy().extend_to_4(self[e45]))
                - (self.group0().yzx() * other.group1().zxy()).extend_to_4(self[e41] * other[e15]),
            // e23, e31, e12, e45
            (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e25]]) * self.group0().zyz().extend_to_4(self[e42]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e15]]) * self.group0().xxy().extend_to_4(self[e41]))
                + Simd32x3::from(0.0).extend_to_4(-(self[e31] * other[e4315]) - (self[e12] * other[e4125]))
                + (self.group1().www() * other.group1().truncate_to_3()).extend_to_4(self[e43] * other[e35])
                - (self.group0().yzx() * other.group0().zxy()).extend_to_4(self[e23] * other[e4235]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e12] * other[e25]) + (self[e45] * other[e15]) + (self[e25] * other[e4125]),
                (self[e23] * other[e35]) + (self[e31] * other[e3215]) + (self[e45] * other[e25]) + (self[e35] * other[e4235]),
                (self[e31] * other[e15]) + (self[e12] * other[e3215]) + (self[e45] * other[e35]) + (self[e15] * other[e4315]),
                0.0,
            ]) - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e4235]]) * self.group2().xxy().extend_to_4(self[e41]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e4315]]) * self.group2().zyz().extend_to_4(self[e42]))
                - (self.group1().yzx() * other.group0().zxy()).extend_to_4(self[e43] * other[e4125]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e4315]]) * self.group1().xxy().extend_to_4(self[e25]))
                + (Simd32x4::from([other[e4315], other[e45], other[e45], other[e4125]]) * self.group1().zyz().extend_to_4(self[e35]))
                + Simd32x3::from(0.0).extend_to_4(self[e45] * other[e3215])
                + (self.group0().yzx() * other.group0().zxy()).extend_to_4(self[e15] * other[e4235])
                - (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e25]]) * self.group0().zyz().extend_to_4(self[e31]))
                - (Simd32x4::from([other[e3215], other[e35], other[e15], other[e15]]) * self.group0().xxy().extend_to_4(self[e23]))
                - (self.group1().yzxz() * other.group1().zxy().extend_to_4(other[e35])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64      114        0
    //    simd3        0       18        0
    //    simd4       31       16        0
    // Totals...
    // yes simd       95      148        0
    //  no simd      188      232        0
    fn sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e43] * other[e425],
                self[e41] * other[e435],
                self[e42] * other[e415],
                -(self[e42] * other[e315]) - (self[e43] * other[e125]) - (self[e23] * other[e415]) - (self[e31] * other[e425]) - (self[e12] * other[e435]),
            ]) - (self.group0().yzx() * other.group0().zxy()).extend_to_4(self[e41] * other[e235]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e43] * other[e315]) + (self[e12] * other[e425]),
                (self[e41] * other[e125]) + (self[e23] * other[e435]),
                (self[e42] * other[e235]) + (self[e31] * other[e415]),
                self[e43] * other[e125] * -1.0,
            ]) - (self.group0().yzx() * other.group1().zxy()).extend_to_4(self[e41] * other[e235])
                - (other.group0().zxy() * self.group1().yzx()).extend_to_4(self[e42] * other[e315]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * other[e315]) + (self[e45] * other[e235]) + (self[e35] * other[e425]),
                (self[e23] * other[e125]) + (self[e45] * other[e315]) + (self[e15] * other[e435]),
                (self[e31] * other[e235]) + (self[e45] * other[e125]) + (self[e25] * other[e415]),
                -(self[e23] * other[e235]) - (self[e31] * other[e315]) - (self[e12] * other[e125]) - (self[e35] * other[e435]),
            ]) - (self.group2().yzx() * other.group0().zxy()).extend_to_4(self[e15] * other[e415])
                - (other.group1().zxy() * self.group1().yzx()).extend_to_4(self[e25] * other[e425]),
            // e1, e2, e3, e4
            Simd32x4::from([self[e43] * other[e315], self[e41] * other[e125], self[e42] * other[e235], self[e43] * other[e435] * -1.0])
                - (other.group0() * self.group1().www()).extend_to_4(self[e42] * other[e425])
                - (self.group0().yzx() * other.group1().zxy()).extend_to_4(self[e41] * other[e415]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       80      127        0
    //    simd3        0       16        0
    //    simd4       32       19        0
    // Totals...
    // yes simd      112      162        0
    //  no simd      208      251        0
    fn sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e41] * other[e12345]) + (self[e43] * other[e425]),
                (self[e41] * other[e435]) + (self[e42] * other[e12345]),
                (self[e42] * other[e415]) + (self[e43] * other[e12345]),
                -(self[e42] * other[e315]) - (self[e43] * other[e125]) - (self[e23] * other[e415]) - (self[e31] * other[e425]) - (self[e12] * other[e435]),
            ]) - (self.group0().yzx() * other.group0().zxy()).extend_to_4(self[e41] * other[e235]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e41] * other[e5]) + (self[e43] * other[e315]) + (self[e23] * other[e12345]) + (self[e12] * other[e425]),
                (self[e41] * other[e125]) + (self[e42] * other[e5]) + (self[e23] * other[e435]) + (self[e31] * other[e12345]),
                (self[e42] * other[e235]) + (self[e43] * other[e5]) + (self[e31] * other[e415]) + (self[e12] * other[e12345]),
                -(self[e43] * other[e125]) - (self[e45] * other[e12345]),
            ]) - (other.group1().zxyx() * self.group0().yzx().extend_to_4(self[e41]))
                - (self.group1().yzx() * other.group0().zxy()).extend_to_4(self[e42] * other[e315]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e23] * other[e5]) + (self[e12] * other[e315]) + (self[e45] * other[e235]) + (self[e35] * other[e425]),
                (self[e23] * other[e125]) + (self[e31] * other[e5]) + (self[e45] * other[e315]) + (self[e25] * other[e12345]),
                (self[e31] * other[e235]) + (self[e12] * other[e5]) + (self[e45] * other[e125]) + (self[e35] * other[e12345]),
                -(self[e23] * other[e235]) - (self[e31] * other[e315]) - (self[e12] * other[e125]) - (self[e35] * other[e435]),
            ]) + (self.group2().xxy() * other.group0().wzx()).extend_to_4(self[e45] * other[e5])
                - (other.group0().zxyx() * self.group2().yzx().extend_to_4(self[e15]))
                - (self.group1().yzx() * other.group1().zxy()).extend_to_4(self[e25] * other[e425]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e41] * other[e5]) + (self[e43] * other[e315]),
                (self[e41] * other[e125]) + (self[e42] * other[e5]),
                (self[e42] * other[e235]) + (self[e43] * other[e5]),
                self[e43] * other[e435] * -1.0,
            ]) - (other.group0().xyzy() * self.group1().www().extend_to_4(self[e42]))
                - (self.group0().yzx() * other.group1().zxy()).extend_to_4(self[e41] * other[e415]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for Dipole {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      100      164        0
    //    simd2       18       18        0
    //    simd3       72      104        0
    //    simd4       56       35        0
    // Totals...
    // yes simd      246      321        0
    //  no simd      576      652        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([self[e45] * other[e45], self[e45] * other[e321] * -1.0])
                - (Simd32x2::from(self[e41]) * Simd32x2::from([other[e15], other[e235]]))
                - (Simd32x2::from(self[e42]) * Simd32x2::from([other[e25], other[e315]]))
                - (Simd32x2::from(self[e43]) * Simd32x2::from([other[e35], other[e125]]))
                - (Simd32x2::from(self[e23]) * Simd32x2::from([other[e23], other[e415]]))
                - (Simd32x2::from(self[e31]) * Simd32x2::from([other[e31], other[e425]]))
                - (Simd32x2::from(self[e12]) * Simd32x2::from([other[e12], other[e435]]))
                - (Simd32x2::from(self[e15]) * Simd32x2::from([other[e41], other[e423]]))
                - (Simd32x2::from(self[e25]) * Simd32x2::from([other[e42], other[e431]]))
                - (Simd32x2::from(self[e35]) * Simd32x2::from([other[e43], other[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e23] * other[e321]) + (self[e12] * other[e2]),
                (self[e23] * other[e3]) + (self[e31] * other[e321]),
                (self[e31] * other[e1]) + (self[e12] * other[e321]),
                -(self[e12] * other[e412]) - (self[e45] * other[e4]),
            ]) + (Simd32x4::from([other[e5], other[e125], other[e235], other[e1]]) * self.group0().xxy().extend_to_4(self[e41]))
                + (Simd32x4::from([other[e315], other[e5], other[e5], other[e2]]) * self.group0().zyz().extend_to_4(self[e42]))
                + (self.group2().yzx() * other.group7().zxy()).extend_to_4(self[e43] * other[e3])
                - (Simd32x4::from([other[e4], other[e412], other[e423], other[e425]]) * self.group2().xxy().extend_to_4(self[e42]))
                - (Simd32x4::from([other[e431], other[e4], other[e4], other[e435]]) * self.group2().zyz().extend_to_4(self[e43]))
                - (self.group0().yzx() * other.group8().zxy()).extend_to_4(self[e41] * other[e415])
                - (self.group1().yzx() * other.group1().zxy()).extend_to_4(self[e23] * other[e423])
                - (self.group1().www() * other.group6().truncate_to_3()).extend_to_4(self[e31] * other[e431]),
            // e5
            (self[e45] * other[e5])
                - (self[e23] * other[e235])
                - (self[e31] * other[e315])
                - (self[e12] * other[e125])
                - (self[e15] * other[e1])
                - (self[e15] * other[e415])
                - (self[e25] * other[e2])
                - (self[e25] * other[e425])
                - (self[e35] * other[e3])
                - (self[e35] * other[e435]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e12] * other[e25]) + (self[e45] * other[e15]),
                (self[e31] * other[e3215]) + (self[e45] * other[e25]),
                (self[e12] * other[e3215]) + (self[e45] * other[e35]),
                -(self[e31] * other[e4315]) - (self[e12] * other[e4125]),
            ]) + (Simd32x4::from(other[scalar]) * self.group2().extend_to_4(self[e45]))
                + (Simd32x4::from([other[e31], other[e4235], other[e23], other[e25]]) * self.group2().zzy().extend_to_4(self[e42]))
                + (Simd32x4::from([other[e4125], other[e12], other[e4315], other[e15]]) * self.group2().yxx().extend_to_4(self[e41]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e35]]) * self.group1().xxy().extend_to_4(self[e43]))
                - (Simd32x4::from(self[e15]) * Simd32x4::from([other[e45], other[e4125], other[e31], other[e41]]))
                - (Simd32x4::from(self[e25]) * Simd32x4::from([other[e12], other[e45], other[e4235], other[e42]]))
                - (Simd32x4::from(self[e35]) * Simd32x4::from([other[e4315], other[e23], other[e45], other[e43]]))
                - (self.group1().yzxx() * other.group3().zxy().extend_to_4(other[e4235])),
            // e41, e42, e43
            (Simd32x3::from(other[scalar]) * self.group0())
                + (Simd32x3::from(other[e1234]) * self.group1().truncate_to_3())
                + (Simd32x3::from([other[e45], other[e12], other[e23]]) * self.group0().xxy())
                + (Simd32x3::from([other[e31], other[e4125], other[e4235]]) * self.group0().zxy())
                + (Simd32x3::from([other[e4315], other[e45], other[e45]]) * self.group0().zyz())
                + (other.group4().yzx() * self.group1().zxy())
                - (self.group0().yzx() * other.group5().zxy())
                - (self.group0().yzx() * other.group9().zxy())
                - (other.group4().xxy() * self.group1().wzx())
                - (other.group4().zyz() * self.group1().yww()),
            // e23, e31, e12
            (Simd32x3::from(self[e45]) * other.group9().truncate_to_3())
                + (Simd32x3::from(other[scalar]) * self.group1().truncate_to_3())
                + (Simd32x3::from([other[e25], other[e3215], other[e3215]]) * self.group0().zyz())
                + (Simd32x3::from([other[e42], other[e1234], other[e1234]]) * self.group2().zyz())
                + (Simd32x3::from([other[e3215], other[e35], other[e15]]) * self.group0().xxy())
                + (Simd32x3::from([other[e1234], other[e43], other[e41]]) * self.group2().xxy())
                + (other.group5().yzx() * self.group1().zxy())
                - (self.group0().yzx() * other.group3().zxy())
                - (self.group2().yzx() * other.group4().zxy())
                - (other.group5().zxy() * self.group1().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e12] * other[e425]) + (self[e15] * other[e4]) + (self[e35] * other[e431]),
                (self[e23] * other[e435]) + (self[e15] * other[e412]) + (self[e25] * other[e4]),
                (self[e31] * other[e415]) + (self[e25] * other[e423]) + (self[e35] * other[e4]),
                -(self[e23] * other[e1]) - (self[e31] * other[e2]) - (self[e12] * other[e3]),
            ]) + (Simd32x4::from([other[e5], other[e125], other[e235], other[e431]]) * self.group0().xxy().extend_to_4(self[e25]))
                + (Simd32x4::from([other[e315], other[e5], other[e5], other[e412]]) * self.group0().zyz().extend_to_4(self[e35]))
                + (other.group0().yy().extend_to_4(other[e12345], self[e15]) * self.group1().truncate_to_3().extend_to_4(other[e423]))
                - (self.group0().yzx() * other.group8().zxy()).extend_to_4(self[e45] * other[e12345])
                - (self.group2().yzx() * other.group7().zxy()).extend_to_4(self[e41] * other[e235])
                - (self.group1().yzx() * other.group6().zxy()).extend_to_4(self[e42] * other[e315])
                - (self.group1().www() * other.group1().truncate_to_3()).extend_to_4(self[e43] * other[e125]),
            // e423, e431, e412
            (Simd32x3::from(other[e12345]) * self.group0())
                + (Simd32x3::from(other[e4]) * self.group1().truncate_to_3())
                + (Simd32x3::from([other[e3], other[e435], other[e2]]) * self.group0().yxx())
                + (Simd32x3::from([other[e425], other[e1], other[e415]]) * self.group0().zzy())
                + (other.group7().yzx() * self.group1().zxy())
                - (Simd32x3::from(self[e41]) * Simd32x3::from([other[e321], other[e3], other[e425]]))
                - (Simd32x3::from(self[e42]) * Simd32x3::from([other[e435], other[e321], other[e1]]))
                - (Simd32x3::from(self[e43]) * Simd32x3::from([other[e2], other[e415], other[e321]]))
                - (other.group7().xxy() * self.group1().wzx())
                - (other.group7().zyz() * self.group1().yww()),
            // e235, e315, e125
            (Simd32x3::from(other[e12345]) * self.group2())
                + (Simd32x3::from(other[e5]) * self.group1().truncate_to_3())
                + (Simd32x3::from([other[e2], other[e435], other[e415]]) * self.group2().zxy())
                + (Simd32x3::from([other[e321], other[e3], other[e1]]) * self.group2().xxy())
                + (self.group2().zyz() * other.group6().yww())
                + (other.group8().xyx() * self.group1().wwy())
                + (other.group8().yzz() * self.group1().zxw())
                - (self.group2().yzx() * other.group1().zxy())
                - (self.group2().yzx() * other.group6().zxy())
                - (other.group8().zxy() * self.group1().yzx()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e23] * other[e45]) + (self[e12] * other[e4315]),
                (self[e23] * other[e4125]) + (self[e31] * other[e45]),
                (self[e31] * other[e4235]) + (self[e12] * other[e45]),
                -(self[e31] * other[e25]) - (self[e12] * other[e35]),
            ]) + (Simd32x4::from([other[e42], other[e1234], other[e1234], other[e4125]]) * self.group2().zyz().extend_to_4(self[e35]))
                + (Simd32x4::from([other[e1234], other[e43], other[e41], other[e4315]]) * self.group2().xxy().extend_to_4(self[e25]))
                + (other.group5() * self.group1().www()).extend_to_4(self[e45] * other[e3215])
                + (self.group0().yzx() * other.group3().zxy()).extend_to_4(self[e15] * other[e4235])
                - (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e31]]) * self.group0().zyz().extend_to_4(self[e25]))
                - (Simd32x4::from([other[e3215], other[e35], other[e15], other[e23]]) * self.group0().xxy().extend_to_4(self[e15]))
                - (self.group1().yzxx() * other.group9().zxy().extend_to_4(other[e15]))
                - (self.group2().yzx() * other.group4().zxy()).extend_to_4(self[e35] * other[e12]),
            // e1234
            -(self[e41] * other[e23])
                - (self[e41] * other[e4235])
                - (self[e42] * other[e31])
                - (self[e42] * other[e4315])
                - (self[e43] * other[e12])
                - (self[e43] * other[e4125])
                - (self[e23] * other[e41])
                - (self[e31] * other[e42])
                - (self[e12] * other[e43])
                - (self[e45] * other[e1234]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       92        0
    //    simd3        1       12        0
    //    simd4       25       18        0
    // Totals...
    // yes simd       82      122        0
    //  no simd      159      200        0
    fn sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (self.group0().zxy() * other.group0().yzx()) - (self.group0().yzx() * other.group0().zxy()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e41] * other[e3215]) + (self[e45] * other[e4235]),
                (self[e42] * other[e3215]) + (self[e45] * other[e4315]),
                (self[e43] * other[e3215]) + (self[e45] * other[e4125]),
                -(self[e23] * other[e4235]) - (self[e31] * other[e4315]) - (self[e12] * other[e4125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e25] * other[e4125]),
                (self[e31] * other[e3215]) + (self[e35] * other[e4235]),
                (self[e12] * other[e3215]) + (self[e15] * other[e4315]),
                -(self[e42] * other[e4315]) - (self[e43] * other[e4125]),
            ]) - (other.group0().yzxx() * self.group2().zxy().extend_to_4(self[e41])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(self[e41] * other[e3215]) - (self[e31] * other[e4125]),
                -(self[e42] * other[e3215]) - (self[e12] * other[e4235]),
                -(self[e43] * other[e3215]) - (self[e23] * other[e4315]),
                (self[e45] * other[e3215]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]),
            ]) + (other.group0().yzxx() * self.group1().zxy().extend_to_4(self[e15])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       42       80        0
    //    simd3        2       17        0
    //    simd4       31       20        0
    // Totals...
    // yes simd       75      117        0
    //  no simd      172      211        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other[e4]) * self.group1().truncate_to_3()) + (self.group0().yzx() * other.group0().zxy()) - (self.group0().zxy() * other.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e41] * other[e5]) + (self[e15] * other[e4]),
                (self[e42] * other[e5]) + (self[e25] * other[e4]),
                (self[e43] * other[e5]) + (self[e35] * other[e4]),
                -(self[e31] * other[e2]) - (self[e12] * other[e3]),
            ]) - (self.group1().wwwx() * other.group0().xyzx()),
            // e235, e315, e125, e4
            (Simd32x4::from([other[e5], other[e5], other[e5], other[e2]]) * self.group1().truncate_to_3().extend_to_4(self[e42]))
                + (other.group0().yzxx() * self.group2().zxy().extend_to_4(self[e41]))
                + Simd32x3::from(0.0).extend_to_4(self[e43] * other[e3])
                - (other.group0().zxyw() * self.group2().yzx().extend_to_4(self[e45])),
            // e1, e2, e3, e5
            Simd32x4::from([self[e12] * other[e2], self[e23] * other[e3], self[e31] * other[e1], self[e35] * other[e3] * -1.0])
                + (Simd32x4::from(other[e5]) * self.group0().extend_to_4(self[e45]))
                - (other.group0().zxyy() * self.group1().yzx().extend_to_4(self[e25]))
                - (other.group0().wwwx() * self.group2().extend_to_4(self[e15])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       53        0
    //    simd3        0       17        0
    //    simd4       14        4        0
    // Totals...
    // yes simd       42       74        0
    //  no simd       84      120        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[scalar]) * self.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other[scalar]) * self.group1(),
            // e15, e25, e35
            Simd32x3::from(other[scalar]) * self.group2(),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       59       95        0
    //    simd3        2       13        0
    //    simd4       26       19        0
    // Totals...
    // yes simd       87      127        0
    //  no simd      169      210        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other[e1234]) * self.group1().truncate_to_3()) + (self.group0().zxy() * other.group0().yzx()) - (self.group0().yzx() * other.group0().zxy()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e41] * other[e3215]) + (self[e45] * other[e4235]) + (self[e15] * other[e1234]),
                (self[e42] * other[e3215]) + (self[e45] * other[e4315]) + (self[e25] * other[e1234]),
                (self[e43] * other[e3215]) + (self[e45] * other[e4125]) + (self[e35] * other[e1234]),
                -(self[e23] * other[e4235]) - (self[e31] * other[e4315]) - (self[e12] * other[e4125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e25] * other[e4125]),
                (self[e31] * other[e3215]) + (self[e35] * other[e4235]),
                (self[e12] * other[e3215]) + (self[e15] * other[e4315]),
                -(self[e42] * other[e4315]) - (self[e43] * other[e4125]) - (self[e45] * other[e1234]),
            ]) - (other.group0().yzxx() * self.group2().zxy().extend_to_4(self[e41])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(self[e41] * other[e3215]) - (self[e31] * other[e4125]),
                -(self[e42] * other[e3215]) - (self[e12] * other[e4235]),
                -(self[e43] * other[e3215]) - (self[e23] * other[e4315]),
                (self[e45] * other[e3215]) + (self[e35] * other[e4125]),
            ]) + (Simd32x4::from([other[e1234], other[e1234], other[e1234], other[e4235]]) * self.group2().extend_to_4(self[e15]))
                + (other.group0().yzxy() * self.group1().zxy().extend_to_4(self[e25])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       96      146        0
    //    simd3        0       20        0
    //    simd4       48       31        0
    // Totals...
    // yes simd      144      197        0
    //  no simd      288      330        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e41] * other[e12345]) + (self[e42] * other[e3]) + (self[e43] * other[e425]) + (self[e23] * other[e4]) + (self[e12] * other[e431]),
                (self[e41] * other[e435]) + (self[e42] * other[e12345]) + (self[e43] * other[e1]) + (self[e23] * other[e412]) + (self[e31] * other[e4]),
                (self[e41] * other[e2]) + (self[e42] * other[e415]) + (self[e43] * other[e12345]) + (self[e31] * other[e423]) + (self[e12] * other[e4]),
                -(self[e23] * other[e415]) - (self[e31] * other[e425]) - (self[e12] * other[e435]) - (self[e45] * other[e321]) - (self[e35] * other[e412]),
            ]) - (Simd32x4::from(self[e41]) * Simd32x4::from([other[e321], other[e3], other[e425], other[e235]]))
                - (Simd32x4::from(self[e42]) * other.group1().zw().extend_to_4(other[e1], other[e315]))
                - (Simd32x4::from(self[e43]) * Simd32x4::from([other[e2], other[e415], other[e321], other[e125]]))
                - (other.group0().xyzy() * self.group1().www().extend_to_4(self[e25]))
                - (other.group0().zxyx() * self.group1().yzx().extend_to_4(self[e15])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e23] * other[e12345]) + (self[e12] * other[e425]) + (self[e35] * other[e431]),
                (self[e23] * other[e435]) + (self[e31] * other[e12345]) + (self[e25] * other[e4]),
                (self[e31] * other[e415]) + (self[e12] * other[e12345]) + (self[e35] * other[e4]),
                -(self[e31] * other[e2]) - (self[e12] * other[e3]) - (self[e45] * other[e12345]),
            ]) + (Simd32x4::from([other[e4], other[e412], other[e423], other[e412]]) * self.group2().xxy().extend_to_4(self[e35]))
                + (self.group0().xxy() * other.group2().wzx()).extend_to_4(self[e15] * other[e423])
                + (self.group0().zyz() * other.group2().yww()).extend_to_4(self[e25] * other[e431])
                - (self.group1().wwwx() * other.group3().xyzx())
                - (other.group2().zxyx() * self.group0().yzx().extend_to_4(self[e41]))
                - (self.group2().yzx() * other.group0().zxy()).extend_to_4(self[e42] * other[e315])
                - (self.group1().yzx() * other.group1().zxy()).extend_to_4(self[e43] * other[e125]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e23] * other[e5]) + (self[e12] * other[e315]) + (self[e45] * other[e235]) + (self[e15] * other[e321]) + (self[e35] * other[e425]) + (self[e35] * other[e2]),
                (self[e23] * other[e125]) + (self[e31] * other[e5]) + (self[e45] * other[e315]) + (self[e15] * other[e3]) + (self[e25] * other[e12345]) + (self[e25] * other[e321]),
                (self[e31] * other[e235]) + (self[e12] * other[e5]) + (self[e45] * other[e125]) + (self[e25] * other[e1]) + (self[e35] * other[e12345]) + (self[e35] * other[e321]),
                -(self[e23] * other[e235]) - (self[e31] * other[e315]) - (self[e12] * other[e125]) - (self[e25] * other[e2]) - (self[e35] * other[e435]) - (self[e35] * other[e3]),
            ]) + (Simd32x4::from([other[e12345], other[e435], other[e415], other[e5]]) * self.group2().xxy().extend_to_4(self[e45]))
                - (other.group1().zxyx() * self.group2().yzx().extend_to_4(self[e15]))
                - (other.group3().zxyx() * self.group2().yzx().extend_to_4(self[e15]))
                - (self.group1().yzx() * other.group2().zxy()).extend_to_4(self[e25] * other[e425]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e23] * other[e321]) + (self[e12] * other[e2]),
                (self[e23] * other[e3]) + (self[e31] * other[e321]),
                (self[e31] * other[e1]) + (self[e12] * other[e321]),
                -(self[e12] * other[e412]) - (self[e45] * other[e4]),
            ]) + (self.group0().xxy() * other.group2().wzx()).extend_to_4(self[e41] * other[e1])
                + (self.group0().zyz() * other.group2().yww()).extend_to_4(self[e42] * other[e2])
                + (self.group2().yzx() * other.group0().zxy()).extend_to_4(self[e43] * other[e3])
                - (Simd32x4::from([other[e431], other[e4], other[e4], other[e435]]) * self.group2().zyz().extend_to_4(self[e43]))
                - (Simd32x4::from([other[e4], other[e412], other[e423], other[e425]]) * self.group2().xxy().extend_to_4(self[e42]))
                - (self.group1().yzxx() * other.group3().zxy().extend_to_4(other[e423]))
                - (self.group1().wwwy() * other.group1().truncate_to_3().extend_to_4(other[e431]))
                - (self.group0().yzx() * other.group2().zxy()).extend_to_4(self[e41] * other[e415]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       96      141        0
    //    simd3        0       15        0
    //    simd4       48       36        0
    // Totals...
    // yes simd      144      192        0
    //  no simd      288      330        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e41] * other[e45]) + (self[e43] * other[e31]) + (self[e43] * other[e4315]) + (self[e23] * other[e1234]) + (self[e12] * other[e42]),
                (self[e41] * other[e4125]) + (self[e42] * other[scalar]) + (self[e42] * other[e45]) + (self[e23] * other[e43]) + (self[e31] * other[e1234]),
                (self[e42] * other[e4235]) + (self[e43] * other[scalar]) + (self[e43] * other[e45]) + (self[e31] * other[e41]) + (self[e12] * other[e1234]),
                -(self[e23] * other[e23]) - (self[e31] * other[e31]) - (self[e12] * other[e12]) - (self[e25] * other[e42]) - (self[e35] * other[e43]),
            ]) + (Simd32x4::from([other[scalar], other[e12], other[e23], other[e45]]) * self.group0().xxy().extend_to_4(self[e45]))
                - (other.group0().xyzx() * self.group1().www().extend_to_4(self[e15]))
                - (self.group0().yzx() * other.group1().zxy()).extend_to_4(self[e41] * other[e15])
                - (self.group0().yzx() * other.group3().zxy()).extend_to_4(self[e42] * other[e25])
                - (self.group1().yzx() * other.group0().zxy()).extend_to_4(self[e43] * other[e35]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e23] * other[scalar]) + (self[e12] * other[e31]) + (self[e45] * other[e4235]),
                (self[e23] * other[e12]) + (self[e31] * other[scalar]) + (self[e45] * other[e4315]),
                (self[e31] * other[e23]) + (self[e12] * other[scalar]) + (self[e45] * other[e4125]),
                -(self[e23] * other[e4235]) - (self[e31] * other[e4315]) - (self[e12] * other[e4125]),
            ]) + (Simd32x4::from([other[e42], other[e1234], other[e1234], other[scalar]]) * self.group2().zyz().extend_to_4(self[e45]))
                + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e25]]) * self.group0().zyz().extend_to_4(self[e42]))
                + (Simd32x4::from([other[e1234], other[e43], other[e41], other[e35]]) * self.group2().xxy().extend_to_4(self[e43]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e15]]) * self.group0().xxy().extend_to_4(self[e41]))
                - (other.group0().zxyy() * self.group2().yzx().extend_to_4(self[e25]))
                - (self.group0().yzx() * other.group2().zxy()).extend_to_4(self[e15] * other[e41])
                - (self.group1().yzx() * other.group1().zxy()).extend_to_4(self[e35] * other[e43]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * other[e3215])
                    + (self[e12] * other[e25])
                    + (self[e45] * other[e15])
                    + (self[e15] * other[scalar])
                    + (self[e25] * other[e4125])
                    + (self[e35] * other[e31]),
                (self[e23] * other[e35])
                    + (self[e31] * other[e3215])
                    + (self[e45] * other[e25])
                    + (self[e15] * other[e12])
                    + (self[e25] * other[scalar])
                    + (self[e35] * other[e4235]),
                (self[e31] * other[e15])
                    + (self[e12] * other[e3215])
                    + (self[e45] * other[e35])
                    + (self[e15] * other[e4315])
                    + (self[e25] * other[e23])
                    + (self[e35] * other[scalar]),
                -(self[e43] * other[e12])
                    - (self[e43] * other[e4125])
                    - (self[e23] * other[e41])
                    - (self[e31] * other[e42])
                    - (self[e12] * other[e43])
                    - (self[e45] * other[e1234]),
            ]) - (Simd32x4::from([other[e45], other[e4125], other[e31], other[e23]]) * self.group2().xxx().extend_to_4(self[e41]))
                - (Simd32x4::from([other[e4315], other[e23], other[e45], other[e31]]) * self.group2().zzz().extend_to_4(self[e42]))
                - (other.group1().zw().extend_to_4(other[e4235], other[e4235]) * self.group2().yyy().extend_to_4(self[e41]))
                - (self.group1().yzx() * other.group2().zxy()).extend_to_4(self[e42] * other[e4315]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e12] * other[e4315]) + (self[e45] * other[e23]),
                (self[e31] * other[e45]) + (self[e45] * other[e31]),
                (self[e12] * other[e45]) + (self[e45] * other[e12]),
                -(self[e31] * other[e25]) - (self[e12] * other[e35]),
            ]) + (Simd32x4::from([other[e42], other[e1234], other[e1234], other[e4125]]) * self.group2().zyz().extend_to_4(self[e35]))
                + (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e3215]]) * self.group1().xxyw())
                + (Simd32x4::from([other[e1234], other[e43], other[e41], other[e4315]]) * self.group2().xxy().extend_to_4(self[e25]))
                + (self.group0().yzx() * other.group2().zxy()).extend_to_4(self[e15] * other[e4235])
                - (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e31]]) * self.group0().zyz().extend_to_4(self[e25]))
                - (Simd32x4::from([other[e3215], other[e35], other[e15], other[e23]]) * self.group0().xxy().extend_to_4(self[e15]))
                - (self.group1().yzxx() * other.group3().zxy().extend_to_4(other[e15]))
                - (self.group2().yzx() * other.group0().zxy()).extend_to_4(self[e35] * other[e12]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl std::ops::Div<sandwich> for DipoleInversion {
    type Output = sandwich_partial<DipoleInversion>;
    fn div(self, _rhs: sandwich) -> Self::Output {
        sandwich_partial(self)
    }
}
impl Sandwich<AntiCircleRotor> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      109      158        0
    //    simd3        0       18        0
    //    simd4       66       51        0
    // Totals...
    // yes simd      175      227        0
    //  no simd      373      416        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e43] * self[e4315]) + (other[e23] * self[e1234]) + (other[e31] * self[e43]) + (other[e45] * self[e41]) + (other[scalar] * self[e41]),
                (other[e43] * self[e23]) + (other[e31] * self[e1234]) + (other[e12] * self[e41]) + (other[e45] * self[e42]) + (other[scalar] * self[e42]),
                (other[e42] * self[e4235]) + (other[e23] * self[e42]) + (other[e12] * self[e1234]) + (other[e45] * self[e43]) + (other[scalar] * self[e43]),
                -(other[e23] * self[e23]) - (other[e31] * self[e31]) - (other[e12] * self[e12]) - (other[e25] * self[e42]) - (other[e35] * self[e43]),
            ]) + (Simd32x4::from([self[e12], self[e4125], self[e31], self[e45]]) * other.group0().yxx().extend_to_4(other[e45]))
                - (Simd32x4::from(other[e41]) * self.group1().wz().extend_to_4(self[e4315], self[e15]))
                - (Simd32x4::from(other[e42]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(other[e43]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]]))
                - (self.group0().yzx() * other.group1().zxy()).extend_to_4(other[e15] * self[e41]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e45] * self[e4235]) + (other[e15] * self[e1234]) + (other[scalar] * self[e23]),
                (other[e45] * self[e4315]) + (other[e25] * self[e1234]) + (other[scalar] * self[e31]),
                (other[e45] * self[e4125]) + (other[e35] * self[e1234]) + (other[scalar] * self[e12]),
                -(other[e23] * self[e4235]) - (other[e31] * self[e4315]) - (other[e12] * self[e4125]),
            ]) + (other.group2().yzxz() * self.group0().zxy().extend_to_4(self[e43]))
                + (self.group1().zxyw() * other.group1().yzx().extend_to_4(other[scalar]))
                + (self.group2().zx().extend_to_4(self[e3215], other[e25]) * other.group0().yzz().extend_to_4(self[e42]))
                + (self.group3().ww().extend_to_4(self[e25], other[e15]) * other.group0().xyx().extend_to_4(self[e41]))
                - (self.group2().yzxx() * other.group0().zxy().extend_to_4(other[e41]))
                - (self.group0().yzx() * other.group2().zxy()).extend_to_4(other[e42] * self[e25])
                - (other.group1().zxy() * self.group1().yzx()).extend_to_4(other[e43] * self[e35]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                other[scalar] * self[e15],
                other[scalar] * self[e25],
                other[scalar] * self[e35],
                -(other[e31] * self[e42]) - (other[e12] * self[e43]),
            ]) + (other.group2().yzzw() * self.group3().zx().extend_to_4(self[e45], self[e1234]))
                + (self.group1().zx().extend_to_4(self[e4315], self[e1234]) * other.group2().yzx().extend_to_4(other[e45]))
                + (self.group2().zx().extend_to_4(self[e3215], self[e4315]) * other.group1().yzz().extend_to_4(other[e42]))
                + (self.group3().ww().extend_to_4(self[e25], self[e4235]) * other.group1().xyx().extend_to_4(other[e41]))
                + (other.group2().xyx() * self.group1().wwy()).extend_to_4(other[e43] * self[e4125])
                - (self.group1().yzxz() * other.group2().zxy().extend_to_4(other[e43]))
                - (other.group1().zxy() * self.group2().yzx()).extend_to_4(other[e41] * self[e23])
                - (other.group1().www() * self.group2().truncate_to_3()).extend_to_4(other[e42] * self[e31])
                - (other.group2().zxy() * self.group3().yzx()).extend_to_4(other[e23] * self[e41]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e42] * self[e35])
                    + (other[e23] * self[e45])
                    + (other[e31] * self[e4125])
                    + (other[e45] * self[e23])
                    + (other[e35] * self[e42])
                    + (other[scalar] * self[e4235]),
                (other[e43] * self[e15])
                    + (other[e31] * self[e45])
                    + (other[e12] * self[e4235])
                    + (other[e45] * self[e31])
                    + (other[e15] * self[e43])
                    + (other[scalar] * self[e4315]),
                (other[e43] * self[e3215])
                    + (other[e23] * self[e4315])
                    + (other[e12] * self[e45])
                    + (other[e45] * self[e12])
                    + (other[e25] * self[e41])
                    + (other[scalar] * self[e4125]),
                -(other[e15] * self[e23])
                    - (other[e15] * self[e4235])
                    - (other[e25] * self[e31])
                    - (other[e25] * self[e4315])
                    - (other[e35] * self[e12])
                    - (other[e35] * self[e4125]),
            ]) + (self.group3().ww().extend_to_4(self[e25], self[e3215]) * other.group0().xyx().extend_to_4(other[scalar]))
                - (other.group1().zxyz() * self.group3().yzx().extend_to_4(self[e35]))
                - (self.group2().yzxx() * other.group0().zxy().extend_to_4(other[e23]))
                - (self.group0().zxy() * other.group2().yzx()).extend_to_4(other[e31] * self[e25])
                - (self.group2().www() * other.group2().truncate_to_3()).extend_to_4(other[e45] * self[e3215]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       65      127        0
    //    simd3        0       33        0
    //    simd4       92       63        0
    // Totals...
    // yes simd      157      223        0
    //  no simd      433      478        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                other[e4] * self[e23],
                other[e4] * self[e31],
                other[e4] * self[e12],
                -(other[e435] * self[e12]) - (other[e321] * self[e45]),
            ]) + (Simd32x4::from(self[e1234]) * other.group1().truncate_to_3().extend_to_4(other[e5]))
                + (Simd32x4::from([other[e425], other[e1], other[e415], self[e4125]]) * self.group0().zzy().extend_to_4(other[e3]))
                + (Simd32x4::from([other[e3], other[e435], other[e2], self[e4315]]) * self.group0().yxx().extend_to_4(other[e2]))
                + (Simd32x4::from([self[e12], self[e4125], self[e31], self[e3215]]) * other.group0().yxx().extend_to_4(other[e4]))
                + (Simd32x4::from([self[e4315], self[e23], self[e4235], self[e4235]]) * other.group0().zzy().extend_to_4(other[e1]))
                - (Simd32x4::from(other[e423]) * self.group1().wz().extend_to_4(self[e4315], self[e15]))
                - (Simd32x4::from(other[e431]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(other[e412]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]]))
                - (Simd32x4::from(self[e41]) * Simd32x4::from([other[e321], other[e3], other[e425], other[e235]]))
                - (Simd32x4::from(self[e42]) * other.group1().zw().extend_to_4(other[e1], other[e315]))
                - (Simd32x4::from(self[e43]) * Simd32x4::from([other[e2], other[e415], other[e321], other[e125]]))
                - (other.group2().www() * self.group3().truncate_to_3()).extend_to_4(other[e415] * self[e23])
                - (self.group2().www() * other.group3().truncate_to_3()).extend_to_4(other[e425] * self[e31]),
            // e415, e425, e435, e321
            Simd32x4::from([other[e3] * self[e4315], other[e1] * self[e4125], other[e2] * self[e4235], other[e3] * self[e12] * -1.0])
                + (Simd32x4::from([other[e315], other[e5], other[e5], self[e4235]]) * self.group0().zyz().extend_to_4(other[e415]))
                + (Simd32x4::from([other[e5], other[e125], other[e235], self[e35]]) * self.group0().xxy().extend_to_4(other[e412]))
                + (self.group2() * other.group2().www().extend_to_4(other[e5]))
                + (other.group1().yzxy() * self.group1().zxy().extend_to_4(self[e4315]))
                + (self.group2().zx().extend_to_4(self[e3215], self[e25]) * other.group0().yzz().extend_to_4(other[e431]))
                + (self.group3().ww().extend_to_4(self[e25], self[e15]) * other.group0().xyx().extend_to_4(other[e423]))
                + (self.group2().www() * other.group2().truncate_to_3()).extend_to_4(other[e435] * self[e4125])
                - (self.group3() * other.group1().www().extend_to_4(other[e4]))
                - (other.group2().zxyy() * self.group0().yzx().extend_to_4(self[e42]))
                - (other.group3().xyxx() * self.group1().ww().extend_to_4(self[e4315], self[e23]))
                - (other.group3().yzzy() * self.group3().zx().extend_to_4(self[e45], self[e31]))
                - (other.group0().zxy() * self.group2().yzx()).extend_to_4(other[e235] * self[e41])
                - (other.group1().zxy() * self.group1().yzx()).extend_to_4(other[e125] * self[e43]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e321] * self[e15])
                    + (other[e235] * self[e45])
                    + (other[e315] * self[e12])
                    + (other[e315] * self[e4125])
                    + (other[e1] * self[e3215])
                    + (other[e2] * self[e35])
                    + (other[e5] * self[e23])
                    + (other[e5] * self[e4235]),
                (other[e321] * self[e25])
                    + (other[e315] * self[e45])
                    + (other[e125] * self[e23])
                    + (other[e125] * self[e4235])
                    + (other[e2] * self[e3215])
                    + (other[e3] * self[e15])
                    + (other[e5] * self[e31])
                    + (other[e5] * self[e4315]),
                (other[e321] * self[e35])
                    + (other[e235] * self[e31])
                    + (other[e235] * self[e4315])
                    + (other[e125] * self[e45])
                    + (other[e1] * self[e25])
                    + (other[e3] * self[e3215])
                    + (other[e5] * self[e12])
                    + (other[e5] * self[e4125]),
                -(other[e235] * self[e4235])
                    - (other[e315] * self[e31])
                    - (other[e315] * self[e4315])
                    - (other[e125] * self[e12])
                    - (other[e125] * self[e4125])
                    - (other[e1] * self[e15])
                    - (other[e2] * self[e25])
                    - (other[e3] * self[e35]),
            ]) + (other.group1().xyxw() * self.group3().ww().extend_to_4(self[e25], self[e3215]))
                + (self.group2().zx().extend_to_4(self[e3215], self[e45]) * other.group1().yzz().extend_to_4(other[e5]))
                - (other.group1().zxyx() * self.group2().yzxx())
                - (other.group2().zxy() * self.group1().yzx()).extend_to_4(other[e425] * self[e25])
                - (other.group2().zxy() * self.group3().yzx()).extend_to_4(other[e435] * self[e35])
                - (other.group3().zxy() * self.group2().yzx()).extend_to_4(other[e235] * self[e23]),
            // e1, e2, e3, e4
            Simd32x4::from([other[e2] * self[e12], other[e3] * self[e23], other[e1] * self[e31], other[e4] * self[e45] * -1.0])
                + (Simd32x4::from([other[e315], other[e5], other[e5], self[e4125]]) * self.group0().zyz().extend_to_4(other[e412]))
                + (Simd32x4::from([other[e5], other[e125], other[e235], self[e4315]]) * self.group0().xxy().extend_to_4(other[e431]))
                + (other.group0().zxy() * self.group2().yzx()).extend_to_4(other[e423] * self[e4235])
                + (other.group1().zxy() * self.group3().yzx()).extend_to_4(other[e1] * self[e41])
                + (other.group1().www() * self.group1().truncate_to_3()).extend_to_4(other[e2] * self[e42])
                + (self.group2().www() * other.group2().truncate_to_3()).extend_to_4(other[e3] * self[e43])
                - (self.group1().ww().extend_to_4(self[e4315], other[e415]) * other.group1().xyx().extend_to_4(self[e41]))
                - (self.group2().zx().extend_to_4(self[e3215], self[e31]) * other.group0().yzz().extend_to_4(other[e431]))
                - (self.group3().zx().extend_to_4(self[e45], other[e425]) * other.group1().yzz().extend_to_4(self[e42]))
                - (self.group3().ww().extend_to_4(self[e25], self[e23]) * other.group0().xyx().extend_to_4(other[e423]))
                - (self.group0().yzx() * other.group2().zxy()).extend_to_4(other[e412] * self[e12])
                - (other.group2().www() * self.group2().truncate_to_3()).extend_to_4(other[e435] * self[e43])
                - (other.group3().zxy() * self.group1().yzx()).extend_to_4(other[e321] * self[e1234]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64      101        0
    //    simd3        2       12        0
    //    simd4       42       37        0
    // Totals...
    // yes simd      108      150        0
    //  no simd      238      285        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            other.group0().yy().extend_to_4(other[scalar], other[e3215]) * self.group0().extend_to_4(self[e1234]),
            // e23, e31, e12, e45
            Simd32x4::from([other[scalar] * self[e23], other[scalar] * self[e31], other[scalar] * self[e12], other[e3215] * self[e1234] * -1.0])
                + (other.group0().xx().extend_to_4(other[e3215], other[scalar]) * self.group0().extend_to_4(self[e45])),
            // e15, e25, e35, e1234
            ((Simd32x3::from(other[e3215]) * self.group1().truncate_to_3())
                + (Simd32x3::from(other[e3215]) * self.group3().truncate_to_3())
                + (Simd32x3::from(other[scalar]) * self.group2().truncate_to_3()))
            .extend_to_4(other[scalar] * self[e1234]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e3215] * self[e41] * -1.0,
                other[e3215] * self[e42] * -1.0,
                other[e3215] * self[e43] * -1.0,
                other[scalar] * self[e3215],
            ]) + (other.group0().yy().extend_to_4(other[scalar], other[e3215]) * self.group3().truncate_to_3().extend_to_4(self[e45])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       51       93        0
    //    simd3        3       23        0
    //    simd4       52       39        0
    // Totals...
    // yes simd      106      155        0
    //  no simd      268      318        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([other[e321], other[e321], other[e321], 1.0])
                * self
                    .group0()
                    .extend_to_4(-(other[e235] * self[e41]) - (other[e315] * self[e42]) - (other[e125] * self[e43]) - (other[e321] * self[e45]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e235] * self[e1234]) + (other[e315] * self[e43]),
                (other[e315] * self[e1234]) + (other[e125] * self[e41]),
                (other[e235] * self[e42]) + (other[e125] * self[e1234]),
                other[e125] * self[e43] * -1.0,
            ]) - (other.group0().zxyx() * self.group0().yzx().extend_to_4(self[e41]))
                - (other.group0().www() * self.group3().truncate_to_3()).extend_to_4(other[e315] * self[e42]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e315] * self[e12]) + (other[e315] * self[e4125]) + (other[e321] * self[e15]),
                (other[e125] * self[e23]) + (other[e125] * self[e4235]) + (other[e321] * self[e25]),
                (other[e235] * self[e4315]) + (other[e125] * self[e45]) + (other[e321] * self[e35]),
                -(other[e315] * self[e31]) - (other[e315] * self[e4315]) - (other[e125] * self[e12]) - (other[e125] * self[e4125]),
            ]) + (other.group0().xyxw() * self.group1().wwy().extend_to_4(self[e3215]))
                - (other.group0().zxyx() * self.group1().yzxx())
                - (other.group0().zxyx() * self.group3().yzxx()),
            // e1, e2, e3, e4
            ((Simd32x3::from(other[e321]) * self.group1().truncate_to_3())
                + (Simd32x3::from(self[e1234]) * other.group0().truncate_to_3())
                + (self.group0().zxy() * other.group0().yzx())
                - (self.group0().yzx() * other.group0().zxy()))
            .extend_to_4(other[e321] * self[e1234] * -1.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       72      119        0
    //    simd3        0       24        0
    //    simd4       65       45        0
    // Totals...
    // yes simd      137      188        0
    //  no simd      332      371        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x3::from(0.0).extend_to_4((other[e2] * self[e4315]) + (other[e3] * self[e4125]) + (other[e5] * self[e1234]) - (other[e321] * self[e45]))
                + (self.group0().yzx() * other.group1().zxy()).extend_to_4(other[e1] * self[e4235])
                - (Simd32x4::from([other[e321], other[e3], other[e1], other[e235]]) * self.group0().xxy().extend_to_4(self[e41]))
                - (Simd32x4::from([other[e2], other[e321], other[e321], other[e315]]) * self.group0().zyz().extend_to_4(self[e42]))
                - (self.group2().www() * other.group1().truncate_to_3()).extend_to_4(other[e125] * self[e43]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e235] * self[e1234]) + (other[e315] * self[e43]) + (other[e3] * self[e4315]),
                (other[e315] * self[e1234]) + (other[e1] * self[e4125]) + (other[e5] * self[e42]),
                (other[e125] * self[e1234]) + (other[e2] * self[e4235]) + (other[e5] * self[e43]),
                -(other[e2] * self[e31]) - (other[e3] * self[e12]),
            ]) + (Simd32x4::from([other[e5], other[e125], other[e235], self[e1234]]) * self.group0().xxy().extend_to_4(other[e5]))
                - (other.group0().zxyx() * self.group0().yzx().extend_to_4(self[e41]))
                - (other.group1().yzzx() * self.group3().zx().extend_to_4(self[e45], self[e23]))
                - (self.group1().ww().extend_to_4(self[e4315], other[e125]) * other.group1().xyx().extend_to_4(self[e43]))
                - (other.group0().www() * self.group3().truncate_to_3()).extend_to_4(other[e315] * self[e42]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e315] * self[e4125]) + (other[e321] * self[e15]) + (other[e1] * self[e3215]) + (other[e2] * self[e35]) + (other[e5] * self[e23]) + (other[e5] * self[e4235]),
                (other[e125] * self[e4235]) + (other[e321] * self[e25]) + (other[e2] * self[e3215]) + (other[e3] * self[e15]) + (other[e5] * self[e31]) + (other[e5] * self[e4315]),
                (other[e125] * self[e45]) + (other[e321] * self[e35]) + (other[e1] * self[e25]) + (other[e3] * self[e3215]) + (other[e5] * self[e12]) + (other[e5] * self[e4125]),
                -(other[e315] * self[e4315])
                    - (other[e125] * self[e12])
                    - (other[e125] * self[e4125])
                    - (other[e1] * self[e15])
                    - (other[e2] * self[e25])
                    - (other[e3] * self[e35]),
            ]) + (other.group0().xyxw() * self.group1().wwy().extend_to_4(self[e3215]))
                + (self.group1().zx().extend_to_4(self[e4315], self[e45]) * other.group0().yzx().extend_to_4(other[e5]))
                - (other.group0().zxyx() * self.group1().yzxx())
                - (other.group0().zxyx() * self.group3().yzxx())
                - (other.group1().zxy() * self.group2().yzx()).extend_to_4(other[e315] * self[e31]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e321] * self[e23]) + (other[e2] * self[e12]) - (other[e3] * self[e31]),
                (other[e321] * self[e31]) + (other[e3] * self[e23]) - (other[e1] * self[e12]),
                (other[e321] * self[e12]) + (other[e1] * self[e31]) - (other[e2] * self[e23]),
                0.0,
            ]) + (Simd32x4::from([other[e315], other[e5], other[e5], other[e2]]) * self.group0().zyz().extend_to_4(self[e42]))
                + (Simd32x4::from([other[e5], other[e125], other[e235], other[e1]]) * self.group0().xxy().extend_to_4(self[e41]))
                + (self.group2().www() * other.group0().truncate_to_3()).extend_to_4(other[e3] * self[e43])
                - (self.group0().yzx() * other.group0().zxy()).extend_to_4(other[e321] * self[e1234]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       94      139        0
    //    simd3        0       17        0
    //    simd4       52       38        0
    // Totals...
    // yes simd      146      194        0
    //  no simd      302      342        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e23] * self[e1234]) + (other[e31] * self[e43]),
                (other[e31] * self[e1234]) + (other[e12] * self[e41]),
                (other[e23] * self[e42]) + (other[e12] * self[e1234]),
                -(other[e31] * self[e31]) - (other[e12] * self[e12]) - (other[e15] * self[e41]) - (other[e25] * self[e42]) - (other[e35] * self[e43]),
            ]) - (other.group0().zxy() * self.group0().yzx()).extend_to_4(other[e23] * self[e23]),
            // e23, e31, e12, e45
            (self.group0().zx().extend_to_4(self[e1234], self[e43]) * other.group1().yzz().extend_to_4(other[e35]))
                + (self.group2().ww().extend_to_4(self[e42], self[e42]) * other.group1().xyx().extend_to_4(other[e25]))
                + Simd32x3::from(0.0).extend_to_4(other[e12] * self[e4125] * -1.0)
                + (other.group0().yzx() * self.group1().zxy()).extend_to_4(other[e15] * self[e41])
                - (other.group0().zxy() * self.group1().yzx()).extend_to_4(other[e23] * self[e4235])
                - (other.group1().zxy() * self.group0().yzx()).extend_to_4(other[e31] * self[e4315]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e23] * self[e3215]) + (other[e31] * self[e35]) + (other[e15] * self[e45]) + (other[e25] * self[e12]) + (other[e25] * self[e4125]),
                (other[e31] * self[e3215]) + (other[e12] * self[e15]) + (other[e25] * self[e45]) + (other[e35] * self[e23]) + (other[e35] * self[e4235]),
                (other[e23] * self[e25]) + (other[e12] * self[e3215]) + (other[e15] * self[e31]) + (other[e15] * self[e4315]) + (other[e35] * self[e45]),
                0.0,
            ]) - (other.group0().zxy() * self.group2().yzx()).extend_to_4(other[e23] * self[e41])
                - (other.group1().zxy() * self.group1().yzx()).extend_to_4(other[e31] * self[e42])
                - (other.group1().zxy() * self.group3().yzx()).extend_to_4(other[e12] * self[e43]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e23] * self[e45]) + (other[e31] * self[e4125]) + (other[e35] * self[e42]),
                (other[e31] * self[e45]) + (other[e12] * self[e4235]) + (other[e15] * self[e43]),
                (other[e23] * self[e4315]) + (other[e12] * self[e45]) + (other[e25] * self[e41]),
                -(other[e15] * self[e23])
                    - (other[e15] * self[e4235])
                    - (other[e25] * self[e31])
                    - (other[e25] * self[e4315])
                    - (other[e35] * self[e12])
                    - (other[e35] * self[e4125]),
            ]) - (self.group0().zx().extend_to_4(self[e1234], self[e35]) * other.group1().yzz().extend_to_4(other[e12]))
                - (self.group2().ww().extend_to_4(self[e42], self[e25]) * other.group1().xyx().extend_to_4(other[e31]))
                - (other.group0().zxy() * self.group3().yzx()).extend_to_4(other[e23] * self[e15]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       97      146        0
    //    simd3        0       19        0
    //    simd4       58       42        0
    // Totals...
    // yes simd      155      207        0
    //  no simd      329      371        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e23] * self[e1234]) + (other[e31] * self[e43]),
                (other[e31] * self[e1234]) + (other[scalar] * self[e42]),
                (other[e12] * self[e1234]) + (other[scalar] * self[e43]),
                -(other[e23] * self[e23]) - (other[e31] * self[e31]) - (other[e12] * self[e12]) - (other[e25] * self[e42]) - (other[e35] * self[e43]),
            ]) + (self.group0().xxy() * other.group0().wzx()).extend_to_4(other[e3215] * self[e1234])
                - (self.group0().yzx() * other.group0().zxy()).extend_to_4(other[e15] * self[e41]),
            // e23, e31, e12, e45
            Simd32x4::from([
                other[e15] * self[e1234],
                other[e25] * self[e1234],
                other[e35] * self[e1234],
                -(other[e12] * self[e4125]) - (other[e3215] * self[e1234]),
            ]) + (Simd32x4::from(other[scalar]) * self.group1())
                + (other.group1().ywwy() * self.group0().zyz().extend_to_4(self[e42]))
                + (other.group1().wzxx() * self.group0().xxy().extend_to_4(self[e41]))
                + (other.group0().yzx() * self.group1().zxy()).extend_to_4(other[e35] * self[e43])
                - (other.group0().zxyy() * self.group1().yzx().extend_to_4(self[e4315]))
                - (self.group0().yzx() * other.group1().zxy()).extend_to_4(other[e23] * self[e4235]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e31] * self[e35])
                    + (other[scalar] * self[e15])
                    + (other[e15] * self[e45])
                    + (other[e25] * self[e12])
                    + (other[e25] * self[e4125])
                    + (other[e3215] * self[e23])
                    + (other[e3215] * self[e4235]),
                (other[e12] * self[e15])
                    + (other[scalar] * self[e25])
                    + (other[e25] * self[e45])
                    + (other[e35] * self[e23])
                    + (other[e35] * self[e4235])
                    + (other[e3215] * self[e31])
                    + (other[e3215] * self[e4315]),
                (other[e12] * self[e3215])
                    + (other[scalar] * self[e35])
                    + (other[e15] * self[e31])
                    + (other[e15] * self[e4315])
                    + (other[e35] * self[e45])
                    + (other[e3215] * self[e12])
                    + (other[e3215] * self[e4125]),
                0.0,
            ]) + (other.group0().xyxw() * self.group3().ww().extend_to_4(self[e25], self[e1234]))
                - (other.group0().zxy() * self.group2().yzx()).extend_to_4(other[e23] * self[e41])
                - (other.group1().zxy() * self.group1().yzx()).extend_to_4(other[e31] * self[e42])
                - (other.group1().zxy() * self.group3().yzx()).extend_to_4(other[e12] * self[e43]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e31] * self[e4125]) + (other[scalar] * self[e4235]),
                (other[e12] * self[e4235]) + (other[scalar] * self[e4315]),
                (other[e12] * self[e45]) + (other[scalar] * self[e4125]),
                -(other[e15] * self[e4235]) - (other[e25] * self[e31]) - (other[e25] * self[e4315]) - (other[e35] * self[e12]) - (other[e35] * self[e4125]),
            ]) + (self.group1().ww().extend_to_4(self[e4315], self[e45]) * other.group0().xyx().extend_to_4(other[e3215]))
                + (self.group0().yzx() * other.group1().zxy()).extend_to_4(other[scalar] * self[e3215])
                - (other.group0().zxyz() * self.group3().yzx().extend_to_4(self[e35]))
                - (other.group1().xyzx() * self.group2().www().extend_to_4(self[e23]))
                - (self.group0().xxy() * other.group1().wzx()).extend_to_4(other[e23] * self[e15])
                - (self.group0().zyz() * other.group1().yww()).extend_to_4(other[e31] * self[e25]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48      100        0
    //    simd3        0       21        0
    //    simd4       55       38        0
    // Totals...
    // yes simd      103      159        0
    //  no simd      268      315        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                -(other[e1] * self[e1234]) - (other[e2] * self[e43]),
                -(other[e2] * self[e1234]) - (other[e3] * self[e41]),
                -(other[e1] * self[e42]) - (other[e3] * self[e1234]),
                (other[e2] * self[e4315]) + (other[e3] * self[e4125]) + (other[e5] * self[e1234]),
            ]) + (self.group0().yzx() * other.group0().zxy()).extend_to_4(other[e1] * self[e4235]),
            // e415, e425, e435, e321
            Simd32x4::from([other[e3] * self[e4315], other[e1] * self[e4125], other[e2] * self[e4235], other[e3] * self[e12] * -1.0])
                + (self.group0() * other.group0().www()).extend_to_4(other[e5] * self[e1234])
                - (other.group0().xyxx() * self.group1().ww().extend_to_4(self[e4315], self[e23]))
                - (other.group0().yzzy() * self.group3().zx().extend_to_4(self[e45], self[e31])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e2] * self[e35]) + (other[e5] * self[e23]) + (other[e5] * self[e4235]),
                (other[e3] * self[e15]) + (other[e5] * self[e31]) + (other[e5] * self[e4315]),
                (other[e3] * self[e3215]) + (other[e5] * self[e12]) + (other[e5] * self[e4125]),
                -(other[e2] * self[e25]) - (other[e3] * self[e35]),
            ]) + (other.group0().xyxw() * self.group3().ww().extend_to_4(self[e25], self[e45]))
                - (other.group0().zxyx() * self.group2().yzxx()),
            // e1, e2, e3, e4
            Simd32x4::from([other[e3] * self[e31] * -1.0, other[e1] * self[e12] * -1.0, other[e2] * self[e23] * -1.0, other[e3] * self[e43]])
                + (other.group0().wwwx() * self.group0().extend_to_4(self[e41]))
                + (other.group0().yzx() * self.group1().zxy()).extend_to_4(other[e2] * self[e42]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       33       59        0
    //    simd3        0       15        0
    //    simd4       44       39        0
    // Totals...
    // yes simd       77      113        0
    //  no simd      209      260        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[e12345]) * self.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other[e12345]) * self.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e235, e315, e125, e4
            Simd32x4::from(other[e12345]) * self.group2(),
            // e1, e2, e3, e5
            Simd32x4::from(other[e12345]) * self.group3() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       70      127        0
    //    simd3        0       27        0
    //    simd4       72       49        0
    // Totals...
    // yes simd      142      203        0
    //  no simd      358      404        0
    fn sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e431] * self[e12]) + (other[e412] * self[e4315]) + (other[e415] * self[e1234]) + (other[e425] * self[e43]),
                (other[e423] * self[e4125]) + (other[e412] * self[e23]) + (other[e425] * self[e1234]) + (other[e435] * self[e41]),
                (other[e423] * self[e31]) + (other[e431] * self[e4235]) + (other[e415] * self[e42]) + (other[e435] * self[e1234]),
                -(other[e415] * self[e23]) - (other[e425] * self[e31]) - (other[e435] * self[e12]) - (other[e321] * self[e45]) - (other[e125] * self[e43]),
            ]) - (Simd32x4::from(other[e423]) * self.group1().wz().extend_to_4(self[e4315], self[e15]))
                - (Simd32x4::from(other[e431]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(other[e412]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]]))
                - (self.group0().xyx() * other.group1().wwy()).extend_to_4(other[e235] * self[e41])
                - (self.group0().yzz() * other.group1().zxw()).extend_to_4(other[e315] * self[e42]),
            // e415, e425, e435, e321
            Simd32x4::from([
                other[e321] * self[e4235] * -1.0,
                other[e321] * self[e4315] * -1.0,
                other[e321] * self[e4125] * -1.0,
                other[e435] * self[e4125],
            ]) + (other.group1().yzxy() * self.group1().zxy().extend_to_4(self[e4315]))
                + (self.group0().zx().extend_to_4(self[e1234], self[e4235]) * other.group2().yzz().extend_to_4(other[e415]))
                + (self.group2().zx().extend_to_4(self[e3215], self[e25]) * other.group0().yzz().extend_to_4(other[e431]))
                + (self.group2().ww().extend_to_4(self[e42], self[e35]) * other.group2().xyx().extend_to_4(other[e412]))
                + (self.group3().ww().extend_to_4(self[e25], self[e15]) * other.group0().xyx().extend_to_4(other[e423]))
                - (other.group0().zxy() * self.group2().yzx()).extend_to_4(other[e235] * self[e41])
                - (other.group2().zxy() * self.group0().yzx()).extend_to_4(other[e315] * self[e42])
                - (other.group1().zxy() * self.group1().yzx()).extend_to_4(other[e125] * self[e43]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e415] * self[e3215]) + (other[e425] * self[e35]) + (other[e321] * self[e15]) + (other[e315] * self[e12]) + (other[e315] * self[e4125]),
                (other[e425] * self[e3215]) + (other[e435] * self[e15]) + (other[e321] * self[e25]) + (other[e125] * self[e23]) + (other[e125] * self[e4235]),
                (other[e415] * self[e25]) + (other[e435] * self[e3215]) + (other[e321] * self[e35]) + (other[e235] * self[e4315]) + (other[e125] * self[e45]),
                -(other[e415] * self[e15])
                    - (other[e425] * self[e25])
                    - (other[e435] * self[e35])
                    - (other[e315] * self[e4315])
                    - (other[e125] * self[e12])
                    - (other[e125] * self[e4125]),
            ]) + (other.group2().xyx() * self.group1().wwy()).extend_to_4(other[e321] * self[e3215])
                - (self.group1().yzxx() * other.group2().zxy().extend_to_4(other[e235]))
                - (self.group3().yzxx() * other.group2().zxy().extend_to_4(other[e235]))
                - (other.group1().zxy() * self.group2().yzx()).extend_to_4(other[e315] * self[e31]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e435] * self[e4315]) + (other[e321] * self[e23]),
                (other[e415] * self[e4125]) + (other[e321] * self[e31]),
                (other[e425] * self[e4235]) + (other[e321] * self[e12]),
                -(other[e435] * self[e43]) - (other[e321] * self[e1234]),
            ]) + (self.group0().zx().extend_to_4(self[e1234], self[e4125]) * other.group2().yzz().extend_to_4(other[e412]))
                + (self.group2().ww().extend_to_4(self[e42], self[e4315]) * other.group2().xyx().extend_to_4(other[e431]))
                + (other.group0().zxy() * self.group2().yzx()).extend_to_4(other[e423] * self[e4235])
                - (self.group1().ww().extend_to_4(self[e4315], other[e415]) * other.group1().xyx().extend_to_4(self[e41]))
                - (self.group2().zx().extend_to_4(self[e3215], self[e31]) * other.group0().yzz().extend_to_4(other[e431]))
                - (self.group3().zx().extend_to_4(self[e45], other[e425]) * other.group1().yzz().extend_to_4(self[e42]))
                - (self.group3().ww().extend_to_4(self[e25], self[e23]) * other.group0().xyx().extend_to_4(other[e423]))
                - (other.group2().zxy() * self.group0().yzx()).extend_to_4(other[e412] * self[e12]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       69      126        0
    //    simd3        0       33        0
    //    simd4       76       48        0
    // Totals...
    // yes simd      145      207        0
    //  no simd      373      417        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e431] * self[e12]) + (other[e412] * self[e4315]) + (other[e415] * self[e1234]) + (other[e425] * self[e43]) + (other[e12345] * self[e41]),
                (other[e423] * self[e4125]) + (other[e412] * self[e23]) + (other[e425] * self[e1234]) + (other[e435] * self[e41]) + (other[e12345] * self[e42]),
                (other[e423] * self[e31]) + (other[e431] * self[e4235]) + (other[e415] * self[e42]) + (other[e435] * self[e1234]) + (other[e12345] * self[e43]),
                -(other[e415] * self[e23]) - (other[e425] * self[e31]) - (other[e435] * self[e12]) - (other[e321] * self[e45]) - (other[e125] * self[e43]),
            ]) - (Simd32x4::from(other[e423]) * self.group1().wz().extend_to_4(self[e4315], self[e15]))
                - (Simd32x4::from(other[e431]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(other[e412]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]]))
                - (self.group0().xyx() * other.group1().wwy()).extend_to_4(other[e235] * self[e41])
                - (self.group0().yzz() * other.group1().zxw()).extend_to_4(other[e315] * self[e42]),
            // e415, e425, e435, e321
            (other.group1().yzxx() * self.group1().zxy().extend_to_4(self[e4235]))
                + (self.group2().zx().extend_to_4(self[e3215], self[e25]) * other.group0().yzz().extend_to_4(other[e431]))
                + (self.group3().ww().extend_to_4(self[e25], self[e15]) * other.group0().xyx().extend_to_4(other[e423]))
                + (self.group0().zxy() * other.group2().yzx()).extend_to_4(other[e412] * self[e35])
                + (other.group2().www() * self.group1().truncate_to_3()).extend_to_4(other[e435] * self[e4125])
                + (self.group2().www() * other.group2().truncate_to_3()).extend_to_4(other[e425] * self[e4315])
                - (other.group2().zxyy() * self.group0().yzx().extend_to_4(self[e42]))
                - (other.group0().zxy() * self.group2().yzx()).extend_to_4(other[e235] * self[e41])
                - (other.group1().zxy() * self.group1().yzx()).extend_to_4(other[e125] * self[e43])
                - (other.group1().www() * self.group3().truncate_to_3()).extend_to_4(other[e12345] * self[e45]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e321] * self[e15]) + (other[e235] * self[e45]) + (other[e315] * self[e12]) + (other[e315] * self[e4125]) + (other[e12345] * self[e15]),
                (other[e321] * self[e25]) + (other[e315] * self[e45]) + (other[e125] * self[e23]) + (other[e125] * self[e4235]) + (other[e12345] * self[e25]),
                (other[e321] * self[e35]) + (other[e235] * self[e31]) + (other[e235] * self[e4315]) + (other[e125] * self[e45]) + (other[e12345] * self[e35]),
                -(other[e235] * self[e23])
                    - (other[e235] * self[e4235])
                    - (other[e315] * self[e31])
                    - (other[e315] * self[e4315])
                    - (other[e125] * self[e12])
                    - (other[e125] * self[e4125]),
            ]) + (other.group1().xyxw() * self.group3().ww().extend_to_4(self[e25], self[e3215]))
                + (self.group2().zx().extend_to_4(self[e3215], self[e3215]) * other.group1().yzz().extend_to_4(other[e12345]))
                - (other.group1().zxyx() * self.group2().yzxx())
                - (other.group2().zxy() * self.group1().yzx()).extend_to_4(other[e425] * self[e25])
                - (other.group2().zxy() * self.group3().yzx()).extend_to_4(other[e435] * self[e35]),
            // e1, e2, e3, e4
            Simd32x4::from([other[e235] * self[e1234], other[e315] * self[e1234], other[e125] * self[e1234], other[e321] * self[e1234] * -1.0])
                + (self.group3().yzxz() * other.group1().zxy().extend_to_4(other[e412]))
                + (other.group0().zxy() * self.group2().yzx()).extend_to_4(other[e423] * self[e4235])
                + (self.group0().zxy() * other.group2().yzx()).extend_to_4(other[e431] * self[e4315])
                + (other.group1().www() * self.group1().truncate_to_3()).extend_to_4(other[e12345] * self[e1234])
                - (self.group1().ww().extend_to_4(self[e4315], other[e415]) * other.group1().xyx().extend_to_4(self[e41]))
                - (self.group2().zx().extend_to_4(self[e3215], self[e31]) * other.group0().yzz().extend_to_4(other[e431]))
                - (self.group3().zx().extend_to_4(self[e45], other[e425]) * other.group1().yzz().extend_to_4(self[e42]))
                - (self.group3().ww().extend_to_4(self[e25], self[e23]) * other.group0().xyx().extend_to_4(other[e423]))
                - (self.group0().yzx() * other.group2().zxy()).extend_to_4(other[e412] * self[e12])
                - (other.group2().www() * self.group3().truncate_to_3()).extend_to_4(other[e435] * self[e43]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      106      154        0
    //    simd3        0       17        0
    //    simd4       63       49        0
    // Totals...
    // yes simd      169      220        0
    //  no simd      358      401        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e43] * self[e4315]) + (other[e23] * self[e1234]) + (other[e31] * self[e43]) + (other[e45] * self[e41]),
                (other[e43] * self[e23]) + (other[e31] * self[e1234]) + (other[e12] * self[e41]) + (other[e45] * self[e42]),
                (other[e42] * self[e4235]) + (other[e23] * self[e42]) + (other[e12] * self[e1234]) + (other[e45] * self[e43]),
                -(other[e23] * self[e23]) - (other[e31] * self[e31]) - (other[e12] * self[e12]) - (other[e25] * self[e42]) - (other[e35] * self[e43]),
            ]) + (Simd32x4::from([self[e12], self[e4125], self[e31], self[e45]]) * other.group0().yxx().extend_to_4(other[e45]))
                - (Simd32x4::from(other[e41]) * self.group1().wz().extend_to_4(self[e4315], self[e15]))
                - (Simd32x4::from(other[e42]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(other[e43]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]]))
                - (self.group0().yzx() * other.group1().zxy()).extend_to_4(other[e15] * self[e41]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e31] * self[e12]) + (other[e45] * self[e4235]) + (other[e25] * self[e43]),
                (other[e12] * self[e23]) + (other[e45] * self[e4315]) + (other[e35] * self[e41]),
                (other[e23] * self[e31]) + (other[e45] * self[e4125]) + (other[e35] * self[e1234]),
                -(other[e23] * self[e4235]) - (other[e31] * self[e4315]) - (other[e12] * self[e4125]),
            ]) + (self.group2().zx().extend_to_4(self[e3215], self[e42]) * other.group0().yzz().extend_to_4(other[e25]))
                + (self.group2().ww().extend_to_4(self[e42], self[e43]) * other.group2().xyx().extend_to_4(other[e35]))
                + (self.group3().ww().extend_to_4(self[e25], self[e41]) * other.group0().xyx().extend_to_4(other[e15]))
                - (self.group2().yzxx() * other.group0().zxy().extend_to_4(other[e41]))
                - (other.group2().zxy() * self.group0().yzx()).extend_to_4(other[e42] * self[e25])
                - (other.group1().zxy() * self.group1().yzx()).extend_to_4(other[e43] * self[e35]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                other[e31] * self[e35],
                other[e12] * self[e15],
                other[e12] * self[e3215],
                -(other[e31] * self[e42]) - (other[e12] * self[e43]),
            ]) + (other.group1().xyxw() * self.group3().ww().extend_to_4(self[e25], self[e1234]))
                + (self.group1().zx().extend_to_4(self[e4315], self[e4315]) * other.group2().yzx().extend_to_4(other[e42]))
                + (self.group3().zx().extend_to_4(self[e45], self[e4125]) * other.group2().yzz().extend_to_4(other[e43]))
                + (other.group2().xyx() * self.group1().wwy()).extend_to_4(other[e41] * self[e4235])
                - (self.group1().yzxx() * other.group2().zxy().extend_to_4(other[e41]))
                - (other.group2().zxy() * self.group3().yzx()).extend_to_4(other[e42] * self[e31])
                - (other.group1().zxy() * self.group2().yzx()).extend_to_4(other[e43] * self[e12])
                - (other.group1().www() * self.group2().truncate_to_3()).extend_to_4(other[e23] * self[e41]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e41] * self[e3215]) + (other[e42] * self[e35]) + (other[e23] * self[e45]) + (other[e31] * self[e4125]) + (other[e45] * self[e23]) + (other[e35] * self[e42]),
                (other[e42] * self[e3215]) + (other[e43] * self[e15]) + (other[e31] * self[e45]) + (other[e12] * self[e4235]) + (other[e45] * self[e31]) + (other[e15] * self[e43]),
                (other[e41] * self[e25]) + (other[e43] * self[e3215]) + (other[e23] * self[e4315]) + (other[e12] * self[e45]) + (other[e45] * self[e12]) + (other[e25] * self[e41]),
                -(other[e23] * self[e15])
                    - (other[e31] * self[e25])
                    - (other[e12] * self[e35])
                    - (other[e45] * self[e3215])
                    - (other[e35] * self[e12])
                    - (other[e35] * self[e4125]),
            ]) - (self.group3().yzxy() * other.group1().zxy().extend_to_4(other[e25]))
                - (self.group0().zx().extend_to_4(self[e1234], self[e31]) * other.group2().yzz().extend_to_4(other[e25]))
                - (self.group2().ww().extend_to_4(self[e42], self[e4235]) * other.group2().xyx().extend_to_4(other[e15]))
                - (other.group0().zxy() * self.group2().yzx()).extend_to_4(other[e15] * self[e23]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      125      177        0
    //    simd3        0       21        0
    //    simd4       77       59        0
    // Totals...
    // yes simd      202      257        0
    //  no simd      433      476        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e23] * self[e1234]) + (other[e31] * self[e43]) + (other[e1234] * self[e23]) + (other[e4235] * self[e1234]) + (other[e4315] * self[e43]),
                (other[e31] * self[e1234]) + (other[e45] * self[e42]) + (other[e1234] * self[e31]) + (other[e4315] * self[e1234]) + (other[e4125] * self[e41]),
                (other[e12] * self[e1234]) + (other[e45] * self[e43]) + (other[e1234] * self[e12]) + (other[e4235] * self[e42]) + (other[e4125] * self[e1234]),
                -(other[e23] * self[e23])
                    - (other[e31] * self[e31])
                    - (other[e12] * self[e12])
                    - (other[e4235] * self[e4235])
                    - (other[e4315] * self[e4315])
                    - (other[e4125] * self[e4125]),
            ]) + (Simd32x4::from([self[e12], self[e4125], self[e31], self[e45]]) * other.group0().yxx().extend_to_4(other[e45]))
                + (Simd32x4::from([self[e4315], self[e23], self[e4235], self[e3215]]) * other.group0().zzy().extend_to_4(other[e1234]))
                + (self.group0().xxy() * other.group1().wzx()).extend_to_4(other[e3215] * self[e1234])
                - (Simd32x4::from(other[e41]) * self.group1().wz().extend_to_4(self[e4315], self[e15]))
                - (Simd32x4::from(other[e42]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(other[e43]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]]))
                - (self.group0().yzx() * other.group1().zxy()).extend_to_4(other[e15] * self[e41])
                - (self.group0().yzx() * other.group3().zxy()).extend_to_4(other[e25] * self[e42])
                - (other.group2().www() * self.group3().truncate_to_3()).extend_to_4(other[e35] * self[e43]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e31] * self[e12])
                    + (other[e45] * self[e4235])
                    + (other[e15] * self[e1234])
                    + (other[e1234] * self[e15])
                    + (other[e4235] * self[e45])
                    + (other[e4315] * self[e4125]),
                (other[e12] * self[e23])
                    + (other[e45] * self[e4315])
                    + (other[e25] * self[e1234])
                    + (other[e1234] * self[e25])
                    + (other[e4315] * self[e45])
                    + (other[e4125] * self[e4235]),
                (other[e23] * self[e31])
                    + (other[e45] * self[e4125])
                    + (other[e35] * self[e1234])
                    + (other[e1234] * self[e35])
                    + (other[e4235] * self[e4315])
                    + (other[e4125] * self[e45]),
                -(other[e31] * self[e4315])
                    - (other[e12] * self[e4125])
                    - (other[e4235] * self[e23])
                    - (other[e4315] * self[e31])
                    - (other[e4125] * self[e12])
                    - (other[e3215] * self[e1234]),
            ]) + (Simd32x4::from([other[e25], other[e3215], other[e3215], self[e3215]]) * self.group0().zyz().extend_to_4(other[e1234]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e35]]) * self.group0().xxy().extend_to_4(self[e43]))
                + (self.group2().zx().extend_to_4(self[e3215], other[e25]) * other.group0().yzz().extend_to_4(self[e42]))
                + (self.group3().ww().extend_to_4(self[e25], other[e15]) * other.group0().xyx().extend_to_4(self[e41]))
                - (self.group2().yzxx() * other.group0().zxy().extend_to_4(other[e41]))
                - (self.group3().yzxx() * other.group3().zxy().extend_to_4(other[e23]))
                - (self.group0().yzx() * other.group2().zxy()).extend_to_4(other[e42] * self[e25])
                - (other.group1().zxy() * self.group1().yzx()).extend_to_4(other[e43] * self[e35]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e25] * self[e4125]) + (other[e4125] * self[e25]) + (other[e3215] * self[e23]) + (other[e3215] * self[e4235]),
                (other[e35] * self[e4235]) + (other[e4235] * self[e35]) + (other[e3215] * self[e31]) + (other[e3215] * self[e4315]),
                (other[e35] * self[e45]) + (other[e4315] * self[e15]) + (other[e3215] * self[e12]) + (other[e3215] * self[e4125]),
                -(other[e12] * self[e43]) - (other[e1234] * self[e45]) - (other[e4315] * self[e42]) - (other[e4125] * self[e43]),
            ]) + (self.group1().zx().extend_to_4(self[e4315], self[e1234]) * other.group2().yzx().extend_to_4(other[e45]))
                + (self.group2().zx().extend_to_4(self[e3215], self[e4315]) * other.group1().yzz().extend_to_4(other[e42]))
                + (self.group3().ww().extend_to_4(self[e25], self[e4235]) * other.group1().xyx().extend_to_4(other[e41]))
                + (other.group2().xyx() * self.group1().wwy()).extend_to_4(other[e43] * self[e4125])
                - (self.group1().yzxz() * other.group2().zxy().extend_to_4(other[e43]))
                - (self.group2().zx().extend_to_4(self[e3215], other[e31]) * other.group3().yzz().extend_to_4(self[e42]))
                - (self.group3().ww().extend_to_4(self[e25], other[e4235]) * other.group3().xyx().extend_to_4(self[e41]))
                - (other.group1().zxy() * self.group2().yzx()).extend_to_4(other[e41] * self[e23])
                - (other.group1().www() * self.group2().truncate_to_3()).extend_to_4(other[e42] * self[e31])
                - (other.group2().zxy() * self.group3().yzx()).extend_to_4(other[e23] * self[e41]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e31] * self[e4125]) + (other[e45] * self[e23]) + (other[e1234] * self[e15]) + (other[e4315] * self[e12]),
                (other[e12] * self[e4235]) + (other[e45] * self[e31]) + (other[e1234] * self[e25]) + (other[e4125] * self[e23]),
                (other[e12] * self[e45]) + (other[e45] * self[e12]) + (other[e1234] * self[e35]) + (other[e4235] * self[e31]),
                -(other[e25] * self[e31]) - (other[e25] * self[e4315]) - (other[e35] * self[e12]) - (other[e35] * self[e4125]),
            ]) + (self.group1().ww().extend_to_4(self[e4315], self[e45]) * other.group1().xyx().extend_to_4(other[e3215]))
                + (self.group2().zx().extend_to_4(self[e3215], self[e25]) * other.group0().yzz().extend_to_4(other[e4315]))
                + (self.group3().ww().extend_to_4(self[e25], self[e15]) * other.group0().xyx().extend_to_4(other[e4235]))
                + (self.group0().yzx() * other.group2().zxy()).extend_to_4(other[e4125] * self[e35])
                - (Simd32x4::from([other[e25], other[e3215], other[e3215], self[e35]]) * self.group0().zyz().extend_to_4(other[e12]))
                - (Simd32x4::from([other[e3215], other[e35], other[e15], self[e25]]) * self.group0().xxy().extend_to_4(other[e31]))
                - (other.group1().zxyw() * self.group3().yzxw())
                - (other.group2().xyzx() * self.group2().www().extend_to_4(self[e23]))
                - (self.group2().yzxx() * other.group0().zxy().extend_to_4(other[e23]))
                - (other.group3().zxy() * self.group1().yzx()).extend_to_4(other[e15] * self[e4235]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       74        0
    //    simd3        1       20        0
    //    simd4       50       37        0
    // Totals...
    // yes simd       87      131        0
    //  no simd      239      282        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            other.group0().yy().extend_to_4(other[e12345], other[e5]) * self.group0().extend_to_4(self[e1234]),
            // e415, e425, e435, e321
            Simd32x4::from([self[e23] * other[e12345], self[e31] * other[e12345], self[e12] * other[e12345], self[e45] * other[e12345] * -1.0])
                + (Simd32x4::from(other[e5]) * self.group0().extend_to_4(self[e1234])),
            // e235, e315, e125, e5
            Simd32x4::from([self[e15] * other[e12345], self[e25] * other[e12345], self[e35] * other[e12345], 0.0])
                + (Simd32x4::from(other[e5]) * self.group1())
                + (self.group3() * other.group0().xx().extend_to_4(other[e5], other[e12345])),
            // e1, e2, e3, e4
            ((Simd32x3::from(other[e5]) * self.group0()) - (Simd32x3::from(other[e12345]) * self.group3().truncate_to_3())).extend_to_4(self[e1234] * other[e12345]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       74      110        0
    //    simd3        5       15        0
    //    simd4       45       40        0
    // Totals...
    // yes simd      124      165        0
    //  no simd      269      315        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([other[e45], other[e45], other[e45], 1.0])
                * self
                    .group0()
                    .extend_to_4((self[e45] * other[e45]) - (self[e41] * other[e15]) - (self[e42] * other[e25]) - (self[e43] * other[e35])),
            // e23, e31, e12, e45
            Simd32x4::from([self[e42] * other[e35] * -1.0, self[e43] * other[e15] * -1.0, self[e41] * other[e25] * -1.0, 0.0])
                + (other.group0().xyzy() * self.group2().www().extend_to_4(self[e42]))
                + (other.group0().yzxx() * self.group0().zxy().extend_to_4(self[e41]))
                + (other.group0().wwwz() * self.group3().truncate_to_3().extend_to_4(self[e43])),
            // e15, e25, e35, e1234
            ((Simd32x3::from(self[e45]) * other.group0().truncate_to_3()) + (self.group1().zxy() * other.group0().yzx()) + (self.group3().zxy() * other.group0().yzx())
                - (Simd32x3::from(other[e45]) * self.group2().truncate_to_3())
                - (self.group1().yzx() * other.group0().zxy())
                - (self.group3().yzx() * other.group0().zxy()))
            .extend_to_4(self[e1234] * other[e45]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e42] * other[e35]) + (self[e23] * other[e45]),
                (self[e43] * other[e15]) + (self[e31] * other[e45]),
                (self[e41] * other[e25]) + (self[e12] * other[e45]),
                -(self[e12] * other[e35]) - (self[e4235] * other[e15]) - (self[e4315] * other[e25]) - (self[e4125] * other[e35]) - (self[e3215] * other[e45]),
            ]) - (other.group0().xyzy() * self.group2().www().extend_to_4(self[e31]))
                - (other.group0().yzxx() * self.group0().zxy().extend_to_4(self[e23])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       96      137        0
    //    simd3        0       14        0
    //    simd4       59       48        0
    // Totals...
    // yes simd      155      199        0
    //  no simd      332      371        0
    fn sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e1234] * other[e4235],
                self[e1234] * other[e4315],
                self[e1234] * other[e4125],
                -(self[e42] * other[e25]) - (self[e43] * other[e35]) - (self[e4235] * other[e4235]) - (self[e4315] * other[e4315]) - (self[e4125] * other[e4125]),
            ]) + (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e45]]) * self.group0().xxy().extend_to_4(self[e45]))
                + (Simd32x4::from([other[e4315], other[e45], other[e45], other[e3215]]) * self.group0().zyz().extend_to_4(self[e1234]))
                - (self.group0().yzx() * other.group1().zxy()).extend_to_4(self[e41] * other[e15]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e1234] * other[e15]) + (self[e4235] * other[e45]) + (self[e4125] * other[e4315]),
                (self[e1234] * other[e25]) + (self[e4235] * other[e4125]) + (self[e4315] * other[e45]),
                (self[e1234] * other[e35]) + (self[e4315] * other[e4235]) + (self[e4125] * other[e45]),
                -(self[e12] * other[e4125]) - (self[e1234] * other[e3215]),
            ]) + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e25]]) * self.group0().zyz().extend_to_4(self[e42]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e15]]) * self.group0().xxy().extend_to_4(self[e41]))
                + (self.group1().www() * other.group1().truncate_to_3()).extend_to_4(self[e43] * other[e35])
                - (other.group1().zxyy() * self.group3().yzx().extend_to_4(self[e31]))
                - (self.group0().yzx() * other.group0().zxy()).extend_to_4(self[e23] * other[e4235]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e12] * other[e25]) + (self[e45] * other[e15]) + (self[e25] * other[e4125]) + (self[e4235] * other[e3215]) + (self[e4125] * other[e25])
                    - (self[e4315] * other[e35])
                    - (self[e3215] * other[e4235]),
                (self[e31] * other[e3215]) + (self[e45] * other[e25]) + (self[e35] * other[e4235]) + (self[e4235] * other[e35]) + (self[e4315] * other[e3215])
                    - (self[e4125] * other[e15])
                    - (self[e3215] * other[e4315]),
                (self[e12] * other[e3215]) + (self[e45] * other[e35]) + (self[e15] * other[e4315]) + (self[e4315] * other[e15]) + (self[e4125] * other[e3215])
                    - (self[e4235] * other[e25])
                    - (self[e3215] * other[e4125]),
                0.0,
            ]) + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e45]]) * self.group1().xxy().extend_to_4(self[e1234]))
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e4315]]) * self.group2().xxy().extend_to_4(self[e42]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e4125]]) * self.group2().zyz().extend_to_4(self[e43]))
                - (self.group1().yzx() * other.group0().zxy()).extend_to_4(self[e41] * other[e4235]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e4235]]) * self.group1().xxy().extend_to_4(self[e15]))
                + (Simd32x4::from([other[e4315], other[e45], other[e45], other[e4315]]) * self.group1().zyz().extend_to_4(self[e25]))
                + Simd32x3::from(0.0).extend_to_4((self[e35] * other[e4125]) - (self[e4315] * other[e25]) - (self[e4125] * other[e35]) - (self[e3215] * other[e45]))
                + (self.group0().yzx() * other.group0().zxy()).extend_to_4(self[e45] * other[e3215])
                - (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e25]]) * self.group0().zyz().extend_to_4(self[e31]))
                - (Simd32x4::from([other[e3215], other[e35], other[e15], other[e15]]) * self.group0().xxy().extend_to_4(self[e23]))
                - (self.group1().yzxz() * other.group1().zxy().extend_to_4(other[e35]))
                - (other.group0().xyzx() * self.group2().www().extend_to_4(self[e4235])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       66      117        0
    //    simd3        0       27        0
    //    simd4       59       36        0
    // Totals...
    // yes simd      125      180        0
    //  no simd      302      342        0
    fn sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e43] * other[e425]) + (self[e1234] * other[e415]),
                (self[e41] * other[e435]) + (self[e1234] * other[e425]),
                (self[e42] * other[e415]) + (self[e1234] * other[e435]),
                -(self[e42] * other[e315]) - (self[e43] * other[e125]) - (self[e23] * other[e415]) - (self[e31] * other[e425]) - (self[e12] * other[e435]),
            ]) - (self.group0().yzx() * other.group0().zxy()).extend_to_4(self[e41] * other[e235]),
            // e415, e425, e435, e321
            Simd32x3::from(0.0).extend_to_4(self[e43] * other[e125] * -1.0)
                + (other.group1() * self.group2().www()).extend_to_4(self[e4125] * other[e435])
                + (self.group0().zxy() * other.group1().yzx()).extend_to_4(self[e4235] * other[e415])
                + (other.group0().yzx() * self.group1().zxy()).extend_to_4(self[e4315] * other[e425])
                - (self.group0().yzx() * other.group1().zxy()).extend_to_4(self[e41] * other[e235])
                - (other.group0().zxy() * self.group1().yzx()).extend_to_4(self[e42] * other[e315]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e12] * other[e315]) + (self[e45] * other[e235]) + (self[e35] * other[e425]) + (self[e4125] * other[e315]) + (self[e3215] * other[e415]),
                (self[e23] * other[e125]) + (self[e45] * other[e315]) + (self[e15] * other[e435]) + (self[e4235] * other[e125]) + (self[e3215] * other[e425]),
                (self[e31] * other[e235]) + (self[e45] * other[e125]) + (self[e25] * other[e415]) + (self[e4315] * other[e235]) + (self[e3215] * other[e435]),
                -(self[e23] * other[e235])
                    - (self[e31] * other[e315])
                    - (self[e12] * other[e125])
                    - (self[e4235] * other[e235])
                    - (self[e4315] * other[e315])
                    - (self[e4125] * other[e125]),
            ]) - (self.group2().yzxx() * other.group0().zxy().extend_to_4(other[e415]))
                - (other.group1().zxy() * self.group1().yzx()).extend_to_4(self[e25] * other[e425])
                - (other.group1().zxy() * self.group3().yzx()).extend_to_4(self[e35] * other[e435]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e43] * other[e315]) + (self[e1234] * other[e235]) + (self[e4315] * other[e435]),
                (self[e41] * other[e125]) + (self[e1234] * other[e315]) + (self[e4125] * other[e415]),
                (self[e42] * other[e235]) + (self[e1234] * other[e125]) + (self[e4235] * other[e425]),
                0.0,
            ]) - (self.group1().ww().extend_to_4(self[e4315], other[e425]) * other.group0().xyx().extend_to_4(self[e42]))
                - (self.group3().zx().extend_to_4(self[e45], other[e435]) * other.group0().yzz().extend_to_4(self[e43]))
                - (self.group0().yzx() * other.group1().zxy()).extend_to_4(self[e41] * other[e415]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       73      125        0
    //    simd3        0       26        0
    //    simd4       64       42        0
    // Totals...
    // yes simd      137      193        0
    //  no simd      329      371        0
    fn sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e43] * other[e425]) + (self[e1234] * other[e415]),
                (self[e42] * other[e12345]) + (self[e1234] * other[e425]),
                (self[e43] * other[e12345]) + (self[e1234] * other[e435]),
                -(self[e42] * other[e315]) - (self[e43] * other[e125]) - (self[e23] * other[e415]) - (self[e31] * other[e425]) - (self[e12] * other[e435]),
            ]) + (self.group0().xxy() * other.group0().wzx()).extend_to_4(self[e1234] * other[e5])
                - (self.group0().yzx() * other.group0().zxy()).extend_to_4(self[e41] * other[e235]),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e1234] * other[e235],
                self[e1234] * other[e315],
                self[e1234] * other[e125],
                -(self[e43] * other[e125]) - (self[e45] * other[e12345]),
            ]) + (other.group0().ywwz() * self.group1().zyz().extend_to_4(self[e4125]))
                + (other.group0().wzxy() * self.group1().xxy().extend_to_4(self[e4315]))
                + (other.group1().wzxw() * self.group0().xxy().extend_to_4(self[e1234]))
                + (self.group0().zyz() * other.group1().yww()).extend_to_4(self[e4235] * other[e415])
                - (other.group1().zxyx() * self.group0().yzx().extend_to_4(self[e41]))
                - (self.group1().yzx() * other.group0().zxy()).extend_to_4(self[e42] * other[e315]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e45] * other[e235])
                    + (self[e15] * other[e12345])
                    + (self[e35] * other[e425])
                    + (self[e4235] * other[e5])
                    + (self[e4125] * other[e315])
                    + (self[e3215] * other[e415]),
                (self[e45] * other[e315])
                    + (self[e15] * other[e435])
                    + (self[e25] * other[e12345])
                    + (self[e4235] * other[e125])
                    + (self[e4315] * other[e5])
                    + (self[e3215] * other[e425]),
                (self[e45] * other[e125])
                    + (self[e25] * other[e415])
                    + (self[e35] * other[e12345])
                    + (self[e4315] * other[e235])
                    + (self[e4125] * other[e5])
                    + (self[e3215] * other[e435]),
                -(self[e15] * other[e415])
                    - (self[e25] * other[e425])
                    - (self[e35] * other[e435])
                    - (self[e4235] * other[e235])
                    - (self[e4315] * other[e315])
                    - (self[e4125] * other[e125]),
            ]) + (self.group1().xxyw() * other.group1().wzxw())
                + (self.group1().zyz() * other.group1().yww()).extend_to_4(self[e3215] * other[e12345])
                - (self.group1().yzxx() * other.group1().zxyx())
                - (other.group1().zxyz() * self.group3().yzx().extend_to_4(self[e12]))
                - (self.group2().yzx() * other.group0().zxy()).extend_to_4(self[e31] * other[e315]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e43] * other[e315]) + (self[e1234] * other[e235]) + (self[e4315] * other[e435]) - (self[e4125] * other[e425]),
                (self[e42] * other[e5]) + (self[e1234] * other[e315]) + (self[e4125] * other[e415]) - (self[e4315] * other[e12345]),
                (self[e43] * other[e5]) + (self[e1234] * other[e125]) + (self[e4235] * other[e425]) - (self[e4125] * other[e12345]),
                0.0,
            ]) + (self.group0().xxy() * other.group1().wzx()).extend_to_4(self[e1234] * other[e12345])
                - (other.group0().xyzy() * self.group1().www().extend_to_4(self[e42]))
                - (other.group0().wzxz() * self.group3().xxy().extend_to_4(self[e43]))
                - (self.group0().yzx() * other.group1().zxy()).extend_to_4(self[e41] * other[e415]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for DipoleInversion {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      136      204        0
    //    simd2       22       22        0
    //    simd3      112      153        0
    //    simd4       95       66        0
    // Totals...
    // yes simd      365      445        0
    //  no simd      896      971        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e45] * other[e45]) - (self[e4235] * other[e4235]) - (self[e4315] * other[e4315]) - (self[e4125] * other[e4125]),
                (self[e4315] * other[e2]) + (self[e4125] * other[e3]) + (self[e3215] * other[e4]) - (self[e45] * other[e321]),
            ]) + (Simd32x2::from(self[e1234]) * Simd32x2::from([other[e3215], other[e5]]))
                + (Simd32x2::from([other[e1234], other[e1]]) * self.group3().wx())
                - (Simd32x2::from(self[e41]) * Simd32x2::from([other[e15], other[e235]]))
                - (Simd32x2::from(self[e42]) * Simd32x2::from([other[e25], other[e315]]))
                - (Simd32x2::from(self[e43]) * Simd32x2::from([other[e35], other[e125]]))
                - (Simd32x2::from(self[e23]) * Simd32x2::from([other[e23], other[e415]]))
                - (Simd32x2::from(self[e31]) * Simd32x2::from([other[e31], other[e425]]))
                - (Simd32x2::from(self[e12]) * Simd32x2::from([other[e12], other[e435]]))
                - (Simd32x2::from(self[e15]) * Simd32x2::from([other[e41], other[e423]]))
                - (Simd32x2::from(self[e25]) * Simd32x2::from([other[e42], other[e431]]))
                - (Simd32x2::from(self[e35]) * Simd32x2::from([other[e43], other[e412]])),
            // e1, e2, e3, e4
            (Simd32x4::from([other[e2], other[e321], other[e321], self[e4315]]) * self.group1().zyz().extend_to_4(other[e431]))
                + (Simd32x4::from([other[e5], other[e125], other[e235], self[e1234]]) * self.group0().xxy().extend_to_4(other[e12345]))
                + (Simd32x4::from([other[e321], other[e3], other[e1], self[e4235]]) * self.group1().xxy().extend_to_4(other[e423]))
                + (Simd32x4::from([other[e315], other[e5], other[e5], other[e1]]) * self.group0().zyz().extend_to_4(self[e41]))
                + (other.group8() * self.group2().www()).extend_to_4(self[e43] * other[e3])
                + (other.group7().zxy() * self.group2().yzx()).extend_to_4(self[e42] * other[e2])
                + (self.group3().yzx() * other.group6().zxy()).extend_to_4(self[e4125] * other[e412])
                - (Simd32x4::from(other[e4]) * self.group2().truncate_to_3().extend_to_4(self[e45]))
                - (other.group6().yzxw() * self.group3().zxy().extend_to_4(self[e1234]))
                - (other.group0().yy().extend_to_4(other[e12345], self[e41]) * self.group3().truncate_to_3().extend_to_4(other[e415]))
                - (self.group2().zx().extend_to_4(self[e3215], self[e23]) * other.group7().yzz().extend_to_4(other[e423]))
                - (self.group3().ww().extend_to_4(self[e25], other[e435]) * other.group7().xyx().extend_to_4(self[e43]))
                - (self.group0().yzx() * other.group8().zxy()).extend_to_4(self[e42] * other[e425])
                - (self.group1().yzx() * other.group1().zxy()).extend_to_4(self[e31] * other[e431])
                - (self.group1().www() * other.group6().truncate_to_3()).extend_to_4(self[e12] * other[e412]),
            // e5
            (self[e45] * other[e5]) + (self[e3215] * other[e12345]) + (self[e3215] * other[e321])
                - (self[e23] * other[e235])
                - (self[e31] * other[e315])
                - (self[e12] * other[e125])
                - (self[e15] * other[e1])
                - (self[e15] * other[e415])
                - (self[e25] * other[e2])
                - (self[e25] * other[e425])
                - (self[e35] * other[e3])
                - (self[e35] * other[e435])
                - (self[e4235] * other[e235])
                - (self[e4315] * other[e315])
                - (self[e4125] * other[e125]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e45] * other[e15]) + (self[e25] * other[e4125]) + (self[e4235] * other[e3215]) + (self[e4125] * other[e25]),
                (self[e45] * other[e25]) + (self[e35] * other[e4235]) + (self[e4235] * other[e35]) + (self[e4315] * other[e3215]),
                (self[e45] * other[e35]) + (self[e15] * other[e4315]) + (self[e4315] * other[e15]) + (self[e4125] * other[e3215]),
                -(self[e23] * other[e4235]) - (self[e31] * other[e4315]) - (self[e12] * other[e4125]) - (self[e1234] * other[e3215]),
            ]) + (Simd32x4::from(other[scalar]) * self.group2().truncate_to_3().extend_to_4(self[e45]))
                + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e1234]]) * self.group1().zyz().extend_to_4(self[e3215]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e35]]) * self.group1().xxy().extend_to_4(self[e43]))
                + (self.group2().zx().extend_to_4(self[e3215], other[e25]) * other.group5().yzz().extend_to_4(self[e42]))
                + (self.group3().ww().extend_to_4(self[e25], other[e15]) * other.group5().xyx().extend_to_4(self[e41]))
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], self[e35]]) * self.group2().xxy().extend_to_4(other[e43]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], self[e4235]]) * self.group2().zyz().extend_to_4(other[e23]))
                - (self.group2().yzxx() * other.group5().zxy().extend_to_4(other[e41]))
                - (self.group1().yzx() * other.group3().zxy()).extend_to_4(self[e25] * other[e42])
                - (self.group3().yzx() * other.group3().zxy()).extend_to_4(self[e4315] * other[e31])
                - (self.group3().www() * other.group9().truncate_to_3()).extend_to_4(self[e4125] * other[e12]),
            // e41, e42, e43
            (Simd32x3::from(self[e1234]) * other.group5())
                + (Simd32x3::from(self[e1234]) * other.group9().truncate_to_3())
                + (Simd32x3::from(other[scalar]) * self.group0())
                + (Simd32x3::from(other[e1234]) * self.group1().truncate_to_3())
                + (Simd32x3::from([self[e12], self[e4125], self[e31]]) * other.group4().yxx())
                + (Simd32x3::from([self[e4315], self[e23], self[e4235]]) * other.group4().zzy())
                + (Simd32x3::from([other[e45], other[e12], other[e23]]) * self.group0().xxy())
                + (Simd32x3::from([other[e31], other[e4125], other[e4235]]) * self.group0().zxy())
                + (Simd32x3::from([other[e4315], other[e45], other[e45]]) * self.group0().zyz())
                - (Simd32x3::from(other[e41]) * Simd32x3::from([self[e45], self[e12], self[e4315]]))
                - (Simd32x3::from(other[e42]) * Simd32x3::from([self[e4125], self[e45], self[e23]]))
                - (Simd32x3::from(other[e43]) * Simd32x3::from([self[e31], self[e4235], self[e45]]))
                - (Simd32x3::from(other[e1234]) * self.group3().truncate_to_3())
                - (self.group0().yzx() * other.group5().zxy())
                - (self.group0().yzx() * other.group9().zxy()),
            // e23, e31, e12
            (Simd32x3::from(self[e45]) * other.group9().truncate_to_3())
                + (Simd32x3::from(self[e1234]) * other.group3().truncate_to_3())
                + (Simd32x3::from(other[scalar]) * self.group1().truncate_to_3())
                + (Simd32x3::from(other[e1234]) * self.group2().truncate_to_3())
                + (Simd32x3::from([self[e35], self[e15], self[e3215]]) * other.group4().yzz())
                + (Simd32x3::from([self[e3215], self[e3215], self[e25]]) * other.group4().xyx())
                + (Simd32x3::from([other[e25], other[e3215], other[e3215]]) * self.group0().zyz())
                + (Simd32x3::from([other[e45], other[e4125], other[e4235]]) * self.group3().xxy())
                + (Simd32x3::from([other[e4315], other[e45], other[e45]]) * self.group3().zyz())
                + (Simd32x3::from([other[e3215], other[e35], other[e15]]) * self.group0().xxy())
                + (other.group5().yzx() * self.group1().zxy())
                - (self.group0().yzx() * other.group3().zxy())
                - (other.group4().zxy() * self.group2().yzx())
                - (other.group5().zxy() * self.group1().yzx())
                - (self.group3().yzx() * other.group9().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e15] * other[e4]) + (self[e4315] * other[e3]),
                (self[e25] * other[e4]) + (self[e4125] * other[e1]),
                (self[e35] * other[e4]) + (self[e4235] * other[e2]),
                -(self[e12] * other[e3]) - (self[e3215] * other[e4]),
            ]) + (Simd32x4::from([other[e5], other[e125], other[e235], self[e25]]) * self.group0().xxy().extend_to_4(other[e431]))
                + (Simd32x4::from([other[e315], other[e5], other[e5], self[e35]]) * self.group0().zyz().extend_to_4(other[e412]))
                + (other.group6().yzxz() * self.group1().zxy().extend_to_4(self[e4125]))
                + (other.group0().yy().extend_to_4(other[e12345], other[e423]) * self.group1().truncate_to_3().extend_to_4(self[e15]))
                + (self.group2().zx().extend_to_4(self[e3215], other[e415]) * other.group7().yzz().extend_to_4(self[e4235]))
                + (self.group3().ww().extend_to_4(self[e25], other[e5]) * other.group7().xyx().extend_to_4(self[e1234]))
                + (other.group8() * self.group2().www()).extend_to_4(self[e4315] * other[e425])
                - (Simd32x4::from([other[e2], other[e321], other[e321], other[e2]]) * self.group3().zyz().extend_to_4(self[e31]))
                - (Simd32x4::from([other[e321], other[e3], other[e1], other[e1]]) * self.group3().xxy().extend_to_4(self[e23]))
                - (self.group0().yzx() * other.group8().zxy()).extend_to_4(self[e45] * other[e12345])
                - (other.group7().zxy() * self.group2().yzx()).extend_to_4(self[e41] * other[e235])
                - (self.group1().yzx() * other.group6().zxy()).extend_to_4(self[e42] * other[e315])
                - (self.group1().www() * other.group1().truncate_to_3()).extend_to_4(self[e43] * other[e125]),
            // e423, e431, e412
            (Simd32x3::from(self[e1234]) * other.group6().truncate_to_3())
                + (Simd32x3::from(other[e12345]) * self.group0())
                + (Simd32x3::from(other[e4]) * self.group1().truncate_to_3())
                + (Simd32x3::from([self[e12], self[e4125], self[e31]]) * other.group7().yxx())
                + (Simd32x3::from([self[e4315], self[e23], self[e4235]]) * other.group7().zzy())
                + (Simd32x3::from([other[e3], other[e435], other[e2]]) * self.group0().yxx())
                + (Simd32x3::from([other[e425], other[e1], other[e415]]) * self.group0().zzy())
                - (Simd32x3::from(self[e41]) * Simd32x3::from([other[e321], other[e3], other[e425]]))
                - (Simd32x3::from(self[e42]) * Simd32x3::from([other[e435], other[e321], other[e1]]))
                - (Simd32x3::from(self[e43]) * Simd32x3::from([other[e2], other[e415], other[e321]]))
                - (Simd32x3::from(self[e1234]) * other.group1().truncate_to_3())
                - (Simd32x3::from(other[e4]) * self.group3().truncate_to_3())
                - (Simd32x3::from(other[e423]) * Simd32x3::from([self[e45], self[e12], self[e4315]]))
                - (Simd32x3::from(other[e431]) * Simd32x3::from([self[e4125], self[e45], self[e23]]))
                - (Simd32x3::from(other[e412]) * Simd32x3::from([self[e31], self[e4235], self[e45]])),
            // e235, e315, e125
            (Simd32x3::from(self[e3215]) * other.group1().truncate_to_3())
                + (Simd32x3::from(self[e3215]) * other.group6().truncate_to_3())
                + (Simd32x3::from(other[e12345]) * self.group2().truncate_to_3())
                + (Simd32x3::from(other[e5]) * self.group1().truncate_to_3())
                + (Simd32x3::from(other[e5]) * self.group3().truncate_to_3())
                + (Simd32x3::from([self[e12], self[e23], self[e4315]]) * other.group8().yzx())
                + (Simd32x3::from([self[e4125], self[e4235], self[e45]]) * other.group8().yzz())
                + (Simd32x3::from([other[e2], other[e435], other[e415]]) * self.group2().zxy())
                + (Simd32x3::from([other[e321], other[e3], other[e1]]) * self.group2().xxy())
                + (other.group8().xyx() * self.group1().wwy())
                + (self.group2().zyz() * other.group6().yww())
                - (other.group8().zxy() * self.group1().yzx())
                - (other.group8().zxy() * self.group3().yzx())
                - (self.group2().yzx() * other.group1().zxy())
                - (self.group2().yzx() * other.group6().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e23] * other[e45]) + (self[e12] * other[e4315]) + (self[e15] * other[e1234]) + (self[e4125] * other[e31]),
                (self[e23] * other[e4125]) + (self[e31] * other[e45]) + (self[e25] * other[e1234]) + (self[e4235] * other[e12]),
                (self[e31] * other[e4235]) + (self[e12] * other[e45]) + (self[e45] * other[e12]) + (self[e35] * other[e1234]),
                -(self[e4235] * other[e15]) - (self[e4315] * other[e25]) - (self[e4125] * other[e35]) - (self[e3215] * other[e45]),
            ]) + (Simd32x4::from(other[scalar]) * self.group3())
                + (self.group1().ww().extend_to_4(self[e4315], other[e4125]) * other.group5().xyx().extend_to_4(self[e35]))
                + (self.group2().zx().extend_to_4(self[e3215], other[e4315]) * other.group4().yzz().extend_to_4(self[e25]))
                + (self.group3().ww().extend_to_4(self[e25], other[e4235]) * other.group4().xyx().extend_to_4(self[e15]))
                + (self.group0().yzx() * other.group3().zxy()).extend_to_4(self[e45] * other[e3215])
                - (Simd32x4::from([other[e25], other[e3215], other[e3215], self[e25]]) * self.group0().zyz().extend_to_4(other[e31]))
                - (Simd32x4::from([other[e3215], other[e35], other[e15], self[e15]]) * self.group0().xxy().extend_to_4(other[e23]))
                - (self.group1().yzxy() * other.group9().zxy().extend_to_4(other[e25]))
                - (self.group2().yzxz() * other.group4().zxy().extend_to_4(other[e12]))
                - (other.group3().xyzz() * self.group2().www().extend_to_4(self[e12]))
                - (other.group5().zxy() * self.group3().yzx()).extend_to_4(self[e23] * other[e15]),
            // e1234
            (self[e1234] * other[scalar]) + (self[e1234] * other[e45]) + (self[e4235] * other[e41]) + (self[e4315] * other[e42]) + (self[e4125] * other[e43])
                - (self[e41] * other[e23])
                - (self[e41] * other[e4235])
                - (self[e42] * other[e31])
                - (self[e42] * other[e4315])
                - (self[e43] * other[e12])
                - (self[e43] * other[e4125])
                - (self[e23] * other[e41])
                - (self[e31] * other[e42])
                - (self[e12] * other[e43])
                - (self[e45] * other[e1234]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       84      125        0
    //    simd3        0        9        0
    //    simd4       46       40        0
    // Totals...
    // yes simd      130      174        0
    //  no simd      268      312        0
    fn sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e1234] * other[e4235],
                self[e1234] * other[e4315],
                self[e1234] * other[e4125],
                -(self[e4315] * other[e4315]) - (self[e4125] * other[e4125]),
            ]) + (other.group0().yzxw() * self.group0().zxy().extend_to_4(self[e1234]))
                - (other.group0().zxyx() * self.group0().yzx().extend_to_4(self[e4235])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e41] * other[e3215]) + (self[e45] * other[e4235]) + (self[e4125] * other[e4315]),
                (self[e42] * other[e3215]) + (self[e45] * other[e4315]) + (self[e4235] * other[e4125]),
                (self[e43] * other[e3215]) + (self[e45] * other[e4125]) + (self[e4315] * other[e4235]),
                -(self[e31] * other[e4315]) - (self[e12] * other[e4125]) - (self[e1234] * other[e3215]),
            ]) - (other.group0().zxyx() * self.group3().yzx().extend_to_4(self[e23])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e25] * other[e4125]) + (self[e4235] * other[e3215]),
                (self[e31] * other[e3215]) + (self[e35] * other[e4235]) + (self[e4315] * other[e3215]),
                (self[e12] * other[e3215]) + (self[e15] * other[e4315]) + (self[e4125] * other[e3215]),
                self[e43] * other[e4125] * -1.0,
            ]) - (other.group0().xyzy() * self.group3().www().extend_to_4(self[e42]))
                - (other.group0().yzxx() * self.group2().zxy().extend_to_4(self[e41])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(self[e41] * other[e3215]) - (self[e31] * other[e4125]),
                -(self[e42] * other[e3215]) - (self[e12] * other[e4235]),
                -(self[e43] * other[e3215]) - (self[e23] * other[e4315]),
                (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]),
            ]) + (self.group1().zxyw() * other.group0().yzxw()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       55      104        0
    //    simd3        0       19        0
    //    simd4       57       42        0
    // Totals...
    // yes simd      112      165        0
    //  no simd      283      329        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                -(self[e43] * other[e2]) - (self[e1234] * other[e1]) - (self[e4235] * other[e4]),
                -(self[e41] * other[e3]) - (self[e1234] * other[e2]) - (self[e4315] * other[e4]),
                -(self[e42] * other[e1]) - (self[e1234] * other[e3]) - (self[e4125] * other[e4]),
                (self[e4315] * other[e2]) + (self[e4125] * other[e3]) + (self[e3215] * other[e4]),
            ]) + (other.group0().wwwx() * self.group1().truncate_to_3().extend_to_4(self[e4235]))
                + (self.group0().yzx() * other.group0().zxy()).extend_to_4(self[e1234] * other[e5]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e15] * other[e4]) + (self[e4315] * other[e3]),
                (self[e25] * other[e4]) + (self[e4125] * other[e1]),
                (self[e35] * other[e4]) + (self[e4235] * other[e2]),
                -(self[e12] * other[e3]) - (self[e3215] * other[e4]),
            ]) + (Simd32x4::from(other[e5]) * self.group0().extend_to_4(self[e1234]))
                - (self.group1().wwwx() * other.group0().xyzx())
                - (other.group0().yzxy() * self.group3().zxy().extend_to_4(self[e31])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e35] * other[e2]) + (self[e4235] * other[e5]) + (self[e3215] * other[e1]),
                (self[e15] * other[e3]) + (self[e4315] * other[e5]) + (self[e3215] * other[e2]),
                (self[e25] * other[e1]) + (self[e4125] * other[e5]) + (self[e3215] * other[e3]),
                -(self[e25] * other[e2]) - (self[e35] * other[e3]),
            ]) + (Simd32x4::from(other[e5]) * self.group1())
                - (self.group2().yzxx() * other.group0().zxyx()),
            // e1, e2, e3, e4
            Simd32x4::from([self[e15] * other[e4] * -1.0, self[e25] * other[e4] * -1.0, self[e35] * other[e4] * -1.0, self[e43] * other[e3]])
                + (Simd32x4::from([other[e5], other[e5], other[e5], other[e1]]) * self.group0().extend_to_4(self[e41]))
                + (other.group0().yzxy() * self.group1().zxy().extend_to_4(self[e42]))
                - (self.group1().yzxw() * other.group0().zxyw()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       61       89        0
    //    simd3        0       14        0
    //    simd4       37       30        0
    // Totals...
    // yes simd       98      133        0
    //  no simd      209      251        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[scalar]) * self.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other[scalar]) * self.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(other[scalar]) * self.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[scalar]) * self.group3(),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       83      125        0
    //    simd3        0       10        0
    //    simd4       50       43        0
    // Totals...
    // yes simd      133      178        0
    //  no simd      283      327        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([self[e1234] * other[e4235], self[e1234] * other[e4315], self[e1234] * other[e4125], self[e4125] * other[e4125] * -1.0])
                + (Simd32x4::from(other[e1234]) * self.group1().truncate_to_3().extend_to_4(self[e3215]))
                + (other.group0().yzxw() * self.group0().zxy().extend_to_4(self[e1234]))
                - (Simd32x4::from([other[e1234], other[e1234], other[e1234], other[e4315]]) * self.group3().xyzy())
                - (other.group0().zxyx() * self.group0().yzx().extend_to_4(self[e4235])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e45] * other[e4235]) + (self[e15] * other[e1234]) + (self[e4125] * other[e4315]),
                (self[e45] * other[e4315]) + (self[e25] * other[e1234]) + (self[e4235] * other[e4125]),
                (self[e45] * other[e4125]) + (self[e35] * other[e1234]) + (self[e4315] * other[e4235]),
                -(self[e31] * other[e4315]) - (self[e12] * other[e4125]) - (self[e1234] * other[e3215]),
            ]) + (self.group0() * other.group0().www()).extend_to_4(self[e3215] * other[e1234])
                - (other.group0().zxyx() * self.group3().yzx().extend_to_4(self[e23])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * other[e3215]) + (self[e25] * other[e4125]) + (self[e4235] * other[e3215]),
                (self[e31] * other[e3215]) + (self[e35] * other[e4235]) + (self[e4315] * other[e3215]),
                (self[e12] * other[e3215]) + (self[e15] * other[e4315]) + (self[e4125] * other[e3215]),
                -(self[e43] * other[e4125]) - (self[e45] * other[e1234]),
            ]) - (other.group0().xyzy() * self.group3().www().extend_to_4(self[e42]))
                - (other.group0().yzxx() * self.group2().zxy().extend_to_4(self[e41])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(self[e41] * other[e3215]) - (self[e31] * other[e4125]),
                -(self[e42] * other[e3215]) - (self[e12] * other[e4235]),
                -(self[e43] * other[e3215]) - (self[e23] * other[e4315]),
                (self[e25] * other[e4315]) + (self[e35] * other[e4125]),
            ]) + (Simd32x4::from([other[e1234], other[e1234], other[e1234], other[e4235]]) * self.group2().xyzx())
                + (self.group1().zxyw() * other.group0().yzxw()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       72      131        0
    //    simd3        0       36        0
    //    simd4       94       63        0
    // Totals...
    // yes simd      166      230        0
    //  no simd      448      491        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e1234] * other[e415]) + (self[e4315] * other[e412]),
                (self[e1234] * other[e425]) + (self[e4125] * other[e423]),
                (self[e1234] * other[e435]) + (self[e4235] * other[e431]),
                -(self[e25] * other[e431]) - (self[e35] * other[e412]),
            ]) + (Simd32x4::from([other[e431], other[e4], other[e4], other[e4]]) * self.group1().zyz().extend_to_4(self[e3215]))
                + (Simd32x4::from([other[e12345], other[e435], other[e2], other[e5]]) * self.group0().xxx().extend_to_4(self[e1234]))
                + (Simd32x4::from([other[e425], other[e1], other[e12345], other[e2]]) * self.group0().zzz().extend_to_4(self[e4315]))
                + (Simd32x4::from([other[e3], other[e12345], other[e415], other[e1]]) * self.group0().yyy().extend_to_4(self[e4235]))
                + (Simd32x4::from([other[e4], other[e412], other[e423], other[e3]]) * self.group1().xxy().extend_to_4(self[e4125]))
                - (Simd32x4::from(self[e41]) * Simd32x4::from([other[e321], other[e3], other[e425], other[e235]]))
                - (Simd32x4::from(self[e42]) * other.group1().zw().extend_to_4(other[e1], other[e315]))
                - (Simd32x4::from(self[e43]) * Simd32x4::from([other[e2], other[e415], other[e321], other[e125]]))
                - (Simd32x4::from([other[e431], other[e4], other[e4], other[e423]]) * self.group3().zyz().extend_to_4(self[e15]))
                - (Simd32x4::from([other[e4], other[e412], other[e423], other[e321]]) * self.group3().xxy().extend_to_4(self[e45]))
                - (self.group1().yzxx() * other.group0().zxy().extend_to_4(other[e415]))
                - (self.group1().wwwy() * other.group0().truncate_to_3().extend_to_4(other[e425]))
                - (self.group2().www() * other.group3().truncate_to_3()).extend_to_4(self[e12] * other[e435]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e4315] * other[e3]) + (self[e3215] * other[e423]),
                (self[e4125] * other[e1]) + (self[e3215] * other[e431]),
                (self[e4235] * other[e2]) + (self[e3215] * other[e412]),
                -(self[e45] * other[e12345]) - (self[e3215] * other[e4]),
            ]) + (Simd32x4::from([other[e431], other[e4], other[e4], other[e425]]) * self.group2().zyz().extend_to_4(self[e4315]))
                + (Simd32x4::from([other[e12345], other[e435], other[e415], other[e412]]) * self.group1().xxy().extend_to_4(self[e35]))
                + (Simd32x4::from([other[e425], other[e12345], other[e12345], other[e5]]) * self.group1().zyz().extend_to_4(self[e1234]))
                + (Simd32x4::from([other[e4], other[e412], other[e423], other[e415]]) * self.group2().xxy().extend_to_4(self[e4235]))
                + (self.group0().xxy() * other.group2().wzx()).extend_to_4(self[e15] * other[e423])
                + (self.group0().zyz() * other.group2().yww()).extend_to_4(self[e25] * other[e431])
                + (self.group2().www() * other.group2().truncate_to_3()).extend_to_4(self[e4125] * other[e435])
                - (Simd32x4::from([other[e321], other[e3], other[e1], other[e2]]) * self.group3().xxy().extend_to_4(self[e31]))
                - (Simd32x4::from([other[e2], other[e321], other[e321], other[e3]]) * self.group3().zyz().extend_to_4(self[e12]))
                - (other.group2().zxyx() * self.group0().yzx().extend_to_4(self[e41]))
                - (self.group1().yzx() * other.group1().zxy()).extend_to_4(self[e42] * other[e315])
                - (self.group1().www() * other.group3().truncate_to_3()).extend_to_4(self[e43] * other[e125])
                - (self.group2().yzx() * other.group0().zxy()).extend_to_4(self[e23] * other[e1]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e15] * other[e12345])
                    + (self[e15] * other[e321])
                    + (self[e35] * other[e425])
                    + (self[e35] * other[e2])
                    + (self[e4235] * other[e5])
                    + (self[e4125] * other[e315])
                    + (self[e3215] * other[e415])
                    + (self[e3215] * other[e1]),
                (self[e15] * other[e435])
                    + (self[e15] * other[e3])
                    + (self[e25] * other[e12345])
                    + (self[e25] * other[e321])
                    + (self[e4235] * other[e125])
                    + (self[e4315] * other[e5])
                    + (self[e3215] * other[e425])
                    + (self[e3215] * other[e2]),
                (self[e25] * other[e415])
                    + (self[e25] * other[e1])
                    + (self[e35] * other[e12345])
                    + (self[e35] * other[e321])
                    + (self[e4315] * other[e235])
                    + (self[e4125] * other[e5])
                    + (self[e3215] * other[e435])
                    + (self[e3215] * other[e3]),
                -(self[e15] * other[e1])
                    - (self[e25] * other[e425])
                    - (self[e25] * other[e2])
                    - (self[e35] * other[e435])
                    - (self[e35] * other[e3])
                    - (self[e4235] * other[e235])
                    - (self[e4315] * other[e315])
                    - (self[e4125] * other[e125]),
            ]) + (self.group1().xxyw() * other.group2().wzxw())
                + (self.group1().zyz() * other.group2().yww()).extend_to_4(self[e3215] * other[e12345])
                + (self.group1().www() * other.group2().truncate_to_3()).extend_to_4(self[e3215] * other[e321])
                - (self.group1().yzxx() * other.group2().zxyx())
                - (self.group2().yzx() * other.group1().zxy()).extend_to_4(self[e31] * other[e315])
                - (self.group2().yzx() * other.group3().zxy()).extend_to_4(self[e12] * other[e125])
                - (self.group3().yzx() * other.group2().zxy()).extend_to_4(self[e15] * other[e415]),
            // e1, e2, e3, e4
            (Simd32x4::from([other[e321], other[e3], other[e1], other[e3]]) * self.group1().xxy().extend_to_4(self[e43]))
                + (Simd32x4::from([other[e2], other[e321], other[e321], other[e12345]]) * self.group1().zyz().extend_to_4(self[e1234]))
                + (self.group3().yzxz() * other.group1().zxy().extend_to_4(other[e412]))
                + (other.group0().zxyx() * self.group2().yzx().extend_to_4(self[e4235]))
                + (self.group0().xxy() * other.group2().wzx()).extend_to_4(self[e41] * other[e1])
                + (self.group0().zyz() * other.group2().yww()).extend_to_4(self[e42] * other[e2])
                + (self.group2().www() * other.group2().truncate_to_3()).extend_to_4(self[e4315] * other[e431])
                - (Simd32x4::from([other[e431], other[e4], other[e4], other[e431]]) * self.group2().zyz().extend_to_4(self[e31]))
                - (Simd32x4::from([other[e12345], other[e435], other[e415], other[e412]]) * self.group3().xxy().extend_to_4(self[e12]))
                - (Simd32x4::from([other[e425], other[e12345], other[e12345], other[e4]]) * self.group3().zyz().extend_to_4(self[e45]))
                - (Simd32x4::from([other[e4], other[e412], other[e423], other[e423]]) * self.group2().xxy().extend_to_4(self[e23]))
                - (other.group1().xyzz() * self.group1().www().extend_to_4(self[e43]))
                - (self.group0().yzx() * other.group2().zxy()).extend_to_4(self[e41] * other[e415])
                - (self.group1().yzx() * other.group3().zxy()).extend_to_4(self[e42] * other[e425])
                - (self.group3().www() * other.group0().truncate_to_3()).extend_to_4(self[e1234] * other[e321]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      128      180        0
    //    simd3        0       21        0
    //    simd4       80       62        0
    // Totals...
    // yes simd      208      263        0
    //  no simd      448      491        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e43] * other[e4315])
                    + (self[e23] * other[e1234])
                    + (self[e12] * other[e42])
                    + (self[e1234] * other[e23])
                    + (self[e1234] * other[e4235])
                    + (self[e4315] * other[e43]),
                (self[e42] * other[e45])
                    + (self[e23] * other[e43])
                    + (self[e31] * other[e1234])
                    + (self[e1234] * other[e31])
                    + (self[e1234] * other[e4315])
                    + (self[e4125] * other[e41]),
                (self[e43] * other[e45])
                    + (self[e31] * other[e41])
                    + (self[e12] * other[e1234])
                    + (self[e1234] * other[e12])
                    + (self[e1234] * other[e4125])
                    + (self[e4235] * other[e42]),
                -(self[e15] * other[e41])
                    - (self[e25] * other[e42])
                    - (self[e35] * other[e43])
                    - (self[e4235] * other[e4235])
                    - (self[e4315] * other[e4315])
                    - (self[e4125] * other[e4125]),
            ]) + (Simd32x4::from([other[scalar], other[e12], other[e23], other[e45]]) * self.group0().xxy().extend_to_4(self[e45]))
                + (Simd32x4::from([other[e31], other[scalar], other[scalar], other[e1234]]) * self.group0().zyz().extend_to_4(self[e3215]))
                + (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e3215]]) * self.group0().xxy().extend_to_4(self[e1234]))
                - (Simd32x4::from([other[e42], other[e1234], other[e1234], other[e12]]) * self.group3().zyz().extend_to_4(self[e12]))
                - (Simd32x4::from([other[e1234], other[e43], other[e41], other[e31]]) * self.group3().xxy().extend_to_4(self[e31]))
                - (self.group1().wwwx() * other.group0().truncate_to_3().extend_to_4(other[e23]))
                - (self.group0().yzx() * other.group1().zxy()).extend_to_4(self[e41] * other[e15])
                - (self.group0().yzx() * other.group3().zxy()).extend_to_4(self[e42] * other[e25])
                - (self.group1().yzx() * other.group0().zxy()).extend_to_4(self[e43] * other[e35]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e15] * other[e1234])
                    + (self[e35] * other[e42])
                    + (self[e1234] * other[e15])
                    + (self[e4235] * other[e45])
                    + (self[e4125] * other[e4315])
                    + (self[e3215] * other[e41]),
                (self[e15] * other[e43])
                    + (self[e25] * other[e1234])
                    + (self[e1234] * other[e25])
                    + (self[e4235] * other[e4125])
                    + (self[e4315] * other[e45])
                    + (self[e3215] * other[e42]),
                (self[e25] * other[e41])
                    + (self[e35] * other[e1234])
                    + (self[e1234] * other[e35])
                    + (self[e4315] * other[e4235])
                    + (self[e4125] * other[e45])
                    + (self[e3215] * other[e43]),
                -(self[e25] * other[e42])
                    - (self[e35] * other[e43])
                    - (self[e1234] * other[e3215])
                    - (self[e4235] * other[e23])
                    - (self[e4315] * other[e31])
                    - (self[e4125] * other[e12]),
            ]) + (Simd32x4::from([other[scalar], other[e12], other[e23], other[e35]]) * self.group1().xxy().extend_to_4(self[e43]))
                + (Simd32x4::from([other[e31], other[scalar], other[scalar], other[scalar]]) * self.group1().zyzw())
                + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e25]]) * self.group0().zyz().extend_to_4(self[e42]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e15]]) * self.group0().xxy().extend_to_4(self[e41]))
                + (self.group1().www() * other.group3().truncate_to_3()).extend_to_4(self[e3215] * other[e1234])
                - (self.group1().yzxy() * other.group1().zxy().extend_to_4(other[e4315]))
                - (self.group0().yzx() * other.group2().zxy()).extend_to_4(self[e23] * other[e4235])
                - (self.group2().yzx() * other.group0().zxy()).extend_to_4(self[e12] * other[e4125])
                - (self.group3().yzx() * other.group3().zxy()).extend_to_4(self[e15] * other[e41]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e35] * other[e31]) + (self[e4235] * other[e3215]) + (self[e4125] * other[e25]) + (self[e3215] * other[e23]),
                (self[e35] * other[e4235]) + (self[e4235] * other[e35]) + (self[e4315] * other[e3215]) + (self[e3215] * other[e31]),
                (self[e35] * other[scalar]) + (self[e4315] * other[e15]) + (self[e4125] * other[e3215]) + (self[e3215] * other[e12]),
                -(self[e23] * other[e41]) - (self[e31] * other[e42]) - (self[e12] * other[e43]) - (self[e45] * other[e1234]),
            ]) + (Simd32x4::from([other[scalar], other[e12], other[e4315], other[e42]]) * self.group2().xxx().extend_to_4(self[e4315]))
                + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e45]]) * self.group1().zyz().extend_to_4(self[e1234]))
                + (Simd32x4::from([other[e4125], other[scalar], other[e23], other[e43]]) * self.group2().yyy().extend_to_4(self[e4125]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[scalar]]) * self.group1().xxy().extend_to_4(self[e1234]))
                + (self.group1().www() * other.group2().truncate_to_3()).extend_to_4(self[e4235] * other[e41])
                - (Simd32x4::from([other[e45], other[e4125], other[e31], other[e4235]]) * self.group2().xxx().extend_to_4(self[e41]))
                - (Simd32x4::from([other[e4315], other[e23], other[e45], other[e4315]]) * self.group2().zzz().extend_to_4(self[e42]))
                - (other.group3().xyzz() * self.group3().www().extend_to_4(self[e43]))
                - (other.group1().zw().extend_to_4(other[e4235], other[e31]) * self.group2().yyy().extend_to_4(self[e42]))
                - (self.group1().yzx() * other.group2().zxy()).extend_to_4(self[e41] * other[e23])
                - (self.group3().yzx() * other.group2().zxy()).extend_to_4(self[e43] * other[e12]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e35] * other[e42]) + (self[e4235] * other[scalar]) + (self[e4125] * other[e31]) + (self[e3215] * other[e41]),
                (self[e25] * other[e1234]) + (self[e4235] * other[e12]) + (self[e4315] * other[scalar]) + (self[e3215] * other[e42]),
                (self[e35] * other[e1234]) + (self[e4315] * other[e23]) + (self[e4125] * other[scalar]) + (self[e3215] * other[e43]),
                -(self[e4235] * other[e15]) - (self[e4315] * other[e25]) - (self[e4125] * other[e35]) - (self[e3215] * other[e45]),
            ]) + (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e4235]]) * self.group1().xxy().extend_to_4(self[e15]))
                + (Simd32x4::from([other[e1234], other[e43], other[e41], other[scalar]]) * self.group2().xxy().extend_to_4(self[e3215]))
                + (Simd32x4::from([other[e4315], other[e45], other[e45], other[e4315]]) * self.group1().zyz().extend_to_4(self[e25]))
                + (self.group0().yzx() * other.group2().zxy()).extend_to_4(self[e45] * other[e3215])
                + (self.group1().www() * other.group1().truncate_to_3()).extend_to_4(self[e35] * other[e4125])
                - (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e25]]) * self.group0().zyz().extend_to_4(self[e31]))
                - (Simd32x4::from([other[e3215], other[e35], other[e15], other[e15]]) * self.group0().xxy().extend_to_4(self[e23]))
                - (self.group1().yzxz() * other.group3().zxy().extend_to_4(other[e35]))
                - (self.group2().yzxx() * other.group0().zxy().extend_to_4(other[e23]))
                - (self.group2().wwwy() * other.group2().truncate_to_3().extend_to_4(other[e31]))
                - (other.group1().zxyz() * self.group3().yzx().extend_to_4(self[e35])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl std::ops::Div<sandwich> for DualNum {
    type Output = sandwich_partial<DualNum>;
    fn div(self, _rhs: sandwich) -> Self::Output {
        sandwich_partial(self)
    }
}
impl Sandwich<AntiCircleRotor> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       24        0
    //    simd3        3        5        0
    //    simd4        2        8        0
    // Totals...
    // yes simd       11       37        0
    //  no simd       23       71        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(self[e12345]) * other.group0().extend_to_4(other[scalar]),
            // e415, e425, e435, e321
            ((Simd32x3::from(self[e5]) * other.group0()) + (Simd32x3::from(self[e12345]) * other.group1().truncate_to_3())).extend_to_4(other[e45] * self[e12345] * -1.0),
            // e235, e315, e125, e5
            Simd32x4::from([other[e15] * self[e12345], other[e25] * self[e12345], other[e35] * self[e12345], other[e45] * self[e5] * -1.0])
                + (Simd32x4::from(self[e5]) * other.group1().truncate_to_3().extend_to_4(other[scalar])),
            // e1, e2, e3, e4
            self.group0().xx().extend_to_4(self[e5], 0.0) * Simd32x3::from(1.0).extend_to_4(0.0) * other.group0().extend_to_4(0.0) * Simd32x4::from([-1.0, -1.0, -1.0, 0.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1       22        0
    //    simd3        3        5        0
    //    simd4        5        9        0
    // Totals...
    // yes simd        9       36        0
    //  no simd       30       73        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            self.group0().yy().extend_to_4(self[e12345], self[e5]) * other.group0().extend_to_4(other[e4]) * Simd32x4::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                other[e415] * self[e12345] * -1.0,
                other[e425] * self[e12345] * -1.0,
                other[e435] * self[e12345] * -1.0,
                other[e321] * self[e12345],
            ]) - (Simd32x4::from(self[e5]) * other.group0().extend_to_4(other[e4])),
            // e15, e25, e35, e1234
            (-(Simd32x3::from(self[e5]) * other.group1().truncate_to_3())
                - (Simd32x3::from(self[e5]) * other.group3().truncate_to_3())
                - (Simd32x3::from(self[e12345]) * other.group2().truncate_to_3()))
            .extend_to_4(other[e4] * self[e12345] * -1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([other[e1] * self[e12345], other[e2] * self[e12345], other[e3] * self[e12345], other[e5] * self[e12345] * -1.0])
                - (Simd32x4::from(self[e5]) * other.group0().extend_to_4(other[e321])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for DualNum {
    type Output = AntiDualNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd2        0        1        0
    // Totals...
    // yes simd        2        7        0
    //  no simd        2        8        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DualNum::from_groups(
            // e5, e12345
            Simd32x2::from([(other[e3215] * self[e12345]) + (other[scalar] * self[e5]), other[scalar] * self[e12345]]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for DualNum {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        6        0
    //    simd3        1        2        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        2       12        0
    //  no simd        4       28        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(self[e12345]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            Simd32x3::from(0.0).extend_to_4(other[e321] * self[e5] * -1.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for DualNum {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        7        0
    //    simd3        2        4        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        4       14        0
    //  no simd        8       31        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            (-(Simd32x3::from(self[e5]) * other.group1().truncate_to_3()) - (Simd32x3::from(self[e12345]) * other.group0().truncate_to_3()))
                .extend_to_4(other[e321] * self[e12345]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([other[e1], other[e2], other[e3], 1.0]) * self.group0().yy().extend_to_4(self[e12345], -(other[e321] * self[e5]) - (other[e5] * self[e12345])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for DualNum {
    type Output = AntiLine;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        2        7        0
    // no simd        6       21        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(self[e12345]) * other.group0(),
            // e235, e315, e125
            (Simd32x3::from(self[e5]) * other.group0()) + (Simd32x3::from(self[e12345]) * other.group1()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for DualNum {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        2        7        0
    // no simd        8       28        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(self[e12345]) * other.group0(),
            // e235, e315, e125, e5
            (Simd32x4::from(self[e5]) * other.group0()) + (Simd32x4::from(self[e12345]) * other.group1()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for DualNum {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        4        0
    //    simd3        1        2        0
    //    simd4        0        7        0
    // Totals...
    // yes simd        2       13        0
    //  no simd        4       38        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            self.group0().xx().extend_to_4(self[e5], 0.0)
                * Simd32x3::from(1.0).extend_to_4(0.0)
                * other.group0().truncate_to_3().extend_to_4(0.0)
                * Simd32x4::from([-1.0, -1.0, -1.0, 0.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for DualNum {
    type Output = DualNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        3        0
    //    simd2        0        2        0
    // Totals...
    // yes simd        1        5        0
    //  no simd        1        7        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDualNum::from_groups(/* e3215, scalar */ Simd32x2::from(other[e12345]) * self.group0() * Simd32x2::from(-1.0));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0       10        0
    //    simd3        3        8        0
    //    simd4        3        6        0
    // Totals...
    // yes simd        6       24        0
    //  no simd       21       58        0
    fn sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[e12345]) * other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            (-(Simd32x3::from(self[e5]) * other.group0()) - (Simd32x3::from(self[e12345]) * other.group1().truncate_to_3())).extend_to_4(other[e321] * self[e12345]),
            // e15, e25, e35, e1234
            (-(Simd32x3::from(self[e5]) * other.group1().truncate_to_3()) - (Simd32x3::from(self[e12345]) * other.group2())).extend_to_4(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e5]) * other.group0().extend_to_4(other[e321]) * Simd32x4::from(-1.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2       11        0
    //    simd3        3        6        0
    //    simd4        3        9        0
    // Totals...
    // yes simd        8       26        0
    //  no simd       23       65        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(self[e12345]) * other.group0().extend_to_4(other[e12345]) * Simd32x4::from(-1.0),
            // e23, e31, e12, e45
            (-(Simd32x3::from(self[e5]) * other.group0()) - (Simd32x3::from(self[e12345]) * other.group1().truncate_to_3())).extend_to_4(other[e321] * self[e12345]),
            // e15, e25, e35, e1234
            (-(Simd32x3::from(self[e5]) * other.group1().truncate_to_3()) - (Simd32x3::from(self[e12345]) * other.group2().truncate_to_3())).extend_to_4(0.0),
            // e4235, e4315, e4125, e3215
            self.group0().xx().extend_to_4(self[e5], -(other[e321] * self[e5]) - (other[e12345] * self[e5]))
                * other.group0().extend_to_4(1.0)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       17        0
    //    simd3        4        8        0
    //    simd4        1        5        0
    // Totals...
    // yes simd        9       30        0
    //  no simd       20       61        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[e12345]) * other.group0(),
            // e415, e425, e435, e321
            ((Simd32x3::from(self[e5]) * other.group0()) + (Simd32x3::from(self[e12345]) * other.group1().truncate_to_3())).extend_to_4(other[e45] * self[e12345] * -1.0),
            // e235, e315, e125, e4
            ((Simd32x3::from(self[e5]) * other.group1().truncate_to_3()) + (Simd32x3::from(self[e12345]) * other.group2())).extend_to_4(0.0),
            // e1, e2, e3, e5
            Simd32x4::from(self[e5]) * other.group0().extend_to_4(other[e45]) * Simd32x4::from(-1.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       29        0
    //    simd3        3        5        0
    //    simd4        3        6        0
    // Totals...
    // yes simd       16       40        0
    //  no simd       31       68        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            self.group0().yy().extend_to_4(self[e12345], self[e5]) * other.group0().extend_to_4(other[e1234]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e41] * self[e5]) + (other[e23] * self[e12345]),
                (other[e42] * self[e5]) + (other[e31] * self[e12345]),
                (other[e43] * self[e5]) + (other[e12] * self[e12345]),
                -(other[e45] * self[e12345]) - (other[e1234] * self[e5]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([other[e15] * self[e12345], other[e25] * self[e12345], other[e35] * self[e12345], 0.0])
                + (self.group0().xx().extend_to_4(self[e5], self[e12345]) * other.group1().truncate_to_3().extend_to_4(other[e3215]))
                - (Simd32x4::from(self[e5]) * other.group3().truncate_to_3().extend_to_4(other[e45])),
            // e1, e2, e3, e4
            (-(Simd32x3::from(self[e5]) * other.group0()) - (Simd32x3::from(self[e12345]) * other.group3().truncate_to_3())).extend_to_4(other[e1234] * self[e12345]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for DualNum {
    type Output = DualNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd2        0        1        0
    // Totals...
    // yes simd        2        7        0
    //  no simd        2        8        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDualNum::from_groups(
            // e3215, scalar
            Simd32x2::from([-(other[e5] * self[e12345]) - (other[e12345] * self[e5]), other[e12345] * self[e12345]]) * Simd32x2::from([1.0, -1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for DualNum {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd3        1        2        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        2       10        0
    //  no simd        4       23        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(self[e12345]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1, e2, e3, e5
            Simd32x3::from(0.0).extend_to_4(self[e5] * other[e45] * -1.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for DualNum {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        7        0
    //    simd3        2        4        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        4       14        0
    //  no simd        8       31        0
    fn sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            ((Simd32x3::from(self[e12345]) * other.group0().truncate_to_3()) - (Simd32x3::from(self[e5]) * other.group1().truncate_to_3()))
                .extend_to_4(self[e12345] * other[e45] * -1.0),
            // e1, e2, e3, e5
            Simd32x4::from([other[e4235], other[e4315], other[e4125], 1.0])
                * self.group0().yy().extend_to_4(self[e12345], (self[e12345] * other[e3215]) - (self[e5] * other[e45]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for DualNum {
    type Output = Line;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        2        7        0
    // no simd        6       21        0
    fn sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(self[e12345]) * other.group0() * Simd32x3::from(-1.0),
            // e15, e25, e35
            -(Simd32x3::from(self[e5]) * other.group0()) - (Simd32x3::from(self[e12345]) * other.group1()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for DualNum {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        2        7        0
    // no simd        8       28        0
    fn sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(self[e12345]) * other.group0() * Simd32x4::from(-1.0),
            // e15, e25, e35, e3215
            -(Simd32x4::from(self[e5]) * other.group0()) - (Simd32x4::from(self[e12345]) * other.group1()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for DualNum {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       57        0
    //    simd3        8       20        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       33       82        0
    //  no simd       64      137        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([-(self[e5] * other[e4]) - (self[e12345] * other[e12345]), (self[e5] * other[e1234]) + (self[e12345] * other[scalar])]),
            // e1, e2, e3, e4
            (-(Simd32x3::from(self[e5]) * other.group4()) - (Simd32x3::from(self[e12345]) * other.group9().truncate_to_3())).extend_to_4(self[e12345] * other[e1234]),
            // e5
            (self[e5] * other[scalar]) + (self[e12345] * other[e3215]) - (self[e5] * other[e45]),
            // e15, e25, e35, e45
            Simd32x4::from([
                -(self[e5] * other[e415]) - (self[e12345] * other[e235]),
                -(self[e5] * other[e425]) - (self[e12345] * other[e315]),
                -(self[e5] * other[e435]) - (self[e12345] * other[e125]),
                self[e12345] * other[e321],
            ]) - (Simd32x4::from(self[e5]) * other.group1()),
            // e41, e42, e43
            Simd32x3::from(self[e12345]) * other.group7() * Simd32x3::from(-1.0),
            // e23, e31, e12
            -(Simd32x3::from(self[e5]) * other.group7()) - (Simd32x3::from(self[e12345]) * other.group6().truncate_to_3()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e5] * other[e41]) + (self[e12345] * other[e23]),
                (self[e5] * other[e42]) + (self[e12345] * other[e31]),
                (self[e5] * other[e43]) + (self[e12345] * other[e12]),
                -(self[e5] * other[e1234]) - (self[e12345] * other[e45]),
            ]),
            // e423, e431, e412
            Simd32x3::from(self[e12345]) * other.group4(),
            // e235, e315, e125
            (Simd32x3::from(self[e5]) * other.group5()) + (Simd32x3::from(self[e12345]) * other.group3().truncate_to_3())
                - (Simd32x3::from(self[e5]) * other.group9().truncate_to_3()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e12345] * other[e1],
                self[e12345] * other[e2],
                self[e12345] * other[e3],
                -(self[e5] * other[e321]) - (self[e12345] * other[e5]),
            ]) - (Simd32x4::from(self[e5]) * other.group7().extend_to_4(other[e12345])),
            // e1234
            self[e12345] * other[e4] * -1.0,
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for DualNum {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        3        0
    //    simd3        1        2        0
    //    simd4        0        6        0
    // Totals...
    // yes simd        2       11        0
    //  no simd        4       33        0
    fn sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            self.group0().xx().extend_to_4(self[e5], 0.0)
                * Simd32x3::from(1.0).extend_to_4(0.0)
                * other.group0().truncate_to_3().extend_to_4(0.0)
                * Simd32x4::from([-1.0, -1.0, -1.0, 0.0]),
            // e1, e2, e3, e5
            Simd32x4::from(self[e12345]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1       12        0
    //    simd3        1        2        0
    //    simd4        3        9        0
    // Totals...
    // yes simd        5       23        0
    //  no simd       16       54        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x3::from(0.0).extend_to_4(self[e5] * other[e4] * -1.0),
            // e23, e31, e12, e45
            Simd32x3::from(0.0).extend_to_4(self[e5] * other[e4] * -1.0),
            // e15, e25, e35, e1234
            other.group0() * self.group0().xx().extend_to_4(self[e5], self[e12345]) * Simd32x4::from(-1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * other.group0().truncate_to_3().extend_to_4(other[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for DualNum {
    type Output = AntiDualNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        3        0
    //    simd2        0        2        0
    // Totals...
    // yes simd        1        5        0
    //  no simd        1        7        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DualNum::from_groups(/* e5, e12345 */ Simd32x2::from(other[scalar]) * self.group0());
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       20        0
    //    simd3        2        3        0
    //    simd4        1        7        0
    // Totals...
    // yes simd        9       30        0
    //  no simd       16       57        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x3::from(0.0).extend_to_4(self[e5] * other[e1234]),
            // e415, e425, e435, e321
            Simd32x3::from(0.0).extend_to_4(self[e5] * other[e1234] * -1.0),
            // e235, e315, e125, e5
            other.group0() * self.group0().xx().extend_to_4(self[e5], self[e12345]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e4
            Simd32x4::from(self[e12345]) * other.group0().truncate_to_3().extend_to_4(other[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       24        0
    //    simd3        3        5        0
    //    simd4        5        9        0
    // Totals...
    // yes simd       11       38        0
    //  no simd       32       75        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([other[e423], other[e431], other[e412], 1.0])
                * self.group0().yy().extend_to_4(self[e12345], -(self[e5] * other[e4]) - (self[e12345] * other[e12345]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            Simd32x4::from([
                self[e12345] * other[e415] * -1.0,
                self[e12345] * other[e425] * -1.0,
                self[e12345] * other[e435] * -1.0,
                self[e12345] * other[e321],
            ]) - (Simd32x4::from(self[e5]) * other.group0().truncate_to_3().extend_to_4(other[e4])),
            // e15, e25, e35, e1234
            (-(Simd32x3::from(self[e5]) * other.group1().truncate_to_3())
                - (Simd32x3::from(self[e5]) * other.group3().truncate_to_3())
                - (Simd32x3::from(self[e12345]) * other.group2().truncate_to_3()))
            .extend_to_4(self[e12345] * other[e4] * -1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e12345] * other[e1],
                self[e12345] * other[e2],
                self[e12345] * other[e3],
                -(self[e5] * other[e321]) - (self[e12345] * other[e5]),
            ]) - (Simd32x4::from(self[e5]) * other.group0()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       28        0
    //    simd3        3        5        0
    //    simd4        3        7        0
    // Totals...
    // yes simd       17       40        0
    //  no simd       32       71        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([other[e41], other[e42], other[e43], 1.0]) * self.group0().yy().extend_to_4(self[e12345], (self[e5] * other[e1234]) + (self[e12345] * other[scalar])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e5] * other[e41]) + (self[e12345] * other[e23]),
                (self[e5] * other[e42]) + (self[e12345] * other[e31]),
                (self[e5] * other[e43]) + (self[e12345] * other[e12]),
                -(self[e5] * other[e1234]) - (self[e12345] * other[e45]),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from(self[e5]) * other.group1().truncate_to_3().extend_to_4(other[scalar]))
                + (Simd32x4::from(self[e12345]) * other.group2().truncate_to_3().extend_to_4(other[e3215]))
                - (Simd32x4::from(self[e5]) * other.group3().truncate_to_3().extend_to_4(other[e45])),
            // e1, e2, e3, e4
            (-(Simd32x3::from(self[e5]) * other.group0().truncate_to_3()) - (Simd32x3::from(self[e12345]) * other.group3().truncate_to_3()))
                .extend_to_4(self[e12345] * other[e1234]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl std::ops::Div<sandwich> for FlatPoint {
    type Output = sandwich_partial<FlatPoint>;
    fn div(self, _rhs: sandwich) -> Self::Output {
        sandwich_partial(self)
    }
}
impl Sandwich<AntiCircleRotor> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       37        0
    //    simd3        6       12        0
    //    simd4       12       12        0
    // Totals...
    // yes simd       36       61        0
    //  no simd       84      121        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([self[e45], self[e45], self[e45], 1.0])
                * other
                    .group0()
                    .extend_to_4((other[e45] * self[e45]) - (other[e41] * self[e15]) - (other[e42] * self[e25]) - (other[e43] * self[e35]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            (self.group0().zxyw() * other.group0().yzx().extend_to_4(other[scalar])) + Simd32x3::from(0.0).extend_to_4(-(other[e42] * self[e25]) - (other[e43] * self[e35]))
                - (self.group0().yzxx() * other.group0().zxy().extend_to_4(other[e41])),
            // e15, e25, e35, e1234
            (Simd32x3::from(other[scalar]) * self.group0().truncate_to_3()).extend_to_4(0.0)
                + (Simd32x3::from(self[e45]) * other.group2().truncate_to_3()).extend_to_4(0.0)
                + (other.group1().yzx() * self.group0().zxy()).extend_to_4(0.0)
                - (Simd32x3::from(other[e45]) * self.group0().truncate_to_3()).extend_to_4(0.0)
                - (other.group1().zxy() * self.group0().yzx()).extend_to_4(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e42] * self[e35]) + (other[e23] * self[e45]),
                (other[e43] * self[e15]) + (other[e31] * self[e45]),
                (other[e41] * self[e25]) + (other[e12] * self[e45]),
                -(other[e31] * self[e25]) - (other[e12] * self[e35]),
            ]) - (self.group0().yzxx() * other.group0().zxy().extend_to_4(other[e23])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       22       39        0
    //    simd3        6        8        0
    //    simd4       13       18        0
    // Totals...
    // yes simd       41       65        0
    //  no simd       92      135        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([self[e45], self[e45], self[e45], 1.0])
                * other
                    .group0()
                    .extend_to_4(-(other[e423] * self[e15]) - (other[e431] * self[e25]) - (other[e412] * self[e35]) - (other[e321] * self[e45]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(other[e412] * self[e25]) - (other[e1] * self[e45]),
                -(other[e423] * self[e35]) - (other[e2] * self[e45]),
                -(other[e431] * self[e15]) - (other[e3] * self[e45]),
                other[e412] * self[e35],
            ]) + (self.group0().xyzy() * other.group2().www().extend_to_4(other[e431]))
                + (self.group0().zxyx() * other.group0().yzx().extend_to_4(other[e423])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e321] * self[e15]) + (other[e235] * self[e45]) + (other[e2] * self[e35]),
                (other[e321] * self[e25]) + (other[e315] * self[e45]) + (other[e3] * self[e15]),
                (other[e321] * self[e35]) + (other[e125] * self[e45]) + (other[e1] * self[e25]),
                -(other[e435] * self[e35]) - (other[e1] * self[e15]) - (other[e2] * self[e25]) - (other[e3] * self[e35]),
            ]) + (self.group0().zxyw() * other.group1().yzx().extend_to_4(other[e5]))
                - (other.group1().zxyx() * self.group0().yzxx())
                - (self.group0().yzxy() * other.group3().zxy().extend_to_4(other[e425])),
            // e1, e2, e3, e4
            ((other.group0().zxy() * self.group0().yzx())
                - (Simd32x3::from(other[e4]) * self.group0().truncate_to_3())
                - (Simd32x3::from(self[e45]) * other.group1().truncate_to_3())
                - (other.group0().yzx() * self.group0().zxy()))
            .extend_to_4(other[e4] * self[e45] * -1.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for FlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        9        0
    //    simd4        2        5        0
    // Totals...
    // yes simd        6       14        0
    //  no simd       12       29        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(other[scalar]) * self.group0(),
            // e4235, e4315, e4125, e3215
            Simd32x3::from(0.0).extend_to_4(other[e3215] * self[e45]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for FlatPoint {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        8        0
    //    simd3        4        6        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        7       17        0
    //  no simd       15       38        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x3::from(0.0).extend_to_4(other[e321] * self[e45] * -1.0),
            // e235, e315, e125, e5
            ((Simd32x3::from(other[e321]) * self.group0().truncate_to_3()) + (Simd32x3::from(self[e45]) * other.group0().truncate_to_3())).extend_to_4(0.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for FlatPoint {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       14        0
    //    simd3        3        4        0
    //    simd4        2        7        0
    // Totals...
    // yes simd       12       25        0
    //  no simd       24       54        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(self[e45]) * other.group1().truncate_to_3().extend_to_4(other[e321]) * Simd32x4::from(-1.0),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e321] * self[e15]) + (other[e2] * self[e35]),
                (other[e321] * self[e25]) + (other[e3] * self[e15]),
                (other[e321] * self[e35]) + (other[e1] * self[e25]),
                -(other[e2] * self[e25]) - (other[e3] * self[e35]),
            ]) + (Simd32x4::from(self[e45]) * other.group0().truncate_to_3().extend_to_4(other[e5]))
                - (other.group1().zxyx() * self.group0().yzxx()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for FlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       11        0
    //    simd3        0        3        0
    //    simd4        4        5        0
    // Totals...
    // yes simd       10       19        0
    //  no simd       22       40        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x3::from(self[e45]) * other.group1()).extend_to_4(0.0) + (other.group0().yzx() * self.group0().zxy()).extend_to_4(0.0)
                - (other.group0().zxy() * self.group0().yzx()).extend_to_4(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e45], self[e45], self[e45], 1.0]) * other.group0().extend_to_4(-(other[e23] * self[e15]) - (other[e31] * self[e25]) - (other[e12] * self[e35])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for FlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       13        0
    //    simd3        3        4        0
    //    simd4        2        5        0
    // Totals...
    // yes simd       12       22        0
    //  no simd       24       45        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            ((Simd32x3::from(other[scalar]) * self.group0().truncate_to_3())
                + (Simd32x3::from(self[e45]) * other.group1().truncate_to_3())
                + (other.group0().yzx() * self.group0().zxy())
                - (other.group0().zxy() * self.group0().yzx()))
            .extend_to_4(other[scalar] * self[e45]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e45], self[e45], self[e45], 1.0])
                * other
                    .group0()
                    .truncate_to_3()
                    .extend_to_4((other[e3215] * self[e45]) - (other[e23] * self[e15]) - (other[e31] * self[e25]) - (other[e12] * self[e35])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for FlatPoint {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd3        3        4        0
    //    simd4        2        8        0
    // Totals...
    // yes simd        9       20        0
    //  no simd       21       52        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x3::from(1.0).extend_to_4(0.0) * self.group0().www().extend_to_4(0.0) * other.group0().truncate_to_3().extend_to_4(0.0) * Simd32x4::from([-1.0, -1.0, -1.0, 0.0]),
            // e235, e315, e125, e5
            (other.group0().yzxw() * self.group0().zxyw()) + Simd32x3::from(0.0).extend_to_4(-(other[e2] * self[e25]) - (other[e3] * self[e35]))
                - (other.group0().zxyx() * self.group0().yzxx()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for FlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd3        1        2        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        1        7        0
    //  no simd        3       20        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ Simd32x4::from(other[e12345]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       36        0
    //    simd3        3        7        0
    //    simd4       12       15        0
    // Totals...
    // yes simd       33       58        0
    //  no simd       75      117        0
    fn sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([self[e45], self[e45], self[e45], 1.0])
                * other
                    .group0()
                    .extend_to_4(-(other[e423] * self[e15]) - (other[e431] * self[e25]) - (other[e412] * self[e35]) - (other[e321] * self[e45]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            Simd32x4::from([
                other[e412] * self[e25] * -1.0,
                other[e423] * self[e35] * -1.0,
                other[e431] * self[e15] * -1.0,
                (other[e431] * self[e25]) + (other[e412] * self[e35]),
            ]) + (self.group0().zxyx() * other.group0().yzx().extend_to_4(other[e423])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e425] * self[e35]) + (other[e321] * self[e15]) + (other[e235] * self[e45]),
                (other[e435] * self[e15]) + (other[e321] * self[e25]) + (other[e315] * self[e45]),
                (other[e415] * self[e25]) + (other[e321] * self[e35]) + (other[e125] * self[e45]),
                -(other[e425] * self[e25]) - (other[e435] * self[e35]),
            ]) - (other.group1().zxyx() * self.group0().yzxx()),
            // e1, e2, e3, e4
            (other.group0().zxy() * self.group0().yzx()).extend_to_4(0.0)
                - (Simd32x3::from(self[e45]) * other.group1().truncate_to_3()).extend_to_4(0.0)
                - (other.group0().yzx() * self.group0().zxy()).extend_to_4(0.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       21       33        0
    //    simd3        3        7        0
    //    simd4       13       16        0
    // Totals...
    // yes simd       37       56        0
    //  no simd       82      118        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([self[e45], self[e45], self[e45], 1.0])
                * other
                    .group0()
                    .extend_to_4(-(other[e423] * self[e15]) - (other[e431] * self[e25]) - (other[e412] * self[e35]) - (other[e321] * self[e45]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            (self.group0().zxyx() * other.group0().yzx().extend_to_4(other[e423])) + Simd32x3::from(0.0).extend_to_4((other[e431] * self[e25]) + (other[e412] * self[e35]))
                - (self.group0().yzxw() * other.group0().zxy().extend_to_4(other[e12345])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e425] * self[e35]) + (other[e321] * self[e15]) + (other[e235] * self[e45]) + (other[e12345] * self[e15]),
                (other[e435] * self[e15]) + (other[e321] * self[e25]) + (other[e315] * self[e45]) + (other[e12345] * self[e25]),
                (other[e415] * self[e25]) + (other[e321] * self[e35]) + (other[e125] * self[e45]) + (other[e12345] * self[e35]),
                -(other[e425] * self[e25]) - (other[e435] * self[e35]),
            ]) - (other.group1().zxyx() * self.group0().yzxx()),
            // e1, e2, e3, e4
            (other.group0().zxy() * self.group0().yzx()).extend_to_4(0.0)
                - (Simd32x3::from(self[e45]) * other.group1().truncate_to_3()).extend_to_4(0.0)
                - (other.group0().yzx() * self.group0().zxy()).extend_to_4(0.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       40        0
    //    simd3        6       11        0
    //    simd4       10       11        0
    // Totals...
    // yes simd       34       62        0
    //  no simd       76      117        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([self[e45], self[e45], self[e45], 1.0])
                * other
                    .group0()
                    .extend_to_4((other[e45] * self[e45]) - (other[e41] * self[e15]) - (other[e42] * self[e25]) - (other[e43] * self[e35]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            Simd32x4::from([
                other[e42] * self[e35],
                other[e43] * self[e15],
                other[e41] * self[e25],
                -(other[e42] * self[e25]) - (other[e43] * self[e35]),
            ]) - (self.group0().yzxx() * other.group0().zxy().extend_to_4(other[e41])),
            // e15, e25, e35, e1234
            (Simd32x3::from(self[e45]) * other.group2()).extend_to_4(0.0) + (other.group1().yzx() * self.group0().zxy()).extend_to_4(0.0)
                - (Simd32x3::from(other[e45]) * self.group0().truncate_to_3()).extend_to_4(0.0)
                - (other.group1().zxy() * self.group0().yzx()).extend_to_4(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e42] * self[e35]) + (other[e23] * self[e45]),
                (other[e43] * self[e15]) + (other[e31] * self[e45]),
                (other[e41] * self[e25]) + (other[e12] * self[e45]),
                -(other[e31] * self[e25]) - (other[e12] * self[e35]),
            ]) - (self.group0().yzxx() * other.group0().zxy().extend_to_4(other[e23])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       22       43        0
    //    simd3       11       13        0
    //    simd4       10       14        0
    // Totals...
    // yes simd       43       70        0
    //  no simd       95      138        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([self[e45], self[e45], self[e45], 1.0])
                * other
                    .group0()
                    .extend_to_4((other[e45] * self[e45]) - (other[e41] * self[e15]) - (other[e42] * self[e25]) - (other[e43] * self[e35]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e42] * self[e35]) + (other[e1234] * self[e15]) + (other[e4235] * self[e45]),
                (other[e43] * self[e15]) + (other[e1234] * self[e25]) + (other[e4315] * self[e45]),
                (other[e41] * self[e25]) + (other[e1234] * self[e35]) + (other[e4125] * self[e45]),
                -(other[e42] * self[e25]) - (other[e43] * self[e35]),
            ]) - (self.group0().yzxx() * other.group0().zxy().extend_to_4(other[e41])),
            // e15, e25, e35, e1234
            ((Simd32x3::from(self[e45]) * other.group2().truncate_to_3()) + (other.group1().yzx() * self.group0().zxy()) + (other.group3().zxy() * self.group0().yzx())
                - (Simd32x3::from(other[e45]) * self.group0().truncate_to_3())
                - (other.group1().zxy() * self.group0().yzx())
                - (other.group3().yzx() * self.group0().zxy()))
            .extend_to_4(other[e1234] * self[e45] * -1.0),
            // e4235, e4315, e4125, e3215
            (self.group0().xyzz() * other.group2().www().extend_to_4(other[e4125]))
                + (self.group0().zxyx() * other.group0().yzx().extend_to_4(other[e4235]))
                + (self.group0().wwwy() * other.group1().truncate_to_3().extend_to_4(other[e4315]))
                + Simd32x3::from(0.0).extend_to_4((other[e3215] * self[e45]) - (other[e31] * self[e25]) - (other[e12] * self[e35]))
                - (self.group0().yzxx() * other.group0().zxy().extend_to_4(other[e23])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for FlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        9        0
    //    simd4        2        7        0
    // Totals...
    // yes simd        6       16        0
    //  no simd       12       37        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(other[e12345]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1, e2, e3, e5
            Simd32x3::from(0.0).extend_to_4(other[e5] * self[e45]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for FlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        6        0
    //    simd3        4        6        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        7       14        0
    //  no simd       15       32        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x3::from(0.0).extend_to_4(other[e45] * self[e45]),
            // e15, e25, e35, e3215
            ((Simd32x3::from(self[e45]) * other.group0().truncate_to_3()) - (Simd32x3::from(other[e45]) * self.group0().truncate_to_3())).extend_to_4(0.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for FlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       13        0
    //    simd3        3        4        0
    //    simd4        2        5        0
    // Totals...
    // yes simd       12       22        0
    //  no simd       24       45        0
    fn sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(self[e45]) * other.group1().truncate_to_3().extend_to_4(other[e45]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                -(self[e15] * other[e45]) - (self[e35] * other[e4315]),
                -(self[e15] * other[e4125]) - (self[e25] * other[e45]),
                -(self[e25] * other[e4235]) - (self[e35] * other[e45]),
                (self[e35] * other[e4125]) + (self[e45] * other[e3215]),
            ]) + (self.group0().yzxx() * other.group1().zxyx())
                + (self.group0().wwwy() * other.group0().truncate_to_3().extend_to_4(other[e4315])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for FlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       11        0
    //    simd3        0        3        0
    //    simd4        4        7        0
    // Totals...
    // yes simd       10       21        0
    //  no simd       22       48        0
    fn sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x3::from(self[e45]) * other.group1()).extend_to_4(0.0) + (other.group0().yzx() * self.group0().zxy()).extend_to_4(0.0)
                - (other.group0().zxy() * self.group0().yzx()).extend_to_4(0.0),
            // e1, e2, e3, e5
            Simd32x4::from([self[e45], self[e45], self[e45], 1.0])
                * other.group0().extend_to_4(-(self[e15] * other[e415]) - (self[e25] * other[e425]) - (self[e35] * other[e435]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for FlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       14        0
    //    simd3        3        4        0
    //    simd4        2        7        0
    // Totals...
    // yes simd       12       25        0
    //  no simd       24       54        0
    fn sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            ((Simd32x3::from(self[e45]) * other.group1().truncate_to_3()) + (self.group0().xxy() * other.group0().wzx()) + (self.group0().zyz() * other.group0().yww())
                - (self.group0().yzx() * other.group0().zxy()))
            .extend_to_4(self[e45] * other[e12345] * -1.0),
            // e1, e2, e3, e5
            Simd32x4::from([other[e415], other[e425], other[e435], 1.0])
                * self
                    .group0()
                    .www()
                    .extend_to_4((self[e45] * other[e5]) - (self[e15] * other[e415]) - (self[e25] * other[e425]) - (self[e35] * other[e435]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for FlatPoint {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       37       77        0
    //    simd2        6        6        0
    //    simd3       24       40        0
    //    simd4       19       16        0
    // Totals...
    // yes simd       86      139        0
    //  no simd      197      273        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([self[e45] * other[e45], self[e45] * other[e321] * -1.0])
                - (Simd32x2::from(self[e15]) * Simd32x2::from([other[e41], other[e423]]))
                - (Simd32x2::from(self[e25]) * Simd32x2::from([other[e42], other[e431]]))
                - (Simd32x2::from(self[e35]) * Simd32x2::from([other[e43], other[e412]])),
            // e1, e2, e3, e4
            ((other.group7().zxy() * self.group0().yzx())
                - (Simd32x3::from(self[e45]) * other.group6().truncate_to_3())
                - (Simd32x3::from(other[e4]) * self.group0().truncate_to_3())
                - (other.group7().yzx() * self.group0().zxy()))
            .extend_to_4(self[e45] * other[e4] * -1.0),
            // e5
            (self[e45] * other[e5])
                - (self[e15] * other[e1])
                - (self[e15] * other[e415])
                - (self[e25] * other[e2])
                - (self[e25] * other[e425])
                - (self[e35] * other[e3])
                - (self[e35] * other[e435]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e25] * other[e4125]) + (self[e35] * other[e31]) + (self[e45] * other[e15]),
                (self[e15] * other[e12]) + (self[e35] * other[e4235]) + (self[e45] * other[e25]),
                (self[e15] * other[e4315]) + (self[e25] * other[e23]) + (self[e45] * other[e35]),
                0.0,
            ]) + (Simd32x4::from(other[scalar]) * self.group0())
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], self[e25]]) * self.group0().xxy().extend_to_4(other[e42]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], self[e35]]) * self.group0().zyz().extend_to_4(other[e43]))
                - (self.group0().yzxx() * other.group5().zxy().extend_to_4(other[e41])),
            // e41, e42, e43
            Simd32x3::from(self[e45]) * other.group4() * Simd32x3::from(-1.0),
            // e23, e31, e12
            (Simd32x3::from(self[e45]) * other.group9().truncate_to_3())
                + (Simd32x3::from(other[e1234]) * self.group0().truncate_to_3())
                + (other.group4().yzx() * self.group0().zxy())
                - (other.group4().zxy() * self.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([self[e45] * other[e1] * -1.0, self[e45] * other[e2] * -1.0, self[e45] * other[e3] * -1.0, self[e35] * other[e412]])
                + (self.group0().zxyx() * other.group7().yzx().extend_to_4(other[e423]))
                + (other.group1().www() * self.group0().truncate_to_3()).extend_to_4(self[e25] * other[e431])
                - (self.group0().yzxw() * other.group7().zxy().extend_to_4(other[e12345])),
            // e423, e431, e412
            Simd32x3::from(self[e45]) * other.group7() * Simd32x3::from(-1.0),
            // e235, e315, e125
            (Simd32x3::from(self[e45]) * other.group8())
                + (Simd32x3::from(other[e12345]) * self.group0().truncate_to_3())
                + (Simd32x3::from([other[e2], other[e435], other[e415]]) * self.group0().zxy())
                + (Simd32x3::from([other[e321], other[e3], other[e1]]) * self.group0().xxy())
                + (self.group0().zyz() * other.group6().yww())
                - (self.group0().yzx() * other.group1().zxy())
                - (self.group0().yzx() * other.group6().zxy()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([other[e1234], other[e1234], other[e1234], other[e4125]]) * self.group0().xyzz())
                + Simd32x3::from(0.0).extend_to_4((self[e45] * other[e3215]) - (self[e25] * other[e31]) - (self[e35] * other[e12]))
                + (other.group5() * self.group0().www()).extend_to_4(self[e25] * other[e4315])
                + (other.group4().yzx() * self.group0().zxy()).extend_to_4(self[e15] * other[e4235])
                - (self.group0().yzxx() * other.group4().zxy().extend_to_4(other[e23])),
            // e1234
            self[e45] * other[e1234] * -1.0,
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for FlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       14        0
    //    simd3        3        4        0
    //    simd4        1        6        0
    // Totals...
    // yes simd        9       24        0
    //  no simd       18       50        0
    fn sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x3::from(1.0).extend_to_4(0.0) * self.group0().www().extend_to_4(0.0) * other.group0().truncate_to_3().extend_to_4(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                self[e35] * other[e4315] * -1.0,
                self[e15] * other[e4125] * -1.0,
                self[e25] * other[e4235] * -1.0,
                (self[e25] * other[e4315]) + (self[e35] * other[e4125]) + (self[e45] * other[e3215]),
            ]) + (self.group0().yzxx() * other.group0().zxyx()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       20        0
    //    simd3        5        8        0
    //    simd4        8       12        0
    // Totals...
    // yes simd       22       40        0
    //  no simd       56       92        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            ((Simd32x3::from(other[e4]) * self.group0().truncate_to_3()) - (Simd32x3::from(self[e45]) * other.group0().truncate_to_3())).extend_to_4(0.0),
            // e235, e315, e125, e4
            ((self.group0().zxy() * other.group0().yzx()) - (self.group0().yzx() * other.group0().zxy())).extend_to_4(self[e45] * other[e4] * -1.0),
            // e1, e2, e3, e5
            Simd32x4::from([other[e4], other[e4], other[e4], 1.0])
                * self
                    .group0()
                    .truncate_to_3()
                    .extend_to_4((self[e45] * other[e5]) - (self[e15] * other[e1]) - (self[e25] * other[e2]) - (self[e35] * other[e3]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for FlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd3        1        2        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        1        5        0
    //  no simd        3       15        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = FlatPoint::from_groups(/* e15, e25, e35, e45 */ Simd32x4::from(other[scalar]) * self.group0());
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       28        0
    //    simd3        7       10        0
    //    simd4        5        8        0
    // Totals...
    // yes simd       25       46        0
    //  no simd       54       90        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            ((Simd32x3::from(self[e45]) * other.group0().truncate_to_3()) + (Simd32x3::from(other[e1234]) * self.group0().truncate_to_3())).extend_to_4(0.0),
            // e15, e25, e35, e1234
            ((self.group0().yzx() * other.group0().zxy()) - (self.group0().zxy() * other.group0().yzx())).extend_to_4(self[e45] * other[e1234] * -1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([other[e1234], other[e1234], other[e1234], 1.0])
                * self
                    .group0()
                    .truncate_to_3()
                    .extend_to_4((self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]) + (self[e45] * other[e3215])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       22       42        0
    //    simd3        6        8        0
    //    simd4       14       19        0
    // Totals...
    // yes simd       42       69        0
    //  no simd       96      142        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([other[e423], other[e431], other[e412], 1.0])
                * self
                    .group0()
                    .www()
                    .extend_to_4(-(self[e15] * other[e423]) - (self[e25] * other[e431]) - (self[e35] * other[e412]) - (self[e45] * other[e321]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            Simd32x4::from([self[e45] * other[e1] * -1.0, self[e45] * other[e2] * -1.0, self[e45] * other[e3] * -1.0, self[e35] * other[e412]])
                + (Simd32x4::from([other[e431], other[e4], other[e4], other[e431]]) * self.group0().zyzy())
                + (Simd32x4::from([other[e4], other[e412], other[e423], other[e423]]) * self.group0().xxyx())
                - (self.group0().yzxw() * other.group0().zxyw()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e15] * other[e321]) + (self[e35] * other[e425]) + (self[e35] * other[e2]) + (self[e45] * other[e235]),
                (self[e15] * other[e3]) + (self[e25] * other[e12345]) + (self[e25] * other[e321]) + (self[e45] * other[e315]),
                (self[e25] * other[e1]) + (self[e35] * other[e12345]) + (self[e35] * other[e321]) + (self[e45] * other[e125]),
                -(self[e25] * other[e425]) - (self[e25] * other[e2]) - (self[e35] * other[e435]) - (self[e35] * other[e3]),
            ]) + (Simd32x4::from([other[e12345], other[e435], other[e415], other[e5]]) * self.group0().xxyw())
                - (self.group0().yzxx() * other.group1().zxyx())
                - (self.group0().yzxx() * other.group3().zxyx()),
            // e1, e2, e3, e4
            ((self.group0().yzx() * other.group0().zxy())
                - (Simd32x3::from(self[e45]) * other.group1().truncate_to_3())
                - (Simd32x3::from([other[e431], other[e4], other[e4]]) * self.group0().zyz())
                - (Simd32x3::from([other[e4], other[e412], other[e423]]) * self.group0().xxy()))
            .extend_to_4(self[e45] * other[e4] * -1.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       40        0
    //    simd3       12       14        0
    //    simd4       11       15        0
    // Totals...
    // yes simd       42       69        0
    //  no simd       99      142        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([other[e41], other[e42], other[e43], 1.0])
                * self
                    .group0()
                    .www()
                    .extend_to_4((self[e45] * other[e45]) - (self[e15] * other[e41]) - (self[e25] * other[e42]) - (self[e35] * other[e43]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e35] * other[e42]) + (self[e45] * other[e4235]),
                (self[e25] * other[e1234]) + (self[e45] * other[e4315]),
                (self[e35] * other[e1234]) + (self[e45] * other[e4125]),
                -(self[e25] * other[e42]) - (self[e35] * other[e43]),
            ]) + (Simd32x4::from([other[e1234], other[e43], other[e41], other[scalar]]) * self.group0().xxyw())
                - (self.group0().yzxx() * other.group0().zxyx()),
            // e15, e25, e35, e1234
            ((Simd32x3::from(self[e15]) * Simd32x3::from([other[scalar], other[e12], other[e4315]]))
                + (Simd32x3::from(self[e25]) * Simd32x3::from([other[e4125], other[scalar], other[e23]]))
                + (Simd32x3::from(self[e35]) * Simd32x3::from([other[e31], other[e4235], other[scalar]]))
                + (Simd32x3::from(self[e45]) * other.group2().truncate_to_3())
                - (Simd32x3::from(self[e15]) * Simd32x3::from([other[e45], other[e4125], other[e31]]))
                - (Simd32x3::from(self[e25]) * Simd32x3::from([other[e12], other[e45], other[e4235]]))
                - (Simd32x3::from(self[e35]) * Simd32x3::from([other[e4315], other[e23], other[e45]])))
            .extend_to_4(self[e45] * other[e1234] * -1.0),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([other[e42], other[e1234], other[e1234], other[e4315]]) * self.group0().zyzy())
                + (Simd32x4::from([other[e1234], other[e43], other[e41], other[e4235]]) * self.group0().xxyx())
                + (self.group0().wwwz() * other.group1().truncate_to_3().extend_to_4(other[e4125]))
                + Simd32x3::from(0.0).extend_to_4((self[e45] * other[e3215]) - (self[e25] * other[e31]) - (self[e35] * other[e12]))
                - (self.group0().yzxx() * other.group0().zxy().extend_to_4(other[e23])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl std::ops::Div<sandwich> for Flector {
    type Output = sandwich_partial<Flector>;
    fn div(self, _rhs: sandwich) -> Self::Output {
        sandwich_partial(self)
    }
}
impl Sandwich<AntiCircleRotor> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64       97        0
    //    simd3        0        8        0
    //    simd4       32       25        0
    // Totals...
    // yes simd       96      130        0
    //  no simd      192      221        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x3::from(0.0).extend_to_4(other[e43] * self[e35] * -1.0) + (other.group0().zxy() * self.group1().yzx()).extend_to_4(other[e45] * self[e45])
                - (self.group0().ww().extend_to_4(self[e4315], self[e15]) * other.group0().xyx().extend_to_4(other[e41]))
                - (self.group1().zx().extend_to_4(self[e45], self[e25]) * other.group0().yzz().extend_to_4(other[e42])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e42] * self[e35]) + (other[e45] * self[e4235]),
                (other[e43] * self[e15]) + (other[e45] * self[e4315]),
                (other[e43] * self[e3215]) + (other[e45] * self[e4125]),
                -(other[e42] * self[e25]) - (other[e43] * self[e35]) - (other[e23] * self[e4235]) - (other[e31] * self[e4315]) - (other[e12] * self[e4125]),
            ]) + (self.group1().ww().extend_to_4(self[e25], self[e45]) * other.group0().xyx().extend_to_4(other[scalar]))
                - (self.group0().yzxx() * other.group0().zxy().extend_to_4(other[e41])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e25] * self[e4125]) + (other[scalar] * self[e15]) - (other[e12] * self[e25]) - (other[e45] * self[e15]) - (other[e35] * self[e4315]),
                (other[e35] * self[e4235]) + (other[scalar] * self[e25]) - (other[e23] * self[e35]) - (other[e45] * self[e25]) - (other[e15] * self[e4125]),
                (other[e35] * self[e45]) + (other[scalar] * self[e35]) - (other[e31] * self[e15]) - (other[e45] * self[e35]) - (other[e25] * self[e4235]),
                0.0,
            ]) + (self.group0().zx().extend_to_4(self[e3215], self[e4315]) * other.group1().yzz().extend_to_4(other[e42]))
                + (self.group0().ww().extend_to_4(self[e4315], self[e4125]) * other.group2().xyx().extend_to_4(other[e43]))
                + (self.group1().ww().extend_to_4(self[e25], self[e4235]) * other.group1().xyx().extend_to_4(other[e41])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e42] * self[e35]) + (other[e23] * self[e45]) + (other[e31] * self[e4125]) + (other[scalar] * self[e4235]),
                (other[e43] * self[e15]) + (other[e31] * self[e45]) + (other[e12] * self[e4235]) + (other[scalar] * self[e4315]),
                (other[e43] * self[e3215]) + (other[e23] * self[e4315]) + (other[e12] * self[e45]) + (other[scalar] * self[e4125]),
                -(other[e12] * self[e35]) - (other[e45] * self[e3215]) - (other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]),
            ]) + (self.group1().ww().extend_to_4(self[e25], self[e3215]) * other.group0().xyx().extend_to_4(other[scalar]))
                - (other.group1().zxyy() * self.group1().yzx().extend_to_4(self[e25]))
                - (self.group0().yzxx() * other.group0().zxy().extend_to_4(other[e23])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       55       82        0
    //    simd3        0        6        0
    //    simd4       42       38        0
    // Totals...
    // yes simd       97      126        0
    //  no simd      223      252        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (self.group1().yzxw() * other.group0().zxy().extend_to_4(other[e4]))
                + Simd32x3::from(0.0).extend_to_4((other[e1] * self[e4235]) + (other[e2] * self[e4315]) + (other[e3] * self[e4125]) - (other[e321] * self[e45]))
                - (self.group0().ww().extend_to_4(self[e4315], self[e15]) * other.group0().xyx().extend_to_4(other[e423]))
                - (self.group1().zx().extend_to_4(self[e45], self[e25]) * other.group0().yzz().extend_to_4(other[e431]))
                - (other.group2().www() * self.group1().truncate_to_3()).extend_to_4(other[e412] * self[e35]),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(other[e321] * self[e4235]) - (other[e1] * self[e45]) - (other[e2] * self[e4125]),
                -(other[e321] * self[e4315]) - (other[e2] * self[e45]) - (other[e3] * self[e4235]),
                -(other[e321] * self[e4125]) - (other[e1] * self[e4315]) - (other[e3] * self[e45]),
                (other[e425] * self[e4315]) + (other[e435] * self[e4125]),
            ]) + (self.group0().xyzz() * other.group2().www().extend_to_4(other[e412]))
                + (self.group1().yzxx() * other.group3().zxy().extend_to_4(other[e415]))
                + (self.group0().zx().extend_to_4(self[e3215], self[e25]) * other.group0().yzz().extend_to_4(other[e431]))
                + (self.group1().ww().extend_to_4(self[e25], self[e15]) * other.group0().xyx().extend_to_4(other[e423]))
                - (other.group0().zxy() * self.group0().yzx()).extend_to_4(other[e4] * self[e3215]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e321] * self[e15])
                    + (other[e235] * self[e45])
                    + (other[e315] * self[e4125])
                    + (other[e1] * self[e3215])
                    + (other[e2] * self[e35])
                    + (other[e5] * self[e4235]),
                (other[e321] * self[e25])
                    + (other[e315] * self[e45])
                    + (other[e125] * self[e4235])
                    + (other[e2] * self[e3215])
                    + (other[e3] * self[e15])
                    + (other[e5] * self[e4315]),
                (other[e321] * self[e35])
                    + (other[e235] * self[e4315])
                    + (other[e125] * self[e45])
                    + (other[e1] * self[e25])
                    + (other[e3] * self[e3215])
                    + (other[e5] * self[e4125]),
                -(other[e235] * self[e4235])
                    - (other[e315] * self[e4315])
                    - (other[e125] * self[e4125])
                    - (other[e1] * self[e15])
                    - (other[e2] * self[e25])
                    - (other[e3] * self[e35]),
            ]) + (other.group1().xyxw() * self.group1().ww().extend_to_4(self[e25], self[e3215]))
                + (self.group0().zx().extend_to_4(self[e3215], self[e45]) * other.group1().yzz().extend_to_4(other[e5]))
                - (other.group1().zxyx() * self.group0().yzxx())
                - (self.group0().yzxz() * other.group3().zxy().extend_to_4(other[e435]))
                - (other.group2().zxy() * self.group1().yzx()).extend_to_4(other[e425] * self[e25]),
            // e1, e2, e3, e4
            Simd32x4::from([
                -(other[e431] * self[e35]) - (other[e415] * self[e45]) - (other[e425] * self[e4125]) - (other[e4] * self[e15]),
                -(other[e412] * self[e15]) - (other[e425] * self[e45]) - (other[e435] * self[e4235]) - (other[e4] * self[e25]),
                -(other[e412] * self[e3215]) - (other[e415] * self[e4315]) - (other[e435] * self[e45]) - (other[e4] * self[e35]),
                other[e412] * self[e4125],
            ]) + (self.group1().yzxy() * other.group1().zxy().extend_to_4(other[e431]))
                + (other.group0().zxy() * self.group0().yzx()).extend_to_4(other[e423] * self[e4235])
                - (self.group1().ww().extend_to_4(self[e25], self[e45]) * other.group0().xyx().extend_to_4(other[e4])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for Flector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       11        0
    //    simd3        1        2        0
    //    simd4        9       12        0
    // Totals...
    // yes simd       15       25        0
    //  no simd       44       65        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            ((Simd32x3::from(other[e3215]) * self.group1().truncate_to_3()) + (Simd32x3::from(other[scalar]) * self.group0().truncate_to_3()))
                .extend_to_4(other[scalar] * self[e45]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e4235], self[e4315], self[e4125], 1.0])
                * other.group0().yy().extend_to_4(other[scalar], (other[e3215] * self[e45]) + (other[scalar] * self[e3215])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for Flector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       24        0
    //    simd4       10       13        0
    // Totals...
    // yes simd       26       37        0
    //  no simd       56       76        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(other[e321]) * self.group1().truncate_to_3().extend_to_4(self[e45]) * Simd32x4::from(-1.0),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e315] * self[e4125]) + (other[e321] * self[e15]),
                (other[e125] * self[e4235]) + (other[e321] * self[e25]),
                (other[e125] * self[e45]) + (other[e321] * self[e35]),
                -(other[e315] * self[e4315]) - (other[e125] * self[e4125]),
            ]) + (other.group0().xyxw() * self.group0().ww().extend_to_4(self[e4315], self[e3215]))
                - (other.group0().zxyx() * self.group1().yzxx()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for Flector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       41        0
    //    simd3        0        1        0
    //    simd4       14       14        0
    // Totals...
    // yes simd       42       56        0
    //  no simd       84      100        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                -(other[e1] * self[e45]) - (other[e2] * self[e4125]),
                -(other[e2] * self[e45]) - (other[e3] * self[e4235]),
                -(other[e1] * self[e4315]) - (other[e3] * self[e45]),
                (other[e2] * self[e4315]) + (other[e3] * self[e4125]),
            ]) + (other.group1().zxyx() * self.group1().yzxx())
                - (Simd32x4::from(other[e321]) * self.group1().truncate_to_3().extend_to_4(self[e45])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e321] * self[e15]) + (other[e1] * self[e3215]) + (other[e2] * self[e35]) + (other[e5] * self[e4235]),
                (other[e321] * self[e25]) + (other[e2] * self[e3215]) + (other[e3] * self[e15]) + (other[e5] * self[e4315]),
                (other[e321] * self[e35]) + (other[e1] * self[e25]) + (other[e3] * self[e3215]) + (other[e5] * self[e4125]),
                -(other[e125] * self[e4125]) - (other[e1] * self[e15]) - (other[e2] * self[e25]) - (other[e3] * self[e35]),
            ]) + (other.group0().xyxw() * self.group0().ww().extend_to_4(self[e4315], self[e3215]))
                + (self.group1().zx().extend_to_4(self[e45], self[e45]) * other.group0().yzz().extend_to_4(other[e5]))
                - (other.group0().zxyx() * self.group1().yzxx())
                - (other.group1().zxy() * self.group0().yzx()).extend_to_4(other[e315] * self[e4315]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for Flector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       35        0
    //    simd3        0        2        0
    //    simd4       12       12        0
    // Totals...
    // yes simd       32       49        0
    //  no simd       68       89        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e23] * self[e3215]) + (other[e31] * self[e35]) + (other[e15] * self[e45]) + (other[e25] * self[e4125]),
                (other[e31] * self[e3215]) + (other[e12] * self[e15]) + (other[e25] * self[e45]) + (other[e35] * self[e4235]),
                (other[e23] * self[e25]) + (other[e12] * self[e3215]) + (other[e15] * self[e4315]) + (other[e35] * self[e45]),
                other[e12] * self[e4125] * -1.0,
            ]) - (self.group1().yzxy() * other.group1().zxy().extend_to_4(other[e31]))
                - (other.group0().zxy() * self.group0().yzx()).extend_to_4(other[e23] * self[e4235]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e23] * self[e45]) + (other[e31] * self[e4125]),
                (other[e31] * self[e45]) + (other[e12] * self[e4235]),
                (other[e23] * self[e4315]) + (other[e12] * self[e45]),
                -(other[e31] * self[e25]) - (other[e12] * self[e35]) - (other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]),
            ]) - (other.group0().zxy() * self.group1().yzx()).extend_to_4(other[e23] * self[e15]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for Flector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       33        0
    //    simd4       15       17        0
    // Totals...
    // yes simd       35       50        0
    //  no simd       80      101        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e31] * self[e35]) + (other[scalar] * self[e15]) + (other[e15] * self[e45]) + (other[e25] * self[e4125]) + (other[e3215] * self[e4235]),
                (other[e12] * self[e15]) + (other[scalar] * self[e25]) + (other[e25] * self[e45]) + (other[e35] * self[e4235]) + (other[e3215] * self[e4315]),
                (other[e12] * self[e3215]) + (other[scalar] * self[e35]) + (other[e15] * self[e4315]) + (other[e35] * self[e45]) + (other[e3215] * self[e4125]),
                other[e12] * self[e4125] * -1.0,
            ]) + (other.group0().xyxw() * self.group1().ww().extend_to_4(self[e25], self[e45]))
                - (other.group0().zxyx() * self.group0().yzx().extend_to_4(self[e4235]))
                - (self.group1().yzxy() * other.group1().zxy().extend_to_4(other[e31])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[scalar] * self[e4235],
                other[scalar] * self[e4315],
                other[scalar] * self[e4125],
                -(other[e31] * self[e25]) - (other[e12] * self[e35]) - (other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]),
            ]) + (other.group0().xyxw() * self.group0().ww().extend_to_4(self[e4315], self[e3215]))
                + (self.group1().zx().extend_to_4(self[e45], self[e45]) * other.group0().yzz().extend_to_4(other[e3215]))
                - (other.group0().zxyx() * self.group1().yzx().extend_to_4(self[e15])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for Flector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       32        0
    //    simd4       11       12        0
    // Totals...
    // yes simd       31       44        0
    //  no simd       64       80        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                -(other[e1] * self[e45]) - (other[e2] * self[e4125]),
                -(other[e2] * self[e45]) - (other[e3] * self[e4235]),
                -(other[e1] * self[e4315]) - (other[e3] * self[e45]),
                (other[e2] * self[e4315]) + (other[e3] * self[e4125]),
            ]) + (other.group0().zxyx() * self.group1().yzxx()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e2] * self[e35]) + (other[e5] * self[e4235]),
                (other[e3] * self[e15]) + (other[e5] * self[e4315]),
                (other[e3] * self[e3215]) + (other[e5] * self[e4125]),
                -(other[e2] * self[e25]) - (other[e3] * self[e35]),
            ]) + (other.group0().xyxw() * self.group1().ww().extend_to_4(self[e25], self[e45]))
                - (other.group0().zxyx() * self.group0().yzxx()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for Flector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       25        0
    //    simd3        0        1        0
    //    simd4        6       10        0
    // Totals...
    // yes simd       22       36        0
    //  no simd       40       68        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(other[e12345]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1, e2, e3, e5
            Simd32x4::from(other[e12345]) * self.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44       72        0
    //    simd3        0        4        0
    //    simd4       34       32        0
    // Totals...
    // yes simd       78      108        0
    //  no simd      180      212        0
    fn sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                other[e412] * self[e4315],
                other[e423] * self[e4125],
                other[e431] * self[e4235],
                -(other[e412] * self[e35]) - (other[e321] * self[e45]),
            ]) - (self.group0().ww().extend_to_4(self[e4315], self[e15]) * other.group0().xyx().extend_to_4(other[e423]))
                - (self.group1().zx().extend_to_4(self[e45], self[e25]) * other.group0().yzz().extend_to_4(other[e431])),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(other[e412] * self[e25]) - (other[e321] * self[e4235]),
                -(other[e423] * self[e35]) - (other[e321] * self[e4315]),
                -(other[e431] * self[e15]) - (other[e321] * self[e4125]),
                (other[e412] * self[e35]) + (other[e415] * self[e4235]) + (other[e425] * self[e4315]) + (other[e435] * self[e4125]),
            ]) + (self.group0().zx().extend_to_4(self[e3215], self[e25]) * other.group0().yzz().extend_to_4(other[e431]))
                + (self.group1().ww().extend_to_4(self[e25], self[e15]) * other.group0().xyx().extend_to_4(other[e423])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e415] * self[e3215]) + (other[e425] * self[e35]) + (other[e321] * self[e15]) + (other[e315] * self[e4125]),
                (other[e425] * self[e3215]) + (other[e435] * self[e15]) + (other[e321] * self[e25]) + (other[e125] * self[e4235]),
                (other[e415] * self[e25]) + (other[e435] * self[e3215]) + (other[e321] * self[e35]) + (other[e125] * self[e45]),
                -(other[e415] * self[e15]) - (other[e425] * self[e25]) - (other[e435] * self[e35]) - (other[e125] * self[e4125]),
            ]) + (self.group0().ww().extend_to_4(self[e4315], self[e3215]) * other.group2().xyx().extend_to_4(other[e321]))
                - (self.group1().yzxx() * other.group2().zxy().extend_to_4(other[e235]))
                - (other.group1().zxy() * self.group0().yzx()).extend_to_4(other[e315] * self[e4315]),
            // e1, e2, e3, e4
            Simd32x4::from([
                -(other[e423] * self[e3215]) - (other[e431] * self[e35]) - (other[e415] * self[e45]) - (other[e425] * self[e4125]),
                -(other[e431] * self[e3215]) - (other[e412] * self[e15]) - (other[e425] * self[e45]) - (other[e435] * self[e4235]),
                -(other[e423] * self[e25]) - (other[e412] * self[e3215]) - (other[e415] * self[e4315]) - (other[e435] * self[e45]),
                other[e412] * self[e4125],
            ]) + (self.group1().yzxy() * other.group1().zxy().extend_to_4(other[e431]))
                + (other.group0().zxy() * self.group0().yzx()).extend_to_4(other[e423] * self[e4235]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44       75        0
    //    simd3        0        4        0
    //    simd4       36       34        0
    // Totals...
    // yes simd       80      113        0
    //  no simd      188      223        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                other[e412] * self[e4315],
                other[e423] * self[e4125],
                other[e431] * self[e4235],
                -(other[e412] * self[e35]) - (other[e321] * self[e45]),
            ]) - (self.group0().ww().extend_to_4(self[e4315], self[e15]) * other.group0().xyx().extend_to_4(other[e423]))
                - (self.group1().zx().extend_to_4(self[e45], self[e25]) * other.group0().yzz().extend_to_4(other[e431])),
            // e415, e425, e435, e321
            Simd32x4::from([
                other[e321] * self[e4235] * -1.0,
                other[e321] * self[e4315] * -1.0,
                other[e321] * self[e4125] * -1.0,
                (other[e412] * self[e35]) + (other[e415] * self[e4235]) + (other[e425] * self[e4315]) + (other[e435] * self[e4125]),
            ]) + (self.group0().zx().extend_to_4(self[e3215], self[e25]) * other.group0().yzz().extend_to_4(other[e431]))
                + (self.group1().ww().extend_to_4(self[e25], self[e15]) * other.group0().xyx().extend_to_4(other[e423]))
                - (self.group0().yzxw() * other.group0().zxy().extend_to_4(other[e12345])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e321] * self[e15]) + (other[e235] * self[e45]) + (other[e315] * self[e4125]) + (other[e12345] * self[e15]),
                (other[e321] * self[e25]) + (other[e315] * self[e45]) + (other[e125] * self[e4235]) + (other[e12345] * self[e25]),
                (other[e321] * self[e35]) + (other[e235] * self[e4315]) + (other[e125] * self[e45]) + (other[e12345] * self[e35]),
                -(other[e435] * self[e35]) - (other[e235] * self[e4235]) - (other[e315] * self[e4315]) - (other[e125] * self[e4125]),
            ]) + (other.group1().xyxw() * self.group1().ww().extend_to_4(self[e25], self[e3215]))
                + (self.group0().zx().extend_to_4(self[e3215], self[e3215]) * other.group1().yzz().extend_to_4(other[e12345]))
                - (other.group1().zxyx() * self.group0().yzxx())
                - (other.group2().zxy() * self.group1().yzx()).extend_to_4(other[e425] * self[e25]),
            // e1, e2, e3, e4
            Simd32x4::from([
                -(other[e423] * self[e3215]) - (other[e431] * self[e35]) - (other[e415] * self[e45]) - (other[e425] * self[e4125]) - (other[e12345] * self[e4235]),
                -(other[e431] * self[e3215]) - (other[e412] * self[e15]) - (other[e425] * self[e45]) - (other[e435] * self[e4235]) - (other[e12345] * self[e4315]),
                -(other[e423] * self[e25]) - (other[e412] * self[e3215]) - (other[e415] * self[e4315]) - (other[e435] * self[e45]) - (other[e12345] * self[e4125]),
                other[e412] * self[e4125],
            ]) + (self.group1().yzxy() * other.group1().zxy().extend_to_4(other[e431]))
                + (other.group0().zxy() * self.group0().yzx()).extend_to_4(other[e423] * self[e4235]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64       98        0
    //    simd3        0        9        0
    //    simd4       30       22        0
    // Totals...
    // yes simd       94      129        0
    //  no simd      184      213        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x3::from(0.0).extend_to_4(other[e43] * self[e35] * -1.0) + (other.group0().zxy() * self.group1().yzx()).extend_to_4(other[e45] * self[e45])
                - (self.group0().ww().extend_to_4(self[e4315], self[e15]) * other.group0().xyx().extend_to_4(other[e41]))
                - (self.group1().zx().extend_to_4(self[e45], self[e25]) * other.group0().yzz().extend_to_4(other[e42])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e41] * self[e3215]) + (other[e42] * self[e35]) + (other[e45] * self[e4235]),
                (other[e42] * self[e3215]) + (other[e43] * self[e15]) + (other[e45] * self[e4315]),
                (other[e41] * self[e25]) + (other[e43] * self[e3215]) + (other[e45] * self[e4125]),
                -(other[e42] * self[e25]) - (other[e43] * self[e35]) - (other[e23] * self[e4235]) - (other[e31] * self[e4315]) - (other[e12] * self[e4125]),
            ]) - (self.group0().yzxx() * other.group0().zxy().extend_to_4(other[e41])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e31] * self[e35]) - (other[e12] * self[e25]) - (other[e45] * self[e15]) - (other[e35] * self[e4315]),
                (other[e12] * self[e15]) - (other[e23] * self[e35]) - (other[e45] * self[e25]) - (other[e15] * self[e4125]),
                (other[e12] * self[e3215]) - (other[e31] * self[e15]) - (other[e45] * self[e35]) - (other[e25] * self[e4235]),
                0.0,
            ]) + (self.group0().ww().extend_to_4(self[e4315], self[e4235]) * other.group2().xyx().extend_to_4(other[e41]))
                + (self.group1().zx().extend_to_4(self[e45], self[e4315]) * other.group2().yzz().extend_to_4(other[e42]))
                + (self.group1().ww().extend_to_4(self[e25], self[e4125]) * other.group1().xyx().extend_to_4(other[e43])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e41] * self[e3215]) + (other[e42] * self[e35]) + (other[e23] * self[e45]) + (other[e31] * self[e4125]),
                (other[e42] * self[e3215]) + (other[e43] * self[e15]) + (other[e31] * self[e45]) + (other[e12] * self[e4235]),
                (other[e41] * self[e25]) + (other[e43] * self[e3215]) + (other[e23] * self[e4315]) + (other[e12] * self[e45]),
                -(other[e23] * self[e15]) - (other[e31] * self[e25]) - (other[e12] * self[e35]) - (other[e45] * self[e3215]) - (other[e35] * self[e4125]),
            ]) - (self.group1().yzxy() * other.group1().zxy().extend_to_4(other[e25]))
                - (other.group0().zxy() * self.group0().yzx()).extend_to_4(other[e15] * self[e4235]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       72      106        0
    //    simd3        0       10        0
    //    simd4       38       29        0
    // Totals...
    // yes simd      110      145        0
    //  no simd      224      252        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x3::from(0.0).extend_to_4((other[e1234] * self[e3215]) - (other[e4235] * self[e4235]) - (other[e4315] * self[e4315]) - (other[e4125] * self[e4125]))
                + (other.group0().zxy() * self.group1().yzx()).extend_to_4(other[e45] * self[e45])
                - (self.group0().ww().extend_to_4(self[e4315], self[e15]) * other.group0().xyx().extend_to_4(other[e41]))
                - (self.group1().zx().extend_to_4(self[e45], self[e25]) * other.group0().yzz().extend_to_4(other[e42]))
                - (other.group2().www() * self.group1().truncate_to_3()).extend_to_4(other[e43] * self[e35]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e42] * self[e35]) + (other[e45] * self[e4235]) + (other[e1234] * self[e15]) + (other[e4235] * self[e45]) + (other[e4315] * self[e4125]),
                (other[e43] * self[e15]) + (other[e45] * self[e4315]) + (other[e1234] * self[e25]) + (other[e4315] * self[e45]) + (other[e4125] * self[e4235]),
                (other[e43] * self[e3215]) + (other[e45] * self[e4125]) + (other[e1234] * self[e35]) + (other[e4235] * self[e4315]) + (other[e4125] * self[e45]),
                -(other[e43] * self[e35]) - (other[e23] * self[e4235]) - (other[e31] * self[e4315]) - (other[e12] * self[e4125]),
            ]) + (self.group1().ww().extend_to_4(self[e25], self[e3215]) * other.group0().xyx().extend_to_4(other[e1234]))
                - (self.group0().yzxx() * other.group0().zxy().extend_to_4(other[e41]))
                - (other.group3().zxy() * self.group1().yzx()).extend_to_4(other[e42] * self[e25]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e25] * self[e4125]) + (other[e4125] * self[e25]) + (other[e3215] * self[e4235])
                    - (other[e45] * self[e15])
                    - (other[e35] * self[e4315])
                    - (other[e4235] * self[e3215])
                    - (other[e4315] * self[e35]),
                (other[e35] * self[e4235]) + (other[e4235] * self[e35]) + (other[e3215] * self[e4315])
                    - (other[e45] * self[e25])
                    - (other[e15] * self[e4125])
                    - (other[e4315] * self[e3215])
                    - (other[e4125] * self[e15]),
                (other[e35] * self[e45]) + (other[e4315] * self[e15]) + (other[e3215] * self[e4125])
                    - (other[e45] * self[e35])
                    - (other[e25] * self[e4235])
                    - (other[e4235] * self[e25])
                    - (other[e4125] * self[e3215]),
                0.0,
            ]) + (self.group0().zx().extend_to_4(self[e3215], self[e4315]) * other.group1().yzz().extend_to_4(other[e42]))
                + (self.group0().ww().extend_to_4(self[e4315], self[e4125]) * other.group2().xyx().extend_to_4(other[e43]))
                + (self.group1().ww().extend_to_4(self[e25], self[e4235]) * other.group1().xyx().extend_to_4(other[e41]))
                - (self.group0().yzxw() * other.group1().zxy().extend_to_4(other[e1234])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e1234] * self[e15],
                other[e1234] * self[e25],
                other[e1234] * self[e35],
                -(other[e12] * self[e35]) - (other[e45] * self[e3215]) - (other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]),
            ]) + (self.group0().zx().extend_to_4(self[e3215], self[e25]) * other.group0().yzz().extend_to_4(other[e4315]))
                + (self.group0().ww().extend_to_4(self[e4315], self[e35]) * other.group1().xyx().extend_to_4(other[e4125]))
                + (self.group1().zx().extend_to_4(self[e45], self[e45]) * other.group1().yzz().extend_to_4(other[e3215]))
                + (self.group1().ww().extend_to_4(self[e25], self[e15]) * other.group0().xyx().extend_to_4(other[e4235]))
                - (other.group1().zxyy() * self.group1().yzx().extend_to_4(self[e25]))
                - (self.group0().yzxx() * other.group0().zxy().extend_to_4(other[e23])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for Flector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       29        0
    //    simd3        1        3        0
    //    simd4        6        8        0
    // Totals...
    // yes simd       24       40        0
    //  no simd       44       70        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            ((Simd32x3::from(other[e5]) * self.group1().truncate_to_3()) + (Simd32x3::from(other[e12345]) * self.group0().truncate_to_3()))
                .extend_to_4(other[e12345] * self[e45] * -1.0),
            // e1, e2, e3, e5
            Simd32x4::from([self[e4235], self[e4315], self[e4125], 1.0])
                * other.group0().yy().extend_to_4(other[e12345], (other[e5] * self[e45]) + (other[e12345] * self[e3215]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for Flector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       24        0
    //    simd4       10       12        0
    // Totals...
    // yes simd       26       36        0
    //  no simd       56       72        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(other[e45]) * self.group1().truncate_to_3().extend_to_4(self[e45]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (other[e15] * self[e45]) + (other[e25] * self[e4125]),
                (other[e25] * self[e45]) + (other[e35] * self[e4235]),
                (other[e15] * self[e4315]) + (other[e35] * self[e45]),
                -(other[e35] * self[e4125]) - (other[e45] * self[e3215]),
            ]) - (other.group0().zxyx() * self.group1().yzxx())
                - (other.group0().wwwy() * self.group0().truncate_to_3().extend_to_4(self[e4315])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for Flector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       24        0
    //    simd4       17       19        0
    // Totals...
    // yes simd       33       43        0
    //  no simd       84      100        0
    fn sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (other[e4235] * self[e45]) + (other[e4315] * self[e4125]),
                (other[e4315] * self[e45]) + (other[e4125] * self[e4235]),
                (other[e4235] * self[e4315]) + (other[e4125] * self[e45]),
                -(other[e4315] * self[e4315]) - (other[e4125] * self[e4125]),
            ]) + (Simd32x4::from(other[e45]) * self.group1().truncate_to_3().extend_to_4(self[e45]))
                - (other.group1().zxyx() * self.group1().yzxx()),
            // e15, e25, e35, e3215
            (Simd32x4::from(other[e3215]) * self.group1().truncate_to_3().extend_to_4(self[e45]))
                + (other.group1().zxyz() * self.group0().yzxz())
                + (self.group0().ww().extend_to_4(self[e4315], self[e15]) * other.group0().xyx().extend_to_4(other[e4235]))
                + (self.group1().zx().extend_to_4(self[e45], self[e25]) * other.group0().yzz().extend_to_4(other[e4315]))
                - (other.group0().zxyx() * self.group1().yzxx())
                - (other.group0().wwwy() * self.group0().truncate_to_3().extend_to_4(self[e4315]))
                - (self.group0().zx().extend_to_4(self[e3215], self[e3215]) * other.group1().yzz().extend_to_4(other[e45]))
                - (self.group1().ww().extend_to_4(self[e25], self[e4125]) * other.group1().xyx().extend_to_4(other[e35])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for Flector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       25       41        0
    //    simd3        0        1        0
    //    simd4       11       11        0
    // Totals...
    // yes simd       36       53        0
    //  no simd       69       88        0
    fn sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (self[e4125] * other[e315]) - (self[e25] * other[e435]) - (self[e4315] * other[e125]),
                (self[e4235] * other[e125]) - (self[e35] * other[e415]) - (self[e4125] * other[e235]),
                (self[e45] * other[e125]) - (self[e15] * other[e425]) - (self[e4235] * other[e315]),
                0.0,
            ]) + (self.group0().zx().extend_to_4(self[e3215], self[e4315]) * other.group0().yzz().extend_to_4(other[e425]))
                + (self.group0().ww().extend_to_4(self[e4315], self[e4125]) * other.group1().xyx().extend_to_4(other[e435]))
                + (self.group1().ww().extend_to_4(self[e25], self[e4235]) * other.group0().xyx().extend_to_4(other[e415])),
            // e1, e2, e3, e5
            Simd32x4::from([
                self[e4315] * other[e435],
                self[e4125] * other[e415],
                self[e4235] * other[e425],
                -(self[e35] * other[e435]) - (self[e4235] * other[e235]) - (self[e4315] * other[e315]) - (self[e4125] * other[e125]),
            ]) - (self.group0().ww().extend_to_4(self[e4315], self[e15]) * other.group0().xyx().extend_to_4(other[e415]))
                - (self.group1().zx().extend_to_4(self[e45], self[e25]) * other.group0().yzz().extend_to_4(other[e425])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for Flector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       43        0
    //    simd3        0        3        0
    //    simd4       14       12        0
    // Totals...
    // yes simd       42       58        0
    //  no simd       84      100        0
    fn sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (self[e4235] * other[e5]) + (self[e4125] * other[e315]) + (self[e3215] * other[e415]) - (self[e4315] * other[e125]),
                (self[e4235] * other[e125]) + (self[e4315] * other[e5]) + (self[e3215] * other[e425]) - (self[e4125] * other[e235]),
                (self[e4315] * other[e235]) + (self[e4125] * other[e5]) + (self[e3215] * other[e435]) - (self[e4235] * other[e315]),
                0.0,
            ]) + (other.group0().ywwy() * self.group0().zyz().extend_to_4(self[e4315]))
                + (other.group0().wzxx() * self.group0().xxy().extend_to_4(self[e4235]))
                + (self.group0().www() * other.group1().truncate_to_3()).extend_to_4(self[e4125] * other[e435])
                - (self.group0().yzxw() * other.group0().zxyw()),
            // e1, e2, e3, e5
            Simd32x3::from(0.0).extend_to_4((self[e3215] * other[e12345]) - (self[e4235] * other[e235]) - (self[e4315] * other[e315]) - (self[e4125] * other[e125]))
                + (self.group1().yzx() * other.group0().zxy()).extend_to_4(self[e45] * other[e5])
                - (self.group0().wwwx() * other.group0().xyzx())
                - (other.group0().ywwz() * self.group1().zyz().extend_to_4(self[e35]))
                - (other.group0().wzxy() * self.group1().xxy().extend_to_4(self[e25])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for Flector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       93      140        0
    //    simd2        8        8        0
    //    simd3       48       71        0
    //    simd4       50       37        0
    // Totals...
    // yes simd      199      256        0
    //  no simd      453      517        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e45] * other[e45]) - (self[e4235] * other[e4235]) - (self[e4315] * other[e4315]) - (self[e4125] * other[e4125]),
                (self[e4315] * other[e2]) + (self[e4125] * other[e3]) + (self[e3215] * other[e4]) - (self[e45] * other[e321]),
            ]) + (Simd32x2::from([other[e1234], other[e1]]) * self.group1().wx())
                - (Simd32x2::from(self[e15]) * Simd32x2::from([other[e41], other[e423]]))
                - (Simd32x2::from(self[e25]) * Simd32x2::from([other[e42], other[e431]]))
                - (Simd32x2::from(self[e35]) * Simd32x2::from([other[e43], other[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                -(self[e15] * other[e4]) - (self[e35] * other[e431]) - (self[e45] * other[e415]) - (self[e4125] * other[e425]) - (self[e3215] * other[e423]),
                -(self[e15] * other[e412]) - (self[e25] * other[e4]) - (self[e45] * other[e425]) - (self[e4235] * other[e435]) - (self[e3215] * other[e431]),
                -(self[e25] * other[e423]) - (self[e35] * other[e4]) - (self[e45] * other[e435]) - (self[e4315] * other[e415]) - (self[e3215] * other[e412]),
                self[e4125] * other[e412],
            ]) + (other.group7().zxy() * self.group0().yzx()).extend_to_4(self[e4235] * other[e423])
                + (self.group1().yzx() * other.group6().zxy()).extend_to_4(self[e4315] * other[e431])
                - (other.group0().yy().extend_to_4(other[e12345], self[e45]) * self.group1().truncate_to_3().extend_to_4(other[e4])),
            // e5
            (self[e45] * other[e5]) + (self[e3215] * other[e12345]) + (self[e3215] * other[e321])
                - (self[e15] * other[e1])
                - (self[e15] * other[e415])
                - (self[e25] * other[e2])
                - (self[e25] * other[e425])
                - (self[e35] * other[e3])
                - (self[e35] * other[e435])
                - (self[e4235] * other[e235])
                - (self[e4315] * other[e315])
                - (self[e4125] * other[e125]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e25] * other[e4125]) + (self[e35] * other[e31]) + (self[e45] * other[e15]) + (self[e4235] * other[e3215]) + (self[e4125] * other[e25]),
                (self[e15] * other[e12]) + (self[e35] * other[e4235]) + (self[e45] * other[e25]) + (self[e4235] * other[e35]) + (self[e4315] * other[e3215]),
                (self[e15] * other[e4315]) + (self[e45] * other[e35]) + (self[e4315] * other[e15]) + (self[e4125] * other[e3215]) + (self[e3215] * other[e12]),
                self[e4125] * other[e12] * -1.0,
            ]) + (Simd32x4::from(other[scalar]) * self.group0())
                + (self.group1().ww().extend_to_4(self[e25], other[e1234]) * other.group5().xyx().extend_to_4(self[e3215]))
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], self[e25]]) * self.group0().xxy().extend_to_4(other[e42]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], self[e35]]) * self.group0().zyz().extend_to_4(other[e43]))
                - (self.group0().yzxx() * other.group5().zxy().extend_to_4(other[e41]))
                - (self.group1().yzx() * other.group3().zxy()).extend_to_4(self[e4235] * other[e23])
                - (self.group1().www() * other.group9().truncate_to_3()).extend_to_4(self[e4315] * other[e31]),
            // e41, e42, e43
            (other.group4().zxy() * self.group1().yzx())
                - (Simd32x3::from(other[e1234]) * self.group1().truncate_to_3())
                - (Simd32x3::from([self[e45], self[e45], self[e4315]]) * other.group4().xyx())
                - (Simd32x3::from([self[e4125], self[e4235], self[e45]]) * other.group4().yzz()),
            // e23, e31, e12
            (Simd32x3::from(self[e45]) * other.group9().truncate_to_3())
                + (Simd32x3::from(other[e1234]) * self.group0().truncate_to_3())
                + (Simd32x3::from([self[e35], self[e15], self[e3215]]) * other.group4().yzz())
                + (Simd32x3::from([self[e3215], self[e3215], self[e25]]) * other.group4().xyx())
                + (Simd32x3::from([other[e45], other[e4125], other[e4235]]) * self.group1().xxy())
                + (Simd32x3::from([other[e4315], other[e45], other[e45]]) * self.group1().zyz())
                - (other.group4().zxy() * self.group0().yzx())
                - (self.group1().yzx() * other.group9().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(self[e4235] * other[e321]) - (self[e4125] * other[e2]),
                -(self[e4235] * other[e3]) - (self[e4315] * other[e321]),
                -(self[e4315] * other[e1]) - (self[e4125] * other[e321]),
                (self[e4315] * other[e425]) + (self[e4125] * other[e435]),
            ]) + (self.group1().yzxx() * other.group1().zxy().extend_to_4(other[e415]))
                + (self.group0().zx().extend_to_4(self[e3215], self[e25]) * other.group7().yzz().extend_to_4(other[e431]))
                + (self.group1().ww().extend_to_4(self[e25], self[e15]) * other.group7().xyx().extend_to_4(other[e423]))
                + (other.group1().www() * self.group0().truncate_to_3()).extend_to_4(self[e35] * other[e412])
                - (other.group1() * self.group0().www().extend_to_4(self[e3215]))
                - (self.group0().yzxw() * other.group7().zxy().extend_to_4(other[e12345])),
            // e423, e431, e412
            (other.group7().zxy() * self.group1().yzx())
                - (Simd32x3::from(other[e4]) * self.group1().truncate_to_3())
                - (Simd32x3::from([self[e45], self[e45], self[e4315]]) * other.group7().xyx())
                - (Simd32x3::from([self[e4125], self[e4235], self[e45]]) * other.group7().yzz()),
            // e235, e315, e125
            (Simd32x3::from(self[e3215]) * other.group1().truncate_to_3())
                + (Simd32x3::from(self[e3215]) * other.group6().truncate_to_3())
                + (Simd32x3::from(other[e12345]) * self.group0().truncate_to_3())
                + (Simd32x3::from(other[e5]) * self.group1().truncate_to_3())
                + (Simd32x3::from([self[e45], self[e45], self[e4315]]) * other.group8().xyx())
                + (Simd32x3::from([self[e4125], self[e4235], self[e45]]) * other.group8().yzz())
                + (Simd32x3::from([other[e2], other[e435], other[e415]]) * self.group0().zxy())
                + (Simd32x3::from([other[e321], other[e3], other[e1]]) * self.group0().xxy())
                + (self.group0().zyz() * other.group6().yww())
                - (other.group8().zxy() * self.group1().yzx())
                - (self.group0().yzx() * other.group1().zxy())
                - (self.group0().yzx() * other.group6().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e15] * other[e1234],
                self[e25] * other[e1234],
                self[e35] * other[e1234],
                -(self[e35] * other[e12]) - (self[e4235] * other[e15]) - (self[e4315] * other[e25]) - (self[e4125] * other[e35]) - (self[e3215] * other[e45]),
            ]) + (Simd32x4::from(other[scalar]) * self.group1())
                + (self.group0().zx().extend_to_4(self[e3215], other[e4315]) * other.group4().yzz().extend_to_4(self[e25]))
                + (self.group0().ww().extend_to_4(self[e4315], other[e4125]) * other.group5().xyx().extend_to_4(self[e35]))
                + (self.group1().zx().extend_to_4(self[e45], other[e3215]) * other.group5().yzz().extend_to_4(self[e45]))
                + (self.group1().ww().extend_to_4(self[e25], other[e4235]) * other.group4().xyx().extend_to_4(self[e15]))
                - (self.group0().yzxx() * other.group4().zxy().extend_to_4(other[e23]))
                - (other.group5().zxy() * self.group1().yzx()).extend_to_4(self[e25] * other[e31]),
            // e1234
            (self[e4235] * other[e41]) + (self[e4315] * other[e42]) + (self[e4125] * other[e43]) - (self[e45] * other[e1234]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for Flector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       32        0
    //    simd4       11       12        0
    // Totals...
    // yes simd       31       44        0
    //  no simd       64       80        0
    fn sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self[e45] * other[e4235]) + (self[e4125] * other[e4315]),
                (self[e45] * other[e4315]) + (self[e4235] * other[e4125]),
                (self[e45] * other[e4125]) + (self[e4315] * other[e4235]),
                -(self[e4315] * other[e4315]) - (self[e4125] * other[e4125]),
            ]) - (self.group1().yzxx() * other.group0().zxyx()),
            // e15, e25, e35, e3215
            Simd32x4::from([
                -(self[e35] * other[e4315]) - (self[e3215] * other[e4235]),
                -(self[e15] * other[e4125]) - (self[e3215] * other[e4315]),
                -(self[e25] * other[e4235]) - (self[e3215] * other[e4125]),
                (self[e35] * other[e4125]) + (self[e45] * other[e3215]),
            ]) + (self.group0().yzxx() * other.group0().zxyx())
                + (other.group0().wwwy() * self.group1().truncate_to_3().extend_to_4(self[e25])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       23       40        0
    //    simd3        3        6        0
    //    simd4       27       31        0
    // Totals...
    // yes simd       53       77        0
    //  no simd      140      182        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([other[e4], other[e4], other[e4], 1.0])
                * self
                    .group1()
                    .truncate_to_3()
                    .extend_to_4((self[e4235] * other[e1]) + (self[e4315] * other[e2]) + (self[e4125] * other[e3]) + (self[e3215] * other[e4]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            ((Simd32x3::from(other[e4]) * self.group0().truncate_to_3()) + (self.group1().yzx() * other.group0().zxy())
                - (Simd32x3::from(self[e45]) * other.group0().truncate_to_3())
                - (self.group1().zxy() * other.group0().yzx()))
            .extend_to_4(self[e3215] * other[e4] * -1.0),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e4235] * other[e5]) + (self[e3215] * other[e1]),
                (self[e4315] * other[e5]) + (self[e3215] * other[e2]),
                (self[e4125] * other[e5]) + (self[e3215] * other[e3]),
                -(self[e25] * other[e2]) - (self[e35] * other[e3]),
            ]) + (self.group0().zxyw() * other.group0().yzx().extend_to_4(other[e5]))
                - (self.group0().yzxx() * other.group0().zxyx()),
            // e1, e2, e3, e4
            Simd32x4::from(other[e4]) * self.group0() * Simd32x4::from(-1.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for Flector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        9       13        0
    // Totals...
    // yes simd       13       21        0
    //  no simd       40       60        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(other[scalar]) * self.group0(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[scalar]) * self.group1(),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       38       62        0
    //    simd3        6       15        0
    //    simd4       21       18        0
    // Totals...
    // yes simd       65       95        0
    //  no simd      140      179        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([other[e1234], other[e1234], other[e1234], 1.0])
                * self
                    .group1()
                    .truncate_to_3()
                    .extend_to_4((self[e3215] * other[e1234]) - (self[e4235] * other[e4235]) - (self[e4315] * other[e4315]) - (self[e4125] * other[e4125]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            ((Simd32x3::from(self[e45]) * other.group0().truncate_to_3())
                + (Simd32x3::from(other[e1234]) * self.group0().truncate_to_3())
                + (self.group1().zxy() * other.group0().yzx())
                - (self.group1().yzx() * other.group0().zxy()))
            .extend_to_4(self[e3215] * other[e1234]),
            // e15, e25, e35, e1234
            ((Simd32x3::from(other[e3215]) * self.group1().truncate_to_3()) + (self.group0().yzx() * other.group0().zxy())
                - (Simd32x3::from(self[e3215]) * other.group0().truncate_to_3())
                - (self.group0().zxy() * other.group0().yzx()))
            .extend_to_4(self[e45] * other[e1234] * -1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([other[e1234], other[e1234], other[e1234], 1.0])
                * self
                    .group0()
                    .truncate_to_3()
                    .extend_to_4((self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]) + (self[e45] * other[e3215])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       55       80        0
    //    simd3        0        4        0
    //    simd4       44       42        0
    // Totals...
    // yes simd       99      126        0
    //  no simd      231      260        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (self.group1().yzxx() * other.group0().zxy().extend_to_4(other[e1]))
                + Simd32x3::from(0.0).extend_to_4((self[e4315] * other[e2]) + (self[e4125] * other[e3]) + (self[e3215] * other[e4]) - (self[e45] * other[e321]))
                - (Simd32x4::from([other[e431], other[e4], other[e4], other[e412]]) * self.group1().zyz().extend_to_4(self[e35]))
                - (Simd32x4::from([other[e4], other[e412], other[e423], other[e431]]) * self.group1().xxy().extend_to_4(self[e25]))
                - (self.group0().wwwx() * other.group0().xyzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(self[e4235] * other[e321]) - (self[e4125] * other[e2]),
                -(self[e4235] * other[e3]) - (self[e4315] * other[e321]),
                -(self[e4315] * other[e1]) - (self[e4125] * other[e321]),
                (self[e4315] * other[e425]) + (self[e4125] * other[e435]),
            ]) + (Simd32x4::from([other[e431], other[e4], other[e4], other[e431]]) * self.group0().zyzy())
                + (Simd32x4::from([other[e4], other[e412], other[e423], other[e423]]) * self.group0().xxyx())
                + (self.group1().wwwx() * other.group0().truncate_to_3().extend_to_4(other[e415]))
                + (self.group1().yzx() * other.group3().zxy()).extend_to_4(self[e35] * other[e412])
                - (other.group3() * self.group0().www().extend_to_4(self[e3215]))
                - (self.group0().yzxw() * other.group0().zxyw()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e35] * other[e2])
                    + (self[e45] * other[e235])
                    + (self[e4235] * other[e5])
                    + (self[e4125] * other[e315])
                    + (self[e3215] * other[e415])
                    + (self[e3215] * other[e1]),
                (self[e25] * other[e321])
                    + (self[e45] * other[e315])
                    + (self[e4235] * other[e125])
                    + (self[e4315] * other[e5])
                    + (self[e3215] * other[e425])
                    + (self[e3215] * other[e2]),
                (self[e35] * other[e321])
                    + (self[e45] * other[e125])
                    + (self[e4315] * other[e235])
                    + (self[e4125] * other[e5])
                    + (self[e3215] * other[e435])
                    + (self[e3215] * other[e3]),
                -(self[e25] * other[e2])
                    - (self[e35] * other[e435])
                    - (self[e35] * other[e3])
                    - (self[e4235] * other[e235])
                    - (self[e4315] * other[e315])
                    - (self[e4125] * other[e125]),
            ]) + (Simd32x4::from([other[e12345], other[e435], other[e415], other[e5]]) * self.group0().xxyw())
                + (Simd32x4::from([other[e425], other[e12345], other[e12345], other[e321]]) * self.group0().zyz().extend_to_4(self[e3215]))
                + (Simd32x4::from([other[e321], other[e3], other[e1], other[e12345]]) * self.group0().xxy().extend_to_4(self[e3215]))
                - (self.group0().yzxx() * other.group1().zxyx())
                - (self.group0().yzxx() * other.group3().zxyx())
                - (self.group1().yzx() * other.group2().zxy()).extend_to_4(self[e25] * other[e425]),
            // e1, e2, e3, e4
            Simd32x4::from([
                -(self[e35] * other[e431]) - (self[e45] * other[e415]) - (self[e4235] * other[e12345]) - (self[e4125] * other[e425]) - (self[e3215] * other[e423]),
                -(self[e25] * other[e4]) - (self[e45] * other[e425]) - (self[e4235] * other[e435]) - (self[e4315] * other[e12345]) - (self[e3215] * other[e431]),
                -(self[e35] * other[e4]) - (self[e45] * other[e435]) - (self[e4315] * other[e415]) - (self[e4125] * other[e12345]) - (self[e3215] * other[e412]),
                self[e4125] * other[e412],
            ]) + (self.group1().yzxy() * other.group1().zxy().extend_to_4(other[e431]))
                + (other.group0().zxyx() * self.group0().yzx().extend_to_4(self[e4235]))
                - (Simd32x4::from([other[e4], other[e412], other[e423], other[e4]]) * self.group0().xxyw()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       72      105        0
    //    simd3        0        9        0
    //    simd4       40       32        0
    // Totals...
    // yes simd      112      146        0
    //  no simd      232      260        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x3::from(0.0).extend_to_4((self[e3215] * other[e1234]) - (self[e4235] * other[e4235]) - (self[e4315] * other[e4315]) - (self[e4125] * other[e4125]))
                + (self.group1().yzx() * other.group0().zxy()).extend_to_4(self[e45] * other[e45])
                - (Simd32x4::from([other[e42], other[e1234], other[e1234], other[e43]]) * self.group1().zyz().extend_to_4(self[e35]))
                - (Simd32x4::from([other[e1234], other[e43], other[e41], other[e42]]) * self.group1().xxy().extend_to_4(self[e25]))
                - (self.group0().wwwx() * other.group0().xyzx()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e45] * other[e4235]) + (self[e4235] * other[e45]) + (self[e4125] * other[e4315]) + (self[e3215] * other[e41]),
                (self[e45] * other[e4315]) + (self[e4235] * other[e4125]) + (self[e4315] * other[e45]) + (self[e3215] * other[e42]),
                (self[e45] * other[e4125]) + (self[e4315] * other[e4235]) + (self[e4125] * other[e45]) + (self[e3215] * other[e43]),
                -(self[e35] * other[e43]) - (self[e4235] * other[e23]) - (self[e4315] * other[e31]) - (self[e4125] * other[e12]),
            ]) + (Simd32x4::from([other[e42], other[e1234], other[e1234], other[e1234]]) * self.group0().zyz().extend_to_4(self[e3215]))
                + (Simd32x4::from([other[e1234], other[e43], other[e41], other[scalar]]) * self.group0().xxyw())
                - (self.group0().yzxx() * other.group0().zxyx())
                - (self.group1().yzx() * other.group3().zxy()).extend_to_4(self[e25] * other[e42]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e45] * other[e15]) + (self[e4235] * other[e3215]) + (self[e4125] * other[e25]) + (self[e3215] * other[e23])
                    - (self[e25] * other[e12])
                    - (self[e35] * other[e4315])
                    - (self[e4315] * other[e35])
                    - (self[e3215] * other[e4235]),
                (self[e45] * other[e25]) + (self[e4235] * other[e35]) + (self[e4315] * other[e3215]) + (self[e3215] * other[e31])
                    - (self[e25] * other[e45])
                    - (self[e35] * other[e23])
                    - (self[e4125] * other[e15])
                    - (self[e3215] * other[e4315]),
                (self[e45] * other[e35]) + (self[e4315] * other[e15]) + (self[e4125] * other[e3215]) + (self[e3215] * other[e12])
                    - (self[e25] * other[e4235])
                    - (self[e35] * other[e45])
                    - (self[e4235] * other[e25])
                    - (self[e3215] * other[e4125]),
                0.0,
            ]) + (Simd32x4::from([other[scalar], other[e12], other[e4315], other[e41]]) * self.group0().xxx().extend_to_4(self[e4235]))
                + (Simd32x4::from([other[e31], other[e4235], other[scalar], other[e43]]) * self.group0().zzz().extend_to_4(self[e4125]))
                + (Simd32x4::from([other[e4125], other[scalar], other[e23], other[e42]]) * self.group0().yyy().extend_to_4(self[e4315]))
                - (Simd32x4::from([other[e45], other[e4125], other[e31], other[e1234]]) * self.group0().xxxw()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e3215] * other[e41],
                self[e3215] * other[e42],
                self[e3215] * other[e43],
                -(self[e35] * other[e12]) - (self[e4235] * other[e15]) - (self[e4315] * other[e25]) - (self[e4125] * other[e35]) - (self[e3215] * other[e45]),
            ]) + (Simd32x4::from([other[e42], other[e1234], other[e1234], other[e4315]]) * self.group0().zyzy())
                + (Simd32x4::from([other[scalar], other[e12], other[e23], other[e3215]]) * self.group1().xxy().extend_to_4(self[e45]))
                + (Simd32x4::from([other[e31], other[scalar], other[scalar], other[scalar]]) * self.group1().zyzw())
                + (Simd32x4::from([other[e1234], other[e43], other[e41], other[e4235]]) * self.group0().xxyx())
                + (self.group0().wwwz() * other.group1().truncate_to_3().extend_to_4(other[e4125]))
                - (self.group0().yzxx() * other.group0().zxy().extend_to_4(other[e23]))
                - (other.group1().zxyy() * self.group1().yzx().extend_to_4(self[e25])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl std::ops::Div<sandwich> for Line {
    type Output = sandwich_partial<Line>;
    fn div(self, _rhs: sandwich) -> Self::Output {
        sandwich_partial(self)
    }
}
impl Sandwich<AntiCircleRotor> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       43       80        0
    //    simd3        0       11        0
    //    simd4       23       14        0
    // Totals...
    // yes simd       66      105        0
    //  no simd      135      169        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                other[e42] * self[e435],
                other[e43] * self[e415],
                other[e41] * self[e425],
                -(other[e42] * self[e315]) - (other[e43] * self[e125]) - (other[e23] * self[e415]) - (other[e31] * self[e425]) - (other[e12] * self[e435]),
            ]) - (other.group0().zxy() * self.group0().yzx()).extend_to_4(other[e41] * self[e235]),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(other[e43] * self[e315]) - (other[e12] * self[e425]),
                -(other[e41] * self[e125]) - (other[e23] * self[e435]),
                -(other[e42] * self[e235]) - (other[e31] * self[e415]),
                0.0,
            ]) + (Simd32x4::from([other[e31], other[scalar], other[scalar], self[e125]]) * self.group0().zyz().extend_to_4(other[e43]))
                + (Simd32x4::from([other[scalar], other[e12], other[e23], self[e315]]) * self.group0().xxy().extend_to_4(other[e42]))
                + (other.group0().yzx() * self.group1().zxy()).extend_to_4(other[e41] * self[e235]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e31] * self[e125]) + (other[e25] * self[e435]) + (other[scalar] * self[e235]),
                (other[e12] * self[e235]) + (other[e35] * self[e415]) + (other[scalar] * self[e315]),
                (other[e23] * self[e315]) + (other[e15] * self[e425]) + (other[scalar] * self[e125]),
                -(other[e23] * self[e235]) - (other[e31] * self[e315]) - (other[e12] * self[e125]),
            ]) - (other.group2().zxyx() * self.group0().yzx().extend_to_4(self[e415]))
                - (self.group1().xyx() * other.group1().wwy()).extend_to_4(other[e25] * self[e425])
                - (self.group1().yzz() * other.group1().zxw()).extend_to_4(other[e35] * self[e435]),
            // e1, e2, e3, e4
            Simd32x4::from([other[e43] * self[e315], other[e41] * self[e125], other[e42] * self[e235], other[e43] * self[e435] * -1.0])
                - (self.group0() * other.group1().www()).extend_to_4(other[e42] * self[e425])
                - (other.group0().yzx() * self.group1().zxy()).extend_to_4(other[e41] * self[e415]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       63      105        0
    //    simd3        0       16        0
    //    simd4       24       10        0
    // Totals...
    // yes simd       87      131        0
    //  no simd      159      193        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(other[e431] * self[e435]) - (other[e4] * self[e415]),
                -(other[e412] * self[e415]) - (other[e4] * self[e425]),
                -(other[e423] * self[e425]) - (other[e4] * self[e435]),
                (other[e431] * self[e315]) + (other[e412] * self[e125]) + (other[e415] * self[e415]) + (other[e425] * self[e425]) + (other[e435] * self[e435]),
            ]) + (other.group0().zxy() * self.group0().yzx()).extend_to_4(other[e423] * self[e235]),
            // e23, e31, e12, e45
            Simd32x3::from(0.0).extend_to_4(other[e412] * self[e125])
                + (other.group0().zxy() * self.group1().yzx()).extend_to_4(other[e423] * self[e235])
                + (self.group0().yzx() * other.group1().zxy()).extend_to_4(other[e431] * self[e315])
                - (self.group1() * other.group2().www()).extend_to_4(other[e3] * self[e435])
                - (other.group0().yzx() * self.group1().zxy()).extend_to_4(other[e1] * self[e415])
                - (self.group0().zxy() * other.group1().yzx()).extend_to_4(other[e2] * self[e425]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(other[e425] * self[e125]) - (other[e321] * self[e235]) - (other[e315] * self[e435]) - (other[e2] * self[e125]) - (other[e5] * self[e415]),
                -(other[e435] * self[e235]) - (other[e321] * self[e315]) - (other[e125] * self[e415]) - (other[e3] * self[e235]) - (other[e5] * self[e425]),
                -(other[e415] * self[e315]) - (other[e321] * self[e125]) - (other[e235] * self[e425]) - (other[e1] * self[e315]) - (other[e5] * self[e435]),
                0.0,
            ]) + (self.group0().yzx() * other.group2().zxy()).extend_to_4(other[e423] * self[e415])
                + (self.group1().yzx() * other.group1().zxy()).extend_to_4(other[e431] * self[e425])
                + (self.group1().yzx() * other.group3().zxy()).extend_to_4(other[e412] * self[e435]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(other[e431] * self[e125]) - (other[e4] * self[e235]) - (other[e3] * self[e425]),
                -(other[e412] * self[e235]) - (other[e4] * self[e315]) - (other[e1] * self[e435]),
                -(other[e423] * self[e315]) - (other[e4] * self[e125]) - (other[e2] * self[e415]),
                (other[e415] * self[e235])
                    + (other[e425] * self[e315])
                    + (other[e435] * self[e125])
                    + (other[e1] * self[e235])
                    + (other[e2] * self[e315])
                    + (other[e3] * self[e125]),
            ]) + (Simd32x4::from([other[e321], other[e3], other[e1], other[e315]]) * self.group0().xxy().extend_to_4(self[e425]))
                + (Simd32x4::from([other[e2], other[e321], other[e321], other[e125]]) * self.group0().zyz().extend_to_4(self[e435]))
                + (other.group0().zxy() * self.group1().yzx()).extend_to_4(other[e235] * self[e415]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for Line {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       21        0
    //    simd3        1        8        0
    //    simd4        3        0        0
    // Totals...
    // yes simd       11       29        0
    //  no simd       22       45        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(other[scalar]) * self.group0(),
            // e235, e315, e125
            (Simd32x3::from(other[e3215]) * self.group0()) + (Simd32x3::from(other[scalar]) * self.group1()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for Line {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       19        0
    //    simd3        0        5        0
    //    simd4        7        6        0
    // Totals...
    // yes simd       18       30        0
    //  no simd       39       58        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            (self.group0().yzx() * other.group0().zxy()).extend_to_4(0.0)
                - (Simd32x3::from(other[e321]) * self.group1()).extend_to_4(0.0)
                - (self.group0().zxy() * other.group0().yzx()).extend_to_4(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([other[e321], other[e321], other[e321], 1.0])
                * self.group0().extend_to_4((other[e235] * self[e415]) + (other[e315] * self[e425]) + (other[e125] * self[e435])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for Line {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       35        0
    //    simd3        0        2        0
    //    simd4       10       10        0
    // Totals...
    // yes simd       28       47        0
    //  no simd       58       81        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e125] * self[e425]) + (other[e3] * self[e315]) - (other[e2] * self[e125]),
                (other[e235] * self[e435]) + (other[e1] * self[e125]) - (other[e321] * self[e315]),
                (other[e315] * self[e415]) + (other[e2] * self[e235]) - (other[e321] * self[e125]),
                0.0,
            ]) - (Simd32x4::from([other[e315], other[e5], other[e5], other[e2]]) * self.group0().zyz().extend_to_4(self[e425]))
                - (Simd32x4::from([other[e321], other[e3], other[e1], other[e3]]) * self.group1().xxy().extend_to_4(self[e435]))
                - (Simd32x4::from([other[e5], other[e125], other[e235], other[e1]]) * self.group0().xxy().extend_to_4(self[e415])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e3] * self[e425] * -1.0,
                other[e1] * self[e435] * -1.0,
                other[e2] * self[e415] * -1.0,
                (other[e125] * self[e435]) + (other[e1] * self[e235]) + (other[e2] * self[e315]) + (other[e3] * self[e125]),
            ]) + (Simd32x4::from([other[e321], other[e3], other[e1], other[e235]]) * self.group0().xxy().extend_to_4(self[e415]))
                + (Simd32x4::from([other[e2], other[e321], other[e321], other[e315]]) * self.group0().zyz().extend_to_4(self[e425])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for Line {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       23       43        0
    //    simd3        0        6        0
    //    simd4        6        2        0
    // Totals...
    // yes simd       29       51        0
    //  no simd       47       69        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                other[e31] * self[e435],
                other[e12] * self[e415],
                other[e23] * self[e425],
                -(other[e31] * self[e425]) - (other[e12] * self[e435]),
            ]) - (other.group0().zxy() * self.group0().yzx()).extend_to_4(other[e23] * self[e415]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e31] * self[e125]) + (other[e25] * self[e435]),
                (other[e12] * self[e235]) + (other[e35] * self[e415]),
                (other[e23] * self[e315]) + (other[e15] * self[e425]),
                -(other[e12] * self[e125]) - (other[e15] * self[e415]) - (other[e25] * self[e425]) - (other[e35] * self[e435]),
            ]) - (other.group0().zxy() * self.group1().yzx()).extend_to_4(other[e23] * self[e235])
                - (other.group1().zxy() * self.group0().yzx()).extend_to_4(other[e31] * self[e315]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for Line {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       50        0
    //    simd3        0        4        0
    //    simd4        6        4        0
    // Totals...
    // yes simd       38       58        0
    //  no simd       56       78        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (other[e31] * self[e435]) + (other[scalar] * self[e415]),
                (other[e12] * self[e415]) + (other[scalar] * self[e425]),
                (other[e23] * self[e425]) + (other[scalar] * self[e435]),
                -(other[e31] * self[e425]) - (other[e12] * self[e435]),
            ]) - (other.group0().zxyx() * self.group0().yzx().extend_to_4(self[e415])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e31] * self[e125]) + (other[scalar] * self[e235]) + (other[e25] * self[e435]) + (other[e3215] * self[e415]),
                (other[e12] * self[e235]) + (other[scalar] * self[e315]) + (other[e35] * self[e415]) + (other[e3215] * self[e425]),
                (other[e23] * self[e315]) + (other[scalar] * self[e125]) + (other[e15] * self[e425]) + (other[e3215] * self[e435]),
                -(other[e23] * self[e235]) - (other[e31] * self[e315]) - (other[e12] * self[e125]) - (other[e35] * self[e435]),
            ]) - (other.group1().zxyx() * self.group0().yzx().extend_to_4(self[e415]))
                - (self.group1().yzx() * other.group0().zxy()).extend_to_4(other[e25] * self[e425]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for Line {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       29        0
    //    simd3        0        2        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       18       39        0
    //  no simd       42       67        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([other[e3] * self[e315], other[e1] * self[e125], other[e2] * self[e235], other[e3] * self[e435] * -1.0])
                - (other.group0().yzxy() * self.group1().zxy().extend_to_4(self[e425]))
                - (other.group0().wwwx() * self.group0().extend_to_4(self[e415])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e3] * self[e425] * -1.0,
                other[e1] * self[e435] * -1.0,
                other[e2] * self[e415] * -1.0,
                (other[e2] * self[e315]) + (other[e3] * self[e125]),
            ]) + (other.group0().yzxx() * self.group0().zxy().extend_to_4(self[e235])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for Line {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       18        0
    //    simd3        0        9        0
    //    simd4        3        0        0
    // Totals...
    // yes simd       10       27        0
    //  no simd       19       45        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(other[e12345]) * self.group0() * Simd32x3::from(-1.0),
            // e15, e25, e35
            Simd32x3::from(other[e12345]) * self.group1() * Simd32x3::from(-1.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       49       98        0
    //    simd3        0       13        0
    //    simd4       19        8        0
    // Totals...
    // yes simd       68      119        0
    //  no simd      125      169        0
    fn sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                other[e431] * self[e435] * -1.0,
                other[e412] * self[e415] * -1.0,
                other[e423] * self[e425] * -1.0,
                (other[e431] * self[e315]) + (other[e412] * self[e125]) + (other[e415] * self[e415]) + (other[e425] * self[e425]) + (other[e435] * self[e435]),
            ]) + (other.group0().zxy() * self.group0().yzx()).extend_to_4(other[e423] * self[e235]),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(other[e431] * self[e125]) - (other[e425] * self[e435]),
                -(other[e412] * self[e235]) - (other[e435] * self[e415]),
                -(other[e423] * self[e315]) - (other[e415] * self[e425]),
                other[e412] * self[e125],
            ]) + (other.group0().zxy() * self.group1().yzx()).extend_to_4(other[e423] * self[e235])
                + (self.group0().yzx() * other.group1().zxy()).extend_to_4(other[e431] * self[e315]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(other[e425] * self[e125]) - (other[e321] * self[e235]) - (other[e315] * self[e435]),
                -(other[e435] * self[e235]) - (other[e321] * self[e315]) - (other[e125] * self[e415]),
                -(other[e415] * self[e315]) - (other[e321] * self[e125]) - (other[e235] * self[e425]),
                other[e412] * self[e435],
            ]) + (other.group2().zxy() * self.group0().yzx()).extend_to_4(other[e423] * self[e415])
                + (self.group1().yzx() * other.group1().zxy()).extend_to_4(other[e431] * self[e425]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e431] * self[e125] * -1.0,
                other[e412] * self[e235] * -1.0,
                other[e423] * self[e315] * -1.0,
                (other[e415] * self[e235]) + (other[e425] * self[e315]) + (other[e435] * self[e125]) + (other[e125] * self[e435]),
            ]) + (self.group0() * other.group1().www()).extend_to_4(other[e315] * self[e425])
                + (other.group0().zxy() * self.group1().yzx()).extend_to_4(other[e235] * self[e415]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       55      104        0
    //    simd3        0       13        0
    //    simd4       19        8        0
    // Totals...
    // yes simd       74      125        0
    //  no simd      131      175        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                other[e431] * self[e435] * -1.0,
                other[e412] * self[e415] * -1.0,
                other[e423] * self[e425] * -1.0,
                (other[e431] * self[e315]) + (other[e412] * self[e125]) + (other[e415] * self[e415]) + (other[e425] * self[e425]) + (other[e435] * self[e435]),
            ]) + (other.group0().zxy() * self.group0().yzx()).extend_to_4(other[e423] * self[e235]),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(other[e431] * self[e125]) - (other[e425] * self[e435]) - (other[e12345] * self[e415]),
                -(other[e412] * self[e235]) - (other[e435] * self[e415]) - (other[e12345] * self[e425]),
                -(other[e423] * self[e315]) - (other[e415] * self[e425]) - (other[e12345] * self[e435]),
                other[e412] * self[e125],
            ]) + (other.group0().zxy() * self.group1().yzx()).extend_to_4(other[e423] * self[e235])
                + (self.group0().yzx() * other.group1().zxy()).extend_to_4(other[e431] * self[e315]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(other[e425] * self[e125]) - (other[e321] * self[e235]) - (other[e315] * self[e435]) - (other[e12345] * self[e235]),
                -(other[e435] * self[e235]) - (other[e321] * self[e315]) - (other[e125] * self[e415]) - (other[e12345] * self[e315]),
                -(other[e415] * self[e315]) - (other[e321] * self[e125]) - (other[e235] * self[e425]) - (other[e12345] * self[e125]),
                other[e412] * self[e435],
            ]) + (self.group0().yzx() * other.group2().zxy()).extend_to_4(other[e423] * self[e415])
                + (self.group1().yzx() * other.group1().zxy()).extend_to_4(other[e431] * self[e425]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e431] * self[e125] * -1.0,
                other[e412] * self[e235] * -1.0,
                other[e423] * self[e315] * -1.0,
                (other[e415] * self[e235]) + (other[e425] * self[e315]) + (other[e435] * self[e125]) + (other[e125] * self[e435]),
            ]) + (self.group0() * other.group1().www()).extend_to_4(other[e315] * self[e425])
                + (other.group0().zxy() * self.group1().yzx()).extend_to_4(other[e235] * self[e415]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       80        0
    //    simd3        0       13        0
    //    simd4       22       11        0
    // Totals...
    // yes simd       62      104        0
    //  no simd      128      163        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                other[e42] * self[e435],
                other[e43] * self[e415],
                other[e41] * self[e425],
                -(other[e42] * self[e315]) - (other[e43] * self[e125]) - (other[e23] * self[e415]) - (other[e31] * self[e425]) - (other[e12] * self[e435]),
            ]) - (other.group0().zxy() * self.group0().yzx()).extend_to_4(other[e41] * self[e235]),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(other[e43] * self[e315]) - (other[e12] * self[e425]),
                -(other[e41] * self[e125]) - (other[e23] * self[e435]),
                -(other[e42] * self[e235]) - (other[e31] * self[e415]),
                other[e43] * self[e125],
            ]) + (other.group0().yzx() * self.group1().zxy()).extend_to_4(other[e41] * self[e235])
                + (self.group0().zxy() * other.group1().yzx()).extend_to_4(other[e42] * self[e315]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e31] * self[e125]) + (other[e25] * self[e435]),
                (other[e12] * self[e235]) + (other[e35] * self[e415]),
                (other[e23] * self[e315]) + (other[e15] * self[e425]),
                -(other[e23] * self[e235]) - (other[e31] * self[e315]) - (other[e12] * self[e125]),
            ]) - (other.group2().zxy() * self.group0().yzx()).extend_to_4(other[e15] * self[e415])
                - (self.group1().xyx() * other.group1().wwy()).extend_to_4(other[e25] * self[e425])
                - (self.group1().yzz() * other.group1().zxw()).extend_to_4(other[e35] * self[e435]),
            // e1, e2, e3, e4
            Simd32x4::from([other[e43] * self[e315], other[e41] * self[e125], other[e42] * self[e235], other[e43] * self[e435] * -1.0])
                - (self.group0() * other.group1().www()).extend_to_4(other[e42] * self[e425])
                - (other.group0().yzx() * self.group1().zxy()).extend_to_4(other[e41] * self[e415]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       47       82        0
    //    simd3        0       10        0
    //    simd4       28       20        0
    // Totals...
    // yes simd       75      112        0
    //  no simd      159      192        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e42] * self[e435]) + (other[e1234] * self[e415]),
                (other[e43] * self[e415]) + (other[e1234] * self[e425]),
                (other[e41] * self[e425]) + (other[e1234] * self[e435]),
                -(other[e42] * self[e315]) - (other[e43] * self[e125]) - (other[e23] * self[e415]) - (other[e31] * self[e425]) - (other[e12] * self[e435]),
            ]) - (other.group0().zxy() * self.group0().yzx()).extend_to_4(other[e41] * self[e235]),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(other[e43] * self[e315]) - (other[e12] * self[e425]),
                -(other[e41] * self[e125]) - (other[e23] * self[e435]),
                -(other[e42] * self[e235]) - (other[e31] * self[e415]),
                (other[e4235] * self[e415]) + (other[e4315] * self[e425]) + (other[e4125] * self[e435]),
            ]) + (self.group1() * other.group2().www()).extend_to_4(other[e43] * self[e125])
                + (other.group0().yzx() * self.group1().zxy()).extend_to_4(other[e41] * self[e235])
                + (self.group0().zxy() * other.group1().yzx()).extend_to_4(other[e42] * self[e315]),
            // e235, e315, e125, e5
            Simd32x4::from([
                other[e31] * self[e125],
                other[e4235] * self[e125],
                other[e23] * self[e315],
                -(other[e31] * self[e315]) - (other[e12] * self[e125]),
            ]) + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e4315]]) * self.group0().zyz().extend_to_4(self[e315]))
                + (Simd32x4::from([other[e4125], other[e12], other[e4315], other[e4125]]) * self.group1().yxx().extend_to_4(self[e125]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e4235]]) * self.group0().xxy().extend_to_4(self[e235]))
                - (Simd32x4::from([other[e45], other[e4125], other[e31], other[e25]]) * self.group1().xxx().extend_to_4(self[e425]))
                - (Simd32x4::from([other[e4315], other[e23], other[e45], other[e23]]) * self.group1().zzz().extend_to_4(self[e235]))
                - (other.group2().zxyx() * self.group0().yzx().extend_to_4(self[e415]))
                - (other.group1().zw().extend_to_4(other[e4235], other[e35]) * self.group1().yyy().extend_to_4(self[e435])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e43] * self[e315]) + (other[e4125] * self[e425]) - (other[e1234] * self[e235]),
                (other[e41] * self[e125]) + (other[e4235] * self[e435]) - (other[e1234] * self[e315]),
                (other[e42] * self[e235]) + (other[e4315] * self[e415]) - (other[e1234] * self[e125]),
                0.0,
            ]) - (Simd32x4::from([other[e45], other[e4125], other[e4235], self[e425]]) * self.group0().xxy().extend_to_4(other[e42]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], self[e435]]) * self.group0().zyz().extend_to_4(other[e43]))
                - (other.group0().yzx() * self.group1().zxy()).extend_to_4(other[e41] * self[e415]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for Line {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       18        0
    //    simd3        1        9        0
    //    simd4        3        0        0
    // Totals...
    // yes simd       11       27        0
    //  no simd       22       45        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(other[e12345]) * self.group0() * Simd32x3::from(-1.0),
            // e15, e25, e35
            -(Simd32x3::from(other[e5]) * self.group0()) - (Simd32x3::from(other[e12345]) * self.group1()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for Line {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       15        0
    //    simd3        0        5        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       18       28        0
    //  no simd       42       62        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            (self.group0().zxy() * other.group0().yzx()).extend_to_4(0.0)
                - (Simd32x3::from(other[e45]) * self.group1()).extend_to_4(0.0)
                - (self.group0().yzx() * other.group0().zxy()).extend_to_4(0.0),
            // e1, e2, e3, e5
            Simd32x4::from([other[e45], other[e45], other[e45], 1.0])
                * self.group0().extend_to_4(-(other[e15] * self[e415]) - (other[e25] * self[e425]) - (other[e35] * self[e435]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for Line {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       24        0
    //    simd3        0        2        0
    //    simd4       12       12        0
    // Totals...
    // yes simd       28       38        0
    //  no simd       64       78        0
    fn sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                -(other[e35] * self[e425]) - (other[e45] * self[e235]) - (other[e4315] * self[e125]),
                -(other[e15] * self[e435]) - (other[e45] * self[e315]) - (other[e4125] * self[e235]),
                -(other[e25] * self[e415]) - (other[e45] * self[e125]) - (other[e4235] * self[e315]),
                0.0,
            ]) + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e4315]]) * self.group0().zyz().extend_to_4(self[e425]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e4235]]) * self.group0().xxy().extend_to_4(self[e415]))
                + (other.group1().zxyz() * self.group1().yzx().extend_to_4(self[e435])),
            // e1, e2, e3, e5
            (other.group1().zxyx() * self.group0().yzx().extend_to_4(self[e235]))
                + Simd32x3::from(0.0).extend_to_4((other[e4315] * self[e315]) + (other[e4125] * self[e125]) - (other[e35] * self[e435]))
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e15]]) * self.group0().xxy().extend_to_4(self[e415]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e25]]) * self.group0().zyz().extend_to_4(self[e425])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for Line {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       23       46        0
    //    simd3        0        6        0
    //    simd4        6        2        0
    // Totals...
    // yes simd       29       54        0
    //  no simd       47       72        0
    fn sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                other[e425] * self[e435] * -1.0,
                other[e435] * self[e415] * -1.0,
                other[e415] * self[e425] * -1.0,
                (other[e425] * self[e425]) + (other[e435] * self[e435]),
            ]) + (other.group0().zxy() * self.group0().yzx()).extend_to_4(other[e415] * self[e415]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                -(other[e425] * self[e125]) - (other[e315] * self[e435]),
                -(other[e435] * self[e235]) - (other[e125] * self[e415]),
                -(other[e415] * self[e315]) - (other[e235] * self[e425]),
                (other[e435] * self[e125]) + (other[e235] * self[e415]) + (other[e315] * self[e425]) + (other[e125] * self[e435]),
            ]) + (other.group0().zxy() * self.group1().yzx()).extend_to_4(other[e415] * self[e235])
                + (other.group1().zxy() * self.group0().yzx()).extend_to_4(other[e425] * self[e315]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for Line {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       50        0
    //    simd3        0        4        0
    //    simd4        6        4        0
    // Totals...
    // yes simd       38       58        0
    //  no simd       56       78        0
    fn sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                -(self[e415] * other[e12345]) - (self[e435] * other[e425]),
                -(self[e415] * other[e435]) - (self[e425] * other[e12345]),
                -(self[e425] * other[e415]) - (self[e435] * other[e12345]),
                (self[e425] * other[e425]) + (self[e435] * other[e435]),
            ]) + (other.group0().zxyx() * self.group0().yzx().extend_to_4(self[e415])),
            // e15, e25, e35, e3215
            Simd32x4::from([
                -(self[e415] * other[e5]) - (self[e435] * other[e315]) - (self[e235] * other[e12345]) - (self[e125] * other[e425]),
                -(self[e415] * other[e125]) - (self[e425] * other[e5]) - (self[e235] * other[e435]) - (self[e315] * other[e12345]),
                -(self[e425] * other[e235]) - (self[e435] * other[e5]) - (self[e315] * other[e415]) - (self[e125] * other[e12345]),
                (self[e435] * other[e125]) + (self[e235] * other[e415]) + (self[e315] * other[e425]) + (self[e125] * other[e435]),
            ]) + (other.group1().zxyx() * self.group0().yzx().extend_to_4(self[e415]))
                + (self.group1().yzx() * other.group0().zxy()).extend_to_4(self[e425] * other[e315]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for Line {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       84      130        0
    //    simd3       34       54        0
    //    simd4       35       25        0
    // Totals...
    // yes simd      153      209        0
    //  no simd      326      392        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e415] * other[e415])
                    + (self[e425] * other[e425])
                    + (self[e435] * other[e435])
                    + (self[e235] * other[e423])
                    + (self[e315] * other[e431])
                    + (self[e125] * other[e412]),
                -(self[e415] * other[e23])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e235] * other[e41])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e425] * other[e4125]) + (self[e315] * other[e43]) - (self[e125] * other[e42]),
                (self[e435] * other[e4235]) + (self[e125] * other[e41]) - (self[e315] * other[e1234]),
                (self[e415] * other[e4315]) + (self[e235] * other[e42]) - (self[e125] * other[e1234]),
                0.0,
            ]) - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e41]]) * self.group0().xxy().extend_to_4(self[e415]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e42]]) * self.group0().zyz().extend_to_4(self[e425]))
                - (Simd32x4::from([other[e1234], other[e43], other[e41], other[e43]]) * self.group1().xxy().extend_to_4(self[e435])),
            // e5
            (self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125])
                - (self[e415] * other[e15])
                - (self[e425] * other[e25])
                - (self[e435] * other[e35])
                - (self[e235] * other[e23])
                - (self[e315] * other[e31])
                - (self[e125] * other[e12]),
            // e15, e25, e35, e45
            Simd32x4::from([
                -(self[e235] * other[e321]) - (self[e125] * other[e2]) - (self[e125] * other[e425]),
                -(self[e235] * other[e3]) - (self[e235] * other[e435]) - (self[e315] * other[e321]),
                -(self[e315] * other[e1]) - (self[e315] * other[e415]) - (self[e125] * other[e321]),
                0.0,
            ]) + (self.group0().yzx() * other.group8().zxy()).extend_to_4(self[e235] * other[e423])
                + (self.group1().yzx() * other.group1().zxy()).extend_to_4(self[e315] * other[e431])
                + (self.group1().yzx() * other.group6().zxy()).extend_to_4(self[e125] * other[e412])
                - (Simd32x4::from([other[e5], other[e125], other[e235], other[e2]]) * self.group0().xxy().extend_to_4(self[e425]))
                - (Simd32x4::from([other[e315], other[e5], other[e5], other[e3]]) * self.group0().zyz().extend_to_4(self[e435]))
                - (other.group0().yy().extend_to_4(other[e12345], self[e415]) * self.group1().extend_to_4(other[e1])),
            // e41, e42, e43
            (self.group0().yzx() * other.group7().zxy())
                - (Simd32x3::from([other[e4], other[e412], other[e423]]) * self.group0().xxy())
                - (Simd32x3::from([other[e431], other[e4], other[e4]]) * self.group0().zyz()),
            // e23, e31, e12
            (self.group0().yzx() * other.group6().zxy()) + (self.group1().yzx() * other.group7().zxy())
                - (Simd32x3::from(other[e12345]) * self.group0())
                - (Simd32x3::from([other[e4], other[e412], other[e423]]) * self.group1().xxy())
                - (Simd32x3::from([other[e431], other[e4], other[e4]]) * self.group1().zyz())
                - (self.group0().zxy() * other.group6().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(self[e425] * other[e12]) - (self[e315] * other[e43]),
                -(self[e435] * other[e23]) - (self[e125] * other[e41]),
                -(self[e415] * other[e31]) - (self[e235] * other[e42]),
                (self[e315] * other[e42]) + (self[e125] * other[e43]),
            ]) + (Simd32x4::from([other[e42], other[e1234], other[e1234], other[e41]]) * self.group1().zyz().extend_to_4(self[e235]))
                + (Simd32x4::from([other[e1234], other[e43], other[e41], other[e4125]]) * self.group1().xxy().extend_to_4(self[e435]))
                + (other.group0().xx().extend_to_4(other[scalar], self[e415]) * self.group0().extend_to_4(other[e4235]))
                + (self.group0().zxy() * other.group5().yzx()).extend_to_4(self[e425] * other[e4315]),
            // e423, e431, e412
            (Simd32x3::from([other[e42], other[e1234], other[e1234]]) * self.group0().zyz()) + (Simd32x3::from([other[e1234], other[e43], other[e41]]) * self.group0().xxy())
                - (self.group0().yzx() * other.group4().zxy()),
            // e235, e315, e125
            (Simd32x3::from(other[scalar]) * self.group1())
                + (Simd32x3::from([other[e25], other[e3215], other[e3215]]) * self.group0().zyz())
                + (Simd32x3::from([other[e31], other[e4235], other[e23]]) * self.group1().zzy())
                + (Simd32x3::from([other[e4125], other[e12], other[e4315]]) * self.group1().yxx())
                + (Simd32x3::from([other[e3215], other[e35], other[e15]]) * self.group0().xxy())
                - (Simd32x3::from(self[e235]) * Simd32x3::from([other[e45], other[e4125], other[e31]]))
                - (Simd32x3::from(self[e315]) * Simd32x3::from([other[e12], other[e45], other[e4235]]))
                - (Simd32x3::from(self[e125]) * Simd32x3::from([other[e4315], other[e23], other[e45]]))
                - (self.group0().yzx() * other.group3().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(self[e425] * other[e3]) - (self[e235] * other[e4]) - (self[e125] * other[e431]),
                -(self[e435] * other[e1]) - (self[e235] * other[e412]) - (self[e315] * other[e4]),
                -(self[e415] * other[e2]) - (self[e315] * other[e423]) - (self[e125] * other[e4]),
                (self[e235] * other[e1])
                    + (self[e235] * other[e415])
                    + (self[e315] * other[e2])
                    + (self[e315] * other[e425])
                    + (self[e125] * other[e3])
                    + (self[e125] * other[e435]),
            ]) + (Simd32x4::from([other[e2], other[e321], other[e321], other[e315]]) * self.group0().zyz().extend_to_4(self[e425]))
                + (Simd32x4::from([other[e321], other[e3], other[e1], other[e235]]) * self.group0().xxy().extend_to_4(self[e415]))
                + (self.group1().yzx() * other.group7().zxy()).extend_to_4(self[e435] * other[e125]),
            // e1234
            (self[e415] * other[e423]) + (self[e425] * other[e431]) + (self[e435] * other[e412]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for Line {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       27        0
    //    simd3        0        2        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       18       38        0
    //  no simd       45       69        0
    fn sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                self[e125] * other[e4315] * -1.0,
                self[e235] * other[e4125] * -1.0,
                self[e315] * other[e4235] * -1.0,
                self[e435] * other[e4125],
            ]) + (other.group0().zxyy() * self.group1().yzx().extend_to_4(self[e425]))
                + (other.group0().wwwx() * self.group0().extend_to_4(self[e415])),
            // e1, e2, e3, e5
            Simd32x4::from([
                self[e435] * other[e4315] * -1.0,
                self[e415] * other[e4125] * -1.0,
                self[e425] * other[e4235] * -1.0,
                (self[e315] * other[e4315]) + (self[e125] * other[e4125]),
            ]) + (other.group0().zxyx() * self.group0().yzx().extend_to_4(self[e235])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       63        0
    //    simd3        0       16        0
    //    simd4       15        6        0
    // Totals...
    // yes simd       51       85        0
    //  no simd       96      135        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[e4]) * self.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from([other[e4], other[e4], other[e4], 1.0])
                * self.group1().extend_to_4(-(self[e415] * other[e1]) - (self[e425] * other[e2]) - (self[e435] * other[e3]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, e1234
            (self.group1().yzx() * other.group0().zxy()).extend_to_4(0.0)
                - (Simd32x3::from(other[e5]) * self.group0()).extend_to_4(0.0)
                - (self.group1().zxy() * other.group0().yzx()).extend_to_4(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(self[e425] * other[e3]) - (self[e235] * other[e4]),
                -(self[e435] * other[e1]) - (self[e315] * other[e4]),
                -(self[e415] * other[e2]) - (self[e125] * other[e4]),
                (self[e315] * other[e2]) + (self[e125] * other[e3]),
            ]) + (other.group0().yzxx() * self.group0().zxy().extend_to_4(self[e235])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for Line {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       21        0
    //    simd3        0        7        0
    //    simd4        3        0        0
    // Totals...
    // yes simd       10       28        0
    //  no simd       19       42        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(other[scalar]) * self.group0(),
            // e235, e315, e125
            Simd32x3::from(other[scalar]) * self.group1(),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       57        0
    //    simd3        0       14        0
    //    simd4       16        7        0
    // Totals...
    // yes simd       48       78        0
    //  no simd       96      127        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[e1234]) * self.group0(),
            // e415, e425, e435, e321
            Simd32x4::from([other[e1234], other[e1234], other[e1234], 1.0])
                * self.group1().extend_to_4((self[e415] * other[e4235]) + (self[e425] * other[e4315]) + (self[e435] * other[e4125])),
            // e235, e315, e125, e4
            (Simd32x3::from(other[e3215]) * self.group0()).extend_to_4(0.0) + (self.group1().yzx() * other.group0().zxy()).extend_to_4(0.0)
                - (self.group1().zxy() * other.group0().yzx()).extend_to_4(0.0),
            // e1, e2, e3, e5
            Simd32x4::from([
                -(self[e435] * other[e4315]) - (self[e235] * other[e1234]),
                -(self[e415] * other[e4125]) - (self[e315] * other[e1234]),
                -(self[e425] * other[e4235]) - (self[e125] * other[e1234]),
                (self[e315] * other[e4315]) + (self[e125] * other[e4125]),
            ]) + (other.group0().zxyx() * self.group0().yzx().extend_to_4(self[e235])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       66      110        0
    //    simd3        0       12        0
    //    simd4       24       14        0
    // Totals...
    // yes simd       90      136        0
    //  no simd      162      202        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(self[e415] * other[e4]) - (self[e435] * other[e431]),
                -(self[e415] * other[e412]) - (self[e425] * other[e4]),
                -(self[e425] * other[e423]) - (self[e435] * other[e4]),
                (self[e425] * other[e425]) + (self[e435] * other[e435]) + (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412]),
            ]) + (self.group0().yzx() * other.group0().zxy()).extend_to_4(self[e415] * other[e415]),
            // e23, e31, e12, e45
            Simd32x4::from([self[e125] * other[e431] * -1.0, self[e315] * other[e4] * -1.0, self[e125] * other[e4] * -1.0, self[e125] * other[e412]])
                + (other.group0().zxyy() * self.group1().yzx().extend_to_4(self[e315]))
                + (self.group0().yzx() * other.group1().zxy()).extend_to_4(self[e235] * other[e423])
                - (Simd32x4::from([other[e12345], other[e435], other[e415], other[e1]]) * self.group0().xxy().extend_to_4(self[e415]))
                - (Simd32x4::from([other[e425], other[e12345], other[e12345], other[e2]]) * self.group0().zyz().extend_to_4(self[e425]))
                - (Simd32x4::from([other[e4], other[e412], other[e423], other[e3]]) * self.group1().xxy().extend_to_4(self[e435])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(self[e415] * other[e5])
                    - (self[e435] * other[e315])
                    - (self[e235] * other[e12345])
                    - (self[e235] * other[e321])
                    - (self[e125] * other[e425])
                    - (self[e125] * other[e2]),
                -(self[e415] * other[e125])
                    - (self[e425] * other[e5])
                    - (self[e235] * other[e435])
                    - (self[e235] * other[e3])
                    - (self[e315] * other[e12345])
                    - (self[e315] * other[e321]),
                -(self[e425] * other[e235])
                    - (self[e435] * other[e5])
                    - (self[e315] * other[e415])
                    - (self[e315] * other[e1])
                    - (self[e125] * other[e12345])
                    - (self[e125] * other[e321]),
                0.0,
            ]) + (self.group0().yzx() * other.group2().zxy()).extend_to_4(self[e415] * other[e423])
                + (self.group1().yzx() * other.group1().zxy()).extend_to_4(self[e425] * other[e431])
                + (self.group1().yzx() * other.group3().zxy()).extend_to_4(self[e435] * other[e412]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(self[e425] * other[e3]) - (self[e235] * other[e4]) - (self[e125] * other[e431]),
                -(self[e435] * other[e1]) - (self[e235] * other[e412]) - (self[e315] * other[e4]),
                -(self[e415] * other[e2]) - (self[e315] * other[e423]) - (self[e125] * other[e4]),
                (self[e235] * other[e415])
                    + (self[e235] * other[e1])
                    + (self[e315] * other[e425])
                    + (self[e315] * other[e2])
                    + (self[e125] * other[e435])
                    + (self[e125] * other[e3]),
            ]) + (Simd32x4::from([other[e321], other[e3], other[e1], other[e235]]) * self.group0().xxy().extend_to_4(self[e415]))
                + (Simd32x4::from([other[e2], other[e321], other[e321], other[e315]]) * self.group0().zyz().extend_to_4(self[e425]))
                + (self.group1().yzx() * other.group0().zxy()).extend_to_4(self[e435] * other[e125]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       49       80        0
    //    simd3        0        6        0
    //    simd4       29       25        0
    // Totals...
    // yes simd       78      111        0
    //  no simd      165      198        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e415] * other[e1234]) + (self[e435] * other[e42]),
                (self[e415] * other[e43]) + (self[e425] * other[e1234]),
                (self[e425] * other[e41]) + (self[e435] * other[e1234]),
                -(self[e425] * other[e31]) - (self[e435] * other[e12]) - (self[e235] * other[e41]) - (self[e315] * other[e42]) - (self[e125] * other[e43]),
            ]) - (self.group0().yzx() * other.group0().zxy()).extend_to_4(self[e415] * other[e23]),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(self[e425] * other[e12]) - (self[e315] * other[e43]),
                -(self[e435] * other[e23]) - (self[e125] * other[e41]),
                -(self[e415] * other[e31]) - (self[e235] * other[e42]),
                (self[e315] * other[e42]) + (self[e125] * other[e43]),
            ]) + (Simd32x4::from([other[e42], other[e1234], other[e1234], other[e41]]) * self.group1().zyz().extend_to_4(self[e235]))
                + (Simd32x4::from([other[scalar], other[e12], other[e23], other[e4235]]) * self.group0().xxy().extend_to_4(self[e415]))
                + (Simd32x4::from([other[e31], other[scalar], other[scalar], other[e4315]]) * self.group0().zyz().extend_to_4(self[e425]))
                + (Simd32x4::from([other[e1234], other[e43], other[e41], other[e4125]]) * self.group1().xxy().extend_to_4(self[e435])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e315] * other[e4125]) + (self[e125] * other[e31]),
                (self[e315] * other[scalar]) + (self[e125] * other[e4235]),
                (self[e315] * other[e23]) + (self[e125] * other[scalar]),
                -(self[e315] * other[e31]) - (self[e125] * other[e12]),
            ]) + (Simd32x4::from([other[scalar], other[e12], other[e4315], other[e4125]]) * self.group1().xxx().extend_to_4(self[e125]))
                + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e4315]]) * self.group0().zyz().extend_to_4(self[e315]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e4235]]) * self.group0().xxy().extend_to_4(self[e235]))
                - (Simd32x4::from([other[e45], other[e4125], other[e31], other[e25]]) * self.group1().xxx().extend_to_4(self[e425]))
                - (Simd32x4::from([other[e4315], other[e23], other[e45], other[e23]]) * self.group1().zzz().extend_to_4(self[e235]))
                - (other.group2().zxyx() * self.group0().yzx().extend_to_4(self[e415]))
                - (other.group1().zw().extend_to_4(other[e4235], other[e35]) * self.group1().yyy().extend_to_4(self[e435])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e425] * other[e4125]) + (self[e315] * other[e43]) - (self[e125] * other[e42]),
                (self[e435] * other[e4235]) + (self[e125] * other[e41]) - (self[e315] * other[e1234]),
                (self[e415] * other[e4315]) + (self[e235] * other[e42]) - (self[e125] * other[e1234]),
                0.0,
            ]) - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e41]]) * self.group0().xxy().extend_to_4(self[e415]))
                - (Simd32x4::from([other[e1234], other[e43], other[e41], other[e43]]) * self.group1().xxy().extend_to_4(self[e435]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e42]]) * self.group0().zyz().extend_to_4(self[e425])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl std::ops::Div<sandwich> for Motor {
    type Output = sandwich_partial<Motor>;
    fn div(self, _rhs: sandwich) -> Self::Output {
        sandwich_partial(self)
    }
}
impl Sandwich<AntiCircleRotor> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       50       81        0
    //    simd3        0        6        0
    //    simd4       35       32        0
    // Totals...
    // yes simd       85      119        0
    //  no simd      190      227        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                other[e42] * self[e435],
                other[e43] * self[e415],
                other[e43] * self[e12345],
                -(other[e42] * self[e315]) - (other[e43] * self[e125]) - (other[e23] * self[e415]) - (other[e31] * self[e425]) - (other[e12] * self[e435]),
            ]) + (self.group0().wwyw() * other.group0().xyx().extend_to_4(other[scalar]))
                - (other.group0().zxy() * self.group0().yzx()).extend_to_4(other[e41] * self[e235]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e31] * self[e435]) + (other[scalar] * self[e415]) - (other[e12] * self[e425]),
                (other[e12] * self[e415]) + (other[scalar] * self[e425]) - (other[e23] * self[e435]),
                (other[e12] * self[e12345]) + (other[scalar] * self[e435]) - (other[e31] * self[e415]),
                0.0,
            ]) + (self.group1().zxwy() * other.group0().yzz().extend_to_4(other[e42]))
                + (self.group1().wwyx() * other.group0().xyx().extend_to_4(other[e41]))
                + (other.group1().xyx() * self.group0().wwy()).extend_to_4(other[e43] * self[e125])
                - (other.group0().zxy() * self.group1().yzx()).extend_to_4(other[e45] * self[e12345]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e31] * self[e125]) + (other[e15] * self[e12345]) + (other[e25] * self[e435]) + (other[scalar] * self[e235]),
                (other[e12] * self[e235]) + (other[e25] * self[e12345]) + (other[e35] * self[e415]) + (other[scalar] * self[e315]),
                (other[e12] * self[e5]) + (other[e15] * self[e425]) + (other[e35] * self[e12345]) + (other[scalar] * self[e125]),
                -(other[e45] * self[e5]) - (other[e15] * self[e415]) - (other[e25] * self[e425]) - (other[e35] * self[e435]),
            ]) + (self.group1().wwyw() * other.group1().xyx().extend_to_4(other[scalar]))
                - (other.group1().zxyx() * self.group1().yzxx())
                - (other.group1().wwwy() * self.group1().xyzy())
                - (other.group2().zxy() * self.group0().yzx()).extend_to_4(other[e12] * self[e125]),
            // e1, e2, e3, e4
            Simd32x4::from([other[e43] * self[e315], other[e41] * self[e125], other[e42] * self[e235], 0.0])
                - (self.group0().xyzz() * other.group1().www().extend_to_4(other[e43]))
                - (other.group0().xyx() * self.group1().wwy()).extend_to_4(other[e41] * self[e415])
                - (other.group0().yzz() * self.group1().zxw()).extend_to_4(other[e42] * self[e425]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       70      115        0
    //    simd3        0       12        0
    //    simd4       37       27        0
    // Totals...
    // yes simd      107      154        0
    //  no simd      218      259        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(other[e431] * self[e435]) - (other[e4] * self[e415]),
                -(other[e412] * self[e415]) - (other[e4] * self[e425]),
                -(other[e412] * self[e12345]) - (other[e4] * self[e435]),
                (other[e431] * self[e315]) + (other[e412] * self[e125]) + (other[e415] * self[e415]) + (other[e425] * self[e425]) + (other[e435] * self[e435]),
            ]) + (other.group0().zxy() * self.group0().yzx()).extend_to_4(other[e423] * self[e235])
                - (other.group0().xyx() * self.group0().wwy()).extend_to_4(other[e4] * self[e5]),
            // e23, e31, e12, e45
            Simd32x4::from([
                other[e4] * self[e235] * -1.0,
                other[e4] * self[e315] * -1.0,
                other[e4] * self[e125] * -1.0,
                (other[e412] * self[e125]) + (other[e321] * self[e12345]),
            ]) + (self.group1().yzxx() * other.group0().zxy().extend_to_4(other[e423]))
                + (other.group1().zxy() * self.group0().yzx()).extend_to_4(other[e431] * self[e315])
                - (self.group0().zxwz() * other.group1().yzz().extend_to_4(other[e3]))
                - (self.group0().wwyy() * other.group1().xyx().extend_to_4(other[e2]))
                - (self.group1().wwyw() * other.group0().xyx().extend_to_4(other[e4]))
                - (other.group0().yzz() * self.group1().zxw()).extend_to_4(other[e1] * self[e415]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(other[e425] * self[e125])
                    - (other[e321] * self[e235])
                    - (other[e235] * self[e12345])
                    - (other[e315] * self[e435])
                    - (other[e1] * self[e5])
                    - (other[e2] * self[e125])
                    - (other[e5] * self[e415]),
                -(other[e435] * self[e235])
                    - (other[e321] * self[e315])
                    - (other[e315] * self[e12345])
                    - (other[e125] * self[e415])
                    - (other[e2] * self[e5])
                    - (other[e3] * self[e235])
                    - (other[e5] * self[e425]),
                -(other[e435] * self[e5])
                    - (other[e321] * self[e125])
                    - (other[e235] * self[e425])
                    - (other[e125] * self[e12345])
                    - (other[e1] * self[e315])
                    - (other[e3] * self[e5])
                    - (other[e5] * self[e435]),
                0.0,
            ]) + (self.group0().yzxy() * other.group2().zxy().extend_to_4(other[e431]))
                + (other.group1().zxy() * self.group1().yzx()).extend_to_4(other[e423] * self[e415])
                + (other.group3().zxy() * self.group1().yzx()).extend_to_4(other[e412] * self[e435])
                - (other.group1().xyx() * self.group1().wwy()).extend_to_4(other[e4] * self[e12345]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(other[e4] * self[e235]) - (other[e3] * self[e425]),
                -(other[e4] * self[e315]) - (other[e1] * self[e435]),
                -(other[e4] * self[e125]) - (other[e2] * self[e415]),
                (other[e315] * self[e425]) + (other[e125] * self[e435]) + (other[e1] * self[e235]) + (other[e2] * self[e315]) + (other[e3] * self[e125]),
            ]) + (other.group1().wwwy() * self.group0().truncate_to_3().extend_to_4(self[e315]))
                + (self.group0().zxwx() * other.group3().yzz().extend_to_4(other[e235]))
                + (self.group1().yzxx() * other.group0().zxy().extend_to_4(other[e415]))
                + (other.group3().xyx() * self.group0().wwy()).extend_to_4(other[e435] * self[e125])
                - (self.group1().wwyw() * other.group0().xyx().extend_to_4(other[e321]))
                - (other.group0().yzz() * self.group1().zxw()).extend_to_4(other[e5] * self[e12345]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for Motor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       26        0
    //    simd3        0        2        0
    //    simd4        7        9        0
    // Totals...
    // yes simd       23       37        0
    //  no simd       44       68        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(other[scalar]) * self.group0(),
            // e235, e315, e125, e5
            (Simd32x4::from(other[e3215]) * self.group0()) + (Simd32x4::from(other[scalar]) * self.group1()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for Motor {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       23        0
    //    simd3        3        6        0
    //    simd4        8        9        0
    // Totals...
    // yes simd       26       38        0
    //  no simd       56       77        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            ((other.group0().zxy() * self.group0().yzx())
                - (Simd32x3::from(other[e321]) * self.group1().truncate_to_3())
                - (other.group0().xyx() * self.group0().wwy())
                - (other.group0().yzz() * self.group0().zxw()))
            .extend_to_4(other[e321] * self[e12345]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e415], self[e425], self[e435], 1.0])
                * other
                    .group0()
                    .www()
                    .extend_to_4((other[e235] * self[e415]) + (other[e315] * self[e425]) + (other[e125] * self[e435]) - (other[e321] * self[e5])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for Motor {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       36        0
    //    simd3        0        4        0
    //    simd4       16       14        0
    // Totals...
    // yes simd       40       54        0
    //  no simd       88      104        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e3] * self[e315]) - (other[e1] * self[e5]) - (other[e2] * self[e125]) - (other[e5] * self[e415]),
                (other[e1] * self[e125]) - (other[e2] * self[e5]) - (other[e3] * self[e235]) - (other[e5] * self[e425]),
                (other[e2] * self[e235]) - (other[e1] * self[e315]) - (other[e3] * self[e5]) - (other[e5] * self[e435]),
                0.0,
            ]) + (other.group0().zxyw() * self.group0().yzxw())
                - (self.group0().zxwy() * other.group0().yzz().extend_to_4(other[e2]))
                - (self.group0().wwyx() * other.group0().xyx().extend_to_4(other[e1]))
                - (other.group0().www() * self.group1().truncate_to_3()).extend_to_4(other[e3] * self[e435]),
            // e4235, e4315, e4125, e3215
            (other.group0().wwwx() * self.group0().xyzx())
                + (self.group0().zxwz() * other.group1().yzz().extend_to_4(other[e125]))
                + (self.group0().wwyy() * other.group1().xyx().extend_to_4(other[e315]))
                + Simd32x3::from(0.0).extend_to_4((other[e1] * self[e235]) + (other[e2] * self[e315]) + (other[e3] * self[e125]) - (other[e5] * self[e12345]))
                - (other.group1().zxy() * self.group0().yzx()).extend_to_4(other[e321] * self[e5]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for Motor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       51        0
    //    simd3        0        3        0
    //    simd4        9        8        0
    // Totals...
    // yes simd       41       62        0
    //  no simd       68       92        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (other[e23] * self[e12345]) + (other[e31] * self[e435]),
                (other[e31] * self[e12345]) + (other[e12] * self[e415]),
                (other[e23] * self[e425]) + (other[e12] * self[e12345]),
                -(other[e31] * self[e425]) - (other[e12] * self[e435]),
            ]) - (self.group0().yzxx() * other.group0().zxy().extend_to_4(other[e23])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e23] * self[e5]) + (other[e31] * self[e125]) + (other[e15] * self[e12345]) + (other[e25] * self[e435]),
                (other[e31] * self[e5]) + (other[e12] * self[e235]) + (other[e25] * self[e12345]) + (other[e35] * self[e415]),
                (other[e23] * self[e315]) + (other[e12] * self[e5]) + (other[e15] * self[e425]) + (other[e35] * self[e12345]),
                -(other[e12] * self[e125]) - (other[e15] * self[e415]) - (other[e25] * self[e425]) - (other[e35] * self[e435]),
            ]) - (self.group1().yzxx() * other.group0().zxy().extend_to_4(other[e23]))
                - (other.group1().zxy() * self.group0().yzx()).extend_to_4(other[e31] * self[e315]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for Motor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       52        0
    //    simd3        0        4        0
    //    simd4       12       10        0
    // Totals...
    // yes simd       44       66        0
    //  no simd       80      104        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (other[e31] * self[e435]) + (other[scalar] * self[e415]),
                (other[e12] * self[e415]) + (other[scalar] * self[e425]),
                (other[e12] * self[e12345]) + (other[scalar] * self[e435]),
                -(other[e31] * self[e425]) - (other[e12] * self[e435]),
            ]) + (other.group0().xyxw() * self.group0().wwyw())
                - (other.group0().zxyx() * self.group0().yzxx()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[scalar] * self[e235]) + (other[e15] * self[e12345]) + (other[e25] * self[e435]) + (other[e3215] * self[e415]),
                (other[scalar] * self[e315]) + (other[e25] * self[e12345]) + (other[e35] * self[e415]) + (other[e3215] * self[e425]),
                (other[scalar] * self[e125]) + (other[e15] * self[e425]) + (other[e35] * self[e12345]) + (other[e3215] * self[e435]),
                -(other[e12] * self[e125]) - (other[e15] * self[e415]) - (other[e25] * self[e425]) - (other[e35] * self[e435]),
            ]) + (other.group0().xyxw() * self.group1().wwyw())
                + (other.group0().yzz() * self.group1().zxw()).extend_to_4(other[e3215] * self[e12345])
                - (other.group0().zxyx() * self.group1().yzxx())
                - (other.group1().zxy() * self.group0().yzx()).extend_to_4(other[e31] * self[e315]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for Motor {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       22        0
    //    simd3        0        2        0
    //    simd4       14       14        0
    // Totals...
    // yes simd       26       38        0
    //  no simd       68       84        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([other[e3] * self[e315], other[e1] * self[e125], other[e2] * self[e235], 0.0])
                - (other.group0().xyxx() * self.group1().wwy().extend_to_4(self[e415]))
                - (other.group0().yzzy() * self.group1().zxw().extend_to_4(self[e425]))
                - (other.group0().wwwz() * self.group0().xyzz()),
            // e4235, e4315, e4125, e3215
            (other.group0().xyxx() * self.group0().wwy().extend_to_4(self[e235]))
                + (other.group0().yzzy() * self.group0().zxw().extend_to_4(self[e315]))
                + Simd32x3::from(0.0).extend_to_4(other[e3] * self[e125])
                - (other.group0().zxyw() * self.group0().yzxw()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for Motor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       26        0
    //    simd3        0        2        0
    //    simd4        6       10        0
    // Totals...
    // yes simd       22       38        0
    //  no simd       40       72        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(other[e12345]) * self.group0() * Simd32x4::from(-1.0),
            // e15, e25, e35, e3215
            Simd32x4::from(other[e12345]) * self.group1() * Simd32x4::from(-1.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       69      110        0
    //    simd3        0        7        0
    //    simd4       27       22        0
    // Totals...
    // yes simd       96      139        0
    //  no simd      177      219        0
    fn sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(other[e423] * self[e12345]) - (other[e431] * self[e435]),
                -(other[e431] * self[e12345]) - (other[e412] * self[e415]),
                -(other[e423] * self[e425]) - (other[e412] * self[e12345]),
                (other[e431] * self[e315]) + (other[e412] * self[e125]) + (other[e415] * self[e415]) + (other[e425] * self[e425]) + (other[e435] * self[e435]),
            ]) + (other.group0().zxy() * self.group0().yzx()).extend_to_4(other[e423] * self[e235]),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(other[e423] * self[e5]) - (other[e431] * self[e125]) - (other[e415] * self[e12345]) - (other[e425] * self[e435]),
                -(other[e431] * self[e5]) - (other[e412] * self[e235]) - (other[e425] * self[e12345]) - (other[e435] * self[e415]),
                -(other[e423] * self[e315]) - (other[e412] * self[e5]) - (other[e415] * self[e425]) - (other[e435] * self[e12345]),
                (other[e412] * self[e125]) + (other[e321] * self[e12345]),
            ]) + (self.group1().yzxx() * other.group0().zxy().extend_to_4(other[e423]))
                + (other.group1().zxy() * self.group0().yzx()).extend_to_4(other[e431] * self[e315]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(other[e415] * self[e5]) - (other[e425] * self[e125]) - (other[e321] * self[e235]) - (other[e235] * self[e12345]) - (other[e315] * self[e435]),
                -(other[e425] * self[e5]) - (other[e435] * self[e235]) - (other[e321] * self[e315]) - (other[e315] * self[e12345]) - (other[e125] * self[e415]),
                -(other[e415] * self[e315]) - (other[e435] * self[e5]) - (other[e321] * self[e125]) - (other[e235] * self[e425]) - (other[e125] * self[e12345]),
                other[e412] * self[e435],
            ]) + (self.group0().yzxx() * other.group2().zxy().extend_to_4(other[e423]))
                + (other.group1().zxy() * self.group1().yzx()).extend_to_4(other[e431] * self[e425]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e431] * self[e125] * -1.0,
                other[e412] * self[e235] * -1.0,
                other[e412] * self[e5] * -1.0,
                (other[e415] * self[e235]) + (other[e425] * self[e315]) + (other[e435] * self[e125]) + (other[e125] * self[e435]),
            ]) + (self.group0().xyzy() * other.group1().www().extend_to_4(other[e315]))
                + (other.group0().zxy() * self.group1().yzx()).extend_to_4(other[e235] * self[e415])
                - (self.group1().wwyw() * other.group0().xyx().extend_to_4(other[e321])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       72      109        0
    //    simd3        0        6        0
    //    simd4       29       25        0
    // Totals...
    // yes simd      101      140        0
    //  no simd      188      227        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                other[e431] * self[e435] * -1.0,
                other[e412] * self[e415] * -1.0,
                other[e412] * self[e12345] * -1.0,
                (other[e431] * self[e315]) + (other[e412] * self[e125]) + (other[e415] * self[e415]) + (other[e425] * self[e425]) + (other[e435] * self[e435]),
            ]) + (other.group0().zxy() * self.group0().yzx()).extend_to_4(other[e423] * self[e235])
                - (self.group0().wwyw() * other.group0().xyx().extend_to_4(other[e12345])),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(other[e423] * self[e5]) - (other[e431] * self[e125]) - (other[e415] * self[e12345]) - (other[e425] * self[e435]) - (other[e12345] * self[e415]),
                -(other[e431] * self[e5]) - (other[e412] * self[e235]) - (other[e425] * self[e12345]) - (other[e435] * self[e415]) - (other[e12345] * self[e425]),
                -(other[e423] * self[e315]) - (other[e412] * self[e5]) - (other[e415] * self[e425]) - (other[e435] * self[e12345]) - (other[e12345] * self[e435]),
                (other[e412] * self[e125]) + (other[e321] * self[e12345]),
            ]) + (self.group1().yzxx() * other.group0().zxy().extend_to_4(other[e423]))
                + (other.group1().zxy() * self.group0().yzx()).extend_to_4(other[e431] * self[e315]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(other[e415] * self[e5])
                    - (other[e425] * self[e125])
                    - (other[e321] * self[e235])
                    - (other[e235] * self[e12345])
                    - (other[e315] * self[e435])
                    - (other[e12345] * self[e235]),
                -(other[e425] * self[e5])
                    - (other[e435] * self[e235])
                    - (other[e321] * self[e315])
                    - (other[e315] * self[e12345])
                    - (other[e125] * self[e415])
                    - (other[e12345] * self[e315]),
                -(other[e415] * self[e315])
                    - (other[e435] * self[e5])
                    - (other[e321] * self[e125])
                    - (other[e235] * self[e425])
                    - (other[e125] * self[e12345])
                    - (other[e12345] * self[e125]),
                other[e412] * self[e435],
            ]) + (self.group0().yzxy() * other.group2().zxy().extend_to_4(other[e431]))
                + (other.group1().zxy() * self.group1().yzx()).extend_to_4(other[e423] * self[e415]),
            // e4235, e4315, e4125, e3215
            (other.group1().wwwy() * self.group0().truncate_to_3().extend_to_4(self[e315]))
                + (self.group1().yzxx() * other.group0().zxy().extend_to_4(other[e415]))
                + Simd32x3::from(0.0).extend_to_4((other[e435] * self[e125]) + (other[e235] * self[e415]) + (other[e315] * self[e425]) + (other[e125] * self[e435]))
                - (self.group1().zxww() * other.group0().yzz().extend_to_4(other[e12345]))
                - (self.group1().wwyw() * other.group0().xyx().extend_to_4(other[e321])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       50       82        0
    //    simd3        0        7        0
    //    simd4       33       29        0
    // Totals...
    // yes simd       83      118        0
    //  no simd      182      219        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e41] * self[e12345]) + (other[e42] * self[e435]),
                (other[e42] * self[e12345]) + (other[e43] * self[e415]),
                (other[e41] * self[e425]) + (other[e43] * self[e12345]),
                -(other[e42] * self[e315]) - (other[e43] * self[e125]) - (other[e23] * self[e415]) - (other[e31] * self[e425]) - (other[e12] * self[e435]),
            ]) - (other.group0().zxy() * self.group0().yzx()).extend_to_4(other[e41] * self[e235]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e31] * self[e435]) - (other[e12] * self[e425]),
                (other[e12] * self[e415]) - (other[e23] * self[e435]),
                (other[e12] * self[e12345]) - (other[e31] * self[e415]),
                0.0,
            ]) + (self.group1().zxwy() * other.group0().yzz().extend_to_4(other[e42]))
                + (self.group1().wwyx() * other.group0().xyx().extend_to_4(other[e41]))
                + (other.group1().xyx() * self.group0().wwy()).extend_to_4(other[e43] * self[e125])
                - (other.group0().zxy() * self.group1().yzx()).extend_to_4(other[e45] * self[e12345]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e23] * self[e5]) + (other[e31] * self[e125]) + (other[e15] * self[e12345]) + (other[e25] * self[e435]),
                (other[e31] * self[e5]) + (other[e12] * self[e235]) + (other[e25] * self[e12345]) + (other[e35] * self[e415]),
                (other[e23] * self[e315]) + (other[e12] * self[e5]) + (other[e15] * self[e425]) + (other[e35] * self[e12345]),
                -(other[e23] * self[e235]) - (other[e31] * self[e315]) - (other[e12] * self[e125]) - (other[e45] * self[e5]),
            ]) - (self.group0().yzxx() * other.group2().zxy().extend_to_4(other[e15]))
                - (other.group1().zxy() * self.group1().yzx()).extend_to_4(other[e25] * self[e425])
                - (other.group1().www() * self.group1().truncate_to_3()).extend_to_4(other[e35] * self[e435]),
            // e1, e2, e3, e4
            Simd32x4::from([other[e43] * self[e315], other[e41] * self[e125], other[e42] * self[e235], 0.0])
                - (self.group0().xyzz() * other.group1().www().extend_to_4(other[e43]))
                - (other.group0().xyx() * self.group1().wwy()).extend_to_4(other[e41] * self[e415])
                - (other.group0().yzz() * self.group1().zxw()).extend_to_4(other[e42] * self[e425]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       83        0
    //    simd3        0       12        0
    //    simd4       44       35        0
    // Totals...
    // yes simd       92      130        0
    //  no simd      224      259        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e42] * self[e435]) + (other[e1234] * self[e415]),
                (other[e43] * self[e415]) + (other[e1234] * self[e425]),
                (other[e43] * self[e12345]) + (other[e1234] * self[e435]),
                -(other[e42] * self[e315]) - (other[e43] * self[e125]) - (other[e23] * self[e415]) - (other[e31] * self[e425]) - (other[e12] * self[e435]),
            ]) + (other.group0().xyx() * self.group0().wwy()).extend_to_4(other[e1234] * self[e5])
                - (other.group0().zxy() * self.group0().yzx()).extend_to_4(other[e41] * self[e235]),
            // e415, e425, e435, e321
            (self.group0().zxwx() * other.group1().yzz().extend_to_4(other[e4235]))
                + (self.group1().zxwy() * other.group0().yzz().extend_to_4(other[e42]))
                + (self.group1().wwyx() * other.group0().xyx().extend_to_4(other[e41]))
                + Simd32x3::from(0.0).extend_to_4(other[e4125] * self[e435])
                + (other.group1().xyx() * self.group0().wwy()).extend_to_4(other[e43] * self[e125])
                + (other.group2().www() * self.group1().truncate_to_3()).extend_to_4(other[e4315] * self[e425])
                - (other.group0().zxy() * self.group1().yzx()).extend_to_4(other[e45] * self[e12345])
                - (other.group1().zxy() * self.group0().yzx()).extend_to_4(other[e1234] * self[e5]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e4125] * self[e315]) + (other[e3215] * self[e415]),
                (other[e4235] * self[e125]) + (other[e3215] * self[e425]),
                (other[e4315] * self[e235]) + (other[e3215] * self[e435]),
                -(other[e25] * self[e425]) - (other[e35] * self[e435]),
            ]) + (self.group0().zxww() * other.group2().yzz().extend_to_4(other[e3215]))
                + (self.group1().zxwy() * other.group1().yzz().extend_to_4(other[e4315]))
                + (self.group1().wwyx() * other.group1().xyx().extend_to_4(other[e4235]))
                + (other.group2().xyx() * self.group0().wwy()).extend_to_4(other[e4125] * self[e125])
                - (other.group1().zxyx() * self.group1().yzxx())
                - (other.group1().wwwy() * self.group1().xyzy())
                - (self.group1().wwyw() * other.group3().xyx().extend_to_4(other[e45]))
                - (other.group2().zxy() * self.group0().yzx()).extend_to_4(other[e12] * self[e125])
                - (other.group3().yzz() * self.group1().zxw()).extend_to_4(other[e15] * self[e415]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e4125] * self[e425]) - (other[e1234] * self[e235]) - (other[e4235] * self[e12345]) - (other[e4315] * self[e435]),
                (other[e4235] * self[e435]) - (other[e1234] * self[e315]) - (other[e4315] * self[e12345]) - (other[e4125] * self[e415]),
                (other[e4315] * self[e415]) - (other[e1234] * self[e125]) - (other[e4235] * self[e425]) - (other[e4125] * self[e12345]),
                0.0,
            ]) + (other.group0().zxy() * self.group1().yzx()).extend_to_4(other[e1234] * self[e12345])
                - (self.group0().xyzz() * other.group1().www().extend_to_4(other[e43]))
                - (other.group0().xyx() * self.group1().wwy()).extend_to_4(other[e41] * self[e415])
                - (other.group0().yzz() * self.group1().zxw()).extend_to_4(other[e42] * self[e425]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for Motor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       26        0
    //    simd3        0        2        0
    //    simd4        7       10        0
    // Totals...
    // yes simd       23       38        0
    //  no simd       44       72        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(other[e12345]) * self.group0() * Simd32x4::from(-1.0),
            // e15, e25, e35, e3215
            -(Simd32x4::from(other[e5]) * self.group0()) - (Simd32x4::from(other[e12345]) * self.group1()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for Motor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       22        0
    //    simd3        3        4        0
    //    simd4        8       12        0
    // Totals...
    // yes simd       26       38        0
    //  no simd       56       82        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            ((other.group0().xyx() * self.group0().wwy()) + (other.group0().yzz() * self.group0().zxw())
                - (Simd32x3::from(other[e45]) * self.group1().truncate_to_3())
                - (other.group0().zxy() * self.group0().yzx()))
            .extend_to_4(other[e45] * self[e12345] * -1.0),
            // e1, e2, e3, e5
            Simd32x4::from([self[e415], self[e425], self[e435], 1.0])
                * other
                    .group0()
                    .www()
                    .extend_to_4(-(other[e15] * self[e415]) - (other[e25] * self[e425]) - (other[e35] * self[e435]) - (other[e45] * self[e5]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for Motor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       32        0
    //    simd4       16       18        0
    // Totals...
    // yes simd       40       50        0
    //  no simd       88      104        0
    fn sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (other[e3215] * self[e415]) - (other[e45] * self[e235]) - (other[e4235] * self[e5]) - (other[e4315] * self[e125]),
                (other[e3215] * self[e425]) - (other[e45] * self[e315]) - (other[e4315] * self[e5]) - (other[e4125] * self[e235]),
                (other[e3215] * self[e435]) - (other[e45] * self[e125]) - (other[e4235] * self[e315]) - (other[e4125] * self[e5]),
                0.0,
            ]) + (other.group1().zxyz() * self.group1().yzx().extend_to_4(self[e435]))
                + (self.group0().zxwy() * other.group0().yzz().extend_to_4(other[e4315]))
                + (self.group0().wwyx() * other.group0().xyx().extend_to_4(other[e4235]))
                - (other.group0().zxyw() * self.group0().yzxw()),
            // e1, e2, e3, e5
            (other.group1().zxyx() * self.group0().yzx().extend_to_4(self[e235]))
                + Simd32x3::from(0.0).extend_to_4((other[e4315] * self[e315]) + (other[e4125] * self[e125]) + (other[e3215] * self[e12345]) - (other[e45] * self[e5]))
                - (other.group0().wwwx() * self.group0().xyzx())
                - (self.group0().zxwz() * other.group1().yzz().extend_to_4(other[e35]))
                - (self.group0().wwyy() * other.group1().xyx().extend_to_4(other[e25])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for Motor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       51        0
    //    simd3        0        3        0
    //    simd4        9        8        0
    // Totals...
    // yes simd       41       62        0
    //  no simd       68       92        0
    fn sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                -(other[e415] * self[e12345]) - (other[e425] * self[e435]),
                -(other[e425] * self[e12345]) - (other[e435] * self[e415]),
                -(other[e415] * self[e425]) - (other[e435] * self[e12345]),
                (other[e425] * self[e425]) + (other[e435] * self[e435]),
            ]) + (self.group0().yzxx() * other.group0().zxy().extend_to_4(other[e415])),
            // e15, e25, e35, e3215
            Simd32x4::from([
                -(other[e415] * self[e5]) - (other[e425] * self[e125]) - (other[e235] * self[e12345]) - (other[e315] * self[e435]),
                -(other[e425] * self[e5]) - (other[e435] * self[e235]) - (other[e315] * self[e12345]) - (other[e125] * self[e415]),
                -(other[e415] * self[e315]) - (other[e435] * self[e5]) - (other[e235] * self[e425]) - (other[e125] * self[e12345]),
                (other[e435] * self[e125]) + (other[e235] * self[e415]) + (other[e315] * self[e425]) + (other[e125] * self[e435]),
            ]) + (self.group1().yzxx() * other.group0().zxy().extend_to_4(other[e415]))
                + (other.group1().zxy() * self.group0().yzx()).extend_to_4(other[e425] * self[e315]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for Motor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       52        0
    //    simd3        0        4        0
    //    simd4       12       10        0
    // Totals...
    // yes simd       44       66        0
    //  no simd       80      104        0
    fn sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                -(other[e425] * self[e435]) - (other[e12345] * self[e415]),
                -(other[e435] * self[e415]) - (other[e12345] * self[e425]),
                -(other[e435] * self[e12345]) - (other[e12345] * self[e435]),
                (other[e425] * self[e425]) + (other[e435] * self[e435]),
            ]) + (other.group0().zxyx() * self.group0().yzxx())
                - (other.group0().xyxw() * self.group0().wwyw()),
            // e15, e25, e35, e3215
            Simd32x4::from([
                -(other[e12345] * self[e235]) - (other[e235] * self[e12345]) - (other[e315] * self[e435]) - (other[e5] * self[e415]),
                -(other[e12345] * self[e315]) - (other[e315] * self[e12345]) - (other[e125] * self[e415]) - (other[e5] * self[e425]),
                -(other[e12345] * self[e125]) - (other[e235] * self[e425]) - (other[e125] * self[e12345]) - (other[e5] * self[e435]),
                (other[e435] * self[e125]) + (other[e235] * self[e415]) + (other[e315] * self[e425]) + (other[e125] * self[e435]),
            ]) + (other.group0().zxyx() * self.group1().yzxx())
                + (other.group1().zxy() * self.group0().yzx()).extend_to_4(other[e425] * self[e315])
                - (other.group0().xyxw() * self.group1().wwyw())
                - (other.group0().yzz() * self.group1().zxw()).extend_to_4(other[e5] * self[e12345]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for Motor {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       90      150        0
    //    simd2        8        8        0
    //    simd3       48       83        0
    //    simd4       51       27        0
    // Totals...
    // yes simd      197      268        0
    //  no simd      454      523        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e425] * other[e425]) + (self[e435] * other[e435]) + (self[e315] * other[e431]) + (self[e125] * other[e412]),
                -(self[e425] * other[e31]) - (self[e435] * other[e12]) - (self[e315] * other[e42]) - (self[e125] * other[e43]),
            ]) + (Simd32x2::from([other[e415], other[scalar]]) * self.group0().xw())
                + (Simd32x2::from([other[e423], other[e1234]]) * self.group1().xw())
                - (Simd32x2::from([other[e12345], other[e23]]) * self.group0().wx())
                - (Simd32x2::from([other[e4], other[e41]]) * self.group1().wx()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e425] * other[e4125]) - (self[e435] * other[e4315]) - (self[e12345] * other[e4235]) - (self[e235] * other[e1234]),
                (self[e435] * other[e4235]) - (self[e425] * other[e45]) - (self[e12345] * other[e4315]) - (self[e315] * other[e1234]),
                (self[e415] * other[e4315]) - (self[e435] * other[e45]) - (self[e12345] * other[e4125]) - (self[e125] * other[e1234]),
                0.0,
            ]) + (other.group4().zxy() * self.group1().yzx()).extend_to_4(self[e12345] * other[e1234])
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], self[e435]]) * self.group0().xxy().extend_to_4(other[e43]))
                - (other.group4().xyx() * self.group1().wwy()).extend_to_4(self[e415] * other[e41])
                - (other.group4().yzz() * self.group1().zxw()).extend_to_4(self[e425] * other[e42]),
            // e5
            (self[e12345] * other[e3215]) + (self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125]) + (self[e5] * other[scalar])
                - (self[e415] * other[e15])
                - (self[e425] * other[e25])
                - (self[e435] * other[e35])
                - (self[e235] * other[e23])
                - (self[e315] * other[e31])
                - (self[e125] * other[e12])
                - (self[e5] * other[e45]),
            // e15, e25, e35, e45
            Simd32x4::from([
                -(self[e235] * other[e321]) - (self[e125] * other[e2]) - (self[e125] * other[e425]) - (self[e5] * other[e1]) - (self[e5] * other[e415]),
                -(self[e235] * other[e3]) - (self[e235] * other[e435]) - (self[e315] * other[e321]) - (self[e5] * other[e2]) - (self[e5] * other[e425]),
                -(self[e315] * other[e1]) - (self[e315] * other[e415]) - (self[e125] * other[e321]) - (self[e5] * other[e3]) - (self[e5] * other[e435]),
                self[e12345] * other[e321],
            ]) + (other.group8().zxy() * self.group0().yzx()).extend_to_4(self[e235] * other[e423])
                + (self.group1().yzx() * other.group1().zxy()).extend_to_4(self[e315] * other[e431])
                + (self.group1().yzx() * other.group6().zxy()).extend_to_4(self[e125] * other[e412])
                - (Simd32x4::from([other[e5], other[e5], other[e5], other[e4]]) * self.group0().truncate_to_3().extend_to_4(self[e5]))
                - (other.group0().yy().extend_to_4(other[e12345], self[e415]) * self.group1().truncate_to_3().extend_to_4(other[e1]))
                - (other.group8().xyx() * self.group0().wwy()).extend_to_4(self[e425] * other[e2])
                - (other.group8().yzz() * self.group0().zxw()).extend_to_4(self[e435] * other[e3]),
            // e41, e42, e43
            (other.group7().zxy() * self.group0().yzx())
                - (Simd32x3::from(other[e4]) * self.group0().truncate_to_3())
                - (other.group7().xyx() * self.group0().wwy())
                - (other.group7().yzz() * self.group0().zxw()),
            // e23, e31, e12
            (other.group7().zxy() * self.group1().yzx()) + (self.group0().yzx() * other.group6().zxy())
                - (Simd32x3::from(self[e12345]) * other.group6().truncate_to_3())
                - (Simd32x3::from(other[e12345]) * self.group0().truncate_to_3())
                - (Simd32x3::from(other[e4]) * self.group1().truncate_to_3())
                - (other.group7().xyx() * self.group1().wwy())
                - (other.group7().yzz() * self.group1().zxw())
                - (self.group0().zxy() * other.group6().yzx()),
            // e415, e425, e435, e321
            (Simd32x4::from([other[e1234], other[e1234], other[e1234], other[e4125]]) * self.group1().truncate_to_3().extend_to_4(self[e435]))
                + (self.group1().zxwz() * other.group4().yzz().extend_to_4(other[e43]))
                + (self.group1().wwyy() * other.group4().xyx().extend_to_4(other[e42]))
                + (other.group0().xx().extend_to_4(other[scalar], other[e41]) * self.group0().truncate_to_3().extend_to_4(self[e235]))
                + (other.group5().xyx() * self.group0().wwy()).extend_to_4(self[e415] * other[e4235])
                + (other.group5().yzz() * self.group0().zxw()).extend_to_4(self[e425] * other[e4315])
                - (other.group4().zxy() * self.group1().yzx()).extend_to_4(self[e12345] * other[e45])
                - (other.group5().zxy() * self.group0().yzx()).extend_to_4(self[e5] * other[e1234]),
            // e423, e431, e412
            (Simd32x3::from(other[e1234]) * self.group0().truncate_to_3()) + (other.group4().xyx() * self.group0().wwy()) + (other.group4().yzz() * self.group0().zxw())
                - (other.group4().zxy() * self.group0().yzx()),
            // e235, e315, e125
            (Simd32x3::from(self[e12345]) * other.group3().truncate_to_3())
                + (Simd32x3::from(other[scalar]) * self.group1().truncate_to_3())
                + (Simd32x3::from([other[e25], other[e3215], other[e3215]]) * self.group0().zyz())
                + (Simd32x3::from([other[e3215], other[e35], other[e15]]) * self.group0().xxy())
                + (other.group5().xyx() * self.group1().wwy())
                + (other.group5().yzz() * self.group1().zxw())
                + (self.group1().yzx() * other.group9().zxy())
                - (Simd32x3::from(self[e5]) * other.group9().truncate_to_3())
                - (Simd32x3::from([other[e45], other[e4125], other[e4235]]) * self.group1().xxy())
                - (Simd32x3::from([other[e4315], other[e45], other[e45]]) * self.group1().zyz())
                - (other.group5().zxy() * self.group1().yzx())
                - (self.group0().yzx() * other.group3().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e235] * other[e4] * -1.0,
                self[e315] * other[e4] * -1.0,
                self[e125] * other[e4] * -1.0,
                (self[e235] * other[e415]) + (self[e315] * other[e2]) + (self[e315] * other[e425]) + (self[e125] * other[e3]) + (self[e125] * other[e435]),
            ]) + (Simd32x4::from([other[e2], other[e321], other[e321], self[e435]]) * self.group0().zyz().extend_to_4(other[e125]))
                + (Simd32x4::from([other[e321], other[e3], other[e1], self[e425]]) * self.group0().xxy().extend_to_4(other[e315]))
                + (other.group1().xyzx() * self.group0().www().extend_to_4(self[e235]))
                + (other.group7().zxy() * self.group1().yzx()).extend_to_4(self[e415] * other[e235])
                - (self.group1().wwyw() * other.group7().xyx().extend_to_4(other[e12345]))
                - (other.group7().yzz() * self.group1().zxw()).extend_to_4(self[e12345] * other[e5])
                - (self.group0().yzx() * other.group1().zxy()).extend_to_4(self[e5] * other[e321]),
            // e1234
            (self[e415] * other[e423]) + (self[e425] * other[e431]) + (self[e435] * other[e412]) - (self[e12345] * other[e4]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for Motor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       32        0
    //    simd4       11       13        0
    // Totals...
    // yes simd       31       45        0
    //  no simd       64       84        0
    fn sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                -(self[e125] * other[e4315]) - (self[e5] * other[e4235]),
                -(self[e235] * other[e4125]) - (self[e5] * other[e4315]),
                -(self[e315] * other[e4235]) - (self[e5] * other[e4125]),
                self[e435] * other[e4125],
            ]) + (self.group0().xyzx() * other.group0().wwwx())
                + (other.group0().zxyy() * self.group1().yzx().extend_to_4(self[e425])),
            // e1, e2, e3, e5
            Simd32x4::from([
                -(self[e435] * other[e4315]) - (self[e12345] * other[e4235]),
                -(self[e415] * other[e4125]) - (self[e12345] * other[e4315]),
                -(self[e425] * other[e4235]) - (self[e12345] * other[e4125]),
                (self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125]),
            ]) + (self.group0().yzxw() * other.group0().zxyw()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       68        0
    //    simd3        3        7        0
    //    simd4       22       25        0
    // Totals...
    // yes simd       65      100        0
    //  no simd      137      189        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(other[e4]) * self.group0().truncate_to_3().extend_to_4(self[e5]) * Simd32x4::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from([other[e4], other[e4], other[e4], 1.0])
                * self
                    .group1()
                    .truncate_to_3()
                    .extend_to_4(-(self[e415] * other[e1]) - (self[e425] * other[e2]) - (self[e435] * other[e3]) - (self[e5] * other[e4]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, e1234
            ((self.group1().yzx() * other.group0().zxy())
                - (Simd32x3::from(self[e5]) * other.group0().truncate_to_3())
                - (Simd32x3::from(other[e5]) * self.group0().truncate_to_3())
                - (self.group1().zxy() * other.group0().yzx()))
            .extend_to_4(self[e12345] * other[e4] * -1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e235] * other[e4] * -1.0, self[e315] * other[e4] * -1.0, self[e125] * other[e4] * -1.0, self[e125] * other[e3]])
                + (other.group0().xyzy() * self.group0().www().extend_to_4(self[e315]))
                + (other.group0().yzxx() * self.group0().zxy().extend_to_4(self[e235]))
                - (self.group0().yzxw() * other.group0().zxy().extend_to_4(other[e5])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for Motor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       26        0
    //    simd3        0        2        0
    //    simd4        6        8        0
    // Totals...
    // yes simd       22       36        0
    //  no simd       40       64        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(other[scalar]) * self.group0(),
            // e235, e315, e125, e5
            Simd32x4::from(other[scalar]) * self.group1(),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       35       52        0
    //    simd3        3        4        0
    //    simd4       24       29        0
    // Totals...
    // yes simd       62       85        0
    //  no simd      140      180        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(other[e1234]) * self.group0().truncate_to_3().extend_to_4(self[e5]),
            // e415, e425, e435, e321
            Simd32x4::from([other[e1234], other[e1234], other[e1234], 1.0])
                * self
                    .group1()
                    .truncate_to_3()
                    .extend_to_4((self[e415] * other[e4235]) + (self[e425] * other[e4315]) + (self[e435] * other[e4125]) - (self[e5] * other[e1234])),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e125] * other[e4315]) - (self[e5] * other[e4235]),
                -(self[e235] * other[e4125]) - (self[e5] * other[e4315]),
                -(self[e315] * other[e4235]) - (self[e5] * other[e4125]),
                (self[e315] * other[e4315]) + (self[e125] * other[e4125]),
            ]) + (Simd32x4::from(other[e3215]) * self.group0())
                + (self.group1().yzxx() * other.group0().zxyx()),
            // e1, e2, e3, e4
            ((self.group0().yzx() * other.group0().zxy())
                - (Simd32x3::from(self[e12345]) * other.group0().truncate_to_3())
                - (Simd32x3::from(other[e1234]) * self.group1().truncate_to_3())
                - (self.group0().zxy() * other.group0().yzx()))
            .extend_to_4(self[e12345] * other[e1234]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       70      111        0
    //    simd3        0        5        0
    //    simd4       39       36        0
    // Totals...
    // yes simd      109      152        0
    //  no simd      226      270        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e12345] * other[e423] * -1.0,
                self[e12345] * other[e431] * -1.0,
                self[e12345] * other[e412] * -1.0,
                (self[e425] * other[e425]) + (self[e435] * other[e435]) + (self[e235] * other[e423]) + (self[e315] * other[e431]) + (self[e125] * other[e412]),
            ]) + (self.group0().yzxx() * other.group0().zxy().extend_to_4(other[e415]))
                - (Simd32x4::from([other[e431], other[e4], other[e4], other[e4]]) * self.group0().zyz().extend_to_4(self[e5]))
                - (Simd32x4::from([other[e4], other[e412], other[e423], other[e12345]]) * self.group0().xxyw()),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(self[e125] * other[e431]) - (self[e5] * other[e423]),
                -(self[e315] * other[e4]) - (self[e5] * other[e431]),
                -(self[e125] * other[e4]) - (self[e5] * other[e412]),
                (self[e315] * other[e431]) + (self[e125] * other[e412]),
            ]) + (self.group0().yzxw() * other.group1().zxyw())
                + (self.group1().yzxx() * other.group0().zxyx())
                - (Simd32x4::from([other[e12345], other[e435], other[e415], other[e1]]) * self.group0().xxyx())
                - (Simd32x4::from([other[e425], other[e12345], other[e12345], other[e2]]) * self.group0().zyzy())
                - (Simd32x4::from([other[e4], other[e412], other[e423], other[e4]]) * self.group1().xxyw())
                - (self.group0().wwwz() * other.group1().truncate_to_3().extend_to_4(other[e3])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(self[e435] * other[e315])
                    - (self[e12345] * other[e235])
                    - (self[e235] * other[e12345])
                    - (self[e235] * other[e321])
                    - (self[e125] * other[e425])
                    - (self[e125] * other[e2])
                    - (self[e5] * other[e415])
                    - (self[e5] * other[e1]),
                -(self[e425] * other[e5])
                    - (self[e12345] * other[e315])
                    - (self[e235] * other[e435])
                    - (self[e235] * other[e3])
                    - (self[e315] * other[e12345])
                    - (self[e315] * other[e321])
                    - (self[e5] * other[e425])
                    - (self[e5] * other[e2]),
                -(self[e435] * other[e5])
                    - (self[e12345] * other[e125])
                    - (self[e315] * other[e415])
                    - (self[e315] * other[e1])
                    - (self[e125] * other[e12345])
                    - (self[e125] * other[e321])
                    - (self[e5] * other[e435])
                    - (self[e5] * other[e3]),
                0.0,
            ]) + (self.group0().yzxx() * other.group2().zxy().extend_to_4(other[e423]))
                + (self.group1().yzx() * other.group1().zxy()).extend_to_4(self[e425] * other[e431])
                + (self.group1().yzx() * other.group3().zxy()).extend_to_4(self[e435] * other[e412])
                - (self.group0().xxyw() * other.group2().wzx().extend_to_4(other[e4])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e5] * other[e423] * -1.0,
                self[e5] * other[e431] * -1.0,
                self[e5] * other[e412] * -1.0,
                (self[e235] * other[e1]) + (self[e315] * other[e425]) + (self[e315] * other[e2]) + (self[e125] * other[e435]) + (self[e125] * other[e3]),
            ]) + (Simd32x4::from([other[e321], other[e3], other[e1], other[e235]]) * self.group0().xxyx())
                + (Simd32x4::from([other[e2], other[e321], other[e321], other[e315]]) * self.group0().zyzy())
                + (self.group0().wwwz() * other.group3().truncate_to_3().extend_to_4(other[e125]))
                + (self.group1().yzxx() * other.group0().zxy().extend_to_4(other[e415]))
                - (Simd32x4::from([other[e431], other[e4], other[e4], other[e321]]) * self.group1().zyzw())
                - (Simd32x4::from([other[e4], other[e412], other[e423], other[e12345]]) * self.group1().xxyw())
                - (self.group0().yzxw() * other.group3().zxy().extend_to_4(other[e5])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       45       68        0
    //    simd3        0        1        0
    //    simd4       46       49        0
    // Totals...
    // yes simd       91      118        0
    //  no simd      229      267        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e12345] * other[e41],
                self[e12345] * other[e42],
                self[e12345] * other[e43],
                -(self[e425] * other[e31]) - (self[e435] * other[e12]) - (self[e235] * other[e41]) - (self[e315] * other[e42]) - (self[e125] * other[e43]),
            ]) + (Simd32x4::from([other[e42], other[e1234], other[e1234], other[e1234]]) * self.group0().zyz().extend_to_4(self[e5]))
                + (Simd32x4::from([other[e1234], other[e43], other[e41], other[scalar]]) * self.group0().xxyw())
                - (self.group0().yzxx() * other.group0().zxy().extend_to_4(other[e23])),
            // e415, e425, e435, e321
            (Simd32x4::from([other[e42], other[e1234], other[e1234], other[e42]]) * self.group1().zyzy())
                + (Simd32x4::from([other[scalar], other[e12], other[e23], other[e4235]]) * self.group0().xxyx())
                + (Simd32x4::from([other[e31], other[scalar], other[scalar], other[e4315]]) * self.group0().zyzy())
                + (Simd32x4::from([other[e1234], other[e43], other[e41], other[e41]]) * self.group1().xxyx())
                + (self.group0().wwwz() * other.group1().truncate_to_3().extend_to_4(other[e4125]))
                + (self.group1().wwwz() * other.group0().xyzz())
                - (self.group0().yzxw() * other.group1().zxyw())
                - (self.group1().yzxw() * other.group0().zxy().extend_to_4(other[e1234])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e125] * other[e31]) + (self[e5] * other[e23]),
                (self[e125] * other[e4235]) + (self[e5] * other[e31]),
                (self[e125] * other[scalar]) + (self[e5] * other[e12]),
                -(self[e125] * other[e12]) - (self[e5] * other[e45]),
            ]) + (Simd32x4::from([other[scalar], other[e12], other[e4315], other[e4125]]) * self.group1().xxxz())
                + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e4235]]) * self.group0().zyz().extend_to_4(self[e235]))
                + (Simd32x4::from([other[e4125], other[scalar], other[e23], other[scalar]]) * self.group1().yyyw())
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e3215]]) * self.group0().xxyw())
                + (self.group0().www() * other.group2().truncate_to_3()).extend_to_4(self[e315] * other[e4315])
                - (Simd32x4::from([other[e45], other[e4125], other[e31], other[e25]]) * self.group1().xxx().extend_to_4(self[e425]))
                - (Simd32x4::from([other[e4315], other[e23], other[e45], other[e23]]) * self.group1().zzzx())
                - (self.group0().yzxx() * other.group2().zxyx())
                - (self.group1().wwwy() * other.group3().truncate_to_3().extend_to_4(other[e31]))
                - (other.group1().zw().extend_to_4(other[e4235], other[e35]) * self.group1().yyy().extend_to_4(self[e435])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e315] * other[e43]) - (self[e235] * other[e1234]) - (self[e125] * other[e42]) - (self[e5] * other[e41]),
                (self[e125] * other[e41]) - (self[e235] * other[e43]) - (self[e315] * other[e1234]) - (self[e5] * other[e42]),
                (self[e235] * other[e42]) - (self[e315] * other[e41]) - (self[e125] * other[e1234]) - (self[e5] * other[e43]),
                0.0,
            ]) + (self.group0().yzxw() * other.group3().zxy().extend_to_4(other[e1234]))
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e41]]) * self.group0().xxyx())
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e42]]) * self.group0().zyzy())
                - (self.group0().wwwz() * other.group3().truncate_to_3().extend_to_4(other[e43])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl std::ops::Div<sandwich> for MultiVector {
    type Output = sandwich_partial<MultiVector>;
    fn div(self, _rhs: sandwich) -> Self::Output {
        sandwich_partial(self)
    }
}
impl Sandwich<AntiCircleRotor> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      204      291        0
    //    simd2       26       26        0
    //    simd3      164      222        0
    //    simd4      141       97        0
    // Totals...
    // yes simd      535      636        0
    //  no simd     1312     1397        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([other[e45] * self[e45], other[e45] * self[e321] * -1.0]) + (Simd32x2::from(other[scalar]) * self.group0())
                - (Simd32x2::from(other[e41]) * Simd32x2::from([self[e15], self[e235]]))
                - (Simd32x2::from(other[e42]) * Simd32x2::from([self[e25], self[e315]]))
                - (Simd32x2::from(other[e43]) * Simd32x2::from([self[e35], self[e125]]))
                - (Simd32x2::from(other[e23]) * Simd32x2::from([self[e23], self[e415]]))
                - (Simd32x2::from(other[e31]) * Simd32x2::from([self[e31], self[e425]]))
                - (Simd32x2::from(other[e12]) * Simd32x2::from([self[e12], self[e435]]))
                - (Simd32x2::from(other[e15]) * Simd32x2::from([self[e41], self[e423]]))
                - (Simd32x2::from(other[e25]) * Simd32x2::from([self[e42], self[e431]]))
                - (Simd32x2::from(other[e35]) * Simd32x2::from([self[e43], self[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e23] * self[e321]) + (other[e31] * self[e3]) + (other[e15] * self[e4]) + (other[scalar] * self[e1]),
                (other[e31] * self[e321]) + (other[e12] * self[e1]) + (other[e25] * self[e4]) + (other[scalar] * self[e2]),
                (other[e23] * self[e2]) + (other[e12] * self[e321]) + (other[e35] * self[e4]) + (other[scalar] * self[e3]),
                -(other[e43] * self[e435]) - (other[e23] * self[e423]) - (other[e31] * self[e431]) - (other[e12] * self[e412]),
            ]) + (other.group0().zxy() * self.group8().yzx()).extend_to_4(other[e45] * self[e4])
                + (self.group7().zxy() * other.group2().yzx()).extend_to_4(other[scalar] * self[e4])
                - (Simd32x4::from([self[e5], self[e5], self[e315], self[e1]]) * other.group0().xyx().extend_to_4(other[e41]))
                - (self.group8().zx().extend_to_4(self[e5], self[e415]) * other.group0().yzz().extend_to_4(other[e41]))
                - (self.group7().yzx() * other.group2().zxy()).extend_to_4(other[e42] * self[e2])
                - (other.group1().zxy() * self.group1().yzx()).extend_to_4(other[e42] * self[e425])
                - (other.group1().www() * self.group6().truncate_to_3()).extend_to_4(other[e43] * self[e3]),
            // e5
            (other[e15] * self[e1]) + (other[e25] * self[e2]) + (other[e35] * self[e3]) + (other[scalar] * self[e5])
                - (other[e23] * self[e235])
                - (other[e31] * self[e315])
                - (other[e12] * self[e125])
                - (other[e45] * self[e5])
                - (other[e15] * self[e415])
                - (other[e25] * self[e425])
                - (other[e35] * self[e435]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e25] * self[e4125]) + (other[scalar] * self[e15]),
                (other[e35] * self[e4235]) + (other[scalar] * self[e25]),
                (other[e35] * self[e45]) + (other[scalar] * self[e35]),
                -(other[e31] * self[e4315]) - (other[e12] * self[e4125]),
            ]) + (Simd32x4::from(self[scalar]) * other.group2().truncate_to_3().extend_to_4(other[e45]))
                + (other.group2().xyxw() * self.group3().ww().extend_to_4(self[e4315], self[e45]))
                + (other.group2().yzxx() * self.group5().zxy().extend_to_4(self[e41]))
                + (self.group3().zx().extend_to_4(self[e3215], other[e35]) * other.group1().yzz().extend_to_4(self[e43]))
                + (self.group9().ww().extend_to_4(self[e25], other[e25]) * other.group1().xyx().extend_to_4(self[e42]))
                - (self.group3().xyzz() * other.group1().www().extend_to_4(other[e43]))
                - (self.group3().yzxy() * other.group1().zxy().extend_to_4(other[e42]))
                - (self.group9().yzxx() * other.group2().zxy().extend_to_4(other[e23]))
                - (self.group5().yzx() * other.group2().zxy()).extend_to_4(other[e41] * self[e15]),
            // e41, e42, e43
            (Simd32x3::from(self[scalar]) * other.group0())
                + (Simd32x3::from(self[e1234]) * other.group1().truncate_to_3())
                + (Simd32x3::from([other[e31], other[scalar], other[scalar]]) * self.group4().zyz())
                + (Simd32x3::from([other[scalar], other[e45], other[e45]]) * self.group4())
                + (Simd32x3::from([self[e12], self[e4125], self[e31]]) * other.group0().yxx())
                + (Simd32x3::from([self[e4315], self[e23], self[e4235]]) * other.group0().zzy())
                + (self.group4().xxy() * other.group1().wzx())
                - (Simd32x3::from(other[e41]) * Simd32x3::from([self[e45], self[e12], self[e4315]]))
                - (Simd32x3::from(other[e42]) * Simd32x3::from([self[e4125], self[e45], self[e23]]))
                - (Simd32x3::from(other[e43]) * Simd32x3::from([self[e31], self[e4235], self[e45]]))
                - (self.group4().yzx() * other.group1().zxy()),
            // e23, e31, e12
            (Simd32x3::from(other[e45]) * self.group9().truncate_to_3())
                + (Simd32x3::from(self[scalar]) * other.group1().truncate_to_3())
                + (Simd32x3::from(self[e1234]) * other.group2().truncate_to_3())
                + (Simd32x3::from([other[e31], other[scalar], other[scalar]]) * self.group5().zyz())
                + (Simd32x3::from([other[scalar], other[e12], other[e23]]) * self.group5().xxy())
                + (Simd32x3::from([self[e35], self[e15], self[e3215]]) * other.group0().yzz())
                + (Simd32x3::from([self[e3215], self[e3215], self[e25]]) * other.group0().xyx())
                + (self.group4().zxy() * other.group2().yzx())
                - (other.group0().zxy() * self.group3().yzx())
                - (self.group4().yzx() * other.group2().zxy())
                - (self.group5().yzx() * other.group1().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e31] * self[e435]) + (other[e15] * self[e4]) + (other[scalar] * self[e415]),
                (other[e12] * self[e415]) + (other[e25] * self[e4]) + (other[scalar] * self[e425]),
                (other[e23] * self[e425]) + (other[e35] * self[e4]) + (other[scalar] * self[e435]),
                -(other[e23] * self[e1]) - (other[e31] * self[e2]) - (other[e12] * self[e3]),
            ]) + (Simd32x4::from([self[e5], self[e5], self[e315], self[e315]]) * other.group0().xyx().extend_to_4(other[e42]))
                + (self.group0().yy().extend_to_4(self[e12345], other[e41]) * other.group1().truncate_to_3().extend_to_4(self[e235]))
                + (self.group8().zx().extend_to_4(self[e5], self[e125]) * other.group0().yzz().extend_to_4(other[e43]))
                + (self.group7().zxy() * other.group2().yzx()).extend_to_4(other[scalar] * self[e321])
                - (other.group2().zxyx() * self.group7().yzx().extend_to_4(self[e423]))
                - (other.group0().zxy() * self.group8().yzx()).extend_to_4(other[e45] * self[e12345])
                - (other.group1().zxy() * self.group6().yzx()).extend_to_4(other[e25] * self[e431])
                - (other.group1().www() * self.group1().truncate_to_3()).extend_to_4(other[e35] * self[e412]),
            // e423, e431, e412
            (Simd32x3::from(self[e12345]) * other.group0())
                + (Simd32x3::from(self[e4]) * other.group1().truncate_to_3())
                + (Simd32x3::from([other[e31], other[scalar], other[scalar]]) * self.group7().zyz())
                + (Simd32x3::from([other[scalar], other[e45], other[e45]]) * self.group7())
                + (Simd32x3::from([self[e3], self[e1], self[e425]]) * other.group0().yzx())
                + (Simd32x3::from([self[e321], self[e321], self[e2]]) * other.group0().xyx())
                + (other.group0().yzz() * self.group6().zxw())
                + (self.group7().xxy() * other.group1().wzx())
                - (other.group0().zxy() * self.group1().yzx())
                - (other.group0().zxy() * self.group6().yzx())
                - (self.group7().yzx() * other.group1().zxy()),
            // e235, e315, e125
            (Simd32x3::from(self[e12345]) * other.group2().truncate_to_3())
                + (Simd32x3::from(self[e5]) * other.group1().truncate_to_3())
                + (Simd32x3::from([other[e31], other[scalar], other[scalar]]) * self.group8().zyz())
                + (Simd32x3::from([other[scalar], other[e12], other[e23]]) * self.group8().xxy())
                + (Simd32x3::from([self[e2], self[e415], self[e1]]) * other.group2().zzy())
                + (Simd32x3::from([self[e435], self[e3], self[e425]]) * other.group2().yxx())
                - (Simd32x3::from(other[e15]) * Simd32x3::from([self[e321], self[e435], self[e2]]))
                - (Simd32x3::from(other[e25]) * Simd32x3::from([self[e3], self[e321], self[e415]]))
                - (Simd32x3::from(other[e35]) * Simd32x3::from([self[e425], self[e1], self[e321]]))
                - (self.group8().xyx() * other.group1().wwy())
                - (self.group8().yzz() * other.group1().zxw()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e42] * self[e35])
                    + (other[e23] * self[e45])
                    + (other[e31] * self[e4125])
                    + (other[e45] * self[e23])
                    + (other[e35] * self[e42])
                    + (other[scalar] * self[e4235]),
                (other[e43] * self[e15])
                    + (other[e31] * self[e45])
                    + (other[e12] * self[e4235])
                    + (other[e45] * self[e31])
                    + (other[e15] * self[e43])
                    + (other[scalar] * self[e4315]),
                (other[e43] * self[e3215])
                    + (other[e23] * self[e4315])
                    + (other[e12] * self[e45])
                    + (other[e45] * self[e12])
                    + (other[e25] * self[e41])
                    + (other[scalar] * self[e4125]),
                -(other[e31] * self[e25])
                    - (other[e12] * self[e35])
                    - (other[e45] * self[e3215])
                    - (other[e15] * self[e4235])
                    - (other[e25] * self[e4315])
                    - (other[e35] * self[e4125]),
            ]) + (self.group9().ww().extend_to_4(self[e25], self[e3215]) * other.group0().xyx().extend_to_4(other[scalar]))
                - (Simd32x4::from([self[e1234], self[e1234], self[e1234], self[e15]]) * other.group2().truncate_to_3().extend_to_4(other[e23]))
                - (other.group2().yzxy() * self.group4().zxy().extend_to_4(self[e31]))
                - (other.group0().zxy() * self.group3().yzx()).extend_to_4(other[e15] * self[e23])
                - (other.group1().zxy() * self.group9().yzx()).extend_to_4(other[e35] * self[e12]),
            // e1234
            (other[e41] * self[e4235]) + (other[e42] * self[e4315]) + (other[e43] * self[e4125]) + (other[e45] * self[e1234]) + (other[scalar] * self[e1234])
                - (other[e41] * self[e23])
                - (other[e42] * self[e31])
                - (other[e43] * self[e12])
                - (other[e23] * self[e41])
                - (other[e31] * self[e42])
                - (other[e12] * self[e43]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      184      279        0
    //    simd2       22       22        0
    //    simd3      180      241        0
    //    simd4      168      121        0
    // Totals...
    // yes simd      554      663        0
    //  no simd     1440     1530        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (other[e423] * self[e235])
                    + (other[e431] * self[e315])
                    + (other[e412] * self[e125])
                    + (other[e415] * self[e415])
                    + (other[e425] * self[e425])
                    + (other[e435] * self[e435])
                    + (other[e315] * self[e431])
                    + (other[e125] * self[e412])
                    - (other[e5] * self[e4]),
                (other[e5] * self[e1234])
                    - (other[e423] * self[e15])
                    - (other[e431] * self[e25])
                    - (other[e412] * self[e35])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12])
                    - (other[e321] * self[e45])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]) + (Simd32x2::from(other[e1]) * Simd32x2::from([self[e1], self[e4235]]))
                + (Simd32x2::from(other[e2]) * Simd32x2::from([self[e2], self[e4315]]))
                + (Simd32x2::from(other[e3]) * Simd32x2::from([self[e3], self[e4125]]))
                + (Simd32x2::from([self[e423], self[e3215]]) * other.group2().xw())
                - (Simd32x2::from([self[e5], self[e41]]) * other.group2().wx())
                - (Simd32x2::from([self[e321], self[e23]]) * other.group1().wx()),
            // e1, e2, e3, e4
            Simd32x4::from([other[e235] * self[e1234], other[e315] * self[e1234], other[e125] * self[e1234], other[e4] * self[e45] * -1.0])
                + (Simd32x4::from(self[scalar]) * other.group3().truncate_to_3().extend_to_4(other[e4]))
                + (Simd32x4::from([other[e321], other[e3], other[e1], other[e1]]) * self.group5().xxy().extend_to_4(self[e41]))
                + (Simd32x4::from([other[e315], other[e5], other[e5], self[e4125]]) * self.group4().zyz().extend_to_4(other[e412]))
                + (Simd32x4::from([other[e2], other[e321], other[e321], other[e2]]) * self.group5().zyz().extend_to_4(self[e42]))
                + (Simd32x4::from([other[e5], other[e125], other[e235], self[e4315]]) * self.group4().xxy().extend_to_4(other[e431]))
                + (other.group0().zxy() * self.group3().yzx()).extend_to_4(other[e423] * self[e4235])
                + (other.group1().zxy() * self.group9().yzx()).extend_to_4(other[e3] * self[e43])
                - (self.group3().zx().extend_to_4(self[e3215], self[e31]) * other.group0().yzz().extend_to_4(other[e431]))
                - (self.group3().ww().extend_to_4(self[e4315], other[e425]) * other.group1().xyx().extend_to_4(self[e42]))
                - (self.group9().zx().extend_to_4(self[e45], other[e435]) * other.group1().yzz().extend_to_4(self[e43]))
                - (self.group9().ww().extend_to_4(self[e25], self[e23]) * other.group0().xyx().extend_to_4(other[e423]))
                - (self.group4().yzx() * other.group2().zxy()).extend_to_4(other[e412] * self[e12])
                - (self.group5().yzx() * other.group3().zxy()).extend_to_4(other[e415] * self[e41])
                - (other.group2().www() * self.group3().truncate_to_3()).extend_to_4(other[e321] * self[e1234]),
            // e5
            (other[e321] * self[e3215]) + (other[e5] * self[scalar]) + (other[e5] * self[e45])
                - (other[e415] * self[e15])
                - (other[e425] * self[e25])
                - (other[e435] * self[e35])
                - (other[e235] * self[e23])
                - (other[e235] * self[e4235])
                - (other[e315] * self[e31])
                - (other[e315] * self[e4315])
                - (other[e125] * self[e12])
                - (other[e125] * self[e4125])
                - (other[e1] * self[e15])
                - (other[e2] * self[e25])
                - (other[e3] * self[e35]),
            // e15, e25, e35, e45
            Simd32x4::from([other[e5] * self[e1], other[e5] * self[e2], other[e5] * self[e3], other[e3] * self[e435] * -1.0])
                + (Simd32x4::from([self[e3], self[e321], self[e415], self[e125]]) * other.group2().yyy().extend_to_4(other[e412]))
                + (Simd32x4::from([self[e425], self[e1], self[e321], self[e4]]) * other.group2().zzz().extend_to_4(other[e5]))
                + (other.group1().zxyw() * self.group8().yzx().extend_to_4(self[e12345]))
                + (self.group6().wz().extend_to_4(self[e2], self[e315]) * other.group2().xxx().extend_to_4(other[e431]))
                + (self.group8().yzx() * other.group3().zxy()).extend_to_4(other[e423] * self[e235])
                - (Simd32x4::from([other[e425], other[e3], other[e1], other[e125]]) * self.group8().zxy().extend_to_4(self[e412]))
                - (Simd32x4::from([other[e2], other[e321], other[e321], self[e1]]) * self.group8().zyz().extend_to_4(other[e415]))
                - (Simd32x4::from([self[e2], self[e415], self[e1], self[e5]]) * other.group2().zzyw())
                - (Simd32x4::from([self[e5], self[e5], self[e5], self[e2]]) * other.group1().xyzy())
                - (Simd32x4::from([self[e5], self[e5], self[e5], self[e415]]) * other.group3().xyzx())
                - (Simd32x4::from([self[e435], self[e3], self[e425], self[e3]]) * other.group2().yxx().extend_to_4(other[e435]))
                - (other.group2().xyzx() * self.group0().yy().extend_to_4(self[e12345], self[e423]))
                - (other.group3().wwwy() * self.group6().xyzy())
                - (self.group8().xxy() * other.group1().wzx()).extend_to_4(other[e315] * self[e431]),
            // e41, e42, e43
            (Simd32x3::from(self[e4]) * other.group3().truncate_to_3())
                + (Simd32x3::from(self[e423]) * Simd32x3::from([other[e321], other[e3], other[e425]]))
                + (Simd32x3::from(self[e431]) * Simd32x3::from([other[e435], other[e321], other[e1]]))
                + (Simd32x3::from(self[e412]) * Simd32x3::from([other[e2], other[e415], other[e321]]))
                + (other.group0().zxy() * self.group1().yzx())
                + (other.group0().zxy() * self.group6().yzx())
                - (Simd32x3::from(other[e4]) * self.group1().truncate_to_3())
                - (Simd32x3::from(other[e4]) * self.group6().truncate_to_3())
                - (Simd32x3::from(self[e12345]) * other.group0())
                - (Simd32x3::from(self[e4]) * other.group1().truncate_to_3())
                - (Simd32x3::from([other[e425], other[e1], other[e415]]) * self.group7().zzy())
                - (Simd32x3::from([other[e3], other[e435], other[e2]]) * self.group7().yxx())
                - (Simd32x3::from([self[e3], self[e1], self[e425]]) * other.group0().yzx())
                - (Simd32x3::from([self[e321], self[e321], self[e2]]) * other.group0().xyx())
                - (other.group0().yzz() * self.group6().zxw()),
            // e23, e31, e12
            (other.group0().zxy() * self.group8().yzx())
                + (self.group7().yzx() * other.group2().zxy())
                + (other.group1().zxy() * self.group6().yzx())
                + (other.group3().zxy() * self.group1().yzx())
                - (Simd32x3::from(other[e321]) * self.group1().truncate_to_3())
                - (Simd32x3::from(other[e4]) * self.group8())
                - (Simd32x3::from(self[e12345]) * other.group1().truncate_to_3())
                - (Simd32x3::from(self[e4]) * other.group2().truncate_to_3())
                - (Simd32x3::from([other[e315], other[e5], other[e5]]) * self.group7().zyz())
                - (Simd32x3::from([other[e5], other[e125], other[e235]]) * self.group7().xxy())
                - (Simd32x3::from([self[e3], self[e1], self[e321]]) * other.group3().yzz())
                - (Simd32x3::from([self[e5], self[e5], self[e315]]) * other.group0().xyx())
                - (Simd32x3::from([self[e321], self[e321], self[e2]]) * other.group3().xyx())
                - (other.group0().yzz() * self.group8().zx().extend_to_3(self[e5]))
                - (other.group1().yzx() * self.group6().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([other[e3] * self[e4315], other[e1] * self[e4125], other[e2] * self[e4235], other[e4] * self[e3215] * -1.0])
                + (Simd32x4::from(self[scalar]) * other.group1())
                + (Simd32x4::from([other[e315], other[e5], other[e5], self[e4235]]) * self.group4().zyz().extend_to_4(other[e415]))
                + (Simd32x4::from([other[e5], other[e125], other[e235], self[e35]]) * self.group4().xxy().extend_to_4(other[e412]))
                + (Simd32x4::from([self[e1234], self[e1234], self[e1234], self[e4125]]) * other.group2().truncate_to_3().extend_to_4(other[e435]))
                + (self.group3().zx().extend_to_4(self[e3215], self[e25]) * other.group0().yzz().extend_to_4(other[e431]))
                + (self.group9().ww().extend_to_4(self[e25], self[e15]) * other.group0().xyx().extend_to_4(other[e423]))
                + (self.group5().zxy() * other.group1().yzx()).extend_to_4(other[e425] * self[e4315])
                + (other.group2().www() * self.group3().truncate_to_3()).extend_to_4(other[e5] * self[e1234])
                - (other.group2().zxyy() * self.group4().yzx().extend_to_4(self[e42]))
                - (self.group3().ww().extend_to_4(self[e4315], other[e2]) * other.group3().xyx().extend_to_4(self[e31]))
                - (self.group9().zx().extend_to_4(self[e45], other[e3]) * other.group3().yzz().extend_to_4(self[e12]))
                - (other.group0().zxy() * self.group3().yzx()).extend_to_4(other[e235] * self[e41])
                - (self.group5().yzx() * other.group1().zxy()).extend_to_4(other[e125] * self[e43])
                - (other.group1().www() * self.group9().truncate_to_3()).extend_to_4(other[e1] * self[e23]),
            // e423, e431, e412
            (Simd32x3::from(other[e4]) * self.group5())
                + (Simd32x3::from(self[scalar]) * other.group0())
                + (Simd32x3::from(self[e1234]) * other.group1().truncate_to_3())
                + (Simd32x3::from([other[e425], other[e1], other[e415]]) * self.group4().zzy())
                + (Simd32x3::from([other[e3], other[e435], other[e2]]) * self.group4().yxx())
                + (Simd32x3::from([self[e12], self[e4125], self[e31]]) * other.group0().yxx())
                + (Simd32x3::from([self[e4315], self[e23], self[e4235]]) * other.group0().zzy())
                - (Simd32x3::from(other[e423]) * Simd32x3::from([self[e45], self[e12], self[e4315]]))
                - (Simd32x3::from(other[e431]) * Simd32x3::from([self[e4125], self[e45], self[e23]]))
                - (Simd32x3::from(other[e412]) * Simd32x3::from([self[e31], self[e4235], self[e45]]))
                - (Simd32x3::from(other[e4]) * self.group9().truncate_to_3())
                - (Simd32x3::from(self[e41]) * Simd32x3::from([other[e321], other[e3], other[e425]]))
                - (Simd32x3::from(self[e42]) * Simd32x3::from([other[e435], other[e321], other[e1]]))
                - (Simd32x3::from(self[e43]) * Simd32x3::from([other[e2], other[e415], other[e321]]))
                - (Simd32x3::from(self[e1234]) * other.group3().truncate_to_3()),
            // e235, e315, e125
            (Simd32x3::from(other[e321]) * self.group3().truncate_to_3())
                + (Simd32x3::from(other[e5]) * self.group9().truncate_to_3())
                + (Simd32x3::from(self[scalar]) * other.group2().truncate_to_3())
                + (Simd32x3::from([other[e315], other[e5], other[e5]]) * self.group5().zyz())
                + (Simd32x3::from([other[e5], other[e125], other[e235]]) * self.group5().xxy())
                + (Simd32x3::from([self[e35], self[e15], self[e3215]]) * other.group1().yzz())
                + (Simd32x3::from([self[e35], self[e15], self[e3215]]) * other.group3().yzz())
                + (Simd32x3::from([self[e45], self[e45], self[e4315]]) * other.group2().xyx())
                + (Simd32x3::from([self[e4125], self[e4235], self[e45]]) * other.group2().yzz())
                + (Simd32x3::from([self[e3215], self[e3215], self[e25]]) * other.group1().xyx())
                + (Simd32x3::from([self[e3215], self[e3215], self[e25]]) * other.group3().xyx())
                - (self.group5().yzx() * other.group2().zxy())
                - (other.group1().zxy() * self.group3().yzx())
                - (other.group2().zxy() * self.group9().yzx())
                - (other.group3().zxy() * self.group3().yzx()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([other[e3] * self[e425] * -1.0, other[e1] * self[e435] * -1.0, other[e2] * self[e415] * -1.0, other[e5] * self[e321]])
                + (Simd32x4::from([other[e315], other[e5], other[e5], other[e2]]) * self.group7().zyz().extend_to_4(self[e315]))
                + (Simd32x4::from([other[e5], other[e125], other[e235], other[e425]]) * self.group7().xxy().extend_to_4(self[e315]))
                + (other.group2().xyzy() * self.group1().www().extend_to_4(self[e425]))
                + (self.group6().xyzx() * other.group1().www().extend_to_4(other[e235]))
                + (self.group6().zxyz() * other.group3().yzx().extend_to_4(other[e125]))
                + (self.group0().yy().extend_to_4(self[e12345], self[e235]) * other.group3().truncate_to_3().extend_to_4(other[e415]))
                + (self.group1().zx().extend_to_4(self[e321], other[e3]) * other.group1().yzz().extend_to_4(self[e125]))
                + (self.group6().ww().extend_to_4(self[e2], other[e435]) * other.group1().xyx().extend_to_4(self[e125]))
                + (other.group0().zxy() * self.group8().yzx()).extend_to_4(other[e1] * self[e235])
                - (Simd32x4::from([self[e5], self[e5], self[e315], other[e5]]) * other.group0().xyx().extend_to_4(self[e12345]))
                - (self.group1().yzxz() * other.group1().zxy().extend_to_4(other[e125]))
                - (self.group8().zx().extend_to_4(self[e5], self[e5]) * other.group0().yzz().extend_to_4(other[e321]))
                - (self.group8() * other.group2().www()).extend_to_4(other[e315] * self[e2])
                - (self.group7().yzx() * other.group2().zxy()).extend_to_4(other[e235] * self[e1]),
            // e1234
            (other[e423] * self[e1])
                + (other[e423] * self[e415])
                + (other[e431] * self[e2])
                + (other[e431] * self[e425])
                + (other[e412] * self[e3])
                + (other[e412] * self[e435])
                + (other[e415] * self[e423])
                + (other[e425] * self[e431])
                + (other[e435] * self[e412])
                + (other[e321] * self[e4])
                - (other[e4] * self[e12345])
                - (other[e4] * self[e321])
                - (other[e1] * self[e423])
                - (other[e2] * self[e431])
                - (other[e3] * self[e412]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      146      215        0
    //    simd2       17       18        0
    //    simd3      128      175        0
    //    simd4      115       84        0
    // Totals...
    // yes simd      406      492        0
    //  no simd     1024     1112        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from(other[e3215]) * Simd32x2::from([self[e1234], self[e4]])) + (Simd32x2::from(other[scalar]) * self.group0()),
            // e1, e2, e3, e4
            ((Simd32x3::from(other[e3215]) * self.group7()) + (Simd32x3::from(other[scalar]) * self.group1().truncate_to_3())).extend_to_4(other[scalar] * self[e4]),
            // e5
            (other[e3215] * self[e12345]) + (other[scalar] * self[e5]) - (other[e3215] * self[e321]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e3215] * self[e4235]) + (other[scalar] * self[e15]),
                (other[e3215] * self[e4315]) + (other[scalar] * self[e25]),
                (other[e3215] * self[e4125]) + (other[scalar] * self[e35]),
                other[e3215] * self[e1234] * -1.0,
            ]) + (other.group0().xx().extend_to_4(other[e3215], other[scalar]) * self.group5().extend_to_4(self[e45])),
            // e41, e42, e43
            Simd32x3::from(other[scalar]) * self.group4(),
            // e23, e31, e12
            (Simd32x3::from(other[e3215]) * self.group4()) + (Simd32x3::from(other[scalar]) * self.group5()),
            // e415, e425, e435, e321
            (Simd32x4::from(other[e3215]) * self.group7().extend_to_4(self[e4])) + (Simd32x4::from(other[scalar]) * self.group6()),
            // e423, e431, e412
            Simd32x3::from(other[scalar]) * self.group7(),
            // e235, e315, e125
            (Simd32x3::from(other[e3215]) * self.group6().truncate_to_3()) + (Simd32x3::from(other[scalar]) * self.group8())
                - (Simd32x3::from(other[e3215]) * self.group1().truncate_to_3()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e3215] * self[e41] * -1.0,
                other[e3215] * self[e42] * -1.0,
                other[e3215] * self[e43] * -1.0,
                (other[e3215] * self[e45]) + (other[scalar] * self[e3215]),
            ]) + (other.group0().yy().extend_to_4(other[scalar], other[e3215]) * self.group9().truncate_to_3().extend_to_4(self[scalar])),
            // e1234
            other[scalar] * self[e1234],
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      158      230        0
    //    simd2       17       17        0
    //    simd3      136      187        0
    //    simd4      123       88        0
    // Totals...
    // yes simd      434      522        0
    //  no simd     1092     1177        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (other[e235] * self[e423]) + (other[e315] * self[e431]) + (other[e125] * self[e412]),
                -(other[e315] * self[e42]) - (other[e125] * self[e43]) - (other[e321] * self[e45]),
            ]) - (Simd32x2::from([self[e321], self[e41]]) * other.group0().wx()),
            // e1, e2, e3, e4
            ((Simd32x3::from(other[e321]) * self.group5()) + (Simd32x3::from(self[e1234]) * other.group0().truncate_to_3()) + (self.group4().zxy() * other.group0().yzx())
                - (self.group4().yzx() * other.group0().zxy()))
            .extend_to_4(other[e321] * self[e1234] * -1.0),
            // e5
            (other[e321] * self[e3215])
                - (other[e235] * self[e23])
                - (other[e235] * self[e4235])
                - (other[e315] * self[e31])
                - (other[e315] * self[e4315])
                - (other[e125] * self[e12])
                - (other[e125] * self[e4125]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e315] * self[e3]) + (other[e125] * self[e425]) - (other[e125] * self[e2]),
                (other[e315] * self[e321]) + (other[e125] * self[e1]) - (other[e125] * self[e415]),
                (other[e315] * self[e415]) + (other[e125] * self[e321]) - (other[e315] * self[e1]),
                0.0,
            ]) + (self.group6().wz().extend_to_4(self[e2], other[e321]) * other.group0().xxx().extend_to_4(self[e12345]))
                - (Simd32x4::from([self[e435], self[e3], self[e425], other[e125]]) * other.group0().yxx().extend_to_4(self[e412]))
                - (other.group0().xyzx() * self.group0().yy().extend_to_4(self[e12345], self[e423]))
                - (other.group0().wwwy() * self.group8().extend_to_4(self[e431])),
            // e41, e42, e43
            Simd32x3::from(other[e321]) * self.group7(),
            // e23, e31, e12
            (self.group7().yzx() * other.group0().zxy())
                - (Simd32x3::from(other[e321]) * self.group1().truncate_to_3())
                - (Simd32x3::from(self[e4]) * other.group0().truncate_to_3())
                - (self.group7().zxy() * other.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([other[e235] * self[e1234], other[e315] * self[e1234], other[e125] * self[e1234], other[e125] * self[e43] * -1.0])
                + (other.group0().yzxw() * self.group4().zxy().extend_to_4(self[scalar]))
                - (other.group0().zxyx() * self.group4().yzx().extend_to_4(self[e41]))
                - (other.group0().www() * self.group9().truncate_to_3()).extend_to_4(other[e315] * self[e42]),
            // e423, e431, e412
            Simd32x3::from(other[e321]) * self.group4() * Simd32x3::from(-1.0),
            // e235, e315, e125
            (Simd32x3::from(other[e321]) * self.group3().truncate_to_3())
                + (Simd32x3::from(self[scalar]) * other.group0().truncate_to_3())
                + (Simd32x3::from([self[e45], self[e45], self[e4315]]) * other.group0().xyx())
                + (Simd32x3::from([self[e4125], self[e4235], self[e45]]) * other.group0().yzz())
                + (self.group5().zxy() * other.group0().yzx())
                - (self.group5().yzx() * other.group0().zxy())
                - (other.group0().zxy() * self.group9().yzx()),
            // e4235, e4315, e4125, e3215
            (other.group0().xyzy() * self.group1().www().extend_to_4(self[e425]))
                + (other.group0().wwwz() * self.group6().xyzz())
                + Simd32x3::from(0.0).extend_to_4(-(other[e315] * self[e2]) - (other[e125] * self[e3]) - (other[e321] * self[e5]))
                + (self.group7().zxy() * other.group0().yzx()).extend_to_4(other[e235] * self[e415])
                - (self.group7().yzx() * other.group0().zxy()).extend_to_4(other[e235] * self[e1]),
            // e1234
            other[e321] * self[e4],
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      185      259        0
    //    simd2       20       20        0
    //    simd3      148      199        0
    //    simd4      138      101        0
    // Totals...
    // yes simd      491      579        0
    //  no simd     1221     1300        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (other[e235] * self[e423]) + (other[e315] * self[e431]) + (other[e125] * self[e412]) - (other[e5] * self[e4]),
                (other[e5] * self[e1234]) - (other[e315] * self[e42]) - (other[e125] * self[e43]) - (other[e321] * self[e45]),
            ]) + (Simd32x2::from(other[e1]) * Simd32x2::from([self[e1], self[e4235]]))
                + (Simd32x2::from(other[e2]) * Simd32x2::from([self[e2], self[e4315]]))
                + (Simd32x2::from(other[e3]) * Simd32x2::from([self[e3], self[e4125]]))
                - (Simd32x2::from([self[e321], self[e41]]) * other.group0().wx()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e235] * self[e1234]) + (other[e321] * self[e23]) + (other[e2] * self[e12]) - (other[e3] * self[e31]),
                (other[e315] * self[e1234]) + (other[e321] * self[e31]) + (other[e3] * self[e23]) - (other[e1] * self[e12]),
                (other[e125] * self[e1234]) + (other[e321] * self[e12]) + (other[e1] * self[e31]) - (other[e2] * self[e23]),
                0.0,
            ]) + (Simd32x4::from([other[e315], other[e5], other[e5], other[e3]]) * self.group4().zyz().extend_to_4(self[e43]))
                + (Simd32x4::from([other[e5], other[e125], other[e235], other[e2]]) * self.group4().xxy().extend_to_4(self[e42]))
                + (other.group1().xyzx() * self.group0().xx().extend_to_4(self[scalar], self[e41]))
                - (self.group4().yzx() * other.group0().zxy()).extend_to_4(other[e321] * self[e1234]),
            // e5
            (other[e321] * self[e3215]) + (other[e5] * self[scalar]) + (other[e5] * self[e45])
                - (other[e235] * self[e23])
                - (other[e235] * self[e4235])
                - (other[e315] * self[e31])
                - (other[e315] * self[e4315])
                - (other[e125] * self[e12])
                - (other[e125] * self[e4125])
                - (other[e1] * self[e15])
                - (other[e2] * self[e25])
                - (other[e3] * self[e35]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e315] * self[e3]) + (other[e125] * self[e425]) + (other[e5] * self[e1]) - (other[e5] * self[e415]),
                (other[e315] * self[e321]) + (other[e125] * self[e1]) + (other[e5] * self[e2]) - (other[e5] * self[e425]),
                (other[e315] * self[e415]) + (other[e125] * self[e321]) + (other[e5] * self[e3]) - (other[e5] * self[e435]),
                0.0,
            ]) + (self.group6().wz().extend_to_4(self[e2], self[e4]) * other.group0().xxx().extend_to_4(other[e5]))
                + (self.group8().yzx() * other.group1().zxy()).extend_to_4(other[e321] * self[e12345])
                - (Simd32x4::from([other[e321], other[e3], other[e1], other[e315]]) * self.group8().xxy().extend_to_4(self[e431]))
                - (Simd32x4::from([other[e2], other[e321], other[e321], other[e125]]) * self.group8().zyz().extend_to_4(self[e412]))
                - (Simd32x4::from([self[e2], self[e415], self[e1], self[e425]]) * other.group0().zzy().extend_to_4(other[e2]))
                - (Simd32x4::from([self[e5], self[e5], self[e5], self[e435]]) * other.group1().xyzz())
                - (Simd32x4::from([self[e435], self[e3], self[e425], self[e415]]) * other.group0().yxx().extend_to_4(other[e1]))
                - (other.group0().xyzx() * self.group0().yy().extend_to_4(self[e12345], self[e423])),
            // e41, e42, e43
            (Simd32x3::from(self[e4]) * other.group1().truncate_to_3())
                + (Simd32x3::from([other[e321], other[e3], other[e1]]) * self.group7().xxy())
                + (Simd32x3::from([other[e2], other[e321], other[e321]]) * self.group7().zyz())
                - (self.group7().yzx() * other.group1().zxy()),
            // e23, e31, e12
            (self.group7().yzx() * other.group0().zxy()) + (other.group1().zxy() * self.group1().yzx())
                - (Simd32x3::from(other[e321]) * self.group1().truncate_to_3())
                - (Simd32x3::from(self[e4]) * other.group0().truncate_to_3())
                - (Simd32x3::from([other[e315], other[e5], other[e5]]) * self.group7().zyz())
                - (Simd32x3::from([other[e5], other[e125], other[e235]]) * self.group7().xxy())
                - (Simd32x3::from([self[e3], self[e1], self[e321]]) * other.group1().yzz())
                - (Simd32x3::from([self[e321], self[e321], self[e2]]) * other.group1().xyx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e235] * self[e1234]) + (other[e3] * self[e4315]),
                (other[e315] * self[e1234]) + (other[e1] * self[e4125]),
                (other[e125] * self[e1234]) + (other[e2] * self[e4235]),
                -(other[e2] * self[e31]) - (other[e3] * self[e12]),
            ]) + (Simd32x4::from([other[e315], other[e5], other[e5], self[e1234]]) * self.group4().zyz().extend_to_4(other[e5]))
                + (Simd32x4::from([other[e5], other[e125], other[e235], other[e321]]) * self.group4().xxy().extend_to_4(self[scalar]))
                - (other.group0().zxyx() * self.group4().yzx().extend_to_4(self[e41]))
                - (self.group3().ww().extend_to_4(self[e4315], other[e125]) * other.group1().xyx().extend_to_4(self[e43]))
                - (self.group9().zx().extend_to_4(self[e45], other[e1]) * other.group1().yzz().extend_to_4(self[e23]))
                - (other.group0().www() * self.group9().truncate_to_3()).extend_to_4(other[e315] * self[e42]),
            // e423, e431, e412
            (self.group4().yzx() * other.group1().zxy())
                - (Simd32x3::from(self[e1234]) * other.group1().truncate_to_3())
                - (Simd32x3::from([other[e321], other[e3], other[e1]]) * self.group4().xxy())
                - (Simd32x3::from([other[e2], other[e321], other[e321]]) * self.group4().zyz()),
            // e235, e315, e125
            (Simd32x3::from(other[e321]) * self.group3().truncate_to_3())
                + (Simd32x3::from(other[e5]) * self.group9().truncate_to_3())
                + (Simd32x3::from(self[scalar]) * other.group0().truncate_to_3())
                + (Simd32x3::from([other[e315], other[e5], other[e5]]) * self.group5().zyz())
                + (Simd32x3::from([other[e5], other[e125], other[e235]]) * self.group5().xxy())
                + (Simd32x3::from([self[e35], self[e15], self[e3215]]) * other.group1().yzz())
                + (Simd32x3::from([self[e45], self[e45], self[e4315]]) * other.group0().xyx())
                + (Simd32x3::from([self[e4125], self[e4235], self[e45]]) * other.group0().yzz())
                + (Simd32x3::from([self[e3215], self[e3215], self[e25]]) * other.group1().xyx())
                - (self.group5().yzx() * other.group0().zxy())
                - (other.group0().zxy() * self.group9().yzx())
                - (other.group1().zxy() * self.group3().yzx()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([other[e315], other[e5], other[e5], other[e3]]) * self.group7().zyz().extend_to_4(self[e125]))
                + (Simd32x4::from([other[e5], other[e125], other[e235], other[e2]]) * self.group7().xxy().extend_to_4(self[e315]))
                + (other.group0().xyzx() * self.group1().www().extend_to_4(self[e415]))
                + (other.group0().wwwy() * self.group6().xyzy())
                + (other.group1().xyzx() * self.group0().yy().extend_to_4(self[e12345], self[e235]))
                + (self.group6().zxyz() * other.group1().yzx().extend_to_4(other[e125]))
                + Simd32x3::from(0.0).extend_to_4((other[e5] * self[e321]) - (other[e315] * self[e2]) - (other[e125] * self[e3]) - (other[e321] * self[e5]))
                - (self.group7().yzx() * other.group0().zxy()).extend_to_4(other[e5] * self[e12345])
                - (other.group1().zxy() * self.group6().yzx()).extend_to_4(other[e235] * self[e1]),
            // e1234
            (other[e321] * self[e4]) - (other[e1] * self[e423]) - (other[e2] * self[e431]) - (other[e3] * self[e412]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      188      267        0
    //    simd2       21       22        0
    //    simd3      141      194        0
    //    simd4      125       86        0
    // Totals...
    // yes simd      475      569        0
    //  no simd     1153     1237        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            -(Simd32x2::from(other[e23]) * Simd32x2::from([self[e23], self[e415]]))
                - (Simd32x2::from(other[e31]) * Simd32x2::from([self[e31], self[e425]]))
                - (Simd32x2::from(other[e12]) * Simd32x2::from([self[e12], self[e435]]))
                - (Simd32x2::from(other[e15]) * Simd32x2::from([self[e41], self[e423]]))
                - (Simd32x2::from(other[e25]) * Simd32x2::from([self[e42], self[e431]]))
                - (Simd32x2::from(other[e35]) * Simd32x2::from([self[e43], self[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e23] * self[e321]) + (other[e31] * self[e3]) + (other[e15] * self[e4]) + (other[e25] * self[e412]),
                (other[e31] * self[e321]) + (other[e12] * self[e1]) + (other[e25] * self[e4]) + (other[e35] * self[e423]),
                (other[e23] * self[e2]) + (other[e12] * self[e321]) + (other[e15] * self[e431]) + (other[e35] * self[e4]),
                other[e12] * self[e412] * -1.0,
            ]) - (other.group0().zxy() * self.group1().yzx()).extend_to_4(other[e23] * self[e423])
                - (other.group1().zxy() * self.group7().yzx()).extend_to_4(other[e31] * self[e431]),
            // e5
            (other[e15] * self[e1]) + (other[e25] * self[e2]) + (other[e35] * self[e3])
                - (other[e23] * self[e235])
                - (other[e31] * self[e315])
                - (other[e12] * self[e125])
                - (other[e15] * self[e415])
                - (other[e25] * self[e425])
                - (other[e35] * self[e435]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e15] * self[e45]) + (other[e25] * self[e12]) + (other[e25] * self[e4125]),
                (other[e25] * self[e45]) + (other[e35] * self[e23]) + (other[e35] * self[e4235]),
                (other[e15] * self[e31]) + (other[e15] * self[e4315]) + (other[e35] * self[e45]),
                0.0,
            ]) + (self.group0().xx().extend_to_4(self[scalar], other[e15]) * other.group1().extend_to_4(self[e41]))
                + (self.group3().zx().extend_to_4(self[e3215], self[e43]) * other.group0().yzz().extend_to_4(other[e35]))
                + (self.group9().ww().extend_to_4(self[e25], self[e42]) * other.group0().xyx().extend_to_4(other[e25]))
                - (self.group9().yzxz() * other.group1().zxy().extend_to_4(other[e12]))
                - (other.group0().zxy() * self.group3().yzx()).extend_to_4(other[e23] * self[e4235])
                - (other.group1().zxy() * self.group5().yzx()).extend_to_4(other[e31] * self[e4315]),
            // e41, e42, e43
            (Simd32x3::from([self[e1234], self[e1234], self[e42]]) * other.group0().xyx()) + (other.group0().yzz() * self.group4().zx().extend_to_3(self[e1234]))
                - (other.group0().zxy() * self.group4().yzx()),
            // e23, e31, e12
            (Simd32x3::from(self[scalar]) * other.group0())
                + (Simd32x3::from([self[e1234], self[e1234], self[e42]]) * other.group1().xyx())
                + (other.group0().yzx() * self.group5().zxy())
                + (other.group1().yzz() * self.group4().zx().extend_to_3(self[e1234]))
                - (other.group0().zxy() * self.group5().yzx())
                - (other.group1().zxy() * self.group4().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e23] * self[e12345]) + (other[e31] * self[e435]) + (other[e15] * self[e4]) + (other[e25] * self[e412]),
                (other[e31] * self[e12345]) + (other[e12] * self[e415]) + (other[e25] * self[e4]) + (other[e35] * self[e423]),
                (other[e23] * self[e425]) + (other[e12] * self[e12345]) + (other[e15] * self[e431]) + (other[e35] * self[e4]),
                -(other[e12] * self[e3]) - (other[e15] * self[e423]) - (other[e25] * self[e431]) - (other[e35] * self[e412]),
            ]) - (other.group0().zxy() * self.group6().yzx()).extend_to_4(other[e23] * self[e1])
                - (other.group1().zxy() * self.group7().yzx()).extend_to_4(other[e31] * self[e2]),
            // e423, e431, e412
            (Simd32x3::from([self[e4], self[e4], self[e431]]) * other.group0().xyx()) + (other.group0().yzz() * self.group7().zx().extend_to_3(self[e4]))
                - (other.group0().zxy() * self.group7().yzx()),
            // e235, e315, e125
            (Simd32x3::from(self[e12345]) * other.group1())
                + (Simd32x3::from([self[e2], self[e415], self[e1]]) * other.group1().zzy())
                + (Simd32x3::from([self[e5], self[e5], self[e315]]) * other.group0().xyx())
                + (Simd32x3::from([self[e435], self[e3], self[e425]]) * other.group1().yxx())
                + (other.group0().yzz() * self.group8().zx().extend_to_3(self[e5]))
                - (Simd32x3::from(other[e15]) * Simd32x3::from([self[e321], self[e435], self[e2]]))
                - (Simd32x3::from(other[e25]) * Simd32x3::from([self[e3], self[e321], self[e415]]))
                - (Simd32x3::from(other[e35]) * Simd32x3::from([self[e425], self[e1], self[e321]]))
                - (other.group0().zxy() * self.group8().yzx()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e23] * self[e45]) + (other[e31] * self[e4125]) + (other[e35] * self[e42]),
                (other[e31] * self[e45]) + (other[e12] * self[e4235]) + (other[e15] * self[e43]),
                (other[e23] * self[e4315]) + (other[e12] * self[e45]) + (other[e25] * self[e41]),
                -(other[e15] * self[e23])
                    - (other[e15] * self[e4235])
                    - (other[e25] * self[e31])
                    - (other[e25] * self[e4315])
                    - (other[e35] * self[e12])
                    - (other[e35] * self[e4125]),
            ]) - (Simd32x4::from([self[e1234], self[e1234], self[e42], self[e25]]) * other.group1().xyx().extend_to_4(other[e31]))
                - (self.group4().zx().extend_to_4(self[e1234], self[e35]) * other.group1().yzz().extend_to_4(other[e12]))
                - (other.group0().zxy() * self.group9().yzx()).extend_to_4(other[e23] * self[e15]),
            // e1234
            -(other[e23] * self[e41]) - (other[e31] * self[e42]) - (other[e12] * self[e43]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      194      275        0
    //    simd2       23       24        0
    //    simd3      148      201        0
    //    simd4      133       94        0
    // Totals...
    // yes simd      498      594        0
    //  no simd     1216     1302        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from(other[scalar]) * self.group0()) + (Simd32x2::from(other[e3215]) * Simd32x2::from([self[e1234], self[e4]]))
                - (Simd32x2::from(other[e23]) * Simd32x2::from([self[e23], self[e415]]))
                - (Simd32x2::from(other[e31]) * Simd32x2::from([self[e31], self[e425]]))
                - (Simd32x2::from(other[e12]) * Simd32x2::from([self[e12], self[e435]]))
                - (Simd32x2::from(other[e15]) * Simd32x2::from([self[e41], self[e423]]))
                - (Simd32x2::from(other[e25]) * Simd32x2::from([self[e42], self[e431]]))
                - (Simd32x2::from(other[e35]) * Simd32x2::from([self[e43], self[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e23] * self[e321]) + (other[e31] * self[e3]) + (other[scalar] * self[e1]) + (other[e15] * self[e4]) + (other[e25] * self[e412]),
                (other[e31] * self[e321]) + (other[e12] * self[e1]) + (other[scalar] * self[e2]) + (other[e25] * self[e4]) + (other[e3215] * self[e431]),
                (other[e23] * self[e2]) + (other[e12] * self[e321]) + (other[scalar] * self[e3]) + (other[e35] * self[e4]) + (other[e3215] * self[e412]),
                other[e12] * self[e412] * -1.0,
            ]) + (self.group7().xxy() * other.group1().wzx()).extend_to_4(other[scalar] * self[e4])
                - (self.group7().yzx() * other.group1().zxy()).extend_to_4(other[e23] * self[e423])
                - (other.group0().zxy() * self.group1().yzx()).extend_to_4(other[e31] * self[e431]),
            // e5
            (other[scalar] * self[e5]) + (other[e15] * self[e1]) + (other[e25] * self[e2]) + (other[e35] * self[e3]) + (other[e3215] * self[e12345])
                - (other[e23] * self[e235])
                - (other[e31] * self[e315])
                - (other[e12] * self[e125])
                - (other[e15] * self[e415])
                - (other[e25] * self[e425])
                - (other[e35] * self[e435])
                - (other[e3215] * self[e321]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e31] * self[e35]) + (other[scalar] * self[e15]) + (other[e15] * self[e45]) + (other[e25] * self[e4125]) + (other[e3215] * self[e4235]),
                (other[e12] * self[e15]) + (other[scalar] * self[e25]) + (other[e25] * self[e45]) + (other[e35] * self[e4235]) + (other[e3215] * self[e4315]),
                (other[e12] * self[e3215]) + (other[scalar] * self[e35]) + (other[e15] * self[e4315]) + (other[e35] * self[e45]) + (other[e3215] * self[e4125]),
                other[e3215] * self[e1234] * -1.0,
            ]) + (other.group0().xyxw() * self.group9().ww().extend_to_4(self[e25], self[e45]))
                + (other.group1().xyzx() * self.group0().xx().extend_to_4(self[scalar], self[e41]))
                + (other.group1().ywwz() * self.group5().zyz().extend_to_4(self[e43]))
                + (other.group1().wzxy() * self.group5().xxy().extend_to_4(self[e42]))
                - (other.group0().zxyy() * self.group3().yzx().extend_to_4(self[e4315]))
                - (self.group9().yzxz() * other.group1().zxy().extend_to_4(other[e12]))
                - (self.group5().yzx() * other.group1().zxy()).extend_to_4(other[e23] * self[e4235]),
            // e41, e42, e43
            (Simd32x3::from(self[e1234]) * other.group0().truncate_to_3()) + (self.group4().xxy() * other.group0().wzx()) + (self.group4().zyz() * other.group0().yww())
                - (self.group4().yzx() * other.group0().zxy()),
            // e23, e31, e12
            (Simd32x3::from(self[scalar]) * other.group0().truncate_to_3())
                + (Simd32x3::from(self[e1234]) * other.group1().truncate_to_3())
                + (self.group4().xxy() * other.group1().wzx())
                + (self.group4().zyz() * other.group1().yww())
                + (self.group5().xxy() * other.group0().wzx())
                + (self.group5().zyz() * other.group0().yww())
                - (self.group4().yzx() * other.group1().zxy())
                - (self.group5().yzx() * other.group0().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e31] * self[e435]) + (other[scalar] * self[e415]) + (other[e15] * self[e4]) + (other[e25] * self[e412]),
                (other[e12] * self[e415]) + (other[scalar] * self[e425]) + (other[e25] * self[e4]) + (other[e3215] * self[e431]),
                (other[e23] * self[e425]) + (other[scalar] * self[e435]) + (other[e35] * self[e4]) + (other[e3215] * self[e412]),
                -(other[e23] * self[e1]) - (other[e31] * self[e2]) - (other[e12] * self[e3]) - (other[e35] * self[e412]),
            ]) + (self.group0().yy().extend_to_4(self[e12345], other[scalar]) * other.group0().truncate_to_3().extend_to_4(self[e321]))
                + (self.group7().xxy() * other.group1().wzx()).extend_to_4(other[e3215] * self[e4])
                - (other.group1().zxyx() * self.group7().yzx().extend_to_4(self[e423]))
                - (other.group0().zxy() * self.group6().yzx()).extend_to_4(other[e25] * self[e431]),
            // e423, e431, e412
            (Simd32x3::from(self[e4]) * other.group0().truncate_to_3()) + (self.group7().xxy() * other.group0().wzx()) + (self.group7().zyz() * other.group0().yww())
                - (self.group7().yzx() * other.group0().zxy()),
            // e235, e315, e125
            (Simd32x3::from(other[e3215]) * self.group6().truncate_to_3())
                + (Simd32x3::from(self[e12345]) * other.group1().truncate_to_3())
                + (Simd32x3::from(self[e5]) * other.group0().truncate_to_3())
                + (Simd32x3::from([self[e2], self[e415], self[e1]]) * other.group1().zzy())
                + (Simd32x3::from([self[e435], self[e3], self[e425]]) * other.group1().yxx())
                + (self.group8().xxy() * other.group0().wzx())
                + (self.group8().zyz() * other.group0().yww())
                - (Simd32x3::from(other[e15]) * Simd32x3::from([self[e321], self[e435], self[e2]]))
                - (Simd32x3::from(other[e25]) * Simd32x3::from([self[e3], self[e321], self[e415]]))
                - (Simd32x3::from(other[e35]) * Simd32x3::from([self[e425], self[e1], self[e321]]))
                - (Simd32x3::from(other[e3215]) * self.group1().truncate_to_3())
                - (self.group8().yzx() * other.group0().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[scalar] * self[e4235],
                other[scalar] * self[e4315],
                other[scalar] * self[e4125],
                -(other[e31] * self[e25]) - (other[e12] * self[e35]) - (other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]),
            ]) + (other.group0().xyxw() * self.group3().ww().extend_to_4(self[e4315], self[e3215]))
                + (other.group1().zxyw() * self.group4().yzx().extend_to_4(self[scalar]))
                + (self.group9().zx().extend_to_4(self[e45], self[e45]) * other.group0().yzz().extend_to_4(other[e3215]))
                - (Simd32x4::from([self[e1234], self[e1234], self[e1234], self[e15]]) * other.group1().truncate_to_3().extend_to_4(other[e23]))
                - (other.group1().ywwy() * self.group4().zyz().extend_to_4(self[e31]))
                - (other.group1().wzxx() * self.group4().xxy().extend_to_4(self[e23]))
                - (other.group0().zxy() * self.group9().yzx()).extend_to_4(other[e35] * self[e12]),
            // e1234
            (other[scalar] * self[e1234]) - (other[e23] * self[e41]) - (other[e31] * self[e42]) - (other[e12] * self[e43]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      146      225        0
    //    simd2       19       19        0
    //    simd3      135      186        0
    //    simd4      126       89        0
    // Totals...
    // yes simd      426      519        0
    //  no simd     1093     1177        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([other[e5] * self[e4] * -1.0, other[e5] * self[e1234]])
                + (Simd32x2::from(other[e1]) * Simd32x2::from([self[e1], self[e4235]]))
                + (Simd32x2::from(other[e2]) * Simd32x2::from([self[e2], self[e4315]]))
                + (Simd32x2::from(other[e3]) * Simd32x2::from([self[e3], self[e4125]])),
            // e1, e2, e3, e4
            Simd32x4::from([other[e3] * self[e31] * -1.0, other[e1] * self[e12] * -1.0, other[e2] * self[e23] * -1.0, 0.0])
                + (other.group0().xyzx() * self.group0().xx().extend_to_4(self[scalar], self[e41]))
                + (other.group0().yzxz() * self.group5().zxy().extend_to_4(self[e43]))
                + (other.group0().wwwy() * self.group4().extend_to_4(self[e42])),
            // e5
            (other[e5] * self[scalar]) + (other[e5] * self[e45]) - (other[e1] * self[e15]) - (other[e2] * self[e25]) - (other[e3] * self[e35]),
            // e15, e25, e35, e45
            Simd32x4::from([other[e5] * self[e1], other[e5] * self[e2], other[e5] * self[e3], 0.0])
                + (self.group8().yzx() * other.group0().zxy()).extend_to_4(other[e5] * self[e4])
                - (Simd32x4::from([self[e5], self[e5], self[e5], self[e425]]) * other.group0().xyzy())
                - (other.group0().wwwz() * self.group6().xyzz())
                - (self.group8().zxy() * other.group0().yzx()).extend_to_4(other[e1] * self[e415]),
            // e41, e42, e43
            (Simd32x3::from(self[e4]) * other.group0().truncate_to_3()) + (self.group7().zxy() * other.group0().yzx()) - (self.group7().yzx() * other.group0().zxy()),
            // e23, e31, e12
            (other.group0().zxy() * self.group1().yzx())
                - (Simd32x3::from(other[e5]) * self.group7())
                - (Simd32x3::from([self[e3], self[e1], self[e321]]) * other.group0().yzz())
                - (Simd32x3::from([self[e321], self[e321], self[e2]]) * other.group0().xyx()),
            // e415, e425, e435, e321
            Simd32x4::from([other[e3] * self[e4315], other[e1] * self[e4125], other[e2] * self[e4235], other[e3] * self[e12] * -1.0])
                + (self.group4() * other.group0().www()).extend_to_4(other[e5] * self[e1234])
                - (self.group3().ww().extend_to_4(self[e4315], other[e1]) * other.group0().xyx().extend_to_4(self[e23]))
                - (self.group9().zx().extend_to_4(self[e45], other[e2]) * other.group0().yzz().extend_to_4(self[e31])),
            // e423, e431, e412
            (self.group4().yzx() * other.group0().zxy()) - (Simd32x3::from(self[e1234]) * other.group0().truncate_to_3()) - (self.group4().zxy() * other.group0().yzx()),
            // e235, e315, e125
            (Simd32x3::from(other[e5]) * self.group5())
                + (Simd32x3::from(other[e5]) * self.group9().truncate_to_3())
                + (Simd32x3::from([self[e35], self[e15], self[e3215]]) * other.group0().yzz())
                + (Simd32x3::from([self[e3215], self[e3215], self[e25]]) * other.group0().xyx())
                - (other.group0().zxy() * self.group3().yzx()),
            // e4235, e4315, e4125, e3215
            (other.group0().xyzx() * self.group0().yy().extend_to_4(self[e12345], self[e235]))
                + (other.group0().wwwy() * self.group7().extend_to_4(self[e315]))
                + Simd32x3::from(0.0).extend_to_4(other[e5] * self[e321])
                + (other.group0().yzx() * self.group6().zxy()).extend_to_4(other[e3] * self[e125])
                - (other.group0().zxy() * self.group6().yzx()).extend_to_4(other[e5] * self[e12345]),
            // e1234
            -(other[e1] * self[e423]) - (other[e2] * self[e431]) - (other[e3] * self[e412]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      140      197        0
    //    simd2       16       18        0
    //    simd3      124      172        0
    //    simd4      112       88        0
    // Totals...
    // yes simd      392      475        0
    //  no simd      992     1101        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(other[e12345]) * self.group0().yx() * Simd32x2::from([-1.0, 1.0]),
            // e1, e2, e3, e4
            Simd32x4::from([other[e12345], other[e12345], other[e12345], self[e1234]])
                * self.group9().truncate_to_3().extend_to_4(other[e12345])
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e5
            other[e12345] * self[e3215],
            // e15, e25, e35, e45
            Simd32x4::from(other[e12345]) * self.group8().extend_to_4(self[e321]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e41, e42, e43
            Simd32x3::from(other[e12345]) * self.group7() * Simd32x3::from(-1.0),
            // e23, e31, e12
            Simd32x3::from(other[e12345]) * self.group6().truncate_to_3() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            Simd32x4::from(other[e12345]) * self.group5().extend_to_4(self[e45]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e423, e431, e412
            Simd32x3::from(other[e12345]) * self.group4(),
            // e235, e315, e125
            Simd32x3::from(other[e12345]) * self.group3().truncate_to_3(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([other[e12345], other[e12345], other[e12345], self[e5]])
                * self.group1().truncate_to_3().extend_to_4(other[e12345])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1234
            other[e12345] * self[e4] * -1.0,
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      178      259        0
    //    simd2       17       17        0
    //    simd3      160      218        0
    //    simd4      147      105        0
    // Totals...
    // yes simd      502      599        0
    //  no simd     1280     1367        0
    fn sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (other[e423] * self[e235])
                    + (other[e431] * self[e315])
                    + (other[e412] * self[e125])
                    + (other[e415] * self[e415])
                    + (other[e425] * self[e425])
                    + (other[e435] * self[e435])
                    + (other[e235] * self[e423])
                    + (other[e315] * self[e431])
                    + (other[e125] * self[e412]),
                -(other[e423] * self[e15])
                    - (other[e431] * self[e25])
                    - (other[e412] * self[e35])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12])
                    - (other[e321] * self[e45])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]) - (Simd32x2::from([self[e321], self[e23]]) * other.group1().wx()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e435] * self[e4315]) + (other[e321] * self[e23]),
                (other[e415] * self[e4125]) + (other[e321] * self[e31]),
                (other[e425] * self[e4235]) + (other[e321] * self[e12]),
                -(other[e435] * self[e43]) - (other[e321] * self[e1234]),
            ]) + (Simd32x4::from([self[e1234], self[e1234], self[e42], self[e4315]]) * other.group2().xyx().extend_to_4(other[e431]))
                + (self.group4().zx().extend_to_4(self[e1234], self[e4125]) * other.group2().yzz().extend_to_4(other[e412]))
                + (other.group0().zxy() * self.group3().yzx()).extend_to_4(other[e423] * self[e4235])
                - (self.group3().zx().extend_to_4(self[e3215], self[e31]) * other.group0().yzz().extend_to_4(other[e431]))
                - (self.group3().ww().extend_to_4(self[e4315], other[e415]) * other.group1().xyx().extend_to_4(self[e41]))
                - (self.group9().zx().extend_to_4(self[e45], other[e425]) * other.group1().yzz().extend_to_4(self[e42]))
                - (self.group9().ww().extend_to_4(self[e25], self[e23]) * other.group0().xyx().extend_to_4(other[e423]))
                - (other.group2().zxy() * self.group4().yzx()).extend_to_4(other[e412] * self[e12]),
            // e5
            (other[e321] * self[e3215])
                - (other[e415] * self[e15])
                - (other[e425] * self[e25])
                - (other[e435] * self[e35])
                - (other[e235] * self[e23])
                - (other[e235] * self[e4235])
                - (other[e315] * self[e31])
                - (other[e315] * self[e4315])
                - (other[e125] * self[e12])
                - (other[e125] * self[e4125]),
            // e15, e25, e35, e45
            (Simd32x4::from([self[e3], self[e321], self[e415], self[e235]]) * other.group2().yyy().extend_to_4(other[e423]))
                + (Simd32x4::from([self[e425], self[e1], self[e321], self[e315]]) * other.group2().zzz().extend_to_4(other[e431]))
                + (self.group6().wz().extend_to_4(self[e2], other[e321]) * other.group2().xxx().extend_to_4(self[e12345]))
                + (self.group8().yzx() * other.group1().zxy()).extend_to_4(other[e412] * self[e125])
                - (Simd32x4::from([self[e2], self[e415], self[e1], self[e412]]) * other.group2().zzy().extend_to_4(other[e125]))
                - (Simd32x4::from([self[e5], self[e5], self[e5], self[e3]]) * other.group1().xyzz())
                - (Simd32x4::from([self[e435], self[e3], self[e425], self[e431]]) * other.group2().yxx().extend_to_4(other[e315]))
                - (self.group0().yy().extend_to_4(self[e12345], other[e235]) * other.group2().extend_to_4(self[e423]))
                - (self.group8().xxy() * other.group1().wzx()).extend_to_4(other[e415] * self[e1])
                - (self.group8().zyz() * other.group1().yww()).extend_to_4(other[e425] * self[e2]),
            // e41, e42, e43
            (other.group0().zxy() * self.group1().yzx())
                + (other.group0().zxy() * self.group6().yzx())
                + (self.group7().xyx() * other.group1().wwy())
                + (self.group7().yzz() * other.group1().zxw())
                - (Simd32x3::from(self[e12345]) * other.group0())
                - (Simd32x3::from(self[e4]) * other.group1().truncate_to_3())
                - (Simd32x3::from([self[e3], self[e1], self[e425]]) * other.group0().yzx())
                - (Simd32x3::from([self[e321], self[e321], self[e2]]) * other.group0().xyx())
                - (other.group0().yzz() * self.group6().zxw())
                - (self.group7().zxy() * other.group1().yzx()),
            // e23, e31, e12
            (other.group0().zxy() * self.group8().yzx()) + (other.group2().zxy() * self.group7().yzx()) + (other.group1().zxy() * self.group6().yzx())
                - (Simd32x3::from(other[e321]) * self.group1().truncate_to_3())
                - (Simd32x3::from(self[e12345]) * other.group1().truncate_to_3())
                - (Simd32x3::from([self[e4], self[e4], self[e431]]) * other.group2().xyx())
                - (Simd32x3::from([self[e5], self[e5], self[e315]]) * other.group0().xyx())
                - (other.group0().yzz() * self.group8().zx().extend_to_3(self[e5]))
                - (other.group2().yzz() * self.group7().zx().extend_to_3(self[e4]))
                - (other.group1().yzx() * self.group6().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                other[e321] * self[e4235] * -1.0,
                other[e321] * self[e4315] * -1.0,
                other[e321] * self[e4125] * -1.0,
                other[e435] * self[e4125],
            ]) + (Simd32x4::from(self[scalar]) * other.group1())
                + (Simd32x4::from([self[e1234], self[e1234], self[e42], self[e35]]) * other.group2().xyx().extend_to_4(other[e412]))
                + (self.group4().zx().extend_to_4(self[e1234], self[e4235]) * other.group2().yzz().extend_to_4(other[e415]))
                + (self.group3().zx().extend_to_4(self[e3215], self[e25]) * other.group0().yzz().extend_to_4(other[e431]))
                + (self.group9().ww().extend_to_4(self[e25], self[e15]) * other.group0().xyx().extend_to_4(other[e423]))
                + (self.group5().zxy() * other.group1().yzx()).extend_to_4(other[e425] * self[e4315])
                - (other.group0().zxy() * self.group3().yzx()).extend_to_4(other[e235] * self[e41])
                - (other.group2().zxy() * self.group4().yzx()).extend_to_4(other[e315] * self[e42])
                - (self.group5().yzx() * other.group1().zxy()).extend_to_4(other[e125] * self[e43]),
            // e423, e431, e412
            (Simd32x3::from(self[scalar]) * other.group0())
                + (Simd32x3::from(self[e1234]) * other.group1().truncate_to_3())
                + (Simd32x3::from([self[e12], self[e4125], self[e31]]) * other.group0().yxx())
                + (Simd32x3::from([self[e4315], self[e23], self[e4235]]) * other.group0().zzy())
                + (self.group4().zxy() * other.group1().yzx())
                - (Simd32x3::from(other[e423]) * Simd32x3::from([self[e45], self[e12], self[e4315]]))
                - (Simd32x3::from(other[e431]) * Simd32x3::from([self[e4125], self[e45], self[e23]]))
                - (Simd32x3::from(other[e412]) * Simd32x3::from([self[e31], self[e4235], self[e45]]))
                - (self.group4().xyx() * other.group1().wwy())
                - (self.group4().yzz() * other.group1().zxw()),
            // e235, e315, e125
            (Simd32x3::from(other[e321]) * self.group3().truncate_to_3())
                + (Simd32x3::from(self[scalar]) * other.group2())
                + (Simd32x3::from([self[e35], self[e15], self[e3215]]) * other.group1().yzz())
                + (Simd32x3::from([self[e45], self[e45], self[e31]]) * other.group2().xyx())
                + (Simd32x3::from([self[e4125], self[e4235], self[e45]]) * other.group2().yzz())
                + (Simd32x3::from([self[e3215], self[e3215], self[e25]]) * other.group1().xyx())
                + (other.group2().yzx() * self.group5().zx().extend_to_3(self[e4315]))
                - (other.group2().zxy() * self.group5().yzx())
                - (other.group2().zxy() * self.group9().yzx())
                - (other.group1().zxy() * self.group3().yzx()),
            // e4235, e4315, e4125, e3215
            (self.group7().zx().extend_to_4(self[e4], self[e435]) * other.group2().yzz().extend_to_4(other[e125]))
                + (self.group1().zx().extend_to_4(self[e321], other[e425]) * other.group1().yzz().extend_to_4(self[e315]))
                + (self.group1().ww().extend_to_4(self[e431], self[e425]) * other.group2().xyx().extend_to_4(other[e315]))
                + (self.group6().ww().extend_to_4(self[e2], other[e415]) * other.group1().xyx().extend_to_4(self[e235]))
                + (other.group0().zxy() * self.group8().yzx()).extend_to_4(other[e235] * self[e415])
                + (other.group1().www() * self.group6().truncate_to_3()).extend_to_4(other[e435] * self[e125])
                - (Simd32x4::from([self[e5], self[e5], self[e315], self[e1]]) * other.group0().xyx().extend_to_4(other[e235]))
                - (other.group1().zxyw() * self.group1().yzx().extend_to_4(self[e5]))
                - (self.group8().zx().extend_to_4(self[e5], self[e2]) * other.group0().yzz().extend_to_4(other[e315]))
                - (other.group2().zxy() * self.group7().yzx()).extend_to_4(other[e125] * self[e3]),
            // e1234
            (other[e423] * self[e1])
                + (other[e423] * self[e415])
                + (other[e431] * self[e2])
                + (other[e431] * self[e425])
                + (other[e412] * self[e3])
                + (other[e412] * self[e435])
                + (other[e415] * self[e423])
                + (other[e425] * self[e431])
                + (other[e435] * self[e412])
                + (other[e321] * self[e4]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      174      263        0
    //    simd2       19       19        0
    //    simd3      164      224        0
    //    simd4      152      107        0
    // Totals...
    // yes simd      509      613        0
    //  no simd     1312     1401        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (other[e423] * self[e235])
                    + (other[e431] * self[e315])
                    + (other[e412] * self[e125])
                    + (other[e415] * self[e415])
                    + (other[e425] * self[e425])
                    + (other[e435] * self[e435])
                    + (other[e315] * self[e431])
                    + (other[e125] * self[e412]),
                -(other[e423] * self[e15])
                    - (other[e431] * self[e25])
                    - (other[e412] * self[e35])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12])
                    - (other[e321] * self[e45])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]) + (Simd32x2::from([self[e423], self[scalar]]) * other.group2().xw())
                - (Simd32x2::from([self[e12345], self[e41]]) * other.group2().wx())
                - (Simd32x2::from([self[e321], self[e23]]) * other.group1().wx()),
            // e1, e2, e3, e4
            Simd32x4::from([other[e235] * self[e1234], other[e315] * self[e1234], other[e125] * self[e1234], other[e321] * self[e1234] * -1.0])
                + (self.group5() * other.group1().www()).extend_to_4(other[e412] * self[e4125])
                + (other.group0().zxy() * self.group3().yzx()).extend_to_4(other[e423] * self[e4235])
                + (self.group4().zxy() * other.group2().yzx()).extend_to_4(other[e431] * self[e4315])
                + (other.group1().zxy() * self.group9().yzx()).extend_to_4(other[e12345] * self[e1234])
                - (self.group3().zx().extend_to_4(self[e3215], self[e31]) * other.group0().yzz().extend_to_4(other[e431]))
                - (self.group3().ww().extend_to_4(self[e4315], other[e415]) * other.group1().xyx().extend_to_4(self[e41]))
                - (self.group9().zx().extend_to_4(self[e45], other[e425]) * other.group1().yzz().extend_to_4(self[e42]))
                - (self.group9().ww().extend_to_4(self[e25], self[e23]) * other.group0().xyx().extend_to_4(other[e423]))
                - (self.group4().yzx() * other.group2().zxy()).extend_to_4(other[e412] * self[e12])
                - (other.group2().www() * self.group9().truncate_to_3()).extend_to_4(other[e435] * self[e43]),
            // e5
            (other[e321] * self[e3215]) + (other[e12345] * self[e3215])
                - (other[e415] * self[e15])
                - (other[e425] * self[e25])
                - (other[e435] * self[e35])
                - (other[e235] * self[e23])
                - (other[e235] * self[e4235])
                - (other[e315] * self[e31])
                - (other[e315] * self[e4315])
                - (other[e125] * self[e12])
                - (other[e125] * self[e4125]),
            // e15, e25, e35, e45
            Simd32x4::from([
                other[e125] * self[e2] * -1.0,
                other[e125] * self[e415] * -1.0,
                other[e315] * self[e1] * -1.0,
                other[e12345] * self[e321],
            ]) + (Simd32x4::from([self[e3], self[e321], self[e415], self[e315]]) * other.group2().yyy().extend_to_4(other[e431]))
                + (Simd32x4::from([self[e425], self[e1], self[e321], self[e125]]) * other.group2().zzz().extend_to_4(other[e412]))
                + (other.group1().zxyw() * self.group8().yzx().extend_to_4(self[e12345]))
                + (self.group6().wz().extend_to_4(self[e2], self[e235]) * other.group2().xxx().extend_to_4(other[e423]))
                - (Simd32x4::from([other[e425], other[e12345], other[e12345], self[e1]]) * self.group8().zyz().extend_to_4(other[e415]))
                - (Simd32x4::from([other[e12345], other[e321], other[e321], other[e125]]) * self.group8().extend_to_4(self[e412]))
                - (Simd32x4::from([self[e5], self[e5], self[e5], self[e2]]) * other.group1().xyzy())
                - (Simd32x4::from([self[e435], self[e3], self[e425], self[e3]]) * other.group2().yxx().extend_to_4(other[e435]))
                - (other.group2().xyzx() * self.group0().yy().extend_to_4(self[e12345], self[e423]))
                - (self.group8().xxy() * other.group1().wzx()).extend_to_4(other[e315] * self[e431]),
            // e41, e42, e43
            (other.group0().zxy() * self.group1().yzx())
                + (other.group0().zxy() * self.group6().yzx())
                + (self.group7().xyx() * other.group1().wwy())
                + (self.group7().yzz() * other.group1().zxw())
                - (Simd32x3::from(self[e12345]) * other.group0())
                - (Simd32x3::from(self[e4]) * other.group1().truncate_to_3())
                - (Simd32x3::from([other[e425], other[e12345], other[e12345]]) * self.group7().zyz())
                - (Simd32x3::from([other[e12345], other[e435], other[e415]]) * self.group7().xxy())
                - (Simd32x3::from([self[e3], self[e1], self[e425]]) * other.group0().yzx())
                - (Simd32x3::from([self[e321], self[e321], self[e2]]) * other.group0().xyx())
                - (other.group0().yzz() * self.group6().zxw()),
            // e23, e31, e12
            (other.group0().zxy() * self.group8().yzx()) + (self.group7().yzx() * other.group2().zxy()) + (other.group1().zxy() * self.group6().yzx())
                - (Simd32x3::from(other[e321]) * self.group1().truncate_to_3())
                - (Simd32x3::from(other[e12345]) * self.group6().truncate_to_3())
                - (Simd32x3::from(self[e12345]) * other.group1().truncate_to_3())
                - (Simd32x3::from(self[e4]) * other.group2().truncate_to_3())
                - (Simd32x3::from([self[e5], self[e5], self[e315]]) * other.group0().xyx())
                - (other.group0().yzz() * self.group8().zx().extend_to_3(self[e5]))
                - (self.group7().zxy() * other.group2().yzx())
                - (other.group1().yzx() * self.group6().zxy()),
            // e415, e425, e435, e321
            (Simd32x4::from(self[scalar]) * other.group1())
                + (Simd32x4::from([other[e425], other[e12345], other[e12345], self[e4315]]) * self.group5().zyz().extend_to_4(other[e425]))
                + (Simd32x4::from([other[e12345], other[e435], other[e415], self[e4235]]) * self.group5().xxy().extend_to_4(other[e415]))
                + (Simd32x4::from([self[e1234], self[e1234], self[e1234], self[e4125]]) * other.group2().truncate_to_3().extend_to_4(other[e435]))
                + (self.group3().zx().extend_to_4(self[e3215], self[e25]) * other.group0().yzz().extend_to_4(other[e431]))
                + (self.group9().ww().extend_to_4(self[e25], self[e15]) * other.group0().xyx().extend_to_4(other[e423]))
                + (self.group4().zxy() * other.group2().yzx()).extend_to_4(other[e412] * self[e35])
                - (other.group2().zxyy() * self.group4().yzx().extend_to_4(self[e42]))
                - (other.group0().zxy() * self.group3().yzx()).extend_to_4(other[e235] * self[e41])
                - (self.group5().yzx() * other.group1().zxy()).extend_to_4(other[e125] * self[e43])
                - (other.group1().www() * self.group9().truncate_to_3()).extend_to_4(other[e12345] * self[e45]),
            // e423, e431, e412
            (Simd32x3::from(self[scalar]) * other.group0())
                + (Simd32x3::from(self[e1234]) * other.group1().truncate_to_3())
                + (Simd32x3::from([other[e425], other[e12345], other[e12345]]) * self.group4().zyz())
                + (Simd32x3::from([other[e12345], other[e435], other[e415]]) * self.group4().xxy())
                + (Simd32x3::from([self[e12], self[e4125], self[e31]]) * other.group0().yxx())
                + (Simd32x3::from([self[e4315], self[e23], self[e4235]]) * other.group0().zzy())
                - (Simd32x3::from(other[e423]) * Simd32x3::from([self[e45], self[e12], self[e4315]]))
                - (Simd32x3::from(other[e431]) * Simd32x3::from([self[e4125], self[e45], self[e23]]))
                - (Simd32x3::from(other[e412]) * Simd32x3::from([self[e31], self[e4235], self[e45]]))
                - (self.group4().xyx() * other.group1().wwy())
                - (self.group4().yzz() * other.group1().zxw()),
            // e235, e315, e125
            (Simd32x3::from(other[e321]) * self.group3().truncate_to_3())
                + (Simd32x3::from(other[e12345]) * self.group3().truncate_to_3())
                + (Simd32x3::from(self[scalar]) * other.group2().truncate_to_3())
                + (Simd32x3::from([self[e35], self[e15], self[e3215]]) * other.group1().yzz())
                + (Simd32x3::from([self[e45], self[e45], self[e4315]]) * other.group2().xyx())
                + (Simd32x3::from([self[e4125], self[e4235], self[e45]]) * other.group2().yzz())
                + (Simd32x3::from([self[e3215], self[e3215], self[e25]]) * other.group1().xyx())
                + (self.group5().zxy() * other.group2().yzx())
                - (self.group5().yzx() * other.group2().zxy())
                - (other.group1().zxy() * self.group3().yzx())
                - (other.group2().zxy() * self.group9().yzx()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([other[e12345] * self[e1], other[e12345] * self[e2], other[e12345] * self[e3], other[e12345] * self[e5] * -1.0])
                + (other.group2().xyzz() * self.group1().www().extend_to_4(self[e435]))
                + (self.group6().xyzy() * other.group1().www().extend_to_4(other[e315]))
                + (self.group1().zx().extend_to_4(self[e321], self[e415]) * other.group1().yzz().extend_to_4(other[e235]))
                + (self.group6().ww().extend_to_4(self[e2], other[e435]) * other.group1().xyx().extend_to_4(self[e125]))
                + (other.group0().zxy() * self.group8().yzx()).extend_to_4(other[e415] * self[e235])
                + (self.group7().zxy() * other.group2().yzx()).extend_to_4(other[e425] * self[e315])
                - (Simd32x4::from([self[e5], self[e5], self[e315], self[e5]]) * other.group0().xyx().extend_to_4(other[e321]))
                - (self.group1().yzxz() * other.group1().zxy().extend_to_4(other[e125]))
                - (self.group8().zx().extend_to_4(self[e5], self[e1]) * other.group0().yzz().extend_to_4(other[e235]))
                - (self.group7().yzx() * other.group2().zxy()).extend_to_4(other[e315] * self[e2]),
            // e1234
            (other[e423] * self[e1])
                + (other[e423] * self[e415])
                + (other[e431] * self[e2])
                + (other[e431] * self[e425])
                + (other[e412] * self[e3])
                + (other[e412] * self[e435])
                + (other[e415] * self[e423])
                + (other[e425] * self[e431])
                + (other[e435] * self[e412])
                + (other[e321] * self[e4])
                - (other[e12345] * self[e4]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      202      288        0
    //    simd2       25       25        0
    //    simd3      160      217        0
    //    simd4      137       94        0
    // Totals...
    // yes simd      524      624        0
    //  no simd     1280     1365        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([other[e45] * self[e45], other[e45] * self[e321] * -1.0])
                - (Simd32x2::from(other[e41]) * Simd32x2::from([self[e15], self[e235]]))
                - (Simd32x2::from(other[e42]) * Simd32x2::from([self[e25], self[e315]]))
                - (Simd32x2::from(other[e43]) * Simd32x2::from([self[e35], self[e125]]))
                - (Simd32x2::from(other[e23]) * Simd32x2::from([self[e23], self[e415]]))
                - (Simd32x2::from(other[e31]) * Simd32x2::from([self[e31], self[e425]]))
                - (Simd32x2::from(other[e12]) * Simd32x2::from([self[e12], self[e435]]))
                - (Simd32x2::from(other[e15]) * Simd32x2::from([self[e41], self[e423]]))
                - (Simd32x2::from(other[e25]) * Simd32x2::from([self[e42], self[e431]]))
                - (Simd32x2::from(other[e35]) * Simd32x2::from([self[e43], self[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e23] * self[e321]) + (other[e31] * self[e3]) + (other[e15] * self[e4]) + (other[e25] * self[e412]),
                (other[e31] * self[e321]) + (other[e12] * self[e1]) + (other[e25] * self[e4]) + (other[e35] * self[e423]),
                (other[e23] * self[e2]) + (other[e12] * self[e321]) + (other[e15] * self[e431]) + (other[e35] * self[e4]),
                -(other[e43] * self[e435]) - (other[e23] * self[e423]) - (other[e31] * self[e431]) - (other[e12] * self[e412]),
            ]) + (other.group0().zxy() * self.group8().yzx()).extend_to_4(other[e45] * self[e4])
                - (Simd32x4::from([self[e5], self[e5], self[e315], self[e1]]) * other.group0().xyx().extend_to_4(other[e41]))
                - (self.group8().zx().extend_to_4(self[e5], self[e415]) * other.group0().yzz().extend_to_4(other[e41]))
                - (other.group2().zxy() * self.group7().yzx()).extend_to_4(other[e42] * self[e2])
                - (other.group1().zxy() * self.group1().yzx()).extend_to_4(other[e42] * self[e425])
                - (other.group1().www() * self.group6().truncate_to_3()).extend_to_4(other[e43] * self[e3]),
            // e5
            (other[e15] * self[e1]) + (other[e25] * self[e2]) + (other[e35] * self[e3])
                - (other[e23] * self[e235])
                - (other[e31] * self[e315])
                - (other[e12] * self[e125])
                - (other[e45] * self[e5])
                - (other[e15] * self[e415])
                - (other[e25] * self[e425])
                - (other[e35] * self[e435]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e23] * self[e3215]) + (other[e31] * self[e35]),
                (other[e31] * self[e3215]) + (other[e12] * self[e15]),
                (other[e23] * self[e25]) + (other[e12] * self[e3215]),
                -(other[e31] * self[e4315]) - (other[e12] * self[e4125]),
            ]) + (Simd32x4::from(self[scalar]) * other.group2().extend_to_4(other[e45]))
                + (self.group5().zx().extend_to_4(self[e4315], self[e42]) * other.group2().yzx().extend_to_4(other[e25]))
                + (self.group3().ww().extend_to_4(self[e31], self[e41]) * other.group2().xyx().extend_to_4(other[e15]))
                + (self.group9().zx().extend_to_4(self[e45], self[e43]) * other.group2().yzz().extend_to_4(other[e35]))
                - (other.group1().wwwx() * self.group3().truncate_to_3().extend_to_4(self[e4235]))
                - (self.group3().yzxz() * other.group1().zxy().extend_to_4(other[e43]))
                - (other.group2().zxy() * self.group5().yzx()).extend_to_4(other[e41] * self[e15])
                - (other.group2().zxy() * self.group9().yzx()).extend_to_4(other[e42] * self[e25]),
            // e41, e42, e43
            (Simd32x3::from(self[scalar]) * other.group0())
                + (Simd32x3::from(self[e1234]) * other.group1().truncate_to_3())
                + (Simd32x3::from([self[e12], self[e4125], self[e31]]) * other.group0().yxx())
                + (Simd32x3::from([self[e4315], self[e23], self[e4235]]) * other.group0().zzy())
                + (self.group4().xxy() * other.group1().wzx())
                + (self.group4().zyz() * other.group1().yww())
                - (Simd32x3::from(other[e41]) * Simd32x3::from([self[e45], self[e12], self[e4315]]))
                - (Simd32x3::from(other[e42]) * Simd32x3::from([self[e4125], self[e45], self[e23]]))
                - (Simd32x3::from(other[e43]) * Simd32x3::from([self[e31], self[e4235], self[e45]]))
                - (self.group4().yzx() * other.group1().zxy()),
            // e23, e31, e12
            (Simd32x3::from(other[e45]) * self.group9().truncate_to_3())
                + (Simd32x3::from(self[scalar]) * other.group1().truncate_to_3())
                + (Simd32x3::from([self[e35], self[e15], self[e3215]]) * other.group0().yzz())
                + (Simd32x3::from([self[e3215], self[e3215], self[e25]]) * other.group0().xyx())
                + (Simd32x3::from([self[e1234], self[e1234], self[e42]]) * other.group2().xyx())
                + (other.group2().yzz() * self.group4().zx().extend_to_3(self[e1234]))
                + (self.group5().zxy() * other.group1().yzx())
                - (other.group0().zxy() * self.group3().yzx())
                - (other.group2().zxy() * self.group4().yzx())
                - (self.group5().yzx() * other.group1().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e31] * self[e435]) + (other[e15] * self[e4]) + (other[e25] * self[e412]),
                (other[e12] * self[e415]) + (other[e25] * self[e4]) + (other[e35] * self[e423]),
                (other[e23] * self[e425]) + (other[e15] * self[e431]) + (other[e35] * self[e4]),
                -(other[e23] * self[e1]) - (other[e31] * self[e2]) - (other[e12] * self[e3]),
            ]) + (Simd32x4::from([self[e5], self[e5], self[e315], self[e315]]) * other.group0().xyx().extend_to_4(other[e42]))
                + (self.group0().yy().extend_to_4(self[e12345], other[e41]) * other.group1().truncate_to_3().extend_to_4(self[e235]))
                + (self.group8().zx().extend_to_4(self[e5], self[e125]) * other.group0().yzz().extend_to_4(other[e43]))
                - (other.group0().zxy() * self.group8().yzx()).extend_to_4(other[e45] * self[e12345])
                - (other.group2().zxy() * self.group7().yzx()).extend_to_4(other[e15] * self[e423])
                - (other.group1().zxy() * self.group6().yzx()).extend_to_4(other[e25] * self[e431])
                - (other.group1().www() * self.group1().truncate_to_3()).extend_to_4(other[e35] * self[e412]),
            // e423, e431, e412
            (Simd32x3::from(self[e12345]) * other.group0())
                + (Simd32x3::from(self[e4]) * other.group1().truncate_to_3())
                + (Simd32x3::from([self[e3], self[e1], self[e425]]) * other.group0().yzx())
                + (Simd32x3::from([self[e321], self[e321], self[e2]]) * other.group0().xyx())
                + (other.group0().yzz() * self.group6().zxw())
                + (self.group7().xxy() * other.group1().wzx())
                + (self.group7().zyz() * other.group1().yww())
                - (other.group0().zxy() * self.group1().yzx())
                - (other.group0().zxy() * self.group6().yzx())
                - (self.group7().yzx() * other.group1().zxy()),
            // e235, e315, e125
            (Simd32x3::from(self[e12345]) * other.group2())
                + (Simd32x3::from(self[e5]) * other.group1().truncate_to_3())
                + (Simd32x3::from([self[e2], self[e415], self[e1]]) * other.group2().zzy())
                + (Simd32x3::from([self[e435], self[e3], self[e425]]) * other.group2().yxx())
                + (self.group8().zxy() * other.group1().yzx())
                - (Simd32x3::from(other[e15]) * Simd32x3::from([self[e321], self[e435], self[e2]]))
                - (Simd32x3::from(other[e25]) * Simd32x3::from([self[e3], self[e321], self[e415]]))
                - (Simd32x3::from(other[e35]) * Simd32x3::from([self[e425], self[e1], self[e321]]))
                - (self.group8().xyx() * other.group1().wwy())
                - (self.group8().yzz() * other.group1().zxw()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e41] * self[e3215]) + (other[e42] * self[e35]) + (other[e23] * self[e45]) + (other[e31] * self[e4125]) + (other[e45] * self[e23]) + (other[e35] * self[e42]),
                (other[e42] * self[e3215]) + (other[e43] * self[e15]) + (other[e31] * self[e45]) + (other[e12] * self[e4235]) + (other[e45] * self[e31]) + (other[e15] * self[e43]),
                (other[e41] * self[e25]) + (other[e43] * self[e3215]) + (other[e23] * self[e4315]) + (other[e12] * self[e45]) + (other[e45] * self[e12]) + (other[e25] * self[e41]),
                -(other[e23] * self[e15])
                    - (other[e31] * self[e25])
                    - (other[e12] * self[e35])
                    - (other[e45] * self[e3215])
                    - (other[e35] * self[e12])
                    - (other[e35] * self[e4125]),
            ]) - (Simd32x4::from([self[e1234], self[e1234], self[e42], self[e4235]]) * other.group2().xyx().extend_to_4(other[e15]))
                - (self.group9().yzxy() * other.group1().zxy().extend_to_4(other[e25]))
                - (self.group4().zx().extend_to_4(self[e1234], self[e31]) * other.group2().yzz().extend_to_4(other[e25]))
                - (other.group0().zxy() * self.group3().yzx()).extend_to_4(other[e15] * self[e23]),
            // e1234
            (other[e41] * self[e4235]) + (other[e42] * self[e4315]) + (other[e43] * self[e4125]) + (other[e45] * self[e1234])
                - (other[e41] * self[e23])
                - (other[e42] * self[e31])
                - (other[e43] * self[e12])
                - (other[e23] * self[e41])
                - (other[e31] * self[e42])
                - (other[e12] * self[e43]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      214      304        0
    //    simd2       27       27        0
    //    simd3      180      242        0
    //    simd4      158      110        0
    // Totals...
    // yes simd      579      683        0
    //  no simd     1440     1524        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (other[e45] * self[e45]) - (other[e4235] * self[e4235]) - (other[e4315] * self[e4315]) - (other[e4125] * self[e4125]),
                (other[e4315] * self[e2]) + (other[e4125] * self[e3]) + (other[e3215] * self[e4]) - (other[e45] * self[e321]),
            ]) + (Simd32x2::from(other[e1234]) * Simd32x2::from([self[e3215], self[e5]]))
                + (Simd32x2::from([self[e1234], self[e1]]) * other.group3().wx())
                - (Simd32x2::from(other[e41]) * Simd32x2::from([self[e15], self[e235]]))
                - (Simd32x2::from(other[e42]) * Simd32x2::from([self[e25], self[e315]]))
                - (Simd32x2::from(other[e43]) * Simd32x2::from([self[e35], self[e125]]))
                - (Simd32x2::from(other[e23]) * Simd32x2::from([self[e23], self[e415]]))
                - (Simd32x2::from(other[e31]) * Simd32x2::from([self[e31], self[e425]]))
                - (Simd32x2::from(other[e12]) * Simd32x2::from([self[e12], self[e435]]))
                - (Simd32x2::from(other[e15]) * Simd32x2::from([self[e41], self[e423]]))
                - (Simd32x2::from(other[e25]) * Simd32x2::from([self[e42], self[e431]]))
                - (Simd32x2::from(other[e35]) * Simd32x2::from([self[e43], self[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e23] * self[e321]) + (other[e31] * self[e3]) + (other[e15] * self[e4]) + (other[e4125] * self[e425]),
                (other[e31] * self[e321]) + (other[e12] * self[e1]) + (other[e25] * self[e4]) + (other[e4235] * self[e435]),
                (other[e23] * self[e2]) + (other[e12] * self[e321]) + (other[e35] * self[e4]) + (other[e4315] * self[e415]),
                -(other[e31] * self[e431]) - (other[e12] * self[e412]) - (other[e4315] * self[e431]) - (other[e4125] * self[e412]),
            ]) + (Simd32x4::from([other[e25], other[e3215], other[e3215], self[e321]]) * self.group7().zyz().extend_to_4(other[e1234]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], self[e4]]) * self.group7().xxy().extend_to_4(other[e45]))
                + (other.group0().zxy() * self.group8().yzx()).extend_to_4(other[e1234] * self[e12345])
                - (Simd32x4::from([self[e5], self[e5], self[e315], self[e415]]) * other.group0().xyx().extend_to_4(other[e41]))
                - (self.group0().yy().extend_to_4(self[e12345], other[e41]) * other.group3().truncate_to_3().extend_to_4(self[e1]))
                - (self.group8().zx().extend_to_4(self[e5], self[e2]) * other.group0().yzz().extend_to_4(other[e42]))
                - (self.group8() * other.group2().www()).extend_to_4(other[e43] * self[e3])
                - (self.group7().yzx() * other.group2().zxy()).extend_to_4(other[e42] * self[e425])
                - (other.group1().zxy() * self.group1().yzx()).extend_to_4(other[e43] * self[e435])
                - (other.group1().www() * self.group6().truncate_to_3()).extend_to_4(other[e23] * self[e423])
                - (other.group3().yzx() * self.group6().zxy()).extend_to_4(other[e4235] * self[e423]),
            // e5
            (other[e15] * self[e1])
                + (other[e25] * self[e2])
                + (other[e35] * self[e3])
                + (other[e4235] * self[e235])
                + (other[e4315] * self[e315])
                + (other[e4125] * self[e125])
                + (other[e3215] * self[e12345])
                - (other[e23] * self[e235])
                - (other[e31] * self[e315])
                - (other[e12] * self[e125])
                - (other[e45] * self[e5])
                - (other[e15] * self[e415])
                - (other[e25] * self[e425])
                - (other[e35] * self[e435])
                - (other[e3215] * self[e321]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e15] * self[e45]) + (other[e25] * self[e4125]) + (other[e4125] * self[e25]) + (other[e3215] * self[e4235]),
                (other[e25] * self[e45]) + (other[e35] * self[e4235]) + (other[e4235] * self[e35]) + (other[e3215] * self[e4315]),
                (other[e15] * self[e4315]) + (other[e35] * self[e45]) + (other[e4315] * self[e15]) + (other[e3215] * self[e4125]),
                -(other[e23] * self[e4235]) - (other[e31] * self[e4315]) - (other[e12] * self[e4125]) - (other[e3215] * self[e1234]),
            ]) + (Simd32x4::from(self[scalar]) * other.group2().truncate_to_3().extend_to_4(other[e45]))
                + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e25]]) * self.group5().zyz().extend_to_4(self[e42]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e15]]) * self.group5().xxy().extend_to_4(self[e41]))
                + (self.group3().zx().extend_to_4(self[e3215], self[e3215]) * other.group1().yzz().extend_to_4(other[e1234]))
                + (self.group9().ww().extend_to_4(self[e25], other[e35]) * other.group1().xyx().extend_to_4(self[e43]))
                - (self.group3().xyzz() * other.group1().www().extend_to_4(other[e43]))
                - (self.group3().yzxy() * other.group1().zxy().extend_to_4(other[e42]))
                - (self.group3().zx().extend_to_4(self[e3215], other[e4125]) * other.group3().yzz().extend_to_4(self[e12]))
                - (self.group9().ww().extend_to_4(self[e25], other[e4315]) * other.group3().xyx().extend_to_4(self[e31]))
                - (self.group5().yzx() * other.group2().zxy()).extend_to_4(other[e41] * self[e15])
                - (other.group2().zxy() * self.group9().yzx()).extend_to_4(other[e4235] * self[e23]),
            // e41, e42, e43
            (Simd32x3::from(other[e1234]) * self.group5())
                + (Simd32x3::from(self[scalar]) * other.group0())
                + (Simd32x3::from(self[e1234]) * other.group1().truncate_to_3())
                + (Simd32x3::from(self[e1234]) * other.group3().truncate_to_3())
                + (Simd32x3::from([other[e31], other[e4125], other[e4235]]) * self.group4().zxy())
                + (Simd32x3::from([other[e4315], other[e45], other[e45]]) * self.group4().zyz())
                + (Simd32x3::from([self[e12], self[e4125], self[e31]]) * other.group0().yxx())
                + (Simd32x3::from([self[e4315], self[e23], self[e4235]]) * other.group0().zzy())
                + (self.group4().xxy() * other.group1().wzx())
                - (Simd32x3::from(other[e41]) * Simd32x3::from([self[e45], self[e12], self[e4315]]))
                - (Simd32x3::from(other[e42]) * Simd32x3::from([self[e4125], self[e45], self[e23]]))
                - (Simd32x3::from(other[e43]) * Simd32x3::from([self[e31], self[e4235], self[e45]]))
                - (Simd32x3::from(other[e1234]) * self.group9().truncate_to_3())
                - (self.group4().yzx() * other.group1().zxy())
                - (self.group4().yzx() * other.group3().zxy()),
            // e23, e31, e12
            (Simd32x3::from(other[e45]) * self.group9().truncate_to_3())
                + (Simd32x3::from(other[e1234]) * self.group3().truncate_to_3())
                + (Simd32x3::from(self[scalar]) * other.group1().truncate_to_3())
                + (Simd32x3::from(self[e1234]) * other.group2().truncate_to_3())
                + (Simd32x3::from([other[e25], other[e3215], other[e3215]]) * self.group4().zyz())
                + (Simd32x3::from([other[e3215], other[e35], other[e15]]) * self.group4().xxy())
                + (Simd32x3::from([self[e35], self[e15], self[e3215]]) * other.group0().yzz())
                + (Simd32x3::from([self[e45], self[e45], self[e4315]]) * other.group3().xyx())
                + (Simd32x3::from([self[e4125], self[e4235], self[e45]]) * other.group3().yzz())
                + (Simd32x3::from([self[e3215], self[e3215], self[e25]]) * other.group0().xyx())
                + (self.group5().zxy() * other.group1().yzx())
                - (other.group0().zxy() * self.group3().yzx())
                - (self.group4().yzx() * other.group2().zxy())
                - (self.group5().yzx() * other.group1().zxy())
                - (other.group3().zxy() * self.group9().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e15] * self[e4]) + (other[e4125] * self[e2]),
                (other[e25] * self[e4]) + (other[e4235] * self[e3]),
                (other[e35] * self[e4]) + (other[e4315] * self[e1]),
                -(other[e12] * self[e3]) - (other[e1234] * self[e5]),
            ]) + (Simd32x4::from([other[e25], other[e3215], other[e3215], self[e425]]) * self.group7().zyz().extend_to_4(other[e4315]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], self[e415]]) * self.group7().xxy().extend_to_4(other[e4235]))
                + (Simd32x4::from([self[e5], self[e5], self[e315], self[e315]]) * other.group0().xyx().extend_to_4(other[e42]))
                + (self.group0().yy().extend_to_4(self[e12345], other[e41]) * other.group1().truncate_to_3().extend_to_4(self[e235]))
                + (self.group8().zx().extend_to_4(self[e5], self[e125]) * other.group0().yzz().extend_to_4(other[e43]))
                + (self.group8() * other.group2().www()).extend_to_4(other[e4125] * self[e435])
                + (other.group1().yzx() * self.group6().zxy()).extend_to_4(other[e3215] * self[e4])
                - (other.group2().zxyx() * self.group7().yzx().extend_to_4(self[e423]))
                - (self.group1().zx().extend_to_4(self[e321], self[e2]) * other.group3().yzz().extend_to_4(other[e31]))
                - (self.group6().ww().extend_to_4(self[e2], self[e1]) * other.group3().xyx().extend_to_4(other[e23]))
                - (other.group0().zxy() * self.group8().yzx()).extend_to_4(other[e45] * self[e12345])
                - (other.group1().zxy() * self.group6().yzx()).extend_to_4(other[e25] * self[e431])
                - (other.group1().www() * self.group1().truncate_to_3()).extend_to_4(other[e35] * self[e412]),
            // e423, e431, e412
            (Simd32x3::from(other[e1234]) * self.group1().truncate_to_3())
                + (Simd32x3::from(other[e1234]) * self.group6().truncate_to_3())
                + (Simd32x3::from(self[e12345]) * other.group0())
                + (Simd32x3::from(self[e4]) * other.group1().truncate_to_3())
                + (Simd32x3::from(self[e4]) * other.group3().truncate_to_3())
                + (Simd32x3::from([other[e31], other[e4125], other[e4235]]) * self.group7().zxy())
                + (Simd32x3::from([other[e4315], other[e45], other[e45]]) * self.group7().zyz())
                + (Simd32x3::from([self[e3], self[e1], self[e425]]) * other.group0().yzx())
                + (Simd32x3::from([self[e321], self[e321], self[e2]]) * other.group0().xyx())
                + (other.group0().yzz() * self.group6().zxw())
                + (self.group7().xxy() * other.group1().wzx())
                - (other.group0().zxy() * self.group1().yzx())
                - (other.group0().zxy() * self.group6().yzx())
                - (self.group7().yzx() * other.group1().zxy())
                - (self.group7().yzx() * other.group3().zxy()),
            // e235, e315, e125
            (Simd32x3::from(other[e3215]) * self.group6().truncate_to_3())
                + (Simd32x3::from(self[e12345]) * other.group2().truncate_to_3())
                + (Simd32x3::from(self[e5]) * other.group1().truncate_to_3())
                + (Simd32x3::from([other[e31], other[e4235], other[e23]]) * self.group8().zzy())
                + (Simd32x3::from([other[e4125], other[e12], other[e4315]]) * self.group8().yxx())
                + (Simd32x3::from([self[e2], self[e415], self[e1]]) * other.group2().zzy())
                + (Simd32x3::from([self[e435], self[e3], self[e425]]) * other.group2().yxx())
                - (Simd32x3::from(other[e15]) * Simd32x3::from([self[e321], self[e435], self[e2]]))
                - (Simd32x3::from(other[e25]) * Simd32x3::from([self[e3], self[e321], self[e415]]))
                - (Simd32x3::from(other[e35]) * Simd32x3::from([self[e425], self[e1], self[e321]]))
                - (Simd32x3::from(other[e3215]) * self.group1().truncate_to_3())
                - (Simd32x3::from(self[e5]) * other.group3().truncate_to_3())
                - (Simd32x3::from(self[e235]) * Simd32x3::from([other[e45], other[e4125], other[e31]]))
                - (Simd32x3::from(self[e315]) * Simd32x3::from([other[e12], other[e45], other[e4235]]))
                - (Simd32x3::from(self[e125]) * Simd32x3::from([other[e4315], other[e23], other[e45]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e23] * self[e45]) + (other[e31] * self[e4125]) + (other[e1234] * self[e15]) + (other[e4315] * self[e12]),
                (other[e31] * self[e45]) + (other[e12] * self[e4235]) + (other[e45] * self[e31]) + (other[e1234] * self[e25]),
                (other[e23] * self[e4315]) + (other[e12] * self[e45]) + (other[e45] * self[e12]) + (other[e1234] * self[e35]),
                -(other[e45] * self[e3215]) - (other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]),
            ]) + (Simd32x4::from(self[scalar]) * other.group3())
                + (Simd32x4::from([other[e45], other[e4125], other[e4235], self[e45]]) * self.group5().xxy().extend_to_4(other[e3215]))
                + (self.group3().zx().extend_to_4(self[e3215], self[e25]) * other.group0().yzz().extend_to_4(other[e4315]))
                + (self.group9().ww().extend_to_4(self[e25], self[e15]) * other.group0().xyx().extend_to_4(other[e4235]))
                + (self.group4().yzx() * other.group2().zxy()).extend_to_4(other[e4125] * self[e35])
                - (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e35]]) * self.group4().zyz().extend_to_4(self[e12]))
                - (Simd32x4::from([other[e3215], other[e35], other[e15], other[e25]]) * self.group4().xxy().extend_to_4(self[e31]))
                - (Simd32x4::from([self[e1234], self[e1234], self[e1234], self[e35]]) * other.group2().truncate_to_3().extend_to_4(other[e12]))
                - (other.group1().zxyy() * self.group9().yzx().extend_to_4(self[e25]))
                - (other.group0().zxy() * self.group3().yzx()).extend_to_4(other[e15] * self[e23])
                - (self.group5().yzx() * other.group3().zxy()).extend_to_4(other[e23] * self[e15]),
            // e1234
            (other[e41] * self[e4235]) + (other[e42] * self[e4315]) + (other[e43] * self[e4125]) + (other[e45] * self[e1234]) + (other[e1234] * self[scalar])
                - (other[e41] * self[e23])
                - (other[e42] * self[e31])
                - (other[e43] * self[e12])
                - (other[e23] * self[e41])
                - (other[e31] * self[e42])
                - (other[e12] * self[e43])
                - (other[e1234] * self[e45])
                - (other[e4235] * self[e41])
                - (other[e4315] * self[e42])
                - (other[e4125] * self[e43]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      148      221        0
    //    simd2       16       16        0
    //    simd3      128      176        0
    //    simd4      115       83        0
    // Totals...
    // yes simd      407      496        0
    //  no simd     1024     1113        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([-(other[e5] * self[e4]) - (other[e12345] * self[e12345]), (other[e5] * self[e1234]) + (other[e12345] * self[scalar])]),
            // e1, e2, e3, e4
            ((Simd32x3::from(other[e5]) * self.group4()) - (Simd32x3::from(other[e12345]) * self.group9().truncate_to_3())).extend_to_4(other[e12345] * self[e1234]),
            // e5
            (other[e5] * self[scalar]) + (other[e5] * self[e45]) + (other[e12345] * self[e3215]),
            // e15, e25, e35, e45
            Simd32x4::from([
                -(other[e5] * self[e415]) - (other[e12345] * self[e235]),
                -(other[e5] * self[e425]) - (other[e12345] * self[e315]),
                -(other[e5] * self[e435]) - (other[e12345] * self[e125]),
                other[e12345] * self[e321],
            ]) + (Simd32x4::from(other[e5]) * self.group1()),
            // e41, e42, e43
            Simd32x3::from(other[e12345]) * self.group7() * Simd32x3::from(-1.0),
            // e23, e31, e12
            -(Simd32x3::from(other[e5]) * self.group7()) - (Simd32x3::from(other[e12345]) * self.group6().truncate_to_3()),
            // e415, e425, e435, e321
            Simd32x4::from([other[e12345] * self[e23], other[e12345] * self[e31], other[e12345] * self[e12], other[e12345] * self[e45] * -1.0])
                + (Simd32x4::from(other[e5]) * self.group4().extend_to_4(self[e1234])),
            // e423, e431, e412
            Simd32x3::from(other[e12345]) * self.group4(),
            // e235, e315, e125
            (Simd32x3::from(other[e5]) * self.group5())
                + (Simd32x3::from(other[e5]) * self.group9().truncate_to_3())
                + (Simd32x3::from(other[e12345]) * self.group3().truncate_to_3()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e12345] * self[e1],
                other[e12345] * self[e2],
                other[e12345] * self[e3],
                -(other[e5] * self[e12345]) - (other[e12345] * self[e5]),
            ]) + (Simd32x4::from(other[e5]) * self.group7().extend_to_4(self[e321])),
            // e1234
            other[e12345] * self[e4] * -1.0,
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      163      235        0
    //    simd2       19       19        0
    //    simd3      136      184        0
    //    simd4      120       87        0
    // Totals...
    // yes simd      438      525        0
    //  no simd     1089     1173        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([other[e45] * self[e45], other[e45] * self[e321] * -1.0])
                - (Simd32x2::from(other[e15]) * Simd32x2::from([self[e41], self[e423]]))
                - (Simd32x2::from(other[e25]) * Simd32x2::from([self[e42], self[e431]]))
                - (Simd32x2::from(other[e35]) * Simd32x2::from([self[e43], self[e412]])),
            // e1, e2, e3, e4
            ((Simd32x3::from(self[e4]) * other.group0().truncate_to_3()) + (self.group7().zxy() * other.group0().yzx())
                - (Simd32x3::from(other[e45]) * self.group6().truncate_to_3())
                - (self.group7().yzx() * other.group0().zxy()))
            .extend_to_4(other[e45] * self[e4]),
            // e5
            (other[e15] * self[e1]) + (other[e25] * self[e2]) + (other[e35] * self[e3])
                - (other[e15] * self[e415])
                - (other[e25] * self[e425])
                - (other[e35] * self[e435])
                - (other[e45] * self[e5]),
            // e15, e25, e35, e45
            Simd32x4::from([
                -(other[e35] * self[e31]) - (other[e35] * self[e4315]) - (other[e45] * self[e15]),
                -(other[e15] * self[e12]) - (other[e15] * self[e4125]) - (other[e45] * self[e25]),
                -(other[e25] * self[e23]) - (other[e25] * self[e4235]) - (other[e45] * self[e35]),
                0.0,
            ]) + (Simd32x4::from(self[scalar]) * other.group0())
                + (other.group0().yzxx() * self.group5().zxy().extend_to_4(self[e41]))
                + (self.group3().ww().extend_to_4(self[e4315], other[e25]) * other.group0().xyx().extend_to_4(self[e42]))
                + (self.group9().zx().extend_to_4(self[e45], other[e35]) * other.group0().yzz().extend_to_4(self[e43])),
            // e41, e42, e43
            Simd32x3::from(other[e45]) * self.group4(),
            // e23, e31, e12
            (Simd32x3::from(other[e45]) * self.group9().truncate_to_3())
                + (Simd32x3::from(self[e1234]) * other.group0().truncate_to_3())
                + (self.group4().zxy() * other.group0().yzx())
                - (self.group4().yzx() * other.group0().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e15] * self[e4]) + (other[e25] * self[e412]),
                (other[e25] * self[e4]) + (other[e35] * self[e423]),
                (other[e15] * self[e431]) + (other[e35] * self[e4]),
                -(other[e25] * self[e431]) - (other[e35] * self[e412]),
            ]) - (other.group0().zxyw() * self.group7().yzx().extend_to_4(self[e12345]))
                - (other.group0().www() * self.group1().truncate_to_3()).extend_to_4(other[e15] * self[e423]),
            // e423, e431, e412
            Simd32x3::from(other[e45]) * self.group7(),
            // e235, e315, e125
            (Simd32x3::from(self[e12345]) * other.group0().truncate_to_3())
                + (Simd32x3::from([self[e2], self[e415], self[e1]]) * other.group0().zzy())
                + (Simd32x3::from([self[e435], self[e3], self[e425]]) * other.group0().yxx())
                - (Simd32x3::from(other[e15]) * Simd32x3::from([self[e321], self[e435], self[e2]]))
                - (Simd32x3::from(other[e25]) * Simd32x3::from([self[e3], self[e321], self[e415]]))
                - (Simd32x3::from(other[e35]) * Simd32x3::from([self[e425], self[e1], self[e321]]))
                - (Simd32x3::from(other[e45]) * self.group8()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e35] * self[e42]) + (other[e45] * self[e23]),
                (other[e15] * self[e43]) + (other[e45] * self[e31]),
                (other[e25] * self[e41]) + (other[e45] * self[e12]),
                -(other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e12]) - (other[e35] * self[e4125]) - (other[e45] * self[e3215]),
            ]) - (Simd32x4::from([self[e1234], self[e1234], self[e1234], other[e25]]) * other.group0().truncate_to_3().extend_to_4(self[e31]))
                - (other.group0().yzxx() * self.group4().zxy().extend_to_4(self[e23])),
            // e1234
            other[e45] * self[e1234],
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      181      255        0
    //    simd2       20       20        0
    //    simd3      148      203        0
    //    simd4      139       99        0
    // Totals...
    // yes simd      488      577        0
    //  no simd     1221     1300        0
    fn sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (other[e45] * self[e45]) - (other[e4235] * self[e4235]) - (other[e4315] * self[e4315]) - (other[e4125] * self[e4125]),
                (other[e4315] * self[e2]) + (other[e4125] * self[e3]) + (other[e3215] * self[e4]) - (other[e45] * self[e321]),
            ]) + (Simd32x2::from([self[e1234], self[e1]]) * other.group1().wx())
                - (Simd32x2::from(other[e15]) * Simd32x2::from([self[e41], self[e423]]))
                - (Simd32x2::from(other[e25]) * Simd32x2::from([self[e42], self[e431]]))
                - (Simd32x2::from(other[e35]) * Simd32x2::from([self[e43], self[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e15] * self[e4]) + (other[e25] * self[e412]) + (other[e4125] * self[e425]) - (other[e4315] * self[e435]),
                (other[e25] * self[e4]) + (other[e4235] * self[e435]) + (other[e3215] * self[e431]) - (other[e4125] * self[e415]),
                (other[e35] * self[e4]) + (other[e4315] * self[e415]) + (other[e3215] * self[e412]) - (other[e4235] * self[e425]),
                0.0,
            ]) + (Simd32x4::from([other[e3215], other[e35], other[e15], self[e4]]) * self.group7().xxy().extend_to_4(other[e45]))
                - (other.group1().xyzx() * self.group0().yy().extend_to_4(self[e12345], self[e423]))
                - (self.group7().yzx() * other.group0().zxy()).extend_to_4(other[e4315] * self[e431])
                - (other.group0().www() * self.group6().truncate_to_3()).extend_to_4(other[e4125] * self[e412]),
            // e5
            (other[e15] * self[e1])
                + (other[e25] * self[e2])
                + (other[e35] * self[e3])
                + (other[e4235] * self[e235])
                + (other[e4315] * self[e315])
                + (other[e4125] * self[e125])
                + (other[e3215] * self[e12345])
                - (other[e15] * self[e415])
                - (other[e25] * self[e425])
                - (other[e35] * self[e435])
                - (other[e45] * self[e5])
                - (other[e3215] * self[e321]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e25] * self[e4125]) + (other[e4125] * self[e25]) + (other[e3215] * self[e4235]) - (other[e4315] * self[e35]),
                (other[e35] * self[e4235]) + (other[e4235] * self[e35]) + (other[e3215] * self[e4315]) - (other[e4125] * self[e15]),
                (other[e35] * self[e45]) + (other[e4315] * self[e15]) + (other[e3215] * self[e4125]) - (other[e4125] * self[e3215]),
                0.0,
            ]) + (Simd32x4::from(self[scalar]) * other.group0())
                + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e25]]) * self.group5().zyz().extend_to_4(self[e42]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e15]]) * self.group5().xxy().extend_to_4(self[e41]))
                + (self.group3().ww().extend_to_4(self[e4315], other[e35]) * other.group0().xyx().extend_to_4(self[e43]))
                - (other.group1().xyxw() * self.group9().ww().extend_to_4(self[e25], self[e1234]))
                - (self.group5().yzx() * other.group0().zxy()).extend_to_4(other[e4235] * self[e23])
                - (other.group0().zxy() * self.group9().yzx()).extend_to_4(other[e4315] * self[e31])
                - (other.group0().www() * self.group3().truncate_to_3()).extend_to_4(other[e4125] * self[e12]),
            // e41, e42, e43
            (Simd32x3::from(self[e1234]) * other.group1().truncate_to_3())
                + (Simd32x3::from([other[e45], other[e4125], other[e4235]]) * self.group4().xxy())
                + (Simd32x3::from([other[e4315], other[e45], other[e45]]) * self.group4().zyz())
                - (self.group4().yzx() * other.group1().zxy()),
            // e23, e31, e12
            (Simd32x3::from(other[e45]) * self.group9().truncate_to_3())
                + (Simd32x3::from(self[e1234]) * other.group0().truncate_to_3())
                + (Simd32x3::from([other[e25], other[e3215], other[e3215]]) * self.group4().zyz())
                + (Simd32x3::from([other[e3215], other[e35], other[e15]]) * self.group4().xxy())
                + (Simd32x3::from([self[e45], self[e45], self[e4315]]) * other.group1().xyx())
                + (Simd32x3::from([self[e4125], self[e4235], self[e45]]) * other.group1().yzz())
                - (self.group4().yzx() * other.group0().zxy())
                - (other.group1().zxy() * self.group9().yzx()),
            // e415, e425, e435, e321
            (Simd32x4::from([other[e25], other[e3215], other[e3215], self[e425]]) * self.group7().zyz().extend_to_4(other[e4315]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], self[e415]]) * self.group7().xxy().extend_to_4(other[e4235]))
                + (other.group1().zxyw() * self.group1().yzxw())
                + (self.group1().www() * other.group0().truncate_to_3()).extend_to_4(other[e4125] * self[e435])
                - (other.group0().zxyw() * self.group7().yzx().extend_to_4(self[e12345]))
                - (self.group1().zx().extend_to_4(self[e321], other[e35]) * other.group1().yzz().extend_to_4(self[e412]))
                - (self.group6().ww().extend_to_4(self[e2], other[e25]) * other.group1().xyx().extend_to_4(self[e431]))
                - (other.group0().www() * self.group1().truncate_to_3()).extend_to_4(other[e15] * self[e423]),
            // e423, e431, e412
            (Simd32x3::from(self[e4]) * other.group1().truncate_to_3())
                + (Simd32x3::from([other[e45], other[e4125], other[e4235]]) * self.group7().xxy())
                + (Simd32x3::from([other[e4315], other[e45], other[e45]]) * self.group7().zyz())
                - (self.group7().yzx() * other.group1().zxy()),
            // e235, e315, e125
            (Simd32x3::from(other[e3215]) * self.group6().truncate_to_3())
                + (Simd32x3::from(self[e12345]) * other.group0().truncate_to_3())
                + (Simd32x3::from([self[e2], self[e415], self[e1]]) * other.group0().zzy())
                + (Simd32x3::from([self[e435], self[e3], self[e425]]) * other.group0().yxx())
                + (self.group8().yzx() * other.group1().zxy())
                - (Simd32x3::from(other[e15]) * Simd32x3::from([self[e321], self[e435], self[e2]]))
                - (Simd32x3::from(other[e25]) * Simd32x3::from([self[e3], self[e321], self[e415]]))
                - (Simd32x3::from(other[e35]) * Simd32x3::from([self[e425], self[e1], self[e321]]))
                - (Simd32x3::from(other[e3215]) * self.group1().truncate_to_3())
                - (Simd32x3::from(self[e5]) * other.group1().truncate_to_3())
                - (Simd32x3::from([other[e45], other[e4125], other[e4235]]) * self.group8().xxy())
                - (Simd32x3::from([other[e4315], other[e45], other[e45]]) * self.group8().zyz()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[scalar]) * other.group1())
                + (Simd32x4::from([other[e45], other[e4125], other[e4235], self[e25]]) * self.group5().xxy().extend_to_4(other[e4315]))
                + (Simd32x4::from([other[e4315], other[e45], other[e45], self[e35]]) * self.group5().zyz().extend_to_4(other[e4125]))
                + Simd32x3::from(0.0).extend_to_4((other[e3215] * self[e45]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]) - (other[e45] * self[e3215]))
                + (self.group4().yzx() * other.group0().zxy()).extend_to_4(other[e4235] * self[e15])
                - (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e25]]) * self.group4().zyz().extend_to_4(self[e31]))
                - (Simd32x4::from([other[e3215], other[e35], other[e15], other[e15]]) * self.group4().xxy().extend_to_4(self[e23]))
                - (Simd32x4::from([self[e1234], self[e1234], self[e1234], self[e4235]]) * other.group0().xyzx())
                - (self.group5().yzx() * other.group1().zxy()).extend_to_4(other[e35] * self[e12]),
            // e1234
            (other[e45] * self[e1234]) - (other[e4235] * self[e41]) - (other[e4315] * self[e42]) - (other[e4125] * self[e43]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      177      254        0
    //    simd2       16       16        0
    //    simd3      141      192        0
    //    simd4      131       94        0
    // Totals...
    // yes simd      465      556        0
    //  no simd     1156     1238        0
    fn sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (other[e415] * self[e415])
                    + (other[e425] * self[e425])
                    + (other[e435] * self[e435])
                    + (other[e235] * self[e423])
                    + (other[e315] * self[e431])
                    + (other[e125] * self[e412]),
                -(other[e415] * self[e23])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e435] * self[e4315]) + (other[e235] * self[e1234]) + (other[e315] * self[e43]),
                (other[e415] * self[e4125]) + (other[e315] * self[e1234]) + (other[e125] * self[e41]),
                (other[e425] * self[e4235]) + (other[e235] * self[e42]) + (other[e125] * self[e1234]),
                0.0,
            ]) - (self.group3().ww().extend_to_4(self[e4315], self[e41]) * other.group0().xyx().extend_to_4(other[e415]))
                - (self.group9().zx().extend_to_4(self[e45], self[e42]) * other.group0().yzz().extend_to_4(other[e425]))
                - (other.group1().zxy() * self.group4().yzx()).extend_to_4(other[e435] * self[e43]),
            // e5
            -(other[e415] * self[e15])
                - (other[e425] * self[e25])
                - (other[e435] * self[e35])
                - (other[e235] * self[e23])
                - (other[e235] * self[e4235])
                - (other[e315] * self[e31])
                - (other[e315] * self[e4315])
                - (other[e125] * self[e12])
                - (other[e125] * self[e4125]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e435] * self[e315]) + (other[e235] * self[e321]) + (other[e315] * self[e3]) + (other[e125] * self[e425]),
                (other[e415] * self[e125]) + (other[e235] * self[e435]) + (other[e315] * self[e321]) + (other[e125] * self[e1]),
                (other[e425] * self[e235]) + (other[e235] * self[e2]) + (other[e315] * self[e415]) + (other[e125] * self[e321]),
                other[e125] * self[e412] * -1.0,
            ]) - (Simd32x4::from([self[e2], self[e415], self[e1], self[e431]]) * other.group1().zzy().extend_to_4(other[e315]))
                - (Simd32x4::from([self[e5], self[e5], self[e315], self[e2]]) * other.group0().xyx().extend_to_4(other[e425]))
                - (Simd32x4::from([self[e435], self[e3], self[e425], self[e423]]) * other.group1().yxx().extend_to_4(other[e235]))
                - (self.group0().yy().extend_to_4(self[e12345], other[e415]) * other.group1().extend_to_4(self[e1]))
                - (self.group8().zx().extend_to_4(self[e5], self[e3]) * other.group0().yzz().extend_to_4(other[e435])),
            // e41, e42, e43
            (other.group0().zxy() * self.group7().yzx())
                - (Simd32x3::from([self[e4], self[e4], self[e431]]) * other.group0().xyx())
                - (other.group0().yzz() * self.group7().zx().extend_to_3(self[e4])),
            // e23, e31, e12
            (other.group0().zxy() * self.group6().yzx()) + (other.group1().zxy() * self.group7().yzx())
                - (Simd32x3::from(self[e12345]) * other.group0())
                - (Simd32x3::from([self[e4], self[e4], self[e431]]) * other.group1().xyx())
                - (other.group0().yzx() * self.group6().zxy())
                - (other.group1().yzz() * self.group7().zx().extend_to_3(self[e4])),
            // e415, e425, e435, e321
            Simd32x4::from([other[e315] * self[e43], other[e125] * self[e41], other[e125] * self[e1234], other[e125] * self[e43] * -1.0])
                + (Simd32x4::from([self[e1234], self[e1234], self[e42], self[e4125]]) * other.group1().xyx().extend_to_4(other[e435]))
                + (self.group0().xx().extend_to_4(self[scalar], other[e415]) * other.group0().extend_to_4(self[e4235]))
                + (other.group0().yzx() * self.group5().zxy()).extend_to_4(other[e425] * self[e4315])
                - (other.group0().zxy() * self.group5().yzx()).extend_to_4(other[e235] * self[e41])
                - (other.group1().zxy() * self.group4().yzx()).extend_to_4(other[e315] * self[e42]),
            // e423, e431, e412
            (Simd32x3::from([self[e1234], self[e1234], self[e42]]) * other.group0().xyx()) + (other.group0().yzz() * self.group4().zx().extend_to_3(self[e1234]))
                - (other.group0().zxy() * self.group4().yzx()),
            // e235, e315, e125
            (Simd32x3::from(self[scalar]) * other.group1())
                + (Simd32x3::from([self[e35], self[e15], self[e3215]]) * other.group0().yzz())
                + (Simd32x3::from([self[e45], self[e45], self[e31]]) * other.group1().xyx())
                + (Simd32x3::from([self[e4125], self[e4235], self[e45]]) * other.group1().yzz())
                + (Simd32x3::from([self[e3215], self[e3215], self[e25]]) * other.group0().xyx())
                + (other.group1().yzx() * self.group5().zx().extend_to_3(self[e4315]))
                - (other.group0().zxy() * self.group3().yzx())
                - (other.group1().zxy() * self.group5().yzx())
                - (other.group1().zxy() * self.group9().yzx()),
            // e4235, e4315, e4125, e3215
            (self.group7().zx().extend_to_4(self[e4], self[e415]) * other.group1().yzz().extend_to_4(other[e235]))
                + (self.group1().zx().extend_to_4(self[e321], self[e315]) * other.group0().yzz().extend_to_4(other[e425]))
                + (self.group1().ww().extend_to_4(self[e431], self[e125]) * other.group1().xyx().extend_to_4(other[e435]))
                + (self.group6().ww().extend_to_4(self[e2], self[e235]) * other.group0().xyx().extend_to_4(other[e415]))
                + Simd32x3::from(0.0).extend_to_4((other[e315] * self[e425]) + (other[e125] * self[e435]) - (other[e125] * self[e3]))
                - (self.group1().yzxx() * other.group0().zxy().extend_to_4(other[e235]))
                - (other.group1().zxy() * self.group7().yzx()).extend_to_4(other[e315] * self[e2]),
            // e1234
            (other[e415] * self[e423]) + (other[e425] * self[e431]) + (other[e435] * self[e412]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      185      266        0
    //    simd2       20       20        0
    //    simd3      148      206        0
    //    simd4      138       94        0
    // Totals...
    // yes simd      491      586        0
    //  no simd     1221     1300        0
    fn sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (other[e425] * self[e425]) + (other[e435] * self[e435]) + (other[e315] * self[e431]) + (other[e125] * self[e412]),
                -(other[e425] * self[e31]) - (other[e435] * self[e12]) - (other[e315] * self[e42]) - (other[e125] * self[e43]),
            ]) + (Simd32x2::from([self[e415], self[scalar]]) * other.group0().xw())
                + (Simd32x2::from([self[e423], self[e1234]]) * other.group1().xw())
                - (Simd32x2::from([self[e12345], self[e23]]) * other.group0().wx())
                - (Simd32x2::from([self[e4], self[e41]]) * other.group1().wx()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e435] * self[e4315]) + (other[e235] * self[e1234]) + (other[e315] * self[e43]) - (other[e12345] * self[e4235]),
                (other[e415] * self[e4125]) + (other[e315] * self[e1234]) + (other[e5] * self[e42]) - (other[e12345] * self[e4315]),
                (other[e425] * self[e4235]) + (other[e125] * self[e1234]) + (other[e5] * self[e43]) - (other[e12345] * self[e4125]),
                0.0,
            ]) + (self.group4().xxy() * other.group1().wzx()).extend_to_4(other[e12345] * self[e1234])
                - (self.group3().ww().extend_to_4(self[e4315], other[e425]) * other.group0().xyx().extend_to_4(self[e42]))
                - (self.group9().zx().extend_to_4(self[e45], other[e435]) * other.group0().yzz().extend_to_4(self[e43]))
                - (self.group4().yzx() * other.group1().zxy()).extend_to_4(other[e415] * self[e41]),
            // e5
            (other[e12345] * self[e3215]) + (other[e5] * self[scalar]) + (other[e5] * self[e45])
                - (other[e415] * self[e15])
                - (other[e425] * self[e25])
                - (other[e435] * self[e35])
                - (other[e235] * self[e23])
                - (other[e235] * self[e4235])
                - (other[e315] * self[e31])
                - (other[e315] * self[e4315])
                - (other[e125] * self[e12])
                - (other[e125] * self[e4125]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e315] * self[e3]) + (other[e125] * self[e425]) + (other[e5] * self[e1]) - (other[e5] * self[e415]),
                (other[e315] * self[e321]) + (other[e125] * self[e1]) + (other[e5] * self[e2]) - (other[e5] * self[e425]),
                (other[e315] * self[e415]) + (other[e125] * self[e321]) + (other[e5] * self[e3]) - (other[e5] * self[e435]),
                0.0,
            ]) + (other.group1().xxxw() * self.group6().wz().extend_to_4(self[e2], self[e4]))
                + (self.group8().yzx() * other.group0().zxy()).extend_to_4(other[e12345] * self[e321])
                - (Simd32x4::from([self[e2], self[e415], self[e1], self[e3]]) * other.group1().zzy().extend_to_4(other[e435]))
                - (Simd32x4::from([self[e5], self[e5], self[e5], self[e1]]) * other.group0().xyzx())
                - (Simd32x4::from([self[e435], self[e3], self[e425], self[e2]]) * other.group1().yxx().extend_to_4(other[e425]))
                - (other.group1().xyzx() * self.group0().yy().extend_to_4(self[e12345], self[e423]))
                - (self.group8().xxy() * other.group0().wzx()).extend_to_4(other[e315] * self[e431])
                - (self.group8().zyz() * other.group0().yww()).extend_to_4(other[e125] * self[e412]),
            // e41, e42, e43
            (self.group7().yzx() * other.group0().zxy())
                - (Simd32x3::from(self[e4]) * other.group0().truncate_to_3())
                - (self.group7().xxy() * other.group0().wzx())
                - (self.group7().zyz() * other.group0().yww()),
            // e23, e31, e12
            (self.group7().yzx() * other.group1().zxy()) + (other.group0().zxy() * self.group6().yzx())
                - (Simd32x3::from(other[e12345]) * self.group6().truncate_to_3())
                - (Simd32x3::from(self[e12345]) * other.group0().truncate_to_3())
                - (Simd32x3::from(self[e4]) * other.group1().truncate_to_3())
                - (self.group7().xxy() * other.group1().wzx())
                - (self.group7().zyz() * other.group1().yww())
                - (other.group0().yzx() * self.group6().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e425] * self[e12]) + (other[e235] * self[e1234]),
                (other[e12345] * self[e31]) + (other[e315] * self[e1234]),
                (other[e12345] * self[e12]) + (other[e125] * self[e1234]),
                -(other[e12345] * self[e45]) - (other[e125] * self[e43]),
            ]) + (self.group0().xx().extend_to_4(self[scalar], other[e415]) * other.group0().truncate_to_3().extend_to_4(self[e4235]))
                + (self.group4().xxy() * other.group1().wzx()).extend_to_4(other[e425] * self[e4315])
                + (self.group4().zyz() * other.group1().yww()).extend_to_4(other[e435] * self[e4125])
                + (self.group5().xxy() * other.group0().wzx()).extend_to_4(other[e5] * self[e1234])
                - (other.group1().zxyx() * self.group4().yzx().extend_to_4(self[e41]))
                - (self.group5().yzx() * other.group0().zxy()).extend_to_4(other[e315] * self[e42]),
            // e423, e431, e412
            (Simd32x3::from(self[e1234]) * other.group0().truncate_to_3()) + (self.group4().xxy() * other.group0().wzx()) + (self.group4().zyz() * other.group0().yww())
                - (self.group4().yzx() * other.group0().zxy()),
            // e235, e315, e125
            (Simd32x3::from(other[e12345]) * self.group3().truncate_to_3())
                + (Simd32x3::from(other[e5]) * self.group9().truncate_to_3())
                + (Simd32x3::from(self[scalar]) * other.group1().truncate_to_3())
                + (Simd32x3::from([self[e35], self[e15], self[e3215]]) * other.group0().yzz())
                + (Simd32x3::from([self[e45], self[e45], self[e4315]]) * other.group1().xyx())
                + (Simd32x3::from([self[e4125], self[e4235], self[e45]]) * other.group1().yzz())
                + (Simd32x3::from([self[e3215], self[e3215], self[e25]]) * other.group0().xyx())
                + (self.group5().xxy() * other.group1().wzx())
                + (self.group5().zyz() * other.group1().yww())
                - (self.group5().yzx() * other.group1().zxy())
                - (other.group0().zxy() * self.group3().yzx())
                - (other.group1().zxy() * self.group9().yzx()),
            // e4235, e4315, e4125, e3215
            (other.group1().xyzz() * self.group1().www().extend_to_4(self[e435]))
                + (self.group1().zx().extend_to_4(self[e321], self[e415]) * other.group0().yzz().extend_to_4(other[e235]))
                + (self.group6().ww().extend_to_4(self[e2], other[e435]) * other.group0().xyx().extend_to_4(self[e125]))
                + Simd32x3::from(0.0).extend_to_4((other[e5] * self[e321]) - (other[e235] * self[e1]) - (other[e315] * self[e2]) - (other[e125] * self[e3]))
                + (self.group7().xxy() * other.group1().wzx()).extend_to_4(other[e415] * self[e235])
                + (self.group7().zyz() * other.group1().yww()).extend_to_4(other[e425] * self[e315])
                + (other.group0().www() * self.group1().truncate_to_3()).extend_to_4(other[e315] * self[e425])
                - (other.group0().zxyw() * self.group1().yzx().extend_to_4(self[e5]))
                - (other.group1().zxyw() * self.group7().yzx().extend_to_4(self[e12345])),
            // e1234
            (other[e415] * self[e423]) + (other[e425] * self[e431]) + (other[e435] * self[e412]) - (other[e12345] * self[e4]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      280      388        0
    //    simd2       32       32        0
    //    simd3      248      328        0
    //    simd4      224      158        0
    // Totals...
    // yes simd      784      906        0
    //  no simd     1984     2068        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (other[e45] * self[e45])
                    + (other[e415] * self[e415])
                    + (other[e425] * self[e425])
                    + (other[e435] * self[e435])
                    + (other[e423] * self[e235])
                    + (other[e431] * self[e315])
                    + (other[e412] * self[e125])
                    + (other[e235] * self[e423])
                    + (other[e315] * self[e431])
                    + (other[e125] * self[e412])
                    - (other[e12345] * self[e12345])
                    - (other[e4] * self[e5])
                    - (other[e5] * self[e4])
                    - (other[e4235] * self[e4235])
                    - (other[e4315] * self[e4315])
                    - (other[e4125] * self[e4125]),
                (other[e12345] * self[scalar])
                    + (other[e5] * self[e1234])
                    + (other[e4315] * self[e2])
                    + (other[e4125] * self[e3])
                    + (other[e3215] * self[e4])
                    + (other[e1234] * self[e5])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412])
                    - (other[e45] * self[e321])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12])
                    - (other[e321] * self[e45])
                    - (other[e423] * self[e15])
                    - (other[e431] * self[e25])
                    - (other[e412] * self[e35]),
            ]) + (Simd32x2::from(other[scalar]) * self.group0())
                + (Simd32x2::from(other[e1]) * Simd32x2::from([self[e1], self[e4235]]))
                + (Simd32x2::from(other[e2]) * Simd32x2::from([self[e2], self[e4315]]))
                + (Simd32x2::from(other[e3]) * Simd32x2::from([self[e3], self[e4125]]))
                + (Simd32x2::from(self[e3215]) * Simd32x2::from([other[e1234], other[e4]]))
                + (Simd32x2::from([self[e1234], self[e1]]) * other.group9().wx())
                - (Simd32x2::from(other[e41]) * Simd32x2::from([self[e15], self[e235]]))
                - (Simd32x2::from(other[e42]) * Simd32x2::from([self[e25], self[e315]]))
                - (Simd32x2::from(other[e43]) * Simd32x2::from([self[e35], self[e125]]))
                - (Simd32x2::from(other[e23]) * Simd32x2::from([self[e23], self[e415]]))
                - (Simd32x2::from(other[e31]) * Simd32x2::from([self[e31], self[e425]]))
                - (Simd32x2::from(other[e12]) * Simd32x2::from([self[e12], self[e435]]))
                - (Simd32x2::from(self[e41]) * Simd32x2::from([other[e15], other[e235]]))
                - (Simd32x2::from(self[e42]) * Simd32x2::from([other[e25], other[e315]]))
                - (Simd32x2::from(self[e43]) * Simd32x2::from([other[e35], other[e125]]))
                - (Simd32x2::from([self[e321], self[e23]]) * other.group6().wx()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e15] * self[e4]) + (other[e25] * self[e412]) + (other[e435] * self[e4315]) + (other[e4125] * self[e425]),
                (other[e25] * self[e4]) + (other[e415] * self[e4125]) + (other[e4235] * self[e435]) + (other[e3215] * self[e431]),
                (other[e35] * self[e4]) + (other[e425] * self[e4235]) + (other[e4315] * self[e415]) + (other[e3215] * self[e412]),
                -(other[e4] * self[e45]) - (other[e321] * self[e1234]) - (other[e4315] * self[e431]) - (other[e4125] * self[e412]),
            ]) + (Simd32x4::from(other[scalar]) * self.group1())
                + (Simd32x4::from([other[e2], other[e321], other[e321], self[e4]]) * self.group5().zyz().extend_to_4(other[e45]))
                + (Simd32x4::from([other[e5], other[e5], other[e5], other[e2]]) * self.group4().extend_to_4(self[e42]))
                + (Simd32x4::from([other[e321], other[e3], other[e1], other[e3]]) * self.group5().xxy().extend_to_4(self[e43]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e1234]]) * self.group7().xxy().extend_to_4(self[e321]))
                + (Simd32x4::from([self[e1234], self[e1234], self[e42], self[e4125]]) * other.group8().xyx().extend_to_4(other[e412]))
                + (self.group0().xx().extend_to_4(self[scalar], other[e12345]) * other.group1().truncate_to_3().extend_to_4(self[e1234]))
                + (self.group4().zx().extend_to_4(self[e1234], other[e1]) * other.group8().yzz().extend_to_4(self[e41]))
                + (self.group1().zx().extend_to_4(self[e321], self[e4235]) * other.group5().yzz().extend_to_4(other[e423]))
                + (self.group6().ww().extend_to_4(self[e2], other[e1234]) * other.group5().xyx().extend_to_4(self[e12345]))
                + (other.group4().zxy() * self.group8().yzx()).extend_to_4(other[e4] * self[scalar])
                + (other.group7().zxy() * self.group3().yzx()).extend_to_4(other[e431] * self[e4315])
                - (Simd32x4::from([other[e1234], other[e1234], other[e1234], self[e31]]) * self.group8().extend_to_4(other[e431]))
                - (Simd32x4::from([self[e5], self[e5], self[e315], self[e2]]) * other.group4().xyx().extend_to_4(other[e42]))
                - (self.group1().yzxz() * other.group5().zxy().extend_to_4(other[e43]))
                - (other.group0().yy().extend_to_4(other[e12345], other[e41]) * self.group9().truncate_to_3().extend_to_4(self[e1]))
                - (self.group0().yy().extend_to_4(self[e12345], other[e41]) * other.group9().truncate_to_3().extend_to_4(self[e415]))
                - (self.group8().zx().extend_to_4(self[e5], self[e425]) * other.group4().yzz().extend_to_4(other[e42]))
                - (self.group3().zx().extend_to_4(self[e3215], self[e423]) * other.group7().yzz().extend_to_4(other[e23]))
                - (self.group3().ww().extend_to_4(self[e4315], other[e425]) * other.group6().xyx().extend_to_4(self[e42]))
                - (self.group9().zx().extend_to_4(self[e45], other[e435]) * other.group6().yzz().extend_to_4(self[e43]))
                - (self.group9().ww().extend_to_4(self[e25], self[e435]) * other.group7().xyx().extend_to_4(other[e43]))
                - (other.group8().zxy() * self.group4().yzx()).extend_to_4(other[e31] * self[e431])
                - (self.group5().yzx() * other.group1().zxy()).extend_to_4(other[e12] * self[e412])
                - (self.group7().yzx() * other.group3().zxy()).extend_to_4(other[e423] * self[e23])
                - (other.group1().www() * self.group3().truncate_to_3()).extend_to_4(other[e412] * self[e12])
                - (other.group3().www() * self.group6().truncate_to_3()).extend_to_4(other[e415] * self[e41])
                - (other.group9().yzx() * self.group6().zxy()).extend_to_4(other[e4235] * self[e423]),
            // e5
            (other[scalar] * self[e5])
                + (other[e12345] * self[e3215])
                + (other[e5] * self[scalar])
                + (other[e5] * self[e45])
                + (other[e15] * self[e1])
                + (other[e25] * self[e2])
                + (other[e35] * self[e3])
                + (other[e321] * self[e3215])
                + (other[e4235] * self[e235])
                + (other[e4315] * self[e315])
                + (other[e4125] * self[e125])
                + (other[e3215] * self[e12345])
                - (other[e1] * self[e15])
                - (other[e2] * self[e25])
                - (other[e3] * self[e35])
                - (other[e15] * self[e415])
                - (other[e25] * self[e425])
                - (other[e35] * self[e435])
                - (other[e45] * self[e5])
                - (other[e23] * self[e235])
                - (other[e31] * self[e315])
                - (other[e12] * self[e125])
                - (other[e415] * self[e15])
                - (other[e425] * self[e25])
                - (other[e435] * self[e35])
                - (other[e235] * self[e23])
                - (other[e235] * self[e4235])
                - (other[e315] * self[e31])
                - (other[e315] * self[e4315])
                - (other[e125] * self[e12])
                - (other[e125] * self[e4125])
                - (other[e3215] * self[e321]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e5] * self[e1]) + (other[e25] * self[e4125]) + (other[e4125] * self[e25]) + (other[e3215] * self[e4235]),
                (other[e5] * self[e2]) + (other[e35] * self[e4235]) + (other[e4235] * self[e35]) + (other[e3215] * self[e4315]),
                (other[e5] * self[e3]) + (other[e35] * self[e45]) + (other[e4315] * self[e15]) + (other[e3215] * self[e4125]),
                -(other[e415] * self[e1]) - (other[e425] * self[e2]) - (other[e435] * self[e3]) - (other[e3215] * self[e1234]),
            ]) + (Simd32x4::from(other[scalar]) * self.group3())
                + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e25]]) * self.group5().zyz().extend_to_4(self[e42]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e15]]) * self.group5().xxy().extend_to_4(self[e41]))
                + (Simd32x4::from([self[e3], self[e321], self[e415], self[e315]]) * other.group8().yyy().extend_to_4(other[e431]))
                + (Simd32x4::from([self[e425], self[e1], self[e321], self[e125]]) * other.group8().zzz().extend_to_4(other[e412]))
                + (self.group0().xx().extend_to_4(self[scalar], other[e12345]) * other.group3().truncate_to_3().extend_to_4(self[e321]))
                + (self.group3().zx().extend_to_4(self[e3215], other[e321]) * other.group5().yzz().extend_to_4(self[e12345]))
                + (self.group3().ww().extend_to_4(self[e4315], other[e1234]) * other.group3().xyx().extend_to_4(self[e3215]))
                + (self.group6().wz().extend_to_4(self[e2], self[e235]) * other.group8().xxx().extend_to_4(other[e423]))
                + (self.group9().ww().extend_to_4(self[e25], other[e45]) * other.group5().xyx().extend_to_4(self[scalar]))
                + (self.group8().yzx() * other.group1().zxy()).extend_to_4(other[e35] * self[e43])
                + (self.group8().yzx() * other.group6().zxy()).extend_to_4(other[e5] * self[e4])
                - (Simd32x4::from([other[e2], other[e435], other[e415], self[e431]]) * self.group8().zxy().extend_to_4(other[e315]))
                - (Simd32x4::from([other[e5], other[e5], other[e5], self[e5]]) * self.group6().truncate_to_3().extend_to_4(other[e4]))
                - (Simd32x4::from([other[e321], other[e3], other[e1], self[e423]]) * self.group8().xxy().extend_to_4(other[e235]))
                - (Simd32x4::from([self[e2], self[e415], self[e1], self[e4315]]) * other.group8().zzy().extend_to_4(other[e31]))
                - (Simd32x4::from([self[e5], self[e5], self[e5], other[e4235]]) * other.group1().truncate_to_3().extend_to_4(self[e23]))
                - (Simd32x4::from([self[e5], self[e5], self[e5], self[e415]]) * other.group6().truncate_to_3().extend_to_4(other[e1]))
                - (Simd32x4::from([self[e435], self[e3], self[e425], self[e4235]]) * other.group8().yxx().extend_to_4(other[e23]))
                - (self.group3().yzxz() * other.group5().zxy().extend_to_4(other[e43]))
                - (other.group0().yy().extend_to_4(other[e12345], other[e41]) * self.group8().extend_to_4(self[e15]))
                - (self.group0().yy().extend_to_4(self[e12345], other[e42]) * other.group8().extend_to_4(self[e25]))
                - (self.group3().zx().extend_to_4(self[e3215], self[e435]) * other.group9().yzz().extend_to_4(other[e3]))
                - (self.group9().ww().extend_to_4(self[e25], self[e425]) * other.group9().xyx().extend_to_4(other[e2]))
                - (self.group5().yzx() * other.group3().zxy()).extend_to_4(other[e12] * self[e4125])
                - (self.group8().zyz() * other.group6().yww()).extend_to_4(other[e125] * self[e412])
                - (other.group3().zxy() * self.group9().yzx()).extend_to_4(other[e4315] * self[e31])
                - (other.group3().www() * self.group3().truncate_to_3()).extend_to_4(other[e4125] * self[e12]),
            // e41, e42, e43
            (Simd32x3::from(other[scalar]) * self.group4())
                + (Simd32x3::from(other[e1234]) * self.group5())
                + (Simd32x3::from(self[scalar]) * other.group4())
                + (Simd32x3::from(self[e4]) * other.group1().truncate_to_3())
                + (Simd32x3::from(self[e423]) * Simd32x3::from([other[e321], other[e3], other[e425]]))
                + (Simd32x3::from(self[e431]) * Simd32x3::from([other[e435], other[e321], other[e1]]))
                + (Simd32x3::from(self[e412]) * Simd32x3::from([other[e2], other[e415], other[e321]]))
                + (Simd32x3::from(self[e1234]) * other.group9().truncate_to_3())
                + (Simd32x3::from([other[e45], other[e4125], other[e4235]]) * self.group4().xxy())
                + (Simd32x3::from([other[e4315], other[e45], other[e45]]) * self.group4().zyz())
                + (Simd32x3::from([self[e12], self[e4125], self[e31]]) * other.group4().yxx())
                + (Simd32x3::from([self[e4315], self[e23], self[e4235]]) * other.group4().zzy())
                + (Simd32x3::from([self[e1234], self[e1234], self[e42]]) * other.group5().xyx())
                + (other.group5().yzz() * self.group4().zx().extend_to_3(self[e1234]))
                + (other.group7().zxy() * self.group1().yzx())
                + (other.group7().zxy() * self.group6().yzx())
                - (Simd32x3::from(other[e12345]) * self.group7())
                - (Simd32x3::from(other[e4]) * self.group1().truncate_to_3())
                - (Simd32x3::from(other[e4]) * self.group6().truncate_to_3())
                - (Simd32x3::from(other[e41]) * Simd32x3::from([self[e45], self[e12], self[e4315]]))
                - (Simd32x3::from(other[e42]) * Simd32x3::from([self[e4125], self[e45], self[e23]]))
                - (Simd32x3::from(other[e43]) * Simd32x3::from([self[e31], self[e4235], self[e45]]))
                - (Simd32x3::from(other[e1234]) * self.group9().truncate_to_3())
                - (Simd32x3::from(self[e12345]) * other.group7())
                - (Simd32x3::from(self[e4]) * other.group6().truncate_to_3())
                - (Simd32x3::from([other[e3], other[e435], other[e2]]) * self.group7().yxx())
                - (Simd32x3::from([other[e425], other[e1], other[e415]]) * self.group7().zzy())
                - (Simd32x3::from([self[e3], self[e1], self[e425]]) * other.group7().yzx())
                - (Simd32x3::from([self[e321], self[e321], self[e2]]) * other.group7().xyx())
                - (other.group5().zxy() * self.group4().yzx())
                - (other.group7().yzz() * self.group6().zxw())
                - (self.group4().yzx() * other.group9().zxy()),
            // e23, e31, e12
            (Simd32x3::from(other[scalar]) * self.group5())
                + (Simd32x3::from(other[e45]) * self.group9().truncate_to_3())
                + (Simd32x3::from(other[e1234]) * self.group3().truncate_to_3())
                + (Simd32x3::from(self[scalar]) * other.group5())
                + (Simd32x3::from(self[e1234]) * other.group3().truncate_to_3())
                + (Simd32x3::from([other[e25], other[e3215], other[e3215]]) * self.group4().zyz())
                + (Simd32x3::from([other[e3215], other[e35], other[e15]]) * self.group4().xxy())
                + (Simd32x3::from([self[e35], self[e15], self[e3215]]) * other.group4().yzz())
                + (Simd32x3::from([self[e45], self[e45], self[e4315]]) * other.group9().xyx())
                + (Simd32x3::from([self[e4125], self[e4235], self[e45]]) * other.group9().yzz())
                + (Simd32x3::from([self[e3215], self[e3215], self[e25]]) * other.group4().xyx())
                + (other.group5().yzx() * self.group5().zxy())
                + (other.group7().zxy() * self.group8().yzx())
                + (other.group8().zxy() * self.group7().yzx())
                + (other.group1().zxy() * self.group1().yzx())
                + (other.group6().zxy() * self.group6().yzx())
                - (Simd32x3::from(other[e12345]) * self.group6().truncate_to_3())
                - (Simd32x3::from(other[e4]) * self.group8())
                - (Simd32x3::from(other[e5]) * self.group7())
                - (Simd32x3::from(other[e321]) * self.group1().truncate_to_3())
                - (Simd32x3::from(self[e12345]) * other.group6().truncate_to_3())
                - (Simd32x3::from([self[e3], self[e1], self[e321]]) * other.group1().yzz())
                - (Simd32x3::from([self[e4], self[e4], self[e431]]) * other.group8().xyx())
                - (Simd32x3::from([self[e5], self[e5], self[e315]]) * other.group7().xyx())
                - (Simd32x3::from([self[e321], self[e321], self[e2]]) * other.group1().xyx())
                - (other.group4().zxy() * self.group3().yzx())
                - (other.group5().zxy() * self.group5().yzx())
                - (other.group7().yzz() * self.group8().zx().extend_to_3(self[e5]))
                - (other.group8().yzz() * self.group7().zx().extend_to_3(self[e4]))
                - (self.group4().yzx() * other.group3().zxy())
                - (other.group6().yzx() * self.group6().zxy())
                - (other.group9().zxy() * self.group9().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e3] * self[e4315]) + (other[e4] * self[e15]) + (other[e15] * self[e4]) + (other[e4125] * self[e2]),
                (other[e1] * self[e4125]) + (other[e4] * self[e25]) + (other[e25] * self[e4]) + (other[e4235] * self[e3]),
                (other[e2] * self[e4235]) + (other[e4] * self[e35]) + (other[e35] * self[e4]) + (other[e4315] * self[e1]),
                -(other[e4] * self[e3215]) - (other[e25] * self[e431]) - (other[e35] * self[e412]) - (other[e1234] * self[e5]),
            ]) + (Simd32x4::from(other[scalar]) * self.group6())
                + (Simd32x4::from([other[e5], other[e5], other[e5], self[e415]]) * self.group4().extend_to_4(other[e4235]))
                + (Simd32x4::from([other[e25], other[e3215], other[e3215], self[e4]]) * self.group7().zyz().extend_to_4(other[e3215]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], self[e435]]) * self.group7().xxy().extend_to_4(other[e4125]))
                + (Simd32x4::from([other[e1234], other[e1234], other[e1234], self[e1234]]) * self.group8().extend_to_4(other[e5]))
                + (Simd32x4::from([self[e5], self[e5], self[e315], self[e125]]) * other.group4().xyx().extend_to_4(other[e43]))
                + (Simd32x4::from([self[e1234], self[e1234], self[e42], self[e4315]]) * other.group8().xyx().extend_to_4(other[e425]))
                + (other.group0().yy().extend_to_4(other[e12345], self[scalar]) * self.group5().extend_to_4(other[e321]))
                + (self.group0().xx().extend_to_4(self[scalar], other[e41]) * other.group6().truncate_to_3().extend_to_4(self[e235]))
                + (self.group0().yy().extend_to_4(self[e12345], other[e42]) * other.group5().extend_to_4(self[e315]))
                + (self.group4().zx().extend_to_4(self[e1234], self[e4125]) * other.group8().yzz().extend_to_4(other[e435]))
                + (self.group8().zx().extend_to_4(self[e5], self[e15]) * other.group4().yzz().extend_to_4(other[e423]))
                + (self.group3().zx().extend_to_4(self[e3215], self[e4235]) * other.group7().yzz().extend_to_4(other[e415]))
                + (self.group9().ww().extend_to_4(self[e25], self[e35]) * other.group7().xyx().extend_to_4(other[e412]))
                + (other.group5().yzx() * self.group6().zxy()).extend_to_4(other[e431] * self[e25])
                + (self.group5().zxy() * other.group6().yzx()).extend_to_4(other[e4315] * self[e425])
                - (self.group1().zx().extend_to_4(self[e321], other[e15]) * other.group9().yzz().extend_to_4(self[e423]))
                - (self.group3().ww().extend_to_4(self[e4315], self[e42]) * other.group1().xyx().extend_to_4(other[e315]))
                - (self.group6().ww().extend_to_4(self[e2], other[e3]) * other.group9().xyx().extend_to_4(self[e12]))
                - (self.group9().zx().extend_to_4(self[e45], self[e43]) * other.group1().yzz().extend_to_4(other[e125]))
                - (other.group4().zxy() * self.group8().yzx()).extend_to_4(other[e12345] * self[e45])
                - (other.group5().zxy() * self.group6().yzx()).extend_to_4(other[e45] * self[e12345])
                - (other.group7().zxy() * self.group3().yzx()).extend_to_4(other[e23] * self[e1])
                - (other.group8().zxy() * self.group4().yzx()).extend_to_4(other[e31] * self[e2])
                - (self.group5().yzx() * other.group6().zxy()).extend_to_4(other[e12] * self[e3])
                - (self.group7().yzx() * other.group3().zxy()).extend_to_4(other[e235] * self[e41])
                - (other.group3().www() * self.group1().truncate_to_3()).extend_to_4(other[e1] * self[e23])
                - (other.group6().www() * self.group9().truncate_to_3()).extend_to_4(other[e2] * self[e31]),
            // e423, e431, e412
            (Simd32x3::from(other[scalar]) * self.group7())
                + (Simd32x3::from(other[e12345]) * self.group4())
                + (Simd32x3::from(other[e4]) * self.group5())
                + (Simd32x3::from(other[e1234]) * self.group1().truncate_to_3())
                + (Simd32x3::from(other[e1234]) * self.group6().truncate_to_3())
                + (Simd32x3::from(self[scalar]) * other.group7())
                + (Simd32x3::from(self[e12345]) * other.group4())
                + (Simd32x3::from(self[e4]) * other.group9().truncate_to_3())
                + (Simd32x3::from(self[e1234]) * other.group6().truncate_to_3())
                + (Simd32x3::from([other[e3], other[e435], other[e2]]) * self.group4().yxx())
                + (Simd32x3::from([other[e45], other[e4125], other[e4235]]) * self.group7().xxy())
                + (Simd32x3::from([other[e425], other[e1], other[e415]]) * self.group4().zzy())
                + (Simd32x3::from([other[e4315], other[e45], other[e45]]) * self.group7().zyz())
                + (Simd32x3::from([self[e3], self[e1], self[e425]]) * other.group4().yzx())
                + (Simd32x3::from([self[e4], self[e4], self[e431]]) * other.group5().xyx())
                + (Simd32x3::from([self[e12], self[e4125], self[e31]]) * other.group7().yxx())
                + (Simd32x3::from([self[e321], self[e321], self[e2]]) * other.group4().xyx())
                + (Simd32x3::from([self[e4315], self[e23], self[e4235]]) * other.group7().zzy())
                + (other.group4().yzz() * self.group6().zxw())
                + (other.group5().yzz() * self.group7().zx().extend_to_3(self[e4]))
                - (Simd32x3::from(other[e4]) * self.group9().truncate_to_3())
                - (Simd32x3::from(other[e423]) * Simd32x3::from([self[e45], self[e12], self[e4315]]))
                - (Simd32x3::from(other[e431]) * Simd32x3::from([self[e4125], self[e45], self[e23]]))
                - (Simd32x3::from(other[e412]) * Simd32x3::from([self[e31], self[e4235], self[e45]]))
                - (Simd32x3::from(self[e41]) * Simd32x3::from([other[e321], other[e3], other[e425]]))
                - (Simd32x3::from(self[e42]) * Simd32x3::from([other[e435], other[e321], other[e1]]))
                - (Simd32x3::from(self[e43]) * Simd32x3::from([other[e2], other[e415], other[e321]]))
                - (Simd32x3::from(self[e1234]) * other.group1().truncate_to_3())
                - (other.group4().zxy() * self.group1().yzx())
                - (other.group4().zxy() * self.group6().yzx())
                - (other.group5().zxy() * self.group7().yzx())
                - (self.group7().yzx() * other.group9().zxy()),
            // e235, e315, e125
            (Simd32x3::from(other[scalar]) * self.group8())
                + (Simd32x3::from(other[e12345]) * self.group3().truncate_to_3())
                + (Simd32x3::from(other[e5]) * self.group5())
                + (Simd32x3::from(other[e5]) * self.group9().truncate_to_3())
                + (Simd32x3::from(other[e321]) * self.group3().truncate_to_3())
                + (Simd32x3::from(other[e3215]) * self.group6().truncate_to_3())
                + (Simd32x3::from(self[scalar]) * other.group8())
                + (Simd32x3::from(self[e12345]) * other.group3().truncate_to_3())
                + (Simd32x3::from([self[e2], self[e415], self[e1]]) * other.group3().zzy())
                + (Simd32x3::from([self[e5], self[e5], self[e315]]) * other.group5().xyx())
                + (Simd32x3::from([self[e35], self[e15], self[e3215]]) * other.group1().yzz())
                + (Simd32x3::from([self[e35], self[e15], self[e3215]]) * other.group6().yzz())
                + (Simd32x3::from([self[e45], self[e45], self[e31]]) * other.group8().xyx())
                + (Simd32x3::from([self[e435], self[e3], self[e425]]) * other.group3().yxx())
                + (Simd32x3::from([self[e4125], self[e4235], self[e45]]) * other.group8().yzz())
                + (Simd32x3::from([self[e3215], self[e3215], self[e25]]) * other.group1().xyx())
                + (Simd32x3::from([self[e3215], self[e3215], self[e25]]) * other.group6().xyx())
                + (other.group5().yzz() * self.group8().zx().extend_to_3(self[e5]))
                + (other.group8().yzx() * self.group5().zx().extend_to_3(self[e4315]))
                + (self.group8().yzx() * other.group9().zxy())
                - (Simd32x3::from(other[e15]) * Simd32x3::from([self[e321], self[e435], self[e2]]))
                - (Simd32x3::from(other[e25]) * Simd32x3::from([self[e3], self[e321], self[e415]]))
                - (Simd32x3::from(other[e35]) * Simd32x3::from([self[e425], self[e1], self[e321]]))
                - (Simd32x3::from(other[e3215]) * self.group1().truncate_to_3())
                - (Simd32x3::from(self[e5]) * other.group9().truncate_to_3())
                - (Simd32x3::from([other[e45], other[e4125], other[e4235]]) * self.group8().xxy())
                - (Simd32x3::from([other[e4315], other[e45], other[e45]]) * self.group8().zyz())
                - (other.group5().zxy() * self.group8().yzx())
                - (other.group8().zxy() * self.group5().yzx())
                - (other.group8().zxy() * self.group9().yzx())
                - (other.group1().zxy() * self.group3().yzx())
                - (other.group6().zxy() * self.group3().yzx()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e415] * self[e321]) + (other[e425] * self[e3]) + (other[e321] * self[e415]) + (other[e1234] * self[e15]),
                (other[e425] * self[e321]) + (other[e435] * self[e1]) + (other[e321] * self[e425]) + (other[e1234] * self[e25]),
                (other[e415] * self[e2]) + (other[e435] * self[e321]) + (other[e321] * self[e435]) + (other[e1234] * self[e35]),
                -(other[e25] * self[e4315]) - (other[e35] * self[e4125]) - (other[e45] * self[e3215]) - (other[e321] * self[e5]),
            ]) + (Simd32x4::from(other[scalar]) * self.group9())
                + (Simd32x4::from([other[e5], other[e5], other[e5], self[e45]]) * self.group7().extend_to_4(other[e3215]))
                + (Simd32x4::from([other[e45], other[e4125], other[e4235], self[e25]]) * self.group5().xxy().extend_to_4(other[e4315]))
                + (Simd32x4::from([other[e4315], other[e45], other[e45], self[e35]]) * self.group5().zyz().extend_to_4(other[e4125]))
                + (other.group0().yy().extend_to_4(other[e12345], self[scalar]) * self.group1().truncate_to_3().extend_to_4(other[e3215]))
                + (self.group0().xx().extend_to_4(self[scalar], other[e235]) * other.group9().truncate_to_3().extend_to_4(self[e415]))
                + (self.group0().yy().extend_to_4(self[e12345], other[e315]) * other.group1().truncate_to_3().extend_to_4(self[e425]))
                + (self.group7().zx().extend_to_4(self[e4], other[e435]) * other.group8().yzz().extend_to_4(self[e125]))
                + (self.group1().ww().extend_to_4(self[e431], other[e3]) * other.group8().xyx().extend_to_4(self[e125]))
                + (self.group3().zx().extend_to_4(self[e3215], other[e1]) * other.group4().yzz().extend_to_4(self[e235]))
                + (self.group3().ww().extend_to_4(self[e4315], other[e415]) * other.group5().xyx().extend_to_4(self[e235]))
                + (self.group9().zx().extend_to_4(self[e45], other[e2]) * other.group5().yzz().extend_to_4(self[e315]))
                + (self.group9().ww().extend_to_4(self[e25], self[e435]) * other.group4().xyx().extend_to_4(other[e125]))
                + (other.group7().zxy() * self.group8().yzx()).extend_to_4(other[e425] * self[e315])
                + (self.group4().yzx() * other.group3().zxy()).extend_to_4(other[e4235] * self[e15])
                + (other.group1().yzx() * self.group6().zxy()).extend_to_4(other[e5] * self[e321])
                - (Simd32x4::from([other[e25], other[e3215], other[e3215], self[e2]]) * self.group4().zyz().extend_to_4(other[e315]))
                - (Simd32x4::from([other[e3215], other[e35], other[e15], self[e1]]) * self.group4().xxy().extend_to_4(other[e235]))
                - (Simd32x4::from([self[e5], self[e5], self[e315], self[e15]]) * other.group7().xyx().extend_to_4(other[e23]))
                - (Simd32x4::from([self[e1234], self[e1234], self[e1234], other[e35]]) * other.group3().truncate_to_3().extend_to_4(self[e12]))
                - (self.group8().zx().extend_to_4(self[e5], self[e25]) * other.group7().yzz().extend_to_4(other[e31]))
                - (self.group8() * other.group1().www()).extend_to_4(other[e15] * self[e23])
                - (other.group4().zxy() * self.group3().yzx()).extend_to_4(other[e12345] * self[e5])
                - (other.group5().zxy() * self.group9().yzx()).extend_to_4(other[e5] * self[e12345])
                - (other.group8().zxy() * self.group7().yzx()).extend_to_4(other[e12] * self[e35])
                - (self.group5().yzx() * other.group9().zxy()).extend_to_4(other[e125] * self[e3])
                - (other.group1().zxy() * self.group6().yzx()).extend_to_4(other[e25] * self[e31])
                - (other.group6().zxy() * self.group1().yzx()).extend_to_4(other[e15] * self[e4235]),
            // e1234
            (other[scalar] * self[e1234])
                + (other[e45] * self[e1234])
                + (other[e41] * self[e4235])
                + (other[e42] * self[e4315])
                + (other[e43] * self[e4125])
                + (other[e415] * self[e423])
                + (other[e425] * self[e431])
                + (other[e435] * self[e412])
                + (other[e321] * self[e4])
                + (other[e423] * self[e1])
                + (other[e423] * self[e415])
                + (other[e431] * self[e2])
                + (other[e431] * self[e425])
                + (other[e412] * self[e3])
                + (other[e412] * self[e435])
                + (other[e1234] * self[scalar])
                - (other[e12345] * self[e4])
                - (other[e1] * self[e423])
                - (other[e2] * self[e431])
                - (other[e3] * self[e412])
                - (other[e4] * self[e12345])
                - (other[e4] * self[e321])
                - (other[e41] * self[e23])
                - (other[e42] * self[e31])
                - (other[e43] * self[e12])
                - (other[e23] * self[e41])
                - (other[e31] * self[e42])
                - (other[e12] * self[e43])
                - (other[e4235] * self[e41])
                - (other[e4315] * self[e42])
                - (other[e4125] * self[e43])
                - (other[e1234] * self[e45]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      169      244        0
    //    simd2       17       17        0
    //    simd3      135      181        0
    //    simd4      120       88        0
    // Totals...
    // yes simd      441      530        0
    //  no simd     1088     1173        0
    fn sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                -(self[e4235] * other[e4235]) - (self[e4315] * other[e4315]) - (self[e4125] * other[e4125]),
                (self[e2] * other[e4315]) + (self[e3] * other[e4125]) + (self[e4] * other[e3215]),
            ]) + (Simd32x2::from([self[e1234], self[e1]]) * other.group0().wx()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e425] * other[e4125]) + (self[e423] * other[e3215]),
                (self[e435] * other[e4235]) + (self[e431] * other[e3215]),
                (self[e415] * other[e4315]) + (self[e412] * other[e3215]),
                self[e412] * other[e4125] * -1.0,
            ]) - (other.group0().xyzx() * self.group0().yy().extend_to_4(self[e12345], self[e423]))
                - (other.group0().yzxy() * self.group6().zxy().extend_to_4(self[e431])),
            // e5
            (self[e12345] * other[e3215]) + (self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125]) - (self[e321] * other[e3215]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e25] * other[e4125]) + (self[e23] * other[e3215]) + (self[e4235] * other[e3215]),
                (self[e35] * other[e4235]) + (self[e31] * other[e3215]) + (self[e4315] * other[e3215]),
                (self[e15] * other[e4315]) + (self[e12] * other[e3215]) + (self[e4125] * other[e3215]),
                -(self[e12] * other[e4125]) - (self[e1234] * other[e3215]),
            ]) - (other.group0().xyzy() * self.group9().www().extend_to_4(self[e31]))
                - (other.group0().yzxx() * self.group3().zxy().extend_to_4(self[e23])),
            // e41, e42, e43
            (Simd32x3::from(self[e1234]) * other.group0().truncate_to_3()) + (self.group4().zxy() * other.group0().yzx()) - (self.group4().yzx() * other.group0().zxy()),
            // e23, e31, e12
            (Simd32x3::from(self[e45]) * other.group0().truncate_to_3()) + (Simd32x3::from(other[e3215]) * self.group4()) + (self.group9().zxy() * other.group0().yzx())
                - (self.group9().yzx() * other.group0().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(self[e3] * other[e4315]) - (self[e321] * other[e4235]),
                -(self[e1] * other[e4125]) - (self[e321] * other[e4315]),
                -(self[e2] * other[e4235]) - (self[e321] * other[e4125]),
                (self[e425] * other[e4315]) + (self[e435] * other[e4125]),
            ]) + (Simd32x4::from(other[e3215]) * self.group7().extend_to_4(self[e4]))
                + (other.group0().zxyx() * self.group1().yzx().extend_to_4(self[e415])),
            // e423, e431, e412
            (Simd32x3::from(self[e4]) * other.group0().truncate_to_3()) + (self.group7().zxy() * other.group0().yzx()) - (self.group7().yzx() * other.group0().zxy()),
            // e235, e315, e125
            (Simd32x3::from(other[e3215]) * self.group6().truncate_to_3()) + (self.group8().yzx() * other.group0().zxy())
                - (Simd32x3::from(self[e5]) * other.group0().truncate_to_3())
                - (Simd32x3::from(other[e3215]) * self.group1().truncate_to_3())
                - (self.group8().zxy() * other.group0().yzx()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(self[e41] * other[e3215]) - (self[e31] * other[e4125]),
                -(self[e42] * other[e3215]) - (self[e12] * other[e4235]),
                -(self[e43] * other[e3215]) - (self[e23] * other[e4315]),
                (self[e25] * other[e4315]) + (self[e35] * other[e4125]) + (self[e45] * other[e3215]),
            ]) + (Simd32x4::from(self[scalar]) * other.group0())
                + (other.group0().yzxx() * self.group5().zxy().extend_to_4(self[e15])),
            // e1234
            -(self[e41] * other[e4235]) - (self[e42] * other[e4315]) - (self[e43] * other[e4125]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      154      237        0
    //    simd2       19       19        0
    //    simd3      140      188        0
    //    simd4      127       93        0
    // Totals...
    // yes simd      440      537        0
    //  no simd     1120     1211        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([-(self[e4] * other[e5]) - (self[e5] * other[e4]), (self[e3215] * other[e4]) + (self[e1234] * other[e5])])
                + (Simd32x2::from(other[e1]) * Simd32x2::from([self[e1], self[e4235]]))
                + (Simd32x2::from(other[e2]) * Simd32x2::from([self[e2], self[e4315]]))
                + (Simd32x2::from(other[e3]) * Simd32x2::from([self[e3], self[e4125]])),
            // e1, e2, e3, e4
            Simd32x4::from([self[e15] * other[e4] * -1.0, self[e25] * other[e4] * -1.0, self[e35] * other[e4] * -1.0, self[e43] * other[e3]])
                + (Simd32x4::from(self[scalar]) * other.group0())
                + (Simd32x4::from([other[e5], other[e5], other[e5], other[e1]]) * self.group4().extend_to_4(self[e41]))
                + (other.group0().yzxy() * self.group5().zxy().extend_to_4(self[e42]))
                - (other.group0().zxyw() * self.group5().yzx().extend_to_4(self[e45])),
            // e5
            (self[scalar] * other[e5]) + (self[e45] * other[e5]) - (self[e15] * other[e1]) - (self[e25] * other[e2]) - (self[e35] * other[e3]),
            // e15, e25, e35, e45
            Simd32x4::from([self[e1] * other[e5], self[e2] * other[e5], self[e3] * other[e5], self[e5] * other[e4] * -1.0])
                + (self.group8().yzx() * other.group0().zxy()).extend_to_4(self[e4] * other[e5])
                - (Simd32x4::from([self[e5], self[e5], self[e5], other[e3]]) * other.group0().truncate_to_3().extend_to_4(self[e435]))
                - (Simd32x4::from([other[e5], other[e5], other[e5], other[e2]]) * self.group6().xyzy())
                - (other.group0().yzxx() * self.group8().zxy().extend_to_4(self[e415])),
            // e41, e42, e43
            (Simd32x3::from(self[e4]) * other.group0().truncate_to_3()) + (self.group7().zxy() * other.group0().yzx())
                - (Simd32x3::from(other[e4]) * self.group1().truncate_to_3())
                - (Simd32x3::from(other[e4]) * self.group6().truncate_to_3())
                - (self.group7().yzx() * other.group0().zxy()),
            // e23, e31, e12
            (self.group1().yzx() * other.group0().zxy())
                - (Simd32x3::from(self[e321]) * other.group0().truncate_to_3())
                - (Simd32x3::from(other[e4]) * self.group8())
                - (Simd32x3::from(other[e5]) * self.group7())
                - (self.group1().zxy() * other.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e15] * other[e4]) + (self[e4315] * other[e3]),
                (self[e25] * other[e4]) + (self[e4125] * other[e1]),
                (self[e35] * other[e4]) + (self[e4235] * other[e2]),
                -(self[e12] * other[e3]) - (self[e3215] * other[e4]),
            ]) + (Simd32x4::from(other[e5]) * self.group4().extend_to_4(self[e1234]))
                - (other.group0().xyzx() * self.group3().www().extend_to_4(self[e23]))
                - (other.group0().yzxy() * self.group9().zxy().extend_to_4(self[e31])),
            // e423, e431, e412
            (Simd32x3::from(other[e4]) * self.group5()) + (self.group4().yzx() * other.group0().zxy())
                - (Simd32x3::from(self[e1234]) * other.group0().truncate_to_3())
                - (Simd32x3::from(other[e4]) * self.group9().truncate_to_3())
                - (self.group4().zxy() * other.group0().yzx()),
            // e235, e315, e125
            (Simd32x3::from(self[e3215]) * other.group0().truncate_to_3())
                + (Simd32x3::from(other[e5]) * self.group5())
                + (Simd32x3::from(other[e5]) * self.group9().truncate_to_3())
                + (self.group3().zxy() * other.group0().yzx())
                - (self.group3().yzx() * other.group0().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e425] * other[e3] * -1.0, self[e435] * other[e1] * -1.0, self[e415] * other[e2] * -1.0, self[e321] * other[e5]])
                + (Simd32x4::from([other[e5], other[e5], other[e5], other[e2]]) * self.group7().extend_to_4(self[e315]))
                + (other.group0().xyzx() * self.group0().yy().extend_to_4(self[e12345], self[e235]))
                + (other.group0().yzxz() * self.group6().zxy().extend_to_4(self[e125]))
                - (self.group8() * other.group0().www()).extend_to_4(self[e12345] * other[e5]),
            // e1234
            -(self[e12345] * other[e4]) - (self[e321] * other[e4]) - (self[e423] * other[e1]) - (self[e431] * other[e2]) - (self[e412] * other[e3]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      140      196        0
    //    simd2       16       17        0
    //    simd3      124      170        0
    //    simd4      112       84        0
    // Totals...
    // yes simd      392      467        0
    //  no simd      992     1076        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(other[scalar]) * self.group0(),
            // e1, e2, e3, e4
            Simd32x4::from(other[scalar]) * self.group1(),
            // e5
            self[e5] * other[scalar],
            // e15, e25, e35, e45
            Simd32x4::from(other[scalar]) * self.group3(),
            // e41, e42, e43
            Simd32x3::from(other[scalar]) * self.group4(),
            // e23, e31, e12
            Simd32x3::from(other[scalar]) * self.group5(),
            // e415, e425, e435, e321
            Simd32x4::from(other[scalar]) * self.group6(),
            // e423, e431, e412
            Simd32x3::from(other[scalar]) * self.group7(),
            // e235, e315, e125
            Simd32x3::from(other[scalar]) * self.group8(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[scalar]) * self.group9(),
            // e1234
            self[e1234] * other[scalar],
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      160      236        0
    //    simd2       18       18        0
    //    simd3      140      189        0
    //    simd4      126       92        0
    // Totals...
    // yes simd      444      535        0
    //  no simd     1120     1207        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                -(self[e4235] * other[e4235]) - (self[e4315] * other[e4315]) - (self[e4125] * other[e4125]),
                (self[e2] * other[e4315]) + (self[e3] * other[e4125]) + (self[e4] * other[e3215]),
            ]) + (Simd32x2::from(other[e1234]) * Simd32x2::from([self[e3215], self[e5]]))
                + (Simd32x2::from([self[e1234], self[e1]]) * other.group0().wx()),
            // e1, e2, e3, e4
            (self.group6().yzxw() * other.group0().zxy().extend_to_4(other[e1234])) + (self.group7() * other.group0().www()).extend_to_4(self[e12345] * other[e1234])
                - (Simd32x4::from([other[e1234], other[e1234], other[e1234], other[e4315]]) * self.group8().extend_to_4(self[e431]))
                - (other.group0().xyzx() * self.group0().yy().extend_to_4(self[e12345], self[e423]))
                - (other.group0().yzxz() * self.group6().zxy().extend_to_4(self[e412])),
            // e5
            (self[e12345] * other[e3215]) + (self[e235] * other[e4235]) + (self[e315] * other[e4315]) + (self[e125] * other[e4125]) - (self[e321] * other[e3215]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e25] * other[e4125]) + (self[e4235] * other[e3215]),
                (self[e35] * other[e4235]) + (self[e4315] * other[e3215]),
                (self[e15] * other[e4315]) + (self[e4125] * other[e3215]),
                -(self[e12] * other[e4125]) - (self[e1234] * other[e3215]),
            ]) + (self.group5() * other.group0().www()).extend_to_4(self[e3215] * other[e1234])
                - (other.group0().xyzy() * self.group9().www().extend_to_4(self[e31]))
                - (other.group0().yzxx() * self.group3().zxy().extend_to_4(self[e23])),
            // e41, e42, e43
            (Simd32x3::from(self[e1234]) * other.group0().truncate_to_3()) + (Simd32x3::from(other[e1234]) * self.group5()) + (self.group4().zxy() * other.group0().yzx())
                - (Simd32x3::from(other[e1234]) * self.group9().truncate_to_3())
                - (self.group4().yzx() * other.group0().zxy()),
            // e23, e31, e12
            (Simd32x3::from(self[e45]) * other.group0().truncate_to_3())
                + (Simd32x3::from(other[e3215]) * self.group4())
                + (Simd32x3::from(other[e1234]) * self.group3().truncate_to_3())
                + (self.group9().zxy() * other.group0().yzx())
                - (self.group9().yzx() * other.group0().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e321] * other[e4235] * -1.0,
                self[e321] * other[e4315] * -1.0,
                self[e321] * other[e4125] * -1.0,
                self[e435] * other[e4125],
            ]) + (Simd32x4::from(other[e3215]) * self.group7().extend_to_4(self[e4]))
                + (Simd32x4::from([other[e1234], other[e1234], other[e1234], other[e4235]]) * self.group8().extend_to_4(self[e415]))
                + (other.group0().zxyy() * self.group1().yzx().extend_to_4(self[e425]))
                - (self.group1().zxy() * other.group0().yzx()).extend_to_4(self[e5] * other[e1234]),
            // e423, e431, e412
            (Simd32x3::from(self[e4]) * other.group0().truncate_to_3())
                + (Simd32x3::from(other[e1234]) * self.group1().truncate_to_3())
                + (Simd32x3::from(other[e1234]) * self.group6().truncate_to_3())
                + (self.group7().zxy() * other.group0().yzx())
                - (self.group7().yzx() * other.group0().zxy()),
            // e235, e315, e125
            (Simd32x3::from(other[e3215]) * self.group6().truncate_to_3()) + (self.group8().yzx() * other.group0().zxy())
                - (Simd32x3::from(self[e5]) * other.group0().truncate_to_3())
                - (Simd32x3::from(other[e3215]) * self.group1().truncate_to_3())
                - (self.group8().zxy() * other.group0().yzx()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(self[e41] * other[e3215]) - (self[e31] * other[e4125]),
                -(self[e42] * other[e3215]) - (self[e12] * other[e4235]),
                -(self[e43] * other[e3215]) - (self[e23] * other[e4315]),
                (self[e35] * other[e4125]) + (self[e45] * other[e3215]),
            ]) + (Simd32x4::from(self[scalar]) * other.group0())
                + (Simd32x4::from([other[e1234], other[e1234], other[e1234], other[e4315]]) * self.group3().xyzy())
                + (other.group0().yzxx() * self.group5().zxy().extend_to_4(self[e15])),
            // e1234
            (self[scalar] * other[e1234]) - (self[e45] * other[e1234]) - (self[e41] * other[e4235]) - (self[e42] * other[e4315]) - (self[e43] * other[e4125]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      188      268        0
    //    simd2       24       24        0
    //    simd3      184      248        0
    //    simd4      171      124        0
    // Totals...
    // yes simd      567      664        0
    //  no simd     1472     1556        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e415] * other[e415])
                    + (self[e425] * other[e425])
                    + (self[e435] * other[e435])
                    + (self[e431] * other[e315])
                    + (self[e412] * other[e125])
                    + (self[e315] * other[e431])
                    + (self[e125] * other[e412])
                    - (self[e5] * other[e4]),
                (self[e3215] * other[e4])
                    - (self[e25] * other[e431])
                    - (self[e35] * other[e412])
                    - (self[e45] * other[e321])
                    - (self[e42] * other[e315])
                    - (self[e43] * other[e125])
                    - (self[e31] * other[e425])
                    - (self[e12] * other[e435]),
            ]) + (Simd32x2::from(other[e1]) * Simd32x2::from([self[e1], self[e4235]]))
                + (Simd32x2::from(other[e2]) * Simd32x2::from([self[e2], self[e4315]]))
                + (Simd32x2::from(other[e3]) * Simd32x2::from([self[e3], self[e4125]]))
                + (Simd32x2::from([self[e423], self[e1234]]) * other.group2().xw())
                + (Simd32x2::from([self[e235], self[scalar]]) * other.group0().xw())
                - (Simd32x2::from([self[e12345], self[e15]]) * other.group0().wx())
                - (Simd32x2::from([self[e4], self[e41]]) * other.group2().wx())
                - (Simd32x2::from([self[e321], self[e23]]) * other.group1().wx()),
            // e1, e2, e3, e4
            (Simd32x4::from(self[scalar]) * other.group3())
                + (Simd32x4::from(self[e1234]) * other.group2().truncate_to_3().extend_to_4(other[e12345]))
                + (Simd32x4::from([other[e321], other[e3], other[e1], other[e3]]) * self.group5().xxy().extend_to_4(self[e43]))
                + (Simd32x4::from([other[e2], other[e321], other[e321], other[e423]]) * self.group5().zyz().extend_to_4(self[e4235]))
                + (self.group9().yzxz() * other.group1().zxy().extend_to_4(other[e412]))
                + (other.group0().zxyy() * self.group3().yzx().extend_to_4(self[e4315]))
                + (self.group4().xxy() * other.group2().wzx()).extend_to_4(self[e41] * other[e1])
                + (self.group4().zyz() * other.group2().yww()).extend_to_4(self[e42] * other[e2])
                - (Simd32x4::from([other[e431], other[e4], other[e4], other[e423]]) * self.group3().zyz().extend_to_4(self[e23]))
                - (Simd32x4::from([other[e12345], other[e435], other[e415], other[e412]]) * self.group9().xxy().extend_to_4(self[e12]))
                - (Simd32x4::from([other[e425], other[e12345], other[e12345], other[e4]]) * self.group9().zyz().extend_to_4(self[e45]))
                - (Simd32x4::from([other[e4], other[e412], other[e423], other[e435]]) * self.group3().xxy().extend_to_4(self[e43]))
                - (self.group4().yzx() * other.group2().zxy()).extend_to_4(self[e41] * other[e415])
                - (self.group5().yzx() * other.group3().zxy()).extend_to_4(self[e42] * other[e425])
                - (self.group3().www() * other.group1().truncate_to_3()).extend_to_4(self[e31] * other[e431])
                - (self.group9().www() * other.group0().truncate_to_3()).extend_to_4(self[e1234] * other[e321]),
            // e5
            (self[scalar] * other[e5]) + (self[e45] * other[e5]) + (self[e3215] * other[e12345]) + (self[e3215] * other[e321])
                - (self[e15] * other[e415])
                - (self[e15] * other[e1])
                - (self[e25] * other[e425])
                - (self[e25] * other[e2])
                - (self[e35] * other[e435])
                - (self[e35] * other[e3])
                - (self[e23] * other[e235])
                - (self[e31] * other[e315])
                - (self[e12] * other[e125])
                - (self[e4235] * other[e235])
                - (self[e4315] * other[e315])
                - (self[e4125] * other[e125]),
            // e15, e25, e35, e45
            (Simd32x4::from(self[e321]) * other.group2().truncate_to_3().extend_to_4(other[e12345]))
                + (other.group1().zxyw() * self.group8().yzx().extend_to_4(self[e12345]))
                + (other.group2().zxyw() * self.group6().yzx().extend_to_4(self[e4]))
                + (self.group8().yzx() * other.group3().zxy()).extend_to_4(self[e235] * other[e423])
                + (self.group1().xxy() * other.group2().wzx()).extend_to_4(self[e315] * other[e431])
                + (self.group1().zyz() * other.group2().yww()).extend_to_4(self[e125] * other[e412])
                - (Simd32x4::from(self[e5]) * other.group3())
                - (Simd32x4::from([self[e5], self[e5], self[e5], other[e3]]) * other.group1().truncate_to_3().extend_to_4(self[e435]))
                - (Simd32x4::from([other[e12345], other[e435], other[e415], other[e315]]) * self.group8().xxy().extend_to_4(self[e431]))
                - (Simd32x4::from([other[e425], other[e12345], other[e12345], other[e415]]) * self.group8().zyz().extend_to_4(self[e1]))
                - (Simd32x4::from([other[e321], other[e3], other[e1], other[e125]]) * self.group8().xxy().extend_to_4(self[e412]))
                - (Simd32x4::from([other[e2], other[e321], other[e321], other[e425]]) * self.group8().zyz().extend_to_4(self[e2]))
                - (self.group1().yzxz() * other.group2().zxy().extend_to_4(other[e435]))
                - (self.group6().xxyx() * other.group2().wzx().extend_to_4(other[e1]))
                - (self.group6().zyzy() * other.group2().yww().extend_to_4(other[e2]))
                - (other.group2().xyzx() * self.group0().yy().extend_to_4(self[e12345], self[e423])),
            // e41, e42, e43
            (Simd32x3::from(self[e4]) * other.group3().truncate_to_3())
                + (Simd32x3::from(self[e423]) * Simd32x3::from([other[e321], other[e3], other[e425]]))
                + (Simd32x3::from(self[e431]) * Simd32x3::from([other[e435], other[e321], other[e1]]))
                + (Simd32x3::from(self[e412]) * Simd32x3::from([other[e2], other[e415], other[e321]]))
                + (self.group1().yzx() * other.group0().zxy())
                + (self.group6().yzx() * other.group0().zxy())
                - (Simd32x3::from(self[e12345]) * other.group0().truncate_to_3())
                - (Simd32x3::from(self[e4]) * other.group1().truncate_to_3())
                - (Simd32x3::from(self[e321]) * other.group0().truncate_to_3())
                - (Simd32x3::from(self[e423]) * Simd32x3::from([other[e12345], other[e435], other[e2]]))
                - (Simd32x3::from(self[e431]) * Simd32x3::from([other[e3], other[e12345], other[e415]]))
                - (Simd32x3::from(self[e412]) * Simd32x3::from([other[e425], other[e1], other[e12345]]))
                - (Simd32x3::from([other[e431], other[e4], other[e4]]) * self.group1().zyz())
                - (Simd32x3::from([other[e431], other[e4], other[e4]]) * self.group6().zyz())
                - (Simd32x3::from([other[e4], other[e412], other[e423]]) * self.group1().xxy())
                - (Simd32x3::from([other[e4], other[e412], other[e423]]) * self.group6().xxy()),
            // e23, e31, e12
            (self.group7().yzx() * other.group2().zxy())
                + (self.group8().yzx() * other.group0().zxy())
                + (self.group1().yzx() * other.group3().zxy())
                + (self.group6().yzx() * other.group1().zxy())
                - (Simd32x3::from(self[e12345]) * other.group1().truncate_to_3())
                - (Simd32x3::from(self[e4]) * other.group2().truncate_to_3())
                - (Simd32x3::from(self[e5]) * other.group0().truncate_to_3())
                - (Simd32x3::from(self[e321]) * other.group3().truncate_to_3())
                - (Simd32x3::from([other[e431], other[e4], other[e4]]) * self.group8().zyz())
                - (Simd32x3::from([other[e12345], other[e435], other[e415]]) * self.group6().xxy())
                - (Simd32x3::from([other[e425], other[e12345], other[e12345]]) * self.group6().zyz())
                - (Simd32x3::from([other[e321], other[e3], other[e1]]) * self.group1().xxy())
                - (Simd32x3::from([other[e2], other[e321], other[e321]]) * self.group1().zyz())
                - (Simd32x3::from([other[e4], other[e412], other[e423]]) * self.group8().xxy())
                - (self.group7().xxy() * other.group2().wzx())
                - (self.group7().zyz() * other.group2().yww()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e3215] * other[e423]) + (self[e1234] * other[e235]),
                (self[e3215] * other[e431]) + (self[e1234] * other[e315]),
                (self[e3215] * other[e412]) + (self[e1234] * other[e125]),
                -(self[e45] * other[e12345]) - (self[e3215] * other[e4]),
            ]) + (Simd32x4::from(self[scalar]) * other.group1())
                + (Simd32x4::from([other[e431], other[e4], other[e4], other[e435]]) * self.group3().zyz().extend_to_4(self[e4125]))
                + (Simd32x4::from([other[e12345], other[e435], other[e415], other[e412]]) * self.group5().xxy().extend_to_4(self[e35]))
                + (Simd32x4::from([other[e425], other[e12345], other[e12345], other[e415]]) * self.group5().zyz().extend_to_4(self[e4235]))
                + (Simd32x4::from([other[e4], other[e412], other[e423], other[e425]]) * self.group3().xxy().extend_to_4(self[e4315]))
                + (self.group4().xxy() * other.group2().wzx()).extend_to_4(self[e15] * other[e423])
                + (self.group4().zyz() * other.group2().yww()).extend_to_4(self[e25] * other[e431])
                + (self.group9().yzx() * other.group3().zxy()).extend_to_4(self[e1234] * other[e5])
                - (Simd32x4::from([other[e321], other[e3], other[e1], other[e2]]) * self.group9().xxy().extend_to_4(self[e31]))
                - (Simd32x4::from([other[e2], other[e321], other[e321], other[e3]]) * self.group9().zyz().extend_to_4(self[e12]))
                - (other.group2().zxyx() * self.group4().yzx().extend_to_4(self[e41]))
                - (other.group3().xyzx() * self.group3().www().extend_to_4(self[e23]))
                - (self.group5().yzx() * other.group1().zxy()).extend_to_4(self[e42] * other[e315])
                - (self.group3().yzx() * other.group0().zxy()).extend_to_4(self[e43] * other[e125]),
            // e423, e431, e412
            (Simd32x3::from(self[scalar]) * other.group0().truncate_to_3())
                + (Simd32x3::from(self[e41]) * Simd32x3::from([other[e12345], other[e435], other[e2]]))
                + (Simd32x3::from(self[e42]) * Simd32x3::from([other[e3], other[e12345], other[e415]]))
                + (Simd32x3::from(self[e43]) * Simd32x3::from([other[e425], other[e1], other[e12345]]))
                + (Simd32x3::from(self[e1234]) * other.group1().truncate_to_3())
                + (Simd32x3::from([other[e431], other[e4], other[e4]]) * self.group5().zyz())
                + (Simd32x3::from([other[e4], other[e412], other[e423]]) * self.group5().xxy())
                + (self.group9().yzx() * other.group0().zxy())
                - (Simd32x3::from(self[e45]) * other.group0().truncate_to_3())
                - (Simd32x3::from(self[e41]) * Simd32x3::from([other[e321], other[e3], other[e425]]))
                - (Simd32x3::from(self[e42]) * Simd32x3::from([other[e435], other[e321], other[e1]]))
                - (Simd32x3::from(self[e43]) * Simd32x3::from([other[e2], other[e415], other[e321]]))
                - (Simd32x3::from(self[e1234]) * other.group3().truncate_to_3())
                - (Simd32x3::from([other[e431], other[e4], other[e4]]) * self.group9().zyz())
                - (Simd32x3::from([other[e4], other[e412], other[e423]]) * self.group9().xxy())
                - (self.group5().yzx() * other.group0().zxy()),
            // e235, e315, e125
            (Simd32x3::from(self[scalar]) * other.group2().truncate_to_3())
                + (Simd32x3::from(self[e45]) * other.group2().truncate_to_3())
                + (Simd32x3::from(self[e3215]) * other.group1().truncate_to_3())
                + (Simd32x3::from(self[e3215]) * other.group3().truncate_to_3())
                + (Simd32x3::from([other[e12345], other[e435], other[e415]]) * self.group3().xxy())
                + (Simd32x3::from([other[e425], other[e12345], other[e12345]]) * self.group3().zyz())
                + (Simd32x3::from([other[e321], other[e3], other[e1]]) * self.group3().xxy())
                + (Simd32x3::from([other[e2], other[e321], other[e321]]) * self.group3().zyz())
                + (self.group5().xxy() * other.group2().wzx())
                + (self.group5().zyz() * other.group2().yww())
                + (self.group9().xxy() * other.group2().wzx())
                + (self.group9().zyz() * other.group2().yww())
                - (self.group5().yzx() * other.group2().zxy())
                - (self.group3().yzx() * other.group1().zxy())
                - (self.group3().yzx() * other.group3().zxy())
                - (self.group9().yzx() * other.group2().zxy()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[e321]) * other.group1().truncate_to_3().extend_to_4(other[e5]))
                + (Simd32x4::from([other[e12345], other[e435], other[e415], other[e435]]) * self.group1().xxy().extend_to_4(self[e125]))
                + (Simd32x4::from([other[e425], other[e12345], other[e12345], other[e3]]) * self.group1().zyz().extend_to_4(self[e125]))
                + (Simd32x4::from([other[e321], other[e3], other[e1], other[e315]]) * self.group6().xxyy())
                + (Simd32x4::from([other[e2], other[e321], other[e321], other[e125]]) * self.group6().zyzz())
                + (other.group2().xyzx() * self.group1().www().extend_to_4(self[e415]))
                + (self.group0().yy().extend_to_4(self[e12345], self[e235]) * other.group3().truncate_to_3().extend_to_4(other[e415]))
                + (self.group7().xxy() * other.group2().wzx()).extend_to_4(self[e235] * other[e1])
                + (self.group7().zyz() * other.group2().yww()).extend_to_4(self[e315] * other[e425])
                + (self.group8().yzx() * other.group0().zxy()).extend_to_4(self[e315] * other[e2])
                - (Simd32x4::from(self[e5]) * other.group0().truncate_to_3().extend_to_4(other[e321]))
                - (Simd32x4::from([other[e431], other[e4], other[e4], other[e315]]) * self.group8().zyz().extend_to_4(self[e2]))
                - (Simd32x4::from([other[e4], other[e412], other[e423], other[e235]]) * self.group8().xxy().extend_to_4(self[e1]))
                - (self.group1().yzxz() * other.group1().zxy().extend_to_4(other[e125]))
                - (other.group2().zxyw() * self.group7().yzx().extend_to_4(self[e12345]))
                - (self.group6().yzx() * other.group3().zxy()).extend_to_4(self[e5] * other[e12345]),
            // e1234
            (self[e1] * other[e423])
                + (self[e2] * other[e431])
                + (self[e3] * other[e412])
                + (self[e4] * other[e321])
                + (self[e415] * other[e423])
                + (self[e425] * other[e431])
                + (self[e435] * other[e412])
                + (self[e423] * other[e415])
                + (self[e431] * other[e425])
                + (self[e412] * other[e435])
                - (self[e12345] * other[e4])
                - (self[e4] * other[e12345])
                - (self[e321] * other[e4])
                - (self[e423] * other[e1])
                - (self[e431] * other[e2])
                - (self[e412] * other[e3]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      216      301        0
    //    simd2       28       28        0
    //    simd3      184      241        0
    //    simd4      162      119        0
    // Totals...
    // yes simd      590      689        0
    //  no simd     1472     1556        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e45] * other[e45]) - (self[e4235] * other[e4235]) - (self[e4315] * other[e4315]) - (self[e4125] * other[e4125]),
                (self[e2] * other[e4315]) + (self[e3] * other[e4125]) + (self[e4] * other[e3215]) - (self[e321] * other[e45]),
            ]) + (Simd32x2::from(other[scalar]) * self.group0())
                + (Simd32x2::from(other[e1234]) * Simd32x2::from([self[e3215], self[e5]]))
                + (Simd32x2::from([self[e1234], self[e1]]) * other.group3().wx())
                - (Simd32x2::from(other[e41]) * Simd32x2::from([self[e15], self[e235]]))
                - (Simd32x2::from(other[e42]) * Simd32x2::from([self[e25], self[e315]]))
                - (Simd32x2::from(other[e43]) * Simd32x2::from([self[e35], self[e125]]))
                - (Simd32x2::from(other[e23]) * Simd32x2::from([self[e23], self[e415]]))
                - (Simd32x2::from(other[e31]) * Simd32x2::from([self[e31], self[e425]]))
                - (Simd32x2::from(other[e12]) * Simd32x2::from([self[e12], self[e435]]))
                - (Simd32x2::from(other[e15]) * Simd32x2::from([self[e41], self[e423]]))
                - (Simd32x2::from(other[e25]) * Simd32x2::from([self[e42], self[e431]]))
                - (Simd32x2::from(other[e35]) * Simd32x2::from([self[e43], self[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e3] * other[e31]) + (self[e4] * other[e15]) + (self[e425] * other[e4125]) + (self[e321] * other[e23]),
                (self[e2] * other[scalar]) + (self[e4] * other[e25]) + (self[e435] * other[e4235]) + (self[e321] * other[e31]),
                (self[e3] * other[scalar]) + (self[e4] * other[e35]) + (self[e415] * other[e4315]) + (self[e321] * other[e12]),
                -(self[e3] * other[e43]) - (self[e415] * other[e41]) - (self[e425] * other[e42]) - (self[e435] * other[e43]),
            ]) + (Simd32x4::from([other[scalar], other[e12], other[e23], other[e1234]]) * self.group1().xxy().extend_to_4(self[e321]))
                + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[scalar]]) * self.group7().zyz().extend_to_4(self[e4]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e1234]]) * self.group7().xxy().extend_to_4(self[e12345]))
                + (self.group8().yzx() * other.group0().zxy()).extend_to_4(self[e4] * other[e45])
                - (Simd32x4::from([self[e5], self[e5], self[e5], other[e42]]) * other.group0().truncate_to_3().extend_to_4(self[e2]))
                - (Simd32x4::from([other[e42], other[e1234], other[e1234], other[e4315]]) * self.group8().zyz().extend_to_4(self[e431]))
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e4125]]) * self.group6().xxy().extend_to_4(self[e412]))
                - (Simd32x4::from([other[e1234], other[e43], other[e41], other[e31]]) * self.group8().xxy().extend_to_4(self[e431]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e41]]) * self.group6().zyz().extend_to_4(self[e1]))
                - (other.group1().zxyz() * self.group1().yzx().extend_to_4(self[e412]))
                - (self.group0().yy().extend_to_4(self[e12345], self[e423]) * other.group3().truncate_to_3().extend_to_4(other[e23]))
                - (self.group7().yzx() * other.group2().zxy()).extend_to_4(self[e423] * other[e4235]),
            // e5
            (self[e12345] * other[e3215])
                + (self[e1] * other[e15])
                + (self[e2] * other[e25])
                + (self[e3] * other[e35])
                + (self[e5] * other[scalar])
                + (self[e235] * other[e4235])
                + (self[e315] * other[e4315])
                + (self[e125] * other[e4125])
                - (self[e5] * other[e45])
                - (self[e415] * other[e15])
                - (self[e425] * other[e25])
                - (self[e435] * other[e35])
                - (self[e321] * other[e3215])
                - (self[e235] * other[e23])
                - (self[e315] * other[e31])
                - (self[e125] * other[e12]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e45] * other[e15]) + (self[e4235] * other[e3215]) + (self[e4125] * other[e25]) + (self[e3215] * other[e23]),
                (self[e45] * other[e25]) + (self[e4235] * other[e35]) + (self[e4315] * other[e3215]) + (self[e3215] * other[e31]),
                (self[e45] * other[e35]) + (self[e4315] * other[e15]) + (self[e4125] * other[e3215]) + (self[e3215] * other[e12]),
                -(self[e4235] * other[e23]) - (self[e4315] * other[e31]) - (self[e4125] * other[e12]) - (self[e1234] * other[e3215]),
            ]) + (Simd32x4::from(self[scalar]) * other.group2().truncate_to_3().extend_to_4(other[e45]))
                + (Simd32x4::from([other[scalar], other[e12], other[e4315], other[e35]]) * self.group3().xxx().extend_to_4(self[e43]))
                + (Simd32x4::from([other[e31], other[e4235], other[scalar], other[e1234]]) * self.group3().zzz().extend_to_4(self[e3215]))
                + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e25]]) * self.group5().zyz().extend_to_4(self[e42]))
                + (Simd32x4::from([other[e4125], other[scalar], other[e23], other[scalar]]) * self.group3().yyyw())
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e15]]) * self.group5().xxy().extend_to_4(self[e41]))
                - (Simd32x4::from([other[e45], other[e4125], other[e31], other[e4315]]) * self.group3().xxx().extend_to_4(self[e31]))
                - (Simd32x4::from([other[e4315], other[e23], other[e45], other[e41]]) * self.group3().zzzx())
                - (other.group1().zw().extend_to_4(other[e4235], other[e4125]) * self.group3().yyy().extend_to_4(self[e12]))
                - (self.group5().yzx() * other.group2().zxy()).extend_to_4(self[e23] * other[e4235])
                - (self.group9().yzx() * other.group2().zxy()).extend_to_4(self[e25] * other[e42])
                - (self.group9().www() * other.group3().truncate_to_3()).extend_to_4(self[e35] * other[e43]),
            // e41, e42, e43
            (Simd32x3::from(self[scalar]) * other.group0().truncate_to_3())
                + (Simd32x3::from(self[e1234]) * other.group1().truncate_to_3())
                + (Simd32x3::from(self[e1234]) * other.group3().truncate_to_3())
                + (Simd32x3::from([other[e42], other[e1234], other[e1234]]) * self.group5().zyz())
                + (Simd32x3::from([other[scalar], other[e12], other[e23]]) * self.group4().xxy())
                + (Simd32x3::from([other[e31], other[scalar], other[scalar]]) * self.group4().zyz())
                + (Simd32x3::from([other[e45], other[e4125], other[e4235]]) * self.group4().xxy())
                + (Simd32x3::from([other[e1234], other[e43], other[e41]]) * self.group5().xxy())
                + (Simd32x3::from([other[e4315], other[e45], other[e45]]) * self.group4().zyz())
                + (self.group9().yzx() * other.group0().zxy())
                - (Simd32x3::from(self[e45]) * other.group0().truncate_to_3())
                - (Simd32x3::from([other[e42], other[e1234], other[e1234]]) * self.group9().zyz())
                - (Simd32x3::from([other[e1234], other[e43], other[e41]]) * self.group9().xxy())
                - (self.group4().yzx() * other.group1().zxy())
                - (self.group4().yzx() * other.group3().zxy())
                - (self.group5().yzx() * other.group0().zxy()),
            // e23, e31, e12
            (Simd32x3::from(self[scalar]) * other.group1().truncate_to_3())
                + (Simd32x3::from(self[e45]) * other.group3().truncate_to_3())
                + (Simd32x3::from(self[e3215]) * other.group0().truncate_to_3())
                + (Simd32x3::from(self[e1234]) * other.group2().truncate_to_3())
                + (Simd32x3::from([other[e42], other[e1234], other[e1234]]) * self.group3().zyz())
                + (Simd32x3::from([other[scalar], other[e12], other[e23]]) * self.group5().xxy())
                + (Simd32x3::from([other[e31], other[scalar], other[scalar]]) * self.group5().zyz())
                + (Simd32x3::from([other[e45], other[e4125], other[e4235]]) * self.group9().xxy())
                + (Simd32x3::from([other[e25], other[e3215], other[e3215]]) * self.group4().zyz())
                + (Simd32x3::from([other[e1234], other[e43], other[e41]]) * self.group3().xxy())
                + (Simd32x3::from([other[e4315], other[e45], other[e45]]) * self.group9().zyz())
                + (Simd32x3::from([other[e3215], other[e35], other[e15]]) * self.group4().xxy())
                - (self.group4().yzx() * other.group2().zxy())
                - (self.group5().yzx() * other.group1().zxy())
                - (self.group3().yzx() * other.group0().zxy())
                - (self.group9().yzx() * other.group3().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e5] * other[e41]) + (self[e435] * other[e31]),
                (self[e5] * other[e42]) + (self[e425] * other[scalar]),
                (self[e5] * other[e43]) + (self[e435] * other[scalar]),
                -(self[e3] * other[e12]) - (self[e5] * other[e1234]),
            ]) + (Simd32x4::from([other[e42], other[e1234], other[e1234], other[e4235]]) * self.group8().zyz().extend_to_4(self[e415]))
                + (Simd32x4::from([other[scalar], other[e12], other[e23], other[scalar]]) * self.group6().xxyw())
                + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e43]]) * self.group7().zyz().extend_to_4(self[e125]))
                + (Simd32x4::from([other[e1234], other[e43], other[e41], other[e3215]]) * self.group8().xxy().extend_to_4(self[e4]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e42]]) * self.group7().xxy().extend_to_4(self[e315]))
                + (other.group3().zxyy() * self.group1().yzx().extend_to_4(self[e425]))
                + (self.group0().yy().extend_to_4(self[e12345], self[e235]) * other.group1().truncate_to_3().extend_to_4(other[e41]))
                + (self.group1().www() * other.group2().truncate_to_3()).extend_to_4(self[e435] * other[e4125])
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e25]]) * self.group1().xxy().extend_to_4(self[e431]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e35]]) * self.group1().zyz().extend_to_4(self[e412]))
                - (other.group1().zxyx() * self.group6().yzx().extend_to_4(self[e1]))
                - (self.group7().yzx() * other.group2().zxy()).extend_to_4(self[e12345] * other[e45])
                - (self.group8().yzx() * other.group0().zxy()).extend_to_4(self[e423] * other[e15])
                - (self.group6().www() * other.group3().truncate_to_3()).extend_to_4(self[e2] * other[e31]),
            // e423, e431, e412
            (Simd32x3::from(self[e12345]) * other.group0().truncate_to_3())
                + (Simd32x3::from(self[e4]) * other.group1().truncate_to_3())
                + (Simd32x3::from(self[e4]) * other.group3().truncate_to_3())
                + (Simd32x3::from(self[e321]) * other.group0().truncate_to_3())
                + (Simd32x3::from([other[e42], other[e1234], other[e1234]]) * self.group1().zyz())
                + (Simd32x3::from([other[e42], other[e1234], other[e1234]]) * self.group6().zyz())
                + (Simd32x3::from([other[scalar], other[e12], other[e23]]) * self.group7().xxy())
                + (Simd32x3::from([other[e31], other[scalar], other[scalar]]) * self.group7().zyz())
                + (Simd32x3::from([other[e45], other[e4125], other[e4235]]) * self.group7().xxy())
                + (Simd32x3::from([other[e1234], other[e43], other[e41]]) * self.group1().xxy())
                + (Simd32x3::from([other[e1234], other[e43], other[e41]]) * self.group6().xxy())
                + (Simd32x3::from([other[e4315], other[e45], other[e45]]) * self.group7().zyz())
                - (self.group7().yzx() * other.group1().zxy())
                - (self.group7().yzx() * other.group3().zxy())
                - (self.group1().yzx() * other.group0().zxy())
                - (self.group6().yzx() * other.group0().zxy()),
            // e235, e315, e125
            (Simd32x3::from(self[e12345]) * other.group2().truncate_to_3())
                + (Simd32x3::from(self[e5]) * other.group1().truncate_to_3())
                + (Simd32x3::from(self[e235]) * Simd32x3::from([other[scalar], other[e12], other[e4315]]))
                + (Simd32x3::from(self[e315]) * Simd32x3::from([other[e4125], other[scalar], other[e23]]))
                + (Simd32x3::from(self[e125]) * Simd32x3::from([other[e31], other[e4235], other[scalar]]))
                + (Simd32x3::from([other[e25], other[e3215], other[e3215]]) * self.group6().zyz())
                + (Simd32x3::from([other[e3215], other[e35], other[e15]]) * self.group6().xxy())
                + (self.group1().yzx() * other.group2().zxy())
                - (Simd32x3::from(self[e5]) * other.group3().truncate_to_3())
                - (Simd32x3::from(self[e321]) * other.group2().truncate_to_3())
                - (Simd32x3::from(self[e235]) * Simd32x3::from([other[e45], other[e4125], other[e31]]))
                - (Simd32x3::from(self[e315]) * Simd32x3::from([other[e12], other[e45], other[e4235]]))
                - (Simd32x3::from(self[e125]) * Simd32x3::from([other[e4315], other[e23], other[e45]]))
                - (Simd32x3::from([other[e25], other[e3215], other[e3215]]) * self.group1().zyz())
                - (Simd32x3::from([other[e3215], other[e35], other[e15]]) * self.group1().xxy())
                - (self.group6().yzx() * other.group2().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e45] * other[e23]) + (self[e4235] * other[scalar]) + (self[e4125] * other[e31]) + (self[e3215] * other[e41]),
                (self[e45] * other[e31]) + (self[e4235] * other[e12]) + (self[e4315] * other[scalar]) + (self[e3215] * other[e42]),
                (self[e45] * other[e12]) + (self[e4315] * other[e23]) + (self[e4125] * other[scalar]) + (self[e3215] * other[e43]),
                -(self[e4235] * other[e15]) - (self[e4315] * other[e25]) - (self[e4125] * other[e35]) - (self[e3215] * other[e45]),
            ]) + (Simd32x4::from(self[scalar]) * other.group3())
                + (Simd32x4::from([other[e42], other[e1234], other[e1234], other[scalar]]) * self.group3().zyz().extend_to_4(self[e3215]))
                + (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e4315]]) * self.group5().xxy().extend_to_4(self[e25]))
                + (Simd32x4::from([other[e1234], other[e43], other[e41], other[e3215]]) * self.group3().xxyw())
                + (Simd32x4::from([other[e4315], other[e45], other[e45], other[e4125]]) * self.group5().zyz().extend_to_4(self[e35]))
                + (self.group4().yzx() * other.group2().zxy()).extend_to_4(self[e15] * other[e4235])
                - (Simd32x4::from([self[e1234], self[e1234], self[e1234], other[e12]]) * other.group2().truncate_to_3().extend_to_4(self[e35]))
                - (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e25]]) * self.group4().zyz().extend_to_4(self[e31]))
                - (Simd32x4::from([other[e3215], other[e35], other[e15], other[e15]]) * self.group4().xxy().extend_to_4(self[e23]))
                - (self.group3().yzxx() * other.group0().zxy().extend_to_4(other[e23]))
                - (other.group1().zxyy() * self.group9().yzx().extend_to_4(self[e25]))
                - (self.group5().yzx() * other.group3().zxy()).extend_to_4(self[e12] * other[e35]),
            // e1234
            (self[scalar] * other[e1234])
                + (self[e4235] * other[e41])
                + (self[e4315] * other[e42])
                + (self[e4125] * other[e43])
                + (self[e1234] * other[scalar])
                + (self[e1234] * other[e45])
                - (self[e45] * other[e1234])
                - (self[e41] * other[e23])
                - (self[e41] * other[e4235])
                - (self[e42] * other[e31])
                - (self[e42] * other[e4315])
                - (self[e43] * other[e12])
                - (self[e43] * other[e4125])
                - (self[e23] * other[e41])
                - (self[e31] * other[e42])
                - (self[e12] * other[e43]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl std::ops::Div<sandwich> for Plane {
    type Output = sandwich_partial<Plane>;
    fn div(self, _rhs: sandwich) -> Self::Output {
        sandwich_partial(self)
    }
}
impl Sandwich<AntiCircleRotor> for Plane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       30       62        0
    //    simd3        1        2        0
    //    simd4       10       10        0
    // Totals...
    // yes simd       41       74        0
    //  no simd       73      108        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (other.group0().zxy() * self.group0().yzx()) - (other.group0().yzx() * self.group0().zxy()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e41] * self[e3215]) + (other[e45] * self[e4235]),
                (other[e42] * self[e3215]) + (other[e45] * self[e4315]),
                (other[e43] * self[e3215]) + (other[e45] * self[e4125]),
                -(other[e23] * self[e4235]) - (other[e31] * self[e4315]) - (other[e12] * self[e4125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                other[e35] * self[e4315] * -1.0,
                other[e15] * self[e4125] * -1.0,
                other[e25] * self[e4235] * -1.0,
                other[e43] * self[e4125],
            ]) + (self.group0().zxyy() * other.group2().yzx().extend_to_4(other[e42]))
                + (self.group0().wwwx() * other.group1().truncate_to_3().extend_to_4(other[e41])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e31] * self[e4125]) + (other[scalar] * self[e4235]),
                (other[e12] * self[e4235]) + (other[scalar] * self[e4315]),
                (other[e23] * self[e4315]) + (other[scalar] * self[e4125]),
                -(other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]),
            ]) + (Simd32x4::from(self[e3215]) * other.group0().extend_to_4(other[scalar]))
                - (other.group1().zxyw() * self.group0().yzxw()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for Plane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       67        0
    //    simd4       16       16        0
    // Totals...
    // yes simd       44       83        0
    //  no simd       92      131        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                -(other[e431] * self[e4125]) - (other[e4] * self[e4235]),
                -(other[e412] * self[e4235]) - (other[e4] * self[e4315]),
                -(other[e423] * self[e4315]) - (other[e4] * self[e4125]),
                (other[e1] * self[e4235]) + (other[e2] * self[e4315]) + (other[e3] * self[e4125]),
            ]) + (self.group0().yzxw() * other.group0().zxy().extend_to_4(other[e4])),
            // e415, e425, e435, e321
            Simd32x4::from([
                other[e2] * self[e4125] * -1.0,
                other[e3] * self[e4235] * -1.0,
                other[e1] * self[e4315] * -1.0,
                other[e435] * self[e4125],
            ]) + (self.group0().yzxy() * other.group3().zxy().extend_to_4(other[e425]))
                + (self.group0().wwwx() * other.group0().extend_to_4(other[e415]))
                - (self.group0() * other.group1().www().extend_to_4(other[e4])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e315] * self[e4125]) + (other[e1] * self[e3215]) + (other[e5] * self[e4235]),
                (other[e125] * self[e4235]) + (other[e2] * self[e3215]) + (other[e5] * self[e4315]),
                (other[e235] * self[e4315]) + (other[e3] * self[e3215]) + (other[e5] * self[e4125]),
                -(other[e315] * self[e4315]) - (other[e125] * self[e4125]),
            ]) + (Simd32x4::from(self[e3215]) * other.group1())
                - (other.group2().zxyx() * self.group0().yzxx()),
            // e1, e2, e3, e4
            Simd32x4::from([
                -(other[e423] * self[e3215]) - (other[e425] * self[e4125]),
                -(other[e431] * self[e3215]) - (other[e435] * self[e4235]),
                -(other[e412] * self[e3215]) - (other[e415] * self[e4315]),
                (other[e431] * self[e4315]) + (other[e412] * self[e4125]),
            ]) + (self.group0().yzxx() * other.group1().zxy().extend_to_4(other[e423])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for Plane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       16        0
    //    simd4        3        7        0
    // Totals...
    // yes simd       11       23        0
    //  no simd       20       44        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            other.group0().xx().extend_to_4(other[e3215], 0.0)
                * Simd32x3::from(1.0).extend_to_4(0.0)
                * self.group0().truncate_to_3().extend_to_4(0.0)
                * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[scalar]) * self.group0(),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for Plane {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       18        0
    //    simd4        5        8        0
    // Totals...
    // yes simd       14       26        0
    //  no simd       29       50        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x3::from(1.0).extend_to_4(0.0) * other.group0().www().extend_to_4(0.0) * self.group0().truncate_to_3().extend_to_4(0.0) * Simd32x4::from([-1.0, -1.0, -1.0, 0.0]),
            // e235, e315, e125, e5
            (other.group0().yzxw() * self.group0().zxyw()) + Simd32x3::from(0.0).extend_to_4(-(other[e315] * self[e4315]) - (other[e125] * self[e4125]))
                - (other.group0().zxyx() * self.group0().yzxx()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for Plane {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       32        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       22       38        0
    //  no simd       40       56        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                -(other[e321] * self[e4235]) - (other[e2] * self[e4125]),
                -(other[e321] * self[e4315]) - (other[e3] * self[e4235]),
                -(other[e321] * self[e4125]) - (other[e1] * self[e4315]),
                (other[e2] * self[e4315]) + (other[e3] * self[e4125]),
            ]) + (other.group1().zxyx() * self.group0().yzxx()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e1] * self[e3215]) + (other[e5] * self[e4235]),
                (other[e2] * self[e3215]) + (other[e5] * self[e4315]),
                (other[e3] * self[e3215]) + (other[e5] * self[e4125]),
                -(other[e315] * self[e4315]) - (other[e125] * self[e4125]),
            ]) + (other.group0().yzxw() * self.group0().zxyw())
                - (other.group0().zxyx() * self.group0().yzxx()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for Plane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       29        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       18       34        0
    //  no simd       33       49        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e23] * self[e3215]) + (other[e25] * self[e4125]),
                (other[e31] * self[e3215]) + (other[e35] * self[e4235]),
                (other[e12] * self[e3215]) + (other[e15] * self[e4315]),
                -(other[e31] * self[e4315]) - (other[e12] * self[e4125]),
            ]) - (self.group0().yzxx() * other.group1().zxy().extend_to_4(other[e23])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e31] * self[e4125],
                other[e12] * self[e4235],
                other[e23] * self[e4315],
                -(other[e25] * self[e4315]) - (other[e35] * self[e4125]),
            ]) - (self.group0().yzxx() * other.group0().zxy().extend_to_4(other[e15])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for Plane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       32        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       22       38        0
    //  no simd       40       56        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e23] * self[e3215]) + (other[e25] * self[e4125]) + (other[e3215] * self[e4235]),
                (other[e31] * self[e3215]) + (other[e35] * self[e4235]) + (other[e3215] * self[e4315]),
                (other[e12] * self[e3215]) + (other[e15] * self[e4315]) + (other[e3215] * self[e4125]),
                -(other[e31] * self[e4315]) - (other[e12] * self[e4125]),
            ]) - (self.group0().yzxx() * other.group1().zxy().extend_to_4(other[e23])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[scalar] * self[e4235],
                other[scalar] * self[e4315],
                other[scalar] * self[e4125],
                -(other[e25] * self[e4315]) - (other[e35] * self[e4125]),
            ]) + (other.group0().yzxw() * self.group0().zxyw())
                - (self.group0().yzxx() * other.group0().zxy().extend_to_4(other[e15])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for Plane {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       24        0
    //    simd3        1        2        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       14       30        0
    //  no simd       28       46        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                other[e2] * self[e4125] * -1.0,
                other[e3] * self[e4235] * -1.0,
                other[e1] * self[e4315] * -1.0,
                (other[e2] * self[e4315]) + (other[e3] * self[e4125]),
            ]) + (other.group0().zxyx() * self.group0().yzxx()),
            // e235, e315, e125, e5
            ((Simd32x3::from(other[e5]) * self.group0().truncate_to_3()) + (Simd32x3::from(self[e3215]) * other.group0().truncate_to_3())).extend_to_4(0.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for Plane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        8        0
    //    simd3        1        2        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        3       13        0
    //  no simd        8       26        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from(other[e12345]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for Plane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       48        0
    //    simd3        1        2        0
    //    simd4       14       14        0
    // Totals...
    // yes simd       28       64        0
    //  no simd       72      110        0
    fn sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (other.group0().zxy() * self.group0().yzx()) - (other.group0().yzx() * self.group0().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                other[e321] * self[e4235] * -1.0,
                other[e321] * self[e4315] * -1.0,
                other[e321] * self[e4125] * -1.0,
                (other[e425] * self[e4315]) + (other[e435] * self[e4125]),
            ]) + (self.group0().wwwx() * other.group0().extend_to_4(other[e415])),
            // e235, e315, e125, e4
            Simd32x4::from([
                other[e125] * self[e4315] * -1.0,
                other[e235] * self[e4125] * -1.0,
                other[e315] * self[e4235] * -1.0,
                other[e412] * self[e4125],
            ]) + (self.group0().zxyx() * other.group2().yzx().extend_to_4(other[e423]))
                + (self.group0().wwwy() * other.group1().truncate_to_3().extend_to_4(other[e431])),
            // e1, e2, e3, e5
            (other.group1().zxyw() * self.group0().yzxw()) + Simd32x3::from(0.0).extend_to_4(other[e125] * self[e4125] * -1.0)
                - (self.group0().zxyy() * other.group1().yzx().extend_to_4(other[e315]))
                - (self.group0().wwwx() * other.group0().extend_to_4(other[e235])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for Plane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       47        0
    //    simd3        1        2        0
    //    simd4       15       15        0
    // Totals...
    // yes simd       29       64        0
    //  no simd       76      113        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (other.group0().zxy() * self.group0().yzx()) - (other.group0().yzx() * self.group0().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                other[e321] * self[e4235] * -1.0,
                other[e321] * self[e4315] * -1.0,
                other[e321] * self[e4125] * -1.0,
                (other[e425] * self[e4315]) + (other[e435] * self[e4125]),
            ]) + (self.group0().wwwx() * other.group0().extend_to_4(other[e415])),
            // e235, e315, e125, e4
            Simd32x4::from([
                other[e125] * self[e4315] * -1.0,
                other[e235] * self[e4125] * -1.0,
                other[e315] * self[e4235] * -1.0,
                other[e412] * self[e4125],
            ]) + (self.group0().zxyy() * other.group2().yzx().extend_to_4(other[e431]))
                + (self.group0().wwwx() * other.group1().truncate_to_3().extend_to_4(other[e423])),
            // e1, e2, e3, e5
            (other.group1().zxyw() * self.group0().yzxw()) + Simd32x3::from(0.0).extend_to_4(other[e12345] * self[e3215])
                - (other.group2().wwwz() * self.group0().xyzz())
                - (self.group0().zxyy() * other.group1().yzx().extend_to_4(other[e315]))
                - (self.group0().wwwx() * other.group0().extend_to_4(other[e235])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for Plane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       30       62        0
    //    simd3        1        2        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       40       73        0
    //  no simd       69      104        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (other.group0().zxy() * self.group0().yzx()) - (other.group0().yzx() * self.group0().zxy()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e41] * self[e3215]) + (other[e45] * self[e4235]),
                (other[e42] * self[e3215]) + (other[e45] * self[e4315]),
                (other[e43] * self[e3215]) + (other[e45] * self[e4125]),
                -(other[e23] * self[e4235]) - (other[e31] * self[e4315]) - (other[e12] * self[e4125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                other[e35] * self[e4315] * -1.0,
                other[e15] * self[e4125] * -1.0,
                other[e25] * self[e4235] * -1.0,
                other[e43] * self[e4125],
            ]) + (self.group0().zxyx() * other.group2().yzx().extend_to_4(other[e41]))
                + (self.group0().wwwy() * other.group1().truncate_to_3().extend_to_4(other[e42])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e41] * self[e3215]) + (other[e31] * self[e4125]),
                (other[e42] * self[e3215]) + (other[e12] * self[e4235]),
                (other[e43] * self[e3215]) + (other[e23] * self[e4315]),
                -(other[e45] * self[e3215]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]),
            ]) - (self.group0().yzxx() * other.group1().zxy().extend_to_4(other[e15])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for Plane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       62        0
    //    simd4       16       16        0
    // Totals...
    // yes simd       48       78        0
    //  no simd       96      126        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (self.group0().yzxw() * other.group0().zxy().extend_to_4(other[e1234])) + Simd32x3::from(0.0).extend_to_4(other[e4125] * self[e4125] * -1.0)
                - (self.group0().xyzy() * other.group2().www().extend_to_4(other[e4315]))
                - (self.group0().zxyx() * other.group0().yzx().extend_to_4(other[e4235])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e45] * self[e4235]) + (other[e4315] * self[e4125]),
                (other[e45] * self[e4315]) + (other[e4125] * self[e4235]),
                (other[e45] * self[e4125]) + (other[e4235] * self[e4315]),
                -(other[e31] * self[e4315]) - (other[e12] * self[e4125]),
            ]) + (Simd32x4::from(self[e3215]) * other.group0().extend_to_4(other[e1234]))
                - (self.group0().yzxx() * other.group3().zxy().extend_to_4(other[e23])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(other[e35] * self[e4315]) - (other[e4235] * self[e3215]),
                -(other[e15] * self[e4125]) - (other[e4315] * self[e3215]),
                -(other[e25] * self[e4235]) - (other[e4125] * self[e3215]),
                0.0,
            ]) + (self.group0().xyzz() * other.group3().www().extend_to_4(other[e43]))
                + (self.group0().zxyy() * other.group2().yzx().extend_to_4(other[e42]))
                + (self.group0().wwwx() * other.group1().truncate_to_3().extend_to_4(other[e41])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e41] * self[e3215]) + (other[e31] * self[e4125]),
                (other[e42] * self[e3215]) + (other[e12] * self[e4235]),
                (other[e43] * self[e3215]) + (other[e23] * self[e4315]),
                -(other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]),
            ]) - (other.group1().zxyw() * self.group0().yzxw()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for Plane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       16        0
    //    simd4        3        8        0
    // Totals...
    // yes simd       11       24        0
    //  no simd       20       48        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            other.group0().xx().extend_to_4(other[e5], 0.0)
                * Simd32x3::from(1.0).extend_to_4(0.0)
                * self.group0().truncate_to_3().extend_to_4(0.0)
                * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
            // e1, e2, e3, e5
            Simd32x4::from(other[e12345]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for Plane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       22        0
    //    simd4        5        8        0
    // Totals...
    // yes simd       11       30        0
    //  no simd       26       54        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x3::from(1.0).extend_to_4(0.0) * other.group0().www().extend_to_4(0.0) * self.group0().truncate_to_3().extend_to_4(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                other[e25] * self[e4125],
                other[e35] * self[e4235],
                other[e15] * self[e4315],
                -(other[e25] * self[e4315]) - (other[e35] * self[e4125]) - (other[e45] * self[e3215]),
            ]) - (other.group0().zxyx() * self.group0().yzxx()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for Plane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       32        0
    //    simd4        7        7        0
    // Totals...
    // yes simd       19       39        0
    //  no simd       40       60        0
    fn sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (other[e45] * self[e4235]) + (other[e4315] * self[e4125]),
                (other[e45] * self[e4315]) + (other[e4125] * self[e4235]),
                (other[e45] * self[e4125]) + (other[e4235] * self[e4315]),
                -(other[e4315] * self[e4315]) - (other[e4125] * self[e4125]),
            ]) - (other.group1().zxyx() * self.group0().yzxx()),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (other[e25] * self[e4125]) + (other[e3215] * self[e4235]),
                (other[e35] * self[e4235]) + (other[e3215] * self[e4315]),
                (other[e15] * self[e4315]) + (other[e3215] * self[e4125]),
                -(other[e35] * self[e4125]) - (other[e45] * self[e3215]),
            ]) - (other.group0().zxyx() * self.group0().yzxx())
                - (self.group0().wwwy() * other.group1().truncate_to_3().extend_to_4(other[e25])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for Plane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       28        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       15       34        0
    //  no simd       33       52        0
    fn sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                other[e125] * self[e4315] * -1.0,
                other[e235] * self[e4125] * -1.0,
                other[e315] * self[e4235] * -1.0,
                other[e435] * self[e4125],
            ]) + (self.group0().zxyy() * other.group1().yzx().extend_to_4(other[e425]))
                + (self.group0().wwwx() * other.group0().extend_to_4(other[e415])),
            // e1, e2, e3, e5
            Simd32x4::from([
                other[e435] * self[e4315],
                other[e415] * self[e4125],
                other[e425] * self[e4235],
                -(other[e315] * self[e4315]) - (other[e125] * self[e4125]),
            ]) - (self.group0().zxyx() * other.group0().yzx().extend_to_4(other[e235])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for Plane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       24        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       17       33        0
    //  no simd       44       60        0
    fn sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([other[e125] * self[e4315] * -1.0, other[e235] * self[e4125] * -1.0, other[e315] * self[e4235] * -1.0, 0.0])
                + (other.group0().xyzx() * self.group0().wwwx())
                + (self.group0().xyzz() * other.group1().www().extend_to_4(other[e435]))
                + (self.group0().zxyy() * other.group1().yzx().extend_to_4(other[e425])),
            // e1, e2, e3, e5
            (other.group0().zxyw() * self.group0().yzxw()) + Simd32x3::from(0.0).extend_to_4(other[e125] * self[e4125] * -1.0)
                - (self.group0().xyzy() * other.group0().www().extend_to_4(other[e315]))
                - (self.group0().zxyx() * other.group0().yzx().extend_to_4(other[e235])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for Plane {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       54      100        0
    //    simd2        2        2        0
    //    simd3       22       31        0
    //    simd4       17       16        0
    // Totals...
    // yes simd       95      149        0
    //  no simd      192      261        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                -(other[e4235] * self[e4235]) - (other[e4315] * self[e4315]) - (other[e4125] * self[e4125]),
                (other[e2] * self[e4315]) + (other[e3] * self[e4125]) + (other[e4] * self[e3215]),
            ]) + (Simd32x2::from([other[e1234], other[e1]]) * self.group0().wx()),
            // e1, e2, e3, e4
            Simd32x4::from([
                -(other[e12345] * self[e4235]) - (other[e425] * self[e4125]) - (other[e423] * self[e3215]),
                -(other[e12345] * self[e4315]) - (other[e435] * self[e4235]) - (other[e431] * self[e3215]),
                -(other[e12345] * self[e4125]) - (other[e415] * self[e4315]) - (other[e412] * self[e3215]),
                (other[e431] * self[e4315]) + (other[e412] * self[e4125]),
            ]) + (self.group0().yzxx() * other.group6().zxy().extend_to_4(other[e423])),
            // e5
            (other[e12345] * self[e3215]) + (other[e321] * self[e3215]) - (other[e235] * self[e4235]) - (other[e315] * self[e4315]) - (other[e125] * self[e4125]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e25] * self[e4125]) + (other[e3215] * self[e4235]),
                (other[e35] * self[e4235]) + (other[e3215] * self[e4315]),
                (other[e15] * self[e4315]) + (other[e3215] * self[e4125]),
                other[e12] * self[e4125] * -1.0,
            ]) + (other.group5() * self.group0().www()).extend_to_4(other[e1234] * self[e3215])
                - (self.group0().yzxx() * other.group3().zxy().extend_to_4(other[e23]))
                - (self.group0().wwwy() * other.group9().truncate_to_3().extend_to_4(other[e31])),
            // e41, e42, e43
            (other.group4().zxy() * self.group0().yzx()) - (Simd32x3::from(other[e1234]) * self.group0().truncate_to_3()) - (other.group4().yzx() * self.group0().zxy()),
            // e23, e31, e12
            (Simd32x3::from(other[e45]) * self.group0().truncate_to_3()) + (Simd32x3::from(self[e3215]) * other.group4()) + (other.group9().yzx() * self.group0().zxy())
                - (other.group9().zxy() * self.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                other[e321] * self[e4235] * -1.0,
                other[e321] * self[e4315] * -1.0,
                other[e321] * self[e4125] * -1.0,
                other[e435] * self[e4125],
            ]) + (self.group0().yzxy() * other.group1().zxy().extend_to_4(other[e425]))
                + (self.group0().wwwx() * other.group7().extend_to_4(other[e415]))
                - (other.group1().yzxw() * self.group0().zxyw()),
            // e423, e431, e412
            (other.group7().zxy() * self.group0().yzx()) - (Simd32x3::from(other[e4]) * self.group0().truncate_to_3()) - (other.group7().yzx() * self.group0().zxy()),
            // e235, e315, e125
            (Simd32x3::from(other[e5]) * self.group0().truncate_to_3())
                + (Simd32x3::from(self[e3215]) * other.group1().truncate_to_3())
                + (Simd32x3::from(self[e3215]) * other.group6().truncate_to_3())
                + (other.group8().yzx() * self.group0().zxy())
                - (other.group8().zxy() * self.group0().yzx()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e41] * self[e3215]) + (other[e31] * self[e4125]),
                (other[e42] * self[e3215]) + (other[e12] * self[e4235]),
                (other[e43] * self[e3215]) + (other[e23] * self[e4315]),
                -(other[e25] * self[e4315]) - (other[e35] * self[e4125]) - (other[e45] * self[e3215]),
            ]) + (Simd32x4::from(other[scalar]) * self.group0())
                - (self.group0().yzxx() * other.group5().zxy().extend_to_4(other[e15])),
            // e1234
            (other[e41] * self[e4235]) + (other[e42] * self[e4315]) + (other[e43] * self[e4125]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for Plane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       21        0
    //    simd3        1        2        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       11       28        0
    //  no simd       28       47        0
    fn sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                other[e4315] * self[e4125],
                other[e4125] * self[e4235],
                other[e4235] * self[e4315],
                -(other[e4315] * self[e4315]) - (other[e4125] * self[e4125]),
            ]) - (other.group0().zxyx() * self.group0().yzxx()),
            // e15, e25, e35, e3215
            ((Simd32x3::from(other[e3215]) * self.group0().truncate_to_3()) - (Simd32x3::from(self[e3215]) * other.group0().truncate_to_3())).extend_to_4(0.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for Plane {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       28        0
    //    simd3        2        6        0
    //    simd4        7        7        0
    // Totals...
    // yes simd       16       41        0
    //  no simd       41       74        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[e4]) * self.group0().truncate_to_3() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            ((self.group0().yzx() * other.group0().zxy()) - (self.group0().zxy() * other.group0().yzx())).extend_to_4(self[e3215] * other[e4] * -1.0),
            // e235, e315, e125, e12345
            (Simd32x4::from([other[e5], other[e5], other[e5], other[e1]]) * self.group0().xyzx())
                + (self.group0().wwwy() * other.group0().xyzy())
                + Simd32x3::from(0.0).extend_to_4((self[e4125] * other[e3]) + (self[e3215] * other[e4])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for Plane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd3        1        2        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        3        9        0
    //  no simd        8       19        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from(other[scalar]) * self.group0());
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for Plane {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       29        0
    //    simd3        2        6        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       22       40        0
    //  no simd       41       67        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[e1234]) * self.group0().truncate_to_3() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            ((self.group0().zxy() * other.group0().yzx()) - (self.group0().yzx() * other.group0().zxy())).extend_to_4(self[e3215] * other[e1234]),
            // e15, e25, e35, scalar
            (self.group0() * other.group0().www().extend_to_4(other[e1234])) + Simd32x3::from(0.0).extend_to_4(-(self[e4315] * other[e4315]) - (self[e4125] * other[e4125]))
                - (self.group0().wwwx() * other.group0().xyzx()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for Plane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       67        0
    //    simd4       17       17        0
    // Totals...
    // yes simd       45       84        0
    //  no simd       96      135        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                -(self[e4235] * other[e4]) - (self[e4125] * other[e431]),
                -(self[e4235] * other[e412]) - (self[e4315] * other[e4]),
                -(self[e4315] * other[e423]) - (self[e4125] * other[e4]),
                (self[e4315] * other[e2]) + (self[e4125] * other[e3]) + (self[e3215] * other[e4]),
            ]) + (self.group0().yzxx() * other.group0().zxy().extend_to_4(other[e1])),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e4125] * other[e2] * -1.0,
                self[e4315] * other[e321] * -1.0,
                self[e4125] * other[e321] * -1.0,
                self[e4125] * other[e435],
            ]) + (self.group0().yzxx() * other.group3().zxy().extend_to_4(other[e415]))
                + (self.group0().wwwy() * other.group0().truncate_to_3().extend_to_4(other[e425]))
                - (Simd32x4::from([other[e321], other[e3], other[e1], other[e4]]) * self.group0().xxyw()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e3215] * other[e415]) + (self[e3215] * other[e1]),
                (self[e3215] * other[e425]) + (self[e3215] * other[e2]),
                (self[e3215] * other[e435]) + (self[e3215] * other[e3]),
                -(self[e4315] * other[e315]) - (self[e4125] * other[e125]),
            ]) + (self.group0().xxyw() * other.group2().wzx().extend_to_4(other[e12345]))
                + (self.group0().zyzw() * other.group2().yww().extend_to_4(other[e321]))
                - (self.group0().yzxx() * other.group2().zxyx()),
            // e1, e2, e3, e4
            Simd32x4::from([
                -(self[e4235] * other[e12345]) - (self[e4125] * other[e425]) - (self[e3215] * other[e423]),
                -(self[e4235] * other[e435]) - (self[e4315] * other[e12345]) - (self[e3215] * other[e431]),
                -(self[e4315] * other[e415]) - (self[e4125] * other[e12345]) - (self[e3215] * other[e412]),
                (self[e4315] * other[e431]) + (self[e4125] * other[e412]),
            ]) + (self.group0().yzxx() * other.group1().zxy().extend_to_4(other[e423])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for Plane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       62        0
    //    simd4       17       17        0
    // Totals...
    // yes simd       49       79        0
    //  no simd      100      130        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (self.group0().yzxw() * other.group0().zxy().extend_to_4(other[e1234])) + Simd32x3::from(0.0).extend_to_4(self[e4125] * other[e4125] * -1.0)
                - (Simd32x4::from([other[e42], other[e1234], other[e1234], other[e4315]]) * self.group0().zyzy())
                - (Simd32x4::from([other[e1234], other[e43], other[e41], other[e4235]]) * self.group0().xxyx()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e4125] * other[e4315]) + (self[e3215] * other[e41]),
                (self[e4315] * other[e45]) + (self[e3215] * other[e42]),
                (self[e4125] * other[e45]) + (self[e3215] * other[e43]),
                -(self[e4315] * other[e31]) - (self[e4125] * other[e12]),
            ]) + (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e1234]]) * self.group0().xxyw())
                - (self.group0().yzxx() * other.group3().zxy().extend_to_4(other[e23])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(self[e4315] * other[e35]) - (self[e3215] * other[e4235]),
                -(self[e4125] * other[e15]) - (self[e3215] * other[e4315]),
                -(self[e4235] * other[e25]) - (self[e3215] * other[e4125]),
                0.0,
            ]) + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e42]]) * self.group0().zyzy())
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e41]]) * self.group0().xxyx())
                + (self.group0().wwwz() * other.group1().truncate_to_3().extend_to_4(other[e43])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e4125] * other[e31]) + (self[e3215] * other[e41]),
                (self[e4315] * other[scalar]) + (self[e3215] * other[e42]),
                (self[e4125] * other[scalar]) + (self[e3215] * other[e43]),
                -(self[e4315] * other[e25]) - (self[e4125] * other[e35]) - (self[e3215] * other[e45]),
            ]) + (Simd32x4::from([other[scalar], other[e12], other[e23], other[scalar]]) * self.group0().xxyw())
                - (self.group0().yzxx() * other.group1().zxy().extend_to_4(other[e15])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl std::ops::Div<sandwich> for RoundPoint {
    type Output = sandwich_partial<RoundPoint>;
    fn div(self, _rhs: sandwich) -> Self::Output {
        sandwich_partial(self)
    }
}
impl Sandwich<AntiCircleRotor> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       42        0
    //    simd3        2        5        0
    //    simd4       21       20        0
    // Totals...
    // yes simd       35       67        0
    //  no simd      102      137        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[e4]) * other.group1().truncate_to_3()) + (other.group0().yzx() * self.group0().zxy()) - (other.group0().zxy() * self.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e41] * self[e5]) + (other[e15] * self[e4]),
                (other[e42] * self[e5]) + (other[e25] * self[e4]),
                (other[e43] * self[e5]) + (other[e35] * self[e4]),
                -(other[e31] * self[e2]) - (other[e12] * self[e3]),
            ]) - (other.group1().wwwx() * self.group0().xyzx()),
            // e235, e315, e125, e4
            (Simd32x4::from([self[e5], self[e5], self[e5], self[e4]]) * other.group1())
                + (other.group2().zxyw() * self.group0().yzxw())
                + Simd32x3::from(0.0).extend_to_4(-(other[e42] * self[e2]) - (other[e43] * self[e3]))
                - (self.group0().zxyx() * other.group2().yzx().extend_to_4(other[e41])),
            // e1, e2, e3, e5
            Simd32x4::from([other[e12] * self[e2] * -1.0, other[e23] * self[e3] * -1.0, other[e31] * self[e1] * -1.0, other[scalar] * self[e5]])
                + (other.group2().xyzy() * self.group0().wwwy())
                + (other.group2().wwwz() * self.group0().xyzz())
                + (self.group0().zxyx() * other.group1().yzx().extend_to_4(other[e15]))
                - (Simd32x4::from(self[e5]) * other.group0().extend_to_4(other[e45])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       27       64        0
    //    simd3        0        3        0
    //    simd4       24       22        0
    // Totals...
    // yes simd       51       89        0
    //  no simd      123      161        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([other[e4] * self[e1] * -1.0, other[e4] * self[e2] * -1.0, other[e4] * self[e3] * -1.0, other[e3] * self[e3]])
                + (other.group3().xyzy() * self.group0().wwwy())
                + (self.group0().yzxx() * other.group0().zxy().extend_to_4(other[e1]))
                - (Simd32x4::from(self[e4]) * other.group1().truncate_to_3().extend_to_4(other[e5]))
                - (other.group0().yzx() * self.group0().zxy()).extend_to_4(other[e4] * self[e5]),
            // e23, e31, e12, e45
            (other.group3().zxyw() * self.group0().yzxw())
                - (Simd32x4::from([self[e5], self[e5], self[e5], self[e1]]) * other.group0().extend_to_4(other[e415]))
                - (other.group1().wwwy() * self.group0().xyzy())
                - (self.group0().wwwz() * other.group2().truncate_to_3().extend_to_4(other[e435]))
                - (other.group3().yzx() * self.group0().zxy()).extend_to_4(other[e4] * self[e5]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(other[e415] * self[e5]) - (other[e125] * self[e2]) - (other[e1] * self[e5]),
                -(other[e425] * self[e5]) - (other[e235] * self[e3]) - (other[e2] * self[e5]),
                -(other[e435] * self[e5]) - (other[e315] * self[e1]) - (other[e3] * self[e5]),
                (other[e412] * self[e3]) + (other[e321] * self[e4]),
            ]) + (self.group0().xyzy() * other.group3().www().extend_to_4(other[e431]))
                + (self.group0().zxyx() * other.group2().yzx().extend_to_4(other[e423])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e425] * self[e3]) + (other[e235] * self[e4]),
                (other[e435] * self[e1]) + (other[e315] * self[e4]),
                (other[e415] * self[e2]) + (other[e125] * self[e4]),
                -(other[e315] * self[e2]) - (other[e125] * self[e3]),
            ]) - (Simd32x4::from(self[e5]) * other.group0().extend_to_4(other[e321]))
                - (self.group0().yzxx() * other.group1().zxy().extend_to_4(other[e235])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       27        0
    //    simd3        0        3        0
    //    simd4       15       16        0
    // Totals...
    // yes simd       19       46        0
    //  no simd       64      100        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x3::from(0.0).extend_to_4(other[e3215] * self[e4]),
            // e415, e425, e435, e321
            Simd32x3::from(0.0).extend_to_4(other[e3215] * self[e4]),
            // e235, e315, e125, e5
            other.group0().xx().extend_to_4(other[e3215], other[scalar]) * self.group0().truncate_to_3().extend_to_4(self[e5]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e4
            Simd32x4::from(other[scalar]) * self.group0(),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       22       44        0
    //    simd3        2        5        0
    //    simd4       10       10        0
    // Totals...
    // yes simd       34       59        0
    //  no simd       68       99        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            (-(Simd32x3::from(other[e321]) * self.group0().truncate_to_3()) - (Simd32x3::from(self[e4]) * other.group0().truncate_to_3())).extend_to_4(0.0),
            // e15, e25, e35, e1234
            ((other.group0().yzx() * self.group0().zxy()) - (other.group0().zxy() * self.group0().yzx())).extend_to_4(other[e321] * self[e4]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e4], self[e4], self[e4], 1.0])
                * other
                    .group0()
                    .truncate_to_3()
                    .extend_to_4(-(other[e235] * self[e1]) - (other[e315] * self[e2]) - (other[e125] * self[e3]) - (other[e321] * self[e5])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       22       46        0
    //    simd3        6        9        0
    //    simd4       12       13        0
    // Totals...
    // yes simd       40       68        0
    //  no simd       88      125        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([self[e4], self[e4], self[e4], 1.0])
                * other
                    .group1()
                    .truncate_to_3()
                    .extend_to_4((other[e1] * self[e1]) + (other[e2] * self[e2]) + (other[e3] * self[e3]) - (other[e5] * self[e4])),
            // e23, e31, e12, e45
            ((other.group1().zxy() * self.group0().yzx())
                - (Simd32x3::from(other[e321]) * self.group0().truncate_to_3())
                - (Simd32x3::from(self[e4]) * other.group0().truncate_to_3())
                - (other.group1().yzx() * self.group0().zxy()))
            .extend_to_4(other[e5] * self[e4]),
            // e15, e25, e35, e1234
            ((Simd32x3::from(other[e5]) * self.group0().truncate_to_3()) + (other.group0().yzx() * self.group0().zxy())
                - (Simd32x3::from(self[e5]) * other.group1().truncate_to_3())
                - (other.group0().zxy() * self.group0().yzx()))
            .extend_to_4(other[e321] * self[e4]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e4], self[e4], self[e4], 1.0])
                * other
                    .group0()
                    .truncate_to_3()
                    .extend_to_4(-(other[e235] * self[e1]) - (other[e315] * self[e2]) - (other[e125] * self[e3]) - (other[e321] * self[e5])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       35        0
    //    simd3        0        6        0
    //    simd4       17       15        0
    // Totals...
    // yes simd       26       56        0
    //  no simd       77      113        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[e4]) * other.group0(),
            // e415, e425, e435, e321
            Simd32x4::from([self[e4], self[e4], self[e4], 1.0]) * other.group1().extend_to_4(-(other[e23] * self[e1]) - (other[e31] * self[e2]) - (other[e12] * self[e3])),
            // e235, e315, e125, e4
            (Simd32x3::from(self[e5]) * other.group0()).extend_to_4(0.0) + (other.group1().zxy() * self.group0().yzx()).extend_to_4(0.0)
                - (other.group1().yzx() * self.group0().zxy()).extend_to_4(0.0),
            // e1, e2, e3, e5
            Simd32x4::from([other[e12] * self[e2] * -1.0, other[e23] * self[e3] * -1.0, other[e31] * self[e1] * -1.0, other[e35] * self[e3]])
                + (self.group0().zxyx() * other.group0().yzx().extend_to_4(other[e15]))
                + (self.group0().wwwy() * other.group1().extend_to_4(other[e25])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       38        0
    //    simd3        3        7        0
    //    simd4       17       17        0
    // Totals...
    // yes simd       31       62        0
    //  no simd       88      127        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(self[e4]) * other.group0().truncate_to_3().extend_to_4(other[e3215]),
            // e415, e425, e435, e321
            Simd32x4::from([self[e4], self[e4], self[e4], 1.0])
                * other
                    .group1()
                    .truncate_to_3()
                    .extend_to_4((other[e3215] * self[e4]) - (other[e23] * self[e1]) - (other[e31] * self[e2]) - (other[e12] * self[e3])),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(other[e25] * self[e3]) - (other[e3215] * self[e1]),
                -(other[e35] * self[e1]) - (other[e3215] * self[e2]),
                -(other[e15] * self[e2]) - (other[e3215] * self[e3]),
                (other[e25] * self[e2]) + (other[e35] * self[e3]),
            ]) + (Simd32x4::from(self[e5]) * other.group0())
                + (other.group1().zxyx() * self.group0().yzxx()),
            // e1, e2, e3, e4
            ((Simd32x3::from(other[scalar]) * self.group0().truncate_to_3())
                + (Simd32x3::from(self[e4]) * other.group1().truncate_to_3())
                + (other.group0().yzx() * self.group0().zxy())
                - (other.group0().zxy() * self.group0().yzx()))
            .extend_to_4(other[scalar] * self[e4]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for RoundPoint {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       19        0
    //    simd3        3        7        0
    //    simd4       10        9        0
    // Totals...
    // yes simd       19       35        0
    //  no simd       55       76        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[e4]) * other.group0().truncate_to_3(),
            // e23, e31, e12, e45
            ((other.group0().zxy() * self.group0().yzx()) - (other.group0().yzx() * self.group0().zxy())).extend_to_4(other[e5] * self[e4]),
            // e15, e25, e35, scalar
            (other.group0().wwwx() * self.group0().xyzx()) + Simd32x3::from(0.0).extend_to_4((other[e2] * self[e2]) + (other[e3] * self[e3]))
                - (Simd32x4::from([self[e5], self[e5], self[e5], self[e4]]) * other.group0()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for RoundPoint {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd3        1        3        0
    //    simd4        3        5        0
    // Totals...
    // yes simd        6       14        0
    //  no simd       17       35        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([other[e12345], other[e12345], other[e12345], self[e5]])
                * self.group0().truncate_to_3().extend_to_4(other[e12345])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1234
            other[e12345] * self[e4] * -1.0,
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       56        0
    //    simd3        2        4        0
    //    simd4       15       15        0
    // Totals...
    // yes simd       45       75        0
    //  no simd       94      128        0
    fn sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (other.group0().zxy() * self.group0().yzx()) - (Simd32x3::from(self[e4]) * other.group1().truncate_to_3()) - (other.group0().yzx() * self.group0().zxy()),
            // e23, e31, e12, e45
            -(Simd32x4::from([self[e5], self[e5], self[e5], self[e1]]) * other.group0().extend_to_4(other[e415]))
                - (other.group1().wwwz() * self.group0().xyzz())
                - (self.group0().wwwy() * other.group2().extend_to_4(other[e425])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(other[e415] * self[e5]) - (other[e125] * self[e2]),
                -(other[e425] * self[e5]) - (other[e235] * self[e3]),
                -(other[e435] * self[e5]) - (other[e315] * self[e1]),
                (other[e431] * self[e2]) + (other[e412] * self[e3]) + (other[e321] * self[e4]),
            ]) + (self.group0().zxyx() * other.group2().yzx().extend_to_4(other[e423])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e425] * self[e3]) + (other[e235] * self[e4]),
                (other[e435] * self[e1]) + (other[e315] * self[e4]),
                (other[e415] * self[e2]) + (other[e125] * self[e4]),
                -(other[e321] * self[e5]) - (other[e125] * self[e3]),
            ]) - (Simd32x4::from([self[e5], self[e5], self[e5], self[e1]]) * other.group0().extend_to_4(other[e235]))
                - (self.group0().yzxy() * other.group1().zxy().extend_to_4(other[e315])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       29       60        0
    //    simd3        2        4        0
    //    simd4       16       16        0
    // Totals...
    // yes simd       47       80        0
    //  no simd       99      136        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (other.group0().zxy() * self.group0().yzx()) - (Simd32x3::from(self[e4]) * other.group1().truncate_to_3()) - (other.group0().yzx() * self.group0().zxy()),
            // e23, e31, e12, e45
            -(Simd32x4::from([self[e5], self[e5], self[e5], self[e1]]) * other.group0().extend_to_4(other[e415]))
                - (other.group1().wwwy() * self.group0().xyzy())
                - (self.group0().wwwz() * other.group2().truncate_to_3().extend_to_4(other[e435])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                other[e125] * self[e2] * -1.0,
                other[e235] * self[e3] * -1.0,
                other[e315] * self[e1] * -1.0,
                (other[e431] * self[e2]) + (other[e412] * self[e3]) + (other[e321] * self[e4]),
            ]) + (self.group0().zxyx() * other.group2().yzx().extend_to_4(other[e423]))
                - (Simd32x4::from([self[e5], self[e5], self[e5], self[e4]]) * other.group1().truncate_to_3().extend_to_4(other[e12345])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e425] * self[e3]) + (other[e235] * self[e4]) + (other[e12345] * self[e1]),
                (other[e435] * self[e1]) + (other[e315] * self[e4]) + (other[e12345] * self[e2]),
                (other[e415] * self[e2]) + (other[e125] * self[e4]) + (other[e12345] * self[e3]),
                -(other[e315] * self[e2]) - (other[e125] * self[e3]) - (other[e12345] * self[e5]),
            ]) - (Simd32x4::from(self[e5]) * other.group0().extend_to_4(other[e321]))
                - (self.group0().yzxx() * other.group1().zxy().extend_to_4(other[e235])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       45        0
    //    simd3        2        5        0
    //    simd4       19       18        0
    // Totals...
    // yes simd       33       68        0
    //  no simd       94      132        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[e4]) * other.group1().truncate_to_3()) + (other.group0().yzx() * self.group0().zxy()) - (other.group0().zxy() * self.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e41] * self[e5]) + (other[e15] * self[e4]),
                (other[e42] * self[e5]) + (other[e25] * self[e4]),
                (other[e43] * self[e5]) + (other[e35] * self[e4]),
                -(other[e31] * self[e2]) - (other[e12] * self[e3]),
            ]) - (other.group1().wwwx() * self.group0().xyzx()),
            // e235, e315, e125, e4
            Simd32x4::from([other[e23] * self[e5], other[e31] * self[e5], other[e12] * self[e5], -(other[e42] * self[e2]) - (other[e43] * self[e3])])
                + (self.group0().yzxw() * other.group2().zxy().extend_to_4(other[e45]))
                - (self.group0().zxyx() * other.group2().yzx().extend_to_4(other[e41])),
            // e1, e2, e3, e5
            Simd32x4::from([other[e12] * self[e2] * -1.0, other[e23] * self[e3] * -1.0, other[e31] * self[e1] * -1.0, other[e35] * self[e3]])
                + (self.group0().zxyy() * other.group1().yzx().extend_to_4(other[e25]))
                + (self.group0().wwwx() * other.group2().extend_to_4(other[e15]))
                - (Simd32x4::from(self[e5]) * other.group0().extend_to_4(other[e45])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       54        0
    //    simd3        0        5        0
    //    simd4       28       24        0
    // Totals...
    // yes simd       39       83        0
    //  no simd      123      165        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([other[e43] * self[e2] * -1.0, other[e41] * self[e3] * -1.0, other[e42] * self[e1] * -1.0, other[e3215] * self[e4]])
                + (other.group3().xyzz() * self.group0().wwwz())
                + (self.group0().xyzy() * other.group2().www().extend_to_4(other[e4315]))
                + (self.group0().wwwx() * other.group1().truncate_to_3().extend_to_4(other[e4235]))
                + (other.group0().yzx() * self.group0().zxy()).extend_to_4(other[e1234] * self[e5]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e15] * self[e4]) + (other[e4125] * self[e2]),
                (other[e25] * self[e4]) + (other[e4235] * self[e3]),
                (other[e35] * self[e4]) + (other[e4315] * self[e1]),
                -(other[e12] * self[e3]) - (other[e1234] * self[e5]),
            ]) + (Simd32x4::from([self[e5], self[e5], self[e5], self[e4]]) * other.group0().extend_to_4(other[e3215]))
                - (other.group1().wwwx() * self.group0().xyzx())
                - (self.group0().zxyy() * other.group3().yzx().extend_to_4(other[e31])),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(other[e4235] * self[e5]) - (other[e3215] * self[e1]),
                -(other[e4315] * self[e5]) - (other[e3215] * self[e2]),
                -(other[e4125] * self[e5]) - (other[e3215] * self[e3]),
                other[e35] * self[e3],
            ]) + (Simd32x4::from([self[e5], self[e5], self[e5], self[e1]]) * other.group1().truncate_to_3().extend_to_4(other[e15]))
                + (other.group2().zxyy() * self.group0().yzxy())
                - (other.group2().yzx() * self.group0().zxy()).extend_to_4(other[e45] * self[e5]),
            // e1, e2, e3, e4
            Simd32x4::from([other[e15] * self[e4], other[e25] * self[e4], other[e35] * self[e4], other[e43] * self[e3] * -1.0]) + (other.group1().yzxw() * self.group0().zxyw())
                - (Simd32x4::from([self[e5], self[e5], self[e5], self[e1]]) * other.group0().extend_to_4(other[e41]))
                - (self.group0().yzxy() * other.group1().zxy().extend_to_4(other[e42])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       39        0
    //    simd3        0        1        0
    //    simd4       12       15        0
    // Totals...
    // yes simd       28       55        0
    //  no simd       64      102        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x3::from(0.0).extend_to_4(other[e5] * self[e4] * -1.0),
            // e23, e31, e12, e45
            Simd32x3::from(0.0).extend_to_4(other[e5] * self[e4]),
            // e15, e25, e35, e1234
            self.group0() * other.group0().xx().extend_to_4(other[e5], other[e12345]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e12345]) * self.group0().truncate_to_3().extend_to_4(self[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       30        0
    //    simd3        2        6        0
    //    simd4       13       13        0
    // Totals...
    // yes simd       25       49        0
    //  no simd       68      100        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            ((Simd32x3::from(self[e4]) * other.group0().truncate_to_3()) - (Simd32x3::from(other[e45]) * self.group0().truncate_to_3())).extend_to_4(0.0),
            // e235, e315, e125, e4
            ((other.group0().zxy() * self.group0().yzx()) - (other.group0().yzx() * self.group0().zxy())).extend_to_4(other[e45] * self[e4]),
            // e1, e2, e3, e5
            Simd32x4::from([self[e4], self[e4], self[e4], 1.0])
                * other
                    .group0()
                    .truncate_to_3()
                    .extend_to_4((other[e15] * self[e1]) + (other[e25] * self[e2]) + (other[e35] * self[e3]) - (other[e45] * self[e5])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       38        0
    //    simd3        3        7        0
    //    simd4       17       17        0
    // Totals...
    // yes simd       31       62        0
    //  no simd       88      127        0
    fn sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([self[e4], self[e4], self[e4], 1.0])
                * other
                    .group1()
                    .truncate_to_3()
                    .extend_to_4((other[e4235] * self[e1]) + (other[e4315] * self[e2]) + (other[e4125] * self[e3]) + (other[e3215] * self[e4])),
            // e415, e425, e435, e321
            ((Simd32x3::from(self[e4]) * other.group0().truncate_to_3()) + (other.group1().zxy() * self.group0().yzx())
                - (Simd32x3::from(other[e45]) * self.group0().truncate_to_3())
                - (other.group1().yzx() * self.group0().zxy()))
            .extend_to_4(other[e3215] * self[e4]),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(other[e4235] * self[e5]) - (other[e3215] * self[e1]),
                -(other[e4315] * self[e5]) - (other[e3215] * self[e2]),
                -(other[e4125] * self[e5]) - (other[e3215] * self[e3]),
                (other[e25] * self[e2]) + (other[e35] * self[e3]),
            ]) + (other.group0().zxyx() * self.group0().yzxx())
                - (other.group0().yzxw() * self.group0().zxy().extend_to_4(self[e5])),
            // e1, e2, e3, e4
            Simd32x4::from(self[e4]) * other.group0(),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       25       50        0
    //    simd3        0        6        0
    //    simd4       13       12        0
    // Totals...
    // yes simd       38       68        0
    //  no simd       77      116        0
    fn sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[e4]) * other.group0() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from([self[e4], self[e4], self[e4], 1.0])
                * other.group1().extend_to_4(-(other[e415] * self[e1]) - (other[e425] * self[e2]) - (other[e435] * self[e3]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, e1234
            (other.group1().yzx() * self.group0().zxy()).extend_to_4(0.0)
                - (Simd32x3::from(self[e5]) * other.group0()).extend_to_4(0.0)
                - (other.group1().zxy() * self.group0().yzx()).extend_to_4(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e425] * self[e3]) + (other[e235] * self[e4]),
                (other[e435] * self[e1]) + (other[e315] * self[e4]),
                (other[e415] * self[e2]) + (other[e125] * self[e4]),
                -(other[e315] * self[e2]) - (other[e125] * self[e3]),
            ]) - (self.group0().yzxx() * other.group0().zxy().extend_to_4(other[e235])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       27       54        0
    //    simd3        3        5        0
    //    simd4       13       16        0
    // Totals...
    // yes simd       43       75        0
    //  no simd       88      133        0
    fn sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(self[e4]) * other.group0().truncate_to_3().extend_to_4(other[e5]) * Simd32x4::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from([self[e4], self[e4], self[e4], 1.0])
                * other
                    .group1()
                    .truncate_to_3()
                    .extend_to_4((other[e5] * self[e4]) - (other[e415] * self[e1]) - (other[e425] * self[e2]) - (other[e435] * self[e3]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, e1234
            ((Simd32x3::from(other[e5]) * self.group0().truncate_to_3()) + (other.group1().yzx() * self.group0().zxy())
                - (Simd32x3::from(self[e5]) * other.group0().truncate_to_3())
                - (other.group1().zxy() * self.group0().yzx()))
            .extend_to_4(other[e12345] * self[e4] * -1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e425] * self[e3]) + (other[e12345] * self[e1]) + (other[e235] * self[e4]),
                (other[e435] * self[e1]) + (other[e12345] * self[e2]) + (other[e315] * self[e4]),
                (other[e415] * self[e2]) + (other[e12345] * self[e3]) + (other[e125] * self[e4]),
                -(other[e235] * self[e1]) - (other[e315] * self[e2]) - (other[e125] * self[e3]),
            ]) - (other.group0().zxyw() * self.group0().yzx().extend_to_4(self[e5])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for RoundPoint {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       89        0
    //    simd2        6        6        0
    //    simd3       32       44        0
    //    simd4       28       24        0
    // Totals...
    // yes simd      102      163        0
    //  no simd      256      329        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([-(other[e4] * self[e5]) - (other[e5] * self[e4]), (other[e3215] * self[e4]) + (other[e1234] * self[e5])])
                + (Simd32x2::from(self[e1]) * Simd32x2::from([other[e1], other[e4235]]))
                + (Simd32x2::from(self[e2]) * Simd32x2::from([other[e2], other[e4315]]))
                + (Simd32x2::from(self[e3]) * Simd32x2::from([other[e3], other[e4125]])),
            // e1, e2, e3, e4
            Simd32x4::from([other[e15] * self[e4], other[e25] * self[e4], other[e35] * self[e4], other[e43] * self[e3] * -1.0])
                + (Simd32x4::from(other[scalar]) * self.group0())
                + (self.group0().zxyw() * other.group5().yzx().extend_to_4(other[e45]))
                - (Simd32x4::from([self[e5], self[e5], self[e5], self[e1]]) * other.group4().extend_to_4(other[e41]))
                - (self.group0().yzxy() * other.group5().zxy().extend_to_4(other[e42])),
            // e5
            (other[scalar] * self[e5]) + (other[e15] * self[e1]) + (other[e25] * self[e2]) + (other[e35] * self[e3]) - (other[e45] * self[e5]),
            // e15, e25, e35, e45
            Simd32x4::from([other[e5] * self[e1], other[e5] * self[e2], other[e5] * self[e3], other[e435] * self[e3] * -1.0])
                + (other.group8().yzx() * self.group0().zxy()).extend_to_4(other[e5] * self[e4])
                - (Simd32x4::from([self[e5], self[e5], self[e5], self[e1]]) * other.group1().truncate_to_3().extend_to_4(other[e415]))
                - (Simd32x4::from([self[e5], self[e5], self[e5], self[e2]]) * other.group6().xyzy())
                - (other.group8().zxy() * self.group0().yzx()).extend_to_4(other[e4] * self[e5]),
            // e41, e42, e43
            (Simd32x3::from(self[e4]) * other.group1().truncate_to_3()) + (other.group7().zxy() * self.group0().yzx())
                - (Simd32x3::from(other[e4]) * self.group0().truncate_to_3())
                - (Simd32x3::from(self[e4]) * other.group6().truncate_to_3())
                - (other.group7().yzx() * self.group0().zxy()),
            // e23, e31, e12
            (other.group1().zxy() * self.group0().yzx())
                - (Simd32x3::from(other[e321]) * self.group0().truncate_to_3())
                - (Simd32x3::from(self[e4]) * other.group8())
                - (Simd32x3::from(self[e5]) * other.group7())
                - (other.group1().yzx() * self.group0().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e15] * self[e4]) + (other[e4125] * self[e2]),
                (other[e25] * self[e4]) + (other[e4235] * self[e3]),
                (other[e35] * self[e4]) + (other[e4315] * self[e1]),
                -(other[e12] * self[e3]) - (other[e1234] * self[e5]),
            ]) + (Simd32x4::from([self[e5], self[e5], self[e5], self[e4]]) * other.group4().extend_to_4(other[e3215]))
                - (self.group0().xyzx() * other.group3().www().extend_to_4(other[e23]))
                - (self.group0().zxyy() * other.group9().yzx().extend_to_4(other[e31])),
            // e423, e431, e412
            (Simd32x3::from(other[e1234]) * self.group0().truncate_to_3())
                + (Simd32x3::from(self[e4]) * other.group5())
                + (Simd32x3::from(self[e4]) * other.group9().truncate_to_3())
                + (other.group4().yzx() * self.group0().zxy())
                - (other.group4().zxy() * self.group0().yzx()),
            // e235, e315, e125
            (Simd32x3::from(self[e5]) * other.group5()) + (other.group3().zxy() * self.group0().yzx())
                - (Simd32x3::from(other[e3215]) * self.group0().truncate_to_3())
                - (Simd32x3::from(self[e5]) * other.group9().truncate_to_3())
                - (other.group3().yzx() * self.group0().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e12345] * self[e1]) + (other[e425] * self[e3]) + (other[e235] * self[e4]),
                (other[e12345] * self[e2]) + (other[e435] * self[e1]) + (other[e315] * self[e4]),
                (other[e12345] * self[e3]) + (other[e415] * self[e2]) + (other[e125] * self[e4]),
                -(other[e321] * self[e5]) - (other[e315] * self[e2]) - (other[e125] * self[e3]),
            ]) - (Simd32x4::from(self[e5]) * other.group7().extend_to_4(other[e12345]))
                - (self.group0().yzxx() * other.group6().zxy().extend_to_4(other[e235])),
            // e1234
            (other[e321] * self[e4]) + (other[e423] * self[e1]) + (other[e431] * self[e2]) + (other[e412] * self[e3]) - (other[e12345] * self[e4]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for RoundPoint {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       25        0
    //    simd3        3        7        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       19       40        0
    //  no simd       49       78        0
    fn sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[e4]) * other.group0().truncate_to_3(),
            // e415, e425, e435, e321
            ((other.group0().zxy() * self.group0().yzx()) - (other.group0().yzx() * self.group0().zxy())).extend_to_4(other[e3215] * self[e4]),
            // e235, e315, e125, e12345
            Simd32x4::from([
                -(other[e4235] * self[e5]) - (other[e3215] * self[e1]),
                -(other[e4315] * self[e5]) - (other[e3215] * self[e2]),
                -(other[e4125] * self[e5]) - (other[e3215] * self[e3]),
                (other[e4235] * self[e1]) + (other[e4315] * self[e2]) + (other[e4125] * self[e3]) + (other[e3215] * self[e4]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for RoundPoint {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       20        0
    //    simd3        3        7        0
    //    simd4       11       10        0
    // Totals...
    // yes simd       21       37        0
    //  no simd       60       81        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[e4]) * other.group0().truncate_to_3()) - (Simd32x3::from(other[e4]) * self.group0().truncate_to_3()),
            // e23, e31, e12, e45
            (other.group0().zxy() * self.group0().yzx()).extend_to_4(other[e5] * self[e4]) - (other.group0().yzxw() * self.group0().zxy().extend_to_4(self[e5])),
            // e15, e25, e35, scalar
            (Simd32x4::from([other[e5], other[e5], other[e5], self[e1]]) * self.group0().truncate_to_3().extend_to_4(other[e1]))
                + Simd32x3::from(0.0).extend_to_4((other[e2] * self[e2]) + (other[e3] * self[e3]) - (other[e5] * self[e4]))
                - (Simd32x4::from(self[e5]) * other.group0()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for RoundPoint {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        5        0
    //    simd3        1        3        0
    //    simd4        3        4        0
    // Totals...
    // yes simd        6       12        0
    //  no simd       17       30        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = RoundPoint::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from(other[scalar]) * self.group0(), /* e5 */ self[e5] * other[scalar]);
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for RoundPoint {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       26        0
    //    simd3        3        7        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       21       42        0
    //  no simd       54       83        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = CircleRotor::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[e4]) * other.group0().truncate_to_3()) + (Simd32x3::from(other[e1234]) * self.group0().truncate_to_3()),
            // e415, e425, e435, e321
            (self.group0().yzxw() * other.group0().zxyw()) - (self.group0().zxy() * other.group0().yzx()).extend_to_4(self[e5] * other[e1234]),
            // e235, e315, e125, e12345
            Simd32x4::from([
                -(self[e1] * other[e3215]) - (self[e5] * other[e4235]),
                -(self[e2] * other[e3215]) - (self[e5] * other[e4315]),
                -(self[e3] * other[e3215]) - (self[e5] * other[e4125]),
                (self[e1] * other[e4235]) + (self[e2] * other[e4315]) + (self[e3] * other[e4125]) + (self[e4] * other[e3215]) + (self[e5] * other[e1234]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       63        0
    //    simd3        0        1        0
    //    simd4       25       25        0
    // Totals...
    // yes simd       53       89        0
    //  no simd      128      166        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([self[e4] * other[e415] * -1.0, self[e4] * other[e425] * -1.0, self[e4] * other[e435] * -1.0, self[e3] * other[e3]])
                + (self.group0().yzxx() * other.group0().zxy().extend_to_4(other[e1]))
                + (self.group0().wwwy() * other.group3().xyzy())
                - (Simd32x4::from([other[e431], other[e4], other[e4], self[e5]]) * self.group0().zyz().extend_to_4(other[e4]))
                - (Simd32x4::from([other[e4], other[e412], other[e423], other[e5]]) * self.group0().xxyw()),
            // e23, e31, e12, e45
            (self.group0().yzxw() * other.group3().zxy().extend_to_4(other[e5]))
                - (Simd32x4::from(self[e5]) * other.group0().truncate_to_3().extend_to_4(other[e4]))
                - (Simd32x4::from([other[e321], other[e3], other[e1], other[e415]]) * self.group0().xxyx())
                - (Simd32x4::from([other[e2], other[e321], other[e321], other[e425]]) * self.group0().zyzy())
                - (self.group0().wwwz() * other.group2().truncate_to_3().extend_to_4(other[e435])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(self[e5] * other[e415]) - (self[e5] * other[e1]),
                -(self[e5] * other[e425]) - (self[e5] * other[e2]),
                -(self[e5] * other[e435]) - (self[e5] * other[e3]),
                (self[e3] * other[e412]) + (self[e4] * other[e321]),
            ]) + (self.group0().xxyx() * other.group2().wzx().extend_to_4(other[e423]))
                + (self.group0().zyzy() * other.group2().yww().extend_to_4(other[e431]))
                - (self.group0().yzxw() * other.group2().zxy().extend_to_4(other[e12345])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e1] * other[e12345]) + (self[e3] * other[e425]) + (self[e4] * other[e235]),
                (self[e1] * other[e435]) + (self[e2] * other[e12345]) + (self[e4] * other[e315]),
                (self[e2] * other[e415]) + (self[e3] * other[e12345]) + (self[e4] * other[e125]),
                -(self[e3] * other[e125]) - (self[e5] * other[e12345]) - (self[e5] * other[e321]),
            ]) - (Simd32x4::from([self[e5], self[e5], self[e5], other[e315]]) * other.group0().truncate_to_3().extend_to_4(self[e2]))
                - (self.group0().yzxx() * other.group1().zxy().extend_to_4(other[e235])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       53        0
    //    simd3        0        3        0
    //    simd4       29       27        0
    // Totals...
    // yes simd       41       83        0
    //  no simd      128      170        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([self[e2] * other[e43] * -1.0, self[e3] * other[e41] * -1.0, self[e1] * other[e42] * -1.0, self[e5] * other[e1234]])
                + (Simd32x4::from(self[e4]) * other.group3())
                + (Simd32x4::from([other[e42], other[e1234], other[e1234], other[e4315]]) * self.group0().zyzy())
                + (Simd32x4::from([other[e1234], other[e43], other[e41], other[e4235]]) * self.group0().xxyx())
                + (self.group0().wwwz() * other.group1().truncate_to_3().extend_to_4(other[e4125])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e4] * other[e15]) + (self[e5] * other[e41]),
                (self[e4] * other[e25]) + (self[e5] * other[e42]),
                (self[e4] * other[e35]) + (self[e5] * other[e43]),
                -(self[e3] * other[e12]) - (self[e5] * other[e1234]),
            ]) + (self.group0().yzxw() * other.group3().zxyw())
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e23]]) * self.group0().xxyx())
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e31]]) * self.group0().zyzy()),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e3] * other[e25]) - (self[e5] * other[e4235]),
                -(self[e2] * other[e3215]) - (self[e5] * other[e4315]),
                -(self[e3] * other[e3215]) - (self[e5] * other[e4125]),
                (self[e3] * other[e35]) + (self[e5] * other[scalar]),
            ]) + (Simd32x4::from([self[e5], self[e5], self[e5], other[e25]]) * other.group1().truncate_to_3().extend_to_4(self[e2]))
                + (self.group0().yzxx() * other.group2().zxyx())
                - (Simd32x4::from([other[e3215], other[e35], other[e15], self[e5]]) * self.group0().xxy().extend_to_4(other[e45])),
            // e1, e2, e3, e4
            Simd32x4::from([self[e4] * other[e15], self[e4] * other[e25], self[e4] * other[e35], self[e3] * other[e43] * -1.0])
                + (Simd32x4::from([other[scalar], other[e12], other[e23], other[scalar]]) * self.group0().xxyw())
                + (Simd32x4::from([other[e31], other[scalar], other[scalar], other[e45]]) * self.group0().zyzw())
                - (Simd32x4::from([self[e5], self[e5], self[e5], other[e42]]) * other.group0().truncate_to_3().extend_to_4(self[e2]))
                - (self.group0().yzxx() * other.group1().zxy().extend_to_4(other[e41])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl std::ops::Div<sandwich> for Scalar {
    type Output = sandwich_partial<Scalar>;
    fn div(self, _rhs: sandwich) -> Self::Output {
        sandwich_partial(self)
    }
}
impl Sandwich<AntiCircleRotor> for Scalar {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        2        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0       22        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[scalar]) * other.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(self[scalar]) * other.group1(),
            // e15, e25, e35, scalar
            Simd32x4::from(self[scalar]) * other.group2(),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for Scalar {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        2        0
    //    simd4        0        6        0
    // Totals...
    // yes simd        0        8        0
    //  no simd        0       30        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[scalar]) * other.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(self[scalar]) * other.group1(),
            // e235, e315, e125, e4
            Simd32x4::from(self[scalar]) * other.group2(),
            // e1, e2, e3, e5
            Simd32x4::from(self[scalar]) * other.group3(),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for Scalar {
    type Output = AntiDualNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        2        0
    // no simd        0        4        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDualNum::from_groups(/* e3215, scalar */ Simd32x2::from(self[scalar]) * other.group0());
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for Scalar {
    type Output = AntiFlatPoint;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ Simd32x4::from(self[scalar]) * other.group0());
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for Scalar {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(self[scalar]) * other.group0(),
            // e1, e2, e3, e5
            Simd32x4::from(self[scalar]) * other.group1(),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for Scalar {
    type Output = AntiLine;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        4        0
    // no simd        0       12        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(self[scalar]) * other.group0(),
            // e15, e25, e35
            Simd32x3::from(self[scalar]) * other.group1(),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for Scalar {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(self[scalar]) * other.group0(),
            // e15, e25, e35, e3215
            Simd32x4::from(self[scalar]) * other.group1(),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for Scalar {
    type Output = AntiPlane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from(self[scalar]) * other.group0());
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for Scalar {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiScalar::from_groups(/* e12345 */ other[e12345] * self[scalar]);
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for Scalar {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        4        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0       20        0
    fn sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[scalar]) * other.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(self[scalar]) * other.group1(),
            // e235, e315, e125
            Simd32x3::from(self[scalar]) * other.group2(),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for Scalar {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        2        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0       22        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[scalar]) * other.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(self[scalar]) * other.group1(),
            // e235, e315, e125, e12345
            Simd32x4::from(self[scalar]) * other.group2(),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for Scalar {
    type Output = Dipole;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        4        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0       20        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[scalar]) * other.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(self[scalar]) * other.group1(),
            // e15, e25, e35
            Simd32x3::from(self[scalar]) * other.group2(),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for Scalar {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        2        0
    //    simd4        0        6        0
    // Totals...
    // yes simd        0        8        0
    //  no simd        0       30        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[scalar]) * other.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(self[scalar]) * other.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(self[scalar]) * other.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[scalar]) * other.group3(),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for Scalar {
    type Output = DualNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        2        0
    // no simd        0        4        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DualNum::from_groups(/* e5, e12345 */ Simd32x2::from(self[scalar]) * other.group0());
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for Scalar {
    type Output = FlatPoint;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = FlatPoint::from_groups(/* e15, e25, e35, e45 */ Simd32x4::from(self[scalar]) * other.group0());
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for Scalar {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(self[scalar]) * other.group0(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[scalar]) * other.group1(),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for Scalar {
    type Output = Line;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        4        0
    // no simd        0       12        0
    fn sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(self[scalar]) * other.group0(),
            // e235, e315, e125
            Simd32x3::from(self[scalar]) * other.group1(),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for Scalar {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(self[scalar]) * other.group0(),
            // e235, e315, e125, e5
            Simd32x4::from(self[scalar]) * other.group1(),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for Scalar {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        4        0
    //    simd2        0        2        0
    //    simd3        0        8        0
    //    simd4        0        8        0
    // Totals...
    // yes simd        0       22        0
    //  no simd        0       64        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(self[scalar]) * other.group0(),
            // e1, e2, e3, e4
            Simd32x4::from(self[scalar]) * other.group1(),
            // e5
            other[e5] * self[scalar],
            // e15, e25, e35, e45
            Simd32x4::from(self[scalar]) * other.group3(),
            // e41, e42, e43
            Simd32x3::from(self[scalar]) * other.group4(),
            // e23, e31, e12
            Simd32x3::from(self[scalar]) * other.group5(),
            // e415, e425, e435, e321
            Simd32x4::from(self[scalar]) * other.group6(),
            // e423, e431, e412
            Simd32x3::from(self[scalar]) * other.group7(),
            // e235, e315, e125
            Simd32x3::from(self[scalar]) * other.group8(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[scalar]) * other.group9(),
            // e1234
            other[e1234] * self[scalar],
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for Scalar {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from(self[scalar]) * other.group0());
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for Scalar {
    type Output = RoundPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       10        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = RoundPoint::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from(self[scalar]) * other.group0(), /* e5 */ other[e5] * self[scalar]);
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for Scalar {
    type Output = Scalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Scalar::from_groups(/* scalar */ other[scalar] * self[scalar]);
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for Scalar {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       10        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[scalar]) * other.group0(),
            // e1234
            self[scalar] * other[e1234],
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for Scalar {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        8        0
    // no simd        0       32        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(self[scalar]) * other.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(self[scalar]) * other.group1(),
            // e235, e315, e125, e5
            Simd32x4::from(self[scalar]) * other.group2(),
            // e1, e2, e3, e4
            Simd32x4::from(self[scalar]) * other.group3(),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for Scalar {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        8        0
    // no simd        0       32        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(self[scalar]) * other.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(self[scalar]) * other.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(self[scalar]) * other.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[scalar]) * other.group3(),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl std::ops::Div<sandwich> for Sphere {
    type Output = sandwich_partial<Sphere>;
    fn div(self, _rhs: sandwich) -> Self::Output {
        sandwich_partial(self)
    }
}
impl Sandwich<AntiCircleRotor> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       33       66        0
    //    simd3        2        4        0
    //    simd4       15       14        0
    // Totals...
    // yes simd       50       84        0
    //  no simd       99      134        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[e1234]) * other.group1().truncate_to_3()) + (other.group0().zxy() * self.group0().yzx()) - (other.group0().yzx() * self.group0().zxy()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e41] * self[e3215]) + (other[e45] * self[e4235]) + (other[e15] * self[e1234]),
                (other[e42] * self[e3215]) + (other[e45] * self[e4315]) + (other[e25] * self[e1234]),
                (other[e43] * self[e3215]) + (other[e45] * self[e4125]) + (other[e35] * self[e1234]),
                -(other[e23] * self[e4235]) - (other[e31] * self[e4315]) - (other[e12] * self[e4125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                other[e35] * self[e4315] * -1.0,
                other[e15] * self[e4125] * -1.0,
                other[e25] * self[e4235] * -1.0,
                (other[e43] * self[e4125]) + (other[e45] * self[e1234]) + (other[scalar] * self[e1234]),
            ]) + (self.group0().zxyy() * other.group2().yzx().extend_to_4(other[e42]))
                + (self.group0().wwwx() * other.group1().truncate_to_3().extend_to_4(other[e41])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e31] * self[e4125]) + (other[scalar] * self[e4235]),
                (other[e12] * self[e4235]) + (other[scalar] * self[e4315]),
                (other[e23] * self[e4315]) + (other[scalar] * self[e4125]),
                -(other[e25] * self[e4315]) - (other[e35] * self[e4125]),
            ]) + (Simd32x4::from(self[e3215]) * other.group0().extend_to_4(other[scalar]))
                - (Simd32x4::from([self[e1234], self[e1234], self[e1234], self[e4235]]) * other.group2().xyzx())
                - (other.group1().zxyw() * self.group0().yzxw()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       62        0
    //    simd3        0        3        0
    //    simd4       26       24        0
    // Totals...
    // yes simd       45       89        0
    //  no simd      123      167        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                -(other[e431] * self[e4125]) - (other[e4] * self[e4235]) - (other[e1] * self[e1234]),
                -(other[e412] * self[e4235]) - (other[e4] * self[e4315]) - (other[e2] * self[e1234]),
                -(other[e423] * self[e4315]) - (other[e4] * self[e4125]) - (other[e3] * self[e1234]),
                (other[e2] * self[e4315]) + (other[e3] * self[e4125]) + (other[e5] * self[e1234]),
            ]) + (Simd32x4::from([self[e1234], self[e1234], self[e1234], self[e4235]]) * other.group1().truncate_to_3().extend_to_4(other[e1]))
                + (self.group0().yzxw() * other.group0().zxy().extend_to_4(other[e4])),
            // e415, e425, e435, e321
            Simd32x4::from([other[e2] * self[e4125] * -1.0, other[e3] * self[e4235] * -1.0, other[e1] * self[e4315] * -1.0, other[e5] * self[e1234]])
                + (Simd32x4::from([self[e1234], self[e1234], self[e1234], self[e4315]]) * other.group2().truncate_to_3().extend_to_4(other[e425]))
                + (self.group0().yzxz() * other.group3().zxy().extend_to_4(other[e435]))
                + (self.group0().wwwx() * other.group0().extend_to_4(other[e415]))
                - (self.group0() * other.group1().www().extend_to_4(other[e4])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e315] * self[e4125]) + (other[e1] * self[e3215]) + (other[e5] * self[e4235]),
                (other[e125] * self[e4235]) + (other[e2] * self[e3215]) + (other[e5] * self[e4315]),
                (other[e235] * self[e4315]) + (other[e3] * self[e3215]) + (other[e5] * self[e4125]),
                -(other[e315] * self[e4315]) - (other[e125] * self[e4125]),
            ]) + (Simd32x4::from(self[e3215]) * other.group1())
                - (other.group2().zxyx() * self.group0().yzxx()),
            // e1, e2, e3, e4
            Simd32x4::from([
                other[e425] * self[e4125] * -1.0,
                other[e435] * self[e4235] * -1.0,
                other[e415] * self[e4315] * -1.0,
                other[e412] * self[e4125],
            ]) + (Simd32x4::from([self[e1234], self[e1234], self[e1234], self[e4315]]) * other.group2().truncate_to_3().extend_to_4(other[e431]))
                + (self.group0().yzxx() * other.group1().zxy().extend_to_4(other[e423]))
                - (other.group0() * self.group0().www()).extend_to_4(other[e321] * self[e1234]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       37        0
    //    simd3        0        1        0
    //    simd4       12       13        0
    // Totals...
    // yes simd       28       51        0
    //  no simd       64       92        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x3::from(0.0).extend_to_4(other[e3215] * self[e1234]),
            // e23, e31, e12, e45
            Simd32x3::from(0.0).extend_to_4(other[e3215] * self[e1234] * -1.0),
            // e15, e25, e35, e1234
            other.group0().xx().extend_to_4(other[e3215], other[scalar]) * self.group0().truncate_to_3().extend_to_4(self[e1234]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[scalar]) * self.group0(),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       34        0
    //    simd3        2        6        0
    //    simd4       14       13        0
    // Totals...
    // yes simd       22       53        0
    //  no simd       68      104        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            ((Simd32x3::from(self[e1234]) * other.group0().truncate_to_3()) - (Simd32x3::from(other[e321]) * self.group0().truncate_to_3())).extend_to_4(0.0),
            // e235, e315, e125, e4
            ((other.group0().yzx() * self.group0().zxy()) - (other.group0().zxy() * self.group0().yzx())).extend_to_4(other[e321] * self[e1234] * -1.0),
            // e1, e2, e3, e5
            Simd32x4::from([self[e1234], self[e1234], self[e1234], 1.0])
                * other
                    .group0()
                    .truncate_to_3()
                    .extend_to_4((other[e321] * self[e3215]) - (other[e235] * self[e4235]) - (other[e315] * self[e4315]) - (other[e125] * self[e4125])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       37        0
    //    simd3        3        6        0
    //    simd4       17       20        0
    // Totals...
    // yes simd       31       63        0
    //  no simd       88      135        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([self[e1234], self[e1234], self[e1234], 1.0])
                * other
                    .group1()
                    .truncate_to_3()
                    .extend_to_4((other[e1] * self[e4235]) + (other[e2] * self[e4315]) + (other[e3] * self[e4125]) + (other[e5] * self[e1234]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            ((Simd32x3::from(self[e1234]) * other.group0().truncate_to_3()) + (other.group1().zxy() * self.group0().yzx())
                - (Simd32x3::from(other[e321]) * self.group0().truncate_to_3())
                - (other.group1().yzx() * self.group0().zxy()))
            .extend_to_4(other[e5] * self[e1234]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e1] * self[e3215]) + (other[e5] * self[e4235]),
                (other[e2] * self[e3215]) + (other[e5] * self[e4315]),
                (other[e3] * self[e3215]) + (other[e5] * self[e4125]),
                -(other[e315] * self[e4315]) - (other[e125] * self[e4125]),
            ]) + (other.group0().yzxw() * self.group0().zxyw())
                - (other.group0().zxyx() * self.group0().yzxx()),
            // e1, e2, e3, e4
            Simd32x4::from(self[e1234]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       21       45        0
    //    simd3        0        5        0
    //    simd4       14       12        0
    // Totals...
    // yes simd       35       62        0
    //  no simd       77      108        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[e1234]) * other.group0(),
            // e23, e31, e12, e45
            Simd32x4::from([self[e1234], self[e1234], self[e1234], 1.0])
                * other.group1().extend_to_4(-(other[e23] * self[e4235]) - (other[e31] * self[e4315]) - (other[e12] * self[e4125])),
            // e15, e25, e35, e1234
            (Simd32x3::from(self[e3215]) * other.group0()).extend_to_4(0.0) + (other.group1().yzx() * self.group0().zxy()).extend_to_4(0.0)
                - (other.group1().zxy() * self.group0().yzx()).extend_to_4(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([other[e31] * self[e4125], other[e12] * self[e4235], other[e23] * self[e4315], other[e35] * self[e4125] * -1.0])
                - (Simd32x4::from([self[e1234], self[e1234], self[e1234], self[e4315]]) * other.group1().extend_to_4(other[e25]))
                - (self.group0().yzxx() * other.group0().zxy().extend_to_4(other[e15])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       44        0
    //    simd3        3        5        0
    //    simd4       15       16        0
    // Totals...
    // yes simd       37       65        0
    //  no simd       88      123        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(self[e1234]) * other.group0().truncate_to_3().extend_to_4(other[e3215]),
            // e23, e31, e12, e45
            Simd32x4::from([self[e1234], self[e1234], self[e1234], 1.0])
                * other
                    .group1()
                    .truncate_to_3()
                    .extend_to_4(-(other[e23] * self[e4235]) - (other[e31] * self[e4315]) - (other[e12] * self[e4125]) - (other[e3215] * self[e1234])),
            // e15, e25, e35, e1234
            ((Simd32x3::from(other[e3215]) * self.group0().truncate_to_3())
                + (Simd32x3::from(self[e3215]) * other.group0().truncate_to_3())
                + (other.group1().yzx() * self.group0().zxy())
                - (other.group1().zxy() * self.group0().yzx()))
            .extend_to_4(other[scalar] * self[e1234]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([other[scalar] * self[e4235], other[scalar] * self[e4315], other[scalar] * self[e4125], other[e35] * self[e4125] * -1.0])
                + (other.group0().yzxw() * self.group0().zxyw())
                - (Simd32x4::from([self[e1234], self[e1234], self[e1234], self[e4315]]) * other.group1().xyzy())
                - (self.group0().yzxx() * other.group0().zxy().extend_to_4(other[e15])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for Sphere {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       20        0
    //    simd3        3        7        0
    //    simd4       10       10        0
    // Totals...
    // yes simd       19       37        0
    //  no simd       55       81        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[e1234]) * other.group0().truncate_to_3() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            ((other.group0().zxy() * self.group0().yzx()) - (other.group0().yzx() * self.group0().zxy())).extend_to_4(other[e5] * self[e1234]),
            // e235, e315, e125, e12345
            (other.group0().xyzx() * self.group0().wwwx())
                + (other.group0().wwwy() * self.group0().xyzy())
                + Simd32x3::from(0.0).extend_to_4((other[e3] * self[e4125]) + (other[e5] * self[e1234])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for Sphere {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       13        0
    //    simd3        1        3        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        9       19        0
    //  no simd       14       34        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = RoundPoint::from_groups(
            // e1, e2, e3, e4
            Simd32x4::from([other[e12345], other[e12345], other[e12345], self[e1234]])
                * self.group0().truncate_to_3().extend_to_4(other[e12345])
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e5
            other[e12345] * self[e3215],
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       42        0
    //    simd3        2        6        0
    //    simd4       22       19        0
    // Totals...
    // yes simd       27       67        0
    //  no simd       97      136        0
    fn sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[e1234]) * other.group1().truncate_to_3()) + (other.group0().zxy() * self.group0().yzx()) - (other.group0().yzx() * self.group0().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                other[e321] * self[e4235] * -1.0,
                other[e321] * self[e4315] * -1.0,
                other[e321] * self[e4125] * -1.0,
                other[e435] * self[e4125],
            ]) + (Simd32x4::from([self[e1234], self[e1234], self[e1234], self[e4315]]) * other.group2().extend_to_4(other[e425]))
                + (self.group0().wwwx() * other.group0().extend_to_4(other[e415])),
            // e235, e315, e125, e4
            (self.group0().zxyx() * other.group2().yzx().extend_to_4(other[e423]))
                + (self.group0().wwwy() * other.group1().truncate_to_3().extend_to_4(other[e431]))
                + Simd32x3::from(0.0).extend_to_4(other[e412] * self[e4125])
                - (other.group2().zxy() * self.group0().yzx()).extend_to_4(other[e321] * self[e1234]),
            // e1, e2, e3, e5
            Simd32x4::from([other[e435] * self[e4315], other[e415] * self[e4125], other[e425] * self[e4235], other[e125] * self[e4125] * -1.0])
                + (Simd32x4::from([self[e1234], self[e1234], self[e1234], self[e3215]]) * other.group2().extend_to_4(other[e321]))
                - (self.group0().zxyy() * other.group1().yzx().extend_to_4(other[e315]))
                - (self.group0().wwwx() * other.group0().extend_to_4(other[e235])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       38        0
    //    simd3        2        6        0
    //    simd4       23       21        0
    // Totals...
    // yes simd       29       65        0
    //  no simd      102      140        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[e1234]) * other.group1().truncate_to_3()) + (other.group0().zxy() * self.group0().yzx()) - (other.group0().yzx() * self.group0().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                other[e321] * self[e4235] * -1.0,
                other[e321] * self[e4315] * -1.0,
                other[e321] * self[e4125] * -1.0,
                other[e435] * self[e4125],
            ]) + (Simd32x4::from([self[e1234], self[e1234], self[e1234], self[e4315]]) * other.group2().truncate_to_3().extend_to_4(other[e425]))
                + (self.group0().wwwx() * other.group0().extend_to_4(other[e415])),
            // e235, e315, e125, e4
            (self.group0().zxyy() * other.group2().yzx().extend_to_4(other[e431]))
                + (self.group0().wwwx() * other.group1().truncate_to_3().extend_to_4(other[e423]))
                + Simd32x3::from(0.0).extend_to_4((other[e412] * self[e4125]) + (other[e12345] * self[e1234]))
                - (other.group2().zxy() * self.group0().yzx()).extend_to_4(other[e321] * self[e1234]),
            // e1, e2, e3, e5
            (Simd32x4::from([self[e1234], self[e1234], self[e1234], self[e3215]]) * other.group2()) + (other.group1().zxyw() * self.group0().yzxw())
                - (other.group2().wwwz() * self.group0().xyzz())
                - (self.group0().zxyy() * other.group1().yzx().extend_to_4(other[e315]))
                - (self.group0().wwwx() * other.group0().extend_to_4(other[e235])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       65        0
    //    simd3        2        4        0
    //    simd4       14       13        0
    // Totals...
    // yes simd       48       82        0
    //  no simd       94      129        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[e1234]) * other.group1().truncate_to_3()) + (other.group0().zxy() * self.group0().yzx()) - (other.group0().yzx() * self.group0().zxy()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e41] * self[e3215]) + (other[e45] * self[e4235]) + (other[e15] * self[e1234]),
                (other[e42] * self[e3215]) + (other[e45] * self[e4315]) + (other[e25] * self[e1234]),
                (other[e43] * self[e3215]) + (other[e45] * self[e4125]) + (other[e35] * self[e1234]),
                -(other[e23] * self[e4235]) - (other[e31] * self[e4315]) - (other[e12] * self[e4125]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                other[e35] * self[e4315] * -1.0,
                other[e15] * self[e4125] * -1.0,
                other[e25] * self[e4235] * -1.0,
                (other[e43] * self[e4125]) + (other[e45] * self[e1234]),
            ]) + (self.group0().zxyx() * other.group2().yzx().extend_to_4(other[e41]))
                + (self.group0().wwwy() * other.group1().truncate_to_3().extend_to_4(other[e42])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e41] * self[e3215]) + (other[e31] * self[e4125]),
                (other[e42] * self[e3215]) + (other[e12] * self[e4235]),
                (other[e43] * self[e3215]) + (other[e23] * self[e4315]),
                -(other[e45] * self[e3215]) - (other[e35] * self[e4125]),
            ]) - (Simd32x4::from([self[e1234], self[e1234], self[e1234], self[e4235]]) * other.group2().extend_to_4(other[e15]))
                - (self.group0().yzxy() * other.group1().zxy().extend_to_4(other[e25])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       31       66        0
    //    simd3        0        1        0
    //    simd4       23       22        0
    // Totals...
    // yes simd       54       89        0
    //  no simd      123      157        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([other[e4235] * self[e1234], other[e4315] * self[e1234], other[e4125] * self[e1234], other[e4125] * self[e4125] * -1.0])
                + (Simd32x4::from(self[e1234]) * other.group1().truncate_to_3().extend_to_4(other[e3215]))
                + (self.group0().yzxw() * other.group0().zxy().extend_to_4(other[e1234]))
                - (self.group0().xyzy() * other.group2().www().extend_to_4(other[e4315]))
                - (self.group0().zxyx() * other.group0().yzx().extend_to_4(other[e4235])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e45] * self[e4235]) + (other[e15] * self[e1234]) + (other[e4315] * self[e4125]),
                (other[e45] * self[e4315]) + (other[e25] * self[e1234]) + (other[e4125] * self[e4235]),
                (other[e45] * self[e4125]) + (other[e35] * self[e1234]) + (other[e4235] * self[e4315]),
                -(other[e31] * self[e4315]) - (other[e12] * self[e4125]) - (other[e3215] * self[e1234]),
            ]) + (Simd32x4::from(self[e3215]) * other.group0().extend_to_4(other[e1234]))
                - (self.group0().yzxx() * other.group3().zxy().extend_to_4(other[e23])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(other[e35] * self[e4315]) - (other[e4235] * self[e3215]),
                -(other[e15] * self[e4125]) - (other[e4315] * self[e3215]),
                -(other[e25] * self[e4235]) - (other[e4125] * self[e3215]),
                other[e45] * self[e1234],
            ]) + (self.group0().xyzz() * other.group3().www().extend_to_4(other[e43]))
                + (self.group0().zxyy() * other.group2().yzx().extend_to_4(other[e42]))
                + (self.group0().wwwx() * other.group1().truncate_to_3().extend_to_4(other[e41])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e41] * self[e3215]) + (other[e31] * self[e4125]),
                (other[e42] * self[e3215]) + (other[e12] * self[e4235]),
                (other[e43] * self[e3215]) + (other[e23] * self[e4315]),
                -(other[e25] * self[e4315]) - (other[e35] * self[e4125]),
            ]) - (Simd32x4::from([self[e1234], self[e1234], self[e1234], self[e4235]]) * other.group2().xyzx())
                - (other.group1().zxyw() * self.group0().yzxw()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       26        0
    //    simd3        0        2        0
    //    simd4       15       17        0
    // Totals...
    // yes simd       19       45        0
    //  no simd       64      100        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x3::from(0.0).extend_to_4(other[e5] * self[e1234]),
            // e415, e425, e435, e321
            Simd32x3::from(0.0).extend_to_4(other[e5] * self[e1234]),
            // e235, e315, e125, e5
            self.group0() * other.group0().xx().extend_to_4(other[e5], other[e12345]),
            // e1, e2, e3, e4
            Simd32x4::from(other[e12345]) * self.group0().truncate_to_3().extend_to_4(self[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       22       42        0
    //    simd3        2        5        0
    //    simd4       10       11        0
    // Totals...
    // yes simd       34       58        0
    //  no simd       68      101        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            ((Simd32x3::from(other[e45]) * self.group0().truncate_to_3()) + (Simd32x3::from(self[e1234]) * other.group0().truncate_to_3())).extend_to_4(0.0),
            // e15, e25, e35, e1234
            ((other.group0().yzx() * self.group0().zxy()) - (other.group0().zxy() * self.group0().yzx())).extend_to_4(other[e45] * self[e1234]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e1234], self[e1234], self[e1234], 1.0])
                * other
                    .group0()
                    .truncate_to_3()
                    .extend_to_4(-(other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]) - (other[e45] * self[e3215]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       22       45        0
    //    simd3        6        9        0
    //    simd4       12       14        0
    // Totals...
    // yes simd       40       68        0
    //  no simd       88      128        0
    fn sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([self[e1234], self[e1234], self[e1234], 1.0])
                * other
                    .group1()
                    .truncate_to_3()
                    .extend_to_4((other[e3215] * self[e1234]) - (other[e4235] * self[e4235]) - (other[e4315] * self[e4315]) - (other[e4125] * self[e4125])),
            // e23, e31, e12, e45
            ((Simd32x3::from(other[e45]) * self.group0().truncate_to_3())
                + (Simd32x3::from(self[e1234]) * other.group0().truncate_to_3())
                + (other.group1().yzx() * self.group0().zxy())
                - (other.group1().zxy() * self.group0().yzx()))
            .extend_to_4(other[e3215] * self[e1234] * -1.0),
            // e15, e25, e35, e1234
            ((Simd32x3::from(other[e3215]) * self.group0().truncate_to_3()) + (other.group0().yzx() * self.group0().zxy())
                - (Simd32x3::from(self[e3215]) * other.group1().truncate_to_3())
                - (other.group0().zxy() * self.group0().yzx()))
            .extend_to_4(other[e45] * self[e1234]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e1234], self[e1234], self[e1234], 1.0])
                * other
                    .group0()
                    .truncate_to_3()
                    .extend_to_4(-(other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]) - (other[e45] * self[e3215]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       39        0
    //    simd3        0        6        0
    //    simd4       17       14        0
    // Totals...
    // yes simd       26       59        0
    //  no simd       77      113        0
    fn sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[e1234]) * other.group0(),
            // e415, e425, e435, e321
            Simd32x4::from([self[e1234], self[e1234], self[e1234], 1.0])
                * other.group1().extend_to_4((other[e415] * self[e4235]) + (other[e425] * self[e4315]) + (other[e435] * self[e4125])),
            // e235, e315, e125, e4
            (Simd32x3::from(self[e3215]) * other.group0()).extend_to_4(0.0) + (other.group1().yzx() * self.group0().zxy()).extend_to_4(0.0)
                - (other.group1().zxy() * self.group0().yzx()).extend_to_4(0.0),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other[e435] * self[e4315]) + (other[e235] * self[e1234]),
                (other[e415] * self[e4125]) + (other[e315] * self[e1234]),
                (other[e425] * self[e4235]) + (other[e125] * self[e1234]),
                -(other[e315] * self[e4315]) - (other[e125] * self[e4125]),
            ]) - (self.group0().zxyx() * other.group0().yzx().extend_to_4(other[e235])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       37        0
    //    simd3        3        6        0
    //    simd4       17       18        0
    // Totals...
    // yes simd       31       61        0
    //  no simd       88      127        0
    fn sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(self[e1234]) * other.group0().truncate_to_3().extend_to_4(other[e5]),
            // e415, e425, e435, e321
            Simd32x4::from([self[e1234], self[e1234], self[e1234], 1.0])
                * other
                    .group1()
                    .truncate_to_3()
                    .extend_to_4((other[e415] * self[e4235]) + (other[e425] * self[e4315]) + (other[e435] * self[e4125]) + (other[e5] * self[e1234])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e315] * self[e4125]) + (other[e5] * self[e4235]),
                (other[e125] * self[e4235]) + (other[e5] * self[e4315]),
                (other[e235] * self[e4315]) + (other[e5] * self[e4125]),
                -(other[e315] * self[e4315]) - (other[e125] * self[e4125]),
            ]) + (Simd32x4::from(self[e3215]) * other.group0())
                - (other.group1().zxyx() * self.group0().yzxx()),
            // e1, e2, e3, e4
            ((Simd32x3::from(self[e1234]) * other.group1().truncate_to_3()) + (other.group0().zxy() * self.group0().yzx())
                - (Simd32x3::from(other[e12345]) * self.group0().truncate_to_3())
                - (other.group0().yzx() * self.group0().zxy()))
            .extend_to_4(other[e12345] * self[e1234]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for Sphere {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44       90        0
    //    simd2        4        4        0
    //    simd3       32       44        0
    //    simd4       27       24        0
    // Totals...
    // yes simd      107      162        0
    //  no simd      256      326        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                -(other[e4235] * self[e4235]) - (other[e4315] * self[e4315]) - (other[e4125] * self[e4125]),
                (other[e2] * self[e4315]) + (other[e3] * self[e4125]) + (other[e4] * self[e3215]),
            ]) + (Simd32x2::from(self[e1234]) * Simd32x2::from([other[e3215], other[e5]]))
                + (Simd32x2::from([other[e1234], other[e1]]) * self.group0().wx()),
            // e1, e2, e3, e4
            Simd32x4::from([
                -(other[e425] * self[e4125]) - (other[e423] * self[e3215]),
                -(other[e435] * self[e4235]) - (other[e431] * self[e3215]),
                -(other[e415] * self[e4315]) - (other[e412] * self[e3215]),
                (other[e431] * self[e4315]) + (other[e412] * self[e4125]),
            ]) + (Simd32x4::from(self[e1234]) * other.group8().extend_to_4(other[e12345]))
                + (self.group0().yzxx() * other.group6().zxy().extend_to_4(other[e423]))
                - (other.group0().yy().extend_to_4(other[e12345], other[e321]) * self.group0().truncate_to_3().extend_to_4(self[e1234])),
            // e5
            (other[e12345] * self[e3215]) + (other[e321] * self[e3215]) - (other[e235] * self[e4235]) - (other[e315] * self[e4315]) - (other[e125] * self[e4125]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e25] * self[e4125]) + (other[e3215] * self[e4235]),
                (other[e35] * self[e4235]) + (other[e3215] * self[e4315]),
                (other[e15] * self[e4315]) + (other[e3215] * self[e4125]),
                -(other[e12] * self[e4125]) - (other[e3215] * self[e1234]),
            ]) + (other.group5() * self.group0().www()).extend_to_4(other[e1234] * self[e3215])
                - (self.group0().yzxx() * other.group3().zxy().extend_to_4(other[e23]))
                - (self.group0().wwwy() * other.group9().truncate_to_3().extend_to_4(other[e31])),
            // e41, e42, e43
            (Simd32x3::from(self[e1234]) * other.group5()) + (Simd32x3::from(self[e1234]) * other.group9().truncate_to_3()) + (other.group4().zxy() * self.group0().yzx())
                - (Simd32x3::from(other[e1234]) * self.group0().truncate_to_3())
                - (other.group4().yzx() * self.group0().zxy()),
            // e23, e31, e12
            (Simd32x3::from(other[e45]) * self.group0().truncate_to_3())
                + (Simd32x3::from(self[e3215]) * other.group4())
                + (Simd32x3::from(self[e1234]) * other.group3().truncate_to_3())
                + (other.group9().yzx() * self.group0().zxy())
                - (other.group9().zxy() * self.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                other[e321] * self[e4235] * -1.0,
                other[e321] * self[e4315] * -1.0,
                other[e321] * self[e4125] * -1.0,
                other[e5] * self[e1234],
            ]) + (Simd32x4::from([self[e1234], self[e1234], self[e1234], self[e4315]]) * other.group8().extend_to_4(other[e425]))
                + (self.group0().yzxz() * other.group1().zxy().extend_to_4(other[e435]))
                + (self.group0().wwwx() * other.group7().extend_to_4(other[e415]))
                - (other.group1().yzxw() * self.group0().zxyw()),
            // e423, e431, e412
            (Simd32x3::from(self[e1234]) * other.group6().truncate_to_3()) + (other.group7().zxy() * self.group0().yzx())
                - (Simd32x3::from(other[e4]) * self.group0().truncate_to_3())
                - (Simd32x3::from(self[e1234]) * other.group1().truncate_to_3())
                - (other.group7().yzx() * self.group0().zxy()),
            // e235, e315, e125
            (Simd32x3::from(other[e5]) * self.group0().truncate_to_3())
                + (Simd32x3::from(self[e3215]) * other.group1().truncate_to_3())
                + (Simd32x3::from(self[e3215]) * other.group6().truncate_to_3())
                + (other.group8().yzx() * self.group0().zxy())
                - (other.group8().zxy() * self.group0().yzx()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e41] * self[e3215]) + (other[e31] * self[e4125]),
                (other[e42] * self[e3215]) + (other[e12] * self[e4235]),
                (other[e43] * self[e3215]) + (other[e23] * self[e4315]),
                -(other[e35] * self[e4125]) - (other[e45] * self[e3215]),
            ]) + (Simd32x4::from(other[scalar]) * self.group0())
                - (Simd32x4::from([self[e1234], self[e1234], self[e1234], self[e4315]]) * other.group3().xyzy())
                - (self.group0().yzxx() * other.group5().zxy().extend_to_4(other[e15])),
            // e1234
            (other[scalar] * self[e1234]) + (other[e45] * self[e1234]) + (other[e41] * self[e4235]) + (other[e42] * self[e4315]) + (other[e43] * self[e4125]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for Sphere {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       31        0
    //    simd3        3        7        0
    //    simd4        7        6        0
    // Totals...
    // yes simd       25       44        0
    //  no simd       52       76        0
    fn sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[e1234]) * other.group0().truncate_to_3(),
            // e23, e31, e12, e45
            ((other.group0().yzx() * self.group0().zxy()) - (other.group0().zxy() * self.group0().yzx())).extend_to_4(other[e3215] * self[e1234] * -1.0),
            // e15, e25, e35, scalar
            (Simd32x4::from(other[e3215]) * self.group0().truncate_to_3().extend_to_4(self[e1234]))
                + Simd32x3::from(0.0).extend_to_4(-(other[e4315] * self[e4315]) - (other[e4125] * self[e4125]))
                - (other.group0().xyzx() * self.group0().wwwx()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for Sphere {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       21        0
    //    simd3        3        6        0
    //    simd4       11       11        0
    // Totals...
    // yes simd       21       38        0
    //  no simd       60       83        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = CircleRotor::from_groups(
            // e423, e431, e412
            -(Simd32x3::from(other[e4]) * self.group0().truncate_to_3()) - (Simd32x3::from(self[e1234]) * other.group0().truncate_to_3()),
            // e415, e425, e435, e321
            (other.group0().zxy() * self.group0().yzx()).extend_to_4(other[e5] * self[e1234]) - (other.group0().yzxw() * self.group0().zxyw()),
            // e235, e315, e125, e12345
            (Simd32x4::from([other[e5], other[e5], other[e5], self[e4315]]) * self.group0().truncate_to_3().extend_to_4(other[e2]))
                + (other.group0().xyzx() * self.group0().wwwx())
                + Simd32x3::from(0.0).extend_to_4((other[e3] * self[e4125]) + (other[e4] * self[e3215]) + (other[e5] * self[e1234])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for Sphere {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        5        0
    //    simd3        1        3        0
    //    simd4        3        4        0
    // Totals...
    // yes simd        6       12        0
    //  no simd       17       30        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[scalar]) * self.group0(),
            // e1234
            other[scalar] * self[e1234],
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for Sphere {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       31        0
    //    simd3        3        7        0
    //    simd4        8        7        0
    // Totals...
    // yes simd       27       45        0
    //  no simd       57       80        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiCircleRotor::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[e1234]) * other.group0().truncate_to_3()) - (Simd32x3::from(other[e1234]) * self.group0().truncate_to_3()),
            // e23, e31, e12, e45
            (other.group0().yzx() * self.group0().zxy()).extend_to_4(other[e1234] * self[e3215]) - (other.group0().zxyw() * self.group0().yzx().extend_to_4(self[e1234])),
            // e15, e25, e35, scalar
            (Simd32x4::from(other[e3215]) * self.group0().truncate_to_3().extend_to_4(self[e1234]))
                + Simd32x3::from(0.0).extend_to_4((other[e1234] * self[e3215]) - (other[e4315] * self[e4315]) - (other[e4125] * self[e4125]))
                - (other.group0().xyzx() * self.group0().wwwx()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       59        0
    //    simd3        0        2        0
    //    simd4       27       26        0
    // Totals...
    // yes simd       47       87        0
    //  no simd      128      169        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                -(self[e4235] * other[e4]) - (self[e4125] * other[e431]) - (self[e1234] * other[e1]),
                -(self[e4235] * other[e412]) - (self[e4315] * other[e4]) - (self[e1234] * other[e2]),
                -(self[e4315] * other[e423]) - (self[e4125] * other[e4]) - (self[e1234] * other[e3]),
                (self[e4125] * other[e3]) + (self[e3215] * other[e4]) + (self[e1234] * other[e5]),
            ]) + (Simd32x4::from([self[e1234], self[e1234], self[e1234], other[e2]]) * other.group1().truncate_to_3().extend_to_4(self[e4315]))
                + (self.group0().yzxx() * other.group0().zxy().extend_to_4(other[e1])),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e4125] * other[e2] * -1.0,
                self[e4315] * other[e321] * -1.0,
                self[e4125] * other[e321] * -1.0,
                self[e1234] * other[e5],
            ]) + (Simd32x4::from([self[e1234], self[e1234], self[e1234], other[e435]]) * other.group2().truncate_to_3().extend_to_4(self[e4125]))
                + (self.group0().yzxx() * other.group3().zxy().extend_to_4(other[e415]))
                + (self.group0().wwwy() * other.group0().truncate_to_3().extend_to_4(other[e425]))
                - (Simd32x4::from([other[e321], other[e3], other[e1], other[e4]]) * self.group0().xxyw()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e3215] * other[e415]) + (self[e3215] * other[e1]),
                (self[e3215] * other[e425]) + (self[e3215] * other[e2]),
                (self[e3215] * other[e435]) + (self[e3215] * other[e3]),
                -(self[e4315] * other[e315]) - (self[e4125] * other[e125]),
            ]) + (self.group0().xxyw() * other.group2().wzx().extend_to_4(other[e12345]))
                + (self.group0().zyzw() * other.group2().yww().extend_to_4(other[e321]))
                - (self.group0().yzxx() * other.group2().zxyx()),
            // e1, e2, e3, e4
            Simd32x4::from([
                -(self[e4125] * other[e425]) - (self[e3215] * other[e423]),
                -(self[e4315] * other[e12345]) - (self[e3215] * other[e431]),
                -(self[e4125] * other[e12345]) - (self[e3215] * other[e412]),
                (self[e4125] * other[e412]) + (self[e1234] * other[e12345]),
            ]) + (Simd32x4::from([self[e1234], self[e1234], self[e1234], other[e431]]) * other.group2().truncate_to_3().extend_to_4(self[e4315]))
                + (self.group0().yzxx() * other.group1().zxy().extend_to_4(other[e423]))
                - (Simd32x4::from([other[e12345], other[e435], other[e415], self[e1234]]) * self.group0().xxy().extend_to_4(other[e321])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       67        0
    //    simd3        0        1        0
    //    simd4       24       23        0
    // Totals...
    // yes simd       56       91        0
    //  no simd      128      162        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([self[e1234] * other[e4235], self[e1234] * other[e4315], self[e1234] * other[e4125], self[e4125] * other[e4125] * -1.0])
                + (Simd32x4::from(self[e1234]) * other.group1().truncate_to_3().extend_to_4(other[e3215]))
                + (self.group0().yzxw() * other.group0().zxy().extend_to_4(other[e1234]))
                - (Simd32x4::from([other[e42], other[e1234], other[e1234], other[e4315]]) * self.group0().zyzy())
                - (Simd32x4::from([other[e1234], other[e43], other[e41], other[e4235]]) * self.group0().xxyx()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e4125] * other[e4315]) + (self[e3215] * other[e41]) + (self[e1234] * other[e15]),
                (self[e4315] * other[e45]) + (self[e3215] * other[e42]) + (self[e1234] * other[e25]),
                (self[e4125] * other[e45]) + (self[e3215] * other[e43]) + (self[e1234] * other[e35]),
                -(self[e4315] * other[e31]) - (self[e4125] * other[e12]) - (self[e1234] * other[e3215]),
            ]) + (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e1234]]) * self.group0().xxyw())
                - (self.group0().yzxx() * other.group3().zxy().extend_to_4(other[e23])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(self[e4315] * other[e35]) - (self[e3215] * other[e4235]),
                -(self[e4125] * other[e15]) - (self[e3215] * other[e4315]),
                -(self[e4235] * other[e25]) - (self[e3215] * other[e4125]),
                (self[e1234] * other[scalar]) + (self[e1234] * other[e45]),
            ]) + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e42]]) * self.group0().zyzy())
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e41]]) * self.group0().xxyx())
                + (self.group0().wwwz() * other.group1().truncate_to_3().extend_to_4(other[e43])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e4125] * other[e31]) + (self[e3215] * other[e41]),
                (self[e4315] * other[scalar]) + (self[e3215] * other[e42]),
                (self[e4125] * other[scalar]) + (self[e3215] * other[e43]),
                -(self[e4125] * other[e35]) - (self[e3215] * other[e45]),
            ]) + (Simd32x4::from([other[scalar], other[e12], other[e23], other[scalar]]) * self.group0().xxyw())
                - (Simd32x4::from([self[e1234], self[e1234], self[e1234], other[e25]]) * other.group2().truncate_to_3().extend_to_4(self[e4315]))
                - (self.group0().yzxx() * other.group1().zxy().extend_to_4(other[e15])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl std::ops::Div<sandwich> for VersorEven {
    type Output = sandwich_partial<VersorEven>;
    fn div(self, _rhs: sandwich) -> Self::Output {
        sandwich_partial(self)
    }
}
impl Sandwich<AntiCircleRotor> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       84      143        0
    //    simd3        0       31        0
    //    simd4       79       52        0
    // Totals...
    // yes simd      163      226        0
    //  no simd      400      444        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e41] * self[e321])
                    + (other[e42] * self[e435])
                    + (other[e42] * self[e3])
                    + (other[e23] * self[e4])
                    + (other[e31] * self[e412])
                    + (other[e45] * self[e423])
                    + (other[scalar] * self[e423]),
                (other[e42] * self[e321])
                    + (other[e43] * self[e415])
                    + (other[e43] * self[e1])
                    + (other[e31] * self[e4])
                    + (other[e12] * self[e423])
                    + (other[e45] * self[e431])
                    + (other[scalar] * self[e431]),
                (other[e41] * self[e2])
                    + (other[e43] * self[e12345])
                    + (other[e43] * self[e321])
                    + (other[e23] * self[e431])
                    + (other[e12] * self[e4])
                    + (other[e45] * self[e412])
                    + (other[scalar] * self[e412]),
                -(other[e23] * self[e415])
                    - (other[e31] * self[e425])
                    - (other[e12] * self[e435])
                    - (other[e45] * self[e321])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412]),
            ]) + (self.group0().ww().extend_to_4(self[e425], self[e12345]) * other.group0().xyx().extend_to_4(other[scalar]))
                - (other.group0().zxy() * self.group1().yzx()).extend_to_4(other[e41] * self[e235])
                - (other.group0().zxy() * self.group3().yzx()).extend_to_4(other[e42] * self[e315])
                - (other.group1().zxy() * self.group0().yzx()).extend_to_4(other[e43] * self[e125]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e15] * self[e4]) + (other[e25] * self[e412]) + (other[scalar] * self[e415]),
                (other[e25] * self[e4]) + (other[e35] * self[e423]) + (other[scalar] * self[e425]),
                (other[e15] * self[e431]) + (other[e35] * self[e4]) + (other[scalar] * self[e435]),
                -(other[e15] * self[e423]) - (other[e25] * self[e431]) - (other[e35] * self[e412]),
            ]) + (self.group2().zxwy() * other.group0().yzz().extend_to_4(other[e42]))
                + (self.group2().wwyx() * other.group0().xyx().extend_to_4(other[e41]))
                + (self.group0().ww().extend_to_4(self[e425], self[e125]) * other.group1().xyx().extend_to_4(other[e43]))
                + (self.group1().zx().extend_to_4(self[e12345], self[e321]) * other.group1().yzz().extend_to_4(other[scalar]))
                - (other.group1().zxyy() * self.group1().yzx().extend_to_4(self[e2]))
                - (other.group1().wwwz() * self.group3().xyzz())
                - (self.group0().yzxw() * other.group2().zxy().extend_to_4(other[e45]))
                - (other.group0().zxy() * self.group2().yzx()).extend_to_4(other[e23] * self[e1]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e35] * self[e2]) + (other[scalar] * self[e235]),
                (other[e35] * self[e415]) + (other[scalar] * self[e315]),
                (other[e35] * self[e12345]) + (other[scalar] * self[e125]),
                -(other[e25] * self[e425]) - (other[e35] * self[e435]),
            ]) + (Simd32x4::from([self[e12345], self[e3], self[e425], self[e3]]) * other.group2().xxxz())
                + (Simd32x4::from([self[e435], self[e12345], self[e1], self[e5]]) * other.group2().yyyw())
                + (other.group1().xyx() * self.group2().wwy()).extend_to_4(other[e15] * self[e1])
                + (other.group1().yzz() * self.group2().zxw()).extend_to_4(other[e25] * self[e2])
                - (Simd32x4::from([self[e425], self[e1], self[e321], self[e415]]) * other.group2().zzzx())
                - (Simd32x4::from([self[e3], self[e321], self[e415], self[e5]]) * other.group2().yyy().extend_to_4(other[e45]))
                - (other.group1().zxyx() * self.group2().yzxx())
                - (other.group1().wwwy() * self.group2().xyzy())
                - (self.group1().wz().extend_to_4(self[e2], self[e125]) * other.group2().xxx().extend_to_4(other[e12])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e31] * self[e3]) + (other[e15] * self[e4]) + (other[e25] * self[e412]) + (other[scalar] * self[e1]),
                (other[e12] * self[e1]) + (other[e25] * self[e4]) + (other[e35] * self[e423]) + (other[scalar] * self[e2]),
                (other[e12] * self[e321]) + (other[e15] * self[e431]) + (other[e35] * self[e4]) + (other[scalar] * self[e3]),
                -(other[e43] * self[e3]) - (other[e23] * self[e423]) - (other[e31] * self[e431]) - (other[e12] * self[e412]),
            ]) + (self.group1().ww().extend_to_4(self[e2], self[e4]) * other.group1().xyx().extend_to_4(other[scalar]))
                + (other.group0().zxy() * self.group2().yzx()).extend_to_4(other[e45] * self[e4])
                - (other.group0().xyx() * self.group2().wwy()).extend_to_4(other[e41] * self[e415])
                - (other.group0().yzz() * self.group2().zxw()).extend_to_4(other[e41] * self[e1])
                - (other.group1().zxy() * self.group3().yzx()).extend_to_4(other[e42] * self[e425])
                - (other.group1().www() * self.group1().truncate_to_3()).extend_to_4(other[e42] * self[e2])
                - (other.group2().zxy() * self.group0().yzx()).extend_to_4(other[e43] * self[e435]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       68      129        0
    //    simd3        0       27        0
    //    simd4       99       76        0
    // Totals...
    // yes simd      167      232        0
    //  no simd      464      514        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(other[e431] * self[e3]) - (other[e415] * self[e4]) - (other[e425] * self[e412]) - (other[e4] * self[e415]) - (other[e4] * self[e1]) - (other[e3] * self[e431]),
                -(other[e412] * self[e1]) - (other[e425] * self[e4]) - (other[e435] * self[e423]) - (other[e4] * self[e425]) - (other[e4] * self[e2]) - (other[e1] * self[e412]),
                -(other[e412] * self[e321]) - (other[e415] * self[e431]) - (other[e435] * self[e4]) - (other[e4] * self[e435]) - (other[e4] * self[e3]) - (other[e2] * self[e423]),
                (other[e235] * self[e423]) + (other[e315] * self[e431]) + (other[e125] * self[e412]) + (other[e1] * self[e1]) + (other[e2] * self[e2]) + (other[e3] * self[e3]),
            ]) + (other.group1().wwwx() * self.group0().truncate_to_3().extend_to_4(self[e415]))
                + (self.group0().zx().extend_to_4(self[e4], self[e435]) * other.group3().yzz().extend_to_4(other[e435]))
                + (self.group3().ww().extend_to_4(self[e431], self[e425]) * other.group3().xyx().extend_to_4(other[e425]))
                + (other.group0().zxy() * self.group1().yzx()).extend_to_4(other[e423] * self[e235])
                + (other.group0().zxy() * self.group3().yzx()).extend_to_4(other[e431] * self[e315])
                + (other.group1().zxy() * self.group0().yzx()).extend_to_4(other[e412] * self[e125])
                - (self.group0().ww().extend_to_4(self[e425], self[e321]) * other.group0().xyx().extend_to_4(other[e321]))
                - (self.group1().zx().extend_to_4(self[e12345], self[e4]) * other.group0().yzz().extend_to_4(other[e5]))
                - (self.group1().ww().extend_to_4(self[e2], self[e5]) * other.group0().xyx().extend_to_4(other[e4])),
            // e23, e31, e12, e45
            Simd32x4::from([other[e5] * self[e423] * -1.0, other[e5] * self[e431] * -1.0, other[e5] * self[e412] * -1.0, other[e5] * self[e4]])
                + (self.group2().yzxx() * other.group0().zxy().extend_to_4(other[e423]))
                + (other.group1().zxy() * self.group1().yzx()).extend_to_4(other[e431] * self[e315])
                + (other.group2().zxy() * self.group0().yzx()).extend_to_4(other[e412] * self[e125])
                + (other.group3().zxy() * self.group3().yzx()).extend_to_4(other[e321] * self[e12345])
                - (other.group1().xyxz() * self.group0().ww().extend_to_4(self[e425], self[e3]))
                - (other.group2().xyxz() * self.group3().ww().extend_to_4(self[e431], self[e412]))
                - (other.group2().yzzw() * self.group0().zx().extend_to_4(self[e4], self[e5]))
                - (other.group3().xyxy() * self.group1().ww().extend_to_4(self[e2], self[e425]))
                - (other.group3().yzzz() * self.group3().zx().extend_to_4(self[e321], self[e435]))
                - (self.group1().zx().extend_to_4(self[e12345], self[e423]) * other.group1().yzz().extend_to_4(other[e235]))
                - (other.group0().xyx() * self.group2().wwy()).extend_to_4(other[e415] * self[e1])
                - (other.group0().yzz() * self.group2().zxw()).extend_to_4(other[e425] * self[e2])
                - (other.group1().www() * self.group3().truncate_to_3()).extend_to_4(other[e315] * self[e431])
                - (other.group2().www() * self.group2().truncate_to_3()).extend_to_4(other[e1] * self[e415]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(other[e125] * self[e2]) - (other[e1] * self[e5]) - (other[e2] * self[e125]) - (other[e5] * self[e415]),
                -(other[e125] * self[e415]) - (other[e2] * self[e5]) - (other[e3] * self[e235]) - (other[e5] * self[e425]),
                -(other[e125] * self[e12345]) - (other[e1] * self[e315]) - (other[e3] * self[e5]) - (other[e5] * self[e435]),
                (other[e415] * self[e423]) + (other[e425] * self[e431]) + (other[e435] * self[e412]) + (other[e321] * self[e4]),
            ]) + (Simd32x4::from([self[e425], self[e1], self[e321], self[e2]]) * other.group2().zzz().extend_to_4(other[e431]))
                + (Simd32x4::from([self[e3], self[e321], self[e415], self[e425]]) * other.group2().yyy().extend_to_4(other[e431]))
                + (self.group3().xyzz() * other.group3().www().extend_to_4(other[e412]))
                + (self.group1().wz().extend_to_4(self[e2], self[e1]) * other.group2().xxx().extend_to_4(other[e423]))
                + (other.group1().zxy() * self.group2().yzx()).extend_to_4(other[e423] * self[e415])
                + (other.group3().zxy() * self.group2().yzx()).extend_to_4(other[e412] * self[e435])
                - (Simd32x4::from([self[e12345], self[e3], self[e425], self[e431]]) * other.group2().xxx().extend_to_4(other[e2]))
                - (Simd32x4::from([self[e435], self[e12345], self[e1], self[e412]]) * other.group2().yyy().extend_to_4(other[e3]))
                - (other.group1().xyx() * self.group2().wwy()).extend_to_4(other[e4] * self[e12345])
                - (other.group1().yzz() * self.group2().zxw()).extend_to_4(other[e4] * self[e321])
                - (other.group1().www() * self.group2().truncate_to_3()).extend_to_4(other[e1] * self[e423]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([other[e3] * self[e425] * -1.0, other[e1] * self[e435] * -1.0, other[e2] * self[e415] * -1.0, other[e5] * self[e321]])
                + (other.group1().xyxy() * self.group1().ww().extend_to_4(self[e2], self[e315]))
                + (other.group1().yzzz() * self.group3().zx().extend_to_4(self[e321], self[e125]))
                + (other.group2().xyxy() * self.group3().ww().extend_to_4(self[e431], self[e425]))
                + (other.group2().yzzz() * self.group0().zx().extend_to_4(self[e4], self[e435]))
                + (other.group3().xyxx() * self.group0().ww().extend_to_4(self[e425], self[e235]))
                + (other.group3().yzzy() * self.group1().zx().extend_to_4(self[e12345], self[e315]))
                + (other.group3().wwwz() * self.group0().truncate_to_3().extend_to_4(self[e125]))
                + (self.group1().xyzx() * other.group1().www().extend_to_4(other[e235]))
                + (self.group2().yzxx() * other.group0().zxy().extend_to_4(other[e415]))
                - (other.group2().zxyz() * self.group0().yzx().extend_to_4(self[e3]))
                - (self.group2().wwyw() * other.group0().xyx().extend_to_4(other[e321]))
                - (self.group3().yzxy() * other.group1().zxy().extend_to_4(other[e315]))
                - (other.group0().yzz() * self.group2().zxw()).extend_to_4(other[e235] * self[e1])
                - (other.group2().www() * self.group2().truncate_to_3()).extend_to_4(other[e5] * self[e12345]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       37       70        0
    //    simd3        1       21        0
    //    simd4       54       42        0
    // Totals...
    // yes simd       92      133        0
    //  no simd      256      301        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([self[e423], self[e431], self[e412], 1.0]) * other.group0().yy().extend_to_4(other[scalar], (other[e3215] * self[e4]) + (other[scalar] * self[e12345])),
            // e415, e425, e435, e321
            (Simd32x4::from(other[e3215]) * self.group0().truncate_to_3().extend_to_4(self[e4])) + (Simd32x4::from(other[scalar]) * self.group1()),
            // e235, e315, e125, e5
            (Simd32x4::from(other[e3215]) * self.group1().truncate_to_3().extend_to_4(self[e12345])) + (Simd32x4::from(other[scalar]) * self.group2())
                - (Simd32x4::from(other[e3215]) * self.group3().truncate_to_3().extend_to_4(self[e321])),
            // e1, e2, e3, e4
            ((Simd32x3::from(other[e3215]) * self.group0().truncate_to_3()) + (Simd32x3::from(other[scalar]) * self.group3().truncate_to_3()))
                .extend_to_4(other[scalar] * self[e4]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       41       66        0
    //    simd3        6       17        0
    //    simd4       58       54        0
    // Totals...
    // yes simd      105      137        0
    //  no simd      291      333        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([self[e423], self[e431], self[e412], 1.0])
                * other
                    .group0()
                    .www()
                    .extend_to_4((other[e235] * self[e423]) + (other[e315] * self[e431]) + (other[e125] * self[e412]) - (other[e321] * self[e321])),
            // e23, e31, e12, e45
            (other.group0().zxyw() * self.group0().yzxw())
                - (other.group0().xyxx() * self.group3().ww().extend_to_4(self[e431], self[e423]))
                - (other.group0().yzzy() * self.group0().zx().extend_to_4(self[e4], self[e431]))
                - (other.group0().wwwz() * self.group3().truncate_to_3().extend_to_4(self[e412])),
            // e15, e25, e35, e1234
            ((Simd32x3::from(other[e235]) * Simd32x3::from([self[e321], self[e435], self[e2]]))
                + (Simd32x3::from(other[e315]) * Simd32x3::from([self[e3], self[e321], self[e415]]))
                + (Simd32x3::from(other[e125]) * Simd32x3::from([self[e425], self[e1], self[e321]]))
                - (Simd32x3::from(other[e235]) * Simd32x3::from([self[e12345], self[e3], self[e425]]))
                - (Simd32x3::from(other[e315]) * Simd32x3::from([self[e435], self[e12345], self[e1]]))
                - (Simd32x3::from(other[e125]) * Simd32x3::from([self[e2], self[e415], self[e12345]]))
                - (Simd32x3::from(other[e321]) * self.group2().truncate_to_3()))
            .extend_to_4(other[e321] * self[e4]),
            // e4235, e4315, e4125, e3215
            (other.group0().xyxx() * self.group3().ww().extend_to_4(self[e431], self[e415]))
                + (other.group0().yzzy() * self.group0().zx().extend_to_4(self[e4], self[e425]))
                + (other.group0().wwwz() * self.group1().xyzz())
                + Simd32x3::from(0.0).extend_to_4(-(other[e315] * self[e2]) - (other[e125] * self[e3]) - (other[e321] * self[e5]))
                - (other.group0().zxyx() * self.group0().yzx().extend_to_4(self[e1])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       63       92        0
    //    simd3        0       12        0
    //    simd4       74       67        0
    // Totals...
    // yes simd      137      171        0
    //  no simd      359      396        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (other.group0().wwwx() * self.group0().xyzx())
                + (self.group0().zx().extend_to_4(self[e4], self[e412]) * other.group1().yzz().extend_to_4(other[e125]))
                + (self.group3().ww().extend_to_4(self[e431], self[e431]) * other.group1().xyx().extend_to_4(other[e315]))
                + Simd32x3::from(0.0).extend_to_4((other[e1] * self[e1]) + (other[e2] * self[e2]) + (other[e3] * self[e3]) - (other[e5] * self[e4]))
                - (other.group1().zxy() * self.group0().yzx()).extend_to_4(other[e321] * self[e321]),
            // e23, e31, e12, e45
            (other.group0().zxyw() * self.group0().yzxw()) + (other.group1().zxyw() * self.group3().yzxw())
                - (other.group0().xyxx() * self.group3().ww().extend_to_4(self[e431], self[e423]))
                - (other.group0().yzzy() * self.group0().zx().extend_to_4(self[e4], self[e431]))
                - (other.group0().wwwz() * self.group3().truncate_to_3().extend_to_4(self[e412]))
                - (other.group1().xyxx() * self.group1().ww().extend_to_4(self[e2], self[e415]))
                - (other.group1().yzzy() * self.group3().zx().extend_to_4(self[e321], self[e425]))
                - (other.group1().wwwz() * self.group0().truncate_to_3().extend_to_4(self[e435])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e315] * self[e3]) + (other[e125] * self[e425]) + (other[e3] * self[e315]) + (other[e5] * self[e1])
                    - (other[e321] * self[e235])
                    - (other[e1] * self[e5])
                    - (other[e2] * self[e125])
                    - (other[e5] * self[e415]),
                (other[e315] * self[e321]) + (other[e125] * self[e1]) + (other[e1] * self[e125]) + (other[e5] * self[e2])
                    - (other[e321] * self[e315])
                    - (other[e2] * self[e5])
                    - (other[e3] * self[e235])
                    - (other[e5] * self[e425]),
                (other[e315] * self[e415]) + (other[e125] * self[e321]) + (other[e2] * self[e235]) + (other[e5] * self[e3])
                    - (other[e321] * self[e125])
                    - (other[e1] * self[e315])
                    - (other[e3] * self[e5])
                    - (other[e5] * self[e435]),
                0.0,
            ]) + (other.group0().xxxw() * self.group1().wz().extend_to_4(self[e2], self[e4]))
                - (Simd32x4::from([self[e12345], self[e3], self[e425], self[e423]]) * other.group0().xxx().extend_to_4(other[e1]))
                - (Simd32x4::from([self[e435], self[e12345], self[e1], self[e431]]) * other.group0().yyy().extend_to_4(other[e2]))
                - (Simd32x4::from([self[e2], self[e415], self[e12345], self[e412]]) * other.group0().zzz().extend_to_4(other[e3])),
            // e4235, e4315, e4125, e3215
            (other.group0().xyxx() * self.group3().ww().extend_to_4(self[e431], self[e415]))
                + (other.group0().yzzy() * self.group0().zx().extend_to_4(self[e4], self[e425]))
                + (other.group0().wwwz() * self.group1().xyzz())
                + (other.group1().xyxx() * self.group0().ww().extend_to_4(self[e425], self[e235]))
                + (other.group1().yzzy() * self.group1().zx().extend_to_4(self[e12345], self[e315]))
                + (other.group1().wwwz() * self.group0().truncate_to_3().extend_to_4(self[e125]))
                + Simd32x3::from(0.0).extend_to_4((other[e5] * self[e321]) - (other[e125] * self[e3]) - (other[e321] * self[e5]) - (other[e5] * self[e12345]))
                - (other.group0().zxyx() * self.group0().yzx().extend_to_4(self[e1]))
                - (other.group1().zxy() * self.group1().yzx()).extend_to_4(other[e315] * self[e2]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       68      122        0
    //    simd3        0       25        0
    //    simd4       63       42        0
    // Totals...
    // yes simd      131      189        0
    //  no simd      320      365        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e23] * self[e4]) + (other[e31] * self[e412]),
                (other[e31] * self[e4]) + (other[e12] * self[e423]),
                (other[e23] * self[e431]) + (other[e12] * self[e4]),
                -(other[e31] * self[e425]) - (other[e12] * self[e435]) - (other[e15] * self[e423]) - (other[e25] * self[e431]) - (other[e35] * self[e412]),
            ]) - (other.group0().zxy() * self.group0().yzx()).extend_to_4(other[e23] * self[e415]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e23] * self[e12345]) + (other[e31] * self[e435]) + (other[e15] * self[e4]) + (other[e25] * self[e412]),
                (other[e31] * self[e12345]) + (other[e12] * self[e415]) + (other[e25] * self[e4]) + (other[e35] * self[e423]),
                (other[e23] * self[e425]) + (other[e12] * self[e12345]) + (other[e15] * self[e431]) + (other[e35] * self[e4]),
                -(other[e12] * self[e3]) - (other[e15] * self[e423]) - (other[e25] * self[e431]) - (other[e35] * self[e412]),
            ]) - (other.group0().zxy() * self.group1().yzx()).extend_to_4(other[e23] * self[e1])
                - (other.group1().zxy() * self.group0().yzx()).extend_to_4(other[e31] * self[e2]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e25] * self[e435]) + (other[e35] * self[e2]),
                (other[e25] * self[e12345]) + (other[e35] * self[e415]),
                (other[e25] * self[e1]) + (other[e35] * self[e12345]),
                -(other[e25] * self[e425]) - (other[e35] * self[e435]),
            ]) + (Simd32x4::from([self[e12345], self[e3], self[e425], self[e3]]) * other.group1().xxx().extend_to_4(other[e35]))
                + (other.group0().xyx() * self.group2().wwy()).extend_to_4(other[e15] * self[e1])
                + (other.group0().yzz() * self.group2().zxw()).extend_to_4(other[e25] * self[e2])
                - (Simd32x4::from([self[e425], self[e1], self[e321], self[e415]]) * other.group1().zzz().extend_to_4(other[e15]))
                - (Simd32x4::from([self[e3], self[e321], self[e415], self[e125]]) * other.group1().yyy().extend_to_4(other[e12]))
                - (self.group2().yzxx() * other.group0().zxy().extend_to_4(other[e23]))
                - (self.group1().wz().extend_to_4(self[e2], self[e315]) * other.group1().xxx().extend_to_4(other[e31])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e23] * self[e321]) + (other[e31] * self[e3]) + (other[e15] * self[e4]) + (other[e25] * self[e412]),
                (other[e31] * self[e321]) + (other[e12] * self[e1]) + (other[e25] * self[e4]) + (other[e35] * self[e423]),
                (other[e23] * self[e2]) + (other[e12] * self[e321]) + (other[e15] * self[e431]) + (other[e35] * self[e4]),
                other[e12] * self[e412] * -1.0,
            ]) - (self.group0().yzxy() * other.group1().zxy().extend_to_4(other[e31]))
                - (other.group0().zxy() * self.group3().yzx()).extend_to_4(other[e23] * self[e423]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       68      119        0
    //    simd3        0       22        0
    //    simd4       71       53        0
    // Totals...
    // yes simd      139      194        0
    //  no simd      352      397        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                other[scalar] * self[e423],
                other[scalar] * self[e431],
                other[scalar] * self[e412],
                -(other[e31] * self[e425]) - (other[e12] * self[e435]) - (other[e15] * self[e423]) - (other[e25] * self[e431]) - (other[e35] * self[e412]),
            ]) + (other.group0().xyxw() * self.group3().ww().extend_to_4(self[e431], self[e12345]))
                + (self.group0().zx().extend_to_4(self[e4], self[e4]) * other.group0().yzz().extend_to_4(other[e3215]))
                - (other.group0().zxyx() * self.group0().yzx().extend_to_4(self[e415])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[scalar] * self[e415]) + (other[e15] * self[e4]) + (other[e25] * self[e412]) + (other[e3215] * self[e423]),
                (other[scalar] * self[e425]) + (other[e25] * self[e4]) + (other[e35] * self[e423]) + (other[e3215] * self[e431]),
                (other[scalar] * self[e435]) + (other[e15] * self[e431]) + (other[e35] * self[e4]) + (other[e3215] * self[e412]),
                -(other[e12] * self[e3]) - (other[e15] * self[e423]) - (other[e25] * self[e431]) - (other[e35] * self[e412]),
            ]) + (other.group0().xyxw() * self.group0().ww().extend_to_4(self[e425], self[e321]))
                + (self.group1().zx().extend_to_4(self[e12345], self[e4]) * other.group0().yzz().extend_to_4(other[e3215]))
                - (other.group0().zxyx() * self.group1().yzx().extend_to_4(self[e1]))
                - (other.group1().zxy() * self.group0().yzx()).extend_to_4(other[e31] * self[e2]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e35] * self[e2]) + (other[e3215] * self[e415]),
                (other[e35] * self[e415]) + (other[e3215] * self[e425]),
                (other[e35] * self[e12345]) + (other[e3215] * self[e435]),
                -(other[e35] * self[e435]) - (other[e3215] * self[e321]),
            ]) + (Simd32x4::from([self[e12345], self[e3], self[e425], self[e3]]) * other.group1().xxxz())
                + (Simd32x4::from([self[e435], self[e12345], self[e1], self[e12345]]) * other.group1().yyyw())
                + (other.group0().xyxw() * self.group2().wwyw())
                + (other.group0().yzz() * self.group2().zxw()).extend_to_4(other[e15] * self[e1])
                + (other.group0().www() * self.group2().truncate_to_3()).extend_to_4(other[e25] * self[e2])
                - (Simd32x4::from([self[e425], self[e1], self[e321], self[e415]]) * other.group1().zzzx())
                - (Simd32x4::from([self[e3], self[e321], self[e415], self[e125]]) * other.group1().yyy().extend_to_4(other[e12]))
                - (other.group0().zxyx() * self.group2().yzxx())
                - (other.group1().wwwy() * self.group3().truncate_to_3().extend_to_4(self[e425]))
                - (self.group1().wz().extend_to_4(self[e2], self[e315]) * other.group1().xxx().extend_to_4(other[e31])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e31] * self[e3]) + (other[scalar] * self[e1]) + (other[e15] * self[e4]) + (other[e25] * self[e412]) + (other[e3215] * self[e423]),
                (other[e12] * self[e1]) + (other[scalar] * self[e2]) + (other[e25] * self[e4]) + (other[e35] * self[e423]) + (other[e3215] * self[e431]),
                (other[e12] * self[e321]) + (other[scalar] * self[e3]) + (other[e15] * self[e431]) + (other[e35] * self[e4]) + (other[e3215] * self[e412]),
                other[e12] * self[e412] * -1.0,
            ]) + (other.group0().xyxw() * self.group1().ww().extend_to_4(self[e2], self[e4]))
                - (other.group0().zxyx() * self.group3().yzx().extend_to_4(self[e423]))
                - (self.group0().yzxy() * other.group1().zxy().extend_to_4(other[e31])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       39       66        0
    //    simd3        0       10        0
    //    simd4       64       59        0
    // Totals...
    // yes simd      103      135        0
    //  no simd      295      332        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (other.group0().xyxx() * self.group3().ww().extend_to_4(self[e431], self[e1]))
                + (other.group0().yzzy() * self.group0().zx().extend_to_4(self[e4], self[e2]))
                + Simd32x3::from(0.0).extend_to_4(other[e3] * self[e3])
                - (other.group0().zxyw() * self.group0().yzx().extend_to_4(self[e4])),
            // e23, e31, e12, e45
            (other.group0().zxyw() * self.group3().yzxw())
                - (other.group0().xyxx() * self.group1().ww().extend_to_4(self[e2], self[e415]))
                - (other.group0().yzzy() * self.group3().zx().extend_to_4(self[e321], self[e425]))
                - (other.group0().wwwz() * self.group0().truncate_to_3().extend_to_4(self[e435])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e3] * self[e315]) + (other[e5] * self[e1]),
                (other[e1] * self[e125]) + (other[e5] * self[e2]),
                (other[e2] * self[e235]) + (other[e5] * self[e3]),
                0.0,
            ]) - (other.group0().xyxx() * self.group2().wwy().extend_to_4(self[e423]))
                - (other.group0().yzzy() * self.group2().zxw().extend_to_4(self[e431]))
                - (other.group0().wwwz() * self.group1().truncate_to_3().extend_to_4(self[e412])),
            // e4235, e4315, e4125, e3215
            (other.group0().xyxx() * self.group0().ww().extend_to_4(self[e425], self[e235]))
                + (other.group0().yzzy() * self.group1().zx().extend_to_4(self[e12345], self[e315]))
                + (other.group0().wwwz() * self.group0().truncate_to_3().extend_to_4(self[e125]))
                + Simd32x3::from(0.0).extend_to_4(other[e5] * self[e321])
                - (other.group0().zxyw() * self.group1().yzx().extend_to_4(self[e12345])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       58        0
    //    simd3        0       10        0
    //    simd4       51       53        0
    // Totals...
    // yes simd       87      121        0
    //  no simd      240      300        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(other[e12345]) * self.group0() * Simd32x4::from(-1.0),
            // e23, e31, e12, e45
            Simd32x4::from(other[e12345]) * self.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e15, e25, e35, e1234
            Simd32x4::from(other[e12345]) * self.group2().truncate_to_3().extend_to_4(self[e4]) * Simd32x4::from(-1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e12345]) * self.group3().truncate_to_3().extend_to_4(self[e5]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       72      121        0
    //    simd3        0       22        0
    //    simd4       78       61        0
    // Totals...
    // yes simd      150      204        0
    //  no simd      384      431        0
    fn sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(other[e423] * self[e321]) - (other[e431] * self[e435]) - (other[e431] * self[e3]) - (other[e415] * self[e4]) - (other[e425] * self[e412]),
                -(other[e431] * self[e321]) - (other[e412] * self[e415]) - (other[e412] * self[e1]) - (other[e425] * self[e4]) - (other[e435] * self[e423]),
                -(other[e423] * self[e2]) - (other[e412] * self[e12345]) - (other[e412] * self[e321]) - (other[e415] * self[e431]) - (other[e435] * self[e4]),
                (other[e415] * self[e415]) + (other[e425] * self[e425]) + (other[e435] * self[e435]) + (other[e315] * self[e431]) + (other[e125] * self[e412]),
            ]) + (self.group0().xyzx() * other.group1().www().extend_to_4(other[e235]))
                + (other.group0().zxy() * self.group1().yzx()).extend_to_4(other[e423] * self[e235])
                + (other.group0().zxy() * self.group3().yzx()).extend_to_4(other[e431] * self[e315])
                + (other.group1().zxy() * self.group0().yzx()).extend_to_4(other[e412] * self[e125])
                - (self.group0().ww().extend_to_4(self[e425], self[e321]) * other.group0().xyx().extend_to_4(other[e321])),
            // e23, e31, e12, e45
            Simd32x4::from([other[e321] * self[e1] * -1.0, other[e321] * self[e2] * -1.0, other[e321] * self[e3] * -1.0, other[e321] * self[e12345]])
                + (self.group2().yzxx() * other.group0().zxy().extend_to_4(other[e423]))
                + (other.group2().zxy() * self.group0().yzx()).extend_to_4(other[e431] * self[e315])
                + (other.group1().zxy() * self.group1().yzx()).extend_to_4(other[e412] * self[e125])
                - (other.group1().xyxy() * self.group0().ww().extend_to_4(self[e425], self[e2]))
                - (other.group1().yzzz() * self.group1().zx().extend_to_4(self[e12345], self[e3]))
                - (self.group0().zx().extend_to_4(self[e4], self[e1]) * other.group2().yzz().extend_to_4(other[e415]))
                - (self.group3().ww().extend_to_4(self[e431], self[e412]) * other.group2().xyx().extend_to_4(other[e125]))
                - (other.group0().xyx() * self.group2().wwy()).extend_to_4(other[e235] * self[e423])
                - (other.group0().yzz() * self.group2().zxw()).extend_to_4(other[e315] * self[e431]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(other[e415] * self[e5])
                    - (other[e425] * self[e125])
                    - (other[e321] * self[e235])
                    - (other[e235] * self[e12345])
                    - (other[e315] * self[e435])
                    - (other[e125] * self[e2]),
                -(other[e425] * self[e5])
                    - (other[e435] * self[e235])
                    - (other[e321] * self[e315])
                    - (other[e235] * self[e3])
                    - (other[e315] * self[e12345])
                    - (other[e125] * self[e415]),
                -(other[e415] * self[e315])
                    - (other[e435] * self[e5])
                    - (other[e321] * self[e125])
                    - (other[e235] * self[e425])
                    - (other[e315] * self[e1])
                    - (other[e125] * self[e12345]),
                (other[e412] * self[e435])
                    + (other[e412] * self[e3])
                    + (other[e415] * self[e423])
                    + (other[e425] * self[e431])
                    + (other[e435] * self[e412])
                    + (other[e321] * self[e4]),
            ]) + (Simd32x4::from([self[e425], self[e1], self[e321], self[e425]]) * other.group2().zzz().extend_to_4(other[e431]))
                + (Simd32x4::from([self[e3], self[e321], self[e415], self[e1]]) * other.group2().yyy().extend_to_4(other[e423]))
                + (self.group1().wz().extend_to_4(self[e2], self[e415]) * other.group2().xxx().extend_to_4(other[e423]))
                + (other.group1().zxy() * self.group2().yzx()).extend_to_4(other[e431] * self[e2]),
            // e4235, e4315, e4125, e3215
            (other.group1().xyxx() * self.group1().ww().extend_to_4(self[e2], self[e235]))
                + (other.group1().yzzy() * self.group3().zx().extend_to_4(self[e321], self[e315]))
                + (other.group1().wwwz() * self.group1().truncate_to_3().extend_to_4(self[e125]))
                + (self.group0().zx().extend_to_4(self[e4], self[e435]) * other.group2().yzz().extend_to_4(other[e125]))
                + (self.group3().ww().extend_to_4(self[e431], self[e425]) * other.group2().xyx().extend_to_4(other[e315]))
                + (other.group0().zxy() * self.group2().yzx()).extend_to_4(other[e235] * self[e415])
                - (other.group1().zxyw() * self.group3().yzx().extend_to_4(self[e5]))
                - (other.group0().xyx() * self.group2().wwy()).extend_to_4(other[e235] * self[e1])
                - (other.group0().yzz() * self.group2().zxw()).extend_to_4(other[e315] * self[e2])
                - (other.group2().zxy() * self.group0().yzx()).extend_to_4(other[e125] * self[e3]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       76      126        0
    //    simd3        0       21        0
    //    simd4       81       64        0
    // Totals...
    // yes simd      157      211        0
    //  no simd      400      445        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(other[e431] * self[e435]) - (other[e431] * self[e3]) - (other[e415] * self[e4]) - (other[e425] * self[e412]) - (other[e12345] * self[e423]),
                -(other[e412] * self[e415]) - (other[e412] * self[e1]) - (other[e425] * self[e4]) - (other[e435] * self[e423]) - (other[e12345] * self[e431]),
                -(other[e412] * self[e12345]) - (other[e412] * self[e321]) - (other[e415] * self[e431]) - (other[e435] * self[e4]) - (other[e12345] * self[e412]),
                (other[e425] * self[e425]) + (other[e435] * self[e435]) + (other[e235] * self[e423]) + (other[e315] * self[e431]) + (other[e125] * self[e412]),
            ]) + (other.group1().wwwx() * self.group0().truncate_to_3().extend_to_4(self[e415]))
                + (other.group0().zxy() * self.group1().yzx()).extend_to_4(other[e423] * self[e235])
                + (other.group0().zxy() * self.group3().yzx()).extend_to_4(other[e431] * self[e315])
                + (other.group1().zxy() * self.group0().yzx()).extend_to_4(other[e412] * self[e125])
                - (self.group0().ww().extend_to_4(self[e425], self[e321]) * other.group0().xyx().extend_to_4(other[e321]))
                - (self.group1().ww().extend_to_4(self[e2], self[e12345]) * other.group0().xyx().extend_to_4(other[e12345])),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(other[e315] * self[e412]) - (other[e12345] * self[e415]),
                -(other[e125] * self[e423]) - (other[e12345] * self[e425]),
                -(other[e125] * self[e4]) - (other[e12345] * self[e435]),
                (other[e321] * self[e12345]) + (other[e12345] * self[e321]),
            ]) + (self.group2().yzxx() * other.group0().zxy().extend_to_4(other[e423]))
                + (other.group1().zxy() * self.group1().yzx()).extend_to_4(other[e431] * self[e315])
                + (other.group2().zxy() * self.group0().yzx()).extend_to_4(other[e412] * self[e125])
                - (other.group1().xyxz() * self.group0().ww().extend_to_4(self[e425], self[e3]))
                - (other.group2().xyxz() * self.group3().ww().extend_to_4(self[e431], self[e412]))
                - (self.group1().zx().extend_to_4(self[e12345], self[e423]) * other.group1().yzz().extend_to_4(other[e235]))
                - (other.group0().xyx() * self.group2().wwy()).extend_to_4(other[e415] * self[e1])
                - (other.group0().yzz() * self.group2().zxw()).extend_to_4(other[e425] * self[e2])
                - (other.group1().www() * self.group3().truncate_to_3()).extend_to_4(other[e315] * self[e431]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(other[e425] * self[e125])
                    - (other[e321] * self[e235])
                    - (other[e235] * self[e12345])
                    - (other[e315] * self[e435])
                    - (other[e125] * self[e2])
                    - (other[e12345] * self[e235]),
                -(other[e435] * self[e235])
                    - (other[e321] * self[e315])
                    - (other[e235] * self[e3])
                    - (other[e315] * self[e12345])
                    - (other[e125] * self[e415])
                    - (other[e12345] * self[e315]),
                -(other[e435] * self[e5])
                    - (other[e321] * self[e125])
                    - (other[e235] * self[e425])
                    - (other[e315] * self[e1])
                    - (other[e125] * self[e12345])
                    - (other[e12345] * self[e125]),
                (other[e412] * self[e435])
                    + (other[e412] * self[e3])
                    + (other[e415] * self[e423])
                    + (other[e425] * self[e431])
                    + (other[e435] * self[e412])
                    + (other[e321] * self[e4]),
            ]) + (Simd32x4::from([self[e425], self[e1], self[e321], self[e2]]) * other.group2().zzz().extend_to_4(other[e431]))
                + (Simd32x4::from([self[e3], self[e321], self[e415], self[e425]]) * other.group2().yyy().extend_to_4(other[e431]))
                + (self.group1().wz().extend_to_4(self[e2], self[e1]) * other.group2().xxx().extend_to_4(other[e423]))
                + (other.group1().zxy() * self.group2().yzx()).extend_to_4(other[e423] * self[e415])
                - (other.group1().xyx() * self.group2().wwy()).extend_to_4(other[e12345] * self[e4]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([other[e12345] * self[e1], other[e12345] * self[e2], other[e12345] * self[e3], other[e12345] * self[e5] * -1.0])
                + (other.group1().xyxy() * self.group1().ww().extend_to_4(self[e2], self[e315]))
                + (other.group1().yzzz() * self.group3().zx().extend_to_4(self[e321], self[e125]))
                + (other.group2().xyxy() * self.group3().ww().extend_to_4(self[e431], self[e425]))
                + (other.group2().yzzz() * self.group0().zx().extend_to_4(self[e4], self[e435]))
                + (self.group1().xyzx() * other.group1().www().extend_to_4(other[e235]))
                + (self.group2().yzxx() * other.group0().zxy().extend_to_4(other[e415]))
                - (other.group2().zxyz() * self.group0().yzx().extend_to_4(self[e3]))
                - (self.group2().wwyw() * other.group0().xyx().extend_to_4(other[e321]))
                - (self.group3().yzxy() * other.group1().zxy().extend_to_4(other[e315]))
                - (other.group0().yzz() * self.group2().zxw()).extend_to_4(other[e235] * self[e1]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       84      140        0
    //    simd3        0       28        0
    //    simd4       75       51        0
    // Totals...
    // yes simd      159      219        0
    //  no simd      384      428        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e41] * self[e12345])
                    + (other[e41] * self[e321])
                    + (other[e42] * self[e435])
                    + (other[e42] * self[e3])
                    + (other[e23] * self[e4])
                    + (other[e31] * self[e412])
                    + (other[e45] * self[e423]),
                (other[e42] * self[e12345])
                    + (other[e42] * self[e321])
                    + (other[e43] * self[e415])
                    + (other[e43] * self[e1])
                    + (other[e31] * self[e4])
                    + (other[e12] * self[e423])
                    + (other[e45] * self[e431]),
                (other[e41] * self[e425])
                    + (other[e41] * self[e2])
                    + (other[e43] * self[e12345])
                    + (other[e43] * self[e321])
                    + (other[e23] * self[e431])
                    + (other[e12] * self[e4])
                    + (other[e45] * self[e412]),
                -(other[e23] * self[e415])
                    - (other[e31] * self[e425])
                    - (other[e12] * self[e435])
                    - (other[e45] * self[e321])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412]),
            ]) - (other.group0().zxy() * self.group1().yzx()).extend_to_4(other[e41] * self[e235])
                - (other.group0().zxy() * self.group3().yzx()).extend_to_4(other[e42] * self[e315])
                - (other.group1().zxy() * self.group0().yzx()).extend_to_4(other[e43] * self[e125]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e23] * self[e12345]) + (other[e31] * self[e435]) + (other[e25] * self[e412]),
                (other[e31] * self[e12345]) + (other[e12] * self[e415]) + (other[e35] * self[e423]),
                (other[e23] * self[e425]) + (other[e12] * self[e12345]) + (other[e35] * self[e4]),
                -(other[e31] * self[e2]) - (other[e12] * self[e3]) - (other[e45] * self[e12345]),
            ]) + (self.group2().zxwy() * other.group0().yzz().extend_to_4(other[e42]))
                + (self.group2().wwyx() * other.group0().xyx().extend_to_4(other[e41]))
                + (self.group3().ww().extend_to_4(self[e431], self[e125]) * other.group2().xyx().extend_to_4(other[e43]))
                - (other.group1().wwwx() * self.group3().xyzx())
                - (self.group0().yzxy() * other.group2().zxy().extend_to_4(other[e25]))
                - (other.group0().zxy() * self.group2().yzx()).extend_to_4(other[e15] * self[e423])
                - (other.group1().zxy() * self.group1().yzx()).extend_to_4(other[e35] * self[e412]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e23] * self[e5]) + (other[e31] * self[e125]),
                (other[e31] * self[e5]) + (other[e12] * self[e235]),
                (other[e23] * self[e315]) + (other[e12] * self[e5]),
                -(other[e12] * self[e125]) - (other[e45] * self[e5]),
            ]) + (Simd32x4::from(other[e15]) * Simd32x4::from([self[e12345], self[e3], self[e425], self[e1]]))
                + (Simd32x4::from(other[e25]) * Simd32x4::from([self[e435], self[e12345], self[e1], self[e2]]))
                + (Simd32x4::from(other[e35]) * Simd32x4::from([self[e2], self[e415], self[e12345], self[e3]]))
                - (Simd32x4::from(other[e15]) * self.group1().wz().extend_to_4(self[e2], self[e415]))
                - (Simd32x4::from(other[e25]) * Simd32x4::from([self[e3], self[e321], self[e415], self[e425]]))
                - (Simd32x4::from(other[e35]) * Simd32x4::from([self[e425], self[e1], self[e321], self[e435]]))
                - (other.group1().zxyx() * self.group2().yzxx())
                - (other.group1().wwwy() * self.group2().xyzy()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e23] * self[e321]) + (other[e31] * self[e3]) + (other[e15] * self[e4]) + (other[e25] * self[e412]),
                (other[e31] * self[e321]) + (other[e12] * self[e1]) + (other[e25] * self[e4]) + (other[e35] * self[e423]),
                (other[e23] * self[e2]) + (other[e12] * self[e321]) + (other[e15] * self[e431]) + (other[e35] * self[e4]),
                -(other[e43] * self[e3]) - (other[e23] * self[e423]) - (other[e31] * self[e431]) - (other[e12] * self[e412]),
            ]) + (other.group0().zxy() * self.group2().yzx()).extend_to_4(other[e45] * self[e4])
                - (self.group1().xyzz() * other.group1().www().extend_to_4(other[e43]))
                - (self.group3().yzxy() * other.group1().zxy().extend_to_4(other[e42]))
                - (other.group0().xyx() * self.group2().wwy()).extend_to_4(other[e41] * self[e415])
                - (other.group0().yzz() * self.group2().zxw()).extend_to_4(other[e41] * self[e1])
                - (other.group2().zxy() * self.group0().yzx()).extend_to_4(other[e42] * self[e425]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       72      132        0
    //    simd3        0       36        0
    //    simd4       98       67        0
    // Totals...
    // yes simd      170      235        0
    //  no simd      464      508        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e31] * self[e412])
                    + (other[e45] * self[e423])
                    + (other[e1234] * self[e415])
                    + (other[e1234] * self[e1])
                    + (other[e4235] * self[e4])
                    + (other[e4315] * self[e412]),
                (other[e12] * self[e423])
                    + (other[e45] * self[e431])
                    + (other[e1234] * self[e425])
                    + (other[e1234] * self[e2])
                    + (other[e4315] * self[e4])
                    + (other[e4125] * self[e423]),
                (other[e12] * self[e4])
                    + (other[e45] * self[e412])
                    + (other[e1234] * self[e435])
                    + (other[e1234] * self[e3])
                    + (other[e4235] * self[e431])
                    + (other[e4125] * self[e4]),
                -(other[e31] * self[e425])
                    - (other[e12] * self[e435])
                    - (other[e45] * self[e321])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412]),
            ]) + (self.group0().ww().extend_to_4(self[e425], self[e5]) * other.group0().xyx().extend_to_4(other[e1234]))
                + (self.group1().zx().extend_to_4(self[e12345], self[e2]) * other.group0().yzz().extend_to_4(other[e4315]))
                + (self.group1().ww().extend_to_4(self[e2], self[e1]) * other.group0().xyx().extend_to_4(other[e4235]))
                + (self.group3().zx().extend_to_4(self[e321], self[e3]) * other.group0().yzz().extend_to_4(other[e4125]))
                + (self.group3().ww().extend_to_4(self[e431], self[e4]) * other.group1().xyx().extend_to_4(other[e3215]))
                - (other.group0().zxy() * self.group1().yzx()).extend_to_4(other[e41] * self[e235])
                - (other.group0().zxy() * self.group3().yzx()).extend_to_4(other[e42] * self[e315])
                - (other.group1().zxy() * self.group0().yzx()).extend_to_4(other[e43] * self[e125])
                - (other.group3().zxy() * self.group0().yzx()).extend_to_4(other[e23] * self[e415]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e4125] * self[e2]) + (other[e3215] * self[e423]),
                (other[e4235] * self[e3]) + (other[e3215] * self[e431]),
                (other[e4315] * self[e1]) + (other[e3215] * self[e412]),
                -(other[e35] * self[e412]) - (other[e1234] * self[e5]),
            ]) + (self.group2().zxwy() * other.group0().yzz().extend_to_4(other[e42]))
                + (self.group2().wwyx() * other.group0().xyx().extend_to_4(other[e41]))
                + (self.group0().zx().extend_to_4(self[e4], self[e435]) * other.group2().yzz().extend_to_4(other[e4125]))
                + (self.group0().ww().extend_to_4(self[e425], self[e125]) * other.group1().xyx().extend_to_4(other[e43]))
                + (self.group1().zx().extend_to_4(self[e12345], self[e415]) * other.group1().yzz().extend_to_4(other[e4235]))
                + (self.group3().ww().extend_to_4(self[e431], self[e425]) * other.group2().xyx().extend_to_4(other[e4315]))
                + (other.group2().www() * self.group2().truncate_to_3()).extend_to_4(other[e3215] * self[e4])
                - (other.group1().zxyy() * self.group1().yzx().extend_to_4(self[e2]))
                - (other.group1().wwwz() * self.group3().xyzz())
                - (self.group0().yzxw() * other.group2().zxy().extend_to_4(other[e45]))
                - (self.group1().ww().extend_to_4(self[e2], self[e423]) * other.group3().xyx().extend_to_4(other[e15]))
                - (self.group3().zx().extend_to_4(self[e321], self[e431]) * other.group3().yzz().extend_to_4(other[e25]))
                - (other.group0().zxy() * self.group2().yzx()).extend_to_4(other[e23] * self[e1]),
            // e235, e315, e125, e5
            (Simd32x4::from(other[e3215]) * self.group1().truncate_to_3().extend_to_4(self[e12345]))
                + (Simd32x4::from([self[e12345], self[e3], self[e425], self[e3]]) * other.group2().xxxz())
                + (Simd32x4::from([self[e435], self[e12345], self[e1], self[e235]]) * other.group2().yyy().extend_to_4(other[e4235]))
                + (Simd32x4::from([self[e2], self[e415], self[e12345], self[e315]]) * other.group2().zzz().extend_to_4(other[e4315]))
                + (other.group3().zxyz() * self.group2().yzxz())
                + (other.group1().xyx() * self.group2().wwy()).extend_to_4(other[e15] * self[e1])
                + (other.group1().yzz() * self.group2().zxw()).extend_to_4(other[e25] * self[e2])
                - (Simd32x4::from(other[e3215]) * self.group3().truncate_to_3().extend_to_4(self[e321]))
                - (Simd32x4::from([self[e425], self[e1], self[e321], self[e415]]) * other.group2().zzzx())
                - (Simd32x4::from([self[e3], self[e321], self[e415], self[e5]]) * other.group2().yyy().extend_to_4(other[e45]))
                - (other.group1().zxyx() * self.group2().yzxx())
                - (other.group1().wwwy() * self.group2().xyzy())
                - (self.group1().wz().extend_to_4(self[e2], self[e125]) * other.group2().xxx().extend_to_4(other[e12]))
                - (other.group3().xyx() * self.group2().wwy()).extend_to_4(other[e25] * self[e425])
                - (other.group3().yzz() * self.group2().zxw()).extend_to_4(other[e35] * self[e435]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e15] * self[e4]) + (other[e25] * self[e412]) + (other[e4125] * self[e425]) + (other[e3215] * self[e423]),
                (other[e25] * self[e4]) + (other[e35] * self[e423]) + (other[e4235] * self[e435]) + (other[e3215] * self[e431]),
                (other[e15] * self[e431]) + (other[e35] * self[e4]) + (other[e4315] * self[e415]) + (other[e3215] * self[e412]),
                -(other[e12] * self[e412]) - (other[e4235] * self[e423]) - (other[e4315] * self[e431]) - (other[e4125] * self[e412]),
            ]) + (self.group1().ww().extend_to_4(self[e2], self[e12345]) * other.group1().xyx().extend_to_4(other[e1234]))
                + (self.group3().zx().extend_to_4(self[e321], self[e321]) * other.group1().yzz().extend_to_4(other[e1234]))
                + (other.group0().zxy() * self.group2().yzx()).extend_to_4(other[e45] * self[e4])
                - (self.group0().ww().extend_to_4(self[e425], self[e423]) * other.group3().xyx().extend_to_4(other[e23]))
                - (self.group1().zx().extend_to_4(self[e12345], self[e431]) * other.group3().yzz().extend_to_4(other[e31]))
                - (other.group0().xyx() * self.group2().wwy()).extend_to_4(other[e41] * self[e415])
                - (other.group0().yzz() * self.group2().zxw()).extend_to_4(other[e41] * self[e1])
                - (other.group1().zxy() * self.group3().yzx()).extend_to_4(other[e42] * self[e425])
                - (other.group1().www() * self.group1().truncate_to_3()).extend_to_4(other[e42] * self[e2])
                - (other.group2().zxy() * self.group0().yzx()).extend_to_4(other[e43] * self[e435])
                - (other.group2().www() * self.group2().truncate_to_3()).extend_to_4(other[e43] * self[e3]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       42       75        0
    //    simd3        2       13        0
    //    simd4       52       48        0
    // Totals...
    // yes simd       96      136        0
    //  no simd      256      306        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([self[e423], self[e431], self[e412], 1.0])
                * other.group0().yy().extend_to_4(other[e12345], -(other[e5] * self[e4]) - (other[e12345] * self[e12345]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(other[e5] * self[e423]) - (other[e12345] * self[e415]),
                -(other[e5] * self[e431]) - (other[e12345] * self[e425]),
                -(other[e5] * self[e412]) - (other[e12345] * self[e435]),
                (other[e5] * self[e4]) + (other[e12345] * self[e321]),
            ]),
            // e15, e25, e35, e1234
            ((Simd32x3::from(other[e5]) * self.group3().truncate_to_3())
                - (Simd32x3::from(other[e5]) * self.group1().truncate_to_3())
                - (Simd32x3::from(other[e12345]) * self.group2().truncate_to_3()))
            .extend_to_4(other[e12345] * self[e4] * -1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e12345] * self[e1],
                other[e12345] * self[e2],
                other[e12345] * self[e3],
                -(other[e5] * self[e12345]) - (other[e12345] * self[e5]),
            ]) + (Simd32x4::from(other[e5]) * self.group0().truncate_to_3().extend_to_4(self[e321])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       43       80        0
    //    simd3        3       23        0
    //    simd4       59       46        0
    // Totals...
    // yes simd      105      149        0
    //  no simd      288      333        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([self[e423], self[e431], self[e412], 1.0])
                * other
                    .group0()
                    .www()
                    .extend_to_4(-(other[e15] * self[e423]) - (other[e25] * self[e431]) - (other[e35] * self[e412]) - (other[e45] * self[e321])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e15] * self[e4]) + (other[e25] * self[e412]),
                (other[e25] * self[e4]) + (other[e35] * self[e423]),
                (other[e15] * self[e431]) + (other[e35] * self[e4]),
                -(other[e35] * self[e412]) - (other[e45] * self[e12345]),
            ]) - (other.group0().zxyx() * self.group0().yzxx())
                - (other.group0().wwwy() * self.group3().truncate_to_3().extend_to_4(self[e431])),
            // e235, e315, e125, e5
            (Simd32x4::from(other[e15]) * Simd32x4::from([self[e12345], self[e3], self[e425], self[e1]]))
                + (Simd32x4::from(other[e25]) * Simd32x4::from([self[e435], self[e12345], self[e1], self[e2]]))
                + (Simd32x4::from(other[e35]) * Simd32x4::from([self[e2], self[e415], self[e12345], self[e3]]))
                - (Simd32x4::from(other[e15]) * self.group1().wz().extend_to_4(self[e2], self[e415]))
                - (Simd32x4::from(other[e25]) * Simd32x4::from([self[e3], self[e321], self[e415], self[e425]]))
                - (Simd32x4::from(other[e35]) * Simd32x4::from([self[e425], self[e1], self[e321], self[e435]]))
                - (Simd32x4::from(other[e45]) * self.group2()),
            // e1, e2, e3, e4
            ((Simd32x3::from([self[e412], self[e423], self[e4]]) * other.group0().yzz()) + (Simd32x3::from([self[e4], self[e4], self[e431]]) * other.group0().xyx())
                - (Simd32x3::from(other[e45]) * self.group1().truncate_to_3())
                - (other.group0().zxy() * self.group0().yzx()))
            .extend_to_4(other[e45] * self[e4]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       52       93        0
    //    simd3        0       21        0
    //    simd4       76       60        0
    // Totals...
    // yes simd      128      174        0
    //  no simd      356      396        0
    fn sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (other.group1().xyxy() * self.group3().ww().extend_to_4(self[e431], self[e2]))
                + (other.group1().yzzz() * self.group0().zx().extend_to_4(self[e4], self[e3]))
                + Simd32x3::from(0.0).extend_to_4((other[e3215] * self[e4]) - (other[e25] * self[e431]) - (other[e35] * self[e412]) - (other[e45] * self[e321]))
                + (other.group0().www() * self.group0().truncate_to_3()).extend_to_4(other[e4235] * self[e1])
                - (self.group0().yzxx() * other.group1().zxy().extend_to_4(other[e15])),
            // e415, e425, e435, e321
            (Simd32x4::from(other[e3215]) * self.group0().truncate_to_3().extend_to_4(self[e4]))
                + (other.group1().zxyz() * self.group3().yzx().extend_to_4(self[e435]))
                + (self.group0().zx().extend_to_4(self[e4], self[e425]) * other.group0().yzz().extend_to_4(other[e4315]))
                + (self.group3().ww().extend_to_4(self[e431], self[e415]) * other.group0().xyx().extend_to_4(other[e4235]))
                - (other.group0().zxyx() * self.group0().yzxx())
                - (other.group0().wwwy() * self.group3().truncate_to_3().extend_to_4(self[e431]))
                - (self.group1().ww().extend_to_4(self[e2], self[e412]) * other.group1().xyx().extend_to_4(other[e35]))
                - (self.group3().zx().extend_to_4(self[e321], self[e12345]) * other.group1().yzz().extend_to_4(other[e45])),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(other[e4315] * self[e125]) - (other[e3215] * self[e1]),
                -(other[e4125] * self[e235]) - (other[e3215] * self[e2]),
                -(other[e4125] * self[e5]) - (other[e3215] * self[e3]),
                (other[e4125] * self[e125]) + (other[e3215] * self[e12345]),
            ]) + (Simd32x4::from(other[e15]) * Simd32x4::from([self[e12345], self[e3], self[e425], self[e1]]))
                + (Simd32x4::from(other[e25]) * Simd32x4::from([self[e435], self[e12345], self[e1], self[e2]]))
                + (Simd32x4::from(other[e35]) * Simd32x4::from([self[e2], self[e415], self[e12345], self[e3]]))
                + (other.group1().zxyx() * self.group2().yzxx())
                + (other.group1().wwwy() * self.group1().truncate_to_3().extend_to_4(self[e315]))
                - (Simd32x4::from(other[e15]) * self.group1().wz().extend_to_4(self[e2], self[e415]))
                - (Simd32x4::from(other[e25]) * Simd32x4::from([self[e3], self[e321], self[e415], self[e425]]))
                - (Simd32x4::from(other[e35]) * Simd32x4::from([self[e425], self[e1], self[e321], self[e435]]))
                - (Simd32x4::from(other[e45]) * self.group2())
                - (other.group1().xyxw() * self.group2().wwy().extend_to_4(self[e321])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e25] * self[e412]) + (other[e4125] * self[e425]) + (other[e3215] * self[e423]) - (other[e4315] * self[e435]),
                (other[e35] * self[e423]) + (other[e4235] * self[e435]) + (other[e3215] * self[e431]) - (other[e4125] * self[e415]),
                (other[e35] * self[e4]) + (other[e4315] * self[e415]) + (other[e3215] * self[e412]) - (other[e4125] * self[e12345]),
                0.0,
            ]) + (other.group0().xyxw() * self.group3().ww().extend_to_4(self[e431], self[e4]))
                - (other.group1().xyxz() * self.group0().ww().extend_to_4(self[e425], self[e412]))
                - (self.group0().yzxx() * other.group0().zxy().extend_to_4(other[e4235]))
                - (other.group0().www() * self.group1().truncate_to_3()).extend_to_4(other[e4315] * self[e431]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64      101        0
    //    simd3        0       13        0
    //    simd4       65       56        0
    // Totals...
    // yes simd      129      170        0
    //  no simd      324      364        0
    fn sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(other[e415] * self[e4]) - (other[e425] * self[e412]),
                -(other[e425] * self[e4]) - (other[e435] * self[e423]),
                -(other[e415] * self[e431]) - (other[e435] * self[e4]),
                (other[e425] * self[e425]) + (other[e435] * self[e435]) + (other[e235] * self[e423]) + (other[e315] * self[e431]) + (other[e125] * self[e412]),
            ]) + (other.group0().zxy() * self.group0().yzx()).extend_to_4(other[e415] * self[e415]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e435] * self[e425]) + (other[e125] * self[e431]),
                (other[e415] * self[e435]) + (other[e235] * self[e412]),
                (other[e425] * self[e415]) + (other[e315] * self[e423]),
                -(other[e315] * self[e431]) - (other[e125] * self[e412]),
            ]) - (self.group0().zx().extend_to_4(self[e4], self[e423]) * other.group1().yzz().extend_to_4(other[e235]))
                - (self.group0().ww().extend_to_4(self[e425], self[e1]) * other.group0().xyx().extend_to_4(other[e415]))
                - (self.group1().zx().extend_to_4(self[e12345], self[e2]) * other.group0().yzz().extend_to_4(other[e425]))
                - (self.group3().ww().extend_to_4(self[e431], self[e3]) * other.group1().xyx().extend_to_4(other[e435])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e125] * self[e425])
                    - (other[e415] * self[e5])
                    - (other[e425] * self[e125])
                    - (other[e235] * self[e12345])
                    - (other[e315] * self[e435])
                    - (other[e125] * self[e2]),
                (other[e125] * self[e1])
                    - (other[e425] * self[e5])
                    - (other[e435] * self[e235])
                    - (other[e235] * self[e3])
                    - (other[e315] * self[e12345])
                    - (other[e125] * self[e415]),
                (other[e125] * self[e321])
                    - (other[e415] * self[e315])
                    - (other[e435] * self[e5])
                    - (other[e235] * self[e425])
                    - (other[e315] * self[e1])
                    - (other[e125] * self[e12345]),
                0.0,
            ]) + (Simd32x4::from([self[e3], self[e321], self[e415], self[e412]]) * other.group1().yyy().extend_to_4(other[e435]))
                + (self.group1().wz().extend_to_4(self[e2], self[e431]) * other.group1().xxx().extend_to_4(other[e425]))
                + (other.group0().zxy() * self.group2().yzx()).extend_to_4(other[e415] * self[e423]),
            // e4235, e4315, e4125, e3215
            (self.group0().zx().extend_to_4(self[e4], self[e415]) * other.group1().yzz().extend_to_4(other[e235]))
                + (self.group1().ww().extend_to_4(self[e2], self[e235]) * other.group0().xyx().extend_to_4(other[e415]))
                + (self.group3().zx().extend_to_4(self[e321], self[e315]) * other.group0().yzz().extend_to_4(other[e425]))
                + (self.group3().ww().extend_to_4(self[e431], self[e125]) * other.group1().xyx().extend_to_4(other[e435]))
                + Simd32x3::from(0.0).extend_to_4((other[e315] * self[e425]) + (other[e125] * self[e435]) - (other[e125] * self[e3]))
                - (self.group3().yzxx() * other.group0().zxy().extend_to_4(other[e235]))
                - (other.group1().zxy() * self.group0().yzx()).extend_to_4(other[e315] * self[e2]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64       97        0
    //    simd3        0       10        0
    //    simd4       73       68        0
    // Totals...
    // yes simd      137      175        0
    //  no simd      356      399        0
    fn sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                other[e12345] * self[e423] * -1.0,
                other[e12345] * self[e431] * -1.0,
                other[e12345] * self[e412] * -1.0,
                (other[e425] * self[e425]) + (other[e435] * self[e435]) + (other[e235] * self[e423]) + (other[e315] * self[e431]) + (other[e125] * self[e412]),
            ]) + (other.group0().zxyx() * self.group0().yzx().extend_to_4(self[e415]))
                - (other.group0().xyxw() * self.group3().ww().extend_to_4(self[e431], self[e12345]))
                - (self.group0().zx().extend_to_4(self[e4], self[e4]) * other.group0().yzz().extend_to_4(other[e5])),
            // e23, e31, e12, e45
            (other.group0().zxyw() * self.group1().yzxw()) + (other.group1().zxyw() * self.group0().yzx().extend_to_4(self[e4]))
                - (other.group0().xyxx() * self.group0().ww().extend_to_4(self[e425], self[e1]))
                - (other.group0().yzzy() * self.group1().zx().extend_to_4(self[e12345], self[e2]))
                - (other.group0().wwwz() * self.group1().truncate_to_3().extend_to_4(self[e3]))
                - (other.group1().xyxx() * self.group3().ww().extend_to_4(self[e431], self[e423]))
                - (other.group1().yzzy() * self.group0().zx().extend_to_4(self[e4], self[e431]))
                - (other.group1().wwwz() * self.group0().xyzz()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e125] * self[e425]) + (other[e5] * self[e1])
                    - (other[e425] * self[e125])
                    - (other[e12345] * self[e235])
                    - (other[e235] * self[e12345])
                    - (other[e315] * self[e435])
                    - (other[e125] * self[e2])
                    - (other[e5] * self[e415]),
                (other[e125] * self[e1]) + (other[e5] * self[e2])
                    - (other[e435] * self[e235])
                    - (other[e12345] * self[e315])
                    - (other[e235] * self[e3])
                    - (other[e315] * self[e12345])
                    - (other[e125] * self[e415])
                    - (other[e5] * self[e425]),
                (other[e125] * self[e321]) + (other[e5] * self[e3])
                    - (other[e435] * self[e5])
                    - (other[e12345] * self[e125])
                    - (other[e235] * self[e425])
                    - (other[e315] * self[e1])
                    - (other[e125] * self[e12345])
                    - (other[e5] * self[e435]),
                0.0,
            ]) + (Simd32x4::from([self[e3], self[e321], self[e415], self[e412]]) * other.group1().yyy().extend_to_4(other[e435]))
                + (other.group0().zxyx() * self.group2().yzx().extend_to_4(self[e423]))
                + (self.group1().wz().extend_to_4(self[e2], self[e431]) * other.group1().xxx().extend_to_4(other[e425]))
                - (other.group0().xyxw() * self.group2().wwy().extend_to_4(self[e4])),
            // e4235, e4315, e4125, e3215
            (other.group0().xyxx() * self.group1().ww().extend_to_4(self[e2], self[e235]))
                + (other.group0().yzzy() * self.group3().zx().extend_to_4(self[e321], self[e315]))
                + (other.group0().wwwz() * self.group3().truncate_to_3().extend_to_4(self[e125]))
                + (other.group1().xyxx() * self.group3().ww().extend_to_4(self[e431], self[e415]))
                + (other.group1().yzzy() * self.group0().zx().extend_to_4(self[e4], self[e425]))
                + (other.group1().wwwz() * self.group0().truncate_to_3().extend_to_4(self[e435]))
                + Simd32x3::from(0.0).extend_to_4((other[e5] * self[e321]) - (other[e315] * self[e2]) - (other[e125] * self[e3]) - (other[e5] * self[e12345]))
                - (other.group0().zxyw() * self.group3().yzx().extend_to_4(self[e5]))
                - (other.group1().zxyx() * self.group0().yzx().extend_to_4(self[e1])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for VersorEven {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      108      159        0
    //    simd2       16       16        0
    //    simd3      120      159        0
    //    simd4      115       92        0
    // Totals...
    // yes simd      359      426        0
    //  no simd      960     1036        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (other[e415] * self[e415])
                    + (other[e425] * self[e425])
                    + (other[e435] * self[e435])
                    + (other[e431] * self[e315])
                    + (other[e412] * self[e125])
                    + (other[e315] * self[e431])
                    + (other[e125] * self[e412])
                    - (other[e5] * self[e4]),
                (other[e3215] * self[e4])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412])
                    - (other[e45] * self[e321])
                    - (other[e42] * self[e315])
                    - (other[e43] * self[e125])
                    - (other[e31] * self[e425])
                    - (other[e12] * self[e435]),
            ]) + (Simd32x2::from(self[e1]) * Simd32x2::from([other[e1], other[e4235]]))
                + (Simd32x2::from(self[e2]) * Simd32x2::from([other[e2], other[e4315]]))
                + (Simd32x2::from(self[e3]) * Simd32x2::from([other[e3], other[e4125]]))
                + (Simd32x2::from([other[e423], other[e1234]]) * self.group2().xw())
                + (Simd32x2::from([other[e235], other[scalar]]) * self.group0().xw())
                - (Simd32x2::from([other[e12345], other[e15]]) * self.group0().wx())
                - (Simd32x2::from([other[e4], other[e41]]) * self.group2().wx())
                - (Simd32x2::from([other[e321], other[e23]]) * self.group1().wx()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e15] * self[e4]) + (other[e25] * self[e412]) + (other[e4125] * self[e425]) + (other[e3215] * self[e423]),
                (other[e25] * self[e4]) + (other[e35] * self[e423]) + (other[e4235] * self[e435]) + (other[e3215] * self[e431]),
                (other[e15] * self[e431]) + (other[e35] * self[e4]) + (other[e4315] * self[e415]) + (other[e3215] * self[e412]),
                -(other[e12] * self[e412]) - (other[e4235] * self[e423]) - (other[e4315] * self[e431]) - (other[e4125] * self[e412]),
            ]) + (Simd32x4::from(other[scalar]) * self.group3())
                + (self.group1().ww().extend_to_4(self[e2], other[e1234]) * other.group5().xyx().extend_to_4(self[e12345]))
                + (self.group3().zx().extend_to_4(self[e321], other[e1234]) * other.group5().yzz().extend_to_4(self[e321]))
                + (other.group4().zxy() * self.group2().yzx()).extend_to_4(other[e45] * self[e4])
                - (Simd32x4::from([other[e1234], other[e1234], other[e1234], self[e431]]) * self.group2().truncate_to_3().extend_to_4(other[e31]))
                - (self.group1().xyzz() * other.group3().www().extend_to_4(other[e43]))
                - (self.group0().ww().extend_to_4(self[e425], self[e3]) * other.group9().xyx().extend_to_4(other[e43]))
                - (self.group1().zx().extend_to_4(self[e12345], self[e423]) * other.group9().yzz().extend_to_4(other[e23]))
                - (other.group4().xyx() * self.group2().wwy()).extend_to_4(other[e41] * self[e415])
                - (other.group4().yzz() * self.group2().zxw()).extend_to_4(other[e41] * self[e1])
                - (other.group5().zxy() * self.group3().yzx()).extend_to_4(other[e42] * self[e425])
                - (other.group3().zxy() * self.group0().yzx()).extend_to_4(other[e42] * self[e2]),
            // e5
            (other[scalar] * self[e5])
                + (other[e15] * self[e1])
                + (other[e25] * self[e2])
                + (other[e35] * self[e3])
                + (other[e4235] * self[e235])
                + (other[e4315] * self[e315])
                + (other[e4125] * self[e125])
                + (other[e3215] * self[e12345])
                - (other[e15] * self[e415])
                - (other[e25] * self[e425])
                - (other[e35] * self[e435])
                - (other[e45] * self[e5])
                - (other[e23] * self[e235])
                - (other[e31] * self[e315])
                - (other[e12] * self[e125])
                - (other[e3215] * self[e321]),
            // e15, e25, e35, e45
            (Simd32x4::from(other[e5]) * self.group3())
                + (Simd32x4::from([self[e425], self[e1], self[e321], self[e315]]) * other.group8().zzz().extend_to_4(other[e431]))
                + (Simd32x4::from([self[e3], self[e321], self[e415], self[e235]]) * other.group8().yyy().extend_to_4(other[e423]))
                + (other.group6().zxyw() * self.group2().yzx().extend_to_4(self[e12345]))
                + (self.group2().yzxz() * other.group1().zxy().extend_to_4(other[e412]))
                + (self.group1().wz().extend_to_4(self[e2], self[e321]) * other.group8().xxx().extend_to_4(other[e12345]))
                - (Simd32x4::from([other[e5], other[e5], other[e5], self[e3]]) * self.group1().truncate_to_3().extend_to_4(other[e435]))
                - (Simd32x4::from([self[e12345], self[e3], self[e425], self[e431]]) * other.group8().xxx().extend_to_4(other[e315]))
                - (Simd32x4::from([self[e435], self[e12345], self[e1], self[e412]]) * other.group8().yyy().extend_to_4(other[e125]))
                - (Simd32x4::from([self[e2], self[e415], self[e12345], self[e415]]) * other.group8().zzz().extend_to_4(other[e1]))
                - (other.group1().xyxy() * self.group2().wwy().extend_to_4(self[e425]))
                - (other.group1().yzzz() * self.group2().zxw().extend_to_4(self[e435]))
                - (other.group6().yzzx() * self.group2().zxw().extend_to_4(self[e1]))
                - (other.group6().wwwy() * self.group2().truncate_to_3().extend_to_4(self[e2]))
                - (self.group2().wwyw() * other.group6().xyx().extend_to_4(other[e4]))
                - (other.group0().yy().extend_to_4(other[e12345], other[e235]) * self.group2().truncate_to_3().extend_to_4(self[e423])),
            // e41, e42, e43
            (Simd32x3::from(other[e321]) * self.group0().truncate_to_3())
                + (Simd32x3::from([self[e412], self[e423], self[e4]]) * other.group1().yzz())
                + (Simd32x3::from([self[e4], self[e4], self[e431]]) * other.group1().xyx())
                + (other.group7().zxy() * self.group1().yzx())
                + (other.group7().zxy() * self.group3().yzx())
                + (other.group6().zxy() * self.group0().yzx())
                - (Simd32x3::from(other[e12345]) * self.group0().truncate_to_3())
                - (Simd32x3::from(other[e4]) * self.group1().truncate_to_3())
                - (Simd32x3::from(other[e4]) * self.group3().truncate_to_3())
                - (Simd32x3::from([self[e412], self[e423], self[e4]]) * other.group6().yzz())
                - (Simd32x3::from([self[e12345], self[e12345], self[e425]]) * other.group7().xyx())
                - (Simd32x3::from([self[e435], self[e415], self[e12345]]) * other.group7().yzz())
                - (Simd32x3::from([self[e321], self[e321], self[e2]]) * other.group7().xyx())
                - (Simd32x3::from([self[e3], self[e1], self[e321]]) * other.group7().yzz())
                - (Simd32x3::from([self[e4], self[e4], self[e431]]) * other.group6().xyx())
                - (other.group1().zxy() * self.group0().yzx()),
            // e23, e31, e12
            (other.group7().zxy() * self.group2().yzx())
                + (other.group8().zxy() * self.group0().yzx())
                + (other.group1().zxy() * self.group3().yzx())
                + (other.group6().zxy() * self.group1().yzx())
                - (Simd32x3::from(other[e12345]) * self.group1().truncate_to_3())
                - (Simd32x3::from(other[e4]) * self.group2().truncate_to_3())
                - (Simd32x3::from(other[e5]) * self.group0().truncate_to_3())
                - (Simd32x3::from(other[e321]) * self.group3().truncate_to_3())
                - (Simd32x3::from([self[e412], self[e423], self[e4]]) * other.group8().yzz())
                - (Simd32x3::from([self[e12345], self[e12345], self[e425]]) * other.group6().xyx())
                - (Simd32x3::from([self[e435], self[e415], self[e12345]]) * other.group6().yzz())
                - (Simd32x3::from([self[e321], self[e321], self[e2]]) * other.group1().xyx())
                - (Simd32x3::from([self[e3], self[e1], self[e321]]) * other.group1().yzz())
                - (Simd32x3::from([self[e4], self[e4], self[e431]]) * other.group8().xyx())
                - (other.group7().xyx() * self.group2().wwy())
                - (other.group7().yzz() * self.group2().zxw()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e3215] * self[e423]) + (other[e1234] * self[e235]),
                (other[e3215] * self[e431]) + (other[e1234] * self[e315]),
                (other[e3215] * self[e412]) + (other[e1234] * self[e125]),
                -(other[e45] * self[e12345]) - (other[e1234] * self[e5]),
            ]) + (Simd32x4::from(other[scalar]) * self.group1())
                + (other.group9().zxyw() * self.group3().yzxw())
                + (self.group2().zxwy() * other.group4().yzz().extend_to_4(other[e42]))
                + (self.group2().wwyx() * other.group4().xyx().extend_to_4(other[e41]))
                + (self.group0().zx().extend_to_4(self[e4], self[e435]) * other.group3().yzz().extend_to_4(other[e4125]))
                + (self.group0().ww().extend_to_4(self[e425], self[e125]) * other.group5().xyx().extend_to_4(other[e43]))
                + (self.group1().zx().extend_to_4(self[e12345], self[e415]) * other.group5().yzz().extend_to_4(other[e4235]))
                + (self.group3().ww().extend_to_4(self[e431], self[e425]) * other.group3().xyx().extend_to_4(other[e4315]))
                - (other.group3().wwwx() * self.group3().truncate_to_3().extend_to_4(self[e423]))
                - (self.group1().ww().extend_to_4(self[e2], self[e431]) * other.group9().xyx().extend_to_4(other[e25]))
                - (self.group3().zx().extend_to_4(self[e321], self[e412]) * other.group9().yzz().extend_to_4(other[e35]))
                - (other.group4().zxy() * self.group2().yzx()).extend_to_4(other[e23] * self[e1])
                - (other.group5().zxy() * self.group1().yzx()).extend_to_4(other[e31] * self[e2])
                - (other.group3().zxy() * self.group0().yzx()).extend_to_4(other[e12] * self[e3]),
            // e423, e431, e412
            (Simd32x3::from(other[scalar]) * self.group0().truncate_to_3())
                + (Simd32x3::from(other[e45]) * self.group0().truncate_to_3())
                + (Simd32x3::from(other[e1234]) * self.group1().truncate_to_3())
                + (Simd32x3::from(other[e1234]) * self.group3().truncate_to_3())
                + (Simd32x3::from([self[e412], self[e423], self[e4]]) * other.group5().yzz())
                + (Simd32x3::from([self[e412], self[e423], self[e4]]) * other.group9().yzz())
                + (Simd32x3::from([self[e12345], self[e12345], self[e425]]) * other.group4().xyx())
                + (Simd32x3::from([self[e435], self[e415], self[e12345]]) * other.group4().yzz())
                + (Simd32x3::from([self[e321], self[e321], self[e2]]) * other.group4().xyx())
                + (Simd32x3::from([self[e3], self[e1], self[e321]]) * other.group4().yzz())
                + (Simd32x3::from([self[e4], self[e4], self[e431]]) * other.group5().xyx())
                + (Simd32x3::from([self[e4], self[e4], self[e431]]) * other.group9().xyx())
                - (other.group4().zxy() * self.group1().yzx())
                - (other.group4().zxy() * self.group3().yzx())
                - (other.group5().zxy() * self.group0().yzx())
                - (other.group9().zxy() * self.group0().yzx()),
            // e235, e315, e125
            (Simd32x3::from(other[scalar]) * self.group2().truncate_to_3())
                + (Simd32x3::from(other[e15]) * Simd32x3::from([self[e12345], self[e3], self[e425]]))
                + (Simd32x3::from(other[e25]) * Simd32x3::from([self[e435], self[e12345], self[e1]]))
                + (Simd32x3::from(other[e35]) * Simd32x3::from([self[e2], self[e415], self[e12345]]))
                + (Simd32x3::from(other[e3215]) * self.group1().truncate_to_3())
                + (other.group5().xyx() * self.group2().wwy())
                + (other.group5().yzz() * self.group2().zxw())
                + (other.group9().zxy() * self.group2().yzx())
                - (Simd32x3::from(other[e15]) * Simd32x3::from([self[e321], self[e435], self[e2]]))
                - (Simd32x3::from(other[e25]) * Simd32x3::from([self[e3], self[e321], self[e415]]))
                - (Simd32x3::from(other[e35]) * Simd32x3::from([self[e425], self[e1], self[e321]]))
                - (Simd32x3::from(other[e45]) * self.group2().truncate_to_3())
                - (Simd32x3::from(other[e3215]) * self.group3().truncate_to_3())
                - (other.group5().zxy() * self.group2().yzx())
                - (other.group9().xyx() * self.group2().wwy())
                - (other.group9().yzz() * self.group2().zxw()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other[e5]) * self.group0().truncate_to_3().extend_to_4(self[e321]))
                + (other.group1().xyxy() * self.group0().ww().extend_to_4(self[e425], self[e315]))
                + (other.group1().yzzz() * self.group1().zx().extend_to_4(self[e12345], self[e125]))
                + (other.group6().xyxx() * self.group1().ww().extend_to_4(self[e2], self[e235]))
                + (other.group6().yzzy() * self.group3().zx().extend_to_4(self[e321], self[e315]))
                + (other.group6().wwwz() * self.group1().truncate_to_3().extend_to_4(self[e125]))
                + (other.group0().yy().extend_to_4(other[e12345], other[e235]) * self.group3().truncate_to_3().extend_to_4(self[e415]))
                + (self.group0().zx().extend_to_4(self[e4], self[e235]) * other.group8().yzz().extend_to_4(other[e1]))
                + (self.group3().ww().extend_to_4(self[e431], self[e435]) * other.group8().xyx().extend_to_4(other[e125]))
                + (other.group7().zxy() * self.group2().yzx()).extend_to_4(other[e315] * self[e425])
                - (self.group2() * other.group1().www().extend_to_4(other[e321]))
                - (self.group2().wwyw() * other.group7().xyx().extend_to_4(other[e12345]))
                - (other.group7().yzz() * self.group2().zxw()).extend_to_4(other[e235] * self[e1])
                - (other.group8().zxy() * self.group0().yzx()).extend_to_4(other[e315] * self[e2])
                - (other.group1().zxy() * self.group1().yzx()).extend_to_4(other[e125] * self[e3])
                - (other.group6().zxy() * self.group3().yzx()).extend_to_4(other[e5] * self[e12345]),
            // e1234
            (other[e415] * self[e423])
                + (other[e425] * self[e431])
                + (other[e435] * self[e412])
                + (other[e321] * self[e4])
                + (other[e423] * self[e415])
                + (other[e423] * self[e1])
                + (other[e431] * self[e425])
                + (other[e431] * self[e2])
                + (other[e412] * self[e435])
                + (other[e412] * self[e3])
                - (other[e12345] * self[e4])
                - (other[e1] * self[e423])
                - (other[e2] * self[e431])
                - (other[e3] * self[e412])
                - (other[e4] * self[e12345])
                - (other[e4] * self[e321]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       99        0
    //    simd3        0       19        0
    //    simd4       60       45        0
    // Totals...
    // yes simd      108      163        0
    //  no simd      288      336        0
    fn sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                other[e4125] * self[e431] * -1.0,
                other[e4235] * self[e412] * -1.0,
                other[e4315] * self[e423] * -1.0,
                (other[e4125] * self[e3]) + (other[e3215] * self[e4]),
            ]) + (other.group0().xyxx() * self.group3().ww().extend_to_4(self[e431], self[e1]))
                + (other.group0().yzzy() * self.group0().zx().extend_to_4(self[e4], self[e2])),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(other[e4235] * self[e321]) - (other[e4315] * self[e3]),
                -(other[e4315] * self[e321]) - (other[e4125] * self[e1]),
                -(other[e4235] * self[e2]) - (other[e4125] * self[e321]),
                (other[e4125] * self[e435]) + (other[e3215] * self[e4]),
            ]) + (other.group0().zxyx() * self.group3().yzx().extend_to_4(self[e415]))
                + (other.group0().wwwy() * self.group0().truncate_to_3().extend_to_4(self[e425])),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(other[e4315] * self[e125]) - (other[e3215] * self[e1]),
                -(other[e4125] * self[e235]) - (other[e3215] * self[e2]),
                -(other[e4125] * self[e5]) - (other[e3215] * self[e3]),
                (other[e4125] * self[e125]) + (other[e3215] * self[e12345]),
            ]) + (other.group0().zxyx() * self.group2().yzxx())
                + (other.group0().wwwy() * self.group1().truncate_to_3().extend_to_4(self[e315]))
                - (other.group0().xyxw() * self.group2().wwy().extend_to_4(self[e321])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e4125] * self[e425]) + (other[e3215] * self[e423]),
                (other[e4235] * self[e435]) + (other[e3215] * self[e431]),
                (other[e4315] * self[e415]) + (other[e3215] * self[e412]),
                other[e4125] * self[e412] * -1.0,
            ]) - (other.group0().xyxx() * self.group0().ww().extend_to_4(self[e425], self[e423]))
                - (other.group0().yzzy() * self.group1().zx().extend_to_4(self[e12345], self[e431])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       83        0
    //    simd3        0       13        0
    //    simd4       66       58        0
    // Totals...
    // yes simd      106      154        0
    //  no simd      304      354        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([other[e4] * self[e1] * -1.0, other[e4] * self[e2] * -1.0, other[e4] * self[e3] * -1.0, other[e3] * self[e3]])
                + (other.group0().xyxx() * self.group3().ww().extend_to_4(self[e431], self[e1]))
                + (other.group0().yzzy() * self.group0().zx().extend_to_4(self[e4], self[e2]))
                - (other.group0().zxyw() * self.group0().yzx().extend_to_4(self[e5]))
                - (other.group0().www() * self.group1().truncate_to_3()).extend_to_4(other[e5] * self[e4]),
            // e23, e31, e12, e45
            (other.group0().zxy() * self.group3().yzx()).extend_to_4(other[e5] * self[e4])
                - (Simd32x4::from([other[e5], other[e5], other[e5], self[e5]]) * self.group0().truncate_to_3().extend_to_4(other[e4]))
                - (other.group0().xyxx() * self.group1().ww().extend_to_4(self[e2], self[e415]))
                - (other.group0().yzzy() * self.group3().zx().extend_to_4(self[e321], self[e425]))
                - (other.group0().wwwz() * self.group2().truncate_to_3().extend_to_4(self[e435])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e3] * self[e315]) + (other[e5] * self[e1]),
                (other[e1] * self[e125]) + (other[e5] * self[e2]),
                (other[e2] * self[e235]) + (other[e5] * self[e3]),
                -(other[e4] * self[e12345]) - (other[e4] * self[e321]),
            ]) - (Simd32x4::from([other[e5], other[e5], other[e5], self[e412]]) * self.group1().truncate_to_3().extend_to_4(other[e3]))
                - (other.group0().xyxx() * self.group2().wwy().extend_to_4(self[e423]))
                - (other.group0().yzzy() * self.group2().zxw().extend_to_4(self[e431])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([other[e4] * self[e235] * -1.0, other[e4] * self[e315] * -1.0, other[e4] * self[e125] * -1.0, other[e5] * self[e321]])
                + (Simd32x4::from([other[e5], other[e5], other[e5], self[e125]]) * self.group0().truncate_to_3().extend_to_4(other[e3]))
                + (other.group0().xyxx() * self.group0().ww().extend_to_4(self[e425], self[e235]))
                + (other.group0().yzzy() * self.group1().zx().extend_to_4(self[e12345], self[e315]))
                - (other.group0().zxy() * self.group1().yzx()).extend_to_4(other[e5] * self[e12345]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       67        0
    //    simd3        0       19        0
    //    simd4       51       40        0
    // Totals...
    // yes simd       87      126        0
    //  no simd      240      284        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(other[scalar]) * self.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other[scalar]) * self.group1(),
            // e235, e315, e125, e5
            Simd32x4::from(other[scalar]) * self.group2(),
            // e1, e2, e3, e4
            Simd32x4::from(other[scalar]) * self.group3(),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       91        0
    //    simd3        0       21        0
    //    simd4       66       50        0
    // Totals...
    // yes simd      106      162        0
    //  no simd      304      354        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                other[e4125] * self[e431] * -1.0,
                other[e4235] * self[e412] * -1.0,
                other[e4315] * self[e423] * -1.0,
                other[e1234] * self[e5],
            ]) + (Simd32x4::from([other[e1234], other[e1234], other[e1234], self[e3]]) * self.group1().truncate_to_3().extend_to_4(other[e4125]))
                + (Simd32x4::from([other[e1234], other[e1234], other[e1234], self[e4]]) * self.group3().truncate_to_3().extend_to_4(other[e3215]))
                + (other.group0().xyxx() * self.group3().ww().extend_to_4(self[e431], self[e1]))
                + (other.group0().yzzy() * self.group0().zx().extend_to_4(self[e4], self[e2])),
            // e415, e425, e435, e321
            Simd32x4::from([
                other[e4315] * self[e3] * -1.0,
                other[e4125] * self[e1] * -1.0,
                other[e4125] * self[e321] * -1.0,
                other[e3215] * self[e4],
            ]) + (Simd32x4::from([other[e1234], other[e1234], other[e1234], self[e435]]) * self.group2().truncate_to_3().extend_to_4(other[e4125]))
                + (other.group0().zxyx() * self.group3().yzx().extend_to_4(self[e415]))
                + (other.group0().wwwy() * self.group0().truncate_to_3().extend_to_4(self[e425]))
                - (self.group1().ww().extend_to_4(self[e2], other[e1234]) * other.group0().xyx().extend_to_4(self[e5])),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(other[e4315] * self[e125]) - (other[e3215] * self[e1]),
                -(other[e4125] * self[e235]) - (other[e3215] * self[e2]),
                -(other[e4125] * self[e5]) - (other[e3215] * self[e3]),
                (other[e4125] * self[e125]) + (other[e3215] * self[e12345]),
            ]) + (other.group0().zxyx() * self.group2().yzxx())
                + (other.group0().wwwy() * self.group1().truncate_to_3().extend_to_4(self[e315]))
                - (other.group0().xyxw() * self.group2().wwy().extend_to_4(self[e321])),
            // e1, e2, e3, e4
            (other.group0().zxy() * self.group1().yzx()).extend_to_4(other[e1234] * self[e12345])
                + (other.group0().www() * self.group0().truncate_to_3()).extend_to_4(other[e1234] * self[e321])
                - (Simd32x4::from([other[e1234], other[e1234], other[e1234], self[e412]]) * self.group2().truncate_to_3().extend_to_4(other[e4125]))
                - (other.group0().xyxx() * self.group0().ww().extend_to_4(self[e425], self[e423]))
                - (other.group0().yzzy() * self.group1().zx().extend_to_4(self[e12345], self[e431])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       72      125        0
    //    simd3        0       29        0
    //    simd4      102       78        0
    // Totals...
    // yes simd      174      232        0
    //  no simd      480      524        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(other[e12345] * self[e423])
                    - (other[e415] * self[e4])
                    - (other[e425] * self[e412])
                    - (other[e3] * self[e431])
                    - (other[e4] * self[e415])
                    - (other[e4] * self[e1]),
                -(other[e12345] * self[e431])
                    - (other[e425] * self[e4])
                    - (other[e435] * self[e423])
                    - (other[e1] * self[e412])
                    - (other[e4] * self[e425])
                    - (other[e4] * self[e2]),
                -(other[e12345] * self[e412])
                    - (other[e415] * self[e431])
                    - (other[e435] * self[e4])
                    - (other[e2] * self[e423])
                    - (other[e4] * self[e435])
                    - (other[e4] * self[e3]),
                (other[e235] * self[e423]) + (other[e315] * self[e431]) + (other[e125] * self[e412]) + (other[e1] * self[e1]) + (other[e2] * self[e2]) + (other[e3] * self[e3]),
            ]) + (other.group0().zxyx() * self.group1().yzx().extend_to_4(self[e235]))
                + (other.group0().zxyy() * self.group3().yzx().extend_to_4(self[e315]))
                + (other.group1().wwwx() * self.group0().truncate_to_3().extend_to_4(self[e415]))
                + (self.group0().zx().extend_to_4(self[e4], self[e435]) * other.group3().yzz().extend_to_4(other[e435]))
                + (self.group3().ww().extend_to_4(self[e431], self[e425]) * other.group3().xyx().extend_to_4(other[e425]))
                + (other.group1().zxy() * self.group0().yzx()).extend_to_4(other[e412] * self[e125])
                - (other.group0().xyxw() * self.group0().ww().extend_to_4(self[e425], self[e12345]))
                - (self.group1().zx().extend_to_4(self[e12345], self[e4]) * other.group0().yzz().extend_to_4(other[e5]))
                - (self.group1().ww().extend_to_4(self[e2], self[e321]) * other.group0().xyx().extend_to_4(other[e321]))
                - (self.group3().zx().extend_to_4(self[e321], self[e5]) * other.group0().yzz().extend_to_4(other[e4])),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(other[e2] * self[e3]) - (other[e4] * self[e235]),
                -(other[e3] * self[e1]) - (other[e4] * self[e315]),
                -(other[e3] * self[e321]) - (other[e4] * self[e125]),
                (other[e321] * self[e12345]) + (other[e5] * self[e4]),
            ]) + (other.group0().zxyx() * self.group2().yzxx())
                + (other.group1().zxy() * self.group1().yzx()).extend_to_4(other[e431] * self[e315])
                + (other.group2().zxy() * self.group0().yzx()).extend_to_4(other[e412] * self[e125])
                + (other.group3().zxy() * self.group3().yzx()).extend_to_4(other[e12345] * self[e321])
                - (other.group3().xyxw() * self.group1().ww().extend_to_4(self[e2], self[e5]))
                - (self.group0().zx().extend_to_4(self[e4], self[e425]) * other.group2().yzz().extend_to_4(other[e2]))
                - (self.group0().ww().extend_to_4(self[e425], self[e423]) * other.group1().xyx().extend_to_4(other[e235]))
                - (self.group1().zx().extend_to_4(self[e12345], self[e431]) * other.group1().yzz().extend_to_4(other[e315]))
                - (self.group3().ww().extend_to_4(self[e431], self[e415]) * other.group2().xyx().extend_to_4(other[e1]))
                - (other.group0().xyx() * self.group2().wwy()).extend_to_4(other[e415] * self[e1])
                - (other.group0().yzz() * self.group2().zxw()).extend_to_4(other[e425] * self[e2])
                - (other.group0().www() * self.group1().truncate_to_3()).extend_to_4(other[e435] * self[e3])
                - (other.group1().www() * self.group3().truncate_to_3()).extend_to_4(other[e125] * self[e412])
                - (other.group2().www() * self.group0().truncate_to_3()).extend_to_4(other[e3] * self[e435]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                -(other[e125] * self[e2]) - (other[e5] * self[e415]) - (other[e1] * self[e5]) - (other[e2] * self[e125]),
                -(other[e125] * self[e415]) - (other[e5] * self[e425]) - (other[e2] * self[e5]) - (other[e3] * self[e235]),
                -(other[e125] * self[e12345]) - (other[e5] * self[e435]) - (other[e1] * self[e315]) - (other[e3] * self[e5]),
                (other[e415] * self[e423]) + (other[e425] * self[e431]) + (other[e435] * self[e412]) + (other[e321] * self[e4]),
            ]) + (Simd32x4::from([self[e425], self[e1], self[e321], self[e2]]) * other.group2().zzz().extend_to_4(other[e431]))
                + (Simd32x4::from([self[e3], self[e321], self[e415], self[e425]]) * other.group2().yyy().extend_to_4(other[e431]))
                + (self.group1().wz().extend_to_4(self[e2], self[e1]) * other.group2().xxx().extend_to_4(other[e423]))
                + (other.group1().zxy() * self.group2().yzx()).extend_to_4(other[e423] * self[e415])
                + (other.group2().www() * self.group3().truncate_to_3()).extend_to_4(other[e412] * self[e435])
                + (other.group3().zxy() * self.group2().yzx()).extend_to_4(other[e412] * self[e3])
                - (Simd32x4::from(other[e12345]) * self.group2().truncate_to_3().extend_to_4(self[e4]))
                - (Simd32x4::from([self[e12345], self[e3], self[e425], self[e12345]]) * other.group2().xxx().extend_to_4(other[e4]))
                - (Simd32x4::from([self[e435], self[e12345], self[e1], self[e321]]) * other.group2().yyy().extend_to_4(other[e4]))
                - (other.group1().xyx() * self.group2().wwy()).extend_to_4(other[e1] * self[e423])
                - (other.group1().yzz() * self.group2().zxw()).extend_to_4(other[e2] * self[e431])
                - (other.group1().www() * self.group2().truncate_to_3()).extend_to_4(other[e3] * self[e412]),
            // e4235, e4315, e4125, e3215
            (other.group1().xyxz() * self.group1().ww().extend_to_4(self[e2], self[e125]))
                + (other.group2().xyxz() * self.group3().ww().extend_to_4(self[e431], self[e435]))
                + (other.group2().yzzw() * self.group0().zx().extend_to_4(self[e4], self[e321]))
                + (other.group3().xyxy() * self.group0().ww().extend_to_4(self[e425], self[e315]))
                + (other.group3().yzzz() * self.group1().zx().extend_to_4(self[e12345], self[e125]))
                + (self.group1().xyzy() * other.group1().www().extend_to_4(other[e315]))
                + (self.group2().yzxx() * other.group0().zxy().extend_to_4(other[e415]))
                + (self.group3().zx().extend_to_4(self[e321], self[e415]) * other.group1().yzz().extend_to_4(other[e235]))
                + (other.group0().www() * self.group3().truncate_to_3()).extend_to_4(other[e425] * self[e315])
                + (other.group2().www() * self.group0().truncate_to_3()).extend_to_4(other[e1] * self[e235])
                - (other.group0().xyxw() * self.group2().wwyw())
                - (other.group2().zxyy() * self.group0().yzx().extend_to_4(self[e2]))
                - (self.group2().zxww() * other.group0().yzz().extend_to_4(other[e321]))
                - (self.group3().yzxx() * other.group1().zxy().extend_to_4(other[e235]))
                - (other.group3().zxy() * self.group1().yzx()).extend_to_4(other[e125] * self[e3])
                - (other.group3().www() * self.group2().truncate_to_3()).extend_to_4(other[e5] * self[e12345]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       72      126        0
    //    simd3        0       30        0
    //    simd4      102       77        0
    // Totals...
    // yes simd      174      233        0
    //  no simd      480      524        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e435] * other[e42]) + (self[e321] * other[e41]) + (self[e1] * other[e1234]) + (self[e3] * other[e42]) + (self[e4] * other[e23]) + (self[e4] * other[e4235]),
                (self[e425] * other[e1234]) + (self[e321] * other[e42]) + (self[e1] * other[e43]) + (self[e2] * other[e1234]) + (self[e4] * other[e31]) + (self[e4] * other[e4315]),
                (self[e435] * other[e1234]) + (self[e321] * other[e43]) + (self[e2] * other[e41]) + (self[e3] * other[e1234]) + (self[e4] * other[e12]) + (self[e4] * other[e4125]),
                -(self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e321] * other[e45])
                    - (self[e235] * other[e41])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
            ]) + (Simd32x4::from([other[scalar], other[e12], other[e23], other[scalar]]) * self.group0().xxyw())
                + (Simd32x4::from([other[e31], other[scalar], other[scalar], other[e4235]]) * self.group0().zyz().extend_to_4(self[e1]))
                + (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e1234]]) * self.group0().xxy().extend_to_4(self[e5]))
                + (Simd32x4::from([other[e1234], other[e43], other[e41], other[e3215]]) * self.group1().xxy().extend_to_4(self[e4]))
                + (Simd32x4::from([other[e4315], other[e45], other[e45], other[e4315]]) * self.group0().zyz().extend_to_4(self[e2]))
                + (self.group0().www() * other.group0().truncate_to_3()).extend_to_4(self[e3] * other[e4125])
                - (self.group0().yzxx() * other.group1().zxy().extend_to_4(other[e15]))
                - (self.group0().yzxy() * other.group3().zxy().extend_to_4(other[e25]))
                - (self.group1().yzx() * other.group0().zxy()).extend_to_4(self[e412] * other[e35])
                - (self.group3().yzx() * other.group0().zxy()).extend_to_4(self[e415] * other[e23]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e2] * other[e4125]) + (self[e4] * other[e15]),
                (self[e3] * other[e4235]) + (self[e4] * other[e25]),
                (self[e1] * other[e4315]) + (self[e4] * other[e35]),
                -(self[e2] * other[e31]) - (self[e3] * other[e12]),
            ]) + (Simd32x4::from([other[e42], other[e1234], other[e1234], other[e43]]) * self.group2().zyzz())
                + (Simd32x4::from([other[scalar], other[e12], other[e23], other[scalar]]) * self.group1().xxyw())
                + (Simd32x4::from([other[e31], other[scalar], other[scalar], other[e41]]) * self.group1().zyz().extend_to_4(self[e235]))
                + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e4315]]) * self.group0().zyz().extend_to_4(self[e425]))
                + (Simd32x4::from([other[e1234], other[e43], other[e41], other[e42]]) * self.group2().xxyy())
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e4235]]) * self.group0().xxy().extend_to_4(self[e415]))
                + (self.group0().www() * other.group1().truncate_to_3()).extend_to_4(self[e435] * other[e4125])
                + (self.group2().www() * other.group0().truncate_to_3()).extend_to_4(self[e4] * other[e3215])
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e1234]]) * self.group3().xxy().extend_to_4(self[e5]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e23]]) * self.group3().zyzx())
                - (self.group0().yzxx() * other.group2().zxyx())
                - (self.group1().yzx() * other.group1().zxy()).extend_to_4(self[e431] * other[e25])
                - (self.group1().www() * other.group3().truncate_to_3()).extend_to_4(self[e412] * other[e35])
                - (self.group2().yzx() * other.group0().zxy()).extend_to_4(self[e12345] * other[e45]),
            // e235, e315, e125, e5
            (Simd32x4::from(self[e12345]) * other.group2().truncate_to_3().extend_to_4(other[e3215]))
                + (Simd32x4::from([other[scalar], other[e12], other[e4315], other[e4125]]) * self.group2().xxxz())
                + (Simd32x4::from([other[e31], other[e4235], other[scalar], other[e15]]) * self.group2().zzz().extend_to_4(self[e1]))
                + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e4315]]) * self.group1().zyz().extend_to_4(self[e315]))
                + (Simd32x4::from([other[e4125], other[scalar], other[e23], other[scalar]]) * self.group2().yyyw())
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e4235]]) * self.group1().xxy().extend_to_4(self[e235]))
                + (self.group3().yzxz() * other.group2().zxyz())
                + (self.group2().www() * other.group1().truncate_to_3()).extend_to_4(self[e2] * other[e25])
                - (Simd32x4::from([other[e45], other[e4125], other[e31], other[e35]]) * self.group2().xxx().extend_to_4(self[e435]))
                - (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e45]]) * self.group3().zyz().extend_to_4(self[e5]))
                - (Simd32x4::from([other[e4315], other[e23], other[e45], other[e23]]) * self.group2().zzzx())
                - (Simd32x4::from([other[e3215], other[e35], other[e15], other[e12]]) * self.group3().xxy().extend_to_4(self[e125]))
                - (self.group1().yzxx() * other.group2().zxyx())
                - (self.group1().wwwy() * other.group2().xyzy())
                - (self.group2().wwwy() * other.group3().truncate_to_3().extend_to_4(other[e31]))
                - (other.group1().zw().extend_to_4(other[e4235], other[e3215]) * self.group2().yyy().extend_to_4(self[e321])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e315] * other[e43]) + (self[e1] * other[scalar]) + (self[e3] * other[e31]) + (self[e4] * other[e15]),
                (self[e125] * other[e41]) + (self[e1] * other[e12]) + (self[e2] * other[scalar]) + (self[e4] * other[e25]),
                (self[e235] * other[e42]) + (self[e2] * other[e23]) + (self[e3] * other[scalar]) + (self[e4] * other[e35]),
                -(self[e435] * other[e43]) - (self[e1] * other[e41]) - (self[e2] * other[e42]) - (self[e3] * other[e43]),
            ]) + (Simd32x4::from([other[e25], other[e3215], other[e3215], other[e1234]]) * self.group0().zyz().extend_to_4(self[e321]))
                + (Simd32x4::from([other[e3215], other[e35], other[e15], other[e1234]]) * self.group0().xxyw())
                + (other.group1() * self.group1().www().extend_to_4(self[e4]))
                + (self.group1().yzx() * other.group3().zxy()).extend_to_4(self[e4] * other[scalar])
                - (Simd32x4::from([other[e42], other[e1234], other[e1234], other[e4125]]) * self.group2().zyz().extend_to_4(self[e412]))
                - (Simd32x4::from([other[e45], other[e4125], other[e4235], other[e31]]) * self.group1().xxy().extend_to_4(self[e431]))
                - (Simd32x4::from([other[e1234], other[e43], other[e41], other[e12]]) * self.group2().xxy().extend_to_4(self[e412]))
                - (Simd32x4::from([other[e4315], other[e45], other[e45], other[e4315]]) * self.group1().zyz().extend_to_4(self[e431]))
                - (self.group0().yzxx() * other.group2().zxy().extend_to_4(other[e23]))
                - (self.group0().wwwx() * other.group3().xyzx())
                - (other.group0().xyzx() * self.group2().www().extend_to_4(self[e415]))
                - (self.group3().yzx() * other.group1().zxy()).extend_to_4(self[e425] * other[e42]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl std::ops::Div<sandwich> for VersorOdd {
    type Output = sandwich_partial<VersorOdd>;
    fn div(self, _rhs: sandwich) -> Self::Output {
        sandwich_partial(self)
    }
}
impl Sandwich<AntiCircleRotor> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      112      161        0
    //    simd3        0       17        0
    //    simd4       72       58        0
    // Totals...
    // yes simd      184      236        0
    //  no simd      400      444        0
    fn sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e43] * self[e4315]) + (other[e23] * self[e1234]) + (other[e31] * self[e43]) + (other[e45] * self[e41]) + (other[scalar] * self[e41]),
                (other[e43] * self[e23]) + (other[e31] * self[e1234]) + (other[e12] * self[e41]) + (other[e45] * self[e42]) + (other[scalar] * self[e42]),
                (other[e43] * self[scalar]) + (other[e23] * self[e42]) + (other[e12] * self[e1234]) + (other[e45] * self[e43]) + (other[scalar] * self[e43]),
                -(other[e31] * self[e31]) - (other[e12] * self[e12]) - (other[e15] * self[e41]) - (other[e25] * self[e42]) - (other[e35] * self[e43]),
            ]) + (Simd32x4::from([self[scalar], self[e4125], self[e31], self[e45]]) * other.group0().xxx().extend_to_4(other[e45]))
                + (Simd32x4::from([self[e12], self[scalar], self[e4235], self[scalar]]) * other.group0().yyy().extend_to_4(other[scalar]))
                - (Simd32x4::from(other[e41]) * self.group1().wz().extend_to_4(self[e4315], self[e15]))
                - (Simd32x4::from(other[e42]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(other[e43]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]]))
                - (other.group1().zxyx() * self.group0().yzx().extend_to_4(self[e23])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e15] * self[e1234]) + (other[e25] * self[e43]) + (other[scalar] * self[e23]),
                (other[e25] * self[e1234]) + (other[e35] * self[e41]) + (other[scalar] * self[e31]),
                (other[e15] * self[e42]) + (other[e35] * self[e1234]) + (other[scalar] * self[e12]),
                -(other[e23] * self[e4235]) - (other[e31] * self[e4315]) - (other[e12] * self[e4125]),
            ]) + (self.group0().ww().extend_to_4(self[e31], self[e42]) * other.group1().xyx().extend_to_4(other[e25]))
                + (self.group1().zx().extend_to_4(self[scalar], self[e43]) * other.group1().yzz().extend_to_4(other[e35]))
                + (self.group2().zx().extend_to_4(self[e3215], self[e41]) * other.group0().yzz().extend_to_4(other[e15]))
                + (self.group3().ww().extend_to_4(self[e25], self[scalar]) * other.group0().xyx().extend_to_4(other[e45]))
                + (other.group1().www() * self.group3().truncate_to_3()).extend_to_4(other[scalar] * self[e45])
                - (self.group2().yzxx() * other.group0().zxy().extend_to_4(other[e41]))
                - (other.group1().zxy() * self.group1().yzx()).extend_to_4(other[e42] * self[e25])
                - (other.group2().zxy() * self.group0().yzx()).extend_to_4(other[e43] * self[e35]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e25] * self[e4125]) + (other[scalar] * self[e15]),
                (other[e35] * self[e4235]) + (other[scalar] * self[e25]),
                (other[e35] * self[e45]) + (other[scalar] * self[e35]),
                -(other[e31] * self[e42]) - (other[e12] * self[e43]),
            ]) + (other.group2().yzzw() * self.group1().zx().extend_to_4(self[scalar], self[e1234]))
                + (self.group0().ww().extend_to_4(self[e31], self[e4125]) * other.group2().xyx().extend_to_4(other[e43]))
                + (self.group1().ww().extend_to_4(self[e4315], self[e1234]) * other.group2().xyx().extend_to_4(other[e45]))
                + (self.group2().zx().extend_to_4(self[e3215], self[e4315]) * other.group1().yzz().extend_to_4(other[e42]))
                + (self.group3().ww().extend_to_4(self[e25], self[e4235]) * other.group1().xyx().extend_to_4(other[e41]))
                - (self.group1().yzxz() * other.group2().zxy().extend_to_4(other[e43]))
                - (other.group1().zxy() * self.group2().yzx()).extend_to_4(other[e41] * self[e23])
                - (other.group1().www() * self.group2().truncate_to_3()).extend_to_4(other[e42] * self[e31])
                - (other.group2().zxy() * self.group3().yzx()).extend_to_4(other[e23] * self[e41]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e42] * self[e35])
                    + (other[e23] * self[e45])
                    + (other[e31] * self[e4125])
                    + (other[e45] * self[e23])
                    + (other[e35] * self[e42])
                    + (other[scalar] * self[e4235]),
                (other[e43] * self[e15])
                    + (other[e31] * self[e45])
                    + (other[e12] * self[e4235])
                    + (other[e45] * self[e31])
                    + (other[e15] * self[e43])
                    + (other[scalar] * self[e4315]),
                (other[e43] * self[e3215])
                    + (other[e23] * self[e4315])
                    + (other[e12] * self[e45])
                    + (other[e45] * self[e12])
                    + (other[e25] * self[e41])
                    + (other[scalar] * self[e4125]),
                -(other[e15] * self[e23])
                    - (other[e15] * self[e4235])
                    - (other[e25] * self[e31])
                    - (other[e25] * self[e4315])
                    - (other[e35] * self[e12])
                    - (other[e35] * self[e4125]),
            ]) + (self.group3().ww().extend_to_4(self[e25], self[e3215]) * other.group0().xyx().extend_to_4(other[scalar]))
                - (other.group1().zxyy() * self.group3().yzx().extend_to_4(self[e25]))
                - (self.group2().yzxx() * other.group0().zxy().extend_to_4(other[e23]))
                - (self.group0().zx().extend_to_4(self[e1234], self[e3215]) * other.group2().yzz().extend_to_4(other[e45]))
                - (self.group2().ww().extend_to_4(self[e42], self[e35]) * other.group2().xyx().extend_to_4(other[e12])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDipoleInversion> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       68      122        0
    //    simd3        0       24        0
    //    simd4       99       79        0
    // Totals...
    // yes simd      167      225        0
    //  no simd      464      510        0
    fn sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e4] * self[e23]) + (other[e3] * self[e42]),
                (other[e4] * self[e31]) + (other[e1] * self[e43]),
                (other[e4] * self[e12]) + (other[e2] * self[e41]),
                -(other[e315] * self[e42]) - (other[e125] * self[e43]),
            ]) + (Simd32x4::from([self[scalar], self[e4125], self[e31], self[e3215]]) * other.group0().xxx().extend_to_4(other[e4]))
                + (Simd32x4::from([self[e12], self[scalar], self[e4235], self[e4235]]) * other.group0().yyy().extend_to_4(other[e1]))
                + (Simd32x4::from([self[e4315], self[e23], self[scalar], self[e4315]]) * other.group0().zzz().extend_to_4(other[e2]))
                + (self.group0().zx().extend_to_4(self[e1234], self[e1234]) * other.group1().yzz().extend_to_4(other[e5]))
                + (self.group2().ww().extend_to_4(self[e42], self[e4125]) * other.group1().xyx().extend_to_4(other[e3]))
                - (Simd32x4::from(other[e423]) * self.group1().wz().extend_to_4(self[e4315], self[e15]))
                - (Simd32x4::from(other[e431]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(other[e412]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]]))
                - (other.group1().zxyx() * self.group0().yzx().extend_to_4(self[e23]))
                - (other.group1().wwwy() * self.group0().truncate_to_3().extend_to_4(self[e31]))
                - (self.group0().zx().extend_to_4(self[e1234], self[e41]) * other.group3().yzz().extend_to_4(other[e235]))
                - (self.group2().ww().extend_to_4(self[e42], self[e45]) * other.group3().xyx().extend_to_4(other[e321]))
                - (other.group2().www() * self.group3().truncate_to_3()).extend_to_4(other[e435] * self[e12]),
            // e415, e425, e435, e321
            Simd32x4::from([other[e5] * self[e41], other[e5] * self[e42], other[e5] * self[e43], other[e3] * self[e12] * -1.0])
                + (other.group1().yzzx() * self.group1().zx().extend_to_4(self[scalar], self[e4235]))
                + (other.group3().zxyw() * self.group3().yzx().extend_to_4(self[e1234]))
                + (self.group0().zx().extend_to_4(self[e1234], self[e4125]) * other.group2().yzz().extend_to_4(other[e435]))
                + (self.group0().ww().extend_to_4(self[e31], self[e35]) * other.group1().xyx().extend_to_4(other[e412]))
                + (self.group2().zx().extend_to_4(self[e3215], self[e25]) * other.group0().yzz().extend_to_4(other[e431]))
                + (self.group2().ww().extend_to_4(self[e42], self[e4315]) * other.group2().xyx().extend_to_4(other[e425]))
                + (self.group3().ww().extend_to_4(self[e25], self[e15]) * other.group0().xyx().extend_to_4(other[e423]))
                + (other.group2().www() * self.group2().truncate_to_3()).extend_to_4(other[e321] * self[scalar])
                - (other.group2().zxyw() * self.group0().yzx().extend_to_4(self[e3215]))
                - (other.group3().xyxx() * self.group1().ww().extend_to_4(self[e4315], self[e23]))
                - (other.group3().yzzy() * self.group3().zx().extend_to_4(self[e45], self[e31]))
                - (other.group0().zxy() * self.group2().yzx()).extend_to_4(other[e235] * self[e41])
                - (other.group1().zxy() * self.group1().yzx()).extend_to_4(other[e315] * self[e42])
                - (other.group1().www() * self.group3().truncate_to_3()).extend_to_4(other[e125] * self[e43]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e235] * self[scalar])
                    + (other[e235] * self[e45])
                    + (other[e315] * self[e12])
                    + (other[e315] * self[e4125])
                    + (other[e1] * self[e3215])
                    + (other[e2] * self[e35])
                    + (other[e5] * self[e23])
                    + (other[e5] * self[e4235]),
                (other[e315] * self[scalar])
                    + (other[e315] * self[e45])
                    + (other[e125] * self[e23])
                    + (other[e125] * self[e4235])
                    + (other[e2] * self[e3215])
                    + (other[e3] * self[e15])
                    + (other[e5] * self[e31])
                    + (other[e5] * self[e4315]),
                (other[e235] * self[e31])
                    + (other[e235] * self[e4315])
                    + (other[e125] * self[scalar])
                    + (other[e125] * self[e45])
                    + (other[e1] * self[e25])
                    + (other[e3] * self[e3215])
                    + (other[e5] * self[e12])
                    + (other[e5] * self[e4125]),
                -(other[e235] * self[e4235])
                    - (other[e315] * self[e31])
                    - (other[e315] * self[e4315])
                    - (other[e125] * self[e12])
                    - (other[e125] * self[e4125])
                    - (other[e1] * self[e15])
                    - (other[e2] * self[e25])
                    - (other[e3] * self[e35]),
            ]) + (other.group1().xyxw() * self.group3().ww().extend_to_4(self[e25], self[e3215]))
                + (self.group2().zx().extend_to_4(self[e3215], self[scalar]) * other.group1().yzz().extend_to_4(other[e5]))
                + (other.group1().www() * self.group2().truncate_to_3()).extend_to_4(other[e5] * self[e45])
                - (other.group1().zxyx() * self.group2().yzxx())
                - (other.group2().zxy() * self.group1().yzx()).extend_to_4(other[e425] * self[e25])
                - (other.group2().zxy() * self.group3().yzx()).extend_to_4(other[e435] * self[e35])
                - (other.group3().zxy() * self.group2().yzx()).extend_to_4(other[e235] * self[e23]),
            // e1, e2, e3, e4
            Simd32x4::from([other[e5] * self[e41], other[e5] * self[e42], other[e5] * self[e43], other[e4] * self[e45] * -1.0])
                + (other.group2().xyxw() * self.group2().ww().extend_to_4(self[e42], self[scalar]))
                + (other.group3().xyxy() * self.group0().ww().extend_to_4(self[e31], self[e42]))
                + (other.group3().yzzz() * self.group1().zx().extend_to_4(self[scalar], self[e43]))
                + (self.group3().yzxy() * other.group1().zxy().extend_to_4(other[e431]))
                + (self.group0().zx().extend_to_4(self[e1234], self[e41]) * other.group2().yzz().extend_to_4(other[e1]))
                + (other.group0().zxy() * self.group2().yzx()).extend_to_4(other[e423] * self[e4235])
                + (other.group1().www() * self.group1().truncate_to_3()).extend_to_4(other[e412] * self[e4125])
                - (other.group1().yzzx() * self.group3().zx().extend_to_4(self[e45], self[e41]))
                - (self.group0().yzxy() * other.group2().zxy().extend_to_4(other[e425]))
                - (self.group1().ww().extend_to_4(self[e4315], self[e12]) * other.group1().xyx().extend_to_4(other[e412]))
                - (self.group2().zx().extend_to_4(self[e3215], self[e31]) * other.group0().yzz().extend_to_4(other[e431]))
                - (self.group3().ww().extend_to_4(self[e25], self[e23]) * other.group0().xyx().extend_to_4(other[e423]))
                - (other.group2().www() * self.group2().truncate_to_3()).extend_to_4(other[e435] * self[e43])
                - (other.group3().zxy() * self.group1().yzx()).extend_to_4(other[e321] * self[e1234]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiDualNum> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       66      107        0
    //    simd3        2       14        0
    //    simd4       46       39        0
    // Totals...
    // yes simd      114      160        0
    //  no simd      256      305        0
    fn sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([self[e41], self[e42], self[e43], 1.0]) * other.group0().yy().extend_to_4(other[scalar], (other[e3215] * self[e1234]) + (other[scalar] * self[scalar])),
            // e23, e31, e12, e45
            Simd32x4::from([other[scalar] * self[e23], other[scalar] * self[e31], other[scalar] * self[e12], other[e3215] * self[e1234] * -1.0])
                + (other.group0().xx().extend_to_4(other[e3215], other[scalar]) * self.group0().truncate_to_3().extend_to_4(self[e45])),
            // e15, e25, e35, e1234
            ((Simd32x3::from(other[e3215]) * self.group1().truncate_to_3())
                + (Simd32x3::from(other[e3215]) * self.group3().truncate_to_3())
                + (Simd32x3::from(other[scalar]) * self.group2().truncate_to_3()))
            .extend_to_4(other[scalar] * self[e1234]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e3215] * self[e41] * -1.0,
                other[e3215] * self[e42] * -1.0,
                other[e3215] * self[e43] * -1.0,
                (other[e3215] * self[e45]) + (other[scalar] * self[e3215]),
            ]) + (other.group0().yy().extend_to_4(other[scalar], other[e3215]) * self.group3().truncate_to_3().extend_to_4(self[scalar])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlatPoint> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       51       86        0
    //    simd3        3       15        0
    //    simd4       57       52        0
    // Totals...
    // yes simd      111      153        0
    //  no simd      288      339        0
    fn sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([self[e41], self[e42], self[e43], 1.0])
                * other
                    .group0()
                    .www()
                    .extend_to_4(-(other[e235] * self[e41]) - (other[e315] * self[e42]) - (other[e125] * self[e43]) - (other[e321] * self[e45]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            Simd32x4::from([other[e315] * self[e43], other[e125] * self[e41], other[e125] * self[e1234], other[e125] * self[e43] * -1.0])
                + (other.group0().xyxw() * self.group2().ww().extend_to_4(self[e42], self[scalar]))
                - (other.group0().zxyx() * self.group0().yzxx())
                - (other.group0().wwwy() * self.group3().truncate_to_3().extend_to_4(self[e42])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e235] * self[e45]) + (other[e315] * self[e12]) + (other[e315] * self[e4125]) + (other[e321] * self[e15]),
                (other[e315] * self[e45]) + (other[e125] * self[e23]) + (other[e125] * self[e4235]) + (other[e321] * self[e25]),
                (other[e235] * self[e4315]) + (other[e125] * self[scalar]) + (other[e125] * self[e45]) + (other[e321] * self[e35]),
                -(other[e315] * self[e31]) - (other[e315] * self[e4315]) - (other[e125] * self[e12]) - (other[e125] * self[e4125]),
            ]) + (other.group0().xyxw() * self.group0().ww().extend_to_4(self[e31], self[e3215]))
                - (other.group0().zxyx() * self.group1().yzxx())
                - (other.group0().zxyx() * self.group3().yzxx()),
            // e1, e2, e3, e4
            ((Simd32x3::from(other[e321]) * self.group1().truncate_to_3())
                + (Simd32x3::from([self[e43], self[e41], self[e1234]]) * other.group0().yzz())
                + (Simd32x3::from([self[e1234], self[e1234], self[e42]]) * other.group0().xyx())
                - (other.group0().zxy() * self.group0().yzx()))
            .extend_to_4(other[e321] * self[e1234] * -1.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiFlector> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       72      109        0
    //    simd3        0       13        0
    //    simd4       71       62        0
    // Totals...
    // yes simd      143      184        0
    //  no simd      356      396        0
    fn sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (other.group1().zxyx() * self.group0().yzx().extend_to_4(self[e4235]))
                + Simd32x3::from(0.0).extend_to_4((other[e2] * self[e4315]) + (other[e3] * self[e4125]) + (other[e5] * self[e1234]) - (other[e321] * self[e45]))
                - (other.group0().wwwx() * self.group0().xyzx())
                - (self.group0().zx().extend_to_4(self[e1234], self[e43]) * other.group1().yzz().extend_to_4(other[e125]))
                - (self.group2().ww().extend_to_4(self[e42], self[e42]) * other.group1().xyx().extend_to_4(other[e315])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e3] * self[e4315]) + (other[e5] * self[e41]),
                (other[e1] * self[e4125]) + (other[e5] * self[e42]),
                (other[e2] * self[e4235]) + (other[e5] * self[e43]),
                -(other[e2] * self[e31]) - (other[e3] * self[e12]),
            ]) + (other.group0().xyxw() * self.group2().ww().extend_to_4(self[e42], self[scalar]))
                + (self.group0().zx().extend_to_4(self[e1234], self[e1234]) * other.group0().yzz().extend_to_4(other[e5]))
                - (other.group0().zxyx() * self.group0().yzxx())
                - (other.group0().wwwy() * self.group3().truncate_to_3().extend_to_4(self[e42]))
                - (other.group1().yzzx() * self.group3().zx().extend_to_4(self[e45], self[e23]))
                - (self.group1().ww().extend_to_4(self[e4315], self[e43]) * other.group1().xyx().extend_to_4(other[e125])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e315] * self[e4125]) + (other[e321] * self[e15]) + (other[e1] * self[e3215]) + (other[e2] * self[e35]) + (other[e5] * self[e23]) + (other[e5] * self[e4235]),
                (other[e125] * self[e4235]) + (other[e321] * self[e25]) + (other[e2] * self[e3215]) + (other[e3] * self[e15]) + (other[e5] * self[e31]) + (other[e5] * self[e4315]),
                (other[e125] * self[e45]) + (other[e321] * self[e35]) + (other[e1] * self[e25]) + (other[e3] * self[e3215]) + (other[e5] * self[e12]) + (other[e5] * self[e4125]),
                -(other[e315] * self[e4315])
                    - (other[e125] * self[e12])
                    - (other[e125] * self[e4125])
                    - (other[e1] * self[e15])
                    - (other[e2] * self[e25])
                    - (other[e3] * self[e35]),
            ]) + (other.group0().xyxw() * self.group0().ww().extend_to_4(self[e31], self[e3215]))
                + (self.group1().zx().extend_to_4(self[scalar], self[e45]) * other.group0().yzz().extend_to_4(other[e5]))
                + (self.group1().ww().extend_to_4(self[e4315], self[scalar]) * other.group0().xyx().extend_to_4(other[e5]))
                - (other.group0().zxyx() * self.group1().yzxx())
                - (other.group0().zxyx() * self.group3().yzxx())
                - (other.group1().zxy() * self.group2().yzx()).extend_to_4(other[e315] * self[e31]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e1] * self[scalar]) + (other[e2] * self[e12]) + (other[e5] * self[e41]) - (other[e3] * self[e31]),
                (other[e2] * self[scalar]) + (other[e3] * self[e23]) + (other[e5] * self[e42]) - (other[e1] * self[e12]),
                (other[e1] * self[e31]) + (other[e3] * self[scalar]) + (other[e5] * self[e43]) - (other[e2] * self[e23]),
                0.0,
            ]) + (self.group0().zx().extend_to_4(self[e1234], self[e42]) * other.group0().yzz().extend_to_4(other[e2]))
                + (self.group2().ww().extend_to_4(self[e42], self[e41]) * other.group0().xyx().extend_to_4(other[e1]))
                + (other.group0().www() * self.group1().truncate_to_3()).extend_to_4(other[e3] * self[e43])
                - (other.group0().zxyw() * self.group0().yzx().extend_to_4(self[e1234])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiLine> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       97      147        0
    //    simd3        0       18        0
    //    simd4       56       41        0
    // Totals...
    // yes simd      153      206        0
    //  no simd      321      365        0
    fn sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e23] * self[e1234]) + (other[e31] * self[e43]),
                (other[e31] * self[e1234]) + (other[e12] * self[e41]),
                (other[e23] * self[e42]) + (other[e12] * self[e1234]),
                -(other[e31] * self[e31]) - (other[e12] * self[e12]) - (other[e15] * self[e41]) - (other[e25] * self[e42]) - (other[e35] * self[e43]),
            ]) - (other.group0().zxy() * self.group0().yzx()).extend_to_4(other[e23] * self[e23]),
            // e23, e31, e12, e45
            Simd32x4::from([other[e25] * self[e43], other[e35] * self[e41], other[e35] * self[e1234], other[e12] * self[e4125] * -1.0])
                + (self.group0().ww().extend_to_4(self[e31], self[e41]) * other.group0().xyx().extend_to_4(other[e15]))
                + (self.group1().zx().extend_to_4(self[scalar], self[e42]) * other.group0().yzz().extend_to_4(other[e25]))
                + (self.group2().ww().extend_to_4(self[e42], self[e43]) * other.group1().xyx().extend_to_4(other[e35]))
                - (other.group0().zxy() * self.group1().yzx()).extend_to_4(other[e23] * self[e4235])
                - (other.group1().zxy() * self.group0().yzx()).extend_to_4(other[e31] * self[e4315]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e23] * self[e3215])
                    + (other[e31] * self[e35])
                    + (other[e15] * self[scalar])
                    + (other[e15] * self[e45])
                    + (other[e25] * self[e12])
                    + (other[e25] * self[e4125]),
                (other[e31] * self[e3215])
                    + (other[e12] * self[e15])
                    + (other[e25] * self[scalar])
                    + (other[e25] * self[e45])
                    + (other[e35] * self[e23])
                    + (other[e35] * self[e4235]),
                (other[e23] * self[e25])
                    + (other[e12] * self[e3215])
                    + (other[e15] * self[e31])
                    + (other[e15] * self[e4315])
                    + (other[e35] * self[scalar])
                    + (other[e35] * self[e45]),
                0.0,
            ]) - (other.group0().zxy() * self.group2().yzx()).extend_to_4(other[e23] * self[e41])
                - (other.group1().zxy() * self.group1().yzx()).extend_to_4(other[e31] * self[e42])
                - (other.group1().zxy() * self.group3().yzx()).extend_to_4(other[e12] * self[e43]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e23] * self[e45]) + (other[e31] * self[e4125]) + (other[e35] * self[e42]),
                (other[e31] * self[e45]) + (other[e12] * self[e4235]) + (other[e15] * self[e43]),
                (other[e23] * self[e4315]) + (other[e12] * self[e45]) + (other[e25] * self[e41]),
                -(other[e15] * self[e23])
                    - (other[e15] * self[e4235])
                    - (other[e25] * self[e31])
                    - (other[e25] * self[e4315])
                    - (other[e35] * self[e12])
                    - (other[e35] * self[e4125]),
            ]) - (self.group0().zx().extend_to_4(self[e1234], self[e35]) * other.group1().yzz().extend_to_4(other[e12]))
                - (self.group2().ww().extend_to_4(self[e42], self[e25]) * other.group1().xyx().extend_to_4(other[e31]))
                - (other.group0().zxy() * self.group3().yzx()).extend_to_4(other[e23] * self[e15]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiMotor> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       97      144        0
    //    simd3        0       16        0
    //    simd4       64       51        0
    // Totals...
    // yes simd      161      211        0
    //  no simd      353      396        0
    fn sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                other[scalar] * self[e41],
                other[scalar] * self[e42],
                other[scalar] * self[e43],
                -(other[e31] * self[e31]) - (other[e12] * self[e12]) - (other[e15] * self[e41]) - (other[e25] * self[e42]) - (other[e35] * self[e43]),
            ]) + (other.group0().xyxw() * self.group2().ww().extend_to_4(self[e42], self[scalar]))
                + (self.group0().zx().extend_to_4(self[e1234], self[e1234]) * other.group0().yzz().extend_to_4(other[e3215]))
                - (other.group0().zxyx() * self.group0().yzx().extend_to_4(self[e23])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e25] * self[e43]) + (other[e3215] * self[e41]),
                (other[e35] * self[e41]) + (other[e3215] * self[e42]),
                (other[e35] * self[e1234]) + (other[e3215] * self[e43]),
                -(other[e12] * self[e4125]) - (other[e3215] * self[e1234]),
            ]) + (other.group0().xyxw() * self.group0().ww().extend_to_4(self[e31], self[e45]))
                + (other.group1().xyxz() * self.group2().ww().extend_to_4(self[e42], self[e43]))
                + (self.group1().zx().extend_to_4(self[scalar], self[e41]) * other.group0().yzz().extend_to_4(other[e15]))
                + (other.group0().www() * self.group1().truncate_to_3()).extend_to_4(other[e25] * self[e42])
                - (other.group0().zxyx() * self.group1().yzx().extend_to_4(self[e4235]))
                - (other.group1().zxy() * self.group0().yzx()).extend_to_4(other[e31] * self[e4315]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e31] * self[e35])
                    + (other[scalar] * self[e15])
                    + (other[e15] * self[scalar])
                    + (other[e15] * self[e45])
                    + (other[e25] * self[e12])
                    + (other[e25] * self[e4125])
                    + (other[e3215] * self[e23])
                    + (other[e3215] * self[e4235]),
                (other[e12] * self[e15])
                    + (other[scalar] * self[e25])
                    + (other[e25] * self[scalar])
                    + (other[e25] * self[e45])
                    + (other[e35] * self[e23])
                    + (other[e35] * self[e4235])
                    + (other[e3215] * self[e31])
                    + (other[e3215] * self[e4315]),
                (other[e12] * self[e3215])
                    + (other[scalar] * self[e35])
                    + (other[e15] * self[e31])
                    + (other[e15] * self[e4315])
                    + (other[e35] * self[scalar])
                    + (other[e35] * self[e45])
                    + (other[e3215] * self[e12])
                    + (other[e3215] * self[e4125]),
                0.0,
            ]) + (other.group0().xyxw() * self.group3().ww().extend_to_4(self[e25], self[e1234]))
                - (other.group0().zxyx() * self.group2().yzx().extend_to_4(self[e41]))
                - (other.group1().zxy() * self.group1().yzx()).extend_to_4(other[e31] * self[e42])
                - (other.group1().zxy() * self.group3().yzx()).extend_to_4(other[e12] * self[e43]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e35] * self[e42],
                other[e15] * self[e43],
                other[e25] * self[e41],
                -(other[e15] * self[e4235]) - (other[e25] * self[e31]) - (other[e25] * self[e4315]) - (other[e35] * self[e12]) - (other[e35] * self[e4125]),
            ]) + (other.group0().xyxw() * self.group1().ww().extend_to_4(self[e4315], self[e3215]))
                + (self.group3().zx().extend_to_4(self[e45], self[scalar]) * other.group0().yzz().extend_to_4(other[e3215]))
                + (other.group0().www() * self.group3().truncate_to_3()).extend_to_4(other[e3215] * self[e45])
                - (other.group0().zxyx() * self.group3().yzx().extend_to_4(self[e15]))
                - (other.group1().wwwx() * self.group0().truncate_to_3().extend_to_4(self[e23]))
                - (self.group0().zx().extend_to_4(self[e1234], self[e35]) * other.group1().yzz().extend_to_4(other[e12]))
                - (self.group2().ww().extend_to_4(self[e42], self[e25]) * other.group1().xyx().extend_to_4(other[e31])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiPlane> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       45       87        0
    //    simd3        0       11        0
    //    simd4       61       54        0
    // Totals...
    // yes simd      106      152        0
    //  no simd      289      336        0
    fn sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                -(other[e1] * self[e1234]) - (other[e2] * self[e43]),
                -(other[e2] * self[e1234]) - (other[e3] * self[e41]),
                -(other[e1] * self[e42]) - (other[e3] * self[e1234]),
                (other[e2] * self[e4315]) + (other[e3] * self[e4125]) + (other[e5] * self[e1234]),
            ]) + (other.group0().zxyx() * self.group0().yzx().extend_to_4(self[e4235])),
            // e415, e425, e435, e321
            Simd32x4::from([other[e5] * self[e41], other[e5] * self[e42], other[e5] * self[e43], other[e3] * self[e12] * -1.0])
                + (other.group0().zxyw() * self.group3().yzx().extend_to_4(self[e1234]))
                - (other.group0().xyxx() * self.group1().ww().extend_to_4(self[e4315], self[e23]))
                - (other.group0().yzzy() * self.group3().zx().extend_to_4(self[e45], self[e31])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e5] * self[e23]) + (other[e5] * self[e4235]),
                (other[e5] * self[e31]) + (other[e5] * self[e4315]),
                (other[e5] * self[e12]) + (other[e5] * self[e4125]),
                -(other[e2] * self[e25]) - (other[e3] * self[e35]),
            ]) + (other.group0().xyxw() * self.group3().ww().extend_to_4(self[e25], self[scalar]))
                + (other.group0().yzzw() * self.group2().zx().extend_to_4(self[e3215], self[e45]))
                - (other.group0().zxyx() * self.group2().yzxx()),
            // e1, e2, e3, e4
            Simd32x4::from([other[e3] * self[e31] * -1.0, other[e1] * self[e12] * -1.0, other[e2] * self[e23] * -1.0, 0.0])
                + (other.group0().xyxx() * self.group0().ww().extend_to_4(self[e31], self[e41]))
                + (other.group0().yzzy() * self.group1().zx().extend_to_4(self[scalar], self[e42]))
                + (other.group0().wwwz() * self.group0().xyzz()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<AntiScalar> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       59        0
    //    simd3        0       11        0
    //    simd4       51       50        0
    // Totals...
    // yes simd       87      120        0
    //  no simd      240      292        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(other[e12345]) * self.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other[e12345]) * self.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e235, e315, e125, e5
            Simd32x4::from(other[e12345]) * self.group2().truncate_to_3().extend_to_4(self[e3215]),
            // e1, e2, e3, e4
            Simd32x4::from(other[e12345]) * self.group3().truncate_to_3().extend_to_4(self[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       76      123        0
    //    simd3        0       16        0
    //    simd4       77       65        0
    // Totals...
    // yes simd      153      204        0
    //  no simd      384      431        0
    fn sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e423] * self[scalar]) + (other[e431] * self[e12]) + (other[e412] * self[e4315]) + (other[e415] * self[e1234]) + (other[e425] * self[e43]),
                (other[e423] * self[e4125]) + (other[e431] * self[scalar]) + (other[e412] * self[e23]) + (other[e425] * self[e1234]) + (other[e435] * self[e41]),
                (other[e423] * self[e31]) + (other[e431] * self[e4235]) + (other[e412] * self[scalar]) + (other[e415] * self[e42]) + (other[e435] * self[e1234]),
                -(other[e415] * self[e23]) - (other[e425] * self[e31]) - (other[e435] * self[e12]) - (other[e321] * self[e45]) - (other[e125] * self[e43]),
            ]) - (Simd32x4::from(other[e423]) * self.group1().wz().extend_to_4(self[e4315], self[e15]))
                - (Simd32x4::from(other[e431]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(other[e412]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]]))
                - (self.group0().xyzy() * other.group1().www().extend_to_4(other[e315]))
                - (self.group0().yzxx() * other.group1().zxy().extend_to_4(other[e235])),
            // e415, e425, e435, e321
            Simd32x4::from([
                other[e321] * self[e4235] * -1.0,
                other[e321] * self[e4315] * -1.0,
                other[e321] * self[e4125] * -1.0,
                other[e321] * self[scalar],
            ]) + (other.group1().xyxy() * self.group0().ww().extend_to_4(self[e31], self[e4315]))
                + (other.group1().yzzz() * self.group1().zx().extend_to_4(self[scalar], self[e4125]))
                + (self.group0().zx().extend_to_4(self[e1234], self[e4235]) * other.group2().yzz().extend_to_4(other[e415]))
                + (self.group2().zx().extend_to_4(self[e3215], self[e25]) * other.group0().yzz().extend_to_4(other[e431]))
                + (self.group2().ww().extend_to_4(self[e42], self[e35]) * other.group2().xyx().extend_to_4(other[e412]))
                + (self.group3().ww().extend_to_4(self[e25], self[e15]) * other.group0().xyx().extend_to_4(other[e423]))
                - (self.group0().yzxy() * other.group2().zxy().extend_to_4(other[e315]))
                - (other.group0().zxy() * self.group2().yzx()).extend_to_4(other[e235] * self[e41])
                - (other.group1().zxy() * self.group1().yzx()).extend_to_4(other[e125] * self[e43]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e415] * self[e3215])
                    + (other[e425] * self[e35])
                    + (other[e321] * self[e15])
                    + (other[e235] * self[e45])
                    + (other[e315] * self[e12])
                    + (other[e315] * self[e4125]),
                (other[e425] * self[e3215])
                    + (other[e435] * self[e15])
                    + (other[e321] * self[e25])
                    + (other[e315] * self[e45])
                    + (other[e125] * self[e23])
                    + (other[e125] * self[e4235]),
                (other[e415] * self[e25])
                    + (other[e435] * self[e3215])
                    + (other[e321] * self[e35])
                    + (other[e235] * self[e4315])
                    + (other[e125] * self[scalar])
                    + (other[e125] * self[e45]),
                -(other[e415] * self[e15])
                    - (other[e425] * self[e25])
                    - (other[e435] * self[e35])
                    - (other[e315] * self[e4315])
                    - (other[e125] * self[e12])
                    - (other[e125] * self[e4125]),
            ]) + (self.group0().ww().extend_to_4(self[e31], self[e3215]) * other.group2().xyx().extend_to_4(other[e321]))
                - (self.group1().yzxx() * other.group2().zxy().extend_to_4(other[e235]))
                - (self.group3().yzxx() * other.group2().zxy().extend_to_4(other[e235]))
                - (other.group1().zxy() * self.group2().yzx()).extend_to_4(other[e315] * self[e31]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e435] * self[e4315]) + (other[e321] * self[e23]),
                (other[e415] * self[e4125]) + (other[e321] * self[e31]),
                (other[e425] * self[e4235]) + (other[e321] * self[e12]),
                -(other[e435] * self[e43]) - (other[e321] * self[e1234]),
            ]) + (self.group0().zx().extend_to_4(self[e1234], self[e4125]) * other.group2().yzz().extend_to_4(other[e412]))
                + (self.group2().ww().extend_to_4(self[e42], self[e4315]) * other.group2().xyx().extend_to_4(other[e431]))
                + (other.group0().zxy() * self.group2().yzx()).extend_to_4(other[e423] * self[e4235])
                - (other.group1().xyxx() * self.group1().ww().extend_to_4(self[e4315], self[e41]))
                - (other.group1().yzzy() * self.group3().zx().extend_to_4(self[e45], self[e42]))
                - (self.group2().zx().extend_to_4(self[e3215], self[e31]) * other.group0().yzz().extend_to_4(other[e431]))
                - (self.group3().ww().extend_to_4(self[e25], self[e23]) * other.group0().xyx().extend_to_4(other[e423]))
                - (other.group2().zxy() * self.group0().yzx()).extend_to_4(other[e412] * self[e12]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       72      117        0
    //    simd3        0       20        0
    //    simd4       82       67        0
    // Totals...
    // yes simd      154      204        0
    //  no simd      400      445        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e431] * self[e12]) + (other[e412] * self[e4315]) + (other[e415] * self[e1234]) + (other[e425] * self[e43]) + (other[e12345] * self[e41]),
                (other[e431] * self[scalar]) + (other[e412] * self[e23]) + (other[e425] * self[e1234]) + (other[e435] * self[e41]) + (other[e12345] * self[e42]),
                (other[e431] * self[e4235]) + (other[e412] * self[scalar]) + (other[e415] * self[e42]) + (other[e435] * self[e1234]) + (other[e12345] * self[e43]),
                -(other[e435] * self[e12]) - (other[e321] * self[e45]) - (other[e235] * self[e41]) - (other[e315] * self[e42]) - (other[e125] * self[e43]),
            ]) + (Simd32x4::from([self[scalar], self[e4125], self[e31], self[scalar]]) * other.group0().xxx().extend_to_4(other[e12345]))
                - (Simd32x4::from(other[e423]) * self.group1().wz().extend_to_4(self[e4315], self[e15]))
                - (Simd32x4::from(other[e431]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(other[e412]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]]))
                - (other.group1().zxyx() * self.group0().yzx().extend_to_4(self[e23]))
                - (other.group1().wwwy() * self.group0().truncate_to_3().extend_to_4(self[e31])),
            // e415, e425, e435, e321
            (other.group1().yzzx() * self.group1().zx().extend_to_4(self[scalar], self[e4235]))
                + (self.group0().zx().extend_to_4(self[e1234], self[e4125]) * other.group2().yzz().extend_to_4(other[e435]))
                + (self.group0().ww().extend_to_4(self[e31], self[e35]) * other.group1().xyx().extend_to_4(other[e412]))
                + (self.group2().zx().extend_to_4(self[e3215], self[e25]) * other.group0().yzz().extend_to_4(other[e431]))
                + (self.group2().ww().extend_to_4(self[e42], self[e4315]) * other.group2().xyx().extend_to_4(other[e425]))
                + (self.group3().ww().extend_to_4(self[e25], self[e15]) * other.group0().xyx().extend_to_4(other[e423]))
                + (other.group2().www() * self.group1().truncate_to_3()).extend_to_4(other[e321] * self[scalar])
                - (other.group2().zxyw() * self.group0().yzx().extend_to_4(self[e45]))
                - (other.group0().zxy() * self.group2().yzx()).extend_to_4(other[e235] * self[e41])
                - (other.group1().zxy() * self.group1().yzx()).extend_to_4(other[e315] * self[e42])
                - (other.group1().www() * self.group3().truncate_to_3()).extend_to_4(other[e125] * self[e43]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e321] * self[e15])
                    + (other[e235] * self[scalar])
                    + (other[e235] * self[e45])
                    + (other[e315] * self[e12])
                    + (other[e315] * self[e4125])
                    + (other[e12345] * self[e15]),
                (other[e321] * self[e25])
                    + (other[e315] * self[scalar])
                    + (other[e315] * self[e45])
                    + (other[e125] * self[e23])
                    + (other[e125] * self[e4235])
                    + (other[e12345] * self[e25]),
                (other[e321] * self[e35])
                    + (other[e235] * self[e31])
                    + (other[e235] * self[e4315])
                    + (other[e125] * self[scalar])
                    + (other[e125] * self[e45])
                    + (other[e12345] * self[e35]),
                -(other[e235] * self[e23])
                    - (other[e235] * self[e4235])
                    - (other[e315] * self[e31])
                    - (other[e315] * self[e4315])
                    - (other[e125] * self[e12])
                    - (other[e125] * self[e4125]),
            ]) + (other.group1().xyxw() * self.group3().ww().extend_to_4(self[e25], self[e3215]))
                + (self.group2().zx().extend_to_4(self[e3215], self[e3215]) * other.group1().yzz().extend_to_4(other[e12345]))
                - (other.group1().zxyx() * self.group2().yzxx())
                - (other.group2().zxy() * self.group1().yzx()).extend_to_4(other[e425] * self[e25])
                - (other.group2().zxy() * self.group3().yzx()).extend_to_4(other[e435] * self[e35]),
            // e1, e2, e3, e4
            Simd32x4::from([other[e315] * self[e43], other[e125] * self[e41], other[e125] * self[e1234], other[e321] * self[e1234] * -1.0])
                + (other.group2().xyxw() * self.group2().ww().extend_to_4(self[e42], self[e1234]))
                + (self.group3().yzxy() * other.group1().zxy().extend_to_4(other[e431]))
                + (other.group0().zxy() * self.group2().yzx()).extend_to_4(other[e423] * self[e4235])
                + (other.group1().www() * self.group1().truncate_to_3()).extend_to_4(other[e412] * self[e4125])
                - (other.group1().yzzx() * self.group3().zx().extend_to_4(self[e45], self[e41]))
                - (self.group0().yzxy() * other.group2().zxy().extend_to_4(other[e425]))
                - (self.group1().ww().extend_to_4(self[e4315], self[e12]) * other.group1().xyx().extend_to_4(other[e412]))
                - (self.group2().zx().extend_to_4(self[e3215], self[e31]) * other.group0().yzz().extend_to_4(other[e431]))
                - (self.group3().ww().extend_to_4(self[e25], self[e23]) * other.group0().xyx().extend_to_4(other[e423]))
                - (other.group2().www() * self.group3().truncate_to_3()).extend_to_4(other[e435] * self[e43]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      112      160        0
    //    simd3        0       16        0
    //    simd4       68       55        0
    // Totals...
    // yes simd      180      231        0
    //  no simd      384      428        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e42] * self[e12]) + (other[e43] * self[e4315]) + (other[e23] * self[e1234]) + (other[e31] * self[e43]) + (other[e45] * self[e41]),
                (other[e42] * self[scalar]) + (other[e43] * self[e23]) + (other[e31] * self[e1234]) + (other[e12] * self[e41]) + (other[e45] * self[e42]),
                (other[e42] * self[e4235]) + (other[e43] * self[scalar]) + (other[e23] * self[e42]) + (other[e12] * self[e1234]) + (other[e45] * self[e43]),
                -(other[e23] * self[e23]) - (other[e31] * self[e31]) - (other[e12] * self[e12]) - (other[e25] * self[e42]) - (other[e35] * self[e43]),
            ]) + (Simd32x4::from([self[scalar], self[e4125], self[e31], self[e45]]) * other.group0().xxx().extend_to_4(other[e45]))
                - (Simd32x4::from(other[e41]) * self.group1().wz().extend_to_4(self[e4315], self[e15]))
                - (Simd32x4::from(other[e42]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(other[e43]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]]))
                - (self.group0().yzxx() * other.group1().zxy().extend_to_4(other[e15])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e23] * self[scalar]) + (other[e31] * self[e12]) + (other[e45] * self[e4235]),
                (other[e31] * self[scalar]) + (other[e12] * self[e23]) + (other[e45] * self[e4315]),
                (other[e23] * self[e31]) + (other[e12] * self[scalar]) + (other[e45] * self[e4125]),
                -(other[e23] * self[e4235]) - (other[e31] * self[e4315]) - (other[e12] * self[e4125]),
            ]) + (self.group0().zx().extend_to_4(self[e1234], self[scalar]) * other.group2().yzz().extend_to_4(other[e45]))
                + (self.group2().zx().extend_to_4(self[e3215], self[e42]) * other.group0().yzz().extend_to_4(other[e25]))
                + (self.group2().ww().extend_to_4(self[e42], self[e43]) * other.group2().xyx().extend_to_4(other[e35]))
                + (self.group3().ww().extend_to_4(self[e25], self[e41]) * other.group0().xyx().extend_to_4(other[e15]))
                - (self.group2().yzxx() * other.group0().zxy().extend_to_4(other[e41]))
                - (other.group2().zxy() * self.group0().yzx()).extend_to_4(other[e42] * self[e25])
                - (other.group1().zxy() * self.group1().yzx()).extend_to_4(other[e43] * self[e35]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e23] * self[e3215]) + (other[e31] * self[e35]),
                (other[e31] * self[e3215]) + (other[e12] * self[e15]),
                (other[e23] * self[e25]) + (other[e12] * self[e3215]),
                -(other[e31] * self[e42]) - (other[e12] * self[e43]),
            ]) + (self.group0().ww().extend_to_4(self[e31], self[e4235]) * other.group2().xyx().extend_to_4(other[e41]))
                + (self.group1().zx().extend_to_4(self[scalar], self[e4125]) * other.group2().yzz().extend_to_4(other[e43]))
                + (self.group1().ww().extend_to_4(self[e4315], self[e4315]) * other.group2().xyx().extend_to_4(other[e42]))
                + (self.group3().zx().extend_to_4(self[e45], self[e1234]) * other.group2().yzz().extend_to_4(other[e45]))
                - (other.group1().wwwx() * self.group2().truncate_to_3().extend_to_4(self[e41]))
                - (self.group1().yzxx() * other.group2().zxy().extend_to_4(other[e41]))
                - (other.group2().zxy() * self.group3().yzx()).extend_to_4(other[e42] * self[e31])
                - (other.group1().zxy() * self.group2().yzx()).extend_to_4(other[e43] * self[e12]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e41] * self[e3215]) + (other[e42] * self[e35]) + (other[e23] * self[e45]) + (other[e31] * self[e4125]) + (other[e45] * self[e23]) + (other[e35] * self[e42]),
                (other[e42] * self[e3215]) + (other[e43] * self[e15]) + (other[e31] * self[e45]) + (other[e12] * self[e4235]) + (other[e45] * self[e31]) + (other[e15] * self[e43]),
                (other[e41] * self[e25]) + (other[e43] * self[e3215]) + (other[e23] * self[e4315]) + (other[e12] * self[e45]) + (other[e45] * self[e12]) + (other[e25] * self[e41]),
                -(other[e23] * self[e15])
                    - (other[e31] * self[e25])
                    - (other[e12] * self[e35])
                    - (other[e45] * self[e3215])
                    - (other[e35] * self[e12])
                    - (other[e35] * self[e4125]),
            ]) - (self.group3().yzxy() * other.group1().zxy().extend_to_4(other[e25]))
                - (self.group0().zx().extend_to_4(self[e1234], self[e31]) * other.group2().yzz().extend_to_4(other[e25]))
                - (self.group2().ww().extend_to_4(self[e42], self[e4235]) * other.group2().xyx().extend_to_4(other[e15]))
                - (other.group0().zxy() * self.group2().yzx()).extend_to_4(other[e15] * self[e23]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      128      179        0
    //    simd3        0       19        0
    //    simd4       84       68        0
    // Totals...
    // yes simd      212      266        0
    //  no simd      464      508        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e23] * self[e1234])
                    + (other[e31] * self[e43])
                    + (other[e45] * self[e41])
                    + (other[e1234] * self[e23])
                    + (other[e4235] * self[e1234])
                    + (other[e4315] * self[e43]),
                (other[e31] * self[e1234])
                    + (other[e12] * self[e41])
                    + (other[e45] * self[e42])
                    + (other[e1234] * self[e31])
                    + (other[e4315] * self[e1234])
                    + (other[e4125] * self[e41]),
                (other[e23] * self[e42])
                    + (other[e12] * self[e1234])
                    + (other[e45] * self[e43])
                    + (other[e1234] * self[e12])
                    + (other[e4235] * self[e42])
                    + (other[e4125] * self[e1234]),
                -(other[e15] * self[e41])
                    - (other[e25] * self[e42])
                    - (other[e35] * self[e43])
                    - (other[e4235] * self[e4235])
                    - (other[e4315] * self[e4315])
                    - (other[e4125] * self[e4125]),
            ]) + (Simd32x4::from([self[scalar], self[e4125], self[e31], self[e45]]) * other.group0().xxx().extend_to_4(other[e45]))
                + (Simd32x4::from([self[e12], self[scalar], self[e4235], self[e3215]]) * other.group0().yyy().extend_to_4(other[e1234]))
                + (Simd32x4::from([self[e4315], self[e23], self[scalar], self[e1234]]) * other.group0().zzz().extend_to_4(other[e3215]))
                - (Simd32x4::from(other[e41]) * self.group1().wz().extend_to_4(self[e4315], self[e15]))
                - (Simd32x4::from(other[e42]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(other[e43]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]]))
                - (other.group1().zxyx() * self.group0().yzx().extend_to_4(self[e23]))
                - (other.group2().www() * self.group3().truncate_to_3()).extend_to_4(other[e31] * self[e31])
                - (other.group3().zxy() * self.group0().yzx()).extend_to_4(other[e12] * self[e12]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e15] * self[e1234])
                    + (other[e25] * self[e43])
                    + (other[e1234] * self[e15])
                    + (other[e4235] * self[e45])
                    + (other[e4315] * self[e4125])
                    + (other[e3215] * self[e41]),
                (other[e25] * self[e1234])
                    + (other[e35] * self[e41])
                    + (other[e1234] * self[e25])
                    + (other[e4315] * self[e45])
                    + (other[e4125] * self[e4235])
                    + (other[e3215] * self[e42]),
                (other[e15] * self[e42])
                    + (other[e35] * self[e1234])
                    + (other[e1234] * self[e35])
                    + (other[e4235] * self[e4315])
                    + (other[e4125] * self[e45])
                    + (other[e3215] * self[e43]),
                -(other[e31] * self[e4315])
                    - (other[e12] * self[e4125])
                    - (other[e4235] * self[e23])
                    - (other[e4315] * self[e31])
                    - (other[e4125] * self[e12])
                    - (other[e3215] * self[e1234]),
            ]) + (self.group3() * other.group1().www().extend_to_4(other[e1234]))
                + (self.group0().ww().extend_to_4(self[e31], self[e42]) * other.group1().xyx().extend_to_4(other[e25]))
                + (self.group1().zx().extend_to_4(self[scalar], self[e43]) * other.group1().yzz().extend_to_4(other[e35]))
                + (self.group2().zx().extend_to_4(self[e3215], self[e41]) * other.group0().yzz().extend_to_4(other[e15]))
                + (self.group3().ww().extend_to_4(self[e25], self[scalar]) * other.group0().xyx().extend_to_4(other[e45]))
                - (self.group2().yzxx() * other.group0().zxy().extend_to_4(other[e41]))
                - (self.group3().yzxx() * other.group3().zxy().extend_to_4(other[e23]))
                - (other.group1().zxy() * self.group1().yzx()).extend_to_4(other[e42] * self[e25])
                - (other.group2().zxy() * self.group0().yzx()).extend_to_4(other[e43] * self[e35]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e25] * self[e4125]) + (other[e4125] * self[e25]) + (other[e3215] * self[e23]) + (other[e3215] * self[e4235]),
                (other[e35] * self[e4235]) + (other[e4235] * self[e35]) + (other[e3215] * self[e31]) + (other[e3215] * self[e4315]),
                (other[e35] * self[e45]) + (other[e4315] * self[e15]) + (other[e3215] * self[e12]) + (other[e3215] * self[e4125]),
                -(other[e1234] * self[e45]) - (other[e4235] * self[e41]) - (other[e4315] * self[e42]) - (other[e4125] * self[e43]),
            ]) + (other.group2().yzzw() * self.group1().zx().extend_to_4(self[scalar], self[scalar]))
                + (self.group0().ww().extend_to_4(self[e31], self[e4125]) * other.group2().xyx().extend_to_4(other[e43]))
                + (self.group1().ww().extend_to_4(self[e4315], self[e1234]) * other.group2().xyx().extend_to_4(other[e45]))
                + (self.group2().zx().extend_to_4(self[e3215], self[e4315]) * other.group1().yzz().extend_to_4(other[e42]))
                + (self.group3().ww().extend_to_4(self[e25], self[e4235]) * other.group1().xyx().extend_to_4(other[e41]))
                - (self.group1().yzxz() * other.group2().zxy().extend_to_4(other[e43]))
                - (self.group2().zx().extend_to_4(self[e3215], self[e43]) * other.group3().yzz().extend_to_4(other[e12]))
                - (self.group3().ww().extend_to_4(self[e25], self[e42]) * other.group3().xyx().extend_to_4(other[e31]))
                - (other.group1().zxy() * self.group2().yzx()).extend_to_4(other[e41] * self[e23])
                - (other.group1().www() * self.group2().truncate_to_3()).extend_to_4(other[e42] * self[e31])
                - (other.group2().zxy() * self.group3().yzx()).extend_to_4(other[e23] * self[e41]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e35] * self[e42]) + (other[e1234] * self[e15]) + (other[e4235] * self[scalar]) + (other[e4315] * self[e12]),
                (other[e15] * self[e43]) + (other[e1234] * self[e25]) + (other[e4315] * self[scalar]) + (other[e4125] * self[e23]),
                (other[e25] * self[e41]) + (other[e1234] * self[e35]) + (other[e4235] * self[e31]) + (other[e4125] * self[scalar]),
                -(other[e25] * self[e31]) - (other[e25] * self[e4315]) - (other[e35] * self[e12]) - (other[e35] * self[e4125]),
            ]) + (self.group1() * other.group1().www().extend_to_4(other[e3215]))
                + (self.group1().ww().extend_to_4(self[e4315], self[e35]) * other.group1().xyx().extend_to_4(other[e4125]))
                + (self.group2().zx().extend_to_4(self[e3215], self[e25]) * other.group0().yzz().extend_to_4(other[e4315]))
                + (self.group3().zx().extend_to_4(self[e45], self[scalar]) * other.group1().yzz().extend_to_4(other[e3215]))
                + (self.group3().ww().extend_to_4(self[e25], self[e15]) * other.group0().xyx().extend_to_4(other[e4235]))
                - (other.group1().zxyy() * self.group3().yzx().extend_to_4(self[e25]))
                - (self.group1().yzxx() * other.group3().zxy().extend_to_4(other[e15]))
                - (self.group2().yzxx() * other.group0().zxy().extend_to_4(other[e23]))
                - (self.group0().zx().extend_to_4(self[e1234], self[e3215]) * other.group2().yzz().extend_to_4(other[e45]))
                - (self.group2().ww().extend_to_4(self[e42], self[e35]) * other.group2().xyx().extend_to_4(other[e12]))
                - (other.group3().www() * self.group0().truncate_to_3()).extend_to_4(other[e15] * self[e4235]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       37       67        0
    //    simd3        1       13        0
    //    simd4       54       49        0
    // Totals...
    // yes simd       92      129        0
    //  no simd      256      302        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([self[e41], self[e42], self[e43], 1.0]) * other.group0().yy().extend_to_4(other[e12345], (other[e5] * self[e1234]) + (other[e12345] * self[scalar])),
            // e415, e425, e435, e321
            Simd32x4::from([other[e12345] * self[e23], other[e12345] * self[e31], other[e12345] * self[e12], other[e12345] * self[e45] * -1.0])
                + (Simd32x4::from(other[e5]) * self.group0().truncate_to_3().extend_to_4(self[e1234])),
            // e235, e315, e125, e5
            (Simd32x4::from(other[e5]) * self.group1().truncate_to_3().extend_to_4(self[scalar]))
                + (Simd32x4::from(other[e5]) * self.group3().truncate_to_3().extend_to_4(self[e45]))
                + (Simd32x4::from(other[e12345]) * self.group2().truncate_to_3().extend_to_4(self[e3215])),
            // e1, e2, e3, e4
            ((Simd32x3::from(other[e5]) * self.group0().truncate_to_3()) - (Simd32x3::from(other[e12345]) * self.group3().truncate_to_3()))
                .extend_to_4(other[e12345] * self[e1234]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       74      114        0
    //    simd3        6       18        0
    //    simd4       49       42        0
    // Totals...
    // yes simd      129      174        0
    //  no simd      288      336        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([self[e41], self[e42], self[e43], 1.0])
                * other
                    .group0()
                    .www()
                    .extend_to_4((other[e45] * self[e45]) - (other[e15] * self[e41]) - (other[e25] * self[e42]) - (other[e35] * self[e43])),
            // e23, e31, e12, e45
            Simd32x4::from([other[e35] * self[e42] * -1.0, other[e15] * self[e43] * -1.0, other[e25] * self[e41] * -1.0, other[e45] * self[scalar]])
                + (other.group0().xyxx() * self.group2().ww().extend_to_4(self[e42], self[e41]))
                + (other.group0().yzzy() * self.group0().zx().extend_to_4(self[e1234], self[e42]))
                + (other.group0().wwwz() * self.group3().truncate_to_3().extend_to_4(self[e43])),
            // e15, e25, e35, e1234
            ((Simd32x3::from([self[scalar], self[scalar], self[e31]]) * other.group0().xyx())
                + (Simd32x3::from([self[e12], self[e23], self[scalar]]) * other.group0().yzz())
                + (Simd32x3::from([self[e45], self[e45], self[e4315]]) * other.group0().xyx())
                + (Simd32x3::from([self[e4125], self[e4235], self[e45]]) * other.group0().yzz())
                - (Simd32x3::from(other[e45]) * self.group2().truncate_to_3())
                - (other.group0().zxy() * self.group1().yzx())
                - (other.group0().zxy() * self.group3().yzx()))
            .extend_to_4(other[e45] * self[e1234]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e35] * self[e42]) + (other[e45] * self[e23]),
                (other[e15] * self[e43]) + (other[e45] * self[e31]),
                (other[e25] * self[e41]) + (other[e45] * self[e12]),
                -(other[e25] * self[e31]) - (other[e25] * self[e4315]) - (other[e35] * self[e12]) - (other[e35] * self[e4125]) - (other[e45] * self[e3215]),
            ]) - (other.group0().xyxx() * self.group2().ww().extend_to_4(self[e42], self[e23]))
                - (other.group0().yzzx() * self.group0().zx().extend_to_4(self[e1234], self[e4235])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       96      142        0
    //    simd3        0       18        0
    //    simd4       65       50        0
    // Totals...
    // yes simd      161      210        0
    //  no simd      356      396        0
    fn sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                other[e4315] * self[e43],
                other[e4125] * self[e41],
                other[e4125] * self[e1234],
                -(other[e25] * self[e42]) - (other[e35] * self[e43]) - (other[e4235] * self[e4235]) - (other[e4315] * self[e4315]) - (other[e4125] * self[e4125]),
            ]) + (Simd32x4::from(other[e45]) * self.group0().truncate_to_3().extend_to_4(self[e45]))
                + (other.group1().xyxw() * self.group2().ww().extend_to_4(self[e42], self[e1234]))
                - (self.group0().yzxx() * other.group1().zxy().extend_to_4(other[e15])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e4315] * self[e4125]) + (other[e3215] * self[e41]),
                (other[e4125] * self[e4235]) + (other[e3215] * self[e42]),
                (other[e4125] * self[e45]) + (other[e3215] * self[e43]),
                -(other[e4125] * self[e12]) - (other[e3215] * self[e1234]),
            ]) + (other.group0().xyxx() * self.group2().ww().extend_to_4(self[e42], self[e41]))
                + (other.group0().yzzy() * self.group0().zx().extend_to_4(self[e1234], self[e42]))
                + (other.group0().wwwz() * self.group3().truncate_to_3().extend_to_4(self[e43]))
                + (self.group1().ww().extend_to_4(self[e4315], self[scalar]) * other.group1().xyx().extend_to_4(other[e45]))
                - (other.group1().zxyy() * self.group3().yzx().extend_to_4(self[e31]))
                - (other.group0().zxy() * self.group0().yzx()).extend_to_4(other[e4235] * self[e23]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e15] * self[e45])
                    + (other[e25] * self[e12])
                    + (other[e25] * self[e4125])
                    + (other[e4125] * self[e25])
                    + (other[e3215] * self[e23])
                    + (other[e3215] * self[e4235])
                    - (other[e4235] * self[e3215])
                    - (other[e4315] * self[e35]),
                (other[e25] * self[e45])
                    + (other[e35] * self[e23])
                    + (other[e35] * self[e4235])
                    + (other[e4235] * self[e35])
                    + (other[e3215] * self[e31])
                    + (other[e3215] * self[e4315])
                    - (other[e4315] * self[e3215])
                    - (other[e4125] * self[e15]),
                (other[e15] * self[e4315])
                    + (other[e35] * self[scalar])
                    + (other[e35] * self[e45])
                    + (other[e4315] * self[e15])
                    + (other[e3215] * self[e12])
                    + (other[e3215] * self[e4125])
                    - (other[e4235] * self[e25])
                    - (other[e4125] * self[e3215]),
                0.0,
            ]) + (other.group0().xyxw() * self.group0().ww().extend_to_4(self[e31], self[e1234]))
                - (other.group0().zxy() * self.group1().yzx()).extend_to_4(other[e4235] * self[e41])
                - (other.group0().zxy() * self.group3().yzx()).extend_to_4(other[e4315] * self[e42])
                - (other.group0().www() * self.group2().truncate_to_3()).extend_to_4(other[e4125] * self[e43]),
            // e4235, e4315, e4125, e3215
            (other.group1().xyxz() * self.group0().ww().extend_to_4(self[e31], self[e35]))
                + (other.group1().yzzw() * self.group1().zx().extend_to_4(self[scalar], self[scalar]))
                + Simd32x3::from(0.0).extend_to_4((other[e3215] * self[e45]) - (other[e35] * self[e12]) - (other[e35] * self[e4125]) - (other[e45] * self[e3215]))
                + (other.group0().zxy() * self.group0().yzx()).extend_to_4(other[e4235] * self[e15])
                + (other.group0().www() * self.group1().truncate_to_3()).extend_to_4(other[e4315] * self[e25])
                - (other.group0().xyxx() * self.group2().ww().extend_to_4(self[e42], self[e23]))
                - (other.group0().yzzx() * self.group0().zx().extend_to_4(self[e1234], self[e4235]))
                - (self.group1().yzxy() * other.group1().zxy().extend_to_4(other[e25]))
                - (other.group1().www() * self.group0().truncate_to_3()).extend_to_4(other[e25] * self[e4315]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       69      112        0
    //    simd3        0       15        0
    //    simd4       63       52        0
    // Totals...
    // yes simd      132      179        0
    //  no simd      321      365        0
    fn sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e415] * self[e1234]) + (other[e425] * self[e43]),
                (other[e425] * self[e1234]) + (other[e435] * self[e41]),
                (other[e415] * self[e42]) + (other[e435] * self[e1234]),
                -(other[e425] * self[e31]) - (other[e435] * self[e12]) - (other[e235] * self[e41]) - (other[e315] * self[e42]) - (other[e125] * self[e43]),
            ]) - (other.group0().zxy() * self.group0().yzx()).extend_to_4(other[e415] * self[e23]),
            // e415, e425, e435, e321
            Simd32x4::from([other[e315] * self[e43], other[e125] * self[e41], other[e125] * self[e1234], other[e125] * self[e43] * -1.0])
                + (self.group0().ww().extend_to_4(self[e31], self[e4235]) * other.group0().xyx().extend_to_4(other[e415]))
                + (self.group1().zx().extend_to_4(self[scalar], self[e4315]) * other.group0().yzz().extend_to_4(other[e425]))
                + (self.group2().ww().extend_to_4(self[e42], self[e4125]) * other.group1().xyx().extend_to_4(other[e435]))
                - (self.group0().yzxy() * other.group1().zxy().extend_to_4(other[e315]))
                - (other.group0().zxy() * self.group1().yzx()).extend_to_4(other[e235] * self[e41]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e415] * self[e3215])
                    + (other[e425] * self[e35])
                    + (other[e235] * self[scalar])
                    + (other[e235] * self[e45])
                    + (other[e315] * self[e12])
                    + (other[e315] * self[e4125]),
                (other[e425] * self[e3215])
                    + (other[e435] * self[e15])
                    + (other[e315] * self[scalar])
                    + (other[e315] * self[e45])
                    + (other[e125] * self[e23])
                    + (other[e125] * self[e4235]),
                (other[e415] * self[e25])
                    + (other[e435] * self[e3215])
                    + (other[e235] * self[e31])
                    + (other[e235] * self[e4315])
                    + (other[e125] * self[scalar])
                    + (other[e125] * self[e45]),
                -(other[e235] * self[e23])
                    - (other[e235] * self[e4235])
                    - (other[e315] * self[e31])
                    - (other[e315] * self[e4315])
                    - (other[e125] * self[e12])
                    - (other[e125] * self[e4125]),
            ]) - (self.group2().yzxx() * other.group0().zxy().extend_to_4(other[e415]))
                - (other.group1().zxy() * self.group1().yzx()).extend_to_4(other[e425] * self[e25])
                - (other.group1().zxy() * self.group3().yzx()).extend_to_4(other[e435] * self[e35]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e435] * self[e4315]) + (other[e235] * self[e1234]) + (other[e315] * self[e43]),
                (other[e415] * self[e4125]) + (other[e315] * self[e1234]) + (other[e125] * self[e41]),
                (other[e425] * self[e4235]) + (other[e235] * self[e42]) + (other[e125] * self[e1234]),
                0.0,
            ]) - (self.group0().yzxz() * other.group1().zxy().extend_to_4(other[e435]))
                - (self.group1().ww().extend_to_4(self[e4315], self[e41]) * other.group0().xyx().extend_to_4(other[e415]))
                - (self.group3().zx().extend_to_4(self[e45], self[e42]) * other.group0().yzz().extend_to_4(other[e425])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       73      114        0
    //    simd3        0       14        0
    //    simd4       70       60        0
    // Totals...
    // yes simd      143      188        0
    //  no simd      353      396        0
    fn sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                other[e12345] * self[e41],
                other[e12345] * self[e42],
                other[e12345] * self[e43],
                -(other[e425] * self[e31]) - (other[e435] * self[e12]) - (other[e235] * self[e41]) - (other[e315] * self[e42]) - (other[e125] * self[e43]),
            ]) + (other.group0().xyxw() * self.group2().ww().extend_to_4(self[e42], self[scalar]))
                + (self.group0().zx().extend_to_4(self[e1234], self[e1234]) * other.group0().yzz().extend_to_4(other[e5]))
                - (other.group0().zxyx() * self.group0().yzx().extend_to_4(self[e23])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e315] * self[e43]) + (other[e5] * self[e41]),
                (other[e125] * self[e41]) + (other[e5] * self[e42]),
                (other[e125] * self[e1234]) + (other[e5] * self[e43]),
                -(other[e315] * self[e42]) - (other[e125] * self[e43]),
            ]) + (other.group0().xyxx() * self.group0().ww().extend_to_4(self[e31], self[e4235]))
                + (other.group0().yzzy() * self.group1().zx().extend_to_4(self[scalar], self[e4315]))
                + (other.group0().wwwz() * self.group1().truncate_to_3().extend_to_4(self[e4125]))
                + (other.group1().xyxw() * self.group2().ww().extend_to_4(self[e42], self[e1234]))
                - (other.group0().zxyw() * self.group1().yzxw())
                - (other.group1().zxyx() * self.group0().yzxx()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e235] * self[scalar])
                    + (other[e235] * self[e45])
                    + (other[e315] * self[e12])
                    + (other[e315] * self[e4125])
                    + (other[e5] * self[e23])
                    + (other[e5] * self[e4235]),
                (other[e315] * self[scalar])
                    + (other[e315] * self[e45])
                    + (other[e125] * self[e23])
                    + (other[e125] * self[e4235])
                    + (other[e5] * self[e31])
                    + (other[e5] * self[e4315]),
                (other[e235] * self[e31])
                    + (other[e235] * self[e4315])
                    + (other[e125] * self[scalar])
                    + (other[e125] * self[e45])
                    + (other[e5] * self[e12])
                    + (other[e5] * self[e4125]),
                -(other[e235] * self[e23])
                    - (other[e235] * self[e4235])
                    - (other[e315] * self[e31])
                    - (other[e315] * self[e4315])
                    - (other[e125] * self[e12])
                    - (other[e125] * self[e4125]),
            ]) + (other.group0().xyxw() * self.group3().ww().extend_to_4(self[e25], self[e3215]))
                + (self.group2().zx().extend_to_4(self[e3215], self[scalar]) * other.group0().yzz().extend_to_4(other[e5]))
                + (other.group0().www() * self.group2().truncate_to_3()).extend_to_4(other[e5] * self[e45])
                - (other.group0().zxyx() * self.group2().yzxx())
                - (other.group1().zxy() * self.group1().yzx()).extend_to_4(other[e425] * self[e25])
                - (other.group1().zxy() * self.group3().yzx()).extend_to_4(other[e435] * self[e35]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e235] * self[e1234]) + (other[e315] * self[e43]) + (other[e5] * self[e41]) - (other[e125] * self[e42]),
                (other[e315] * self[e1234]) + (other[e125] * self[e41]) + (other[e5] * self[e42]) - (other[e235] * self[e43]),
                (other[e235] * self[e42]) + (other[e125] * self[e1234]) + (other[e5] * self[e43]) - (other[e315] * self[e41]),
                0.0,
            ]) + (other.group0().zxyw() * self.group3().yzx().extend_to_4(self[e1234]))
                - (other.group0().xyxx() * self.group1().ww().extend_to_4(self[e4315], self[e41]))
                - (other.group0().yzzy() * self.group3().zx().extend_to_4(self[e45], self[e42]))
                - (other.group0().wwwz() * self.group3().truncate_to_3().extend_to_4(self[e43])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for VersorOdd {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      140      202        0
    //    simd2       24       24        0
    //    simd3      120      154        0
    //    simd4      103       81        0
    // Totals...
    // yes simd      387      461        0
    //  no simd      960     1036        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (other[e45] * self[e45]) - (other[e4235] * self[e4235]) - (other[e4315] * self[e4315]) - (other[e4125] * self[e4125]),
                (other[e2] * self[e4315]) + (other[e3] * self[e4125]) + (other[e4] * self[e3215]) - (other[e321] * self[e45]),
            ]) + (Simd32x2::from(self[scalar]) * other.group0())
                + (Simd32x2::from(self[e1234]) * Simd32x2::from([other[e3215], other[e5]]))
                + (Simd32x2::from([other[e1234], other[e1]]) * self.group3().wx())
                - (Simd32x2::from(self[e41]) * Simd32x2::from([other[e15], other[e235]]))
                - (Simd32x2::from(self[e42]) * Simd32x2::from([other[e25], other[e315]]))
                - (Simd32x2::from(self[e43]) * Simd32x2::from([other[e35], other[e125]]))
                - (Simd32x2::from(self[e23]) * Simd32x2::from([other[e23], other[e415]]))
                - (Simd32x2::from(self[e31]) * Simd32x2::from([other[e31], other[e425]]))
                - (Simd32x2::from(self[e12]) * Simd32x2::from([other[e12], other[e435]]))
                - (Simd32x2::from(self[e15]) * Simd32x2::from([other[e41], other[e423]]))
                - (Simd32x2::from(self[e25]) * Simd32x2::from([other[e42], other[e431]]))
                - (Simd32x2::from(self[e35]) * Simd32x2::from([other[e43], other[e412]])),
            // e1, e2, e3, e4
            (Simd32x4::from([other[e5], other[e5], other[e5], self[scalar]]) * self.group0().truncate_to_3().extend_to_4(other[e4]))
                + (other.group1().yzzx() * self.group1().zx().extend_to_4(self[scalar], self[e41]))
                + (self.group2().yzxw() * other.group7().zxy().extend_to_4(other[e12345]))
                + (self.group0().zx().extend_to_4(self[e1234], self[e4315]) * other.group8().yzz().extend_to_4(other[e431]))
                + (self.group0().ww().extend_to_4(self[e31], self[e4125]) * other.group1().xyx().extend_to_4(other[e412]))
                + (self.group2().ww().extend_to_4(self[e42], self[e4235]) * other.group8().xyx().extend_to_4(other[e423]))
                + (other.group6().zxy() * self.group3().yzx()).extend_to_4(other[e2] * self[e42])
                + (other.group6().www() * self.group1().truncate_to_3()).extend_to_4(other[e3] * self[e43])
                - (other.group6().xyxz() * self.group1().ww().extend_to_4(self[e4315], self[e43]))
                - (other.group6().yzzw() * self.group3().zx().extend_to_4(self[e45], self[e1234]))
                - (other.group0().yy().extend_to_4(other[e12345], other[e423]) * self.group3().truncate_to_3().extend_to_4(self[e23]))
                - (self.group2().zx().extend_to_4(self[e3215], self[e12]) * other.group7().yzz().extend_to_4(other[e412]))
                - (self.group3().ww().extend_to_4(self[e25], self[e31]) * other.group7().xyx().extend_to_4(other[e431]))
                - (other.group8().zxy() * self.group0().yzx()).extend_to_4(other[e4] * self[e45])
                - (other.group1().zxy() * self.group1().yzx()).extend_to_4(other[e415] * self[e41])
                - (other.group1().www() * self.group2().truncate_to_3()).extend_to_4(other[e425] * self[e42]),
            // e5
            (other[e12345] * self[e3215]) + (other[e5] * self[scalar]) + (other[e5] * self[e45]) + (other[e321] * self[e3215])
                - (other[e1] * self[e15])
                - (other[e2] * self[e25])
                - (other[e3] * self[e35])
                - (other[e415] * self[e15])
                - (other[e425] * self[e25])
                - (other[e435] * self[e35])
                - (other[e235] * self[e23])
                - (other[e235] * self[e4235])
                - (other[e315] * self[e31])
                - (other[e315] * self[e4315])
                - (other[e125] * self[e12])
                - (other[e125] * self[e4125]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e25] * self[e4125]) + (other[e4125] * self[e25]) + (other[e3215] * self[e23]) + (other[e3215] * self[e4235]),
                (other[e35] * self[e4235]) + (other[e4235] * self[e35]) + (other[e3215] * self[e31]) + (other[e3215] * self[e4315]),
                (other[e35] * self[e45]) + (other[e4315] * self[e15]) + (other[e3215] * self[e12]) + (other[e3215] * self[e4125]),
                -(other[e4235] * self[e23]) - (other[e4315] * self[e31]) - (other[e4125] * self[e12]) - (other[e3215] * self[e1234]),
            ]) + (Simd32x4::from(other[scalar]) * self.group2().truncate_to_3().extend_to_4(self[e45]))
                + (other.group3().xyxz() * self.group0().ww().extend_to_4(self[e31], self[e43]))
                + (other.group3().xyxw() * self.group1().ww().extend_to_4(self[e4315], self[scalar]))
                + (self.group1().zx().extend_to_4(self[scalar], other[e1234]) * other.group3().yzz().extend_to_4(self[e3215]))
                + (self.group2().zx().extend_to_4(self[e3215], self[e42]) * other.group5().yzz().extend_to_4(other[e25]))
                + (self.group3().ww().extend_to_4(self[e25], self[e41]) * other.group5().xyx().extend_to_4(other[e15]))
                - (self.group2().yzxx() * other.group5().zxy().extend_to_4(other[e41]))
                - (self.group2().zx().extend_to_4(self[e3215], self[e4125]) * other.group9().yzz().extend_to_4(other[e12]))
                - (self.group3().ww().extend_to_4(self[e25], self[e4315]) * other.group9().xyx().extend_to_4(other[e31]))
                - (other.group3().zxy() * self.group1().yzx()).extend_to_4(other[e42] * self[e25])
                - (other.group3().zxy() * self.group3().yzx()).extend_to_4(other[e43] * self[e35])
                - (other.group3().www() * self.group2().truncate_to_3()).extend_to_4(other[e23] * self[e4235]),
            // e41, e42, e43
            (Simd32x3::from(other[scalar]) * self.group0().truncate_to_3())
                + (Simd32x3::from(other[e45]) * self.group0().truncate_to_3())
                + (Simd32x3::from(other[e41]) * Simd32x3::from([self[scalar], self[e4125], self[e31]]))
                + (Simd32x3::from(other[e42]) * Simd32x3::from([self[e12], self[scalar], self[e4235]]))
                + (Simd32x3::from(other[e43]) * Simd32x3::from([self[e4315], self[e23], self[scalar]]))
                + (Simd32x3::from(other[e1234]) * self.group1().truncate_to_3())
                + (Simd32x3::from([self[e43], self[e41], self[e1234]]) * other.group5().yzz())
                + (Simd32x3::from([self[e43], self[e41], self[e1234]]) * other.group9().yzz())
                + (Simd32x3::from([self[e1234], self[e1234], self[e42]]) * other.group5().xyx())
                + (Simd32x3::from([self[e1234], self[e1234], self[e42]]) * other.group9().xyx())
                - (Simd32x3::from(other[e41]) * Simd32x3::from([self[e45], self[e12], self[e4315]]))
                - (Simd32x3::from(other[e42]) * Simd32x3::from([self[e4125], self[e45], self[e23]]))
                - (Simd32x3::from(other[e43]) * Simd32x3::from([self[e31], self[e4235], self[e45]]))
                - (Simd32x3::from(other[e1234]) * self.group3().truncate_to_3())
                - (other.group5().zxy() * self.group0().yzx())
                - (other.group9().zxy() * self.group0().yzx()),
            // e23, e31, e12
            (Simd32x3::from(other[scalar]) * self.group1().truncate_to_3())
                + (Simd32x3::from(other[e45]) * self.group3().truncate_to_3())
                + (Simd32x3::from(other[e3215]) * self.group0().truncate_to_3())
                + (Simd32x3::from(other[e1234]) * self.group2().truncate_to_3())
                + (Simd32x3::from([self[e43], self[e41], self[e1234]]) * other.group3().yzz())
                + (Simd32x3::from([self[scalar], self[scalar], self[e31]]) * other.group5().xyx())
                + (Simd32x3::from([self[e12], self[e23], self[scalar]]) * other.group5().yzz())
                + (Simd32x3::from([self[e45], self[e45], self[e4315]]) * other.group9().xyx())
                + (Simd32x3::from([self[e35], self[e15], self[e3215]]) * other.group4().yzz())
                + (Simd32x3::from([self[e1234], self[e1234], self[e42]]) * other.group3().xyx())
                + (Simd32x3::from([self[e4125], self[e4235], self[e45]]) * other.group9().yzz())
                + (Simd32x3::from([self[e3215], self[e3215], self[e25]]) * other.group4().xyx())
                - (other.group4().zxy() * self.group2().yzx())
                - (other.group5().zxy() * self.group1().yzx())
                - (other.group3().zxy() * self.group0().yzx())
                - (other.group9().zxy() * self.group3().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e5] * self[e41]) + (other[e425] * self[e12]),
                (other[e5] * self[e42]) + (other[e435] * self[e23]),
                (other[e5] * self[e43]) + (other[e435] * self[scalar]),
                -(other[e3] * self[e12]) - (other[e4] * self[e3215]),
            ]) + (self.group3().yzxz() * other.group1().zxy().extend_to_4(other[e435]))
                + (other.group0().yy().extend_to_4(other[e12345], other[e423]) * self.group1().truncate_to_3().extend_to_4(self[e15]))
                + (self.group0().zx().extend_to_4(self[e1234], self[e4315]) * other.group8().yzz().extend_to_4(other[e425]))
                + (self.group0().ww().extend_to_4(self[e31], other[e5]) * other.group6().xyx().extend_to_4(self[e1234]))
                + (self.group2().zx().extend_to_4(self[e3215], self[e35]) * other.group7().yzz().extend_to_4(other[e412]))
                + (self.group2().ww().extend_to_4(self[e42], self[e4235]) * other.group8().xyx().extend_to_4(other[e415]))
                + (self.group3().ww().extend_to_4(self[e25], self[e25]) * other.group7().xyx().extend_to_4(other[e431]))
                + (other.group1().www() * self.group2().truncate_to_3()).extend_to_4(other[e321] * self[scalar])
                - (self.group0().yzxx() * other.group8().zxy().extend_to_4(other[e235]))
                - (self.group1().yzxx() * other.group6().zxy().extend_to_4(other[e1]))
                - (self.group1().ww().extend_to_4(self[e4315], self[e42]) * other.group1().xyx().extend_to_4(other[e315]))
                - (self.group3().zx().extend_to_4(self[e45], self[e43]) * other.group1().yzz().extend_to_4(other[e125]))
                - (other.group7().zxy() * self.group2().yzx()).extend_to_4(other[e12345] * self[e45])
                - (other.group6().www() * self.group3().truncate_to_3()).extend_to_4(other[e2] * self[e31]),
            // e423, e431, e412
            (Simd32x3::from(other[e12345]) * self.group0().truncate_to_3())
                + (Simd32x3::from(other[e4]) * self.group1().truncate_to_3())
                + (Simd32x3::from(other[e423]) * Simd32x3::from([self[scalar], self[e4125], self[e31]]))
                + (Simd32x3::from(other[e431]) * Simd32x3::from([self[e12], self[scalar], self[e4235]]))
                + (Simd32x3::from(other[e412]) * Simd32x3::from([self[e4315], self[e23], self[scalar]]))
                + (Simd32x3::from([self[e43], self[e41], self[e1234]]) * other.group6().yzz())
                + (Simd32x3::from([self[e1234], self[e1234], self[e42]]) * other.group6().xyx())
                + (other.group1().zxy() * self.group0().yzx())
                - (Simd32x3::from(other[e4]) * self.group3().truncate_to_3())
                - (Simd32x3::from(other[e321]) * self.group0().truncate_to_3())
                - (Simd32x3::from(other[e423]) * Simd32x3::from([self[e45], self[e12], self[e4315]]))
                - (Simd32x3::from(other[e431]) * Simd32x3::from([self[e4125], self[e45], self[e23]]))
                - (Simd32x3::from(other[e412]) * Simd32x3::from([self[e31], self[e4235], self[e45]]))
                - (Simd32x3::from([self[e43], self[e41], self[e1234]]) * other.group1().yzz())
                - (Simd32x3::from([self[e1234], self[e1234], self[e42]]) * other.group1().xyx())
                - (other.group6().zxy() * self.group0().yzx()),
            // e235, e315, e125
            (Simd32x3::from(other[e12345]) * self.group2().truncate_to_3())
                + (Simd32x3::from(other[e5]) * self.group1().truncate_to_3())
                + (Simd32x3::from(other[e5]) * self.group3().truncate_to_3())
                + (Simd32x3::from(other[e321]) * self.group2().truncate_to_3())
                + (Simd32x3::from([self[scalar], self[scalar], self[e31]]) * other.group8().xyx())
                + (Simd32x3::from([self[e12], self[e23], self[scalar]]) * other.group8().yzz())
                + (Simd32x3::from([self[e45], self[e45], self[e4315]]) * other.group8().xyx())
                + (Simd32x3::from([self[e35], self[e15], self[e3215]]) * other.group1().yzz())
                + (Simd32x3::from([self[e35], self[e15], self[e3215]]) * other.group6().yzz())
                + (Simd32x3::from([self[e4125], self[e4235], self[e45]]) * other.group8().yzz())
                + (Simd32x3::from([self[e3215], self[e3215], self[e25]]) * other.group1().xyx())
                + (Simd32x3::from([self[e3215], self[e3215], self[e25]]) * other.group6().xyx())
                - (other.group8().zxy() * self.group1().yzx())
                - (other.group8().zxy() * self.group3().yzx())
                - (other.group1().zxy() * self.group2().yzx())
                - (other.group6().zxy() * self.group2().yzx()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e45] * self[e23]) + (other[e4235] * self[scalar]) + (other[e4315] * self[e12]) + (other[e1234] * self[e15]),
                (other[e45] * self[e31]) + (other[e4315] * self[scalar]) + (other[e4125] * self[e23]) + (other[e1234] * self[e25]),
                (other[e45] * self[e12]) + (other[e4235] * self[e31]) + (other[e4125] * self[scalar]) + (other[e1234] * self[e35]),
                -(other[e25] * self[e4315]) - (other[e35] * self[e12]) - (other[e35] * self[e4125]) - (other[e45] * self[e3215]),
            ]) + (Simd32x4::from(other[scalar]) * self.group3())
                + (self.group1().ww().extend_to_4(self[e4315], self[e35]) * other.group5().xyx().extend_to_4(other[e4125]))
                + (self.group2().zx().extend_to_4(self[e3215], self[e25]) * other.group4().yzz().extend_to_4(other[e4315]))
                + (self.group3().zx().extend_to_4(self[e45], self[scalar]) * other.group5().yzz().extend_to_4(other[e3215]))
                + (self.group3().ww().extend_to_4(self[e25], self[e15]) * other.group4().xyx().extend_to_4(other[e4235]))
                + (other.group3().zxy() * self.group0().yzx()).extend_to_4(other[e3215] * self[e45])
                - (other.group3().yzzx() * self.group0().zx().extend_to_4(self[e1234], self[e23]))
                - (self.group2().yzxx() * other.group4().zxy().extend_to_4(other[e23]))
                - (self.group2().ww().extend_to_4(self[e42], self[e35]) * other.group3().xyx().extend_to_4(other[e12]))
                - (other.group5().zxy() * self.group3().yzx()).extend_to_4(other[e31] * self[e25])
                - (other.group9().zxy() * self.group1().yzx()).extend_to_4(other[e15] * self[e4235])
                - (other.group9().www() * self.group0().truncate_to_3()).extend_to_4(other[e25] * self[e31]),
            // e1234
            (other[scalar] * self[e1234])
                + (other[e45] * self[e1234])
                + (other[e41] * self[e4235])
                + (other[e42] * self[e4315])
                + (other[e43] * self[e4125])
                + (other[e1234] * self[scalar])
                - (other[e41] * self[e23])
                - (other[e42] * self[e31])
                - (other[e43] * self[e12])
                - (other[e23] * self[e41])
                - (other[e31] * self[e42])
                - (other[e12] * self[e43])
                - (other[e4235] * self[e41])
                - (other[e4315] * self[e42])
                - (other[e4125] * self[e43])
                - (other[e1234] * self[e45]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       84      128        0
    //    simd3        0       11        0
    //    simd4       51       43        0
    // Totals...
    // yes simd      135      182        0
    //  no simd      288      333        0
    fn sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                other[e4315] * self[e43],
                other[e4125] * self[e41],
                other[e4125] * self[e1234],
                -(other[e4315] * self[e4315]) - (other[e4125] * self[e4125]),
            ]) + (other.group0().xyxw() * self.group2().ww().extend_to_4(self[e42], self[e1234]))
                - (other.group0().zxyx() * self.group0().yzx().extend_to_4(self[e4235])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e4235] * self[e45]) + (other[e4315] * self[e4125]) + (other[e3215] * self[e41]),
                (other[e4315] * self[e45]) + (other[e4125] * self[e4235]) + (other[e3215] * self[e42]),
                (other[e4235] * self[e4315]) + (other[e4125] * self[e45]) + (other[e3215] * self[e43]),
                -(other[e4315] * self[e31]) - (other[e4125] * self[e12]) - (other[e3215] * self[e1234]),
            ]) - (other.group0().zxyx() * self.group3().yzx().extend_to_4(self[e23])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e4125] * self[e25]) + (other[e3215] * self[e23]) + (other[e3215] * self[e4235]),
                (other[e4235] * self[e35]) + (other[e3215] * self[e31]) + (other[e3215] * self[e4315]),
                (other[e4315] * self[e15]) + (other[e3215] * self[e12]) + (other[e3215] * self[e4125]),
                other[e4125] * self[e43] * -1.0,
            ]) - (other.group0().xyxx() * self.group3().ww().extend_to_4(self[e25], self[e41]))
                - (other.group0().yzzy() * self.group2().zx().extend_to_4(self[e3215], self[e42])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(other[e4125] * self[e31]) - (other[e3215] * self[e41]),
                -(other[e4235] * self[e12]) - (other[e3215] * self[e42]),
                -(other[e4315] * self[e23]) - (other[e3215] * self[e43]),
                (other[e4125] * self[e35]) + (other[e3215] * self[scalar]) + (other[e3215] * self[e45]),
            ]) + (other.group0().xyxx() * self.group0().ww().extend_to_4(self[e31], self[e15]))
                + (other.group0().yzzy() * self.group1().zx().extend_to_4(self[scalar], self[e25])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       52       95        0
    //    simd3        0       12        0
    //    simd4       63       55        0
    // Totals...
    // yes simd      115      162        0
    //  no simd      304      351        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                -(other[e1] * self[e1234]) - (other[e2] * self[e43]) - (other[e4] * self[e4235]),
                -(other[e2] * self[e1234]) - (other[e3] * self[e41]) - (other[e4] * self[e4315]),
                -(other[e1] * self[e42]) - (other[e3] * self[e1234]) - (other[e4] * self[e4125]),
                (other[e3] * self[e4125]) + (other[e4] * self[e3215]) + (other[e5] * self[e1234]),
            ]) + (other.group0().zxyx() * self.group0().yzx().extend_to_4(self[e4235]))
                + (other.group0().wwwy() * self.group1().truncate_to_3().extend_to_4(self[e4315])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e4] * self[e15]) + (other[e5] * self[e41]),
                (other[e4] * self[e25]) + (other[e5] * self[e42]),
                (other[e4] * self[e35]) + (other[e5] * self[e43]),
                -(other[e3] * self[e12]) - (other[e4] * self[e3215]),
            ]) + (other.group0().zxy() * self.group3().yzx()).extend_to_4(other[e5] * self[e1234])
                - (other.group0().xyxx() * self.group1().ww().extend_to_4(self[e4315], self[e23]))
                - (other.group0().yzzy() * self.group3().zx().extend_to_4(self[e45], self[e31])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e5] * self[e23]) + (other[e5] * self[e4235]),
                (other[e5] * self[e31]) + (other[e5] * self[e4315]),
                (other[e5] * self[e12]) + (other[e5] * self[e4125]),
                -(other[e2] * self[e25]) - (other[e3] * self[e35]),
            ]) + (self.group2().zx().extend_to_4(self[e3215], other[e5]) * other.group0().yzz().extend_to_4(self[e45]))
                + (self.group3().ww().extend_to_4(self[e25], other[e5]) * other.group0().xyx().extend_to_4(self[scalar]))
                - (other.group0().zxyx() * self.group2().yzxx()),
            // e1, e2, e3, e4
            Simd32x4::from([other[e4] * self[e15] * -1.0, other[e4] * self[e25] * -1.0, other[e4] * self[e35] * -1.0, other[e4] * self[scalar]])
                + (Simd32x4::from([other[e5], other[e5], other[e5], self[e43]]) * self.group0().truncate_to_3().extend_to_4(other[e3]))
                + (other.group0().xyxx() * self.group0().ww().extend_to_4(self[e31], self[e41]))
                + (other.group0().yzzy() * self.group1().zx().extend_to_4(self[scalar], self[e42]))
                - (other.group0().zxyw() * self.group1().yzxw()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64       91        0
    //    simd3        0       11        0
    //    simd4       44       40        0
    // Totals...
    // yes simd      108      142        0
    //  no simd      240      284        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(other[scalar]) * self.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other[scalar]) * self.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(other[scalar]) * self.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[scalar]) * self.group3(),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       80      125        0
    //    simd3        0       12        0
    //    simd4       56       47        0
    // Totals...
    // yes simd      136      184        0
    //  no simd      304      349        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([other[e1234] * self[e23], other[e1234] * self[e31], other[e1234] * self[e12], other[e4125] * self[e4125] * -1.0])
                + (other.group0().xyxw() * self.group2().ww().extend_to_4(self[e42], self[e1234]))
                + (self.group0().zx().extend_to_4(self[e1234], other[e1234]) * other.group0().yzz().extend_to_4(self[e3215]))
                - (Simd32x4::from([other[e1234], other[e1234], other[e1234], self[e4315]]) * self.group3().truncate_to_3().extend_to_4(other[e4315]))
                - (other.group0().zxyx() * self.group0().yzx().extend_to_4(self[e4235])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e4315] * self[e4125]) + (other[e3215] * self[e41]) + (other[e1234] * self[e15]),
                (other[e4125] * self[e4235]) + (other[e3215] * self[e42]) + (other[e1234] * self[e25]),
                (other[e4125] * self[e45]) + (other[e3215] * self[e43]) + (other[e1234] * self[e35]),
                -(other[e4315] * self[e31]) - (other[e4125] * self[e12]) - (other[e3215] * self[e1234]),
            ]) + (self.group1().ww().extend_to_4(self[e4315], other[e1234]) * other.group0().xyx().extend_to_4(self[e3215]))
                - (other.group0().zxyx() * self.group3().yzx().extend_to_4(self[e23])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e3215] * self[e23]) + (other[e3215] * self[e4235]),
                (other[e3215] * self[e31]) + (other[e3215] * self[e4315]),
                (other[e3215] * self[e12]) + (other[e3215] * self[e4125]),
                -(other[e4125] * self[e43]) - (other[e1234] * self[e45]),
            ]) + (other.group0().zxy() * self.group2().yzx()).extend_to_4(other[e1234] * self[scalar])
                - (other.group0().xyxx() * self.group3().ww().extend_to_4(self[e25], self[e41]))
                - (other.group0().yzzy() * self.group2().zx().extend_to_4(self[e3215], self[e42])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(other[e4125] * self[e31]) - (other[e3215] * self[e41]),
                -(other[e4235] * self[e12]) - (other[e3215] * self[e42]),
                -(other[e4315] * self[e23]) - (other[e3215] * self[e43]),
                (other[e3215] * self[scalar]) + (other[e3215] * self[e45]),
            ]) + (Simd32x4::from([other[e1234], other[e1234], other[e1234], self[e35]]) * self.group2().truncate_to_3().extend_to_4(other[e4125]))
                + (other.group0().xyxx() * self.group0().ww().extend_to_4(self[e31], self[e15]))
                + (other.group0().yzzy() * self.group1().zx().extend_to_4(self[scalar], self[e25])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       72      117        0
    //    simd3        0       21        0
    //    simd4      102       86        0
    // Totals...
    // yes simd      174      224        0
    //  no simd      480      524        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e3] * self[e42]) + (other[e4] * self[e23]),
                (other[e1] * self[e43]) + (other[e4] * self[e31]),
                (other[e2] * self[e41]) + (other[e4] * self[e12]),
                -(other[e315] * self[e42]) - (other[e125] * self[e43]),
            ]) + (Simd32x4::from([self[scalar], self[e4125], self[e31], self[scalar]]) * other.group0().xxxw())
                + (Simd32x4::from([self[e12], self[scalar], self[e4235], self[e1234]]) * other.group0().yyy().extend_to_4(other[e5]))
                + (Simd32x4::from([self[e4315], self[e23], self[scalar], self[e4235]]) * other.group0().zzz().extend_to_4(other[e1]))
                + (self.group0().zx().extend_to_4(self[e1234], self[e3215]) * other.group1().yzz().extend_to_4(other[e4]))
                + (self.group2().ww().extend_to_4(self[e42], self[e4125]) * other.group1().xyx().extend_to_4(other[e3]))
                + (other.group0().www() * self.group0().truncate_to_3()).extend_to_4(other[e2] * self[e4315])
                - (Simd32x4::from(other[e423]) * self.group1().wz().extend_to_4(self[e4315], self[e15]))
                - (Simd32x4::from(other[e431]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(other[e412]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]]))
                - (other.group1().zxyx() * self.group0().yzx().extend_to_4(self[e23]))
                - (other.group1().wwwy() * self.group0().truncate_to_3().extend_to_4(self[e31]))
                - (self.group0().zx().extend_to_4(self[e1234], self[e45]) * other.group3().yzz().extend_to_4(other[e321]))
                - (self.group2().ww().extend_to_4(self[e42], self[e12]) * other.group3().xyx().extend_to_4(other[e435]))
                - (other.group3().www() * self.group3().truncate_to_3()).extend_to_4(other[e235] * self[e41]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e3] * self[e4315]) + (other[e4] * self[e15]),
                (other[e1] * self[e4125]) + (other[e4] * self[e25]),
                (other[e2] * self[e4235]) + (other[e4] * self[e35]),
                -(other[e3] * self[e12]) - (other[e4] * self[e3215]),
            ]) + (Simd32x4::from(other[e5]) * self.group0().truncate_to_3().extend_to_4(self[e1234]))
                + (other.group0().xyxx() * self.group3().ww().extend_to_4(self[e25], self[e15]))
                + (other.group0().yzzy() * self.group2().zx().extend_to_4(self[e3215], self[e25]))
                + (other.group0().wwwz() * self.group1().truncate_to_3().extend_to_4(self[e35]))
                + (other.group1().xyxx() * self.group0().ww().extend_to_4(self[e31], self[e4235]))
                + (other.group1().yzzy() * self.group1().zx().extend_to_4(self[scalar], self[e4315]))
                + (self.group0().zx().extend_to_4(self[e1234], self[scalar]) * other.group2().yzz().extend_to_4(other[e321]))
                + (self.group2().ww().extend_to_4(self[e42], self[e4125]) * other.group2().xyx().extend_to_4(other[e435]))
                - (other.group0().zxyw() * self.group2().yzx().extend_to_4(self[e45]))
                - (other.group2().zxyz() * self.group0().yzxz())
                - (other.group3().xyxx() * self.group1().ww().extend_to_4(self[e4315], self[e23]))
                - (other.group3().yzzy() * self.group3().zx().extend_to_4(self[e45], self[e31]))
                - (other.group1().zxy() * self.group1().yzx()).extend_to_4(other[e235] * self[e41])
                - (other.group1().www() * self.group3().truncate_to_3()).extend_to_4(other[e315] * self[e42]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e235] * self[scalar])
                    + (other[e235] * self[e45])
                    + (other[e315] * self[e12])
                    + (other[e315] * self[e4125])
                    + (other[e5] * self[e23])
                    + (other[e5] * self[e4235])
                    + (other[e1] * self[e3215])
                    + (other[e2] * self[e35]),
                (other[e315] * self[scalar])
                    + (other[e315] * self[e45])
                    + (other[e125] * self[e23])
                    + (other[e125] * self[e4235])
                    + (other[e5] * self[e31])
                    + (other[e5] * self[e4315])
                    + (other[e2] * self[e3215])
                    + (other[e3] * self[e15]),
                (other[e235] * self[e31])
                    + (other[e235] * self[e4315])
                    + (other[e125] * self[scalar])
                    + (other[e125] * self[e45])
                    + (other[e5] * self[e12])
                    + (other[e5] * self[e4125])
                    + (other[e1] * self[e25])
                    + (other[e3] * self[e3215]),
                -(other[e235] * self[e4235])
                    - (other[e315] * self[e31])
                    - (other[e315] * self[e4315])
                    - (other[e125] * self[e12])
                    - (other[e125] * self[e4125])
                    - (other[e1] * self[e15])
                    - (other[e2] * self[e25])
                    - (other[e3] * self[e35]),
            ]) + (Simd32x4::from(other[e12345]) * self.group2().truncate_to_3().extend_to_4(self[e3215]))
                + (other.group1().xyxw() * self.group3().ww().extend_to_4(self[e25], self[e3215]))
                + (self.group2().zx().extend_to_4(self[e3215], self[scalar]) * other.group1().yzz().extend_to_4(other[e5]))
                + (other.group1().www() * self.group2().truncate_to_3()).extend_to_4(other[e5] * self[e45])
                - (other.group1().zxyx() * self.group2().yzxx())
                - (other.group2().zxy() * self.group1().yzx()).extend_to_4(other[e425] * self[e25])
                - (other.group2().zxy() * self.group3().yzx()).extend_to_4(other[e435] * self[e35])
                - (other.group3().zxy() * self.group2().yzx()).extend_to_4(other[e235] * self[e23]),
            // e1, e2, e3, e4
            (other.group0().zxyx() * self.group2().yzx().extend_to_4(self[e4235]))
                + (other.group3().xyxz() * self.group0().ww().extend_to_4(self[e31], self[e43]))
                + (other.group3().yzzw() * self.group1().zx().extend_to_4(self[scalar], self[scalar]))
                + (self.group0().xyzy() * other.group2().www().extend_to_4(other[e2]))
                + (self.group3().yzxy() * other.group1().zxy().extend_to_4(other[e431]))
                + (self.group0().zx().extend_to_4(self[e1234], self[e41]) * other.group2().yzz().extend_to_4(other[e1]))
                + (self.group2().ww().extend_to_4(self[e42], self[e1234]) * other.group2().xyx().extend_to_4(other[e12345]))
                + (other.group1().www() * self.group1().truncate_to_3()).extend_to_4(other[e412] * self[e4125])
                - (Simd32x4::from(other[e4]) * self.group2().truncate_to_3().extend_to_4(self[e45]))
                - (other.group0().xyxx() * self.group3().ww().extend_to_4(self[e25], self[e23]))
                - (other.group0().yzzy() * self.group2().zx().extend_to_4(self[e3215], self[e31]))
                - (other.group0().wwwz() * self.group3().truncate_to_3().extend_to_4(self[e12]))
                - (other.group1().xyxx() * self.group1().ww().extend_to_4(self[e4315], self[e41]))
                - (other.group1().yzzy() * self.group3().zx().extend_to_4(self[e45], self[e42]))
                - (self.group0().yzxz() * other.group2().zxy().extend_to_4(other[e435]))
                - (other.group3().zxy() * self.group1().yzx()).extend_to_4(other[e321] * self[e1234]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      128      182        0
    //    simd3        0       22        0
    //    simd4       88       69        0
    // Totals...
    // yes simd      216      273        0
    //  no simd      480      524        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e23] * self[e1234])
                    + (other[e31] * self[e43])
                    + (other[e45] * self[e41])
                    + (other[e1234] * self[e23])
                    + (other[e4235] * self[e1234])
                    + (other[e4315] * self[e43]),
                (other[e31] * self[e1234])
                    + (other[e12] * self[e41])
                    + (other[e45] * self[e42])
                    + (other[e1234] * self[e31])
                    + (other[e4315] * self[e1234])
                    + (other[e4125] * self[e41]),
                (other[e23] * self[e42])
                    + (other[e12] * self[e1234])
                    + (other[e45] * self[e43])
                    + (other[e1234] * self[e12])
                    + (other[e4235] * self[e42])
                    + (other[e4125] * self[e1234]),
                -(other[e15] * self[e41])
                    - (other[e25] * self[e42])
                    - (other[e35] * self[e43])
                    - (other[e4235] * self[e4235])
                    - (other[e4315] * self[e4315])
                    - (other[e4125] * self[e4125]),
            ]) + (Simd32x4::from([self[scalar], self[e4125], self[e31], self[scalar]]) * other.group0().xxxw())
                + (Simd32x4::from([self[e12], self[scalar], self[e4235], self[e45]]) * other.group0().yyy().extend_to_4(other[e45]))
                + (Simd32x4::from([self[e4315], self[e23], self[scalar], self[e3215]]) * other.group0().zzz().extend_to_4(other[e1234]))
                + (other.group0().www() * self.group0().truncate_to_3()).extend_to_4(other[e3215] * self[e1234])
                - (Simd32x4::from(other[e41]) * self.group1().wz().extend_to_4(self[e4315], self[e15]))
                - (Simd32x4::from(other[e42]) * Simd32x4::from([self[e4125], self[e45], self[e23], self[e25]]))
                - (Simd32x4::from(other[e43]) * Simd32x4::from([self[e31], self[e4235], self[e45], self[e35]]))
                - (other.group1().zxyx() * self.group0().yzx().extend_to_4(self[e23]))
                - (other.group2().www() * self.group3().truncate_to_3()).extend_to_4(other[e31] * self[e31])
                - (other.group3().zxy() * self.group0().yzx()).extend_to_4(other[e12] * self[e12]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e15] * self[e1234])
                    + (other[e25] * self[e43])
                    + (other[e1234] * self[e15])
                    + (other[e4235] * self[e45])
                    + (other[e4315] * self[e4125])
                    + (other[e3215] * self[e41]),
                (other[e25] * self[e1234])
                    + (other[e35] * self[e41])
                    + (other[e1234] * self[e25])
                    + (other[e4315] * self[e45])
                    + (other[e4125] * self[e4235])
                    + (other[e3215] * self[e42]),
                (other[e15] * self[e42])
                    + (other[e35] * self[e1234])
                    + (other[e1234] * self[e35])
                    + (other[e4235] * self[e4315])
                    + (other[e4125] * self[e45])
                    + (other[e3215] * self[e43]),
                -(other[e31] * self[e4315])
                    - (other[e12] * self[e4125])
                    - (other[e4235] * self[e23])
                    - (other[e4315] * self[e31])
                    - (other[e4125] * self[e12])
                    - (other[e3215] * self[e1234]),
            ]) + (self.group3() * other.group1().www().extend_to_4(other[e1234]))
                + (other.group0().xyxw() * self.group3().ww().extend_to_4(self[e25], self[e45]))
                + (self.group0().ww().extend_to_4(self[e31], self[e42]) * other.group1().xyx().extend_to_4(other[e25]))
                + (self.group1().zx().extend_to_4(self[scalar], self[e43]) * other.group1().yzz().extend_to_4(other[e35]))
                + (self.group2().zx().extend_to_4(self[e3215], self[scalar]) * other.group0().yzz().extend_to_4(other[e45]))
                + (other.group0().www() * self.group1().truncate_to_3()).extend_to_4(other[e15] * self[e41])
                - (other.group0().zxyx() * self.group2().yzxx())
                - (self.group3().yzxx() * other.group3().zxy().extend_to_4(other[e23]))
                - (other.group1().zxy() * self.group1().yzx()).extend_to_4(other[e42] * self[e25])
                - (other.group2().zxy() * self.group0().yzx()).extend_to_4(other[e43] * self[e35]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e25] * self[e4125]) + (other[e4125] * self[e25]) + (other[e3215] * self[e23]) + (other[e3215] * self[e4235]),
                (other[e35] * self[e4235]) + (other[e4235] * self[e35]) + (other[e3215] * self[e31]) + (other[e3215] * self[e4315]),
                (other[e35] * self[e45]) + (other[e4315] * self[e15]) + (other[e3215] * self[e12]) + (other[e3215] * self[e4125]),
                -(other[e1234] * self[e45]) - (other[e4235] * self[e41]) - (other[e4315] * self[e42]) - (other[e4125] * self[e43]),
            ]) + (other.group0().wwwx() * self.group2().truncate_to_3().extend_to_4(self[e4235]))
                + (other.group2().yzzw() * self.group1().zx().extend_to_4(self[scalar], self[scalar]))
                + (self.group0().ww().extend_to_4(self[e31], self[e1234]) * other.group2().xyx().extend_to_4(other[scalar]))
                + (self.group1().ww().extend_to_4(self[e4315], self[e1234]) * other.group2().xyx().extend_to_4(other[e45]))
                + (self.group2().zx().extend_to_4(self[e3215], self[e4125]) * other.group1().yzz().extend_to_4(other[e43]))
                + (self.group3().ww().extend_to_4(self[e25], self[e4315]) * other.group1().xyx().extend_to_4(other[e42]))
                - (self.group1().yzxz() * other.group2().zxy().extend_to_4(other[e43]))
                - (self.group2().zx().extend_to_4(self[e3215], self[e43]) * other.group3().yzz().extend_to_4(other[e12]))
                - (self.group3().ww().extend_to_4(self[e25], self[e42]) * other.group3().xyx().extend_to_4(other[e31]))
                - (other.group1().zxy() * self.group2().yzx()).extend_to_4(other[e41] * self[e23])
                - (other.group1().www() * self.group2().truncate_to_3()).extend_to_4(other[e42] * self[e31])
                - (other.group2().zxy() * self.group3().yzx()).extend_to_4(other[e23] * self[e41]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e35] * self[e42]) + (other[e1234] * self[e15]) + (other[e4235] * self[scalar]) + (other[e4315] * self[e12]),
                (other[e15] * self[e43]) + (other[e1234] * self[e25]) + (other[e4315] * self[scalar]) + (other[e4125] * self[e23]),
                (other[e25] * self[e41]) + (other[e1234] * self[e35]) + (other[e4235] * self[e31]) + (other[e4125] * self[scalar]),
                -(other[e25] * self[e31]) - (other[e25] * self[e4315]) - (other[e35] * self[e12]) - (other[e35] * self[e4125]),
            ]) + (self.group1() * other.group1().www().extend_to_4(other[e3215]))
                + (other.group0().xyxw() * self.group3().ww().extend_to_4(self[e25], self[e3215]))
                + (self.group1().ww().extend_to_4(self[e4315], self[e35]) * other.group1().xyx().extend_to_4(other[e4125]))
                + (self.group2().zx().extend_to_4(self[e3215], self[e15]) * other.group0().yzz().extend_to_4(other[e4235]))
                + (self.group3().zx().extend_to_4(self[e45], self[scalar]) * other.group1().yzz().extend_to_4(other[e3215]))
                + (other.group0().www() * self.group3().truncate_to_3()).extend_to_4(other[e4315] * self[e25])
                - (other.group1().zxyy() * self.group3().yzx().extend_to_4(self[e25]))
                - (self.group1().yzxx() * other.group3().zxy().extend_to_4(other[e15]))
                - (self.group2().yzxx() * other.group0().zxy().extend_to_4(other[e23]))
                - (self.group0().zx().extend_to_4(self[e1234], self[e3215]) * other.group2().yzz().extend_to_4(other[e45]))
                - (self.group2().ww().extend_to_4(self[e42], self[e35]) * other.group2().xyx().extend_to_4(other[e12]))
                - (other.group3().www() * self.group0().truncate_to_3()).extend_to_4(other[e15] * self[e4235]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
