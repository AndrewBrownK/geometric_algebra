// Note on Operative Statistics:
// Operative Statistics are not a precise predictor of performance or performance comparisons.
// This is due to varying hardware capabilities and compiler optimizations.
// As always, where performance is a concern, there is no substitute for
// real measurements on real work-loads on real hardware.
// Disclaimer aside, enjoy the fun information =)
impl InfixSandwich for AntiScalar {}
impl Sandwich<AntiScalar> for AntiScalar {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        3        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Scalar::from_groups(/* scalar */ (self[e12345] * other[e12345] * -1.0));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for AntiScalar {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        6        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0       10        0
    //  no simd        0       34        0
    fn sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Dipole::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[e12345]) * other.group0() * Simd32x3::from(-1.0)),
            // e23, e31, e12, e45
            (Simd32x4::from(self[e12345]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e15, e25, e35
            (Simd32x3::from(self[e12345]) * other.group2() * Simd32x3::from(-1.0)),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for AntiScalar {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        6        0
    //    simd4        0       10        0
    // Totals...
    // yes simd        0       16        0
    //  no simd        0       46        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self[e12345]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]) * Simd32x4::from(-1.0)),
            // e23, e31, e12, e45
            (Simd32x4::from(self[e12345]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e12345] * other.group2()[0] * -1.0),
                (self[e12345] * other.group2()[1] * -1.0),
                (self[e12345] * other.group2()[2] * -1.0),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(0.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for AntiScalar {
    type Output = Dipole;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        6        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0       10        0
    //  no simd        0       34        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Circle::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[e12345]) * other.group0()),
            // e415, e425, e435, e321
            (Simd32x4::from(self[e12345]) * other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e235, e315, e125
            (Simd32x3::from(self[e12345]) * other.group2()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for AntiScalar {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd4        0       13        0
    // Totals...
    // yes simd        0       16        0
    //  no simd        0       55        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([(self[e12345] * other.group0()[0]), (self[e12345] * other.group0()[1]), (self[e12345] * other.group0()[2]), 0.0]),
            // e415, e425, e435, e321
            (Simd32x4::from(self[e12345]) * other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e235, e315, e125, e5
            (Simd32x4::from(self[e12345]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]])),
            // e1, e2, e3, e4
            (Simd32x4::from(self[e12345]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[3]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for AntiScalar {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        4        0
    //    simd4        0        6        0
    // Totals...
    // yes simd        0       10        0
    //  no simd        0       28        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (self[e12345] * other.group0()[1] * -1.0)]),
            // e23, e31, e12, e45
            Simd32x4::from(0.0),
            // e15, e25, e35, e1234
            Simd32x4::from(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([0.0, 0.0, 0.0, (self[e12345] * other.group0()[0] * -1.0)]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for AntiScalar {
    type Output = Dipole;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd3        0        5        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        9        0
    //  no simd        0       25        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self[e12345] * other.group0()[3] * -1.0)]),
            // e235, e315, e125
            (Simd32x3::from(self[e12345]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for AntiScalar {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        8        0
    //    simd4        0        9        0
    // Totals...
    // yes simd        0       17        0
    //  no simd        0       44        0
    fn sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self[e12345] * other.group0()[3] * -1.0)]),
            // e235, e315, e125, e5
            (Simd32x4::from(self[e12345]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e12345] * other.group1()[0] * -1.0),
                (self[e12345] * other.group1()[1] * -1.0),
                (self[e12345] * other.group1()[2] * -1.0),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for AntiScalar {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        6        0
    //    simd3        0        4        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0       12        0
    //  no simd        0       26        0
    fn sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e12345] * other.group0()[0] * -1.0),
                (self[e12345] * other.group0()[1] * -1.0),
                (self[e12345] * other.group0()[2] * -1.0),
                0.0,
            ]),
            // e15, e25, e35
            (Simd32x3::from(self[e12345]) * other.group1() * Simd32x3::from(-1.0)),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for AntiScalar {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0       16        0
    //    simd4        0        6        0
    // Totals...
    // yes simd        0       22        0
    //  no simd        0       40        0
    fn sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (self[e12345] * other.group0()[3] * -1.0)]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e12345] * other.group0()[0] * -1.0),
                (self[e12345] * other.group0()[1] * -1.0),
                (self[e12345] * other.group0()[2] * -1.0),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e12345] * other.group1()[0] * -1.0),
                (self[e12345] * other.group1()[1] * -1.0),
                (self[e12345] * other.group1()[2] * -1.0),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([0.0, 0.0, 0.0, (self[e12345] * other.group1()[3] * -1.0)]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for AntiScalar {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        6        0
    //    simd2        0        4        0
    //    simd3        0       12        0
    //    simd4        0       16        0
    // Totals...
    // yes simd        0       38        0
    //  no simd        0      114        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from(self[e12345]) * swizzle!(other.group0(), 1, 0) * Simd32x2::from([-1.0, 1.0])),
            // e1, e2, e3, e4
            (Simd32x4::from(self[e12345]) * Simd32x4::from([other.group8()[0], other.group8()[1], other.group8()[2], other[e35]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e5
            (self[e12345] * other.group8()[3]),
            // e15, e25, e35, e45
            (Simd32x4::from(self[e12345]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group5()[3]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e41, e42, e43
            (Simd32x3::from(self[e12345]) * other.group6() * Simd32x3::from(-1.0)),
            // e415, e425, e435, e321
            (Simd32x4::from(self[e12345])
                * Simd32x4::from([other.group10()[2], other.group10()[1], other.group10()[0], other.group3()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e423, e431, e412
            (Simd32x3::from(self[e12345]) * other.group4()),
            // e235, e315, e125
            (Simd32x3::from(self[e12345]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]])),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[e12345]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other[e1]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e1234
            (self[e12345] * other.group1()[3] * -1.0),
            // e12, e31, e23
            (Simd32x3::from(self[e12345]) * Simd32x3::from([other.group5()[2], other.group5()[1], other.group5()[0]]) * Simd32x3::from(-1.0)),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for AntiScalar {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        9        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0       11        0
    //  no simd        0       17        0
    fn sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = RoundPoint::from_groups(
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e12345] * other.group0()[0] * -1.0),
                (self[e12345] * other.group0()[1] * -1.0),
                (self[e12345] * other.group0()[2] * -1.0),
                0.0,
            ]),
            // e5
            (self[e12345] * other.group0()[3]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for AntiScalar {
    type Output = RoundPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        7        0
    //  no simd        0       19        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[e12345]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other[e2]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e1234
            (self[e12345] * other.group0()[3] * -1.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for AntiScalar {
    type Output = Scalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        3        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiScalar::from_groups(/* e12345 */ (self[e12345] * other[scalar]));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for AntiScalar {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        7        0
    //  no simd        0       19        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = RoundPoint::from_groups(
            // e1, e2, e3, e4
            (Simd32x4::from(self[e12345]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other[e4315]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e5
            (self[e12345] * other.group0()[3]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for AntiScalar {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0       14        0
    // no simd        0       56        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self[e12345]) * other.group0() * Simd32x4::from(-1.0)),
            // e23, e31, e12, e45
            (Simd32x4::from(self[e12345]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e15, e25, e35, e1234
            (Simd32x4::from(self[e12345]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]) * Simd32x4::from(-1.0)),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[e12345]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[3]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for AntiScalar {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0       14        0
    // no simd        0       56        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self[e12345]) * other.group0()),
            // e415, e425, e435, e321
            (Simd32x4::from(self[e12345]) * other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e235, e315, e125, e5
            (Simd32x4::from(self[e12345]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]])),
            // e1, e2, e3, e4
            (Simd32x4::from(self[e12345]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[3]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl InfixSandwich for Circle {}
impl Sandwich<AntiScalar> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       72        0
    //    simd3        0        6        0
    //    simd4        7       10        0
    // Totals...
    // yes simd       63       88        0
    //  no simd       84      130        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Dipole::from_groups(
            // e41, e42, e43
            (self.group0() * Simd32x3::from(other[e12345]) * Simd32x3::from(-1.0)),
            // e23, e31, e12, e45
            (self.group1() * Simd32x4::from(other[e12345]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e15, e25, e35
            (self.group2() * Simd32x3::from(other[e12345]) * Simd32x3::from(-1.0)),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      112      144        0
    //    simd3        0        2        0
    //    simd4       29       30        0
    // Totals...
    // yes simd      141      176        0
    //  no simd      228      270        0
    fn sandwich(self, other: Circle) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + (swizzle!(other.group1(), 3, 0, 3, 1) * Simd32x4::from([self.group0()[0], self.group0()[2], self.group0()[2], self.group1()[1]]))
                + (swizzle!(other.group1(), 2, 3, 1, 0) * Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[0], self.group1()[0]]))
                + Simd32x4::from([
                    (-(self.group1()[2] * other.group0()[1]) - (self.group0()[2] * other.group1()[1])),
                    (-(self.group1()[0] * other.group0()[2]) - (self.group0()[0] * other.group1()[2])),
                    (-(self.group1()[1] * other.group0()[0]) - (self.group0()[1] * other.group1()[0])),
                    ((self.group2()[2] * other.group0()[2])
                        + (self.group2()[1] * other.group0()[1])
                        + (self.group2()[0] * other.group0()[0])
                        + (self.group0()[2] * other.group2()[2])
                        + (self.group0()[0] * other.group2()[0])
                        + (self.group0()[1] * other.group2()[1])),
                ])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group2()[2] * other.group0()[1]) + (self.group2()[1] * other.group0()[2]) - (self.group1()[2] * other.group1()[1])
                    + (self.group1()[1] * other.group1()[2])
                    + (self.group0()[1] * other.group2()[2])
                    - (self.group0()[2] * other.group2()[1])),
                ((self.group2()[2] * other.group0()[0]) - (self.group2()[0] * other.group0()[2]) + (self.group1()[2] * other.group1()[0])
                    - (self.group1()[0] * other.group1()[2])
                    - (self.group0()[0] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[0])),
                (-(self.group2()[1] * other.group0()[0]) + (self.group2()[0] * other.group0()[1]) - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[0] * other.group1()[1])
                    + (self.group0()[0] * other.group2()[1])
                    - (self.group0()[1] * other.group2()[0])),
                ((self.group2()[2] * other.group0()[2]) + (self.group2()[1] * other.group0()[1]) + (self.group2()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])),
            ]),
            // e15, e25, e35, e1234
            ((swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[2]]))
                + (swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[2]]))
                + (swizzle!(self.group1(), 1, 2, 0, 1) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[1]]))
                + Simd32x4::from([
                    (-(self.group2()[2] * other.group1()[1]) - (self.group2()[0] * other.group1()[3]) - (self.group1()[2] * other.group2()[1])),
                    (-(self.group2()[1] * other.group1()[3]) - (self.group2()[0] * other.group1()[2]) - (self.group1()[0] * other.group2()[2])),
                    (-(self.group2()[2] * other.group1()[3]) - (self.group2()[1] * other.group1()[0]) - (self.group1()[1] * other.group2()[0])),
                    ((self.group1()[0] * other.group0()[0]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group1(), 0, 1, 2, 2) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[2]]))
                + (swizzle!(other.group1(), 3, 3, 3, 1) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[1]]))
                + Simd32x4::from([
                    (-(self.group2()[2] * other.group0()[1]) + (self.group2()[1] * other.group0()[2]) - (self.group0()[1] * other.group2()[2])
                        + (self.group0()[2] * other.group2()[1])),
                    ((self.group2()[2] * other.group0()[0]) - (self.group2()[0] * other.group0()[2]) + (self.group0()[0] * other.group2()[2])
                        - (self.group0()[2] * other.group2()[0])),
                    (-(self.group2()[1] * other.group0()[0]) + (self.group2()[0] * other.group0()[1]) - (self.group0()[0] * other.group2()[1])
                        + (self.group0()[1] * other.group2()[0])),
                    ((self.group2()[0] * other.group1()[0])
                        + (self.group1()[2] * other.group2()[2])
                        + (self.group1()[0] * other.group2()[0])
                        + (self.group1()[1] * other.group2()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      106      138        0
    //    simd3        0        2        0
    //    simd4       33       34        0
    // Totals...
    // yes simd      139      174        0
    //  no simd      238      280        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + (swizzle!(other.group1(), 2, 0, 3, 1) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[2], self.group1()[1]]))
                + (swizzle!(other.group1(), 3, 3, 1, 0) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group1()[0]]))
                + Simd32x4::from([
                    (-(self.group1()[2] * other.group0()[1]) - (self.group0()[2] * other.group1()[1]) - (self.group0()[0] * other.group2()[3])),
                    (-(self.group1()[0] * other.group0()[2]) - (self.group0()[1] * other.group2()[3]) - (self.group0()[0] * other.group1()[2])),
                    (-(self.group1()[1] * other.group0()[0]) - (self.group0()[2] * other.group2()[3]) - (self.group0()[1] * other.group1()[0])),
                    ((self.group2()[2] * other.group0()[2])
                        + (self.group2()[1] * other.group0()[1])
                        + (self.group2()[0] * other.group0()[0])
                        + (self.group0()[2] * other.group2()[2])
                        + (self.group0()[0] * other.group2()[0])
                        + (self.group0()[1] * other.group2()[1])),
                ])),
            // e23, e31, e12, e45
            ((swizzle!(self.group1(), 1, 2, 0, 3) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[3]]))
                - (swizzle!(other.group2(), 3, 3, 3, 2) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[2]]))
                - (swizzle!(other.group2(), 1, 2, 0, 0) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]))
                + Simd32x4::from([
                    (-(self.group2()[2] * other.group0()[1]) + (self.group2()[1] * other.group0()[2]) - (self.group1()[2] * other.group1()[1])
                        + (self.group0()[1] * other.group2()[2])),
                    ((self.group2()[2] * other.group0()[0]) - (self.group2()[0] * other.group0()[2]) - (self.group1()[0] * other.group1()[2])
                        + (self.group0()[2] * other.group2()[0])),
                    (-(self.group2()[1] * other.group0()[0]) + (self.group2()[0] * other.group0()[1]) - (self.group1()[1] * other.group1()[0])
                        + (self.group0()[0] * other.group2()[1])),
                    ((self.group2()[2] * other.group0()[2]) + (self.group2()[1] * other.group0()[1]) + (self.group2()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e15, e25, e35, e1234
            ((swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[2]]))
                + (swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[2]]))
                + (swizzle!(self.group1(), 1, 2, 0, 1) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[1]]))
                + Simd32x4::from([
                    (-(self.group2()[2] * other.group1()[1])
                        - (self.group2()[0] * other.group2()[3])
                        - (self.group2()[0] * other.group1()[3])
                        - (self.group1()[2] * other.group2()[1])),
                    (-(self.group2()[1] * other.group2()[3])
                        - (self.group2()[1] * other.group1()[3])
                        - (self.group2()[0] * other.group1()[2])
                        - (self.group1()[0] * other.group2()[2])),
                    (-(self.group2()[2] * other.group2()[3])
                        - (self.group2()[2] * other.group1()[3])
                        - (self.group2()[1] * other.group1()[0])
                        - (self.group1()[1] * other.group2()[0])),
                    ((self.group1()[0] * other.group0()[0]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group1(), 0, 1, 2, 2) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[2]]))
                + (swizzle!(other.group1(), 3, 3, 3, 1) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[1]]))
                + (swizzle!(other.group2(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    (-(self.group2()[2] * other.group0()[1]) + (self.group2()[1] * other.group0()[2]) - (self.group0()[1] * other.group2()[2])),
                    ((self.group2()[2] * other.group0()[0]) - (self.group2()[0] * other.group0()[2]) - (self.group0()[2] * other.group2()[0])),
                    (-(self.group2()[1] * other.group0()[0]) + (self.group2()[0] * other.group0()[1]) - (self.group0()[0] * other.group2()[1])),
                    ((self.group2()[0] * other.group1()[0]) + (self.group1()[0] * other.group2()[0]) + (self.group1()[1] * other.group2()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      116      148        0
    //    simd3        0        2        0
    //    simd4       28       29        0
    // Totals...
    // yes simd      144      179        0
    //  no simd      228      270        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(self.group1(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]))
                - (swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group0()[0])
                        + (self.group1()[2] * other.group0()[1])
                        + (self.group0()[2] * other.group1()[1])
                        + (self.group0()[0] * other.group1()[3])),
                    ((self.group1()[3] * other.group0()[1])
                        + (self.group1()[0] * other.group0()[2])
                        + (self.group0()[0] * other.group1()[2])
                        + (self.group0()[1] * other.group1()[3])),
                    ((self.group1()[3] * other.group0()[2])
                        + (self.group1()[1] * other.group0()[0])
                        + (self.group0()[2] * other.group1()[3])
                        + (self.group0()[1] * other.group1()[0])),
                    (-(self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group2()[2] * other.group0()[1]) - (self.group2()[1] * other.group0()[2]) + (self.group1()[2] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[2])
                    - (self.group0()[1] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[1])),
                (-(self.group2()[2] * other.group0()[0]) + (self.group2()[0] * other.group0()[2]) - (self.group1()[2] * other.group1()[0])
                    + (self.group1()[0] * other.group1()[2])
                    + (self.group0()[0] * other.group2()[2])
                    - (self.group0()[2] * other.group2()[0])),
                ((self.group2()[1] * other.group0()[0]) - (self.group2()[0] * other.group0()[1]) + (self.group1()[1] * other.group1()[0])
                    - (self.group1()[0] * other.group1()[1])
                    - (self.group0()[0] * other.group2()[1])
                    + (self.group0()[1] * other.group2()[0])),
                ((self.group2()[2] * other.group0()[2]) + (self.group2()[1] * other.group0()[1]) + (self.group2()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])),
            ]),
            // e235, e315, e125, e5
            (-(swizzle!(other.group1(), 2, 0, 3, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[2], self.group2()[2]]))
                - (swizzle!(other.group1(), 3, 3, 1, 1) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[0], self.group2()[1]]))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group2()[2]]))
                - (swizzle!(self.group1(), 1, 2, 0, 0) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group2()[0]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group1()[1]) + (self.group1()[2] * other.group2()[1])),
                    ((self.group2()[0] * other.group1()[2]) + (self.group1()[0] * other.group2()[2])),
                    ((self.group2()[1] * other.group1()[0]) + (self.group1()[1] * other.group2()[0])),
                    (-(self.group2()[0] * other.group1()[0]) - (self.group1()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(self.group1(), 0, 1, 2, 2) * Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group2()[2] * other.group0()[1]) + (self.group2()[1] * other.group0()[2]) + (self.group1()[3] * other.group1()[0])
                        - (self.group0()[1] * other.group2()[2])
                        + (self.group0()[2] * other.group2()[1])),
                    ((self.group2()[2] * other.group0()[0]) - (self.group2()[0] * other.group0()[2])
                        + (self.group1()[3] * other.group1()[1])
                        + (self.group0()[0] * other.group2()[2])
                        - (self.group0()[2] * other.group2()[0])),
                    (-(self.group2()[1] * other.group0()[0]) + (self.group2()[0] * other.group0()[1]) + (self.group1()[3] * other.group1()[2])
                        - (self.group0()[0] * other.group2()[1])
                        + (self.group0()[1] * other.group2()[0])),
                    (-(self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      134      166        0
    //    simd3        0        2        0
    //    simd4       36       37        0
    // Totals...
    // yes simd      170      205        0
    //  no simd      278      320        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(self.group1(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]))
                - (swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group0()[0])
                        + (self.group1()[2] * other.group0()[1])
                        + (self.group1()[0] * other.group2()[3])
                        + (self.group0()[2] * other.group3()[1])
                        + (self.group0()[2] * other.group1()[1])
                        - (self.group0()[1] * other.group3()[2])
                        + (self.group0()[0] * other.group1()[3])),
                    ((self.group1()[3] * other.group0()[1]) + (self.group1()[1] * other.group2()[3]) + (self.group1()[0] * other.group0()[2])
                        - (self.group0()[2] * other.group3()[0])
                        + (self.group0()[1] * other.group1()[3])
                        + (self.group0()[0] * other.group1()[2])
                        + (self.group0()[0] * other.group3()[2])),
                    ((self.group1()[3] * other.group0()[2])
                        + (self.group1()[2] * other.group2()[3])
                        + (self.group1()[1] * other.group0()[0])
                        + (self.group0()[2] * other.group1()[3])
                        + (self.group0()[1] * other.group3()[0])
                        + (self.group0()[1] * other.group1()[0])
                        - (self.group0()[0] * other.group3()[1])),
                    (-(self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e321
            ((swizzle!(self.group1(), 2, 0, 1, 2) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[2]]))
                + (swizzle!(other.group3(), 3, 3, 3, 1) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]))
                - (swizzle!(other.group2(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group0()[1]) - (self.group2()[1] * other.group0()[2]) + (self.group2()[0] * other.group2()[3])
                        - (self.group1()[3] * other.group3()[0])
                        - (self.group1()[1] * other.group1()[2])
                        + (self.group0()[2] * other.group2()[1])),
                    (-(self.group2()[2] * other.group0()[0]) + (self.group2()[1] * other.group2()[3]) + (self.group2()[0] * other.group0()[2])
                        - (self.group1()[3] * other.group3()[1])
                        - (self.group1()[2] * other.group1()[0])
                        + (self.group0()[0] * other.group2()[2])),
                    ((self.group2()[2] * other.group2()[3]) + (self.group2()[1] * other.group0()[0])
                        - (self.group2()[0] * other.group0()[1])
                        - (self.group1()[3] * other.group3()[2])
                        - (self.group1()[0] * other.group1()[1])
                        + (self.group0()[1] * other.group2()[0])),
                    ((self.group2()[2] * other.group0()[2])
                        + (self.group2()[1] * other.group0()[1])
                        + (self.group2()[0] * other.group0()[0])
                        + (self.group1()[0] * other.group3()[0])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e235, e315, e125, e5
            (-(Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group1()[2]]))
                + (swizzle!(other.group3(), 2, 0, 1, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group2()[2]]))
                - (Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group1()[1]]))
                - (Simd32x4::from(self.group2()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group1()[0]]))
                - (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                + (swizzle!(other.group3(), 3, 3, 3, 1) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[1]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * swizzle!(other.group2(), 2, 0, 1, 2))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group1()[1]) + (self.group1()[2] * other.group2()[1])),
                    ((self.group2()[0] * other.group1()[2]) + (self.group1()[0] * other.group2()[2])),
                    ((self.group2()[1] * other.group1()[0]) + (self.group1()[1] * other.group2()[0])),
                    ((self.group2()[0] * other.group3()[0]) - (self.group1()[0] * other.group2()[0]) - (self.group1()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            ((Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                - (swizzle!(self.group1(), 2, 1, 2, 2) * Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group0()[2]]))
                - (swizzle!(self.group1(), 0, 0, 1, 1) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group0()[1]]))
                + Simd32x4::from([
                    (-(self.group2()[2] * other.group0()[1]) + (self.group2()[1] * other.group0()[2]) - (self.group2()[0] * other.group2()[3])
                        + (self.group1()[1] * other.group3()[2])
                        + (self.group0()[2] * other.group2()[1])
                        + (self.group0()[0] * other.group3()[3])
                        - (self.group0()[1] * other.group2()[2])),
                    ((self.group2()[2] * other.group0()[0]) - (self.group2()[1] * other.group2()[3]) - (self.group2()[0] * other.group0()[2])
                        + (self.group1()[2] * other.group3()[0])
                        - (self.group0()[2] * other.group2()[0])
                        + (self.group0()[0] * other.group2()[2])
                        + (self.group0()[1] * other.group3()[3])),
                    (-(self.group2()[2] * other.group2()[3]) - (self.group2()[1] * other.group0()[0])
                        + (self.group2()[0] * other.group0()[1])
                        + (self.group1()[0] * other.group3()[1])
                        + (self.group0()[2] * other.group3()[3])
                        - (self.group0()[0] * other.group2()[1])
                        + (self.group0()[1] * other.group2()[0])),
                    (-(self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group3()[2])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[1] * other.group3()[1])
                        - (self.group0()[1] * other.group1()[1])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group3()[0])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       76       99        0
    //    simd3        0        4        0
    //    simd4       16       18        0
    // Totals...
    // yes simd       92      121        0
    //  no simd      140      183        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (self.group0() * Simd32x3::from(other.group0()[1]) * Simd32x3::from(-1.0)),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[0]) - (self.group1()[0] * other.group0()[1])),
                (-(self.group0()[1] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                (-(self.group0()[2] * other.group0()[0]) - (self.group1()[2] * other.group0()[1])),
                (self.group1()[3] * other.group0()[1]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group1()[0] * other.group0()[0]) - (self.group2()[0] * other.group0()[1])),
                (-(self.group1()[1] * other.group0()[0]) - (self.group2()[1] * other.group0()[1])),
                (-(self.group1()[2] * other.group0()[0]) - (self.group2()[2] * other.group0()[1])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       70      100        0
    //    simd3        0        2        0
    //    simd4       25       26        0
    // Totals...
    // yes simd       95      128        0
    //  no simd      170      210        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group1()[3] * other.group0()[3])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e321
            (-(swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[2]]))
                + Simd32x4::from([
                    (self.group0()[2] * other.group0()[1]),
                    (self.group0()[0] * other.group0()[2]),
                    (self.group0()[1] * other.group0()[0]),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            (-(swizzle!(other.group0(), 3, 3, 3, 2) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[2]]))
                - (swizzle!(self.group1(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))
                - (swizzle!(self.group1(), 1, 2, 0, 1) * swizzle!(other.group0(), 2, 0, 1, 1))
                + Simd32x4::from([
                    (self.group1()[2] * other.group0()[1]),
                    (self.group1()[0] * other.group0()[2]),
                    (self.group1()[1] * other.group0()[0]),
                    0.0,
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group1()[0] * other.group0()[3]) - (self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                (-(self.group1()[1] * other.group0()[3]) + (self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group1()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       88      120        0
    //    simd3        0        2        0
    //    simd4       30       31        0
    // Totals...
    // yes simd      118      153        0
    //  no simd      208      250        0
    fn sandwich(self, other: Flector) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[2] * other.group1()[1]) + (self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group1()[2])),
                (-(self.group0()[2] * other.group1()[0]) + (self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[3])),
                ((self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
                (-(self.group1()[3] * other.group0()[3])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e321
            ((swizzle!(other.group1(), 3, 3, 3, 2) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]]))
                - (swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group1()[3] * other.group1()[0]) + (self.group0()[2] * other.group0()[1])),
                    (-(self.group1()[3] * other.group1()[1]) + (self.group0()[0] * other.group0()[2])),
                    (-(self.group1()[3] * other.group1()[2]) + (self.group0()[1] * other.group0()[0])),
                    ((self.group1()[1] * other.group1()[1]) + (self.group1()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            (-(swizzle!(other.group1(), 1, 2, 0, 3) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]))
                + (swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group2()[2]]))
                - (swizzle!(other.group0(), 3, 3, 3, 2) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[2]]))
                - (swizzle!(self.group1(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))
                + (swizzle!(other.group1(), 3, 3, 3, 1) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[1]]))
                - (swizzle!(self.group1(), 1, 2, 0, 1) * swizzle!(other.group0(), 2, 0, 1, 1))
                + Simd32x4::from([
                    (self.group1()[2] * other.group0()[1]),
                    (self.group1()[0] * other.group0()[2]),
                    (self.group1()[1] * other.group0()[0]),
                    (self.group2()[0] * other.group1()[0]),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group1()[1] * other.group1()[2]) - (self.group1()[0] * other.group0()[3])
                        + (self.group0()[2] * other.group0()[1])
                        + (self.group0()[0] * other.group1()[3])
                        - (self.group0()[1] * other.group0()[2])),
                    ((self.group1()[2] * other.group1()[0]) - (self.group1()[1] * other.group0()[3]) - (self.group0()[2] * other.group0()[0])
                        + (self.group0()[0] * other.group0()[2])
                        + (self.group0()[1] * other.group1()[3])),
                    (-(self.group1()[2] * other.group0()[3]) + (self.group1()[0] * other.group1()[1]) + (self.group0()[2] * other.group1()[3])
                        - (self.group0()[0] * other.group0()[1])
                        + (self.group0()[1] * other.group0()[0])),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      104      136        0
    //    simd3        0        2        0
    //    simd4       21       22        0
    // Totals...
    // yes simd      125      160        0
    //  no simd      188      230        0
    fn sandwich(self, other: Line) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                ((self.group1()[2] * other.group0()[2])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[0] * other.group0()[0])
                    + (self.group0()[2] * other.group1()[2])
                    + (self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group1()[2] * other.group0()[1]) + (self.group1()[1] * other.group0()[2]) + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])),
                ((self.group1()[2] * other.group0()[0]) - (self.group1()[0] * other.group0()[2]) - (self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                (-(self.group1()[1] * other.group0()[0]) + (self.group1()[0] * other.group0()[1]) + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group2()[2] * other.group0()[1])
                    + (self.group2()[1] * other.group0()[2])
                    + (self.group1()[3] * other.group1()[0])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])),
                ((self.group2()[2] * other.group0()[0]) - (self.group2()[0] * other.group0()[2]) + (self.group1()[3] * other.group1()[1]) - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[0])),
                (-(self.group2()[1] * other.group0()[0])
                    + (self.group2()[0] * other.group0()[1])
                    + (self.group1()[3] * other.group1()[2])
                    + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])),
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            ((swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]))
                + Simd32x4::from([
                    (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])),
                    ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0])),
                    (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
                    ((self.group2()[2] * other.group0()[2])
                        + (self.group2()[1] * other.group0()[1])
                        + (self.group2()[0] * other.group0()[0])
                        + (self.group1()[0] * other.group1()[0])
                        + (self.group1()[1] * other.group1()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       96      132        0
    //    simd3        0        2        0
    //    simd4       28       29        0
    // Totals...
    // yes simd      124      163        0
    //  no simd      208      254        0
    fn sandwich(self, other: Motor) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[2]]))
                + Simd32x4::from([
                    (-(self.group0()[2] * other.group0()[1]) - (self.group0()[0] * other.group0()[3])),
                    (-(self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group0()[3])),
                    (-(self.group0()[2] * other.group0()[3]) - (self.group0()[1] * other.group0()[0])),
                    ((self.group1()[1] * other.group0()[1])
                        + (self.group1()[0] * other.group0()[0])
                        + (self.group0()[2] * other.group1()[2])
                        + (self.group0()[0] * other.group1()[0])
                        + (self.group0()[1] * other.group1()[1])),
                ])),
            // e23, e31, e12, e45
            ((swizzle!(self.group1(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (swizzle!(other.group1(), 1, 2, 3, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[2], self.group0()[2]]))
                - (swizzle!(other.group1(), 3, 3, 0, 0) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[1], self.group0()[0]]))
                + Simd32x4::from([
                    (-(self.group1()[2] * other.group0()[1]) - (self.group1()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[2])),
                    (-(self.group1()[1] * other.group0()[3]) - (self.group1()[0] * other.group0()[2]) + (self.group0()[2] * other.group1()[0])),
                    (-(self.group1()[2] * other.group0()[3]) - (self.group1()[1] * other.group0()[0]) + (self.group0()[0] * other.group1()[1])),
                    ((self.group0()[1] * other.group1()[1]) * -1.0),
                ])),
            // e15, e25, e35, e1234
            ((swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group2()[2] * other.group0()[1]) - (self.group2()[0] * other.group0()[3]) + (self.group1()[3] * other.group1()[0])
                        - (self.group1()[2] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[3])
                        + (self.group1()[1] * other.group1()[2])),
                    (-(self.group2()[1] * other.group0()[3]) - (self.group2()[0] * other.group0()[2])
                        + (self.group1()[3] * other.group1()[1])
                        + (self.group1()[2] * other.group1()[0])
                        - (self.group1()[0] * other.group1()[2])
                        - (self.group1()[1] * other.group1()[3])),
                    (-(self.group2()[2] * other.group0()[3]) - (self.group2()[1] * other.group0()[0]) + (self.group1()[3] * other.group1()[2])
                        - (self.group1()[2] * other.group1()[3])
                        + (self.group1()[0] * other.group1()[1])
                        - (self.group1()[1] * other.group1()[0])),
                    ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[2]]))
                + (swizzle!(other.group1(), 1, 2, 3, 3) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[2], self.group1()[3]]))
                + (swizzle!(other.group1(), 3, 3, 0, 2) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[1] * other.group1()[2]) * -1.0),
                    ((self.group0()[2] * other.group1()[0]) * -1.0),
                    ((self.group0()[0] * other.group1()[1]) * -1.0),
                    ((self.group2()[1] * other.group0()[1])
                        + (self.group2()[0] * other.group0()[0])
                        + (self.group1()[0] * other.group1()[0])
                        + (self.group1()[1] * other.group1()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for Circle {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      236      288        0
    //    simd2        2        2        0
    //    simd3       68       74        0
    //    simd4       33       34        0
    // Totals...
    // yes simd      339      398        0
    //  no simd      576      650        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (-(Simd32x2::from(self.group1()[3]) * Simd32x2::from([other.group5()[3], other.group3()[3]]))
                + Simd32x2::from([
                    ((self.group2()[2] * other.group6()[2])
                        + (self.group2()[1] * other.group6()[1])
                        + (self.group2()[0] * other.group6()[0])
                        + (self.group1()[2] * other.group5()[2])
                        + (self.group1()[1] * other.group5()[1])
                        + (self.group1()[0] * other.group5()[0])
                        + (self.group0()[2] * other.group7()[2])
                        + (self.group0()[0] * other.group7()[0])
                        + (self.group0()[1] * other.group7()[1])),
                    (-(self.group2()[2] * other.group4()[2])
                        - (self.group2()[1] * other.group4()[1])
                        - (self.group2()[0] * other.group4()[0])
                        - (self.group1()[2] * other.group10()[0])
                        - (self.group1()[1] * other.group10()[1])
                        - (self.group1()[0] * other.group10()[2])
                        - (self.group0()[2] * other.group3()[2])
                        - (self.group0()[0] * other.group3()[0])
                        - (self.group0()[1] * other.group3()[1])),
                ])),
            // e1, e2, e3, e4
            ((Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group10()[2], other.group10()[1], other.group10()[0], other[e35]]))
                - (swizzle!(self.group1(), 2, 1, 2, 2) * Simd32x4::from([other.group8()[1], other.group3()[3], other.group3()[3], other.group4()[2]]))
                - (swizzle!(self.group1(), 0, 0, 1, 1) * Simd32x4::from([other.group3()[3], other.group8()[2], other.group8()[0], other.group4()[1]]))
                + Simd32x4::from([
                    (-(self.group2()[2] * other.group4()[1]) + (self.group2()[1] * other.group4()[2]) - (self.group2()[0] * other[e35])
                        + (self.group1()[1] * other.group8()[2])
                        + (self.group0()[2] * other.group3()[1])
                        + (self.group0()[0] * other.group8()[3])
                        - (self.group0()[1] * other.group3()[2])),
                    ((self.group2()[2] * other.group4()[0]) - (self.group2()[1] * other[e35]) - (self.group2()[0] * other.group4()[2]) + (self.group1()[2] * other.group8()[0])
                        - (self.group0()[2] * other.group3()[0])
                        + (self.group0()[0] * other.group3()[2])
                        + (self.group0()[1] * other.group8()[3])),
                    (-(self.group2()[2] * other[e35]) - (self.group2()[1] * other.group4()[0])
                        + (self.group2()[0] * other.group4()[1])
                        + (self.group1()[0] * other.group8()[1])
                        + (self.group0()[2] * other.group8()[3])
                        - (self.group0()[0] * other.group3()[1])
                        + (self.group0()[1] * other.group3()[0])),
                    (-(self.group1()[0] * other.group4()[0])
                        - (self.group0()[2] * other.group10()[0])
                        - (self.group0()[2] * other.group8()[2])
                        - (self.group0()[1] * other.group10()[1])
                        - (self.group0()[1] * other.group8()[1])
                        - (self.group0()[0] * other.group8()[0])
                        - (self.group0()[0] * other.group10()[2])),
                ])),
            // e5
            (-(self.group2()[2] * other.group10()[0]) + (self.group2()[2] * other.group8()[2]) - (self.group2()[1] * other.group10()[1]) + (self.group2()[1] * other.group8()[1])
                - (self.group2()[0] * other.group10()[2])
                + (self.group2()[0] * other.group8()[0])
                - (self.group1()[3] * other.group8()[3])
                - (self.group1()[2] * other.group3()[2])
                - (self.group1()[0] * other.group3()[0])
                - (self.group1()[1] * other.group3()[1])),
            // e15, e25, e35, e45
            (-(swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[2]]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group0()[1]]))
                - (swizzle!(self.group1(), 2, 0, 2, 1) * Simd32x4::from([other.group7()[1], other.group7()[2], other[e1], other.group1()[1]]))
                - (swizzle!(self.group1(), 0, 1, 1, 0) * Simd32x4::from([other[e1], other[e1], other.group7()[0], other.group1()[0]]))
                + Simd32x4::from([
                    (-(self.group2()[2] * other.group5()[1]) + (self.group2()[1] * other.group5()[2]) + (self.group2()[1] * other.group1()[2])
                        - (self.group2()[0] * other.group5()[3])
                        - (self.group2()[0] * other.group0()[1])
                        + (self.group1()[1] * other.group7()[2])),
                    ((self.group2()[2] * other.group5()[0]) + (self.group2()[2] * other.group1()[0])
                        - (self.group2()[1] * other.group5()[3])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group5()[2])
                        + (self.group1()[2] * other.group7()[0])),
                    (-(self.group2()[2] * other.group5()[3]) - (self.group2()[2] * other.group0()[1]) - (self.group2()[1] * other.group5()[0])
                        + (self.group2()[0] * other.group5()[1])
                        + (self.group2()[0] * other.group1()[1])
                        + (self.group1()[0] * other.group7()[1])),
                    ((self.group2()[2] * other.group6()[2]) + (self.group2()[1] * other.group6()[1]) + (self.group2()[0] * other.group6()[0])
                        - (self.group0()[2] * other.group7()[2])
                        - (self.group0()[0] * other.group7()[0])
                        - (self.group0()[1] * other.group7()[1])),
                ])),
            // e41, e42, e43
            (-(Simd32x3::from(self.group1()[3]) * other.group6()) - (swizzle!(other.group6(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))
                + (swizzle!(other.group6(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group5()[1], other.group1()[0], other.group0()[1]]))
                + (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], other.group5()[0], other.group5()[3]]))
                + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group5()[2], other.group5()[3], other.group1()[0]]))
                - (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], other.group0()[1], other.group5()[0]]))
                - (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[1], other.group5()[2], other.group1()[1]]))
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group5()[3], other.group1()[2], other.group5()[1]]))),
            // e415, e425, e435, e321
            ((swizzle!(self.group1(), 2, 1, 2, 3) * Simd32x4::from([other.group10()[1], other.group0()[0], other.group0()[0], other.group0()[0]]))
                + (swizzle!(self.group1(), 0, 0, 1, 2) * Simd32x4::from([other.group0()[0], other.group10()[0], other.group10()[2], other.group8()[2]]))
                + (swizzle!(other.group8(), 3, 3, 3, 1) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]))
                - (swizzle!(other.group3(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group4()[1]) - (self.group2()[1] * other.group4()[2]) + (self.group2()[0] * other[e35])
                        - (self.group1()[3] * other.group8()[0])
                        - (self.group1()[1] * other.group10()[0])
                        + (self.group0()[2] * other.group3()[1])),
                    (-(self.group2()[2] * other.group4()[0]) + (self.group2()[1] * other[e35]) + (self.group2()[0] * other.group4()[2])
                        - (self.group1()[3] * other.group8()[1])
                        - (self.group1()[2] * other.group10()[2])
                        + (self.group0()[0] * other.group3()[2])),
                    ((self.group2()[2] * other[e35]) + (self.group2()[1] * other.group4()[0])
                        - (self.group2()[0] * other.group4()[1])
                        - (self.group1()[3] * other.group8()[2])
                        - (self.group1()[0] * other.group10()[1])
                        + (self.group0()[1] * other.group3()[0])),
                    ((self.group2()[2] * other.group4()[2])
                        + (self.group2()[1] * other.group4()[1])
                        + (self.group2()[0] * other.group4()[0])
                        + (self.group1()[0] * other.group8()[0])
                        - (self.group0()[0] * other.group3()[0])
                        - (self.group0()[1] * other.group3()[1])),
                ])),
            // e423, e431, e412
            ((Simd32x3::from(self.group1()[3]) * other.group4()) + (swizzle!(other.group4(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))
                - (swizzle!(other.group4(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                + (Simd32x3::from(other[e35]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (swizzle!(self.group0(), 2, 1, 2) * Simd32x3::from([other.group10()[1], other.group3()[3], other.group3()[3]]))
                + (swizzle!(self.group0(), 2, 1, 2) * Simd32x3::from([other.group8()[1], other.group0()[0], other.group0()[0]]))
                - (swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group10()[0], other.group10()[2], other.group8()[1]]))
                - (swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group8()[2], other.group8()[0], other.group10()[1]]))
                + (swizzle!(self.group0(), 0, 0, 1) * Simd32x3::from([other.group0()[0], other.group8()[2], other.group10()[2]]))
                + (swizzle!(self.group0(), 0, 0, 1) * Simd32x3::from([other.group3()[3], other.group10()[0], other.group8()[0]]))),
            // e235, e315, e125
            ((Simd32x3::from(self.group2()[2]) * Simd32x3::from([other.group10()[1], other.group8()[0], other.group0()[0]]))
                - (Simd32x3::from(self.group2()[2]) * Simd32x3::from([other.group8()[1], other.group10()[2], other.group3()[3]]))
                - (Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group10()[0], other.group3()[3], other.group8()[0]]))
                + (Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group8()[2], other.group0()[0], other.group10()[2]]))
                - (Simd32x3::from(self.group2()[0]) * Simd32x3::from([other.group3()[3], other.group8()[2], other.group10()[1]]))
                + (Simd32x3::from(self.group2()[0]) * Simd32x3::from([other.group0()[0], other.group10()[0], other.group8()[1]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from(other.group8()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + Simd32x3::from([
                    ((self.group1()[2] * other.group3()[1]) - (self.group1()[1] * other.group3()[2])),
                    (-(self.group1()[2] * other.group3()[0]) + (self.group1()[0] * other.group3()[2])),
                    (-(self.group1()[0] * other.group3()[1]) + (self.group1()[1] * other.group3()[0])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group5(), 0, 1, 2, 2) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[2]]))
                + (swizzle!(self.group1(), 2, 1, 2, 3) * Simd32x4::from([other.group1()[1], other.group5()[3], other.group5()[3], other[e1]]))
                + (swizzle!(self.group1(), 0, 0, 1, 2) * Simd32x4::from([other.group5()[3], other.group1()[2], other.group1()[0], other.group7()[2]]))
                + Simd32x4::from([
                    (-(self.group2()[2] * other.group6()[1]) + (self.group2()[1] * other.group6()[2])
                        - (self.group2()[0] * other.group1()[3])
                        - (self.group1()[1] * other.group1()[2])
                        + (self.group0()[2] * other.group7()[1])
                        + (self.group0()[0] * other[e1])
                        - (self.group0()[1] * other.group7()[2])),
                    ((self.group2()[2] * other.group6()[0])
                        - (self.group2()[1] * other.group1()[3])
                        - (self.group2()[0] * other.group6()[2])
                        - (self.group1()[2] * other.group1()[0])
                        - (self.group0()[2] * other.group7()[0])
                        + (self.group0()[0] * other.group7()[2])
                        + (self.group0()[1] * other[e1])),
                    (-(self.group2()[2] * other.group1()[3]) - (self.group2()[1] * other.group6()[0]) + (self.group2()[0] * other.group6()[1])
                        - (self.group1()[0] * other.group1()[1])
                        + (self.group0()[2] * other[e1])
                        - (self.group0()[0] * other.group7()[1])
                        + (self.group0()[1] * other.group7()[0])),
                    ((self.group2()[2] * other.group1()[2])
                        + (self.group2()[1] * other.group5()[1])
                        + (self.group2()[1] * other.group1()[1])
                        + (self.group2()[0] * other.group5()[0])
                        + (self.group2()[0] * other.group1()[0])
                        + (self.group1()[0] * other.group7()[0])
                        + (self.group1()[1] * other.group7()[1])),
                ])),
            // e1234
            (-(self.group1()[3] * other.group1()[3])
                + (self.group1()[2] * other.group6()[2])
                + (self.group1()[1] * other.group6()[1])
                + (self.group1()[0] * other.group6()[0])
                + (self.group0()[2] * other.group5()[2])
                - (self.group0()[2] * other.group1()[2])
                + (self.group0()[1] * other.group5()[1])
                - (self.group0()[1] * other.group1()[1])
                - (self.group0()[0] * other.group1()[0])
                + (self.group0()[0] * other.group5()[0])),
            // e12, e31, e23
            (-(swizzle!(self.group2(), 2, 1, 2) * Simd32x3::from([other.group1()[3], other.group1()[3], other.group6()[1]]))
                - (swizzle!(self.group2(), 1, 0, 0) * Simd32x3::from([other.group6()[0], other.group6()[2], other.group1()[3]]))
                + (swizzle!(self.group2(), 0, 2, 1) * swizzle!(other.group6(), 1, 0, 2))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[2], other.group1()[1], other.group1()[0]]))
                - (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group1()[2], self.group1()[1], self.group1()[0]]))
                - (swizzle!(self.group0(), 2, 0, 2) * Simd32x3::from([other[e1], other.group7()[2], other.group7()[1]]))
                + (swizzle!(self.group0(), 0, 2, 1) * swizzle!(other.group7(), 1, 0, 2))
                - (swizzle!(self.group0(), 1, 1, 0) * Simd32x3::from([other.group7()[0], other[e1], other[e1]]))
                + Simd32x3::from([
                    (-(self.group1()[1] * other.group5()[0]) + (self.group1()[0] * other.group5()[1])),
                    ((self.group1()[2] * other.group5()[0]) - (self.group1()[0] * other.group5()[2])),
                    (-(self.group1()[2] * other.group5()[1]) + (self.group1()[1] * other.group5()[2])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       68       99        0
    //    simd3        0        2        0
    //    simd4       26       27        0
    // Totals...
    // yes simd       94      128        0
    //  no simd      172      213        0
    fn sandwich(self, other: Plane) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
            // e415, e425, e435, e321
            ((swizzle!(other.group0(), 3, 3, 3, 2) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group0()[0]) * -1.0),
                    ((self.group1()[3] * other.group0()[1]) * -1.0),
                    ((self.group1()[3] * other.group0()[2]) * -1.0),
                    ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            (-(swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]))
                + (swizzle!(other.group0(), 3, 0, 3, 2) * Simd32x4::from([self.group1()[0], self.group2()[2], self.group1()[2], self.group2()[2]]))
                + (swizzle!(other.group0(), 2, 3, 1, 1) * Simd32x4::from([self.group2()[1], self.group1()[1], self.group2()[0], self.group2()[1]]))
                + Simd32x4::from([0.0, 0.0, 0.0, (self.group2()[0] * other.group0()[0])])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group0()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2])),
                    ((self.group1()[2] * other.group0()[0]) + (self.group0()[1] * other.group0()[3])),
                    ((self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1])),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       79      107        0
    //    simd3        2        5        0
    //    simd4       21       22        0
    // Totals...
    // yes simd      102      134        0
    //  no simd      169      210        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (-(Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
            // e23, e31, e12, e45
            (-(swizzle!(other.group0(), 3, 3, 3, 2) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[2]]))
                - (swizzle!(self.group1(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))
                - Simd32x4::from([
                    (self.group0()[0] * other[e2]),
                    (self.group0()[1] * other[e2]),
                    (self.group0()[2] * other[e2]),
                    (self.group1()[1] * other.group0()[1]),
                ])),
            // e15, e25, e35, e1234
            (-(swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]))
                + Simd32x4::from([
                    (-(self.group1()[0] * other[e2]) + (self.group2()[1] * other.group0()[2])),
                    ((self.group2()[2] * other.group0()[0]) - (self.group1()[1] * other[e2])),
                    (-(self.group1()[2] * other[e2]) + (self.group2()[0] * other.group0()[1])),
                    (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                + (Simd32x4::from(other[e2]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + Simd32x4::from([
                    (-(self.group2()[0] * other.group0()[3]) - (self.group1()[1] * other.group0()[2])),
                    (-(self.group2()[1] * other.group0()[3]) - (self.group1()[2] * other.group0()[0])),
                    (-(self.group2()[2] * other.group0()[3]) - (self.group1()[0] * other.group0()[1])),
                    ((self.group2()[1] * other.group0()[1]) + (self.group2()[0] * other.group0()[0])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       64        0
    //    simd3        0        4        0
    //    simd4        9       11        0
    // Totals...
    // yes simd       57       79        0
    //  no simd       84      120        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Circle::from_groups(
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other[scalar])),
            // e415, e425, e435, e321
            (self.group1() * Simd32x4::from(other[scalar])),
            // e235, e315, e125
            (self.group2() * Simd32x3::from(other[scalar])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       74      102        0
    //    simd3        0        2        0
    //    simd4       27       28        0
    // Totals...
    // yes simd      101      132        0
    //  no simd      182      220        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group1()[0] * other[e4315]) - (self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group1()[1] * other[e4315]) + (self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                ((self.group1()[2] * other[e4315]) - (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
            // e415, e425, e435, e321
            ((swizzle!(other.group0(), 3, 3, 3, 2) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group2()[0] * other[e4315]) - (self.group1()[3] * other.group0()[0])),
                    ((self.group2()[1] * other[e4315]) - (self.group1()[3] * other.group0()[1])),
                    ((self.group2()[2] * other[e4315]) - (self.group1()[3] * other.group0()[2])),
                    ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            (-(swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]))
                + (swizzle!(other.group0(), 3, 0, 3, 2) * Simd32x4::from([self.group1()[0], self.group2()[2], self.group1()[2], self.group2()[2]]))
                + (swizzle!(other.group0(), 2, 3, 1, 1) * Simd32x4::from([self.group2()[1], self.group1()[1], self.group2()[0], self.group2()[1]]))
                + Simd32x4::from([0.0, 0.0, 0.0, (self.group2()[0] * other.group0()[0])])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[2]]))
                + (swizzle!(self.group1(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other[e4315]]))
                + Simd32x4::from([
                    (-(self.group2()[0] * other[e4315]) + (self.group0()[0] * other.group0()[3])),
                    (-(self.group2()[1] * other[e4315]) + (self.group0()[1] * other.group0()[3])),
                    (-(self.group2()[2] * other[e4315]) + (self.group0()[2] * other.group0()[3])),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      124      156        0
    //    simd3        0        2        0
    //    simd4       41       42        0
    // Totals...
    // yes simd      165      200        0
    //  no simd      288      330        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[2]]))
                + (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group2()[2]]))
                + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group2()[1]]))
                + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group2()[0]]))
                + Simd32x4::from([
                    (-(self.group1()[2] * other.group0()[1])
                        - (self.group1()[0] * other.group3()[3])
                        - (self.group0()[2] * other.group1()[1])
                        - (self.group0()[1] * other.group3()[2])
                        - (self.group0()[0] * other.group0()[3])),
                    (-(self.group1()[1] * other.group3()[3])
                        - (self.group1()[0] * other.group0()[2])
                        - (self.group0()[2] * other.group3()[0])
                        - (self.group0()[1] * other.group0()[3])
                        - (self.group0()[0] * other.group1()[2])),
                    (-(self.group1()[2] * other.group3()[3])
                        - (self.group1()[1] * other.group0()[0])
                        - (self.group0()[2] * other.group0()[3])
                        - (self.group0()[1] * other.group1()[0])
                        - (self.group0()[0] * other.group3()[1])),
                    ((self.group2()[1] * other.group0()[1])
                        + (self.group2()[0] * other.group0()[0])
                        + (self.group1()[2] * other.group1()[2])
                        + (self.group1()[1] * other.group1()[1])
                        + (self.group1()[0] * other.group1()[0])),
                ])),
            // e23, e31, e12, e45
            ((swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group2()[2]]))
                - (swizzle!(other.group3(), 3, 3, 3, 2) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[2]]))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group3(), 0, 1, 2, 1))
                - (swizzle!(self.group1(), 2, 1, 2, 0) * Simd32x4::from([other.group1()[1], other.group0()[3], other.group0()[3], other.group3()[0]]))
                + (swizzle!(self.group1(), 1, 2, 0, 3) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[3]]))
                - (swizzle!(other.group2(), 1, 2, 3, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[2], self.group0()[2]]))
                - (swizzle!(other.group2(), 3, 3, 0, 0) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[1], self.group0()[0]]))
                + Simd32x4::from([
                    (-(self.group2()[2] * other.group0()[1]) - (self.group1()[0] * other.group0()[3]) + (self.group0()[1] * other.group2()[2])),
                    (-(self.group2()[0] * other.group0()[2]) - (self.group1()[0] * other.group1()[2]) + (self.group0()[2] * other.group2()[0])),
                    (-(self.group2()[1] * other.group0()[0]) - (self.group1()[1] * other.group1()[0]) + (self.group0()[0] * other.group2()[1])),
                    ((self.group2()[1] * other.group0()[1]) + (self.group2()[0] * other.group0()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
            // e15, e25, e35, e1234
            (-(swizzle!(other.group3(), 1, 2, 0, 3) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]))
                + (swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[2]]))
                + (swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[2]]))
                + (swizzle!(self.group1(), 1, 2, 0, 1) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[1]]))
                + Simd32x4::from([
                    (-(self.group2()[2] * other.group1()[1]) + (self.group2()[1] * other.group3()[2])
                        - (self.group2()[0] * other.group1()[3])
                        - (self.group2()[0] * other.group0()[3])
                        - (self.group1()[2] * other.group2()[1])
                        - (self.group1()[0] * other.group2()[3])),
                    ((self.group2()[2] * other.group3()[0])
                        - (self.group2()[1] * other.group1()[3])
                        - (self.group2()[1] * other.group0()[3])
                        - (self.group2()[0] * other.group1()[2])
                        - (self.group1()[0] * other.group2()[2])
                        - (self.group1()[1] * other.group2()[3])),
                    (-(self.group2()[2] * other.group1()[3]) - (self.group2()[2] * other.group0()[3]) - (self.group2()[1] * other.group1()[0])
                        + (self.group2()[0] * other.group3()[1])
                        - (self.group1()[2] * other.group2()[3])
                        - (self.group1()[1] * other.group2()[0])),
                    ((self.group1()[0] * other.group0()[0]) - (self.group0()[2] * other.group3()[2]) - (self.group0()[1] * other.group3()[1])
                        + (self.group0()[1] * other.group1()[1])
                        + (self.group0()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group3()[0])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group1(), 0, 1, 2, 2) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[2]]))
                + (swizzle!(self.group1(), 2, 1, 2, 3) * Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group2()[3]]))
                + (swizzle!(self.group1(), 0, 0, 1, 2) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group2()[2]]))
                + (swizzle!(other.group2(), 1, 2, 3, 0) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[2], self.group1()[0]]))
                + (swizzle!(other.group2(), 3, 3, 0, 1) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[1], self.group1()[1]]))
                + Simd32x4::from([
                    (-(self.group2()[2] * other.group0()[1]) + (self.group2()[1] * other.group0()[2])
                        - (self.group2()[0] * other.group3()[3])
                        - (self.group1()[1] * other.group3()[2])
                        - (self.group0()[1] * other.group2()[2])),
                    ((self.group2()[2] * other.group0()[0])
                        - (self.group2()[1] * other.group3()[3])
                        - (self.group2()[0] * other.group0()[2])
                        - (self.group1()[2] * other.group3()[0])
                        - (self.group0()[2] * other.group2()[0])),
                    (-(self.group2()[2] * other.group3()[3]) - (self.group2()[1] * other.group0()[0]) + (self.group2()[0] * other.group0()[1])
                        - (self.group1()[0] * other.group3()[1])
                        - (self.group0()[0] * other.group2()[1])),
                    ((self.group2()[2] * other.group3()[2])
                        + (self.group2()[1] * other.group3()[1])
                        + (self.group2()[1] * other.group1()[1])
                        + (self.group2()[0] * other.group3()[0])
                        + (self.group2()[0] * other.group1()[0])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      128      160        0
    //    simd3        0        2        0
    //    simd4       40       41        0
    // Totals...
    // yes simd      168      203        0
    //  no simd      288      330        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[2]]))
                - (swizzle!(other.group1(), 2, 0, 1, 3) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[3]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group0()[0])
                        + (self.group1()[2] * other.group0()[1])
                        + (self.group1()[0] * other.group2()[3])
                        + (self.group0()[2] * other.group3()[1])
                        + (self.group0()[2] * other.group1()[1])
                        - (self.group0()[1] * other.group3()[2])
                        + (self.group0()[0] * other.group0()[3])
                        + (self.group0()[0] * other.group1()[3])),
                    ((self.group1()[3] * other.group0()[1]) + (self.group1()[1] * other.group2()[3]) + (self.group1()[0] * other.group0()[2])
                        - (self.group0()[2] * other.group3()[0])
                        + (self.group0()[1] * other.group1()[3])
                        + (self.group0()[1] * other.group0()[3])
                        + (self.group0()[0] * other.group1()[2])
                        + (self.group0()[0] * other.group3()[2])),
                    ((self.group1()[3] * other.group0()[2])
                        + (self.group1()[2] * other.group2()[3])
                        + (self.group1()[1] * other.group0()[0])
                        + (self.group0()[2] * other.group1()[3])
                        + (self.group0()[2] * other.group0()[3])
                        + (self.group0()[1] * other.group3()[0])
                        + (self.group0()[1] * other.group1()[0])
                        - (self.group0()[0] * other.group3()[1])),
                    (-(self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[2] * other.group1()[2])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e321
            ((swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group2()[2]]))
                + (swizzle!(self.group1(), 2, 1, 2, 3) * Simd32x4::from([other.group1()[1], other.group0()[3], other.group0()[3], other.group0()[3]]))
                + (swizzle!(self.group1(), 0, 0, 1, 2) * Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group3()[2]]))
                + (swizzle!(other.group3(), 3, 3, 3, 1) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]))
                - (swizzle!(other.group2(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group2()[1] * other.group0()[2]) + (self.group2()[0] * other.group2()[3])
                        - (self.group1()[3] * other.group3()[0])
                        - (self.group1()[1] * other.group1()[2])
                        + (self.group0()[2] * other.group2()[1])),
                    (-(self.group2()[2] * other.group0()[0]) + (self.group2()[1] * other.group2()[3])
                        - (self.group1()[3] * other.group3()[1])
                        - (self.group1()[2] * other.group1()[0])
                        + (self.group0()[0] * other.group2()[2])),
                    ((self.group2()[2] * other.group2()[3])
                        - (self.group2()[0] * other.group0()[1])
                        - (self.group1()[3] * other.group3()[2])
                        - (self.group1()[0] * other.group1()[1])
                        + (self.group0()[1] * other.group2()[0])),
                    ((self.group2()[1] * other.group0()[1]) + (self.group2()[0] * other.group0()[0]) + (self.group1()[0] * other.group3()[0])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e235, e315, e125, e5
            (-(Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group1()[2]]))
                + (Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group0()[3], other.group3()[2]]))
                + (Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group3()[2], other.group0()[3], other.group1()[0], other.group3()[1]]))
                - (Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group1()[1]]))
                - (Simd32x4::from(self.group2()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group1()[0]]))
                + (Simd32x4::from(self.group2()[0]) * Simd32x4::from([other.group0()[3], other.group1()[2], other.group3()[1], other.group3()[0]]))
                - (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * swizzle!(other.group2(), 2, 0, 1, 2))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group2()[1]) + (self.group1()[0] * other.group3()[3])),
                    ((self.group1()[0] * other.group2()[2]) + (self.group1()[1] * other.group3()[3])),
                    ((self.group1()[2] * other.group3()[3]) + (self.group1()[1] * other.group2()[0])),
                    (-(self.group1()[0] * other.group2()[0]) - (self.group1()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[2]]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                - (swizzle!(self.group1(), 2, 1, 2, 1) * Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group0()[1]]))
                - (swizzle!(self.group1(), 0, 0, 1, 0) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group0()[0]]))
                + Simd32x4::from([
                    ((self.group2()[1] * other.group0()[2]) - (self.group2()[0] * other.group2()[3])
                        + (self.group1()[1] * other.group3()[2])
                        + (self.group0()[2] * other.group2()[1])
                        + (self.group0()[0] * other.group3()[3])
                        - (self.group0()[1] * other.group2()[2])),
                    ((self.group2()[2] * other.group0()[0]) - (self.group2()[1] * other.group2()[3]) + (self.group1()[2] * other.group3()[0])
                        - (self.group0()[2] * other.group2()[0])
                        + (self.group0()[0] * other.group2()[2])
                        + (self.group0()[1] * other.group3()[3])),
                    (-(self.group2()[2] * other.group2()[3])
                        + (self.group2()[0] * other.group0()[1])
                        + (self.group1()[0] * other.group3()[1])
                        + (self.group0()[2] * other.group3()[3])
                        - (self.group0()[0] * other.group2()[1])
                        + (self.group0()[1] * other.group2()[0])),
                    (-(self.group0()[2] * other.group3()[2])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[1] * other.group3()[1])
                        - (self.group0()[1] * other.group1()[1])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group3()[0])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl InfixSandwich for CircleRotor {}
impl Sandwich<AntiScalar> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64       89        0
    //    simd3        0        1        0
    //    simd4       24       29        0
    // Totals...
    // yes simd       88      119        0
    //  no simd      160      208        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(other[e12345]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]) * Simd32x4::from(-1.0)),
            // e23, e31, e12, e45
            (self.group1() * Simd32x4::from(other[e12345]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group2()[0] * other[e12345] * -1.0),
                (self.group2()[1] * other[e12345] * -1.0),
                (self.group2()[2] * other[e12345] * -1.0),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(0.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      114      149        0
    //    simd3        0        1        0
    //    simd4       35       36        0
    // Totals...
    // yes simd      149      186        0
    //  no simd      254      296        0
    fn sandwich(self, other: Circle) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + (swizzle!(other.group1(), 3, 0, 3, 1) * Simd32x4::from([self.group0()[0], self.group0()[2], self.group0()[2], self.group1()[1]]))
                + (swizzle!(other.group1(), 2, 3, 1, 0) * Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[0], self.group1()[0]]))
                + Simd32x4::from([
                    (-(self.group2()[3] * other.group0()[0]) - (self.group1()[2] * other.group0()[1]) - (self.group0()[2] * other.group1()[1])),
                    (-(self.group2()[3] * other.group0()[1]) - (self.group1()[0] * other.group0()[2]) - (self.group0()[0] * other.group1()[2])),
                    (-(self.group2()[3] * other.group0()[2]) - (self.group1()[1] * other.group0()[0]) - (self.group0()[1] * other.group1()[0])),
                    ((self.group2()[2] * other.group0()[2])
                        + (self.group2()[1] * other.group0()[1])
                        + (self.group2()[0] * other.group0()[0])
                        + (self.group0()[2] * other.group2()[2])
                        + (self.group0()[0] * other.group2()[0])
                        + (self.group0()[1] * other.group2()[1])),
                ])),
            // e23, e31, e12, e45
            ((swizzle!(self.group2(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]))
                + Simd32x4::from([
                    (-(self.group2()[3] * other.group1()[0]) - (self.group2()[2] * other.group0()[1]) - (self.group1()[2] * other.group1()[1])
                        + (self.group1()[1] * other.group1()[2])
                        + (self.group0()[1] * other.group2()[2])
                        - (self.group0()[2] * other.group2()[1])),
                    (-(self.group2()[3] * other.group1()[1]) - (self.group2()[0] * other.group0()[2]) + (self.group1()[2] * other.group1()[0])
                        - (self.group1()[0] * other.group1()[2])
                        - (self.group0()[0] * other.group2()[2])
                        + (self.group0()[2] * other.group2()[0])),
                    (-(self.group2()[3] * other.group1()[2]) - (self.group2()[1] * other.group0()[0]) - (self.group1()[1] * other.group1()[0])
                        + (self.group1()[0] * other.group1()[1])
                        + (self.group0()[0] * other.group2()[1])
                        - (self.group0()[1] * other.group2()[0])),
                    ((self.group2()[2] * other.group0()[2]) + (self.group2()[1] * other.group0()[1]) + (self.group2()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e15, e25, e35, e1234
            ((swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[2]]))
                + (swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[2]]))
                + (swizzle!(self.group1(), 1, 2, 0, 1) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[1]]))
                + Simd32x4::from([
                    (-(self.group2()[3] * other.group2()[0])
                        - (self.group2()[2] * other.group1()[1])
                        - (self.group2()[0] * other.group1()[3])
                        - (self.group1()[2] * other.group2()[1])),
                    (-(self.group2()[3] * other.group2()[1])
                        - (self.group2()[1] * other.group1()[3])
                        - (self.group2()[0] * other.group1()[2])
                        - (self.group1()[0] * other.group2()[2])),
                    (-(self.group2()[3] * other.group2()[2])
                        - (self.group2()[2] * other.group1()[3])
                        - (self.group2()[1] * other.group1()[0])
                        - (self.group1()[1] * other.group2()[0])),
                    ((self.group1()[0] * other.group0()[0]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(self.group2(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + (swizzle!(other.group1(), 0, 1, 2, 1) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[1]]))
                + (swizzle!(other.group1(), 3, 3, 3, 0) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[0]]))
                + Simd32x4::from([
                    (-(self.group2()[2] * other.group0()[1]) - (self.group0()[1] * other.group2()[2]) + (self.group0()[2] * other.group2()[1])),
                    (-(self.group2()[0] * other.group0()[2]) + (self.group0()[0] * other.group2()[2]) - (self.group0()[2] * other.group2()[0])),
                    (-(self.group2()[1] * other.group0()[0]) - (self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0])),
                    ((self.group1()[2] * other.group2()[2]) + (self.group1()[0] * other.group2()[0]) + (self.group1()[1] * other.group2()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      105      140        0
    //    simd3        0        1        0
    //    simd4       40       41        0
    // Totals...
    // yes simd      145      182        0
    //  no simd      265      307        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + (swizzle!(other.group1(), 2, 0, 3, 1) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[2], self.group1()[1]]))
                + (swizzle!(other.group1(), 3, 3, 1, 0) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group1()[0]]))
                + Simd32x4::from([
                    (-(self.group1()[2] * other.group0()[1]) - (self.group0()[2] * other.group1()[1]) - (self.group0()[0] * other.group2()[3])),
                    (-(self.group1()[0] * other.group0()[2]) - (self.group0()[1] * other.group2()[3]) - (self.group0()[0] * other.group1()[2])),
                    (-(self.group1()[1] * other.group0()[0]) - (self.group0()[2] * other.group2()[3]) - (self.group0()[1] * other.group1()[0])),
                    ((self.group2()[2] * other.group0()[2])
                        + (self.group2()[1] * other.group0()[1])
                        + (self.group2()[0] * other.group0()[0])
                        + (self.group0()[2] * other.group2()[2])
                        + (self.group0()[0] * other.group2()[0])
                        + (self.group0()[1] * other.group2()[1])),
                ])),
            // e23, e31, e12, e45
            ((swizzle!(self.group2(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]))
                + (swizzle!(self.group1(), 1, 2, 0, 3) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[3]]))
                - (swizzle!(other.group2(), 3, 3, 3, 2) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[2]]))
                - (swizzle!(other.group2(), 1, 2, 0, 0) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]))
                + Simd32x4::from([
                    (-(self.group2()[3] * other.group1()[0]) - (self.group2()[2] * other.group0()[1]) - (self.group1()[2] * other.group1()[1])
                        + (self.group0()[1] * other.group2()[2])),
                    (-(self.group2()[3] * other.group1()[1]) - (self.group2()[0] * other.group0()[2]) - (self.group1()[0] * other.group1()[2])
                        + (self.group0()[2] * other.group2()[0])),
                    (-(self.group2()[3] * other.group1()[2]) - (self.group2()[1] * other.group0()[0]) - (self.group1()[1] * other.group1()[0])
                        + (self.group0()[0] * other.group2()[1])),
                    ((self.group2()[2] * other.group0()[2]) + (self.group2()[1] * other.group0()[1]) + (self.group2()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e15, e25, e35, e1234
            ((swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[2]]))
                + (swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[2]]))
                + (swizzle!(self.group1(), 1, 2, 0, 1) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[1]]))
                + Simd32x4::from([
                    (-(self.group2()[3] * other.group2()[0])
                        - (self.group2()[2] * other.group1()[1])
                        - (self.group2()[0] * other.group2()[3])
                        - (self.group2()[0] * other.group1()[3])
                        - (self.group1()[2] * other.group2()[1])),
                    (-(self.group2()[3] * other.group2()[1])
                        - (self.group2()[1] * other.group2()[3])
                        - (self.group2()[1] * other.group1()[3])
                        - (self.group2()[0] * other.group1()[2])
                        - (self.group1()[0] * other.group2()[2])),
                    (-(self.group2()[3] * other.group2()[2])
                        - (self.group2()[2] * other.group2()[3])
                        - (self.group2()[2] * other.group1()[3])
                        - (self.group2()[1] * other.group1()[0])
                        - (self.group1()[1] * other.group2()[0])),
                    ((self.group1()[0] * other.group0()[0]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(self.group2(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + (swizzle!(other.group1(), 0, 1, 2, 1) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[1]]))
                + (swizzle!(other.group1(), 3, 3, 3, 0) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[0]]))
                + (swizzle!(other.group2(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    (-(self.group2()[2] * other.group0()[1]) - (self.group0()[1] * other.group2()[2])),
                    (-(self.group2()[0] * other.group0()[2]) - (self.group0()[2] * other.group2()[0])),
                    (-(self.group2()[1] * other.group0()[0]) - (self.group0()[0] * other.group2()[1])),
                    ((self.group1()[0] * other.group2()[0]) + (self.group1()[1] * other.group2()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       98      129        0
    //    simd3        0        1        0
    //    simd4       39       42        0
    // Totals...
    // yes simd      137      172        0
    //  no simd      254      300        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(self.group1(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]))
                - (swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group2()[3] * other.group0()[0])
                        + (self.group1()[3] * other.group0()[0])
                        + (self.group1()[2] * other.group0()[1])
                        + (self.group0()[2] * other.group1()[1])
                        + (self.group0()[0] * other.group1()[3])),
                    ((self.group2()[3] * other.group0()[1])
                        + (self.group1()[3] * other.group0()[1])
                        + (self.group1()[0] * other.group0()[2])
                        + (self.group0()[0] * other.group1()[2])
                        + (self.group0()[1] * other.group1()[3])),
                    ((self.group2()[3] * other.group0()[2])
                        + (self.group1()[3] * other.group0()[2])
                        + (self.group1()[1] * other.group0()[0])
                        + (self.group0()[2] * other.group1()[3])
                        + (self.group0()[1] * other.group1()[0])),
                    (-(self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e321
            ((swizzle!(self.group2(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]))
                + (swizzle!(self.group2(), 2, 0, 1, 1) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[1]]))
                - (swizzle!(self.group2(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group1()[1]) - (self.group1()[1] * other.group1()[2]) - (self.group0()[1] * other.group2()[2])
                        + (self.group0()[2] * other.group2()[1])),
                    (-(self.group1()[2] * other.group1()[0]) + (self.group1()[0] * other.group1()[2]) + (self.group0()[0] * other.group2()[2])
                        - (self.group0()[2] * other.group2()[0])),
                    ((self.group1()[1] * other.group1()[0]) - (self.group1()[0] * other.group1()[1]) - (self.group0()[0] * other.group2()[1])
                        + (self.group0()[1] * other.group2()[0])),
                    ((self.group2()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e235, e315, e125, e5
            (-(swizzle!(self.group2(), 1, 2, 2, 2) * swizzle!(other.group1(), 2, 0, 3, 2))
                - (swizzle!(self.group2(), 0, 1, 0, 1) * swizzle!(other.group1(), 3, 3, 1, 1))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group2()[2]]))
                - (swizzle!(self.group1(), 1, 2, 0, 0) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group2()[0]]))
                + Simd32x4::from([
                    ((self.group2()[3] * other.group2()[0]) + (self.group2()[2] * other.group1()[1]) + (self.group1()[2] * other.group2()[1])),
                    ((self.group2()[3] * other.group2()[1]) + (self.group2()[0] * other.group1()[2]) + (self.group1()[0] * other.group2()[2])),
                    ((self.group2()[3] * other.group2()[2]) + (self.group2()[1] * other.group1()[0]) + (self.group1()[1] * other.group2()[0])),
                    (-(self.group2()[0] * other.group1()[0]) - (self.group1()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(self.group1(), 0, 1, 2, 2) * Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group2()[2] * other.group0()[1]) + (self.group2()[1] * other.group0()[2]) + (self.group1()[3] * other.group1()[0])
                        - (self.group0()[1] * other.group2()[2])
                        + (self.group0()[2] * other.group2()[1])),
                    ((self.group2()[2] * other.group0()[0]) - (self.group2()[0] * other.group0()[2])
                        + (self.group1()[3] * other.group1()[1])
                        + (self.group0()[0] * other.group2()[2])
                        - (self.group0()[2] * other.group2()[0])),
                    (-(self.group2()[1] * other.group0()[0]) + (self.group2()[0] * other.group0()[1]) + (self.group1()[3] * other.group1()[2])
                        - (self.group0()[0] * other.group2()[1])
                        + (self.group0()[1] * other.group2()[0])),
                    (-(self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      101      132        0
    //    simd3        0        1        0
    //    simd4       52       55        0
    // Totals...
    // yes simd      153      188        0
    //  no simd      309      355        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(self.group1(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]))
                - (swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group2()[3] * other.group0()[0])
                        + (self.group1()[3] * other.group0()[0])
                        + (self.group1()[2] * other.group0()[1])
                        + (self.group1()[0] * other.group2()[3])
                        + (self.group0()[2] * other.group3()[1])
                        + (self.group0()[2] * other.group1()[1])
                        - (self.group0()[1] * other.group3()[2])
                        + (self.group0()[0] * other.group1()[3])),
                    ((self.group2()[3] * other.group0()[1])
                        + (self.group1()[3] * other.group0()[1])
                        + (self.group1()[1] * other.group2()[3])
                        + (self.group1()[0] * other.group0()[2])
                        - (self.group0()[2] * other.group3()[0])
                        + (self.group0()[1] * other.group1()[3])
                        + (self.group0()[0] * other.group1()[2])
                        + (self.group0()[0] * other.group3()[2])),
                    ((self.group2()[3] * other.group0()[2])
                        + (self.group1()[3] * other.group0()[2])
                        + (self.group1()[2] * other.group2()[3])
                        + (self.group1()[1] * other.group0()[0])
                        + (self.group0()[2] * other.group1()[3])
                        + (self.group0()[1] * other.group3()[0])
                        + (self.group0()[1] * other.group1()[0])
                        - (self.group0()[0] * other.group3()[1])),
                    (-(self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e321
            ((swizzle!(self.group2(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]))
                + (swizzle!(self.group2(), 2, 1, 2, 1) * Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group0()[1]]))
                - (swizzle!(self.group2(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]))
                + (swizzle!(self.group2(), 0, 0, 1, 0) * Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group0()[0]]))
                + (swizzle!(self.group1(), 2, 0, 1, 2) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[2]]))
                + (swizzle!(other.group3(), 3, 3, 3, 1) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]))
                - (swizzle!(other.group2(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group1()[3] * other.group3()[0]) - (self.group1()[1] * other.group1()[2]) + (self.group0()[2] * other.group2()[1])),
                    (-(self.group1()[3] * other.group3()[1]) - (self.group1()[2] * other.group1()[0]) + (self.group0()[0] * other.group2()[2])),
                    (-(self.group1()[3] * other.group3()[2]) - (self.group1()[0] * other.group1()[1]) + (self.group0()[1] * other.group2()[0])),
                    ((self.group1()[0] * other.group3()[0]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                - (Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group1()[2]]))
                + (swizzle!(self.group2(), 2, 2, 1, 2) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[0], other.group3()[2]]))
                + (swizzle!(self.group2(), 1, 0, 0, 1) * Simd32x4::from([other.group3()[2], other.group1()[2], other.group3()[1], other.group3()[1]]))
                - (Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group1()[1]]))
                - (Simd32x4::from(self.group2()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group1()[0]]))
                - (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                + (swizzle!(other.group3(), 3, 3, 3, 0) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[0]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * swizzle!(other.group2(), 2, 0, 1, 2))
                + Simd32x4::from([
                    (self.group1()[2] * other.group2()[1]),
                    (self.group1()[0] * other.group2()[2]),
                    (self.group1()[1] * other.group2()[0]),
                    (-(self.group1()[0] * other.group2()[0]) - (self.group1()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group3(), 0, 1, 2, 2) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[2]]))
                + (swizzle!(self.group2(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                - (swizzle!(self.group1(), 2, 1, 2, 2) * Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group0()[2]]))
                - (swizzle!(self.group1(), 0, 0, 1, 1) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group0()[1]]))
                + Simd32x4::from([
                    (-(self.group2()[2] * other.group0()[1]) - (self.group2()[0] * other.group2()[3])
                        + (self.group1()[1] * other.group3()[2])
                        + (self.group0()[2] * other.group2()[1])
                        + (self.group0()[0] * other.group3()[3])
                        - (self.group0()[1] * other.group2()[2])),
                    (-(self.group2()[1] * other.group2()[3]) - (self.group2()[0] * other.group0()[2]) + (self.group1()[2] * other.group3()[0])
                        - (self.group0()[2] * other.group2()[0])
                        + (self.group0()[0] * other.group2()[2])
                        + (self.group0()[1] * other.group3()[3])),
                    (-(self.group2()[2] * other.group2()[3]) - (self.group2()[1] * other.group0()[0])
                        + (self.group1()[0] * other.group3()[1])
                        + (self.group0()[2] * other.group3()[3])
                        - (self.group0()[0] * other.group2()[1])
                        + (self.group0()[1] * other.group2()[0])),
                    (-(self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[1] * other.group3()[1])
                        - (self.group0()[1] * other.group1()[1])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group3()[0])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       71      101        0
    //    simd3        0        1        0
    //    simd4       24       27        0
    // Totals...
    // yes simd       95      129        0
    //  no simd      167      212        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]) * Simd32x4::from(-1.0)),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[0]) - (self.group1()[0] * other.group0()[1])),
                (-(self.group0()[1] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                (-(self.group0()[2] * other.group0()[0]) - (self.group1()[2] * other.group0()[1])),
                (self.group1()[3] * other.group0()[1]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group1()[0] * other.group0()[0]) - (self.group2()[0] * other.group0()[1])),
                (-(self.group1()[1] * other.group0()[0]) - (self.group2()[1] * other.group0()[1])),
                (-(self.group1()[2] * other.group0()[0]) - (self.group2()[2] * other.group0()[1])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[2] * other.group0()[0]),
                ((self.group1()[3] * other.group0()[0]) - (self.group2()[3] * other.group0()[0])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       58       87        0
    //    simd3        0        1        0
    //    simd4       33       36        0
    // Totals...
    // yes simd       91      124        0
    //  no simd      190      234        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group1()[3] * other.group0()[3])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e321
            (-(swizzle!(other.group0(), 2, 0, 1, 3) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group2()[3]]))
                + Simd32x4::from([
                    (self.group0()[2] * other.group0()[1]),
                    (self.group0()[0] * other.group0()[2]),
                    (self.group0()[1] * other.group0()[0]),
                    (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            (-(swizzle!(other.group0(), 3, 3, 3, 2) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[2]]))
                - (swizzle!(self.group1(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))
                - (swizzle!(self.group1(), 1, 2, 0, 1) * swizzle!(other.group0(), 2, 0, 1, 1))
                + Simd32x4::from([
                    ((self.group2()[3] * other.group0()[0]) + (self.group1()[2] * other.group0()[1])),
                    ((self.group2()[3] * other.group0()[1]) + (self.group1()[0] * other.group0()[2])),
                    ((self.group2()[3] * other.group0()[2]) + (self.group1()[1] * other.group0()[0])),
                    0.0,
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group1()[0] * other.group0()[3]) - (self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                (-(self.group1()[1] * other.group0()[3]) + (self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group1()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       72      104        0
    //    simd3        0        1        0
    //    simd4       40       43        0
    // Totals...
    // yes simd      112      148        0
    //  no simd      232      279        0
    fn sandwich(self, other: Flector) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[2] * other.group1()[1]) + (self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group1()[2])),
                (-(self.group0()[2] * other.group1()[0]) + (self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[3])),
                ((self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
                (-(self.group1()[3] * other.group0()[3])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e321
            ((swizzle!(other.group1(), 3, 3, 3, 2) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]]))
                - (swizzle!(other.group0(), 2, 0, 1, 3) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group2()[3]]))
                + Simd32x4::from([
                    (-(self.group1()[3] * other.group1()[0]) + (self.group0()[2] * other.group0()[1])),
                    (-(self.group1()[3] * other.group1()[1]) + (self.group0()[0] * other.group0()[2])),
                    (-(self.group1()[3] * other.group1()[2]) + (self.group0()[1] * other.group0()[0])),
                    ((self.group1()[1] * other.group1()[1]) + (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group0()[2])
                        - (self.group0()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (swizzle!(other.group1(), 1, 2, 0, 3) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]))
                + (swizzle!(self.group2(), 1, 2, 0, 2) * swizzle!(other.group1(), 2, 0, 1, 2))
                - (swizzle!(other.group0(), 3, 3, 3, 2) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[2]]))
                - (swizzle!(self.group1(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))
                + (swizzle!(other.group1(), 3, 3, 3, 1) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[1]]))
                - (swizzle!(self.group1(), 1, 2, 0, 1) * swizzle!(other.group0(), 2, 0, 1, 1))
                + Simd32x4::from([
                    (self.group1()[2] * other.group0()[1]),
                    (self.group1()[0] * other.group0()[2]),
                    (self.group1()[1] * other.group0()[0]),
                    (self.group2()[0] * other.group1()[0]),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group1(), 0, 1, 2, 2) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[2]]))
                - (swizzle!(other.group1(), 1, 2, 0, 0) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]))
                + Simd32x4::from([
                    ((self.group1()[1] * other.group1()[2]) - (self.group1()[0] * other.group0()[3])
                        + (self.group0()[2] * other.group0()[1])
                        + (self.group0()[0] * other.group1()[3])
                        - (self.group0()[1] * other.group0()[2])),
                    ((self.group1()[2] * other.group1()[0]) - (self.group1()[1] * other.group0()[3]) - (self.group0()[2] * other.group0()[0])
                        + (self.group0()[0] * other.group0()[2])
                        + (self.group0()[1] * other.group1()[3])),
                    (-(self.group1()[2] * other.group0()[3]) + (self.group1()[0] * other.group1()[1]) + (self.group0()[2] * other.group1()[3])
                        - (self.group0()[0] * other.group0()[1])
                        + (self.group0()[1] * other.group0()[0])),
                    ((self.group0()[1] * other.group1()[1]) * -1.0),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      110      145        0
    //    simd3        0        1        0
    //    simd4       25       26        0
    // Totals...
    // yes simd      135      172        0
    //  no simd      210      252        0
    fn sandwich(self, other: Line) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                ((self.group1()[2] * other.group0()[2])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[0] * other.group0()[0])
                    + (self.group0()[2] * other.group1()[2])
                    + (self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group2()[3] * other.group0()[0]) - (self.group1()[2] * other.group0()[1])
                    + (self.group1()[1] * other.group0()[2])
                    + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])),
                (-(self.group2()[3] * other.group0()[1]) + (self.group1()[2] * other.group0()[0])
                    - (self.group1()[0] * other.group0()[2])
                    - (self.group0()[0] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[0])),
                (-(self.group2()[3] * other.group0()[2]) - (self.group1()[1] * other.group0()[0])
                    + (self.group1()[0] * other.group0()[1])
                    + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group2()[3] * other.group1()[0]) - (self.group2()[2] * other.group0()[1])
                    + (self.group2()[1] * other.group0()[2])
                    + (self.group1()[3] * other.group1()[0])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])),
                (-(self.group2()[3] * other.group1()[1]) + (self.group2()[2] * other.group0()[0]) - (self.group2()[0] * other.group0()[2])
                    + (self.group1()[3] * other.group1()[1])
                    - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[0])),
                (-(self.group2()[3] * other.group1()[2]) - (self.group2()[1] * other.group0()[0])
                    + (self.group2()[0] * other.group0()[1])
                    + (self.group1()[3] * other.group1()[2])
                    + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])),
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            ((swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]))
                + Simd32x4::from([
                    (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])),
                    ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0])),
                    (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
                    ((self.group2()[2] * other.group0()[2])
                        + (self.group2()[1] * other.group0()[1])
                        + (self.group2()[0] * other.group0()[0])
                        + (self.group1()[0] * other.group1()[0])
                        + (self.group1()[1] * other.group1()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       99      135        0
    //    simd3        0        1        0
    //    simd4       34       35        0
    // Totals...
    // yes simd      133      171        0
    //  no simd      235      278        0
    fn sandwich(self, other: Motor) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(swizzle!(other.group0(), 1, 2, 3, 3) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[2], self.group2()[3]]))
                + (swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[0] * other.group0()[3]) * -1.0),
                    ((self.group0()[1] * other.group0()[3]) * -1.0),
                    ((self.group0()[1] * other.group0()[0]) * -1.0),
                    ((self.group1()[1] * other.group0()[1])
                        + (self.group1()[0] * other.group0()[0])
                        + (self.group0()[2] * other.group1()[2])
                        + (self.group0()[0] * other.group1()[0])
                        + (self.group0()[1] * other.group1()[1])),
                ])),
            // e23, e31, e12, e45
            ((swizzle!(self.group1(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (swizzle!(other.group1(), 1, 2, 3, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[2], self.group0()[2]]))
                - (swizzle!(other.group1(), 3, 3, 0, 0) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[1], self.group0()[0]]))
                + Simd32x4::from([
                    (-(self.group2()[3] * other.group0()[0]) - (self.group1()[2] * other.group0()[1]) - (self.group1()[0] * other.group0()[3])
                        + (self.group0()[1] * other.group1()[2])),
                    (-(self.group2()[3] * other.group0()[1]) - (self.group1()[1] * other.group0()[3]) - (self.group1()[0] * other.group0()[2])
                        + (self.group0()[2] * other.group1()[0])),
                    (-(self.group2()[3] * other.group0()[2]) - (self.group1()[2] * other.group0()[3]) - (self.group1()[1] * other.group0()[0])
                        + (self.group0()[0] * other.group1()[1])),
                    ((self.group0()[1] * other.group1()[1]) * -1.0),
                ])),
            // e15, e25, e35, e1234
            ((swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group2()[3] * other.group1()[0]) - (self.group2()[2] * other.group0()[1]) - (self.group2()[0] * other.group0()[3])
                        + (self.group1()[3] * other.group1()[0])
                        - (self.group1()[2] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[3])
                        + (self.group1()[1] * other.group1()[2])),
                    (-(self.group2()[3] * other.group1()[1]) - (self.group2()[1] * other.group0()[3]) - (self.group2()[0] * other.group0()[2])
                        + (self.group1()[3] * other.group1()[1])
                        + (self.group1()[2] * other.group1()[0])
                        - (self.group1()[0] * other.group1()[2])
                        - (self.group1()[1] * other.group1()[3])),
                    (-(self.group2()[3] * other.group1()[2]) - (self.group2()[2] * other.group0()[3]) - (self.group2()[1] * other.group0()[0])
                        + (self.group1()[3] * other.group1()[2])
                        - (self.group1()[2] * other.group1()[3])
                        + (self.group1()[0] * other.group1()[1])
                        - (self.group1()[1] * other.group1()[0])),
                    ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[2]]))
                + (swizzle!(other.group1(), 1, 2, 3, 3) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[2], self.group1()[3]]))
                + (swizzle!(other.group1(), 3, 3, 0, 2) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[1], self.group1()[2]]))
                - (swizzle!(other.group1(), 2, 0, 1, 3) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group2()[3]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    ((self.group2()[1] * other.group0()[1])
                        + (self.group2()[0] * other.group0()[0])
                        + (self.group1()[0] * other.group1()[0])
                        + (self.group1()[1] * other.group1()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for CircleRotor {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      206      261        0
    //    simd2        2        2        0
    //    simd3       74       79        0
    //    simd4       52       53        0
    // Totals...
    // yes simd      334      395        0
    //  no simd      640      714        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (-(Simd32x2::from(self.group1()[3]) * Simd32x2::from([other.group5()[3], other.group3()[3]]))
                + Simd32x2::from([
                    (-(self.group2()[3] * other.group0()[1])
                        + (self.group2()[2] * other.group6()[2])
                        + (self.group2()[1] * other.group6()[1])
                        + (self.group2()[0] * other.group6()[0])
                        + (self.group1()[2] * other.group5()[2])
                        + (self.group1()[1] * other.group5()[1])
                        + (self.group1()[0] * other.group5()[0])
                        + (self.group0()[2] * other.group7()[2])
                        + (self.group0()[0] * other.group7()[0])
                        + (self.group0()[1] * other.group7()[1])),
                    ((self.group2()[3] * other.group0()[0])
                        - (self.group2()[2] * other.group4()[2])
                        - (self.group2()[1] * other.group4()[1])
                        - (self.group2()[0] * other.group4()[0])
                        - (self.group1()[2] * other.group10()[0])
                        - (self.group1()[1] * other.group10()[1])
                        - (self.group1()[0] * other.group10()[2])
                        - (self.group0()[2] * other.group3()[2])
                        - (self.group0()[0] * other.group3()[0])
                        - (self.group0()[1] * other.group3()[1])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group8(), 0, 1, 2, 2) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[2]]))
                + (swizzle!(self.group2(), 1, 2, 0, 3) * Simd32x4::from([other.group4()[2], other.group4()[0], other.group4()[1], other[e35]]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group10()[2], other.group10()[1], other.group10()[0], other[e35]]))
                - (swizzle!(self.group1(), 2, 1, 2, 2) * Simd32x4::from([other.group8()[1], other.group3()[3], other.group3()[3], other.group4()[2]]))
                - (swizzle!(self.group1(), 0, 0, 1, 1) * Simd32x4::from([other.group3()[3], other.group8()[2], other.group8()[0], other.group4()[1]]))
                + Simd32x4::from([
                    (-(self.group2()[2] * other.group4()[1]) - (self.group2()[0] * other[e35])
                        + (self.group1()[1] * other.group8()[2])
                        + (self.group0()[2] * other.group3()[1])
                        + (self.group0()[0] * other.group8()[3])
                        - (self.group0()[1] * other.group3()[2])),
                    (-(self.group2()[1] * other[e35]) - (self.group2()[0] * other.group4()[2]) + (self.group1()[2] * other.group8()[0]) - (self.group0()[2] * other.group3()[0])
                        + (self.group0()[0] * other.group3()[2])
                        + (self.group0()[1] * other.group8()[3])),
                    (-(self.group2()[2] * other[e35]) - (self.group2()[1] * other.group4()[0]) + (self.group1()[0] * other.group8()[1]) + (self.group0()[2] * other.group8()[3])
                        - (self.group0()[0] * other.group3()[1])
                        + (self.group0()[1] * other.group3()[0])),
                    (-(self.group1()[0] * other.group4()[0])
                        - (self.group0()[2] * other.group10()[0])
                        - (self.group0()[1] * other.group10()[1])
                        - (self.group0()[1] * other.group8()[1])
                        - (self.group0()[0] * other.group8()[0])
                        - (self.group0()[0] * other.group10()[2])),
                ])),
            // e5
            ((self.group2()[3] * other.group8()[3]) - (self.group2()[2] * other.group10()[0]) + (self.group2()[2] * other.group8()[2]) - (self.group2()[1] * other.group10()[1])
                + (self.group2()[1] * other.group8()[1])
                - (self.group2()[0] * other.group10()[2])
                + (self.group2()[0] * other.group8()[0])
                - (self.group1()[3] * other.group8()[3])
                - (self.group1()[2] * other.group3()[2])
                - (self.group1()[0] * other.group3()[0])
                - (self.group1()[1] * other.group3()[1])),
            // e15, e25, e35, e45
            (-(swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[2]]))
                + (swizzle!(self.group2(), 1, 2, 0, 3) * swizzle!(other.group5(), 2, 0, 1, 3))
                + (swizzle!(self.group2(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group6()[2]]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group0()[1]]))
                - (swizzle!(self.group1(), 2, 0, 2, 1) * Simd32x4::from([other.group7()[1], other.group7()[2], other[e1], other.group1()[1]]))
                - (swizzle!(self.group1(), 0, 1, 1, 0) * Simd32x4::from([other[e1], other[e1], other.group7()[0], other.group1()[0]]))
                + Simd32x4::from([
                    (-(self.group2()[3] * other.group7()[0])
                        - (self.group2()[2] * other.group5()[1])
                        - (self.group2()[0] * other.group5()[3])
                        - (self.group2()[0] * other.group0()[1])
                        + (self.group1()[1] * other.group7()[2])),
                    (-(self.group2()[3] * other.group7()[1])
                        - (self.group2()[1] * other.group5()[3])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group5()[2])
                        + (self.group1()[2] * other.group7()[0])),
                    (-(self.group2()[3] * other.group7()[2])
                        - (self.group2()[2] * other.group5()[3])
                        - (self.group2()[2] * other.group0()[1])
                        - (self.group2()[1] * other.group5()[0])
                        + (self.group1()[0] * other.group7()[1])),
                    ((self.group2()[1] * other.group6()[1]) + (self.group2()[0] * other.group6()[0])
                        - (self.group0()[2] * other.group7()[2])
                        - (self.group0()[0] * other.group7()[0])
                        - (self.group0()[1] * other.group7()[1])),
                ])),
            // e41, e42, e43
            (-(Simd32x3::from(self.group2()[3]) * other.group6())
                - (Simd32x3::from(self.group1()[3]) * other.group6())
                - (swizzle!(other.group6(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))
                + (swizzle!(other.group6(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group5()[1], other.group1()[0], other.group0()[1]]))
                + (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], other.group5()[0], other.group5()[3]]))
                + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group5()[2], other.group5()[3], other.group1()[0]]))
                - (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], other.group0()[1], other.group5()[0]]))
                - (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[1], other.group5()[2], other.group1()[1]]))
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group5()[3], other.group1()[2], other.group5()[1]]))),
            // e415, e425, e435, e321
            ((swizzle!(self.group2(), 3, 3, 3, 2) * Simd32x4::from([other.group10()[2], other.group10()[1], other.group10()[0], other.group4()[2]]))
                + (swizzle!(self.group2(), 2, 1, 2, 1) * Simd32x4::from([other.group4()[1], other[e35], other[e35], other.group4()[1]]))
                - (swizzle!(self.group2(), 1, 2, 0, 3) * Simd32x4::from([other.group4()[2], other.group4()[0], other.group4()[1], other.group3()[3]]))
                + (swizzle!(self.group2(), 0, 0, 1, 0) * Simd32x4::from([other[e35], other.group4()[2], other.group4()[0], other.group4()[0]]))
                + (swizzle!(self.group1(), 2, 1, 2, 3) * Simd32x4::from([other.group10()[1], other.group0()[0], other.group0()[0], other.group0()[0]]))
                + (swizzle!(self.group1(), 0, 0, 1, 2) * Simd32x4::from([other.group0()[0], other.group10()[0], other.group10()[2], other.group8()[2]]))
                + (swizzle!(other.group8(), 3, 3, 3, 1) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]))
                - (swizzle!(other.group3(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group1()[3] * other.group8()[0]) - (self.group1()[1] * other.group10()[0]) + (self.group0()[2] * other.group3()[1])),
                    (-(self.group1()[3] * other.group8()[1]) - (self.group1()[2] * other.group10()[2]) + (self.group0()[0] * other.group3()[2])),
                    (-(self.group1()[3] * other.group8()[2]) - (self.group1()[0] * other.group10()[1]) + (self.group0()[1] * other.group3()[0])),
                    ((self.group1()[0] * other.group8()[0]) - (self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group3()[1])),
                ])),
            // e423, e431, e412
            ((Simd32x3::from(self.group2()[3]) * other.group4())
                + (Simd32x3::from(self.group1()[3]) * other.group4())
                + (swizzle!(other.group4(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))
                - (swizzle!(other.group4(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                + (Simd32x3::from(other[e35]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (swizzle!(self.group0(), 2, 1, 2) * Simd32x3::from([other.group10()[1], other.group3()[3], other.group3()[3]]))
                + (swizzle!(self.group0(), 2, 1, 2) * Simd32x3::from([other.group8()[1], other.group0()[0], other.group0()[0]]))
                - (swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group10()[0], other.group10()[2], other.group8()[1]]))
                - (swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group8()[2], other.group8()[0], other.group10()[1]]))
                + (swizzle!(self.group0(), 0, 0, 1) * Simd32x3::from([other.group0()[0], other.group8()[2], other.group10()[2]]))
                + (swizzle!(self.group0(), 0, 0, 1) * Simd32x3::from([other.group3()[3], other.group10()[0], other.group8()[0]]))),
            // e235, e315, e125
            ((Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from(self.group2()[2]) * Simd32x3::from([other.group10()[1], other.group8()[0], other.group0()[0]]))
                - (Simd32x3::from(self.group2()[2]) * Simd32x3::from([other.group8()[1], other.group10()[2], other.group3()[3]]))
                - (Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group10()[0], other.group3()[3], other.group8()[0]]))
                + (Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group8()[2], other.group0()[0], other.group10()[2]]))
                - (Simd32x3::from(self.group2()[0]) * Simd32x3::from([other.group3()[3], other.group8()[2], other.group10()[1]]))
                + (Simd32x3::from(self.group2()[0]) * Simd32x3::from([other.group0()[0], other.group10()[0], other.group8()[1]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from(other.group8()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + Simd32x3::from([
                    ((self.group1()[2] * other.group3()[1]) - (self.group1()[1] * other.group3()[2])),
                    (-(self.group1()[2] * other.group3()[0]) + (self.group1()[0] * other.group3()[2])),
                    (-(self.group1()[0] * other.group3()[1]) + (self.group1()[1] * other.group3()[0])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(self.group2(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group5()[2]]))
                - (swizzle!(self.group2(), 2, 1, 2, 3) * Simd32x4::from([other.group6()[1], other.group1()[3], other.group1()[3], other[e1]]))
                + (swizzle!(self.group2(), 1, 2, 0, 2) * Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group1()[2]]))
                + (swizzle!(other.group5(), 0, 1, 2, 1) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[1]]))
                + (swizzle!(self.group1(), 2, 1, 2, 3) * Simd32x4::from([other.group1()[1], other.group5()[3], other.group5()[3], other[e1]]))
                + (swizzle!(self.group1(), 0, 0, 1, 2) * Simd32x4::from([other.group5()[3], other.group1()[2], other.group1()[0], other.group7()[2]]))
                + Simd32x4::from([
                    (-(self.group2()[0] * other.group1()[3]) - (self.group1()[1] * other.group1()[2]) + (self.group0()[2] * other.group7()[1]) + (self.group0()[0] * other[e1])
                        - (self.group0()[1] * other.group7()[2])),
                    (-(self.group2()[0] * other.group6()[2]) - (self.group1()[2] * other.group1()[0]) - (self.group0()[2] * other.group7()[0])
                        + (self.group0()[0] * other.group7()[2])
                        + (self.group0()[1] * other[e1])),
                    (-(self.group2()[1] * other.group6()[0]) - (self.group1()[0] * other.group1()[1]) + (self.group0()[2] * other[e1]) - (self.group0()[0] * other.group7()[1])
                        + (self.group0()[1] * other.group7()[0])),
                    ((self.group2()[1] * other.group1()[1])
                        + (self.group2()[0] * other.group5()[0])
                        + (self.group2()[0] * other.group1()[0])
                        + (self.group1()[0] * other.group7()[0])
                        + (self.group1()[1] * other.group7()[1])),
                ])),
            // e1234
            (-(self.group2()[3] * other.group1()[3]) - (self.group1()[3] * other.group1()[3])
                + (self.group1()[2] * other.group6()[2])
                + (self.group1()[1] * other.group6()[1])
                + (self.group1()[0] * other.group6()[0])
                + (self.group0()[2] * other.group5()[2])
                - (self.group0()[2] * other.group1()[2])
                + (self.group0()[1] * other.group5()[1])
                - (self.group0()[1] * other.group1()[1])
                - (self.group0()[0] * other.group1()[0])
                + (self.group0()[0] * other.group5()[0])),
            // e12, e31, e23
            (-(Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group5()[2], other.group5()[1], other.group5()[0]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group2()[2], self.group2()[1], self.group2()[0]]))
                - (swizzle!(other.group6(), 0, 2, 1) * Simd32x3::from([self.group2()[1], self.group2()[0], self.group2()[2]]))
                + (swizzle!(other.group6(), 1, 0, 2) * Simd32x3::from([self.group2()[0], self.group2()[2], self.group2()[1]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[2], other.group1()[1], other.group1()[0]]))
                - (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group1()[2], self.group1()[1], self.group1()[0]]))
                - (swizzle!(self.group0(), 2, 0, 2) * Simd32x3::from([other[e1], other.group7()[2], other.group7()[1]]))
                + (swizzle!(self.group0(), 0, 2, 1) * swizzle!(other.group7(), 1, 0, 2))
                - (swizzle!(self.group0(), 1, 1, 0) * Simd32x3::from([other.group7()[0], other[e1], other[e1]]))
                + Simd32x3::from([
                    (-(self.group1()[1] * other.group5()[0]) + (self.group1()[0] * other.group5()[1])),
                    ((self.group1()[2] * other.group5()[0]) - (self.group1()[0] * other.group5()[2])),
                    (-(self.group1()[2] * other.group5()[1]) + (self.group1()[1] * other.group5()[2])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       52       83        0
    //    simd3        0        1        0
    //    simd4       35       38        0
    // Totals...
    // yes simd       87      122        0
    //  no simd      192      238        0
    fn sandwich(self, other: Plane) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
            // e415, e425, e435, e321
            ((swizzle!(other.group0(), 3, 3, 3, 2) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group0()[0]) * -1.0),
                    ((self.group1()[3] * other.group0()[1]) * -1.0),
                    ((self.group1()[3] * other.group0()[2]) * -1.0),
                    ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            (-(swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]))
                + (swizzle!(other.group0(), 3, 0, 3, 3) * Simd32x4::from([self.group1()[0], self.group2()[2], self.group1()[2], self.group2()[3]]))
                + (swizzle!(other.group0(), 2, 3, 1, 2) * Simd32x4::from([self.group2()[1], self.group1()[1], self.group2()[0], self.group2()[2]]))
                + Simd32x4::from([0.0, 0.0, 0.0, ((self.group2()[1] * other.group0()[1]) + (self.group2()[0] * other.group0()[0]))])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[2]]))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]))
                + Simd32x4::from([
                    ((self.group0()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2])),
                    ((self.group1()[2] * other.group0()[0]) + (self.group0()[1] * other.group0()[3])),
                    ((self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1])),
                    ((self.group0()[1] * other.group0()[1]) * -1.0),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       71       98        0
    //    simd3        2        4        0
    //    simd4       28       31        0
    // Totals...
    // yes simd      101      133        0
    //  no simd      189      234        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (-(Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
            // e23, e31, e12, e45
            (-(swizzle!(other.group0(), 3, 3, 3, 2) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[2]]))
                - (swizzle!(self.group1(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))
                - Simd32x4::from([
                    (self.group0()[0] * other[e2]),
                    (self.group0()[1] * other[e2]),
                    (self.group0()[2] * other[e2]),
                    (self.group1()[1] * other.group0()[1]),
                ])),
            // e15, e25, e35, e1234
            (-(swizzle!(self.group2(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))
                - (self.group1() * Simd32x4::from([other[e2], other[e2], other[e2], other.group0()[3]]))
                + Simd32x4::from([
                    (self.group2()[1] * other.group0()[2]),
                    (self.group2()[2] * other.group0()[0]),
                    (self.group2()[0] * other.group0()[1]),
                    (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(self.group2(), 3, 3, 3, 2) * swizzle!(other.group0(), 0, 1, 2, 2))
                - (self.group2() * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other[e2]]))
                + (swizzle!(other.group0(), 1, 2, 0, 1) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[1]]))
                + (Simd32x4::from(other[e2]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (Simd32x4::from([-1.0, -1.0, -1.0, 1.0])
                    * swizzle!(other.group0(), 2, 0, 1, 0)
                    * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[0]]))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       41       60        0
    //    simd3        0        2        0
    //    simd4       16       19        0
    // Totals...
    // yes simd       57       81        0
    //  no simd      105      142        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = CircleRotor::from_groups(
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other[scalar])),
            // e415, e425, e435, e321
            (self.group1() * Simd32x4::from(other[scalar])),
            // e235, e315, e125, e12345
            (self.group2() * Simd32x4::from(other[scalar])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       59       86        0
    //    simd3        0        1        0
    //    simd4       36       39        0
    // Totals...
    // yes simd       95      126        0
    //  no simd      203      245        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group1()[0] * other[e4315]) - (self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group1()[1] * other[e4315]) + (self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                ((self.group1()[2] * other[e4315]) - (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
            // e415, e425, e435, e321
            ((swizzle!(other.group0(), 3, 3, 3, 2) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group2()[0] * other[e4315]) - (self.group1()[3] * other.group0()[0])),
                    ((self.group2()[1] * other[e4315]) - (self.group1()[3] * other.group0()[1])),
                    ((self.group2()[2] * other[e4315]) - (self.group1()[3] * other.group0()[2])),
                    ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            (-(swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]))
                + (swizzle!(other.group0(), 3, 0, 3, 3) * Simd32x4::from([self.group1()[0], self.group2()[2], self.group1()[2], self.group2()[3]]))
                + (swizzle!(other.group0(), 2, 3, 1, 2) * Simd32x4::from([self.group2()[1], self.group1()[1], self.group2()[0], self.group2()[2]]))
                + Simd32x4::from([0.0, 0.0, 0.0, ((self.group2()[1] * other.group0()[1]) + (self.group2()[0] * other.group0()[0]))])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[2]]))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]))
                + (swizzle!(self.group1(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other[e4315]]))
                + Simd32x4::from([
                    (-(self.group2()[0] * other[e4315]) + (self.group0()[0] * other.group0()[3])),
                    (-(self.group2()[1] * other[e4315]) + (self.group0()[1] * other.group0()[3])),
                    (-(self.group2()[2] * other[e4315]) + (self.group0()[2] * other.group0()[3])),
                    ((self.group2()[3] * other[e4315]) - (self.group0()[1] * other.group0()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      120      155        0
    //    simd3        0        1        0
    //    simd4       50       51        0
    // Totals...
    // yes simd      170      207        0
    //  no simd      320      362        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(Simd32x4::from(self.group2()[3]) * other.group0())
                - (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[2]]))
                + (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group2()[2]]))
                + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group2()[1]]))
                + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group2()[0]]))
                + Simd32x4::from([
                    (-(self.group1()[2] * other.group0()[1])
                        - (self.group1()[0] * other.group3()[3])
                        - (self.group0()[2] * other.group1()[1])
                        - (self.group0()[1] * other.group3()[2])
                        - (self.group0()[0] * other.group0()[3])),
                    (-(self.group1()[1] * other.group3()[3])
                        - (self.group1()[0] * other.group0()[2])
                        - (self.group0()[2] * other.group3()[0])
                        - (self.group0()[1] * other.group0()[3])
                        - (self.group0()[0] * other.group1()[2])),
                    (-(self.group1()[2] * other.group3()[3])
                        - (self.group1()[1] * other.group0()[0])
                        - (self.group0()[2] * other.group0()[3])
                        - (self.group0()[1] * other.group1()[0])
                        - (self.group0()[0] * other.group3()[1])),
                    ((self.group2()[1] * other.group0()[1])
                        + (self.group2()[0] * other.group0()[0])
                        + (self.group1()[2] * other.group1()[2])
                        + (self.group1()[1] * other.group1()[1])
                        + (self.group1()[0] * other.group1()[0])),
                ])),
            // e23, e31, e12, e45
            ((swizzle!(self.group2(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]))
                - (swizzle!(other.group3(), 3, 3, 3, 2) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[2]]))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group3(), 0, 1, 2, 1))
                - (swizzle!(self.group1(), 2, 1, 2, 0) * Simd32x4::from([other.group1()[1], other.group0()[3], other.group0()[3], other.group3()[0]]))
                + (swizzle!(self.group1(), 1, 2, 0, 3) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[3]]))
                - (swizzle!(other.group2(), 1, 2, 3, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[2], self.group0()[2]]))
                - (swizzle!(other.group2(), 3, 3, 0, 0) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[1], self.group0()[0]]))
                + Simd32x4::from([
                    (-(self.group2()[3] * other.group1()[0]) - (self.group2()[2] * other.group0()[1]) - (self.group1()[0] * other.group0()[3])
                        + (self.group0()[1] * other.group2()[2])),
                    (-(self.group2()[3] * other.group1()[1]) - (self.group2()[0] * other.group0()[2]) - (self.group1()[0] * other.group1()[2])
                        + (self.group0()[2] * other.group2()[0])),
                    (-(self.group2()[3] * other.group1()[2]) - (self.group2()[1] * other.group0()[0]) - (self.group1()[1] * other.group1()[0])
                        + (self.group0()[0] * other.group2()[1])),
                    ((self.group2()[2] * other.group0()[2]) + (self.group2()[1] * other.group0()[1]) + (self.group2()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e15, e25, e35, e1234
            (-(Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                - (swizzle!(other.group3(), 1, 2, 0, 3) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]))
                + (swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[2]]))
                + (swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[2]]))
                + (swizzle!(self.group1(), 1, 2, 0, 1) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[1]]))
                + Simd32x4::from([
                    (-(self.group2()[2] * other.group1()[1]) + (self.group2()[1] * other.group3()[2])
                        - (self.group2()[0] * other.group1()[3])
                        - (self.group2()[0] * other.group0()[3])
                        - (self.group1()[2] * other.group2()[1])
                        - (self.group1()[0] * other.group2()[3])),
                    ((self.group2()[2] * other.group3()[0])
                        - (self.group2()[1] * other.group1()[3])
                        - (self.group2()[1] * other.group0()[3])
                        - (self.group2()[0] * other.group1()[2])
                        - (self.group1()[0] * other.group2()[2])
                        - (self.group1()[1] * other.group2()[3])),
                    (-(self.group2()[2] * other.group1()[3]) - (self.group2()[2] * other.group0()[3]) - (self.group2()[1] * other.group1()[0])
                        + (self.group2()[0] * other.group3()[1])
                        - (self.group1()[2] * other.group2()[3])
                        - (self.group1()[1] * other.group2()[0])),
                    ((self.group1()[0] * other.group0()[0]) - (self.group0()[2] * other.group3()[2]) - (self.group0()[1] * other.group3()[1])
                        + (self.group0()[1] * other.group1()[1])
                        + (self.group0()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group3()[0])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(self.group2(), 3, 3, 3, 2) * swizzle!(other.group3(), 0, 1, 2, 2))
                - (swizzle!(self.group2(), 2, 1, 2, 3) * Simd32x4::from([other.group0()[1], other.group3()[3], other.group3()[3], other.group2()[3]]))
                + (swizzle!(self.group2(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + (swizzle!(other.group1(), 0, 1, 2, 1) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[1]]))
                + (swizzle!(self.group1(), 2, 1, 2, 3) * Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group2()[3]]))
                + (swizzle!(self.group1(), 0, 0, 1, 2) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group2()[2]]))
                + (swizzle!(other.group2(), 1, 2, 3, 0) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[2], self.group1()[0]]))
                + (swizzle!(other.group2(), 3, 3, 0, 1) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[1], self.group1()[1]]))
                + Simd32x4::from([
                    (-(self.group2()[0] * other.group3()[3]) - (self.group1()[1] * other.group3()[2]) - (self.group0()[1] * other.group2()[2])),
                    (-(self.group2()[0] * other.group0()[2]) - (self.group1()[2] * other.group3()[0]) - (self.group0()[2] * other.group2()[0])),
                    (-(self.group2()[1] * other.group0()[0]) - (self.group1()[0] * other.group3()[1]) - (self.group0()[0] * other.group2()[1])),
                    ((self.group2()[1] * other.group3()[1]) + (self.group2()[0] * other.group3()[0]) + (self.group2()[0] * other.group1()[0])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      100      131        0
    //    simd3        0        1        0
    //    simd4       55       58        0
    // Totals...
    // yes simd      155      190        0
    //  no simd      320      366        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(self.group2()[3]) * other.group0())
                - (swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[2]]))
                - (swizzle!(other.group1(), 2, 0, 1, 3) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[3]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group0()[0])
                        + (self.group1()[2] * other.group0()[1])
                        + (self.group1()[0] * other.group2()[3])
                        + (self.group0()[2] * other.group3()[1])
                        + (self.group0()[2] * other.group1()[1])
                        - (self.group0()[1] * other.group3()[2])
                        + (self.group0()[0] * other.group0()[3])
                        + (self.group0()[0] * other.group1()[3])),
                    ((self.group1()[3] * other.group0()[1]) + (self.group1()[1] * other.group2()[3]) + (self.group1()[0] * other.group0()[2])
                        - (self.group0()[2] * other.group3()[0])
                        + (self.group0()[1] * other.group1()[3])
                        + (self.group0()[1] * other.group0()[3])
                        + (self.group0()[0] * other.group1()[2])
                        + (self.group0()[0] * other.group3()[2])),
                    ((self.group1()[3] * other.group0()[2])
                        + (self.group1()[2] * other.group2()[3])
                        + (self.group1()[1] * other.group0()[0])
                        + (self.group0()[2] * other.group1()[3])
                        + (self.group0()[2] * other.group0()[3])
                        + (self.group0()[1] * other.group3()[0])
                        + (self.group0()[1] * other.group1()[0])
                        - (self.group0()[0] * other.group3()[1])),
                    (-(self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[2] * other.group1()[2])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e321
            ((swizzle!(self.group2(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]))
                + (swizzle!(self.group2(), 2, 1, 2, 1) * Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group0()[1]]))
                - (swizzle!(self.group2(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]))
                + (swizzle!(self.group2(), 0, 0, 1, 0) * Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group0()[0]]))
                + (swizzle!(self.group1(), 2, 1, 2, 3) * Simd32x4::from([other.group1()[1], other.group0()[3], other.group0()[3], other.group0()[3]]))
                + (swizzle!(self.group1(), 0, 0, 1, 2) * Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group3()[2]]))
                + (swizzle!(other.group3(), 3, 3, 3, 1) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]))
                - (swizzle!(other.group2(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group1()[3] * other.group3()[0]) - (self.group1()[1] * other.group1()[2]) + (self.group0()[2] * other.group2()[1])),
                    (-(self.group1()[3] * other.group3()[1]) - (self.group1()[2] * other.group1()[0]) + (self.group0()[0] * other.group2()[2])),
                    (-(self.group1()[3] * other.group3()[2]) - (self.group1()[0] * other.group1()[1]) + (self.group0()[1] * other.group2()[0])),
                    ((self.group1()[0] * other.group3()[0]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                - (Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group1()[2]]))
                + (Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group0()[3], other.group3()[2]]))
                + (Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group3()[2], other.group0()[3], other.group1()[0], other.group3()[1]]))
                - (Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group1()[1]]))
                - (Simd32x4::from(self.group2()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group1()[0]]))
                + (Simd32x4::from(self.group2()[0]) * Simd32x4::from([other.group0()[3], other.group1()[2], other.group3()[1], other.group3()[0]]))
                - (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * swizzle!(other.group2(), 2, 0, 1, 2))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group2()[1]) + (self.group1()[0] * other.group3()[3])),
                    ((self.group1()[0] * other.group2()[2]) + (self.group1()[1] * other.group3()[3])),
                    ((self.group1()[2] * other.group3()[3]) + (self.group1()[1] * other.group2()[0])),
                    (-(self.group1()[0] * other.group2()[0]) - (self.group1()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group3(), 0, 1, 2, 2) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[2]]))
                - (swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[2]]))
                + (swizzle!(self.group2(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                - (swizzle!(self.group1(), 2, 1, 2, 1) * Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group0()[1]]))
                - (swizzle!(self.group1(), 0, 0, 1, 0) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group0()[0]]))
                + Simd32x4::from([
                    (-(self.group2()[0] * other.group2()[3])
                        + (self.group1()[1] * other.group3()[2])
                        + (self.group0()[2] * other.group2()[1])
                        + (self.group0()[0] * other.group3()[3])
                        - (self.group0()[1] * other.group2()[2])),
                    (-(self.group2()[1] * other.group2()[3]) + (self.group1()[2] * other.group3()[0]) - (self.group0()[2] * other.group2()[0])
                        + (self.group0()[0] * other.group2()[2])
                        + (self.group0()[1] * other.group3()[3])),
                    (-(self.group2()[2] * other.group2()[3]) + (self.group1()[0] * other.group3()[1]) + (self.group0()[2] * other.group3()[3])
                        - (self.group0()[0] * other.group2()[1])
                        + (self.group0()[1] * other.group2()[0])),
                    (-(self.group0()[2] * other.group1()[2])
                        - (self.group0()[1] * other.group3()[1])
                        - (self.group0()[1] * other.group1()[1])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group3()[0])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl InfixSandwich for Dipole {}
impl Sandwich<AntiScalar> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       72        0
    //    simd3        0        4        0
    //    simd4        7       10        0
    // Totals...
    // yes simd       63       86        0
    //  no simd       84      124        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Circle::from_groups(
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other[e12345])),
            // e415, e425, e435, e321
            (self.group1() * Simd32x4::from(other[e12345]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e235, e315, e125
            (self.group2() * Simd32x3::from(other[e12345])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      132      164        0
    //    simd3        0        2        0
    //    simd4       24       25        0
    // Totals...
    // yes simd      156      191        0
    //  no simd      228      270        0
    fn sandwich(self, other: Circle) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                - (swizzle!(other.group1(), 3, 0, 3, 1) * Simd32x4::from([self.group0()[0], self.group0()[2], self.group0()[2], self.group1()[1]]))
                - (swizzle!(other.group1(), 2, 3, 1, 0) * Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[0], self.group1()[0]]))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group0()[1]) + (self.group0()[2] * other.group1()[1])),
                    ((self.group1()[0] * other.group0()[2]) + (self.group0()[0] * other.group1()[2])),
                    ((self.group1()[1] * other.group0()[0]) + (self.group0()[1] * other.group1()[0])),
                    (-(self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group2()[2] * other.group0()[1]) - (self.group2()[1] * other.group0()[2]) + (self.group1()[2] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[2])
                    - (self.group0()[1] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[1])),
                (-(self.group2()[2] * other.group0()[0]) + (self.group2()[0] * other.group0()[2]) - (self.group1()[2] * other.group1()[0])
                    + (self.group1()[0] * other.group1()[2])
                    + (self.group0()[0] * other.group2()[2])
                    - (self.group0()[2] * other.group2()[0])),
                ((self.group2()[1] * other.group0()[0]) - (self.group2()[0] * other.group0()[1]) + (self.group1()[1] * other.group1()[0])
                    - (self.group1()[0] * other.group1()[1])
                    - (self.group0()[0] * other.group2()[1])
                    + (self.group0()[1] * other.group2()[0])),
                ((self.group2()[2] * other.group0()[2]) + (self.group2()[1] * other.group0()[1]) + (self.group2()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])),
            ]),
            // e235, e315, e125, e5
            (-(swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group2()[2]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group2()[2]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group1()[1])
                        + (self.group2()[0] * other.group1()[3])
                        + (self.group1()[3] * other.group2()[0])
                        + (self.group1()[2] * other.group2()[1])),
                    ((self.group2()[1] * other.group1()[3])
                        + (self.group2()[0] * other.group1()[2])
                        + (self.group1()[3] * other.group2()[1])
                        + (self.group1()[0] * other.group2()[2])),
                    ((self.group2()[2] * other.group1()[3])
                        + (self.group2()[1] * other.group1()[0])
                        + (self.group1()[3] * other.group2()[2])
                        + (self.group1()[1] * other.group2()[0])),
                    (-(self.group2()[1] * other.group1()[1])
                        - (self.group2()[0] * other.group1()[0])
                        - (self.group1()[0] * other.group2()[0])
                        - (self.group1()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group2()[2] * other.group0()[1]) + (self.group2()[1] * other.group0()[2]) + (self.group1()[0] * other.group1()[3])
                        - (self.group0()[1] * other.group2()[2])
                        + (self.group0()[2] * other.group2()[1])),
                    ((self.group2()[2] * other.group0()[0]) - (self.group2()[0] * other.group0()[2])
                        + (self.group1()[1] * other.group1()[3])
                        + (self.group0()[0] * other.group2()[2])
                        - (self.group0()[2] * other.group2()[0])),
                    (-(self.group2()[1] * other.group0()[0]) + (self.group2()[0] * other.group0()[1]) + (self.group1()[2] * other.group1()[3])
                        - (self.group0()[0] * other.group2()[1])
                        + (self.group0()[1] * other.group2()[0])),
                    (-(self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      134      166        0
    //    simd3        0        2        0
    //    simd4       26       27        0
    // Totals...
    // yes simd      160      195        0
    //  no simd      238      280        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                - (swizzle!(other.group1(), 2, 0, 3, 1) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[2], self.group1()[1]]))
                - (swizzle!(other.group1(), 3, 3, 1, 0) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group1()[0]]))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group0()[1]) + (self.group0()[2] * other.group1()[1]) + (self.group0()[0] * other.group2()[3])),
                    ((self.group1()[0] * other.group0()[2]) + (self.group0()[1] * other.group2()[3]) + (self.group0()[0] * other.group1()[2])),
                    ((self.group1()[1] * other.group0()[0]) + (self.group0()[2] * other.group2()[3]) + (self.group0()[1] * other.group1()[0])),
                    (-(self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e321
            (-(swizzle!(self.group1(), 1, 2, 0, 3) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[3]]))
                - (swizzle!(other.group2(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group0()[1]) - (self.group2()[1] * other.group0()[2])
                        + (self.group1()[2] * other.group1()[1])
                        + (self.group1()[0] * other.group2()[3])
                        + (self.group0()[2] * other.group2()[1])),
                    (-(self.group2()[2] * other.group0()[0])
                        + (self.group2()[0] * other.group0()[2])
                        + (self.group1()[1] * other.group2()[3])
                        + (self.group1()[0] * other.group1()[2])
                        + (self.group0()[0] * other.group2()[2])),
                    ((self.group2()[1] * other.group0()[0]) - (self.group2()[0] * other.group0()[1])
                        + (self.group1()[2] * other.group2()[3])
                        + (self.group1()[1] * other.group1()[0])
                        + (self.group0()[1] * other.group2()[0])),
                    ((self.group2()[2] * other.group0()[2]) + (self.group2()[1] * other.group0()[1]) + (self.group2()[0] * other.group0()[0])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e235, e315, e125, e5
            (-(swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group2()[2]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * swizzle!(other.group2(), 2, 0, 1, 2))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group1()[1])
                        + (self.group2()[0] * other.group2()[3])
                        + (self.group2()[0] * other.group1()[3])
                        + (self.group1()[3] * other.group2()[0])
                        + (self.group1()[2] * other.group2()[1])),
                    ((self.group2()[1] * other.group2()[3])
                        + (self.group2()[1] * other.group1()[3])
                        + (self.group2()[0] * other.group1()[2])
                        + (self.group1()[3] * other.group2()[1])
                        + (self.group1()[0] * other.group2()[2])),
                    ((self.group2()[2] * other.group2()[3])
                        + (self.group2()[2] * other.group1()[3])
                        + (self.group2()[1] * other.group1()[0])
                        + (self.group1()[3] * other.group2()[2])
                        + (self.group1()[1] * other.group2()[0])),
                    (-(self.group2()[1] * other.group1()[1])
                        - (self.group2()[0] * other.group1()[0])
                        - (self.group1()[0] * other.group2()[0])
                        - (self.group1()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group2()[2] * other.group0()[1]) + (self.group2()[1] * other.group0()[2]) + (self.group1()[0] * other.group1()[3])
                        - (self.group0()[1] * other.group2()[2])
                        + (self.group0()[2] * other.group2()[1])),
                    ((self.group2()[2] * other.group0()[0]) - (self.group2()[0] * other.group0()[2])
                        + (self.group1()[1] * other.group1()[3])
                        + (self.group0()[0] * other.group2()[2])
                        - (self.group0()[2] * other.group2()[0])),
                    (-(self.group2()[1] * other.group0()[0]) + (self.group2()[0] * other.group0()[1]) + (self.group1()[2] * other.group1()[3])
                        - (self.group0()[0] * other.group2()[1])
                        + (self.group0()[1] * other.group2()[0])),
                    (-(self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      124      156        0
    //    simd3        0        2        0
    //    simd4       26       27        0
    // Totals...
    // yes simd      150      185        0
    //  no simd      228      270        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]))
                + (swizzle!(self.group1(), 2, 0, 1, 3) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]))
                - (swizzle!(self.group1(), 1, 2, 0, 1) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[1]]))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group1()[1]) + (self.group0()[0] * other.group1()[3])),
                    ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3])),
                    ((self.group0()[2] * other.group1()[3]) + (self.group0()[1] * other.group1()[0])),
                    (-(self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group2()[2] * other.group0()[1]) - (self.group2()[1] * other.group0()[2]) + (self.group1()[2] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[2])
                    - (self.group0()[1] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[1])),
                (-(self.group2()[2] * other.group0()[0]) + (self.group2()[0] * other.group0()[2]) - (self.group1()[2] * other.group1()[0])
                    + (self.group1()[0] * other.group1()[2])
                    + (self.group0()[0] * other.group2()[2])
                    - (self.group0()[2] * other.group2()[0])),
                ((self.group2()[1] * other.group0()[0]) - (self.group2()[0] * other.group0()[1]) + (self.group1()[1] * other.group1()[0])
                    - (self.group1()[0] * other.group1()[1])
                    - (self.group0()[0] * other.group2()[1])
                    + (self.group0()[1] * other.group2()[0])),
                (-(self.group2()[2] * other.group0()[2]) - (self.group2()[1] * other.group0()[1]) - (self.group2()[0] * other.group0()[0])
                    + (self.group0()[2] * other.group2()[2])
                    + (self.group0()[0] * other.group2()[0])
                    + (self.group0()[1] * other.group2()[1])),
            ]),
            // e15, e25, e35, e1234
            (-(swizzle!(other.group1(), 2, 0, 3, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[2], self.group0()[2]]))
                - (swizzle!(other.group1(), 3, 3, 1, 0) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[0], self.group0()[0]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[2]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group1()[1]) + (self.group1()[3] * other.group2()[0]) + (self.group1()[2] * other.group2()[1])),
                    ((self.group2()[0] * other.group1()[2]) + (self.group1()[3] * other.group2()[1]) + (self.group1()[0] * other.group2()[2])),
                    ((self.group2()[1] * other.group1()[0]) + (self.group1()[3] * other.group2()[2]) + (self.group1()[1] * other.group2()[0])),
                    (-(self.group1()[1] * other.group0()[1]) - (self.group1()[0] * other.group0()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group2()[2] * other.group0()[1]) - (self.group2()[1] * other.group0()[2])
                    + (self.group1()[3] * other.group1()[0])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group0()[1] * other.group2()[2])
                    - (self.group0()[2] * other.group2()[1])),
                (-(self.group2()[2] * other.group0()[0])
                    + (self.group2()[0] * other.group0()[2])
                    + (self.group1()[3] * other.group1()[1])
                    + (self.group1()[1] * other.group1()[3])
                    - (self.group0()[0] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[0])),
                ((self.group2()[1] * other.group0()[0]) - (self.group2()[0] * other.group0()[1])
                    + (self.group1()[3] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[3])
                    + (self.group0()[0] * other.group2()[1])
                    - (self.group0()[1] * other.group2()[0])),
                (-(self.group2()[2] * other.group1()[2])
                    - (self.group2()[1] * other.group1()[1])
                    - (self.group2()[0] * other.group1()[0])
                    - (self.group1()[2] * other.group2()[2])
                    - (self.group1()[0] * other.group2()[0])
                    - (self.group1()[1] * other.group2()[1])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      142      174        0
    //    simd3        0        2        0
    //    simd4       34       35        0
    // Totals...
    // yes simd      176      211        0
    //  no simd      278      320        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]))
                + (swizzle!(self.group1(), 2, 1, 2, 3) * Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group1()[3]]))
                - (swizzle!(self.group1(), 1, 2, 0, 1) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[1]]))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group2()[3]) + (self.group0()[2] * other.group3()[1]) + (self.group0()[2] * other.group1()[1])
                        - (self.group0()[1] * other.group3()[2])
                        + (self.group0()[0] * other.group1()[3])),
                    ((self.group1()[0] * other.group0()[2]) - (self.group0()[2] * other.group3()[0])
                        + (self.group0()[1] * other.group1()[3])
                        + (self.group0()[0] * other.group1()[2])
                        + (self.group0()[0] * other.group3()[2])),
                    ((self.group1()[1] * other.group0()[0])
                        + (self.group0()[2] * other.group1()[3])
                        + (self.group0()[1] * other.group3()[0])
                        + (self.group0()[1] * other.group1()[0])
                        - (self.group0()[0] * other.group3()[1])),
                    (-(self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e23, e31, e12, e45
            ((swizzle!(other.group2(), 3, 3, 3, 2) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[2]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group3()[2]]))
                + (swizzle!(other.group2(), 1, 2, 0, 0) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group0()[1]) - (self.group2()[1] * other.group0()[2])
                        + (self.group1()[3] * other.group3()[0])
                        + (self.group1()[2] * other.group1()[1])
                        + (self.group0()[0] * other.group3()[3])
                        - (self.group0()[1] * other.group2()[2])),
                    (-(self.group2()[2] * other.group0()[0])
                        + (self.group2()[0] * other.group0()[2])
                        + (self.group1()[3] * other.group3()[1])
                        + (self.group1()[0] * other.group1()[2])
                        - (self.group0()[2] * other.group2()[0])
                        + (self.group0()[1] * other.group3()[3])),
                    ((self.group2()[1] * other.group0()[0]) - (self.group2()[0] * other.group0()[1])
                        + (self.group1()[3] * other.group3()[2])
                        + (self.group1()[1] * other.group1()[0])
                        + (self.group0()[2] * other.group3()[3])
                        - (self.group0()[0] * other.group2()[1])),
                    (-(self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[1] * other.group3()[1])
                        - (self.group1()[0] * other.group3()[0])
                        + (self.group0()[1] * other.group2()[1])),
                ])),
            // e15, e25, e35, e1234
            (-(swizzle!(other.group3(), 1, 2, 0, 2) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[2]]))
                - (swizzle!(other.group1(), 2, 0, 3, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[2], self.group0()[2]]))
                - (swizzle!(other.group1(), 3, 3, 1, 1) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[0], self.group0()[1]]))
                - (swizzle!(self.group1(), 1, 2, 0, 3) * swizzle!(other.group2(), 2, 0, 1, 3))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group1()[1])
                        + (self.group2()[1] * other.group3()[2])
                        + (self.group1()[3] * other.group2()[0])
                        + (self.group1()[2] * other.group2()[1])
                        + (self.group1()[0] * other.group3()[3])),
                    ((self.group2()[2] * other.group3()[0])
                        + (self.group2()[0] * other.group1()[2])
                        + (self.group1()[3] * other.group2()[1])
                        + (self.group1()[0] * other.group2()[2])
                        + (self.group1()[1] * other.group3()[3])),
                    ((self.group2()[1] * other.group1()[0])
                        + (self.group2()[0] * other.group3()[1])
                        + (self.group1()[3] * other.group2()[2])
                        + (self.group1()[2] * other.group3()[3])
                        + (self.group1()[1] * other.group2()[0])),
                    (-(self.group1()[2] * other.group0()[2])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group3()[1])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group3()[0])),
                ])),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + (swizzle!(other.group3(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[2]]))
                - (swizzle!(other.group2(), 1, 2, 0, 0) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group0()[1]) - (self.group2()[1] * other.group0()[2])
                        + (self.group2()[0] * other.group2()[3])
                        + (self.group1()[0] * other.group1()[3])
                        - (self.group0()[0] * other.group3()[3])
                        + (self.group0()[1] * other.group2()[2])),
                    (-(self.group2()[2] * other.group0()[0])
                        + (self.group2()[1] * other.group2()[3])
                        + (self.group2()[0] * other.group0()[2])
                        + (self.group1()[1] * other.group1()[3])
                        + (self.group0()[2] * other.group2()[0])
                        - (self.group0()[1] * other.group3()[3])),
                    ((self.group2()[2] * other.group2()[3]) + (self.group2()[1] * other.group0()[0]) - (self.group2()[0] * other.group0()[1])
                        + (self.group1()[2] * other.group1()[3])
                        - (self.group0()[2] * other.group3()[3])
                        + (self.group0()[0] * other.group2()[1])),
                    (-(self.group2()[2] * other.group1()[2]) + (self.group2()[1] * other.group3()[1]) - (self.group2()[1] * other.group1()[1])
                        + (self.group2()[0] * other.group3()[0])
                        - (self.group2()[0] * other.group1()[0])
                        - (self.group1()[1] * other.group2()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       82      113        0
    //    simd3        0        2        0
    //    simd4       17       18        0
    // Totals...
    // yes simd       99      133        0
    //  no simd      150      191        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[2] * other.group0()[1]),
                0.0,
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group1()[0] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[0]) + (self.group1()[2] * other.group0()[1])),
                (self.group1()[3] * other.group0()[1] * -1.0),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[0]) + (self.group2()[0] * other.group0()[1])),
                ((self.group1()[1] * other.group0()[0]) + (self.group2()[1] * other.group0()[1])),
                ((self.group1()[2] * other.group0()[0]) + (self.group2()[2] * other.group0()[1])),
                (self.group1()[3] * other.group0()[0]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[2] * other.group0()[0]),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       85      119        0
    //    simd3        0        2        0
    //    simd4       21       22        0
    // Totals...
    // yes simd      106      143        0
    //  no simd      169      213        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                ((self.group1()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e23, e31, e12, e45
            ((swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group0()[1] * other.group0()[2]) * -1.0),
                    ((self.group0()[2] * other.group0()[0]) * -1.0),
                    ((self.group0()[0] * other.group0()[1]) * -1.0),
                    ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group2()[0] * other.group0()[3]) + (self.group1()[3] * other.group0()[0]) - (self.group1()[1] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[1])),
                (-(self.group2()[1] * other.group0()[3]) + (self.group1()[3] * other.group0()[1]) + (self.group1()[0] * other.group0()[2])
                    - (self.group1()[2] * other.group0()[0])),
                (-(self.group2()[2] * other.group0()[3]) + (self.group1()[3] * other.group0()[2]) - (self.group1()[0] * other.group0()[1])
                    + (self.group1()[1] * other.group0()[0])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2])),
                    ((self.group1()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[0])),
                    ((self.group1()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1])),
                    (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      108      140        0
    //    simd3        0        2        0
    //    simd4       25       26        0
    // Totals...
    // yes simd      133      168        0
    //  no simd      208      250        0
    fn sandwich(self, other: Flector) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group1()[1]) - (self.group0()[1] * other.group1()[2])),
                    (-(self.group0()[2] * other.group1()[0]) + (self.group0()[0] * other.group1()[2])),
                    (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
                    (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e23, e31, e12, e45
            ((swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group1()[0]) + (self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group0()[2])),
                    ((self.group1()[3] * other.group1()[1]) - (self.group0()[2] * other.group0()[0]) + (self.group0()[1] * other.group1()[3])),
                    ((self.group1()[3] * other.group1()[2]) + (self.group0()[2] * other.group1()[3]) - (self.group0()[0] * other.group0()[1])),
                    (-(self.group1()[2] * other.group1()[2]) - (self.group1()[1] * other.group1()[1]) - (self.group1()[0] * other.group1()[0])
                        + (self.group0()[0] * other.group0()[0])
                        + (self.group0()[1] * other.group0()[1])),
                ])),
            // e15, e25, e35, e1234
            (-(swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group2()[1] * other.group1()[2]) - (self.group2()[0] * other.group0()[3])
                        + (self.group1()[3] * other.group0()[0])
                        + (self.group1()[2] * other.group0()[1])
                        + (self.group1()[0] * other.group1()[3])
                        - (self.group1()[1] * other.group0()[2])),
                    ((self.group2()[2] * other.group1()[0]) - (self.group2()[1] * other.group0()[3]) + (self.group1()[3] * other.group0()[1])
                        - (self.group1()[2] * other.group0()[0])
                        + (self.group1()[0] * other.group0()[2])
                        + (self.group1()[1] * other.group1()[3])),
                    (-(self.group2()[2] * other.group0()[3])
                        + (self.group2()[0] * other.group1()[1])
                        + (self.group1()[3] * other.group0()[2])
                        + (self.group1()[2] * other.group1()[3])
                        - (self.group1()[0] * other.group0()[1])
                        + (self.group1()[1] * other.group0()[0])),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(self.group1(), 2, 1, 2, 3) * Simd32x4::from([other.group1()[1], other.group0()[3], other.group0()[3], other.group1()[3]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group0()[3]) - (self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[2])),
                    ((self.group1()[0] * other.group1()[2]) + (self.group0()[2] * other.group0()[0]) - (self.group0()[1] * other.group1()[3])),
                    ((self.group1()[1] * other.group1()[0]) - (self.group0()[2] * other.group1()[3]) + (self.group0()[0] * other.group0()[1])),
                    ((self.group2()[2] * other.group1()[2]) + (self.group2()[1] * other.group1()[1]) + (self.group2()[0] * other.group1()[0])
                        - (self.group1()[1] * other.group0()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      116      148        0
    //    simd3        0        2        0
    //    simd4       18       19        0
    // Totals...
    // yes simd      134      169        0
    //  no simd      188      230        0
    fn sandwich(self, other: Line) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group1()[2] * other.group0()[1]) - (self.group1()[1] * other.group0()[2]) - (self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])),
                (-(self.group1()[2] * other.group0()[0]) + (self.group1()[0] * other.group0()[2]) + (self.group0()[0] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[0])),
                ((self.group1()[1] * other.group0()[0]) - (self.group1()[0] * other.group0()[1]) - (self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e235, e315, e125, e5
            (-(swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group0()[1]) - (self.group2()[1] * other.group0()[2])
                        + (self.group1()[3] * other.group1()[0])
                        + (self.group1()[2] * other.group1()[1])),
                    (-(self.group2()[2] * other.group0()[0])
                        + (self.group2()[0] * other.group0()[2])
                        + (self.group1()[3] * other.group1()[1])
                        + (self.group1()[0] * other.group1()[2])),
                    ((self.group2()[1] * other.group0()[0]) - (self.group2()[0] * other.group0()[1])
                        + (self.group1()[3] * other.group1()[2])
                        + (self.group1()[1] * other.group1()[0])),
                    (-(self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group1()[1] * other.group1()[1])),
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group1()[3] * other.group0()[0]) - (self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])),
                (-(self.group1()[3] * other.group0()[1]) + (self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0])),
                (-(self.group1()[3] * other.group0()[2]) - (self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      112      144        0
    //    simd3        0        2        0
    //    simd4       24       25        0
    // Totals...
    // yes simd      136      171        0
    //  no simd      208      250        0
    fn sandwich(self, other: Motor) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group0()[1]) + (self.group0()[0] * other.group0()[3])),
                    ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[3])),
                    ((self.group0()[2] * other.group0()[3]) + (self.group0()[1] * other.group0()[0])),
                    (-(self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e415, e425, e435, e321
            (-(swizzle!(self.group1(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group0()[1])
                        + (self.group1()[0] * other.group0()[3])
                        + (self.group0()[2] * other.group1()[1])
                        + (self.group0()[0] * other.group1()[3])),
                    ((self.group1()[1] * other.group0()[3])
                        + (self.group1()[0] * other.group0()[2])
                        + (self.group0()[0] * other.group1()[2])
                        + (self.group0()[1] * other.group1()[3])),
                    ((self.group1()[2] * other.group0()[3])
                        + (self.group1()[1] * other.group0()[0])
                        + (self.group0()[2] * other.group1()[3])
                        + (self.group0()[1] * other.group1()[0])),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e235, e315, e125, e5
            (-(swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group2()[2]]))
                + (Simd32x4::from(self.group1()[3]) * other.group1())
                - (swizzle!(self.group1(), 1, 2, 0, 2) * swizzle!(other.group1(), 2, 0, 1, 2))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group0()[1])
                        + (self.group2()[0] * other.group0()[3])
                        + (self.group1()[2] * other.group1()[1])
                        + (self.group1()[0] * other.group1()[3])),
                    ((self.group2()[1] * other.group0()[3])
                        + (self.group2()[0] * other.group0()[2])
                        + (self.group1()[0] * other.group1()[2])
                        + (self.group1()[1] * other.group1()[3])),
                    ((self.group2()[2] * other.group0()[3])
                        + (self.group2()[1] * other.group0()[0])
                        + (self.group1()[2] * other.group1()[3])
                        + (self.group1()[1] * other.group1()[0])),
                    (-(self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group1()[1] * other.group1()[1])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group1()[1]) + (self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group1()[2])),
                    (-(self.group0()[2] * other.group1()[0]) + (self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3])),
                    ((self.group0()[2] * other.group1()[3]) - (self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for Dipole {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      212      248        0
    //    simd2       18       22        0
    //    simd3       72       82        0
    //    simd4       28       29        0
    // Totals...
    // yes simd      330      381        0
    //  no simd      576      654        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (-(Simd32x2::from(self.group2()[2]) * Simd32x2::from([other.group4()[2], other.group6()[2]]))
                - (Simd32x2::from(self.group2()[1]) * Simd32x2::from([other.group4()[1], other.group6()[1]]))
                - (Simd32x2::from(self.group2()[0]) * Simd32x2::from([other.group4()[0], other.group6()[0]]))
                - (Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group10()[0], other.group5()[2]]))
                - (Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group10()[1], other.group5()[1]]))
                - (Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group10()[2], other.group5()[0]]))
                - (Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group3()[2], other.group7()[2]]))
                - (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group3()[0], other.group7()[0]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group3()[1], other.group7()[1]]))
                + (Simd32x2::from([1.0, -1.0]) * Simd32x2::from(self.group1()[3]) * Simd32x2::from([other.group3()[3], other.group5()[3]]))),
            // e1, e2, e3, e4
            (-(Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group6()[2]]))
                + (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[2]]))
                - (swizzle!(self.group1(), 1, 2, 0, 1) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group6()[1]]))
                + Simd32x4::from([
                    (-(self.group2()[2] * other.group6()[1])
                        + (self.group2()[1] * other.group6()[2])
                        + (self.group1()[0] * other.group5()[3])
                        + (self.group0()[2] * other.group7()[1])
                        + (self.group0()[0] * other[e1])
                        - (self.group0()[1] * other.group7()[2])),
                    ((self.group2()[2] * other.group6()[0]) - (self.group2()[0] * other.group6()[2]) + (self.group1()[1] * other.group5()[3])
                        - (self.group0()[2] * other.group7()[0])
                        + (self.group0()[0] * other.group7()[2])
                        + (self.group0()[1] * other[e1])),
                    (-(self.group2()[1] * other.group6()[0]) + (self.group2()[0] * other.group6()[1]) + (self.group1()[2] * other.group5()[3]) + (self.group0()[2] * other[e1])
                        - (self.group0()[0] * other.group7()[1])
                        + (self.group0()[1] * other.group7()[0])),
                    (-(self.group1()[0] * other.group6()[0]) - (self.group0()[2] * other.group5()[2]) - (self.group0()[1] * other.group5()[1])
                        + (self.group0()[1] * other.group1()[1])
                        + (self.group0()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group5()[0])),
                ])),
            // e5
            (-(self.group2()[2] * other.group5()[2])
                - (self.group2()[2] * other.group1()[2])
                - (self.group2()[1] * other.group5()[1])
                - (self.group2()[1] * other.group1()[1])
                - (self.group2()[0] * other.group5()[0])
                - (self.group2()[0] * other.group1()[0])
                + (self.group1()[3] * other[e1])
                - (self.group1()[2] * other.group7()[2])
                - (self.group1()[0] * other.group7()[0])
                - (self.group1()[1] * other.group7()[1])),
            // e15, e25, e35, e45
            (-(Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group8()[1], other.group10()[2], other.group3()[3], other.group4()[2]]))
                - (Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group10()[0], other.group3()[3], other.group8()[0], other.group4()[1]]))
                - (Simd32x4::from(self.group2()[0]) * Simd32x4::from([other.group3()[3], other.group8()[2], other.group10()[1], other.group4()[0]]))
                + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                + (swizzle!(other.group3(), 0, 1, 2, 2) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[2]]))
                + (swizzle!(other.group3(), 1, 2, 0, 0) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group8()[2]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group10()[1]) + (self.group2()[1] * other.group8()[2]) + (self.group1()[0] * other.group8()[3])),
                    ((self.group2()[2] * other.group8()[0]) + (self.group2()[0] * other.group10()[0]) + (self.group1()[1] * other.group8()[3])),
                    ((self.group2()[1] * other.group10()[2]) + (self.group2()[0] * other.group8()[1]) + (self.group1()[2] * other.group8()[3])),
                    (-(self.group1()[1] * other.group8()[1]) - (self.group1()[0] * other.group8()[0]) + (self.group0()[1] * other.group3()[1])),
                ])),
            // e41, e42, e43
            (-(Simd32x3::from(self.group1()[3]) * other.group4()) + (swizzle!(other.group4(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))
                - (swizzle!(other.group4(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                + (Simd32x3::from(other[e35]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (swizzle!(self.group0(), 2, 1, 2) * Simd32x3::from([other.group10()[1], other.group3()[3], other.group3()[3]]))
                + (swizzle!(self.group0(), 2, 1, 2) * Simd32x3::from([other.group8()[1], other.group0()[0], other.group0()[0]]))
                - (swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group10()[0], other.group10()[2], other.group8()[1]]))
                - (swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group8()[2], other.group8()[0], other.group10()[1]]))
                + (swizzle!(self.group0(), 0, 0, 1) * Simd32x3::from([other.group0()[0], other.group8()[2], other.group10()[2]]))
                + (swizzle!(self.group0(), 0, 0, 1) * Simd32x3::from([other.group3()[3], other.group10()[0], other.group8()[0]]))),
            // e415, e425, e435, e321
            (-(Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[1]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group6()[1]) - (self.group2()[1] * other.group6()[2])
                        + (self.group2()[0] * other.group1()[3])
                        + (self.group1()[2] * other.group5()[1])
                        + (self.group1()[0] * other.group0()[1])
                        + (self.group0()[2] * other.group7()[1])
                        + (self.group0()[0] * other[e1])
                        - (self.group0()[1] * other.group7()[2])),
                    (-(self.group2()[2] * other.group6()[0])
                        + (self.group2()[1] * other.group1()[3])
                        + (self.group2()[0] * other.group6()[2])
                        + (self.group1()[1] * other.group0()[1])
                        + (self.group1()[0] * other.group5()[2])
                        - (self.group0()[2] * other.group7()[0])
                        + (self.group0()[0] * other.group7()[2])
                        + (self.group0()[1] * other[e1])),
                    ((self.group2()[2] * other.group1()[3]) + (self.group2()[1] * other.group6()[0]) - (self.group2()[0] * other.group6()[1])
                        + (self.group1()[2] * other.group0()[1])
                        + (self.group1()[1] * other.group5()[0])
                        + (self.group0()[2] * other[e1])
                        - (self.group0()[0] * other.group7()[1])
                        + (self.group0()[1] * other.group7()[0])),
                    ((self.group2()[2] * other.group6()[2]) + (self.group2()[1] * other.group6()[1]) + (self.group2()[0] * other.group6()[0])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group7()[2])
                        - (self.group0()[0] * other.group7()[0])
                        - (self.group0()[1] * other.group7()[1])),
                ])),
            // e423, e431, e412
            (-(Simd32x3::from(self.group1()[3]) * other.group6()) + (swizzle!(other.group6(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))
                - (swizzle!(other.group6(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group5()[1], other.group1()[0], other.group0()[1]]))
                - (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], other.group5()[0], other.group5()[3]]))
                - (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group5()[2], other.group5()[3], other.group1()[0]]))
                + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], other.group0()[1], other.group5()[0]]))
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[1], other.group5()[2], other.group1()[1]]))
                - (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group5()[3], other.group1()[2], other.group5()[1]]))),
            // e235, e315, e125
            ((swizzle!(self.group2(), 2, 1, 2) * Simd32x3::from([other.group5()[1], other.group5()[3], other.group5()[3]]))
                + (swizzle!(self.group2(), 2, 1, 2) * Simd32x3::from([other.group1()[1], other.group0()[1], other.group0()[1]]))
                - (swizzle!(self.group2(), 1, 2, 0) * Simd32x3::from([other.group5()[2], other.group5()[0], other.group5()[1]]))
                - (swizzle!(self.group2(), 1, 2, 0) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]))
                + (swizzle!(self.group2(), 0, 0, 1) * Simd32x3::from([other.group5()[3], other.group5()[2], other.group5()[0]]))
                + (swizzle!(self.group2(), 0, 0, 1) * Simd32x3::from([other.group0()[1], other.group1()[2], other.group1()[0]]))
                + (Simd32x3::from(self.group1()[3]) * other.group7())
                + (swizzle!(other.group7(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (swizzle!(other.group7(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group10()[2], other.group10()[1], other.group10()[0], other.group8()[3]]))
                + (swizzle!(other.group8(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group8()[2], other.group8()[0], other.group8()[1], other.group3()[2]]))
                - (swizzle!(other.group3(), 1, 2, 0, 0) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group4()[1]) - (self.group2()[1] * other.group4()[2]) + (self.group2()[0] * other[e35]) + (self.group1()[0] * other.group3()[3])
                        - (self.group0()[0] * other.group8()[3])
                        + (self.group0()[1] * other.group3()[2])),
                    (-(self.group2()[2] * other.group4()[0])
                        + (self.group2()[1] * other[e35])
                        + (self.group2()[0] * other.group4()[2])
                        + (self.group1()[1] * other.group3()[3])
                        + (self.group0()[2] * other.group3()[0])
                        - (self.group0()[1] * other.group8()[3])),
                    ((self.group2()[2] * other[e35]) + (self.group2()[1] * other.group4()[0]) - (self.group2()[0] * other.group4()[1]) + (self.group1()[2] * other.group3()[3])
                        - (self.group0()[2] * other.group8()[3])
                        + (self.group0()[0] * other.group3()[1])),
                    (-(self.group2()[2] * other.group10()[0]) - (self.group2()[1] * other.group10()[1]) + (self.group2()[1] * other.group8()[1])
                        - (self.group2()[0] * other.group10()[2])
                        + (self.group2()[0] * other.group8()[0])
                        - (self.group1()[1] * other.group3()[1])),
                ])),
            // e1234
            (-(self.group1()[3] * other[e35])
                - (self.group1()[2] * other.group4()[2])
                - (self.group1()[1] * other.group4()[1])
                - (self.group1()[0] * other.group4()[0])
                - (self.group0()[2] * other.group10()[0])
                - (self.group0()[2] * other.group8()[2])
                - (self.group0()[1] * other.group10()[1])
                - (self.group0()[1] * other.group8()[1])
                - (self.group0()[0] * other.group8()[0])
                - (self.group0()[0] * other.group10()[2])),
            // e12, e31, e23
            ((swizzle!(self.group2(), 2, 1, 2) * Simd32x3::from([other[e35], other[e35], other.group4()[1]]))
                + (swizzle!(self.group2(), 1, 0, 0) * Simd32x3::from([other.group4()[0], other.group4()[2], other[e35]]))
                - (swizzle!(self.group2(), 0, 2, 1) * swizzle!(other.group4(), 1, 0, 2))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group8()[2], other.group8()[1], other.group8()[0]]))
                + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[2], self.group1()[1], self.group1()[0]]))
                + (swizzle!(other.group10(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[0], self.group1()[2]]))
                - (swizzle!(other.group10(), 1, 2, 0) * Simd32x3::from([self.group1()[0], self.group1()[2], self.group1()[1]]))
                + (swizzle!(self.group0(), 2, 0, 2) * Simd32x3::from([other.group8()[3], other.group3()[2], other.group3()[1]]))
                - (swizzle!(self.group0(), 0, 2, 1) * Simd32x3::from([other.group3()[1], other.group3()[0], other.group3()[2]]))
                + (swizzle!(self.group0(), 1, 1, 0) * Simd32x3::from([other.group3()[0], other.group8()[3], other.group8()[3]]))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       84      112        0
    //    simd3        1        4        0
    //    simd4       18       19        0
    // Totals...
    // yes simd      103      135        0
    //  no simd      159      200        0
    fn sandwich(self, other: Plane) -> Self::Output {
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (-(swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[3] * other.group0()[2])),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e15, e25, e35, e1234
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group0()[3]) + (self.group2()[1] * other.group0()[2])),
                    ((self.group2()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])),
                    ((self.group1()[2] * other.group0()[3]) + (self.group2()[0] * other.group0()[1])),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                + Simd32x4::from([
                    (-(self.group0()[0] * other.group0()[3]) - (self.group1()[1] * other.group0()[2])),
                    (-(self.group1()[2] * other.group0()[0]) - (self.group0()[1] * other.group0()[3])),
                    (-(self.group0()[2] * other.group0()[3]) - (self.group1()[0] * other.group0()[1])),
                    ((self.group2()[1] * other.group0()[1]) + (self.group1()[3] * other.group0()[3]) + (self.group2()[0] * other.group0()[0])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       91      122        0
    //    simd3        0        2        0
    //    simd4       22       23        0
    // Totals...
    // yes simd      113      147        0
    //  no simd      179      220        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                ((self.group1()[1] * other.group0()[3]) - (self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group1()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
            // e415, e425, e435, e321
            (-(swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group0(), 0, 1, 2, 2))
                + Simd32x4::from([
                    ((self.group2()[0] * other.group0()[3]) + (self.group0()[0] * other[e2])),
                    ((self.group2()[1] * other.group0()[3]) + (self.group0()[1] * other[e2])),
                    ((self.group2()[2] * other.group0()[3]) + (self.group0()[2] * other[e2])),
                    (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            ((self.group1() * Simd32x4::from(other[e2]))
                - (swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group2()[2]]))
                + Simd32x4::from([
                    (self.group2()[2] * other.group0()[1]),
                    (self.group2()[0] * other.group0()[2]),
                    (self.group2()[1] * other.group0()[0]),
                    (-(self.group2()[1] * other.group0()[1]) - (self.group2()[0] * other.group0()[0])),
                ])),
            // e1, e2, e3, e4
            (-(Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                + (swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group0()[0] * other[e2]) - (self.group1()[1] * other.group0()[2])),
                    (-(self.group1()[2] * other.group0()[0]) + (self.group0()[1] * other[e2])),
                    ((self.group0()[2] * other[e2]) - (self.group1()[0] * other.group0()[1])),
                    ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       72        0
    //    simd3        0        4        0
    //    simd4        7        9        0
    // Totals...
    // yes simd       63       85        0
    //  no simd       84      120        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Dipole::from_groups(
            // e41, e42, e43
            (self.group0() * Simd32x3::from(other[scalar])),
            // e23, e31, e12, e45
            (self.group1() * Simd32x4::from(other[scalar])),
            // e15, e25, e35
            (self.group2() * Simd32x3::from(other[scalar])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       91      119        0
    //    simd3        2        5        0
    //    simd4       18       19        0
    // Totals...
    // yes simd      111      143        0
    //  no simd      169      210        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from(other[e4315]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group2()[0] * other[e4315]) + (self.group0()[0] * other.group0()[3]) + (self.group1()[3] * other.group0()[0])),
                ((self.group2()[1] * other[e4315]) + (self.group0()[1] * other.group0()[3]) + (self.group1()[3] * other.group0()[1])),
                ((self.group2()[2] * other[e4315]) + (self.group0()[2] * other.group0()[3]) + (self.group1()[3] * other.group0()[2])),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e15, e25, e35, e1234
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group0()[3]) + (self.group2()[1] * other.group0()[2])),
                    ((self.group2()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])),
                    ((self.group1()[2] * other.group0()[3]) + (self.group2()[0] * other.group0()[1])),
                    (-(self.group1()[3] * other[e4315]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                + Simd32x4::from([
                    ((self.group2()[0] * other[e4315]) - (self.group0()[0] * other.group0()[3]) - (self.group1()[1] * other.group0()[2])),
                    ((self.group2()[1] * other[e4315]) - (self.group1()[2] * other.group0()[0]) - (self.group0()[1] * other.group0()[3])),
                    ((self.group2()[2] * other[e4315]) - (self.group0()[2] * other.group0()[3]) - (self.group1()[0] * other.group0()[1])),
                    ((self.group2()[1] * other.group0()[1]) + (self.group1()[3] * other.group0()[3]) + (self.group2()[0] * other.group0()[0])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      140      172        0
    //    simd3        0        2        0
    //    simd4       37       38        0
    // Totals...
    // yes simd      177      212        0
    //  no simd      288      330        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[2]]))
                - (swizzle!(other.group0(), 2, 0, 1, 1) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[1]]))
                - (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group2()[2]]))
                - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group2()[1]]))
                - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group2()[0]]))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group0()[1])
                        + (self.group1()[0] * other.group3()[3])
                        + (self.group0()[2] * other.group1()[1])
                        + (self.group0()[1] * other.group3()[2])
                        + (self.group0()[0] * other.group0()[3])),
                    ((self.group1()[1] * other.group3()[3])
                        + (self.group1()[0] * other.group0()[2])
                        + (self.group0()[2] * other.group3()[0])
                        + (self.group0()[1] * other.group0()[3])
                        + (self.group0()[0] * other.group1()[2])),
                    ((self.group1()[2] * other.group3()[3])
                        + (self.group1()[1] * other.group0()[0])
                        + (self.group0()[2] * other.group0()[3])
                        + (self.group0()[1] * other.group1()[0])
                        + (self.group0()[0] * other.group3()[1])),
                    (-(self.group2()[0] * other.group0()[0])
                        - (self.group1()[3] * other.group1()[3])
                        - (self.group1()[2] * other.group1()[2])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])),
                ])),
            // e415, e425, e435, e321
            ((swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group2()[2]]))
                - (swizzle!(other.group0(), 2, 0, 1, 3) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group1()[3]]))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group3(), 0, 1, 2, 2))
                - (swizzle!(self.group1(), 1, 2, 0, 1) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group3()[1]]))
                + (swizzle!(other.group0(), 3, 3, 3, 1) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[1]]))
                - (swizzle!(other.group2(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group2()[0] * other.group3()[3])
                        + (self.group1()[2] * other.group1()[1])
                        + (self.group0()[2] * other.group2()[1])
                        + (self.group0()[0] * other.group2()[3])),
                    ((self.group2()[1] * other.group3()[3])
                        + (self.group1()[0] * other.group1()[2])
                        + (self.group0()[0] * other.group2()[2])
                        + (self.group0()[1] * other.group2()[3])),
                    ((self.group2()[2] * other.group3()[3])
                        + (self.group1()[1] * other.group1()[0])
                        + (self.group0()[2] * other.group2()[3])
                        + (self.group0()[1] * other.group2()[0])),
                    ((self.group2()[0] * other.group0()[0])
                        - (self.group1()[0] * other.group3()[0])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e235, e315, e125, e5
            (-(swizzle!(other.group3(), 2, 0, 1, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group2()[2]]))
                - (swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group2()[2]]))
                + (Simd32x4::from(self.group1()[3]) * other.group2())
                - (swizzle!(self.group1(), 1, 2, 0, 2) * swizzle!(other.group2(), 2, 0, 1, 2))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group3()[1])
                        + (self.group2()[2] * other.group1()[1])
                        + (self.group2()[0] * other.group1()[3])
                        + (self.group2()[0] * other.group0()[3])
                        + (self.group1()[2] * other.group2()[1])
                        + (self.group1()[0] * other.group2()[3])),
                    ((self.group2()[1] * other.group1()[3])
                        + (self.group2()[1] * other.group0()[3])
                        + (self.group2()[0] * other.group3()[2])
                        + (self.group2()[0] * other.group1()[2])
                        + (self.group1()[0] * other.group2()[2])
                        + (self.group1()[1] * other.group2()[3])),
                    ((self.group2()[2] * other.group1()[3])
                        + (self.group2()[2] * other.group0()[3])
                        + (self.group2()[1] * other.group3()[0])
                        + (self.group2()[1] * other.group1()[0])
                        + (self.group1()[2] * other.group2()[3])
                        + (self.group1()[1] * other.group2()[0])),
                    (-(self.group2()[1] * other.group3()[1])
                        - (self.group2()[1] * other.group1()[1])
                        - (self.group2()[0] * other.group3()[0])
                        - (self.group2()[0] * other.group1()[0])
                        - (self.group1()[0] * other.group2()[0])
                        - (self.group1()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[2]]))
                - (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[1]]))
                + (swizzle!(other.group3(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[2]]))
                - (swizzle!(self.group1(), 1, 2, 0, 0) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group0()[0]]))
                + Simd32x4::from([
                    ((self.group2()[1] * other.group0()[2])
                        + (self.group1()[0] * other.group1()[3])
                        + (self.group0()[2] * other.group2()[1])
                        + (self.group0()[0] * other.group2()[3])
                        - (self.group0()[1] * other.group2()[2])),
                    ((self.group2()[2] * other.group0()[0]) + (self.group1()[1] * other.group1()[3]) - (self.group0()[2] * other.group2()[0])
                        + (self.group0()[0] * other.group2()[2])
                        + (self.group0()[1] * other.group2()[3])),
                    ((self.group2()[0] * other.group0()[1]) + (self.group1()[2] * other.group1()[3]) + (self.group0()[2] * other.group2()[3])
                        - (self.group0()[0] * other.group2()[1])
                        + (self.group0()[1] * other.group2()[0])),
                    (-(self.group0()[2] * other.group1()[2]) + (self.group0()[1] * other.group3()[1])
                        - (self.group0()[1] * other.group1()[1])
                        - (self.group0()[0] * other.group1()[0])
                        + (self.group0()[0] * other.group3()[0])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      144      176        0
    //    simd3        0        2        0
    //    simd4       36       37        0
    // Totals...
    // yes simd      180      215        0
    //  no simd      288      330        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[2]]))
                + (swizzle!(self.group1(), 2, 1, 2, 3) * Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group1()[3]]))
                - (swizzle!(other.group0(), 2, 0, 1, 1) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[1]]))
                - (swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group2()[3]) + (self.group0()[2] * other.group3()[1]) + (self.group0()[2] * other.group1()[1])
                        - (self.group0()[1] * other.group3()[2])
                        + (self.group0()[0] * other.group0()[3])
                        + (self.group0()[0] * other.group1()[3])),
                    ((self.group1()[0] * other.group0()[2]) - (self.group0()[2] * other.group3()[0])
                        + (self.group0()[1] * other.group1()[3])
                        + (self.group0()[1] * other.group0()[3])
                        + (self.group0()[0] * other.group1()[2])
                        + (self.group0()[0] * other.group3()[2])),
                    ((self.group1()[1] * other.group0()[0])
                        + (self.group0()[2] * other.group1()[3])
                        + (self.group0()[2] * other.group0()[3])
                        + (self.group0()[1] * other.group3()[0])
                        + (self.group0()[1] * other.group1()[0])
                        - (self.group0()[0] * other.group3()[1])),
                    (-(self.group2()[0] * other.group0()[0])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e23, e31, e12, e45
            ((swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]))
                - (swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group2()[2]]))
                + (swizzle!(other.group2(), 3, 3, 3, 2) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[2]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group3()[2]]))
                + (swizzle!(other.group2(), 1, 2, 0, 0) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group3()[0])
                        + (self.group1()[2] * other.group1()[1])
                        + (self.group1()[0] * other.group0()[3])
                        + (self.group0()[0] * other.group3()[3])
                        - (self.group0()[1] * other.group2()[2])),
                    ((self.group1()[3] * other.group3()[1]) + (self.group1()[1] * other.group0()[3]) + (self.group1()[0] * other.group1()[2])
                        - (self.group0()[2] * other.group2()[0])
                        + (self.group0()[1] * other.group3()[3])),
                    ((self.group1()[3] * other.group3()[2])
                        + (self.group1()[2] * other.group0()[3])
                        + (self.group1()[1] * other.group1()[0])
                        + (self.group0()[2] * other.group3()[3])
                        - (self.group0()[0] * other.group2()[1])),
                    (-(self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[1] * other.group3()[1])
                        - (self.group1()[0] * other.group3()[0])
                        + (self.group0()[1] * other.group2()[1])),
                ])),
            // e15, e25, e35, e1234
            (-(swizzle!(other.group3(), 1, 2, 0, 2) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[2]]))
                - (swizzle!(other.group1(), 2, 0, 3, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[2], self.group0()[2]]))
                - (swizzle!(other.group1(), 3, 3, 1, 1) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[0], self.group0()[1]]))
                - (swizzle!(self.group1(), 1, 2, 0, 3) * swizzle!(other.group2(), 2, 0, 1, 3))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group1()[1])
                        + (self.group2()[1] * other.group3()[2])
                        + (self.group2()[0] * other.group0()[3])
                        + (self.group1()[3] * other.group2()[0])
                        + (self.group1()[2] * other.group2()[1])
                        + (self.group1()[0] * other.group3()[3])),
                    ((self.group2()[2] * other.group3()[0])
                        + (self.group2()[1] * other.group0()[3])
                        + (self.group2()[0] * other.group1()[2])
                        + (self.group1()[3] * other.group2()[1])
                        + (self.group1()[0] * other.group2()[2])
                        + (self.group1()[1] * other.group3()[3])),
                    ((self.group2()[2] * other.group0()[3])
                        + (self.group2()[1] * other.group1()[0])
                        + (self.group2()[0] * other.group3()[1])
                        + (self.group1()[3] * other.group2()[2])
                        + (self.group1()[2] * other.group3()[3])
                        + (self.group1()[1] * other.group2()[0])),
                    (-(self.group1()[2] * other.group0()[2])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group3()[1])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group3()[0])),
                ])),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + (swizzle!(other.group3(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[2]]))
                - (swizzle!(other.group2(), 1, 2, 0, 0) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group0()[1]) - (self.group2()[1] * other.group0()[2])
                        + (self.group2()[0] * other.group2()[3])
                        + (self.group1()[0] * other.group1()[3])
                        - (self.group0()[0] * other.group3()[3])
                        + (self.group0()[1] * other.group2()[2])),
                    (-(self.group2()[2] * other.group0()[0])
                        + (self.group2()[1] * other.group2()[3])
                        + (self.group2()[0] * other.group0()[2])
                        + (self.group1()[1] * other.group1()[3])
                        + (self.group0()[2] * other.group2()[0])
                        - (self.group0()[1] * other.group3()[3])),
                    ((self.group2()[2] * other.group2()[3]) + (self.group2()[1] * other.group0()[0]) - (self.group2()[0] * other.group0()[1])
                        + (self.group1()[2] * other.group1()[3])
                        - (self.group0()[2] * other.group3()[3])
                        + (self.group0()[0] * other.group2()[1])),
                    (-(self.group2()[2] * other.group1()[2]) + (self.group2()[1] * other.group3()[1]) - (self.group2()[1] * other.group1()[1])
                        + (self.group2()[0] * other.group3()[0])
                        - (self.group2()[0] * other.group1()[0])
                        - (self.group1()[1] * other.group2()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl InfixSandwich for DipoleInversion {}
impl Sandwich<AntiScalar> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       74        0
    //    simd3        0        1        0
    //    simd4       42       49        0
    // Totals...
    // yes simd       98      124        0
    //  no simd      224      273        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([(self.group0()[0] * other[e12345]), (self.group0()[1] * other[e12345]), (self.group0()[2] * other[e12345]), 0.0]),
            // e415, e425, e435, e321
            (self.group1() * Simd32x4::from(other[e12345]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e235, e315, e125, e5
            (Simd32x4::from(other[e12345]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]])),
            // e1, e2, e3, e4
            (Simd32x4::from(other[e12345]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[3]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      126      157        0
    //    simd3        0        1        0
    //    simd4       58       60        0
    // Totals...
    // yes simd      184      218        0
    //  no simd      358      400        0
    fn sandwich(self, other: Circle) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group3()[2], self.group1()[3], self.group1()[0], self.group2()[1]]))
                - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group1()[2], self.group3()[1], self.group2()[0]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group1()[1], self.group3()[0], self.group1()[3], self.group2()[2]]))
                - (swizzle!(other.group1(), 3, 0, 3, 3) * Simd32x4::from([self.group0()[0], self.group0()[2], self.group0()[2], self.group1()[3]]))
                - (swizzle!(other.group1(), 2, 3, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[0], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group3()[1] * other.group0()[2])
                        + (self.group2()[3] * other.group1()[0])
                        + (self.group1()[2] * other.group0()[1])
                        + (self.group0()[2] * other.group1()[1])),
                    ((self.group3()[2] * other.group0()[0])
                        + (self.group2()[3] * other.group1()[1])
                        + (self.group1()[0] * other.group0()[2])
                        + (self.group0()[0] * other.group1()[2])),
                    ((self.group3()[0] * other.group0()[1])
                        + (self.group2()[3] * other.group1()[2])
                        + (self.group1()[1] * other.group0()[0])
                        + (self.group0()[1] * other.group1()[0])),
                    (-(self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e321
            ((swizzle!(self.group3(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]))
                + (swizzle!(self.group2(), 3, 3, 3, 2) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[2]]))
                + (swizzle!(self.group2(), 2, 0, 1, 1) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(other.group1(), 1, 2, 0, 1) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[1]]))
                + Simd32x4::from([
                    (-(self.group3()[0] * other.group1()[3])
                        - (self.group2()[1] * other.group0()[2])
                        - (self.group1()[1] * other.group1()[2])
                        - (self.group0()[1] * other.group2()[2])
                        + (self.group0()[2] * other.group2()[1])),
                    (-(self.group3()[1] * other.group1()[3]) - (self.group2()[2] * other.group0()[0]) - (self.group1()[2] * other.group1()[0])
                        + (self.group0()[0] * other.group2()[2])
                        - (self.group0()[2] * other.group2()[0])),
                    (-(self.group3()[2] * other.group1()[3])
                        - (self.group2()[0] * other.group0()[1])
                        - (self.group1()[0] * other.group1()[1])
                        - (self.group0()[0] * other.group2()[1])
                        + (self.group0()[1] * other.group2()[0])),
                    ((self.group3()[0] * other.group1()[0]) + (self.group2()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group3()[3]) * other.group1())
                - (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group2()[2]]))
                - (swizzle!(self.group2(), 1, 2, 0, 2) * swizzle!(other.group1(), 2, 0, 1, 2))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group2()[2]]))
                + Simd32x4::from([
                    ((self.group3()[2] * other.group2()[1])
                        + (self.group2()[2] * other.group1()[1])
                        + (self.group2()[0] * other.group1()[3])
                        + (self.group1()[3] * other.group2()[0])
                        + (self.group1()[2] * other.group2()[1])),
                    ((self.group3()[0] * other.group2()[2])
                        + (self.group2()[1] * other.group1()[3])
                        + (self.group2()[0] * other.group1()[2])
                        + (self.group1()[3] * other.group2()[1])
                        + (self.group1()[0] * other.group2()[2])),
                    ((self.group3()[1] * other.group2()[0])
                        + (self.group2()[2] * other.group1()[3])
                        + (self.group2()[1] * other.group1()[0])
                        + (self.group1()[3] * other.group2()[2])
                        + (self.group1()[1] * other.group2()[0])),
                    (-(self.group3()[1] * other.group2()[1])
                        - (self.group3()[0] * other.group2()[0])
                        - (self.group2()[1] * other.group1()[1])
                        - (self.group2()[0] * other.group1()[0])
                        - (self.group1()[0] * other.group2()[0])
                        - (self.group1()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group1(), 1, 2, 0, 3) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]))
                + (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group3()[3] * other.group0()[0]) + (self.group2()[3] * other.group2()[0]) - (self.group2()[2] * other.group0()[1])
                        + (self.group2()[1] * other.group0()[2])
                        + (self.group1()[0] * other.group1()[3])
                        - (self.group0()[1] * other.group2()[2])
                        + (self.group0()[2] * other.group2()[1])),
                    (-(self.group3()[3] * other.group0()[1]) + (self.group2()[3] * other.group2()[1]) + (self.group2()[2] * other.group0()[0])
                        - (self.group2()[0] * other.group0()[2])
                        + (self.group1()[1] * other.group1()[3])
                        + (self.group0()[0] * other.group2()[2])
                        - (self.group0()[2] * other.group2()[0])),
                    (-(self.group3()[3] * other.group0()[2]) + (self.group2()[3] * other.group2()[2]) - (self.group2()[1] * other.group0()[0])
                        + (self.group2()[0] * other.group0()[1])
                        + (self.group1()[2] * other.group1()[3])
                        - (self.group0()[0] * other.group2()[1])
                        + (self.group0()[1] * other.group2()[0])),
                    ((self.group3()[1] * other.group0()[1]) + (self.group3()[0] * other.group0()[0])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      125      156        0
    //    simd3        0        1        0
    //    simd4       62       64        0
    // Totals...
    // yes simd      187      221        0
    //  no simd      373      415        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group3()[2], self.group1()[3], self.group1()[0], self.group2()[1]]))
                - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group1()[2], self.group3()[1], self.group2()[0]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group1()[1], self.group3()[0], self.group1()[3], self.group2()[2]]))
                - (swizzle!(other.group1(), 2, 0, 3, 3) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[2], self.group1()[3]]))
                - (swizzle!(other.group1(), 3, 3, 1, 2) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group3()[1] * other.group0()[2])
                        + (self.group2()[3] * other.group1()[0])
                        + (self.group1()[2] * other.group0()[1])
                        + (self.group0()[2] * other.group1()[1])
                        + (self.group0()[0] * other.group2()[3])),
                    ((self.group3()[2] * other.group0()[0])
                        + (self.group2()[3] * other.group1()[1])
                        + (self.group1()[0] * other.group0()[2])
                        + (self.group0()[1] * other.group2()[3])
                        + (self.group0()[0] * other.group1()[2])),
                    ((self.group3()[0] * other.group0()[1])
                        + (self.group2()[3] * other.group1()[2])
                        + (self.group1()[1] * other.group0()[0])
                        + (self.group0()[2] * other.group2()[3])
                        + (self.group0()[1] * other.group1()[0])),
                    (-(self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e321
            ((swizzle!(self.group3(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]))
                + (swizzle!(self.group2(), 3, 3, 3, 2) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[2]]))
                + (swizzle!(self.group2(), 2, 0, 1, 1) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(other.group1(), 1, 2, 0, 1) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[1]]))
                - (swizzle!(self.group1(), 1, 2, 0, 3) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[3]]))
                - (swizzle!(other.group2(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group3()[0] * other.group1()[3]) - (self.group2()[1] * other.group0()[2])
                        + (self.group1()[0] * other.group2()[3])
                        + (self.group0()[2] * other.group2()[1])),
                    (-(self.group3()[1] * other.group1()[3]) - (self.group2()[2] * other.group0()[0])
                        + (self.group1()[1] * other.group2()[3])
                        + (self.group0()[0] * other.group2()[2])),
                    (-(self.group3()[2] * other.group1()[3]) - (self.group2()[0] * other.group0()[1])
                        + (self.group1()[2] * other.group2()[3])
                        + (self.group0()[1] * other.group2()[0])),
                    ((self.group3()[0] * other.group1()[0]) + (self.group2()[0] * other.group0()[0])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                + (swizzle!(self.group3(), 2, 0, 1, 3) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]))
                - (swizzle!(self.group3(), 1, 2, 0, 2) * swizzle!(other.group2(), 2, 0, 1, 2))
                - (swizzle!(self.group2(), 1, 2, 0, 2) * swizzle!(other.group1(), 2, 0, 1, 2))
                - (swizzle!(other.group2(), 2, 0, 1, 1) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[1]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group1()[1])
                        + (self.group2()[0] * other.group2()[3])
                        + (self.group2()[0] * other.group1()[3])
                        + (self.group1()[3] * other.group2()[0])
                        + (self.group1()[2] * other.group2()[1])),
                    ((self.group2()[1] * other.group2()[3])
                        + (self.group2()[1] * other.group1()[3])
                        + (self.group2()[0] * other.group1()[2])
                        + (self.group1()[3] * other.group2()[1])
                        + (self.group1()[0] * other.group2()[2])),
                    ((self.group2()[2] * other.group2()[3])
                        + (self.group2()[2] * other.group1()[3])
                        + (self.group2()[1] * other.group1()[0])
                        + (self.group1()[3] * other.group2()[2])
                        + (self.group1()[1] * other.group2()[0])),
                    (-(self.group3()[0] * other.group2()[0])
                        - (self.group2()[1] * other.group1()[1])
                        - (self.group2()[0] * other.group1()[0])
                        - (self.group1()[2] * other.group2()[2])
                        - (self.group1()[0] * other.group2()[0])
                        - (self.group1()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group1(), 1, 2, 0, 3) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]))
                + (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                + (Simd32x4::from(self.group2()[3]) * other.group2())
                - (swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group3()[3] * other.group0()[0]) - (self.group3()[0] * other.group2()[3]) - (self.group2()[2] * other.group0()[1])
                        + (self.group2()[1] * other.group0()[2])
                        + (self.group1()[0] * other.group1()[3])
                        - (self.group0()[1] * other.group2()[2])
                        + (self.group0()[2] * other.group2()[1])),
                    (-(self.group3()[3] * other.group0()[1]) - (self.group3()[1] * other.group2()[3]) + (self.group2()[2] * other.group0()[0])
                        - (self.group2()[0] * other.group0()[2])
                        + (self.group1()[1] * other.group1()[3])
                        + (self.group0()[0] * other.group2()[2])
                        - (self.group0()[2] * other.group2()[0])),
                    (-(self.group3()[3] * other.group0()[2]) - (self.group3()[2] * other.group2()[3]) - (self.group2()[1] * other.group0()[0])
                        + (self.group2()[0] * other.group0()[1])
                        + (self.group1()[2] * other.group1()[3])
                        - (self.group0()[0] * other.group2()[1])
                        + (self.group0()[1] * other.group2()[0])),
                    ((self.group3()[1] * other.group0()[1]) + (self.group3()[0] * other.group0()[0])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      142      177        0
    //    simd3        0        1        0
    //    simd4       54       55        0
    // Totals...
    // yes simd      196      233        0
    //  no simd      358      400        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group3()[2], self.group1()[3], self.group1()[0], self.group2()[1]]))
                + (other.group1() * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group1()[3]]))
                - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group1()[2], self.group3()[1], self.group2()[0]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group1()[1], self.group3()[0], self.group1()[3], self.group2()[2]]))
                - (swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group3()[1] * other.group0()[2])
                        + (self.group1()[2] * other.group0()[1])
                        + (self.group0()[2] * other.group1()[1])
                        + (self.group0()[0] * other.group1()[3])),
                    ((self.group3()[2] * other.group0()[0])
                        + (self.group1()[0] * other.group0()[2])
                        + (self.group0()[0] * other.group1()[2])
                        + (self.group0()[1] * other.group1()[3])),
                    ((self.group3()[0] * other.group0()[1])
                        + (self.group1()[1] * other.group0()[0])
                        + (self.group0()[2] * other.group1()[3])
                        + (self.group0()[1] * other.group1()[0])),
                    (-(self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e23, e31, e12, e45
            (-(swizzle!(self.group2(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[2]]))
                + Simd32x4::from([
                    ((self.group3()[3] * other.group0()[0])
                        + (self.group3()[0] * other.group1()[3])
                        + (self.group2()[3] * other.group2()[0])
                        + (self.group2()[2] * other.group0()[1])
                        + (self.group1()[2] * other.group1()[1])
                        - (self.group0()[1] * other.group2()[2])
                        + (self.group0()[2] * other.group2()[1])),
                    ((self.group3()[3] * other.group0()[1])
                        + (self.group3()[1] * other.group1()[3])
                        + (self.group2()[3] * other.group2()[1])
                        + (self.group2()[0] * other.group0()[2])
                        + (self.group1()[0] * other.group1()[2])
                        + (self.group0()[0] * other.group2()[2])
                        - (self.group0()[2] * other.group2()[0])),
                    ((self.group3()[3] * other.group0()[2])
                        + (self.group3()[2] * other.group1()[3])
                        + (self.group2()[3] * other.group2()[2])
                        + (self.group2()[1] * other.group0()[0])
                        + (self.group1()[1] * other.group1()[0])
                        - (self.group0()[0] * other.group2()[1])
                        + (self.group0()[1] * other.group2()[0])),
                    (-(self.group3()[1] * other.group1()[1])
                        - (self.group3()[0] * other.group1()[0])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        + (self.group0()[2] * other.group2()[2])
                        + (self.group0()[0] * other.group2()[0])
                        + (self.group0()[1] * other.group2()[1])),
                ])),
            // e15, e25, e35, e1234
            ((swizzle!(self.group3(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]))
                + (swizzle!(self.group3(), 2, 0, 1, 1) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[1]]))
                + (swizzle!(self.group2(), 2, 0, 1, 3) * swizzle!(other.group1(), 1, 2, 0, 3))
                - (swizzle!(other.group1(), 2, 0, 3, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[2], self.group0()[2]]))
                - (swizzle!(other.group1(), 3, 3, 1, 0) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[0], self.group0()[0]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group3()[1] * other.group2()[2]) + (self.group1()[3] * other.group2()[0]) + (self.group1()[2] * other.group2()[1])),
                    (-(self.group3()[2] * other.group2()[0]) + (self.group1()[3] * other.group2()[1]) + (self.group1()[0] * other.group2()[2])),
                    (-(self.group3()[0] * other.group2()[1]) + (self.group1()[3] * other.group2()[2]) + (self.group1()[1] * other.group2()[0])),
                    ((self.group3()[0] * other.group0()[0])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group3(), 1, 2, 0, 3) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (swizzle!(self.group2(), 3, 3, 3, 2) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[2]]))
                - (swizzle!(self.group2(), 1, 2, 0, 1) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[1]]))
                + Simd32x4::from([
                    ((self.group3()[3] * other.group0()[0])
                        + (self.group3()[2] * other.group1()[1])
                        + (self.group2()[2] * other.group0()[1])
                        + (self.group1()[3] * other.group1()[0])
                        + (self.group1()[0] * other.group1()[3])
                        + (self.group0()[1] * other.group2()[2])
                        - (self.group0()[2] * other.group2()[1])),
                    ((self.group3()[3] * other.group0()[1])
                        + (self.group3()[0] * other.group1()[2])
                        + (self.group2()[0] * other.group0()[2])
                        + (self.group1()[3] * other.group1()[1])
                        + (self.group1()[1] * other.group1()[3])
                        - (self.group0()[0] * other.group2()[2])
                        + (self.group0()[2] * other.group2()[0])),
                    ((self.group3()[3] * other.group0()[2])
                        + (self.group3()[1] * other.group1()[0])
                        + (self.group2()[1] * other.group0()[0])
                        + (self.group1()[3] * other.group1()[2])
                        + (self.group1()[2] * other.group1()[3])
                        + (self.group0()[0] * other.group2()[1])
                        - (self.group0()[1] * other.group2()[0])),
                    (-(self.group3()[2] * other.group2()[2])
                        - (self.group3()[1] * other.group2()[1])
                        - (self.group3()[0] * other.group2()[0])
                        - (self.group2()[0] * other.group1()[0])
                        - (self.group1()[2] * other.group2()[2])
                        - (self.group1()[0] * other.group2()[0])
                        - (self.group1()[1] * other.group2()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      141      176        0
    //    simd3        0        1        0
    //    simd4       73       74        0
    // Totals...
    // yes simd      214      251        0
    //  no simd      433      475        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(swizzle!(self.group3(), 2, 1, 2, 2) * Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group3()[2]]))
                + (swizzle!(self.group3(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]))
                - (swizzle!(self.group3(), 0, 0, 1, 1) * Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group3()[1]]))
                + (Simd32x4::from(self.group2()[3]) * other.group3())
                + (other.group1() * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group1()[3]]))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]))
                - (swizzle!(self.group1(), 1, 2, 0, 1) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[1]]))
                - (swizzle!(other.group3(), 2, 0, 1, 0) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group0()[1])
                        + (self.group1()[0] * other.group2()[3])
                        + (self.group0()[2] * other.group3()[1])
                        + (self.group0()[2] * other.group1()[1])
                        + (self.group0()[0] * other.group1()[3])),
                    ((self.group1()[1] * other.group2()[3])
                        + (self.group1()[0] * other.group0()[2])
                        + (self.group0()[1] * other.group1()[3])
                        + (self.group0()[0] * other.group1()[2])
                        + (self.group0()[0] * other.group3()[2])),
                    ((self.group1()[2] * other.group2()[3])
                        + (self.group1()[1] * other.group0()[0])
                        + (self.group0()[2] * other.group1()[3])
                        + (self.group0()[1] * other.group3()[0])
                        + (self.group0()[1] * other.group1()[0])),
                    (-(self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e23, e31, e12, e45
            ((Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[2]]))
                + (swizzle!(other.group2(), 0, 1, 2, 2) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[2]]))
                - (swizzle!(self.group2(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group3()[3]]))
                + (swizzle!(other.group2(), 3, 3, 3, 0) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[0]]))
                - (swizzle!(other.group1(), 2, 0, 1, 1) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[1]]))
                + (swizzle!(other.group2(), 1, 2, 0, 1) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[1]]))
                + Simd32x4::from([
                    ((self.group3()[2] * other.group3()[1])
                        + (self.group3()[0] * other.group1()[3])
                        + (self.group2()[2] * other.group0()[1])
                        + (self.group1()[3] * other.group3()[0])
                        + (self.group1()[2] * other.group1()[1])
                        + (self.group0()[0] * other.group3()[3])
                        - (self.group0()[1] * other.group2()[2])),
                    ((self.group3()[1] * other.group1()[3])
                        + (self.group3()[0] * other.group3()[2])
                        + (self.group2()[0] * other.group0()[2])
                        + (self.group1()[3] * other.group3()[1])
                        + (self.group1()[0] * other.group1()[2])
                        - (self.group0()[2] * other.group2()[0])
                        + (self.group0()[1] * other.group3()[3])),
                    ((self.group3()[2] * other.group1()[3])
                        + (self.group3()[1] * other.group3()[0])
                        + (self.group2()[1] * other.group0()[0])
                        + (self.group1()[3] * other.group3()[2])
                        + (self.group1()[1] * other.group1()[0])
                        + (self.group0()[2] * other.group3()[3])
                        - (self.group0()[0] * other.group2()[1])),
                    (-(self.group3()[0] * other.group1()[0])
                        - (self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[2] * other.group3()[2])
                        - (self.group1()[1] * other.group3()[1])
                        - (self.group1()[0] * other.group3()[0])),
                ])),
            // e15, e25, e35, e1234
            (-(swizzle!(other.group3(), 0, 1, 2, 2) * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group0()[2]]))
                + (swizzle!(self.group3(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]))
                + (swizzle!(self.group3(), 2, 1, 2, 1) * Simd32x4::from([other.group2()[1], other.group3()[3], other.group3()[3], other.group0()[1]]))
                - (swizzle!(other.group2(), 2, 0, 1, 3) * Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[3]]))
                + (swizzle!(self.group3(), 0, 0, 1, 0) * Simd32x4::from([other.group3()[3], other.group2()[2], other.group2()[0], other.group0()[0]]))
                - (swizzle!(other.group3(), 1, 2, 0, 1) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[1]]))
                + (swizzle!(self.group2(), 2, 2, 1, 3) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[0], other.group1()[3]]))
                - (swizzle!(other.group1(), 2, 0, 3, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[2], self.group0()[2]]))
                - (swizzle!(other.group1(), 3, 3, 1, 1) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[0], self.group0()[1]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[2]]))
                + Simd32x4::from([
                    ((self.group2()[1] * other.group3()[2])
                        + (self.group1()[3] * other.group2()[0])
                        + (self.group1()[2] * other.group2()[1])
                        + (self.group1()[0] * other.group3()[3])),
                    ((self.group2()[0] * other.group1()[2])
                        + (self.group1()[3] * other.group2()[1])
                        + (self.group1()[0] * other.group2()[2])
                        + (self.group1()[1] * other.group3()[3])),
                    ((self.group2()[0] * other.group3()[1])
                        + (self.group1()[3] * other.group2()[2])
                        + (self.group1()[2] * other.group3()[3])
                        + (self.group1()[1] * other.group2()[0])),
                    (-(self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group3()[0])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group3(), 1, 2, 0, 3) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (swizzle!(other.group2(), 0, 1, 2, 2) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[2]]))
                + (swizzle!(self.group2(), 2, 1, 2, 2) * Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group3()[2]]))
                - (swizzle!(self.group2(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + (swizzle!(self.group2(), 0, 0, 1, 1) * Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group3()[1]]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + (swizzle!(other.group3(), 1, 2, 0, 0) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[2]]))
                - (swizzle!(other.group2(), 1, 2, 0, 1) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[1]]))
                + Simd32x4::from([
                    ((self.group3()[3] * other.group0()[0]) + (self.group3()[2] * other.group1()[1]) + (self.group1()[0] * other.group1()[3])
                        - (self.group0()[0] * other.group3()[3])
                        + (self.group0()[1] * other.group2()[2])),
                    ((self.group3()[3] * other.group0()[1])
                        + (self.group3()[0] * other.group1()[2])
                        + (self.group1()[1] * other.group1()[3])
                        + (self.group0()[2] * other.group2()[0])
                        - (self.group0()[1] * other.group3()[3])),
                    ((self.group3()[3] * other.group0()[2]) + (self.group3()[1] * other.group1()[0]) + (self.group1()[2] * other.group1()[3])
                        - (self.group0()[2] * other.group3()[3])
                        + (self.group0()[0] * other.group2()[1])),
                    (-(self.group3()[0] * other.group2()[0])
                        - (self.group2()[1] * other.group1()[1])
                        - (self.group2()[0] * other.group1()[0])
                        - (self.group1()[0] * other.group2()[0])
                        - (self.group1()[1] * other.group2()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       59       85        0
    //    simd3        0        1        0
    //    simd4       45       49        0
    // Totals...
    // yes simd      104      135        0
    //  no simd      239      284        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[2] * other.group0()[1]),
                (self.group2()[3] * other.group0()[0]),
            ]),
            // e415, e425, e435, e321
            ((Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                + (Simd32x4::from([1.0, 1.0, 1.0, -1.0]) * self.group1() * Simd32x4::from(other.group0()[1]))),
            // e235, e315, e125, e5
            ((Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group1()[3]]))
                + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))
                + Simd32x4::from([
                    (self.group1()[0] * other.group0()[0]),
                    (self.group1()[1] * other.group0()[0]),
                    (self.group1()[2] * other.group0()[0]),
                    0.0,
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) - (self.group3()[0] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[0]) - (self.group3()[1] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[0]) - (self.group3()[2] * other.group0()[1])),
                (self.group2()[3] * other.group0()[1]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       97      134        0
    //    simd3        0        1        0
    //    simd4       43       44        0
    // Totals...
    // yes simd      140      179        0
    //  no simd      269      313        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                ((self.group1()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e23, e31, e12, e45
            ((swizzle!(other.group0(), 3, 3, 3, 2) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[2]]))
                + (swizzle!(other.group0(), 0, 1, 2, 0) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[0]]))
                + (swizzle!(other.group0(), 1, 2, 0, 1) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[1]]))
                + Simd32x4::from([
                    ((self.group0()[1] * other.group0()[2]) * -1.0),
                    ((self.group0()[2] * other.group0()[0]) * -1.0),
                    ((self.group0()[0] * other.group0()[1]) * -1.0),
                    0.0,
                ])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group3()[2] * other.group0()[1]) - (self.group3()[1] * other.group0()[2]) - (self.group2()[0] * other.group0()[3]) + (self.group1()[3] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[1])),
                (-(self.group3()[2] * other.group0()[0]) + (self.group3()[0] * other.group0()[2]) - (self.group2()[1] * other.group0()[3])
                    + (self.group1()[3] * other.group0()[1])
                    + (self.group1()[0] * other.group0()[2])
                    - (self.group1()[2] * other.group0()[0])),
                ((self.group3()[1] * other.group0()[0]) - (self.group3()[0] * other.group0()[1]) - (self.group2()[2] * other.group0()[3]) + (self.group1()[3] * other.group0()[2])
                    - (self.group1()[0] * other.group0()[1])
                    + (self.group1()[1] * other.group0()[0])),
                (self.group2()[3] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            (-(other.group0() * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[3]]))
                - (swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[2]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2])),
                    ((self.group1()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[0])),
                    ((self.group1()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1])),
                    (-(self.group3()[1] * other.group0()[1])
                        - (self.group3()[0] * other.group0()[0])
                        - (self.group1()[2] * other.group0()[2])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group1()[1] * other.group0()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      120      156        0
    //    simd3        0        1        0
    //    simd4       52       53        0
    // Totals...
    // yes simd      172      210        0
    //  no simd      328      371        0
    fn sandwich(self, other: Flector) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((Simd32x4::from(self.group2()[3]) * other.group1())
                + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[2]]))
                + Simd32x4::from([
                    (self.group0()[2] * other.group1()[1]),
                    (self.group0()[0] * other.group1()[2]),
                    (self.group0()[1] * other.group1()[0]),
                    (-(self.group3()[1] * other.group1()[1])
                        - (self.group3()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group0()[2])
                        - (self.group0()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group0()[1])),
                ])),
            // e23, e31, e12, e45
            (-(swizzle!(other.group1(), 2, 0, 1, 3) * Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[3]]))
                + (swizzle!(other.group0(), 3, 3, 3, 2) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[2]]))
                + (swizzle!(other.group0(), 0, 1, 2, 0) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[0]]))
                + (swizzle!(other.group0(), 1, 2, 0, 1) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[1]]))
                + Simd32x4::from([
                    ((self.group3()[2] * other.group1()[1]) + (self.group1()[3] * other.group1()[0]) + (self.group0()[0] * other.group1()[3])
                        - (self.group0()[1] * other.group0()[2])),
                    ((self.group3()[0] * other.group1()[2]) + (self.group1()[3] * other.group1()[1]) - (self.group0()[2] * other.group0()[0])
                        + (self.group0()[1] * other.group1()[3])),
                    ((self.group3()[1] * other.group1()[0]) + (self.group1()[3] * other.group1()[2]) + (self.group0()[2] * other.group1()[3])
                        - (self.group0()[0] * other.group0()[1])),
                    (-(self.group1()[2] * other.group1()[2]) - (self.group1()[1] * other.group1()[1]) - (self.group1()[0] * other.group1()[0])),
                ])),
            // e15, e25, e35, e1234
            (-(swizzle!(other.group1(), 0, 1, 2, 2) * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group0()[2]]))
                + (swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]))
                - (swizzle!(other.group1(), 1, 2, 0, 0) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]))
                + Simd32x4::from([
                    (-(self.group3()[1] * other.group0()[2]) + (self.group3()[0] * other.group1()[3]) + (self.group2()[1] * other.group1()[2])
                        - (self.group2()[0] * other.group0()[3])
                        + (self.group1()[3] * other.group0()[0])
                        + (self.group1()[2] * other.group0()[1])
                        + (self.group1()[0] * other.group1()[3])
                        - (self.group1()[1] * other.group0()[2])),
                    (-(self.group3()[2] * other.group0()[0]) + (self.group3()[1] * other.group1()[3]) + (self.group2()[2] * other.group1()[0])
                        - (self.group2()[1] * other.group0()[3])
                        + (self.group1()[3] * other.group0()[1])
                        - (self.group1()[2] * other.group0()[0])
                        + (self.group1()[0] * other.group0()[2])
                        + (self.group1()[1] * other.group1()[3])),
                    ((self.group3()[2] * other.group1()[3]) - (self.group3()[0] * other.group0()[1]) - (self.group2()[2] * other.group0()[3])
                        + (self.group2()[0] * other.group1()[1])
                        + (self.group1()[3] * other.group0()[2])
                        + (self.group1()[2] * other.group1()[3])
                        - (self.group1()[0] * other.group0()[1])
                        + (self.group1()[1] * other.group0()[0])),
                    ((self.group0()[1] * other.group1()[1]) * -1.0),
                ])),
            // e4235, e4315, e4125, e3215
            (-(other.group0() * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[3]]))
                + (swizzle!(self.group1(), 2, 1, 2, 3) * Simd32x4::from([other.group1()[1], other.group0()[3], other.group0()[3], other.group1()[3]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                - (swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[2]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group0()[3]) - (self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[2])),
                    ((self.group1()[0] * other.group1()[2]) + (self.group0()[2] * other.group0()[0]) - (self.group0()[1] * other.group1()[3])),
                    ((self.group1()[1] * other.group1()[0]) - (self.group0()[2] * other.group1()[3]) + (self.group0()[0] * other.group0()[1])),
                    (-(self.group3()[1] * other.group0()[1]) - (self.group3()[0] * other.group0()[0])
                        + (self.group2()[2] * other.group1()[2])
                        + (self.group2()[1] * other.group1()[1])
                        + (self.group2()[0] * other.group1()[0])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group1()[1] * other.group0()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      118      149        0
    //    simd3        0        1        0
    //    simd4       45       47        0
    // Totals...
    // yes simd      163      197        0
    //  no simd      298      340        0
    fn sandwich(self, other: Line) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group2()[3] * other.group0()[0]) - (self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group2()[3] * other.group0()[1]) + (self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                ((self.group2()[3] * other.group0()[2]) - (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group2()[3] * other.group1()[0]) + (self.group1()[2] * other.group0()[1]) - (self.group1()[1] * other.group0()[2]) - (self.group0()[1] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[1])),
                ((self.group2()[3] * other.group1()[1]) - (self.group1()[2] * other.group0()[0]) + (self.group1()[0] * other.group0()[2]) + (self.group0()[0] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[0])),
                ((self.group2()[3] * other.group1()[2]) + (self.group1()[1] * other.group0()[0]) - (self.group1()[0] * other.group0()[1]) - (self.group0()[0] * other.group1()[1])
                    + (self.group0()[1] * other.group1()[0])),
                ((self.group3()[2] * other.group0()[2]) + (self.group3()[1] * other.group0()[1]) + (self.group3()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e235, e315, e125, e5
            (-(swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (swizzle!(self.group2(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group3()[3] * other.group0()[0])
                        + (self.group3()[2] * other.group1()[1])
                        + (self.group2()[2] * other.group0()[1])
                        + (self.group1()[3] * other.group1()[0])
                        + (self.group1()[2] * other.group1()[1])),
                    ((self.group3()[3] * other.group0()[1])
                        + (self.group3()[0] * other.group1()[2])
                        + (self.group2()[0] * other.group0()[2])
                        + (self.group1()[3] * other.group1()[1])
                        + (self.group1()[0] * other.group1()[2])),
                    ((self.group3()[3] * other.group0()[2])
                        + (self.group3()[1] * other.group1()[0])
                        + (self.group2()[1] * other.group0()[0])
                        + (self.group1()[3] * other.group1()[2])
                        + (self.group1()[1] * other.group1()[0])),
                    (-(self.group3()[1] * other.group1()[1])
                        - (self.group3()[0] * other.group1()[0])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group1()[1] * other.group1()[1])),
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group3()[2] * other.group0()[1]) + (self.group3()[1] * other.group0()[2]) + (self.group2()[3] * other.group1()[0])
                    - (self.group1()[3] * other.group0()[0])
                    - (self.group0()[1] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[1])),
                ((self.group3()[2] * other.group0()[0]) - (self.group3()[0] * other.group0()[2]) + (self.group2()[3] * other.group1()[1]) - (self.group1()[3] * other.group0()[1])
                    + (self.group0()[0] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[0])),
                (-(self.group3()[1] * other.group0()[0]) + (self.group3()[0] * other.group0()[1]) + (self.group2()[3] * other.group1()[2])
                    - (self.group1()[3] * other.group0()[2])
                    - (self.group0()[0] * other.group1()[1])
                    + (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       97      127        0
    //    simd3        0        1        0
    //    simd4       58       60        0
    // Totals...
    // yes simd      155      188        0
    //  no simd      329      370        0
    fn sandwich(self, other: Motor) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group0()[1]) + (self.group0()[0] * other.group0()[3])),
                    ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[3])),
                    ((self.group0()[2] * other.group0()[3]) + (self.group0()[1] * other.group0()[0])),
                    (-(self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e415, e425, e435, e321
            ((Simd32x4::from(self.group2()[3]) * other.group1())
                + (swizzle!(other.group0(), 1, 3, 3, 2) * Simd32x4::from([self.group1()[2], self.group1()[1], self.group1()[2], self.group3()[2]]))
                - (swizzle!(self.group1(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))
                + (swizzle!(other.group0(), 3, 2, 0, 1) * Simd32x4::from([self.group1()[0], self.group1()[0], self.group1()[1], self.group3()[1]]))
                - (swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group1()[1]) + (self.group0()[0] * other.group1()[3])),
                    ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3])),
                    ((self.group0()[2] * other.group1()[3]) + (self.group0()[1] * other.group1()[0])),
                    ((self.group3()[0] * other.group0()[0]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group3()[3]) * other.group0())
                + (swizzle!(other.group1(), 1, 3, 3, 3) * Simd32x4::from([self.group3()[2], self.group3()[1], self.group3()[2], self.group1()[3]]))
                - (swizzle!(self.group3(), 1, 2, 0, 2) * swizzle!(other.group1(), 2, 0, 1, 2))
                - (swizzle!(self.group2(), 1, 2, 0, 2) * swizzle!(other.group0(), 2, 0, 1, 2))
                - (swizzle!(other.group1(), 2, 0, 1, 1) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[1]]))
                + Simd32x4::from([
                    ((self.group3()[0] * other.group1()[3])
                        + (self.group2()[2] * other.group0()[1])
                        + (self.group2()[0] * other.group0()[3])
                        + (self.group1()[3] * other.group1()[0])
                        + (self.group1()[2] * other.group1()[1])
                        + (self.group1()[0] * other.group1()[3])),
                    ((self.group3()[0] * other.group1()[2])
                        + (self.group2()[1] * other.group0()[3])
                        + (self.group2()[0] * other.group0()[2])
                        + (self.group1()[3] * other.group1()[1])
                        + (self.group1()[0] * other.group1()[2])
                        + (self.group1()[1] * other.group1()[3])),
                    ((self.group3()[1] * other.group1()[0])
                        + (self.group2()[2] * other.group0()[3])
                        + (self.group2()[1] * other.group0()[0])
                        + (self.group1()[3] * other.group1()[2])
                        + (self.group1()[2] * other.group1()[3])
                        + (self.group1()[1] * other.group1()[0])),
                    (-(self.group3()[0] * other.group1()[0])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[2] * other.group1()[2])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group1()[1] * other.group1()[1])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group0(), 1, 3, 3, 2) * Simd32x4::from([self.group3()[2], self.group3()[1], self.group3()[2], self.group0()[2]]))
                + (swizzle!(other.group0(), 2, 0, 1, 3) * Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[3]]))
                - (swizzle!(other.group0(), 3, 2, 0, 0) * Simd32x4::from([self.group3()[0], self.group3()[0], self.group3()[1], self.group0()[0]]))
                - (swizzle!(other.group0(), 0, 1, 2, 1) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[1]]))
                + Simd32x4::from([
                    ((self.group2()[3] * other.group1()[0]) + (self.group0()[2] * other.group1()[1]) + (self.group0()[0] * other.group1()[3])
                        - (self.group0()[1] * other.group1()[2])),
                    ((self.group2()[3] * other.group1()[1]) - (self.group0()[2] * other.group1()[0])
                        + (self.group0()[0] * other.group1()[2])
                        + (self.group0()[1] * other.group1()[3])),
                    ((self.group2()[3] * other.group1()[2]) + (self.group0()[2] * other.group1()[3]) - (self.group0()[0] * other.group1()[1])
                        + (self.group0()[1] * other.group1()[0])),
                    0.0,
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for DipoleInversion {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      254      309        0
    //    simd2       22       22        0
    //    simd3      106      111        0
    //    simd4       70       71        0
    // Totals...
    // yes simd      452      513        0
    //  no simd      896      970        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(self.group3()[3]) * Simd32x2::from([other[e35], other.group1()[3]]))
                + (Simd32x2::from(self.group2()[3]) * Simd32x2::from([other.group8()[3], other[e1]]))
                - (Simd32x2::from(self.group2()[2]) * Simd32x2::from([other.group4()[2], other.group6()[2]]))
                - (Simd32x2::from(self.group2()[1]) * Simd32x2::from([other.group4()[1], other.group6()[1]]))
                - (Simd32x2::from(self.group2()[0]) * Simd32x2::from([other.group4()[0], other.group6()[0]]))
                - (Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group10()[0], other.group5()[2]]))
                - (Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group10()[1], other.group5()[1]]))
                - (Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group10()[2], other.group5()[0]]))
                - (Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group3()[2], other.group7()[2]]))
                - (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group3()[0], other.group7()[0]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group3()[1], other.group7()[1]]))
                + Simd32x2::from([
                    (-(self.group3()[2] * other.group8()[2]) - (self.group3()[1] * other.group8()[1]) - (self.group3()[0] * other.group8()[0])
                        + (self.group1()[3] * other.group3()[3])),
                    ((self.group3()[2] * other.group1()[2]) + (self.group3()[1] * other.group1()[1]) + (self.group3()[0] * other.group1()[0])
                        - (self.group1()[3] * other.group5()[3])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group5(), 1, 2, 0, 3) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]))
                + (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group6()[2]]))
                + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group0()[1]]))
                - (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group6()[2]]))
                + (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[2]]))
                - (swizzle!(self.group1(), 1, 2, 0, 1) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group6()[1]]))
                + Simd32x4::from([
                    (-(self.group3()[3] * other.group6()[0]) - (self.group3()[0] * other.group0()[1]) - (self.group2()[2] * other.group6()[1])
                        + (self.group2()[1] * other.group6()[2])
                        + (self.group1()[0] * other.group5()[3])
                        + (self.group0()[2] * other.group7()[1])
                        + (self.group0()[0] * other[e1])
                        - (self.group0()[1] * other.group7()[2])),
                    (-(self.group3()[3] * other.group6()[1]) - (self.group3()[1] * other.group0()[1]) + (self.group2()[2] * other.group6()[0])
                        - (self.group2()[0] * other.group6()[2])
                        + (self.group1()[1] * other.group5()[3])
                        - (self.group0()[2] * other.group7()[0])
                        + (self.group0()[0] * other.group7()[2])
                        + (self.group0()[1] * other[e1])),
                    (-(self.group3()[3] * other.group6()[2]) - (self.group3()[2] * other.group0()[1]) - (self.group2()[1] * other.group6()[0])
                        + (self.group2()[0] * other.group6()[1])
                        + (self.group1()[2] * other.group5()[3])
                        + (self.group0()[2] * other[e1])
                        - (self.group0()[0] * other.group7()[1])
                        + (self.group0()[1] * other.group7()[0])),
                    ((self.group3()[1] * other.group6()[1]) + (self.group3()[0] * other.group6()[0])
                        - (self.group1()[0] * other.group6()[0])
                        - (self.group0()[2] * other.group5()[2])
                        - (self.group0()[1] * other.group5()[1])
                        + (self.group0()[1] * other.group1()[1])
                        + (self.group0()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group5()[0])),
                ])),
            // e5
            ((self.group3()[3] * other.group5()[3]) + (self.group3()[3] * other.group0()[1])
                - (self.group3()[2] * other.group7()[2])
                - (self.group3()[1] * other.group7()[1])
                - (self.group3()[0] * other.group7()[0])
                - (self.group2()[2] * other.group5()[2])
                - (self.group2()[2] * other.group1()[2])
                - (self.group2()[1] * other.group5()[1])
                - (self.group2()[1] * other.group1()[1])
                - (self.group2()[0] * other.group5()[0])
                - (self.group2()[0] * other.group1()[0])
                + (self.group1()[3] * other[e1])
                - (self.group1()[2] * other.group7()[2])
                - (self.group1()[0] * other.group7()[0])
                - (self.group1()[1] * other.group7()[1])),
            // e15, e25, e35, e45
            ((Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group10()[2], other.group10()[1], other.group10()[0], other[e35]]))
                - (swizzle!(self.group3(), 3, 3, 3, 2) * Simd32x4::from([other.group8()[0], other.group8()[1], other.group8()[2], other.group10()[0]]))
                + (swizzle!(other.group3(), 1, 2, 0, 2) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group0()[2]]))
                - (swizzle!(self.group3(), 1, 2, 0, 1) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group10()[1]]))
                - (swizzle!(self.group2(), 2, 2, 2, 3) * Simd32x4::from([other.group8()[1], other.group10()[2], other.group3()[3], other.group8()[3]]))
                - (swizzle!(self.group2(), 1, 1, 1, 2) * Simd32x4::from([other.group10()[0], other.group3()[3], other.group8()[0], other.group4()[2]]))
                - (swizzle!(self.group2(), 0, 0, 0, 1) * Simd32x4::from([other.group3()[3], other.group8()[2], other.group10()[1], other.group4()[1]]))
                + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                + (swizzle!(other.group3(), 0, 1, 2, 0) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[0]]))
                + (swizzle!(other.group3(), 1, 2, 0, 1) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[1]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group8()[2]]))
                + Simd32x4::from([
                    ((self.group3()[0] * other.group8()[3])
                        + (self.group2()[2] * other.group10()[1])
                        + (self.group2()[1] * other.group8()[2])
                        + (self.group1()[0] * other.group8()[3])),
                    ((self.group3()[1] * other.group8()[3])
                        + (self.group2()[2] * other.group8()[0])
                        + (self.group2()[0] * other.group10()[0])
                        + (self.group1()[1] * other.group8()[3])),
                    ((self.group3()[2] * other.group8()[3])
                        + (self.group2()[1] * other.group10()[2])
                        + (self.group2()[0] * other.group8()[1])
                        + (self.group1()[2] * other.group8()[3])),
                    (-(self.group3()[0] * other.group10()[2])
                        - (self.group2()[0] * other.group4()[0])
                        - (self.group1()[1] * other.group8()[1])
                        - (self.group1()[0] * other.group8()[0])),
                ])),
            // e41, e42, e43
            (-(swizzle!(other.group4(), 1, 2, 0) * Simd32x3::from([self.group3()[2], self.group3()[0], self.group3()[1]]))
                + (swizzle!(other.group4(), 2, 0, 1) * Simd32x3::from([self.group3()[1], self.group3()[2], self.group3()[0]]))
                - (Simd32x3::from(other[e35]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(self.group2()[3]) * swizzle!(other.group10(), 2, 1, 0))
                + (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group8()[0], other.group8()[1], other.group8()[2]]))
                - (Simd32x3::from(self.group1()[3]) * other.group4())
                + (swizzle!(other.group4(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))
                - (swizzle!(other.group4(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                + (Simd32x3::from(other[e35]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (swizzle!(self.group0(), 2, 1, 2) * Simd32x3::from([other.group10()[1], other.group3()[3], other.group3()[3]]))
                + (swizzle!(self.group0(), 2, 1, 2) * Simd32x3::from([other.group8()[1], other.group0()[0], other.group0()[0]]))
                - (swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group10()[0], other.group10()[2], other.group8()[1]]))
                - (swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group8()[2], other.group8()[0], other.group10()[1]]))
                + (swizzle!(self.group0(), 0, 0, 1) * Simd32x3::from([other.group0()[0], other.group8()[2], other.group10()[2]]))
                + (swizzle!(self.group0(), 0, 0, 1) * Simd32x3::from([other.group3()[3], other.group10()[0], other.group8()[0]]))),
            // e415, e425, e435, e321
            ((swizzle!(self.group3(), 3, 3, 3, 2) * Simd32x4::from([other.group6()[0], other.group6()[1], other.group6()[2], other.group5()[2]]))
                - (swizzle!(self.group3(), 2, 1, 2, 3) * Simd32x4::from([other.group1()[1], other.group5()[3], other.group5()[3], other.group1()[3]]))
                + (swizzle!(self.group3(), 1, 2, 0, 1) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group5()[1]]))
                + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other[e1]]))
                + (swizzle!(self.group2(), 2, 1, 2, 2) * Simd32x4::from([other.group6()[1], other.group1()[3], other.group1()[3], other.group6()[2]]))
                + (swizzle!(self.group2(), 0, 0, 1, 1) * Simd32x4::from([other.group1()[3], other.group6()[2], other.group6()[0], other.group6()[1]]))
                - (swizzle!(other.group1(), 0, 2, 0, 2) * Simd32x4::from([self.group1()[3], self.group3()[0], self.group3()[1], self.group1()[2]]))
                + (swizzle!(other.group5(), 1, 2, 0, 0) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[0]]))
                - (swizzle!(self.group1(), 1, 3, 3, 3) * Simd32x4::from([other.group5()[2], other.group1()[1], other.group1()[2], other.group0()[1]]))
                + Simd32x4::from([
                    (-(self.group3()[0] * other.group5()[3]) - (self.group2()[1] * other.group6()[2])
                        + (self.group1()[0] * other.group0()[1])
                        + (self.group0()[2] * other.group7()[1])
                        + (self.group0()[0] * other[e1])
                        - (self.group0()[1] * other.group7()[2])),
                    (-(self.group2()[2] * other.group6()[0]) - (self.group1()[2] * other.group5()[0]) + (self.group1()[1] * other.group0()[1])
                        - (self.group0()[2] * other.group7()[0])
                        + (self.group0()[0] * other.group7()[2])
                        + (self.group0()[1] * other[e1])),
                    (-(self.group2()[0] * other.group6()[1]) + (self.group1()[2] * other.group0()[1]) - (self.group1()[0] * other.group5()[1]) + (self.group0()[2] * other[e1])
                        - (self.group0()[0] * other.group7()[1])
                        + (self.group0()[1] * other.group7()[0])),
                    ((self.group2()[0] * other.group6()[0])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group7()[2])
                        - (self.group0()[0] * other.group7()[0])
                        - (self.group0()[1] * other.group7()[1])),
                ])),
            // e423, e431, e412
            (-(swizzle!(other.group6(), 1, 2, 0) * Simd32x3::from([self.group3()[2], self.group3()[0], self.group3()[1]]))
                + (swizzle!(other.group6(), 2, 0, 1) * Simd32x3::from([self.group3()[1], self.group3()[2], self.group3()[0]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group5()[0], other.group5()[1], other.group5()[2]]))
                - (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(self.group1()[3]) * other.group6())
                + (swizzle!(other.group6(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))
                - (swizzle!(other.group6(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group5()[1], other.group1()[0], other.group0()[1]]))
                - (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], other.group5()[0], other.group5()[3]]))
                - (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group5()[2], other.group5()[3], other.group1()[0]]))
                + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], other.group0()[1], other.group5()[0]]))
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[1], other.group5()[2], other.group1()[1]]))
                - (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group5()[3], other.group1()[2], other.group5()[1]]))),
            // e235, e315, e125
            ((Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group5()[0], other.group5()[1], other.group5()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (swizzle!(other.group7(), 1, 2, 0) * Simd32x3::from([self.group3()[2], self.group3()[0], self.group3()[1]]))
                - (swizzle!(other.group7(), 2, 0, 1) * Simd32x3::from([self.group3()[1], self.group3()[2], self.group3()[0]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(other.group5()[3]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                + (Simd32x3::from(self.group1()[3]) * other.group7())
                + (swizzle!(other.group7(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (swizzle!(other.group7(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                + Simd32x3::from([
                    ((self.group2()[2] * other.group5()[1]) + (self.group2()[2] * other.group1()[1])
                        - (self.group2()[1] * other.group5()[2])
                        - (self.group2()[1] * other.group1()[2])),
                    (-(self.group2()[2] * other.group5()[0]) - (self.group2()[2] * other.group1()[0])
                        + (self.group2()[0] * other.group5()[2])
                        + (self.group2()[0] * other.group1()[2])),
                    ((self.group2()[1] * other.group5()[0]) + (self.group2()[1] * other.group1()[0])
                        - (self.group2()[0] * other.group5()[1])
                        - (self.group2()[0] * other.group1()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], other.group0()[0]]))
                - (swizzle!(self.group3(), 1, 2, 0, 3) * Simd32x4::from([other.group10()[0], other.group10()[2], other.group10()[1], other.group3()[3]]))
                - (swizzle!(other.group3(), 0, 1, 2, 2) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[2]]))
                + (swizzle!(self.group2(), 2, 1, 2, 2) * Simd32x4::from([other.group4()[1], other[e35], other[e35], other.group8()[2]]))
                - (swizzle!(self.group2(), 1, 2, 0, 2) * Simd32x4::from([other.group4()[2], other.group4()[0], other.group4()[1], other.group10()[0]]))
                + (swizzle!(self.group2(), 0, 0, 1, 1) * Simd32x4::from([other[e35], other.group4()[2], other.group4()[0], other.group8()[1]]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group10()[2], other.group10()[1], other.group10()[0], other.group8()[3]]))
                + (swizzle!(other.group8(), 1, 2, 0, 0) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group8()[2], other.group8()[0], other.group8()[1], other.group3()[2]]))
                - (swizzle!(other.group3(), 1, 2, 0, 1) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[1]]))
                + Simd32x4::from([
                    ((self.group3()[2] * other.group10()[1]) + (self.group3()[0] * other.group0()[0]) + (self.group1()[0] * other.group3()[3])
                        - (self.group0()[0] * other.group8()[3])
                        + (self.group0()[1] * other.group3()[2])),
                    ((self.group3()[1] * other.group0()[0])
                        + (self.group3()[0] * other.group10()[0])
                        + (self.group1()[1] * other.group3()[3])
                        + (self.group0()[2] * other.group3()[0])
                        - (self.group0()[1] * other.group8()[3])),
                    ((self.group3()[2] * other.group0()[0]) + (self.group3()[1] * other.group10()[2]) + (self.group1()[2] * other.group3()[3])
                        - (self.group0()[2] * other.group8()[3])
                        + (self.group0()[0] * other.group3()[1])),
                    (-(self.group3()[0] * other.group3()[0])
                        - (self.group2()[1] * other.group10()[1])
                        - (self.group2()[0] * other.group10()[2])
                        - (self.group1()[0] * other.group3()[0])
                        - (self.group1()[1] * other.group3()[1])),
                ])),
            // e1234
            ((self.group3()[2] * other.group4()[2])
                + (self.group3()[1] * other.group4()[1])
                + (self.group3()[0] * other.group4()[0])
                + (self.group2()[3] * other.group3()[3])
                + (self.group2()[3] * other.group0()[0])
                - (self.group1()[3] * other[e35])
                - (self.group1()[2] * other.group4()[2])
                - (self.group1()[1] * other.group4()[1])
                - (self.group1()[0] * other.group4()[0])
                - (self.group0()[2] * other.group10()[0])
                - (self.group0()[2] * other.group8()[2])
                - (self.group0()[1] * other.group10()[1])
                - (self.group0()[1] * other.group8()[1])
                - (self.group0()[0] * other.group8()[0])
                - (self.group0()[0] * other.group10()[2])),
            // e12, e31, e23
            ((Simd32x3::from(self.group3()[3]) * swizzle!(other.group4(), 2, 1, 0))
                + (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group3()[2], self.group3()[1], self.group3()[0]]))
                + (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group3()[2], other.group3()[1], other.group3()[0]]))
                + (Simd32x3::from(other[e35]) * Simd32x3::from([self.group2()[2], self.group2()[1], self.group2()[0]]))
                + (swizzle!(other.group4(), 0, 2, 1) * Simd32x3::from([self.group2()[1], self.group2()[0], self.group2()[2]]))
                - (swizzle!(other.group4(), 1, 0, 2) * Simd32x3::from([self.group2()[0], self.group2()[2], self.group2()[1]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group8()[2], other.group8()[1], other.group8()[0]]))
                + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[2], self.group1()[1], self.group1()[0]]))
                + (swizzle!(other.group10(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[0], self.group1()[2]]))
                - (swizzle!(other.group10(), 1, 2, 0) * Simd32x3::from([self.group1()[0], self.group1()[2], self.group1()[1]]))
                + (swizzle!(self.group0(), 2, 0, 2) * Simd32x3::from([other.group8()[3], other.group3()[2], other.group3()[1]]))
                - (swizzle!(self.group0(), 0, 2, 1) * Simd32x3::from([other.group3()[1], other.group3()[0], other.group3()[2]]))
                + (swizzle!(self.group0(), 1, 1, 0) * Simd32x3::from([other.group3()[0], other.group8()[3], other.group8()[3]]))
                + Simd32x3::from([
                    ((self.group3()[1] * other.group8()[0]) - (self.group3()[0] * other.group8()[1])),
                    (-(self.group3()[2] * other.group8()[0]) + (self.group3()[0] * other.group8()[2])),
                    ((self.group3()[2] * other.group8()[1]) - (self.group3()[1] * other.group8()[2])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       92      128        0
    //    simd3        0        1        0
    //    simd4       44       45        0
    // Totals...
    // yes simd      136      174        0
    //  no simd      268      311        0
    fn sandwich(self, other: Plane) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((Simd32x4::from(self.group2()[3]) * other.group0())
                - (swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[2]]))
                + Simd32x4::from([
                    (self.group0()[2] * other.group0()[1]),
                    (self.group0()[0] * other.group0()[2]),
                    (self.group0()[1] * other.group0()[0]),
                    (-(self.group3()[1] * other.group0()[1]) - (self.group3()[0] * other.group0()[0])),
                ])),
            // e23, e31, e12, e45
            (-(swizzle!(other.group0(), 2, 0, 1, 3) * Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[3]]))
                + Simd32x4::from([
                    ((self.group3()[2] * other.group0()[1]) + (self.group0()[0] * other.group0()[3]) + (self.group1()[3] * other.group0()[0])),
                    ((self.group3()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[3]) + (self.group1()[3] * other.group0()[1])),
                    ((self.group3()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[3]) + (self.group1()[3] * other.group0()[2])),
                    (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
            // e15, e25, e35, e1234
            (-(swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group0()[2]]))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]))
                + Simd32x4::from([
                    ((self.group3()[0] * other.group0()[3]) + (self.group1()[0] * other.group0()[3]) + (self.group2()[1] * other.group0()[2])),
                    ((self.group3()[1] * other.group0()[3]) + (self.group2()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])),
                    ((self.group3()[2] * other.group0()[3]) + (self.group1()[2] * other.group0()[3]) + (self.group2()[0] * other.group0()[1])),
                    ((self.group0()[1] * other.group0()[1]) * -1.0),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                + Simd32x4::from([
                    (-(self.group0()[0] * other.group0()[3]) - (self.group1()[1] * other.group0()[2])),
                    (-(self.group1()[2] * other.group0()[0]) - (self.group0()[1] * other.group0()[3])),
                    (-(self.group0()[2] * other.group0()[3]) - (self.group1()[0] * other.group0()[1])),
                    ((self.group2()[1] * other.group0()[1]) + (self.group1()[3] * other.group0()[3]) + (self.group2()[0] * other.group0()[0])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       79      110        0
    //    simd3        0        1        0
    //    simd4       51       53        0
    // Totals...
    // yes simd      130      164        0
    //  no simd      283      325        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                + (swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[2]]))
                + Simd32x4::from([
                    (-(self.group3()[0] * other.group0()[3]) - (self.group2()[3] * other.group0()[0]) - (self.group0()[2] * other.group0()[1])),
                    (-(self.group3()[1] * other.group0()[3]) - (self.group2()[3] * other.group0()[1]) - (self.group0()[0] * other.group0()[2])),
                    (-(self.group3()[2] * other.group0()[3]) - (self.group2()[3] * other.group0()[2]) - (self.group0()[1] * other.group0()[0])),
                    ((self.group3()[1] * other.group0()[1]) + (self.group2()[3] * other[e2]) + (self.group3()[0] * other.group0()[0])),
                ])),
            // e415, e425, e435, e321
            (-(swizzle!(self.group3(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))
                + (self.group2() * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other[e2]]))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group0(), 0, 1, 2, 2))
                + Simd32x4::from([
                    ((self.group3()[1] * other.group0()[2]) + (self.group0()[0] * other[e2])),
                    ((self.group3()[2] * other.group0()[0]) + (self.group0()[1] * other[e2])),
                    ((self.group3()[0] * other.group0()[1]) + (self.group0()[2] * other[e2])),
                    (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            ((Simd32x4::from(other[e2]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group1()[3]]))
                - (swizzle!(self.group2(), 1, 2, 0, 2) * swizzle!(other.group0(), 2, 0, 1, 2))
                + Simd32x4::from([
                    ((self.group3()[3] * other.group0()[0]) + (self.group2()[2] * other.group0()[1]) + (self.group1()[0] * other[e2])),
                    ((self.group3()[3] * other.group0()[1]) + (self.group1()[1] * other[e2]) + (self.group2()[0] * other.group0()[2])),
                    ((self.group3()[3] * other.group0()[2]) + (self.group2()[1] * other.group0()[0]) + (self.group1()[2] * other[e2])),
                    (-(self.group2()[1] * other.group0()[1]) - (self.group2()[0] * other.group0()[0])),
                ])),
            // e1, e2, e3, e4
            (-(Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                + (swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group0()[0] * other[e2]) - (self.group1()[1] * other.group0()[2])),
                    (-(self.group1()[2] * other.group0()[0]) + (self.group0()[1] * other[e2])),
                    ((self.group0()[2] * other[e2]) - (self.group1()[0] * other.group0()[1])),
                    ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       69       88        0
    //    simd3        0        2        0
    //    simd4       35       39        0
    // Totals...
    // yes simd      104      129        0
    //  no simd      209      250        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (self.group0() * Simd32x3::from(other[scalar])),
            // e23, e31, e12, e45
            (self.group1() * Simd32x4::from(other[scalar])),
            // e15, e25, e35, e1234
            (self.group2() * Simd32x4::from(other[scalar])),
            // e4235, e4315, e4125, e3215
            (self.group3() * Simd32x4::from(other[scalar])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       91      122        0
    //    simd3        0        1        0
    //    simd4       48       51        0
    // Totals...
    // yes simd      139      174        0
    //  no simd      283      329        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(swizzle!(self.group3(), 0, 1, 2, 2) * Simd32x4::from([other[e4315], other[e4315], other[e4315], other.group0()[2]]))
                + (Simd32x4::from(self.group2()[3]) * other.group0())
                + (Simd32x4::from(other[e4315]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                - (swizzle!(other.group0(), 2, 0, 1, 1) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[1]]))
                + (Simd32x4::from([1.0, 1.0, 1.0, -1.0])
                    * swizzle!(other.group0(), 1, 2, 0, 0)
                    * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[0]]))),
            // e23, e31, e12, e45
            ((swizzle!(self.group3(), 2, 0, 1, 3) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other[e4315]]))
                - (swizzle!(other.group0(), 2, 0, 1, 3) * Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[3]]))
                + Simd32x4::from([
                    ((self.group2()[0] * other[e4315]) + (self.group0()[0] * other.group0()[3]) + (self.group1()[3] * other.group0()[0])),
                    ((self.group2()[1] * other[e4315]) + (self.group0()[1] * other.group0()[3]) + (self.group1()[3] * other.group0()[1])),
                    ((self.group2()[2] * other[e4315]) + (self.group0()[2] * other.group0()[3]) + (self.group1()[3] * other.group0()[2])),
                    (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
            // e15, e25, e35, e1234
            (-(swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group0()[2]]))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]))
                + Simd32x4::from([
                    ((self.group3()[0] * other.group0()[3]) + (self.group1()[0] * other.group0()[3]) + (self.group2()[1] * other.group0()[2])),
                    ((self.group3()[1] * other.group0()[3]) + (self.group2()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])),
                    ((self.group3()[2] * other.group0()[3]) + (self.group1()[2] * other.group0()[3]) + (self.group2()[0] * other.group0()[1])),
                    (-(self.group1()[3] * other[e4315]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(self.group2(), 0, 1, 2, 2) * Simd32x4::from([other[e4315], other[e4315], other[e4315], other.group0()[2]]))
                + (swizzle!(other.group0(), 1, 2, 0, 1) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[1]]))
                + Simd32x4::from([
                    (-(self.group0()[0] * other.group0()[3]) - (self.group1()[1] * other.group0()[2])),
                    (-(self.group1()[2] * other.group0()[0]) - (self.group0()[1] * other.group0()[3])),
                    (-(self.group0()[2] * other.group0()[3]) - (self.group1()[0] * other.group0()[1])),
                    ((self.group1()[3] * other.group0()[3]) + (self.group2()[0] * other.group0()[0])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      120      151        0
    //    simd3        0        1        0
    //    simd4       82       84        0
    // Totals...
    // yes simd      202      236        0
    //  no simd      448      490        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[2]]))
                + (swizzle!(self.group3(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group3()[3]]))
                - (swizzle!(self.group2(), 3, 3, 3, 1) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[1]]))
                + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                - (swizzle!(other.group0(), 0, 1, 2, 0) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[0]]))
                - (swizzle!(self.group1(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]))
                + (swizzle!(other.group3(), 3, 3, 3, 2) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[2]]))
                - (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group2()[2]]))
                + (swizzle!(other.group3(), 2, 0, 1, 1) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[1]]))
                - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group2()[1]]))
                - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group2()[0]]))
                + Simd32x4::from([
                    (-(self.group3()[0] * other.group3()[3])
                        + (self.group1()[2] * other.group0()[1])
                        + (self.group0()[2] * other.group1()[1])
                        + (self.group0()[0] * other.group0()[3])),
                    (-(self.group3()[1] * other.group3()[3])
                        + (self.group1()[0] * other.group0()[2])
                        + (self.group0()[1] * other.group0()[3])
                        + (self.group0()[0] * other.group1()[2])),
                    (-(self.group3()[2] * other.group3()[3])
                        + (self.group1()[1] * other.group0()[0])
                        + (self.group0()[2] * other.group0()[3])
                        + (self.group0()[1] * other.group1()[0])),
                    ((self.group3()[0] * other.group3()[0])
                        - (self.group1()[2] * other.group1()[2])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])),
                ])),
            // e415, e425, e435, e321
            ((swizzle!(self.group3(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]))
                - (swizzle!(self.group3(), 2, 1, 2, 3) * Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group3()[3]]))
                + (swizzle!(self.group3(), 1, 2, 0, 1) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[1]]))
                + (Simd32x4::from(self.group2()[3]) * other.group2())
                + (swizzle!(self.group2(), 2, 1, 2, 2) * Simd32x4::from([other.group0()[1], other.group3()[3], other.group3()[3], other.group0()[2]]))
                - (swizzle!(other.group0(), 2, 0, 1, 3) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group1()[3]]))
                + (swizzle!(self.group2(), 0, 0, 1, 1) * Simd32x4::from([other.group3()[3], other.group0()[2], other.group0()[0], other.group0()[1]]))
                - (swizzle!(other.group3(), 0, 2, 0, 2) * Simd32x4::from([self.group1()[3], self.group3()[0], self.group3()[1], self.group1()[2]]))
                + (swizzle!(other.group1(), 1, 2, 0, 0) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[0]]))
                - (swizzle!(self.group1(), 1, 3, 3, 1) * Simd32x4::from([other.group1()[2], other.group3()[1], other.group3()[2], other.group3()[1]]))
                + (swizzle!(other.group0(), 3, 3, 3, 0) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[0]]))
                - (swizzle!(other.group2(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group3()[0] * other.group1()[3]) + (self.group0()[2] * other.group2()[1]) + (self.group0()[0] * other.group2()[3])),
                    (-(self.group1()[2] * other.group1()[0]) + (self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group2()[3])),
                    (-(self.group1()[0] * other.group1()[1]) + (self.group0()[2] * other.group2()[3]) + (self.group0()[1] * other.group2()[0])),
                    (-(self.group1()[0] * other.group3()[0]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                + (Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                + (swizzle!(other.group2(), 1, 3, 3, 3) * Simd32x4::from([self.group3()[2], self.group3()[1], self.group3()[2], self.group1()[3]]))
                - (swizzle!(self.group3(), 1, 2, 0, 2) * swizzle!(other.group2(), 2, 0, 1, 2))
                - (swizzle!(self.group2(), 1, 2, 0, 2) * swizzle!(other.group3(), 2, 0, 1, 2))
                - (swizzle!(self.group2(), 1, 2, 0, 2) * swizzle!(other.group1(), 2, 0, 1, 2))
                - (swizzle!(other.group2(), 2, 0, 1, 1) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[1]]))
                + Simd32x4::from([
                    ((self.group3()[0] * other.group2()[3])
                        + (self.group2()[2] * other.group3()[1])
                        + (self.group2()[2] * other.group1()[1])
                        + (self.group2()[0] * other.group1()[3])
                        + (self.group2()[0] * other.group0()[3])
                        + (self.group1()[3] * other.group2()[0])
                        + (self.group1()[2] * other.group2()[1])
                        + (self.group1()[0] * other.group2()[3])),
                    ((self.group3()[0] * other.group2()[2])
                        + (self.group2()[1] * other.group1()[3])
                        + (self.group2()[1] * other.group0()[3])
                        + (self.group2()[0] * other.group3()[2])
                        + (self.group2()[0] * other.group1()[2])
                        + (self.group1()[3] * other.group2()[1])
                        + (self.group1()[0] * other.group2()[2])
                        + (self.group1()[1] * other.group2()[3])),
                    ((self.group3()[1] * other.group2()[0])
                        + (self.group2()[2] * other.group1()[3])
                        + (self.group2()[2] * other.group0()[3])
                        + (self.group2()[1] * other.group3()[0])
                        + (self.group2()[1] * other.group1()[0])
                        + (self.group1()[3] * other.group2()[2])
                        + (self.group1()[2] * other.group2()[3])
                        + (self.group1()[1] * other.group2()[0])),
                    (-(self.group3()[0] * other.group2()[0])
                        - (self.group2()[1] * other.group3()[1])
                        - (self.group2()[1] * other.group1()[1])
                        - (self.group2()[0] * other.group3()[0])
                        - (self.group2()[0] * other.group1()[0])
                        - (self.group1()[2] * other.group2()[2])
                        - (self.group1()[0] * other.group2()[0])
                        - (self.group1()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group1()[2]]))
                - (swizzle!(other.group1(), 1, 2, 0, 3) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]))
                + (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                - (swizzle!(other.group0(), 3, 3, 3, 1) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group1()[1]]))
                + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[3]]))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[0]]))
                + (swizzle!(other.group0(), 2, 0, 1, 1) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group3()[1]]))
                - (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                - (swizzle!(other.group1(), 0, 1, 2, 2) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[2]]))
                + (swizzle!(other.group3(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group1()[1] * other.group3()[2])
                        + (self.group1()[0] * other.group1()[3])
                        + (self.group0()[2] * other.group2()[1])
                        + (self.group0()[0] * other.group2()[3])
                        - (self.group0()[1] * other.group2()[2])),
                    (-(self.group1()[2] * other.group3()[0]) + (self.group1()[1] * other.group1()[3]) - (self.group0()[2] * other.group2()[0])
                        + (self.group0()[0] * other.group2()[2])
                        + (self.group0()[1] * other.group2()[3])),
                    ((self.group1()[2] * other.group1()[3]) - (self.group1()[0] * other.group3()[1]) + (self.group0()[2] * other.group2()[3])
                        - (self.group0()[0] * other.group2()[1])
                        + (self.group0()[1] * other.group2()[0])),
                    ((self.group3()[0] * other.group0()[0]) + (self.group0()[1] * other.group3()[1])
                        - (self.group0()[1] * other.group1()[1])
                        - (self.group0()[0] * other.group1()[0])
                        + (self.group0()[0] * other.group3()[0])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      144      179        0
    //    simd3        0        1        0
    //    simd4       76       77        0
    // Totals...
    // yes simd      220      257        0
    //  no simd      448      490        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(swizzle!(self.group3(), 2, 1, 2, 2) * Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group3()[2]]))
                + (swizzle!(self.group3(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]))
                - (swizzle!(self.group3(), 0, 0, 1, 1) * Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group3()[1]]))
                + (Simd32x4::from(self.group2()[3]) * other.group3())
                + (other.group1() * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group1()[3]]))
                - (swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[2]]))
                - (swizzle!(other.group0(), 2, 0, 1, 1) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[1]]))
                - (swizzle!(other.group3(), 2, 0, 1, 0) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]))
                - (swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group0()[1])
                        + (self.group1()[0] * other.group2()[3])
                        + (self.group0()[2] * other.group3()[1])
                        + (self.group0()[2] * other.group1()[1])
                        + (self.group0()[0] * other.group0()[3])
                        + (self.group0()[0] * other.group1()[3])),
                    ((self.group1()[1] * other.group2()[3])
                        + (self.group1()[0] * other.group0()[2])
                        + (self.group0()[1] * other.group1()[3])
                        + (self.group0()[1] * other.group0()[3])
                        + (self.group0()[0] * other.group1()[2])
                        + (self.group0()[0] * other.group3()[2])),
                    ((self.group1()[2] * other.group2()[3])
                        + (self.group1()[1] * other.group0()[0])
                        + (self.group0()[2] * other.group1()[3])
                        + (self.group0()[2] * other.group0()[3])
                        + (self.group0()[1] * other.group3()[0])
                        + (self.group0()[1] * other.group1()[0])),
                    (-(self.group2()[0] * other.group0()[0])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e23, e31, e12, e45
            ((Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[2]]))
                + (swizzle!(other.group2(), 0, 1, 2, 2) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[2]]))
                + (swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]))
                - (swizzle!(self.group2(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group3()[3]]))
                + (swizzle!(other.group2(), 3, 3, 3, 0) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[0]]))
                - (swizzle!(other.group1(), 2, 0, 1, 1) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[1]]))
                + (swizzle!(other.group2(), 1, 2, 0, 1) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[1]]))
                + Simd32x4::from([
                    ((self.group3()[2] * other.group3()[1])
                        + (self.group3()[0] * other.group1()[3])
                        + (self.group1()[3] * other.group3()[0])
                        + (self.group1()[2] * other.group1()[1])
                        + (self.group1()[0] * other.group0()[3])
                        + (self.group0()[0] * other.group3()[3])
                        - (self.group0()[1] * other.group2()[2])),
                    ((self.group3()[1] * other.group1()[3])
                        + (self.group3()[0] * other.group3()[2])
                        + (self.group1()[3] * other.group3()[1])
                        + (self.group1()[1] * other.group0()[3])
                        + (self.group1()[0] * other.group1()[2])
                        - (self.group0()[2] * other.group2()[0])
                        + (self.group0()[1] * other.group3()[3])),
                    ((self.group3()[2] * other.group1()[3])
                        + (self.group3()[1] * other.group3()[0])
                        + (self.group1()[3] * other.group3()[2])
                        + (self.group1()[2] * other.group0()[3])
                        + (self.group1()[1] * other.group1()[0])
                        + (self.group0()[2] * other.group3()[3])
                        - (self.group0()[0] * other.group2()[1])),
                    (-(self.group3()[0] * other.group1()[0])
                        - (self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[2] * other.group3()[2])
                        - (self.group1()[1] * other.group3()[1])
                        - (self.group1()[0] * other.group3()[0])),
                ])),
            // e15, e25, e35, e1234
            (-(swizzle!(other.group3(), 0, 1, 2, 2) * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group0()[2]]))
                + (swizzle!(self.group3(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]))
                + (swizzle!(self.group3(), 2, 1, 2, 1) * Simd32x4::from([other.group2()[1], other.group3()[3], other.group3()[3], other.group0()[1]]))
                - (swizzle!(other.group2(), 2, 0, 1, 3) * Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[3]]))
                + (swizzle!(self.group3(), 0, 0, 1, 0) * Simd32x4::from([other.group3()[3], other.group2()[2], other.group2()[0], other.group0()[0]]))
                - (swizzle!(other.group3(), 1, 2, 0, 1) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[1]]))
                + (swizzle!(self.group2(), 2, 2, 2, 3) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group0()[3], other.group1()[3]]))
                + (swizzle!(self.group2(), 1, 1, 1, 3) * Simd32x4::from([other.group3()[2], other.group0()[3], other.group1()[0], other.group0()[3]]))
                - (swizzle!(other.group1(), 2, 0, 3, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[2], self.group0()[2]]))
                - (swizzle!(other.group1(), 3, 3, 1, 1) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[0], self.group0()[1]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[2]]))
                + Simd32x4::from([
                    ((self.group2()[0] * other.group0()[3])
                        + (self.group1()[3] * other.group2()[0])
                        + (self.group1()[2] * other.group2()[1])
                        + (self.group1()[0] * other.group3()[3])),
                    ((self.group2()[0] * other.group1()[2])
                        + (self.group1()[3] * other.group2()[1])
                        + (self.group1()[0] * other.group2()[2])
                        + (self.group1()[1] * other.group3()[3])),
                    ((self.group2()[0] * other.group3()[1])
                        + (self.group1()[3] * other.group2()[2])
                        + (self.group1()[2] * other.group3()[3])
                        + (self.group1()[1] * other.group2()[0])),
                    (-(self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group3()[0])),
                ])),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(self.group3()[3]) * other.group0())
                - (swizzle!(self.group3(), 1, 2, 0, 3) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (swizzle!(other.group2(), 0, 1, 2, 2) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[2]]))
                + (swizzle!(self.group2(), 2, 1, 2, 2) * Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group3()[2]]))
                - (swizzle!(self.group2(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + (swizzle!(self.group2(), 0, 0, 1, 1) * Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group3()[1]]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + (swizzle!(other.group3(), 1, 2, 0, 0) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[2]]))
                - (swizzle!(other.group2(), 1, 2, 0, 1) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[1]]))
                + Simd32x4::from([
                    ((self.group3()[2] * other.group1()[1]) + (self.group3()[0] * other.group0()[3]) + (self.group1()[0] * other.group1()[3])
                        - (self.group0()[0] * other.group3()[3])
                        + (self.group0()[1] * other.group2()[2])),
                    ((self.group3()[1] * other.group0()[3])
                        + (self.group3()[0] * other.group1()[2])
                        + (self.group1()[1] * other.group1()[3])
                        + (self.group0()[2] * other.group2()[0])
                        - (self.group0()[1] * other.group3()[3])),
                    ((self.group3()[2] * other.group0()[3]) + (self.group3()[1] * other.group1()[0]) + (self.group1()[2] * other.group1()[3])
                        - (self.group0()[2] * other.group3()[3])
                        + (self.group0()[0] * other.group2()[1])),
                    (-(self.group3()[0] * other.group2()[0])
                        - (self.group2()[1] * other.group1()[1])
                        - (self.group2()[0] * other.group1()[0])
                        - (self.group1()[0] * other.group2()[0])
                        - (self.group1()[1] * other.group2()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl InfixSandwich for DualNum {}
impl Sandwich<AntiScalar> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       20        0
    //    simd4        3        5        0
    // Totals...
    // yes simd        7       25        0
    //  no simd       16       40        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other[e12345] * -1.0)]),
            // e23, e31, e12, e45
            Simd32x4::from(0.0),
            // e15, e25, e35, e1234
            Simd32x4::from(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other[e12345] * -1.0)]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       27        0
    //    simd3        0        2        0
    //    simd4        3        7        0
    // Totals...
    // yes simd       12       36        0
    //  no simd       21       61        0
    fn sandwich(self, other: Circle) -> Self::Output {
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group0()[1]) * other.group0() * Simd32x3::from(-1.0)),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group1()[1])),
                (-(self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group2()[0])),
                (-(self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group2()[1])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group2()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]) * Simd32x4::from(-1.0)),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       37        0
    //    simd4        3        7        0
    // Totals...
    // yes simd       14       44        0
    //  no simd       23       65        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]) * Simd32x4::from(-1.0)),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group1()[1])),
                (-(self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group2()[0])),
                (-(self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group2()[1])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group2()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                (-(self.group0()[0] * other.group1()[3]) - (self.group0()[0] * other.group2()[3])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       57        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       19       58        0
    //  no simd       22       61        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                0.0,
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3] * -1.0),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group2()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group2()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group2()[2])),
                (self.group0()[0] * other.group1()[3] * -1.0),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       54        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       22       57        0
    //  no simd       31       66        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[0] * other.group2()[3]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group1()[2])),
                (-(self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group1()[3])),
            ]),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                + Simd32x4::from([
                    (self.group0()[0] * other.group1()[0]),
                    (self.group0()[0] * other.group1()[1]),
                    (self.group0()[0] * other.group1()[2]),
                    0.0,
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group3()[0])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group3()[1])),
                (-(self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group3()[2])),
                (self.group0()[1] * other.group2()[3]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       20        0
    //    simd4        3        5        0
    // Totals...
    // yes simd        8       25        0
    //  no simd       17       40        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group0()[1] * -1.0)]),
            // e23, e31, e12, e45
            Simd32x4::from(0.0),
            // e15, e25, e35, e1234
            Simd32x4::from(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]))]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       34        0
    //    simd4        1        3        0
    // Totals...
    // yes simd       13       37        0
    //  no simd       16       46        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group0()[3] * -1.0)]),
            // e235, e315, e125, e5
            (other.group0() * Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       40        0
    //    simd4        2        3        0
    // Totals...
    // yes simd       14       43        0
    //  no simd       20       52        0
    fn sandwich(self, other: Flector) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group0()[3] * -1.0)]),
            // e235, e315, e125, e5
            (-(Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[1] * other.group1()[0] * -1.0),
                (self.group0()[1] * other.group1()[1] * -1.0),
                (self.group0()[1] * other.group1()[2] * -1.0),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       27        0
    //    simd3        1        2        0
    // Totals...
    // yes simd        7       29        0
    //  no simd        9       33        0
    fn sandwich(self, other: Line) -> Self::Output {
        let geometric_product = Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[1] * -1.0),
                (self.group0()[1] * other.group0()[2] * -1.0),
                0.0,
            ]),
            // e15, e25, e35
            (-(Simd32x3::from(self.group0()[0]) * other.group0()) - (Simd32x3::from(self.group0()[1]) * other.group1())),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       32        0
    //    simd4        3        5        0
    // Totals...
    // yes simd       11       37        0
    //  no simd       20       52        0
    fn sandwich(self, other: Motor) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group0()[3] * -1.0)]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[1] * -1.0),
                (self.group0()[1] * other.group0()[2] * -1.0),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group1()[1])),
                (-(self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group1()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group1()[3]))]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for DualNum {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       26       64        0
    //    simd3        6       16        0
    //    simd4        5        7        0
    // Totals...
    // yes simd       37       87        0
    //  no simd       64      140        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other[e35]) + (self.group0()[1] * other.group0()[0])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[0] * other.group4()[0]) - (self.group0()[1] * other.group8()[0])),
                (-(self.group0()[0] * other.group4()[1]) - (self.group0()[1] * other.group8()[1])),
                (-(self.group0()[0] * other.group4()[2]) - (self.group0()[1] * other.group8()[2])),
                (self.group0()[1] * other[e35]),
            ]),
            // e5
            ((self.group0()[1] * other.group8()[3]) + (self.group0()[0] * other.group0()[0]) - (self.group0()[0] * other.group3()[3])),
            // e15, e25, e35, e45
            (-(Simd32x4::from(self.group0()[0]) * other.group1())
                + Simd32x4::from([
                    (-(self.group0()[1] * other.group7()[0]) - (self.group0()[0] * other.group5()[0])),
                    (-(self.group0()[1] * other.group7()[1]) - (self.group0()[0] * other.group5()[1])),
                    (-(self.group0()[1] * other.group7()[2]) - (self.group0()[0] * other.group5()[2])),
                    (self.group0()[1] * other.group5()[3]),
                ])),
            // e41, e42, e43
            (Simd32x3::from(self.group0()[1]) * other.group6() * Simd32x3::from(-1.0)),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group4()[0]) + (self.group0()[1] * other.group10()[2])),
                ((self.group0()[0] * other.group4()[1]) + (self.group0()[1] * other.group10()[1])),
                ((self.group0()[0] * other.group4()[2]) + (self.group0()[1] * other.group10()[0])),
                (-(self.group0()[0] * other[e35]) - (self.group0()[1] * other.group3()[3])),
            ]),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[1]) * other.group4()),
            // e235, e315, e125
            ((Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                - (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group8()[0], other.group8()[1], other.group8()[2]]))
                + (Simd32x3::from(self.group0()[0]) * swizzle!(other.group10(), 2, 1, 0))),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group6()[0], other.group6()[1], other.group6()[2], other.group0()[1]]))
                + Simd32x4::from([
                    (self.group0()[1] * other.group1()[0]),
                    (self.group0()[1] * other.group1()[1]),
                    (self.group0()[1] * other.group1()[2]),
                    (-(self.group0()[1] * other[e1]) - (self.group0()[0] * other.group5()[3])),
                ])),
            // e1234
            (self.group0()[1] * other.group1()[3] * -1.0),
            // e12, e31, e23
            (-(Simd32x3::from(self.group0()[0]) * swizzle!(other.group6(), 2, 1, 0))
                - (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group5()[2], other.group5()[1], other.group5()[0]]))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       38        0
    //    simd4        1        3        0
    // Totals...
    // yes simd       13       41        0
    //  no simd       16       50        0
    fn sandwich(self, other: Plane) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from(0.0),
            // e235, e315, e125, e5
            (other.group0() * Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[1] * -1.0),
                (self.group0()[1] * other.group0()[2] * -1.0),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       20        0
    //    simd4        3        9        0
    // Totals...
    // yes simd        7       29        0
    //  no simd       16       56        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3] * -1.0)]),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3] * -1.0)]),
            // e15, e25, e35, e1234
            (other.group0() * Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * Simd32x4::from(-1.0)),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other[e2]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        4        0
    //    simd2        0        1        0
    // Totals...
    // yes simd        1        5        0
    //  no simd        1        6        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DualNum::from_groups(/* e5, e12345 */ (self.group0() * Simd32x2::from(other[scalar])));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       35        0
    //    simd4        1        5        0
    // Totals...
    // yes simd       13       40        0
    //  no simd       16       55        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other[e4315])]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other[e4315] * -1.0)]),
            // e235, e315, e125, e5
            (other.group0() * Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other[e4315]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       40        0
    //    simd4        5        9        0
    // Totals...
    // yes simd       17       49        0
    //  no simd       32       76        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[1] * -1.0),
                (self.group0()[1] * other.group0()[2] * -1.0),
                (-(self.group0()[0] * other.group3()[3]) - (self.group0()[1] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            (-(Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group3()[3]]))
                + (Simd32x4::from([-1.0, -1.0, -1.0, 1.0]) * Simd32x4::from(self.group0()[1]) * other.group1())),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group0()[1] * other.group2()[0]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[0] * other.group3()[0])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[0] * other.group1()[1]) - (self.group0()[0] * other.group3()[1])),
                (-(self.group0()[1] * other.group2()[2]) - (self.group0()[0] * other.group1()[2]) - (self.group0()[0] * other.group3()[2])),
                (self.group0()[1] * other.group3()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(self.group0()[0]) * other.group0())
                + Simd32x4::from([
                    (self.group0()[1] * other.group3()[0]),
                    (self.group0()[1] * other.group3()[1]),
                    (self.group0()[1] * other.group3()[2]),
                    (-(self.group0()[1] * other.group2()[3]) - (self.group0()[0] * other.group1()[3])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       52        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       23       56        0
    //  no simd       32       68        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group1()[2])),
                (-(self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group1()[3])),
            ]),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group3()[0])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group3()[1])),
                (-(self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group3()[2])),
                (self.group0()[1] * other.group2()[3]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl InfixSandwich for FlatPoint {}
impl Sandwich<AntiScalar> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       26        0
    //    simd3        0        1        0
    //    simd4        4        5        0
    // Totals...
    // yes simd       14       32        0
    //  no simd       26       49        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other[e12345] * -1.0)]),
            // e235, e315, e125
            (Simd32x3::from(other[e12345]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       33       66        0
    //    simd4       10       12        0
    // Totals...
    // yes simd       43       78        0
    //  no simd       73      114        0
    fn sandwich(self, other: Circle) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                (-(self.group0()[3] * other.group1()[3])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e321
            ((swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[2]]))
                + Simd32x4::from([
                    ((self.group0()[1] * other.group0()[2]) * -1.0),
                    ((self.group0()[2] * other.group0()[0]) * -1.0),
                    ((self.group0()[0] * other.group0()[1]) * -1.0),
                    ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            (-(swizzle!(self.group0(), 1, 2, 0, 2) * swizzle!(other.group1(), 2, 0, 1, 2))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group2()[0]) + (self.group0()[2] * other.group1()[1]) + (self.group0()[0] * other.group1()[3])),
                    ((self.group0()[3] * other.group2()[1]) + (self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3])),
                    ((self.group0()[3] * other.group2()[2]) + (self.group0()[2] * other.group1()[3]) + (self.group0()[1] * other.group1()[0])),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[3] * other.group1()[0]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[3] * other.group1()[1]) - (self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[3] * other.group1()[2]) + (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       63        0
    //    simd4       11       13        0
    // Totals...
    // yes simd       47       76        0
    //  no simd       80      115        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                (-(self.group0()[3] * other.group1()[3])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e321
            (-(swizzle!(self.group0(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]))
                + (swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[2]]))
                + Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]))])),
            // e235, e315, e125, e5
            (-(swizzle!(self.group0(), 1, 2, 0, 2) * swizzle!(other.group1(), 2, 0, 1, 2))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group2()[0])
                        + (self.group0()[2] * other.group1()[1])
                        + (self.group0()[0] * other.group1()[3])
                        + (self.group0()[0] * other.group2()[3])),
                    ((self.group0()[3] * other.group2()[1])
                        + (self.group0()[1] * other.group2()[3])
                        + (self.group0()[0] * other.group1()[2])
                        + (self.group0()[1] * other.group1()[3])),
                    ((self.group0()[3] * other.group2()[2])
                        + (self.group0()[2] * other.group2()[3])
                        + (self.group0()[2] * other.group1()[3])
                        + (self.group0()[1] * other.group1()[0])),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[3] * other.group1()[0]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[3] * other.group1()[1]) - (self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[3] * other.group1()[2]) + (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       45       75        0
    //    simd4        7       10        0
    // Totals...
    // yes simd       52       85        0
    //  no simd       73      115        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                ((self.group0()[3] * other.group1()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e23, e31, e12, e45
            (-(swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[2]]))
                + Simd32x4::from([
                    (self.group0()[2] * other.group0()[1]),
                    (self.group0()[0] * other.group0()[2]),
                    (self.group0()[1] * other.group0()[0]),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[3] * other.group2()[0]) + (self.group0()[2] * other.group1()[1]) - (self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group1()[2])),
                ((self.group0()[3] * other.group2()[1]) - (self.group0()[2] * other.group1()[0]) + (self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group1()[3])),
                ((self.group0()[3] * other.group2()[2]) - (self.group0()[2] * other.group1()[3]) - (self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group1()[0]) + (self.group0()[2] * other.group0()[1])),
                    ((self.group0()[3] * other.group1()[1]) + (self.group0()[0] * other.group0()[2])),
                    ((self.group0()[3] * other.group1()[2]) + (self.group0()[1] * other.group0()[0])),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       55       84        0
    //    simd4       10       13        0
    // Totals...
    // yes simd       65       97        0
    //  no simd       95      136        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                ((self.group0()[3] * other.group1()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e23, e31, e12, e45
            (-(swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group3()[0]) + (self.group0()[2] * other.group0()[1]) + (self.group0()[0] * other.group2()[3])),
                    ((self.group0()[3] * other.group3()[1]) + (self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group2()[3])),
                    ((self.group0()[3] * other.group3()[2]) + (self.group0()[2] * other.group2()[3]) + (self.group0()[1] * other.group0()[0])),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[3] * other.group2()[0]) - (self.group0()[2] * other.group3()[1]) + (self.group0()[2] * other.group1()[1]) + (self.group0()[1] * other.group3()[2])
                    - (self.group0()[0] * other.group1()[3])
                    - (self.group0()[1] * other.group1()[2])),
                ((self.group0()[3] * other.group2()[1]) + (self.group0()[2] * other.group3()[0]) - (self.group0()[2] * other.group1()[0]) - (self.group0()[1] * other.group1()[3])
                    + (self.group0()[0] * other.group1()[2])
                    - (self.group0()[0] * other.group3()[2])),
                ((self.group0()[3] * other.group2()[2]) - (self.group0()[2] * other.group1()[3]) - (self.group0()[1] * other.group3()[0]) + (self.group0()[1] * other.group1()[0])
                    - (self.group0()[0] * other.group1()[1])
                    + (self.group0()[0] * other.group3()[1])),
                (self.group0()[3] * other.group2()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + (swizzle!(self.group0(), 2, 0, 2, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group2()[3], other.group3()[2]]))
                + (swizzle!(self.group0(), 0, 1, 1, 1) * Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[0], other.group3()[1]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    (-(self.group0()[1] * other.group1()[1]) - (self.group0()[0] * other.group1()[0]) + (self.group0()[0] * other.group3()[0])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       30        0
    //    simd4        8       11        0
    // Totals...
    // yes simd       24       41        0
    //  no simd       48       74        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[1] * -1.0)]),
            // e235, e315, e125, e5
            (self.group0() * Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[0]])),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       31       47        0
    //    simd4        5        8        0
    // Totals...
    // yes simd       36       55        0
    //  no simd       51       79        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[3])]),
            // e23, e31, e12, e45
            Simd32x4::from(0.0),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
                (-(self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(0.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       60        0
    //    simd4        5        8        0
    // Totals...
    // yes simd       45       68        0
    //  no simd       60       92        0
    fn sandwich(self, other: Flector) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[3])]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[3] * other.group0()[0]) - (self.group0()[2] * other.group1()[1]) - (self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[2])),
                ((self.group0()[3] * other.group0()[1]) + (self.group0()[2] * other.group1()[0]) - (self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group0()[3])),
                ((self.group0()[3] * other.group0()[2]) - (self.group0()[2] * other.group0()[3]) + (self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((self.group0()[3] * other.group1()[3]) + (self.group0()[2] * other.group1()[2]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       42        0
    //    simd4        9       11        0
    // Totals...
    // yes simd       29       53        0
    //  no simd       56       86        0
    fn sandwich(self, other: Line) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from(0.0),
            // e235, e315, e125, e5
            (-(swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group1()[0]) + (self.group0()[2] * other.group0()[1])),
                    ((self.group0()[3] * other.group1()[1]) + (self.group0()[0] * other.group0()[2])),
                    ((self.group0()[3] * other.group1()[2]) + (self.group0()[1] * other.group0()[0])),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       44        0
    //    simd4       10       12        0
    // Totals...
    // yes simd       30       56        0
    //  no simd       60       92        0
    fn sandwich(self, other: Motor) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[3] * -1.0)]),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group0()[3]) * other.group1()) - (swizzle!(self.group0(), 1, 2, 0, 2) * swizzle!(other.group0(), 2, 0, 1, 2))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group0()[1]) + (self.group0()[0] * other.group0()[3])),
                    ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[3])),
                    ((self.group0()[2] * other.group0()[3]) + (self.group0()[1] * other.group0()[0])),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for FlatPoint {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       67      102        0
    //    simd2        6       10        0
    //    simd3       14       22        0
    //    simd4       19       22        0
    // Totals...
    // yes simd      106      156        0
    //  no simd      197      276        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (-(Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group4()[2], other.group6()[2]]))
                - (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group4()[0], other.group6()[0]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group4()[1], other.group6()[1]]))
                + (Simd32x2::from([1.0, -1.0]) * Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group3()[3], other.group5()[3]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[3] * other.group5()[0]) - (self.group0()[2] * other.group6()[1]) - (self.group0()[0] * other.group1()[3])
                    + (self.group0()[1] * other.group6()[2])),
                (-(self.group0()[3] * other.group5()[1]) + (self.group0()[2] * other.group6()[0])
                    - (self.group0()[0] * other.group6()[2])
                    - (self.group0()[1] * other.group1()[3])),
                (-(self.group0()[3] * other.group5()[2]) - (self.group0()[2] * other.group1()[3]) + (self.group0()[0] * other.group6()[1])
                    - (self.group0()[1] * other.group6()[0])),
                (self.group0()[3] * other.group1()[3] * -1.0),
            ]),
            // e5
            ((self.group0()[3] * other[e1])
                - (self.group0()[2] * other.group5()[2])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[1] * other.group5()[1])
                - (self.group0()[1] * other.group1()[1])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[0] * other.group5()[0])),
            // e15, e25, e35, e45
            ((Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[0]]))
                - (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group8()[1], other.group10()[2], other.group3()[3], other.group4()[2]]))
                - (swizzle!(self.group0(), 1, 1, 1, 0) * Simd32x4::from([other.group10()[0], other.group3()[3], other.group8()[0], other.group4()[0]]))
                - (swizzle!(self.group0(), 0, 0, 0, 1) * Simd32x4::from([other.group3()[3], other.group8()[2], other.group10()[1], other.group4()[1]]))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group10()[1]) + (self.group0()[1] * other.group8()[2]) + (self.group0()[0] * other.group0()[0])),
                    ((self.group0()[2] * other.group8()[0]) + (self.group0()[1] * other.group0()[0]) + (self.group0()[0] * other.group10()[0])),
                    ((self.group0()[2] * other.group0()[0]) + (self.group0()[1] * other.group10()[2]) + (self.group0()[0] * other.group8()[1])),
                    0.0,
                ])),
            // e41, e42, e43
            (Simd32x3::from(self.group0()[3]) * other.group4() * Simd32x3::from(-1.0)),
            // e415, e425, e435, e321
            (-(Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[1]]))
                + (swizzle!(self.group0(), 2, 0, 2, 2) * Simd32x4::from([other.group6()[1], other.group6()[2], other.group1()[3], other.group6()[2]]))
                + (swizzle!(self.group0(), 0, 1, 1, 0) * Simd32x4::from([other.group1()[3], other.group1()[3], other.group6()[0], other.group6()[0]]))
                + (Simd32x4::from([-1.0, -1.0, -1.0, 1.0])
                    * swizzle!(self.group0(), 1, 2, 0, 1)
                    * Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group6()[1]]))),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[3]) * other.group6() * Simd32x3::from(-1.0)),
            // e235, e315, e125
            ((Simd32x3::from(self.group0()[3]) * other.group7())
                + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(other.group5()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + Simd32x3::from([
                    ((self.group0()[2] * other.group5()[1]) + (self.group0()[2] * other.group1()[1])
                        - (self.group0()[1] * other.group5()[2])
                        - (self.group0()[1] * other.group1()[2])),
                    (-(self.group0()[2] * other.group5()[0]) - (self.group0()[2] * other.group1()[0])
                        + (self.group0()[0] * other.group1()[2])
                        + (self.group0()[0] * other.group5()[2])),
                    ((self.group0()[1] * other.group5()[0]) + (self.group0()[1] * other.group1()[0])
                        - (self.group0()[0] * other.group1()[1])
                        - (self.group0()[0] * other.group5()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group10()[2], other.group10()[1], other.group10()[0], other.group8()[3]]))
                + (swizzle!(self.group0(), 2, 0, 2, 2) * Simd32x4::from([other.group4()[1], other.group4()[2], other[e35], other.group8()[2]]))
                + (swizzle!(self.group0(), 0, 1, 1, 1) * Simd32x4::from([other[e35], other[e35], other.group4()[0], other.group8()[1]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group4()[2], other.group4()[0], other.group4()[1], other.group10()[0]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    (-(self.group0()[1] * other.group10()[1]) + (self.group0()[0] * other.group8()[0]) - (self.group0()[0] * other.group10()[2])),
                ])),
            // e1234
            (self.group0()[3] * other[e35] * -1.0),
            // e12, e31, e23
            ((Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group8()[2], other.group8()[1], other.group8()[0]]))
                + (Simd32x3::from(other[e35]) * Simd32x3::from([self.group0()[2], self.group0()[1], self.group0()[0]]))
                - (swizzle!(other.group4(), 1, 0, 2) * Simd32x3::from([self.group0()[0], self.group0()[2], self.group0()[1]]))
                + (swizzle!(other.group4(), 0, 2, 1) * Simd32x3::from([self.group0()[1], self.group0()[0], self.group0()[2]]))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       31       56        0
    //    simd4        5        6        0
    // Totals...
    // yes simd       36       62        0
    //  no simd       51       80        0
    fn sandwich(self, other: Plane) -> Self::Output {
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((self.group0()[3] * other.group0()[3]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       36        0
    //    simd4       10       14        0
    // Totals...
    // yes simd       30       50        0
    //  no simd       60       92        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) - (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group0()[2])),
                0.0,
            ]),
            // e235, e315, e125, e5
            (-(swizzle!(self.group0(), 1, 2, 0, 2) * swizzle!(other.group0(), 2, 0, 1, 2))
                + (swizzle!(self.group0(), 2, 0, 1, 3) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other[e2]]))
                + Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]))])),
            // e1, e2, e3, e4
            (self.group0() * Simd32x4::from(other.group0()[3]) * Simd32x4::from(-1.0)),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        7        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        3        9        0
    //  no simd        3       15        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = FlatPoint::from_groups(/* e15, e25, e35, e45 */ (self.group0() * Simd32x4::from(other[scalar])));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       34       64        0
    //    simd4        5        6        0
    // Totals...
    // yes simd       39       70        0
    //  no simd       54       88        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other[e4315]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other[e4315]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other[e4315]) + (self.group0()[3] * other.group0()[2])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other[e4315] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other[e4315]),
                (self.group0()[1] * other[e4315]),
                (self.group0()[2] * other[e4315]),
                ((self.group0()[3] * other.group0()[3]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       68        0
    //    simd4       14       18        0
    // Totals...
    // yes simd       54       86        0
    //  no simd       96      140        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                (-(self.group0()[3] * other.group1()[3])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e321
            (-(Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[3]]))
                + (swizzle!(self.group0(), 2, 0, 2, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group3()[3], other.group0()[2]]))
                + (swizzle!(self.group0(), 0, 1, 1, 0) * Simd32x4::from([other.group3()[3], other.group3()[3], other.group0()[0], other.group0()[0]]))
                + (Simd32x4::from([-1.0, -1.0, -1.0, 1.0]) * swizzle!(self.group0(), 1, 2, 0, 1) * swizzle!(other.group0(), 2, 0, 1, 1))),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group0()[3]) * other.group2())
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[1], other.group3()[2]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group3()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group3()[1])
                        + (self.group0()[2] * other.group1()[1])
                        + (self.group0()[0] * other.group0()[3])
                        + (self.group0()[0] * other.group1()[3])),
                    ((self.group0()[1] * other.group1()[3])
                        + (self.group0()[1] * other.group0()[3])
                        + (self.group0()[0] * other.group1()[2])
                        + (self.group0()[0] * other.group3()[2])),
                    ((self.group0()[2] * other.group1()[3])
                        + (self.group0()[2] * other.group0()[3])
                        + (self.group0()[1] * other.group3()[0])
                        + (self.group0()[1] * other.group1()[0])),
                    (-(self.group0()[1] * other.group3()[1])
                        - (self.group0()[1] * other.group1()[1])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group3()[0])),
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[3] * other.group1()[0]) - (self.group0()[2] * other.group0()[1]) - (self.group0()[0] * other.group3()[3])
                    + (self.group0()[1] * other.group0()[2])),
                (-(self.group0()[3] * other.group1()[1]) + (self.group0()[2] * other.group0()[0])
                    - (self.group0()[0] * other.group0()[2])
                    - (self.group0()[1] * other.group3()[3])),
                (-(self.group0()[3] * other.group1()[2]) - (self.group0()[2] * other.group3()[3]) + (self.group0()[0] * other.group0()[1])
                    - (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other.group3()[3] * -1.0),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       55       84        0
    //    simd4       11       14        0
    // Totals...
    // yes simd       66       98        0
    //  no simd       99      140        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                ((self.group0()[3] * other.group1()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e23, e31, e12, e45
            ((Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[3]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * swizzle!(other.group0(), 2, 0, 1, 2))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group0()[1]) + (self.group0()[0] * other.group2()[3])),
                    ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group2()[3])),
                    ((self.group0()[2] * other.group2()[3]) + (self.group0()[1] * other.group0()[0])),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[3] * other.group2()[0]) - (self.group0()[2] * other.group3()[1]) + (self.group0()[2] * other.group1()[1]) + (self.group0()[1] * other.group3()[2])
                    - (self.group0()[1] * other.group1()[2])
                    + (self.group0()[0] * other.group0()[3])
                    - (self.group0()[0] * other.group1()[3])),
                ((self.group0()[3] * other.group2()[1]) + (self.group0()[2] * other.group3()[0]) - (self.group0()[2] * other.group1()[0]) - (self.group0()[1] * other.group1()[3])
                    + (self.group0()[1] * other.group0()[3])
                    + (self.group0()[0] * other.group1()[2])
                    - (self.group0()[0] * other.group3()[2])),
                ((self.group0()[3] * other.group2()[2]) - (self.group0()[2] * other.group1()[3]) + (self.group0()[2] * other.group0()[3]) - (self.group0()[1] * other.group3()[0])
                    + (self.group0()[1] * other.group1()[0])
                    - (self.group0()[0] * other.group1()[1])
                    + (self.group0()[0] * other.group3()[1])),
                (self.group0()[3] * other.group2()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + (swizzle!(self.group0(), 2, 0, 2, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group2()[3], other.group3()[2]]))
                + (swizzle!(self.group0(), 0, 1, 1, 1) * Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[0], other.group3()[1]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    (-(self.group0()[1] * other.group1()[1]) - (self.group0()[0] * other.group1()[0]) + (self.group0()[0] * other.group3()[0])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl InfixSandwich for Flector {}
impl Sandwich<AntiScalar> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       25       48        0
    //    simd4       22       24        0
    // Totals...
    // yes simd       47       72        0
    //  no simd      113      144        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other[e12345] * -1.0)]),
            // e235, e315, e125, e5
            (Simd32x4::from(other[e12345]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group1()[0] * other[e12345] * -1.0),
                (self.group1()[1] * other[e12345] * -1.0),
                (self.group1()[2] * other[e12345] * -1.0),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       61       92        0
    //    simd4       29       30        0
    // Totals...
    // yes simd       90      122        0
    //  no simd      177      212        0
    fn sandwich(self, other: Circle) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + Simd32x4::from([
                    (-(self.group1()[2] * other.group0()[1]) + (self.group1()[1] * other.group0()[2])),
                    ((self.group1()[2] * other.group0()[0]) - (self.group1()[0] * other.group0()[2])),
                    (-(self.group1()[1] * other.group0()[0]) + (self.group1()[0] * other.group0()[1])),
                    (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e415, e425, e435, e321
            ((swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]))
                + (swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group1()[0] * other.group1()[3]) - (self.group0()[1] * other.group0()[2])),
                    (-(self.group1()[1] * other.group1()[3]) - (self.group0()[2] * other.group0()[0])),
                    (-(self.group1()[2] * other.group1()[3]) - (self.group0()[0] * other.group0()[1])),
                    ((self.group1()[1] * other.group1()[1])
                        + (self.group1()[0] * other.group1()[0])
                        + (self.group0()[0] * other.group0()[0])
                        + (self.group0()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group1()[3]) * other.group1())
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group2()[2]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * swizzle!(other.group1(), 2, 0, 1, 2))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group2()[1])
                        + (self.group0()[3] * other.group2()[0])
                        + (self.group0()[2] * other.group1()[1])
                        + (self.group0()[0] * other.group1()[3])),
                    ((self.group1()[0] * other.group2()[2])
                        + (self.group0()[3] * other.group2()[1])
                        + (self.group0()[0] * other.group1()[2])
                        + (self.group0()[1] * other.group1()[3])),
                    ((self.group1()[1] * other.group2()[0])
                        + (self.group0()[3] * other.group2()[2])
                        + (self.group0()[2] * other.group1()[3])
                        + (self.group0()[1] * other.group1()[0])),
                    (-(self.group1()[1] * other.group2()[1])
                        - (self.group1()[0] * other.group2()[0])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e1, e2, e3, e4
            ((swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group1()[3] * other.group0()[0]) - (self.group1()[2] * other.group1()[1]) - (self.group0()[3] * other.group1()[0])
                        + (self.group0()[1] * other.group0()[2])
                        - (self.group0()[2] * other.group0()[1])),
                    (-(self.group1()[3] * other.group0()[1])
                        - (self.group1()[0] * other.group1()[2])
                        - (self.group0()[3] * other.group1()[1])
                        - (self.group0()[0] * other.group0()[2])
                        + (self.group0()[2] * other.group0()[0])),
                    (-(self.group1()[3] * other.group0()[2]) - (self.group1()[1] * other.group1()[0]) - (self.group0()[3] * other.group1()[2])
                        + (self.group0()[0] * other.group0()[1])
                        - (self.group0()[1] * other.group0()[0])),
                    ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       61       95        0
    //    simd4       31       32        0
    // Totals...
    // yes simd       92      127        0
    //  no simd      185      223        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + Simd32x4::from([
                    (-(self.group1()[2] * other.group0()[1]) + (self.group1()[1] * other.group0()[2])),
                    ((self.group1()[2] * other.group0()[0]) - (self.group1()[0] * other.group0()[2])),
                    (-(self.group1()[1] * other.group0()[0]) + (self.group1()[0] * other.group0()[1])),
                    (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e415, e425, e435, e321
            ((swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]))
                - (swizzle!(self.group0(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]))
                + (swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[2]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group1()[3]) * -1.0),
                    ((self.group1()[1] * other.group1()[3]) * -1.0),
                    ((self.group1()[2] * other.group1()[3]) * -1.0),
                    ((self.group1()[1] * other.group1()[1])
                        + (self.group1()[0] * other.group1()[0])
                        + (self.group0()[0] * other.group0()[0])
                        + (self.group0()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                + (swizzle!(self.group1(), 2, 0, 1, 3) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * swizzle!(other.group2(), 2, 0, 1, 2))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * swizzle!(other.group1(), 2, 0, 1, 2))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group2()[0])
                        + (self.group0()[2] * other.group1()[1])
                        + (self.group0()[0] * other.group1()[3])
                        + (self.group0()[0] * other.group2()[3])),
                    ((self.group0()[3] * other.group2()[1])
                        + (self.group0()[1] * other.group2()[3])
                        + (self.group0()[0] * other.group1()[2])
                        + (self.group0()[1] * other.group1()[3])),
                    ((self.group0()[3] * other.group2()[2])
                        + (self.group0()[2] * other.group2()[3])
                        + (self.group0()[2] * other.group1()[3])
                        + (self.group0()[1] * other.group1()[0])),
                    (-(self.group1()[1] * other.group2()[1])
                        - (self.group1()[0] * other.group2()[0])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e1, e2, e3, e4
            ((swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group1()[3] * other.group0()[0])
                        - (self.group1()[2] * other.group1()[1])
                        - (self.group1()[0] * other.group2()[3])
                        - (self.group0()[3] * other.group1()[0])
                        + (self.group0()[1] * other.group0()[2])
                        - (self.group0()[2] * other.group0()[1])),
                    (-(self.group1()[3] * other.group0()[1])
                        - (self.group1()[1] * other.group2()[3])
                        - (self.group1()[0] * other.group1()[2])
                        - (self.group0()[3] * other.group1()[1])
                        - (self.group0()[0] * other.group0()[2])
                        + (self.group0()[2] * other.group0()[0])),
                    (-(self.group1()[3] * other.group0()[2])
                        - (self.group1()[2] * other.group2()[3])
                        - (self.group1()[1] * other.group1()[0])
                        - (self.group0()[3] * other.group1()[2])
                        + (self.group0()[0] * other.group0()[1])
                        - (self.group0()[1] * other.group0()[0])),
                    ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       84      117        0
    //    simd4       23       24        0
    // Totals...
    // yes simd      107      141        0
    //  no simd      176      213        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group1()[2] * other.group0()[1]) + (self.group1()[1] * other.group0()[2])),
                    ((self.group1()[2] * other.group0()[0]) - (self.group1()[0] * other.group0()[2])),
                    (-(self.group1()[1] * other.group0()[0]) + (self.group1()[0] * other.group0()[1])),
                    ((self.group0()[3] * other.group1()[3]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e23, e31, e12, e45
            (-(swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[2]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group0()[0]) + (self.group1()[0] * other.group1()[3]) + (self.group0()[2] * other.group0()[1])),
                    ((self.group1()[3] * other.group0()[1]) + (self.group1()[1] * other.group1()[3]) + (self.group0()[0] * other.group0()[2])),
                    ((self.group1()[3] * other.group0()[2]) + (self.group1()[2] * other.group1()[3]) + (self.group0()[1] * other.group0()[0])),
                    (-(self.group1()[2] * other.group1()[2])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group0()[1])),
                ])),
            // e15, e25, e35, e1234
            ((swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]))
                + (swizzle!(self.group1(), 2, 0, 1, 0) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]))
                + Simd32x4::from([
                    (-(self.group1()[1] * other.group2()[2]) + (self.group0()[3] * other.group2()[0]) + (self.group0()[2] * other.group1()[1])
                        - (self.group0()[0] * other.group1()[3])
                        - (self.group0()[1] * other.group1()[2])),
                    (-(self.group1()[2] * other.group2()[0]) + (self.group0()[3] * other.group2()[1]) - (self.group0()[2] * other.group1()[0])
                        + (self.group0()[0] * other.group1()[2])
                        - (self.group0()[1] * other.group1()[3])),
                    (-(self.group1()[0] * other.group2()[1]) + (self.group0()[3] * other.group2()[2])
                        - (self.group0()[2] * other.group1()[3])
                        - (self.group0()[0] * other.group1()[1])
                        + (self.group0()[1] * other.group1()[0])),
                    (self.group1()[1] * other.group0()[1]),
                ])),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group1(), 1, 2, 0, 3) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group0()[0])
                        + (self.group1()[2] * other.group1()[1])
                        + (self.group0()[3] * other.group1()[0])
                        + (self.group0()[2] * other.group0()[1])),
                    ((self.group1()[3] * other.group0()[1])
                        + (self.group1()[0] * other.group1()[2])
                        + (self.group0()[3] * other.group1()[1])
                        + (self.group0()[0] * other.group0()[2])),
                    ((self.group1()[3] * other.group0()[2])
                        + (self.group1()[1] * other.group1()[0])
                        + (self.group0()[3] * other.group1()[2])
                        + (self.group0()[1] * other.group0()[0])),
                    (-(self.group1()[2] * other.group2()[2])
                        - (self.group1()[1] * other.group2()[1])
                        - (self.group1()[0] * other.group2()[0])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       88      117        0
    //    simd4       33       34        0
    // Totals...
    // yes simd      121      151        0
    //  no simd      220      253        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(swizzle!(self.group1(), 2, 1, 2, 2) * Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group3()[2]]))
                + (swizzle!(self.group1(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]))
                - (swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[2]]))
                - (swizzle!(self.group1(), 0, 0, 1, 1) * Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group3()[1]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    (-(self.group1()[0] * other.group3()[0]) + (self.group0()[3] * other.group1()[3])
                        - (self.group0()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group0()[1])),
                ])),
            // e23, e31, e12, e45
            ((Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[2]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[2]]))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group3()[1])
                        + (self.group1()[0] * other.group1()[3])
                        + (self.group0()[3] * other.group3()[0])
                        + (self.group0()[2] * other.group0()[1])
                        + (self.group0()[0] * other.group2()[3])),
                    ((self.group1()[1] * other.group1()[3])
                        + (self.group1()[0] * other.group3()[2])
                        + (self.group0()[3] * other.group3()[1])
                        + (self.group0()[0] * other.group0()[2])
                        + (self.group0()[1] * other.group2()[3])),
                    ((self.group1()[2] * other.group1()[3])
                        + (self.group1()[1] * other.group3()[0])
                        + (self.group0()[3] * other.group3()[2])
                        + (self.group0()[2] * other.group2()[3])
                        + (self.group0()[1] * other.group0()[0])),
                    (-(self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group0()[1])),
                ])),
            // e15, e25, e35, e1234
            ((swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]))
                + (swizzle!(self.group1(), 2, 1, 2, 1) * Simd32x4::from([other.group2()[1], other.group3()[3], other.group3()[3], other.group0()[1]]))
                - (swizzle!(other.group2(), 2, 0, 1, 3) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[3]]))
                + (swizzle!(self.group1(), 0, 0, 1, 0) * Simd32x4::from([other.group3()[3], other.group2()[2], other.group2()[0], other.group0()[0]]))
                + Simd32x4::from([
                    (-(self.group1()[3] * other.group3()[0]) + (self.group0()[3] * other.group2()[0]) - (self.group0()[2] * other.group3()[1])
                        + (self.group0()[2] * other.group1()[1])
                        + (self.group0()[1] * other.group3()[2])
                        - (self.group0()[0] * other.group1()[3])
                        - (self.group0()[1] * other.group1()[2])),
                    (-(self.group1()[3] * other.group3()[1]) + (self.group0()[3] * other.group2()[1]) + (self.group0()[2] * other.group3()[0])
                        - (self.group0()[2] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[3])
                        + (self.group0()[0] * other.group1()[2])
                        - (self.group0()[0] * other.group3()[2])),
                    (-(self.group1()[3] * other.group3()[2]) + (self.group0()[3] * other.group2()[2])
                        - (self.group0()[2] * other.group1()[3])
                        - (self.group0()[1] * other.group3()[0])
                        + (self.group0()[1] * other.group1()[0])
                        - (self.group0()[0] * other.group1()[1])
                        + (self.group0()[0] * other.group3()[1])),
                    0.0,
                ])),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group1(), 1, 2, 0, 3) * swizzle!(other.group1(), 2, 0, 1, 3))
                + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + (swizzle!(self.group0(), 2, 0, 2, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group2()[3], other.group3()[2]]))
                + (swizzle!(self.group0(), 0, 1, 1, 1) * Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[0], other.group3()[1]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group0()[0]) + (self.group1()[2] * other.group1()[1])),
                    ((self.group1()[3] * other.group0()[1]) + (self.group1()[0] * other.group1()[2])),
                    ((self.group1()[3] * other.group0()[2]) + (self.group1()[1] * other.group1()[0])),
                    (-(self.group1()[2] * other.group2()[2])
                        - (self.group1()[1] * other.group2()[1])
                        - (self.group1()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group1()[1])
                        - (self.group0()[0] * other.group1()[0])
                        + (self.group0()[0] * other.group3()[0])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       25       48        0
    //    simd4       23       25        0
    // Totals...
    // yes simd       48       73        0
    //  no simd      117      148        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[1] * -1.0)]),
            // e235, e315, e125, e5
            ((self.group0() * Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[0]]))
                + (self.group1() * Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group1()[0] * other.group0()[1] * -1.0),
                (self.group1()[1] * other.group0()[1] * -1.0),
                (self.group1()[2] * other.group0()[1] * -1.0),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       81        0
    //    simd4       17       18        0
    // Totals...
    // yes simd       73       99        0
    //  no simd      124      153        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[3])]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group1()[2] * other.group0()[1]) - (self.group1()[1] * other.group0()[2]) - (self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0])),
                (-(self.group1()[2] * other.group0()[0]) + (self.group1()[0] * other.group0()[2]) - (self.group0()[1] * other.group0()[3])
                    + (self.group0()[3] * other.group0()[1])),
                ((self.group1()[1] * other.group0()[0]) - (self.group1()[0] * other.group0()[1]) - (self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group1()[3] * other.group0()[3])
                    - (self.group1()[2] * other.group0()[2])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       84      109        0
    //    simd4       17       18        0
    // Totals...
    // yes simd      101      127        0
    //  no simd      152      181        0
    fn sandwich(self, other: Flector) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[1] * other.group1()[1]) + (self.group0()[3] * other.group0()[3])
                    - (self.group1()[0] * other.group1()[0])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group1()[2] * other.group1()[1]) - (self.group1()[1] * other.group1()[2]) + (self.group0()[3] * other.group1()[0]) + (self.group1()[0] * other.group0()[3])),
                (-(self.group1()[2] * other.group1()[0])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group0()[3] * other.group1()[1])
                    + (self.group1()[0] * other.group1()[2])),
                ((self.group1()[2] * other.group0()[3]) + (self.group1()[1] * other.group1()[0]) + (self.group0()[3] * other.group1()[2]) - (self.group1()[0] * other.group1()[1])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group1()[3] * other.group1()[0]) + (self.group1()[2] * other.group0()[1]) - (self.group1()[1] * other.group0()[2])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group0()[3] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[1])
                    - (self.group0()[0] * other.group0()[3])
                    + (self.group0()[1] * other.group1()[2])),
                (-(self.group1()[3] * other.group1()[1]) - (self.group1()[2] * other.group0()[0])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[0] * other.group0()[2])
                    + (self.group0()[3] * other.group0()[1])
                    + (self.group0()[2] * other.group1()[0])
                    - (self.group0()[0] * other.group1()[2])
                    - (self.group0()[1] * other.group0()[3])),
                (-(self.group1()[3] * other.group1()[2]) + (self.group1()[2] * other.group1()[3]) + (self.group1()[1] * other.group0()[0])
                    - (self.group1()[0] * other.group0()[1])
                    + (self.group0()[3] * other.group0()[2])
                    - (self.group0()[2] * other.group0()[3])
                    + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group1()[3] * other.group0()[3])
                    - (self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    + (self.group0()[3] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[2])
                    + (self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       45       68        0
    //    simd4       24       25        0
    // Totals...
    // yes simd       69       93        0
    //  no simd      141      168        0
    fn sandwich(self, other: Line) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            (-(swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[2]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group0()[0])
                        + (self.group1()[2] * other.group1()[1])
                        + (self.group0()[3] * other.group1()[0])
                        + (self.group0()[2] * other.group0()[1])),
                    ((self.group1()[3] * other.group0()[1])
                        + (self.group1()[0] * other.group1()[2])
                        + (self.group0()[3] * other.group1()[1])
                        + (self.group0()[0] * other.group0()[2])),
                    ((self.group1()[3] * other.group0()[2])
                        + (self.group1()[1] * other.group1()[0])
                        + (self.group0()[3] * other.group1()[2])
                        + (self.group0()[1] * other.group0()[0])),
                    (-(self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group0()[1])),
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group1()[2] * other.group0()[1]) - (self.group0()[3] * other.group0()[0]) + (self.group1()[1] * other.group0()[2])),
                ((self.group1()[2] * other.group0()[0]) - (self.group0()[3] * other.group0()[1]) - (self.group1()[0] * other.group0()[2])),
                (-(self.group1()[1] * other.group0()[0]) - (self.group0()[3] * other.group0()[2]) + (self.group1()[0] * other.group0()[1])),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       49       72        0
    //    simd4       26       27        0
    // Totals...
    // yes simd       75       99        0
    //  no simd      153      180        0
    fn sandwich(self, other: Motor) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[1] * other.group0()[1]) - (self.group0()[3] * other.group0()[3]) + (self.group1()[0] * other.group0()[0])),
            ]),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group1()[3]) * other.group0())
                + (swizzle!(other.group1(), 1, 3, 3, 3) * Simd32x4::from([self.group1()[2], self.group1()[1], self.group1()[2], self.group0()[3]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * swizzle!(other.group1(), 2, 0, 1, 2))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * swizzle!(other.group0(), 2, 0, 1, 2))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group1()[3])
                        + (self.group0()[3] * other.group1()[0])
                        + (self.group0()[2] * other.group0()[1])
                        + (self.group0()[0] * other.group0()[3])),
                    ((self.group1()[0] * other.group1()[2])
                        + (self.group0()[3] * other.group1()[1])
                        + (self.group0()[0] * other.group0()[2])
                        + (self.group0()[1] * other.group0()[3])),
                    ((self.group1()[1] * other.group1()[0])
                        + (self.group0()[3] * other.group1()[2])
                        + (self.group0()[2] * other.group0()[3])
                        + (self.group0()[1] * other.group0()[0])),
                    (-(self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group0()[1])),
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group1()[2] * other.group0()[1]) + (self.group1()[1] * other.group0()[2])
                    - (self.group0()[3] * other.group0()[0])
                    - (self.group1()[0] * other.group0()[3])),
                ((self.group1()[2] * other.group0()[0]) - (self.group1()[1] * other.group0()[3]) - (self.group0()[3] * other.group0()[1]) - (self.group1()[0] * other.group0()[2])),
                (-(self.group1()[2] * other.group0()[3]) - (self.group1()[1] * other.group0()[0]) - (self.group0()[3] * other.group0()[2])
                    + (self.group1()[0] * other.group0()[1])),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for Flector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      150      204        0
    //    simd2        8        8        0
    //    simd3       42       46        0
    //    simd4       39       40        0
    // Totals...
    // yes simd      239      298        0
    //  no simd      448      518        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(self.group1()[3]) * Simd32x2::from([other[e35], other.group1()[3]]))
                - (Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group4()[2], other.group6()[2]]))
                - (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group4()[0], other.group6()[0]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group4()[1], other.group6()[1]]))
                + Simd32x2::from([
                    (-(self.group1()[2] * other.group8()[2]) - (self.group1()[1] * other.group8()[1]) - (self.group1()[0] * other.group8()[0])
                        + (self.group0()[3] * other.group3()[3])),
                    ((self.group1()[2] * other.group1()[2]) + (self.group1()[1] * other.group1()[1]) + (self.group1()[0] * other.group1()[0])
                        - (self.group0()[3] * other.group5()[3])),
                ])),
            // e1, e2, e3, e4
            ((swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group6()[2]]))
                - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group1()[3]]))
                + Simd32x4::from([
                    (-(self.group1()[3] * other.group6()[0])
                        - (self.group1()[2] * other.group5()[1])
                        - (self.group1()[0] * other.group0()[1])
                        - (self.group0()[2] * other.group6()[1])
                        - (self.group0()[0] * other.group1()[3])
                        + (self.group0()[1] * other.group6()[2])),
                    (-(self.group1()[3] * other.group6()[1]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[0] * other.group5()[2])
                        + (self.group0()[2] * other.group6()[0])
                        - (self.group0()[0] * other.group6()[2])
                        - (self.group0()[1] * other.group1()[3])),
                    (-(self.group1()[3] * other.group6()[2])
                        - (self.group1()[2] * other.group0()[1])
                        - (self.group1()[1] * other.group5()[0])
                        - (self.group0()[2] * other.group1()[3])
                        + (self.group0()[0] * other.group6()[1])
                        - (self.group0()[1] * other.group6()[0])),
                    ((self.group1()[1] * other.group6()[1]) + (self.group1()[0] * other.group6()[0])),
                ])),
            // e5
            ((self.group1()[3] * other.group5()[3]) + (self.group1()[3] * other.group0()[1])
                - (self.group1()[2] * other.group7()[2])
                - (self.group1()[1] * other.group7()[1])
                - (self.group1()[0] * other.group7()[0])
                + (self.group0()[3] * other[e1])
                - (self.group0()[2] * other.group5()[2])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[1] * other.group5()[1])
                - (self.group0()[1] * other.group1()[1])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[0] * other.group5()[0])),
            // e15, e25, e35, e45
            ((Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group10()[2], other.group10()[1], other.group10()[0], other[e35]]))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group8()[0], other.group8()[1], other.group8()[2], other.group10()[0]]))
                - (swizzle!(self.group1(), 1, 2, 0, 1) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group10()[1]]))
                + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[0]]))
                - (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group8()[1], other.group10()[2], other.group3()[3], other.group4()[2]]))
                - (swizzle!(self.group0(), 1, 1, 1, 0) * Simd32x4::from([other.group10()[0], other.group3()[3], other.group8()[0], other.group4()[0]]))
                - (swizzle!(self.group0(), 0, 0, 0, 1) * Simd32x4::from([other.group3()[3], other.group8()[2], other.group10()[1], other.group4()[1]]))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group3()[1])
                        + (self.group1()[0] * other.group8()[3])
                        + (self.group0()[2] * other.group10()[1])
                        + (self.group0()[1] * other.group8()[2])
                        + (self.group0()[0] * other.group0()[0])),
                    ((self.group1()[1] * other.group8()[3])
                        + (self.group1()[0] * other.group3()[2])
                        + (self.group0()[2] * other.group8()[0])
                        + (self.group0()[1] * other.group0()[0])
                        + (self.group0()[0] * other.group10()[0])),
                    ((self.group1()[2] * other.group8()[3])
                        + (self.group1()[1] * other.group3()[0])
                        + (self.group0()[2] * other.group0()[0])
                        + (self.group0()[1] * other.group10()[2])
                        + (self.group0()[0] * other.group8()[1])),
                    ((self.group1()[0] * other.group10()[2]) * -1.0),
                ])),
            // e41, e42, e43
            (-(swizzle!(other.group4(), 1, 1, 0) * Simd32x3::from([self.group1()[2], self.group0()[3], self.group1()[1]]))
                + (swizzle!(other.group4(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                - (swizzle!(other.group4(), 0, 2, 2) * Simd32x3::from([self.group0()[3], self.group1()[0], self.group0()[3]]))
                - (Simd32x3::from(other[e35]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))),
            // e415, e425, e435, e321
            ((swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group6()[0], other.group6()[1], other.group6()[2], other.group5()[2]]))
                - (swizzle!(self.group1(), 2, 1, 2, 3) * Simd32x4::from([other.group1()[1], other.group5()[3], other.group5()[3], other.group1()[3]]))
                + (swizzle!(self.group1(), 1, 2, 0, 1) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group5()[1]]))
                - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[1]]))
                + (swizzle!(self.group0(), 2, 0, 2, 2) * Simd32x4::from([other.group6()[1], other.group6()[2], other.group1()[3], other.group6()[2]]))
                + (swizzle!(self.group0(), 0, 1, 1, 0) * Simd32x4::from([other.group1()[3], other.group1()[3], other.group6()[0], other.group6()[0]]))
                + Simd32x4::from([
                    (-(self.group1()[0] * other.group5()[3]) - (self.group0()[1] * other.group6()[2])),
                    (-(self.group1()[0] * other.group1()[2]) - (self.group0()[2] * other.group6()[0])),
                    (-(self.group1()[1] * other.group1()[0]) - (self.group0()[0] * other.group6()[1])),
                    ((self.group1()[0] * other.group5()[0]) + (self.group0()[1] * other.group6()[1])),
                ])),
            // e423, e431, e412
            (-(swizzle!(other.group6(), 1, 1, 0) * Simd32x3::from([self.group1()[2], self.group0()[3], self.group1()[1]]))
                + (swizzle!(other.group6(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                - (swizzle!(other.group6(), 0, 2, 2) * Simd32x3::from([self.group0()[3], self.group1()[0], self.group0()[3]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))),
            // e235, e315, e125
            ((Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group5()[0], other.group5()[1], other.group5()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (swizzle!(other.group7(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))
                - (swizzle!(other.group7(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(self.group0()[3]) * other.group7())
                + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(other.group5()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + Simd32x3::from([
                    ((self.group0()[2] * other.group5()[1]) + (self.group0()[2] * other.group1()[1])
                        - (self.group0()[1] * other.group5()[2])
                        - (self.group0()[1] * other.group1()[2])),
                    (-(self.group0()[2] * other.group5()[0]) - (self.group0()[2] * other.group1()[0])
                        + (self.group0()[0] * other.group1()[2])
                        + (self.group0()[0] * other.group5()[2])),
                    ((self.group0()[1] * other.group5()[0]) + (self.group0()[1] * other.group1()[0])
                        - (self.group0()[0] * other.group1()[1])
                        - (self.group0()[0] * other.group5()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], other.group0()[0]]))
                - (swizzle!(self.group1(), 1, 2, 0, 3) * Simd32x4::from([other.group10()[0], other.group10()[2], other.group10()[1], other.group3()[3]]))
                + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group10()[2], other.group10()[1], other.group10()[0], other.group8()[3]]))
                + (swizzle!(self.group0(), 2, 0, 2, 2) * Simd32x4::from([other.group4()[1], other.group4()[2], other[e35], other.group8()[2]]))
                + (swizzle!(self.group0(), 0, 1, 1, 1) * Simd32x4::from([other[e35], other[e35], other.group4()[0], other.group8()[1]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group4()[2], other.group4()[0], other.group4()[1], other.group10()[0]]))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group10()[1]) + (self.group1()[0] * other.group0()[0])),
                    ((self.group1()[1] * other.group0()[0]) + (self.group1()[0] * other.group10()[0])),
                    ((self.group1()[2] * other.group0()[0]) + (self.group1()[1] * other.group10()[2])),
                    (-(self.group1()[2] * other.group3()[2])
                        - (self.group1()[1] * other.group3()[1])
                        - (self.group1()[0] * other.group3()[0])
                        - (self.group0()[1] * other.group10()[1])
                        + (self.group0()[0] * other.group8()[0])
                        - (self.group0()[0] * other.group10()[2])),
                ])),
            // e1234
            ((self.group1()[2] * other.group4()[2]) + (self.group1()[1] * other.group4()[1]) - (self.group0()[3] * other[e35]) + (self.group1()[0] * other.group4()[0])),
            // e12, e31, e23
            ((Simd32x3::from(self.group1()[3]) * swizzle!(other.group4(), 2, 1, 0))
                + (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group1()[2], self.group1()[1], self.group1()[0]]))
                + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group8()[2], other.group8()[1], other.group8()[0]]))
                + (Simd32x3::from(other[e35]) * Simd32x3::from([self.group0()[2], self.group0()[1], self.group0()[0]]))
                - (swizzle!(other.group4(), 1, 0, 2) * Simd32x3::from([self.group0()[0], self.group0()[2], self.group0()[1]]))
                + (swizzle!(other.group4(), 0, 2, 1) * Simd32x3::from([self.group0()[1], self.group0()[0], self.group0()[2]]))
                + Simd32x3::from([
                    ((self.group1()[1] * other.group8()[0]) - (self.group1()[0] * other.group8()[1])),
                    (-(self.group1()[2] * other.group8()[0]) + (self.group1()[0] * other.group8()[2])),
                    ((self.group1()[2] * other.group8()[1]) - (self.group1()[1] * other.group8()[2])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64       89        0
    //    simd4       17       18        0
    // Totals...
    // yes simd       81      107        0
    //  no simd      132      161        0
    fn sandwich(self, other: Plane) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group1()[2] * other.group0()[1]) + (self.group0()[3] * other.group0()[0]) - (self.group1()[1] * other.group0()[2])),
                (-(self.group1()[2] * other.group0()[0]) + (self.group0()[3] * other.group0()[1]) + (self.group1()[0] * other.group0()[2])),
                ((self.group1()[1] * other.group0()[0]) + (self.group0()[3] * other.group0()[2]) - (self.group1()[0] * other.group0()[1])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group1()[3] * other.group0()[0]) + (self.group1()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2])
                    - (self.group0()[2] * other.group0()[1])),
                (-(self.group1()[3] * other.group0()[1]) + (self.group1()[1] * other.group0()[3]) - (self.group0()[0] * other.group0()[2])
                    + (self.group0()[2] * other.group0()[0])),
                (-(self.group1()[3] * other.group0()[2]) + (self.group1()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1])
                    - (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((self.group0()[3] * other.group0()[3]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       41       72        0
    //    simd4       24       27        0
    // Totals...
    // yes simd       65       99        0
    //  no simd      137      180        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3] * -1.0),
                (self.group1()[1] * other.group0()[3] * -1.0),
                (self.group1()[2] * other.group0()[3] * -1.0),
                ((self.group1()[3] * other.group0()[3]) + (self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group1()[2] * other.group0()[1]) + (self.group1()[1] * other.group0()[2]) + (self.group0()[0] * other.group0()[3])
                    - (self.group0()[3] * other.group0()[0])),
                ((self.group1()[2] * other.group0()[0]) - (self.group1()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[3]) - (self.group0()[3] * other.group0()[1])),
                (-(self.group1()[1] * other.group0()[0]) + (self.group1()[0] * other.group0()[1]) + (self.group0()[2] * other.group0()[3])
                    - (self.group0()[3] * other.group0()[2])),
                (self.group1()[3] * other.group0()[3] * -1.0),
            ]),
            // e235, e315, e125, e5
            ((Simd32x4::from(other[e2]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * swizzle!(other.group0(), 2, 0, 1, 2))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group0()[0]) + (self.group0()[2] * other.group0()[1])),
                    ((self.group1()[3] * other.group0()[1]) + (self.group0()[0] * other.group0()[2])),
                    ((self.group1()[3] * other.group0()[2]) + (self.group0()[1] * other.group0()[0])),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e1, e2, e3, e4
            (self.group0() * Simd32x4::from(other.group0()[3]) * Simd32x4::from(-1.0)),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       48        0
    //    simd4        0        3        0
    // Totals...
    // yes simd       40       51        0
    //  no simd       40       60        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            (self.group0() * Simd32x4::from(other[scalar])),
            // e4235, e4315, e4125, e3215
            (self.group1() * Simd32x4::from(other[scalar])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       68      105        0
    //    simd4       17       18        0
    // Totals...
    // yes simd       85      123        0
    //  no simd      136      177        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group1()[0] * other[e4315] * -1.0),
                (self.group1()[1] * other[e4315] * -1.0),
                (self.group1()[2] * other[e4315] * -1.0),
                ((self.group1()[3] * other[e4315]) - (self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group1()[2] * other.group0()[1]) - (self.group1()[1] * other.group0()[2]) + (self.group0()[0] * other[e4315]) + (self.group0()[3] * other.group0()[0])),
                (-(self.group1()[2] * other.group0()[0]) + (self.group1()[0] * other.group0()[2]) + (self.group0()[1] * other[e4315]) + (self.group0()[3] * other.group0()[1])),
                ((self.group1()[1] * other.group0()[0]) - (self.group1()[0] * other.group0()[1]) + (self.group0()[2] * other[e4315]) + (self.group0()[3] * other.group0()[2])),
                (self.group1()[3] * other[e4315]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group1()[3] * other.group0()[0]) + (self.group1()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2])
                    - (self.group0()[2] * other.group0()[1])),
                (-(self.group1()[3] * other.group0()[1]) + (self.group1()[1] * other.group0()[3]) - (self.group0()[0] * other.group0()[2])
                    + (self.group0()[2] * other.group0()[0])),
                (-(self.group1()[3] * other.group0()[2]) + (self.group1()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1])
                    - (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other[e4315] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other[e4315]),
                (self.group0()[1] * other[e4315]),
                (self.group0()[2] * other[e4315]),
                ((self.group0()[3] * other.group0()[3]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       65       99        0
    //    simd4       40       41        0
    // Totals...
    // yes simd      105      140        0
    //  no simd      225      263        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(other.group0(), 1, 1, 0, 2) * Simd32x4::from([self.group1()[2], self.group0()[3], self.group1()[1], self.group0()[2]]))
                + (swizzle!(self.group1(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group3()[3]]))
                - (swizzle!(other.group0(), 0, 2, 2, 0) * Simd32x4::from([self.group0()[3], self.group1()[0], self.group0()[3], self.group0()[0]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group3()[3]) * -1.0),
                    ((self.group1()[1] * other.group3()[3]) * -1.0),
                    ((self.group1()[2] * other.group3()[3]) * -1.0),
                    ((self.group1()[2] * other.group3()[2]) + (self.group1()[1] * other.group3()[1]) + (self.group1()[0] * other.group3()[0])
                        - (self.group0()[3] * other.group1()[3])
                        - (self.group0()[1] * other.group0()[1])),
                ])),
            // e415, e425, e435, e321
            ((swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]))
                - (swizzle!(self.group1(), 2, 1, 2, 3) * Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group3()[3]]))
                + (swizzle!(self.group1(), 1, 2, 0, 1) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[1]]))
                - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[3]]))
                + (swizzle!(self.group0(), 2, 0, 2, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group3()[3], other.group0()[2]]))
                + (swizzle!(self.group0(), 0, 1, 1, 0) * Simd32x4::from([other.group3()[3], other.group3()[3], other.group0()[0], other.group0()[0]]))
                + Simd32x4::from([
                    (-(self.group1()[0] * other.group1()[3]) - (self.group0()[1] * other.group0()[2])),
                    (-(self.group1()[0] * other.group3()[2]) - (self.group0()[2] * other.group0()[0])),
                    (-(self.group1()[1] * other.group3()[0]) - (self.group0()[0] * other.group0()[1])),
                    ((self.group1()[0] * other.group1()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                + (swizzle!(other.group2(), 1, 3, 3, 3) * Simd32x4::from([self.group1()[2], self.group1()[1], self.group1()[2], self.group0()[3]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * swizzle!(other.group2(), 2, 0, 1, 2))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[1], other.group3()[2]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group3()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group2()[3])
                        + (self.group0()[3] * other.group2()[0])
                        + (self.group0()[2] * other.group3()[1])
                        + (self.group0()[2] * other.group1()[1])
                        + (self.group0()[0] * other.group0()[3])
                        + (self.group0()[0] * other.group1()[3])),
                    ((self.group1()[0] * other.group2()[2])
                        + (self.group0()[3] * other.group2()[1])
                        + (self.group0()[1] * other.group1()[3])
                        + (self.group0()[1] * other.group0()[3])
                        + (self.group0()[0] * other.group1()[2])
                        + (self.group0()[0] * other.group3()[2])),
                    ((self.group1()[1] * other.group2()[0])
                        + (self.group0()[3] * other.group2()[2])
                        + (self.group0()[2] * other.group1()[3])
                        + (self.group0()[2] * other.group0()[3])
                        + (self.group0()[1] * other.group3()[0])
                        + (self.group0()[1] * other.group1()[0])),
                    (-(self.group1()[1] * other.group2()[1])
                        - (self.group1()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group3()[1])
                        - (self.group0()[1] * other.group1()[1])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group3()[0])),
                ])),
            // e1, e2, e3, e4
            ((swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + (swizzle!(other.group0(), 2, 0, 1, 1) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[1]]))
                + Simd32x4::from([
                    (-(self.group1()[3] * other.group0()[0])
                        - (self.group1()[2] * other.group1()[1])
                        - (self.group1()[0] * other.group0()[3])
                        - (self.group0()[2] * other.group0()[1])
                        - (self.group0()[0] * other.group3()[3])),
                    (-(self.group1()[3] * other.group0()[1])
                        - (self.group1()[1] * other.group0()[3])
                        - (self.group1()[0] * other.group1()[2])
                        - (self.group0()[0] * other.group0()[2])
                        - (self.group0()[1] * other.group3()[3])),
                    (-(self.group1()[3] * other.group0()[2])
                        - (self.group1()[2] * other.group0()[3])
                        - (self.group1()[1] * other.group1()[0])
                        - (self.group0()[2] * other.group3()[3])
                        - (self.group0()[1] * other.group0()[0])),
                    (self.group1()[0] * other.group0()[0]),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       89      124        0
    //    simd4       34       35        0
    // Totals...
    // yes simd      123      159        0
    //  no simd      225      264        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(swizzle!(self.group1(), 2, 1, 2, 2) * Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group3()[2]]))
                + (swizzle!(self.group1(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]))
                - (swizzle!(other.group0(), 0, 1, 0, 2) * Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[1], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group2()[3]) * -1.0),
                    ((self.group1()[0] * other.group0()[2]) * -1.0),
                    ((self.group0()[3] * other.group0()[2]) * -1.0),
                    (-(self.group1()[1] * other.group3()[1]) - (self.group1()[0] * other.group3()[0]) + (self.group0()[3] * other.group1()[3])
                        - (self.group0()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group0()[1])),
                ])),
            // e23, e31, e12, e45
            ((Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[2]]))
                + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[3]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * swizzle!(other.group0(), 2, 0, 1, 2))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group3()[1])
                        + (self.group1()[0] * other.group1()[3])
                        + (self.group0()[2] * other.group0()[1])
                        + (self.group0()[0] * other.group2()[3])),
                    ((self.group1()[1] * other.group1()[3])
                        + (self.group1()[0] * other.group3()[2])
                        + (self.group0()[0] * other.group0()[2])
                        + (self.group0()[1] * other.group2()[3])),
                    ((self.group1()[2] * other.group1()[3])
                        + (self.group1()[1] * other.group3()[0])
                        + (self.group0()[2] * other.group2()[3])
                        + (self.group0()[1] * other.group0()[0])),
                    (-(self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group0()[1])),
                ])),
            // e15, e25, e35, e1234
            ((swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]))
                + (swizzle!(self.group1(), 2, 1, 2, 1) * Simd32x4::from([other.group2()[1], other.group3()[3], other.group3()[3], other.group0()[1]]))
                - (swizzle!(other.group2(), 2, 0, 1, 3) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[3]]))
                + (swizzle!(self.group1(), 0, 0, 1, 0) * Simd32x4::from([other.group3()[3], other.group2()[2], other.group2()[0], other.group0()[0]]))
                + Simd32x4::from([
                    (-(self.group1()[3] * other.group3()[0]) + (self.group0()[3] * other.group2()[0]) - (self.group0()[2] * other.group3()[1])
                        + (self.group0()[2] * other.group1()[1])
                        + (self.group0()[1] * other.group3()[2])
                        - (self.group0()[1] * other.group1()[2])
                        + (self.group0()[0] * other.group0()[3])
                        - (self.group0()[0] * other.group1()[3])),
                    (-(self.group1()[3] * other.group3()[1]) + (self.group0()[3] * other.group2()[1]) + (self.group0()[2] * other.group3()[0])
                        - (self.group0()[2] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[3])
                        + (self.group0()[1] * other.group0()[3])
                        + (self.group0()[0] * other.group1()[2])
                        - (self.group0()[0] * other.group3()[2])),
                    (-(self.group1()[3] * other.group3()[2]) + (self.group0()[3] * other.group2()[2]) - (self.group0()[2] * other.group1()[3])
                        + (self.group0()[2] * other.group0()[3])
                        - (self.group0()[1] * other.group3()[0])
                        + (self.group0()[1] * other.group1()[0])
                        - (self.group0()[0] * other.group1()[1])
                        + (self.group0()[0] * other.group3()[1])),
                    0.0,
                ])),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(self.group1()[3]) * other.group0()) - (swizzle!(self.group1(), 1, 2, 0, 3) * swizzle!(other.group1(), 2, 0, 1, 3))
                + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + (swizzle!(self.group0(), 2, 0, 2, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group2()[3], other.group3()[2]]))
                + (swizzle!(self.group0(), 0, 1, 1, 1) * Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[0], other.group3()[1]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group1()[1]) + (self.group1()[0] * other.group0()[3])),
                    ((self.group1()[1] * other.group0()[3]) + (self.group1()[0] * other.group1()[2])),
                    ((self.group1()[2] * other.group0()[3]) + (self.group1()[1] * other.group1()[0])),
                    (-(self.group1()[2] * other.group2()[2])
                        - (self.group1()[1] * other.group2()[1])
                        - (self.group1()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group1()[1])
                        - (self.group0()[0] * other.group1()[0])
                        + (self.group0()[0] * other.group3()[0])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl InfixSandwich for Line {}
impl Sandwich<AntiScalar> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       62        0
    //    simd3        0        4        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       41       67        0
    //  no simd       44       78        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[0] * other[e12345] * -1.0),
                (self.group0()[1] * other[e12345] * -1.0),
                (self.group0()[2] * other[e12345] * -1.0),
                0.0,
            ]),
            // e15, e25, e35
            (self.group1() * Simd32x3::from(other[e12345]) * Simd32x3::from(-1.0)),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       96      128        0
    //    simd3        0        2        0
    //    simd4        7        7        0
    // Totals...
    // yes simd      103      137        0
    //  no simd      124      162        0
    fn sandwich(self, other: Circle) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                ((self.group1()[2] * other.group0()[2])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[0] * other.group0()[0])
                    + (self.group0()[2] * other.group1()[2])
                    + (self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group1()[2] * other.group0()[1]) + (self.group1()[1] * other.group0()[2]) + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])),
                ((self.group1()[2] * other.group0()[0]) - (self.group1()[0] * other.group0()[2]) - (self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                (-(self.group1()[1] * other.group0()[0]) + (self.group1()[0] * other.group0()[1]) + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])),
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group1()[2] * other.group1()[1]) + (self.group1()[1] * other.group1()[2]) - (self.group1()[0] * other.group1()[3])
                    + (self.group0()[1] * other.group2()[2])
                    - (self.group0()[2] * other.group2()[1])),
                ((self.group1()[2] * other.group1()[0]) - (self.group1()[1] * other.group1()[3]) - (self.group1()[0] * other.group1()[2]) - (self.group0()[0] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[0])),
                (-(self.group1()[2] * other.group1()[3]) - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[0] * other.group1()[1])
                    + (self.group0()[0] * other.group2()[1])
                    - (self.group0()[1] * other.group2()[0])),
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group1(), 3, 3, 3, 2) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]]))
                + Simd32x4::from([
                    (-(self.group1()[2] * other.group0()[1]) + (self.group1()[1] * other.group0()[2])),
                    ((self.group1()[2] * other.group0()[0]) - (self.group1()[0] * other.group0()[2])),
                    (-(self.group1()[1] * other.group0()[0]) + (self.group1()[0] * other.group0()[1])),
                    ((self.group1()[1] * other.group1()[1])
                        + (self.group1()[0] * other.group1()[0])
                        + (self.group0()[2] * other.group2()[2])
                        + (self.group0()[0] * other.group2()[0])
                        + (self.group0()[1] * other.group2()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      102      134        0
    //    simd3        0        2        0
    //    simd4        7        7        0
    // Totals...
    // yes simd      109      143        0
    //  no simd      130      168        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                ((self.group1()[2] * other.group0()[2])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[0] * other.group0()[0])
                    + (self.group0()[2] * other.group1()[2])
                    + (self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group1()[2] * other.group0()[1]) + (self.group1()[1] * other.group0()[2])
                    - (self.group0()[2] * other.group1()[1])
                    - (self.group0()[0] * other.group2()[3])
                    + (self.group0()[1] * other.group1()[2])),
                ((self.group1()[2] * other.group0()[0]) - (self.group1()[0] * other.group0()[2]) + (self.group0()[2] * other.group1()[0])
                    - (self.group0()[0] * other.group1()[2])
                    - (self.group0()[1] * other.group2()[3])),
                (-(self.group1()[1] * other.group0()[0]) + (self.group1()[0] * other.group0()[1]) - (self.group0()[2] * other.group2()[3])
                    + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])),
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group1()[2] * other.group1()[1]) + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[0] * other.group2()[3])
                    - (self.group1()[0] * other.group1()[3])
                    + (self.group0()[1] * other.group2()[2])
                    - (self.group0()[2] * other.group2()[1])),
                ((self.group1()[2] * other.group1()[0])
                    - (self.group1()[1] * other.group2()[3])
                    - (self.group1()[1] * other.group1()[3])
                    - (self.group1()[0] * other.group1()[2])
                    - (self.group0()[0] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[0])),
                (-(self.group1()[2] * other.group2()[3]) - (self.group1()[2] * other.group1()[3]) - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[0] * other.group1()[1])
                    + (self.group0()[0] * other.group2()[1])
                    - (self.group0()[1] * other.group2()[0])),
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group1(), 3, 3, 3, 2) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]]))
                + Simd32x4::from([
                    (-(self.group1()[2] * other.group0()[1]) + (self.group1()[1] * other.group0()[2])),
                    ((self.group1()[2] * other.group0()[0]) - (self.group1()[0] * other.group0()[2])),
                    (-(self.group1()[1] * other.group0()[0]) + (self.group1()[0] * other.group0()[1])),
                    ((self.group1()[1] * other.group1()[1])
                        + (self.group1()[0] * other.group1()[0])
                        + (self.group0()[2] * other.group2()[2])
                        + (self.group0()[0] * other.group2()[0])
                        + (self.group0()[1] * other.group2()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       92      124        0
    //    simd3        0        2        0
    //    simd4        8        8        0
    // Totals...
    // yes simd      100      134        0
    //  no simd      124      162        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group1()[2] * other.group0()[1]) - (self.group1()[1] * other.group0()[2]) - (self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])),
                (-(self.group1()[2] * other.group0()[0]) + (self.group1()[0] * other.group0()[2]) + (self.group0()[0] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[0])),
                ((self.group1()[1] * other.group0()[0]) - (self.group1()[0] * other.group0()[1]) - (self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            (-(swizzle!(other.group1(), 2, 0, 3, 2) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[2], self.group1()[2]]))
                - (swizzle!(other.group1(), 3, 3, 1, 1) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[0], self.group1()[1]]))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group1()[1]) - (self.group0()[1] * other.group2()[2]) + (self.group0()[2] * other.group2()[1])),
                    ((self.group1()[0] * other.group1()[2]) + (self.group0()[0] * other.group2()[2]) - (self.group0()[2] * other.group2()[0])),
                    ((self.group1()[1] * other.group1()[0]) - (self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0])),
                    (-(self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group1()[2] * other.group0()[1]) - (self.group0()[0] * other.group1()[3]) + (self.group1()[1] * other.group0()[2])),
                ((self.group1()[2] * other.group0()[0]) - (self.group0()[1] * other.group1()[3]) - (self.group1()[0] * other.group0()[2])),
                (-(self.group1()[1] * other.group0()[0]) - (self.group0()[2] * other.group1()[3]) + (self.group1()[0] * other.group0()[1])),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      106      138        0
    //    simd3        0        2        0
    //    simd4       12       12        0
    // Totals...
    // yes simd      118      152        0
    //  no simd      154      192        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[2] * other.group0()[1]) + (self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group0()[2])),
                (-(self.group0()[2] * other.group0()[0]) + (self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group2()[3])),
                ((self.group0()[2] * other.group2()[3]) - (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group1()[2] * other.group0()[1]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[0] * other.group2()[3]) - (self.group0()[1] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[1])),
                (-(self.group1()[2] * other.group0()[0])
                    + (self.group1()[1] * other.group2()[3])
                    + (self.group1()[0] * other.group0()[2])
                    + (self.group0()[0] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[0])),
                ((self.group1()[2] * other.group2()[3]) + (self.group1()[1] * other.group0()[0]) - (self.group1()[0] * other.group0()[1]) - (self.group0()[0] * other.group1()[1])
                    + (self.group0()[1] * other.group1()[0])),
                ((self.group1()[2] * other.group0()[2])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[0] * other.group0()[0])
                    + (self.group0()[2] * other.group3()[2])
                    + (self.group0()[0] * other.group3()[0])
                    + (self.group0()[1] * other.group3()[1])),
            ]),
            // e235, e315, e125, e5
            (-(Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group1()[2]]))
                + (swizzle!(other.group3(), 2, 0, 1, 2) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group1()[2]]))
                - (Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group1()[1]]))
                - (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group1()[0]]))
                + (swizzle!(other.group3(), 3, 3, 3, 1) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]))
                - (swizzle!(other.group2(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group1()[1]) + (self.group0()[2] * other.group2()[1])),
                    ((self.group1()[0] * other.group1()[2]) + (self.group0()[0] * other.group2()[2])),
                    ((self.group1()[1] * other.group1()[0]) + (self.group0()[1] * other.group2()[0])),
                    ((self.group1()[0] * other.group3()[0]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group1()[2] * other.group0()[1]) + (self.group1()[1] * other.group0()[2])
                    - (self.group1()[0] * other.group2()[3])
                    - (self.group0()[2] * other.group3()[1])
                    - (self.group0()[0] * other.group1()[3])
                    + (self.group0()[1] * other.group3()[2])),
                ((self.group1()[2] * other.group0()[0]) - (self.group1()[1] * other.group2()[3]) - (self.group1()[0] * other.group0()[2]) + (self.group0()[2] * other.group3()[0])
                    - (self.group0()[0] * other.group3()[2])
                    - (self.group0()[1] * other.group1()[3])),
                (-(self.group1()[2] * other.group2()[3]) - (self.group1()[1] * other.group0()[0]) + (self.group1()[0] * other.group0()[1])
                    - (self.group0()[2] * other.group1()[3])
                    + (self.group0()[0] * other.group3()[1])
                    - (self.group0()[1] * other.group3()[0])),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       62        0
    //    simd3        1        4        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       42       67        0
    //  no simd       47       78        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        let geometric_product = Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[1] * other.group0()[1] * -1.0),
                (self.group0()[2] * other.group0()[1] * -1.0),
                0.0,
            ]),
            // e15, e25, e35
            (-(self.group0() * Simd32x3::from(other.group0()[0])) - (self.group1() * Simd32x3::from(other.group0()[1]))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       78        0
    //    simd3        0        2        0
    //    simd4        8       10        0
    // Totals...
    // yes simd       64       90        0
    //  no simd       88      124        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from(0.0),
            // e235, e315, e125, e5
            (-(swizzle!(other.group0(), 3, 3, 3, 2) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[2]]))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]))
                + (Simd32x4::from([1.0, 1.0, 1.0, -1.0])
                    * swizzle!(other.group0(), 1, 2, 0, 1)
                    * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[1]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       68       92        0
    //    simd3        0        2        0
    //    simd4       10       10        0
    // Totals...
    // yes simd       78      104        0
    //  no simd      108      138        0
    fn sandwich(self, other: Flector) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((self.group0()[2] * other.group1()[2]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
            ]),
            // e235, e315, e125, e5
            ((swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group1()[2]]))
                - (swizzle!(other.group0(), 3, 3, 3, 2) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[2]]))
                + (swizzle!(other.group1(), 3, 3, 3, 1) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]))
                + Simd32x4::from([
                    (-(self.group1()[2] * other.group1()[1]) + (self.group0()[2] * other.group0()[1])),
                    (-(self.group1()[0] * other.group1()[2]) + (self.group0()[0] * other.group0()[2])),
                    (-(self.group1()[1] * other.group1()[0]) + (self.group0()[1] * other.group0()[0])),
                    ((self.group1()[0] * other.group1()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[2] * other.group1()[1]) - (self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[2])),
                ((self.group0()[2] * other.group1()[0]) - (self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group0()[3])),
                (-(self.group0()[2] * other.group0()[3]) + (self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       75       99        0
    //    simd3        0        2        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       81      107        0
    //  no simd       99      129        0
    fn sandwich(self, other: Line) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group1()[2] * other.group0()[1]) + (self.group1()[1] * other.group0()[2]) + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])),
                ((self.group1()[2] * other.group0()[0]) - (self.group1()[0] * other.group0()[2]) - (self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                (-(self.group1()[1] * other.group0()[0]) + (self.group1()[0] * other.group0()[1]) + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((self.group1()[2] * other.group0()[2])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[0] * other.group0()[0])
                    + (self.group0()[2] * other.group1()[2])
                    + (self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       84      108        0
    //    simd3        0        2        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       90      116        0
    //  no simd      108      138        0
    fn sandwich(self, other: Motor) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group0()[2] * other.group0()[1]) - (self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2])),
                ((self.group0()[2] * other.group0()[0]) - (self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group0()[3])),
                (-(self.group0()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group1()[2] * other.group0()[1]) + (self.group1()[1] * other.group0()[2])
                    - (self.group1()[0] * other.group0()[3])
                    - (self.group0()[2] * other.group1()[1])
                    - (self.group0()[0] * other.group1()[3])
                    + (self.group0()[1] * other.group1()[2])),
                ((self.group1()[2] * other.group0()[0]) - (self.group1()[1] * other.group0()[3]) - (self.group1()[0] * other.group0()[2]) + (self.group0()[2] * other.group1()[0])
                    - (self.group0()[0] * other.group1()[2])
                    - (self.group0()[1] * other.group1()[3])),
                (-(self.group1()[2] * other.group0()[3]) - (self.group1()[1] * other.group0()[0]) + (self.group1()[0] * other.group0()[1])
                    - (self.group0()[2] * other.group1()[3])
                    + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((self.group1()[2] * other.group0()[2])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[0] * other.group0()[0])
                    + (self.group0()[2] * other.group1()[2])
                    + (self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for Line {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      186      226        0
    //    simd3       34       44        0
    //    simd4        8        8        0
    // Totals...
    // yes simd      228      278        0
    //  no simd      320      390        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((self.group1()[2] * other.group6()[2])
                    + (self.group1()[1] * other.group6()[1])
                    + (self.group1()[0] * other.group6()[0])
                    + (self.group0()[2] * other.group5()[2])
                    + (self.group0()[0] * other.group5()[0])
                    + (self.group0()[1] * other.group5()[1])),
                (-(self.group1()[2] * other.group4()[2])
                    - (self.group1()[1] * other.group4()[1])
                    - (self.group1()[0] * other.group4()[0])
                    - (self.group0()[2] * other.group10()[0])
                    - (self.group0()[0] * other.group10()[2])
                    - (self.group0()[1] * other.group10()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group1()[2] * other.group4()[1]) + (self.group1()[1] * other.group4()[2])
                    - (self.group1()[0] * other[e35])
                    - (self.group0()[2] * other.group8()[1])
                    - (self.group0()[0] * other.group3()[3])
                    + (self.group0()[1] * other.group8()[2])),
                ((self.group1()[2] * other.group4()[0]) - (self.group1()[1] * other[e35]) - (self.group1()[0] * other.group4()[2]) + (self.group0()[2] * other.group8()[0])
                    - (self.group0()[0] * other.group8()[2])
                    - (self.group0()[1] * other.group3()[3])),
                (-(self.group1()[2] * other[e35]) - (self.group1()[1] * other.group4()[0]) + (self.group1()[0] * other.group4()[1]) - (self.group0()[2] * other.group3()[3])
                    + (self.group0()[0] * other.group8()[1])
                    - (self.group0()[1] * other.group8()[0])),
                (-(self.group0()[2] * other.group4()[2]) - (self.group0()[0] * other.group4()[0]) - (self.group0()[1] * other.group4()[1])),
            ]),
            // e5
            (-(self.group1()[2] * other.group10()[0]) + (self.group1()[2] * other.group8()[2]) - (self.group1()[1] * other.group10()[1]) + (self.group1()[1] * other.group8()[1])
                - (self.group1()[0] * other.group10()[2])
                + (self.group1()[0] * other.group8()[0])
                - (self.group0()[2] * other.group3()[2])
                - (self.group0()[0] * other.group3()[0])
                - (self.group0()[1] * other.group3()[1])),
            // e15, e25, e35, e45
            (-(swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group1()[2] * other.group5()[1]) + (self.group1()[1] * other.group5()[2]) + (self.group1()[1] * other.group1()[2])
                        - (self.group1()[0] * other.group5()[3])
                        - (self.group1()[0] * other.group0()[1])
                        - (self.group0()[2] * other.group7()[1])
                        - (self.group0()[0] * other[e1])
                        + (self.group0()[1] * other.group7()[2])),
                    ((self.group1()[2] * other.group5()[0]) + (self.group1()[2] * other.group1()[0])
                        - (self.group1()[1] * other.group5()[3])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group5()[2])
                        + (self.group0()[2] * other.group7()[0])
                        - (self.group0()[0] * other.group7()[2])
                        - (self.group0()[1] * other[e1])),
                    (-(self.group1()[2] * other.group5()[3]) - (self.group1()[2] * other.group0()[1]) - (self.group1()[1] * other.group5()[0])
                        + (self.group1()[0] * other.group5()[1])
                        + (self.group1()[0] * other.group1()[1])
                        - (self.group0()[2] * other[e1])
                        + (self.group0()[0] * other.group7()[1])
                        - (self.group0()[1] * other.group7()[0])),
                    ((self.group1()[2] * other.group6()[2]) + (self.group1()[1] * other.group6()[1]) + (self.group1()[0] * other.group6()[0])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e41, e42, e43
            (-(swizzle!(self.group0(), 2, 0, 2) * Simd32x3::from([other.group6()[1], other.group6()[2], other.group1()[3]]))
                - (swizzle!(self.group0(), 0, 1, 1) * Simd32x3::from([other.group1()[3], other.group1()[3], other.group6()[0]]))
                + (swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group6(), 2, 0, 1))),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group1()[2] * other.group4()[1]) - (self.group1()[1] * other.group4()[2])
                    + (self.group1()[0] * other[e35])
                    + (self.group0()[2] * other.group10()[1])
                    + (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group10()[0])),
                (-(self.group1()[2] * other.group4()[0]) + (self.group1()[1] * other[e35]) + (self.group1()[0] * other.group4()[2]) - (self.group0()[2] * other.group10()[2])
                    + (self.group0()[0] * other.group10()[0])
                    + (self.group0()[1] * other.group0()[0])),
                ((self.group1()[2] * other[e35]) + (self.group1()[1] * other.group4()[0]) - (self.group1()[0] * other.group4()[1]) + (self.group0()[2] * other.group0()[0])
                    - (self.group0()[0] * other.group10()[1])
                    + (self.group0()[1] * other.group10()[2])),
                ((self.group1()[2] * other.group4()[2])
                    + (self.group1()[1] * other.group4()[1])
                    + (self.group1()[0] * other.group4()[0])
                    + (self.group0()[2] * other.group8()[2])
                    + (self.group0()[0] * other.group8()[0])
                    + (self.group0()[1] * other.group8()[1])),
            ]),
            // e423, e431, e412
            ((swizzle!(self.group0(), 2, 0, 2) * Simd32x3::from([other.group4()[1], other.group4()[2], other[e35]]))
                + (swizzle!(self.group0(), 0, 1, 1) * Simd32x3::from([other[e35], other[e35], other.group4()[0]]))
                - (swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group4(), 2, 0, 1))),
            // e235, e315, e125
            ((Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group10()[1], other.group8()[0], other.group0()[0]]))
                - (Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group8()[1], other.group10()[2], other.group3()[3]]))
                - (Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group10()[0], other.group3()[3], other.group8()[0]]))
                + (Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group8()[2], other.group0()[0], other.group10()[2]]))
                - (Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group3()[3], other.group8()[2], other.group10()[1]]))
                + (Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group0()[0], other.group10()[0], other.group8()[1]]))
                + (swizzle!(self.group0(), 2, 0, 2) * Simd32x3::from([other.group3()[1], other.group3()[2], other.group8()[3]]))
                + (swizzle!(self.group0(), 0, 1, 1) * Simd32x3::from([other.group8()[3], other.group8()[3], other.group3()[0]]))
                - (swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group3()[2], other.group3()[0], other.group3()[1]]))),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + (swizzle!(other.group5(), 3, 3, 3, 2) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]]))
                + Simd32x4::from([
                    (-(self.group1()[2] * other.group6()[1]) + (self.group1()[1] * other.group6()[2])
                        - (self.group1()[0] * other.group1()[3])
                        - (self.group0()[1] * other.group1()[2])),
                    ((self.group1()[2] * other.group6()[0])
                        - (self.group1()[1] * other.group1()[3])
                        - (self.group1()[0] * other.group6()[2])
                        - (self.group0()[2] * other.group1()[0])),
                    (-(self.group1()[2] * other.group1()[3]) - (self.group1()[1] * other.group6()[0]) + (self.group1()[0] * other.group6()[1])
                        - (self.group0()[0] * other.group1()[1])),
                    ((self.group1()[1] * other.group5()[1])
                        + (self.group1()[1] * other.group1()[1])
                        + (self.group1()[0] * other.group5()[0])
                        + (self.group1()[0] * other.group1()[0])
                        + (self.group0()[2] * other.group7()[2])
                        + (self.group0()[0] * other.group7()[0])
                        + (self.group0()[1] * other.group7()[1])),
                ])),
            // e1234
            ((self.group0()[2] * other.group6()[2]) + (self.group0()[0] * other.group6()[0]) + (self.group0()[1] * other.group6()[1])),
            // e12, e31, e23
            (-(swizzle!(self.group1(), 2, 1, 2) * Simd32x3::from([other.group1()[3], other.group1()[3], other.group6()[1]]))
                - (swizzle!(self.group1(), 1, 0, 0) * Simd32x3::from([other.group6()[0], other.group6()[2], other.group1()[3]]))
                + (swizzle!(self.group1(), 0, 2, 1) * swizzle!(other.group6(), 1, 0, 2))
                - (swizzle!(self.group0(), 2, 0, 2) * Simd32x3::from([other.group0()[1], other.group5()[2], other.group5()[1]]))
                + (swizzle!(self.group0(), 0, 2, 1) * Simd32x3::from([other.group5()[1], other.group5()[0], other.group5()[2]]))
                - (swizzle!(self.group0(), 1, 1, 0) * Simd32x3::from([other.group5()[0], other.group0()[1], other.group0()[1]]))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       61       81        0
    //    simd3        0        2        0
    //    simd4        8       10        0
    // Totals...
    // yes simd       69       93        0
    //  no simd       93      127        0
    fn sandwich(self, other: Plane) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            ((swizzle!(other.group0(), 3, 0, 3, 2) * Simd32x4::from([self.group0()[0], self.group1()[2], self.group0()[2], self.group1()[2]]))
                + (swizzle!(other.group0(), 2, 3, 1, 0) * Simd32x4::from([self.group1()[1], self.group0()[1], self.group1()[0], self.group1()[0]]))
                + (Simd32x4::from([-1.0, -1.0, -1.0, 1.0])
                    * swizzle!(other.group0(), 1, 2, 0, 1)
                    * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group1()[1]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       74      104        0
    //    simd3        0        4        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       78      112        0
    //  no simd       90      132        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (self.group0() * Simd32x3::from(other.group0()[3]) * Simd32x3::from(-1.0)),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3] * -1.0),
                (self.group1()[1] * other.group0()[3] * -1.0),
                (self.group1()[2] * other.group0()[3] * -1.0),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group1()[2] * other.group0()[1]) - (self.group0()[0] * other[e2]) + (self.group1()[1] * other.group0()[2])),
                ((self.group1()[2] * other.group0()[0]) - (self.group0()[1] * other[e2]) - (self.group1()[0] * other.group0()[2])),
                (-(self.group1()[1] * other.group0()[0]) - (self.group0()[2] * other[e2]) + (self.group1()[0] * other.group0()[1])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    (-(self.group1()[0] * other.group0()[3]) - (self.group0()[1] * other.group0()[2])),
                    (-(self.group1()[1] * other.group0()[3]) - (self.group0()[2] * other.group0()[0])),
                    (-(self.group1()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1])),
                    ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       27        0
    //    simd3        0        4        0
    // Totals...
    // yes simd       19       31        0
    //  no simd       19       39        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Line::from_groups(
            // e415, e425, e435
            (self.group0() * Simd32x3::from(other[scalar])),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other[scalar])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64       90        0
    //    simd3        0        2        0
    //    simd4        8       10        0
    // Totals...
    // yes simd       72      102        0
    //  no simd       96      136        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([(self.group0()[0] * other[e4315]), (self.group0()[1] * other[e4315]), (self.group0()[2] * other[e4315]), 0.0]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[0] * other[e4315]),
                (self.group1()[1] * other[e4315]),
                (self.group1()[2] * other[e4315]),
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            ((swizzle!(other.group0(), 3, 0, 3, 2) * Simd32x4::from([self.group0()[0], self.group1()[2], self.group0()[2], self.group1()[2]]))
                + (swizzle!(other.group0(), 2, 3, 1, 0) * Simd32x4::from([self.group1()[1], self.group0()[1], self.group1()[0], self.group1()[0]]))
                + (Simd32x4::from([-1.0, -1.0, -1.0, 1.0])
                    * swizzle!(other.group0(), 1, 2, 0, 1)
                    * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group1()[1]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group1()[0] * other[e4315]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group1()[1] * other[e4315]) - (self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                (-(self.group1()[2] * other[e4315]) + (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      116      148        0
    //    simd3        0        2        0
    //    simd4       11       11        0
    // Totals...
    // yes simd      127      161        0
    //  no simd      160      198        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[2]]))
                + Simd32x4::from([
                    (-(self.group0()[2] * other.group0()[1]) - (self.group0()[0] * other.group3()[3])),
                    (-(self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group3()[3])),
                    (-(self.group0()[2] * other.group3()[3]) - (self.group0()[1] * other.group0()[0])),
                    ((self.group1()[1] * other.group0()[1])
                        + (self.group1()[0] * other.group0()[0])
                        + (self.group0()[2] * other.group1()[2])
                        + (self.group0()[0] * other.group1()[0])
                        + (self.group0()[1] * other.group1()[1])),
                ])),
            // e23, e31, e12, e45
            ((swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group1()[2]]))
                - (swizzle!(other.group3(), 3, 3, 3, 2) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group1()[2] * other.group0()[1]) - (self.group0()[2] * other.group1()[1]) - (self.group0()[0] * other.group0()[3])
                        + (self.group0()[1] * other.group1()[2])),
                    (-(self.group1()[0] * other.group0()[2]) + (self.group0()[2] * other.group1()[0])
                        - (self.group0()[0] * other.group1()[2])
                        - (self.group0()[1] * other.group0()[3])),
                    (-(self.group1()[1] * other.group0()[0]) - (self.group0()[2] * other.group0()[3]) + (self.group0()[0] * other.group1()[1])
                        - (self.group0()[1] * other.group1()[0])),
                    ((self.group1()[1] * other.group0()[1]) + (self.group1()[0] * other.group0()[0])
                        - (self.group0()[0] * other.group3()[0])
                        - (self.group0()[1] * other.group3()[1])),
                ])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group1()[2] * other.group3()[1]) - (self.group1()[2] * other.group1()[1])
                    + (self.group1()[1] * other.group3()[2])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[0] * other.group1()[3])
                    - (self.group1()[0] * other.group0()[3])
                    - (self.group0()[2] * other.group2()[1])
                    - (self.group0()[0] * other.group2()[3])
                    + (self.group0()[1] * other.group2()[2])),
                ((self.group1()[2] * other.group3()[0]) + (self.group1()[2] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[3])
                    - (self.group1()[1] * other.group0()[3])
                    - (self.group1()[0] * other.group3()[2])
                    - (self.group1()[0] * other.group1()[2])
                    + (self.group0()[2] * other.group2()[0])
                    - (self.group0()[0] * other.group2()[2])
                    - (self.group0()[1] * other.group2()[3])),
                (-(self.group1()[2] * other.group1()[3])
                    - (self.group1()[2] * other.group0()[3])
                    - (self.group1()[1] * other.group3()[0])
                    - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[0] * other.group3()[1])
                    + (self.group1()[0] * other.group1()[1])
                    - (self.group0()[2] * other.group2()[3])
                    + (self.group0()[0] * other.group2()[1])
                    - (self.group0()[1] * other.group2()[0])),
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group3(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + (swizzle!(other.group1(), 3, 3, 3, 2) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]]))
                + Simd32x4::from([
                    (-(self.group1()[2] * other.group0()[1]) + (self.group1()[1] * other.group0()[2])
                        - (self.group1()[0] * other.group3()[3])
                        - (self.group0()[1] * other.group3()[2])),
                    ((self.group1()[2] * other.group0()[0])
                        - (self.group1()[1] * other.group3()[3])
                        - (self.group1()[0] * other.group0()[2])
                        - (self.group0()[2] * other.group3()[0])),
                    (-(self.group1()[2] * other.group3()[3]) - (self.group1()[1] * other.group0()[0]) + (self.group1()[0] * other.group0()[1])
                        - (self.group0()[0] * other.group3()[1])),
                    ((self.group1()[1] * other.group3()[1])
                        + (self.group1()[1] * other.group1()[1])
                        + (self.group1()[0] * other.group3()[0])
                        + (self.group1()[0] * other.group1()[0])
                        + (self.group0()[2] * other.group2()[2])
                        + (self.group0()[0] * other.group2()[0])
                        + (self.group0()[1] * other.group2()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       92      124        0
    //    simd3        0        2        0
    //    simd4       17       17        0
    // Totals...
    // yes simd      109      143        0
    //  no simd      160      198        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group0()[1]) + (self.group0()[0] * other.group2()[3])),
                    ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group2()[3])),
                    ((self.group0()[2] * other.group2()[3]) + (self.group0()[1] * other.group0()[0])),
                    (-(self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e415, e425, e435, e321
            ((swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (swizzle!(other.group0(), 3, 3, 3, 1) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]))
                + Simd32x4::from([
                    (-(self.group1()[1] * other.group0()[2]) + (self.group1()[0] * other.group2()[3]) + (self.group0()[2] * other.group1()[1])
                        - (self.group0()[1] * other.group1()[2])),
                    (-(self.group1()[2] * other.group0()[0]) + (self.group1()[1] * other.group2()[3]) - (self.group0()[2] * other.group1()[0])
                        + (self.group0()[0] * other.group1()[2])),
                    ((self.group1()[2] * other.group2()[3]) - (self.group1()[0] * other.group0()[1]) - (self.group0()[0] * other.group1()[1])
                        + (self.group0()[1] * other.group1()[0])),
                    ((self.group1()[0] * other.group0()[0])
                        + (self.group0()[2] * other.group3()[2])
                        + (self.group0()[0] * other.group3()[0])
                        + (self.group0()[1] * other.group3()[1])),
                ])),
            // e235, e315, e125, e5
            (-(Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group1()[2]]))
                + (Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group0()[3], other.group3()[2]]))
                + (Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group3()[2], other.group0()[3], other.group1()[0], other.group3()[1]]))
                - (Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group1()[1]]))
                - (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group1()[0]]))
                + (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[3], other.group1()[2], other.group3()[1], other.group3()[0]]))
                - (swizzle!(other.group2(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group2()[1]) + (self.group0()[0] * other.group3()[3])),
                    ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group3()[3])),
                    ((self.group0()[2] * other.group3()[3]) + (self.group0()[1] * other.group2()[0])),
                    (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group1()[1] * other.group0()[2])
                        - (self.group1()[0] * other.group2()[3])
                        - (self.group0()[2] * other.group3()[1])
                        - (self.group0()[0] * other.group1()[3])
                        + (self.group0()[1] * other.group3()[2])),
                    ((self.group1()[2] * other.group0()[0]) - (self.group1()[1] * other.group2()[3]) + (self.group0()[2] * other.group3()[0])
                        - (self.group0()[0] * other.group3()[2])
                        - (self.group0()[1] * other.group1()[3])),
                    (-(self.group1()[2] * other.group2()[3]) + (self.group1()[0] * other.group0()[1]) - (self.group0()[2] * other.group1()[3])
                        + (self.group0()[0] * other.group3()[1])
                        - (self.group0()[1] * other.group3()[0])),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl InfixSandwich for Motor {}
impl Sandwich<AntiScalar> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       37       74        0
    //    simd4       19       19        0
    // Totals...
    // yes simd       56       93        0
    //  no simd      113      150        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other[e12345] * -1.0)]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[0] * other[e12345] * -1.0),
                (self.group0()[1] * other[e12345] * -1.0),
                (self.group0()[2] * other[e12345] * -1.0),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group1()[0] * other[e12345] * -1.0),
                (self.group1()[1] * other[e12345] * -1.0),
                (self.group1()[2] * other[e12345] * -1.0),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([0.0, 0.0, 0.0, (self.group1()[3] * other[e12345] * -1.0)]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       73      113        0
    //    simd4       26       26        0
    // Totals...
    // yes simd       99      139        0
    //  no simd      177      217        0
    fn sandwich(self, other: Circle) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    (-(self.group0()[3] * other.group0()[0]) - (self.group0()[2] * other.group0()[1])),
                    (-(self.group0()[3] * other.group0()[1]) - (self.group0()[0] * other.group0()[2])),
                    (-(self.group0()[3] * other.group0()[2]) - (self.group0()[1] * other.group0()[0])),
                    ((self.group1()[2] * other.group0()[2])
                        + (self.group1()[1] * other.group0()[1])
                        + (self.group1()[0] * other.group0()[0])
                        + (self.group0()[0] * other.group1()[0])
                        + (self.group0()[1] * other.group1()[1])),
                ])),
            // e23, e31, e12, e45
            ((swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group1(), 2, 0, 1, 3))
                + Simd32x4::from([
                    (-(self.group1()[3] * other.group0()[0])
                        - (self.group1()[2] * other.group0()[1])
                        - (self.group0()[3] * other.group1()[0])
                        - (self.group0()[2] * other.group1()[1])),
                    (-(self.group1()[3] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[2])
                        - (self.group0()[3] * other.group1()[1])
                        - (self.group0()[0] * other.group1()[2])),
                    (-(self.group1()[3] * other.group0()[2])
                        - (self.group1()[1] * other.group0()[0])
                        - (self.group0()[3] * other.group1()[2])
                        - (self.group0()[1] * other.group1()[0])),
                    ((self.group1()[1] * other.group0()[1]) + (self.group1()[0] * other.group0()[0])),
                ])),
            // e15, e25, e35, e1234
            ((swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group1()[3] * other.group1()[0]) - (self.group1()[2] * other.group1()[1]) + (self.group1()[1] * other.group1()[2])
                        - (self.group1()[0] * other.group1()[3])
                        - (self.group0()[3] * other.group2()[0])
                        - (self.group0()[2] * other.group2()[1])),
                    (-(self.group1()[3] * other.group1()[1]) + (self.group1()[2] * other.group1()[0])
                        - (self.group1()[1] * other.group1()[3])
                        - (self.group1()[0] * other.group1()[2])
                        - (self.group0()[3] * other.group2()[1])
                        - (self.group0()[0] * other.group2()[2])),
                    (-(self.group1()[3] * other.group1()[2]) - (self.group1()[2] * other.group1()[3]) - (self.group1()[1] * other.group1()[0])
                        + (self.group1()[0] * other.group1()[1])
                        - (self.group0()[3] * other.group2()[2])
                        - (self.group0()[1] * other.group2()[0])),
                    ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (swizzle!(other.group1(), 3, 3, 3, 2) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]]))
                + (swizzle!(self.group1(), 1, 2, 0, 1) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[1]]))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group0()[1]) * -1.0),
                    ((self.group1()[0] * other.group0()[2]) * -1.0),
                    ((self.group1()[1] * other.group0()[0]) * -1.0),
                    ((self.group1()[0] * other.group1()[0])
                        + (self.group0()[2] * other.group2()[2])
                        + (self.group0()[0] * other.group2()[0])
                        + (self.group0()[1] * other.group2()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       76      113        0
    //    simd4       28       28        0
    // Totals...
    // yes simd      104      141        0
    //  no simd      188      225        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                + (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group0()[1]) * -1.0),
                    ((self.group0()[0] * other.group0()[2]) * -1.0),
                    ((self.group0()[1] * other.group0()[0]) * -1.0),
                    ((self.group1()[2] * other.group0()[2])
                        + (self.group1()[1] * other.group0()[1])
                        + (self.group1()[0] * other.group0()[0])
                        + (self.group0()[0] * other.group1()[0])
                        + (self.group0()[1] * other.group1()[1])),
                ])),
            // e23, e31, e12, e45
            ((swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group1(), 2, 0, 1, 3))
                + Simd32x4::from([
                    (-(self.group1()[3] * other.group0()[0])
                        - (self.group1()[2] * other.group0()[1])
                        - (self.group0()[3] * other.group1()[0])
                        - (self.group0()[2] * other.group1()[1])
                        - (self.group0()[0] * other.group2()[3])),
                    (-(self.group1()[3] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[2])
                        - (self.group0()[3] * other.group1()[1])
                        - (self.group0()[0] * other.group1()[2])
                        - (self.group0()[1] * other.group2()[3])),
                    (-(self.group1()[3] * other.group0()[2])
                        - (self.group1()[1] * other.group0()[0])
                        - (self.group0()[3] * other.group1()[2])
                        - (self.group0()[2] * other.group2()[3])
                        - (self.group0()[1] * other.group1()[0])),
                    ((self.group1()[1] * other.group0()[1]) + (self.group1()[0] * other.group0()[0])),
                ])),
            // e15, e25, e35, e1234
            ((swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group1()[3] * other.group1()[0]) - (self.group1()[2] * other.group1()[1]) + (self.group1()[1] * other.group1()[2])
                        - (self.group1()[0] * other.group2()[3])
                        - (self.group1()[0] * other.group1()[3])
                        - (self.group0()[3] * other.group2()[0])
                        - (self.group0()[2] * other.group2()[1])),
                    (-(self.group1()[3] * other.group1()[1]) + (self.group1()[2] * other.group1()[0])
                        - (self.group1()[1] * other.group2()[3])
                        - (self.group1()[1] * other.group1()[3])
                        - (self.group1()[0] * other.group1()[2])
                        - (self.group0()[3] * other.group2()[1])
                        - (self.group0()[0] * other.group2()[2])),
                    (-(self.group1()[3] * other.group1()[2])
                        - (self.group1()[2] * other.group2()[3])
                        - (self.group1()[2] * other.group1()[3])
                        - (self.group1()[1] * other.group1()[0])
                        + (self.group1()[0] * other.group1()[1])
                        - (self.group0()[3] * other.group2()[2])
                        - (self.group0()[1] * other.group2()[0])),
                    ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (swizzle!(self.group1(), 2, 0, 1, 3) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]))
                + (swizzle!(other.group1(), 3, 3, 3, 2) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]]))
                + (swizzle!(self.group1(), 1, 2, 0, 1) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[1]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    ((self.group1()[0] * other.group1()[0])
                        + (self.group0()[2] * other.group2()[2])
                        + (self.group0()[0] * other.group2()[0])
                        + (self.group0()[1] * other.group2()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       67      101        0
    //    simd4       28       29        0
    // Totals...
    // yes simd       95      130        0
    //  no simd      179      217        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group0()[0]) + (self.group0()[2] * other.group0()[1])),
                    ((self.group0()[3] * other.group0()[1]) + (self.group0()[0] * other.group0()[2])),
                    ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group0()[0])),
                    (-(self.group1()[2] * other.group0()[2])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e415, e425, e435, e321
            ((swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[2]]))
                + (swizzle!(self.group1(), 2, 0, 1, 1) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[1]]))
                - (swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group1(), 2, 0, 1, 3))
                + Simd32x4::from([
                    (-(self.group1()[1] * other.group0()[2]) + (self.group0()[3] * other.group1()[0]) + (self.group0()[2] * other.group1()[1])),
                    (-(self.group1()[2] * other.group0()[0]) + (self.group0()[3] * other.group1()[1]) + (self.group0()[0] * other.group1()[2])),
                    (-(self.group1()[0] * other.group0()[1]) + (self.group0()[3] * other.group1()[2]) + (self.group0()[1] * other.group1()[0])),
                    (self.group1()[0] * other.group0()[0]),
                ])),
            // e235, e315, e125, e5
            (-(swizzle!(self.group1(), 1, 2, 2, 3) * swizzle!(other.group1(), 2, 0, 3, 3))
                - (swizzle!(self.group1(), 0, 1, 0, 2) * swizzle!(other.group1(), 3, 3, 1, 2))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group2()[2]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group1()[0])
                        + (self.group1()[2] * other.group1()[1])
                        + (self.group0()[3] * other.group2()[0])
                        + (self.group0()[2] * other.group2()[1])),
                    ((self.group1()[3] * other.group1()[1])
                        + (self.group1()[0] * other.group1()[2])
                        + (self.group0()[3] * other.group2()[1])
                        + (self.group0()[0] * other.group2()[2])),
                    ((self.group1()[3] * other.group1()[2])
                        + (self.group1()[1] * other.group1()[0])
                        + (self.group0()[3] * other.group2()[2])
                        + (self.group0()[1] * other.group2()[0])),
                    (-(self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(self.group0(), 0, 1, 2, 2) * Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group1()[3] * other.group0()[0]) - (self.group1()[2] * other.group0()[1]) + (self.group1()[1] * other.group0()[2])),
                    (-(self.group1()[3] * other.group0()[1]) + (self.group1()[2] * other.group0()[0]) - (self.group1()[0] * other.group0()[2])),
                    (-(self.group1()[3] * other.group0()[2]) - (self.group1()[1] * other.group0()[0]) + (self.group1()[0] * other.group0()[1])),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       55       85        0
    //    simd4       42       43        0
    // Totals...
    // yes simd       97      128        0
    //  no simd      223      257        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group0()[0]) + (self.group0()[2] * other.group0()[1])),
                    ((self.group0()[3] * other.group0()[1]) + (self.group0()[0] * other.group0()[2])),
                    ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group0()[0])),
                    (-(self.group1()[2] * other.group0()[2])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e415, e425, e435, e321
            ((swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[2]]))
                + (swizzle!(self.group1(), 2, 1, 2, 1) * Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group0()[1]]))
                - (swizzle!(self.group1(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]))
                + (swizzle!(self.group1(), 0, 0, 1, 0) * Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group0()[0]]))
                + (swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[2]]))
                - (swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group1(), 2, 0, 1, 3))
                + (swizzle!(self.group0(), 2, 0, 1, 0) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[0]]))
                + Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group3()[1])])),
            // e235, e315, e125, e5
            (-(Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                + (swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[2]]))
                - (Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group1()[2]]))
                + (swizzle!(self.group1(), 2, 2, 1, 1) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[0], other.group3()[1]]))
                + (swizzle!(self.group1(), 1, 0, 0, 0) * Simd32x4::from([other.group3()[2], other.group1()[2], other.group3()[1], other.group3()[0]]))
                - (Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group1()[1]]))
                - (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group1()[0]]))
                + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * swizzle!(other.group2(), 2, 0, 1, 2))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group2()[1]) + (self.group0()[0] * other.group3()[3])),
                    ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group3()[3])),
                    ((self.group0()[2] * other.group3()[3]) + (self.group0()[1] * other.group2()[0])),
                    (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[2]]))
                - (swizzle!(self.group0(), 2, 0, 2, 0) * Simd32x4::from([other.group3()[1], other.group3()[2], other.group1()[3], other.group0()[0]]))
                - (swizzle!(self.group0(), 0, 1, 1, 1) * Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[0], other.group0()[1]]))
                + (swizzle!(self.group0(), 1, 2, 0, 3) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[3]]))
                + Simd32x4::from([
                    (-(self.group1()[3] * other.group0()[0]) - (self.group1()[2] * other.group0()[1]) + (self.group1()[1] * other.group0()[2])
                        - (self.group1()[0] * other.group2()[3])),
                    (-(self.group1()[3] * other.group0()[1]) + (self.group1()[2] * other.group0()[0])
                        - (self.group1()[1] * other.group2()[3])
                        - (self.group1()[0] * other.group0()[2])),
                    (-(self.group1()[3] * other.group0()[2]) - (self.group1()[2] * other.group2()[3]) - (self.group1()[1] * other.group0()[0])
                        + (self.group1()[0] * other.group0()[1])),
                    0.0,
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       41       74        0
    //    simd4       19       19        0
    // Totals...
    // yes simd       60       93        0
    //  no simd      117      150        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[1] * -1.0)]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[1] * other.group0()[1] * -1.0),
                (self.group0()[2] * other.group0()[1] * -1.0),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[0]) - (self.group1()[0] * other.group0()[1])),
                (-(self.group0()[1] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                (-(self.group0()[2] * other.group0()[0]) - (self.group1()[2] * other.group0()[1])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[3] * other.group0()[0]) - (self.group1()[3] * other.group0()[1]))]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       39       69        0
    //    simd4       22       23        0
    // Totals...
    // yes simd       61       92        0
    //  no simd      127      161        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[3] * -1.0)]),
            // e235, e315, e125, e5
            (-(self.group1() * Simd32x4::from(other.group0()[3])) - (swizzle!(self.group0(), 1, 2, 0, 2) * swizzle!(other.group0(), 2, 0, 1, 2))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group0()[0]) + (self.group0()[2] * other.group0()[1])),
                    ((self.group0()[3] * other.group0()[1]) + (self.group0()[0] * other.group0()[2])),
                    ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group0()[0])),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       51       77        0
    //    simd4       26       27        0
    // Totals...
    // yes simd       77      104        0
    //  no simd      155      185        0
    fn sandwich(self, other: Flector) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[3] * other.group0()[3])
                    + (self.group0()[2] * other.group1()[2])
                    + (self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])),
            ]),
            // e235, e315, e125, e5
            (-(Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                + (swizzle!(self.group1(), 1, 2, 0, 2) * swizzle!(other.group1(), 2, 0, 1, 2))
                - (swizzle!(other.group0(), 3, 3, 3, 2) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[2]]))
                + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (swizzle!(other.group1(), 3, 3, 3, 1) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]))
                - (swizzle!(self.group0(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))
                + Simd32x4::from([
                    (-(self.group1()[2] * other.group1()[1]) + (self.group0()[2] * other.group0()[1])),
                    (-(self.group1()[0] * other.group1()[2]) + (self.group0()[0] * other.group0()[2])),
                    (-(self.group1()[1] * other.group1()[0]) + (self.group0()[1] * other.group0()[0])),
                    ((self.group1()[0] * other.group1()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[3] * other.group1()[0]) - (self.group0()[2] * other.group1()[1]) - (self.group0()[0] * other.group0()[3])
                    + (self.group0()[1] * other.group1()[2])),
                (-(self.group0()[3] * other.group1()[1]) + (self.group0()[2] * other.group1()[0])
                    - (self.group0()[0] * other.group1()[2])
                    - (self.group0()[1] * other.group0()[3])),
                (-(self.group0()[3] * other.group1()[2]) - (self.group0()[2] * other.group0()[3]) + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       65       94        0
    //    simd4       19       19        0
    // Totals...
    // yes simd       84      113        0
    //  no simd      141      170        0
    fn sandwich(self, other: Line) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group0()[3] * other.group0()[0]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[3] * other.group0()[1]) - (self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[3] * other.group0()[2]) + (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group1()[3] * other.group0()[0]) - (self.group1()[2] * other.group0()[1]) + (self.group1()[1] * other.group0()[2])
                    - (self.group0()[3] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])),
                (-(self.group1()[3] * other.group0()[1]) + (self.group1()[2] * other.group0()[0])
                    - (self.group1()[0] * other.group0()[2])
                    - (self.group0()[3] * other.group1()[1])
                    - (self.group0()[0] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[0])),
                (-(self.group1()[3] * other.group0()[2]) - (self.group1()[1] * other.group0()[0]) + (self.group1()[0] * other.group0()[1])
                    - (self.group0()[3] * other.group1()[2])
                    + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((self.group1()[2] * other.group0()[2])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[0] * other.group0()[0])
                    + (self.group0()[2] * other.group1()[2])
                    + (self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       77      106        0
    //    simd4       19       19        0
    // Totals...
    // yes simd       96      125        0
    //  no simd      153      182        0
    fn sandwich(self, other: Motor) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[3] * other.group0()[3])
                    + (self.group0()[2] * other.group0()[2])
                    + (self.group0()[0] * other.group0()[0])
                    + (self.group0()[1] * other.group0()[1])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group0()[3] * other.group0()[0]) - (self.group0()[2] * other.group0()[1]) - (self.group0()[0] * other.group0()[3])
                    + (self.group0()[1] * other.group0()[2])),
                (-(self.group0()[3] * other.group0()[1]) + (self.group0()[2] * other.group0()[0])
                    - (self.group0()[0] * other.group0()[2])
                    - (self.group0()[1] * other.group0()[3])),
                (-(self.group0()[3] * other.group0()[2]) - (self.group0()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1])
                    - (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group1()[3] * other.group0()[0]) - (self.group1()[2] * other.group0()[1]) + (self.group1()[1] * other.group0()[2])
                    - (self.group1()[0] * other.group0()[3])
                    - (self.group0()[3] * other.group1()[0])
                    - (self.group0()[2] * other.group1()[1])
                    - (self.group0()[0] * other.group1()[3])
                    + (self.group0()[1] * other.group1()[2])),
                (-(self.group1()[3] * other.group0()[1]) + (self.group1()[2] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[3])
                    - (self.group1()[0] * other.group0()[2])
                    - (self.group0()[3] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[0])
                    - (self.group0()[0] * other.group1()[2])
                    - (self.group0()[1] * other.group1()[3])),
                (-(self.group1()[3] * other.group0()[2]) - (self.group1()[2] * other.group0()[3]) - (self.group1()[1] * other.group0()[0])
                    + (self.group1()[0] * other.group0()[1])
                    - (self.group0()[3] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[3])
                    + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group1()[3] * other.group0()[3])
                    + (self.group1()[2] * other.group0()[2])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[0] * other.group0()[0])
                    - (self.group0()[3] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[2])
                    + (self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for Motor {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      124      175        0
    //    simd3       42       46        0
    //    simd4       51       52        0
    // Totals...
    // yes simd      217      273        0
    //  no simd      454      521        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group1()[3] * other.group1()[3])
                    + (self.group1()[2] * other.group6()[2])
                    + (self.group1()[1] * other.group6()[1])
                    + (self.group1()[0] * other.group6()[0])
                    - (self.group0()[3] * other.group0()[1])
                    + (self.group0()[2] * other.group5()[2])
                    + (self.group0()[0] * other.group5()[0])
                    + (self.group0()[1] * other.group5()[1])),
                ((self.group1()[3] * other[e35]) - (self.group1()[2] * other.group4()[2]) - (self.group1()[1] * other.group4()[1]) - (self.group1()[0] * other.group4()[0])
                    + (self.group0()[3] * other.group0()[0])
                    - (self.group0()[2] * other.group10()[0])
                    - (self.group0()[0] * other.group10()[2])
                    - (self.group0()[1] * other.group10()[1])),
            ]),
            // e1, e2, e3, e4
            (-(swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group8()[0], other.group8()[1], other.group8()[2], other.group4()[2]]))
                - (swizzle!(self.group0(), 2, 0, 2, 0) * Simd32x4::from([other.group8()[1], other.group8()[2], other.group3()[3], other.group4()[0]]))
                - (swizzle!(self.group0(), 0, 1, 1, 1) * Simd32x4::from([other.group3()[3], other.group3()[3], other.group8()[0], other.group4()[1]]))
                + (swizzle!(self.group0(), 1, 2, 0, 3) * Simd32x4::from([other.group8()[2], other.group8()[0], other.group8()[1], other[e35]]))
                + Simd32x4::from([
                    (-(self.group1()[3] * other.group4()[0]) - (self.group1()[2] * other.group4()[1]) + (self.group1()[1] * other.group4()[2]) - (self.group1()[0] * other[e35])),
                    (-(self.group1()[3] * other.group4()[1]) + (self.group1()[2] * other.group4()[0]) - (self.group1()[1] * other[e35]) - (self.group1()[0] * other.group4()[2])),
                    (-(self.group1()[3] * other.group4()[2]) - (self.group1()[2] * other[e35]) - (self.group1()[1] * other.group4()[0]) + (self.group1()[0] * other.group4()[1])),
                    0.0,
                ])),
            // e5
            (-(self.group1()[3] * other.group3()[3]) + (self.group1()[3] * other.group0()[0]) - (self.group1()[2] * other.group10()[0]) + (self.group1()[2] * other.group8()[2])
                - (self.group1()[1] * other.group10()[1])
                + (self.group1()[1] * other.group8()[1])
                - (self.group1()[0] * other.group10()[2])
                + (self.group1()[0] * other.group8()[0])
                + (self.group0()[3] * other.group8()[3])
                - (self.group0()[2] * other.group3()[2])
                - (self.group0()[0] * other.group3()[0])
                - (self.group0()[1] * other.group3()[1])),
            // e15, e25, e35, e45
            (-(Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group1()[3]]))
                - (swizzle!(other.group1(), 0, 1, 2, 2) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[2]]))
                - (swizzle!(other.group1(), 1, 2, 0, 0) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]))
                + (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group6()[2]]))
                + (swizzle!(self.group1(), 1, 2, 0, 1) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group6()[1]]))
                - (swizzle!(self.group0(), 3, 3, 3, 1) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group1()[1]]))
                + (swizzle!(self.group0(), 1, 2, 0, 3) * Simd32x4::from([other.group7()[2], other.group7()[0], other.group7()[1], other.group5()[3]]))
                + Simd32x4::from([
                    (-(self.group1()[2] * other.group5()[1])
                        - (self.group1()[0] * other.group5()[3])
                        - (self.group1()[0] * other.group0()[1])
                        - (self.group0()[2] * other.group7()[1])
                        - (self.group0()[0] * other[e1])),
                    (-(self.group1()[1] * other.group5()[3])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group5()[2])
                        - (self.group0()[0] * other.group7()[2])
                        - (self.group0()[1] * other[e1])),
                    (-(self.group1()[2] * other.group5()[3])
                        - (self.group1()[2] * other.group0()[1])
                        - (self.group1()[1] * other.group5()[0])
                        - (self.group0()[2] * other[e1])
                        - (self.group0()[1] * other.group7()[0])),
                    (self.group1()[0] * other.group6()[0]),
                ])),
            // e41, e42, e43
            (-(Simd32x3::from(self.group0()[3]) * other.group6())
                - (swizzle!(other.group6(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (swizzle!(other.group6(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))),
            // e415, e425, e435, e321
            ((swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], other.group4()[2]]))
                + (swizzle!(self.group1(), 2, 1, 2, 1) * Simd32x4::from([other.group4()[1], other[e35], other[e35], other.group4()[1]]))
                - (swizzle!(self.group1(), 1, 2, 0, 3) * Simd32x4::from([other.group4()[2], other.group4()[0], other.group4()[1], other[e35]]))
                + (swizzle!(self.group1(), 0, 0, 1, 0) * Simd32x4::from([other[e35], other.group4()[2], other.group4()[0], other.group4()[0]]))
                + (swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group10()[2], other.group10()[1], other.group10()[0], other.group8()[2]]))
                + (swizzle!(self.group0(), 2, 0, 2, 0) * Simd32x4::from([other.group10()[1], other.group10()[0], other.group0()[0], other.group8()[0]]))
                + (swizzle!(self.group0(), 0, 1, 1, 1) * Simd32x4::from([other.group0()[0], other.group0()[0], other.group10()[2], other.group8()[1]]))
                - (swizzle!(self.group0(), 1, 2, 0, 3) * Simd32x4::from([other.group10()[0], other.group10()[2], other.group10()[1], other.group3()[3]]))),
            // e423, e431, e412
            ((Simd32x3::from(self.group0()[3]) * other.group4())
                + (swizzle!(other.group4(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))
                + (Simd32x3::from(other[e35]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (swizzle!(other.group4(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))),
            // e235, e315, e125
            ((Simd32x3::from(self.group1()[3]) * swizzle!(other.group10(), 2, 1, 0))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group8()[0], other.group8()[1], other.group8()[2]]))
                + (Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group10()[1], other.group8()[0], other.group0()[0]]))
                - (Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group8()[1], other.group10()[2], other.group3()[3]]))
                - (Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group10()[0], other.group3()[3], other.group8()[0]]))
                + (Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group8()[2], other.group0()[0], other.group10()[2]]))
                - (Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group3()[3], other.group8()[2], other.group10()[1]]))
                + (Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group0()[0], other.group10()[0], other.group8()[1]]))
                + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from(other.group8()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + Simd32x3::from([
                    ((self.group0()[2] * other.group3()[1]) - (self.group0()[1] * other.group3()[2])),
                    (-(self.group0()[2] * other.group3()[0]) + (self.group0()[0] * other.group3()[2])),
                    (-(self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group3()[0])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group6()[0], other.group6()[1], other.group6()[2], other.group5()[3]]))
                - (swizzle!(self.group1(), 2, 1, 2, 3) * Simd32x4::from([other.group6()[1], other.group1()[3], other.group1()[3], other.group0()[1]]))
                + (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group5()[2]]))
                + (swizzle!(other.group1(), 0, 1, 2, 2) * Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group1()[2]]))
                + (swizzle!(self.group0(), 2, 0, 2, 2) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group5()[3], other.group7()[2]]))
                + (swizzle!(self.group0(), 0, 1, 1, 0) * Simd32x4::from([other.group5()[3], other.group5()[3], other.group1()[0], other.group7()[0]]))
                - (swizzle!(self.group0(), 1, 2, 0, 3) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other[e1]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group1()[3]) * -1.0),
                    ((self.group1()[0] * other.group6()[2]) * -1.0),
                    ((self.group1()[1] * other.group6()[0]) * -1.0),
                    ((self.group1()[1] * other.group5()[1])
                        + (self.group1()[1] * other.group1()[1])
                        + (self.group1()[0] * other.group5()[0])
                        + (self.group1()[0] * other.group1()[0])
                        + (self.group0()[1] * other.group7()[1])),
                ])),
            // e1234
            (-(self.group0()[3] * other.group1()[3]) + (self.group0()[2] * other.group6()[2]) + (self.group0()[0] * other.group6()[0]) + (self.group0()[1] * other.group6()[1])),
            // e12, e31, e23
            (-(Simd32x3::from(self.group1()[3]) * swizzle!(other.group6(), 2, 1, 0))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[2], self.group1()[1], self.group1()[0]]))
                - (swizzle!(other.group6(), 0, 2, 1) * Simd32x3::from([self.group1()[1], self.group1()[0], self.group1()[2]]))
                + (swizzle!(other.group6(), 1, 0, 2) * Simd32x3::from([self.group1()[0], self.group1()[2], self.group1()[1]]))
                - (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group5()[2], other.group5()[1], other.group5()[0]]))
                - (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group0()[2], self.group0()[1], self.group0()[0]]))
                + Simd32x3::from([
                    ((self.group0()[0] * other.group5()[1]) - (self.group0()[1] * other.group5()[0])),
                    ((self.group0()[2] * other.group5()[0]) - (self.group0()[0] * other.group5()[2])),
                    (-(self.group0()[2] * other.group5()[1]) + (self.group0()[1] * other.group5()[2])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       47       73        0
    //    simd4       22       23        0
    // Totals...
    // yes simd       69       96        0
    //  no simd      135      165        0
    fn sandwich(self, other: Plane) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            ((swizzle!(other.group0(), 3, 0, 3, 2) * Simd32x4::from([self.group0()[0], self.group1()[2], self.group0()[2], self.group1()[2]]))
                + (swizzle!(other.group0(), 2, 3, 1, 1) * Simd32x4::from([self.group1()[1], self.group0()[1], self.group1()[0], self.group1()[1]]))
                + Simd32x4::from([
                    (-(self.group1()[3] * other.group0()[0]) - (self.group1()[2] * other.group0()[1])),
                    (-(self.group1()[3] * other.group0()[1]) - (self.group1()[0] * other.group0()[2])),
                    (-(self.group1()[3] * other.group0()[2]) - (self.group1()[1] * other.group0()[0])),
                    ((self.group0()[3] * other.group0()[3]) + (self.group1()[0] * other.group0()[0])),
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[3] * other.group0()[0]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[3] * other.group0()[1]) - (self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[3] * other.group0()[2]) + (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       49       82        0
    //    simd4       22       26        0
    // Totals...
    // yes simd       71      108        0
    //  no simd      137      186        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]) * Simd32x4::from(-1.0)),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3] * -1.0),
                (self.group1()[1] * other.group0()[3] * -1.0),
                (self.group1()[2] * other.group0()[3] * -1.0),
                (-(self.group1()[3] * other.group0()[3])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group1()[3] * other.group0()[0]) - (self.group1()[2] * other.group0()[1]) - (self.group0()[0] * other[e2]) + (self.group1()[1] * other.group0()[2])),
                (-(self.group1()[3] * other.group0()[1]) + (self.group1()[2] * other.group0()[0]) - (self.group0()[1] * other[e2]) - (self.group1()[0] * other.group0()[2])),
                (-(self.group1()[3] * other.group0()[2]) - (self.group1()[1] * other.group0()[0]) - (self.group0()[2] * other[e2]) + (self.group1()[0] * other.group0()[1])),
                (self.group0()[3] * other.group0()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group1()[2]]))
                - (swizzle!(self.group0(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other[e2]]))
                + (swizzle!(other.group0(), 1, 2, 0, 1) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[1]]))
                + (Simd32x4::from([-1.0, -1.0, -1.0, 1.0]) * swizzle!(self.group1(), 0, 1, 2, 0) * swizzle!(other.group0(), 3, 3, 3, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       54        0
    //    simd4        0        2        0
    // Totals...
    // yes simd       40       56        0
    //  no simd       40       62        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (self.group0() * Simd32x4::from(other[scalar])),
            // e235, e315, e125, e5
            (self.group1() * Simd32x4::from(other[scalar])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       51       81        0
    //    simd4       22       24        0
    // Totals...
    // yes simd       73      105        0
    //  no simd      139      177        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(other[e4315]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[0] * other[e4315]),
                (self.group1()[1] * other[e4315]),
                (self.group1()[2] * other[e4315]),
                (-(self.group1()[3] * other[e4315]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            ((swizzle!(other.group0(), 3, 0, 3, 2) * Simd32x4::from([self.group0()[0], self.group1()[2], self.group0()[2], self.group1()[2]]))
                + (swizzle!(other.group0(), 2, 3, 1, 1) * Simd32x4::from([self.group1()[1], self.group0()[1], self.group1()[0], self.group1()[1]]))
                + Simd32x4::from([
                    (-(self.group1()[3] * other.group0()[0]) - (self.group1()[2] * other.group0()[1])),
                    (-(self.group1()[3] * other.group0()[1]) - (self.group1()[0] * other.group0()[2])),
                    (-(self.group1()[3] * other.group0()[2]) - (self.group1()[1] * other.group0()[0])),
                    ((self.group0()[3] * other.group0()[3]) + (self.group1()[0] * other.group0()[0])),
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group1()[0] * other[e4315]) - (self.group0()[3] * other.group0()[0]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group1()[1] * other[e4315]) - (self.group0()[3] * other.group0()[1]) - (self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                (-(self.group1()[2] * other[e4315]) - (self.group0()[3] * other.group0()[2]) + (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other[e4315]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       77      120        0
    //    simd4       37       37        0
    // Totals...
    // yes simd      114      157        0
    //  no simd      225      268        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(Simd32x4::from(self.group0()[3]) * other.group0())
                - (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group0()[1]) * -1.0),
                    ((self.group0()[0] * other.group0()[2]) * -1.0),
                    ((self.group0()[1] * other.group0()[0]) * -1.0),
                    ((self.group1()[1] * other.group0()[1])
                        + (self.group1()[0] * other.group0()[0])
                        + (self.group0()[2] * other.group1()[2])
                        + (self.group0()[0] * other.group1()[0])
                        + (self.group0()[1] * other.group1()[1])),
                ])),
            // e23, e31, e12, e45
            (-(Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group3()[3]]))
                + (swizzle!(self.group1(), 1, 2, 0, 2) * swizzle!(other.group0(), 2, 0, 1, 2))
                - (swizzle!(other.group3(), 3, 3, 3, 2) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[2]]))
                - (swizzle!(self.group0(), 3, 3, 3, 0) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[0]]))
                - (swizzle!(self.group0(), 2, 0, 2, 1) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group0()[3], other.group3()[1]]))
                + (swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group1(), 2, 0, 1, 3))
                + Simd32x4::from([
                    (-(self.group1()[2] * other.group0()[1]) - (self.group0()[0] * other.group0()[3])),
                    (-(self.group1()[0] * other.group0()[2]) - (self.group0()[1] * other.group0()[3])),
                    (-(self.group1()[1] * other.group0()[0]) - (self.group0()[1] * other.group1()[0])),
                    ((self.group1()[1] * other.group0()[1]) + (self.group1()[0] * other.group0()[0])),
                ])),
            // e15, e25, e35, e1234
            (-(other.group3() * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[3]]))
                + (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group1()[3] * other.group1()[0]) - (self.group1()[2] * other.group3()[1]) - (self.group1()[2] * other.group1()[1])
                        + (self.group1()[1] * other.group3()[2])
                        + (self.group1()[1] * other.group1()[2])
                        - (self.group1()[0] * other.group1()[3])
                        - (self.group1()[0] * other.group0()[3])
                        - (self.group0()[3] * other.group2()[0])
                        - (self.group0()[2] * other.group2()[1])
                        - (self.group0()[0] * other.group2()[3])),
                    (-(self.group1()[3] * other.group1()[1]) + (self.group1()[2] * other.group3()[0]) + (self.group1()[2] * other.group1()[0])
                        - (self.group1()[1] * other.group1()[3])
                        - (self.group1()[1] * other.group0()[3])
                        - (self.group1()[0] * other.group3()[2])
                        - (self.group1()[0] * other.group1()[2])
                        - (self.group0()[3] * other.group2()[1])
                        - (self.group0()[0] * other.group2()[2])
                        - (self.group0()[1] * other.group2()[3])),
                    (-(self.group1()[3] * other.group1()[2])
                        - (self.group1()[2] * other.group1()[3])
                        - (self.group1()[2] * other.group0()[3])
                        - (self.group1()[1] * other.group3()[0])
                        - (self.group1()[1] * other.group1()[0])
                        + (self.group1()[0] * other.group3()[1])
                        + (self.group1()[0] * other.group1()[1])
                        - (self.group0()[3] * other.group2()[2])
                        - (self.group0()[2] * other.group2()[3])
                        - (self.group0()[1] * other.group2()[0])),
                    ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (swizzle!(self.group1(), 2, 1, 2, 3) * Simd32x4::from([other.group0()[1], other.group3()[3], other.group3()[3], other.group0()[3]]))
                + (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group3()[2]]))
                + (swizzle!(other.group3(), 0, 1, 2, 1) * Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group1()[1]]))
                + (swizzle!(self.group0(), 2, 0, 2, 2) * Simd32x4::from([other.group3()[1], other.group3()[2], other.group1()[3], other.group2()[2]]))
                + (swizzle!(self.group0(), 0, 1, 1, 0) * Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[0], other.group2()[0]]))
                - (swizzle!(self.group0(), 1, 2, 0, 3) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[3]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group3()[3]) * -1.0),
                    ((self.group1()[0] * other.group0()[2]) * -1.0),
                    ((self.group1()[1] * other.group0()[0]) * -1.0),
                    ((self.group1()[2] * other.group1()[2])
                        + (self.group1()[1] * other.group1()[1])
                        + (self.group1()[0] * other.group3()[0])
                        + (self.group1()[0] * other.group1()[0])
                        + (self.group0()[1] * other.group2()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       52       81        0
    //    simd4       44       46        0
    // Totals...
    // yes simd       96      127        0
    //  no simd      228      265        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(self.group0()[3]) * other.group0())
                + (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[2]]))
                + Simd32x4::from([
                    (self.group0()[2] * other.group0()[1]),
                    (self.group0()[0] * other.group0()[2]),
                    (self.group0()[1] * other.group0()[0]),
                    (-(self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e415, e425, e435, e321
            ((swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group0(), 0, 1, 2, 2))
                + (swizzle!(self.group1(), 2, 1, 2, 1) * Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group0()[1]]))
                - (swizzle!(self.group1(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]))
                + (swizzle!(self.group1(), 0, 0, 1, 0) * Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group0()[0]]))
                + (swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[2]]))
                + (swizzle!(self.group0(), 2, 0, 2, 0) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group0()[3], other.group3()[0]]))
                + (swizzle!(self.group0(), 0, 1, 1, 1) * Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[0], other.group3()[1]]))
                - (swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group1(), 2, 0, 1, 3))),
            // e235, e315, e125, e5
            (-(Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                - (Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group1()[2]]))
                + (Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group0()[3], other.group3()[2]]))
                + (Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group3()[2], other.group0()[3], other.group1()[0], other.group3()[1]]))
                - (Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group1()[1]]))
                - (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group1()[0]]))
                + (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[3], other.group1()[2], other.group3()[1], other.group3()[0]]))
                + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * swizzle!(other.group2(), 2, 0, 1, 2))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group2()[1]) + (self.group0()[0] * other.group3()[3])),
                    ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group3()[3])),
                    ((self.group0()[2] * other.group3()[3]) + (self.group0()[1] * other.group2()[0])),
                    (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[2]]))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]))
                - (swizzle!(self.group0(), 3, 3, 3, 1) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[1]]))
                + (swizzle!(self.group0(), 1, 2, 0, 3) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[3]]))
                + Simd32x4::from([
                    ((self.group1()[1] * other.group0()[2])
                        - (self.group1()[0] * other.group2()[3])
                        - (self.group0()[2] * other.group3()[1])
                        - (self.group0()[0] * other.group1()[3])),
                    ((self.group1()[2] * other.group0()[0])
                        - (self.group1()[1] * other.group2()[3])
                        - (self.group0()[0] * other.group3()[2])
                        - (self.group0()[1] * other.group1()[3])),
                    (-(self.group1()[2] * other.group2()[3]) + (self.group1()[0] * other.group0()[1])
                        - (self.group0()[2] * other.group1()[3])
                        - (self.group0()[1] * other.group3()[0])),
                    0.0,
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl InfixSandwich for MultiVector {}
impl Sandwich<AntiScalar> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      334      363        0
    //    simd2       16       18        0
    //    simd3      114      126        0
    //    simd4       71       81        0
    // Totals...
    // yes simd      535      588        0
    //  no simd      992     1101        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (swizzle!(self.group0(), 1, 0) * Simd32x2::from(other[e12345]) * Simd32x2::from([-1.0, 1.0])),
            // e1, e2, e3, e4
            (Simd32x4::from(other[e12345]) * Simd32x4::from([self.group8()[0], self.group8()[1], self.group8()[2], self[e35]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e5
            (self.group8()[3] * other[e12345]),
            // e15, e25, e35, e45
            (Simd32x4::from(other[e12345]) * Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group5()[3]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e41, e42, e43
            (self.group6() * Simd32x3::from(other[e12345]) * Simd32x3::from(-1.0)),
            // e415, e425, e435, e321
            (Simd32x4::from(other[e12345]) * Simd32x4::from([self.group10()[2], self.group10()[1], self.group10()[0], self.group3()[3]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e423, e431, e412
            (self.group4() * Simd32x3::from(other[e12345])),
            // e235, e315, e125
            (Simd32x3::from(other[e12345]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]])),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other[e12345]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self[e1]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e1234
            (self.group1()[3] * other[e12345] * -1.0),
            // e12, e31, e23
            (Simd32x3::from(other[e12345]) * Simd32x3::from([self.group5()[2], self.group5()[1], self.group5()[0]]) * Simd32x3::from(-1.0)),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      442      494        0
    //    simd2       17       17        0
    //    simd3      148      156        0
    //    simd4       90       92        0
    // Totals...
    // yes simd      697      759        0
    //  no simd     1280     1364        0
    fn sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (-(Simd32x2::from(other.group1()[3]) * Simd32x2::from([self.group5()[3], self.group3()[3]]))
                + Simd32x2::from([
                    ((self.group7()[2] * other.group0()[2])
                        + (self.group7()[1] * other.group0()[1])
                        + (self.group7()[0] * other.group0()[0])
                        + (self.group6()[2] * other.group2()[2])
                        + (self.group6()[1] * other.group2()[1])
                        + (self.group6()[0] * other.group2()[0])
                        + (self.group5()[2] * other.group1()[2])
                        + (self.group5()[0] * other.group1()[0])
                        + (self.group5()[1] * other.group1()[1])),
                    (-(self.group10()[2] * other.group1()[0])
                        - (self.group10()[1] * other.group1()[1])
                        - (self.group10()[0] * other.group1()[2])
                        - (self.group4()[2] * other.group2()[2])
                        - (self.group4()[1] * other.group2()[1])
                        - (self.group4()[0] * other.group2()[0])
                        - (self.group3()[2] * other.group0()[2])
                        - (self.group3()[0] * other.group0()[0])
                        - (self.group3()[1] * other.group0()[1])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group1(), 1, 2, 0, 3) * Simd32x4::from([self.group8()[2], self.group8()[0], self.group8()[1], self[e35]]))
                + (swizzle!(self.group8(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                - (swizzle!(other.group1(), 0, 1, 2, 2) * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group4()[2]]))
                + Simd32x4::from([
                    ((self.group10()[2] * other.group1()[3]) + (self[e35] * other.group2()[0]) - (self.group8()[3] * other.group0()[0]) + (self.group4()[2] * other.group2()[1])
                        - (self.group4()[1] * other.group2()[2])
                        + (self.group3()[1] * other.group0()[2])
                        - (self.group3()[2] * other.group0()[1])),
                    ((self.group10()[1] * other.group1()[3]) + (self[e35] * other.group2()[1]) - (self.group8()[3] * other.group0()[1]) - (self.group4()[2] * other.group2()[0])
                        + (self.group4()[0] * other.group2()[2])
                        - (self.group3()[0] * other.group0()[2])
                        + (self.group3()[2] * other.group0()[0])),
                    ((self.group10()[0] * other.group1()[3]) + (self[e35] * other.group2()[2]) - (self.group8()[3] * other.group0()[2]) + (self.group4()[1] * other.group2()[0])
                        - (self.group4()[0] * other.group2()[1])
                        + (self.group3()[0] * other.group0()[1])
                        - (self.group3()[1] * other.group0()[0])),
                    (-(self.group10()[2] * other.group0()[0]) - (self.group10()[1] * other.group0()[1]) - (self.group10()[0] * other.group0()[2])
                        + (self.group8()[1] * other.group0()[1])
                        + (self.group8()[0] * other.group0()[0])
                        - (self.group4()[0] * other.group1()[0])
                        - (self.group4()[1] * other.group1()[1])),
                ])),
            // e5
            (-(self.group10()[2] * other.group2()[0]) - (self.group10()[1] * other.group2()[1]) - (self.group10()[0] * other.group2()[2]) + (self.group8()[3] * other.group1()[3])
                - (self.group8()[2] * other.group2()[2])
                - (self.group8()[1] * other.group2()[1])
                - (self.group8()[0] * other.group2()[0])
                - (self.group3()[2] * other.group1()[2])
                - (self.group3()[0] * other.group1()[0])
                - (self.group3()[1] * other.group1()[1])),
            // e15, e25, e35, e45
            (-(swizzle!(other.group1(), 1, 3, 3, 2) * Simd32x4::from([self.group7()[2], self.group7()[1], self.group7()[2], self.group1()[2]]))
                + (swizzle!(other.group1(), 2, 0, 1, 3) * Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[0], self.group0()[1]]))
                - (swizzle!(other.group1(), 3, 2, 0, 1) * Simd32x4::from([self.group7()[0], self.group7()[0], self.group7()[1], self.group1()[1]]))
                - (Simd32x4::from(other.group2()[1]) * Simd32x4::from([self.group5()[2], self.group0()[1], self.group1()[0], self.group6()[1]]))
                - (swizzle!(other.group1(), 0, 1, 2, 0) * Simd32x4::from([self[e1], self[e1], self[e1], self.group1()[0]]))
                - (Simd32x4::from(other.group2()[0]) * Simd32x4::from([self.group0()[1], self.group1()[2], self.group5()[1], self.group6()[0]]))
                - (Simd32x4::from(other.group2()[2]) * Simd32x4::from([self.group1()[1], self.group5()[0], self.group0()[1], self.group6()[2]]))
                + Simd32x4::from([
                    ((self.group5()[3] * other.group2()[0]) + (self.group5()[1] * other.group2()[2]) + (self.group1()[2] * other.group2()[1])),
                    ((self.group5()[3] * other.group2()[1]) + (self.group5()[2] * other.group2()[0]) + (self.group1()[0] * other.group2()[2])),
                    ((self.group5()[3] * other.group2()[2]) + (self.group5()[0] * other.group2()[1]) + (self.group1()[1] * other.group2()[0])),
                    ((self.group7()[2] * other.group0()[2]) + (self.group7()[1] * other.group0()[1]) + (self.group7()[0] * other.group0()[0])),
                ])),
            // e41, e42, e43
            (-(swizzle!(self.group6(), 2, 0, 1) * Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]))
                + (swizzle!(self.group6(), 1, 2, 2) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[3]]))
                + (swizzle!(self.group6(), 0, 1, 0) * Simd32x3::from([other.group1()[3], other.group1()[3], other.group1()[1]]))
                - (Simd32x3::from(self.group5()[3]) * other.group0())
                - (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group5()[2], self.group5()[0], self.group5()[1]]))
                + (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group5()[1], self.group5()[2], self.group5()[0]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (swizzle!(other.group0(), 1, 1, 0) * Simd32x3::from([self.group1()[2], self.group0()[1], self.group1()[1]]))
                - (swizzle!(other.group0(), 0, 2, 2) * Simd32x3::from([self.group0()[1], self.group1()[0], self.group0()[1]]))
                + (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))),
            // e415, e425, e435, e321
            ((swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group10()[0], self.group10()[2], self.group10()[1], self.group8()[2]]))
                + (swizzle!(self.group8(), 3, 3, 3, 1) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]]))
                + (swizzle!(self.group3(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[2]]))
                + (swizzle!(other.group1(), 0, 1, 2, 0) * Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group8()[0]]))
                + Simd32x4::from([
                    (-(self.group10()[1] * other.group1()[2]) + (self[e35] * other.group2()[0]) - (self.group8()[0] * other.group1()[3]) + (self.group4()[2] * other.group2()[1])
                        - (self.group4()[1] * other.group2()[2])
                        - (self.group3()[1] * other.group0()[2])),
                    (-(self.group10()[0] * other.group1()[0]) + (self[e35] * other.group2()[1]) - (self.group8()[1] * other.group1()[3]) - (self.group4()[2] * other.group2()[0])
                        + (self.group4()[0] * other.group2()[2])
                        - (self.group3()[2] * other.group0()[0])),
                    (-(self.group10()[2] * other.group1()[1]) + (self[e35] * other.group2()[2]) - (self.group8()[2] * other.group1()[3]) + (self.group4()[1] * other.group2()[0])
                        - (self.group4()[0] * other.group2()[1])
                        - (self.group3()[0] * other.group0()[1])),
                    (-(self.group4()[2] * other.group2()[2]) - (self.group4()[1] * other.group2()[1]) - (self.group4()[0] * other.group2()[0])
                        + (self.group3()[1] * other.group0()[1])
                        + (self.group0()[0] * other.group1()[3])
                        + (self.group3()[0] * other.group0()[0])),
                ])),
            // e423, e431, e412
            (-(swizzle!(self.group10(), 1, 0, 2) * swizzle!(other.group0(), 2, 0, 1))
                + (swizzle!(self.group10(), 0, 2, 1) * swizzle!(other.group0(), 1, 2, 0))
                + (Simd32x3::from(self[e35]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group8()[2], self.group8()[0], self.group8()[1]]))
                + (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group8()[1], self.group8()[2], self.group8()[0]]))
                + (swizzle!(self.group4(), 2, 0, 1) * Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]))
                - (swizzle!(self.group4(), 1, 2, 2) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[3]]))
                - (swizzle!(self.group4(), 0, 1, 0) * Simd32x3::from([other.group1()[3], other.group1()[3], other.group1()[1]]))
                + (Simd32x3::from(self.group0()[0]) * other.group0())
                - (Simd32x3::from(self.group3()[3]) * other.group0())),
            // e235, e315, e125
            (-(swizzle!(self.group10(), 1, 0, 2) * swizzle!(other.group2(), 2, 0, 1))
                + (swizzle!(self.group10(), 0, 2, 1) * swizzle!(other.group2(), 1, 2, 0))
                + (Simd32x3::from(self.group8()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (swizzle!(other.group2(), 1, 2, 0) * Simd32x3::from([self.group8()[2], self.group8()[0], self.group8()[1]]))
                - (swizzle!(other.group2(), 2, 0, 1) * Simd32x3::from([self.group8()[1], self.group8()[2], self.group8()[0]]))
                + (Simd32x3::from(self.group3()[3]) * other.group2())
                + (Simd32x3::from(self.group0()[0]) * other.group2())
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + Simd32x3::from([
                    ((self.group3()[2] * other.group1()[1]) - (self.group3()[1] * other.group1()[2])),
                    (-(self.group3()[2] * other.group1()[0]) + (self.group3()[0] * other.group1()[2])),
                    ((self.group3()[1] * other.group1()[0]) - (self.group3()[0] * other.group1()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group1(), 0, 1, 2, 2) * Simd32x4::from([self.group5()[3], self.group5()[3], self.group5()[3], self.group7()[2]]))
                + (swizzle!(other.group1(), 3, 3, 3, 1) * Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self.group7()[1]]))
                - (Simd32x4::from(self[e1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[2]]))
                + (swizzle!(other.group1(), 1, 2, 0, 0) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group7()[0]]))
                + Simd32x4::from([
                    (-(self.group7()[2] * other.group0()[1]) + (self.group7()[1] * other.group0()[2]) + (self.group6()[2] * other.group2()[1])
                        - (self.group6()[1] * other.group2()[2])
                        + (self.group1()[3] * other.group2()[0])),
                    ((self.group7()[2] * other.group0()[0]) - (self.group7()[0] * other.group0()[2]) - (self.group6()[2] * other.group2()[0])
                        + (self.group6()[0] * other.group2()[2])
                        + (self.group1()[3] * other.group2()[1])),
                    (-(self.group7()[1] * other.group0()[0]) + (self.group7()[0] * other.group0()[1]) + (self.group6()[1] * other.group2()[0])
                        - (self.group6()[0] * other.group2()[1])
                        + (self.group1()[3] * other.group2()[2])),
                    ((self.group5()[2] * other.group2()[2]) + (self.group5()[1] * other.group2()[1]) + (self.group5()[0] * other.group2()[0])
                        - (self.group1()[0] * other.group2()[0])
                        - (self.group1()[1] * other.group2()[1])),
                ])),
            // e1234
            ((self.group6()[2] * other.group1()[2])
                + (self.group6()[1] * other.group1()[1])
                + (self.group6()[0] * other.group1()[0])
                + (self.group5()[2] * other.group0()[2])
                + (self.group5()[1] * other.group0()[1])
                + (self.group5()[0] * other.group0()[0])
                + (self.group1()[3] * other.group1()[3])
                + (self.group1()[2] * other.group0()[2])
                + (self.group1()[0] * other.group0()[0])
                + (self.group1()[1] * other.group0()[1])),
            // e12, e31, e23
            (-(swizzle!(self.group7(), 1, 0, 2) * swizzle!(other.group0(), 0, 2, 1)) + (swizzle!(self.group7(), 0, 2, 1) * swizzle!(other.group0(), 1, 0, 2))
                - (swizzle!(self.group6(), 1, 0, 2) * swizzle!(other.group2(), 0, 2, 1))
                + (swizzle!(self.group6(), 0, 2, 1) * swizzle!(other.group2(), 1, 0, 2))
                - (Simd32x3::from(self[e1]) * swizzle!(other.group0(), 2, 1, 0))
                - (Simd32x3::from(self.group1()[3]) * swizzle!(other.group2(), 2, 1, 0))
                - (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], other.group1()[1], other.group1()[0]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[2], self.group1()[1], self.group1()[0]]))
                + Simd32x3::from([
                    (-(self.group5()[1] * other.group1()[0]) + (self.group5()[0] * other.group1()[1])),
                    ((self.group5()[2] * other.group1()[0]) - (self.group5()[0] * other.group1()[2])),
                    (-(self.group5()[2] * other.group1()[1]) + (self.group5()[1] * other.group1()[2])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      436      488        0
    //    simd2       17       17        0
    //    simd3      150      158        0
    //    simd4       98      100        0
    // Totals...
    // yes simd      701      763        0
    //  no simd     1312     1396        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (-(Simd32x2::from(other.group1()[3]) * Simd32x2::from([self.group5()[3], self.group3()[3]]))
                + Simd32x2::from([
                    ((self.group7()[2] * other.group0()[2])
                        + (self.group7()[1] * other.group0()[1])
                        + (self.group7()[0] * other.group0()[0])
                        + (self.group6()[2] * other.group2()[2])
                        + (self.group6()[1] * other.group2()[1])
                        + (self.group6()[0] * other.group2()[0])
                        + (self.group5()[2] * other.group1()[2])
                        + (self.group5()[1] * other.group1()[1])
                        - (self.group0()[1] * other.group2()[3])
                        + (self.group5()[0] * other.group1()[0])),
                    (-(self.group10()[2] * other.group1()[0])
                        - (self.group10()[1] * other.group1()[1])
                        - (self.group10()[0] * other.group1()[2])
                        - (self.group4()[2] * other.group2()[2])
                        - (self.group4()[1] * other.group2()[1])
                        - (self.group4()[0] * other.group2()[0])
                        - (self.group3()[2] * other.group0()[2])
                        - (self.group3()[1] * other.group0()[1])
                        + (self.group0()[0] * other.group2()[3])
                        - (self.group3()[0] * other.group0()[0])),
                ])),
            // e1, e2, e3, e4
            ((Simd32x4::from(self[e35]) * other.group2())
                - (swizzle!(other.group1(), 1, 2, 0, 3) * Simd32x4::from([self.group8()[2], self.group8()[0], self.group8()[1], self[e35]]))
                + (swizzle!(self.group8(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                - (swizzle!(other.group1(), 0, 1, 2, 2) * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group4()[2]]))
                + Simd32x4::from([
                    ((self.group10()[2] * other.group1()[3]) - (self.group8()[3] * other.group0()[0]) - (self.group8()[0] * other.group2()[3])
                        + (self.group4()[2] * other.group2()[1])
                        - (self.group4()[1] * other.group2()[2])
                        + (self.group3()[1] * other.group0()[2])
                        - (self.group3()[2] * other.group0()[1])),
                    ((self.group10()[1] * other.group1()[3])
                        - (self.group8()[3] * other.group0()[1])
                        - (self.group8()[1] * other.group2()[3])
                        - (self.group4()[2] * other.group2()[0])
                        + (self.group4()[0] * other.group2()[2])
                        - (self.group3()[0] * other.group0()[2])
                        + (self.group3()[2] * other.group0()[0])),
                    ((self.group10()[0] * other.group1()[3]) - (self.group8()[3] * other.group0()[2]) - (self.group8()[2] * other.group2()[3])
                        + (self.group4()[1] * other.group2()[0])
                        - (self.group4()[0] * other.group2()[1])
                        + (self.group3()[0] * other.group0()[1])
                        - (self.group3()[1] * other.group0()[0])),
                    (-(self.group10()[2] * other.group0()[0]) - (self.group10()[1] * other.group0()[1]) - (self.group10()[0] * other.group0()[2])
                        + (self.group8()[1] * other.group0()[1])
                        + (self.group8()[0] * other.group0()[0])
                        - (self.group4()[0] * other.group1()[0])
                        - (self.group4()[1] * other.group1()[1])),
                ])),
            // e5
            (-(self.group10()[2] * other.group2()[0]) - (self.group10()[1] * other.group2()[1]) - (self.group10()[0] * other.group2()[2])
                + (self.group8()[3] * other.group2()[3])
                + (self.group8()[3] * other.group1()[3])
                - (self.group8()[2] * other.group2()[2])
                - (self.group8()[1] * other.group2()[1])
                - (self.group8()[0] * other.group2()[0])
                - (self.group3()[2] * other.group1()[2])
                - (self.group3()[0] * other.group1()[0])
                - (self.group3()[1] * other.group1()[1])),
            // e15, e25, e35, e45
            (-(swizzle!(other.group1(), 1, 3, 3, 2) * Simd32x4::from([self.group7()[2], self.group7()[1], self.group7()[2], self.group1()[2]]))
                + (swizzle!(other.group1(), 2, 0, 1, 3) * Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[0], self.group0()[1]]))
                - (swizzle!(other.group2(), 3, 3, 3, 2) * Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group6()[2]]))
                - (swizzle!(other.group1(), 3, 2, 0, 1) * Simd32x4::from([self.group7()[0], self.group7()[0], self.group7()[1], self.group1()[1]]))
                + (Simd32x4::from(self.group5()[3]) * other.group2())
                - (swizzle!(other.group2(), 1, 2, 0, 1) * Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group6()[1]]))
                - (swizzle!(other.group1(), 0, 1, 2, 0) * Simd32x4::from([self[e1], self[e1], self[e1], self.group1()[0]]))
                - (swizzle!(other.group2(), 0, 0, 2, 0) * Simd32x4::from([self.group0()[1], self.group1()[2], self.group0()[1], self.group6()[0]]))
                + Simd32x4::from([
                    ((self.group5()[1] * other.group2()[2]) + (self.group1()[2] * other.group2()[1]) - (self.group1()[1] * other.group2()[2])),
                    ((self.group5()[2] * other.group2()[0]) - (self.group0()[1] * other.group2()[1]) + (self.group1()[0] * other.group2()[2])),
                    ((self.group5()[0] * other.group2()[1]) + (self.group1()[1] * other.group2()[0]) - (self.group1()[0] * other.group2()[1])),
                    ((self.group7()[2] * other.group0()[2]) + (self.group7()[1] * other.group0()[1]) + (self.group7()[0] * other.group0()[0])),
                ])),
            // e41, e42, e43
            (-(swizzle!(self.group6(), 2, 1, 2) * Simd32x3::from([other.group1()[1], other.group2()[3], other.group2()[3]]))
                + (swizzle!(self.group6(), 1, 2, 2) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[3]]))
                - (swizzle!(self.group6(), 0, 0, 1) * Simd32x3::from([other.group2()[3], other.group1()[2], other.group1()[0]]))
                + (swizzle!(self.group6(), 0, 1, 0) * Simd32x3::from([other.group1()[3], other.group1()[3], other.group1()[1]]))
                - (Simd32x3::from(self.group5()[3]) * other.group0())
                - (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group5()[2], self.group5()[0], self.group5()[1]]))
                + (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group5()[1], self.group5()[2], self.group5()[0]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (swizzle!(other.group0(), 1, 1, 0) * Simd32x3::from([self.group1()[2], self.group0()[1], self.group1()[1]]))
                - (swizzle!(other.group0(), 0, 2, 2) * Simd32x3::from([self.group0()[1], self.group1()[0], self.group0()[1]]))
                + (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))),
            // e415, e425, e435, e321
            ((swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group10()[0], self.group10()[2], self.group10()[1], self.group8()[2]]))
                + (swizzle!(self.group8(), 3, 3, 3, 1) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]]))
                - (swizzle!(other.group2(), 2, 0, 1, 2) * Simd32x4::from([self.group4()[1], self.group4()[2], self.group4()[0], self.group4()[2]]))
                + (swizzle!(self.group3(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[2]]))
                + (swizzle!(other.group1(), 0, 1, 2, 0) * Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group8()[0]]))
                - (swizzle!(self.group3(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]))
                + Simd32x4::from([
                    ((self.group10()[2] * other.group2()[3]) - (self.group10()[1] * other.group1()[2]) + (self[e35] * other.group2()[0]) - (self.group8()[0] * other.group1()[3])
                        + (self.group4()[2] * other.group2()[1])),
                    ((self.group10()[1] * other.group2()[3]) - (self.group10()[0] * other.group1()[0]) + (self[e35] * other.group2()[1]) - (self.group8()[1] * other.group1()[3])
                        + (self.group4()[0] * other.group2()[2])),
                    (-(self.group10()[2] * other.group1()[1]) + (self.group10()[0] * other.group2()[3]) + (self[e35] * other.group2()[2]) - (self.group8()[2] * other.group1()[3])
                        + (self.group4()[1] * other.group2()[0])),
                    (-(self.group4()[1] * other.group2()[1]) - (self.group4()[0] * other.group2()[0])
                        + (self.group3()[1] * other.group0()[1])
                        + (self.group0()[0] * other.group1()[3])
                        + (self.group3()[0] * other.group0()[0])),
                ])),
            // e423, e431, e412
            (-(swizzle!(self.group10(), 1, 0, 2) * swizzle!(other.group0(), 2, 0, 1))
                + (swizzle!(self.group10(), 0, 2, 1) * swizzle!(other.group0(), 1, 2, 0))
                + (Simd32x3::from(self[e35]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group8()[2], self.group8()[0], self.group8()[1]]))
                + (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group8()[1], self.group8()[2], self.group8()[0]]))
                + (swizzle!(self.group4(), 2, 1, 2) * Simd32x3::from([other.group1()[1], other.group2()[3], other.group2()[3]]))
                - (swizzle!(self.group4(), 1, 2, 2) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[3]]))
                + (swizzle!(self.group4(), 0, 0, 1) * Simd32x3::from([other.group2()[3], other.group1()[2], other.group1()[0]]))
                - (swizzle!(self.group4(), 0, 1, 0) * Simd32x3::from([other.group1()[3], other.group1()[3], other.group1()[1]]))
                + (Simd32x3::from(self.group0()[0]) * other.group0())
                - (Simd32x3::from(self.group3()[3]) * other.group0())),
            // e235, e315, e125
            (-(swizzle!(self.group10(), 1, 0, 2) * Simd32x3::from([other.group2()[2], other.group2()[0], other.group2()[1]]))
                + (swizzle!(self.group10(), 0, 2, 1) * Simd32x3::from([other.group2()[1], other.group2()[2], other.group2()[0]]))
                + (Simd32x3::from(self.group8()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                + (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + Simd32x3::from([
                    ((self.group8()[2] * other.group2()[1]) - (self.group8()[1] * other.group2()[2]) + (self.group3()[2] * other.group1()[1])
                        - (self.group3()[1] * other.group1()[2])),
                    (-(self.group8()[2] * other.group2()[0]) + (self.group8()[0] * other.group2()[2]) - (self.group3()[2] * other.group1()[0])
                        + (self.group3()[0] * other.group1()[2])),
                    ((self.group8()[1] * other.group2()[0]) - (self.group8()[0] * other.group2()[1]) + (self.group3()[1] * other.group1()[0])
                        - (self.group3()[0] * other.group1()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group2(), 1, 2, 0, 2) * Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group5()[2]]))
                - (swizzle!(other.group2(), 2, 0, 1, 3) * Simd32x4::from([self.group6()[1], self.group6()[2], self.group6()[0], self[e1]]))
                + (swizzle!(other.group1(), 0, 1, 2, 2) * Simd32x4::from([self.group5()[3], self.group5()[3], self.group5()[3], self.group7()[2]]))
                + (swizzle!(other.group1(), 3, 3, 3, 1) * Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self.group7()[1]]))
                - (Simd32x4::from(self[e1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (swizzle!(other.group2(), 0, 1, 2, 1) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group5()[1]]))
                + (swizzle!(other.group1(), 1, 2, 0, 0) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group7()[0]]))
                + (swizzle!(other.group2(), 3, 3, 3, 0) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group5()[0]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[2]]))
                + Simd32x4::from([
                    (-(self.group7()[2] * other.group0()[1]) + (self.group7()[1] * other.group0()[2])),
                    ((self.group7()[2] * other.group0()[0]) - (self.group7()[0] * other.group0()[2])),
                    (-(self.group7()[1] * other.group0()[0]) + (self.group7()[0] * other.group0()[1])),
                    (-(self.group1()[0] * other.group2()[0]) - (self.group1()[1] * other.group2()[1])),
                ])),
            // e1234
            ((self.group6()[2] * other.group1()[2])
                + (self.group6()[1] * other.group1()[1])
                + (self.group6()[0] * other.group1()[0])
                + (self.group5()[2] * other.group0()[2])
                + (self.group5()[1] * other.group0()[1])
                + (self.group5()[0] * other.group0()[0])
                - (self.group1()[3] * other.group2()[3])
                + (self.group1()[3] * other.group1()[3])
                + (self.group1()[2] * other.group0()[2])
                + (self.group1()[0] * other.group0()[0])
                + (self.group1()[1] * other.group0()[1])),
            // e12, e31, e23
            (-(swizzle!(self.group7(), 1, 0, 2) * swizzle!(other.group0(), 0, 2, 1)) + (swizzle!(self.group7(), 0, 2, 1) * swizzle!(other.group0(), 1, 0, 2))
                - (swizzle!(self.group6(), 1, 0, 2) * Simd32x3::from([other.group2()[0], other.group2()[2], other.group2()[1]]))
                + (swizzle!(self.group6(), 0, 2, 1) * Simd32x3::from([other.group2()[1], other.group2()[0], other.group2()[2]]))
                - (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group5()[2], self.group5()[1], self.group5()[0]]))
                - (Simd32x3::from(self[e1]) * swizzle!(other.group0(), 2, 1, 0))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group2()[2], other.group2()[1], other.group2()[0]]))
                - (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], other.group1()[1], other.group1()[0]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[2], self.group1()[1], self.group1()[0]]))
                + Simd32x3::from([
                    (-(self.group5()[1] * other.group1()[0]) + (self.group5()[0] * other.group1()[1])),
                    ((self.group5()[2] * other.group1()[0]) - (self.group5()[0] * other.group1()[2])),
                    (-(self.group5()[2] * other.group1()[1]) + (self.group5()[1] * other.group1()[2])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      452      496        0
    //    simd2       25       27        0
    //    simd3      150      160        0
    //    simd4       82       84        0
    // Totals...
    // yes simd      709      767        0
    //  no simd     1280     1366        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (-(Simd32x2::from(other.group1()[0]) * Simd32x2::from([self.group10()[2], self.group5()[0]]))
                - (Simd32x2::from(other.group1()[1]) * Simd32x2::from([self.group10()[1], self.group5()[1]]))
                - (Simd32x2::from(other.group1()[2]) * Simd32x2::from([self.group10()[0], self.group5()[2]]))
                - (Simd32x2::from(other.group2()[2]) * Simd32x2::from([self.group4()[2], self.group6()[2]]))
                - (Simd32x2::from(other.group2()[1]) * Simd32x2::from([self.group4()[1], self.group6()[1]]))
                - (Simd32x2::from(other.group2()[0]) * Simd32x2::from([self.group4()[0], self.group6()[0]]))
                - (Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group3()[2], self.group7()[2]]))
                - (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group3()[0], self.group7()[0]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group3()[1], self.group7()[1]]))
                + (Simd32x2::from([1.0, -1.0]) * Simd32x2::from(other.group1()[3]) * Simd32x2::from([self.group3()[3], self.group5()[3]]))),
            // e1, e2, e3, e4
            ((other.group1() * Simd32x4::from([self.group5()[3], self.group5()[3], self.group5()[3], self.group1()[3]]))
                - (swizzle!(other.group1(), 3, 3, 3, 2) * Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self.group6()[2]]))
                - (swizzle!(other.group1(), 2, 0, 1, 1) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group6()[1]]))
                + Simd32x4::from([
                    (-(self.group7()[2] * other.group0()[1]) + (self.group7()[1] * other.group0()[2]) + (self.group6()[2] * other.group2()[1])
                        - (self.group6()[1] * other.group2()[2])
                        - (self[e1] * other.group0()[0])
                        + (self.group1()[3] * other.group2()[0])
                        + (self.group1()[2] * other.group1()[1])),
                    ((self.group7()[2] * other.group0()[0]) - (self.group7()[0] * other.group0()[2]) - (self.group6()[2] * other.group2()[0])
                        + (self.group6()[0] * other.group2()[2])
                        - (self[e1] * other.group0()[1])
                        + (self.group1()[3] * other.group2()[1])
                        + (self.group1()[0] * other.group1()[2])),
                    (-(self.group7()[1] * other.group0()[0]) + (self.group7()[0] * other.group0()[1]) + (self.group6()[1] * other.group2()[0])
                        - (self.group6()[0] * other.group2()[1])
                        - (self[e1] * other.group0()[2])
                        + (self.group1()[3] * other.group2()[2])
                        + (self.group1()[1] * other.group1()[0])),
                    (-(self.group6()[0] * other.group1()[0])
                        - (self.group5()[2] * other.group0()[2])
                        - (self.group5()[1] * other.group0()[1])
                        - (self.group5()[0] * other.group0()[0])
                        - (self.group1()[2] * other.group0()[2])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group1()[1] * other.group0()[1])),
                ])),
            // e5
            (-(self.group7()[2] * other.group1()[2])
                - (self.group7()[1] * other.group1()[1])
                - (self.group7()[0] * other.group1()[0])
                - (self.group5()[2] * other.group2()[2])
                - (self.group5()[1] * other.group2()[1])
                - (self.group5()[0] * other.group2()[0])
                - (self[e1] * other.group1()[3])
                + (self.group1()[2] * other.group2()[2])
                + (self.group1()[0] * other.group2()[0])
                + (self.group1()[1] * other.group2()[1])),
            // e15, e25, e35, e45
            ((other.group1() * Simd32x4::from([self.group8()[3], self.group8()[3], self.group8()[3], self.group0()[0]]))
                - (swizzle!(self.group8(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[2]]))
                - (swizzle!(other.group1(), 2, 0, 3, 1) * Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[2], self.group8()[1]]))
                - (swizzle!(other.group1(), 3, 3, 1, 0) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[0], self.group8()[0]]))
                + Simd32x4::from([
                    (-(self.group10()[1] * other.group2()[2])
                        + (self.group10()[0] * other.group2()[1])
                        + (self.group8()[2] * other.group2()[1])
                        + (self.group3()[3] * other.group2()[0])
                        + (self.group3()[2] * other.group1()[1])
                        + (self.group0()[0] * other.group2()[0])),
                    ((self.group10()[2] * other.group2()[2]) - (self.group10()[0] * other.group2()[0])
                        + (self.group8()[0] * other.group2()[2])
                        + (self.group3()[3] * other.group2()[1])
                        + (self.group0()[0] * other.group2()[1])
                        + (self.group3()[0] * other.group1()[2])),
                    (-(self.group10()[2] * other.group2()[1])
                        + (self.group10()[1] * other.group2()[0])
                        + (self.group8()[1] * other.group2()[0])
                        + (self.group3()[3] * other.group2()[2])
                        + (self.group3()[1] * other.group1()[0])
                        + (self.group0()[0] * other.group2()[2])),
                    ((self.group4()[2] * other.group2()[2]) + (self.group4()[1] * other.group2()[1]) + (self.group4()[0] * other.group2()[0])
                        - (self.group3()[2] * other.group0()[2])
                        - (self.group3()[1] * other.group0()[1])
                        - (self.group3()[0] * other.group0()[0])),
                ])),
            // e41, e42, e43
            (-(swizzle!(self.group10(), 1, 0, 2) * swizzle!(other.group0(), 2, 0, 1))
                + (swizzle!(self.group10(), 0, 2, 1) * swizzle!(other.group0(), 1, 2, 0))
                + (Simd32x3::from(self[e35]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group8()[2], self.group8()[0], self.group8()[1]]))
                + (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group8()[1], self.group8()[2], self.group8()[0]]))
                + (swizzle!(self.group4(), 2, 1, 2) * Simd32x3::from([other.group1()[1], other.group1()[3], other.group1()[3]]))
                - (swizzle!(self.group4(), 1, 2, 0) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]))
                + (swizzle!(self.group4(), 0, 0, 1) * Simd32x3::from([other.group1()[3], other.group1()[2], other.group1()[0]]))
                + (Simd32x3::from(self.group0()[0]) * other.group0())
                - (Simd32x3::from(self.group3()[3]) * other.group0())),
            // e415, e425, e435, e321
            (-(swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group5()[1], self.group5()[2], self.group5()[0], self.group1()[2]]))
                - (swizzle!(self.group1(), 0, 1, 2, 1) * swizzle!(other.group1(), 3, 3, 3, 1))
                + Simd32x4::from([
                    ((self.group7()[2] * other.group0()[1]) - (self.group7()[1] * other.group0()[2]) + (self.group6()[2] * other.group2()[1])
                        - (self.group6()[1] * other.group2()[2])
                        + (self.group5()[2] * other.group1()[1])
                        + (self[e1] * other.group0()[0])
                        + (self.group1()[3] * other.group2()[0])
                        + (self.group0()[1] * other.group1()[0])),
                    (-(self.group7()[2] * other.group0()[0]) + (self.group7()[0] * other.group0()[2]) - (self.group6()[2] * other.group2()[0])
                        + (self.group6()[0] * other.group2()[2])
                        + (self.group5()[0] * other.group1()[2])
                        + (self[e1] * other.group0()[1])
                        + (self.group1()[3] * other.group2()[1])
                        + (self.group0()[1] * other.group1()[1])),
                    ((self.group7()[1] * other.group0()[0]) - (self.group7()[0] * other.group0()[1]) + (self.group6()[1] * other.group2()[0])
                        - (self.group6()[0] * other.group2()[1])
                        + (self.group5()[1] * other.group1()[0])
                        + (self[e1] * other.group0()[2])
                        + (self.group1()[3] * other.group2()[2])
                        + (self.group0()[1] * other.group1()[2])),
                    ((self.group7()[2] * other.group0()[2]) + (self.group7()[1] * other.group0()[1]) + (self.group7()[0] * other.group0()[0])
                        - (self.group6()[2] * other.group2()[2])
                        - (self.group6()[1] * other.group2()[1])
                        - (self.group6()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group1()[3])
                        - (self.group1()[0] * other.group1()[0])),
                ])),
            // e423, e431, e412
            ((swizzle!(self.group6(), 2, 1, 2) * Simd32x3::from([other.group1()[1], other.group1()[3], other.group1()[3]]))
                - (swizzle!(self.group6(), 1, 2, 0) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]))
                + (swizzle!(self.group6(), 0, 0, 1) * Simd32x3::from([other.group1()[3], other.group1()[2], other.group1()[0]]))
                + (Simd32x3::from(self.group5()[3]) * other.group0())
                + (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group5()[2], self.group5()[0], self.group5()[1]]))
                - (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group5()[1], self.group5()[2], self.group5()[0]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (swizzle!(other.group0(), 1, 1, 0) * Simd32x3::from([self.group1()[2], self.group0()[1], self.group1()[1]]))
                + (swizzle!(other.group0(), 0, 2, 2) * Simd32x3::from([self.group0()[1], self.group1()[0], self.group0()[1]]))
                - (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))),
            // e235, e315, e125
            ((swizzle!(self.group7(), 2, 0, 1) * Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]))
                - (swizzle!(self.group7(), 1, 2, 2) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[3]]))
                - (swizzle!(self.group7(), 0, 1, 0) * Simd32x3::from([other.group1()[3], other.group1()[3], other.group1()[1]]))
                - (Simd32x3::from(self.group5()[3]) * other.group2())
                + (swizzle!(other.group2(), 1, 2, 0) * Simd32x3::from([self.group5()[2], self.group5()[0], self.group5()[1]]))
                - (swizzle!(other.group2(), 2, 0, 1) * Simd32x3::from([self.group5()[1], self.group5()[2], self.group5()[0]]))
                + (Simd32x3::from(self[e1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (swizzle!(other.group2(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))
                + (swizzle!(other.group2(), 0, 0, 2) * Simd32x3::from([self.group0()[1], self.group1()[2], self.group0()[1]]))
                + (swizzle!(other.group2(), 2, 1, 1) * Simd32x3::from([self.group1()[1], self.group0()[1], self.group1()[0]]))),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group8(), 1, 2, 0, 3) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group10()[2] * other.group1()[3]) - (self[e35] * other.group2()[0]) + (self.group8()[3] * other.group0()[0]) + (self.group8()[2] * other.group1()[1])
                        - (self.group4()[2] * other.group2()[1])
                        + (self.group4()[1] * other.group2()[2])
                        + (self.group3()[3] * other.group1()[0])
                        + (self.group3()[2] * other.group0()[1])),
                    ((self.group10()[1] * other.group1()[3]) - (self[e35] * other.group2()[1])
                        + (self.group8()[3] * other.group0()[1])
                        + (self.group8()[0] * other.group1()[2])
                        + (self.group4()[2] * other.group2()[0])
                        - (self.group4()[0] * other.group2()[2])
                        + (self.group3()[3] * other.group1()[1])
                        + (self.group3()[0] * other.group0()[2])),
                    ((self.group10()[0] * other.group1()[3]) - (self[e35] * other.group2()[2]) + (self.group8()[3] * other.group0()[2]) + (self.group8()[1] * other.group1()[0])
                        - (self.group4()[1] * other.group2()[0])
                        + (self.group4()[0] * other.group2()[1])
                        + (self.group3()[3] * other.group1()[2])
                        + (self.group3()[1] * other.group0()[0])),
                    (-(self.group10()[2] * other.group2()[0])
                        - (self.group10()[1] * other.group2()[1])
                        - (self.group10()[0] * other.group2()[2])
                        - (self.group8()[2] * other.group2()[2])
                        - (self.group8()[1] * other.group2()[1])
                        - (self.group8()[0] * other.group2()[0])
                        - (self.group3()[0] * other.group1()[0])
                        - (self.group3()[1] * other.group1()[1])),
                ])),
            // e1234
            (-(self.group10()[2] * other.group0()[0]) - (self.group10()[1] * other.group0()[1]) - (self.group10()[0] * other.group0()[2])
                + (self[e35] * other.group1()[3])
                + (self.group8()[2] * other.group0()[2])
                + (self.group8()[1] * other.group0()[1])
                + (self.group8()[0] * other.group0()[0])
                - (self.group4()[2] * other.group1()[2])
                - (self.group4()[0] * other.group1()[0])
                - (self.group4()[1] * other.group1()[1])),
            // e12, e31, e23
            (-(swizzle!(self.group10(), 2, 0, 1) * Simd32x3::from([other.group1()[1], other.group1()[0], other.group1()[2]]))
                + (swizzle!(self.group10(), 1, 2, 0) * Simd32x3::from([other.group1()[0], other.group1()[2], other.group1()[1]]))
                + (Simd32x3::from(self[e35]) * swizzle!(other.group2(), 2, 1, 0))
                + (Simd32x3::from(self.group8()[3]) * swizzle!(other.group0(), 2, 1, 0))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group8()[2], self.group8()[1], self.group8()[0]]))
                + (swizzle!(self.group4(), 1, 0, 2) * swizzle!(other.group2(), 0, 2, 1))
                - (swizzle!(self.group4(), 0, 2, 1) * swizzle!(other.group2(), 1, 0, 2))
                + (swizzle!(other.group0(), 0, 2, 1) * Simd32x3::from([self.group3()[1], self.group3()[0], self.group3()[2]]))
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[2], other.group1()[1], other.group1()[0]]))
                - (swizzle!(other.group0(), 1, 0, 2) * Simd32x3::from([self.group3()[0], self.group3()[2], self.group3()[1]]))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      466      518        0
    //    simd2       27       27        0
    //    simd3      168      176        0
    //    simd4      104      106        0
    // Totals...
    // yes simd      765      827        0
    //  no simd     1440     1524        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (-(Simd32x2::from(other.group1()[0]) * Simd32x2::from([self.group10()[2], self.group5()[0]]))
                - (Simd32x2::from(other.group1()[1]) * Simd32x2::from([self.group10()[1], self.group5()[1]]))
                - (Simd32x2::from(other.group1()[2]) * Simd32x2::from([self.group10()[0], self.group5()[2]]))
                + (Simd32x2::from(other.group3()[3]) * Simd32x2::from([self[e35], self.group1()[3]]))
                + (Simd32x2::from(other.group2()[3]) * Simd32x2::from([self.group8()[3], self[e1]]))
                - (Simd32x2::from(other.group2()[2]) * Simd32x2::from([self.group4()[2], self.group6()[2]]))
                - (Simd32x2::from(other.group2()[1]) * Simd32x2::from([self.group4()[1], self.group6()[1]]))
                - (Simd32x2::from(other.group2()[0]) * Simd32x2::from([self.group4()[0], self.group6()[0]]))
                - (Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group3()[2], self.group7()[2]]))
                - (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group3()[0], self.group7()[0]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group3()[1], self.group7()[1]]))
                + Simd32x2::from([
                    (-(self.group8()[2] * other.group3()[2]) - (self.group8()[1] * other.group3()[1]) - (self.group8()[0] * other.group3()[0])
                        + (self.group3()[3] * other.group1()[3])),
                    (-(self.group5()[3] * other.group1()[3])
                        + (self.group1()[2] * other.group3()[2])
                        + (self.group1()[0] * other.group3()[0])
                        + (self.group1()[1] * other.group3()[1])),
                ])),
            // e1, e2, e3, e4
            ((swizzle!(other.group2(), 1, 2, 0, 3) * Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group5()[3]]))
                + (other.group1() * Simd32x4::from([self.group5()[3], self.group5()[3], self.group5()[3], self.group1()[3]]))
                - (swizzle!(self.group5(), 2, 1, 2, 2) * Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group0()[2]]))
                - (swizzle!(self.group5(), 0, 0, 1, 1) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group0()[1]]))
                + (other.group2() * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[1]]))
                - (swizzle!(other.group3(), 0, 1, 2, 2) * Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group6()[2]]))
                - (swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group6()[2]]))
                + Simd32x4::from([
                    (-(self.group7()[2] * other.group0()[1]) + (self.group7()[1] * other.group0()[2])
                        - (self.group7()[0] * other.group2()[3])
                        - (self.group6()[1] * other.group2()[2])
                        + (self.group6()[0] * other.group3()[3])
                        + (self.group5()[1] * other.group3()[2])
                        - (self[e1] * other.group0()[0])
                        + (self.group1()[2] * other.group1()[1])),
                    ((self.group7()[2] * other.group0()[0])
                        - (self.group7()[1] * other.group2()[3])
                        - (self.group7()[0] * other.group0()[2])
                        - (self.group6()[2] * other.group2()[0])
                        + (self.group6()[1] * other.group3()[3])
                        + (self.group5()[2] * other.group3()[0])
                        - (self[e1] * other.group0()[1])
                        + (self.group1()[0] * other.group1()[2])),
                    (-(self.group7()[2] * other.group2()[3]) - (self.group7()[1] * other.group0()[0])
                        + (self.group7()[0] * other.group0()[1])
                        + (self.group6()[2] * other.group3()[3])
                        - (self.group6()[0] * other.group2()[1])
                        + (self.group5()[0] * other.group3()[1])
                        - (self[e1] * other.group0()[2])
                        + (self.group1()[1] * other.group1()[0])),
                    (-(self.group6()[1] * other.group3()[1])
                        - (self.group6()[1] * other.group1()[1])
                        - (self.group6()[0] * other.group3()[0])
                        - (self.group6()[0] * other.group1()[0])
                        - (self.group5()[0] * other.group0()[0])
                        - (self.group1()[2] * other.group0()[2])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])),
                ])),
            // e5
            ((self.group7()[2] * other.group3()[2]) - (self.group7()[2] * other.group1()[2]) + (self.group7()[1] * other.group3()[1]) - (self.group7()[1] * other.group1()[1])
                + (self.group7()[0] * other.group3()[0])
                - (self.group7()[0] * other.group1()[0])
                - (self.group5()[3] * other.group3()[3])
                - (self.group5()[2] * other.group2()[2])
                - (self.group5()[1] * other.group2()[1])
                - (self.group5()[0] * other.group2()[0])
                - (self[e1] * other.group1()[3])
                + (self.group1()[2] * other.group2()[2])
                + (self.group1()[1] * other.group2()[1])
                + (self.group0()[1] * other.group3()[3])
                + (self.group1()[0] * other.group2()[0])),
            // e15, e25, e35, e45
            ((swizzle!(other.group2(), 1, 2, 0, 3) * Simd32x4::from([self.group10()[0], self.group10()[2], self.group10()[1], self.group8()[3]]))
                - (swizzle!(other.group3(), 0, 1, 2, 0) * Simd32x4::from([self.group8()[3], self.group8()[3], self.group8()[3], self.group10()[2]]))
                + (other.group1() * Simd32x4::from([self.group8()[3], self.group8()[3], self.group8()[3], self.group0()[0]]))
                + (swizzle!(other.group2(), 1, 2, 0, 2) * Simd32x4::from([self.group8()[2], self.group8()[0], self.group8()[1], self.group4()[2]]))
                - (swizzle!(self.group8(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[2]]))
                + (swizzle!(other.group2(), 0, 1, 2, 1) * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group4()[1]]))
                - (Simd32x4::from(self.group3()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group0()[2]]))
                - (Simd32x4::from(self.group3()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group0()[1]]))
                + (swizzle!(other.group2(), 0, 1, 2, 0) * Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group4()[0]]))
                - (Simd32x4::from(self.group3()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group0()[0]]))
                + Simd32x4::from([
                    ((self.group10()[2] * other.group3()[3]) - (self.group10()[1] * other.group2()[2])
                        + (self.group8()[0] * other.group3()[3])
                        + (self.group3()[2] * other.group1()[1])
                        + (self.group3()[1] * other.group3()[2])),
                    ((self.group10()[1] * other.group3()[3]) - (self.group10()[0] * other.group2()[0])
                        + (self.group8()[1] * other.group3()[3])
                        + (self.group3()[2] * other.group3()[0])
                        + (self.group3()[0] * other.group1()[2])),
                    (-(self.group10()[2] * other.group2()[1])
                        + (self.group10()[0] * other.group3()[3])
                        + (self.group8()[2] * other.group3()[3])
                        + (self.group3()[1] * other.group1()[0])
                        + (self.group3()[0] * other.group3()[1])),
                    (-(self.group10()[1] * other.group3()[1])
                        - (self.group10()[0] * other.group3()[2])
                        - (self[e35] * other.group3()[3])
                        - (self.group8()[1] * other.group1()[1])
                        - (self.group8()[0] * other.group1()[0])),
                ])),
            // e41, e42, e43
            ((swizzle!(self.group10(), 2, 2, 1) * Simd32x3::from([other.group2()[3], other.group0()[2], other.group0()[0]]))
                - (swizzle!(self.group10(), 1, 0, 2) * swizzle!(other.group0(), 2, 0, 1))
                + (swizzle!(self.group10(), 0, 1, 0) * Simd32x3::from([other.group0()[1], other.group2()[3], other.group2()[3]]))
                + (Simd32x3::from(self[e35]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from(self[e35]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group8()[2], self.group8()[0], self.group8()[1]]))
                + (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group8()[1], self.group8()[2], self.group8()[0]]))
                - (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group8()[0], self.group8()[1], self.group8()[2]]))
                + (swizzle!(self.group4(), 2, 1, 2) * Simd32x3::from([other.group3()[1], other.group1()[3], other.group1()[3]]))
                + (swizzle!(self.group4(), 2, 0, 1) * Simd32x3::from([other.group1()[1], other.group3()[2], other.group3()[0]]))
                - (swizzle!(self.group4(), 1, 2, 0) * Simd32x3::from([other.group3()[2], other.group3()[0], other.group3()[1]]))
                - (swizzle!(self.group4(), 1, 2, 0) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]))
                + (swizzle!(self.group4(), 0, 0, 1) * Simd32x3::from([other.group1()[3], other.group1()[2], other.group1()[0]]))
                + (Simd32x3::from(self.group0()[0]) * other.group0())
                - (Simd32x3::from(self.group3()[3]) * other.group0())),
            // e415, e425, e435, e321
            (-(swizzle!(other.group2(), 2, 0, 1, 2) * Simd32x4::from([self.group6()[1], self.group6()[2], self.group6()[0], self.group6()[2]]))
                + (swizzle!(other.group3(), 3, 3, 3, 2) * Simd32x4::from([self.group6()[0], self.group6()[1], self.group6()[2], self.group5()[2]]))
                + (swizzle!(self.group5(), 2, 0, 1, 1) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[1]]))
                - (swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group5()[1], self.group5()[2], self.group5()[0], self.group1()[2]]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                - (swizzle!(self.group1(), 2, 1, 2, 1) * Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group1()[1]]))
                + (swizzle!(other.group3(), 2, 0, 1, 0) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group5()[0]]))
                - (swizzle!(self.group1(), 0, 0, 1, 0) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group1()[0]]))
                + Simd32x4::from([
                    ((self.group7()[2] * other.group0()[1]) - (self.group7()[1] * other.group0()[2])
                        + (self.group7()[0] * other.group2()[3])
                        + (self.group6()[2] * other.group2()[1])
                        - (self.group5()[3] * other.group3()[0])
                        + (self[e1] * other.group0()[0])
                        + (self.group0()[1] * other.group1()[0])),
                    (-(self.group7()[2] * other.group0()[0])
                        + (self.group7()[1] * other.group2()[3])
                        + (self.group7()[0] * other.group0()[2])
                        + (self.group6()[0] * other.group2()[2])
                        - (self.group5()[3] * other.group3()[1])
                        + (self[e1] * other.group0()[1])
                        + (self.group0()[1] * other.group1()[1])),
                    ((self.group7()[2] * other.group2()[3]) + (self.group7()[1] * other.group0()[0]) - (self.group7()[0] * other.group0()[1])
                        + (self.group6()[1] * other.group2()[0])
                        - (self.group5()[3] * other.group3()[2])
                        + (self[e1] * other.group0()[2])
                        + (self.group0()[1] * other.group1()[2])),
                    ((self.group7()[2] * other.group0()[2]) + (self.group7()[1] * other.group0()[1]) + (self.group7()[0] * other.group0()[0])
                        - (self.group6()[1] * other.group2()[1])
                        - (self.group6()[0] * other.group2()[0])
                        - (self[e1] * other.group2()[3])
                        - (self.group0()[1] * other.group1()[3])),
                ])),
            // e423, e431, e412
            ((swizzle!(self.group6(), 2, 1, 2) * Simd32x3::from([other.group3()[1], other.group1()[3], other.group1()[3]]))
                + (swizzle!(self.group6(), 2, 0, 1) * Simd32x3::from([other.group1()[1], other.group3()[2], other.group3()[0]]))
                - (swizzle!(self.group6(), 1, 2, 0) * Simd32x3::from([other.group3()[2], other.group3()[0], other.group3()[1]]))
                - (swizzle!(self.group6(), 1, 2, 0) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]))
                + (swizzle!(self.group6(), 0, 0, 1) * Simd32x3::from([other.group1()[3], other.group1()[2], other.group1()[0]]))
                + (Simd32x3::from(self.group5()[3]) * other.group0())
                + (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group5()[2], self.group5()[0], self.group5()[1]]))
                - (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group5()[1], self.group5()[2], self.group5()[0]]))
                + (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group5()[0], self.group5()[1], self.group5()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (swizzle!(other.group0(), 1, 1, 0) * Simd32x3::from([self.group1()[2], self.group0()[1], self.group1()[1]]))
                - (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                + (swizzle!(other.group0(), 0, 2, 2) * Simd32x3::from([self.group0()[1], self.group1()[0], self.group0()[1]]))
                + (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))),
            // e235, e315, e125
            (-(Simd32x3::from(self.group7()[2]) * Simd32x3::from([other.group3()[1], other.group1()[0], other.group1()[3]]))
                + (swizzle!(self.group7(), 2, 2, 1) * Simd32x3::from([other.group1()[1], other.group3()[0], other.group1()[0]]))
                + (swizzle!(self.group7(), 1, 0, 0) * Simd32x3::from([other.group3()[2], other.group1()[2], other.group3()[1]]))
                - (Simd32x3::from(self.group7()[1]) * Simd32x3::from([other.group1()[2], other.group1()[3], other.group3()[0]]))
                - (Simd32x3::from(self.group7()[0]) * Simd32x3::from([other.group1()[3], other.group3()[2], other.group1()[1]]))
                - (Simd32x3::from(self.group5()[3]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                + (Simd32x3::from(other.group2()[1]) * Simd32x3::from([self.group5()[2], self.group0()[1], self.group1()[0]]))
                + (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group5()[0], self.group5()[1], self.group5()[2]]))
                - (Simd32x3::from(self[e1]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from(self[e1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(other.group2()[2]) * Simd32x3::from([self.group1()[1], self.group5()[0], self.group0()[1]]))
                + (Simd32x3::from(other.group2()[0]) * Simd32x3::from([self.group0()[1], self.group1()[2], self.group5()[1]]))
                - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + Simd32x3::from([
                    (-(self.group5()[1] * other.group2()[2]) - (self.group1()[2] * other.group2()[1])),
                    (-(self.group5()[2] * other.group2()[0]) - (self.group1()[0] * other.group2()[2])),
                    (-(self.group5()[0] * other.group2()[1]) - (self.group1()[1] * other.group2()[0])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group3(), 1, 2, 0, 3) * Simd32x4::from([self.group10()[0], self.group10()[2], self.group10()[1], self.group3()[3]]))
                - (swizzle!(other.group2(), 0, 1, 2, 0) * Simd32x4::from([self[e35], self[e35], self[e35], self.group10()[2]]))
                - (swizzle!(self.group8(), 1, 2, 0, 3) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (swizzle!(other.group2(), 1, 2, 0, 1) * Simd32x4::from([self.group4()[2], self.group4()[0], self.group4()[1], self.group10()[1]]))
                + (swizzle!(self.group3(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[2]]))
                + (swizzle!(self.group3(), 2, 1, 2, 1) * Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group3()[1]]))
                - (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + (swizzle!(other.group3(), 0, 1, 2, 0) * Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group3()[0]]))
                + Simd32x4::from([
                    ((self.group10()[2] * other.group1()[3]) - (self.group10()[1] * other.group3()[2])
                        + (self.group8()[3] * other.group0()[0])
                        + (self.group8()[2] * other.group1()[1])
                        + (self.group4()[1] * other.group2()[2])
                        - (self.group4()[0] * other.group3()[3])
                        + (self.group3()[0] * other.group2()[3])),
                    ((self.group10()[1] * other.group1()[3]) - (self.group10()[0] * other.group3()[0])
                        + (self.group8()[3] * other.group0()[1])
                        + (self.group8()[0] * other.group1()[2])
                        + (self.group4()[2] * other.group2()[0])
                        - (self.group4()[1] * other.group3()[3])
                        + (self.group3()[0] * other.group0()[2])),
                    (-(self.group10()[2] * other.group3()[1])
                        + (self.group10()[0] * other.group1()[3])
                        + (self.group8()[3] * other.group0()[2])
                        + (self.group8()[1] * other.group1()[0])
                        - (self.group4()[2] * other.group3()[3])
                        + (self.group4()[0] * other.group2()[1])
                        + (self.group3()[1] * other.group0()[0])),
                    (-(self.group10()[0] * other.group2()[2])
                        - (self.group8()[2] * other.group2()[2])
                        - (self.group8()[1] * other.group2()[1])
                        - (self.group8()[0] * other.group2()[0])
                        - (self.group3()[1] * other.group1()[1])
                        + (self.group0()[0] * other.group3()[3])
                        - (self.group3()[0] * other.group1()[0])),
                ])),
            // e1234
            (-(self.group10()[2] * other.group0()[0]) - (self.group10()[1] * other.group0()[1]) - (self.group10()[0] * other.group0()[2])
                + (self[e35] * other.group1()[3])
                + (self.group8()[2] * other.group0()[2])
                + (self.group8()[1] * other.group0()[1])
                + (self.group8()[0] * other.group0()[0])
                - (self.group4()[2] * other.group3()[2])
                - (self.group4()[2] * other.group1()[2])
                - (self.group4()[1] * other.group3()[1])
                - (self.group4()[1] * other.group1()[1])
                - (self.group4()[0] * other.group3()[0])
                - (self.group4()[0] * other.group1()[0])
                + (self.group0()[0] * other.group2()[3])
                - (self.group3()[3] * other.group2()[3])),
            // e12, e31, e23
            (-(swizzle!(self.group10(), 2, 0, 1) * Simd32x3::from([other.group1()[1], other.group1()[0], other.group1()[2]]))
                + (swizzle!(self.group10(), 1, 2, 0) * Simd32x3::from([other.group1()[0], other.group1()[2], other.group1()[1]]))
                + (Simd32x3::from(self[e35]) * Simd32x3::from([other.group2()[2], other.group2()[1], other.group2()[0]]))
                + (Simd32x3::from(self.group8()[3]) * swizzle!(other.group0(), 2, 1, 0))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group8()[2], self.group8()[1], self.group8()[0]]))
                + (swizzle!(self.group4(), 2, 1, 2) * Simd32x3::from([other.group3()[3], other.group3()[3], other.group2()[1]]))
                + (swizzle!(self.group4(), 1, 0, 0) * Simd32x3::from([other.group2()[0], other.group2()[2], other.group3()[3]]))
                - (swizzle!(self.group4(), 0, 2, 1) * Simd32x3::from([other.group2()[1], other.group2()[0], other.group2()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group3()[2], other.group3()[1], other.group3()[0]]))
                + (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group3()[2], self.group3()[1], self.group3()[0]]))
                + (swizzle!(other.group0(), 0, 2, 1) * Simd32x3::from([self.group3()[1], self.group3()[0], self.group3()[2]]))
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[2], other.group1()[1], other.group1()[0]]))
                - (swizzle!(other.group0(), 1, 0, 2) * Simd32x3::from([self.group3()[0], self.group3()[2], self.group3()[1]]))
                + Simd32x3::from([
                    ((self.group8()[1] * other.group3()[0]) - (self.group8()[0] * other.group3()[1])),
                    (-(self.group8()[2] * other.group3()[0]) + (self.group8()[0] * other.group3()[2])),
                    ((self.group8()[2] * other.group3()[1]) - (self.group8()[1] * other.group3()[2])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      345      388        0
    //    simd2       16       16        0
    //    simd3      117      128        0
    //    simd4       74       78        0
    // Totals...
    // yes simd      552      610        0
    //  no simd     1024     1116        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group0()[1] * other.group0()[1]) - (self.group1()[3] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self[e35] * other.group0()[0])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group4()[0] * other.group0()[0]) - (self.group8()[0] * other.group0()[1])),
                ((self.group4()[1] * other.group0()[0]) - (self.group8()[1] * other.group0()[1])),
                ((self.group4()[2] * other.group0()[0]) - (self.group8()[2] * other.group0()[1])),
                (self[e35] * other.group0()[1]),
            ]),
            // e5
            ((self.group8()[3] * other.group0()[1]) + (self.group0()[0] * other.group0()[0]) + (self.group3()[3] * other.group0()[0])),
            // e15, e25, e35, e45
            ((self.group1() * Simd32x4::from(other.group0()[0]))
                + Simd32x4::from([
                    (-(self.group7()[0] * other.group0()[1]) - (self.group5()[0] * other.group0()[0])),
                    (-(self.group7()[1] * other.group0()[1]) - (self.group5()[1] * other.group0()[0])),
                    (-(self.group7()[2] * other.group0()[1]) - (self.group5()[2] * other.group0()[0])),
                    (self.group5()[3] * other.group0()[1]),
                ])),
            // e41, e42, e43
            (self.group6() * Simd32x3::from(other.group0()[1]) * Simd32x3::from(-1.0)),
            // e415, e425, e435, e321
            ((Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[2], self[e35]]))
                + (Simd32x4::from([1.0, 1.0, 1.0, -1.0])
                    * Simd32x4::from(other.group0()[1])
                    * Simd32x4::from([self.group10()[2], self.group10()[1], self.group10()[0], self.group3()[3]]))),
            // e423, e431, e412
            (self.group4() * Simd32x3::from(other.group0()[1])),
            // e235, e315, e125
            ((swizzle!(self.group10(), 2, 1, 0) * Simd32x3::from(other.group0()[0]))
                + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group8()[0], self.group8()[1], self.group8()[2]]))),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group6()[0], self.group6()[1], self.group6()[2], self.group5()[3]]))
                + Simd32x4::from([
                    (self.group1()[0] * other.group0()[1]),
                    (self.group1()[1] * other.group0()[1]),
                    (self.group1()[2] * other.group0()[1]),
                    (-(self.group0()[1] * other.group0()[0]) - (self[e1] * other.group0()[1])),
                ])),
            // e1234
            (self.group1()[3] * other.group0()[1] * -1.0),
            // e12, e31, e23
            (-(Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group5()[2], self.group5()[1], self.group5()[0]]))
                - (swizzle!(self.group6(), 2, 1, 0) * Simd32x3::from(other.group0()[0]))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      369      415        0
    //    simd2       19       21        0
    //    simd3      122      131        0
    //    simd4       79       81        0
    // Totals...
    // yes simd      589      648        0
    //  no simd     1089     1174        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (-(Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group4()[2], self.group6()[2]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group4()[1], self.group6()[1]]))
                - (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group4()[0], self.group6()[0]]))
                + (Simd32x2::from([1.0, -1.0]) * Simd32x2::from(other.group0()[3]) * Simd32x2::from([self.group3()[3], self.group5()[3]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group6()[2] * other.group0()[1]) - (self.group6()[1] * other.group0()[2]) + (self.group1()[3] * other.group0()[0]) - (self.group5()[0] * other.group0()[3])),
                (-(self.group6()[2] * other.group0()[0]) + (self.group6()[0] * other.group0()[2]) + (self.group1()[3] * other.group0()[1])
                    - (self.group5()[1] * other.group0()[3])),
                ((self.group6()[1] * other.group0()[0]) - (self.group6()[0] * other.group0()[1]) + (self.group1()[3] * other.group0()[2]) - (self.group5()[2] * other.group0()[3])),
                (self.group1()[3] * other.group0()[3]),
            ]),
            // e5
            (-(self.group5()[2] * other.group0()[2]) - (self.group5()[1] * other.group0()[1]) - (self.group5()[0] * other.group0()[0]) - (self[e1] * other.group0()[3])
                + (self.group1()[2] * other.group0()[2])
                + (self.group1()[0] * other.group0()[0])
                + (self.group1()[1] * other.group0()[1])),
            // e15, e25, e35, e45
            ((swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group10()[0], self.group10()[2], self.group10()[1], self.group4()[2]]))
                + (swizzle!(other.group0(), 1, 2, 0, 1) * Simd32x4::from([self.group8()[2], self.group8()[0], self.group8()[1], self.group4()[1]]))
                + (other.group0() * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group0()[0]]))
                + (swizzle!(other.group0(), 0, 1, 2, 0) * Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group4()[0]]))
                + Simd32x4::from([
                    (-(self.group10()[1] * other.group0()[2]) - (self.group8()[1] * other.group0()[2]) - (self.group3()[0] * other.group0()[3])),
                    (-(self.group10()[0] * other.group0()[0]) - (self.group8()[2] * other.group0()[0]) - (self.group3()[1] * other.group0()[3])),
                    (-(self.group10()[2] * other.group0()[1]) - (self.group8()[0] * other.group0()[1]) - (self.group3()[2] * other.group0()[3])),
                    0.0,
                ])),
            // e41, e42, e43
            (self.group4() * Simd32x3::from(other.group0()[3])),
            // e415, e425, e435, e321
            (-(swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group6()[1], self.group6()[2], self.group6()[0], self.group6()[2]]))
                - (swizzle!(other.group0(), 3, 3, 3, 1) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group6()[1]]))
                + Simd32x4::from([
                    ((self.group6()[2] * other.group0()[1]) + (self.group1()[3] * other.group0()[0])),
                    ((self.group6()[0] * other.group0()[2]) + (self.group1()[3] * other.group0()[1])),
                    ((self.group6()[1] * other.group0()[0]) + (self.group1()[3] * other.group0()[2])),
                    (-(self.group0()[1] * other.group0()[3]) - (self.group6()[0] * other.group0()[0])),
                ])),
            // e423, e431, e412
            (self.group6() * Simd32x3::from(other.group0()[3])),
            // e235, e315, e125
            (-(self.group7() * Simd32x3::from(other.group0()[3])) - (Simd32x3::from(self.group5()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group5()[2], self.group0()[1], self.group1()[0]]))
                + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[1], self.group1()[2], self.group5()[1]]))
                + (Simd32x3::from(other.group0()[2]) * Simd32x3::from([self.group1()[1], self.group5()[0], self.group0()[1]]))
                + Simd32x3::from([
                    (-(self.group5()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
                    (-(self.group5()[2] * other.group0()[0]) - (self.group1()[0] * other.group0()[2])),
                    (-(self.group5()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group0(), 0, 1, 2, 0) * Simd32x4::from([self[e35], self[e35], self[e35], self.group10()[2]]))
                - (swizzle!(other.group0(), 1, 2, 0, 1) * Simd32x4::from([self.group4()[2], self.group4()[0], self.group4()[1], self.group10()[1]]))
                + Simd32x4::from([
                    ((self.group10()[2] * other.group0()[3]) + (self.group4()[1] * other.group0()[2])),
                    ((self.group10()[1] * other.group0()[3]) + (self.group4()[2] * other.group0()[0])),
                    ((self.group10()[0] * other.group0()[3]) + (self.group4()[0] * other.group0()[1])),
                    (-(self.group10()[0] * other.group0()[2])
                        - (self.group8()[3] * other.group0()[3])
                        - (self.group8()[2] * other.group0()[2])
                        - (self.group8()[0] * other.group0()[0])
                        - (self.group8()[1] * other.group0()[1])),
                ])),
            // e1234
            (self[e35] * other.group0()[3]),
            // e12, e31, e23
            ((Simd32x3::from(self[e35]) * Simd32x3::from([other.group0()[2], other.group0()[1], other.group0()[0]]))
                + (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group8()[2], self.group8()[1], self.group8()[0]]))
                - (swizzle!(self.group4(), 0, 2, 1) * Simd32x3::from([other.group0()[1], other.group0()[0], other.group0()[2]]))
                + (swizzle!(self.group4(), 1, 0, 2) * Simd32x3::from([other.group0()[0], other.group0()[2], other.group0()[1]]))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      412      465        0
    //    simd2       20       20        0
    //    simd3      136      144        0
    //    simd4       89       91        0
    // Totals...
    // yes simd      657      720        0
    //  no simd     1216     1301        0
    fn sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(other.group1()[3]) * Simd32x2::from([self[e35], self.group1()[3]]))
                - (Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group4()[2], self.group6()[2]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group4()[1], self.group6()[1]]))
                - (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group4()[0], self.group6()[0]]))
                + Simd32x2::from([
                    (-(self.group8()[2] * other.group1()[2]) - (self.group8()[1] * other.group1()[1]) - (self.group8()[0] * other.group1()[0])
                        + (self.group3()[3] * other.group0()[3])),
                    (-(self.group5()[3] * other.group0()[3])
                        + (self.group1()[2] * other.group1()[2])
                        + (self.group1()[0] * other.group1()[0])
                        + (self.group1()[1] * other.group1()[1])),
                ])),
            // e1, e2, e3, e4
            ((swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group1()[3]]))
                - (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group6()[2]]))
                - (swizzle!(other.group1(), 0, 1, 2, 1) * Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group6()[1]]))
                + Simd32x4::from([
                    (-(self.group6()[1] * other.group0()[2]) + (self.group6()[0] * other.group1()[3]) + (self.group5()[1] * other.group1()[2])
                        - (self.group5()[0] * other.group0()[3])
                        + (self.group1()[3] * other.group0()[0])),
                    (-(self.group6()[2] * other.group0()[0]) + (self.group6()[1] * other.group1()[3]) + (self.group5()[2] * other.group1()[0])
                        - (self.group5()[1] * other.group0()[3])
                        + (self.group1()[3] * other.group0()[1])),
                    ((self.group6()[2] * other.group1()[3]) - (self.group6()[0] * other.group0()[1]) - (self.group5()[2] * other.group0()[3])
                        + (self.group5()[0] * other.group1()[1])
                        + (self.group1()[3] * other.group0()[2])),
                    ((self.group6()[0] * other.group1()[0]) * -1.0),
                ])),
            // e5
            ((self.group7()[2] * other.group1()[2]) + (self.group7()[1] * other.group1()[1]) + (self.group7()[0] * other.group1()[0])
                - (self.group5()[3] * other.group1()[3])
                - (self.group5()[2] * other.group0()[2])
                - (self.group5()[1] * other.group0()[1])
                - (self.group5()[0] * other.group0()[0])
                - (self[e1] * other.group0()[3])
                + (self.group1()[2] * other.group0()[2])
                + (self.group1()[1] * other.group0()[1])
                + (self.group0()[1] * other.group1()[3])
                + (self.group1()[0] * other.group0()[0])),
            // e15, e25, e35, e45
            ((swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group10()[0], self.group10()[2], self.group10()[1], self.group4()[2]]))
                - (swizzle!(other.group1(), 0, 1, 2, 0) * Simd32x4::from([self.group8()[3], self.group8()[3], self.group8()[3], self.group10()[2]]))
                + (swizzle!(other.group0(), 1, 2, 0, 1) * Simd32x4::from([self.group8()[2], self.group8()[0], self.group8()[1], self.group4()[1]]))
                + (other.group0() * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group0()[0]]))
                - (swizzle!(other.group1(), 1, 2, 0, 1) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group10()[1]]))
                + (swizzle!(other.group0(), 0, 1, 2, 0) * Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group4()[0]]))
                + Simd32x4::from([
                    ((self.group10()[2] * other.group1()[3]) - (self.group10()[1] * other.group0()[2]) - (self.group8()[1] * other.group0()[2])
                        + (self.group8()[0] * other.group1()[3])
                        + (self.group3()[1] * other.group1()[2])
                        - (self.group3()[0] * other.group0()[3])),
                    ((self.group10()[1] * other.group1()[3]) - (self.group10()[0] * other.group0()[0]) - (self.group8()[2] * other.group0()[0])
                        + (self.group8()[1] * other.group1()[3])
                        + (self.group3()[2] * other.group1()[0])
                        - (self.group3()[1] * other.group0()[3])),
                    (-(self.group10()[2] * other.group0()[1]) + (self.group10()[0] * other.group1()[3]) + (self.group8()[2] * other.group1()[3])
                        - (self.group8()[0] * other.group0()[1])
                        - (self.group3()[2] * other.group0()[3])
                        + (self.group3()[0] * other.group1()[1])),
                    (-(self.group10()[0] * other.group1()[2]) - (self[e35] * other.group1()[3])),
                ])),
            // e41, e42, e43
            ((Simd32x3::from(self[e35]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (swizzle!(self.group4(), 2, 0, 2) * Simd32x3::from([other.group1()[1], other.group1()[2], other.group0()[3]]))
                + (swizzle!(self.group4(), 0, 1, 1) * Simd32x3::from([other.group0()[3], other.group0()[3], other.group1()[0]]))
                - (swizzle!(self.group4(), 1, 2, 0) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]))),
            // e415, e425, e435, e321
            (-(swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group6()[1], self.group6()[2], self.group6()[0], self.group6()[2]]))
                + (swizzle!(other.group1(), 3, 3, 3, 2) * Simd32x4::from([self.group6()[0], self.group6()[1], self.group6()[2], self.group5()[2]]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (swizzle!(other.group0(), 3, 3, 3, 1) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group6()[1]]))
                + (swizzle!(other.group1(), 2, 0, 1, 1) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group5()[1]]))
                + Simd32x4::from([
                    ((self.group6()[2] * other.group0()[1]) - (self.group5()[3] * other.group1()[0]) - (self.group1()[2] * other.group1()[1])),
                    ((self.group6()[0] * other.group0()[2]) - (self.group5()[3] * other.group1()[1]) - (self.group1()[0] * other.group1()[2])),
                    ((self.group6()[1] * other.group0()[0]) - (self.group5()[3] * other.group1()[2]) - (self.group1()[1] * other.group1()[0])),
                    (-(self.group6()[0] * other.group0()[0]) + (self.group5()[0] * other.group1()[0]) - (self.group0()[1] * other.group0()[3])),
                ])),
            // e423, e431, e412
            ((swizzle!(self.group6(), 2, 1, 2) * Simd32x3::from([other.group1()[1], other.group0()[3], other.group0()[3]]))
                - (swizzle!(self.group6(), 1, 2, 0) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (swizzle!(self.group6(), 0, 0, 1) * Simd32x3::from([other.group0()[3], other.group1()[2], other.group1()[0]]))),
            // e235, e315, e125
            (-(swizzle!(self.group7(), 2, 1, 2) * Simd32x3::from([other.group1()[1], other.group0()[3], other.group0()[3]]))
                + (swizzle!(self.group7(), 1, 2, 0) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]))
                - (swizzle!(self.group7(), 0, 0, 1) * Simd32x3::from([other.group0()[3], other.group1()[2], other.group1()[0]]))
                - (Simd32x3::from(self.group5()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group5()[2], self.group0()[1], self.group1()[0]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group5()[0], self.group5()[1], self.group5()[2]]))
                - (Simd32x3::from(self[e1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(other.group0()[2]) * Simd32x3::from([self.group1()[1], self.group5()[0], self.group0()[1]]))
                + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[1], self.group1()[2], self.group5()[1]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + Simd32x3::from([
                    (-(self.group5()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
                    (-(self.group5()[2] * other.group0()[0]) - (self.group1()[0] * other.group0()[2])),
                    (-(self.group5()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group1(), 1, 2, 0, 3) * Simd32x4::from([self.group10()[0], self.group10()[2], self.group10()[1], self.group3()[3]]))
                - (swizzle!(other.group0(), 0, 1, 2, 0) * Simd32x4::from([self[e35], self[e35], self[e35], self.group10()[2]]))
                - (swizzle!(other.group0(), 1, 2, 0, 1) * Simd32x4::from([self.group4()[2], self.group4()[0], self.group4()[1], self.group10()[1]]))
                + (swizzle!(other.group1(), 0, 1, 2, 2) * Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group3()[2]]))
                + Simd32x4::from([
                    ((self.group10()[2] * other.group0()[3]) - (self.group10()[1] * other.group1()[2]) + (self.group4()[1] * other.group0()[2])
                        - (self.group4()[0] * other.group1()[3])),
                    ((self.group10()[1] * other.group0()[3]) - (self.group10()[0] * other.group1()[0]) + (self.group4()[2] * other.group0()[0])
                        - (self.group4()[1] * other.group1()[3])),
                    (-(self.group10()[2] * other.group1()[1]) + (self.group10()[0] * other.group0()[3]) - (self.group4()[2] * other.group1()[3])
                        + (self.group4()[0] * other.group0()[1])),
                    (-(self.group10()[0] * other.group0()[2])
                        - (self.group8()[3] * other.group0()[3])
                        - (self.group8()[2] * other.group0()[2])
                        - (self.group8()[1] * other.group0()[1])
                        - (self.group8()[0] * other.group0()[0])
                        + (self.group3()[1] * other.group1()[1])
                        + (self.group0()[0] * other.group1()[3])
                        + (self.group3()[0] * other.group1()[0])),
                ])),
            // e1234
            ((self[e35] * other.group0()[3]) - (self.group4()[2] * other.group1()[2]) - (self.group4()[0] * other.group1()[0]) - (self.group4()[1] * other.group1()[1])),
            // e12, e31, e23
            ((Simd32x3::from(self[e35]) * Simd32x3::from([other.group0()[2], other.group0()[1], other.group0()[0]]))
                + (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group8()[2], self.group8()[1], self.group8()[0]]))
                + (swizzle!(self.group4(), 2, 1, 2) * Simd32x3::from([other.group1()[3], other.group1()[3], other.group0()[1]]))
                + (swizzle!(self.group4(), 1, 0, 0) * Simd32x3::from([other.group0()[0], other.group0()[2], other.group1()[3]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group1()[2], other.group1()[1], other.group1()[0]]))
                - (swizzle!(self.group4(), 0, 2, 1) * Simd32x3::from([other.group0()[1], other.group0()[0], other.group0()[2]]))
                + Simd32x3::from([
                    ((self.group8()[1] * other.group1()[0]) - (self.group8()[0] * other.group1()[1])),
                    (-(self.group8()[2] * other.group1()[0]) + (self.group8()[0] * other.group1()[2])),
                    ((self.group8()[2] * other.group1()[1]) - (self.group8()[1] * other.group1()[2])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      423      469        0
    //    simd2       16       16        0
    //    simd3      131      141        0
    //    simd4       76       78        0
    // Totals...
    // yes simd      646      704        0
    //  no simd     1152     1236        0
    fn sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((self.group6()[2] * other.group1()[2])
                    + (self.group6()[1] * other.group1()[1])
                    + (self.group6()[0] * other.group1()[0])
                    + (self.group5()[2] * other.group0()[2])
                    + (self.group5()[0] * other.group0()[0])
                    + (self.group5()[1] * other.group0()[1])),
                (-(self.group10()[2] * other.group0()[0])
                    - (self.group10()[1] * other.group0()[1])
                    - (self.group10()[0] * other.group0()[2])
                    - (self.group4()[2] * other.group1()[2])
                    - (self.group4()[0] * other.group1()[0])
                    - (self.group4()[1] * other.group1()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self[e35] * other.group1()[0]) - (self.group8()[2] * other.group0()[1]) + (self.group8()[1] * other.group0()[2]) + (self.group4()[2] * other.group1()[1])
                    - (self.group3()[3] * other.group0()[0])
                    - (self.group4()[1] * other.group1()[2])),
                ((self[e35] * other.group1()[1]) + (self.group8()[2] * other.group0()[0])
                    - (self.group8()[0] * other.group0()[2])
                    - (self.group4()[2] * other.group1()[0])
                    - (self.group3()[3] * other.group0()[1])
                    + (self.group4()[0] * other.group1()[2])),
                ((self[e35] * other.group1()[2]) - (self.group8()[1] * other.group0()[0]) + (self.group8()[0] * other.group0()[1]) + (self.group4()[1] * other.group1()[0])
                    - (self.group3()[3] * other.group0()[2])
                    - (self.group4()[0] * other.group1()[1])),
                (-(self.group4()[2] * other.group0()[2]) - (self.group4()[0] * other.group0()[0]) - (self.group4()[1] * other.group0()[1])),
            ]),
            // e5
            (-(self.group10()[2] * other.group1()[0])
                - (self.group10()[1] * other.group1()[1])
                - (self.group10()[0] * other.group1()[2])
                - (self.group8()[2] * other.group1()[2])
                - (self.group8()[1] * other.group1()[1])
                - (self.group8()[0] * other.group1()[0])
                - (self.group3()[2] * other.group0()[2])
                - (self.group3()[0] * other.group0()[0])
                - (self.group3()[1] * other.group0()[1])),
            // e15, e25, e35, e45
            (-(Simd32x4::from(other.group1()[1]) * Simd32x4::from([self.group5()[2], self.group0()[1], self.group1()[0], self.group6()[1]]))
                - (Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group0()[1], self.group1()[2], self.group5()[1], self.group6()[0]]))
                - (Simd32x4::from(other.group1()[2]) * Simd32x4::from([self.group1()[1], self.group5()[0], self.group0()[1], self.group6()[2]]))
                + Simd32x4::from([
                    (-(self.group7()[2] * other.group0()[1])
                        + (self.group7()[1] * other.group0()[2])
                        + (self.group5()[3] * other.group1()[0])
                        + (self.group5()[1] * other.group1()[2])
                        - (self[e1] * other.group0()[0])
                        + (self.group1()[2] * other.group1()[1])),
                    ((self.group7()[2] * other.group0()[0]) - (self.group7()[0] * other.group0()[2])
                        + (self.group5()[3] * other.group1()[1])
                        + (self.group5()[2] * other.group1()[0])
                        - (self[e1] * other.group0()[1])
                        + (self.group1()[0] * other.group1()[2])),
                    (-(self.group7()[1] * other.group0()[0])
                        + (self.group7()[0] * other.group0()[1])
                        + (self.group5()[3] * other.group1()[2])
                        + (self.group5()[0] * other.group1()[1])
                        - (self[e1] * other.group0()[2])
                        + (self.group1()[1] * other.group1()[0])),
                    (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
            // e41, e42, e43
            (-(swizzle!(other.group0(), 1, 1, 0) * Simd32x3::from([self.group6()[2], self.group1()[3], self.group6()[1]]))
                - (swizzle!(other.group0(), 0, 2, 2) * Simd32x3::from([self.group1()[3], self.group6()[0], self.group1()[3]]))
                + (swizzle!(self.group6(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1))),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group10()[1] * other.group0()[2])
                    + (self.group10()[0] * other.group0()[1])
                    + (self[e35] * other.group1()[0])
                    + (self.group4()[2] * other.group1()[1])
                    + (self.group0()[0] * other.group0()[0])
                    - (self.group4()[1] * other.group1()[2])),
                ((self.group10()[2] * other.group0()[2]) - (self.group10()[0] * other.group0()[0]) + (self[e35] * other.group1()[1]) - (self.group4()[2] * other.group1()[0])
                    + (self.group0()[0] * other.group0()[1])
                    + (self.group4()[0] * other.group1()[2])),
                (-(self.group10()[2] * other.group0()[1])
                    + (self.group10()[1] * other.group0()[0])
                    + (self[e35] * other.group1()[2])
                    + (self.group4()[1] * other.group1()[0])
                    + (self.group0()[0] * other.group0()[2])
                    - (self.group4()[0] * other.group1()[1])),
                ((self.group8()[2] * other.group0()[2]) + (self.group8()[1] * other.group0()[1]) + (self.group8()[0] * other.group0()[0])
                    - (self.group4()[2] * other.group1()[2])
                    - (self.group4()[0] * other.group1()[0])
                    - (self.group4()[1] * other.group1()[1])),
            ]),
            // e423, e431, e412
            ((Simd32x3::from(self[e35]) * other.group0()) - (swizzle!(self.group4(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1))
                + (swizzle!(self.group4(), 2, 0, 1) * swizzle!(other.group0(), 1, 2, 0))),
            // e235, e315, e125
            (-(swizzle!(self.group10(), 1, 0, 2) * swizzle!(other.group1(), 2, 0, 1))
                + (swizzle!(self.group10(), 0, 2, 1) * swizzle!(other.group1(), 1, 2, 0))
                + (Simd32x3::from(self.group8()[3]) * other.group0())
                + (swizzle!(other.group1(), 1, 2, 0) * Simd32x3::from([self.group8()[2], self.group8()[0], self.group8()[1]]))
                - (swizzle!(other.group1(), 2, 0, 1) * Simd32x3::from([self.group8()[1], self.group8()[2], self.group8()[0]]))
                + (Simd32x3::from(self.group3()[3]) * other.group1())
                + (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group3()[2], self.group3()[0], self.group3()[1]]))
                + (Simd32x3::from(self.group0()[0]) * other.group1())
                - (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group3()[1], self.group3()[2], self.group3()[0]]))),
            // e4235, e4315, e4125, e3215
            ((swizzle!(self.group5(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group6()[2] * other.group1()[1]) - (self.group6()[1] * other.group1()[2])
                        + (self.group1()[3] * other.group1()[0])
                        + (self.group1()[2] * other.group0()[1])),
                    (-(self.group6()[2] * other.group1()[0])
                        + (self.group6()[0] * other.group1()[2])
                        + (self.group1()[3] * other.group1()[1])
                        + (self.group1()[0] * other.group0()[2])),
                    ((self.group6()[1] * other.group1()[0]) - (self.group6()[0] * other.group1()[1])
                        + (self.group1()[3] * other.group1()[2])
                        + (self.group1()[1] * other.group0()[0])),
                    ((self.group7()[2] * other.group0()[2])
                        + (self.group7()[1] * other.group0()[1])
                        + (self.group7()[0] * other.group0()[0])
                        + (self.group5()[1] * other.group1()[1])
                        + (self.group5()[0] * other.group1()[0])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group1()[1] * other.group1()[1])),
                ])),
            // e1234
            ((self.group6()[2] * other.group0()[2]) + (self.group6()[0] * other.group0()[0]) + (self.group6()[1] * other.group0()[1])),
            // e12, e31, e23
            (-(swizzle!(self.group6(), 1, 0, 2) * swizzle!(other.group1(), 0, 2, 1)) + (swizzle!(self.group6(), 0, 2, 1) * swizzle!(other.group1(), 1, 0, 2))
                - (swizzle!(other.group0(), 0, 2, 1) * Simd32x3::from([self.group5()[1], self.group5()[0], self.group5()[2]]))
                + (swizzle!(other.group0(), 1, 0, 2) * Simd32x3::from([self.group5()[0], self.group5()[2], self.group5()[1]]))
                - (Simd32x3::from(self.group0()[1]) * swizzle!(other.group0(), 2, 1, 0))
                - (Simd32x3::from(self.group1()[3]) * swizzle!(other.group1(), 2, 1, 0))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      399      446        0
    //    simd2       16       16        0
    //    simd3      134      142        0
    //    simd4       97       99        0
    // Totals...
    // yes simd      646      703        0
    //  no simd     1221     1300        0
    fn sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((self.group6()[2] * other.group1()[2])
                    + (self.group6()[1] * other.group1()[1])
                    + (self.group6()[0] * other.group1()[0])
                    + (self.group5()[2] * other.group0()[2])
                    + (self.group5()[1] * other.group0()[1])
                    + (self.group5()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[3])
                    - (self.group1()[3] * other.group1()[3])),
                (-(self.group10()[2] * other.group0()[0]) - (self.group10()[1] * other.group0()[1]) - (self.group10()[0] * other.group0()[2]) + (self[e35] * other.group1()[3])
                    - (self.group4()[2] * other.group1()[2])
                    - (self.group4()[1] * other.group1()[1])
                    + (self.group0()[0] * other.group0()[3])
                    - (self.group4()[0] * other.group1()[0])),
            ]),
            // e1, e2, e3, e4
            ((Simd32x4::from(self[e35]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                - (swizzle!(other.group0(), 1, 3, 3, 2) * Simd32x4::from([self.group8()[2], self.group8()[1], self.group8()[2], self.group4()[2]]))
                - (swizzle!(other.group0(), 3, 2, 0, 0) * Simd32x4::from([self.group8()[0], self.group8()[0], self.group8()[1], self.group4()[0]]))
                - (swizzle!(other.group0(), 0, 1, 2, 1) * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group4()[1]]))
                + Simd32x4::from([
                    ((self.group8()[1] * other.group0()[2]) + (self.group4()[2] * other.group1()[1]) - (self.group4()[1] * other.group1()[2])
                        + (self.group4()[0] * other.group1()[3])),
                    ((self.group8()[2] * other.group0()[0]) - (self.group4()[2] * other.group1()[0])
                        + (self.group4()[1] * other.group1()[3])
                        + (self.group4()[0] * other.group1()[2])),
                    ((self.group8()[0] * other.group0()[1]) + (self.group4()[2] * other.group1()[3]) + (self.group4()[1] * other.group1()[0])
                        - (self.group4()[0] * other.group1()[1])),
                    0.0,
                ])),
            // e5
            (-(self.group10()[2] * other.group1()[0]) - (self.group10()[1] * other.group1()[1]) - (self.group10()[0] * other.group1()[2]) + (self.group8()[3] * other.group0()[3])
                - (self.group8()[2] * other.group1()[2])
                - (self.group8()[1] * other.group1()[1])
                - (self.group8()[0] * other.group1()[0])
                + (self.group3()[3] * other.group1()[3])
                - (self.group3()[2] * other.group0()[2])
                - (self.group3()[1] * other.group0()[1])
                + (self.group0()[0] * other.group1()[3])
                - (self.group3()[0] * other.group0()[0])),
            // e15, e25, e35, e45
            (-(swizzle!(other.group0(), 1, 3, 3, 2) * Simd32x4::from([self.group7()[2], self.group7()[1], self.group7()[2], self.group1()[2]]))
                + (swizzle!(other.group0(), 2, 0, 1, 3) * Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[0], self.group5()[3]]))
                - (swizzle!(other.group0(), 3, 2, 0, 0) * Simd32x4::from([self.group7()[0], self.group7()[0], self.group7()[1], self.group1()[0]]))
                + (other.group1() * Simd32x4::from([self.group5()[3], self.group5()[3], self.group5()[3], self.group1()[3]]))
                - (swizzle!(other.group1(), 1, 3, 3, 2) * Simd32x4::from([self.group5()[2], self.group5()[1], self.group5()[2], self.group6()[2]]))
                - (swizzle!(other.group1(), 3, 2, 0, 1) * Simd32x4::from([self.group5()[0], self.group5()[0], self.group5()[1], self.group6()[1]]))
                - (swizzle!(other.group0(), 0, 1, 2, 1) * Simd32x4::from([self[e1], self[e1], self[e1], self.group1()[1]]))
                - (swizzle!(other.group1(), 2, 0, 2, 0) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group0()[1], self.group6()[0]]))
                + Simd32x4::from([
                    ((self.group5()[1] * other.group1()[2]) + (self.group1()[2] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])
                        + (self.group1()[0] * other.group1()[3])),
                    ((self.group5()[2] * other.group1()[0]) + (self.group1()[1] * other.group1()[3]) - (self.group0()[1] * other.group1()[1])
                        + (self.group1()[0] * other.group1()[2])),
                    ((self.group5()[0] * other.group1()[1]) + (self.group1()[2] * other.group1()[3]) + (self.group1()[1] * other.group1()[0])
                        - (self.group1()[0] * other.group1()[1])),
                    0.0,
                ])),
            // e41, e42, e43
            (-(swizzle!(self.group6(), 2, 1, 2) * Simd32x3::from([other.group0()[1], other.group0()[3], other.group0()[3]]))
                + (swizzle!(self.group6(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (swizzle!(self.group6(), 0, 0, 1) * Simd32x3::from([other.group0()[3], other.group0()[2], other.group0()[0]]))),
            // e415, e425, e435, e321
            ((swizzle!(other.group0(), 3, 2, 0, 2) * Simd32x4::from([self.group10()[2], self.group10()[2], self.group10()[1], self.group8()[2]]))
                - (swizzle!(other.group0(), 2, 0, 1, 3) * Simd32x4::from([self.group10()[1], self.group10()[0], self.group10()[2], self.group3()[3]]))
                + (swizzle!(other.group0(), 1, 3, 3, 1) * Simd32x4::from([self.group10()[0], self.group10()[1], self.group10()[0], self.group8()[1]]))
                + (Simd32x4::from(self[e35]) * other.group1())
                - (swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group4()[1], self.group4()[2], self.group4()[0], self.group4()[2]]))
                + (swizzle!(other.group0(), 0, 1, 2, 0) * Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group8()[0]]))
                + Simd32x4::from([
                    ((self.group4()[2] * other.group1()[1]) + (self.group4()[0] * other.group1()[3])),
                    ((self.group4()[1] * other.group1()[3]) + (self.group4()[0] * other.group1()[2])),
                    ((self.group4()[2] * other.group1()[3]) + (self.group4()[1] * other.group1()[0])),
                    (-(self.group4()[1] * other.group1()[1]) - (self.group4()[0] * other.group1()[0])),
                ])),
            // e423, e431, e412
            ((Simd32x3::from(self[e35]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (swizzle!(self.group4(), 2, 0, 2) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[3]]))
                + (swizzle!(self.group4(), 0, 1, 1) * Simd32x3::from([other.group0()[3], other.group0()[3], other.group0()[0]]))
                - (swizzle!(self.group4(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))),
            // e235, e315, e125
            ((swizzle!(self.group10(), 2, 2, 1) * Simd32x3::from([other.group1()[3], other.group1()[2], other.group1()[0]]))
                - (swizzle!(self.group10(), 1, 0, 2) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]))
                + (swizzle!(self.group10(), 0, 1, 0) * Simd32x3::from([other.group1()[1], other.group1()[3], other.group1()[3]]))
                + (Simd32x3::from(self.group8()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group8()[0], self.group8()[1], self.group8()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + Simd32x3::from([
                    ((self.group8()[2] * other.group1()[1]) - (self.group8()[1] * other.group1()[2]) + (self.group3()[2] * other.group0()[1])
                        - (self.group3()[1] * other.group0()[2])),
                    (-(self.group8()[2] * other.group1()[0]) + (self.group8()[0] * other.group1()[2]) - (self.group3()[2] * other.group0()[0])
                        + (self.group3()[0] * other.group0()[2])),
                    ((self.group8()[1] * other.group1()[0]) - (self.group8()[0] * other.group1()[1]) + (self.group3()[1] * other.group0()[0])
                        - (self.group3()[0] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group1(), 1, 3, 3, 3) * Simd32x4::from([self.group6()[2], self.group6()[1], self.group6()[2], self.group5()[3]]))
                - (swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group6()[1], self.group6()[2], self.group6()[0], self.group1()[2]]))
                + (swizzle!(other.group1(), 3, 2, 0, 2) * Simd32x4::from([self.group6()[0], self.group6()[0], self.group6()[1], self.group5()[2]]))
                + (swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self.group5()[3], self.group5()[3], self.group5()[3], self.group7()[2]]))
                + (swizzle!(other.group1(), 0, 1, 2, 1) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group5()[1]]))
                + (swizzle!(other.group0(), 1, 2, 3, 1) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[2], self.group7()[1]]))
                + (swizzle!(other.group0(), 3, 3, 0, 0) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[1], self.group7()[0]]))
                - (swizzle!(other.group0(), 2, 0, 1, 3) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self[e1]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    ((self.group5()[0] * other.group1()[0])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group0()[1] * other.group1()[3])
                        - (self.group1()[0] * other.group1()[0])),
                ])),
            // e1234
            ((self.group6()[2] * other.group0()[2]) + (self.group6()[1] * other.group0()[1]) - (self.group1()[3] * other.group0()[3]) + (self.group6()[0] * other.group0()[0])),
            // e12, e31, e23
            (-(swizzle!(self.group6(), 2, 1, 2) * Simd32x3::from([other.group1()[3], other.group1()[3], other.group1()[1]]))
                - (swizzle!(self.group6(), 1, 0, 0) * Simd32x3::from([other.group1()[0], other.group1()[2], other.group1()[3]]))
                + (swizzle!(self.group6(), 0, 2, 1) * Simd32x3::from([other.group1()[1], other.group1()[0], other.group1()[2]]))
                - (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group5()[2], self.group5()[1], self.group5()[0]]))
                - (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[2], other.group0()[1], other.group0()[0]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[2], other.group1()[1], other.group1()[0]]))
                + Simd32x3::from([
                    (-(self.group5()[1] * other.group0()[0]) + (self.group5()[0] * other.group0()[1])),
                    ((self.group5()[2] * other.group0()[0]) - (self.group5()[0] * other.group0()[2])),
                    (-(self.group5()[2] * other.group0()[1]) + (self.group5()[1] * other.group0()[2])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      668      720        0
    //    simd2       32       32        0
    //    simd3      228      236        0
    //    simd4      142      144        0
    // Totals...
    // yes simd     1070     1132        0
    //  no simd     1984     2068        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (-(Simd32x2::from(self.group10()[2]) * Simd32x2::from([other.group10()[2], other.group5()[0]]))
                - (Simd32x2::from(self.group10()[1]) * Simd32x2::from([other.group10()[1], other.group5()[1]]))
                - (Simd32x2::from(self.group10()[0]) * Simd32x2::from([other.group10()[0], other.group5()[2]]))
                + (Simd32x2::from(self[e35]) * Simd32x2::from([other.group8()[3], other[e1]]))
                + (Simd32x2::from(self.group8()[3]) * Simd32x2::from([other[e35], other.group1()[3]]))
                - (Simd32x2::from(self.group5()[3]) * Simd32x2::from([other.group5()[3], other.group3()[3]]))
                - (Simd32x2::from(other.group3()[2]) * Simd32x2::from([self.group4()[2], self.group6()[2]]))
                - (Simd32x2::from(other.group3()[1]) * Simd32x2::from([self.group4()[1], self.group6()[1]]))
                - (Simd32x2::from(other.group3()[0]) * Simd32x2::from([self.group4()[0], self.group6()[0]]))
                - (Simd32x2::from(other.group4()[2]) * Simd32x2::from([self.group3()[2], self.group7()[2]]))
                - (Simd32x2::from(other.group4()[1]) * Simd32x2::from([self.group3()[1], self.group7()[1]]))
                - (Simd32x2::from(other.group4()[0]) * Simd32x2::from([self.group3()[0], self.group7()[0]]))
                + (Simd32x2::from(other.group1()[2]) * Simd32x2::from([self.group1()[2], self.group8()[2]]))
                + (Simd32x2::from(other.group1()[1]) * Simd32x2::from([self.group1()[1], self.group8()[1]]))
                + (Simd32x2::from(other.group1()[0]) * Simd32x2::from([self.group1()[0], self.group8()[0]]))
                + (Simd32x2::from(self.group0()[0]) * other.group0())
                + Simd32x2::from([
                    (-(self.group8()[2] * other.group8()[2]) - (self.group8()[1] * other.group8()[1]) - (self.group8()[0] * other.group8()[0])
                        + (self.group7()[2] * other.group6()[2])
                        + (self.group7()[1] * other.group6()[1])
                        + (self.group7()[0] * other.group6()[0])
                        + (self.group6()[2] * other.group7()[2])
                        + (self.group6()[1] * other.group7()[1])
                        + (self.group6()[0] * other.group7()[0])
                        + (self.group5()[2] * other.group5()[2])
                        + (self.group5()[1] * other.group5()[1])
                        + (self.group5()[0] * other.group5()[0])
                        + (self.group3()[3] * other.group3()[3])
                        - (self[e1] * other.group1()[3])
                        - (self.group1()[3] * other[e1])
                        - (self.group0()[1] * other.group0()[1])),
                    (-(self.group5()[2] * other.group10()[0])
                        - (self.group5()[1] * other.group10()[1])
                        - (self.group5()[0] * other.group10()[2])
                        - (self.group4()[2] * other.group7()[2])
                        - (self.group4()[1] * other.group7()[1])
                        - (self.group4()[0] * other.group7()[0])
                        - (self.group3()[3] * other.group5()[3])
                        - (self.group3()[2] * other.group6()[2])
                        - (self.group3()[1] * other.group6()[1])
                        - (self.group3()[0] * other.group6()[0])
                        + (self[e1] * other[e35])
                        + (self.group1()[3] * other.group8()[3])
                        + (self.group1()[2] * other.group8()[2])
                        + (self.group1()[1] * other.group8()[1])
                        + (self.group1()[0] * other.group8()[0])
                        + (self.group0()[1] * other.group0()[0])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group1(), 2, 0, 1, 3) * Simd32x4::from([self.group10()[1], self.group10()[0], self.group10()[2], self.group3()[3]]))
                + (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group10()[0], self.group10()[2], self.group10()[1], self.group4()[2]]))
                + (Simd32x4::from(self[e35]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group0()[1]]))
                - (swizzle!(other.group5(), 1, 2, 0, 3) * Simd32x4::from([self.group8()[2], self.group8()[0], self.group8()[1], self[e35]]))
                + (swizzle!(self.group8(), 1, 2, 0, 2) * Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group6()[2]]))
                + (swizzle!(other.group3(), 1, 2, 0, 3) * Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group1()[3]]))
                + (Simd32x4::from(self.group5()[3]) * Simd32x4::from([other.group10()[2], other.group10()[1], other.group10()[0], other[e35]]))
                - (swizzle!(self.group5(), 2, 1, 2, 2) * Simd32x4::from([other.group8()[1], other.group3()[3], other.group3()[3], other.group4()[2]]))
                - (swizzle!(self.group5(), 0, 0, 1, 1) * Simd32x4::from([other.group3()[3], other.group8()[2], other.group8()[0], other.group4()[1]]))
                - (swizzle!(other.group5(), 0, 1, 2, 2) * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group4()[2]]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[0]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group10()[0], other.group10()[2], other.group10()[1], other.group4()[2]]))
                + (swizzle!(other.group1(), 0, 1, 2, 1) * Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group4()[1]]))
                - (swizzle!(other.group8(), 0, 1, 2, 2) * Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group6()[2]]))
                + Simd32x4::from([
                    ((self.group10()[2] * other.group5()[3])
                        - (self.group8()[3] * other.group6()[0])
                        - (self.group8()[0] * other.group0()[1])
                        - (self.group7()[2] * other.group4()[1])
                        + (self.group7()[1] * other.group4()[2])
                        - (self.group7()[0] * other[e35])
                        - (self.group6()[1] * other.group3()[2])
                        + (self.group6()[0] * other.group8()[3])
                        + (self.group5()[1] * other.group8()[2])
                        + (self.group4()[2] * other.group7()[1])
                        - (self.group4()[1] * other.group7()[2])
                        + (self.group4()[0] * other[e1])
                        - (self.group3()[2] * other.group6()[1])
                        + (self.group3()[1] * other.group6()[2])
                        - (self.group3()[0] * other.group1()[3])
                        - (self[e1] * other.group4()[0])
                        + (self.group1()[2] * other.group10()[1])
                        + (self.group1()[0] * other.group0()[0])),
                    ((self.group10()[1] * other.group5()[3]) - (self.group8()[3] * other.group6()[1]) - (self.group8()[1] * other.group0()[1])
                        + (self.group7()[2] * other.group4()[0])
                        - (self.group7()[1] * other[e35])
                        - (self.group7()[0] * other.group4()[2])
                        - (self.group6()[2] * other.group3()[0])
                        + (self.group6()[1] * other.group8()[3])
                        + (self.group5()[2] * other.group8()[0])
                        - (self.group4()[2] * other.group7()[0])
                        + (self.group4()[1] * other[e1])
                        + (self.group4()[0] * other.group7()[2])
                        + (self.group3()[2] * other.group6()[0])
                        - (self.group3()[1] * other.group1()[3])
                        - (self.group3()[0] * other.group6()[2])
                        - (self[e1] * other.group4()[1])
                        + (self.group1()[1] * other.group0()[0])
                        + (self.group1()[0] * other.group10()[0])),
                    ((self.group10()[0] * other.group5()[3])
                        - (self.group8()[3] * other.group6()[2])
                        - (self.group8()[2] * other.group0()[1])
                        - (self.group7()[2] * other[e35])
                        - (self.group7()[1] * other.group4()[0])
                        + (self.group7()[0] * other.group4()[1])
                        + (self.group6()[2] * other.group8()[3])
                        - (self.group6()[0] * other.group3()[1])
                        + (self.group5()[0] * other.group8()[1])
                        + (self.group4()[2] * other[e1])
                        + (self.group4()[1] * other.group7()[0])
                        - (self.group4()[0] * other.group7()[1])
                        - (self.group3()[2] * other.group1()[3])
                        - (self.group3()[1] * other.group6()[0])
                        + (self.group3()[0] * other.group6()[1])
                        - (self[e1] * other.group4()[2])
                        + (self.group1()[2] * other.group0()[0])
                        + (self.group1()[1] * other.group10()[2])),
                    (-(self.group10()[2] * other.group6()[0]) - (self.group10()[1] * other.group6()[1]) - (self.group10()[0] * other.group6()[2])
                        + (self.group8()[1] * other.group6()[1])
                        + (self.group8()[0] * other.group6()[0])
                        - (self.group6()[2] * other.group10()[0])
                        - (self.group6()[1] * other.group10()[1])
                        - (self.group6()[1] * other.group8()[1])
                        - (self.group6()[0] * other.group10()[2])
                        - (self.group6()[0] * other.group8()[0])
                        - (self.group5()[0] * other.group4()[0])
                        - (self.group4()[1] * other.group5()[1])
                        - (self.group4()[0] * other.group5()[0])
                        + (self.group4()[0] * other.group1()[0])
                        - (self.group1()[1] * other.group4()[1])
                        - (self.group1()[0] * other.group4()[0])
                        + (self.group0()[0] * other.group1()[3])
                        + (self.group0()[1] * other[e35])),
                ])),
            // e5
            (-(self.group10()[2] * other.group7()[0]) - (self.group10()[1] * other.group7()[1]) - (self.group10()[0] * other.group7()[2])
                + (self.group8()[3] * other.group5()[3])
                + (self.group8()[3] * other.group0()[1])
                - (self.group8()[2] * other.group7()[2])
                - (self.group8()[1] * other.group7()[1])
                - (self.group8()[0] * other.group7()[0])
                - (self.group7()[2] * other.group10()[0])
                + (self.group7()[2] * other.group8()[2])
                - (self.group7()[1] * other.group10()[1])
                + (self.group7()[1] * other.group8()[1])
                - (self.group7()[0] * other.group10()[2])
                + (self.group7()[0] * other.group8()[0])
                - (self.group5()[3] * other.group8()[3])
                - (self.group5()[2] * other.group3()[2])
                - (self.group5()[1] * other.group3()[1])
                - (self.group5()[0] * other.group3()[0])
                + (self.group3()[3] * other[e1])
                - (self.group3()[2] * other.group5()[2])
                - (self.group3()[2] * other.group1()[2])
                - (self.group3()[1] * other.group5()[1])
                - (self.group3()[1] * other.group1()[1])
                - (self.group3()[0] * other.group5()[0])
                - (self.group3()[0] * other.group1()[0])
                - (self[e1] * other.group3()[3])
                + (self[e1] * other.group0()[0])
                + (self.group1()[2] * other.group3()[2])
                + (self.group1()[1] * other.group3()[1])
                + (self.group1()[0] * other.group3()[0])
                + (self.group0()[0] * other[e1])
                + (self.group0()[1] * other.group8()[3])),
            // e15, e25, e35, e45
            ((swizzle!(other.group3(), 1, 2, 0, 2) * Simd32x4::from([self.group10()[0], self.group10()[2], self.group10()[1], self.group4()[2]]))
                + (Simd32x4::from(self.group8()[3]) * Simd32x4::from([other.group10()[2], other.group10()[1], other.group10()[0], other[e35]]))
                - (swizzle!(other.group8(), 0, 1, 2, 0) * Simd32x4::from([self.group8()[3], self.group8()[3], self.group8()[3], self.group10()[2]]))
                + (swizzle!(other.group3(), 1, 2, 0, 1) * Simd32x4::from([self.group8()[2], self.group8()[0], self.group8()[1], self.group4()[1]]))
                - (swizzle!(self.group8(), 1, 2, 0, 2) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group10()[0]]))
                - (swizzle!(other.group5(), 1, 3, 3, 2) * Simd32x4::from([self.group7()[2], self.group7()[1], self.group7()[2], self.group1()[2]]))
                - (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group7()[2], self.group7()[0], self.group7()[1], self.group5()[2]]))
                + (swizzle!(other.group5(), 2, 0, 1, 3) * Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[0], self.group0()[1]]))
                - (swizzle!(other.group5(), 3, 2, 0, 1) * Simd32x4::from([self.group7()[0], self.group7()[0], self.group7()[1], self.group1()[1]]))
                + (Simd32x4::from(self.group5()[3]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group0()[1]]))
                - (swizzle!(self.group5(), 2, 1, 2, 1) * Simd32x4::from([other.group7()[1], other[e1], other[e1], other.group1()[1]]))
                - (swizzle!(self.group5(), 0, 0, 1, 0) * Simd32x4::from([other[e1], other.group7()[2], other.group7()[0], other.group1()[0]]))
                + (swizzle!(other.group3(), 0, 1, 2, 0) * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group4()[0]]))
                + (swizzle!(self.group3(), 2, 2, 2, 3) * Simd32x4::from([other.group10()[1], other.group8()[0], other.group0()[0], other.group0()[0]]))
                - (Simd32x4::from(self.group3()[2]) * Simd32x4::from([other.group8()[1], other.group10()[2], other.group3()[3], other.group4()[2]]))
                - (Simd32x4::from(self.group3()[1]) * Simd32x4::from([other.group10()[0], other.group3()[3], other.group8()[0], other.group4()[1]]))
                - (Simd32x4::from(self.group3()[0]) * Simd32x4::from([other.group3()[3], other.group8()[2], other.group10()[1], other.group4()[0]]))
                - (Simd32x4::from(self[e1]) * Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group1()[3]]))
                + (swizzle!(self.group1(), 2, 1, 2, 3) * Simd32x4::from([other.group7()[1], other[e1], other[e1], other[e1]]))
                - (swizzle!(self.group1(), 1, 2, 0, 0) * Simd32x4::from([other.group7()[2], other.group7()[0], other.group7()[1], other.group5()[0]]))
                + (Simd32x4::from(self.group0()[0]) * other.group3())
                + Simd32x4::from([
                    ((self.group10()[2] * other.group8()[3]) - (self.group10()[1] * other.group3()[2])
                        + (self.group8()[0] * other.group8()[3])
                        + (self.group7()[1] * other.group1()[2])
                        - (self.group7()[0] * other.group0()[1])
                        + (self.group5()[1] * other.group7()[2])
                        + (self.group3()[1] * other.group8()[2])
                        + (self.group3()[0] * other.group0()[0])
                        - (self[e1] * other.group1()[0])
                        + (self.group1()[0] * other[e1])
                        - (self.group0()[1] * other.group7()[0])),
                    ((self.group10()[1] * other.group8()[3]) - (self.group10()[0] * other.group3()[0])
                        + (self.group8()[1] * other.group8()[3])
                        + (self.group7()[2] * other.group1()[0])
                        - (self.group7()[1] * other.group0()[1])
                        + (self.group5()[2] * other.group7()[0])
                        + (self.group3()[1] * other.group0()[0])
                        + (self.group3()[0] * other.group10()[0])
                        - (self[e1] * other.group1()[1])
                        + (self.group1()[0] * other.group7()[2])
                        - (self.group0()[1] * other.group7()[1])),
                    (-(self.group10()[2] * other.group3()[1]) + (self.group10()[0] * other.group8()[3]) + (self.group8()[2] * other.group8()[3])
                        - (self.group7()[2] * other.group0()[1])
                        + (self.group7()[0] * other.group1()[1])
                        + (self.group5()[0] * other.group7()[1])
                        + (self.group3()[1] * other.group10()[2])
                        + (self.group3()[0] * other.group8()[1])
                        - (self[e1] * other.group1()[2])
                        + (self.group1()[1] * other.group7()[0])
                        - (self.group0()[1] * other.group7()[2])),
                    (-(self.group10()[1] * other.group8()[1])
                        - (self.group10()[0] * other.group8()[2])
                        - (self[e35] * other.group8()[3])
                        - (self.group8()[1] * other.group10()[1])
                        - (self.group8()[0] * other.group10()[2])
                        + (self.group7()[2] * other.group6()[2])
                        + (self.group7()[1] * other.group6()[1])
                        + (self.group7()[0] * other.group6()[0])
                        - (self.group6()[2] * other.group7()[2])
                        - (self.group6()[1] * other.group7()[1])
                        - (self.group6()[0] * other.group7()[0])),
                ])),
            // e41, e42, e43
            ((swizzle!(self.group10(), 2, 2, 1) * Simd32x3::from([other[e35], other.group4()[2], other.group4()[0]]))
                - (swizzle!(self.group10(), 1, 0, 2) * swizzle!(other.group4(), 2, 0, 1))
                + (swizzle!(self.group10(), 0, 1, 0) * Simd32x3::from([other.group4()[1], other[e35], other[e35]]))
                + (Simd32x3::from(self[e35]) * swizzle!(other.group10(), 2, 1, 0))
                + (Simd32x3::from(self[e35]) * Simd32x3::from([other.group8()[0], other.group8()[1], other.group8()[2]]))
                - (swizzle!(other.group4(), 1, 2, 0) * Simd32x3::from([self.group8()[2], self.group8()[0], self.group8()[1]]))
                + (swizzle!(other.group4(), 2, 0, 1) * Simd32x3::from([self.group8()[1], self.group8()[2], self.group8()[0]]))
                - (Simd32x3::from(other[e35]) * Simd32x3::from([self.group8()[0], self.group8()[1], self.group8()[2]]))
                - (Simd32x3::from(self.group6()[2]) * Simd32x3::from([other.group5()[1], other.group1()[0], other.group0()[1]]))
                + (Simd32x3::from(self.group6()[2]) * Simd32x3::from([other.group1()[1], other.group5()[0], other.group5()[3]]))
                + (Simd32x3::from(self.group6()[1]) * Simd32x3::from([other.group5()[2], other.group5()[3], other.group1()[0]]))
                - (Simd32x3::from(self.group6()[1]) * Simd32x3::from([other.group1()[2], other.group0()[1], other.group5()[0]]))
                + (Simd32x3::from(self.group6()[0]) * Simd32x3::from([other.group5()[3], other.group1()[2], other.group5()[1]]))
                - (Simd32x3::from(self.group6()[0]) * Simd32x3::from([other.group0()[1], other.group5()[2], other.group1()[1]]))
                - (Simd32x3::from(self.group5()[3]) * other.group6())
                - (swizzle!(other.group6(), 1, 2, 0) * Simd32x3::from([self.group5()[2], self.group5()[0], self.group5()[1]]))
                + (swizzle!(other.group6(), 2, 0, 1) * Simd32x3::from([self.group5()[1], self.group5()[2], self.group5()[0]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group5()[0], self.group5()[1], self.group5()[2]]))
                + (swizzle!(self.group4(), 2, 1, 2) * Simd32x3::from([other.group10()[1], other.group3()[3], other.group3()[3]]))
                + (swizzle!(self.group4(), 2, 1, 2) * Simd32x3::from([other.group8()[1], other.group0()[0], other.group0()[0]]))
                - (swizzle!(self.group4(), 1, 2, 0) * swizzle!(other.group10(), 0, 2, 1))
                - (swizzle!(self.group4(), 1, 2, 0) * Simd32x3::from([other.group8()[2], other.group8()[0], other.group8()[1]]))
                + (swizzle!(self.group4(), 0, 0, 1) * Simd32x3::from([other.group3()[3], other.group10()[0], other.group10()[2]]))
                + (swizzle!(self.group4(), 0, 0, 1) * Simd32x3::from([other.group0()[0], other.group8()[2], other.group8()[0]]))
                - (Simd32x3::from(self.group3()[3]) * other.group4())
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group5()[0], other.group5()[1], other.group5()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (swizzle!(other.group6(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))
                + (swizzle!(other.group6(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(self.group0()[0]) * other.group4())
                - (Simd32x3::from(self.group0()[1]) * other.group6())),
            // e415, e425, e435, e321
            ((swizzle!(other.group5(), 1, 2, 0, 2) * Simd32x4::from([self.group10()[0], self.group10()[2], self.group10()[1], self.group8()[2]]))
                + (Simd32x4::from(self[e35]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other[e1]]))
                + (swizzle!(self.group8(), 3, 3, 3, 1) * Simd32x4::from([other.group6()[0], other.group6()[1], other.group6()[2], other.group5()[1]]))
                - (swizzle!(self.group8(), 2, 1, 2, 3) * Simd32x4::from([other.group1()[1], other.group5()[3], other.group5()[3], other.group1()[3]]))
                + (swizzle!(self.group8(), 1, 2, 0, 0) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group5()[0]]))
                - (swizzle!(other.group3(), 2, 0, 1, 2) * Simd32x4::from([self.group6()[1], self.group6()[2], self.group6()[0], self.group6()[2]]))
                + (swizzle!(other.group8(), 3, 3, 3, 2) * Simd32x4::from([self.group6()[0], self.group6()[1], self.group6()[2], self.group5()[2]]))
                + (swizzle!(self.group5(), 2, 1, 2, 3) * Simd32x4::from([other.group10()[1], other.group0()[0], other.group0()[0], other.group0()[0]]))
                + (swizzle!(self.group5(), 0, 0, 1, 1) * Simd32x4::from([other.group0()[0], other.group10()[0], other.group10()[2], other.group8()[1]]))
                - (swizzle!(other.group1(), 0, 2, 0, 0) * Simd32x4::from([self.group3()[3], self.group8()[0], self.group8()[1], self.group10()[2]]))
                + (swizzle!(self.group3(), 2, 1, 2, 2) * Simd32x4::from([other.group6()[1], other.group1()[3], other.group1()[3], other.group6()[2]]))
                - (swizzle!(self.group3(), 1, 3, 3, 3) * Simd32x4::from([other.group6()[2], other.group1()[1], other.group1()[2], other.group0()[1]]))
                + (swizzle!(self.group3(), 0, 0, 1, 1) * Simd32x4::from([other.group1()[3], other.group6()[2], other.group6()[0], other.group6()[1]]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group8()[3]]))
                - (swizzle!(self.group1(), 2, 1, 2, 2) * Simd32x4::from([other.group8()[1], other.group3()[3], other.group3()[3], other.group10()[0]]))
                + (swizzle!(other.group8(), 2, 0, 1, 0) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group5()[0]]))
                - (swizzle!(self.group1(), 0, 0, 1, 1) * Simd32x4::from([other.group3()[3], other.group8()[2], other.group8()[0], other.group10()[1]]))
                + (Simd32x4::from(self.group0()[0]) * other.group5())
                + Simd32x4::from([
                    ((self.group10()[2] * other.group0()[1]) - (self.group10()[1] * other.group5()[2]) - (self.group8()[0] * other.group5()[3])
                        + (self.group7()[2] * other.group4()[1])
                        - (self.group7()[1] * other.group4()[2])
                        + (self.group7()[0] * other[e35])
                        + (self.group6()[2] * other.group3()[1])
                        - (self.group5()[3] * other.group8()[0])
                        - (self.group5()[1] * other.group10()[0])
                        + (self.group4()[2] * other.group7()[1])
                        - (self.group4()[1] * other.group7()[2])
                        + (self.group4()[0] * other[e1])
                        + (self[e1] * other.group4()[0])
                        + (self.group0()[1] * other.group10()[2])),
                    ((self.group10()[1] * other.group0()[1]) - (self.group10()[0] * other.group5()[0]) - (self.group7()[2] * other.group4()[0])
                        + (self.group7()[1] * other[e35])
                        + (self.group7()[0] * other.group4()[2])
                        + (self.group6()[0] * other.group3()[2])
                        - (self.group5()[3] * other.group8()[1])
                        - (self.group5()[2] * other.group10()[2])
                        - (self.group4()[2] * other.group7()[0])
                        + (self.group4()[1] * other[e1])
                        + (self.group4()[0] * other.group7()[2])
                        - (self.group3()[2] * other.group6()[0])
                        + (self[e1] * other.group4()[1])
                        + (self.group0()[1] * other.group10()[1])),
                    (-(self.group10()[2] * other.group5()[1]) + (self.group10()[0] * other.group0()[1]) + (self.group7()[2] * other[e35]) + (self.group7()[1] * other.group4()[0])
                        - (self.group7()[0] * other.group4()[1])
                        + (self.group6()[1] * other.group3()[0])
                        - (self.group5()[3] * other.group8()[2])
                        - (self.group5()[0] * other.group10()[1])
                        + (self.group4()[2] * other[e1])
                        + (self.group4()[1] * other.group7()[0])
                        - (self.group4()[0] * other.group7()[1])
                        - (self.group3()[0] * other.group6()[1])
                        + (self[e1] * other.group4()[2])
                        + (self.group0()[1] * other.group10()[0])),
                    (-(self.group10()[1] * other.group1()[1]) - (self.group10()[0] * other.group1()[2])
                        + (self.group7()[2] * other.group4()[2])
                        + (self.group7()[1] * other.group4()[1])
                        + (self.group7()[0] * other.group4()[0])
                        - (self.group6()[1] * other.group3()[1])
                        - (self.group6()[0] * other.group3()[0])
                        - (self.group4()[2] * other.group7()[2])
                        - (self.group4()[1] * other.group7()[1])
                        - (self.group4()[0] * other.group7()[0])
                        + (self.group3()[0] * other.group6()[0])
                        - (self[e1] * other[e35])
                        - (self.group1()[0] * other.group10()[2])
                        - (self.group0()[1] * other.group3()[3])),
                ])),
            // e423, e431, e412
            ((swizzle!(self.group10(), 2, 2, 1) * Simd32x3::from([other.group1()[3], other.group6()[2], other.group6()[0]]))
                - (swizzle!(self.group10(), 1, 0, 2) * swizzle!(other.group6(), 2, 0, 1))
                + (swizzle!(self.group10(), 0, 1, 0) * Simd32x3::from([other.group6()[1], other.group1()[3], other.group1()[3]]))
                + (Simd32x3::from(self[e35]) * Simd32x3::from([other.group5()[0], other.group5()[1], other.group5()[2]]))
                - (Simd32x3::from(self[e35]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (swizzle!(other.group6(), 1, 2, 0) * Simd32x3::from([self.group8()[2], self.group8()[0], self.group8()[1]]))
                + (swizzle!(other.group6(), 2, 0, 1) * Simd32x3::from([self.group8()[1], self.group8()[2], self.group8()[0]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group8()[0], self.group8()[1], self.group8()[2]]))
                + (swizzle!(self.group6(), 2, 1, 2) * Simd32x3::from([other.group10()[1], other.group3()[3], other.group3()[3]]))
                + (swizzle!(self.group6(), 2, 1, 2) * Simd32x3::from([other.group8()[1], other.group0()[0], other.group0()[0]]))
                - (swizzle!(self.group6(), 1, 2, 0) * swizzle!(other.group10(), 0, 2, 1))
                - (swizzle!(self.group6(), 1, 2, 0) * Simd32x3::from([other.group8()[2], other.group8()[0], other.group8()[1]]))
                + (swizzle!(self.group6(), 0, 0, 1) * Simd32x3::from([other.group3()[3], other.group10()[0], other.group10()[2]]))
                + (swizzle!(self.group6(), 0, 0, 1) * Simd32x3::from([other.group0()[0], other.group8()[2], other.group8()[0]]))
                + (Simd32x3::from(self.group5()[3]) * other.group4())
                + (swizzle!(other.group4(), 1, 2, 0) * Simd32x3::from([self.group5()[2], self.group5()[0], self.group5()[1]]))
                - (swizzle!(other.group4(), 2, 0, 1) * Simd32x3::from([self.group5()[1], self.group5()[2], self.group5()[0]]))
                + (Simd32x3::from(other[e35]) * Simd32x3::from([self.group5()[0], self.group5()[1], self.group5()[2]]))
                + (Simd32x3::from(self.group4()[2]) * Simd32x3::from([other.group5()[1], other.group1()[0], other.group0()[1]]))
                - (Simd32x3::from(self.group4()[2]) * Simd32x3::from([other.group1()[1], other.group5()[0], other.group5()[3]]))
                - (Simd32x3::from(self.group4()[1]) * Simd32x3::from([other.group5()[2], other.group5()[3], other.group1()[0]]))
                + (Simd32x3::from(self.group4()[1]) * Simd32x3::from([other.group1()[2], other.group0()[1], other.group5()[0]]))
                - (Simd32x3::from(self.group4()[0]) * Simd32x3::from([other.group5()[3], other.group1()[2], other.group5()[1]]))
                + (Simd32x3::from(self.group4()[0]) * Simd32x3::from([other.group0()[1], other.group5()[2], other.group1()[1]]))
                - (Simd32x3::from(self.group3()[3]) * other.group6())
                + (Simd32x3::from(self.group1()[3]) * swizzle!(other.group10(), 2, 1, 0))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group8()[0], other.group8()[1], other.group8()[2]]))
                + (swizzle!(other.group4(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))
                - (swizzle!(other.group4(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                + (Simd32x3::from(other[e35]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(self.group0()[0]) * other.group6())
                + (Simd32x3::from(self.group0()[1]) * other.group4())),
            // e235, e315, e125
            ((swizzle!(self.group10(), 2, 2, 1) * Simd32x3::from([other[e1], other.group7()[2], other.group7()[0]]))
                - (swizzle!(self.group10(), 1, 0, 2) * swizzle!(other.group7(), 2, 0, 1))
                + (swizzle!(self.group10(), 0, 1, 0) * Simd32x3::from([other.group7()[1], other[e1], other[e1]]))
                + (Simd32x3::from(self.group8()[3]) * Simd32x3::from([other.group5()[0], other.group5()[1], other.group5()[2]]))
                + (Simd32x3::from(self.group8()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (swizzle!(other.group7(), 1, 2, 0) * Simd32x3::from([self.group8()[2], self.group8()[0], self.group8()[1]]))
                - (swizzle!(other.group7(), 2, 0, 1) * Simd32x3::from([self.group8()[1], self.group8()[2], self.group8()[0]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group8()[0], self.group8()[1], self.group8()[2]]))
                + (Simd32x3::from(self.group7()[2]) * Simd32x3::from([other.group10()[1], other.group8()[0], other.group0()[0]]))
                - (Simd32x3::from(self.group7()[2]) * Simd32x3::from([other.group8()[1], other.group10()[2], other.group3()[3]]))
                - (Simd32x3::from(self.group7()[1]) * Simd32x3::from([other.group10()[0], other.group3()[3], other.group8()[0]]))
                + (Simd32x3::from(self.group7()[1]) * Simd32x3::from([other.group8()[2], other.group0()[0], other.group10()[2]]))
                - (Simd32x3::from(self.group7()[0]) * Simd32x3::from([other.group3()[3], other.group8()[2], other.group10()[1]]))
                + (Simd32x3::from(self.group7()[0]) * Simd32x3::from([other.group0()[0], other.group10()[0], other.group8()[1]]))
                - (Simd32x3::from(self.group5()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from(other.group3()[1]) * Simd32x3::from([self.group5()[2], self.group0()[1], self.group1()[0]]))
                + (Simd32x3::from(other.group8()[3]) * Simd32x3::from([self.group5()[0], self.group5()[1], self.group5()[2]]))
                + (Simd32x3::from(self.group3()[3]) * other.group7())
                + (Simd32x3::from(other.group5()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(self[e1]) * swizzle!(other.group10(), 2, 1, 0))
                - (Simd32x3::from(self[e1]) * Simd32x3::from([other.group8()[0], other.group8()[1], other.group8()[2]]))
                + (Simd32x3::from(other.group3()[2]) * Simd32x3::from([self.group1()[1], self.group5()[0], self.group0()[1]]))
                - (Simd32x3::from(other.group8()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(self.group0()[0]) * other.group7())
                + (Simd32x3::from(other.group3()[0]) * Simd32x3::from([self.group0()[1], self.group1()[2], self.group5()[1]]))
                + Simd32x3::from([
                    (-(self.group5()[1] * other.group3()[2]) + (self.group3()[2] * other.group5()[1]) + (self.group3()[2] * other.group1()[1])
                        - (self.group3()[1] * other.group5()[2])
                        - (self.group3()[1] * other.group1()[2])
                        - (self.group1()[2] * other.group3()[1])),
                    (-(self.group5()[2] * other.group3()[0]) - (self.group3()[2] * other.group5()[0]) - (self.group3()[2] * other.group1()[0])
                        + (self.group3()[0] * other.group5()[2])
                        + (self.group3()[0] * other.group1()[2])
                        - (self.group1()[0] * other.group3()[2])),
                    (-(self.group5()[0] * other.group3()[1]) + (self.group3()[1] * other.group5()[0]) + (self.group3()[1] * other.group1()[0])
                        - (self.group3()[0] * other.group5()[1])
                        - (self.group3()[0] * other.group1()[1])
                        - (self.group1()[1] * other.group3()[0])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group8(), 1, 2, 0, 3) * Simd32x4::from([self.group10()[0], self.group10()[2], self.group10()[1], self.group3()[3]]))
                - (swizzle!(other.group3(), 0, 1, 2, 0) * Simd32x4::from([self[e35], self[e35], self[e35], self.group10()[2]]))
                + (Simd32x4::from(self.group8()[3]) * Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], other.group0()[0]]))
                - (swizzle!(self.group8(), 1, 2, 0, 3) * Simd32x4::from([other.group10()[0], other.group10()[2], other.group10()[1], other.group3()[3]]))
                + (Simd32x4::from(other[e1]) * Simd32x4::from([self.group6()[0], self.group6()[1], self.group6()[2], self.group5()[3]]))
                + (swizzle!(other.group5(), 0, 1, 2, 2) * Simd32x4::from([self.group5()[3], self.group5()[3], self.group5()[3], self.group7()[2]]))
                + (swizzle!(self.group5(), 2, 1, 2, 2) * Simd32x4::from([other.group1()[1], other.group5()[3], other.group5()[3], other.group7()[2]]))
                + (swizzle!(self.group5(), 0, 0, 1, 1) * Simd32x4::from([other.group5()[3], other.group1()[2], other.group1()[0], other.group7()[1]]))
                - (swizzle!(other.group3(), 1, 2, 0, 1) * Simd32x4::from([self.group4()[2], self.group4()[0], self.group4()[1], self.group10()[1]]))
                + (swizzle!(self.group3(), 3, 3, 3, 2) * Simd32x4::from([other.group10()[2], other.group10()[1], other.group10()[0], other.group8()[2]]))
                + (swizzle!(self.group3(), 2, 1, 2, 1) * Simd32x4::from([other.group4()[1], other[e35], other[e35], other.group8()[1]]))
                - (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group4()[2], other.group4()[0], other.group4()[1], other.group10()[0]]))
                + (swizzle!(self.group3(), 0, 0, 1, 0) * Simd32x4::from([other[e35], other.group4()[2], other.group4()[0], other.group8()[0]]))
                - (Simd32x4::from(self[e1]) * Simd32x4::from([other.group6()[0], other.group6()[1], other.group6()[2], other.group5()[3]]))
                + (swizzle!(other.group5(), 1, 2, 0, 1) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group7()[1]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group7()[2]]))
                + (Simd32x4::from(self.group0()[0]) * other.group8())
                + (swizzle!(other.group1(), 0, 1, 2, 2) * Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group7()[2]]))
                + Simd32x4::from([
                    ((self.group10()[2] * other.group3()[3]) - (self.group10()[1] * other.group8()[2])
                        + (self.group8()[2] * other.group10()[1])
                        + (self.group8()[0] * other.group0()[0])
                        - (self.group7()[2] * other.group6()[1])
                        + (self.group7()[1] * other.group6()[2])
                        - (self.group7()[0] * other.group1()[3])
                        + (self.group6()[2] * other.group7()[1])
                        - (self.group6()[1] * other.group7()[2])
                        - (self.group5()[1] * other.group1()[2])
                        + (self.group4()[1] * other.group3()[2])
                        - (self.group4()[0] * other.group8()[3])
                        + (self.group1()[3] * other.group7()[0])
                        + (self.group1()[0] * other.group0()[1])),
                    ((self.group10()[1] * other.group3()[3]) - (self.group10()[0] * other.group8()[0])
                        + (self.group8()[1] * other.group0()[0])
                        + (self.group8()[0] * other.group10()[0])
                        + (self.group7()[2] * other.group6()[0])
                        - (self.group7()[1] * other.group1()[3])
                        - (self.group7()[0] * other.group6()[2])
                        - (self.group6()[2] * other.group7()[0])
                        + (self.group6()[0] * other.group7()[2])
                        - (self.group5()[2] * other.group1()[0])
                        + (self.group4()[2] * other.group3()[0])
                        - (self.group4()[1] * other.group8()[3])
                        + (self.group1()[3] * other.group7()[1])
                        + (self.group1()[1] * other.group0()[1])),
                    (-(self.group10()[2] * other.group8()[1])
                        + (self.group10()[0] * other.group3()[3])
                        + (self.group8()[2] * other.group0()[0])
                        + (self.group8()[1] * other.group10()[2])
                        - (self.group7()[2] * other.group1()[3])
                        - (self.group7()[1] * other.group6()[0])
                        + (self.group7()[0] * other.group6()[1])
                        + (self.group6()[1] * other.group7()[0])
                        - (self.group6()[0] * other.group7()[1])
                        - (self.group5()[0] * other.group1()[1])
                        - (self.group4()[2] * other.group8()[3])
                        + (self.group4()[0] * other.group3()[1])
                        + (self.group1()[3] * other.group7()[2])
                        + (self.group1()[2] * other.group0()[1])),
                    (-(self.group10()[0] * other.group3()[2])
                        - (self.group8()[2] * other.group3()[2])
                        - (self.group8()[1] * other.group3()[1])
                        - (self.group8()[0] * other.group3()[0])
                        + (self.group7()[1] * other.group1()[1])
                        + (self.group7()[0] * other.group5()[0])
                        + (self.group7()[0] * other.group1()[0])
                        + (self.group5()[0] * other.group7()[0])
                        - (self.group3()[1] * other.group10()[1])
                        - (self.group3()[0] * other.group10()[2])
                        - (self[e1] * other.group0()[1])
                        - (self.group1()[1] * other.group7()[1])
                        - (self.group1()[0] * other.group7()[0])
                        - (self.group0()[1] * other[e1])),
                ])),
            // e1234
            (-(self.group10()[2] * other.group4()[0]) - (self.group10()[1] * other.group4()[1]) - (self.group10()[0] * other.group4()[2])
                + (self[e35] * other.group3()[3])
                + (self[e35] * other.group0()[0])
                + (self.group8()[2] * other.group4()[2])
                + (self.group8()[1] * other.group4()[1])
                + (self.group8()[0] * other.group4()[0])
                + (self.group6()[2] * other.group5()[2])
                - (self.group6()[2] * other.group1()[2])
                + (self.group6()[1] * other.group5()[1])
                - (self.group6()[1] * other.group1()[1])
                + (self.group6()[0] * other.group5()[0])
                - (self.group6()[0] * other.group1()[0])
                - (self.group5()[3] * other.group1()[3])
                + (self.group5()[2] * other.group6()[2])
                + (self.group5()[1] * other.group6()[1])
                + (self.group5()[0] * other.group6()[0])
                - (self.group4()[2] * other.group10()[0])
                - (self.group4()[2] * other.group8()[2])
                - (self.group4()[1] * other.group10()[1])
                - (self.group4()[1] * other.group8()[1])
                - (self.group4()[0] * other.group10()[2])
                - (self.group4()[0] * other.group8()[0])
                - (self.group3()[3] * other[e35])
                + (self.group1()[3] * other.group5()[3])
                - (self.group1()[3] * other.group0()[1])
                + (self.group1()[2] * other.group6()[2])
                + (self.group1()[1] * other.group6()[1])
                + (self.group1()[0] * other.group6()[0])
                + (self.group0()[0] * other[e35])
                - (self.group0()[1] * other.group1()[3])),
            // e12, e31, e23
            (-(swizzle!(self.group10(), 2, 0, 1) * swizzle!(other.group10(), 1, 2, 0))
                + (swizzle!(self.group10(), 1, 2, 2) * Simd32x3::from([other.group10()[2], other.group10()[0], other.group0()[0]]))
                + (swizzle!(self.group10(), 0, 1, 0) * Simd32x3::from([other.group0()[0], other.group0()[0], other.group10()[1]]))
                + (Simd32x3::from(self[e35]) * Simd32x3::from([other.group3()[2], other.group3()[1], other.group3()[0]]))
                + (Simd32x3::from(self.group8()[3]) * swizzle!(other.group4(), 2, 1, 0))
                + (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group8()[2], self.group8()[1], self.group8()[0]]))
                - (swizzle!(self.group7(), 2, 1, 2) * Simd32x3::from([other.group1()[3], other.group1()[3], other.group6()[1]]))
                - (swizzle!(self.group7(), 1, 0, 0) * Simd32x3::from([other.group6()[0], other.group6()[2], other.group1()[3]]))
                + (swizzle!(self.group7(), 0, 2, 1) * swizzle!(other.group6(), 1, 0, 2))
                - (swizzle!(self.group6(), 2, 1, 2) * Simd32x3::from([other[e1], other[e1], other.group7()[1]]))
                - (swizzle!(self.group6(), 1, 0, 0) * Simd32x3::from([other.group7()[0], other.group7()[2], other[e1]]))
                + (swizzle!(self.group6(), 0, 2, 1) * swizzle!(other.group7(), 1, 0, 2))
                - (Simd32x3::from(self.group5()[3]) * Simd32x3::from([other.group1()[2], other.group1()[1], other.group1()[0]]))
                - (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group5()[2], self.group5()[1], self.group5()[0]]))
                + (swizzle!(self.group4(), 2, 1, 2) * Simd32x3::from([other.group8()[3], other.group8()[3], other.group3()[1]]))
                + (swizzle!(self.group4(), 1, 0, 0) * Simd32x3::from([other.group3()[0], other.group3()[2], other.group8()[3]]))
                - (swizzle!(self.group4(), 0, 2, 1) * Simd32x3::from([other.group3()[1], other.group3()[0], other.group3()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group8()[2], other.group8()[1], other.group8()[0]]))
                + (Simd32x3::from(other[e35]) * Simd32x3::from([self.group3()[2], self.group3()[1], self.group3()[0]]))
                + (swizzle!(other.group4(), 0, 2, 1) * Simd32x3::from([self.group3()[1], self.group3()[0], self.group3()[2]]))
                - (swizzle!(other.group4(), 1, 0, 2) * Simd32x3::from([self.group3()[0], self.group3()[2], self.group3()[1]]))
                - (Simd32x3::from(self[e1]) * swizzle!(other.group6(), 2, 1, 0))
                - (Simd32x3::from(self.group1()[3]) * swizzle!(other.group7(), 2, 1, 0))
                - (Simd32x3::from(other.group5()[3]) * Simd32x3::from([self.group1()[2], self.group1()[1], self.group1()[0]]))
                + (Simd32x3::from(self.group0()[0]) * other.group10())
                - (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group5()[2], other.group5()[1], other.group5()[0]]))
                + Simd32x3::from([
                    ((self.group8()[1] * other.group8()[0]) - (self.group8()[0] * other.group8()[1]) - (self.group5()[1] * other.group5()[0])
                        + (self.group5()[0] * other.group5()[1])
                        - (self.group1()[1] * other.group1()[0])
                        + (self.group1()[0] * other.group1()[1])),
                    (-(self.group8()[2] * other.group8()[0]) + (self.group8()[0] * other.group8()[2]) + (self.group5()[2] * other.group5()[0])
                        - (self.group5()[0] * other.group5()[2])
                        + (self.group1()[2] * other.group1()[0])
                        - (self.group1()[0] * other.group1()[2])),
                    ((self.group8()[2] * other.group8()[1]) - (self.group8()[1] * other.group8()[2]) - (self.group5()[2] * other.group5()[1])
                        + (self.group5()[1] * other.group5()[2])
                        - (self.group1()[2] * other.group1()[1])
                        + (self.group1()[1] * other.group1()[2])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      366      416        0
    //    simd2       17       17        0
    //    simd3      124      133        0
    //    simd4       79       81        0
    // Totals...
    // yes simd      586      647        0
    //  no simd     1088     1173        0
    fn sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(other.group0()[3]) * Simd32x2::from([self[e35], self.group1()[3]]))
                + Simd32x2::from([
                    (-(self.group8()[2] * other.group0()[2]) - (self.group8()[0] * other.group0()[0]) - (self.group8()[1] * other.group0()[1])),
                    ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group0(), 1, 1, 0, 2) * Simd32x4::from([self.group5()[2], self.group0()[1], self.group5()[1], self.group6()[2]]))
                - (swizzle!(other.group0(), 0, 2, 2, 0) * Simd32x4::from([self.group0()[1], self.group5()[0], self.group0()[1], self.group6()[0]]))
                + Simd32x4::from([
                    ((self.group6()[0] * other.group0()[3]) + (self.group5()[1] * other.group0()[2])),
                    ((self.group6()[1] * other.group0()[3]) + (self.group5()[2] * other.group0()[0])),
                    ((self.group6()[2] * other.group0()[3]) + (self.group5()[0] * other.group0()[1])),
                    ((self.group6()[1] * other.group0()[1]) * -1.0),
                ])),
            // e5
            ((self.group7()[2] * other.group0()[2]) + (self.group7()[1] * other.group0()[1]) + (self.group7()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[3])
                - (self.group5()[3] * other.group0()[3])),
            // e15, e25, e35, e45
            (-(swizzle!(other.group0(), 0, 1, 2, 0) * Simd32x4::from([self.group8()[3], self.group8()[3], self.group8()[3], self.group10()[2]]))
                - (swizzle!(other.group0(), 1, 2, 0, 1) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group10()[1]]))
                + Simd32x4::from([
                    ((self.group10()[2] * other.group0()[3]) + (self.group8()[0] * other.group0()[3]) + (self.group3()[1] * other.group0()[2])),
                    ((self.group10()[1] * other.group0()[3]) + (self.group8()[1] * other.group0()[3]) + (self.group3()[2] * other.group0()[0])),
                    ((self.group10()[0] * other.group0()[3]) + (self.group8()[2] * other.group0()[3]) + (self.group3()[0] * other.group0()[1])),
                    (-(self[e35] * other.group0()[3]) - (self.group10()[0] * other.group0()[2])),
                ])),
            // e41, e42, e43
            ((Simd32x3::from(self[e35]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (swizzle!(self.group4(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(self.group4(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
            // e415, e425, e435, e321
            ((swizzle!(other.group0(), 3, 3, 3, 2) * Simd32x4::from([self.group6()[0], self.group6()[1], self.group6()[2], self.group5()[2]]))
                + (swizzle!(other.group0(), 2, 0, 1, 1) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group5()[1]]))
                + Simd32x4::from([
                    (-(self.group5()[3] * other.group0()[0]) - (self.group1()[2] * other.group0()[1])),
                    (-(self.group5()[3] * other.group0()[1]) - (self.group1()[0] * other.group0()[2])),
                    (-(self.group5()[3] * other.group0()[2]) - (self.group1()[1] * other.group0()[0])),
                    ((self.group1()[3] * other.group0()[3]) + (self.group5()[0] * other.group0()[0])),
                ])),
            // e423, e431, e412
            ((swizzle!(self.group6(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (swizzle!(self.group6(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))),
            // e235, e315, e125
            (-(swizzle!(self.group7(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))
                + (swizzle!(self.group7(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group5()[0], self.group5()[1], self.group5()[2]]))
                - (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(self[e1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group10()[0], self.group10()[2], self.group10()[1], self.group3()[3]]))
                + (swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group3()[2]]))
                + Simd32x4::from([
                    (-(self.group10()[1] * other.group0()[2]) - (self.group4()[0] * other.group0()[3])),
                    (-(self.group10()[0] * other.group0()[0]) - (self.group4()[1] * other.group0()[3])),
                    (-(self.group10()[2] * other.group0()[1]) - (self.group4()[2] * other.group0()[3])),
                    ((self.group3()[1] * other.group0()[1]) + (self.group0()[0] * other.group0()[3]) + (self.group3()[0] * other.group0()[0])),
                ])),
            // e1234
            (-(self.group4()[2] * other.group0()[2]) - (self.group4()[0] * other.group0()[0]) - (self.group4()[1] * other.group0()[1])),
            // e12, e31, e23
            ((Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group0()[2], other.group0()[1], other.group0()[0]]))
                + (swizzle!(self.group4(), 2, 1, 0) * Simd32x3::from(other.group0()[3]))
                + Simd32x3::from([
                    ((self.group8()[1] * other.group0()[0]) - (self.group8()[0] * other.group0()[1])),
                    (-(self.group8()[2] * other.group0()[0]) + (self.group8()[0] * other.group0()[2])),
                    ((self.group8()[2] * other.group0()[1]) - (self.group8()[1] * other.group0()[2])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      362      410        0
    //    simd2       19       19        0
    //    simd3      128      136        0
    //    simd4       84       88        0
    // Totals...
    // yes simd      593      653        0
    //  no simd     1120     1208        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group1()[2], self.group8()[2]]))
                + (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group1()[0], self.group8()[0]]))
                + (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group1()[1], self.group8()[1]]))
                + Simd32x2::from([
                    (-(self[e1] * other.group0()[3]) - (self.group1()[3] * other[e2])),
                    ((self[e35] * other[e2]) + (self.group8()[3] * other.group0()[3])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group0(), 2, 0, 1, 3) * Simd32x4::from([self.group10()[1], self.group10()[0], self.group10()[2], self.group3()[3]]))
                + (swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group10()[0], self.group10()[2], self.group10()[1], self.group4()[2]]))
                + (swizzle!(other.group0(), 0, 1, 2, 1) * Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group4()[1]]))
                + Simd32x4::from([
                    ((self.group4()[0] * other[e2]) - (self.group3()[0] * other.group0()[3])),
                    ((self.group4()[1] * other[e2]) - (self.group3()[1] * other.group0()[3])),
                    ((self.group4()[2] * other[e2]) - (self.group3()[2] * other.group0()[3])),
                    ((self.group4()[0] * other.group0()[0]) + (self.group0()[0] * other.group0()[3])),
                ])),
            // e5
            ((self.group3()[3] * other[e2]) - (self.group3()[2] * other.group0()[2]) - (self.group3()[1] * other.group0()[1]) + (self.group0()[0] * other[e2])
                - (self.group3()[0] * other.group0()[0])),
            // e15, e25, e35, e45
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group7()[2], self.group7()[0], self.group7()[1], self.group5()[2]]))
                - (swizzle!(self.group5(), 0, 1, 2, 1) * Simd32x4::from([other[e2], other[e2], other[e2], other.group0()[1]]))
                + (self.group1() * Simd32x4::from(other[e2]))
                - (swizzle!(other.group0(), 0, 1, 2, 0) * Simd32x4::from([self[e1], self[e1], self[e1], self.group5()[0]]))
                + (Simd32x4::from([1.0, 1.0, 1.0, -1.0])
                    * swizzle!(other.group0(), 2, 0, 1, 3)
                    * Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[0], self[e1]]))),
            // e41, e42, e43
            ((swizzle!(self.group6(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))
                - (swizzle!(self.group6(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                - (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group5()[0], self.group5()[1], self.group5()[2]]))
                - (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))),
            // e415, e425, e435, e321
            (-(swizzle!(other.group0(), 1, 2, 0, 0) * Simd32x4::from([self.group8()[2], self.group8()[0], self.group8()[1], self.group10()[2]]))
                + (Simd32x4::from(other[e2]) * Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[2], self[e35]]))
                - (swizzle!(other.group0(), 0, 1, 2, 1) * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group10()[1]]))
                + Simd32x4::from([
                    ((self.group8()[1] * other.group0()[2]) + (self.group3()[0] * other.group0()[3])),
                    ((self.group8()[2] * other.group0()[0]) + (self.group3()[1] * other.group0()[3])),
                    ((self.group8()[0] * other.group0()[1]) + (self.group3()[2] * other.group0()[3])),
                    (-(self.group10()[0] * other.group0()[2]) - (self.group8()[3] * other.group0()[3])),
                ])),
            // e423, e431, e412
            ((swizzle!(self.group10(), 2, 1, 0) * Simd32x3::from(other.group0()[3]))
                - (Simd32x3::from(self[e35]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group8()[0], self.group8()[1], self.group8()[2]]))
                + (swizzle!(self.group4(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                - (swizzle!(self.group4(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
            // e235, e315, e125
            ((swizzle!(self.group10(), 2, 1, 0) * Simd32x3::from(other[e2]))
                + (Simd32x3::from(self.group8()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(other[e2]) * Simd32x3::from([self.group8()[0], self.group8()[1], self.group8()[2]]))
                + Simd32x3::from([
                    (-(self.group3()[1] * other.group0()[2]) + (self.group3()[2] * other.group0()[1])),
                    ((self.group3()[0] * other.group0()[2]) - (self.group3()[2] * other.group0()[0])),
                    (-(self.group3()[0] * other.group0()[1]) + (self.group3()[1] * other.group0()[0])),
                ])),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(other[e2]) * Simd32x4::from([self.group6()[0], self.group6()[1], self.group6()[2], self.group5()[3]]))
                + (swizzle!(other.group0(), 1, 1, 0, 2) * Simd32x4::from([self.group5()[2], self.group0()[1], self.group5()[1], self.group7()[2]]))
                + (swizzle!(other.group0(), 0, 2, 2, 1) * Simd32x4::from([self.group0()[1], self.group5()[0], self.group0()[1], self.group7()[1]]))
                + Simd32x4::from([
                    (-(self.group7()[0] * other.group0()[3]) - (self.group5()[1] * other.group0()[2])),
                    (-(self.group7()[1] * other.group0()[3]) - (self.group5()[2] * other.group0()[0])),
                    (-(self.group7()[2] * other.group0()[3]) - (self.group5()[0] * other.group0()[1])),
                    ((self.group7()[0] * other.group0()[0]) - (self.group0()[1] * other[e2])),
                ])),
            // e1234
            (-(self.group6()[2] * other.group0()[2])
                - (self.group6()[1] * other.group0()[1])
                - (self.group6()[0] * other.group0()[0])
                - (self.group0()[1] * other.group0()[3])
                - (self.group5()[3] * other.group0()[3])),
            // e12, e31, e23
            (-(swizzle!(self.group7(), 2, 1, 0) * Simd32x3::from(other.group0()[3]))
                - (swizzle!(self.group6(), 2, 1, 0) * Simd32x3::from(other[e2]))
                - (Simd32x3::from(self.group5()[3]) * Simd32x3::from([other.group0()[2], other.group0()[1], other.group0()[0]]))
                + Simd32x3::from([
                    ((self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])),
                    (-(self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0])),
                    ((self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      334      362        0
    //    simd2       16       17        0
    //    simd3      114      124        0
    //    simd4       71       77        0
    // Totals...
    // yes simd      535      580        0
    //  no simd      992     1076        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (self.group0() * Simd32x2::from(other[scalar])),
            // e1, e2, e3, e4
            (self.group1() * Simd32x4::from(other[scalar])),
            // e5
            (self[e1] * other[scalar]),
            // e15, e25, e35, e45
            (self.group3() * Simd32x4::from(other[scalar])),
            // e41, e42, e43
            (self.group4() * Simd32x3::from(other[scalar])),
            // e415, e425, e435, e321
            (self.group5() * Simd32x4::from(other[scalar])),
            // e423, e431, e412
            (self.group6() * Simd32x3::from(other[scalar])),
            // e235, e315, e125
            (self.group7() * Simd32x3::from(other[scalar])),
            // e4235, e4315, e4125, e3215
            (self.group8() * Simd32x4::from(other[scalar])),
            // e1234
            (self[e35] * other[scalar]),
            // e12, e31, e23
            (self.group10() * Simd32x3::from(other[scalar])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      369      418        0
    //    simd2       18       18        0
    //    simd3      129      138        0
    //    simd4       82       84        0
    // Totals...
    // yes simd      598      658        0
    //  no simd     1120     1204        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(other.group0()[3]) * Simd32x2::from([self[e35], self.group1()[3]]))
                + (Simd32x2::from(other[e4315]) * Simd32x2::from([self.group8()[3], self[e1]]))
                + Simd32x2::from([
                    (-(self.group8()[2] * other.group0()[2]) - (self.group8()[0] * other.group0()[0]) - (self.group8()[1] * other.group0()[1])),
                    ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group0(), 1, 1, 0, 2) * Simd32x4::from([self.group5()[2], self.group0()[1], self.group5()[1], self.group6()[2]]))
                - (swizzle!(other.group0(), 0, 2, 2, 1) * Simd32x4::from([self.group0()[1], self.group5()[0], self.group0()[1], self.group6()[1]]))
                + (swizzle!(self.group5(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other[e4315]]))
                + Simd32x4::from([
                    (-(self.group7()[0] * other[e4315]) + (self.group6()[0] * other.group0()[3])),
                    (-(self.group7()[1] * other[e4315]) + (self.group6()[1] * other.group0()[3])),
                    (-(self.group7()[2] * other[e4315]) + (self.group6()[2] * other.group0()[3])),
                    (-(self.group6()[0] * other.group0()[0]) + (self.group0()[1] * other[e4315])),
                ])),
            // e5
            ((self.group7()[2] * other.group0()[2]) + (self.group7()[1] * other.group0()[1]) + (self.group7()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[3])
                - (self.group5()[3] * other.group0()[3])),
            // e15, e25, e35, e45
            (-(swizzle!(other.group0(), 0, 1, 2, 0) * Simd32x4::from([self.group8()[3], self.group8()[3], self.group8()[3], self.group10()[2]]))
                + (self.group8() * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other[e4315]]))
                - (swizzle!(other.group0(), 1, 2, 0, 1) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group10()[1]]))
                + Simd32x4::from([
                    ((self.group10()[2] * other.group0()[3]) + (self.group3()[1] * other.group0()[2])),
                    ((self.group10()[1] * other.group0()[3]) + (self.group3()[2] * other.group0()[0])),
                    ((self.group10()[0] * other.group0()[3]) + (self.group3()[0] * other.group0()[1])),
                    (-(self.group10()[0] * other.group0()[2]) - (self[e35] * other.group0()[3])),
                ])),
            // e41, e42, e43
            ((swizzle!(self.group10(), 2, 1, 0) * Simd32x3::from(other[e4315]))
                + (Simd32x3::from(self[e35]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from(other[e4315]) * Simd32x3::from([self.group8()[0], self.group8()[1], self.group8()[2]]))
                - (swizzle!(self.group4(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(self.group4(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
            // e415, e425, e435, e321
            ((swizzle!(other.group0(), 3, 3, 3, 2) * Simd32x4::from([self.group6()[0], self.group6()[1], self.group6()[2], self.group5()[2]]))
                + (swizzle!(other.group0(), 2, 0, 1, 1) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group5()[1]]))
                + Simd32x4::from([
                    ((self.group7()[0] * other[e4315]) - (self.group5()[3] * other.group0()[0]) - (self.group1()[2] * other.group0()[1])),
                    ((self.group7()[1] * other[e4315]) - (self.group5()[3] * other.group0()[1]) - (self.group1()[0] * other.group0()[2])),
                    ((self.group7()[2] * other[e4315]) - (self.group5()[3] * other.group0()[2]) - (self.group1()[1] * other.group0()[0])),
                    ((self.group5()[0] * other.group0()[0]) + (self.group1()[3] * other.group0()[3]) - (self[e1] * other[e4315])),
                ])),
            // e423, e431, e412
            ((swizzle!(self.group6(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))
                - (swizzle!(self.group6(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (Simd32x3::from(other[e4315]) * Simd32x3::from([self.group5()[0], self.group5()[1], self.group5()[2]]))
                + (Simd32x3::from(other[e4315]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))),
            // e235, e315, e125
            (-(swizzle!(self.group7(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))
                + (swizzle!(self.group7(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group5()[0], self.group5()[1], self.group5()[2]]))
                - (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(self[e1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group10()[0], self.group10()[2], self.group10()[1], self.group3()[3]]))
                + (swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group3()[2]]))
                + (swizzle!(self.group3(), 0, 1, 2, 1) * Simd32x4::from([other[e4315], other[e4315], other[e4315], other.group0()[1]]))
                + Simd32x4::from([
                    (-(self.group10()[1] * other.group0()[2]) - (self.group4()[0] * other.group0()[3])),
                    (-(self.group10()[0] * other.group0()[0]) - (self.group4()[1] * other.group0()[3])),
                    (-(self.group10()[2] * other.group0()[1]) - (self.group4()[2] * other.group0()[3])),
                    ((self.group0()[0] * other.group0()[3]) + (self.group3()[0] * other.group0()[0])),
                ])),
            // e1234
            (-(self.group4()[2] * other.group0()[2]) - (self.group4()[1] * other.group0()[1]) - (self.group4()[0] * other.group0()[0]) + (self.group0()[0] * other[e4315])
                - (self.group3()[3] * other[e4315])),
            // e12, e31, e23
            ((swizzle!(self.group4(), 2, 1, 0) * Simd32x3::from(other.group0()[3]))
                + (Simd32x3::from(other[e4315]) * Simd32x3::from([self.group3()[2], self.group3()[1], self.group3()[0]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group0()[2], other.group0()[1], other.group0()[0]]))
                + Simd32x3::from([
                    ((self.group8()[1] * other.group0()[0]) - (self.group8()[0] * other.group0()[1])),
                    (-(self.group8()[2] * other.group0()[0]) + (self.group8()[0] * other.group0()[2])),
                    ((self.group8()[2] * other.group0()[1]) - (self.group8()[1] * other.group0()[2])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      482      540        0
    //    simd2       20       20        0
    //    simd3      162      168        0
    //    simd4      116      118        0
    // Totals...
    // yes simd      780      846        0
    //  no simd     1472     1556        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (-(Simd32x2::from(other.group1()[3]) * Simd32x2::from([self.group5()[3], self.group3()[3]]))
                + (Simd32x2::from(other.group3()[2]) * Simd32x2::from([self.group1()[2], self.group8()[2]]))
                + (Simd32x2::from(other.group3()[1]) * Simd32x2::from([self.group1()[1], self.group8()[1]]))
                + (Simd32x2::from(other.group3()[0]) * Simd32x2::from([self.group1()[0], self.group8()[0]]))
                + Simd32x2::from([
                    ((self.group7()[2] * other.group0()[2])
                        + (self.group7()[1] * other.group0()[1])
                        + (self.group7()[0] * other.group0()[0])
                        + (self.group6()[2] * other.group2()[2])
                        + (self.group6()[1] * other.group2()[1])
                        + (self.group6()[0] * other.group2()[0])
                        + (self.group5()[2] * other.group1()[2])
                        + (self.group5()[1] * other.group1()[1])
                        + (self.group5()[0] * other.group1()[0])
                        - (self[e1] * other.group3()[3])
                        - (self.group1()[3] * other.group2()[3])
                        - (self.group0()[1] * other.group0()[3])),
                    (-(self.group10()[2] * other.group1()[0]) - (self.group10()[1] * other.group1()[1]) - (self.group10()[0] * other.group1()[2])
                        + (self[e35] * other.group2()[3])
                        + (self.group8()[3] * other.group3()[3])
                        - (self.group4()[2] * other.group2()[2])
                        - (self.group4()[1] * other.group2()[1])
                        - (self.group4()[0] * other.group2()[0])
                        - (self.group3()[2] * other.group0()[2])
                        - (self.group3()[1] * other.group0()[1])
                        + (self.group0()[0] * other.group0()[3])
                        - (self.group3()[0] * other.group0()[0])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group3(), 2, 0, 1, 3) * Simd32x4::from([self.group10()[1], self.group10()[0], self.group10()[2], self.group3()[3]]))
                + (swizzle!(other.group3(), 1, 2, 0, 2) * Simd32x4::from([self.group10()[0], self.group10()[2], self.group10()[1], self.group4()[2]]))
                + (Simd32x4::from(self[e35]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[3]]))
                - (swizzle!(other.group0(), 0, 1, 2, 0) * Simd32x4::from([self.group8()[3], self.group8()[3], self.group8()[3], self.group10()[2]]))
                - (swizzle!(other.group1(), 1, 2, 0, 3) * Simd32x4::from([self.group8()[2], self.group8()[0], self.group8()[1], self[e35]]))
                + (swizzle!(self.group8(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                - (swizzle!(other.group0(), 3, 3, 3, 1) * Simd32x4::from([self.group8()[0], self.group8()[1], self.group8()[2], self.group10()[1]]))
                - (swizzle!(other.group1(), 0, 1, 2, 2) * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group4()[2]]))
                - (swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group10()[0]]))
                + (swizzle!(other.group0(), 2, 0, 1, 1) * Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group8()[1]]))
                + (swizzle!(other.group3(), 0, 1, 2, 1) * Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group4()[1]]))
                + Simd32x4::from([
                    ((self.group10()[2] * other.group1()[3]) + (self.group4()[2] * other.group2()[1]) - (self.group4()[1] * other.group2()[2])
                        + (self.group4()[0] * other.group2()[3])
                        - (self.group3()[0] * other.group3()[3])),
                    ((self.group10()[1] * other.group1()[3]) - (self.group4()[2] * other.group2()[0])
                        + (self.group4()[1] * other.group2()[3])
                        + (self.group4()[0] * other.group2()[2])
                        - (self.group3()[1] * other.group3()[3])),
                    ((self.group10()[0] * other.group1()[3]) + (self.group4()[2] * other.group2()[3]) + (self.group4()[1] * other.group2()[0])
                        - (self.group4()[0] * other.group2()[1])
                        - (self.group3()[2] * other.group3()[3])),
                    ((self.group8()[0] * other.group0()[0]) - (self.group4()[1] * other.group1()[1]) + (self.group4()[0] * other.group3()[0])
                        - (self.group4()[0] * other.group1()[0])
                        + (self.group0()[0] * other.group3()[3])),
                ])),
            // e5
            (-(self.group10()[2] * other.group2()[0]) - (self.group10()[1] * other.group2()[1]) - (self.group10()[0] * other.group2()[2])
                + (self.group8()[3] * other.group1()[3])
                + (self.group8()[3] * other.group0()[3])
                - (self.group8()[2] * other.group2()[2])
                - (self.group8()[1] * other.group2()[1])
                - (self.group8()[0] * other.group2()[0])
                + (self.group3()[3] * other.group2()[3])
                - (self.group3()[2] * other.group3()[2])
                - (self.group3()[2] * other.group1()[2])
                - (self.group3()[1] * other.group3()[1])
                - (self.group3()[1] * other.group1()[1])
                - (self.group3()[0] * other.group3()[0])
                + (self.group0()[0] * other.group2()[3])
                - (self.group3()[0] * other.group1()[0])),
            // e15, e25, e35, e45
            (-(swizzle!(other.group3(), 1, 2, 0, 2) * Simd32x4::from([self.group7()[2], self.group7()[0], self.group7()[1], self.group5()[2]]))
                - (swizzle!(other.group1(), 1, 3, 3, 2) * Simd32x4::from([self.group7()[2], self.group7()[1], self.group7()[2], self.group1()[2]]))
                + (swizzle!(other.group1(), 2, 0, 1, 3) * Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[0], self.group0()[1]]))
                - (swizzle!(other.group1(), 3, 2, 0, 1) * Simd32x4::from([self.group7()[0], self.group7()[0], self.group7()[1], self.group1()[1]]))
                + (Simd32x4::from(self.group5()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[3]]))
                - (swizzle!(other.group2(), 1, 3, 3, 2) * Simd32x4::from([self.group5()[2], self.group5()[1], self.group5()[2], self.group6()[2]]))
                + (swizzle!(other.group2(), 2, 0, 1, 3) * Simd32x4::from([self.group5()[1], self.group5()[2], self.group5()[0], self.group1()[3]]))
                - (swizzle!(other.group2(), 3, 2, 0, 1) * Simd32x4::from([self.group5()[0], self.group5()[0], self.group5()[1], self.group6()[1]]))
                - (swizzle!(other.group3(), 0, 1, 2, 1) * Simd32x4::from([self[e1], self[e1], self[e1], self.group5()[1]]))
                - (Simd32x4::from(self[e1]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                - (swizzle!(other.group2(), 2, 0, 2, 0) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group0()[1], self.group6()[0]]))
                + Simd32x4::from([
                    ((self.group7()[1] * other.group3()[2]) - (self.group7()[0] * other.group0()[3]) + (self.group1()[2] * other.group2()[1])
                        - (self.group0()[1] * other.group2()[0])
                        + (self.group1()[0] * other.group2()[3])),
                    ((self.group7()[2] * other.group3()[0]) - (self.group7()[1] * other.group0()[3]) + (self.group1()[1] * other.group2()[3])
                        - (self.group0()[1] * other.group2()[1])
                        + (self.group1()[0] * other.group2()[2])),
                    (-(self.group7()[2] * other.group0()[3])
                        + (self.group7()[0] * other.group3()[1])
                        + (self.group1()[2] * other.group2()[3])
                        + (self.group1()[1] * other.group2()[0])
                        - (self.group1()[0] * other.group2()[1])),
                    ((self.group7()[2] * other.group0()[2]) + (self.group7()[1] * other.group0()[1]) + (self.group7()[0] * other.group0()[0])
                        - (self.group5()[0] * other.group3()[0])
                        - (self.group1()[0] * other.group1()[0])),
                ])),
            // e41, e42, e43
            ((Simd32x3::from(self.group6()[2]) * Simd32x3::from([other.group3()[1], other.group1()[0], other.group1()[3]]))
                - (Simd32x3::from(self.group6()[2]) * Simd32x3::from([other.group1()[1], other.group3()[0], other.group0()[3]]))
                - (Simd32x3::from(self.group6()[1]) * Simd32x3::from([other.group3()[2], other.group0()[3], other.group1()[0]]))
                + (Simd32x3::from(self.group6()[1]) * Simd32x3::from([other.group1()[2], other.group1()[3], other.group3()[0]]))
                + (Simd32x3::from(self.group6()[0]) * Simd32x3::from([other.group1()[3], other.group3()[2], other.group1()[1]]))
                - (Simd32x3::from(self.group6()[0]) * Simd32x3::from([other.group0()[3], other.group1()[2], other.group3()[1]]))
                - (Simd32x3::from(self.group5()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group5()[0], self.group5()[1], self.group5()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + Simd32x3::from([
                    (-(self.group5()[2] * other.group0()[1]) + (self.group5()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])
                        + (self.group1()[1] * other.group0()[2])),
                    ((self.group5()[2] * other.group0()[0]) - (self.group5()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0])
                        - (self.group1()[0] * other.group0()[2])),
                    (-(self.group5()[1] * other.group0()[0]) + (self.group5()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])
                        + (self.group1()[0] * other.group0()[1])),
                ])),
            // e415, e425, e435, e321
            ((swizzle!(other.group0(), 3, 3, 3, 2) * Simd32x4::from([self.group10()[2], self.group10()[1], self.group10()[0], self.group3()[2]]))
                + (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group10()[0], self.group10()[2], self.group10()[1], self.group8()[2]]))
                + (Simd32x4::from(self[e35]) * other.group2())
                + (swizzle!(self.group8(), 3, 3, 3, 1) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]]))
                - (swizzle!(self.group8(), 2, 1, 2, 3) * Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group3()[3]]))
                + (swizzle!(self.group8(), 1, 2, 0, 0) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[0]]))
                - (swizzle!(other.group2(), 2, 0, 1, 2) * Simd32x4::from([self.group4()[1], self.group4()[2], self.group4()[0], self.group4()[2]]))
                - (swizzle!(other.group3(), 0, 2, 0, 0) * Simd32x4::from([self.group3()[3], self.group8()[0], self.group8()[1], self.group10()[2]]))
                + (swizzle!(self.group3(), 2, 1, 2, 1) * Simd32x4::from([other.group0()[1], other.group3()[3], other.group3()[3], other.group0()[1]]))
                - (swizzle!(self.group3(), 1, 3, 3, 3) * Simd32x4::from([other.group0()[2], other.group3()[1], other.group3()[2], other.group0()[3]]))
                + (Simd32x4::from(self.group0()[0]) * other.group1())
                + (swizzle!(self.group3(), 0, 0, 1, 0) * Simd32x4::from([other.group3()[3], other.group0()[2], other.group0()[0], other.group0()[0]]))
                + Simd32x4::from([
                    (-(self.group10()[1] * other.group1()[2]) - (self.group8()[0] * other.group1()[3])
                        + (self.group4()[2] * other.group2()[1])
                        + (self.group4()[0] * other.group2()[3])),
                    (-(self.group10()[0] * other.group1()[0]) + (self.group4()[1] * other.group2()[3]) + (self.group4()[0] * other.group2()[2])
                        - (self.group3()[2] * other.group0()[0])),
                    (-(self.group10()[2] * other.group1()[1]) + (self.group4()[2] * other.group2()[3]) + (self.group4()[1] * other.group2()[0])
                        - (self.group3()[0] * other.group0()[1])),
                    (-(self.group10()[1] * other.group3()[1])
                        - (self.group10()[0] * other.group3()[2])
                        - (self.group4()[1] * other.group2()[1])
                        - (self.group4()[0] * other.group2()[0])),
                ])),
            // e423, e431, e412
            ((swizzle!(self.group10(), 2, 2, 1) * Simd32x3::from([other.group3()[3], other.group0()[2], other.group0()[0]]))
                - (swizzle!(self.group10(), 1, 0, 2) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(self.group10(), 0, 1, 0) * Simd32x3::from([other.group0()[1], other.group3()[3], other.group3()[3]]))
                - (Simd32x3::from(self[e35]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from(self[e35]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group8()[0], self.group8()[1], self.group8()[2]]))
                - (Simd32x3::from(self.group4()[2]) * Simd32x3::from([other.group3()[1], other.group1()[0], other.group1()[3]]))
                + (Simd32x3::from(self.group4()[2]) * Simd32x3::from([other.group1()[1], other.group3()[0], other.group0()[3]]))
                + (Simd32x3::from(self.group4()[1]) * Simd32x3::from([other.group3()[2], other.group0()[3], other.group1()[0]]))
                - (Simd32x3::from(self.group4()[1]) * Simd32x3::from([other.group1()[2], other.group1()[3], other.group3()[0]]))
                - (Simd32x3::from(self.group4()[0]) * Simd32x3::from([other.group1()[3], other.group3()[2], other.group1()[1]]))
                + (Simd32x3::from(self.group4()[0]) * Simd32x3::from([other.group0()[3], other.group1()[2], other.group3()[1]]))
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + Simd32x3::from([
                    (-(self.group8()[2] * other.group0()[1]) + (self.group8()[1] * other.group0()[2])),
                    ((self.group8()[2] * other.group0()[0]) - (self.group8()[0] * other.group0()[2])),
                    (-(self.group8()[1] * other.group0()[0]) + (self.group8()[0] * other.group0()[1])),
                ])),
            // e235, e315, e125
            ((swizzle!(self.group10(), 2, 2, 1) * Simd32x3::from([other.group2()[3], other.group2()[2], other.group2()[0]]))
                - (swizzle!(self.group10(), 1, 0, 2) * Simd32x3::from([other.group2()[2], other.group2()[0], other.group2()[1]]))
                + (swizzle!(self.group10(), 0, 1, 0) * Simd32x3::from([other.group2()[1], other.group2()[3], other.group2()[3]]))
                + (Simd32x3::from(self.group8()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from(self.group8()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group8()[0], self.group8()[1], self.group8()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                + (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + Simd32x3::from([
                    ((self.group8()[2] * other.group2()[1]) - (self.group8()[1] * other.group2()[2])
                        + (self.group3()[2] * other.group3()[1])
                        + (self.group3()[2] * other.group1()[1])
                        - (self.group3()[1] * other.group3()[2])
                        - (self.group3()[1] * other.group1()[2])),
                    (-(self.group8()[2] * other.group2()[0]) + (self.group8()[0] * other.group2()[2])
                        - (self.group3()[2] * other.group3()[0])
                        - (self.group3()[2] * other.group1()[0])
                        + (self.group3()[0] * other.group3()[2])
                        + (self.group3()[0] * other.group1()[2])),
                    ((self.group8()[1] * other.group2()[0]) - (self.group8()[0] * other.group2()[1])
                        + (self.group3()[1] * other.group3()[0])
                        + (self.group3()[1] * other.group1()[0])
                        - (self.group3()[0] * other.group3()[1])
                        - (self.group3()[0] * other.group1()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group7()[2], self.group7()[0], self.group7()[1], self[e1]]))
                + (swizzle!(other.group2(), 1, 3, 3, 3) * Simd32x4::from([self.group6()[2], self.group6()[1], self.group6()[2], self.group5()[3]]))
                - (swizzle!(other.group2(), 2, 0, 1, 2) * Simd32x4::from([self.group6()[1], self.group6()[2], self.group6()[0], self.group1()[2]]))
                + (swizzle!(other.group2(), 3, 2, 0, 2) * Simd32x4::from([self.group6()[0], self.group6()[0], self.group6()[1], self.group5()[2]]))
                + (swizzle!(other.group1(), 0, 1, 2, 2) * Simd32x4::from([self.group5()[3], self.group5()[3], self.group5()[3], self.group7()[2]]))
                + (swizzle!(self.group5(), 2, 1, 2, 1) * Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group2()[1]]))
                + (swizzle!(self.group5(), 0, 0, 1, 0) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group2()[0]]))
                - (Simd32x4::from(self[e1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (swizzle!(other.group1(), 1, 2, 0, 1) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group7()[1]]))
                - (swizzle!(self.group1(), 1, 2, 0, 1) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[1]]))
                + (swizzle!(other.group3(), 0, 1, 2, 2) * Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group7()[2]]))
                + Simd32x4::from([
                    ((self.group7()[1] * other.group0()[2]) - (self.group7()[0] * other.group3()[3]) - (self.group5()[1] * other.group3()[2])
                        + (self.group1()[3] * other.group2()[0])
                        + (self.group1()[0] * other.group0()[3])),
                    ((self.group7()[2] * other.group0()[0]) - (self.group7()[1] * other.group3()[3]) - (self.group5()[2] * other.group3()[0])
                        + (self.group1()[3] * other.group2()[1])
                        + (self.group1()[1] * other.group0()[3])),
                    (-(self.group7()[2] * other.group3()[3]) + (self.group7()[0] * other.group0()[1]) - (self.group5()[0] * other.group3()[1])
                        + (self.group1()[3] * other.group2()[2])
                        + (self.group1()[2] * other.group0()[3])),
                    ((self.group7()[1] * other.group3()[1]) + (self.group7()[0] * other.group3()[0]) + (self.group7()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group2()[3])
                        - (self.group1()[0] * other.group2()[0])),
                ])),
            // e1234
            (-(self.group6()[2] * other.group3()[2]) + (self.group6()[2] * other.group1()[2]) - (self.group6()[1] * other.group3()[1]) + (self.group6()[1] * other.group1()[1])
                - (self.group6()[0] * other.group3()[0])
                + (self.group6()[0] * other.group1()[0])
                - (self.group5()[3] * other.group3()[3])
                + (self.group5()[2] * other.group0()[2])
                + (self.group5()[1] * other.group0()[1])
                + (self.group5()[0] * other.group0()[0])
                + (self.group1()[3] * other.group1()[3])
                - (self.group1()[3] * other.group0()[3])
                + (self.group1()[2] * other.group0()[2])
                + (self.group1()[1] * other.group0()[1])
                - (self.group0()[1] * other.group3()[3])
                + (self.group1()[0] * other.group0()[0])),
            // e12, e31, e23
            (-(swizzle!(self.group7(), 2, 1, 2) * Simd32x3::from([other.group3()[3], other.group3()[3], other.group0()[1]]))
                - (swizzle!(self.group7(), 1, 0, 0) * Simd32x3::from([other.group0()[0], other.group0()[2], other.group3()[3]]))
                + (swizzle!(self.group7(), 0, 2, 1) * Simd32x3::from([other.group0()[1], other.group0()[0], other.group0()[2]]))
                - (swizzle!(self.group6(), 2, 1, 2) * Simd32x3::from([other.group2()[3], other.group2()[3], other.group2()[1]]))
                - (swizzle!(self.group6(), 1, 0, 0) * Simd32x3::from([other.group2()[0], other.group2()[2], other.group2()[3]]))
                + (swizzle!(self.group6(), 0, 2, 1) * Simd32x3::from([other.group2()[1], other.group2()[0], other.group2()[2]]))
                - (Simd32x3::from(self.group5()[3]) * Simd32x3::from([other.group3()[2], other.group3()[1], other.group3()[0]]))
                - (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group5()[2], self.group5()[1], self.group5()[0]]))
                - (Simd32x3::from(self[e1]) * Simd32x3::from([other.group0()[2], other.group0()[1], other.group0()[0]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group2()[2], other.group2()[1], other.group2()[0]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[2], self.group1()[1], self.group1()[0]]))
                - (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], other.group1()[1], other.group1()[0]]))
                + Simd32x3::from([
                    (-(self.group5()[1] * other.group1()[0]) + (self.group5()[0] * other.group1()[1]) - (self.group1()[1] * other.group3()[0])
                        + (self.group1()[0] * other.group3()[1])),
                    ((self.group5()[2] * other.group1()[0]) - (self.group5()[0] * other.group1()[2]) + (self.group1()[2] * other.group3()[0])
                        - (self.group1()[0] * other.group3()[2])),
                    (-(self.group5()[2] * other.group1()[1]) + (self.group5()[1] * other.group1()[2]) - (self.group1()[2] * other.group3()[1])
                        + (self.group1()[1] * other.group3()[2])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      470      528        0
    //    simd2       28       28        0
    //    simd3      166      172        0
    //    simd4      112      114        0
    // Totals...
    // yes simd      776      842        0
    //  no simd     1472     1556        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (-(Simd32x2::from(other.group1()[0]) * Simd32x2::from([self.group10()[2], self.group5()[0]]))
                - (Simd32x2::from(other.group1()[1]) * Simd32x2::from([self.group10()[1], self.group5()[1]]))
                - (Simd32x2::from(other.group1()[2]) * Simd32x2::from([self.group10()[0], self.group5()[2]]))
                + (Simd32x2::from(other.group3()[3]) * Simd32x2::from([self[e35], self.group1()[3]]))
                + (Simd32x2::from(other.group2()[3]) * Simd32x2::from([self.group8()[3], self[e1]]))
                - (Simd32x2::from(other.group2()[2]) * Simd32x2::from([self.group4()[2], self.group6()[2]]))
                - (Simd32x2::from(other.group2()[1]) * Simd32x2::from([self.group4()[1], self.group6()[1]]))
                - (Simd32x2::from(other.group2()[0]) * Simd32x2::from([self.group4()[0], self.group6()[0]]))
                - (Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group3()[2], self.group7()[2]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group3()[1], self.group7()[1]]))
                + (self.group0() * Simd32x2::from(other.group0()[3]))
                - (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group3()[0], self.group7()[0]]))
                + Simd32x2::from([
                    (-(self.group8()[2] * other.group3()[2]) - (self.group8()[1] * other.group3()[1]) - (self.group8()[0] * other.group3()[0])
                        + (self.group3()[3] * other.group1()[3])),
                    (-(self.group5()[3] * other.group1()[3])
                        + (self.group1()[2] * other.group3()[2])
                        + (self.group1()[1] * other.group3()[1])
                        + (self.group1()[0] * other.group3()[0])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group7()[2], self.group7()[0], self.group7()[1], self.group5()[2]]))
                + (swizzle!(other.group0(), 2, 0, 1, 3) * Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[0], self.group1()[3]]))
                + (swizzle!(other.group2(), 1, 2, 0, 3) * Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group5()[3]]))
                + (other.group1() * Simd32x4::from([self.group5()[3], self.group5()[3], self.group5()[3], self.group1()[3]]))
                - (swizzle!(self.group5(), 2, 1, 2, 1) * Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group0()[1]]))
                - (swizzle!(self.group5(), 0, 0, 1, 0) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group0()[0]]))
                - (swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self[e1], self[e1], self[e1], self.group1()[2]]))
                + (other.group2() * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[1]]))
                - (swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group6()[2]]))
                - (swizzle!(other.group3(), 0, 1, 2, 2) * Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group6()[2]]))
                + Simd32x4::from([
                    (-(self.group7()[0] * other.group2()[3]) - (self.group6()[1] * other.group2()[2])
                        + (self.group6()[0] * other.group3()[3])
                        + (self.group5()[1] * other.group3()[2])
                        + (self.group1()[2] * other.group1()[1])
                        + (self.group1()[0] * other.group0()[3])),
                    (-(self.group7()[1] * other.group2()[3]) - (self.group6()[2] * other.group2()[0])
                        + (self.group6()[1] * other.group3()[3])
                        + (self.group5()[2] * other.group3()[0])
                        + (self.group1()[1] * other.group0()[3])
                        + (self.group1()[0] * other.group1()[2])),
                    (-(self.group7()[2] * other.group2()[3]) + (self.group6()[2] * other.group3()[3]) - (self.group6()[0] * other.group2()[1])
                        + (self.group5()[0] * other.group3()[1])
                        + (self.group1()[2] * other.group0()[3])
                        + (self.group1()[1] * other.group1()[0])),
                    (-(self.group6()[1] * other.group3()[1])
                        - (self.group6()[1] * other.group1()[1])
                        - (self.group6()[0] * other.group3()[0])
                        - (self.group6()[0] * other.group1()[0])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])),
                ])),
            // e5
            ((self.group7()[2] * other.group3()[2]) - (self.group7()[2] * other.group1()[2]) + (self.group7()[1] * other.group3()[1]) - (self.group7()[1] * other.group1()[1])
                + (self.group7()[0] * other.group3()[0])
                - (self.group7()[0] * other.group1()[0])
                - (self.group5()[3] * other.group3()[3])
                - (self.group5()[2] * other.group2()[2])
                - (self.group5()[1] * other.group2()[1])
                - (self.group5()[0] * other.group2()[0])
                - (self[e1] * other.group1()[3])
                + (self[e1] * other.group0()[3])
                + (self.group1()[2] * other.group2()[2])
                + (self.group1()[1] * other.group2()[1])
                + (self.group0()[1] * other.group3()[3])
                + (self.group1()[0] * other.group2()[0])),
            // e15, e25, e35, e45
            ((swizzle!(other.group2(), 1, 2, 0, 3) * Simd32x4::from([self.group10()[0], self.group10()[2], self.group10()[1], self.group8()[3]]))
                - (swizzle!(other.group3(), 0, 1, 2, 0) * Simd32x4::from([self.group8()[3], self.group8()[3], self.group8()[3], self.group10()[2]]))
                + (other.group1() * Simd32x4::from([self.group8()[3], self.group8()[3], self.group8()[3], self.group0()[0]]))
                + (swizzle!(other.group2(), 1, 2, 0, 2) * Simd32x4::from([self.group8()[2], self.group8()[0], self.group8()[1], self.group4()[2]]))
                - (swizzle!(self.group8(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[2]]))
                + (swizzle!(other.group2(), 0, 1, 2, 1) * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group4()[1]]))
                - (Simd32x4::from(self.group3()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group0()[2]]))
                + (swizzle!(self.group3(), 2, 2, 2, 3) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group0()[3], other.group0()[3]]))
                - (Simd32x4::from(self.group3()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group0()[1]]))
                - (Simd32x4::from(self.group3()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group0()[0]]))
                + (swizzle!(other.group2(), 0, 1, 2, 0) * Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group4()[0]]))
                + Simd32x4::from([
                    ((self.group10()[2] * other.group3()[3]) - (self.group10()[1] * other.group2()[2])
                        + (self.group8()[0] * other.group3()[3])
                        + (self.group3()[1] * other.group3()[2])
                        + (self.group3()[0] * other.group0()[3])),
                    ((self.group10()[1] * other.group3()[3]) - (self.group10()[0] * other.group2()[0])
                        + (self.group8()[1] * other.group3()[3])
                        + (self.group3()[1] * other.group0()[3])
                        + (self.group3()[0] * other.group1()[2])),
                    (-(self.group10()[2] * other.group2()[1])
                        + (self.group10()[0] * other.group3()[3])
                        + (self.group8()[2] * other.group3()[3])
                        + (self.group3()[1] * other.group1()[0])
                        + (self.group3()[0] * other.group3()[1])),
                    (-(self.group10()[1] * other.group3()[1])
                        - (self.group10()[0] * other.group3()[2])
                        - (self[e35] * other.group3()[3])
                        - (self.group8()[1] * other.group1()[1])
                        - (self.group8()[0] * other.group1()[0])),
                ])),
            // e41, e42, e43
            ((swizzle!(self.group10(), 2, 2, 1) * Simd32x3::from([other.group2()[3], other.group0()[2], other.group0()[0]]))
                - (swizzle!(self.group10(), 1, 0, 2) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(self.group10(), 0, 1, 0) * Simd32x3::from([other.group0()[1], other.group2()[3], other.group2()[3]]))
                + (Simd32x3::from(self[e35]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from(self[e35]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group8()[0], self.group8()[1], self.group8()[2]]))
                + (swizzle!(self.group4(), 2, 1, 2) * Simd32x3::from([other.group3()[1], other.group1()[3], other.group1()[3]]))
                + (swizzle!(self.group4(), 2, 1, 2) * Simd32x3::from([other.group1()[1], other.group0()[3], other.group0()[3]]))
                - (swizzle!(self.group4(), 1, 2, 0) * Simd32x3::from([other.group3()[2], other.group3()[0], other.group3()[1]]))
                - (swizzle!(self.group4(), 1, 2, 0) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]))
                + (swizzle!(self.group4(), 0, 0, 1) * Simd32x3::from([other.group1()[3], other.group3()[2], other.group3()[0]]))
                + (swizzle!(self.group4(), 0, 0, 1) * Simd32x3::from([other.group0()[3], other.group1()[2], other.group1()[0]]))
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + Simd32x3::from([
                    (-(self.group8()[2] * other.group0()[1]) + (self.group8()[1] * other.group0()[2])),
                    ((self.group8()[2] * other.group0()[0]) - (self.group8()[0] * other.group0()[2])),
                    (-(self.group8()[1] * other.group0()[0]) + (self.group8()[0] * other.group0()[1])),
                ])),
            // e415, e425, e435, e321
            ((swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group7()[2], self.group7()[0], self.group7()[1], self.group7()[2]]))
                - (swizzle!(other.group2(), 2, 0, 1, 2) * Simd32x4::from([self.group6()[1], self.group6()[2], self.group6()[0], self.group6()[2]]))
                + (swizzle!(other.group3(), 3, 3, 3, 2) * Simd32x4::from([self.group6()[0], self.group6()[1], self.group6()[2], self.group5()[2]]))
                + (swizzle!(self.group5(), 2, 1, 2, 3) * Simd32x4::from([other.group1()[1], other.group0()[3], other.group0()[3], other.group0()[3]]))
                - (swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group5()[1], self.group5()[2], self.group5()[0], self.group1()[2]]))
                + (swizzle!(self.group5(), 0, 0, 1, 1) * Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group3()[1]]))
                + (swizzle!(other.group0(), 0, 1, 2, 1) * Simd32x4::from([self[e1], self[e1], self[e1], self.group7()[1]]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                - (swizzle!(self.group1(), 2, 1, 2, 1) * Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group1()[1]]))
                + (swizzle!(other.group3(), 2, 0, 1, 0) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group5()[0]]))
                - (swizzle!(self.group1(), 0, 0, 1, 0) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group1()[0]]))
                + Simd32x4::from([
                    (-(self.group7()[1] * other.group0()[2]) + (self.group7()[0] * other.group2()[3]) + (self.group6()[2] * other.group2()[1])
                        - (self.group5()[3] * other.group3()[0])
                        + (self.group0()[1] * other.group1()[0])),
                    (-(self.group7()[2] * other.group0()[0]) + (self.group7()[1] * other.group2()[3]) + (self.group6()[0] * other.group2()[2])
                        - (self.group5()[3] * other.group3()[1])
                        + (self.group0()[1] * other.group1()[1])),
                    ((self.group7()[2] * other.group2()[3]) - (self.group7()[0] * other.group0()[1]) + (self.group6()[1] * other.group2()[0])
                        - (self.group5()[3] * other.group3()[2])
                        + (self.group0()[1] * other.group1()[2])),
                    ((self.group7()[0] * other.group0()[0])
                        - (self.group6()[1] * other.group2()[1])
                        - (self.group6()[0] * other.group2()[0])
                        - (self[e1] * other.group2()[3])
                        - (self.group0()[1] * other.group1()[3])),
                ])),
            // e423, e431, e412
            ((swizzle!(self.group6(), 2, 1, 2) * Simd32x3::from([other.group3()[1], other.group1()[3], other.group1()[3]]))
                + (swizzle!(self.group6(), 2, 1, 2) * Simd32x3::from([other.group1()[1], other.group0()[3], other.group0()[3]]))
                - (swizzle!(self.group6(), 1, 2, 0) * Simd32x3::from([other.group3()[2], other.group3()[0], other.group3()[1]]))
                - (swizzle!(self.group6(), 1, 2, 0) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]))
                + (swizzle!(self.group6(), 0, 0, 1) * Simd32x3::from([other.group1()[3], other.group3()[2], other.group3()[0]]))
                + (swizzle!(self.group6(), 0, 0, 1) * Simd32x3::from([other.group0()[3], other.group1()[2], other.group1()[0]]))
                + (Simd32x3::from(self.group5()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group5()[0], self.group5()[1], self.group5()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + Simd32x3::from([
                    ((self.group5()[2] * other.group0()[1]) - (self.group5()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])
                        - (self.group1()[1] * other.group0()[2])),
                    (-(self.group5()[2] * other.group0()[0]) + (self.group5()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])
                        + (self.group1()[0] * other.group0()[2])),
                    ((self.group5()[1] * other.group0()[0]) - (self.group5()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])
                        - (self.group1()[0] * other.group0()[1])),
                ])),
            // e235, e315, e125
            (-(Simd32x3::from(self.group7()[2]) * Simd32x3::from([other.group3()[1], other.group1()[0], other.group1()[3]]))
                + (Simd32x3::from(self.group7()[2]) * Simd32x3::from([other.group1()[1], other.group3()[0], other.group0()[3]]))
                + (Simd32x3::from(self.group7()[1]) * Simd32x3::from([other.group3()[2], other.group0()[3], other.group1()[0]]))
                - (Simd32x3::from(self.group7()[1]) * Simd32x3::from([other.group1()[2], other.group1()[3], other.group3()[0]]))
                - (Simd32x3::from(self.group7()[0]) * Simd32x3::from([other.group1()[3], other.group3()[2], other.group1()[1]]))
                + (Simd32x3::from(self.group7()[0]) * Simd32x3::from([other.group0()[3], other.group1()[2], other.group3()[1]]))
                - (Simd32x3::from(self.group5()[3]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                + (Simd32x3::from(other.group2()[1]) * Simd32x3::from([self.group5()[2], self.group0()[1], self.group1()[0]]))
                + (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group5()[0], self.group5()[1], self.group5()[2]]))
                - (Simd32x3::from(self[e1]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from(self[e1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(other.group2()[2]) * Simd32x3::from([self.group1()[1], self.group5()[0], self.group0()[1]]))
                + (Simd32x3::from(other.group2()[0]) * Simd32x3::from([self.group0()[1], self.group1()[2], self.group5()[1]]))
                - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + Simd32x3::from([
                    (-(self.group5()[1] * other.group2()[2]) - (self.group1()[2] * other.group2()[1])),
                    (-(self.group5()[2] * other.group2()[0]) - (self.group1()[0] * other.group2()[2])),
                    (-(self.group5()[0] * other.group2()[1]) - (self.group1()[1] * other.group2()[0])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group3(), 1, 2, 0, 3) * Simd32x4::from([self.group10()[0], self.group10()[2], self.group10()[1], self.group3()[3]]))
                - (swizzle!(other.group2(), 0, 1, 2, 0) * Simd32x4::from([self[e35], self[e35], self[e35], self.group10()[2]]))
                + (Simd32x4::from(self.group8()[3]) * other.group0())
                - (swizzle!(self.group8(), 1, 2, 0, 3) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (swizzle!(other.group2(), 1, 2, 0, 1) * Simd32x4::from([self.group4()[2], self.group4()[0], self.group4()[1], self.group10()[1]]))
                + (swizzle!(self.group3(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[2]]))
                + (swizzle!(self.group3(), 2, 1, 2, 1) * Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group3()[1]]))
                - (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + (swizzle!(other.group3(), 0, 1, 2, 0) * Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group3()[0]]))
                + Simd32x4::from([
                    ((self.group10()[2] * other.group1()[3]) - (self.group10()[1] * other.group3()[2])
                        + (self.group8()[2] * other.group1()[1])
                        + (self.group8()[0] * other.group0()[3])
                        + (self.group4()[1] * other.group2()[2])
                        - (self.group4()[0] * other.group3()[3])
                        + (self.group3()[0] * other.group2()[3])),
                    ((self.group10()[1] * other.group1()[3]) - (self.group10()[0] * other.group3()[0])
                        + (self.group8()[1] * other.group0()[3])
                        + (self.group8()[0] * other.group1()[2])
                        + (self.group4()[2] * other.group2()[0])
                        - (self.group4()[1] * other.group3()[3])
                        + (self.group3()[0] * other.group0()[2])),
                    (-(self.group10()[2] * other.group3()[1])
                        + (self.group10()[0] * other.group1()[3])
                        + (self.group8()[2] * other.group0()[3])
                        + (self.group8()[1] * other.group1()[0])
                        - (self.group4()[2] * other.group3()[3])
                        + (self.group4()[0] * other.group2()[1])
                        + (self.group3()[1] * other.group0()[0])),
                    (-(self.group10()[0] * other.group2()[2])
                        - (self.group8()[2] * other.group2()[2])
                        - (self.group8()[1] * other.group2()[1])
                        - (self.group8()[0] * other.group2()[0])
                        - (self.group3()[1] * other.group1()[1])
                        + (self.group0()[0] * other.group3()[3])
                        - (self.group3()[0] * other.group1()[0])),
                ])),
            // e1234
            (-(self.group10()[2] * other.group0()[0]) - (self.group10()[1] * other.group0()[1]) - (self.group10()[0] * other.group0()[2])
                + (self[e35] * other.group1()[3])
                + (self[e35] * other.group0()[3])
                + (self.group8()[2] * other.group0()[2])
                + (self.group8()[1] * other.group0()[1])
                + (self.group8()[0] * other.group0()[0])
                - (self.group4()[2] * other.group3()[2])
                - (self.group4()[2] * other.group1()[2])
                - (self.group4()[1] * other.group3()[1])
                - (self.group4()[1] * other.group1()[1])
                - (self.group4()[0] * other.group3()[0])
                - (self.group4()[0] * other.group1()[0])
                + (self.group0()[0] * other.group2()[3])
                - (self.group3()[3] * other.group2()[3])),
            // e12, e31, e23
            (-(swizzle!(self.group10(), 2, 0, 1) * Simd32x3::from([other.group1()[1], other.group1()[0], other.group1()[2]]))
                + (swizzle!(self.group10(), 1, 2, 2) * Simd32x3::from([other.group1()[0], other.group1()[2], other.group0()[3]]))
                + (swizzle!(self.group10(), 0, 1, 0) * Simd32x3::from([other.group0()[3], other.group0()[3], other.group1()[1]]))
                + (Simd32x3::from(self[e35]) * Simd32x3::from([other.group2()[2], other.group2()[1], other.group2()[0]]))
                + (Simd32x3::from(self.group8()[3]) * Simd32x3::from([other.group0()[2], other.group0()[1], other.group0()[0]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group8()[2], self.group8()[1], self.group8()[0]]))
                + (swizzle!(self.group4(), 2, 1, 2) * Simd32x3::from([other.group3()[3], other.group3()[3], other.group2()[1]]))
                + (swizzle!(self.group4(), 1, 0, 0) * Simd32x3::from([other.group2()[0], other.group2()[2], other.group3()[3]]))
                - (swizzle!(self.group4(), 0, 2, 1) * Simd32x3::from([other.group2()[1], other.group2()[0], other.group2()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group3()[2], other.group3()[1], other.group3()[0]]))
                + (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group3()[2], self.group3()[1], self.group3()[0]]))
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[2], other.group1()[1], other.group1()[0]]))
                + Simd32x3::from([
                    ((self.group8()[1] * other.group3()[0]) - (self.group8()[0] * other.group3()[1]) + (self.group3()[1] * other.group0()[0])
                        - (self.group3()[0] * other.group0()[1])),
                    (-(self.group8()[2] * other.group3()[0]) + (self.group8()[0] * other.group3()[2]) - (self.group3()[2] * other.group0()[0])
                        + (self.group3()[0] * other.group0()[2])),
                    ((self.group8()[2] * other.group3()[1]) - (self.group8()[1] * other.group3()[2]) + (self.group3()[2] * other.group0()[1])
                        - (self.group3()[1] * other.group0()[2])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl InfixSandwich for Plane {}
impl Sandwich<AntiScalar> for Plane {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       24        0
    //    simd3        0        1        0
    // Totals...
    // yes simd        9       25        0
    //  no simd        9       27        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = RoundPoint::from_groups(
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other[e12345] * -1.0),
                (self.group0()[1] * other[e12345] * -1.0),
                (self.group0()[2] * other[e12345] * -1.0),
                0.0,
            ]),
            // e5
            (self.group0()[3] * other[e12345]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for Plane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       21       59        0
    //    simd4       13       13        0
    // Totals...
    // yes simd       34       72        0
    //  no simd       73      111        0
    fn sandwich(self, other: Circle) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
            // e415, e425, e435, e321
            ((swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[0] * other.group1()[3]) * -1.0),
                    ((self.group0()[1] * other.group1()[3]) * -1.0),
                    ((self.group0()[2] * other.group1()[3]) * -1.0),
                    ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
                ])),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group0()[3]) * other.group1())
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group2()[2]]))
                + Simd32x4::from([
                    (self.group0()[2] * other.group2()[1]),
                    (self.group0()[0] * other.group2()[2]),
                    (self.group0()[1] * other.group2()[0]),
                    (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            ((swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group0()[3] * other.group0()[0]) - (self.group0()[2] * other.group1()[1])),
                    (-(self.group0()[3] * other.group0()[1]) - (self.group0()[0] * other.group1()[2])),
                    (-(self.group0()[3] * other.group0()[2]) - (self.group0()[1] * other.group1()[0])),
                    ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for Plane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       59        0
    //    simd4       14       14        0
    // Totals...
    // yes simd       38       73        0
    //  no simd       80      115        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
            // e415, e425, e435, e321
            ((swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[0] * other.group1()[3]) * -1.0),
                    ((self.group0()[1] * other.group1()[3]) * -1.0),
                    ((self.group0()[2] * other.group1()[3]) * -1.0),
                    ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
                ])),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * swizzle!(other.group2(), 2, 0, 1, 2))
                + (swizzle!(self.group0(), 2, 0, 1, 3) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]))
                + Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1]))])),
            // e1, e2, e3, e4
            ((swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group0()[3] * other.group0()[0]) - (self.group0()[2] * other.group1()[1]) - (self.group0()[0] * other.group2()[3])),
                    (-(self.group0()[3] * other.group0()[1]) - (self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group2()[3])),
                    (-(self.group0()[3] * other.group0()[2]) - (self.group0()[2] * other.group2()[3]) - (self.group0()[1] * other.group1()[0])),
                    ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for Plane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       30       55        0
    //    simd3        1        2        0
    //    simd4        9       11        0
    // Totals...
    // yes simd       40       68        0
    //  no simd       69      105        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            ((swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                - (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group1()[3]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group1()[3]) + (self.group0()[3] * other.group0()[2])),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e15, e25, e35, e1234
            ((swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]))
                + (swizzle!(self.group0(), 2, 0, 1, 0) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]))
                + (Simd32x4::from([-1.0, -1.0, -1.0, 1.0])
                    * swizzle!(self.group0(), 1, 2, 0, 1)
                    * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[1]]))),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group1(), 2, 0, 1, 3))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group0()[0]) + (self.group0()[2] * other.group1()[1])),
                    ((self.group0()[3] * other.group0()[1]) + (self.group0()[0] * other.group1()[2])),
                    ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group1()[0])),
                    (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for Plane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       62        0
    //    simd4       16       16        0
    // Totals...
    // yes simd       48       78        0
    //  no simd       96      126        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(swizzle!(self.group0(), 2, 0, 2, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group2()[3], other.group3()[2]]))
                - (swizzle!(self.group0(), 0, 1, 1, 0) * Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[0], other.group3()[0]]))
                + (swizzle!(self.group0(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]))
                + Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[1] * other.group3()[1]) * -1.0)])),
            // e23, e31, e12, e45
            ((Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group3()[1]) + (self.group0()[0] * other.group1()[3])),
                    ((self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group1()[3])),
                    ((self.group0()[2] * other.group1()[3]) + (self.group0()[1] * other.group3()[0])),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e15, e25, e35, e1234
            ((swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]))
                + (swizzle!(self.group0(), 2, 0, 2, 0) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group3()[3], other.group0()[0]]))
                + (swizzle!(self.group0(), 0, 1, 1, 1) * Simd32x4::from([other.group3()[3], other.group3()[3], other.group2()[0], other.group0()[1]]))
                + Simd32x4::from([
                    (-(self.group0()[3] * other.group3()[0]) - (self.group0()[1] * other.group2()[2])),
                    (-(self.group0()[3] * other.group3()[1]) - (self.group0()[2] * other.group2()[0])),
                    (-(self.group0()[3] * other.group3()[2]) - (self.group0()[0] * other.group2()[1])),
                    0.0,
                ])),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group1(), 2, 0, 1, 3))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group0()[0]) + (self.group0()[2] * other.group1()[1])),
                    ((self.group0()[3] * other.group0()[1]) + (self.group0()[0] * other.group1()[2])),
                    ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group1()[0])),
                    (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for Plane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       38        0
    //    simd4        9       10        0
    // Totals...
    // yes simd       21       48        0
    //  no simd       48       78        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from(0.0),
            // e235, e315, e125, e5
            (self.group0() * Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[1] * other.group0()[1] * -1.0),
                (self.group0()[2] * other.group0()[1] * -1.0),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for Plane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       26       50        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       32       56        0
    //  no simd       50       74        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[3] * other.group0()[3])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for Plane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       65        0
    //    simd4        7        7        0
    // Totals...
    // yes simd       47       72        0
    //  no simd       68       93        0
    fn sandwich(self, other: Flector) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[2] * other.group1()[1]) + (self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group1()[2])),
                (-(self.group0()[2] * other.group1()[0]) + (self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[3])),
                ((self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group0()[3] * other.group1()[0]) + (self.group0()[2] * other.group0()[1]) + (self.group0()[0] * other.group1()[3])
                    - (self.group0()[1] * other.group0()[2])),
                (-(self.group0()[3] * other.group1()[1]) - (self.group0()[2] * other.group0()[0])
                    + (self.group0()[0] * other.group0()[2])
                    + (self.group0()[1] * other.group1()[3])),
                (-(self.group0()[3] * other.group1()[2]) + (self.group0()[2] * other.group1()[3]) - (self.group0()[0] * other.group0()[1])
                    + (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[3] * other.group0()[3])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for Plane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       21       49        0
    //    simd4       10       10        0
    // Totals...
    // yes simd       31       59        0
    //  no simd       61       89        0
    fn sandwich(self, other: Line) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            (-(swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group0()[0]) + (self.group0()[2] * other.group1()[1])),
                    ((self.group0()[3] * other.group0()[1]) + (self.group0()[0] * other.group1()[2])),
                    ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group1()[0])),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for Plane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       52        0
    //    simd4       11       11        0
    // Totals...
    // yes simd       35       63        0
    //  no simd       68       96        0
    fn sandwich(self, other: Motor) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group0()[3]) * other.group0()) - (swizzle!(self.group0(), 1, 2, 0, 2) * swizzle!(other.group1(), 2, 0, 1, 2))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group1()[1]) + (self.group0()[0] * other.group1()[3])),
                    ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3])),
                    ((self.group0()[2] * other.group1()[3]) + (self.group0()[1] * other.group1()[0])),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[2] * other.group0()[1]) - (self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2])),
                ((self.group0()[2] * other.group0()[0]) - (self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group0()[3])),
                (-(self.group0()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for Plane {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       60      104        0
    //    simd2        2        2        0
    //    simd3       20       26        0
    //    simd4       17       19        0
    // Totals...
    // yes simd       99      151        0
    //  no simd      192      262        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(self.group0()[3]) * Simd32x2::from([other[e35], other.group1()[3]]))
                + Simd32x2::from([
                    (-(self.group0()[2] * other.group8()[2]) - (self.group0()[0] * other.group8()[0]) - (self.group0()[1] * other.group8()[1])),
                    ((self.group0()[2] * other.group1()[2]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
                ])),
            // e1, e2, e3, e4
            ((swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group6()[2]]))
                + Simd32x4::from([
                    (-(self.group0()[3] * other.group6()[0]) - (self.group0()[2] * other.group5()[1]) - (self.group0()[0] * other.group0()[1])),
                    (-(self.group0()[3] * other.group6()[1]) - (self.group0()[0] * other.group5()[2]) - (self.group0()[1] * other.group0()[1])),
                    (-(self.group0()[3] * other.group6()[2]) - (self.group0()[2] * other.group0()[1]) - (self.group0()[1] * other.group5()[0])),
                    ((self.group0()[0] * other.group6()[0]) + (self.group0()[1] * other.group6()[1])),
                ])),
            // e5
            ((self.group0()[3] * other.group5()[3]) + (self.group0()[3] * other.group0()[1])
                - (self.group0()[2] * other.group7()[2])
                - (self.group0()[0] * other.group7()[0])
                - (self.group0()[1] * other.group7()[1])),
            // e15, e25, e35, e45
            ((Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group10()[2], other.group10()[1], other.group10()[0], other[e35]]))
                - (swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group8()[0], other.group8()[1], other.group8()[2], other.group10()[0]]))
                - (swizzle!(self.group0(), 1, 2, 0, 0) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group10()[2]]))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group3()[1]) + (self.group0()[0] * other.group8()[3])),
                    ((self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group8()[3])),
                    ((self.group0()[2] * other.group8()[3]) + (self.group0()[1] * other.group3()[0])),
                    ((self.group0()[1] * other.group10()[1]) * -1.0),
                ])),
            // e41, e42, e43
            (-(swizzle!(other.group4(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))
                - (Simd32x3::from(other[e35]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (swizzle!(other.group4(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))),
            // e415, e425, e435, e321
            ((swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group6()[0], other.group6()[1], other.group6()[2], other.group5()[2]]))
                - (swizzle!(self.group0(), 2, 0, 2, 3) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group5()[3], other.group1()[3]]))
                + (swizzle!(self.group0(), 1, 2, 0, 0) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group5()[0]]))
                + (Simd32x4::from([-1.0, -1.0, -1.0, 1.0])
                    * swizzle!(self.group0(), 0, 1, 1, 1)
                    * Simd32x4::from([other.group5()[3], other.group5()[3], other.group1()[0], other.group5()[1]]))),
            // e423, e431, e412
            (-(swizzle!(other.group6(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (swizzle!(other.group6(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))),
            // e235, e315, e125
            ((Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group5()[0], other.group5()[1], other.group5()[2]]))
                + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (swizzle!(other.group7(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (swizzle!(other.group7(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], other.group0()[0]]))
                - (swizzle!(self.group0(), 1, 2, 0, 3) * Simd32x4::from([other.group10()[0], other.group10()[2], other.group10()[1], other.group3()[3]]))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group10()[1]) + (self.group0()[0] * other.group0()[0])),
                    ((self.group0()[0] * other.group10()[0]) + (self.group0()[1] * other.group0()[0])),
                    ((self.group0()[2] * other.group0()[0]) + (self.group0()[1] * other.group10()[2])),
                    (-(self.group0()[2] * other.group3()[2]) - (self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group3()[1])),
                ])),
            // e1234
            ((self.group0()[2] * other.group4()[2]) + (self.group0()[0] * other.group4()[0]) + (self.group0()[1] * other.group4()[1])),
            // e12, e31, e23
            ((Simd32x3::from(self.group0()[3]) * swizzle!(other.group4(), 2, 1, 0))
                + (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group0()[2], self.group0()[1], self.group0()[0]]))
                + Simd32x3::from([
                    (-(self.group0()[0] * other.group8()[1]) + (self.group0()[1] * other.group8()[0])),
                    (-(self.group0()[2] * other.group8()[0]) + (self.group0()[0] * other.group8()[2])),
                    ((self.group0()[2] * other.group8()[1]) - (self.group0()[1] * other.group8()[2])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for Plane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       52        0
    //    simd4        7        7        0
    // Totals...
    // yes simd       35       59        0
    //  no simd       56       80        0
    fn sandwich(self, other: Plane) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) - (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group0()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(0.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for Plane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       34        0
    //    simd3        0        2        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       20       44        0
    //  no simd       44       72        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = CircleRotor::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(-1.0)),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other.group0()[3] * -1.0),
            ]),
            // e235, e315, e125, e12345
            ((self.group0() * Simd32x4::from([other[e2], other[e2], other[e2], other.group0()[3]]))
                + (swizzle!(self.group0(), 3, 3, 3, 2) * swizzle!(other.group0(), 0, 1, 2, 2))
                + Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]))])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for Plane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       15        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        8       16        0
    //  no simd        8       19        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (self.group0() * Simd32x4::from(other[scalar])));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for Plane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       29       60        0
    //    simd4        7        7        0
    // Totals...
    // yes simd       36       67        0
    //  no simd       57       88        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other[e4315] * -1.0),
                (self.group0()[1] * other[e4315] * -1.0),
                (self.group0()[2] * other[e4315] * -1.0),
                ((self.group0()[3] * other[e4315]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other[e4315]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) - (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group0()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(0.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for Plane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       60        0
    //    simd4       17       19        0
    // Totals...
    // yes simd       45       79        0
    //  no simd       96      136        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((swizzle!(self.group0(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group3()[3]]))
                + Simd32x4::from([
                    (-(self.group0()[2] * other.group0()[1]) - (self.group0()[0] * other.group3()[3])),
                    (-(self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group3()[3])),
                    (-(self.group0()[2] * other.group3()[3]) - (self.group0()[1] * other.group0()[0])),
                    ((self.group0()[2] * other.group3()[2]) + (self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group3()[1])),
                ])),
            // e415, e425, e435, e321
            ((swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]))
                - (swizzle!(self.group0(), 2, 0, 2, 3) * Simd32x4::from([other.group3()[1], other.group3()[2], other.group1()[3], other.group3()[3]]))
                + (swizzle!(self.group0(), 1, 2, 0, 0) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[0]]))
                + (Simd32x4::from([-1.0, -1.0, -1.0, 1.0])
                    * swizzle!(self.group0(), 0, 1, 1, 1)
                    * Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[0], other.group1()[1]]))),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * swizzle!(other.group2(), 2, 0, 1, 2))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group2()[1]) + (self.group0()[0] * other.group2()[3])),
                    ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group2()[3])),
                    ((self.group0()[2] * other.group2()[3]) + (self.group0()[1] * other.group2()[0])),
                    (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            ((swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group0()[3] * other.group0()[0]) - (self.group0()[2] * other.group1()[1]) - (self.group0()[0] * other.group0()[3])),
                    (-(self.group0()[3] * other.group0()[1]) - (self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group0()[3])),
                    (-(self.group0()[3] * other.group0()[2]) - (self.group0()[2] * other.group0()[3]) - (self.group0()[1] * other.group1()[0])),
                    ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for Plane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       62        0
    //    simd4       17       17        0
    // Totals...
    // yes simd       49       79        0
    //  no simd      100      130        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(swizzle!(self.group0(), 2, 0, 2, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group2()[3], other.group3()[2]]))
                - (swizzle!(self.group0(), 0, 1, 1, 0) * Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[0], other.group3()[0]]))
                + (swizzle!(self.group0(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]))
                + Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[1] * other.group3()[1]) * -1.0)])),
            // e23, e31, e12, e45
            ((Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group3()[1]) + (self.group0()[0] * other.group1()[3])),
                    ((self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group1()[3])),
                    ((self.group0()[2] * other.group1()[3]) + (self.group0()[1] * other.group3()[0])),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e15, e25, e35, e1234
            ((swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]))
                + (swizzle!(self.group0(), 2, 0, 2, 0) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group3()[3], other.group0()[0]]))
                + (swizzle!(self.group0(), 0, 1, 1, 1) * Simd32x4::from([other.group3()[3], other.group3()[3], other.group2()[0], other.group0()[1]]))
                + Simd32x4::from([
                    (-(self.group0()[3] * other.group3()[0]) - (self.group0()[1] * other.group2()[2])),
                    (-(self.group0()[3] * other.group3()[1]) - (self.group0()[2] * other.group2()[0])),
                    (-(self.group0()[3] * other.group3()[2]) - (self.group0()[0] * other.group2()[1])),
                    0.0,
                ])),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(self.group0()[3]) * other.group0()) - (swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group1(), 2, 0, 1, 3))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group1()[1]) + (self.group0()[0] * other.group0()[3])),
                    ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[3])),
                    ((self.group0()[2] * other.group0()[3]) + (self.group0()[1] * other.group1()[0])),
                    (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl InfixSandwich for RoundPoint {}
impl Sandwich<AntiScalar> for RoundPoint {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        9        0
    //    simd3        1        2        0
    //    simd4        3        5        0
    // Totals...
    // yes simd        6       16        0
    //  no simd       17       35        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other[e12345]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self[e2]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e1234
            (self.group0()[3] * other[e12345] * -1.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       60        0
    //    simd3        2        3        0
    //    simd4       14       14        0
    // Totals...
    // yes simd       48       77        0
    //  no simd       94      125        0
    fn sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (-(Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                - (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
            // e23, e31, e12, e45
            (-(swizzle!(self.group0(), 0, 1, 2, 2) * swizzle!(other.group1(), 3, 3, 3, 2))
                - (swizzle!(self.group0(), 3, 3, 3, 0) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[0]]))
                - Simd32x4::from([
                    (self[e2] * other.group0()[0]),
                    (self[e2] * other.group0()[1]),
                    (self[e2] * other.group0()[2]),
                    (self.group0()[1] * other.group1()[1]),
                ])),
            // e15, e25, e35, e1234
            ((swizzle!(self.group0(), 2, 0, 1, 3) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]))
                + Simd32x4::from([
                    (-(self[e2] * other.group1()[0]) - (self.group0()[1] * other.group2()[2])),
                    (-(self[e2] * other.group1()[1]) - (self.group0()[2] * other.group2()[0])),
                    (-(self[e2] * other.group1()[2]) - (self.group0()[0] * other.group2()[1])),
                    ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(self[e2]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group2()[0]) + (self.group0()[2] * other.group1()[1])),
                    ((self.group0()[3] * other.group2()[1]) + (self.group0()[0] * other.group1()[2])),
                    ((self.group0()[3] * other.group2()[2]) + (self.group0()[1] * other.group1()[0])),
                    (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       33       64        0
    //    simd3        2        3        0
    //    simd4       15       15        0
    // Totals...
    // yes simd       50       82        0
    //  no simd       99      133        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (-(Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                - (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
            // e23, e31, e12, e45
            (-(swizzle!(self.group0(), 0, 1, 2, 2) * swizzle!(other.group1(), 3, 3, 3, 2))
                - (swizzle!(self.group0(), 3, 3, 3, 0) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[0]]))
                - Simd32x4::from([
                    (self[e2] * other.group0()[0]),
                    (self[e2] * other.group0()[1]),
                    (self[e2] * other.group0()[2]),
                    (self.group0()[1] * other.group1()[1]),
                ])),
            // e15, e25, e35, e1234
            (-(swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group2(), 2, 0, 1, 3))
                + (swizzle!(self.group0(), 2, 0, 1, 3) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]))
                + Simd32x4::from([
                    ((self[e2] * other.group1()[0]) * -1.0),
                    ((self[e2] * other.group1()[1]) * -1.0),
                    ((self[e2] * other.group1()[2]) * -1.0),
                    ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(self[e2]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (swizzle!(other.group1(), 2, 0, 1, 3) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self[e2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group2()[0]) + (self.group0()[2] * other.group1()[1]) + (self.group0()[0] * other.group2()[3])),
                    ((self.group0()[3] * other.group2()[1]) + (self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group2()[3])),
                    ((self.group0()[3] * other.group2()[2]) + (self.group0()[2] * other.group2()[3]) + (self.group0()[1] * other.group1()[0])),
                    (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       31       58        0
    //    simd4       17       19        0
    // Totals...
    // yes simd       48       77        0
    //  no simd       99      134        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[3] * other.group1()[0]) - (self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[3] * other.group1()[1]) + (self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                ((self.group0()[3] * other.group1()[2]) - (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
            // e415, e425, e435, e321
            (-(swizzle!(self.group0(), 0, 1, 2, 2) * swizzle!(other.group1(), 3, 3, 3, 2))
                + Simd32x4::from([
                    ((self[e2] * other.group0()[0]) + (self.group0()[3] * other.group2()[0])),
                    ((self[e2] * other.group0()[1]) + (self.group0()[3] * other.group2()[1])),
                    ((self[e2] * other.group0()[2]) + (self.group0()[3] * other.group2()[2])),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e235, e315, e125, e5
            ((swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group2()[2]]))
                + Simd32x4::from([
                    ((self[e2] * other.group1()[0]) - (self.group0()[2] * other.group2()[1])),
                    ((self[e2] * other.group1()[1]) - (self.group0()[0] * other.group2()[2])),
                    ((self[e2] * other.group1()[2]) - (self.group0()[1] * other.group2()[0])),
                    (-(self[e2] * other.group1()[3]) + (self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            ((Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                + Simd32x4::from([
                    (-(self[e2] * other.group0()[0]) + (self.group0()[2] * other.group1()[1])),
                    (-(self[e2] * other.group0()[1]) + (self.group0()[0] * other.group1()[2])),
                    (-(self[e2] * other.group0()[2]) + (self.group0()[1] * other.group1()[0])),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       27       55        0
    //    simd4       24       27        0
    // Totals...
    // yes simd       51       82        0
    //  no simd      123      163        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(self.group0()[3]) * other.group3())
                + (swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[2]]))
                + (swizzle!(self.group0(), 2, 0, 2, 0) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group2()[3], other.group3()[0]]))
                + (swizzle!(self.group0(), 0, 1, 1, 1) * Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[0], other.group3()[1]]))
                + (Simd32x4::from([
                    (self.group0()[1] * other.group0()[2]),
                    (self.group0()[2] * other.group0()[0]),
                    (self.group0()[0] * other.group0()[1]),
                    (self[e2] * other.group2()[3]),
                ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))),
            // e415, e425, e435, e321
            ((Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                - (swizzle!(self.group0(), 2, 0, 2, 2) * Simd32x4::from([other.group3()[1], other.group3()[2], other.group1()[3], other.group1()[2]]))
                - (swizzle!(self.group0(), 0, 1, 1, 0) * Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[0], other.group1()[0]]))
                + Simd32x4::from([
                    ((self[e2] * other.group0()[0]) + (self.group0()[1] * other.group3()[2])),
                    ((self[e2] * other.group0()[1]) + (self.group0()[2] * other.group3()[0])),
                    ((self[e2] * other.group0()[2]) + (self.group0()[0] * other.group3()[1])),
                    (-(self[e2] * other.group2()[3]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e235, e315, e125, e5
            (-(Simd32x4::from(self[e2]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                + (swizzle!(self.group0(), 1, 2, 0, 2) * swizzle!(other.group2(), 2, 0, 1, 2))
                + Simd32x4::from([
                    ((self[e2] * other.group1()[0]) - (self.group0()[2] * other.group2()[1]) - (self.group0()[0] * other.group3()[3])),
                    ((self[e2] * other.group1()[1]) - (self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group3()[3])),
                    ((self[e2] * other.group1()[2]) - (self.group0()[2] * other.group3()[3]) - (self.group0()[1] * other.group2()[0])),
                    ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            ((Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                + Simd32x4::from([
                    (-(self[e2] * other.group0()[0]) + (self.group0()[2] * other.group1()[1])),
                    (-(self[e2] * other.group0()[1]) + (self.group0()[0] * other.group1()[2])),
                    (-(self[e2] * other.group0()[2]) + (self.group0()[1] * other.group1()[0])),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       31        0
    //    simd4       12       18        0
    // Totals...
    // yes simd       28       49        0
    //  no simd       64      103        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[0] * -1.0)]),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[0])]),
            // e15, e25, e35, e1234
            (self.group0() * Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self[e2]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       32        0
    //    simd4       15       18        0
    // Totals...
    // yes simd       31       50        0
    //  no simd       76      104        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
                (-(self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
                0.0,
            ]),
            // e235, e315, e125, e5
            ((swizzle!(self.group0(), 1, 2, 0, 2) * swizzle!(other.group0(), 2, 0, 1, 2))
                - (swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self[e2]]))
                + Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]))])),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[3]) * other.group0()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       52        0
    //    simd4       15       18        0
    // Totals...
    // yes simd       43       70        0
    //  no simd       88      124        0
    fn sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                ((self.group0()[3] * other.group1()[3]) + (self.group0()[2] * other.group1()[2]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[3] * other.group0()[0]) - (self.group0()[2] * other.group1()[1]) - (self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[2])),
                ((self.group0()[3] * other.group0()[1]) + (self.group0()[2] * other.group1()[0]) - (self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group0()[3])),
                ((self.group0()[3] * other.group0()[2]) - (self.group0()[2] * other.group0()[3]) + (self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                (self.group0()[3] * other.group1()[3]),
            ]),
            // e235, e315, e125, e5
            (-(Simd32x4::from(self[e2]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                + (swizzle!(self.group0(), 1, 2, 0, 2) * swizzle!(other.group0(), 2, 0, 1, 2))
                + Simd32x4::from([
                    (-(self.group0()[2] * other.group0()[1]) - (self.group0()[0] * other.group1()[3])),
                    (-(self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group1()[3])),
                    (-(self.group0()[2] * other.group1()[3]) - (self.group0()[1] * other.group0()[0])),
                    ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[3]) * other.group0()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       35       65        0
    //    simd3        0        2        0
    //    simd4       10       10        0
    // Totals...
    // yes simd       45       77        0
    //  no simd       75      111        0
    fn sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group0()[3]) * other.group0() * Simd32x3::from(-1.0)),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0] * -1.0),
                (self.group0()[3] * other.group1()[1] * -1.0),
                (self.group0()[3] * other.group1()[2] * -1.0),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self[e2] * other.group0()[0]) - (self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])),
                (-(self[e2] * other.group0()[1]) + (self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0])),
                (-(self[e2] * other.group0()[2]) - (self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group1()[0]) + (self.group0()[2] * other.group0()[1])),
                    ((self.group0()[3] * other.group1()[1]) + (self.group0()[0] * other.group0()[2])),
                    ((self.group0()[3] * other.group1()[2]) + (self.group0()[1] * other.group0()[0])),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       64        0
    //    simd4       13       17        0
    // Totals...
    // yes simd       49       81        0
    //  no simd       88      132        0
    fn sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]) * Simd32x4::from(-1.0)),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0] * -1.0),
                (self.group0()[3] * other.group1()[1] * -1.0),
                (self.group0()[3] * other.group1()[2] * -1.0),
                ((self.group0()[3] * other.group1()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self[e2] * other.group0()[0]) + (self.group0()[2] * other.group1()[1]) + (self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group1()[2])),
                (-(self[e2] * other.group0()[1]) - (self.group0()[2] * other.group1()[0]) + (self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3])),
                (-(self[e2] * other.group0()[2]) + (self.group0()[2] * other.group1()[3]) - (self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
                (self.group0()[3] * other.group0()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group0(), 2, 0, 1, 3) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self[e2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group1()[0]) + (self.group0()[2] * other.group0()[1]) + (self.group0()[0] * other.group0()[3])),
                    ((self.group0()[3] * other.group1()[1]) + (self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[3])),
                    ((self.group0()[3] * other.group1()[2]) + (self.group0()[2] * other.group0()[3]) + (self.group0()[1] * other.group0()[0])),
                    (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for RoundPoint {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64      112        0
    //    simd2        6        6        0
    //    simd3       28       32        0
    //    simd4       24       26        0
    // Totals...
    // yes simd      122      176        0
    //  no simd      256      324        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group1()[2], other.group8()[2]]))
                + (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group1()[0], other.group8()[0]]))
                + (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group1()[1], other.group8()[1]]))
                + Simd32x2::from([
                    (-(self[e2] * other.group1()[3]) - (self.group0()[3] * other[e1])),
                    ((self[e2] * other[e35]) + (self.group0()[3] * other.group8()[3])),
                ])),
            // e1, e2, e3, e4
            ((Simd32x4::from(self.group0()[3]) * other.group3())
                + (swizzle!(self.group0(), 2, 0, 2, 3) * Simd32x4::from([other.group10()[1], other.group10()[0], other.group0()[0], other.group0()[0]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group10()[0], other.group10()[2], other.group10()[1], other.group4()[2]]))
                + Simd32x4::from([
                    (-(self[e2] * other.group4()[0]) + (self.group0()[0] * other.group0()[0])),
                    (-(self[e2] * other.group4()[1]) + (self.group0()[1] * other.group0()[0])),
                    (-(self[e2] * other.group4()[2]) + (self.group0()[1] * other.group10()[2])),
                    (-(self.group0()[0] * other.group4()[0]) - (self.group0()[1] * other.group4()[1])),
                ])),
            // e5
            (-(self[e2] * other.group3()[3])
                + (self[e2] * other.group0()[0])
                + (self.group0()[2] * other.group3()[2])
                + (self.group0()[0] * other.group3()[0])
                + (self.group0()[1] * other.group3()[1])),
            // e15, e25, e35, e45
            (-(Simd32x4::from(self[e2]) * Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group1()[3]]))
                + (swizzle!(self.group0(), 2, 0, 2, 3) * Simd32x4::from([other.group7()[1], other.group7()[2], other[e1], other[e1]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group7()[2], other.group7()[0], other.group7()[1], other.group5()[2]]))
                + Simd32x4::from([
                    (-(self[e2] * other.group1()[0]) + (self.group0()[0] * other[e1])),
                    (-(self[e2] * other.group1()[1]) + (self.group0()[1] * other[e1])),
                    (-(self[e2] * other.group1()[2]) + (self.group0()[1] * other.group7()[0])),
                    (-(self.group0()[0] * other.group5()[0]) - (self.group0()[1] * other.group5()[1])),
                ])),
            // e41, e42, e43
            (-(Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group5()[0], other.group5()[1], other.group5()[2]]))
                + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (swizzle!(other.group6(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (swizzle!(other.group6(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))),
            // e415, e425, e435, e321
            ((Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group8()[3]]))
                - (swizzle!(self.group0(), 2, 0, 2, 2) * Simd32x4::from([other.group8()[1], other.group8()[2], other.group3()[3], other.group10()[0]]))
                - (swizzle!(self.group0(), 0, 1, 1, 0) * Simd32x4::from([other.group3()[3], other.group3()[3], other.group8()[0], other.group10()[2]]))
                + Simd32x4::from([
                    ((self[e2] * other.group4()[0]) + (self.group0()[1] * other.group8()[2])),
                    ((self[e2] * other.group4()[1]) + (self.group0()[2] * other.group8()[0])),
                    ((self[e2] * other.group4()[2]) + (self.group0()[0] * other.group8()[1])),
                    (-(self[e2] * other[e35]) - (self.group0()[1] * other.group10()[1])),
                ])),
            // e423, e431, e412
            ((Simd32x3::from(self.group0()[3]) * swizzle!(other.group10(), 2, 1, 0))
                + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group8()[0], other.group8()[1], other.group8()[2]]))
                + (swizzle!(other.group4(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))
                + (Simd32x3::from(other[e35]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (swizzle!(other.group4(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))),
            // e235, e315, e125
            ((Simd32x3::from(self[e2]) * swizzle!(other.group10(), 2, 1, 0))
                - (Simd32x3::from(self[e2]) * Simd32x3::from([other.group8()[0], other.group8()[1], other.group8()[2]]))
                - (Simd32x3::from(other.group8()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + Simd32x3::from([
                    (-(self.group0()[2] * other.group3()[1]) + (self.group0()[1] * other.group3()[2])),
                    ((self.group0()[2] * other.group3()[0]) - (self.group0()[0] * other.group3()[2])),
                    ((self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group3()[0])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(self[e2]) * Simd32x4::from([other.group6()[0], other.group6()[1], other.group6()[2], other.group5()[3]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group7()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group7()[0]) + (self.group0()[2] * other.group5()[1]) + (self.group0()[0] * other.group0()[1])),
                    ((self.group0()[3] * other.group7()[1]) + (self.group0()[0] * other.group5()[2]) + (self.group0()[1] * other.group0()[1])),
                    ((self.group0()[3] * other.group7()[2]) + (self.group0()[2] * other.group0()[1]) + (self.group0()[1] * other.group5()[0])),
                    (-(self[e2] * other.group0()[1]) - (self.group0()[0] * other.group7()[0]) - (self.group0()[1] * other.group7()[1])),
                ])),
            // e1234
            ((self.group0()[3] * other.group5()[3]) - (self.group0()[3] * other.group0()[1])
                + (self.group0()[2] * other.group6()[2])
                + (self.group0()[0] * other.group6()[0])
                + (self.group0()[1] * other.group6()[1])),
            // e12, e31, e23
            (-(Simd32x3::from(self[e2]) * swizzle!(other.group6(), 2, 1, 0))
                - (Simd32x3::from(self.group0()[3]) * swizzle!(other.group7(), 2, 1, 0))
                - (Simd32x3::from(other.group5()[3]) * Simd32x3::from([self.group0()[2], self.group0()[1], self.group0()[0]]))
                + Simd32x3::from([
                    ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                    ((self.group0()[2] * other.group1()[0]) - (self.group0()[0] * other.group1()[2])),
                    (-(self.group0()[2] * other.group1()[1]) + (self.group0()[1] * other.group1()[2])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for RoundPoint {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       27        0
    //    simd3        2        4        0
    //    simd4        8       10        0
    // Totals...
    // yes simd       21       41        0
    //  no simd       49       79        0
    fn sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = CircleRotor::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e235, e315, e125, e12345
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self[e2] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[3]) - (self[e2] * other.group0()[1])),
                (-(self.group0()[2] * other.group0()[3]) - (self[e2] * other.group0()[2])),
                ((self.group0()[3] * other.group0()[3]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       21       37        0
    //    simd4       15       18        0
    // Totals...
    // yes simd       36       55        0
    //  no simd       81      109        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self[e2]]))
                + (swizzle!(self.group0(), 3, 3, 3, 2) * swizzle!(other.group0(), 0, 1, 2, 2))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    (-(self.group0()[3] * other[e2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
            // e23, e31, e12, e45
            ((swizzle!(self.group0(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other[e2]]))
                - (swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self[e2]]))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other[e2]) - (self[e2] * other.group0()[0])),
                ((self.group0()[1] * other[e2]) - (self[e2] * other.group0()[1])),
                ((self.group0()[2] * other[e2]) - (self[e2] * other.group0()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(0.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       10        0
    //    simd4        3        5        0
    // Totals...
    // yes simd        8       15        0
    //  no simd       17       30        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = RoundPoint::from_groups(/* e1, e2, e3, e4 */ (self.group0() * Simd32x4::from(other[scalar])), /* e5 */ (self[e2] * other[scalar]));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for RoundPoint {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       25        0
    //    simd3        3        5        0
    //    simd4        9       11        0
    // Totals...
    // yes simd       21       41        0
    //  no simd       54       84        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = CircleRotor::from_groups(
            // e423, e431, e412
            ((Simd32x3::from(other[e4315]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))),
            // e415, e425, e435, e321
            ((swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))
                - Simd32x4::from([
                    (self.group0()[2] * other.group0()[1]),
                    (self.group0()[0] * other.group0()[2]),
                    (self.group0()[1] * other.group0()[0]),
                    (self[e2] * other[e4315]),
                ])),
            // e235, e315, e125, e12345
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self[e2] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[3]) - (self[e2] * other.group0()[1])),
                (-(self.group0()[2] * other.group0()[3]) - (self[e2] * other.group0()[2])),
                ((self[e2] * other[e4315])
                    + (self.group0()[3] * other.group0()[3])
                    + (self.group0()[2] * other.group0()[2])
                    + (self.group0()[0] * other.group0()[0])
                    + (self.group0()[1] * other.group0()[1])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       48        0
    //    simd4       25       30        0
    // Totals...
    // yes simd       53       78        0
    //  no simd      128      168        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((swizzle!(self.group0(), 3, 3, 3, 2) * swizzle!(other.group3(), 0, 1, 2, 2))
                - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                - (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self[e2]]))
                + (swizzle!(self.group0(), 1, 2, 0, 0) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group3()[0]]))
                + (Simd32x4::from([-1.0, -1.0, -1.0, 1.0])
                    * swizzle!(self.group0(), 2, 0, 1, 1)
                    * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[1]]))),
            // e23, e31, e12, e45
            (-(Simd32x4::from(self[e2]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group3()[3]]))
                - (swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[2]]))
                - (swizzle!(self.group0(), 2, 0, 2, 0) * Simd32x4::from([other.group3()[1], other.group3()[2], other.group1()[3], other.group1()[0]]))
                - (swizzle!(self.group0(), 0, 1, 1, 1) * Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[0], other.group1()[1]]))
                + (swizzle!(self.group0(), 1, 2, 0, 3) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[3]]))),
            // e15, e25, e35, e1234
            ((swizzle!(self.group0(), 2, 0, 2, 3) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[3], other.group1()[3]]))
                + (swizzle!(self.group0(), 0, 1, 1, 2) * Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[0], other.group0()[2]]))
                - (swizzle!(self.group0(), 1, 2, 0, 3) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[3]]))
                + Simd32x4::from([
                    (-(self[e2] * other.group3()[0]) - (self[e2] * other.group1()[0])),
                    (-(self[e2] * other.group3()[1]) - (self[e2] * other.group1()[1])),
                    (-(self[e2] * other.group3()[2]) - (self[e2] * other.group1()[2])),
                    ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(self[e2]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group2()[0]) + (self.group0()[2] * other.group1()[1]) + (self.group0()[0] * other.group0()[3])),
                    ((self.group0()[3] * other.group2()[1]) + (self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[3])),
                    ((self.group0()[3] * other.group2()[2]) + (self.group0()[2] * other.group0()[3]) + (self.group0()[1] * other.group1()[0])),
                    (-(self[e2] * other.group0()[3]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       44        0
    //    simd4       27       32        0
    // Totals...
    // yes simd       47       76        0
    //  no simd      128      172        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(self.group0()[3]) * other.group3())
                + (swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[2]]))
                + (swizzle!(self.group0(), 2, 0, 2, 0) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group2()[3], other.group3()[0]]))
                + (swizzle!(self.group0(), 0, 1, 1, 1) * Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[0], other.group3()[1]]))
                + (Simd32x4::from([
                    (self.group0()[1] * other.group0()[2]),
                    (self.group0()[2] * other.group0()[0]),
                    (self.group0()[0] * other.group0()[1]),
                    (self[e2] * other.group2()[3]),
                ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))),
            // e415, e425, e435, e321
            ((Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                - (swizzle!(self.group0(), 2, 0, 2, 2) * Simd32x4::from([other.group3()[1], other.group3()[2], other.group1()[3], other.group1()[2]]))
                - (swizzle!(self.group0(), 0, 1, 1, 0) * Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[0], other.group1()[0]]))
                + Simd32x4::from([
                    ((self[e2] * other.group0()[0]) + (self.group0()[1] * other.group3()[2])),
                    ((self[e2] * other.group0()[1]) + (self.group0()[2] * other.group3()[0])),
                    ((self[e2] * other.group0()[2]) + (self.group0()[0] * other.group3()[1])),
                    (-(self[e2] * other.group2()[3]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e235, e315, e125, e5
            (-(Simd32x4::from(self[e2]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                + (Simd32x4::from(self[e2]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                + (swizzle!(self.group0(), 1, 2, 0, 2) * swizzle!(other.group2(), 2, 0, 1, 2))
                + Simd32x4::from([
                    (-(self.group0()[2] * other.group2()[1]) - (self.group0()[0] * other.group3()[3])),
                    (-(self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group3()[3])),
                    (-(self.group0()[2] * other.group3()[3]) - (self.group0()[1] * other.group2()[0])),
                    ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self[e2], self[e2], self[e2], self.group0()[2]]))
                + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))
                + (swizzle!(self.group0(), 2, 0, 2, 3) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group0()[3], other.group0()[3]]))
                - (swizzle!(self.group0(), 1, 2, 0, 0) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]))
                + (Simd32x4::from([1.0, 1.0, 1.0, -1.0])
                    * swizzle!(self.group0(), 0, 1, 1, 1)
                    * Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[0], other.group0()[1]]))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl InfixSandwich for Scalar {}
impl Sandwich<AntiScalar> for Scalar {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = AntiScalar::from_groups(/* e12345 */ (self[scalar] * other[e12345]));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for Scalar {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        4        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0       20        0
    fn sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Circle::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[scalar]) * other.group0()),
            // e415, e425, e435, e321
            (Simd32x4::from(self[scalar]) * other.group1()),
            // e235, e315, e125
            (Simd32x3::from(self[scalar]) * other.group2()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for Scalar {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        2        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0       22        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = CircleRotor::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[scalar]) * other.group0()),
            // e415, e425, e435, e321
            (Simd32x4::from(self[scalar]) * other.group1()),
            // e235, e315, e125, e12345
            (Simd32x4::from(self[scalar]) * other.group2()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for Scalar {
    type Output = Dipole;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        4        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0       20        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Dipole::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[scalar]) * other.group0()),
            // e23, e31, e12, e45
            (Simd32x4::from(self[scalar]) * other.group1()),
            // e15, e25, e35
            (Simd32x3::from(self[scalar]) * other.group2()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for Scalar {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        2        0
    //    simd4        0        6        0
    // Totals...
    // yes simd        0        8        0
    //  no simd        0       30        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[scalar]) * other.group0()),
            // e23, e31, e12, e45
            (Simd32x4::from(self[scalar]) * other.group1()),
            // e15, e25, e35, e1234
            (Simd32x4::from(self[scalar]) * other.group2()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[scalar]) * other.group3()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for Scalar {
    type Output = DualNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        2        0
    // no simd        0        4        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DualNum::from_groups(/* e5, e12345 */ (Simd32x2::from(self[scalar]) * other.group0()));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for Scalar {
    type Output = FlatPoint;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = FlatPoint::from_groups(/* e15, e25, e35, e45 */ (Simd32x4::from(self[scalar]) * other.group0()));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for Scalar {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(self[scalar]) * other.group0()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[scalar]) * other.group1()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for Scalar {
    type Output = Line;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        4        0
    // no simd        0       12        0
    fn sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Line::from_groups(
            // e415, e425, e435
            (Simd32x3::from(self[scalar]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self[scalar]) * other.group1()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for Scalar {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(self[scalar]) * other.group0()),
            // e235, e315, e125, e5
            (Simd32x4::from(self[scalar]) * other.group1()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for Scalar {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        4        0
    //    simd2        0        2        0
    //    simd3        0        8        0
    //    simd4        0        8        0
    // Totals...
    // yes simd        0       22        0
    //  no simd        0       64        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from(self[scalar]) * other.group0()),
            // e1, e2, e3, e4
            (Simd32x4::from(self[scalar]) * other.group1()),
            // e5
            (self[scalar] * other[e1]),
            // e15, e25, e35, e45
            (Simd32x4::from(self[scalar]) * other.group3()),
            // e41, e42, e43
            (Simd32x3::from(self[scalar]) * other.group4()),
            // e415, e425, e435, e321
            (Simd32x4::from(self[scalar]) * other.group5()),
            // e423, e431, e412
            (Simd32x3::from(self[scalar]) * other.group6()),
            // e235, e315, e125
            (Simd32x3::from(self[scalar]) * other.group7()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[scalar]) * other.group8()),
            // e1234
            (self[scalar] * other[e35]),
            // e12, e31, e23
            (Simd32x3::from(self[scalar]) * other.group10()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for Scalar {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (Simd32x4::from(self[scalar]) * other.group0()));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for Scalar {
    type Output = RoundPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       10        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = RoundPoint::from_groups(/* e1, e2, e3, e4 */ (Simd32x4::from(self[scalar]) * other.group0()), /* e5 */ (self[scalar] * other[e2]));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for Scalar {
    type Output = Scalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Scalar::from_groups(/* scalar */ (self[scalar] * other[scalar]));
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for Scalar {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       10        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[scalar]) * other.group0()),
            // e1234
            (self[scalar] * other[e4315]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for Scalar {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        8        0
    // no simd        0       32        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self[scalar]) * other.group0()),
            // e415, e425, e435, e321
            (Simd32x4::from(self[scalar]) * other.group1()),
            // e235, e315, e125, e5
            (Simd32x4::from(self[scalar]) * other.group2()),
            // e1, e2, e3, e4
            (Simd32x4::from(self[scalar]) * other.group3()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for Scalar {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        8        0
    // no simd        0       32        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self[scalar]) * other.group0()),
            // e23, e31, e12, e45
            (Simd32x4::from(self[scalar]) * other.group1()),
            // e15, e25, e35, e1234
            (Simd32x4::from(self[scalar]) * other.group2()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[scalar]) * other.group3()),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl InfixSandwich for Sphere {}
impl Sandwich<AntiScalar> for Sphere {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       16        0
    //    simd3        1        2        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        9       21        0
    //  no simd       14       34        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = RoundPoint::from_groups(
            // e1, e2, e3, e4
            (Simd32x4::from(other[e12345]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self[e4315]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e5
            (self.group0()[3] * other[e12345]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       27       54        0
    //    simd4       18       20        0
    // Totals...
    // yes simd       45       74        0
    //  no simd       99      134        0
    fn sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self[e4315] * other.group1()[0]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                ((self[e4315] * other.group1()[1]) - (self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self[e4315] * other.group1()[2]) + (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
            // e415, e425, e435, e321
            ((swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]))
                + Simd32x4::from([
                    ((self[e4315] * other.group2()[0]) - (self.group0()[0] * other.group1()[3])),
                    ((self[e4315] * other.group2()[1]) - (self.group0()[1] * other.group1()[3])),
                    ((self[e4315] * other.group2()[2]) - (self.group0()[2] * other.group1()[3])),
                    ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
                ])),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group0()[3]) * other.group1())
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group2()[2]]))
                + Simd32x4::from([
                    (self.group0()[2] * other.group2()[1]),
                    (self.group0()[0] * other.group2()[2]),
                    (self.group0()[1] * other.group2()[0]),
                    (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            ((swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                - (swizzle!(other.group1(), 1, 2, 0, 3) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self[e4315]]))
                + Simd32x4::from([
                    ((self[e4315] * other.group2()[0]) - (self.group0()[3] * other.group0()[0])),
                    ((self[e4315] * other.group2()[1]) - (self.group0()[3] * other.group0()[1])),
                    ((self[e4315] * other.group2()[2]) - (self.group0()[3] * other.group0()[2])),
                    ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       27       51        0
    //    simd4       20       22        0
    // Totals...
    // yes simd       47       73        0
    //  no simd      107      139        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self[e4315] * other.group1()[0]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                ((self[e4315] * other.group1()[1]) - (self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self[e4315] * other.group1()[2]) + (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
            // e415, e425, e435, e321
            ((swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]))
                + Simd32x4::from([
                    ((self[e4315] * other.group2()[0]) - (self.group0()[0] * other.group1()[3])),
                    ((self[e4315] * other.group2()[1]) - (self.group0()[1] * other.group1()[3])),
                    ((self[e4315] * other.group2()[2]) - (self.group0()[2] * other.group1()[3])),
                    ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
                ])),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * swizzle!(other.group2(), 2, 0, 1, 2))
                + (swizzle!(self.group0(), 2, 0, 1, 3) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]))
                + Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1]))])),
            // e1, e2, e3, e4
            ((Simd32x4::from(self[e4315]) * other.group2())
                - (swizzle!(other.group1(), 1, 2, 0, 3) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self[e4315]]))
                + (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group0()[3] * other.group0()[0]) - (self.group0()[0] * other.group2()[3])),
                    (-(self.group0()[3] * other.group0()[1]) - (self.group0()[1] * other.group2()[3])),
                    (-(self.group0()[3] * other.group0()[2]) - (self.group0()[2] * other.group2()[3])),
                    ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       63        0
    //    simd3        2        3        0
    //    simd4       13       15        0
    // Totals...
    // yes simd       51       81        0
    //  no simd       94      132        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from(self[e4315]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                - (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self[e4315] * other.group2()[0]) + (self.group0()[0] * other.group1()[3]) + (self.group0()[3] * other.group0()[0])),
                ((self[e4315] * other.group2()[1]) + (self.group0()[1] * other.group1()[3]) + (self.group0()[3] * other.group0()[1])),
                ((self[e4315] * other.group2()[2]) + (self.group0()[2] * other.group1()[3]) + (self.group0()[3] * other.group0()[2])),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e15, e25, e35, e1234
            ((other.group1() * Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self[e4315]]))
                + (swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[2]]))
                + Simd32x4::from([
                    ((self.group0()[1] * other.group2()[2]) * -1.0),
                    ((self.group0()[2] * other.group2()[0]) * -1.0),
                    ((self.group0()[0] * other.group2()[1]) * -1.0),
                    ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group1(), 2, 0, 1, 3))
                + Simd32x4::from([
                    (-(self[e4315] * other.group2()[0]) + (self.group0()[3] * other.group0()[0]) + (self.group0()[2] * other.group1()[1])),
                    (-(self[e4315] * other.group2()[1]) + (self.group0()[3] * other.group0()[1]) + (self.group0()[0] * other.group1()[2])),
                    (-(self[e4315] * other.group2()[2]) + (self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group1()[0])),
                    (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       35       63        0
    //    simd4       22       25        0
    // Totals...
    // yes simd       57       88        0
    //  no simd      123      163        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((Simd32x4::from(self[e4315]) * other.group3())
                - (swizzle!(self.group0(), 2, 0, 2, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group2()[3], other.group3()[2]]))
                - (swizzle!(self.group0(), 0, 1, 1, 0) * Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[0], other.group3()[0]]))
                + (swizzle!(self.group0(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]))
                + (Simd32x4::from([
                    (self[e4315] * other.group1()[0]),
                    (self[e4315] * other.group1()[1]),
                    (self[e4315] * other.group1()[2]),
                    (self.group0()[1] * other.group3()[1]),
                ]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))),
            // e23, e31, e12, e45
            ((other.group2() * Simd32x4::from([self[e4315], self[e4315], self[e4315], self.group0()[3]]))
                - (swizzle!(other.group3(), 2, 0, 1, 3) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self[e4315]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group0()[0]) + (self.group0()[2] * other.group3()[1]) + (self.group0()[0] * other.group1()[3])),
                    ((self.group0()[3] * other.group0()[1]) + (self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group1()[3])),
                    ((self.group0()[3] * other.group0()[2]) + (self.group0()[2] * other.group1()[3]) + (self.group0()[1] * other.group3()[0])),
                    (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e15, e25, e35, e1234
            ((other.group1() * Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self[e4315]]))
                + (swizzle!(self.group0(), 2, 0, 2, 2) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group3()[3], other.group0()[2]]))
                + (swizzle!(self.group0(), 0, 1, 1, 0) * Simd32x4::from([other.group3()[3], other.group3()[3], other.group2()[0], other.group0()[0]]))
                + Simd32x4::from([
                    (-(self.group0()[3] * other.group3()[0]) - (self.group0()[1] * other.group2()[2])),
                    (-(self.group0()[3] * other.group3()[1]) - (self.group0()[2] * other.group2()[0])),
                    (-(self.group0()[3] * other.group3()[2]) - (self.group0()[0] * other.group2()[1])),
                    (self.group0()[1] * other.group0()[1]),
                ])),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group2(), 0, 1, 2, 2) * Simd32x4::from([self[e4315], self[e4315], self[e4315], self.group0()[2]]))
                - (swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group1(), 2, 0, 1, 3))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group0()[0]) + (self.group0()[2] * other.group1()[1])),
                    ((self.group0()[3] * other.group0()[1]) + (self.group0()[0] * other.group1()[2])),
                    ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group1()[0])),
                    (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       26        0
    //    simd4       13       18        0
    // Totals...
    // yes simd       25       44        0
    //  no simd       64       98        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (self[e4315] * other.group0()[0])]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self[e4315] * other.group0()[0])]),
            // e235, e315, e125, e5
            (self.group0() * Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]])),
            // e1, e2, e3, e4
            (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self[e4315]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       54        0
    //    simd4       10       12        0
    // Totals...
    // yes simd       38       66        0
    //  no simd       68      102        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self[e4315] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self[e4315] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self[e4315] * other.group0()[2])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (self[e4315] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e4315] * other.group0()[0] * -1.0),
                (self[e4315] * other.group0()[1] * -1.0),
                (self[e4315] * other.group0()[2] * -1.0),
                (-(self.group0()[3] * other.group0()[3])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44       76        0
    //    simd4       11       13        0
    // Totals...
    // yes simd       55       89        0
    //  no simd       88      128        0
    fn sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e4315] * other.group1()[0]),
                (self[e4315] * other.group1()[1]),
                (self[e4315] * other.group1()[2]),
                ((self[e4315] * other.group1()[3]) - (self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self[e4315] * other.group0()[0]) + (self.group0()[2] * other.group1()[1]) + (self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group1()[2])),
                ((self[e4315] * other.group0()[1]) - (self.group0()[2] * other.group1()[0]) + (self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[3])),
                ((self[e4315] * other.group0()[2]) + (self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
                (self[e4315] * other.group1()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group0()[3] * other.group1()[0]) + (self.group0()[2] * other.group0()[1]) + (self.group0()[0] * other.group1()[3])
                    - (self.group0()[1] * other.group0()[2])),
                (-(self.group0()[3] * other.group1()[1]) - (self.group0()[2] * other.group0()[0])
                    + (self.group0()[0] * other.group0()[2])
                    + (self.group0()[1] * other.group1()[3])),
                (-(self.group0()[3] * other.group1()[2]) + (self.group0()[2] * other.group1()[3]) - (self.group0()[0] * other.group0()[1])
                    + (self.group0()[1] * other.group0()[0])),
                (self[e4315] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e4315] * other.group0()[0] * -1.0),
                (self[e4315] * other.group0()[1] * -1.0),
                (self[e4315] * other.group0()[2] * -1.0),
                (-(self.group0()[3] * other.group0()[3])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       50        0
    //    simd4       14       16        0
    // Totals...
    // yes simd       38       66        0
    //  no simd       80      114        0
    fn sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([(self[e4315] * other.group0()[0]), (self[e4315] * other.group0()[1]), (self[e4315] * other.group0()[2]), 0.0]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e4315] * other.group1()[0]),
                (self[e4315] * other.group1()[1]),
                (self[e4315] * other.group1()[2]),
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            (-(swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group0()[0]) + (self.group0()[2] * other.group1()[1])),
                    ((self.group0()[3] * other.group0()[1]) + (self.group0()[0] * other.group1()[2])),
                    ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group1()[0])),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self[e4315] * other.group1()[0]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                ((self[e4315] * other.group1()[1]) - (self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self[e4315] * other.group1()[2]) + (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       52        0
    //    simd4       15       18        0
    // Totals...
    // yes simd       43       70        0
    //  no simd       88      124        0
    fn sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self[e4315]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e4315] * other.group1()[0]),
                (self[e4315] * other.group1()[1]),
                (self[e4315] * other.group1()[2]),
                ((self[e4315] * other.group1()[3]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group0()[3]) * other.group0()) - (swizzle!(self.group0(), 1, 2, 0, 2) * swizzle!(other.group1(), 2, 0, 1, 2))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group1()[1]) + (self.group0()[0] * other.group1()[3])),
                    ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3])),
                    ((self.group0()[2] * other.group1()[3]) + (self.group0()[1] * other.group1()[0])),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self[e4315] * other.group1()[0]) - (self.group0()[2] * other.group0()[1]) - (self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2])),
                ((self[e4315] * other.group1()[1]) + (self.group0()[2] * other.group0()[0]) - (self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group0()[3])),
                ((self[e4315] * other.group1()[2]) - (self.group0()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (self[e4315] * other.group0()[3]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for Sphere {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       62      104        0
    //    simd2        4        4        0
    //    simd3       30       36        0
    //    simd4       24       26        0
    // Totals...
    // yes simd      120      170        0
    //  no simd      256      324        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(self[e4315]) * Simd32x2::from([other.group8()[3], other[e1]]))
                + (Simd32x2::from(self.group0()[3]) * Simd32x2::from([other[e35], other.group1()[3]]))
                + Simd32x2::from([
                    (-(self.group0()[2] * other.group8()[2]) - (self.group0()[0] * other.group8()[0]) - (self.group0()[1] * other.group8()[1])),
                    ((self.group0()[2] * other.group1()[2]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
                ])),
            // e1, e2, e3, e4
            ((Simd32x4::from(self[e4315]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group0()[1]]))
                - (swizzle!(other.group5(), 1, 2, 0, 3) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self[e4315]]))
                + (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group6()[2]]))
                + Simd32x4::from([
                    (-(self.group0()[3] * other.group6()[0]) - (self.group0()[0] * other.group0()[1])),
                    (-(self.group0()[3] * other.group6()[1]) - (self.group0()[1] * other.group0()[1])),
                    (-(self.group0()[3] * other.group6()[2]) - (self.group0()[2] * other.group0()[1])),
                    ((self.group0()[0] * other.group6()[0]) + (self.group0()[1] * other.group6()[1])),
                ])),
            // e5
            ((self.group0()[3] * other.group5()[3]) + (self.group0()[3] * other.group0()[1])
                - (self.group0()[2] * other.group7()[2])
                - (self.group0()[0] * other.group7()[0])
                - (self.group0()[1] * other.group7()[1])),
            // e15, e25, e35, e45
            ((Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group10()[2], other.group10()[1], other.group10()[0], other[e35]]))
                - (other.group8() * Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self[e4315]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group10()[0]]))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group3()[1]) + (self.group0()[0] * other.group8()[3])),
                    ((self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group8()[3])),
                    ((self.group0()[2] * other.group8()[3]) + (self.group0()[1] * other.group3()[0])),
                    (-(self.group0()[0] * other.group10()[2]) - (self.group0()[1] * other.group10()[1])),
                ])),
            // e41, e42, e43
            ((Simd32x3::from(self[e4315]) * swizzle!(other.group10(), 2, 1, 0))
                + (Simd32x3::from(self[e4315]) * Simd32x3::from([other.group8()[0], other.group8()[1], other.group8()[2]]))
                - (swizzle!(other.group4(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))
                - (Simd32x3::from(other[e35]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (swizzle!(other.group4(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))),
            // e415, e425, e435, e321
            ((Simd32x4::from(self[e4315]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other[e1]]))
                + (swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group6()[0], other.group6()[1], other.group6()[2], other.group5()[2]]))
                - (swizzle!(self.group0(), 2, 0, 2, 3) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group5()[3], other.group1()[3]]))
                + (swizzle!(self.group0(), 1, 2, 0, 0) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group5()[0]]))
                + (Simd32x4::from([-1.0, -1.0, -1.0, 1.0])
                    * swizzle!(self.group0(), 0, 1, 1, 1)
                    * Simd32x4::from([other.group5()[3], other.group5()[3], other.group1()[0], other.group5()[1]]))),
            // e423, e431, e412
            ((Simd32x3::from(self[e4315]) * Simd32x3::from([other.group5()[0], other.group5()[1], other.group5()[2]]))
                - (Simd32x3::from(self[e4315]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (swizzle!(other.group6(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (swizzle!(other.group6(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))),
            // e235, e315, e125
            ((Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group5()[0], other.group5()[1], other.group5()[2]]))
                + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (swizzle!(other.group7(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (swizzle!(other.group7(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))),
            // e4235, e4315, e4125, e3215
            (-(other.group3() * Simd32x4::from([self[e4315], self[e4315], self[e4315], self.group0()[3]]))
                + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], other.group0()[0]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group10()[0], other.group10()[2], other.group10()[1], other.group3()[2]]))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group10()[1]) + (self.group0()[0] * other.group0()[0])),
                    ((self.group0()[0] * other.group10()[0]) + (self.group0()[1] * other.group0()[0])),
                    ((self.group0()[2] * other.group0()[0]) + (self.group0()[1] * other.group10()[2])),
                    (-(self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group3()[1])),
                ])),
            // e1234
            ((self[e4315] * other.group3()[3])
                + (self[e4315] * other.group0()[0])
                + (self.group0()[2] * other.group4()[2])
                + (self.group0()[0] * other.group4()[0])
                + (self.group0()[1] * other.group4()[1])),
            // e12, e31, e23
            ((Simd32x3::from(self[e4315]) * Simd32x3::from([other.group3()[2], other.group3()[1], other.group3()[0]]))
                + (Simd32x3::from(self.group0()[3]) * swizzle!(other.group4(), 2, 1, 0))
                + (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group0()[2], self.group0()[1], self.group0()[0]]))
                + Simd32x3::from([
                    (-(self.group0()[0] * other.group8()[1]) + (self.group0()[1] * other.group8()[0])),
                    (-(self.group0()[2] * other.group8()[0]) + (self.group0()[0] * other.group8()[2])),
                    ((self.group0()[2] * other.group8()[1]) - (self.group0()[1] * other.group8()[2])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       29       53        0
    //    simd4       11       13        0
    // Totals...
    // yes simd       40       66        0
    //  no simd       73      105        0
    fn sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e4315] * other.group0()[0]),
                (self[e4315] * other.group0()[1]),
                (self[e4315] * other.group0()[2]),
                ((self[e4315] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (self[e4315] * other.group0()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) - (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group0()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(0.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       34        0
    //    simd3        1        2        0
    //    simd4       10       10        0
    // Totals...
    // yes simd       28       46        0
    //  no simd       60       80        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = CircleRotor::from_groups(
            // e423, e431, e412
            (-(Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from(self[e4315]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))),
            // e415, e425, e435, e321
            (-(swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))
                + Simd32x4::from([
                    (self.group0()[1] * other.group0()[2]),
                    (self.group0()[2] * other.group0()[0]),
                    (self.group0()[0] * other.group0()[1]),
                    (self[e4315] * other[e2]),
                ])),
            // e235, e315, e125, e12345
            ((Simd32x4::from(other[e2]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self[e4315]]))
                + (Simd32x4::from(self.group0()[3]) * other.group0())
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       10        0
    //    simd4        3        5        0
    // Totals...
    // yes simd        8       15        0
    //  no simd       17       30        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (self.group0() * Simd32x4::from(other[scalar])),
            // e1234
            (self[e4315] * other[scalar]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       25       41        0
    //    simd4       14       17        0
    // Totals...
    // yes simd       39       58        0
    //  no simd       81      109        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(swizzle!(self.group0(), 0, 1, 2, 2) * Simd32x4::from([other[e4315], other[e4315], other[e4315], other.group0()[2]]))
                + (Simd32x4::from(self[e4315]) * other.group0())
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    ((self.group0()[3] * other[e4315]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e23, e31, e12, e45
            (-(swizzle!(other.group0(), 2, 0, 1, 3) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self[e4315]]))
                + (swizzle!(self.group0(), 2, 0, 1, 3) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other[e4315]]))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) - (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group0()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(0.0),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       52        0
    //    simd4       25       29        0
    // Totals...
    // yes simd       53       81        0
    //  no simd      128      168        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(self[e4315]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                + (swizzle!(self.group0(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group3()[3]]))
                + Simd32x4::from([
                    (-(self[e4315] * other.group3()[0]) - (self.group0()[2] * other.group0()[1]) - (self.group0()[0] * other.group3()[3])),
                    (-(self[e4315] * other.group3()[1]) - (self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group3()[3])),
                    (-(self[e4315] * other.group3()[2]) - (self.group0()[2] * other.group3()[3]) - (self.group0()[1] * other.group0()[0])),
                    ((self.group0()[2] * other.group3()[2]) + (self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group3()[1])),
                ])),
            // e415, e425, e435, e321
            ((Simd32x4::from(self[e4315]) * other.group2())
                + (swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]))
                - (swizzle!(self.group0(), 2, 0, 2, 3) * Simd32x4::from([other.group3()[1], other.group3()[2], other.group1()[3], other.group3()[3]]))
                + (swizzle!(self.group0(), 1, 2, 0, 0) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[0]]))
                + (Simd32x4::from([-1.0, -1.0, -1.0, 1.0])
                    * swizzle!(self.group0(), 0, 1, 1, 1)
                    * Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[0], other.group1()[1]]))),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * swizzle!(other.group2(), 2, 0, 1, 2))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group2()[1]) + (self.group0()[0] * other.group2()[3])),
                    ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group2()[3])),
                    ((self.group0()[2] * other.group2()[3]) + (self.group0()[1] * other.group2()[0])),
                    (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            ((Simd32x4::from(self[e4315]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[3]]))
                - (swizzle!(other.group1(), 1, 2, 0, 3) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self[e4315]]))
                + (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group0()[3] * other.group0()[0]) - (self.group0()[0] * other.group0()[3])),
                    (-(self.group0()[3] * other.group0()[1]) - (self.group0()[1] * other.group0()[3])),
                    (-(self.group0()[3] * other.group0()[2]) - (self.group0()[2] * other.group0()[3])),
                    ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       64        0
    //    simd4       23       26        0
    // Totals...
    // yes simd       59       90        0
    //  no simd      128      168        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((Simd32x4::from(self[e4315]) * other.group3())
                - (swizzle!(self.group0(), 2, 0, 2, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group2()[3], other.group3()[2]]))
                - (swizzle!(self.group0(), 0, 1, 1, 0) * Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[0], other.group3()[0]]))
                + (swizzle!(self.group0(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]))
                + (Simd32x4::from([
                    (self[e4315] * other.group1()[0]),
                    (self[e4315] * other.group1()[1]),
                    (self[e4315] * other.group1()[2]),
                    (self.group0()[1] * other.group3()[1]),
                ]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))),
            // e23, e31, e12, e45
            ((other.group2() * Simd32x4::from([self[e4315], self[e4315], self[e4315], self.group0()[3]]))
                - (swizzle!(other.group3(), 2, 0, 1, 3) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self[e4315]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group0()[0]) + (self.group0()[2] * other.group3()[1]) + (self.group0()[0] * other.group1()[3])),
                    ((self.group0()[3] * other.group0()[1]) + (self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group1()[3])),
                    ((self.group0()[3] * other.group0()[2]) + (self.group0()[2] * other.group1()[3]) + (self.group0()[1] * other.group3()[0])),
                    (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e15, e25, e35, e1234
            ((other.group1() * Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self[e4315]]))
                + (swizzle!(self.group0(), 2, 0, 2, 2) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group3()[3], other.group0()[2]]))
                + (swizzle!(self.group0(), 0, 1, 1, 0) * Simd32x4::from([other.group3()[3], other.group3()[3], other.group2()[0], other.group0()[0]]))
                + Simd32x4::from([
                    (-(self.group0()[3] * other.group3()[0]) - (self.group0()[1] * other.group2()[2])),
                    (-(self.group0()[3] * other.group3()[1]) - (self.group0()[2] * other.group2()[0])),
                    (-(self.group0()[3] * other.group3()[2]) - (self.group0()[0] * other.group2()[1])),
                    ((self[e4315] * other.group0()[3]) + (self.group0()[1] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group2(), 0, 1, 2, 2) * Simd32x4::from([self[e4315], self[e4315], self[e4315], self.group0()[2]]))
                + (Simd32x4::from(self.group0()[3]) * other.group0())
                - (swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group1(), 2, 0, 1, 3))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group1()[1]) + (self.group0()[0] * other.group0()[3])),
                    ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[3])),
                    ((self.group0()[2] * other.group0()[3]) + (self.group0()[1] * other.group1()[0])),
                    (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl InfixSandwich for VersorEven {}
impl Sandwich<AntiScalar> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       52       74        0
    //    simd4       47       56        0
    // Totals...
    // yes simd       99      130        0
    //  no simd      240      298        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (self.group0() * Simd32x4::from(other[e12345]) * Simd32x4::from(-1.0)),
            // e23, e31, e12, e45
            (self.group1() * Simd32x4::from(other[e12345]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e15, e25, e35, e1234
            (Simd32x4::from(other[e12345]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]) * Simd32x4::from(-1.0)),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other[e12345]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[3]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      112      150        0
    //    simd4       68       69        0
    // Totals...
    // yes simd      180      219        0
    //  no simd      384      426        0
    fn sandwich(self, other: Circle) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(other.group1() * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group1()[3]]))
                + (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + (swizzle!(other.group1(), 3, 0, 3, 1) * Simd32x4::from([self.group0()[0], self.group0()[2], self.group0()[2], self.group1()[1]]))
                + (swizzle!(other.group1(), 2, 3, 1, 0) * Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[0], self.group1()[0]]))
                + Simd32x4::from([
                    (-(self.group3()[2] * other.group0()[1]) + (self.group3()[1] * other.group0()[2])
                        - (self.group1()[3] * other.group0()[0])
                        - (self.group1()[2] * other.group0()[1])
                        - (self.group0()[3] * other.group0()[0])
                        - (self.group0()[2] * other.group1()[1])),
                    ((self.group3()[2] * other.group0()[0])
                        - (self.group3()[0] * other.group0()[2])
                        - (self.group1()[3] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[2])
                        - (self.group0()[3] * other.group0()[1])
                        - (self.group0()[0] * other.group1()[2])),
                    (-(self.group3()[1] * other.group0()[0]) + (self.group3()[0] * other.group0()[1])
                        - (self.group1()[3] * other.group0()[2])
                        - (self.group1()[1] * other.group0()[0])
                        - (self.group0()[3] * other.group0()[2])
                        - (self.group0()[1] * other.group1()[0])),
                    ((self.group2()[2] * other.group0()[2])
                        + (self.group2()[1] * other.group0()[1])
                        + (self.group2()[0] * other.group0()[0])
                        + (self.group0()[2] * other.group2()[2])
                        + (self.group0()[0] * other.group2()[0])
                        + (self.group0()[1] * other.group2()[1])),
                ])),
            // e23, e31, e12, e45
            (-(swizzle!(self.group3(), 3, 3, 3, 2) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[2]]))
                - (swizzle!(self.group3(), 0, 1, 2, 1) * swizzle!(other.group1(), 3, 3, 3, 1))
                + (swizzle!(self.group2(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (swizzle!(other.group1(), 1, 2, 0, 0) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[0]]))
                + (swizzle!(other.group1(), 2, 0, 1, 3) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[3]]))
                - (swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[2]]))
                - (swizzle!(self.group0(), 2, 0, 1, 0) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group2()[0]]))
                + Simd32x4::from([
                    (-(self.group2()[3] * other.group0()[0]) - (self.group2()[2] * other.group0()[1]) + (self.group0()[1] * other.group2()[2])),
                    (-(self.group2()[3] * other.group0()[1]) - (self.group2()[0] * other.group0()[2]) + (self.group0()[2] * other.group2()[0])),
                    (-(self.group2()[3] * other.group0()[2]) - (self.group2()[1] * other.group0()[0]) + (self.group0()[0] * other.group2()[1])),
                    ((self.group2()[1] * other.group0()[1]) + (self.group2()[0] * other.group0()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
            // e15, e25, e35, e1234
            ((swizzle!(self.group3(), 2, 0, 1, 3) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]))
                + (swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[2]]))
                + (swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[2]]))
                + (swizzle!(self.group1(), 1, 2, 0, 1) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[1]]))
                + Simd32x4::from([
                    (-(self.group3()[1] * other.group2()[2])
                        - (self.group2()[3] * other.group1()[0])
                        - (self.group2()[2] * other.group1()[1])
                        - (self.group2()[0] * other.group1()[3])
                        - (self.group1()[2] * other.group2()[1])
                        - (self.group0()[3] * other.group2()[0])),
                    (-(self.group3()[2] * other.group2()[0])
                        - (self.group2()[3] * other.group1()[1])
                        - (self.group2()[1] * other.group1()[3])
                        - (self.group2()[0] * other.group1()[2])
                        - (self.group0()[3] * other.group2()[1])
                        - (self.group1()[0] * other.group2()[2])),
                    (-(self.group3()[0] * other.group2()[1])
                        - (self.group2()[3] * other.group1()[2])
                        - (self.group2()[2] * other.group1()[3])
                        - (self.group2()[1] * other.group1()[0])
                        - (self.group1()[1] * other.group2()[0])
                        - (self.group0()[3] * other.group2()[2])),
                    ((self.group3()[2] * other.group0()[2])
                        + (self.group3()[1] * other.group0()[1])
                        + (self.group3()[0] * other.group0()[0])
                        + (self.group1()[0] * other.group0()[0])
                        + (self.group0()[0] * other.group1()[0])
                        + (self.group0()[1] * other.group1()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[2]]))
                - (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[2]]))
                - (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (swizzle!(self.group2(), 1, 2, 0, 1) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[1]]))
                + (swizzle!(other.group1(), 0, 1, 2, 0) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[0]]))
                + (swizzle!(self.group1(), 0, 1, 2, 2) * Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[2]]))
                + Simd32x4::from([
                    ((self.group3()[3] * other.group2()[0]) - (self.group2()[2] * other.group0()[1]) - (self.group0()[1] * other.group2()[2])
                        + (self.group0()[2] * other.group2()[1])),
                    ((self.group3()[3] * other.group2()[1]) - (self.group2()[0] * other.group0()[2]) + (self.group0()[0] * other.group2()[2])
                        - (self.group0()[2] * other.group2()[0])),
                    ((self.group3()[3] * other.group2()[2]) - (self.group2()[1] * other.group0()[0]) - (self.group0()[0] * other.group2()[1])
                        + (self.group0()[1] * other.group2()[0])),
                    (-(self.group3()[1] * other.group2()[1]) - (self.group3()[0] * other.group2()[0])
                        + (self.group1()[0] * other.group2()[0])
                        + (self.group1()[1] * other.group2()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       96      130        0
    //    simd4       76       79        0
    // Totals...
    // yes simd      172      209        0
    //  no simd      400      446        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(other.group1() * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group1()[3]]))
                + (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                + (swizzle!(other.group1(), 2, 0, 3, 1) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[2], self.group1()[1]]))
                + (swizzle!(other.group1(), 3, 3, 1, 0) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group1()[0]]))
                + Simd32x4::from([
                    (-(self.group3()[2] * other.group0()[1]) + (self.group3()[1] * other.group0()[2])
                        - (self.group1()[3] * other.group0()[0])
                        - (self.group1()[2] * other.group0()[1])
                        - (self.group0()[2] * other.group1()[1])
                        - (self.group0()[0] * other.group2()[3])),
                    ((self.group3()[2] * other.group0()[0])
                        - (self.group3()[0] * other.group0()[2])
                        - (self.group1()[3] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[2])
                        - (self.group0()[1] * other.group2()[3])
                        - (self.group0()[0] * other.group1()[2])),
                    (-(self.group3()[1] * other.group0()[0]) + (self.group3()[0] * other.group0()[1])
                        - (self.group1()[3] * other.group0()[2])
                        - (self.group1()[1] * other.group0()[0])
                        - (self.group0()[2] * other.group2()[3])
                        - (self.group0()[1] * other.group1()[0])),
                    ((self.group2()[2] * other.group0()[2])
                        + (self.group2()[1] * other.group0()[1])
                        + (self.group2()[0] * other.group0()[0])
                        + (self.group0()[2] * other.group2()[2])
                        + (self.group0()[0] * other.group2()[0])
                        + (self.group0()[1] * other.group2()[1])),
                ])),
            // e23, e31, e12, e45
            (-(swizzle!(self.group3(), 3, 3, 3, 2) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[2]]))
                - (swizzle!(self.group3(), 0, 1, 2, 1) * swizzle!(other.group1(), 3, 3, 3, 1))
                + (swizzle!(self.group2(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (swizzle!(other.group1(), 1, 2, 0, 0) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[0]]))
                + (swizzle!(self.group1(), 1, 2, 0, 3) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[3]]))
                - (swizzle!(other.group2(), 3, 3, 3, 2) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[2]]))
                - (swizzle!(self.group0(), 3, 3, 3, 0) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[0]]))
                + (swizzle!(self.group0(), 1, 2, 0, 3) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[3]]))
                - (swizzle!(self.group0(), 2, 0, 1, 1) * swizzle!(other.group2(), 1, 2, 0, 1))
                + Simd32x4::from([
                    (-(self.group2()[3] * other.group0()[0]) - (self.group2()[2] * other.group0()[1])),
                    (-(self.group2()[3] * other.group0()[1]) - (self.group2()[0] * other.group0()[2])),
                    (-(self.group2()[3] * other.group0()[2]) - (self.group2()[1] * other.group0()[0])),
                    ((self.group2()[1] * other.group0()[1]) + (self.group2()[0] * other.group0()[0])),
                ])),
            // e15, e25, e35, e1234
            ((swizzle!(self.group3(), 2, 0, 1, 3) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]))
                - (swizzle!(self.group3(), 1, 2, 0, 3) * swizzle!(other.group2(), 2, 0, 1, 3))
                + (swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[2]]))
                + (swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[2]]))
                + (swizzle!(self.group1(), 1, 2, 0, 1) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[1]]))
                + Simd32x4::from([
                    (-(self.group2()[3] * other.group1()[0])
                        - (self.group2()[2] * other.group1()[1])
                        - (self.group2()[0] * other.group2()[3])
                        - (self.group2()[0] * other.group1()[3])
                        - (self.group1()[2] * other.group2()[1])
                        - (self.group0()[3] * other.group2()[0])),
                    (-(self.group2()[3] * other.group1()[1])
                        - (self.group2()[1] * other.group2()[3])
                        - (self.group2()[1] * other.group1()[3])
                        - (self.group2()[0] * other.group1()[2])
                        - (self.group0()[3] * other.group2()[1])
                        - (self.group1()[0] * other.group2()[2])),
                    (-(self.group2()[3] * other.group1()[2])
                        - (self.group2()[2] * other.group2()[3])
                        - (self.group2()[2] * other.group1()[3])
                        - (self.group2()[1] * other.group1()[0])
                        - (self.group1()[1] * other.group2()[0])
                        - (self.group0()[3] * other.group2()[2])),
                    ((self.group3()[2] * other.group0()[2])
                        + (self.group3()[1] * other.group0()[1])
                        + (self.group3()[0] * other.group0()[0])
                        + (self.group1()[0] * other.group0()[0])
                        + (self.group0()[0] * other.group1()[0])
                        + (self.group0()[1] * other.group1()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group2(), 0, 1, 2, 2) * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group1()[2]]))
                + (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[2]]))
                - (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[2]]))
                + (swizzle!(other.group2(), 3, 3, 3, 0) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group1()[0]]))
                - (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (swizzle!(self.group2(), 2, 0, 1, 3) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]))
                + (swizzle!(self.group2(), 1, 2, 0, 1) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[1]]))
                + (swizzle!(other.group1(), 0, 1, 2, 0) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[0]]))
                + (swizzle!(self.group1(), 0, 1, 2, 1) * Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[1]]))
                - (swizzle!(other.group2(), 2, 0, 1, 1) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[1]]))
                + (Simd32x4::from([1.0, 1.0, 1.0, -1.0])
                    * swizzle!(other.group2(), 1, 2, 0, 0)
                    * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[0]]))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      136      174        0
    //    simd4       62       63        0
    // Totals...
    // yes simd      198      237        0
    //  no simd      384      426        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(self.group1(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]))
                - (swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group3()[3] * other.group1()[0]) + (self.group3()[2] * other.group0()[1]) - (self.group3()[1] * other.group0()[2])
                        + (self.group1()[3] * other.group0()[0])
                        + (self.group1()[2] * other.group0()[1])
                        + (self.group0()[3] * other.group0()[0])
                        + (self.group0()[2] * other.group1()[1])
                        + (self.group0()[0] * other.group1()[3])),
                    ((self.group3()[3] * other.group1()[1]) - (self.group3()[2] * other.group0()[0])
                        + (self.group3()[0] * other.group0()[2])
                        + (self.group1()[3] * other.group0()[1])
                        + (self.group1()[0] * other.group0()[2])
                        + (self.group0()[3] * other.group0()[1])
                        + (self.group0()[0] * other.group1()[2])
                        + (self.group0()[1] * other.group1()[3])),
                    ((self.group3()[3] * other.group1()[2]) + (self.group3()[1] * other.group0()[0]) - (self.group3()[0] * other.group0()[1])
                        + (self.group1()[3] * other.group0()[2])
                        + (self.group1()[1] * other.group0()[0])
                        + (self.group0()[3] * other.group0()[2])
                        + (self.group0()[2] * other.group1()[3])
                        + (self.group0()[1] * other.group1()[0])),
                    (-(self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e321
            (-(swizzle!(self.group3(), 0, 1, 2, 2) * swizzle!(other.group1(), 3, 3, 3, 2))
                + (swizzle!(self.group2(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[2]]))
                + (swizzle!(self.group2(), 2, 0, 1, 1) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[1]]))
                - (swizzle!(other.group1(), 2, 0, 1, 1) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[1]]))
                - (swizzle!(self.group0(), 1, 2, 0, 3) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[3]]))
                + Simd32x4::from([
                    ((self.group3()[3] * other.group2()[0]) - (self.group2()[1] * other.group0()[2])
                        + (self.group1()[2] * other.group1()[1])
                        + (self.group0()[3] * other.group1()[0])
                        + (self.group0()[2] * other.group2()[1])),
                    ((self.group3()[3] * other.group2()[1]) - (self.group2()[2] * other.group0()[0])
                        + (self.group1()[0] * other.group1()[2])
                        + (self.group0()[3] * other.group1()[1])
                        + (self.group0()[0] * other.group2()[2])),
                    ((self.group3()[3] * other.group2()[2]) - (self.group2()[0] * other.group0()[1])
                        + (self.group1()[1] * other.group1()[0])
                        + (self.group0()[3] * other.group1()[2])
                        + (self.group0()[1] * other.group2()[0])),
                    (-(self.group3()[0] * other.group1()[0]) + (self.group2()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e235, e315, e125, e5
            (-(Simd32x4::from(other.group2()[1]) * Simd32x4::from([self.group3()[2], self.group1()[3], self.group1()[0], self.group1()[1]]))
                + (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group2()[2]]))
                - (swizzle!(self.group2(), 1, 2, 2, 3) * swizzle!(other.group1(), 2, 0, 3, 3))
                - (swizzle!(self.group2(), 0, 1, 0, 2) * swizzle!(other.group1(), 3, 3, 1, 2))
                - (Simd32x4::from(other.group2()[0]) * Simd32x4::from([self.group1()[3], self.group1()[2], self.group3()[1], self.group1()[0]]))
                - (Simd32x4::from(other.group2()[2]) * Simd32x4::from([self.group1()[1], self.group3()[0], self.group1()[3], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group2()[3] * other.group1()[0])
                        + (self.group2()[2] * other.group1()[1])
                        + (self.group1()[2] * other.group2()[1])
                        + (self.group0()[3] * other.group2()[0])),
                    ((self.group2()[3] * other.group1()[1])
                        + (self.group2()[0] * other.group1()[2])
                        + (self.group0()[3] * other.group2()[1])
                        + (self.group1()[0] * other.group2()[2])),
                    ((self.group2()[3] * other.group1()[2])
                        + (self.group2()[1] * other.group1()[0])
                        + (self.group1()[1] * other.group2()[0])
                        + (self.group0()[3] * other.group2()[2])),
                    ((self.group3()[1] * other.group2()[1]) + (self.group3()[0] * other.group2()[0])
                        - (self.group2()[1] * other.group1()[1])
                        - (self.group2()[0] * other.group1()[0])),
                ])),
            // e1, e2, e3, e4
            ((Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))
                - (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                - (swizzle!(self.group1(), 0, 1, 2, 2) * Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[2]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group3()[2] * other.group1()[1]) - (self.group2()[3] * other.group0()[0]) - (self.group2()[2] * other.group0()[1])
                        + (self.group2()[1] * other.group0()[2])
                        + (self.group1()[3] * other.group1()[0])
                        + (self.group0()[2] * other.group2()[1])),
                    ((self.group3()[0] * other.group1()[2]) - (self.group2()[3] * other.group0()[1]) + (self.group2()[2] * other.group0()[0])
                        - (self.group2()[0] * other.group0()[2])
                        + (self.group1()[3] * other.group1()[1])
                        + (self.group0()[0] * other.group2()[2])),
                    ((self.group3()[1] * other.group1()[0]) - (self.group2()[3] * other.group0()[2]) - (self.group2()[1] * other.group0()[0])
                        + (self.group2()[0] * other.group0()[1])
                        + (self.group1()[3] * other.group1()[2])
                        + (self.group0()[1] * other.group2()[0])),
                    (-(self.group3()[1] * other.group0()[1])
                        - (self.group3()[0] * other.group0()[0])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      116      150        0
    //    simd4       87       89        0
    // Totals...
    // yes simd      203      239        0
    //  no simd      464      506        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(self.group3()[3]) * other.group3())
                + (swizzle!(self.group3(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[2]]))
                + (swizzle!(self.group3(), 2, 1, 2, 1) * Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group3()[1]]))
                + (swizzle!(self.group3(), 0, 0, 1, 0) * Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group3()[0]]))
                - (swizzle!(self.group1(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]))
                + (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[1], other.group2()[2]]))
                - (swizzle!(self.group0(), 1, 2, 0, 0) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group3()[1], other.group2()[0]]))
                + Simd32x4::from([
                    (-(self.group3()[1] * other.group0()[2])
                        + (self.group1()[3] * other.group0()[0])
                        + (self.group1()[2] * other.group0()[1])
                        + (self.group0()[3] * other.group0()[0])
                        + (self.group0()[2] * other.group3()[1])
                        + (self.group0()[2] * other.group1()[1])
                        + (self.group0()[0] * other.group1()[3])),
                    (-(self.group3()[2] * other.group0()[0])
                        + (self.group1()[3] * other.group0()[1])
                        + (self.group1()[0] * other.group0()[2])
                        + (self.group0()[3] * other.group0()[1])
                        + (self.group0()[1] * other.group1()[3])
                        + (self.group0()[0] * other.group1()[2])
                        + (self.group0()[0] * other.group3()[2])),
                    (-(self.group3()[0] * other.group0()[1])
                        + (self.group1()[3] * other.group0()[2])
                        + (self.group1()[1] * other.group0()[0])
                        + (self.group0()[3] * other.group0()[2])
                        + (self.group0()[2] * other.group1()[3])
                        + (self.group0()[1] * other.group3()[0])
                        + (self.group0()[1] * other.group1()[0])),
                    (-(self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[2] * other.group1()[2])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e321
            ((Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                - (swizzle!(self.group3(), 2, 1, 2, 2) * Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group1()[2]]))
                + (swizzle!(other.group3(), 2, 0, 1, 2) * Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[2]]))
                - (swizzle!(self.group3(), 0, 0, 1, 1) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group1()[1]]))
                + (swizzle!(self.group2(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[2]]))
                + (swizzle!(self.group2(), 2, 1, 2, 1) * Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group0()[1]]))
                - (swizzle!(self.group2(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]))
                + (swizzle!(self.group2(), 0, 0, 1, 0) * Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group0()[0]]))
                + (swizzle!(self.group1(), 2, 0, 1, 1) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[1]]))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[0]]))
                + (swizzle!(other.group3(), 3, 3, 3, 0) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]))
                - (swizzle!(self.group0(), 1, 2, 0, 3) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[3]]))
                + Simd32x4::from([
                    (-(self.group1()[3] * other.group3()[0]) + (self.group0()[3] * other.group1()[0]) + (self.group0()[2] * other.group2()[1])),
                    (-(self.group1()[3] * other.group3()[1]) + (self.group0()[3] * other.group1()[1]) + (self.group0()[0] * other.group2()[2])),
                    (-(self.group1()[3] * other.group3()[2]) + (self.group0()[3] * other.group1()[2]) + (self.group0()[1] * other.group2()[0])),
                    (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
            // e235, e315, e125, e5
            (-(swizzle!(other.group2(), 1, 2, 0, 2) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[2]]))
                + (swizzle!(self.group3(), 1, 2, 0, 2) * swizzle!(other.group2(), 2, 0, 1, 2))
                - (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group1()[3]]))
                - (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                + (swizzle!(self.group2(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[2]]))
                - (Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group1()[2]]))
                + (swizzle!(self.group2(), 2, 2, 1, 1) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[0], other.group3()[1]]))
                + (swizzle!(self.group2(), 1, 0, 0, 0) * Simd32x4::from([other.group3()[2], other.group1()[2], other.group3()[1], other.group3()[0]]))
                - (Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group1()[1]]))
                - (Simd32x4::from(self.group2()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group1()[0]]))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group2(), 0, 1, 2, 1))
                + (swizzle!(other.group2(), 1, 1, 0, 1) * Simd32x4::from([self.group1()[2], self.group0()[3], self.group1()[1], self.group3()[1]]))
                - (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (swizzle!(other.group2(), 0, 2, 2, 0) * Simd32x4::from([self.group0()[3], self.group1()[0], self.group0()[3], self.group3()[0]]))
                + (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]))),
            // e1, e2, e3, e4
            ((Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))
                - (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                - (swizzle!(self.group1(), 2, 1, 2, 2) * Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group0()[2]]))
                - (swizzle!(self.group1(), 0, 0, 1, 1) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group0()[1]]))
                - (swizzle!(self.group0(), 3, 3, 3, 2) * swizzle!(other.group3(), 0, 1, 2, 2))
                + (swizzle!(self.group0(), 2, 0, 2, 3) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group3()[3], other.group2()[3]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group3()[2] * other.group1()[1]) - (self.group2()[3] * other.group0()[0]) - (self.group2()[2] * other.group0()[1])
                        + (self.group2()[1] * other.group0()[2])
                        - (self.group2()[0] * other.group2()[3])
                        + (self.group1()[1] * other.group3()[2])
                        + (self.group0()[0] * other.group3()[3])),
                    ((self.group3()[0] * other.group1()[2]) - (self.group2()[3] * other.group0()[1]) + (self.group2()[2] * other.group0()[0])
                        - (self.group2()[1] * other.group2()[3])
                        - (self.group2()[0] * other.group0()[2])
                        + (self.group1()[2] * other.group3()[0])
                        + (self.group0()[1] * other.group3()[3])),
                    ((self.group3()[1] * other.group1()[0])
                        - (self.group2()[3] * other.group0()[2])
                        - (self.group2()[2] * other.group2()[3])
                        - (self.group2()[1] * other.group0()[0])
                        + (self.group2()[0] * other.group0()[1])
                        + (self.group1()[0] * other.group3()[1])
                        + (self.group0()[1] * other.group2()[0])),
                    (-(self.group3()[1] * other.group0()[1])
                        - (self.group3()[0] * other.group0()[0])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group3()[1])
                        - (self.group0()[1] * other.group1()[1])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group3()[0])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64      106        0
    //    simd4       48       49        0
    // Totals...
    // yes simd      112      155        0
    //  no simd      256      302        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[1] * other.group0()[1] * -1.0),
                (self.group0()[2] * other.group0()[1] * -1.0),
                (-(self.group0()[3] * other.group0()[1]) - (self.group3()[3] * other.group0()[0])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[0]) - (self.group1()[0] * other.group0()[1])),
                (-(self.group0()[1] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                (-(self.group0()[2] * other.group0()[0]) - (self.group1()[2] * other.group0()[1])),
                ((self.group1()[3] * other.group0()[1]) + (self.group3()[3] * other.group0()[0])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group3()[0] * other.group0()[0]) - (self.group1()[0] * other.group0()[0]) - (self.group2()[0] * other.group0()[1])),
                ((self.group3()[1] * other.group0()[0]) - (self.group1()[1] * other.group0()[0]) - (self.group2()[1] * other.group0()[1])),
                ((self.group3()[2] * other.group0()[0]) - (self.group1()[2] * other.group0()[0]) - (self.group2()[2] * other.group0()[1])),
                (self.group3()[3] * other.group0()[1] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + Simd32x4::from([
                    (self.group3()[0] * other.group0()[1]),
                    (self.group3()[1] * other.group0()[1]),
                    (self.group3()[2] * other.group0()[1]),
                    (-(self.group2()[3] * other.group0()[1]) - (self.group0()[3] * other.group0()[0])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       76      110        0
    //    simd4       53       55        0
    // Totals...
    // yes simd      129      165        0
    //  no simd      288      330        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group1()[3] * other.group0()[3])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e321
            (-(Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[3]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * swizzle!(other.group0(), 2, 0, 1, 2))
                + Simd32x4::from([
                    ((self.group3()[3] * other.group0()[0]) + (self.group0()[2] * other.group0()[1])),
                    ((self.group3()[3] * other.group0()[1]) + (self.group0()[0] * other.group0()[2])),
                    ((self.group3()[3] * other.group0()[2]) + (self.group0()[1] * other.group0()[0])),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            (-(swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]))
                + (swizzle!(self.group3(), 1, 2, 0, 2) * swizzle!(other.group0(), 2, 0, 1, 2))
                - (swizzle!(other.group0(), 3, 3, 3, 2) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[2]]))
                - (swizzle!(self.group1(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))
                + (swizzle!(other.group0(), 1, 1, 0, 1) * Simd32x4::from([self.group1()[2], self.group0()[3], self.group1()[1], self.group3()[1]]))
                + (swizzle!(other.group0(), 0, 2, 2, 0) * Simd32x4::from([self.group0()[3], self.group1()[0], self.group0()[3], self.group3()[0]]))
                - (swizzle!(self.group1(), 1, 2, 0, 1) * swizzle!(other.group0(), 2, 0, 1, 1))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group3()[3] * other.group0()[0]) - (self.group1()[0] * other.group0()[3]) - (self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group3()[3] * other.group0()[1]) - (self.group1()[1] * other.group0()[3]) + (self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                ((self.group3()[3] * other.group0()[2]) - (self.group1()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (self.group3()[3] * other.group0()[3]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       85      122        0
    //    simd4       67       68        0
    // Totals...
    // yes simd      152      190        0
    //  no simd      353      394        0
    fn sandwich(self, other: Flector) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(self.group3()[3]) * other.group1())
                + (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[2]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                + Simd32x4::from([
                    (self.group0()[0] * other.group0()[3]),
                    (self.group0()[1] * other.group0()[3]),
                    (self.group0()[2] * other.group0()[3]),
                    ((self.group3()[1] * other.group1()[1]) + (self.group3()[0] * other.group1()[0])
                        - (self.group1()[3] * other.group0()[3])
                        - (self.group0()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group0()[1])),
                ])),
            // e415, e425, e435, e321
            ((Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[2]]))
                - (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[3]]))
                + (swizzle!(other.group1(), 3, 3, 3, 1) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * swizzle!(other.group0(), 2, 0, 1, 2))
                + Simd32x4::from([
                    (-(self.group3()[2] * other.group1()[1]) - (self.group1()[3] * other.group1()[0]) + (self.group0()[2] * other.group0()[1])),
                    (-(self.group3()[0] * other.group1()[2]) - (self.group1()[3] * other.group1()[1]) + (self.group0()[0] * other.group0()[2])),
                    (-(self.group3()[1] * other.group1()[0]) - (self.group1()[3] * other.group1()[2]) + (self.group0()[1] * other.group0()[0])),
                    ((self.group1()[0] * other.group1()[0]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            (-(swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]))
                + (swizzle!(self.group3(), 1, 2, 0, 2) * swizzle!(other.group0(), 2, 0, 1, 2))
                - (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group1()[3]]))
                + (swizzle!(self.group2(), 1, 2, 0, 2) * swizzle!(other.group1(), 2, 0, 1, 2))
                - (swizzle!(other.group0(), 3, 3, 3, 2) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[2]]))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group0(), 0, 1, 2, 1))
                + (swizzle!(other.group0(), 1, 1, 0, 1) * Simd32x4::from([self.group1()[2], self.group0()[3], self.group1()[1], self.group3()[1]]))
                - (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (swizzle!(other.group0(), 0, 2, 2, 0) * Simd32x4::from([self.group0()[3], self.group1()[0], self.group0()[3], self.group3()[0]]))
                + (swizzle!(other.group1(), 3, 3, 3, 1) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[1]]))
                + Simd32x4::from([
                    (-(self.group2()[3] * other.group1()[0]) - (self.group2()[2] * other.group1()[1])),
                    (-(self.group2()[3] * other.group1()[1]) - (self.group2()[0] * other.group1()[2])),
                    (-(self.group2()[3] * other.group1()[2]) - (self.group2()[1] * other.group1()[0])),
                    ((self.group2()[0] * other.group1()[0]) + (self.group0()[3] * other.group1()[3])),
                ])),
            // e1, e2, e3, e4
            ((Simd32x4::from(self.group3()[3]) * other.group0())
                - (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[2]]))
                - (swizzle!(self.group0(), 3, 3, 3, 0) * swizzle!(other.group1(), 0, 1, 2, 0))
                - (swizzle!(self.group0(), 1, 2, 0, 1) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[1]]))
                + Simd32x4::from([
                    ((self.group1()[1] * other.group1()[2]) - (self.group1()[0] * other.group0()[3])
                        + (self.group0()[2] * other.group0()[1])
                        + (self.group0()[0] * other.group1()[3])),
                    ((self.group1()[2] * other.group1()[0]) - (self.group1()[1] * other.group0()[3])
                        + (self.group0()[0] * other.group0()[2])
                        + (self.group0()[1] * other.group1()[3])),
                    (-(self.group1()[2] * other.group0()[3])
                        + (self.group1()[0] * other.group1()[1])
                        + (self.group0()[2] * other.group1()[3])
                        + (self.group0()[1] * other.group0()[0])),
                    0.0,
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      108      146        0
    //    simd4       53       54        0
    // Totals...
    // yes simd      161      200        0
    //  no simd      320      362        0
    fn sandwich(self, other: Line) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    (-(self.group3()[3] * other.group0()[0]) - (self.group0()[2] * other.group0()[1])),
                    (-(self.group3()[3] * other.group0()[1]) - (self.group0()[0] * other.group0()[2])),
                    (-(self.group3()[3] * other.group0()[2]) - (self.group0()[1] * other.group0()[0])),
                    ((self.group1()[2] * other.group0()[2])
                        + (self.group1()[1] * other.group0()[1])
                        + (self.group1()[0] * other.group0()[0])
                        + (self.group0()[0] * other.group1()[0])
                        + (self.group0()[1] * other.group1()[1])),
                ])),
            // e23, e31, e12, e45
            (-(swizzle!(self.group3(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]))
                - (swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]))
                - (swizzle!(self.group0(), 2, 0, 1, 0) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group1()[0]]))
                + Simd32x4::from([
                    (-(self.group1()[2] * other.group0()[1]) + (self.group1()[1] * other.group0()[2]) + (self.group0()[1] * other.group1()[2])),
                    ((self.group1()[2] * other.group0()[0]) - (self.group1()[0] * other.group0()[2]) + (self.group0()[2] * other.group1()[0])),
                    (-(self.group1()[1] * other.group0()[0]) + (self.group1()[0] * other.group0()[1]) + (self.group0()[0] * other.group1()[1])),
                    (-(self.group3()[1] * other.group0()[1]) - (self.group3()[0] * other.group0()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group3()[2] * other.group1()[1]) - (self.group3()[1] * other.group1()[2]) - (self.group2()[3] * other.group0()[0]) - (self.group2()[2] * other.group0()[1])
                    + (self.group2()[1] * other.group0()[2])
                    + (self.group1()[3] * other.group1()[0])
                    - (self.group1()[2] * other.group1()[1])
                    - (self.group0()[3] * other.group1()[0])
                    + (self.group1()[1] * other.group1()[2])),
                (-(self.group3()[2] * other.group1()[0]) + (self.group3()[0] * other.group1()[2]) - (self.group2()[3] * other.group0()[1])
                    + (self.group2()[2] * other.group0()[0])
                    - (self.group2()[0] * other.group0()[2])
                    + (self.group1()[3] * other.group1()[1])
                    + (self.group1()[2] * other.group1()[0])
                    - (self.group0()[3] * other.group1()[1])
                    - (self.group1()[0] * other.group1()[2])),
                ((self.group3()[1] * other.group1()[0]) - (self.group3()[0] * other.group1()[1]) - (self.group2()[3] * other.group0()[2]) - (self.group2()[1] * other.group0()[0])
                    + (self.group2()[0] * other.group0()[1])
                    + (self.group1()[3] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[0])
                    - (self.group0()[3] * other.group1()[2])
                    + (self.group1()[0] * other.group1()[1])),
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + (swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group3()[3] * other.group1()[0]) + (self.group3()[2] * other.group0()[1]) - (self.group0()[1] * other.group1()[2])
                        + (self.group0()[2] * other.group1()[1])),
                    ((self.group3()[3] * other.group1()[1]) + (self.group3()[0] * other.group0()[2]) + (self.group0()[0] * other.group1()[2])
                        - (self.group0()[2] * other.group1()[0])),
                    ((self.group3()[3] * other.group1()[2]) + (self.group3()[1] * other.group0()[0]) - (self.group0()[0] * other.group1()[1])
                        + (self.group0()[1] * other.group1()[0])),
                    (-(self.group3()[1] * other.group1()[1]) - (self.group3()[0] * other.group1()[0])
                        + (self.group2()[2] * other.group0()[2])
                        + (self.group2()[1] * other.group0()[1])
                        + (self.group2()[0] * other.group0()[0])
                        + (self.group1()[0] * other.group1()[0])
                        + (self.group1()[1] * other.group1()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       87      121        0
    //    simd4       67       69        0
    // Totals...
    // yes simd      154      190        0
    //  no simd      355      397        0
    fn sandwich(self, other: Motor) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (swizzle!(self.group0(), 2, 0, 2, 3) * swizzle!(other.group0(), 1, 2, 3, 3))
                + (swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[0] * other.group0()[3]) * -1.0),
                    ((self.group0()[1] * other.group0()[3]) * -1.0),
                    ((self.group0()[1] * other.group0()[0]) * -1.0),
                    ((self.group1()[1] * other.group0()[1])
                        + (self.group1()[0] * other.group0()[0])
                        + (self.group0()[2] * other.group1()[2])
                        + (self.group0()[0] * other.group1()[0])
                        + (self.group0()[1] * other.group1()[1])),
                ])),
            // e23, e31, e12, e45
            (-(swizzle!(self.group3(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]))
                - (swizzle!(other.group0(), 1, 3, 3, 1) * Simd32x4::from([self.group1()[2], self.group1()[1], self.group1()[2], self.group3()[1]]))
                + (swizzle!(self.group1(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (swizzle!(other.group0(), 3, 2, 0, 0) * Simd32x4::from([self.group1()[0], self.group1()[0], self.group1()[1], self.group3()[0]]))
                - (swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]))
                - (swizzle!(self.group0(), 2, 0, 2, 0) * swizzle!(other.group1(), 1, 2, 3, 0))
                - (swizzle!(self.group0(), 0, 1, 1, 1) * swizzle!(other.group1(), 3, 3, 0, 1))
                + (swizzle!(other.group1(), 2, 0, 1, 3) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[3]]))),
            // e15, e25, e35, e1234
            (-(swizzle!(self.group3(), 1, 2, 0, 3) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[3]]))
                + (swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group3()[2] * other.group1()[1]) + (self.group3()[0] * other.group1()[3])
                        - (self.group2()[3] * other.group0()[0])
                        - (self.group2()[2] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[3])
                        + (self.group1()[3] * other.group1()[0])
                        - (self.group1()[2] * other.group1()[1])
                        + (self.group1()[1] * other.group1()[2])
                        - (self.group0()[3] * other.group1()[0])
                        - (self.group1()[0] * other.group1()[3])),
                    ((self.group3()[1] * other.group1()[3]) + (self.group3()[0] * other.group1()[2])
                        - (self.group2()[3] * other.group0()[1])
                        - (self.group2()[1] * other.group0()[3])
                        - (self.group2()[0] * other.group0()[2])
                        + (self.group1()[3] * other.group1()[1])
                        + (self.group1()[2] * other.group1()[0])
                        - (self.group1()[1] * other.group1()[3])
                        - (self.group0()[3] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[2])),
                    ((self.group3()[2] * other.group1()[3]) + (self.group3()[1] * other.group1()[0])
                        - (self.group2()[3] * other.group0()[2])
                        - (self.group2()[2] * other.group0()[3])
                        - (self.group2()[1] * other.group0()[0])
                        + (self.group1()[3] * other.group1()[2])
                        - (self.group1()[2] * other.group1()[3])
                        - (self.group1()[1] * other.group1()[0])
                        - (self.group0()[3] * other.group1()[2])
                        + (self.group1()[0] * other.group1()[1])),
                    ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((other.group1() * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group1()[3]]))
                + (swizzle!(other.group0(), 1, 3, 3, 2) * Simd32x4::from([self.group3()[2], self.group3()[1], self.group3()[2], self.group2()[2]]))
                - (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + (swizzle!(other.group0(), 3, 2, 0, 1) * Simd32x4::from([self.group3()[0], self.group3()[0], self.group3()[1], self.group2()[1]]))
                + (swizzle!(other.group0(), 0, 1, 2, 0) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[0]]))
                + (swizzle!(other.group1(), 1, 2, 3, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[2], self.group1()[2]]))
                + (swizzle!(other.group1(), 3, 3, 0, 1) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[1], self.group1()[1]]))
                - (swizzle!(other.group1(), 2, 0, 1, 1) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[1]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    (-(self.group3()[0] * other.group1()[0]) - (self.group2()[3] * other.group0()[3]) - (self.group0()[3] * other.group1()[3])
                        + (self.group1()[0] * other.group1()[0])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for VersorEven {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      280      344        0
    //    simd2        8        8        0
    //    simd3      104      106        0
    //    simd4       88       89        0
    // Totals...
    // yes simd      480      547        0
    //  no simd      960     1034        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(self.group3()[2]) * Simd32x2::from([other.group1()[2], other.group8()[2]]))
                + (Simd32x2::from(self.group3()[1]) * Simd32x2::from([other.group1()[1], other.group8()[1]]))
                + (Simd32x2::from(self.group3()[0]) * Simd32x2::from([other.group1()[0], other.group8()[0]]))
                - (Simd32x2::from(self.group1()[3]) * Simd32x2::from([other.group5()[3], other.group3()[3]]))
                + Simd32x2::from([
                    (-(self.group3()[3] * other[e1]) - (self.group2()[3] * other.group1()[3])
                        + (self.group2()[2] * other.group6()[2])
                        + (self.group2()[1] * other.group6()[1])
                        + (self.group2()[0] * other.group6()[0])
                        + (self.group1()[2] * other.group5()[2])
                        + (self.group1()[1] * other.group5()[1])
                        + (self.group1()[0] * other.group5()[0])
                        - (self.group0()[3] * other.group0()[1])
                        + (self.group0()[2] * other.group7()[2])
                        + (self.group0()[0] * other.group7()[0])
                        + (self.group0()[1] * other.group7()[1])),
                    ((self.group3()[3] * other.group8()[3]) + (self.group2()[3] * other[e35])
                        - (self.group2()[2] * other.group4()[2])
                        - (self.group2()[1] * other.group4()[1])
                        - (self.group2()[0] * other.group4()[0])
                        - (self.group1()[2] * other.group10()[0])
                        - (self.group1()[1] * other.group10()[1])
                        - (self.group1()[0] * other.group10()[2])
                        + (self.group0()[3] * other.group0()[0])
                        - (self.group0()[2] * other.group3()[2])
                        - (self.group0()[0] * other.group3()[0])
                        - (self.group0()[1] * other.group3()[1])),
                ])),
            // e1, e2, e3, e4
            ((Simd32x4::from(self.group3()[3]) * other.group3())
                + (swizzle!(self.group3(), 2, 1, 2, 3) * Simd32x4::from([other.group10()[1], other.group0()[0], other.group0()[0], other.group0()[0]]))
                - (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group10()[0], other.group10()[2], other.group10()[1], other.group4()[2]]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group10()[2], other.group10()[1], other.group10()[0], other[e35]]))
                - (swizzle!(self.group1(), 2, 1, 2, 2) * Simd32x4::from([other.group8()[1], other.group3()[3], other.group3()[3], other.group4()[2]]))
                - (swizzle!(self.group1(), 0, 0, 1, 1) * Simd32x4::from([other.group3()[3], other.group8()[2], other.group8()[0], other.group4()[1]]))
                - (swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group8()[0], other.group8()[1], other.group8()[2], other.group10()[0]]))
                + (swizzle!(self.group0(), 2, 0, 2, 3) * Simd32x4::from([other.group3()[1], other.group3()[2], other.group8()[3], other[e35]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group8()[2]]))
                + Simd32x4::from([
                    ((self.group3()[0] * other.group0()[0]) - (self.group2()[3] * other.group4()[0]) - (self.group2()[2] * other.group4()[1])
                        + (self.group2()[1] * other.group4()[2])
                        - (self.group2()[0] * other[e35])
                        + (self.group1()[1] * other.group8()[2])
                        + (self.group0()[0] * other.group8()[3])),
                    ((self.group3()[0] * other.group10()[0]) - (self.group2()[3] * other.group4()[1]) + (self.group2()[2] * other.group4()[0])
                        - (self.group2()[1] * other[e35])
                        - (self.group2()[0] * other.group4()[2])
                        + (self.group1()[2] * other.group8()[0])
                        + (self.group0()[1] * other.group8()[3])),
                    ((self.group3()[1] * other.group10()[2]) - (self.group2()[3] * other.group4()[2]) - (self.group2()[2] * other[e35]) - (self.group2()[1] * other.group4()[0])
                        + (self.group2()[0] * other.group4()[1])
                        + (self.group1()[0] * other.group8()[1])
                        + (self.group0()[1] * other.group3()[0])),
                    (-(self.group3()[1] * other.group4()[1])
                        - (self.group3()[0] * other.group4()[0])
                        - (self.group1()[0] * other.group4()[0])
                        - (self.group0()[1] * other.group10()[1])
                        - (self.group0()[1] * other.group8()[1])
                        - (self.group0()[0] * other.group8()[0])
                        - (self.group0()[0] * other.group10()[2])),
                ])),
            // e5
            ((self.group3()[2] * other.group3()[2]) + (self.group3()[1] * other.group3()[1]) + (self.group3()[0] * other.group3()[0]) - (self.group2()[3] * other.group3()[3])
                + (self.group2()[3] * other.group0()[0])
                - (self.group2()[2] * other.group10()[0])
                + (self.group2()[2] * other.group8()[2])
                - (self.group2()[1] * other.group10()[1])
                + (self.group2()[1] * other.group8()[1])
                - (self.group2()[0] * other.group10()[2])
                + (self.group2()[0] * other.group8()[0])
                - (self.group1()[3] * other.group8()[3])
                - (self.group1()[2] * other.group3()[2])
                - (self.group1()[1] * other.group3()[1])
                + (self.group0()[3] * other.group8()[3])
                - (self.group1()[0] * other.group3()[0])),
            // e15, e25, e35, e45
            ((swizzle!(self.group3(), 2, 1, 2, 3) * Simd32x4::from([other.group7()[1], other[e1], other[e1], other[e1]]))
                - (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group7()[2], other.group7()[0], other.group7()[1], other.group5()[2]]))
                - (swizzle!(other.group5(), 0, 1, 2, 1) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[1]]))
                - (Simd32x4::from(self.group2()[3]) * other.group1())
                - (swizzle!(other.group5(), 1, 3, 3, 0) * Simd32x4::from([self.group2()[2], self.group2()[1], self.group2()[2], self.group3()[0]]))
                - (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[2]]))
                + (swizzle!(self.group2(), 1, 2, 0, 2) * Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group6()[2]]))
                + (swizzle!(self.group2(), 1, 2, 0, 1) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group6()[1]]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group0()[1]]))
                - (swizzle!(self.group1(), 2, 1, 2, 1) * Simd32x4::from([other.group7()[1], other[e1], other[e1], other.group1()[1]]))
                - (swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group7()[2]]))
                - (swizzle!(self.group1(), 0, 0, 1, 0) * Simd32x4::from([other[e1], other.group7()[2], other.group7()[0], other.group1()[0]]))
                + Simd32x4::from([
                    ((self.group3()[0] * other[e1]) - (self.group2()[0] * other.group5()[3]) - (self.group2()[0] * other.group0()[1]) + (self.group1()[1] * other.group7()[2])),
                    ((self.group3()[0] * other.group7()[2]) - (self.group2()[1] * other.group0()[1]) - (self.group2()[0] * other.group5()[2])
                        + (self.group1()[2] * other.group7()[0])),
                    ((self.group3()[1] * other.group7()[0]) - (self.group2()[2] * other.group0()[1]) - (self.group2()[1] * other.group5()[0])
                        + (self.group1()[0] * other.group7()[1])),
                    ((self.group2()[0] * other.group6()[0]) + (self.group0()[3] * other.group5()[3])
                        - (self.group0()[0] * other.group7()[0])
                        - (self.group0()[1] * other.group7()[1])),
                ])),
            // e41, e42, e43
            (-(Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group5()[0], other.group5()[1], other.group5()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (swizzle!(other.group6(), 1, 2, 0) * Simd32x3::from([self.group3()[2], self.group3()[0], self.group3()[1]]))
                + (swizzle!(other.group6(), 2, 0, 1) * Simd32x3::from([self.group3()[1], self.group3()[2], self.group3()[0]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                - (Simd32x3::from(self.group1()[3]) * other.group6())
                - (swizzle!(other.group6(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))
                + (swizzle!(other.group6(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(self.group0()[3]) * other.group6())
                - (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group5()[1], other.group1()[0], other.group0()[1]]))
                + (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], other.group5()[0], other.group5()[3]]))
                + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group5()[2], other.group5()[3], other.group1()[0]]))
                - (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], other.group0()[1], other.group5()[0]]))
                - (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[1], other.group5()[2], other.group1()[1]]))
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group5()[3], other.group1()[2], other.group5()[1]]))),
            // e415, e425, e435, e321
            ((Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group8()[3]]))
                - (swizzle!(self.group3(), 2, 1, 2, 2) * Simd32x4::from([other.group8()[1], other.group3()[3], other.group3()[3], other.group10()[0]]))
                + (swizzle!(other.group8(), 2, 0, 1, 2) * Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[2]]))
                - (swizzle!(self.group3(), 0, 0, 1, 1) * Simd32x4::from([other.group3()[3], other.group8()[2], other.group8()[0], other.group10()[1]]))
                + (swizzle!(self.group2(), 3, 3, 3, 2) * Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], other.group4()[2]]))
                + (swizzle!(self.group2(), 2, 1, 2, 1) * Simd32x4::from([other.group4()[1], other[e35], other[e35], other.group4()[1]]))
                - (swizzle!(self.group2(), 1, 2, 0, 3) * Simd32x4::from([other.group4()[2], other.group4()[0], other.group4()[1], other[e35]]))
                + (swizzle!(self.group2(), 0, 0, 1, 0) * Simd32x4::from([other[e35], other.group4()[2], other.group4()[0], other.group4()[0]]))
                + (swizzle!(self.group1(), 2, 1, 2, 3) * Simd32x4::from([other.group10()[1], other.group0()[0], other.group0()[0], other.group0()[0]]))
                + (swizzle!(self.group1(), 0, 0, 1, 1) * Simd32x4::from([other.group0()[0], other.group10()[0], other.group10()[2], other.group8()[1]]))
                + (swizzle!(other.group8(), 3, 3, 3, 0) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]))
                - (swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group3(), 2, 0, 1, 3))
                + Simd32x4::from([
                    (-(self.group1()[3] * other.group8()[0]) - (self.group1()[1] * other.group10()[0])
                        + (self.group0()[3] * other.group10()[2])
                        + (self.group0()[2] * other.group3()[1])),
                    (-(self.group1()[3] * other.group8()[1]) - (self.group1()[2] * other.group10()[2])
                        + (self.group0()[3] * other.group10()[1])
                        + (self.group0()[0] * other.group3()[2])),
                    (-(self.group1()[3] * other.group8()[2]) - (self.group1()[0] * other.group10()[1])
                        + (self.group0()[3] * other.group10()[0])
                        + (self.group0()[1] * other.group3()[0])),
                    (-(self.group3()[0] * other.group10()[2])
                        - (self.group0()[2] * other.group3()[2])
                        - (self.group0()[0] * other.group3()[0])
                        - (self.group0()[1] * other.group3()[1])),
                ])),
            // e423, e431, e412
            ((Simd32x3::from(self.group3()[3]) * swizzle!(other.group10(), 2, 1, 0))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group8()[0], other.group8()[1], other.group8()[2]]))
                + (swizzle!(other.group4(), 1, 2, 0) * Simd32x3::from([self.group3()[2], self.group3()[0], self.group3()[1]]))
                - (swizzle!(other.group4(), 2, 0, 1) * Simd32x3::from([self.group3()[1], self.group3()[2], self.group3()[0]]))
                + (Simd32x3::from(other[e35]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(self.group1()[3]) * other.group4())
                + (swizzle!(other.group4(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))
                - (swizzle!(other.group4(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                + (Simd32x3::from(other[e35]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(self.group0()[3]) * other.group4())
                + (swizzle!(other.group10(), 1, 0, 2) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))
                - (swizzle!(other.group10(), 0, 2, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + Simd32x3::from([
                    ((self.group0()[2] * other.group8()[1]) - (self.group0()[1] * other.group8()[2])),
                    (-(self.group0()[2] * other.group8()[0]) + (self.group0()[0] * other.group8()[2])),
                    ((self.group0()[1] * other.group8()[0]) - (self.group0()[0] * other.group8()[1])),
                ])),
            // e235, e315, e125
            (-(Simd32x3::from(other.group3()[1]) * Simd32x3::from([self.group3()[2], self.group1()[3], self.group1()[0]]))
                + (Simd32x3::from(other.group3()[2]) * Simd32x3::from([self.group3()[1], self.group1()[0], self.group0()[3]]))
                - (Simd32x3::from(other.group8()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(self.group2()[3]) * swizzle!(other.group10(), 2, 1, 0))
                - (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group8()[0], other.group8()[1], other.group8()[2]]))
                + (Simd32x3::from(self.group2()[2]) * Simd32x3::from([other.group10()[1], other.group8()[0], other.group0()[0]]))
                - (Simd32x3::from(self.group2()[2]) * Simd32x3::from([other.group8()[1], other.group10()[2], other.group3()[3]]))
                - (Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group10()[0], other.group3()[3], other.group8()[0]]))
                + (Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group8()[2], other.group0()[0], other.group10()[2]]))
                - (Simd32x3::from(self.group2()[0]) * Simd32x3::from([other.group3()[3], other.group8()[2], other.group10()[1]]))
                + (Simd32x3::from(self.group2()[0]) * Simd32x3::from([other.group0()[0], other.group10()[0], other.group8()[1]]))
                - (Simd32x3::from(other.group3()[0]) * Simd32x3::from([self.group1()[3], self.group1()[2], self.group3()[1]]))
                + (Simd32x3::from(other.group3()[1]) * Simd32x3::from([self.group1()[2], self.group0()[3], self.group3()[0]]))
                - (Simd32x3::from(other.group3()[2]) * Simd32x3::from([self.group1()[1], self.group3()[0], self.group1()[3]]))
                + (Simd32x3::from(other.group3()[0]) * Simd32x3::from([self.group0()[3], self.group3()[2], self.group1()[1]]))
                + (Simd32x3::from(other.group8()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group5(), 1, 2, 0, 2) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[2]]))
                - (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group7()[2]]))
                - (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group6()[0], other.group6()[1], other.group6()[2], other.group5()[3]]))
                - (swizzle!(self.group2(), 2, 1, 2, 3) * Simd32x4::from([other.group6()[1], other.group1()[3], other.group1()[3], other.group0()[1]]))
                + (swizzle!(self.group2(), 1, 2, 0, 2) * Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group1()[2]]))
                + (swizzle!(other.group5(), 0, 1, 2, 1) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[1]]))
                + (swizzle!(self.group1(), 2, 1, 2, 3) * Simd32x4::from([other.group1()[1], other.group5()[3], other.group5()[3], other[e1]]))
                + (swizzle!(self.group1(), 0, 0, 1, 2) * Simd32x4::from([other.group5()[3], other.group1()[2], other.group1()[0], other.group7()[2]]))
                + (swizzle!(other.group1(), 0, 1, 2, 1) * Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group2()[1]]))
                - (swizzle!(self.group0(), 1, 2, 0, 3) * Simd32x4::from([other.group7()[2], other.group7()[0], other.group7()[1], other[e1]]))
                + Simd32x4::from([
                    ((self.group3()[3] * other.group7()[0]) + (self.group3()[0] * other.group0()[1])
                        - (self.group2()[0] * other.group1()[3])
                        - (self.group1()[1] * other.group1()[2])
                        + (self.group0()[2] * other.group7()[1])
                        + (self.group0()[0] * other[e1])),
                    ((self.group3()[3] * other.group7()[1]) + (self.group3()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group6()[2])
                        - (self.group1()[2] * other.group1()[0])
                        + (self.group0()[0] * other.group7()[2])
                        + (self.group0()[1] * other[e1])),
                    ((self.group3()[3] * other.group7()[2]) + (self.group3()[2] * other.group0()[1])
                        - (self.group2()[1] * other.group6()[0])
                        - (self.group1()[0] * other.group1()[1])
                        + (self.group0()[2] * other[e1])
                        + (self.group0()[1] * other.group7()[0])),
                    (-(self.group3()[1] * other.group7()[1]) - (self.group3()[0] * other.group7()[0])
                        + (self.group2()[0] * other.group5()[0])
                        + (self.group2()[0] * other.group1()[0])
                        + (self.group1()[1] * other.group7()[1])
                        + (self.group1()[0] * other.group7()[0])),
                ])),
            // e1234
            ((self.group3()[3] * other.group5()[3]) - (self.group3()[3] * other.group0()[1])
                + (self.group3()[2] * other.group6()[2])
                + (self.group3()[1] * other.group6()[1])
                + (self.group3()[0] * other.group6()[0])
                - (self.group1()[3] * other.group1()[3])
                + (self.group1()[2] * other.group6()[2])
                + (self.group1()[1] * other.group6()[1])
                + (self.group1()[0] * other.group6()[0])
                - (self.group0()[3] * other.group1()[3])
                + (self.group0()[2] * other.group5()[2])
                - (self.group0()[2] * other.group1()[2])
                + (self.group0()[1] * other.group5()[1])
                - (self.group0()[1] * other.group1()[1])
                - (self.group0()[0] * other.group1()[0])
                + (self.group0()[0] * other.group5()[0])),
            // e12, e31, e23
            (-(Simd32x3::from(self.group3()[3]) * swizzle!(other.group7(), 2, 1, 0))
                - (Simd32x3::from(other.group5()[3]) * Simd32x3::from([self.group3()[2], self.group3()[1], self.group3()[0]]))
                - (Simd32x3::from(self.group2()[3]) * swizzle!(other.group6(), 2, 1, 0))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group2()[2], self.group2()[1], self.group2()[0]]))
                - (swizzle!(other.group6(), 0, 2, 1) * Simd32x3::from([self.group2()[1], self.group2()[0], self.group2()[2]]))
                + (swizzle!(other.group6(), 1, 0, 2) * Simd32x3::from([self.group2()[0], self.group2()[2], self.group2()[1]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[2], other.group1()[1], other.group1()[0]]))
                - (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group1()[2], self.group1()[1], self.group1()[0]]))
                - (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group5()[2], other.group5()[1], other.group5()[0]]))
                - (Simd32x3::from(other[e1]) * Simd32x3::from([self.group0()[2], self.group0()[1], self.group0()[0]]))
                + (swizzle!(other.group7(), 1, 0, 2) * Simd32x3::from([self.group0()[0], self.group0()[2], self.group0()[1]]))
                - (swizzle!(other.group7(), 0, 2, 1) * Simd32x3::from([self.group0()[1], self.group0()[0], self.group0()[2]]))
                + Simd32x3::from([
                    (-(self.group3()[1] * other.group1()[0]) + (self.group3()[0] * other.group1()[1]) - (self.group1()[1] * other.group5()[0])
                        + (self.group1()[0] * other.group5()[1])),
                    ((self.group3()[2] * other.group1()[0]) - (self.group3()[0] * other.group1()[2]) + (self.group1()[2] * other.group5()[0])
                        - (self.group1()[0] * other.group5()[2])),
                    (-(self.group3()[2] * other.group1()[1]) + (self.group3()[1] * other.group1()[2]) - (self.group1()[2] * other.group5()[1])
                        + (self.group1()[1] * other.group5()[2])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       72      114        0
    //    simd4       54       55        0
    // Totals...
    // yes simd      126      169        0
    //  no simd      288      334        0
    fn sandwich(self, other: Plane) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(self.group3()[3]) * other.group0())
                + (swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[2]]))
                + Simd32x4::from([
                    ((self.group0()[1] * other.group0()[2]) * -1.0),
                    ((self.group0()[2] * other.group0()[0]) * -1.0),
                    ((self.group0()[0] * other.group0()[1]) * -1.0),
                    ((self.group3()[0] * other.group0()[0]) + (self.group3()[1] * other.group0()[1])),
                ])),
            // e415, e425, e435, e321
            ((swizzle!(self.group3(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))
                + (swizzle!(other.group0(), 3, 3, 3, 2) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]]))
                + Simd32x4::from([
                    (-(self.group3()[2] * other.group0()[1]) - (self.group1()[3] * other.group0()[0])),
                    (-(self.group3()[0] * other.group0()[2]) - (self.group1()[3] * other.group0()[1])),
                    (-(self.group3()[1] * other.group0()[0]) - (self.group1()[3] * other.group0()[2])),
                    ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            (-(Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group1()[3]]))
                + (swizzle!(other.group0(), 3, 0, 3, 2) * Simd32x4::from([self.group1()[0], self.group2()[2], self.group1()[2], self.group2()[2]]))
                + (swizzle!(other.group0(), 2, 3, 1, 1) * Simd32x4::from([self.group2()[1], self.group1()[1], self.group2()[0], self.group2()[1]]))
                + Simd32x4::from([
                    (-(self.group2()[3] * other.group0()[0]) - (self.group2()[2] * other.group0()[1])),
                    (-(self.group2()[3] * other.group0()[1]) - (self.group2()[0] * other.group0()[2])),
                    (-(self.group2()[3] * other.group0()[2]) - (self.group2()[1] * other.group0()[0])),
                    ((self.group2()[0] * other.group0()[0]) + (self.group0()[3] * other.group0()[3])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[2]]))
                - (swizzle!(self.group0(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))
                + Simd32x4::from([
                    ((self.group1()[1] * other.group0()[2]) + (self.group0()[0] * other.group0()[3])),
                    ((self.group1()[2] * other.group0()[0]) + (self.group0()[1] * other.group0()[3])),
                    ((self.group1()[0] * other.group0()[1]) + (self.group0()[2] * other.group0()[3])),
                    ((self.group0()[1] * other.group0()[1]) * -1.0),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64       98        0
    //    simd4       60       63        0
    // Totals...
    // yes simd      124      161        0
    //  no simd      304      350        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((swizzle!(self.group3(), 3, 3, 3, 2) * swizzle!(other.group0(), 0, 1, 2, 2))
                - (self.group3() * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other[e2]]))
                - (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                + (swizzle!(other.group0(), 1, 2, 0, 1) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[1]]))
                + (Simd32x4::from([-1.0, -1.0, -1.0, 1.0])
                    * swizzle!(other.group0(), 2, 0, 1, 0)
                    * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]))),
            // e23, e31, e12, e45
            (-(swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]))
                + (swizzle!(self.group3(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other[e2]]))
                - (swizzle!(other.group0(), 3, 3, 3, 2) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[2]]))
                - (swizzle!(self.group1(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))
                - Simd32x4::from([
                    (self.group0()[0] * other[e2]),
                    (self.group0()[1] * other[e2]),
                    (self.group0()[2] * other[e2]),
                    (self.group1()[1] * other.group0()[1]),
                ])),
            // e15, e25, e35, e1234
            (-(other.group0() * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group1()[3]]))
                - (swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[3]]))
                + Simd32x4::from([
                    ((self.group3()[0] * other[e2]) - (self.group1()[0] * other[e2]) + (self.group2()[1] * other.group0()[2])),
                    ((self.group3()[1] * other[e2]) + (self.group2()[2] * other.group0()[0]) - (self.group1()[1] * other[e2])),
                    ((self.group3()[2] * other[e2]) - (self.group1()[2] * other[e2]) + (self.group2()[0] * other.group0()[1])),
                    (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                + (Simd32x4::from(other[e2]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (swizzle!(other.group0(), 0, 1, 2, 1) * Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group2()[1]]))
                + Simd32x4::from([
                    (-(self.group2()[0] * other.group0()[3]) - (self.group1()[1] * other.group0()[2])),
                    (-(self.group2()[1] * other.group0()[3]) - (self.group1()[2] * other.group0()[0])),
                    (-(self.group2()[2] * other.group0()[3]) - (self.group1()[0] * other.group0()[1])),
                    ((self.group2()[0] * other.group0()[0]) - (self.group0()[3] * other[e2])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       60       82        0
    //    simd4       45       50        0
    // Totals...
    // yes simd      105      132        0
    //  no simd      240      282        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (self.group0() * Simd32x4::from(other[scalar])),
            // e415, e425, e435, e321
            (self.group1() * Simd32x4::from(other[scalar])),
            // e235, e315, e125, e5
            (self.group2() * Simd32x4::from(other[scalar])),
            // e1, e2, e3, e4
            (self.group3() * Simd32x4::from(other[scalar])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       72      106        0
    //    simd4       58       61        0
    // Totals...
    // yes simd      130      167        0
    //  no simd      304      350        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(self.group3()[3]) * other.group0())
                + (swizzle!(self.group3(), 0, 1, 2, 2) * Simd32x4::from([other[e4315], other[e4315], other[e4315], other.group0()[2]]))
                + (Simd32x4::from(other[e4315]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                + (swizzle!(other.group0(), 1, 2, 0, 1) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[1]]))
                + (Simd32x4::from([-1.0, -1.0, -1.0, 1.0])
                    * swizzle!(other.group0(), 2, 0, 1, 0)
                    * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]))),
            // e415, e425, e435, e321
            ((swizzle!(self.group3(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))
                + (swizzle!(other.group0(), 3, 3, 3, 2) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]]))
                + Simd32x4::from([
                    (-(self.group3()[2] * other.group0()[1]) + (self.group2()[0] * other[e4315]) - (self.group1()[3] * other.group0()[0])),
                    (-(self.group3()[0] * other.group0()[2]) + (self.group2()[1] * other[e4315]) - (self.group1()[3] * other.group0()[1])),
                    (-(self.group3()[1] * other.group0()[0]) + (self.group2()[2] * other[e4315]) - (self.group1()[3] * other.group0()[2])),
                    (-(self.group2()[3] * other[e4315]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            (-(Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group1()[3]]))
                + (swizzle!(other.group0(), 3, 0, 3, 2) * Simd32x4::from([self.group1()[0], self.group2()[2], self.group1()[2], self.group2()[2]]))
                + (swizzle!(other.group0(), 2, 3, 1, 1) * Simd32x4::from([self.group2()[1], self.group1()[1], self.group2()[0], self.group2()[1]]))
                + Simd32x4::from([
                    (-(self.group2()[3] * other.group0()[0]) - (self.group2()[2] * other.group0()[1])),
                    (-(self.group2()[3] * other.group0()[1]) - (self.group2()[0] * other.group0()[2])),
                    (-(self.group2()[3] * other.group0()[2]) - (self.group2()[1] * other.group0()[0])),
                    ((self.group2()[0] * other.group0()[0]) + (self.group0()[3] * other.group0()[3])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[2]]))
                + (swizzle!(self.group1(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other[e4315]]))
                + (self.group0() * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other[e4315]]))
                - (swizzle!(self.group0(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))
                - Simd32x4::from([
                    (self.group2()[0] * other[e4315]),
                    (self.group2()[1] * other[e4315]),
                    (self.group2()[2] * other[e4315]),
                    (self.group0()[1] * other.group0()[1]),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      112      150        0
    //    simd4       92       93        0
    // Totals...
    // yes simd      204      243        0
    //  no simd      480      522        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((swizzle!(self.group3(), 3, 3, 3, 2) * swizzle!(other.group3(), 0, 1, 2, 2))
                - (Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                - (swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group0()[3]]))
                + (swizzle!(self.group3(), 1, 2, 0, 1) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group3()[1]]))
                - (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[3]]))
                - (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[2]]))
                + (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group2()[2]]))
                + (swizzle!(self.group0(), 1, 1, 1, 0) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group2()[0]]))
                + (swizzle!(self.group0(), 0, 0, 0, 1) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group2()[1]]))
                + Simd32x4::from([
                    (-(self.group1()[2] * other.group0()[1])
                        - (self.group1()[0] * other.group3()[3])
                        - (self.group0()[3] * other.group0()[0])
                        - (self.group0()[2] * other.group1()[1])
                        - (self.group0()[1] * other.group3()[2])
                        - (self.group0()[0] * other.group0()[3])),
                    (-(self.group1()[1] * other.group3()[3])
                        - (self.group1()[0] * other.group0()[2])
                        - (self.group0()[3] * other.group0()[1])
                        - (self.group0()[2] * other.group3()[0])
                        - (self.group0()[1] * other.group0()[3])
                        - (self.group0()[0] * other.group1()[2])),
                    (-(self.group1()[2] * other.group3()[3])
                        - (self.group1()[1] * other.group0()[0])
                        - (self.group0()[3] * other.group0()[2])
                        - (self.group0()[2] * other.group0()[3])
                        - (self.group0()[1] * other.group1()[0])
                        - (self.group0()[0] * other.group3()[1])),
                    ((self.group3()[0] * other.group3()[0])
                        + (self.group2()[1] * other.group0()[1])
                        + (self.group2()[0] * other.group0()[0])
                        + (self.group1()[2] * other.group1()[2])
                        + (self.group1()[1] * other.group1()[1])
                        + (self.group1()[0] * other.group1()[0])),
                ])),
            // e23, e31, e12, e45
            (-(swizzle!(self.group3(), 3, 3, 3, 2) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[2]]))
                - (swizzle!(self.group3(), 2, 1, 2, 1) * Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group1()[1]]))
                + (swizzle!(self.group3(), 1, 2, 0, 3) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[3]]))
                - (swizzle!(self.group3(), 0, 0, 1, 0) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group1()[0]]))
                - (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group3()[3]]))
                + (swizzle!(self.group2(), 1, 2, 0, 2) * swizzle!(other.group0(), 2, 0, 1, 2))
                - (swizzle!(other.group3(), 3, 3, 3, 2) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[2]]))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group3(), 0, 1, 2, 1))
                - (swizzle!(self.group1(), 2, 1, 2, 0) * Simd32x4::from([other.group1()[1], other.group0()[3], other.group0()[3], other.group3()[0]]))
                + (swizzle!(self.group1(), 1, 2, 0, 3) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[3]]))
                - (swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[2]]))
                - (swizzle!(self.group0(), 2, 0, 2, 0) * swizzle!(other.group2(), 1, 2, 3, 0))
                - (swizzle!(self.group0(), 0, 1, 1, 1) * swizzle!(other.group2(), 3, 3, 0, 1))
                + (swizzle!(self.group0(), 1, 2, 0, 3) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[3]]))
                + Simd32x4::from([
                    (-(self.group2()[2] * other.group0()[1]) - (self.group1()[0] * other.group0()[3])),
                    (-(self.group2()[0] * other.group0()[2]) - (self.group1()[0] * other.group1()[2])),
                    (-(self.group2()[1] * other.group0()[0]) - (self.group1()[1] * other.group1()[0])),
                    ((self.group2()[1] * other.group0()[1]) + (self.group2()[0] * other.group0()[0])),
                ])),
            // e15, e25, e35, e1234
            ((swizzle!(self.group3(), 2, 1, 2, 3) * Simd32x4::from([other.group2()[1], other.group2()[3], other.group2()[3], other.group1()[3]]))
                - (swizzle!(self.group3(), 1, 2, 0, 3) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[3]]))
                + (swizzle!(self.group3(), 0, 0, 1, 2) * Simd32x4::from([other.group2()[3], other.group2()[2], other.group2()[0], other.group0()[2]]))
                - (other.group3() * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group1()[3]]))
                - (swizzle!(other.group3(), 1, 2, 0, 3) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[3]]))
                + (swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[2]]))
                + (swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[2]]))
                + (swizzle!(self.group1(), 1, 2, 0, 1) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[1]]))
                - (swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[2]]))
                + Simd32x4::from([
                    (-(self.group2()[3] * other.group1()[0]) - (self.group2()[2] * other.group1()[1]) + (self.group2()[1] * other.group3()[2])
                        - (self.group2()[0] * other.group1()[3])
                        - (self.group2()[0] * other.group0()[3])
                        - (self.group1()[2] * other.group2()[1])
                        - (self.group1()[0] * other.group2()[3])),
                    (-(self.group2()[3] * other.group1()[1]) + (self.group2()[2] * other.group3()[0])
                        - (self.group2()[1] * other.group1()[3])
                        - (self.group2()[1] * other.group0()[3])
                        - (self.group2()[0] * other.group1()[2])
                        - (self.group1()[1] * other.group2()[3])
                        - (self.group1()[0] * other.group2()[2])),
                    (-(self.group2()[3] * other.group1()[2])
                        - (self.group2()[2] * other.group1()[3])
                        - (self.group2()[2] * other.group0()[3])
                        - (self.group2()[1] * other.group1()[0])
                        + (self.group2()[0] * other.group3()[1])
                        - (self.group1()[2] * other.group2()[3])
                        - (self.group1()[1] * other.group2()[0])),
                    ((self.group3()[1] * other.group0()[1]) + (self.group3()[0] * other.group0()[0]) + (self.group1()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group3()[1])
                        + (self.group0()[1] * other.group1()[1])
                        + (self.group0()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group3()[0])),
                ])),
            // e4235, e4315, e4125, e3215
            ((other.group2() * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group1()[3]]))
                + (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[2]]))
                - (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[2]]))
                - (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (swizzle!(self.group2(), 2, 1, 2, 3) * Simd32x4::from([other.group0()[1], other.group3()[3], other.group3()[3], other.group0()[3]]))
                + (swizzle!(self.group2(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group3()[2]]))
                + (swizzle!(other.group1(), 0, 1, 2, 1) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[1]]))
                + (swizzle!(self.group1(), 2, 1, 2, 2) * Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group2()[2]]))
                + (swizzle!(self.group1(), 0, 0, 1, 1) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group2()[1]]))
                + (swizzle!(other.group3(), 0, 1, 2, 1) * Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group2()[1]]))
                + (swizzle!(other.group2(), 1, 2, 3, 0) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[2], self.group1()[0]]))
                - (swizzle!(other.group2(), 2, 0, 1, 1) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[1]]))
                + Simd32x4::from([
                    ((self.group3()[0] * other.group0()[3]) - (self.group2()[0] * other.group3()[3]) - (self.group1()[1] * other.group3()[2])
                        + (self.group0()[0] * other.group2()[3])),
                    ((self.group3()[1] * other.group0()[3]) - (self.group2()[0] * other.group0()[2]) - (self.group1()[2] * other.group3()[0])
                        + (self.group0()[1] * other.group2()[3])),
                    ((self.group3()[2] * other.group0()[3]) - (self.group2()[1] * other.group0()[0]) - (self.group1()[0] * other.group3()[1])
                        + (self.group0()[1] * other.group2()[0])),
                    (-(self.group3()[0] * other.group2()[0]) + (self.group2()[0] * other.group3()[0]) + (self.group2()[0] * other.group1()[0])
                        - (self.group0()[3] * other.group2()[3])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      104      138        0
    //    simd4       94       96        0
    // Totals...
    // yes simd      198      234        0
    //  no simd      480      522        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(self.group3()[3]) * other.group3())
                + (swizzle!(self.group3(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[2]]))
                + (swizzle!(self.group3(), 2, 1, 2, 1) * Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group3()[1]]))
                - (swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[2]]))
                + (swizzle!(self.group3(), 0, 0, 1, 0) * Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group3()[0]]))
                + (other.group0() * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[3]]))
                - (swizzle!(other.group0(), 2, 0, 1, 1) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[1]]))
                + (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[1], other.group2()[2]]))
                - (swizzle!(self.group0(), 1, 2, 0, 0) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group3()[1], other.group2()[0]]))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group0()[1])
                        + (self.group0()[3] * other.group0()[0])
                        + (self.group0()[2] * other.group3()[1])
                        + (self.group0()[2] * other.group1()[1])
                        + (self.group0()[0] * other.group0()[3])
                        + (self.group0()[0] * other.group1()[3])),
                    ((self.group1()[0] * other.group0()[2])
                        + (self.group0()[3] * other.group0()[1])
                        + (self.group0()[1] * other.group1()[3])
                        + (self.group0()[1] * other.group0()[3])
                        + (self.group0()[0] * other.group1()[2])
                        + (self.group0()[0] * other.group3()[2])),
                    ((self.group1()[1] * other.group0()[0])
                        + (self.group0()[3] * other.group0()[2])
                        + (self.group0()[2] * other.group1()[3])
                        + (self.group0()[2] * other.group0()[3])
                        + (self.group0()[1] * other.group3()[0])
                        + (self.group0()[1] * other.group1()[0])),
                    (-(self.group2()[0] * other.group0()[0])
                        - (self.group1()[3] * other.group1()[3])
                        - (self.group1()[2] * other.group1()[2])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e321
            ((Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                - (swizzle!(self.group3(), 2, 1, 2, 2) * Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group1()[2]]))
                + (swizzle!(other.group3(), 2, 0, 1, 2) * Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[2]]))
                - (swizzle!(self.group3(), 0, 0, 1, 1) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group1()[1]]))
                + (swizzle!(self.group2(), 3, 3, 3, 2) * swizzle!(other.group0(), 0, 1, 2, 2))
                + (swizzle!(self.group2(), 2, 1, 2, 1) * Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group0()[1]]))
                - (swizzle!(self.group2(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]))
                + (swizzle!(self.group2(), 0, 0, 1, 0) * Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group0()[0]]))
                + (swizzle!(self.group1(), 2, 1, 2, 3) * Simd32x4::from([other.group1()[1], other.group0()[3], other.group0()[3], other.group0()[3]]))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[0]]))
                + (swizzle!(self.group1(), 0, 0, 1, 1) * Simd32x4::from([other.group0()[3], other.group1()[2], other.group1()[0], other.group3()[1]]))
                + (swizzle!(other.group3(), 3, 3, 3, 0) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]))
                - (swizzle!(self.group0(), 1, 2, 0, 3) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[3]]))
                + Simd32x4::from([
                    (-(self.group1()[3] * other.group3()[0]) + (self.group0()[3] * other.group1()[0]) + (self.group0()[2] * other.group2()[1])),
                    (-(self.group1()[3] * other.group3()[1]) + (self.group0()[3] * other.group1()[1]) + (self.group0()[0] * other.group2()[2])),
                    (-(self.group1()[3] * other.group3()[2]) + (self.group0()[3] * other.group1()[2]) + (self.group0()[1] * other.group2()[0])),
                    (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
            // e235, e315, e125, e5
            (-(swizzle!(other.group2(), 1, 2, 0, 2) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[2]]))
                + (swizzle!(self.group3(), 1, 2, 0, 2) * swizzle!(other.group2(), 2, 0, 1, 2))
                - (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group1()[3]]))
                - (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                - (Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group1()[2]]))
                + (Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group0()[3], other.group3()[2]]))
                + (Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group3()[2], other.group0()[3], other.group1()[0], other.group3()[1]]))
                - (Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group1()[1]]))
                - (Simd32x4::from(self.group2()[0]) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group1()[0]]))
                + (Simd32x4::from(self.group2()[0]) * Simd32x4::from([other.group0()[3], other.group1()[2], other.group3()[1], other.group3()[0]]))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group2(), 0, 1, 2, 1))
                + (swizzle!(other.group2(), 1, 1, 0, 1) * Simd32x4::from([self.group1()[2], self.group0()[3], self.group1()[1], self.group3()[1]]))
                - (swizzle!(self.group1(), 1, 2, 0, 0) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (swizzle!(other.group2(), 0, 2, 2, 0) * Simd32x4::from([self.group0()[3], self.group1()[0], self.group0()[3], self.group3()[0]]))
                + (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]))),
            // e1, e2, e3, e4
            ((Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))
                + (swizzle!(self.group3(), 2, 1, 2, 3) * Simd32x4::from([other.group1()[1], other.group0()[3], other.group0()[3], other.group0()[3]]))
                - (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                - (swizzle!(other.group0(), 0, 1, 2, 1) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[1]]))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group3()[0]]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                - (swizzle!(self.group1(), 2, 1, 2, 2) * Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group0()[2]]))
                - (swizzle!(self.group1(), 0, 0, 1, 1) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group3()[0], other.group0()[1]]))
                - (swizzle!(self.group0(), 3, 3, 3, 2) * swizzle!(other.group3(), 0, 1, 2, 2))
                + (swizzle!(self.group0(), 2, 0, 2, 3) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group3()[3], other.group2()[3]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group3()[0] * other.group0()[3]) + (self.group2()[1] * other.group0()[2]) - (self.group2()[0] * other.group2()[3])
                        + (self.group1()[1] * other.group3()[2])
                        + (self.group0()[0] * other.group3()[3])),
                    ((self.group3()[0] * other.group1()[2]) + (self.group2()[2] * other.group0()[0]) - (self.group2()[1] * other.group2()[3])
                        + (self.group1()[2] * other.group3()[0])
                        + (self.group0()[1] * other.group3()[3])),
                    ((self.group3()[1] * other.group1()[0]) - (self.group2()[2] * other.group2()[3])
                        + (self.group2()[0] * other.group0()[1])
                        + (self.group1()[0] * other.group3()[1])
                        + (self.group0()[1] * other.group2()[0])),
                    (-(self.group1()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group3()[1])
                        - (self.group0()[1] * other.group1()[1])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group3()[0])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl InfixSandwich for VersorOdd {}
impl Sandwich<AntiScalar> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44       62        0
    //    simd4       49       57        0
    // Totals...
    // yes simd       93      119        0
    //  no simd      240      290        0
    fn sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (self.group0() * Simd32x4::from(other[e12345])),
            // e415, e425, e435, e321
            (self.group1() * Simd32x4::from(other[e12345]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e235, e315, e125, e5
            (Simd32x4::from(other[e12345]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]])),
            // e1, e2, e3, e4
            (Simd32x4::from(other[e12345]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[3]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Circle> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      108      142        0
    //    simd4       69       71        0
    // Totals...
    // yes simd      177      213        0
    //  no simd      384      426        0
    fn sandwich(self, other: Circle) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group3()[2], self.group1()[3], self.group1()[0], self.group2()[1]]))
                - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group1()[2], self.group3()[1], self.group2()[0]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group1()[1], self.group3()[0], self.group1()[3], self.group2()[2]]))
                - (swizzle!(other.group1(), 3, 0, 3, 3) * Simd32x4::from([self.group0()[0], self.group0()[2], self.group0()[2], self.group1()[3]]))
                - (swizzle!(other.group1(), 2, 3, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[0], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group3()[1] * other.group0()[2])
                        + (self.group2()[3] * other.group1()[0])
                        + (self.group1()[2] * other.group0()[1])
                        + (self.group0()[3] * other.group0()[0])
                        + (self.group0()[2] * other.group1()[1])),
                    ((self.group3()[2] * other.group0()[0])
                        + (self.group2()[3] * other.group1()[1])
                        + (self.group1()[0] * other.group0()[2])
                        + (self.group0()[3] * other.group0()[1])
                        + (self.group0()[0] * other.group1()[2])),
                    ((self.group3()[0] * other.group0()[1])
                        + (self.group2()[3] * other.group1()[2])
                        + (self.group1()[1] * other.group0()[0])
                        + (self.group0()[3] * other.group0()[2])
                        + (self.group0()[1] * other.group1()[0])),
                    (-(self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e321
            ((swizzle!(self.group3(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]))
                + (swizzle!(self.group2(), 3, 3, 3, 2) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[2]]))
                + (swizzle!(self.group2(), 2, 0, 1, 1) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(other.group1(), 1, 2, 0, 1) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[1]]))
                + (swizzle!(other.group1(), 0, 1, 2, 0) * Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group3()[0]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group2()[2]]))
                + (swizzle!(self.group0(), 2, 0, 1, 3) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]))
                + Simd32x4::from([
                    (-(self.group3()[0] * other.group1()[3]) - (self.group2()[1] * other.group0()[2]) - (self.group1()[1] * other.group1()[2])),
                    (-(self.group3()[1] * other.group1()[3]) - (self.group2()[2] * other.group0()[0]) - (self.group1()[2] * other.group1()[0])),
                    (-(self.group3()[2] * other.group1()[3]) - (self.group2()[0] * other.group0()[1]) - (self.group1()[0] * other.group1()[1])),
                    ((self.group2()[0] * other.group0()[0]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group3()[3]) * other.group1())
                - (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group2()[2]]))
                - (swizzle!(self.group2(), 1, 2, 0, 2) * swizzle!(other.group1(), 2, 0, 1, 2))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group2()[2]]))
                + Simd32x4::from([
                    ((self.group3()[2] * other.group2()[1])
                        + (self.group2()[2] * other.group1()[1])
                        + (self.group2()[0] * other.group1()[3])
                        + (self.group1()[3] * other.group2()[0])
                        + (self.group1()[2] * other.group2()[1])
                        + (self.group0()[3] * other.group2()[0])),
                    ((self.group3()[0] * other.group2()[2])
                        + (self.group2()[1] * other.group1()[3])
                        + (self.group2()[0] * other.group1()[2])
                        + (self.group1()[3] * other.group2()[1])
                        + (self.group0()[3] * other.group2()[1])
                        + (self.group1()[0] * other.group2()[2])),
                    ((self.group3()[1] * other.group2()[0])
                        + (self.group2()[2] * other.group1()[3])
                        + (self.group2()[1] * other.group1()[0])
                        + (self.group1()[3] * other.group2()[2])
                        + (self.group1()[1] * other.group2()[0])
                        + (self.group0()[3] * other.group2()[2])),
                    (-(self.group3()[1] * other.group2()[1])
                        - (self.group3()[0] * other.group2()[0])
                        - (self.group2()[1] * other.group1()[1])
                        - (self.group2()[0] * other.group1()[0])
                        - (self.group1()[0] * other.group2()[0])
                        - (self.group1()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group1(), 1, 2, 0, 3) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]))
                + (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[2]]))
                + Simd32x4::from([
                    (-(self.group3()[3] * other.group0()[0]) + (self.group2()[3] * other.group2()[0]) - (self.group2()[2] * other.group0()[1])
                        + (self.group2()[1] * other.group0()[2])
                        + (self.group1()[0] * other.group1()[3])
                        + (self.group0()[2] * other.group2()[1])),
                    (-(self.group3()[3] * other.group0()[1]) + (self.group2()[3] * other.group2()[1]) + (self.group2()[2] * other.group0()[0])
                        - (self.group2()[0] * other.group0()[2])
                        + (self.group1()[1] * other.group1()[3])
                        + (self.group0()[0] * other.group2()[2])),
                    (-(self.group3()[3] * other.group0()[2]) + (self.group2()[3] * other.group2()[2]) - (self.group2()[1] * other.group0()[0])
                        + (self.group2()[0] * other.group0()[1])
                        + (self.group1()[2] * other.group1()[3])
                        + (self.group0()[1] * other.group2()[0])),
                    ((self.group3()[1] * other.group0()[1]) + (self.group3()[0] * other.group0()[0])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<CircleRotor> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      108      142        0
    //    simd4       73       75        0
    // Totals...
    // yes simd      181      217        0
    //  no simd      400      442        0
    fn sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group3()[2], self.group1()[3], self.group1()[0], self.group2()[1]]))
                - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group1()[2], self.group3()[1], self.group2()[0]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group1()[1], self.group3()[0], self.group1()[3], self.group2()[2]]))
                + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (swizzle!(other.group1(), 2, 0, 3, 3) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[2], self.group1()[3]]))
                - (swizzle!(other.group1(), 3, 3, 1, 2) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group3()[1] * other.group0()[2])
                        + (self.group2()[3] * other.group1()[0])
                        + (self.group1()[2] * other.group0()[1])
                        + (self.group0()[2] * other.group1()[1])
                        + (self.group0()[0] * other.group2()[3])),
                    ((self.group3()[2] * other.group0()[0])
                        + (self.group2()[3] * other.group1()[1])
                        + (self.group1()[0] * other.group0()[2])
                        + (self.group0()[1] * other.group2()[3])
                        + (self.group0()[0] * other.group1()[2])),
                    ((self.group3()[0] * other.group0()[1])
                        + (self.group2()[3] * other.group1()[2])
                        + (self.group1()[1] * other.group0()[0])
                        + (self.group0()[2] * other.group2()[3])
                        + (self.group0()[1] * other.group1()[0])),
                    (-(self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e321
            ((swizzle!(self.group3(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]))
                + (swizzle!(self.group2(), 3, 3, 3, 2) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[2]]))
                + (swizzle!(self.group2(), 2, 0, 1, 1) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(other.group1(), 1, 2, 0, 1) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[1]]))
                - (swizzle!(self.group1(), 1, 2, 0, 3) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[3]]))
                + (swizzle!(other.group1(), 0, 1, 2, 0) * Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group3()[0]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * swizzle!(other.group2(), 2, 0, 1, 2))
                + (swizzle!(self.group0(), 2, 0, 1, 3) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]))
                + Simd32x4::from([
                    (-(self.group3()[0] * other.group1()[3]) - (self.group2()[1] * other.group0()[2]) + (self.group1()[0] * other.group2()[3])),
                    (-(self.group3()[1] * other.group1()[3]) - (self.group2()[2] * other.group0()[0]) + (self.group1()[1] * other.group2()[3])),
                    (-(self.group3()[2] * other.group1()[3]) - (self.group2()[0] * other.group0()[1]) + (self.group1()[2] * other.group2()[3])),
                    ((self.group2()[0] * other.group0()[0]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                + (swizzle!(self.group3(), 2, 0, 1, 3) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]))
                - (swizzle!(self.group3(), 1, 2, 0, 2) * swizzle!(other.group2(), 2, 0, 1, 2))
                - (swizzle!(self.group2(), 1, 2, 0, 2) * swizzle!(other.group1(), 2, 0, 1, 2))
                - (swizzle!(other.group2(), 2, 0, 1, 1) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[1]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group1()[1])
                        + (self.group2()[0] * other.group2()[3])
                        + (self.group2()[0] * other.group1()[3])
                        + (self.group1()[3] * other.group2()[0])
                        + (self.group1()[2] * other.group2()[1])
                        + (self.group0()[3] * other.group2()[0])),
                    ((self.group2()[1] * other.group2()[3])
                        + (self.group2()[1] * other.group1()[3])
                        + (self.group2()[0] * other.group1()[2])
                        + (self.group1()[3] * other.group2()[1])
                        + (self.group0()[3] * other.group2()[1])
                        + (self.group1()[0] * other.group2()[2])),
                    ((self.group2()[2] * other.group2()[3])
                        + (self.group2()[2] * other.group1()[3])
                        + (self.group2()[1] * other.group1()[0])
                        + (self.group1()[3] * other.group2()[2])
                        + (self.group1()[1] * other.group2()[0])
                        + (self.group0()[3] * other.group2()[2])),
                    (-(self.group3()[0] * other.group2()[0])
                        - (self.group2()[1] * other.group1()[1])
                        - (self.group2()[0] * other.group1()[0])
                        - (self.group1()[2] * other.group2()[2])
                        - (self.group1()[0] * other.group2()[0])
                        - (self.group1()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group1(), 1, 2, 0, 3) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]))
                + (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                + (Simd32x4::from(self.group2()[3]) * other.group2())
                - (swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[2]]))
                + Simd32x4::from([
                    (-(self.group3()[3] * other.group0()[0]) - (self.group3()[0] * other.group2()[3]) - (self.group2()[2] * other.group0()[1])
                        + (self.group2()[1] * other.group0()[2])
                        + (self.group1()[0] * other.group1()[3])
                        + (self.group0()[2] * other.group2()[1])),
                    (-(self.group3()[3] * other.group0()[1]) - (self.group3()[1] * other.group2()[3]) + (self.group2()[2] * other.group0()[0])
                        - (self.group2()[0] * other.group0()[2])
                        + (self.group1()[1] * other.group1()[3])
                        + (self.group0()[0] * other.group2()[2])),
                    (-(self.group3()[3] * other.group0()[2]) - (self.group3()[2] * other.group2()[3]) - (self.group2()[1] * other.group0()[0])
                        + (self.group2()[0] * other.group0()[1])
                        + (self.group1()[2] * other.group1()[3])
                        + (self.group0()[1] * other.group2()[0])),
                    ((self.group3()[1] * other.group0()[1]) + (self.group3()[0] * other.group0()[0])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Dipole> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      140      178        0
    //    simd4       61       62        0
    // Totals...
    // yes simd      201      240        0
    //  no simd      384      426        0
    fn sandwich(self, other: Dipole) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group3()[2], self.group1()[3], self.group1()[0], self.group2()[1]]))
                + (other.group1() * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group1()[3]]))
                - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group1()[2], self.group3()[1], self.group2()[0]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group1()[1], self.group3()[0], self.group1()[3], self.group2()[2]]))
                - (swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group3()[1] * other.group0()[2])
                        + (self.group1()[2] * other.group0()[1])
                        + (self.group0()[3] * other.group0()[0])
                        + (self.group0()[2] * other.group1()[1])
                        + (self.group0()[0] * other.group1()[3])),
                    ((self.group3()[2] * other.group0()[0])
                        + (self.group1()[0] * other.group0()[2])
                        + (self.group0()[3] * other.group0()[1])
                        + (self.group0()[0] * other.group1()[2])
                        + (self.group0()[1] * other.group1()[3])),
                    ((self.group3()[0] * other.group0()[1])
                        + (self.group1()[1] * other.group0()[0])
                        + (self.group0()[3] * other.group0()[2])
                        + (self.group0()[2] * other.group1()[3])
                        + (self.group0()[1] * other.group1()[0])),
                    (-(self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e23, e31, e12, e45
            ((Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[3]]))
                - (swizzle!(self.group2(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[2]]))
                + (swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[2]]))
                + (swizzle!(self.group0(), 2, 0, 1, 0) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group2()[0]]))
                + Simd32x4::from([
                    ((self.group3()[3] * other.group0()[0])
                        + (self.group2()[3] * other.group2()[0])
                        + (self.group2()[2] * other.group0()[1])
                        + (self.group1()[2] * other.group1()[1])
                        - (self.group0()[1] * other.group2()[2])),
                    ((self.group3()[3] * other.group0()[1])
                        + (self.group2()[3] * other.group2()[1])
                        + (self.group2()[0] * other.group0()[2])
                        + (self.group1()[0] * other.group1()[2])
                        - (self.group0()[2] * other.group2()[0])),
                    ((self.group3()[3] * other.group0()[2])
                        + (self.group2()[3] * other.group2()[2])
                        + (self.group2()[1] * other.group0()[0])
                        + (self.group1()[1] * other.group1()[0])
                        - (self.group0()[0] * other.group2()[1])),
                    (-(self.group3()[1] * other.group1()[1])
                        - (self.group3()[0] * other.group1()[0])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        + (self.group0()[1] * other.group2()[1])),
                ])),
            // e15, e25, e35, e1234
            ((swizzle!(self.group3(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]))
                + (swizzle!(self.group3(), 2, 0, 1, 1) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[1]]))
                + (swizzle!(self.group2(), 2, 0, 1, 3) * swizzle!(other.group1(), 1, 2, 0, 3))
                - (swizzle!(other.group1(), 2, 0, 3, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[2], self.group0()[2]]))
                - (swizzle!(other.group1(), 3, 3, 1, 0) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[0], self.group0()[0]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group3()[1] * other.group2()[2])
                        + (self.group1()[3] * other.group2()[0])
                        + (self.group1()[2] * other.group2()[1])
                        + (self.group0()[3] * other.group2()[0])),
                    (-(self.group3()[2] * other.group2()[0])
                        + (self.group1()[3] * other.group2()[1])
                        + (self.group0()[3] * other.group2()[1])
                        + (self.group1()[0] * other.group2()[2])),
                    (-(self.group3()[0] * other.group2()[1])
                        + (self.group1()[3] * other.group2()[2])
                        + (self.group1()[1] * other.group2()[0])
                        + (self.group0()[3] * other.group2()[2])),
                    ((self.group3()[0] * other.group0()[0])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group3(), 1, 2, 0, 3) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (swizzle!(self.group2(), 3, 3, 3, 2) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[2]]))
                - (swizzle!(self.group2(), 1, 2, 0, 1) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[1]]))
                + Simd32x4::from([
                    ((self.group3()[3] * other.group0()[0])
                        + (self.group3()[2] * other.group1()[1])
                        + (self.group2()[2] * other.group0()[1])
                        + (self.group1()[3] * other.group1()[0])
                        + (self.group1()[0] * other.group1()[3])
                        + (self.group0()[1] * other.group2()[2])
                        - (self.group0()[2] * other.group2()[1])),
                    ((self.group3()[3] * other.group0()[1])
                        + (self.group3()[0] * other.group1()[2])
                        + (self.group2()[0] * other.group0()[2])
                        + (self.group1()[3] * other.group1()[1])
                        + (self.group1()[1] * other.group1()[3])
                        - (self.group0()[0] * other.group2()[2])
                        + (self.group0()[2] * other.group2()[0])),
                    ((self.group3()[3] * other.group0()[2])
                        + (self.group3()[1] * other.group1()[0])
                        + (self.group2()[1] * other.group0()[0])
                        + (self.group1()[3] * other.group1()[2])
                        + (self.group1()[2] * other.group1()[3])
                        + (self.group0()[0] * other.group2()[1])
                        - (self.group0()[1] * other.group2()[0])),
                    (-(self.group3()[2] * other.group2()[2])
                        - (self.group3()[1] * other.group2()[1])
                        - (self.group3()[0] * other.group2()[0])
                        - (self.group2()[0] * other.group1()[0])
                        - (self.group1()[2] * other.group2()[2])
                        - (self.group1()[0] * other.group2()[0])
                        - (self.group1()[1] * other.group2()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DipoleInversion> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      144      182        0
    //    simd4       80       81        0
    // Totals...
    // yes simd      224      263        0
    //  no simd      464      506        0
    fn sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(swizzle!(self.group3(), 2, 1, 2, 2) * Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group3()[2]]))
                + (swizzle!(self.group3(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]))
                - (swizzle!(self.group3(), 0, 0, 1, 1) * Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group3()[1]]))
                + (Simd32x4::from(self.group2()[3]) * other.group3())
                + (other.group1() * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group1()[3]]))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]))
                - (swizzle!(self.group1(), 1, 2, 0, 1) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[1]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[1], other.group2()[2]]))
                - (swizzle!(self.group0(), 1, 2, 0, 0) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group3()[1], other.group2()[0]]))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group0()[1])
                        + (self.group1()[0] * other.group2()[3])
                        + (self.group0()[3] * other.group0()[0])
                        + (self.group0()[2] * other.group3()[1])
                        + (self.group0()[2] * other.group1()[1])
                        + (self.group0()[0] * other.group1()[3])),
                    ((self.group1()[1] * other.group2()[3])
                        + (self.group1()[0] * other.group0()[2])
                        + (self.group0()[3] * other.group0()[1])
                        + (self.group0()[1] * other.group1()[3])
                        + (self.group0()[0] * other.group1()[2])
                        + (self.group0()[0] * other.group3()[2])),
                    ((self.group1()[2] * other.group2()[3])
                        + (self.group1()[1] * other.group0()[0])
                        + (self.group0()[3] * other.group0()[2])
                        + (self.group0()[2] * other.group1()[3])
                        + (self.group0()[1] * other.group3()[0])
                        + (self.group0()[1] * other.group1()[0])),
                    (-(self.group3()[0] * other.group3()[0])
                        - (self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e23, e31, e12, e45
            ((Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[2]]))
                + (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[3]]))
                + (swizzle!(other.group2(), 0, 1, 2, 2) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[2]]))
                - (swizzle!(self.group2(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group3()[3]]))
                + (swizzle!(other.group2(), 3, 3, 3, 0) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[0]]))
                - (swizzle!(other.group1(), 2, 0, 1, 1) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[1]]))
                + (swizzle!(self.group0(), 3, 3, 3, 1) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[1]]))
                + Simd32x4::from([
                    ((self.group3()[2] * other.group3()[1])
                        + (self.group2()[2] * other.group0()[1])
                        + (self.group1()[3] * other.group3()[0])
                        + (self.group1()[2] * other.group1()[1])
                        + (self.group0()[2] * other.group2()[1])
                        + (self.group0()[0] * other.group3()[3])
                        - (self.group0()[1] * other.group2()[2])),
                    ((self.group3()[0] * other.group3()[2])
                        + (self.group2()[0] * other.group0()[2])
                        + (self.group1()[3] * other.group3()[1])
                        + (self.group1()[0] * other.group1()[2])
                        - (self.group0()[2] * other.group2()[0])
                        + (self.group0()[0] * other.group2()[2])
                        + (self.group0()[1] * other.group3()[3])),
                    ((self.group3()[1] * other.group3()[0])
                        + (self.group2()[1] * other.group0()[0])
                        + (self.group1()[3] * other.group3()[2])
                        + (self.group1()[1] * other.group1()[0])
                        + (self.group0()[2] * other.group3()[3])
                        - (self.group0()[0] * other.group2()[1])
                        + (self.group0()[1] * other.group2()[0])),
                    (-(self.group3()[0] * other.group1()[0])
                        - (self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[2] * other.group3()[2])
                        - (self.group1()[1] * other.group3()[1])
                        - (self.group1()[0] * other.group3()[0])),
                ])),
            // e15, e25, e35, e1234
            (-(swizzle!(other.group3(), 0, 1, 2, 2) * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group0()[2]]))
                + (swizzle!(self.group3(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]))
                + (swizzle!(self.group3(), 2, 1, 2, 1) * Simd32x4::from([other.group2()[1], other.group3()[3], other.group3()[3], other.group0()[1]]))
                - (swizzle!(other.group2(), 2, 0, 1, 3) * Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[3]]))
                + (swizzle!(self.group3(), 0, 0, 1, 0) * Simd32x4::from([other.group3()[3], other.group2()[2], other.group2()[0], other.group0()[0]]))
                - (swizzle!(other.group3(), 1, 2, 0, 1) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[1]]))
                + (swizzle!(self.group2(), 2, 2, 1, 3) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[0], other.group1()[3]]))
                - (swizzle!(other.group1(), 2, 0, 3, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[2], self.group0()[2]]))
                - (swizzle!(other.group1(), 3, 3, 1, 1) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[0], self.group0()[1]]))
                + (other.group2() * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[3]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[2]]))
                + Simd32x4::from([
                    ((self.group2()[1] * other.group3()[2])
                        + (self.group1()[2] * other.group2()[1])
                        + (self.group0()[3] * other.group2()[0])
                        + (self.group1()[0] * other.group3()[3])),
                    ((self.group2()[0] * other.group1()[2])
                        + (self.group1()[1] * other.group3()[3])
                        + (self.group0()[3] * other.group2()[1])
                        + (self.group1()[0] * other.group2()[2])),
                    ((self.group2()[0] * other.group3()[1])
                        + (self.group1()[2] * other.group3()[3])
                        + (self.group1()[1] * other.group2()[0])
                        + (self.group0()[3] * other.group2()[2])),
                    (-(self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group3()[0])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group3(), 1, 2, 0, 3) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (swizzle!(other.group2(), 0, 1, 2, 2) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[2]]))
                + (swizzle!(self.group2(), 2, 1, 2, 2) * Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group3()[2]]))
                - (swizzle!(self.group2(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + (swizzle!(self.group2(), 0, 0, 1, 1) * Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group3()[1]]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + (swizzle!(other.group3(), 1, 2, 0, 0) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[2]]))
                + (Simd32x4::from(self.group0()[3]) * other.group3())
                - (swizzle!(other.group2(), 1, 2, 0, 1) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[1]]))
                + Simd32x4::from([
                    ((self.group3()[3] * other.group0()[0]) + (self.group3()[2] * other.group1()[1]) + (self.group1()[0] * other.group1()[3])
                        - (self.group0()[0] * other.group3()[3])
                        + (self.group0()[1] * other.group2()[2])),
                    ((self.group3()[3] * other.group0()[1])
                        + (self.group3()[0] * other.group1()[2])
                        + (self.group1()[1] * other.group1()[3])
                        + (self.group0()[2] * other.group2()[0])
                        - (self.group0()[1] * other.group3()[3])),
                    ((self.group3()[3] * other.group0()[2]) + (self.group3()[1] * other.group1()[0]) + (self.group1()[2] * other.group1()[3])
                        - (self.group0()[2] * other.group3()[3])
                        + (self.group0()[0] * other.group2()[1])),
                    (-(self.group3()[0] * other.group2()[0])
                        - (self.group2()[1] * other.group1()[1])
                        - (self.group2()[0] * other.group1()[0])
                        - (self.group1()[1] * other.group2()[1])
                        - (self.group1()[0] * other.group2()[0])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<DualNum> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       78        0
    //    simd4       52       56        0
    // Totals...
    // yes simd      100      134        0
    //  no simd      256      302        0
    fn sandwich(self, other: DualNum) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[2] * other.group0()[1]),
                ((self.group0()[3] * other.group0()[1]) + (self.group2()[3] * other.group0()[0])),
            ]),
            // e415, e425, e435, e321
            ((Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                + (Simd32x4::from([1.0, 1.0, 1.0, -1.0]) * self.group1() * Simd32x4::from(other.group0()[1]))),
            // e235, e315, e125, e5
            ((self.group3() * Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]))
                + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]))
                + Simd32x4::from([
                    (self.group2()[0] * other.group0()[1]),
                    (self.group2()[1] * other.group0()[1]),
                    (self.group2()[2] * other.group0()[1]),
                    (self.group1()[3] * other.group0()[0]),
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) - (self.group3()[0] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[0]) - (self.group3()[1] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[0]) - (self.group3()[2] * other.group0()[1])),
                (self.group2()[3] * other.group0()[1]),
            ]),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<FlatPoint> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      100      134        0
    //    simd4       47       50        0
    // Totals...
    // yes simd      147      184        0
    //  no simd      288      334        0
    fn sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                ((self.group1()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e23, e31, e12, e45
            ((Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[3]]))
                + (swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[2]]))
                + (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([-1.0, -1.0, -1.0, 1.0]) * swizzle!(self.group0(), 1, 2, 0, 1) * swizzle!(other.group0(), 2, 0, 1, 1))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group3()[2] * other.group0()[1]) - (self.group3()[1] * other.group0()[2]) - (self.group2()[0] * other.group0()[3])
                    + (self.group1()[3] * other.group0()[0])
                    + (self.group1()[2] * other.group0()[1])
                    + (self.group0()[3] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[2])),
                (-(self.group3()[2] * other.group0()[0]) + (self.group3()[0] * other.group0()[2]) - (self.group2()[1] * other.group0()[3])
                    + (self.group1()[3] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[0])
                    + (self.group0()[3] * other.group0()[1])
                    + (self.group1()[0] * other.group0()[2])),
                ((self.group3()[1] * other.group0()[0]) - (self.group3()[0] * other.group0()[1]) - (self.group2()[2] * other.group0()[3])
                    + (self.group1()[3] * other.group0()[2])
                    + (self.group1()[1] * other.group0()[0])
                    + (self.group0()[3] * other.group0()[2])
                    - (self.group1()[0] * other.group0()[1])),
                (self.group2()[3] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            (-(other.group0() * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[3]]))
                - (swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[2]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2])),
                    ((self.group1()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[0])),
                    ((self.group1()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1])),
                    (-(self.group3()[1] * other.group0()[1])
                        - (self.group3()[0] * other.group0()[0])
                        - (self.group1()[2] * other.group0()[2])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group1()[1] * other.group0()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Flector> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      116      155        0
    //    simd4       59       60        0
    // Totals...
    // yes simd      175      215        0
    //  no simd      352      395        0
    fn sandwich(self, other: Flector) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((Simd32x4::from(self.group2()[3]) * other.group1())
                + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[2]]))
                + Simd32x4::from([
                    (self.group0()[2] * other.group1()[1]),
                    (self.group0()[0] * other.group1()[2]),
                    (self.group0()[1] * other.group1()[0]),
                    (-(self.group3()[1] * other.group1()[1])
                        - (self.group3()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group0()[2])
                        - (self.group0()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group0()[1])),
                ])),
            // e23, e31, e12, e45
            (-(swizzle!(other.group1(), 2, 0, 1, 3) * Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[3]]))
                + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[3]]))
                + (swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[2]]))
                + (swizzle!(self.group0(), 2, 0, 2, 0) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group1()[3], other.group0()[0]]))
                + (swizzle!(self.group0(), 0, 1, 1, 1) * Simd32x4::from([other.group1()[3], other.group1()[3], other.group0()[0], other.group0()[1]]))
                + Simd32x4::from([
                    ((self.group3()[2] * other.group1()[1]) + (self.group1()[3] * other.group1()[0]) - (self.group0()[1] * other.group0()[2])),
                    ((self.group3()[0] * other.group1()[2]) + (self.group1()[3] * other.group1()[1]) - (self.group0()[2] * other.group0()[0])),
                    ((self.group3()[1] * other.group1()[0]) + (self.group1()[3] * other.group1()[2]) - (self.group0()[0] * other.group0()[1])),
                    (-(self.group1()[2] * other.group1()[2]) - (self.group1()[1] * other.group1()[1]) - (self.group1()[0] * other.group1()[0])),
                ])),
            // e15, e25, e35, e1234
            (-(swizzle!(other.group1(), 0, 1, 2, 2) * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group0()[2]]))
                + (swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]))
                - (swizzle!(other.group1(), 1, 2, 0, 0) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]))
                + Simd32x4::from([
                    (-(self.group3()[1] * other.group0()[2]) + (self.group3()[0] * other.group1()[3]) + (self.group2()[1] * other.group1()[2])
                        - (self.group2()[0] * other.group0()[3])
                        + (self.group1()[3] * other.group0()[0])
                        + (self.group1()[2] * other.group0()[1])
                        - (self.group1()[1] * other.group0()[2])
                        + (self.group0()[3] * other.group0()[0])
                        + (self.group1()[0] * other.group1()[3])),
                    (-(self.group3()[2] * other.group0()[0]) + (self.group3()[1] * other.group1()[3]) + (self.group2()[2] * other.group1()[0])
                        - (self.group2()[1] * other.group0()[3])
                        + (self.group1()[3] * other.group0()[1])
                        - (self.group1()[2] * other.group0()[0])
                        + (self.group1()[1] * other.group1()[3])
                        + (self.group0()[3] * other.group0()[1])
                        + (self.group1()[0] * other.group0()[2])),
                    ((self.group3()[2] * other.group1()[3]) - (self.group3()[0] * other.group0()[1]) - (self.group2()[2] * other.group0()[3])
                        + (self.group2()[0] * other.group1()[1])
                        + (self.group1()[3] * other.group0()[2])
                        + (self.group1()[2] * other.group1()[3])
                        + (self.group1()[1] * other.group0()[0])
                        + (self.group0()[3] * other.group0()[2])
                        - (self.group1()[0] * other.group0()[1])),
                    ((self.group0()[1] * other.group1()[1]) * -1.0),
                ])),
            // e4235, e4315, e4125, e3215
            (-(other.group0() * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[3]]))
                + (swizzle!(self.group1(), 2, 1, 2, 3) * Simd32x4::from([other.group1()[1], other.group0()[3], other.group0()[3], other.group1()[3]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                + (swizzle!(other.group1(), 0, 2, 0, 2) * Simd32x4::from([self.group0()[3], self.group1()[0], self.group1()[1], self.group2()[2]]))
                - (swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[2]]))
                + (swizzle!(self.group0(), 1, 3, 3, 3) * Simd32x4::from([other.group0()[2], other.group1()[1], other.group1()[2], other.group1()[3]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group0()[3]) - (self.group0()[0] * other.group1()[3])),
                    ((self.group0()[2] * other.group0()[0]) - (self.group0()[1] * other.group1()[3])),
                    (-(self.group0()[2] * other.group1()[3]) + (self.group0()[0] * other.group0()[1])),
                    (-(self.group3()[1] * other.group0()[1]) - (self.group3()[0] * other.group0()[0])
                        + (self.group2()[1] * other.group1()[1])
                        + (self.group2()[0] * other.group1()[0])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Line> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      100      134        0
    //    simd4       55       57        0
    // Totals...
    // yes simd      155      191        0
    //  no simd      320      362        0
    fn sandwich(self, other: Line) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group2()[3] * other.group0()[0]) + (self.group0()[2] * other.group0()[1])),
                    ((self.group2()[3] * other.group0()[1]) + (self.group0()[0] * other.group0()[2])),
                    ((self.group2()[3] * other.group0()[2]) + (self.group0()[1] * other.group0()[0])),
                    (-(self.group1()[2] * other.group0()[2])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e415, e425, e435, e321
            (-(swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group2()[3] * other.group1()[0]) + (self.group1()[2] * other.group0()[1]) - (self.group1()[1] * other.group0()[2])
                        + (self.group0()[3] * other.group0()[0])
                        + (self.group0()[2] * other.group1()[1])),
                    ((self.group2()[3] * other.group1()[1]) - (self.group1()[2] * other.group0()[0])
                        + (self.group1()[0] * other.group0()[2])
                        + (self.group0()[3] * other.group0()[1])
                        + (self.group0()[0] * other.group1()[2])),
                    ((self.group2()[3] * other.group1()[2]) + (self.group1()[1] * other.group0()[0]) - (self.group1()[0] * other.group0()[1])
                        + (self.group0()[3] * other.group0()[2])
                        + (self.group0()[1] * other.group1()[0])),
                    ((self.group3()[2] * other.group0()[2]) + (self.group3()[1] * other.group0()[1]) + (self.group3()[0] * other.group0()[0])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e235, e315, e125, e5
            (-(swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (swizzle!(self.group2(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group3()[3] * other.group0()[0])
                        + (self.group3()[2] * other.group1()[1])
                        + (self.group2()[2] * other.group0()[1])
                        + (self.group1()[3] * other.group1()[0])
                        + (self.group1()[2] * other.group1()[1])
                        + (self.group0()[3] * other.group1()[0])),
                    ((self.group3()[3] * other.group0()[1])
                        + (self.group3()[0] * other.group1()[2])
                        + (self.group2()[0] * other.group0()[2])
                        + (self.group1()[3] * other.group1()[1])
                        + (self.group0()[3] * other.group1()[1])
                        + (self.group1()[0] * other.group1()[2])),
                    ((self.group3()[3] * other.group0()[2])
                        + (self.group3()[1] * other.group1()[0])
                        + (self.group2()[1] * other.group0()[0])
                        + (self.group1()[3] * other.group1()[2])
                        + (self.group1()[1] * other.group1()[0])
                        + (self.group0()[3] * other.group1()[2])),
                    (-(self.group3()[1] * other.group1()[1])
                        - (self.group3()[0] * other.group1()[0])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group1()[1] * other.group1()[1])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group3()[2] * other.group0()[1]) + (self.group3()[1] * other.group0()[2]) + (self.group2()[3] * other.group1()[0])
                        - (self.group1()[3] * other.group0()[0])
                        + (self.group0()[2] * other.group1()[1])),
                    ((self.group3()[2] * other.group0()[0]) - (self.group3()[0] * other.group0()[2]) + (self.group2()[3] * other.group1()[1])
                        - (self.group1()[3] * other.group0()[1])
                        + (self.group0()[0] * other.group1()[2])),
                    (-(self.group3()[1] * other.group0()[0]) + (self.group3()[0] * other.group0()[1]) + (self.group2()[3] * other.group1()[2])
                        - (self.group1()[3] * other.group0()[2])
                        + (self.group0()[1] * other.group1()[0])),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Motor> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       81      114        0
    //    simd4       68       70        0
    // Totals...
    // yes simd      149      184        0
    //  no simd      353      394        0
    fn sandwich(self, other: Motor) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (swizzle!(self.group0(), 2, 0, 2, 3) * swizzle!(other.group0(), 1, 2, 3, 3))
                - (swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[2]]))
                + Simd32x4::from([
                    (self.group0()[0] * other.group0()[3]),
                    (self.group0()[1] * other.group0()[3]),
                    (self.group0()[1] * other.group0()[0]),
                    (-(self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e415, e425, e435, e321
            ((Simd32x4::from(self.group2()[3]) * other.group1())
                + (swizzle!(other.group0(), 1, 3, 3, 2) * Simd32x4::from([self.group1()[2], self.group1()[1], self.group1()[2], self.group3()[2]]))
                - (swizzle!(self.group1(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))
                + (swizzle!(other.group0(), 3, 2, 0, 1) * Simd32x4::from([self.group1()[0], self.group1()[0], self.group1()[1], self.group3()[1]]))
                + (swizzle!(other.group0(), 0, 1, 2, 0) * Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group3()[0]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * swizzle!(other.group1(), 2, 0, 1, 2))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group1()[1]) + (self.group0()[0] * other.group1()[3])),
                    ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3])),
                    ((self.group0()[2] * other.group1()[3]) + (self.group0()[1] * other.group1()[0])),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group3()[3]) * other.group0())
                + (swizzle!(other.group1(), 1, 3, 3, 3) * Simd32x4::from([self.group3()[2], self.group3()[1], self.group3()[2], self.group1()[3]]))
                - (swizzle!(self.group3(), 1, 2, 0, 2) * swizzle!(other.group1(), 2, 0, 1, 2))
                + (swizzle!(other.group1(), 3, 2, 0, 3) * Simd32x4::from([self.group3()[0], self.group3()[0], self.group3()[1], self.group0()[3]]))
                - (swizzle!(self.group2(), 1, 2, 0, 2) * swizzle!(other.group0(), 2, 0, 1, 2))
                - (swizzle!(other.group1(), 2, 0, 1, 1) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[1]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group0()[1])
                        + (self.group2()[0] * other.group0()[3])
                        + (self.group1()[3] * other.group1()[0])
                        + (self.group1()[2] * other.group1()[1])
                        + (self.group0()[3] * other.group1()[0])
                        + (self.group1()[0] * other.group1()[3])),
                    ((self.group2()[1] * other.group0()[3])
                        + (self.group2()[0] * other.group0()[2])
                        + (self.group1()[3] * other.group1()[1])
                        + (self.group1()[1] * other.group1()[3])
                        + (self.group0()[3] * other.group1()[1])
                        + (self.group1()[0] * other.group1()[2])),
                    ((self.group2()[2] * other.group0()[3])
                        + (self.group2()[1] * other.group0()[0])
                        + (self.group1()[3] * other.group1()[2])
                        + (self.group1()[2] * other.group1()[3])
                        + (self.group1()[1] * other.group1()[0])
                        + (self.group0()[3] * other.group1()[2])),
                    (-(self.group3()[0] * other.group1()[0])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[2] * other.group1()[2])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group0(), 1, 3, 3, 2) * Simd32x4::from([self.group3()[2], self.group3()[1], self.group3()[2], self.group0()[2]]))
                + (swizzle!(other.group0(), 2, 0, 1, 3) * Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[3]]))
                - (swizzle!(other.group0(), 3, 2, 0, 0) * Simd32x4::from([self.group3()[0], self.group3()[0], self.group3()[1], self.group0()[0]]))
                - (swizzle!(other.group0(), 0, 1, 2, 1) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[1]]))
                + Simd32x4::from([
                    ((self.group2()[3] * other.group1()[0]) + (self.group0()[2] * other.group1()[1]) + (self.group0()[0] * other.group1()[3])
                        - (self.group0()[1] * other.group1()[2])),
                    ((self.group2()[3] * other.group1()[1]) - (self.group0()[2] * other.group1()[0])
                        + (self.group0()[0] * other.group1()[2])
                        + (self.group0()[1] * other.group1()[3])),
                    ((self.group2()[3] * other.group1()[2]) + (self.group0()[2] * other.group1()[3]) - (self.group0()[0] * other.group1()[1])
                        + (self.group0()[1] * other.group1()[0])),
                    0.0,
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<MultiVector> for VersorOdd {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      253      320        0
    //    simd2       24       24        0
    //    simd3      105      106        0
    //    simd4       86       87        0
    // Totals...
    // yes simd      468      537        0
    //  no simd      960     1034        0
    fn sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_product = MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(self.group3()[3]) * Simd32x2::from([other[e35], other.group1()[3]]))
                + (Simd32x2::from(self.group2()[3]) * Simd32x2::from([other.group8()[3], other[e1]]))
                - (Simd32x2::from(self.group2()[2]) * Simd32x2::from([other.group4()[2], other.group6()[2]]))
                - (Simd32x2::from(self.group2()[1]) * Simd32x2::from([other.group4()[1], other.group6()[1]]))
                - (Simd32x2::from(self.group2()[0]) * Simd32x2::from([other.group4()[0], other.group6()[0]]))
                - (Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group10()[0], other.group5()[2]]))
                - (Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group10()[1], other.group5()[1]]))
                - (Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group10()[2], other.group5()[0]]))
                + (Simd32x2::from(self.group0()[3]) * other.group0())
                - (Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group3()[2], other.group7()[2]]))
                - (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group3()[0], other.group7()[0]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group3()[1], other.group7()[1]]))
                + Simd32x2::from([
                    (-(self.group3()[2] * other.group8()[2]) - (self.group3()[1] * other.group8()[1]) - (self.group3()[0] * other.group8()[0])
                        + (self.group1()[3] * other.group3()[3])),
                    ((self.group3()[2] * other.group1()[2]) + (self.group3()[1] * other.group1()[1]) + (self.group3()[0] * other.group1()[0])
                        - (self.group1()[3] * other.group5()[3])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group5(), 1, 2, 0, 3) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]))
                + (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group6()[2]]))
                + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group0()[1]]))
                - (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group6()[2]]))
                + (swizzle!(other.group1(), 1, 2, 0, 3) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[3]]))
                - (swizzle!(self.group1(), 1, 2, 0, 1) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group6()[1]]))
                + (swizzle!(self.group0(), 3, 3, 3, 2) * swizzle!(other.group1(), 0, 1, 2, 2))
                + (swizzle!(self.group0(), 2, 0, 2, 1) * Simd32x4::from([other.group7()[1], other.group7()[2], other[e1], other.group1()[1]]))
                + (swizzle!(self.group0(), 0, 1, 1, 0) * Simd32x4::from([other[e1], other[e1], other.group7()[0], other.group1()[0]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group7()[2], other.group7()[0], other.group7()[1], other.group5()[2]]))
                + Simd32x4::from([
                    (-(self.group3()[3] * other.group6()[0]) - (self.group3()[0] * other.group0()[1]) - (self.group2()[2] * other.group6()[1])
                        + (self.group2()[1] * other.group6()[2])
                        + (self.group1()[0] * other.group5()[3])),
                    (-(self.group3()[3] * other.group6()[1]) - (self.group3()[1] * other.group0()[1]) + (self.group2()[2] * other.group6()[0])
                        - (self.group2()[0] * other.group6()[2])
                        + (self.group1()[1] * other.group5()[3])),
                    (-(self.group3()[3] * other.group6()[2]) - (self.group3()[2] * other.group0()[1]) - (self.group2()[1] * other.group6()[0])
                        + (self.group2()[0] * other.group6()[1])
                        + (self.group1()[2] * other.group5()[3])),
                    ((self.group3()[1] * other.group6()[1]) + (self.group3()[0] * other.group6()[0])
                        - (self.group1()[0] * other.group6()[0])
                        - (self.group0()[1] * other.group5()[1])
                        - (self.group0()[0] * other.group5()[0])),
                ])),
            // e5
            ((self.group3()[3] * other.group5()[3]) + (self.group3()[3] * other.group0()[1])
                - (self.group3()[2] * other.group7()[2])
                - (self.group3()[1] * other.group7()[1])
                - (self.group3()[0] * other.group7()[0])
                - (self.group2()[2] * other.group5()[2])
                - (self.group2()[2] * other.group1()[2])
                - (self.group2()[1] * other.group5()[1])
                - (self.group2()[1] * other.group1()[1])
                - (self.group2()[0] * other.group5()[0])
                - (self.group2()[0] * other.group1()[0])
                + (self.group1()[3] * other[e1])
                - (self.group1()[2] * other.group7()[2])
                - (self.group1()[1] * other.group7()[1])
                + (self.group0()[3] * other[e1])
                - (self.group1()[0] * other.group7()[0])),
            // e15, e25, e35, e45
            ((Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group10()[2], other.group10()[1], other.group10()[0], other[e35]]))
                - (swizzle!(self.group3(), 3, 3, 3, 2) * Simd32x4::from([other.group8()[0], other.group8()[1], other.group8()[2], other.group10()[0]]))
                + (swizzle!(other.group3(), 1, 2, 0, 3) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group0()[3]]))
                - (swizzle!(self.group3(), 1, 2, 0, 1) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group10()[1]]))
                - (swizzle!(self.group2(), 2, 2, 2, 3) * Simd32x4::from([other.group8()[1], other.group10()[2], other.group3()[3], other.group8()[3]]))
                - (swizzle!(self.group2(), 1, 1, 1, 2) * Simd32x4::from([other.group10()[0], other.group3()[3], other.group8()[0], other.group4()[2]]))
                - (swizzle!(self.group2(), 0, 0, 0, 1) * Simd32x4::from([other.group3()[3], other.group8()[2], other.group10()[1], other.group4()[1]]))
                + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                + (swizzle!(other.group3(), 0, 1, 2, 2) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[2]]))
                + (swizzle!(other.group3(), 1, 1, 0, 0) * Simd32x4::from([self.group1()[2], self.group0()[3], self.group1()[1], self.group0()[0]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group8()[2]]))
                + (swizzle!(other.group3(), 0, 2, 2, 1) * Simd32x4::from([self.group0()[3], self.group1()[0], self.group0()[3], self.group0()[1]]))
                + Simd32x4::from([
                    ((self.group3()[0] * other.group8()[3])
                        + (self.group2()[2] * other.group10()[1])
                        + (self.group2()[1] * other.group8()[2])
                        + (self.group1()[0] * other.group8()[3])),
                    ((self.group3()[1] * other.group8()[3])
                        + (self.group2()[2] * other.group8()[0])
                        + (self.group2()[0] * other.group10()[0])
                        + (self.group1()[1] * other.group8()[3])),
                    ((self.group3()[2] * other.group8()[3])
                        + (self.group2()[1] * other.group10()[2])
                        + (self.group2()[0] * other.group8()[1])
                        + (self.group1()[2] * other.group8()[3])),
                    (-(self.group3()[0] * other.group10()[2])
                        - (self.group2()[0] * other.group4()[0])
                        - (self.group1()[1] * other.group8()[1])
                        - (self.group1()[0] * other.group8()[0])),
                ])),
            // e41, e42, e43
            (-(swizzle!(other.group4(), 1, 2, 0) * Simd32x3::from([self.group3()[2], self.group3()[0], self.group3()[1]]))
                + (swizzle!(other.group4(), 2, 0, 1) * Simd32x3::from([self.group3()[1], self.group3()[2], self.group3()[0]]))
                - (Simd32x3::from(other[e35]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(self.group2()[3]) * swizzle!(other.group10(), 2, 1, 0))
                + (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group8()[0], other.group8()[1], other.group8()[2]]))
                - (Simd32x3::from(self.group1()[3]) * other.group4())
                + (swizzle!(other.group4(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))
                - (swizzle!(other.group4(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                + (Simd32x3::from(other[e35]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(self.group0()[3]) * other.group4())
                + (swizzle!(other.group10(), 1, 0, 2) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))
                - (swizzle!(other.group10(), 0, 2, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + Simd32x3::from([
                    ((self.group0()[2] * other.group8()[1]) - (self.group0()[1] * other.group8()[2])),
                    (-(self.group0()[2] * other.group8()[0]) + (self.group0()[0] * other.group8()[2])),
                    ((self.group0()[1] * other.group8()[0]) - (self.group0()[0] * other.group8()[1])),
                ])),
            // e415, e425, e435, e321
            ((swizzle!(self.group3(), 3, 3, 3, 2) * Simd32x4::from([other.group6()[0], other.group6()[1], other.group6()[2], other.group5()[2]]))
                - (swizzle!(self.group3(), 2, 1, 2, 3) * Simd32x4::from([other.group1()[1], other.group5()[3], other.group5()[3], other.group1()[3]]))
                + (swizzle!(self.group3(), 1, 2, 0, 1) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group5()[1]]))
                + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other[e1]]))
                + (swizzle!(self.group2(), 2, 1, 2, 2) * Simd32x4::from([other.group6()[1], other.group1()[3], other.group1()[3], other.group6()[2]]))
                + (swizzle!(self.group2(), 0, 0, 1, 1) * Simd32x4::from([other.group1()[3], other.group6()[2], other.group6()[0], other.group6()[1]]))
                - (swizzle!(other.group1(), 0, 2, 0, 2) * Simd32x4::from([self.group1()[3], self.group3()[0], self.group3()[1], self.group1()[2]]))
                + (swizzle!(other.group5(), 1, 2, 0, 0) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[0]]))
                - (swizzle!(self.group1(), 1, 3, 3, 3) * Simd32x4::from([other.group5()[2], other.group1()[1], other.group1()[2], other.group0()[1]]))
                + (Simd32x4::from(self.group0()[3]) * other.group5())
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group7()[2], other.group7()[0], other.group7()[1], other.group7()[2]]))
                + Simd32x4::from([
                    (-(self.group3()[0] * other.group5()[3]) - (self.group2()[1] * other.group6()[2])
                        + (self.group1()[0] * other.group0()[1])
                        + (self.group0()[2] * other.group7()[1])
                        + (self.group0()[0] * other[e1])),
                    (-(self.group2()[2] * other.group6()[0]) - (self.group1()[2] * other.group5()[0])
                        + (self.group1()[1] * other.group0()[1])
                        + (self.group0()[0] * other.group7()[2])
                        + (self.group0()[1] * other[e1])),
                    (-(self.group2()[0] * other.group6()[1]) + (self.group1()[2] * other.group0()[1]) - (self.group1()[0] * other.group5()[1])
                        + (self.group0()[2] * other[e1])
                        + (self.group0()[1] * other.group7()[0])),
                    ((self.group2()[0] * other.group6()[0])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group7()[0])
                        - (self.group0()[1] * other.group7()[1])),
                ])),
            // e423, e431, e412
            (-(swizzle!(other.group6(), 1, 2, 0) * Simd32x3::from([self.group3()[2], self.group3()[0], self.group3()[1]]))
                + (swizzle!(other.group6(), 2, 0, 1) * Simd32x3::from([self.group3()[1], self.group3()[2], self.group3()[0]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group5()[0], other.group5()[1], other.group5()[2]]))
                - (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(self.group1()[3]) * other.group6())
                + (swizzle!(other.group6(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))
                - (swizzle!(other.group6(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(self.group0()[3]) * other.group6())
                + (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group5()[1], other.group1()[0], other.group0()[1]]))
                - (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[1], other.group5()[0], other.group5()[3]]))
                - (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group5()[2], other.group5()[3], other.group1()[0]]))
                + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], other.group0()[1], other.group5()[0]]))
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[1], other.group5()[2], other.group1()[1]]))
                - (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group5()[3], other.group1()[2], other.group5()[1]]))),
            // e235, e315, e125
            ((Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group5()[0], other.group5()[1], other.group5()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (swizzle!(other.group7(), 1, 2, 0) * Simd32x3::from([self.group3()[2], self.group3()[0], self.group3()[1]]))
                - (swizzle!(other.group7(), 2, 0, 1) * Simd32x3::from([self.group3()[1], self.group3()[2], self.group3()[0]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(other.group5()[3]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                + (Simd32x3::from(self.group1()[3]) * other.group7())
                + (swizzle!(other.group7(), 1, 1, 0) * Simd32x3::from([self.group1()[2], self.group0()[3], self.group1()[1]]))
                - (swizzle!(other.group7(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                + (swizzle!(other.group7(), 0, 2, 2) * Simd32x3::from([self.group0()[3], self.group1()[0], self.group0()[3]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + Simd32x3::from([
                    ((self.group2()[2] * other.group5()[1]) + (self.group2()[2] * other.group1()[1])
                        - (self.group2()[1] * other.group5()[2])
                        - (self.group2()[1] * other.group1()[2])),
                    (-(self.group2()[2] * other.group5()[0]) - (self.group2()[2] * other.group1()[0])
                        + (self.group2()[0] * other.group5()[2])
                        + (self.group2()[0] * other.group1()[2])),
                    ((self.group2()[1] * other.group5()[0]) + (self.group2()[1] * other.group1()[0])
                        - (self.group2()[0] * other.group5()[1])
                        - (self.group2()[0] * other.group1()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], other.group0()[0]]))
                - (swizzle!(self.group3(), 1, 2, 0, 3) * Simd32x4::from([other.group10()[0], other.group10()[2], other.group10()[1], other.group3()[3]]))
                - (swizzle!(other.group3(), 0, 1, 2, 2) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[2]]))
                + (swizzle!(self.group2(), 2, 1, 2, 2) * Simd32x4::from([other.group4()[1], other[e35], other[e35], other.group8()[2]]))
                - (swizzle!(self.group2(), 1, 2, 0, 2) * Simd32x4::from([other.group4()[2], other.group4()[0], other.group4()[1], other.group10()[0]]))
                + (swizzle!(self.group2(), 0, 0, 1, 1) * Simd32x4::from([other[e35], other.group4()[2], other.group4()[0], other.group8()[1]]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group10()[2], other.group10()[1], other.group10()[0], other.group8()[3]]))
                + (swizzle!(other.group8(), 1, 2, 0, 0) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group8()[2], other.group8()[0], other.group8()[1], other.group3()[2]]))
                + (Simd32x4::from(self.group0()[3]) * other.group8())
                - (swizzle!(other.group3(), 1, 2, 0, 1) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[1]]))
                + Simd32x4::from([
                    ((self.group3()[2] * other.group10()[1]) + (self.group3()[0] * other.group0()[0]) + (self.group1()[0] * other.group3()[3])
                        - (self.group0()[0] * other.group8()[3])
                        + (self.group0()[1] * other.group3()[2])),
                    ((self.group3()[1] * other.group0()[0])
                        + (self.group3()[0] * other.group10()[0])
                        + (self.group1()[1] * other.group3()[3])
                        + (self.group0()[2] * other.group3()[0])
                        - (self.group0()[1] * other.group8()[3])),
                    ((self.group3()[2] * other.group0()[0]) + (self.group3()[1] * other.group10()[2]) + (self.group1()[2] * other.group3()[3])
                        - (self.group0()[2] * other.group8()[3])
                        + (self.group0()[0] * other.group3()[1])),
                    (-(self.group3()[0] * other.group3()[0])
                        - (self.group2()[1] * other.group10()[1])
                        - (self.group2()[0] * other.group10()[2])
                        - (self.group1()[1] * other.group3()[1])
                        - (self.group1()[0] * other.group3()[0])),
                ])),
            // e1234
            ((self.group3()[2] * other.group4()[2])
                + (self.group3()[1] * other.group4()[1])
                + (self.group3()[0] * other.group4()[0])
                + (self.group2()[3] * other.group3()[3])
                + (self.group2()[3] * other.group0()[0])
                - (self.group1()[3] * other[e35])
                - (self.group1()[2] * other.group4()[2])
                - (self.group1()[1] * other.group4()[1])
                - (self.group1()[0] * other.group4()[0])
                + (self.group0()[3] * other[e35])
                - (self.group0()[2] * other.group10()[0])
                - (self.group0()[2] * other.group8()[2])
                - (self.group0()[1] * other.group10()[1])
                - (self.group0()[1] * other.group8()[1])
                - (self.group0()[0] * other.group8()[0])
                - (self.group0()[0] * other.group10()[2])),
            // e12, e31, e23
            ((Simd32x3::from(self.group3()[3]) * swizzle!(other.group4(), 2, 1, 0))
                + (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group3()[2], self.group3()[1], self.group3()[0]]))
                + (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group3()[2], other.group3()[1], other.group3()[0]]))
                + (Simd32x3::from(other[e35]) * Simd32x3::from([self.group2()[2], self.group2()[1], self.group2()[0]]))
                + (swizzle!(other.group4(), 0, 2, 1) * Simd32x3::from([self.group2()[1], self.group2()[0], self.group2()[2]]))
                - (swizzle!(other.group4(), 1, 0, 2) * Simd32x3::from([self.group2()[0], self.group2()[2], self.group2()[1]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group8()[2], other.group8()[1], other.group8()[0]]))
                + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[2], self.group1()[1], self.group1()[0]]))
                + (swizzle!(other.group10(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[0], self.group1()[2]]))
                - (swizzle!(other.group10(), 1, 2, 0) * Simd32x3::from([self.group1()[0], self.group1()[2], self.group1()[1]]))
                + (Simd32x3::from(self.group0()[3]) * other.group10())
                + (Simd32x3::from(other.group8()[3]) * Simd32x3::from([self.group0()[2], self.group0()[1], self.group0()[0]]))
                + Simd32x3::from([
                    ((self.group3()[1] * other.group8()[0]) - (self.group3()[0] * other.group8()[1]) - (self.group0()[0] * other.group3()[1])
                        + (self.group0()[1] * other.group3()[0])),
                    (-(self.group3()[2] * other.group8()[0]) + (self.group3()[0] * other.group8()[2]) - (self.group0()[2] * other.group3()[0])
                        + (self.group0()[0] * other.group3()[2])),
                    ((self.group3()[2] * other.group8()[1]) - (self.group3()[1] * other.group8()[2]) + (self.group0()[2] * other.group3()[1])
                        - (self.group0()[1] * other.group3()[2])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Plane> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       92      131        0
    //    simd4       49       50        0
    // Totals...
    // yes simd      141      181        0
    //  no simd      288      331        0
    fn sandwich(self, other: Plane) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((Simd32x4::from(self.group2()[3]) * other.group0())
                - (swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[2]]))
                + Simd32x4::from([
                    (self.group0()[2] * other.group0()[1]),
                    (self.group0()[0] * other.group0()[2]),
                    (self.group0()[1] * other.group0()[0]),
                    (-(self.group3()[1] * other.group0()[1]) - (self.group3()[0] * other.group0()[0])),
                ])),
            // e23, e31, e12, e45
            (-(swizzle!(other.group0(), 2, 0, 1, 3) * Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[3]]))
                + Simd32x4::from([
                    ((self.group3()[2] * other.group0()[1]) + (self.group0()[0] * other.group0()[3]) + (self.group1()[3] * other.group0()[0])),
                    ((self.group3()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[3]) + (self.group1()[3] * other.group0()[1])),
                    ((self.group3()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[3]) + (self.group1()[3] * other.group0()[2])),
                    (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
            // e15, e25, e35, e1234
            (-(swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group0()[2]]))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]))
                + Simd32x4::from([
                    ((self.group3()[0] * other.group0()[3]) + (self.group1()[0] * other.group0()[3]) + (self.group2()[1] * other.group0()[2])),
                    ((self.group3()[1] * other.group0()[3]) + (self.group2()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])),
                    ((self.group3()[2] * other.group0()[3]) + (self.group1()[2] * other.group0()[3]) + (self.group2()[0] * other.group0()[1])),
                    ((self.group0()[1] * other.group0()[1]) * -1.0),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                + (swizzle!(other.group0(), 0, 1, 2, 1) * Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group2()[1]]))
                + Simd32x4::from([
                    (-(self.group1()[1] * other.group0()[2]) - (self.group0()[0] * other.group0()[3])),
                    (-(self.group1()[2] * other.group0()[0]) - (self.group0()[1] * other.group0()[3])),
                    (-(self.group1()[0] * other.group0()[1]) - (self.group0()[2] * other.group0()[3])),
                    ((self.group2()[0] * other.group0()[0]) + (self.group0()[3] * other.group0()[3]) + (self.group1()[3] * other.group0()[3])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<RoundPoint> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       60       90        0
    //    simd4       61       65        0
    // Totals...
    // yes simd      121      155        0
    //  no simd      304      350        0
    fn sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                + (swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[2]]))
                + Simd32x4::from([
                    (-(self.group3()[0] * other.group0()[3]) - (self.group2()[3] * other.group0()[0]) - (self.group0()[2] * other.group0()[1])),
                    (-(self.group3()[1] * other.group0()[3]) - (self.group2()[3] * other.group0()[1]) - (self.group0()[0] * other.group0()[2])),
                    (-(self.group3()[2] * other.group0()[3]) - (self.group2()[3] * other.group0()[2]) - (self.group0()[1] * other.group0()[0])),
                    ((self.group3()[1] * other.group0()[1]) + (self.group2()[3] * other[e2]) + (self.group3()[0] * other.group0()[0])),
                ])),
            // e415, e425, e435, e321
            (-(swizzle!(self.group3(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))
                + (self.group2() * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other[e2]]))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group0(), 0, 1, 2, 2))
                + Simd32x4::from([
                    ((self.group3()[1] * other.group0()[2]) + (self.group0()[0] * other[e2])),
                    ((self.group3()[2] * other.group0()[0]) + (self.group0()[1] * other[e2])),
                    ((self.group3()[0] * other.group0()[1]) + (self.group0()[2] * other[e2])),
                    (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            ((Simd32x4::from(other[e2]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[3]])) + (self.group1() * Simd32x4::from(other[e2]))
                - (swizzle!(self.group2(), 1, 2, 0, 2) * swizzle!(other.group0(), 2, 0, 1, 2))
                + Simd32x4::from([
                    ((self.group3()[3] * other.group0()[0]) + (self.group2()[2] * other.group0()[1])),
                    ((self.group3()[3] * other.group0()[1]) + (self.group2()[0] * other.group0()[2])),
                    ((self.group3()[3] * other.group0()[2]) + (self.group2()[1] * other.group0()[0])),
                    (-(self.group2()[1] * other.group0()[1]) - (self.group2()[0] * other.group0()[0])),
                ])),
            // e1, e2, e3, e4
            (-(Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                + (swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[3]]))
                + (swizzle!(self.group0(), 0, 1, 2, 2) * Simd32x4::from([other[e2], other[e2], other[e2], other.group0()[2]]))
                + (swizzle!(self.group0(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))
                + (Simd32x4::from([-1.0, -1.0, -1.0, 1.0])
                    * swizzle!(other.group0(), 2, 0, 1, 1)
                    * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[1]]))),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Scalar> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       72       94        0
    //    simd4       42       47        0
    // Totals...
    // yes simd      114      141        0
    //  no simd      240      282        0
    fn sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (self.group0() * Simd32x4::from(other[scalar])),
            // e23, e31, e12, e45
            (self.group1() * Simd32x4::from(other[scalar])),
            // e15, e25, e35, e1234
            (self.group2() * Simd32x4::from(other[scalar])),
            // e4235, e4315, e4125, e3215
            (self.group3() * Simd32x4::from(other[scalar])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<Sphere> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       92      126        0
    //    simd4       53       56        0
    // Totals...
    // yes simd      145      182        0
    //  no simd      304      350        0
    fn sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(swizzle!(self.group3(), 0, 1, 2, 2) * Simd32x4::from([other[e4315], other[e4315], other[e4315], other.group0()[2]]))
                + (Simd32x4::from(self.group2()[3]) * other.group0())
                + (Simd32x4::from(other[e4315]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                - (swizzle!(other.group0(), 2, 0, 1, 1) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[1]]))
                + (Simd32x4::from([1.0, 1.0, 1.0, -1.0])
                    * swizzle!(other.group0(), 1, 2, 0, 0)
                    * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[0]]))),
            // e23, e31, e12, e45
            ((swizzle!(self.group3(), 2, 0, 1, 3) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other[e4315]]))
                - (swizzle!(other.group0(), 2, 0, 1, 3) * Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[3]]))
                + Simd32x4::from([
                    ((self.group2()[0] * other[e4315]) + (self.group0()[0] * other.group0()[3]) + (self.group1()[3] * other.group0()[0])),
                    ((self.group2()[1] * other[e4315]) + (self.group0()[1] * other.group0()[3]) + (self.group1()[3] * other.group0()[1])),
                    ((self.group2()[2] * other[e4315]) + (self.group0()[2] * other.group0()[3]) + (self.group1()[3] * other.group0()[2])),
                    (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
            // e15, e25, e35, e1234
            (-(swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group0()[2]]))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]))
                + Simd32x4::from([
                    ((self.group3()[0] * other.group0()[3]) + (self.group1()[0] * other.group0()[3]) + (self.group2()[1] * other.group0()[2])),
                    ((self.group3()[1] * other.group0()[3]) + (self.group2()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])),
                    ((self.group3()[2] * other.group0()[3]) + (self.group1()[2] * other.group0()[3]) + (self.group2()[0] * other.group0()[1])),
                    (-(self.group1()[3] * other[e4315]) + (self.group0()[3] * other[e4315]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(self.group2(), 0, 1, 2, 2) * Simd32x4::from([other[e4315], other[e4315], other[e4315], other.group0()[2]]))
                + (swizzle!(other.group0(), 1, 2, 0, 1) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[1]]))
                + (swizzle!(other.group0(), 0, 1, 2, 0) * Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group2()[0]]))
                + Simd32x4::from([
                    (-(self.group1()[1] * other.group0()[2]) - (self.group0()[0] * other.group0()[3])),
                    (-(self.group1()[2] * other.group0()[0]) - (self.group0()[1] * other.group0()[3])),
                    (-(self.group1()[0] * other.group0()[1]) - (self.group0()[2] * other.group0()[3])),
                    ((self.group0()[3] * other.group0()[3]) + (self.group1()[3] * other.group0()[3])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorEven> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       96      130        0
    //    simd4       96       98        0
    // Totals...
    // yes simd      192      228        0
    //  no simd      480      522        0
    fn sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[2]]))
                + (swizzle!(self.group3(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group3()[3]]))
                - (swizzle!(self.group2(), 3, 3, 3, 1) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[1]]))
                + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                - (swizzle!(other.group0(), 0, 1, 2, 0) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[0]]))
                + (swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[3]]))
                - (swizzle!(self.group1(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]))
                + (swizzle!(other.group3(), 3, 3, 3, 2) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[2]]))
                - (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group1()[3], other.group2()[2]]))
                + (swizzle!(other.group3(), 2, 0, 1, 1) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[1]]))
                - (swizzle!(self.group0(), 1, 1, 1, 0) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group3()[0], other.group2()[0]]))
                - (swizzle!(self.group0(), 0, 0, 0, 1) * Simd32x4::from([other.group1()[3], other.group3()[2], other.group1()[1], other.group2()[1]]))
                + Simd32x4::from([
                    (-(self.group3()[0] * other.group3()[3])
                        + (self.group0()[3] * other.group0()[0])
                        + (self.group0()[2] * other.group1()[1])
                        + (self.group0()[0] * other.group0()[3])),
                    (-(self.group3()[1] * other.group3()[3])
                        + (self.group0()[3] * other.group0()[1])
                        + (self.group0()[1] * other.group0()[3])
                        + (self.group0()[0] * other.group1()[2])),
                    (-(self.group3()[2] * other.group3()[3])
                        + (self.group0()[3] * other.group0()[2])
                        + (self.group0()[2] * other.group0()[3])
                        + (self.group0()[1] * other.group1()[0])),
                    ((self.group3()[0] * other.group3()[0])
                        - (self.group1()[2] * other.group1()[2])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])),
                ])),
            // e415, e425, e435, e321
            ((swizzle!(self.group3(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]))
                - (swizzle!(self.group3(), 2, 1, 2, 3) * Simd32x4::from([other.group3()[1], other.group1()[3], other.group1()[3], other.group3()[3]]))
                + (swizzle!(self.group3(), 1, 2, 0, 1) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[1]]))
                + (Simd32x4::from(self.group2()[3]) * other.group2())
                + (swizzle!(self.group2(), 2, 1, 2, 2) * Simd32x4::from([other.group0()[1], other.group3()[3], other.group3()[3], other.group0()[2]]))
                - (swizzle!(other.group0(), 2, 0, 1, 3) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group1()[3]]))
                + (swizzle!(self.group2(), 0, 0, 1, 1) * Simd32x4::from([other.group3()[3], other.group0()[2], other.group0()[0], other.group0()[1]]))
                - (swizzle!(other.group3(), 0, 2, 0, 2) * Simd32x4::from([self.group1()[3], self.group3()[0], self.group3()[1], self.group1()[2]]))
                + (swizzle!(other.group1(), 1, 2, 0, 0) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[0]]))
                - (swizzle!(self.group1(), 1, 3, 3, 1) * Simd32x4::from([other.group1()[2], other.group3()[1], other.group3()[2], other.group3()[1]]))
                + (swizzle!(other.group0(), 3, 3, 3, 0) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[0]]))
                + (Simd32x4::from(self.group0()[3]) * other.group1())
                - (swizzle!(self.group0(), 1, 2, 0, 2) * swizzle!(other.group2(), 2, 0, 1, 2))
                + Simd32x4::from([
                    (-(self.group3()[0] * other.group1()[3]) + (self.group0()[2] * other.group2()[1]) + (self.group0()[0] * other.group2()[3])),
                    (-(self.group1()[2] * other.group1()[0]) + (self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group2()[3])),
                    (-(self.group1()[0] * other.group1()[1]) + (self.group0()[2] * other.group2()[3]) + (self.group0()[1] * other.group2()[0])),
                    (-(self.group1()[0] * other.group3()[0]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                + (Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                + (swizzle!(other.group2(), 1, 3, 3, 3) * Simd32x4::from([self.group3()[2], self.group3()[1], self.group3()[2], self.group1()[3]]))
                - (swizzle!(self.group3(), 1, 2, 0, 2) * swizzle!(other.group2(), 2, 0, 1, 2))
                + (swizzle!(other.group2(), 3, 2, 0, 3) * Simd32x4::from([self.group3()[0], self.group3()[0], self.group3()[1], self.group0()[3]]))
                - (swizzle!(self.group2(), 1, 2, 0, 2) * swizzle!(other.group3(), 2, 0, 1, 2))
                - (swizzle!(self.group2(), 1, 2, 0, 2) * swizzle!(other.group1(), 2, 0, 1, 2))
                - (swizzle!(other.group2(), 2, 0, 1, 1) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[1]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group3()[1])
                        + (self.group2()[2] * other.group1()[1])
                        + (self.group2()[0] * other.group1()[3])
                        + (self.group2()[0] * other.group0()[3])
                        + (self.group1()[3] * other.group2()[0])
                        + (self.group1()[2] * other.group2()[1])
                        + (self.group0()[3] * other.group2()[0])
                        + (self.group1()[0] * other.group2()[3])),
                    ((self.group2()[1] * other.group1()[3])
                        + (self.group2()[1] * other.group0()[3])
                        + (self.group2()[0] * other.group3()[2])
                        + (self.group2()[0] * other.group1()[2])
                        + (self.group1()[3] * other.group2()[1])
                        + (self.group1()[1] * other.group2()[3])
                        + (self.group0()[3] * other.group2()[1])
                        + (self.group1()[0] * other.group2()[2])),
                    ((self.group2()[2] * other.group1()[3])
                        + (self.group2()[2] * other.group0()[3])
                        + (self.group2()[1] * other.group3()[0])
                        + (self.group2()[1] * other.group1()[0])
                        + (self.group1()[3] * other.group2()[2])
                        + (self.group1()[2] * other.group2()[3])
                        + (self.group1()[1] * other.group2()[0])
                        + (self.group0()[3] * other.group2()[2])),
                    (-(self.group3()[0] * other.group2()[0])
                        - (self.group2()[1] * other.group3()[1])
                        - (self.group2()[1] * other.group1()[1])
                        - (self.group2()[0] * other.group3()[0])
                        - (self.group2()[0] * other.group1()[0])
                        - (self.group1()[2] * other.group2()[2])
                        - (self.group1()[1] * other.group2()[1])
                        - (self.group1()[0] * other.group2()[0])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group1()[2]]))
                - (swizzle!(other.group1(), 1, 2, 0, 3) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]))
                + (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                - (swizzle!(other.group0(), 3, 3, 3, 1) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group1()[1]]))
                + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[3]]))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[0]]))
                + (swizzle!(other.group0(), 2, 0, 1, 1) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group3()[1]]))
                - (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                - (swizzle!(other.group1(), 0, 1, 2, 2) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[2]]))
                + (swizzle!(other.group3(), 1, 2, 0, 3) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[3]]))
                + (swizzle!(self.group0(), 3, 3, 3, 2) * swizzle!(other.group3(), 0, 1, 2, 2))
                + (swizzle!(self.group0(), 2, 0, 2, 1) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[3], other.group3()[1]]))
                + (swizzle!(self.group0(), 0, 1, 1, 0) * Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[0], other.group3()[0]]))
                - (swizzle!(self.group0(), 1, 2, 0, 1) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[1]]))
                + Simd32x4::from([
                    (-(self.group1()[1] * other.group3()[2]) + (self.group1()[0] * other.group1()[3])),
                    (-(self.group1()[2] * other.group3()[0]) + (self.group1()[1] * other.group1()[3])),
                    ((self.group1()[2] * other.group1()[3]) - (self.group1()[0] * other.group3()[1])),
                    ((self.group3()[0] * other.group0()[0]) - (self.group0()[0] * other.group1()[0])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
impl Sandwich<VersorOdd> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      144      182        0
    //    simd4       84       85        0
    // Totals...
    // yes simd      228      267        0
    //  no simd      480      522        0
    fn sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(swizzle!(self.group3(), 2, 1, 2, 2) * Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group3()[2]]))
                + (swizzle!(self.group3(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]))
                - (swizzle!(self.group3(), 0, 0, 1, 1) * Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group3()[1]]))
                + (Simd32x4::from(self.group2()[3]) * other.group3())
                + (other.group1() * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group1()[3]]))
                - (swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[2]]))
                + (swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[3]]))
                - (swizzle!(other.group0(), 2, 0, 1, 1) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[1]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[1], other.group2()[2]]))
                - (swizzle!(self.group0(), 1, 2, 0, 0) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group3()[1], other.group2()[0]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group2()[3])
                        + (self.group0()[3] * other.group0()[0])
                        + (self.group0()[2] * other.group3()[1])
                        + (self.group0()[2] * other.group1()[1])
                        + (self.group0()[0] * other.group0()[3])
                        + (self.group0()[0] * other.group1()[3])),
                    ((self.group1()[1] * other.group2()[3])
                        + (self.group0()[3] * other.group0()[1])
                        + (self.group0()[1] * other.group1()[3])
                        + (self.group0()[1] * other.group0()[3])
                        + (self.group0()[0] * other.group1()[2])
                        + (self.group0()[0] * other.group3()[2])),
                    ((self.group1()[2] * other.group2()[3])
                        + (self.group0()[3] * other.group0()[2])
                        + (self.group0()[2] * other.group1()[3])
                        + (self.group0()[2] * other.group0()[3])
                        + (self.group0()[1] * other.group3()[0])
                        + (self.group0()[1] * other.group1()[0])),
                    (-(self.group3()[0] * other.group3()[0])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[2] * other.group1()[2])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e23, e31, e12, e45
            ((Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[2]]))
                + (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[3]]))
                + (swizzle!(other.group2(), 0, 1, 2, 2) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[2]]))
                + (swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]))
                - (swizzle!(self.group2(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group3()[3]]))
                + (swizzle!(other.group2(), 3, 3, 3, 0) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[0]]))
                - (swizzle!(other.group1(), 2, 0, 1, 1) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[1]]))
                + (swizzle!(self.group0(), 3, 3, 3, 1) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[1]]))
                + Simd32x4::from([
                    ((self.group3()[2] * other.group3()[1])
                        + (self.group1()[3] * other.group3()[0])
                        + (self.group1()[2] * other.group1()[1])
                        + (self.group1()[0] * other.group0()[3])
                        + (self.group0()[2] * other.group2()[1])
                        + (self.group0()[0] * other.group3()[3])
                        - (self.group0()[1] * other.group2()[2])),
                    ((self.group3()[0] * other.group3()[2])
                        + (self.group1()[3] * other.group3()[1])
                        + (self.group1()[1] * other.group0()[3])
                        + (self.group1()[0] * other.group1()[2])
                        - (self.group0()[2] * other.group2()[0])
                        + (self.group0()[0] * other.group2()[2])
                        + (self.group0()[1] * other.group3()[3])),
                    ((self.group3()[1] * other.group3()[0])
                        + (self.group1()[3] * other.group3()[2])
                        + (self.group1()[2] * other.group0()[3])
                        + (self.group1()[1] * other.group1()[0])
                        + (self.group0()[2] * other.group3()[3])
                        - (self.group0()[0] * other.group2()[1])
                        + (self.group0()[1] * other.group2()[0])),
                    (-(self.group3()[0] * other.group1()[0])
                        - (self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[2] * other.group3()[2])
                        - (self.group1()[1] * other.group3()[1])
                        - (self.group1()[0] * other.group3()[0])),
                ])),
            // e15, e25, e35, e1234
            (-(swizzle!(other.group3(), 0, 1, 2, 2) * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group0()[2]]))
                + (swizzle!(self.group3(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]))
                + (swizzle!(self.group3(), 2, 1, 2, 1) * Simd32x4::from([other.group2()[1], other.group3()[3], other.group3()[3], other.group0()[1]]))
                - (swizzle!(other.group2(), 2, 0, 1, 3) * Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[3]]))
                + (swizzle!(self.group3(), 0, 0, 1, 0) * Simd32x4::from([other.group3()[3], other.group2()[2], other.group2()[0], other.group0()[0]]))
                - (swizzle!(other.group3(), 1, 2, 0, 1) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[1]]))
                + (swizzle!(self.group2(), 2, 2, 2, 3) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group0()[3], other.group1()[3]]))
                + (swizzle!(self.group2(), 1, 1, 1, 3) * Simd32x4::from([other.group3()[2], other.group0()[3], other.group1()[0], other.group0()[3]]))
                - (swizzle!(other.group1(), 2, 0, 3, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[2], self.group0()[2]]))
                - (swizzle!(other.group1(), 3, 3, 1, 1) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[0], self.group0()[1]]))
                + (other.group2() * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[3]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[2]]))
                + Simd32x4::from([
                    ((self.group2()[0] * other.group0()[3])
                        + (self.group1()[2] * other.group2()[1])
                        + (self.group0()[3] * other.group2()[0])
                        + (self.group1()[0] * other.group3()[3])),
                    ((self.group2()[0] * other.group1()[2])
                        + (self.group1()[1] * other.group3()[3])
                        + (self.group0()[3] * other.group2()[1])
                        + (self.group1()[0] * other.group2()[2])),
                    ((self.group2()[0] * other.group3()[1])
                        + (self.group1()[2] * other.group3()[3])
                        + (self.group1()[1] * other.group2()[0])
                        + (self.group0()[3] * other.group2()[2])),
                    (-(self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group3()[0])),
                ])),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(self.group3()[3]) * other.group0())
                - (swizzle!(self.group3(), 1, 2, 0, 3) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (swizzle!(other.group2(), 0, 1, 2, 2) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[2]]))
                + (swizzle!(self.group2(), 2, 1, 2, 2) * Simd32x4::from([other.group0()[1], other.group2()[3], other.group2()[3], other.group3()[2]]))
                - (swizzle!(self.group2(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + (swizzle!(self.group2(), 0, 0, 1, 1) * Simd32x4::from([other.group2()[3], other.group0()[2], other.group0()[0], other.group3()[1]]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + (swizzle!(other.group3(), 1, 2, 0, 0) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]))
                - (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[2]]))
                + (Simd32x4::from(self.group0()[3]) * other.group3())
                - (swizzle!(other.group2(), 1, 2, 0, 1) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[1]]))
                + Simd32x4::from([
                    ((self.group3()[2] * other.group1()[1]) + (self.group3()[0] * other.group0()[3]) + (self.group1()[0] * other.group1()[3])
                        - (self.group0()[0] * other.group3()[3])
                        + (self.group0()[1] * other.group2()[2])),
                    ((self.group3()[1] * other.group0()[3])
                        + (self.group3()[0] * other.group1()[2])
                        + (self.group1()[1] * other.group1()[3])
                        + (self.group0()[2] * other.group2()[0])
                        - (self.group0()[1] * other.group3()[3])),
                    ((self.group3()[2] * other.group0()[3]) + (self.group3()[1] * other.group1()[0]) + (self.group1()[2] * other.group1()[3])
                        - (self.group0()[2] * other.group3()[3])
                        + (self.group0()[0] * other.group2()[1])),
                    (-(self.group3()[0] * other.group2()[0])
                        - (self.group2()[1] * other.group1()[1])
                        - (self.group2()[0] * other.group1()[0])
                        - (self.group1()[1] * other.group2()[1])
                        - (self.group1()[0] * other.group2()[0])),
                ])),
        );
        return geometric_product.geometric_product(self.reverse());
    }
}
